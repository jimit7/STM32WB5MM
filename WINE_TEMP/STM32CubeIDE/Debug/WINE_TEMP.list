
WINE_TEMP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08007000  08007000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .ota_region   00000004  08007140  08007140  00001140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00016988  08007150  08007150  00001150  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000b98  0801dad8  0801dad8  00017ad8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  0801e670  0801e670  00018670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  0801e678  0801e678  00018678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0801e67c  0801e67c  0001867c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ota_region_end 00000004  0801e680  0801e680  00018680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000260  20000008  0801e684  00019008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_DRIVER_CONTEXT 00000035  20000268  0801e8e4  00019268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 SYSTEM_DRIVER_CONTEXT 00000011  200002a0  0801e919  000192a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000008d4  200002b8  0801e92a  000192b8  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  20000b8c  0801e92a  00019b8c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000192b1  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  0001a000  2**2
                  ALLOC
 15 MB_MEM1       000001bc  20030028  20030028  0001a000  2**2
                  ALLOC
 16 MB_MEM2       00000883  200301e4  200301e4  0001a000  2**2
                  ALLOC
 17 .debug_info   0003dfd9  00000000  00000000  000192e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00008b5e  00000000  00000000  000572ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003598  00000000  00000000  0005fe18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 000028ec  00000000  00000000  000633b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00033d5a  00000000  00000000  00065c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00044975  00000000  00000000  000999f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    00111297  00000000  00000000  000de36b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000043  00000000  00000000  001ef602  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000f500  00000000  00000000  001ef648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 0000007b  00000000  00000000  001feb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08007150 <__do_global_dtors_aux>:
 8007150:	b510      	push	{r4, lr}
 8007152:	4c05      	ldr	r4, [pc, #20]	@ (8007168 <__do_global_dtors_aux+0x18>)
 8007154:	7823      	ldrb	r3, [r4, #0]
 8007156:	b933      	cbnz	r3, 8007166 <__do_global_dtors_aux+0x16>
 8007158:	4b04      	ldr	r3, [pc, #16]	@ (800716c <__do_global_dtors_aux+0x1c>)
 800715a:	b113      	cbz	r3, 8007162 <__do_global_dtors_aux+0x12>
 800715c:	4804      	ldr	r0, [pc, #16]	@ (8007170 <__do_global_dtors_aux+0x20>)
 800715e:	f3af 8000 	nop.w
 8007162:	2301      	movs	r3, #1
 8007164:	7023      	strb	r3, [r4, #0]
 8007166:	bd10      	pop	{r4, pc}
 8007168:	200002b8 	.word	0x200002b8
 800716c:	00000000 	.word	0x00000000
 8007170:	0801dac0 	.word	0x0801dac0

08007174 <frame_dummy>:
 8007174:	b508      	push	{r3, lr}
 8007176:	4b03      	ldr	r3, [pc, #12]	@ (8007184 <frame_dummy+0x10>)
 8007178:	b11b      	cbz	r3, 8007182 <frame_dummy+0xe>
 800717a:	4903      	ldr	r1, [pc, #12]	@ (8007188 <frame_dummy+0x14>)
 800717c:	4803      	ldr	r0, [pc, #12]	@ (800718c <frame_dummy+0x18>)
 800717e:	f3af 8000 	nop.w
 8007182:	bd08      	pop	{r3, pc}
 8007184:	00000000 	.word	0x00000000
 8007188:	200002bc 	.word	0x200002bc
 800718c:	0801dac0 	.word	0x0801dac0

08007190 <memchr>:
 8007190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8007194:	2a10      	cmp	r2, #16
 8007196:	db2b      	blt.n	80071f0 <memchr+0x60>
 8007198:	f010 0f07 	tst.w	r0, #7
 800719c:	d008      	beq.n	80071b0 <memchr+0x20>
 800719e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80071a2:	3a01      	subs	r2, #1
 80071a4:	428b      	cmp	r3, r1
 80071a6:	d02d      	beq.n	8007204 <memchr+0x74>
 80071a8:	f010 0f07 	tst.w	r0, #7
 80071ac:	b342      	cbz	r2, 8007200 <memchr+0x70>
 80071ae:	d1f6      	bne.n	800719e <memchr+0xe>
 80071b0:	b4f0      	push	{r4, r5, r6, r7}
 80071b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80071b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80071ba:	f022 0407 	bic.w	r4, r2, #7
 80071be:	f07f 0700 	mvns.w	r7, #0
 80071c2:	2300      	movs	r3, #0
 80071c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80071c8:	3c08      	subs	r4, #8
 80071ca:	ea85 0501 	eor.w	r5, r5, r1
 80071ce:	ea86 0601 	eor.w	r6, r6, r1
 80071d2:	fa85 f547 	uadd8	r5, r5, r7
 80071d6:	faa3 f587 	sel	r5, r3, r7
 80071da:	fa86 f647 	uadd8	r6, r6, r7
 80071de:	faa5 f687 	sel	r6, r5, r7
 80071e2:	b98e      	cbnz	r6, 8007208 <memchr+0x78>
 80071e4:	d1ee      	bne.n	80071c4 <memchr+0x34>
 80071e6:	bcf0      	pop	{r4, r5, r6, r7}
 80071e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80071ec:	f002 0207 	and.w	r2, r2, #7
 80071f0:	b132      	cbz	r2, 8007200 <memchr+0x70>
 80071f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80071f6:	3a01      	subs	r2, #1
 80071f8:	ea83 0301 	eor.w	r3, r3, r1
 80071fc:	b113      	cbz	r3, 8007204 <memchr+0x74>
 80071fe:	d1f8      	bne.n	80071f2 <memchr+0x62>
 8007200:	2000      	movs	r0, #0
 8007202:	4770      	bx	lr
 8007204:	3801      	subs	r0, #1
 8007206:	4770      	bx	lr
 8007208:	2d00      	cmp	r5, #0
 800720a:	bf06      	itte	eq
 800720c:	4635      	moveq	r5, r6
 800720e:	3803      	subeq	r0, #3
 8007210:	3807      	subne	r0, #7
 8007212:	f015 0f01 	tst.w	r5, #1
 8007216:	d107      	bne.n	8007228 <memchr+0x98>
 8007218:	3001      	adds	r0, #1
 800721a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800721e:	bf02      	ittt	eq
 8007220:	3001      	addeq	r0, #1
 8007222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8007226:	3001      	addeq	r0, #1
 8007228:	bcf0      	pop	{r4, r5, r6, r7}
 800722a:	3801      	subs	r0, #1
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop

08007230 <strlen>:
 8007230:	4603      	mov	r3, r0
 8007232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007236:	2a00      	cmp	r2, #0
 8007238:	d1fb      	bne.n	8007232 <strlen+0x2>
 800723a:	1a18      	subs	r0, r3, r0
 800723c:	3801      	subs	r0, #1
 800723e:	4770      	bx	lr

08007240 <__aeabi_drsub>:
 8007240:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8007244:	e002      	b.n	800724c <__adddf3>
 8007246:	bf00      	nop

08007248 <__aeabi_dsub>:
 8007248:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800724c <__adddf3>:
 800724c:	b530      	push	{r4, r5, lr}
 800724e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8007252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8007256:	ea94 0f05 	teq	r4, r5
 800725a:	bf08      	it	eq
 800725c:	ea90 0f02 	teqeq	r0, r2
 8007260:	bf1f      	itttt	ne
 8007262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8007266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800726a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800726e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007272:	f000 80e2 	beq.w	800743a <__adddf3+0x1ee>
 8007276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800727a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800727e:	bfb8      	it	lt
 8007280:	426d      	neglt	r5, r5
 8007282:	dd0c      	ble.n	800729e <__adddf3+0x52>
 8007284:	442c      	add	r4, r5
 8007286:	ea80 0202 	eor.w	r2, r0, r2
 800728a:	ea81 0303 	eor.w	r3, r1, r3
 800728e:	ea82 0000 	eor.w	r0, r2, r0
 8007292:	ea83 0101 	eor.w	r1, r3, r1
 8007296:	ea80 0202 	eor.w	r2, r0, r2
 800729a:	ea81 0303 	eor.w	r3, r1, r3
 800729e:	2d36      	cmp	r5, #54	@ 0x36
 80072a0:	bf88      	it	hi
 80072a2:	bd30      	pophi	{r4, r5, pc}
 80072a4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80072a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80072ac:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80072b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80072b4:	d002      	beq.n	80072bc <__adddf3+0x70>
 80072b6:	4240      	negs	r0, r0
 80072b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80072bc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80072c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80072c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80072c8:	d002      	beq.n	80072d0 <__adddf3+0x84>
 80072ca:	4252      	negs	r2, r2
 80072cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80072d0:	ea94 0f05 	teq	r4, r5
 80072d4:	f000 80a7 	beq.w	8007426 <__adddf3+0x1da>
 80072d8:	f1a4 0401 	sub.w	r4, r4, #1
 80072dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80072e0:	db0d      	blt.n	80072fe <__adddf3+0xb2>
 80072e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80072e6:	fa22 f205 	lsr.w	r2, r2, r5
 80072ea:	1880      	adds	r0, r0, r2
 80072ec:	f141 0100 	adc.w	r1, r1, #0
 80072f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80072f4:	1880      	adds	r0, r0, r2
 80072f6:	fa43 f305 	asr.w	r3, r3, r5
 80072fa:	4159      	adcs	r1, r3
 80072fc:	e00e      	b.n	800731c <__adddf3+0xd0>
 80072fe:	f1a5 0520 	sub.w	r5, r5, #32
 8007302:	f10e 0e20 	add.w	lr, lr, #32
 8007306:	2a01      	cmp	r2, #1
 8007308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800730c:	bf28      	it	cs
 800730e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8007312:	fa43 f305 	asr.w	r3, r3, r5
 8007316:	18c0      	adds	r0, r0, r3
 8007318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800731c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8007320:	d507      	bpl.n	8007332 <__adddf3+0xe6>
 8007322:	f04f 0e00 	mov.w	lr, #0
 8007326:	f1dc 0c00 	rsbs	ip, ip, #0
 800732a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800732e:	eb6e 0101 	sbc.w	r1, lr, r1
 8007332:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8007336:	d31b      	bcc.n	8007370 <__adddf3+0x124>
 8007338:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800733c:	d30c      	bcc.n	8007358 <__adddf3+0x10c>
 800733e:	0849      	lsrs	r1, r1, #1
 8007340:	ea5f 0030 	movs.w	r0, r0, rrx
 8007344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8007348:	f104 0401 	add.w	r4, r4, #1
 800734c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8007350:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8007354:	f080 809a 	bcs.w	800748c <__adddf3+0x240>
 8007358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800735c:	bf08      	it	eq
 800735e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8007362:	f150 0000 	adcs.w	r0, r0, #0
 8007366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800736a:	ea41 0105 	orr.w	r1, r1, r5
 800736e:	bd30      	pop	{r4, r5, pc}
 8007370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8007374:	4140      	adcs	r0, r0
 8007376:	eb41 0101 	adc.w	r1, r1, r1
 800737a:	3c01      	subs	r4, #1
 800737c:	bf28      	it	cs
 800737e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8007382:	d2e9      	bcs.n	8007358 <__adddf3+0x10c>
 8007384:	f091 0f00 	teq	r1, #0
 8007388:	bf04      	itt	eq
 800738a:	4601      	moveq	r1, r0
 800738c:	2000      	moveq	r0, #0
 800738e:	fab1 f381 	clz	r3, r1
 8007392:	bf08      	it	eq
 8007394:	3320      	addeq	r3, #32
 8007396:	f1a3 030b 	sub.w	r3, r3, #11
 800739a:	f1b3 0220 	subs.w	r2, r3, #32
 800739e:	da0c      	bge.n	80073ba <__adddf3+0x16e>
 80073a0:	320c      	adds	r2, #12
 80073a2:	dd08      	ble.n	80073b6 <__adddf3+0x16a>
 80073a4:	f102 0c14 	add.w	ip, r2, #20
 80073a8:	f1c2 020c 	rsb	r2, r2, #12
 80073ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80073b0:	fa21 f102 	lsr.w	r1, r1, r2
 80073b4:	e00c      	b.n	80073d0 <__adddf3+0x184>
 80073b6:	f102 0214 	add.w	r2, r2, #20
 80073ba:	bfd8      	it	le
 80073bc:	f1c2 0c20 	rsble	ip, r2, #32
 80073c0:	fa01 f102 	lsl.w	r1, r1, r2
 80073c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80073c8:	bfdc      	itt	le
 80073ca:	ea41 010c 	orrle.w	r1, r1, ip
 80073ce:	4090      	lslle	r0, r2
 80073d0:	1ae4      	subs	r4, r4, r3
 80073d2:	bfa2      	ittt	ge
 80073d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80073d8:	4329      	orrge	r1, r5
 80073da:	bd30      	popge	{r4, r5, pc}
 80073dc:	ea6f 0404 	mvn.w	r4, r4
 80073e0:	3c1f      	subs	r4, #31
 80073e2:	da1c      	bge.n	800741e <__adddf3+0x1d2>
 80073e4:	340c      	adds	r4, #12
 80073e6:	dc0e      	bgt.n	8007406 <__adddf3+0x1ba>
 80073e8:	f104 0414 	add.w	r4, r4, #20
 80073ec:	f1c4 0220 	rsb	r2, r4, #32
 80073f0:	fa20 f004 	lsr.w	r0, r0, r4
 80073f4:	fa01 f302 	lsl.w	r3, r1, r2
 80073f8:	ea40 0003 	orr.w	r0, r0, r3
 80073fc:	fa21 f304 	lsr.w	r3, r1, r4
 8007400:	ea45 0103 	orr.w	r1, r5, r3
 8007404:	bd30      	pop	{r4, r5, pc}
 8007406:	f1c4 040c 	rsb	r4, r4, #12
 800740a:	f1c4 0220 	rsb	r2, r4, #32
 800740e:	fa20 f002 	lsr.w	r0, r0, r2
 8007412:	fa01 f304 	lsl.w	r3, r1, r4
 8007416:	ea40 0003 	orr.w	r0, r0, r3
 800741a:	4629      	mov	r1, r5
 800741c:	bd30      	pop	{r4, r5, pc}
 800741e:	fa21 f004 	lsr.w	r0, r1, r4
 8007422:	4629      	mov	r1, r5
 8007424:	bd30      	pop	{r4, r5, pc}
 8007426:	f094 0f00 	teq	r4, #0
 800742a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800742e:	bf06      	itte	eq
 8007430:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8007434:	3401      	addeq	r4, #1
 8007436:	3d01      	subne	r5, #1
 8007438:	e74e      	b.n	80072d8 <__adddf3+0x8c>
 800743a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800743e:	bf18      	it	ne
 8007440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007444:	d029      	beq.n	800749a <__adddf3+0x24e>
 8007446:	ea94 0f05 	teq	r4, r5
 800744a:	bf08      	it	eq
 800744c:	ea90 0f02 	teqeq	r0, r2
 8007450:	d005      	beq.n	800745e <__adddf3+0x212>
 8007452:	ea54 0c00 	orrs.w	ip, r4, r0
 8007456:	bf04      	itt	eq
 8007458:	4619      	moveq	r1, r3
 800745a:	4610      	moveq	r0, r2
 800745c:	bd30      	pop	{r4, r5, pc}
 800745e:	ea91 0f03 	teq	r1, r3
 8007462:	bf1e      	ittt	ne
 8007464:	2100      	movne	r1, #0
 8007466:	2000      	movne	r0, #0
 8007468:	bd30      	popne	{r4, r5, pc}
 800746a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800746e:	d105      	bne.n	800747c <__adddf3+0x230>
 8007470:	0040      	lsls	r0, r0, #1
 8007472:	4149      	adcs	r1, r1
 8007474:	bf28      	it	cs
 8007476:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800747a:	bd30      	pop	{r4, r5, pc}
 800747c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8007480:	bf3c      	itt	cc
 8007482:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8007486:	bd30      	popcc	{r4, r5, pc}
 8007488:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800748c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8007490:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007494:	f04f 0000 	mov.w	r0, #0
 8007498:	bd30      	pop	{r4, r5, pc}
 800749a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800749e:	bf1a      	itte	ne
 80074a0:	4619      	movne	r1, r3
 80074a2:	4610      	movne	r0, r2
 80074a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80074a8:	bf1c      	itt	ne
 80074aa:	460b      	movne	r3, r1
 80074ac:	4602      	movne	r2, r0
 80074ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80074b2:	bf06      	itte	eq
 80074b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80074b8:	ea91 0f03 	teqeq	r1, r3
 80074bc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80074c0:	bd30      	pop	{r4, r5, pc}
 80074c2:	bf00      	nop

080074c4 <__aeabi_ui2d>:
 80074c4:	f090 0f00 	teq	r0, #0
 80074c8:	bf04      	itt	eq
 80074ca:	2100      	moveq	r1, #0
 80074cc:	4770      	bxeq	lr
 80074ce:	b530      	push	{r4, r5, lr}
 80074d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80074d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80074d8:	f04f 0500 	mov.w	r5, #0
 80074dc:	f04f 0100 	mov.w	r1, #0
 80074e0:	e750      	b.n	8007384 <__adddf3+0x138>
 80074e2:	bf00      	nop

080074e4 <__aeabi_i2d>:
 80074e4:	f090 0f00 	teq	r0, #0
 80074e8:	bf04      	itt	eq
 80074ea:	2100      	moveq	r1, #0
 80074ec:	4770      	bxeq	lr
 80074ee:	b530      	push	{r4, r5, lr}
 80074f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80074f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80074f8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80074fc:	bf48      	it	mi
 80074fe:	4240      	negmi	r0, r0
 8007500:	f04f 0100 	mov.w	r1, #0
 8007504:	e73e      	b.n	8007384 <__adddf3+0x138>
 8007506:	bf00      	nop

08007508 <__aeabi_f2d>:
 8007508:	0042      	lsls	r2, r0, #1
 800750a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800750e:	ea4f 0131 	mov.w	r1, r1, rrx
 8007512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8007516:	bf1f      	itttt	ne
 8007518:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800751c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8007520:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8007524:	4770      	bxne	lr
 8007526:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800752a:	bf08      	it	eq
 800752c:	4770      	bxeq	lr
 800752e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8007532:	bf04      	itt	eq
 8007534:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8007538:	4770      	bxeq	lr
 800753a:	b530      	push	{r4, r5, lr}
 800753c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8007540:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8007544:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8007548:	e71c      	b.n	8007384 <__adddf3+0x138>
 800754a:	bf00      	nop

0800754c <__aeabi_ul2d>:
 800754c:	ea50 0201 	orrs.w	r2, r0, r1
 8007550:	bf08      	it	eq
 8007552:	4770      	bxeq	lr
 8007554:	b530      	push	{r4, r5, lr}
 8007556:	f04f 0500 	mov.w	r5, #0
 800755a:	e00a      	b.n	8007572 <__aeabi_l2d+0x16>

0800755c <__aeabi_l2d>:
 800755c:	ea50 0201 	orrs.w	r2, r0, r1
 8007560:	bf08      	it	eq
 8007562:	4770      	bxeq	lr
 8007564:	b530      	push	{r4, r5, lr}
 8007566:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800756a:	d502      	bpl.n	8007572 <__aeabi_l2d+0x16>
 800756c:	4240      	negs	r0, r0
 800756e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007572:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8007576:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800757a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800757e:	f43f aed8 	beq.w	8007332 <__adddf3+0xe6>
 8007582:	f04f 0203 	mov.w	r2, #3
 8007586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800758a:	bf18      	it	ne
 800758c:	3203      	addne	r2, #3
 800758e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007592:	bf18      	it	ne
 8007594:	3203      	addne	r2, #3
 8007596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800759a:	f1c2 0320 	rsb	r3, r2, #32
 800759e:	fa00 fc03 	lsl.w	ip, r0, r3
 80075a2:	fa20 f002 	lsr.w	r0, r0, r2
 80075a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80075aa:	ea40 000e 	orr.w	r0, r0, lr
 80075ae:	fa21 f102 	lsr.w	r1, r1, r2
 80075b2:	4414      	add	r4, r2
 80075b4:	e6bd      	b.n	8007332 <__adddf3+0xe6>
 80075b6:	bf00      	nop

080075b8 <__aeabi_dmul>:
 80075b8:	b570      	push	{r4, r5, r6, lr}
 80075ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80075be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80075c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80075c6:	bf1d      	ittte	ne
 80075c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80075cc:	ea94 0f0c 	teqne	r4, ip
 80075d0:	ea95 0f0c 	teqne	r5, ip
 80075d4:	f000 f8de 	bleq	8007794 <__aeabi_dmul+0x1dc>
 80075d8:	442c      	add	r4, r5
 80075da:	ea81 0603 	eor.w	r6, r1, r3
 80075de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80075e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80075e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80075ea:	bf18      	it	ne
 80075ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80075f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80075f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075f8:	d038      	beq.n	800766c <__aeabi_dmul+0xb4>
 80075fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80075fe:	f04f 0500 	mov.w	r5, #0
 8007602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8007606:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800760a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800760e:	f04f 0600 	mov.w	r6, #0
 8007612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8007616:	f09c 0f00 	teq	ip, #0
 800761a:	bf18      	it	ne
 800761c:	f04e 0e01 	orrne.w	lr, lr, #1
 8007620:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8007624:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8007628:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800762c:	d204      	bcs.n	8007638 <__aeabi_dmul+0x80>
 800762e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8007632:	416d      	adcs	r5, r5
 8007634:	eb46 0606 	adc.w	r6, r6, r6
 8007638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800763c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8007640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8007644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8007648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800764c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8007650:	bf88      	it	hi
 8007652:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8007656:	d81e      	bhi.n	8007696 <__aeabi_dmul+0xde>
 8007658:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800765c:	bf08      	it	eq
 800765e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8007662:	f150 0000 	adcs.w	r0, r0, #0
 8007666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800766a:	bd70      	pop	{r4, r5, r6, pc}
 800766c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8007670:	ea46 0101 	orr.w	r1, r6, r1
 8007674:	ea40 0002 	orr.w	r0, r0, r2
 8007678:	ea81 0103 	eor.w	r1, r1, r3
 800767c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8007680:	bfc2      	ittt	gt
 8007682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8007686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800768a:	bd70      	popgt	{r4, r5, r6, pc}
 800768c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8007690:	f04f 0e00 	mov.w	lr, #0
 8007694:	3c01      	subs	r4, #1
 8007696:	f300 80ab 	bgt.w	80077f0 <__aeabi_dmul+0x238>
 800769a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800769e:	bfde      	ittt	le
 80076a0:	2000      	movle	r0, #0
 80076a2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80076a6:	bd70      	pople	{r4, r5, r6, pc}
 80076a8:	f1c4 0400 	rsb	r4, r4, #0
 80076ac:	3c20      	subs	r4, #32
 80076ae:	da35      	bge.n	800771c <__aeabi_dmul+0x164>
 80076b0:	340c      	adds	r4, #12
 80076b2:	dc1b      	bgt.n	80076ec <__aeabi_dmul+0x134>
 80076b4:	f104 0414 	add.w	r4, r4, #20
 80076b8:	f1c4 0520 	rsb	r5, r4, #32
 80076bc:	fa00 f305 	lsl.w	r3, r0, r5
 80076c0:	fa20 f004 	lsr.w	r0, r0, r4
 80076c4:	fa01 f205 	lsl.w	r2, r1, r5
 80076c8:	ea40 0002 	orr.w	r0, r0, r2
 80076cc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80076d0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80076d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80076d8:	fa21 f604 	lsr.w	r6, r1, r4
 80076dc:	eb42 0106 	adc.w	r1, r2, r6
 80076e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80076e4:	bf08      	it	eq
 80076e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80076ea:	bd70      	pop	{r4, r5, r6, pc}
 80076ec:	f1c4 040c 	rsb	r4, r4, #12
 80076f0:	f1c4 0520 	rsb	r5, r4, #32
 80076f4:	fa00 f304 	lsl.w	r3, r0, r4
 80076f8:	fa20 f005 	lsr.w	r0, r0, r5
 80076fc:	fa01 f204 	lsl.w	r2, r1, r4
 8007700:	ea40 0002 	orr.w	r0, r0, r2
 8007704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8007708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800770c:	f141 0100 	adc.w	r1, r1, #0
 8007710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007714:	bf08      	it	eq
 8007716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800771a:	bd70      	pop	{r4, r5, r6, pc}
 800771c:	f1c4 0520 	rsb	r5, r4, #32
 8007720:	fa00 f205 	lsl.w	r2, r0, r5
 8007724:	ea4e 0e02 	orr.w	lr, lr, r2
 8007728:	fa20 f304 	lsr.w	r3, r0, r4
 800772c:	fa01 f205 	lsl.w	r2, r1, r5
 8007730:	ea43 0302 	orr.w	r3, r3, r2
 8007734:	fa21 f004 	lsr.w	r0, r1, r4
 8007738:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800773c:	fa21 f204 	lsr.w	r2, r1, r4
 8007740:	ea20 0002 	bic.w	r0, r0, r2
 8007744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8007748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800774c:	bf08      	it	eq
 800774e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8007752:	bd70      	pop	{r4, r5, r6, pc}
 8007754:	f094 0f00 	teq	r4, #0
 8007758:	d10f      	bne.n	800777a <__aeabi_dmul+0x1c2>
 800775a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800775e:	0040      	lsls	r0, r0, #1
 8007760:	eb41 0101 	adc.w	r1, r1, r1
 8007764:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8007768:	bf08      	it	eq
 800776a:	3c01      	subeq	r4, #1
 800776c:	d0f7      	beq.n	800775e <__aeabi_dmul+0x1a6>
 800776e:	ea41 0106 	orr.w	r1, r1, r6
 8007772:	f095 0f00 	teq	r5, #0
 8007776:	bf18      	it	ne
 8007778:	4770      	bxne	lr
 800777a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800777e:	0052      	lsls	r2, r2, #1
 8007780:	eb43 0303 	adc.w	r3, r3, r3
 8007784:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8007788:	bf08      	it	eq
 800778a:	3d01      	subeq	r5, #1
 800778c:	d0f7      	beq.n	800777e <__aeabi_dmul+0x1c6>
 800778e:	ea43 0306 	orr.w	r3, r3, r6
 8007792:	4770      	bx	lr
 8007794:	ea94 0f0c 	teq	r4, ip
 8007798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800779c:	bf18      	it	ne
 800779e:	ea95 0f0c 	teqne	r5, ip
 80077a2:	d00c      	beq.n	80077be <__aeabi_dmul+0x206>
 80077a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80077a8:	bf18      	it	ne
 80077aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80077ae:	d1d1      	bne.n	8007754 <__aeabi_dmul+0x19c>
 80077b0:	ea81 0103 	eor.w	r1, r1, r3
 80077b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80077b8:	f04f 0000 	mov.w	r0, #0
 80077bc:	bd70      	pop	{r4, r5, r6, pc}
 80077be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80077c2:	bf06      	itte	eq
 80077c4:	4610      	moveq	r0, r2
 80077c6:	4619      	moveq	r1, r3
 80077c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80077cc:	d019      	beq.n	8007802 <__aeabi_dmul+0x24a>
 80077ce:	ea94 0f0c 	teq	r4, ip
 80077d2:	d102      	bne.n	80077da <__aeabi_dmul+0x222>
 80077d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80077d8:	d113      	bne.n	8007802 <__aeabi_dmul+0x24a>
 80077da:	ea95 0f0c 	teq	r5, ip
 80077de:	d105      	bne.n	80077ec <__aeabi_dmul+0x234>
 80077e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80077e4:	bf1c      	itt	ne
 80077e6:	4610      	movne	r0, r2
 80077e8:	4619      	movne	r1, r3
 80077ea:	d10a      	bne.n	8007802 <__aeabi_dmul+0x24a>
 80077ec:	ea81 0103 	eor.w	r1, r1, r3
 80077f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80077f4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80077f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80077fc:	f04f 0000 	mov.w	r0, #0
 8007800:	bd70      	pop	{r4, r5, r6, pc}
 8007802:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8007806:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800780a:	bd70      	pop	{r4, r5, r6, pc}

0800780c <__aeabi_ddiv>:
 800780c:	b570      	push	{r4, r5, r6, lr}
 800780e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8007812:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8007816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800781a:	bf1d      	ittte	ne
 800781c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8007820:	ea94 0f0c 	teqne	r4, ip
 8007824:	ea95 0f0c 	teqne	r5, ip
 8007828:	f000 f8a7 	bleq	800797a <__aeabi_ddiv+0x16e>
 800782c:	eba4 0405 	sub.w	r4, r4, r5
 8007830:	ea81 0e03 	eor.w	lr, r1, r3
 8007834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8007838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800783c:	f000 8088 	beq.w	8007950 <__aeabi_ddiv+0x144>
 8007840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8007844:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8007848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800784c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8007850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8007854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8007858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800785c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8007860:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8007864:	429d      	cmp	r5, r3
 8007866:	bf08      	it	eq
 8007868:	4296      	cmpeq	r6, r2
 800786a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800786e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8007872:	d202      	bcs.n	800787a <__aeabi_ddiv+0x6e>
 8007874:	085b      	lsrs	r3, r3, #1
 8007876:	ea4f 0232 	mov.w	r2, r2, rrx
 800787a:	1ab6      	subs	r6, r6, r2
 800787c:	eb65 0503 	sbc.w	r5, r5, r3
 8007880:	085b      	lsrs	r3, r3, #1
 8007882:	ea4f 0232 	mov.w	r2, r2, rrx
 8007886:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800788a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800788e:	ebb6 0e02 	subs.w	lr, r6, r2
 8007892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007896:	bf22      	ittt	cs
 8007898:	1ab6      	subcs	r6, r6, r2
 800789a:	4675      	movcs	r5, lr
 800789c:	ea40 000c 	orrcs.w	r0, r0, ip
 80078a0:	085b      	lsrs	r3, r3, #1
 80078a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80078a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80078aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80078ae:	bf22      	ittt	cs
 80078b0:	1ab6      	subcs	r6, r6, r2
 80078b2:	4675      	movcs	r5, lr
 80078b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80078b8:	085b      	lsrs	r3, r3, #1
 80078ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80078be:	ebb6 0e02 	subs.w	lr, r6, r2
 80078c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80078c6:	bf22      	ittt	cs
 80078c8:	1ab6      	subcs	r6, r6, r2
 80078ca:	4675      	movcs	r5, lr
 80078cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80078d0:	085b      	lsrs	r3, r3, #1
 80078d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80078d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80078da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80078de:	bf22      	ittt	cs
 80078e0:	1ab6      	subcs	r6, r6, r2
 80078e2:	4675      	movcs	r5, lr
 80078e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80078e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80078ec:	d018      	beq.n	8007920 <__aeabi_ddiv+0x114>
 80078ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80078f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80078f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80078fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80078fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8007902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8007906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800790a:	d1c0      	bne.n	800788e <__aeabi_ddiv+0x82>
 800790c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8007910:	d10b      	bne.n	800792a <__aeabi_ddiv+0x11e>
 8007912:	ea41 0100 	orr.w	r1, r1, r0
 8007916:	f04f 0000 	mov.w	r0, #0
 800791a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800791e:	e7b6      	b.n	800788e <__aeabi_ddiv+0x82>
 8007920:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8007924:	bf04      	itt	eq
 8007926:	4301      	orreq	r1, r0
 8007928:	2000      	moveq	r0, #0
 800792a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800792e:	bf88      	it	hi
 8007930:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8007934:	f63f aeaf 	bhi.w	8007696 <__aeabi_dmul+0xde>
 8007938:	ebb5 0c03 	subs.w	ip, r5, r3
 800793c:	bf04      	itt	eq
 800793e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8007942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8007946:	f150 0000 	adcs.w	r0, r0, #0
 800794a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800794e:	bd70      	pop	{r4, r5, r6, pc}
 8007950:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8007954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8007958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800795c:	bfc2      	ittt	gt
 800795e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8007962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8007966:	bd70      	popgt	{r4, r5, r6, pc}
 8007968:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800796c:	f04f 0e00 	mov.w	lr, #0
 8007970:	3c01      	subs	r4, #1
 8007972:	e690      	b.n	8007696 <__aeabi_dmul+0xde>
 8007974:	ea45 0e06 	orr.w	lr, r5, r6
 8007978:	e68d      	b.n	8007696 <__aeabi_dmul+0xde>
 800797a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800797e:	ea94 0f0c 	teq	r4, ip
 8007982:	bf08      	it	eq
 8007984:	ea95 0f0c 	teqeq	r5, ip
 8007988:	f43f af3b 	beq.w	8007802 <__aeabi_dmul+0x24a>
 800798c:	ea94 0f0c 	teq	r4, ip
 8007990:	d10a      	bne.n	80079a8 <__aeabi_ddiv+0x19c>
 8007992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007996:	f47f af34 	bne.w	8007802 <__aeabi_dmul+0x24a>
 800799a:	ea95 0f0c 	teq	r5, ip
 800799e:	f47f af25 	bne.w	80077ec <__aeabi_dmul+0x234>
 80079a2:	4610      	mov	r0, r2
 80079a4:	4619      	mov	r1, r3
 80079a6:	e72c      	b.n	8007802 <__aeabi_dmul+0x24a>
 80079a8:	ea95 0f0c 	teq	r5, ip
 80079ac:	d106      	bne.n	80079bc <__aeabi_ddiv+0x1b0>
 80079ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80079b2:	f43f aefd 	beq.w	80077b0 <__aeabi_dmul+0x1f8>
 80079b6:	4610      	mov	r0, r2
 80079b8:	4619      	mov	r1, r3
 80079ba:	e722      	b.n	8007802 <__aeabi_dmul+0x24a>
 80079bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80079c0:	bf18      	it	ne
 80079c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80079c6:	f47f aec5 	bne.w	8007754 <__aeabi_dmul+0x19c>
 80079ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80079ce:	f47f af0d 	bne.w	80077ec <__aeabi_dmul+0x234>
 80079d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80079d6:	f47f aeeb 	bne.w	80077b0 <__aeabi_dmul+0x1f8>
 80079da:	e712      	b.n	8007802 <__aeabi_dmul+0x24a>

080079dc <__gedf2>:
 80079dc:	f04f 3cff 	mov.w	ip, #4294967295
 80079e0:	e006      	b.n	80079f0 <__cmpdf2+0x4>
 80079e2:	bf00      	nop

080079e4 <__ledf2>:
 80079e4:	f04f 0c01 	mov.w	ip, #1
 80079e8:	e002      	b.n	80079f0 <__cmpdf2+0x4>
 80079ea:	bf00      	nop

080079ec <__cmpdf2>:
 80079ec:	f04f 0c01 	mov.w	ip, #1
 80079f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80079f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80079f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80079fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007a00:	bf18      	it	ne
 8007a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8007a06:	d01b      	beq.n	8007a40 <__cmpdf2+0x54>
 8007a08:	b001      	add	sp, #4
 8007a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8007a0e:	bf0c      	ite	eq
 8007a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8007a14:	ea91 0f03 	teqne	r1, r3
 8007a18:	bf02      	ittt	eq
 8007a1a:	ea90 0f02 	teqeq	r0, r2
 8007a1e:	2000      	moveq	r0, #0
 8007a20:	4770      	bxeq	lr
 8007a22:	f110 0f00 	cmn.w	r0, #0
 8007a26:	ea91 0f03 	teq	r1, r3
 8007a2a:	bf58      	it	pl
 8007a2c:	4299      	cmppl	r1, r3
 8007a2e:	bf08      	it	eq
 8007a30:	4290      	cmpeq	r0, r2
 8007a32:	bf2c      	ite	cs
 8007a34:	17d8      	asrcs	r0, r3, #31
 8007a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8007a3a:	f040 0001 	orr.w	r0, r0, #1
 8007a3e:	4770      	bx	lr
 8007a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8007a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007a48:	d102      	bne.n	8007a50 <__cmpdf2+0x64>
 8007a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8007a4e:	d107      	bne.n	8007a60 <__cmpdf2+0x74>
 8007a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007a58:	d1d6      	bne.n	8007a08 <__cmpdf2+0x1c>
 8007a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8007a5e:	d0d3      	beq.n	8007a08 <__cmpdf2+0x1c>
 8007a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop

08007a68 <__aeabi_cdrcmple>:
 8007a68:	4684      	mov	ip, r0
 8007a6a:	4610      	mov	r0, r2
 8007a6c:	4662      	mov	r2, ip
 8007a6e:	468c      	mov	ip, r1
 8007a70:	4619      	mov	r1, r3
 8007a72:	4663      	mov	r3, ip
 8007a74:	e000      	b.n	8007a78 <__aeabi_cdcmpeq>
 8007a76:	bf00      	nop

08007a78 <__aeabi_cdcmpeq>:
 8007a78:	b501      	push	{r0, lr}
 8007a7a:	f7ff ffb7 	bl	80079ec <__cmpdf2>
 8007a7e:	2800      	cmp	r0, #0
 8007a80:	bf48      	it	mi
 8007a82:	f110 0f00 	cmnmi.w	r0, #0
 8007a86:	bd01      	pop	{r0, pc}

08007a88 <__aeabi_dcmpeq>:
 8007a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007a8c:	f7ff fff4 	bl	8007a78 <__aeabi_cdcmpeq>
 8007a90:	bf0c      	ite	eq
 8007a92:	2001      	moveq	r0, #1
 8007a94:	2000      	movne	r0, #0
 8007a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8007a9a:	bf00      	nop

08007a9c <__aeabi_dcmplt>:
 8007a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007aa0:	f7ff ffea 	bl	8007a78 <__aeabi_cdcmpeq>
 8007aa4:	bf34      	ite	cc
 8007aa6:	2001      	movcc	r0, #1
 8007aa8:	2000      	movcs	r0, #0
 8007aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8007aae:	bf00      	nop

08007ab0 <__aeabi_dcmple>:
 8007ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007ab4:	f7ff ffe0 	bl	8007a78 <__aeabi_cdcmpeq>
 8007ab8:	bf94      	ite	ls
 8007aba:	2001      	movls	r0, #1
 8007abc:	2000      	movhi	r0, #0
 8007abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8007ac2:	bf00      	nop

08007ac4 <__aeabi_dcmpge>:
 8007ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007ac8:	f7ff ffce 	bl	8007a68 <__aeabi_cdrcmple>
 8007acc:	bf94      	ite	ls
 8007ace:	2001      	movls	r0, #1
 8007ad0:	2000      	movhi	r0, #0
 8007ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8007ad6:	bf00      	nop

08007ad8 <__aeabi_dcmpgt>:
 8007ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007adc:	f7ff ffc4 	bl	8007a68 <__aeabi_cdrcmple>
 8007ae0:	bf34      	ite	cc
 8007ae2:	2001      	movcc	r0, #1
 8007ae4:	2000      	movcs	r0, #0
 8007ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8007aea:	bf00      	nop

08007aec <__aeabi_dcmpun>:
 8007aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8007af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007af4:	d102      	bne.n	8007afc <__aeabi_dcmpun+0x10>
 8007af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8007afa:	d10a      	bne.n	8007b12 <__aeabi_dcmpun+0x26>
 8007afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007b04:	d102      	bne.n	8007b0c <__aeabi_dcmpun+0x20>
 8007b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8007b0a:	d102      	bne.n	8007b12 <__aeabi_dcmpun+0x26>
 8007b0c:	f04f 0000 	mov.w	r0, #0
 8007b10:	4770      	bx	lr
 8007b12:	f04f 0001 	mov.w	r0, #1
 8007b16:	4770      	bx	lr

08007b18 <__aeabi_d2iz>:
 8007b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8007b1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8007b20:	d215      	bcs.n	8007b4e <__aeabi_d2iz+0x36>
 8007b22:	d511      	bpl.n	8007b48 <__aeabi_d2iz+0x30>
 8007b24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8007b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8007b2c:	d912      	bls.n	8007b54 <__aeabi_d2iz+0x3c>
 8007b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8007b32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8007b3a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8007b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8007b42:	bf18      	it	ne
 8007b44:	4240      	negne	r0, r0
 8007b46:	4770      	bx	lr
 8007b48:	f04f 0000 	mov.w	r0, #0
 8007b4c:	4770      	bx	lr
 8007b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8007b52:	d105      	bne.n	8007b60 <__aeabi_d2iz+0x48>
 8007b54:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8007b58:	bf08      	it	eq
 8007b5a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8007b5e:	4770      	bx	lr
 8007b60:	f04f 0000 	mov.w	r0, #0
 8007b64:	4770      	bx	lr
 8007b66:	bf00      	nop

08007b68 <__aeabi_d2uiz>:
 8007b68:	004a      	lsls	r2, r1, #1
 8007b6a:	d211      	bcs.n	8007b90 <__aeabi_d2uiz+0x28>
 8007b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8007b70:	d211      	bcs.n	8007b96 <__aeabi_d2uiz+0x2e>
 8007b72:	d50d      	bpl.n	8007b90 <__aeabi_d2uiz+0x28>
 8007b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8007b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8007b7c:	d40e      	bmi.n	8007b9c <__aeabi_d2uiz+0x34>
 8007b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8007b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8007b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8007b8e:	4770      	bx	lr
 8007b90:	f04f 0000 	mov.w	r0, #0
 8007b94:	4770      	bx	lr
 8007b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8007b9a:	d102      	bne.n	8007ba2 <__aeabi_d2uiz+0x3a>
 8007b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba0:	4770      	bx	lr
 8007ba2:	f04f 0000 	mov.w	r0, #0
 8007ba6:	4770      	bx	lr

08007ba8 <__aeabi_d2f>:
 8007ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8007bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8007bb0:	bf24      	itt	cs
 8007bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8007bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8007bba:	d90d      	bls.n	8007bd8 <__aeabi_d2f+0x30>
 8007bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8007bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8007bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8007bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8007bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8007bd0:	bf08      	it	eq
 8007bd2:	f020 0001 	biceq.w	r0, r0, #1
 8007bd6:	4770      	bx	lr
 8007bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8007bdc:	d121      	bne.n	8007c22 <__aeabi_d2f+0x7a>
 8007bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8007be2:	bfbc      	itt	lt
 8007be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8007be8:	4770      	bxlt	lr
 8007bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8007bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8007bf2:	f1c2 0218 	rsb	r2, r2, #24
 8007bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8007bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8007bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8007c02:	bf18      	it	ne
 8007c04:	f040 0001 	orrne.w	r0, r0, #1
 8007c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8007c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8007c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8007c14:	ea40 000c 	orr.w	r0, r0, ip
 8007c18:	fa23 f302 	lsr.w	r3, r3, r2
 8007c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007c20:	e7cc      	b.n	8007bbc <__aeabi_d2f+0x14>
 8007c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8007c26:	d107      	bne.n	8007c38 <__aeabi_d2f+0x90>
 8007c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8007c2c:	bf1e      	ittt	ne
 8007c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8007c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8007c36:	4770      	bxne	lr
 8007c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8007c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8007c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop

08007c48 <__aeabi_uldivmod>:
 8007c48:	b953      	cbnz	r3, 8007c60 <__aeabi_uldivmod+0x18>
 8007c4a:	b94a      	cbnz	r2, 8007c60 <__aeabi_uldivmod+0x18>
 8007c4c:	2900      	cmp	r1, #0
 8007c4e:	bf08      	it	eq
 8007c50:	2800      	cmpeq	r0, #0
 8007c52:	bf1c      	itt	ne
 8007c54:	f04f 31ff 	movne.w	r1, #4294967295
 8007c58:	f04f 30ff 	movne.w	r0, #4294967295
 8007c5c:	f000 b9a0 	b.w	8007fa0 <__aeabi_idiv0>
 8007c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8007c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8007c68:	f000 f83c 	bl	8007ce4 <__udivmoddi4>
 8007c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c74:	b004      	add	sp, #16
 8007c76:	4770      	bx	lr

08007c78 <__aeabi_d2lz>:
 8007c78:	b538      	push	{r3, r4, r5, lr}
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	4604      	mov	r4, r0
 8007c80:	460d      	mov	r5, r1
 8007c82:	f7ff ff0b 	bl	8007a9c <__aeabi_dcmplt>
 8007c86:	b928      	cbnz	r0, 8007c94 <__aeabi_d2lz+0x1c>
 8007c88:	4620      	mov	r0, r4
 8007c8a:	4629      	mov	r1, r5
 8007c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c90:	f000 b80a 	b.w	8007ca8 <__aeabi_d2ulz>
 8007c94:	4620      	mov	r0, r4
 8007c96:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8007c9a:	f000 f805 	bl	8007ca8 <__aeabi_d2ulz>
 8007c9e:	4240      	negs	r0, r0
 8007ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007ca4:	bd38      	pop	{r3, r4, r5, pc}
 8007ca6:	bf00      	nop

08007ca8 <__aeabi_d2ulz>:
 8007ca8:	b5d0      	push	{r4, r6, r7, lr}
 8007caa:	4b0c      	ldr	r3, [pc, #48]	@ (8007cdc <__aeabi_d2ulz+0x34>)
 8007cac:	2200      	movs	r2, #0
 8007cae:	4606      	mov	r6, r0
 8007cb0:	460f      	mov	r7, r1
 8007cb2:	f7ff fc81 	bl	80075b8 <__aeabi_dmul>
 8007cb6:	f7ff ff57 	bl	8007b68 <__aeabi_d2uiz>
 8007cba:	4604      	mov	r4, r0
 8007cbc:	f7ff fc02 	bl	80074c4 <__aeabi_ui2d>
 8007cc0:	4b07      	ldr	r3, [pc, #28]	@ (8007ce0 <__aeabi_d2ulz+0x38>)
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f7ff fc78 	bl	80075b8 <__aeabi_dmul>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	460b      	mov	r3, r1
 8007ccc:	4630      	mov	r0, r6
 8007cce:	4639      	mov	r1, r7
 8007cd0:	f7ff faba 	bl	8007248 <__aeabi_dsub>
 8007cd4:	f7ff ff48 	bl	8007b68 <__aeabi_d2uiz>
 8007cd8:	4621      	mov	r1, r4
 8007cda:	bdd0      	pop	{r4, r6, r7, pc}
 8007cdc:	3df00000 	.word	0x3df00000
 8007ce0:	41f00000 	.word	0x41f00000

08007ce4 <__udivmoddi4>:
 8007ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ce8:	9d08      	ldr	r5, [sp, #32]
 8007cea:	460c      	mov	r4, r1
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d14e      	bne.n	8007d8e <__udivmoddi4+0xaa>
 8007cf0:	4694      	mov	ip, r2
 8007cf2:	458c      	cmp	ip, r1
 8007cf4:	4686      	mov	lr, r0
 8007cf6:	fab2 f282 	clz	r2, r2
 8007cfa:	d962      	bls.n	8007dc2 <__udivmoddi4+0xde>
 8007cfc:	b14a      	cbz	r2, 8007d12 <__udivmoddi4+0x2e>
 8007cfe:	f1c2 0320 	rsb	r3, r2, #32
 8007d02:	4091      	lsls	r1, r2
 8007d04:	fa20 f303 	lsr.w	r3, r0, r3
 8007d08:	fa0c fc02 	lsl.w	ip, ip, r2
 8007d0c:	4319      	orrs	r1, r3
 8007d0e:	fa00 fe02 	lsl.w	lr, r0, r2
 8007d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8007d16:	fa1f f68c 	uxth.w	r6, ip
 8007d1a:	fbb1 f4f7 	udiv	r4, r1, r7
 8007d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8007d22:	fb07 1114 	mls	r1, r7, r4, r1
 8007d26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8007d2a:	fb04 f106 	mul.w	r1, r4, r6
 8007d2e:	4299      	cmp	r1, r3
 8007d30:	d90a      	bls.n	8007d48 <__udivmoddi4+0x64>
 8007d32:	eb1c 0303 	adds.w	r3, ip, r3
 8007d36:	f104 30ff 	add.w	r0, r4, #4294967295
 8007d3a:	f080 8112 	bcs.w	8007f62 <__udivmoddi4+0x27e>
 8007d3e:	4299      	cmp	r1, r3
 8007d40:	f240 810f 	bls.w	8007f62 <__udivmoddi4+0x27e>
 8007d44:	3c02      	subs	r4, #2
 8007d46:	4463      	add	r3, ip
 8007d48:	1a59      	subs	r1, r3, r1
 8007d4a:	fa1f f38e 	uxth.w	r3, lr
 8007d4e:	fbb1 f0f7 	udiv	r0, r1, r7
 8007d52:	fb07 1110 	mls	r1, r7, r0, r1
 8007d56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8007d5a:	fb00 f606 	mul.w	r6, r0, r6
 8007d5e:	429e      	cmp	r6, r3
 8007d60:	d90a      	bls.n	8007d78 <__udivmoddi4+0x94>
 8007d62:	eb1c 0303 	adds.w	r3, ip, r3
 8007d66:	f100 31ff 	add.w	r1, r0, #4294967295
 8007d6a:	f080 80fc 	bcs.w	8007f66 <__udivmoddi4+0x282>
 8007d6e:	429e      	cmp	r6, r3
 8007d70:	f240 80f9 	bls.w	8007f66 <__udivmoddi4+0x282>
 8007d74:	4463      	add	r3, ip
 8007d76:	3802      	subs	r0, #2
 8007d78:	1b9b      	subs	r3, r3, r6
 8007d7a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8007d7e:	2100      	movs	r1, #0
 8007d80:	b11d      	cbz	r5, 8007d8a <__udivmoddi4+0xa6>
 8007d82:	40d3      	lsrs	r3, r2
 8007d84:	2200      	movs	r2, #0
 8007d86:	e9c5 3200 	strd	r3, r2, [r5]
 8007d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d8e:	428b      	cmp	r3, r1
 8007d90:	d905      	bls.n	8007d9e <__udivmoddi4+0xba>
 8007d92:	b10d      	cbz	r5, 8007d98 <__udivmoddi4+0xb4>
 8007d94:	e9c5 0100 	strd	r0, r1, [r5]
 8007d98:	2100      	movs	r1, #0
 8007d9a:	4608      	mov	r0, r1
 8007d9c:	e7f5      	b.n	8007d8a <__udivmoddi4+0xa6>
 8007d9e:	fab3 f183 	clz	r1, r3
 8007da2:	2900      	cmp	r1, #0
 8007da4:	d146      	bne.n	8007e34 <__udivmoddi4+0x150>
 8007da6:	42a3      	cmp	r3, r4
 8007da8:	d302      	bcc.n	8007db0 <__udivmoddi4+0xcc>
 8007daa:	4290      	cmp	r0, r2
 8007dac:	f0c0 80f0 	bcc.w	8007f90 <__udivmoddi4+0x2ac>
 8007db0:	1a86      	subs	r6, r0, r2
 8007db2:	eb64 0303 	sbc.w	r3, r4, r3
 8007db6:	2001      	movs	r0, #1
 8007db8:	2d00      	cmp	r5, #0
 8007dba:	d0e6      	beq.n	8007d8a <__udivmoddi4+0xa6>
 8007dbc:	e9c5 6300 	strd	r6, r3, [r5]
 8007dc0:	e7e3      	b.n	8007d8a <__udivmoddi4+0xa6>
 8007dc2:	2a00      	cmp	r2, #0
 8007dc4:	f040 8090 	bne.w	8007ee8 <__udivmoddi4+0x204>
 8007dc8:	eba1 040c 	sub.w	r4, r1, ip
 8007dcc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8007dd0:	fa1f f78c 	uxth.w	r7, ip
 8007dd4:	2101      	movs	r1, #1
 8007dd6:	fbb4 f6f8 	udiv	r6, r4, r8
 8007dda:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8007dde:	fb08 4416 	mls	r4, r8, r6, r4
 8007de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007de6:	fb07 f006 	mul.w	r0, r7, r6
 8007dea:	4298      	cmp	r0, r3
 8007dec:	d908      	bls.n	8007e00 <__udivmoddi4+0x11c>
 8007dee:	eb1c 0303 	adds.w	r3, ip, r3
 8007df2:	f106 34ff 	add.w	r4, r6, #4294967295
 8007df6:	d202      	bcs.n	8007dfe <__udivmoddi4+0x11a>
 8007df8:	4298      	cmp	r0, r3
 8007dfa:	f200 80cd 	bhi.w	8007f98 <__udivmoddi4+0x2b4>
 8007dfe:	4626      	mov	r6, r4
 8007e00:	1a1c      	subs	r4, r3, r0
 8007e02:	fa1f f38e 	uxth.w	r3, lr
 8007e06:	fbb4 f0f8 	udiv	r0, r4, r8
 8007e0a:	fb08 4410 	mls	r4, r8, r0, r4
 8007e0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007e12:	fb00 f707 	mul.w	r7, r0, r7
 8007e16:	429f      	cmp	r7, r3
 8007e18:	d908      	bls.n	8007e2c <__udivmoddi4+0x148>
 8007e1a:	eb1c 0303 	adds.w	r3, ip, r3
 8007e1e:	f100 34ff 	add.w	r4, r0, #4294967295
 8007e22:	d202      	bcs.n	8007e2a <__udivmoddi4+0x146>
 8007e24:	429f      	cmp	r7, r3
 8007e26:	f200 80b0 	bhi.w	8007f8a <__udivmoddi4+0x2a6>
 8007e2a:	4620      	mov	r0, r4
 8007e2c:	1bdb      	subs	r3, r3, r7
 8007e2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8007e32:	e7a5      	b.n	8007d80 <__udivmoddi4+0x9c>
 8007e34:	f1c1 0620 	rsb	r6, r1, #32
 8007e38:	408b      	lsls	r3, r1
 8007e3a:	fa22 f706 	lsr.w	r7, r2, r6
 8007e3e:	431f      	orrs	r7, r3
 8007e40:	fa20 fc06 	lsr.w	ip, r0, r6
 8007e44:	fa04 f301 	lsl.w	r3, r4, r1
 8007e48:	ea43 030c 	orr.w	r3, r3, ip
 8007e4c:	40f4      	lsrs	r4, r6
 8007e4e:	fa00 f801 	lsl.w	r8, r0, r1
 8007e52:	0c38      	lsrs	r0, r7, #16
 8007e54:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8007e58:	fbb4 fef0 	udiv	lr, r4, r0
 8007e5c:	fa1f fc87 	uxth.w	ip, r7
 8007e60:	fb00 441e 	mls	r4, r0, lr, r4
 8007e64:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8007e68:	fb0e f90c 	mul.w	r9, lr, ip
 8007e6c:	45a1      	cmp	r9, r4
 8007e6e:	fa02 f201 	lsl.w	r2, r2, r1
 8007e72:	d90a      	bls.n	8007e8a <__udivmoddi4+0x1a6>
 8007e74:	193c      	adds	r4, r7, r4
 8007e76:	f10e 3aff 	add.w	sl, lr, #4294967295
 8007e7a:	f080 8084 	bcs.w	8007f86 <__udivmoddi4+0x2a2>
 8007e7e:	45a1      	cmp	r9, r4
 8007e80:	f240 8081 	bls.w	8007f86 <__udivmoddi4+0x2a2>
 8007e84:	f1ae 0e02 	sub.w	lr, lr, #2
 8007e88:	443c      	add	r4, r7
 8007e8a:	eba4 0409 	sub.w	r4, r4, r9
 8007e8e:	fa1f f983 	uxth.w	r9, r3
 8007e92:	fbb4 f3f0 	udiv	r3, r4, r0
 8007e96:	fb00 4413 	mls	r4, r0, r3, r4
 8007e9a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8007e9e:	fb03 fc0c 	mul.w	ip, r3, ip
 8007ea2:	45a4      	cmp	ip, r4
 8007ea4:	d907      	bls.n	8007eb6 <__udivmoddi4+0x1d2>
 8007ea6:	193c      	adds	r4, r7, r4
 8007ea8:	f103 30ff 	add.w	r0, r3, #4294967295
 8007eac:	d267      	bcs.n	8007f7e <__udivmoddi4+0x29a>
 8007eae:	45a4      	cmp	ip, r4
 8007eb0:	d965      	bls.n	8007f7e <__udivmoddi4+0x29a>
 8007eb2:	3b02      	subs	r3, #2
 8007eb4:	443c      	add	r4, r7
 8007eb6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8007eba:	fba0 9302 	umull	r9, r3, r0, r2
 8007ebe:	eba4 040c 	sub.w	r4, r4, ip
 8007ec2:	429c      	cmp	r4, r3
 8007ec4:	46ce      	mov	lr, r9
 8007ec6:	469c      	mov	ip, r3
 8007ec8:	d351      	bcc.n	8007f6e <__udivmoddi4+0x28a>
 8007eca:	d04e      	beq.n	8007f6a <__udivmoddi4+0x286>
 8007ecc:	b155      	cbz	r5, 8007ee4 <__udivmoddi4+0x200>
 8007ece:	ebb8 030e 	subs.w	r3, r8, lr
 8007ed2:	eb64 040c 	sbc.w	r4, r4, ip
 8007ed6:	fa04 f606 	lsl.w	r6, r4, r6
 8007eda:	40cb      	lsrs	r3, r1
 8007edc:	431e      	orrs	r6, r3
 8007ede:	40cc      	lsrs	r4, r1
 8007ee0:	e9c5 6400 	strd	r6, r4, [r5]
 8007ee4:	2100      	movs	r1, #0
 8007ee6:	e750      	b.n	8007d8a <__udivmoddi4+0xa6>
 8007ee8:	f1c2 0320 	rsb	r3, r2, #32
 8007eec:	fa20 f103 	lsr.w	r1, r0, r3
 8007ef0:	fa0c fc02 	lsl.w	ip, ip, r2
 8007ef4:	fa24 f303 	lsr.w	r3, r4, r3
 8007ef8:	4094      	lsls	r4, r2
 8007efa:	430c      	orrs	r4, r1
 8007efc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8007f00:	fa00 fe02 	lsl.w	lr, r0, r2
 8007f04:	fa1f f78c 	uxth.w	r7, ip
 8007f08:	fbb3 f0f8 	udiv	r0, r3, r8
 8007f0c:	fb08 3110 	mls	r1, r8, r0, r3
 8007f10:	0c23      	lsrs	r3, r4, #16
 8007f12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8007f16:	fb00 f107 	mul.w	r1, r0, r7
 8007f1a:	4299      	cmp	r1, r3
 8007f1c:	d908      	bls.n	8007f30 <__udivmoddi4+0x24c>
 8007f1e:	eb1c 0303 	adds.w	r3, ip, r3
 8007f22:	f100 36ff 	add.w	r6, r0, #4294967295
 8007f26:	d22c      	bcs.n	8007f82 <__udivmoddi4+0x29e>
 8007f28:	4299      	cmp	r1, r3
 8007f2a:	d92a      	bls.n	8007f82 <__udivmoddi4+0x29e>
 8007f2c:	3802      	subs	r0, #2
 8007f2e:	4463      	add	r3, ip
 8007f30:	1a5b      	subs	r3, r3, r1
 8007f32:	b2a4      	uxth	r4, r4
 8007f34:	fbb3 f1f8 	udiv	r1, r3, r8
 8007f38:	fb08 3311 	mls	r3, r8, r1, r3
 8007f3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8007f40:	fb01 f307 	mul.w	r3, r1, r7
 8007f44:	42a3      	cmp	r3, r4
 8007f46:	d908      	bls.n	8007f5a <__udivmoddi4+0x276>
 8007f48:	eb1c 0404 	adds.w	r4, ip, r4
 8007f4c:	f101 36ff 	add.w	r6, r1, #4294967295
 8007f50:	d213      	bcs.n	8007f7a <__udivmoddi4+0x296>
 8007f52:	42a3      	cmp	r3, r4
 8007f54:	d911      	bls.n	8007f7a <__udivmoddi4+0x296>
 8007f56:	3902      	subs	r1, #2
 8007f58:	4464      	add	r4, ip
 8007f5a:	1ae4      	subs	r4, r4, r3
 8007f5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007f60:	e739      	b.n	8007dd6 <__udivmoddi4+0xf2>
 8007f62:	4604      	mov	r4, r0
 8007f64:	e6f0      	b.n	8007d48 <__udivmoddi4+0x64>
 8007f66:	4608      	mov	r0, r1
 8007f68:	e706      	b.n	8007d78 <__udivmoddi4+0x94>
 8007f6a:	45c8      	cmp	r8, r9
 8007f6c:	d2ae      	bcs.n	8007ecc <__udivmoddi4+0x1e8>
 8007f6e:	ebb9 0e02 	subs.w	lr, r9, r2
 8007f72:	eb63 0c07 	sbc.w	ip, r3, r7
 8007f76:	3801      	subs	r0, #1
 8007f78:	e7a8      	b.n	8007ecc <__udivmoddi4+0x1e8>
 8007f7a:	4631      	mov	r1, r6
 8007f7c:	e7ed      	b.n	8007f5a <__udivmoddi4+0x276>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	e799      	b.n	8007eb6 <__udivmoddi4+0x1d2>
 8007f82:	4630      	mov	r0, r6
 8007f84:	e7d4      	b.n	8007f30 <__udivmoddi4+0x24c>
 8007f86:	46d6      	mov	lr, sl
 8007f88:	e77f      	b.n	8007e8a <__udivmoddi4+0x1a6>
 8007f8a:	4463      	add	r3, ip
 8007f8c:	3802      	subs	r0, #2
 8007f8e:	e74d      	b.n	8007e2c <__udivmoddi4+0x148>
 8007f90:	4606      	mov	r6, r0
 8007f92:	4623      	mov	r3, r4
 8007f94:	4608      	mov	r0, r1
 8007f96:	e70f      	b.n	8007db8 <__udivmoddi4+0xd4>
 8007f98:	3e02      	subs	r6, #2
 8007f9a:	4463      	add	r3, ip
 8007f9c:	e730      	b.n	8007e00 <__udivmoddi4+0x11c>
 8007f9e:	bf00      	nop

08007fa0 <__aeabi_idiv0>:
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop

08007fa4 <AccelInit>:
//               return 1;
//               }
//}

void AccelInit(void)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af04      	add	r7, sp, #16
	uint8_t cmd[1];
	cmd[0]=0x00;
 8007faa:	2300      	movs	r3, #0
 8007fac:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c3,ACCEL_ADDRESS,ACCEL_TEMP_CFG_REG,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 8007fae:	f04f 33ff 	mov.w	r3, #4294967295
 8007fb2:	9302      	str	r3, [sp, #8]
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	9301      	str	r3, [sp, #4]
 8007fb8:	1d3b      	adds	r3, r7, #4
 8007fba:	9300      	str	r3, [sp, #0]
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	221f      	movs	r2, #31
 8007fc0:	2130      	movs	r1, #48	@ 0x30
 8007fc2:	484b      	ldr	r0, [pc, #300]	@ (80080f0 <AccelInit+0x14c>)
 8007fc4:	f009 fede 	bl	8011d84 <HAL_I2C_Mem_Write>
	cmd[0]=0x77;
 8007fc8:	2377      	movs	r3, #119	@ 0x77
 8007fca:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c3,ACCEL_ADDRESS,ACCEL_CTRL_REG1,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 8007fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8007fd0:	9302      	str	r3, [sp, #8]
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	9301      	str	r3, [sp, #4]
 8007fd6:	1d3b      	adds	r3, r7, #4
 8007fd8:	9300      	str	r3, [sp, #0]
 8007fda:	2301      	movs	r3, #1
 8007fdc:	2220      	movs	r2, #32
 8007fde:	2130      	movs	r1, #48	@ 0x30
 8007fe0:	4843      	ldr	r0, [pc, #268]	@ (80080f0 <AccelInit+0x14c>)
 8007fe2:	f009 fecf 	bl	8011d84 <HAL_I2C_Mem_Write>
	cmd[0]=0x00;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c3,ACCEL_ADDRESS,ACCEL_CTRL_REG2,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 8007fea:	f04f 33ff 	mov.w	r3, #4294967295
 8007fee:	9302      	str	r3, [sp, #8]
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	9301      	str	r3, [sp, #4]
 8007ff4:	1d3b      	adds	r3, r7, #4
 8007ff6:	9300      	str	r3, [sp, #0]
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	2221      	movs	r2, #33	@ 0x21
 8007ffc:	2130      	movs	r1, #48	@ 0x30
 8007ffe:	483c      	ldr	r0, [pc, #240]	@ (80080f0 <AccelInit+0x14c>)
 8008000:	f009 fec0 	bl	8011d84 <HAL_I2C_Mem_Write>
	cmd[0]=0x18;
 8008004:	2318      	movs	r3, #24
 8008006:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c3,ACCEL_ADDRESS,ACCEL_CTRL_REG3,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 8008008:	f04f 33ff 	mov.w	r3, #4294967295
 800800c:	9302      	str	r3, [sp, #8]
 800800e:	2301      	movs	r3, #1
 8008010:	9301      	str	r3, [sp, #4]
 8008012:	1d3b      	adds	r3, r7, #4
 8008014:	9300      	str	r3, [sp, #0]
 8008016:	2301      	movs	r3, #1
 8008018:	2222      	movs	r2, #34	@ 0x22
 800801a:	2130      	movs	r1, #48	@ 0x30
 800801c:	4834      	ldr	r0, [pc, #208]	@ (80080f0 <AccelInit+0x14c>)
 800801e:	f009 feb1 	bl	8011d84 <HAL_I2C_Mem_Write>
	cmd[0]=0x00;
 8008022:	2300      	movs	r3, #0
 8008024:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c3,ACCEL_ADDRESS,ACCEL_CTRL_REG4,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 8008026:	f04f 33ff 	mov.w	r3, #4294967295
 800802a:	9302      	str	r3, [sp, #8]
 800802c:	2301      	movs	r3, #1
 800802e:	9301      	str	r3, [sp, #4]
 8008030:	1d3b      	adds	r3, r7, #4
 8008032:	9300      	str	r3, [sp, #0]
 8008034:	2301      	movs	r3, #1
 8008036:	2223      	movs	r2, #35	@ 0x23
 8008038:	2130      	movs	r1, #48	@ 0x30
 800803a:	482d      	ldr	r0, [pc, #180]	@ (80080f0 <AccelInit+0x14c>)
 800803c:	f009 fea2 	bl	8011d84 <HAL_I2C_Mem_Write>
	cmd[0]=0x0A;
 8008040:	230a      	movs	r3, #10
 8008042:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c3,ACCEL_ADDRESS,ACCEL_CTRL_REG5,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 8008044:	f04f 33ff 	mov.w	r3, #4294967295
 8008048:	9302      	str	r3, [sp, #8]
 800804a:	2301      	movs	r3, #1
 800804c:	9301      	str	r3, [sp, #4]
 800804e:	1d3b      	adds	r3, r7, #4
 8008050:	9300      	str	r3, [sp, #0]
 8008052:	2301      	movs	r3, #1
 8008054:	2224      	movs	r2, #36	@ 0x24
 8008056:	2130      	movs	r1, #48	@ 0x30
 8008058:	4825      	ldr	r0, [pc, #148]	@ (80080f0 <AccelInit+0x14c>)
 800805a:	f009 fe93 	bl	8011d84 <HAL_I2C_Mem_Write>
	cmd[0]=0x20;
 800805e:	2320      	movs	r3, #32
 8008060:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c3,ACCEL_ADDRESS,ACCEL_CTRL_REG6,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 8008062:	f04f 33ff 	mov.w	r3, #4294967295
 8008066:	9302      	str	r3, [sp, #8]
 8008068:	2301      	movs	r3, #1
 800806a:	9301      	str	r3, [sp, #4]
 800806c:	1d3b      	adds	r3, r7, #4
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	2301      	movs	r3, #1
 8008072:	2225      	movs	r2, #37	@ 0x25
 8008074:	2130      	movs	r1, #48	@ 0x30
 8008076:	481e      	ldr	r0, [pc, #120]	@ (80080f0 <AccelInit+0x14c>)
 8008078:	f009 fe84 	bl	8011d84 <HAL_I2C_Mem_Write>
	cmd[0]=0x00;
 800807c:	2300      	movs	r3, #0
 800807e:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c3,ACCEL_ADDRESS,ACCEL_REFERENCE_DATACAPTURE,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 8008080:	f04f 33ff 	mov.w	r3, #4294967295
 8008084:	9302      	str	r3, [sp, #8]
 8008086:	2301      	movs	r3, #1
 8008088:	9301      	str	r3, [sp, #4]
 800808a:	1d3b      	adds	r3, r7, #4
 800808c:	9300      	str	r3, [sp, #0]
 800808e:	2301      	movs	r3, #1
 8008090:	2226      	movs	r2, #38	@ 0x26
 8008092:	2130      	movs	r1, #48	@ 0x30
 8008094:	4816      	ldr	r0, [pc, #88]	@ (80080f0 <AccelInit+0x14c>)
 8008096:	f009 fe75 	bl	8011d84 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c3,ACCEL_ADDRESS,ACCEL_FIFO_CTRL_REG,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 800809a:	f04f 33ff 	mov.w	r3, #4294967295
 800809e:	9302      	str	r3, [sp, #8]
 80080a0:	2301      	movs	r3, #1
 80080a2:	9301      	str	r3, [sp, #4]
 80080a4:	1d3b      	adds	r3, r7, #4
 80080a6:	9300      	str	r3, [sp, #0]
 80080a8:	2301      	movs	r3, #1
 80080aa:	222e      	movs	r2, #46	@ 0x2e
 80080ac:	2130      	movs	r1, #48	@ 0x30
 80080ae:	4810      	ldr	r0, [pc, #64]	@ (80080f0 <AccelInit+0x14c>)
 80080b0:	f009 fe68 	bl	8011d84 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c3,ACCEL_ADDRESS,ACCEL_INT1_CFG,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 80080b4:	f04f 33ff 	mov.w	r3, #4294967295
 80080b8:	9302      	str	r3, [sp, #8]
 80080ba:	2301      	movs	r3, #1
 80080bc:	9301      	str	r3, [sp, #4]
 80080be:	1d3b      	adds	r3, r7, #4
 80080c0:	9300      	str	r3, [sp, #0]
 80080c2:	2301      	movs	r3, #1
 80080c4:	2230      	movs	r2, #48	@ 0x30
 80080c6:	2130      	movs	r1, #48	@ 0x30
 80080c8:	4809      	ldr	r0, [pc, #36]	@ (80080f0 <AccelInit+0x14c>)
 80080ca:	f009 fe5b 	bl	8011d84 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c3,ACCEL_ADDRESS,ACCEL_INT2_CFG,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 80080ce:	f04f 33ff 	mov.w	r3, #4294967295
 80080d2:	9302      	str	r3, [sp, #8]
 80080d4:	2301      	movs	r3, #1
 80080d6:	9301      	str	r3, [sp, #4]
 80080d8:	1d3b      	adds	r3, r7, #4
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	2301      	movs	r3, #1
 80080de:	2234      	movs	r2, #52	@ 0x34
 80080e0:	2130      	movs	r1, #48	@ 0x30
 80080e2:	4803      	ldr	r0, [pc, #12]	@ (80080f0 <AccelInit+0x14c>)
 80080e4:	f009 fe4e 	bl	8011d84 <HAL_I2C_Mem_Write>
}
 80080e8:	bf00      	nop
 80080ea:	3708      	adds	r7, #8
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	20000460 	.word	0x20000460

080080f4 <AccelRead>:
	cmd[0]=0x7F;
	HAL_I2C_Mem_Write(&hi2c3,ACCEL_ADDRESS,ACCEL_INT1_CFG,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
	// write 0x00 CTRL 5
}
void AccelRead(void)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b086      	sub	sp, #24
 80080f8:	af04      	add	r7, sp, #16
//  MY_CONV dataconver;
  uint8_t data[1];
  //Acclx_read(ACCEL_OUT_X_L,data,1);
  HAL_I2C_Mem_Read(&hi2c3,ACCEL_ADDRESS,ACCEL_OUT_X_L,I2C_MEMADD_SIZE_8BIT,data,1,HAL_MAX_DELAY);
 80080fa:	f04f 33ff 	mov.w	r3, #4294967295
 80080fe:	9302      	str	r3, [sp, #8]
 8008100:	2301      	movs	r3, #1
 8008102:	9301      	str	r3, [sp, #4]
 8008104:	1d3b      	adds	r3, r7, #4
 8008106:	9300      	str	r3, [sp, #0]
 8008108:	2301      	movs	r3, #1
 800810a:	2228      	movs	r2, #40	@ 0x28
 800810c:	2130      	movs	r1, #48	@ 0x30
 800810e:	486d      	ldr	r0, [pc, #436]	@ (80082c4 <AccelRead+0x1d0>)
 8008110:	f009 ff4c 	bl	8011fac <HAL_I2C_Mem_Read>
  dataconver.data[0]=data[0];
 8008114:	793a      	ldrb	r2, [r7, #4]
 8008116:	4b6c      	ldr	r3, [pc, #432]	@ (80082c8 <AccelRead+0x1d4>)
 8008118:	701a      	strb	r2, [r3, #0]
  //Acclx_read(ACCEL_OUT_X_H,data,1);
  HAL_I2C_Mem_Read(&hi2c3,ACCEL_ADDRESS,ACCEL_OUT_X_H,I2C_MEMADD_SIZE_8BIT,data,1,HAL_MAX_DELAY);
 800811a:	f04f 33ff 	mov.w	r3, #4294967295
 800811e:	9302      	str	r3, [sp, #8]
 8008120:	2301      	movs	r3, #1
 8008122:	9301      	str	r3, [sp, #4]
 8008124:	1d3b      	adds	r3, r7, #4
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	2301      	movs	r3, #1
 800812a:	2229      	movs	r2, #41	@ 0x29
 800812c:	2130      	movs	r1, #48	@ 0x30
 800812e:	4865      	ldr	r0, [pc, #404]	@ (80082c4 <AccelRead+0x1d0>)
 8008130:	f009 ff3c 	bl	8011fac <HAL_I2C_Mem_Read>
  dataconver.data[1]=data[0];
 8008134:	793a      	ldrb	r2, [r7, #4]
 8008136:	4b64      	ldr	r3, [pc, #400]	@ (80082c8 <AccelRead+0x1d4>)
 8008138:	705a      	strb	r2, [r3, #1]
  output.RawAccelX=dataconver.word;
 800813a:	4b63      	ldr	r3, [pc, #396]	@ (80082c8 <AccelRead+0x1d4>)
 800813c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008140:	4b62      	ldr	r3, [pc, #392]	@ (80082cc <AccelRead+0x1d8>)
 8008142:	80da      	strh	r2, [r3, #6]

  //Acclx_read(ACCEL_OUT_Y_L,data,1);
  HAL_I2C_Mem_Read(&hi2c3,ACCEL_ADDRESS,ACCEL_OUT_Y_L,I2C_MEMADD_SIZE_8BIT,data,1,HAL_MAX_DELAY);
 8008144:	f04f 33ff 	mov.w	r3, #4294967295
 8008148:	9302      	str	r3, [sp, #8]
 800814a:	2301      	movs	r3, #1
 800814c:	9301      	str	r3, [sp, #4]
 800814e:	1d3b      	adds	r3, r7, #4
 8008150:	9300      	str	r3, [sp, #0]
 8008152:	2301      	movs	r3, #1
 8008154:	222a      	movs	r2, #42	@ 0x2a
 8008156:	2130      	movs	r1, #48	@ 0x30
 8008158:	485a      	ldr	r0, [pc, #360]	@ (80082c4 <AccelRead+0x1d0>)
 800815a:	f009 ff27 	bl	8011fac <HAL_I2C_Mem_Read>
  dataconver.data[0]=data[0];
 800815e:	793a      	ldrb	r2, [r7, #4]
 8008160:	4b59      	ldr	r3, [pc, #356]	@ (80082c8 <AccelRead+0x1d4>)
 8008162:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Read(&hi2c3,ACCEL_ADDRESS,ACCEL_OUT_Y_H,I2C_MEMADD_SIZE_8BIT,data,1,HAL_MAX_DELAY);
 8008164:	f04f 33ff 	mov.w	r3, #4294967295
 8008168:	9302      	str	r3, [sp, #8]
 800816a:	2301      	movs	r3, #1
 800816c:	9301      	str	r3, [sp, #4]
 800816e:	1d3b      	adds	r3, r7, #4
 8008170:	9300      	str	r3, [sp, #0]
 8008172:	2301      	movs	r3, #1
 8008174:	222b      	movs	r2, #43	@ 0x2b
 8008176:	2130      	movs	r1, #48	@ 0x30
 8008178:	4852      	ldr	r0, [pc, #328]	@ (80082c4 <AccelRead+0x1d0>)
 800817a:	f009 ff17 	bl	8011fac <HAL_I2C_Mem_Read>
  //Acclx_read(ACCEL_OUT_Y_H,data,1);
  dataconver.data[1]=data[0];
 800817e:	793a      	ldrb	r2, [r7, #4]
 8008180:	4b51      	ldr	r3, [pc, #324]	@ (80082c8 <AccelRead+0x1d4>)
 8008182:	705a      	strb	r2, [r3, #1]
  output.RawAccelY=dataconver.word;
 8008184:	4b50      	ldr	r3, [pc, #320]	@ (80082c8 <AccelRead+0x1d4>)
 8008186:	f9b3 2000 	ldrsh.w	r2, [r3]
 800818a:	4b50      	ldr	r3, [pc, #320]	@ (80082cc <AccelRead+0x1d8>)
 800818c:	811a      	strh	r2, [r3, #8]

  //Acclx_read(ACCEL_OUT_Z_L,data,1);
  HAL_I2C_Mem_Read(&hi2c3,ACCEL_ADDRESS,ACCEL_OUT_Z_L,I2C_MEMADD_SIZE_8BIT,data,1,HAL_MAX_DELAY);
 800818e:	f04f 33ff 	mov.w	r3, #4294967295
 8008192:	9302      	str	r3, [sp, #8]
 8008194:	2301      	movs	r3, #1
 8008196:	9301      	str	r3, [sp, #4]
 8008198:	1d3b      	adds	r3, r7, #4
 800819a:	9300      	str	r3, [sp, #0]
 800819c:	2301      	movs	r3, #1
 800819e:	222c      	movs	r2, #44	@ 0x2c
 80081a0:	2130      	movs	r1, #48	@ 0x30
 80081a2:	4848      	ldr	r0, [pc, #288]	@ (80082c4 <AccelRead+0x1d0>)
 80081a4:	f009 ff02 	bl	8011fac <HAL_I2C_Mem_Read>
  dataconver.data[0]=data[0];
 80081a8:	793a      	ldrb	r2, [r7, #4]
 80081aa:	4b47      	ldr	r3, [pc, #284]	@ (80082c8 <AccelRead+0x1d4>)
 80081ac:	701a      	strb	r2, [r3, #0]
  //Acclx_read(ACCEL_OUT_Z_H,data,1);
  HAL_I2C_Mem_Read(&hi2c3,ACCEL_ADDRESS,ACCEL_OUT_Z_H,I2C_MEMADD_SIZE_8BIT,data,1,HAL_MAX_DELAY);
 80081ae:	f04f 33ff 	mov.w	r3, #4294967295
 80081b2:	9302      	str	r3, [sp, #8]
 80081b4:	2301      	movs	r3, #1
 80081b6:	9301      	str	r3, [sp, #4]
 80081b8:	1d3b      	adds	r3, r7, #4
 80081ba:	9300      	str	r3, [sp, #0]
 80081bc:	2301      	movs	r3, #1
 80081be:	222d      	movs	r2, #45	@ 0x2d
 80081c0:	2130      	movs	r1, #48	@ 0x30
 80081c2:	4840      	ldr	r0, [pc, #256]	@ (80082c4 <AccelRead+0x1d0>)
 80081c4:	f009 fef2 	bl	8011fac <HAL_I2C_Mem_Read>
  dataconver.data[1]=data[0];
 80081c8:	793a      	ldrb	r2, [r7, #4]
 80081ca:	4b3f      	ldr	r3, [pc, #252]	@ (80082c8 <AccelRead+0x1d4>)
 80081cc:	705a      	strb	r2, [r3, #1]
  output.RawAccelZ=dataconver.word;
 80081ce:	4b3e      	ldr	r3, [pc, #248]	@ (80082c8 <AccelRead+0x1d4>)
 80081d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80081d4:	4b3d      	ldr	r3, [pc, #244]	@ (80082cc <AccelRead+0x1d8>)
 80081d6:	815a      	strh	r2, [r3, #10]

  output.AccelXScratch = ((float)(output.RawAccelX/64))*0.004f *100;
 80081d8:	4b3c      	ldr	r3, [pc, #240]	@ (80082cc <AccelRead+0x1d8>)
 80081da:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	da00      	bge.n	80081e4 <AccelRead+0xf0>
 80081e2:	333f      	adds	r3, #63	@ 0x3f
 80081e4:	119b      	asrs	r3, r3, #6
 80081e6:	b21b      	sxth	r3, r3
 80081e8:	ee07 3a90 	vmov	s15, r3
 80081ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80081f0:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80082d0 <AccelRead+0x1dc>
 80081f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80081f8:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80082d4 <AccelRead+0x1e0>
 80081fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008200:	4b32      	ldr	r3, [pc, #200]	@ (80082cc <AccelRead+0x1d8>)
 8008202:	edc3 7a03 	vstr	s15, [r3, #12]
  output.AccelYScratch = ((float)(output.RawAccelY/64))*0.004f *100;
 8008206:	4b31      	ldr	r3, [pc, #196]	@ (80082cc <AccelRead+0x1d8>)
 8008208:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800820c:	2b00      	cmp	r3, #0
 800820e:	da00      	bge.n	8008212 <AccelRead+0x11e>
 8008210:	333f      	adds	r3, #63	@ 0x3f
 8008212:	119b      	asrs	r3, r3, #6
 8008214:	b21b      	sxth	r3, r3
 8008216:	ee07 3a90 	vmov	s15, r3
 800821a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800821e:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80082d0 <AccelRead+0x1dc>
 8008222:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008226:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80082d4 <AccelRead+0x1e0>
 800822a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800822e:	4b27      	ldr	r3, [pc, #156]	@ (80082cc <AccelRead+0x1d8>)
 8008230:	edc3 7a04 	vstr	s15, [r3, #16]
  output.AccelZScratch = ((float)(output.RawAccelZ/64))*0.004f *100;
 8008234:	4b25      	ldr	r3, [pc, #148]	@ (80082cc <AccelRead+0x1d8>)
 8008236:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800823a:	2b00      	cmp	r3, #0
 800823c:	da00      	bge.n	8008240 <AccelRead+0x14c>
 800823e:	333f      	adds	r3, #63	@ 0x3f
 8008240:	119b      	asrs	r3, r3, #6
 8008242:	b21b      	sxth	r3, r3
 8008244:	ee07 3a90 	vmov	s15, r3
 8008248:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800824c:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80082d0 <AccelRead+0x1dc>
 8008250:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008254:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80082d4 <AccelRead+0x1e0>
 8008258:	ee67 7a87 	vmul.f32	s15, s15, s14
 800825c:	4b1b      	ldr	r3, [pc, #108]	@ (80082cc <AccelRead+0x1d8>)
 800825e:	edc3 7a05 	vstr	s15, [r3, #20]


    output.AccelX = (int16_t)output.AccelXScratch;
 8008262:	4b1a      	ldr	r3, [pc, #104]	@ (80082cc <AccelRead+0x1d8>)
 8008264:	edd3 7a03 	vldr	s15, [r3, #12]
 8008268:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800826c:	ee17 3a90 	vmov	r3, s15
 8008270:	b21a      	sxth	r2, r3
 8008272:	4b16      	ldr	r3, [pc, #88]	@ (80082cc <AccelRead+0x1d8>)
 8008274:	801a      	strh	r2, [r3, #0]
    output.AccelY = (int16_t)output.AccelYScratch;
 8008276:	4b15      	ldr	r3, [pc, #84]	@ (80082cc <AccelRead+0x1d8>)
 8008278:	edd3 7a04 	vldr	s15, [r3, #16]
 800827c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008280:	ee17 3a90 	vmov	r3, s15
 8008284:	b21a      	sxth	r2, r3
 8008286:	4b11      	ldr	r3, [pc, #68]	@ (80082cc <AccelRead+0x1d8>)
 8008288:	805a      	strh	r2, [r3, #2]
    output.AccelZ = (int16_t)output.AccelZScratch;
 800828a:	4b10      	ldr	r3, [pc, #64]	@ (80082cc <AccelRead+0x1d8>)
 800828c:	edd3 7a05 	vldr	s15, [r3, #20]
 8008290:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008294:	ee17 3a90 	vmov	r3, s15
 8008298:	b21a      	sxth	r2, r3
 800829a:	4b0c      	ldr	r3, [pc, #48]	@ (80082cc <AccelRead+0x1d8>)
 800829c:	809a      	strh	r2, [r3, #4]

    printf("Accelerometer X:%d Y:%d Z:%d \n",output.AccelX,output.AccelY,output.AccelZ);
 800829e:	4b0b      	ldr	r3, [pc, #44]	@ (80082cc <AccelRead+0x1d8>)
 80082a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80082a4:	4619      	mov	r1, r3
 80082a6:	4b09      	ldr	r3, [pc, #36]	@ (80082cc <AccelRead+0x1d8>)
 80082a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80082ac:	461a      	mov	r2, r3
 80082ae:	4b07      	ldr	r3, [pc, #28]	@ (80082cc <AccelRead+0x1d8>)
 80082b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80082b4:	4808      	ldr	r0, [pc, #32]	@ (80082d8 <AccelRead+0x1e4>)
 80082b6:	f011 fe53 	bl	8019f60 <iprintf>

}
 80082ba:	bf00      	nop
 80082bc:	3708      	adds	r7, #8
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	20000460 	.word	0x20000460
 80082c8:	200002d4 	.word	0x200002d4
 80082cc:	200002d8 	.word	0x200002d8
 80082d0:	3b83126f 	.word	0x3b83126f
 80082d4:	42c80000 	.word	0x42c80000
 80082d8:	0801dad8 	.word	0x0801dad8

080082dc <UV_init>:
	HAL_I2C_Mem_Write(&hi2c3,LTR390_WR,LTR390_INT_PST,I2C_MEMADD_SIZE_8BIT,&cmd[1],1,HAL_MAX_DELAY);
}
// low throsold =100 //0x64 low byte:0x64,mid byte:0x00,high byte:00
// High_throsold=1000//0x3E8 low_byte:0x08,mid_byte=0x3E,High_byte:00
void UV_init(void)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b086      	sub	sp, #24
 80082e0:	af04      	add	r7, sp, #16
	uint8_t cmd[1]={0};
 80082e2:	2300      	movs	r3, #0
 80082e4:	713b      	strb	r3, [r7, #4]
	 //cmd[0]=0x10;//0x0A;//0x02;
	 //HAL_I2C_Mem_Write(&hi2c3,LTR390_WR,LTR390_MAIN_CTRL,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
	 cmd[0]=0x0A;//0x02;
 80082e6:	230a      	movs	r3, #10
 80082e8:	713b      	strb	r3, [r7, #4]
	 HAL_I2C_Mem_Write(&hi2c3,LTR390_WR,LTR390_MAIN_CTRL,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 80082ea:	f04f 33ff 	mov.w	r3, #4294967295
 80082ee:	9302      	str	r3, [sp, #8]
 80082f0:	2301      	movs	r3, #1
 80082f2:	9301      	str	r3, [sp, #4]
 80082f4:	1d3b      	adds	r3, r7, #4
 80082f6:	9300      	str	r3, [sp, #0]
 80082f8:	2301      	movs	r3, #1
 80082fa:	2200      	movs	r2, #0
 80082fc:	21a6      	movs	r1, #166	@ 0xa6
 80082fe:	4814      	ldr	r0, [pc, #80]	@ (8008350 <UV_init+0x74>)
 8008300:	f009 fd40 	bl	8011d84 <HAL_I2C_Mem_Write>
	 cmd[0]=0x05;
 8008304:	2305      	movs	r3, #5
 8008306:	713b      	strb	r3, [r7, #4]
	 HAL_I2C_Mem_Write(&hi2c3,LTR390_WR,LTR390_MEAS_RATE,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 8008308:	f04f 33ff 	mov.w	r3, #4294967295
 800830c:	9302      	str	r3, [sp, #8]
 800830e:	2301      	movs	r3, #1
 8008310:	9301      	str	r3, [sp, #4]
 8008312:	1d3b      	adds	r3, r7, #4
 8008314:	9300      	str	r3, [sp, #0]
 8008316:	2301      	movs	r3, #1
 8008318:	2204      	movs	r2, #4
 800831a:	21a6      	movs	r1, #166	@ 0xa6
 800831c:	480c      	ldr	r0, [pc, #48]	@ (8008350 <UV_init+0x74>)
 800831e:	f009 fd31 	bl	8011d84 <HAL_I2C_Mem_Write>
	 cmd[0]=0x04;//0x01;
 8008322:	2304      	movs	r3, #4
 8008324:	713b      	strb	r3, [r7, #4]
	 HAL_I2C_Mem_Write(&hi2c3,LTR390_WR,LTR390_GAIN,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 8008326:	f04f 33ff 	mov.w	r3, #4294967295
 800832a:	9302      	str	r3, [sp, #8]
 800832c:	2301      	movs	r3, #1
 800832e:	9301      	str	r3, [sp, #4]
 8008330:	1d3b      	adds	r3, r7, #4
 8008332:	9300      	str	r3, [sp, #0]
 8008334:	2301      	movs	r3, #1
 8008336:	2205      	movs	r2, #5
 8008338:	21a6      	movs	r1, #166	@ 0xa6
 800833a:	4805      	ldr	r0, [pc, #20]	@ (8008350 <UV_init+0x74>)
 800833c:	f009 fd22 	bl	8011d84 <HAL_I2C_Mem_Write>
	 HAL_Delay(10);
 8008340:	200a      	movs	r0, #10
 8008342:	f000 fc7c 	bl	8008c3e <HAL_Delay>
 //Set_thresold(100,1000);
 //config_interrupt();

}
 8008346:	bf00      	nop
 8008348:	3708      	adds	r7, #8
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	20000460 	.word	0x20000460

08008354 <f_UV>:


void f_UV(void) // measure UVI value
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b086      	sub	sp, #24
 8008358:	af04      	add	r7, sp, #16

  uint8_t Status=0;
 800835a:	2300      	movs	r3, #0
 800835c:	70fb      	strb	r3, [r7, #3]
  while(Status!=0x08){
 800835e:	e011      	b.n	8008384 <f_UV+0x30>
  HAL_I2C_Mem_Read(&hi2c3,LTR390_RD,LTR390_MAIN_STATUS,I2C_MEMADD_SIZE_8BIT,&Status,1,HAL_MAX_DELAY);
 8008360:	f04f 33ff 	mov.w	r3, #4294967295
 8008364:	9302      	str	r3, [sp, #8]
 8008366:	2301      	movs	r3, #1
 8008368:	9301      	str	r3, [sp, #4]
 800836a:	1cfb      	adds	r3, r7, #3
 800836c:	9300      	str	r3, [sp, #0]
 800836e:	2301      	movs	r3, #1
 8008370:	2207      	movs	r2, #7
 8008372:	21a7      	movs	r1, #167	@ 0xa7
 8008374:	481e      	ldr	r0, [pc, #120]	@ (80083f0 <f_UV+0x9c>)
 8008376:	f009 fe19 	bl	8011fac <HAL_I2C_Mem_Read>
  printf("Inside status %d:\n",Status);
 800837a:	78fb      	ldrb	r3, [r7, #3]
 800837c:	4619      	mov	r1, r3
 800837e:	481d      	ldr	r0, [pc, #116]	@ (80083f4 <f_UV+0xa0>)
 8008380:	f011 fdee 	bl	8019f60 <iprintf>
  while(Status!=0x08){
 8008384:	78fb      	ldrb	r3, [r7, #3]
 8008386:	2b08      	cmp	r3, #8
 8008388:	d1ea      	bne.n	8008360 <f_UV+0xc>
  }

  HAL_I2C_Mem_Read(&hi2c3,LTR390_RD,LTR390_UVSDATA,I2C_MEMADD_SIZE_8BIT,data_Big_Endian,3,HAL_MAX_DELAY);
 800838a:	f04f 33ff 	mov.w	r3, #4294967295
 800838e:	9302      	str	r3, [sp, #8]
 8008390:	2303      	movs	r3, #3
 8008392:	9301      	str	r3, [sp, #4]
 8008394:	4b18      	ldr	r3, [pc, #96]	@ (80083f8 <f_UV+0xa4>)
 8008396:	9300      	str	r3, [sp, #0]
 8008398:	2301      	movs	r3, #1
 800839a:	2210      	movs	r2, #16
 800839c:	21a7      	movs	r1, #167	@ 0xa7
 800839e:	4814      	ldr	r0, [pc, #80]	@ (80083f0 <f_UV+0x9c>)
 80083a0:	f009 fe04 	bl	8011fac <HAL_I2C_Mem_Read>

  uint32_t UV_count = ((data_Big_Endian[2]*65536) + (data_Big_Endian[1]*256) +data_Big_Endian[0]);
 80083a4:	4b14      	ldr	r3, [pc, #80]	@ (80083f8 <f_UV+0xa4>)
 80083a6:	789b      	ldrb	r3, [r3, #2]
 80083a8:	021b      	lsls	r3, r3, #8
 80083aa:	4a13      	ldr	r2, [pc, #76]	@ (80083f8 <f_UV+0xa4>)
 80083ac:	7852      	ldrb	r2, [r2, #1]
 80083ae:	4413      	add	r3, r2
 80083b0:	021b      	lsls	r3, r3, #8
 80083b2:	4a11      	ldr	r2, [pc, #68]	@ (80083f8 <f_UV+0xa4>)
 80083b4:	7812      	ldrb	r2, [r2, #0]
 80083b6:	4413      	add	r3, r2
 80083b8:	607b      	str	r3, [r7, #4]
  f_UVI=((float)UV_count/2300)*1;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	ee07 3a90 	vmov	s15, r3
 80083c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80083c4:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 80083fc <f_UV+0xa8>
 80083c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80083cc:	4b0c      	ldr	r3, [pc, #48]	@ (8008400 <f_UV+0xac>)
 80083ce:	edc3 7a00 	vstr	s15, [r3]
  printf("uv_raw :[%d] UVI: [%f] \n",UV_count,f_UVI);
 80083d2:	4b0b      	ldr	r3, [pc, #44]	@ (8008400 <f_UV+0xac>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7ff f896 	bl	8007508 <__aeabi_f2d>
 80083dc:	4602      	mov	r2, r0
 80083de:	460b      	mov	r3, r1
 80083e0:	6879      	ldr	r1, [r7, #4]
 80083e2:	4808      	ldr	r0, [pc, #32]	@ (8008404 <f_UV+0xb0>)
 80083e4:	f011 fdbc 	bl	8019f60 <iprintf>
  //return (float)f_UVI;

}
 80083e8:	bf00      	nop
 80083ea:	3708      	adds	r7, #8
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	20000460 	.word	0x20000460
 80083f4:	0801db08 	.word	0x0801db08
 80083f8:	200002f0 	.word	0x200002f0
 80083fc:	450fc000 	.word	0x450fc000
 8008400:	200002f4 	.word	0x200002f4
 8008404:	0801db1c 	.word	0x0801db1c

08008408 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8008408:	b480      	push	{r7}
 800840a:	b085      	sub	sp, #20
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8008410:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008414:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008416:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4313      	orrs	r3, r2
 800841e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8008420:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008424:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4013      	ands	r3, r2
 800842a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800842c:	68fb      	ldr	r3, [r7, #12]
}
 800842e:	bf00      	nop
 8008430:	3714      	adds	r7, #20
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr
	...

0800843c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b086      	sub	sp, #24
 8008440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8008442:	463b      	mov	r3, r7
 8008444:	2200      	movs	r2, #0
 8008446:	601a      	str	r2, [r3, #0]
 8008448:	605a      	str	r2, [r3, #4]
 800844a:	609a      	str	r2, [r3, #8]
 800844c:	60da      	str	r2, [r3, #12]
 800844e:	611a      	str	r2, [r3, #16]
 8008450:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8008452:	4b30      	ldr	r3, [pc, #192]	@ (8008514 <MX_ADC1_Init+0xd8>)
 8008454:	4a30      	ldr	r2, [pc, #192]	@ (8008518 <MX_ADC1_Init+0xdc>)
 8008456:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8008458:	4b2e      	ldr	r3, [pc, #184]	@ (8008514 <MX_ADC1_Init+0xd8>)
 800845a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800845e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008460:	4b2c      	ldr	r3, [pc, #176]	@ (8008514 <MX_ADC1_Init+0xd8>)
 8008462:	2200      	movs	r2, #0
 8008464:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008466:	4b2b      	ldr	r3, [pc, #172]	@ (8008514 <MX_ADC1_Init+0xd8>)
 8008468:	2200      	movs	r2, #0
 800846a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800846c:	4b29      	ldr	r3, [pc, #164]	@ (8008514 <MX_ADC1_Init+0xd8>)
 800846e:	2201      	movs	r2, #1
 8008470:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8008472:	4b28      	ldr	r3, [pc, #160]	@ (8008514 <MX_ADC1_Init+0xd8>)
 8008474:	2208      	movs	r2, #8
 8008476:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 8008478:	4b26      	ldr	r3, [pc, #152]	@ (8008514 <MX_ADC1_Init+0xd8>)
 800847a:	2201      	movs	r2, #1
 800847c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800847e:	4b25      	ldr	r3, [pc, #148]	@ (8008514 <MX_ADC1_Init+0xd8>)
 8008480:	2201      	movs	r2, #1
 8008482:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8008484:	4b23      	ldr	r3, [pc, #140]	@ (8008514 <MX_ADC1_Init+0xd8>)
 8008486:	2202      	movs	r2, #2
 8008488:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800848a:	4b22      	ldr	r3, [pc, #136]	@ (8008514 <MX_ADC1_Init+0xd8>)
 800848c:	2200      	movs	r2, #0
 800848e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008492:	4b20      	ldr	r3, [pc, #128]	@ (8008514 <MX_ADC1_Init+0xd8>)
 8008494:	2200      	movs	r2, #0
 8008496:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008498:	4b1e      	ldr	r3, [pc, #120]	@ (8008514 <MX_ADC1_Init+0xd8>)
 800849a:	2200      	movs	r2, #0
 800849c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800849e:	4b1d      	ldr	r3, [pc, #116]	@ (8008514 <MX_ADC1_Init+0xd8>)
 80084a0:	2200      	movs	r2, #0
 80084a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80084a6:	4b1b      	ldr	r3, [pc, #108]	@ (8008514 <MX_ADC1_Init+0xd8>)
 80084a8:	2200      	movs	r2, #0
 80084aa:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80084ac:	4b19      	ldr	r3, [pc, #100]	@ (8008514 <MX_ADC1_Init+0xd8>)
 80084ae:	2200      	movs	r2, #0
 80084b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80084b4:	4817      	ldr	r0, [pc, #92]	@ (8008514 <MX_ADC1_Init+0xd8>)
 80084b6:	f007 fb75 	bl	800fba4 <HAL_ADC_Init>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d001      	beq.n	80084c4 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80084c0:	f002 fa64 	bl	800a98c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80084c4:	4b15      	ldr	r3, [pc, #84]	@ (800851c <MX_ADC1_Init+0xe0>)
 80084c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80084c8:	2306      	movs	r3, #6
 80084ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80084cc:	2305      	movs	r3, #5
 80084ce:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80084d0:	237f      	movs	r3, #127	@ 0x7f
 80084d2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80084d4:	2304      	movs	r3, #4
 80084d6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80084d8:	2300      	movs	r3, #0
 80084da:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80084dc:	463b      	mov	r3, r7
 80084de:	4619      	mov	r1, r3
 80084e0:	480c      	ldr	r0, [pc, #48]	@ (8008514 <MX_ADC1_Init+0xd8>)
 80084e2:	f007 fdaf 	bl	8010044 <HAL_ADC_ConfigChannel>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d001      	beq.n	80084f0 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80084ec:	f002 fa4e 	bl	800a98c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80084f0:	4b0b      	ldr	r3, [pc, #44]	@ (8008520 <MX_ADC1_Init+0xe4>)
 80084f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80084f4:	230c      	movs	r3, #12
 80084f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80084f8:	463b      	mov	r3, r7
 80084fa:	4619      	mov	r1, r3
 80084fc:	4805      	ldr	r0, [pc, #20]	@ (8008514 <MX_ADC1_Init+0xd8>)
 80084fe:	f007 fda1 	bl	8010044 <HAL_ADC_ConfigChannel>
 8008502:	4603      	mov	r3, r0
 8008504:	2b00      	cmp	r3, #0
 8008506:	d001      	beq.n	800850c <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8008508:	f002 fa40 	bl	800a98c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800850c:	bf00      	nop
 800850e:	3718      	adds	r7, #24
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}
 8008514:	200002f8 	.word	0x200002f8
 8008518:	50040000 	.word	0x50040000
 800851c:	10c00010 	.word	0x10c00010
 8008520:	36902000 	.word	0x36902000

08008524 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b09c      	sub	sp, #112	@ 0x70
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800852c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8008530:	2200      	movs	r2, #0
 8008532:	601a      	str	r2, [r3, #0]
 8008534:	605a      	str	r2, [r3, #4]
 8008536:	609a      	str	r2, [r3, #8]
 8008538:	60da      	str	r2, [r3, #12]
 800853a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800853c:	f107 030c 	add.w	r3, r7, #12
 8008540:	2250      	movs	r2, #80	@ 0x50
 8008542:	2100      	movs	r1, #0
 8008544:	4618      	mov	r0, r3
 8008546:	f011 fe73 	bl	801a230 <memset>
  if(adcHandle->Instance==ADC1)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a31      	ldr	r2, [pc, #196]	@ (8008614 <HAL_ADC_MspInit+0xf0>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d15b      	bne.n	800860c <HAL_ADC_MspInit+0xe8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8008554:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008558:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800855a:	2318      	movs	r3, #24
 800855c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800855e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008562:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8008564:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008568:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800856a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800856e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 8008570:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008574:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8008576:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800857a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800857c:	f107 030c 	add.w	r3, r7, #12
 8008580:	4618      	mov	r0, r3
 8008582:	f00c fbe0 	bl	8014d46 <HAL_RCCEx_PeriphCLKConfig>
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d001      	beq.n	8008590 <HAL_ADC_MspInit+0x6c>
    {
      Error_Handler();
 800858c:	f002 f9fe 	bl	800a98c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8008590:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8008594:	f7ff ff38 	bl	8008408 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008598:	2004      	movs	r0, #4
 800859a:	f7ff ff35 	bl	8008408 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800859e:	2318      	movs	r3, #24
 80085a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80085a2:	2303      	movs	r3, #3
 80085a4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085a6:	2300      	movs	r3, #0
 80085a8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80085aa:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80085ae:	4619      	mov	r1, r3
 80085b0:	4819      	ldr	r0, [pc, #100]	@ (8008618 <HAL_ADC_MspInit+0xf4>)
 80085b2:	f009 f891 	bl	80116d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80085b6:	4b19      	ldr	r3, [pc, #100]	@ (800861c <HAL_ADC_MspInit+0xf8>)
 80085b8:	4a19      	ldr	r2, [pc, #100]	@ (8008620 <HAL_ADC_MspInit+0xfc>)
 80085ba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80085bc:	4b17      	ldr	r3, [pc, #92]	@ (800861c <HAL_ADC_MspInit+0xf8>)
 80085be:	2205      	movs	r2, #5
 80085c0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80085c2:	4b16      	ldr	r3, [pc, #88]	@ (800861c <HAL_ADC_MspInit+0xf8>)
 80085c4:	2200      	movs	r2, #0
 80085c6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80085c8:	4b14      	ldr	r3, [pc, #80]	@ (800861c <HAL_ADC_MspInit+0xf8>)
 80085ca:	2200      	movs	r2, #0
 80085cc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80085ce:	4b13      	ldr	r3, [pc, #76]	@ (800861c <HAL_ADC_MspInit+0xf8>)
 80085d0:	2280      	movs	r2, #128	@ 0x80
 80085d2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80085d4:	4b11      	ldr	r3, [pc, #68]	@ (800861c <HAL_ADC_MspInit+0xf8>)
 80085d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80085da:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80085dc:	4b0f      	ldr	r3, [pc, #60]	@ (800861c <HAL_ADC_MspInit+0xf8>)
 80085de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80085e2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80085e4:	4b0d      	ldr	r3, [pc, #52]	@ (800861c <HAL_ADC_MspInit+0xf8>)
 80085e6:	2220      	movs	r2, #32
 80085e8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80085ea:	4b0c      	ldr	r3, [pc, #48]	@ (800861c <HAL_ADC_MspInit+0xf8>)
 80085ec:	2200      	movs	r2, #0
 80085ee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80085f0:	480a      	ldr	r0, [pc, #40]	@ (800861c <HAL_ADC_MspInit+0xf8>)
 80085f2:	f008 fd3f 	bl	8011074 <HAL_DMA_Init>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d001      	beq.n	8008600 <HAL_ADC_MspInit+0xdc>
    {
      Error_Handler();
 80085fc:	f002 f9c6 	bl	800a98c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a06      	ldr	r2, [pc, #24]	@ (800861c <HAL_ADC_MspInit+0xf8>)
 8008604:	64da      	str	r2, [r3, #76]	@ 0x4c
 8008606:	4a05      	ldr	r2, [pc, #20]	@ (800861c <HAL_ADC_MspInit+0xf8>)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800860c:	bf00      	nop
 800860e:	3770      	adds	r7, #112	@ 0x70
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	50040000 	.word	0x50040000
 8008618:	48000800 	.word	0x48000800
 800861c:	2000035c 	.word	0x2000035c
 8008620:	40020008 	.word	0x40020008

08008624 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8008624:	b5b0      	push	{r4, r5, r7, lr}
 8008626:	b088      	sub	sp, #32
 8008628:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800862a:	4b0b      	ldr	r3, [pc, #44]	@ (8008658 <APPD_EnableCPU2+0x34>)
 800862c:	1d3c      	adds	r4, r7, #4
 800862e:	461d      	mov	r5, r3
 8008630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008632:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008634:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008638:	c403      	stmia	r4!, {r0, r1}
 800863a:	8022      	strh	r2, [r4, #0]
 800863c:	3402      	adds	r4, #2
 800863e:	0c13      	lsrs	r3, r2, #16
 8008640:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8008642:	f010 f9fb 	bl	8018a3c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8008646:	1d3b      	adds	r3, r7, #4
 8008648:	4618      	mov	r0, r3
 800864a:	f00f fc4c 	bl	8017ee6 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800864e:	bf00      	nop
}
 8008650:	3720      	adds	r7, #32
 8008652:	46bd      	mov	sp, r7
 8008654:	bdb0      	pop	{r4, r5, r7, pc}
 8008656:	bf00      	nop
 8008658:	0801db5c 	.word	0x0801db5c

0800865c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8008664:	4b07      	ldr	r3, [pc, #28]	@ (8008684 <LL_C2_PWR_SetPowerMode+0x28>)
 8008666:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800866a:	f023 0207 	bic.w	r2, r3, #7
 800866e:	4905      	ldr	r1, [pc, #20]	@ (8008684 <LL_C2_PWR_SetPowerMode+0x28>)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	4313      	orrs	r3, r2
 8008674:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8008678:	bf00      	nop
 800867a:	370c      	adds	r7, #12
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr
 8008684:	58000400 	.word	0x58000400

08008688 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8008690:	4b06      	ldr	r3, [pc, #24]	@ (80086ac <LL_EXTI_EnableIT_32_63+0x24>)
 8008692:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8008696:	4905      	ldr	r1, [pc, #20]	@ (80086ac <LL_EXTI_EnableIT_32_63+0x24>)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4313      	orrs	r3, r2
 800869c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80086a0:	bf00      	nop
 80086a2:	370c      	adds	r7, #12
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr
 80086ac:	58000800 	.word	0x58000800

080086b0 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80086b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80086bc:	4a0a      	ldr	r2, [pc, #40]	@ (80086e8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80086be:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80086c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80086c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80086ca:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	021b      	lsls	r3, r3, #8
 80086d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80086d6:	4313      	orrs	r3, r2
 80086d8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 80086dc:	bf00      	nop
 80086de:	370c      	adds	r7, #12
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr
 80086e8:	cafecafe 	.word	0xcafecafe

080086ec <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80086f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80086fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4313      	orrs	r3, r2
 8008706:	608b      	str	r3, [r1, #8]
}
 8008708:	bf00      	nop
 800870a:	370c      	adds	r7, #12
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8008714:	b480      	push	{r7}
 8008716:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008718:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800871c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008720:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008724:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008728:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800872c:	bf00      	nop
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr

08008736 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8008736:	b480      	push	{r7}
 8008738:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800873a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800873e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008742:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008746:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800874a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800874e:	bf00      	nop
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8008758:	b480      	push	{r7}
 800875a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 800875c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008760:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008764:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008768:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800876c:	d101      	bne.n	8008772 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800876e:	2301      	movs	r3, #1
 8008770:	e000      	b.n	8008774 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8008772:	2300      	movs	r3, #0
}
 8008774:	4618      	mov	r0, r3
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr

0800877e <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800877e:	b480      	push	{r7}
 8008780:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8008782:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008786:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800878a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800878e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008792:	d101      	bne.n	8008798 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8008794:	2301      	movs	r3, #1
 8008796:	e000      	b.n	800879a <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80087ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80087b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80087b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	4313      	orrs	r3, r2
 80087ba:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80087bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80087c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4013      	ands	r3, r2
 80087c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80087c8:	68fb      	ldr	r3, [r7, #12]
}
 80087ca:	bf00      	nop
 80087cc:	3714      	adds	r7, #20
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr
	...

080087d8 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80087d8:	b480      	push	{r7}
 80087da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80087dc:	4b04      	ldr	r3, [pc, #16]	@ (80087f0 <LL_DBGMCU_GetDeviceID+0x18>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop
 80087f0:	e0042000 	.word	0xe0042000

080087f4 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80087f4:	b480      	push	{r7}
 80087f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80087f8:	4b04      	ldr	r3, [pc, #16]	@ (800880c <LL_DBGMCU_GetRevisionID+0x18>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	0c1b      	lsrs	r3, r3, #16
 80087fe:	b29b      	uxth	r3, r3
}
 8008800:	4618      	mov	r0, r3
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	e0042000 	.word	0xe0042000

08008810 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	685a      	ldr	r2, [r3, #4]
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	041b      	lsls	r3, r3, #16
 8008822:	431a      	orrs	r2, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	605a      	str	r2, [r3, #4]
}
 8008828:	bf00      	nop
 800882a:	370c      	adds	r7, #12
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	685a      	ldr	r2, [r3, #4]
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	431a      	orrs	r2, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	605a      	str	r2, [r3, #4]
}
 800884a:	bf00      	nop
 800884c:	370c      	adds	r7, #12
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr

08008856 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008856:	b480      	push	{r7}
 8008858:	b083      	sub	sp, #12
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
 800885e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	695a      	ldr	r2, [r3, #20]
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	041b      	lsls	r3, r3, #16
 8008868:	431a      	orrs	r2, r3
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	615a      	str	r2, [r3, #20]
}
 800886e:	bf00      	nop
 8008870:	370c      	adds	r7, #12
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr

0800887a <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800887a:	b480      	push	{r7}
 800887c:	b083      	sub	sp, #12
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
 8008882:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	695a      	ldr	r2, [r3, #20]
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	431a      	orrs	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	615a      	str	r2, [r3, #20]
}
 8008890:	bf00      	nop
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr

0800889c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	683a      	ldr	r2, [r7, #0]
 80088aa:	609a      	str	r2, [r3, #8]
}
 80088ac:	bf00      	nop
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	683a      	ldr	r2, [r7, #0]
 80088c6:	619a      	str	r2, [r3, #24]
}
 80088c8:	bf00      	nop
 80088ca:	370c      	adds	r7, #12
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80088d4:	b480      	push	{r7}
 80088d6:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80088d8:	4b05      	ldr	r3, [pc, #20]	@ (80088f0 <LL_LPM_EnableSleep+0x1c>)
 80088da:	691b      	ldr	r3, [r3, #16]
 80088dc:	4a04      	ldr	r2, [pc, #16]	@ (80088f0 <LL_LPM_EnableSleep+0x1c>)
 80088de:	f023 0304 	bic.w	r3, r3, #4
 80088e2:	6113      	str	r3, [r2, #16]
}
 80088e4:	bf00      	nop
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	e000ed00 	.word	0xe000ed00

080088f4 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	22ff      	movs	r2, #255	@ 0xff
 8008900:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8008902:	bf00      	nop
 8008904:	370c      	adds	r7, #12
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr

0800890e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800890e:	b480      	push	{r7}
 8008910:	b083      	sub	sp, #12
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	22ca      	movs	r2, #202	@ 0xca
 800891a:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2253      	movs	r2, #83	@ 0x53
 8008920:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8008922:	bf00      	nop
 8008924:	370c      	adds	r7, #12
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr

0800892e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800892e:	b480      	push	{r7}
 8008930:	b083      	sub	sp, #12
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
 8008936:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	f023 0207 	bic.w	r2, r3, #7
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	431a      	orrs	r2, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	609a      	str	r2, [r3, #8]
}
 8008948:	bf00      	nop
 800894a:	370c      	adds	r7, #12
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8008958:	4b04      	ldr	r3, [pc, #16]	@ (800896c <MX_APPE_Config+0x18>)
 800895a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800895e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8008960:	f000 f824 	bl	80089ac <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8008964:	f000 f864 	bl	8008a30 <Config_HSE>

  return;
 8008968:	bf00      	nop
}
 800896a:	bd80      	pop	{r7, pc}
 800896c:	58004000 	.word	0x58004000

08008970 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8008974:	f000 f870 	bl	8008a58 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8008978:	f000 f888 	bl	8008a8c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800897c:	4903      	ldr	r1, [pc, #12]	@ (800898c <MX_APPE_Init+0x1c>)
 800897e:	2000      	movs	r0, #0
 8008980:	f001 fb24 	bl	8009fcc <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8008984:	f000 f890 	bl	8008aa8 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8008988:	bf00      	nop
}
 800898a:	bd80      	pop	{r7, pc}
 800898c:	20000564 	.word	0x20000564

08008990 <Init_Smps>:

void Init_Smps(void)
{
 8008990:	b480      	push	{r7}
 8008992:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8008994:	bf00      	nop
}
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr

0800899e <Init_Exti>:

void Init_Exti(void)
{
 800899e:	b580      	push	{r7, lr}
 80089a0:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80089a2:	2050      	movs	r0, #80	@ 0x50
 80089a4:	f7ff fe70 	bl	8008688 <LL_EXTI_EnableIT_32_63>

  return;
 80089a8:	bf00      	nop
}
 80089aa:	bd80      	pop	{r7, pc}

080089ac <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80089b0:	f000 f804 	bl	80089bc <Reset_BackupDomain>

  Reset_IPCC();
 80089b4:	f000 f81a 	bl	80089ec <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80089b8:	bf00      	nop
}
 80089ba:	bd80      	pop	{r7, pc}

080089bc <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80089c0:	f7ff feca 	bl	8008758 <LL_RCC_IsActiveFlag_PINRST>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00d      	beq.n	80089e6 <Reset_BackupDomain+0x2a>
 80089ca:	f7ff fed8 	bl	800877e <LL_RCC_IsActiveFlag_SFTRST>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d108      	bne.n	80089e6 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80089d4:	f009 ffe4 	bl	80129a0 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80089d8:	f009 ffe2 	bl	80129a0 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80089dc:	f7ff fe9a 	bl	8008714 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80089e0:	f7ff fea9 	bl	8008736 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80089e4:	bf00      	nop
 80089e6:	bf00      	nop
}
 80089e8:	bd80      	pop	{r7, pc}
	...

080089ec <Reset_IPCC>:

static void Reset_IPCC(void)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80089f0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80089f4:	f7ff fed6 	bl	80087a4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80089f8:	213f      	movs	r1, #63	@ 0x3f
 80089fa:	480c      	ldr	r0, [pc, #48]	@ (8008a2c <Reset_IPCC+0x40>)
 80089fc:	f7ff ff4e 	bl	800889c <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8008a00:	213f      	movs	r1, #63	@ 0x3f
 8008a02:	480a      	ldr	r0, [pc, #40]	@ (8008a2c <Reset_IPCC+0x40>)
 8008a04:	f7ff ff58 	bl	80088b8 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8008a08:	213f      	movs	r1, #63	@ 0x3f
 8008a0a:	4808      	ldr	r0, [pc, #32]	@ (8008a2c <Reset_IPCC+0x40>)
 8008a0c:	f7ff ff00 	bl	8008810 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8008a10:	213f      	movs	r1, #63	@ 0x3f
 8008a12:	4806      	ldr	r0, [pc, #24]	@ (8008a2c <Reset_IPCC+0x40>)
 8008a14:	f7ff ff1f 	bl	8008856 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8008a18:	213f      	movs	r1, #63	@ 0x3f
 8008a1a:	4804      	ldr	r0, [pc, #16]	@ (8008a2c <Reset_IPCC+0x40>)
 8008a1c:	f7ff ff0a 	bl	8008834 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8008a20:	213f      	movs	r1, #63	@ 0x3f
 8008a22:	4802      	ldr	r0, [pc, #8]	@ (8008a2c <Reset_IPCC+0x40>)
 8008a24:	f7ff ff29 	bl	800887a <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8008a28:	bf00      	nop
}
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	58000c00 	.word	0x58000c00

08008a30 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8008a36:	2000      	movs	r0, #0
 8008a38:	f00f fa16 	bl	8017e68 <OTP_Read>
 8008a3c:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d005      	beq.n	8008a50 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	799b      	ldrb	r3, [r3, #6]
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f7ff fe31 	bl	80086b0 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8008a4e:	bf00      	nop
 8008a50:	bf00      	nop
}
 8008a52:	3708      	adds	r7, #8
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <System_Init>:

static void System_Init(void)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	af00      	add	r7, sp, #0
  Init_Smps();
 8008a5c:	f7ff ff98 	bl	8008990 <Init_Smps>

  Init_Exti();
 8008a60:	f7ff ff9d 	bl	800899e <Init_Exti>

  Init_Rtc();
 8008a64:	f000 f802 	bl	8008a6c <Init_Rtc>

  return;
 8008a68:	bf00      	nop
}
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <Init_Rtc>:

static void Init_Rtc(void)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8008a70:	4805      	ldr	r0, [pc, #20]	@ (8008a88 <Init_Rtc+0x1c>)
 8008a72:	f7ff ff4c 	bl	800890e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8008a76:	2100      	movs	r1, #0
 8008a78:	4803      	ldr	r0, [pc, #12]	@ (8008a88 <Init_Rtc+0x1c>)
 8008a7a:	f7ff ff58 	bl	800892e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8008a7e:	4802      	ldr	r0, [pc, #8]	@ (8008a88 <Init_Rtc+0x1c>)
 8008a80:	f7ff ff38 	bl	80088f4 <LL_RTC_EnableWriteProtection>

  return;
 8008a84:	bf00      	nop
}
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	40002800 	.word	0x40002800

08008a8c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8008a90:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8008a94:	f7ff fe2a 	bl	80086ec <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8008a98:	f010 f85c 	bl	8018b54 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8008a9c:	2004      	movs	r0, #4
 8008a9e:	f7ff fddd 	bl	800865c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8008aa2:	bf00      	nop
}
 8008aa4:	bd80      	pop	{r7, pc}
	...

08008aa8 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b088      	sub	sp, #32
 8008aac:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 8008aae:	f00f fe0f 	bl	80186d0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8008ab2:	4a11      	ldr	r2, [pc, #68]	@ (8008af8 <appe_Tl_Init+0x50>)
 8008ab4:	2100      	movs	r1, #0
 8008ab6:	2080      	movs	r0, #128	@ 0x80
 8008ab8:	f010 f9c0 	bl	8018e3c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8008abc:	4b0f      	ldr	r3, [pc, #60]	@ (8008afc <appe_Tl_Init+0x54>)
 8008abe:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8008ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8008b00 <appe_Tl_Init+0x58>)
 8008ac2:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8008ac4:	463b      	mov	r3, r7
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	480e      	ldr	r0, [pc, #56]	@ (8008b04 <appe_Tl_Init+0x5c>)
 8008aca:	f00f fae7 	bl	801809c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8008ace:	4b0e      	ldr	r3, [pc, #56]	@ (8008b08 <appe_Tl_Init+0x60>)
 8008ad0:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8008ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8008b0c <appe_Tl_Init+0x64>)
 8008ad4:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8008ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8008b10 <appe_Tl_Init+0x68>)
 8008ad8:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8008ada:	f240 533c 	movw	r3, #1340	@ 0x53c
 8008ade:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8008ae0:	f107 0308 	add.w	r3, r7, #8
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f00f ff35 	bl	8018954 <TL_MM_Init>

  TL_Enable();
 8008aea:	f00f fdeb 	bl	80186c4 <TL_Enable>

  return;
 8008aee:	bf00      	nop
}
 8008af0:	3720      	adds	r7, #32
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	080180d5 	.word	0x080180d5
 8008afc:	20030734 	.word	0x20030734
 8008b00:	08008b15 	.word	0x08008b15
 8008b04:	08008b2d 	.word	0x08008b2d
 8008b08:	2003094c 	.word	0x2003094c
 8008b0c:	20030840 	.word	0x20030840
 8008b10:	200301f8 	.word	0x200301f8

08008b14 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8008b1e:	bf00      	nop
}
 8008b20:	370c      	adds	r7, #12
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr
	...

08008b2c <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b088      	sub	sp, #32
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	330b      	adds	r3, #11
 8008b3a:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	881b      	ldrh	r3, [r3, #0]
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8008b46:	2b07      	cmp	r3, #7
 8008b48:	d81f      	bhi.n	8008b8a <APPE_SysUserEvtRx+0x5e>
 8008b4a:	a201      	add	r2, pc, #4	@ (adr r2, 8008b50 <APPE_SysUserEvtRx+0x24>)
 8008b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b50:	08008b71 	.word	0x08008b71
 8008b54:	08008b83 	.word	0x08008b83
 8008b58:	08008b8b 	.word	0x08008b8b
 8008b5c:	08008b8b 	.word	0x08008b8b
 8008b60:	08008b8b 	.word	0x08008b8b
 8008b64:	08008b8b 	.word	0x08008b8b
 8008b68:	08008b8b 	.word	0x08008b8b
 8008b6c:	08008b8b 	.word	0x08008b8b
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8008b70:	f107 030c 	add.w	r3, r7, #12
 8008b74:	4618      	mov	r0, r3
 8008b76:	f00f f9e3 	bl	8017f40 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 f81b 	bl	8008bb6 <APPE_SysEvtReadyProcessing>
    break;
 8008b80:	e004      	b.n	8008b8c <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 f806 	bl	8008b94 <APPE_SysEvtError>
    break;
 8008b88:	e000      	b.n	8008b8c <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8008b8a:	bf00      	nop
  }

  return;
 8008b8c:	bf00      	nop
}
 8008b8e:	3720      	adds	r7, #32
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b085      	sub	sp, #20
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	330b      	adds	r3, #11
 8008ba2:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	3302      	adds	r3, #2
 8008ba8:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8008baa:	bf00      	nop
}
 8008bac:	3714      	adds	r7, #20
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr

08008bb6 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b08a      	sub	sp, #40	@ 0x28
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8008bbe:	f107 0308 	add.w	r3, r7, #8
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	601a      	str	r2, [r3, #0]
 8008bc6:	605a      	str	r2, [r3, #4]
 8008bc8:	609a      	str	r2, [r3, #8]
 8008bca:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	330b      	adds	r3, #11
 8008bda:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	3302      	adds	r3, #2
 8008be0:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8008be2:	69bb      	ldr	r3, [r7, #24]
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d11d      	bne.n	8008c26 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8008bea:	f7ff fd1b 	bl	8008624 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8008bee:	230f      	movs	r3, #15
 8008bf0:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8008bf2:	237f      	movs	r3, #127	@ 0x7f
 8008bf4:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8008bf6:	f7ff fdfd 	bl	80087f4 <LL_DBGMCU_GetRevisionID>
 8008bfa:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8008bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8008c02:	f7ff fde9 	bl	80087d8 <LL_DBGMCU_GetDeviceID>
 8008c06:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8008c08:	6a3b      	ldr	r3, [r7, #32]
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8008c0e:	f107 0308 	add.w	r3, r7, #8
 8008c12:	4618      	mov	r0, r3
 8008c14:	f00f f97e 	bl	8017f14 <SHCI_C2_Config>

    APP_BLE_Init();
 8008c18:	f003 fcee 	bl	800c5f8 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	2001      	movs	r0, #1
 8008c20:	f00f ffaa 	bl	8018b78 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8008c24:	e007      	b.n	8008c36 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d103      	bne.n	8008c36 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2200      	movs	r2, #0
 8008c32:	701a      	strb	r2, [r3, #0]
  return;
 8008c34:	bf00      	nop
 8008c36:	bf00      	nop
}
 8008c38:	3728      	adds	r7, #40	@ 0x28
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}

08008c3e <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8008c3e:	b580      	push	{r7, lr}
 8008c40:	b084      	sub	sp, #16
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008c46:	f006 fd53 	bl	800f6f0 <HAL_GetTick>
 8008c4a:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c56:	d00a      	beq.n	8008c6e <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8008c58:	f006 fd62 	bl	800f720 <HAL_GetTickFreq>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	461a      	mov	r2, r3
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	4413      	add	r3, r2
 8008c64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008c66:	e002      	b.n	8008c6e <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8008c68:	f7ff fe34 	bl	80088d4 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 8008c6c:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8008c6e:	f006 fd3f 	bl	800f6f0 <HAL_GetTick>
 8008c72:	4602      	mov	r2, r0
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	1ad3      	subs	r3, r2, r3
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d8f4      	bhi.n	8008c68 <HAL_Delay+0x2a>
  }
}
 8008c7e:	bf00      	nop
 8008c80:	bf00      	nop
 8008c82:	3710      	adds	r7, #16
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8008c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c90:	f00f ffd8 	bl	8018c44 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8008c94:	bf00      	nop
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
 8008c9c:	f00f ff9c 	bl	8018bd8 <UTIL_LPM_EnterLowPower>
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8008ca0:	bf00      	nop
}
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8008cae:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb2:	f00f ffc7 	bl	8018c44 <UTIL_SEQ_Run>
  return;
 8008cb6:	bf00      	nop
}
 8008cb8:	3708      	adds	r7, #8
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b082      	sub	sp, #8
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8008cc6:	2100      	movs	r1, #0
 8008cc8:	2080      	movs	r0, #128	@ 0x80
 8008cca:	f010 f8d9 	bl	8018e80 <UTIL_SEQ_SetTask>
  return;
 8008cce:	bf00      	nop
}
 8008cd0:	3708      	adds	r7, #8
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b082      	sub	sp, #8
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8008cde:	2002      	movs	r0, #2
 8008ce0:	f010 f960 	bl	8018fa4 <UTIL_SEQ_SetEvt>
  return;
 8008ce4:	bf00      	nop
}
 8008ce6:	3708      	adds	r7, #8
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8008cf4:	2002      	movs	r0, #2
 8008cf6:	f010 f975 	bl	8018fe4 <UTIL_SEQ_WaitEvt>
  return;
 8008cfa:	bf00      	nop
}
 8008cfc:	3708      	adds	r7, #8
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <LL_AHB1_GRP1_EnableClock>:
{
 8008d02:	b480      	push	{r7}
 8008d04:	b085      	sub	sp, #20
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8008d0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008d0e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008d10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4313      	orrs	r3, r2
 8008d18:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8008d1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008d1e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	4013      	ands	r3, r2
 8008d24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008d26:	68fb      	ldr	r3, [r7, #12]
}
 8008d28:	bf00      	nop
 8008d2a:	3714      	adds	r7, #20
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8008d38:	2004      	movs	r0, #4
 8008d3a:	f7ff ffe2 	bl	8008d02 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008d3e:	2001      	movs	r0, #1
 8008d40:	f7ff ffdf 	bl	8008d02 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8008d44:	2200      	movs	r2, #0
 8008d46:	2100      	movs	r1, #0
 8008d48:	200b      	movs	r0, #11
 8008d4a:	f008 f934 	bl	8010fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8008d4e:	200b      	movs	r0, #11
 8008d50:	f008 f94b 	bl	8010fea <HAL_NVIC_EnableIRQ>

}
 8008d54:	bf00      	nop
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <Write_Enable>:
	  	  			return ret;
	  	  			}
	  	  		return HAL_OK;
}
uint8_t Write_Enable(void)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b094      	sub	sp, #80	@ 0x50
 8008d5c:	af00      	add	r7, sp, #0
	uint8_t ret;
	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;
	/* Enable write operations */
	  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8008d5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008d62:	633b      	str	r3, [r7, #48]	@ 0x30
	  sCommand.Instruction       = WRITE_ENABLE_CMD;
 8008d64:	2306      	movs	r3, #6
 8008d66:	61bb      	str	r3, [r7, #24]
	  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	637b      	str	r3, [r7, #52]	@ 0x34
	  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
	  sCommand.DataMode          = QSPI_DATA_NONE;
 8008d70:	2300      	movs	r3, #0
 8008d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  sCommand.DummyCycles       = 0;
 8008d74:	2300      	movs	r3, #0
 8008d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	647b      	str	r3, [r7, #68]	@ 0x44
	  //sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
	  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
	  ret=HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8008d80:	f107 0318 	add.w	r3, r7, #24
 8008d84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d88:	4619      	mov	r1, r3
 8008d8a:	481b      	ldr	r0, [pc, #108]	@ (8008df8 <Write_Enable+0xa0>)
 8008d8c:	f00a f87a 	bl	8012e84 <HAL_QSPI_Command>
 8008d90:	4603      	mov	r3, r0
 8008d92:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	  if (ret != HAL_OK) {
 8008d96:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d002      	beq.n	8008da4 <Write_Enable+0x4c>
	    return ret;
 8008d9e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008da2:	e024      	b.n	8008dee <Write_Enable+0x96>
	  }

	  /* Configure automatic polling mode to wait for write enabling */
	  sConfig.Match           = MX25R6435F_SR_WEL;
 8008da4:	2302      	movs	r3, #2
 8008da6:	603b      	str	r3, [r7, #0]
	  sConfig.Mask            = MX25R6435F_SR_WEL;
 8008da8:	2302      	movs	r3, #2
 8008daa:	607b      	str	r3, [r7, #4]
	  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8008dac:	2300      	movs	r3, #0
 8008dae:	613b      	str	r3, [r7, #16]
	  sConfig.StatusBytesSize = 1;
 8008db0:	2301      	movs	r3, #1
 8008db2:	60fb      	str	r3, [r7, #12]
	  sConfig.Interval        = 0x10;
 8008db4:	2310      	movs	r3, #16
 8008db6:	60bb      	str	r3, [r7, #8]
	  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8008db8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8008dbc:	617b      	str	r3, [r7, #20]

	  sCommand.Instruction    = READ_STATUS_REG_CMD;
 8008dbe:	2305      	movs	r3, #5
 8008dc0:	61bb      	str	r3, [r7, #24]
	  sCommand.DataMode       = QSPI_DATA_1_LINE;
 8008dc2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  ret=HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8008dc8:	463a      	mov	r2, r7
 8008dca:	f107 0118 	add.w	r1, r7, #24
 8008dce:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008dd2:	4809      	ldr	r0, [pc, #36]	@ (8008df8 <Write_Enable+0xa0>)
 8008dd4:	f00a f9e3 	bl	801319e <HAL_QSPI_AutoPolling>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	  if (ret != HAL_OK) {
 8008dde:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d002      	beq.n	8008dec <Write_Enable+0x94>
	    return ret;
 8008de6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008dea:	e000      	b.n	8008dee <Write_Enable+0x96>
	  }


	  return HAL_OK;
 8008dec:	2300      	movs	r3, #0
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3750      	adds	r7, #80	@ 0x50
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	20000520 	.word	0x20000520

08008dfc <FL_QUADSPI_Init>:
uint8_t FL_QUADSPI_Init(void) {
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	af00      	add	r7, sp, #0
	//prepare QSPI peripheral for ST-Link Utility operations
	hqspi.Instance = QUADSPI;
 8008e00:	4b17      	ldr	r3, [pc, #92]	@ (8008e60 <FL_QUADSPI_Init+0x64>)
 8008e02:	4a18      	ldr	r2, [pc, #96]	@ (8008e64 <FL_QUADSPI_Init+0x68>)
 8008e04:	601a      	str	r2, [r3, #0]
	if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 8008e06:	4816      	ldr	r0, [pc, #88]	@ (8008e60 <FL_QUADSPI_Init+0x64>)
 8008e08:	f009 fe5e 	bl	8012ac8 <HAL_QSPI_DeInit>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d001      	beq.n	8008e16 <FL_QUADSPI_Init+0x1a>
		return HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	e021      	b.n	8008e5a <FL_QUADSPI_Init+0x5e>
	}

	MX_QUADSPI_Init();
 8008e16:	f002 fe7f 	bl	800bb18 <MX_QUADSPI_Init>

	if (QSPI_ResetChip() != HAL_OK) {
 8008e1a:	f000 f825 	bl	8008e68 <QSPI_ResetChip>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d001      	beq.n	8008e28 <FL_QUADSPI_Init+0x2c>
		return HAL_ERROR;
 8008e24:	2301      	movs	r3, #1
 8008e26:	e018      	b.n	8008e5a <FL_QUADSPI_Init+0x5e>
	}

	HAL_Delay(1);
 8008e28:	2001      	movs	r0, #1
 8008e2a:	f7ff ff08 	bl	8008c3e <HAL_Delay>

	if (QSPI_AutoPollingMemReady() != HAL_OK) {
 8008e2e:	f000 fa63 	bl	80092f8 <QSPI_AutoPollingMemReady>
 8008e32:	4603      	mov	r3, r0
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d001      	beq.n	8008e3c <FL_QUADSPI_Init+0x40>
		return HAL_ERROR;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	e00e      	b.n	8008e5a <FL_QUADSPI_Init+0x5e>
	}

	if (Write_Enable() != HAL_OK) {
 8008e3c:	f7ff ff8c 	bl	8008d58 <Write_Enable>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d001      	beq.n	8008e4a <FL_QUADSPI_Init+0x4e>

		return HAL_ERROR;
 8008e46:	2301      	movs	r3, #1
 8008e48:	e007      	b.n	8008e5a <FL_QUADSPI_Init+0x5e>
	}

	if (QSPI_Configuration() != HAL_OK) {
 8008e4a:	f000 f903 	bl	8009054 <QSPI_Configuration>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d001      	beq.n	8008e58 <FL_QUADSPI_Init+0x5c>
		return HAL_ERROR;
 8008e54:	2301      	movs	r3, #1
 8008e56:	e000      	b.n	8008e5a <FL_QUADSPI_Init+0x5e>
	}

	return HAL_OK;
 8008e58:	2300      	movs	r3, #0
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	20000520 	.word	0x20000520
 8008e64:	a0001000 	.word	0xa0001000

08008e68 <QSPI_ResetChip>:
uint8_t QSPI_ResetChip(void) {
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b08e      	sub	sp, #56	@ 0x38
 8008e6c:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	uint32_t temp = 0;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	637b      	str	r3, [r7, #52]	@ 0x34
	/* Erasing Sequence -------------------------------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8008e72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008e76:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8008e78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008e7c:	60fb      	str	r3, [r7, #12]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	623b      	str	r3, [r7, #32]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8008e82:	2300      	movs	r3, #0
 8008e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
	////sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8008e86:	2300      	movs	r3, #0
 8008e88:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.Instruction = RESET_ENABLE_CMD;
 8008e8a:	2366      	movs	r3, #102	@ 0x66
 8008e8c:	603b      	str	r3, [r7, #0]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	61fb      	str	r3, [r7, #28]
	sCommand.Address = 0;
 8008e92:	2300      	movs	r3, #0
 8008e94:	607b      	str	r3, [r7, #4]
	sCommand.DataMode = QSPI_DATA_NONE;
 8008e96:	2300      	movs	r3, #0
 8008e98:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DummyCycles = 0;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	617b      	str	r3, [r7, #20]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE)!= HAL_OK) {
 8008e9e:	463b      	mov	r3, r7
 8008ea0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	486a      	ldr	r0, [pc, #424]	@ (8009050 <QSPI_ResetChip+0x1e8>)
 8008ea8:	f009 ffec 	bl	8012e84 <HAL_QSPI_Command>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d001      	beq.n	8008eb6 <QSPI_ResetChip+0x4e>
		return HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	e0c8      	b.n	8009048 <QSPI_ResetChip+0x1e0>
	}
	for (temp = 0; temp < 0x2f; temp++) {
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008eba:	e003      	b.n	8008ec4 <QSPI_ResetChip+0x5c>
		__NOP();
 8008ebc:	bf00      	nop
	for (temp = 0; temp < 0x2f; temp++) {
 8008ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ec6:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ec8:	d9f8      	bls.n	8008ebc <QSPI_ResetChip+0x54>
	}

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8008eca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008ece:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8008ed0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008ed4:	60fb      	str	r3, [r7, #12]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	623b      	str	r3, [r7, #32]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8008eda:	2300      	movs	r3, #0
 8008edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	//sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.Instruction = RESET_EXECUTE_CMD;
 8008ee2:	2399      	movs	r3, #153	@ 0x99
 8008ee4:	603b      	str	r3, [r7, #0]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	61fb      	str	r3, [r7, #28]
	sCommand.Address = 0;
 8008eea:	2300      	movs	r3, #0
 8008eec:	607b      	str	r3, [r7, #4]
	sCommand.DataMode = QSPI_DATA_NONE;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DummyCycles = 0;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	617b      	str	r3, [r7, #20]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE)
 8008ef6:	463b      	mov	r3, r7
 8008ef8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008efc:	4619      	mov	r1, r3
 8008efe:	4854      	ldr	r0, [pc, #336]	@ (8009050 <QSPI_ResetChip+0x1e8>)
 8008f00:	f009 ffc0 	bl	8012e84 <HAL_QSPI_Command>
 8008f04:	4603      	mov	r3, r0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d001      	beq.n	8008f0e <QSPI_ResetChip+0xa6>
			!= HAL_OK) {
		return HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e09c      	b.n	8009048 <QSPI_ResetChip+0x1e0>
	}

	/* Erasing Sequence -------------------------------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_2_LINES;
 8008f0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008f12:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8008f14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008f18:	60fb      	str	r3, [r7, #12]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	623b      	str	r3, [r7, #32]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
	//sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8008f22:	2300      	movs	r3, #0
 8008f24:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.Instruction = RESET_ENABLE_CMD;
 8008f26:	2366      	movs	r3, #102	@ 0x66
 8008f28:	603b      	str	r3, [r7, #0]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	61fb      	str	r3, [r7, #28]
	sCommand.Address = 0;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	607b      	str	r3, [r7, #4]
	sCommand.DataMode = QSPI_DATA_NONE;
 8008f32:	2300      	movs	r3, #0
 8008f34:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DummyCycles = 0;
 8008f36:	2300      	movs	r3, #0
 8008f38:	617b      	str	r3, [r7, #20]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE)
 8008f3a:	463b      	mov	r3, r7
 8008f3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f40:	4619      	mov	r1, r3
 8008f42:	4843      	ldr	r0, [pc, #268]	@ (8009050 <QSPI_ResetChip+0x1e8>)
 8008f44:	f009 ff9e 	bl	8012e84 <HAL_QSPI_Command>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d001      	beq.n	8008f52 <QSPI_ResetChip+0xea>
			!= HAL_OK) {
		return HAL_ERROR;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e07a      	b.n	8009048 <QSPI_ResetChip+0x1e0>
	}
	for (temp = 0; temp < 0x2f; temp++) {
 8008f52:	2300      	movs	r3, #0
 8008f54:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f56:	e003      	b.n	8008f60 <QSPI_ResetChip+0xf8>
		__NOP();
 8008f58:	bf00      	nop
	for (temp = 0; temp < 0x2f; temp++) {
 8008f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f62:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f64:	d9f8      	bls.n	8008f58 <QSPI_ResetChip+0xf0>
	}

	sCommand.InstructionMode = QSPI_INSTRUCTION_2_LINES;
 8008f66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008f6a:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8008f6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008f70:	60fb      	str	r3, [r7, #12]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008f72:	2300      	movs	r3, #0
 8008f74:	623b      	str	r3, [r7, #32]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8008f76:	2300      	movs	r3, #0
 8008f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
	//sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.Instruction = RESET_EXECUTE_CMD;
 8008f7e:	2399      	movs	r3, #153	@ 0x99
 8008f80:	603b      	str	r3, [r7, #0]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8008f82:	2300      	movs	r3, #0
 8008f84:	61fb      	str	r3, [r7, #28]
	sCommand.Address = 0;
 8008f86:	2300      	movs	r3, #0
 8008f88:	607b      	str	r3, [r7, #4]
	sCommand.DataMode = QSPI_DATA_NONE;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DummyCycles = 0;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	617b      	str	r3, [r7, #20]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE)
 8008f92:	463b      	mov	r3, r7
 8008f94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f98:	4619      	mov	r1, r3
 8008f9a:	482d      	ldr	r0, [pc, #180]	@ (8009050 <QSPI_ResetChip+0x1e8>)
 8008f9c:	f009 ff72 	bl	8012e84 <HAL_QSPI_Command>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d001      	beq.n	8008faa <QSPI_ResetChip+0x142>
			!= HAL_OK) {
		return HAL_ERROR;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e04e      	b.n	8009048 <QSPI_ResetChip+0x1e0>
	}

	/* Erasing Sequence -------------------------------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8008faa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8008fae:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8008fb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008fb4:	60fb      	str	r3, [r7, #12]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	623b      	str	r3, [r7, #32]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	//sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.Instruction = RESET_ENABLE_CMD;
 8008fc2:	2366      	movs	r3, #102	@ 0x66
 8008fc4:	603b      	str	r3, [r7, #0]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	61fb      	str	r3, [r7, #28]
	sCommand.Address = 0;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	607b      	str	r3, [r7, #4]
	sCommand.DataMode = QSPI_DATA_NONE;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DummyCycles = 0;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	617b      	str	r3, [r7, #20]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE)
 8008fd6:	463b      	mov	r3, r7
 8008fd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008fdc:	4619      	mov	r1, r3
 8008fde:	481c      	ldr	r0, [pc, #112]	@ (8009050 <QSPI_ResetChip+0x1e8>)
 8008fe0:	f009 ff50 	bl	8012e84 <HAL_QSPI_Command>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d001      	beq.n	8008fee <QSPI_ResetChip+0x186>
			!= HAL_OK) {
		return HAL_ERROR;
 8008fea:	2301      	movs	r3, #1
 8008fec:	e02c      	b.n	8009048 <QSPI_ResetChip+0x1e0>
	}
	for (temp = 0; temp < 0x2f; temp++) {
 8008fee:	2300      	movs	r3, #0
 8008ff0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ff2:	e003      	b.n	8008ffc <QSPI_ResetChip+0x194>
		__NOP();
 8008ff4:	bf00      	nop
	for (temp = 0; temp < 0x2f; temp++) {
 8008ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ffe:	2b2e      	cmp	r3, #46	@ 0x2e
 8009000:	d9f8      	bls.n	8008ff4 <QSPI_ResetChip+0x18c>
	}

	sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8009002:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8009006:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8009008:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800900c:	60fb      	str	r3, [r7, #12]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800900e:	2300      	movs	r3, #0
 8009010:	623b      	str	r3, [r7, #32]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8009012:	2300      	movs	r3, #0
 8009014:	62fb      	str	r3, [r7, #44]	@ 0x2c
	//sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8009016:	2300      	movs	r3, #0
 8009018:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.Instruction = RESET_EXECUTE_CMD;
 800901a:	2399      	movs	r3, #153	@ 0x99
 800901c:	603b      	str	r3, [r7, #0]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800901e:	2300      	movs	r3, #0
 8009020:	61fb      	str	r3, [r7, #28]
	sCommand.Address = 0;
 8009022:	2300      	movs	r3, #0
 8009024:	607b      	str	r3, [r7, #4]
	sCommand.DataMode = QSPI_DATA_NONE;
 8009026:	2300      	movs	r3, #0
 8009028:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DummyCycles = 0;
 800902a:	2300      	movs	r3, #0
 800902c:	617b      	str	r3, [r7, #20]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE)
 800902e:	463b      	mov	r3, r7
 8009030:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009034:	4619      	mov	r1, r3
 8009036:	4806      	ldr	r0, [pc, #24]	@ (8009050 <QSPI_ResetChip+0x1e8>)
 8009038:	f009 ff24 	bl	8012e84 <HAL_QSPI_Command>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d001      	beq.n	8009046 <QSPI_ResetChip+0x1de>
			!= HAL_OK) {
		return HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	e000      	b.n	8009048 <QSPI_ResetChip+0x1e0>
	}

	return HAL_OK;
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	3738      	adds	r7, #56	@ 0x38
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}
 8009050:	20000520 	.word	0x20000520

08009054 <QSPI_Configuration>:
uint8_t QSPI_Configuration(void) {
 8009054:	b580      	push	{r7, lr}
 8009056:	b08e      	sub	sp, #56	@ 0x38
 8009058:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	uint8_t test_buffer[4] = { 0 };
 800905a:	2300      	movs	r3, #0
 800905c:	603b      	str	r3, [r7, #0]
	/*read status register*/
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800905e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009062:	61fb      	str	r3, [r7, #28]
	sCommand.Instruction = READ_STATUS_REG_CMD;
 8009064:	2305      	movs	r3, #5
 8009066:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8009068:	2300      	movs	r3, #0
 800906a:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800906c:	2300      	movs	r3, #0
 800906e:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8009070:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009074:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.DummyCycles = 0;
 8009076:	2300      	movs	r3, #0
 8009078:	61bb      	str	r3, [r7, #24]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800907a:	2300      	movs	r3, #0
 800907c:	633b      	str	r3, [r7, #48]	@ 0x30
	//sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800907e:	2300      	movs	r3, #0
 8009080:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.NbData = 1;
 8009082:	2301      	movs	r3, #1
 8009084:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE)
 8009086:	1d3b      	adds	r3, r7, #4
 8009088:	f241 3288 	movw	r2, #5000	@ 0x1388
 800908c:	4619      	mov	r1, r3
 800908e:	4840      	ldr	r0, [pc, #256]	@ (8009190 <QSPI_Configuration+0x13c>)
 8009090:	f009 fef8 	bl	8012e84 <HAL_QSPI_Command>
 8009094:	4603      	mov	r3, r0
 8009096:	2b00      	cmp	r3, #0
 8009098:	d001      	beq.n	800909e <QSPI_Configuration+0x4a>
			!= HAL_OK) {
		return HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	e074      	b.n	8009188 <QSPI_Configuration+0x134>
	}
	if (HAL_QSPI_Receive(&hqspi, test_buffer,
 800909e:	463b      	mov	r3, r7
 80090a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80090a4:	4619      	mov	r1, r3
 80090a6:	483a      	ldr	r0, [pc, #232]	@ (8009190 <QSPI_Configuration+0x13c>)
 80090a8:	f009 ffdc 	bl	8013064 <HAL_QSPI_Receive>
 80090ac:	4603      	mov	r3, r0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d001      	beq.n	80090b6 <QSPI_Configuration+0x62>
	HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 80090b2:	2301      	movs	r3, #1
 80090b4:	e068      	b.n	8009188 <QSPI_Configuration+0x134>
	}
	/*read configuration register*/
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80090b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80090ba:	61fb      	str	r3, [r7, #28]
	sCommand.Instruction = READ_CFG_REG_CMD ;
 80090bc:	2315      	movs	r3, #21
 80090be:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80090c0:	2300      	movs	r3, #0
 80090c2:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80090c4:	2300      	movs	r3, #0
 80090c6:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
 80090c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80090cc:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.DummyCycles = 0;
 80090ce:	2300      	movs	r3, #0
 80090d0:	61bb      	str	r3, [r7, #24]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80090d2:	2300      	movs	r3, #0
 80090d4:	633b      	str	r3, [r7, #48]	@ 0x30
	//sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80090d6:	2300      	movs	r3, #0
 80090d8:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.NbData = 1;
 80090da:	2301      	movs	r3, #1
 80090dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE)
 80090de:	1d3b      	adds	r3, r7, #4
 80090e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80090e4:	4619      	mov	r1, r3
 80090e6:	482a      	ldr	r0, [pc, #168]	@ (8009190 <QSPI_Configuration+0x13c>)
 80090e8:	f009 fecc 	bl	8012e84 <HAL_QSPI_Command>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d001      	beq.n	80090f6 <QSPI_Configuration+0xa2>
			!= HAL_OK) {
		return HAL_ERROR;
 80090f2:	2301      	movs	r3, #1
 80090f4:	e048      	b.n	8009188 <QSPI_Configuration+0x134>
	}
	if (HAL_QSPI_Receive(&hqspi, &(test_buffer[1]),
 80090f6:	463b      	mov	r3, r7
 80090f8:	3301      	adds	r3, #1
 80090fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80090fe:	4619      	mov	r1, r3
 8009100:	4823      	ldr	r0, [pc, #140]	@ (8009190 <QSPI_Configuration+0x13c>)
 8009102:	f009 ffaf 	bl	8013064 <HAL_QSPI_Receive>
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d001      	beq.n	8009110 <QSPI_Configuration+0xbc>
	HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 800910c:	2301      	movs	r3, #1
 800910e:	e03b      	b.n	8009188 <QSPI_Configuration+0x134>
	}
	/*modify buffer to enable quad mode*/
	test_buffer[0] |= 0x40;
 8009110:	783b      	ldrb	r3, [r7, #0]
 8009112:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009116:	b2db      	uxtb	r3, r3
 8009118:	703b      	strb	r3, [r7, #0]

	/*set dummy cycles*/
	test_buffer[1] |= 0xC0;
 800911a:	787b      	ldrb	r3, [r7, #1]
 800911c:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8009120:	b2db      	uxtb	r3, r3
 8009122:	707b      	strb	r3, [r7, #1]

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8009124:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009128:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 800912a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800912e:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009130:	2300      	movs	r3, #0
 8009132:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8009134:	2300      	movs	r3, #0
 8009136:	633b      	str	r3, [r7, #48]	@ 0x30
	//sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8009138:	2300      	movs	r3, #0
 800913a:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 800913c:	2301      	movs	r3, #1
 800913e:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8009140:	2300      	movs	r3, #0
 8009142:	623b      	str	r3, [r7, #32]
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8009144:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009148:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.DummyCycles = 0;
 800914a:	2300      	movs	r3, #0
 800914c:	61bb      	str	r3, [r7, #24]
	sCommand.NbData = 2;
 800914e:	2302      	movs	r3, #2
 8009150:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE)
 8009152:	1d3b      	adds	r3, r7, #4
 8009154:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009158:	4619      	mov	r1, r3
 800915a:	480d      	ldr	r0, [pc, #52]	@ (8009190 <QSPI_Configuration+0x13c>)
 800915c:	f009 fe92 	bl	8012e84 <HAL_QSPI_Command>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	d001      	beq.n	800916a <QSPI_Configuration+0x116>
			!= HAL_OK) {
		return HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	e00e      	b.n	8009188 <QSPI_Configuration+0x134>
	}

	if (HAL_QSPI_Transmit(&hqspi, test_buffer,
 800916a:	463b      	mov	r3, r7
 800916c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009170:	4619      	mov	r1, r3
 8009172:	4807      	ldr	r0, [pc, #28]	@ (8009190 <QSPI_Configuration+0x13c>)
 8009174:	f009 fee4 	bl	8012f40 <HAL_QSPI_Transmit>
 8009178:	4603      	mov	r3, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d003      	beq.n	8009186 <QSPI_Configuration+0x132>
	HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		Error_Handler();
 800917e:	f001 fc05 	bl	800a98c <Error_Handler>
		return HAL_ERROR;
 8009182:	2301      	movs	r3, #1
 8009184:	e000      	b.n	8009188 <QSPI_Configuration+0x134>
	}
	return HAL_OK;
 8009186:	2300      	movs	r3, #0
}
 8009188:	4618      	mov	r0, r3
 800918a:	3738      	adds	r7, #56	@ 0x38
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}
 8009190:	20000520 	.word	0x20000520

08009194 <Quad_Enable>:

uint8_t Quad_Enable(void)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b08e      	sub	sp, #56	@ 0x38
 8009198:	af00      	add	r7, sp, #0
	uint8_t ret,reg;
	QSPI_CommandTypeDef sCommand;
	  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800919a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800919e:	61bb      	str	r3, [r7, #24]
	  sCommand.Instruction       = READ_STATUS_REG_CMD;
 80091a0:	2305      	movs	r3, #5
 80091a2:	603b      	str	r3, [r7, #0]
	  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80091a4:	2300      	movs	r3, #0
 80091a6:	61fb      	str	r3, [r7, #28]
	  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80091a8:	2300      	movs	r3, #0
 80091aa:	623b      	str	r3, [r7, #32]
	  sCommand.DataMode          = QSPI_DATA_1_LINE;
 80091ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80091b0:	627b      	str	r3, [r7, #36]	@ 0x24
	  sCommand.DummyCycles       = 0;
 80091b2:	2300      	movs	r3, #0
 80091b4:	617b      	str	r3, [r7, #20]
	  sCommand.NbData            = 1;
 80091b6:	2301      	movs	r3, #1
 80091b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80091ba:	2300      	movs	r3, #0
 80091bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  //sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
	  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80091be:	2300      	movs	r3, #0
 80091c0:	633b      	str	r3, [r7, #48]	@ 0x30
	  ret=HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80091c2:	463b      	mov	r3, r7
 80091c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091c8:	4619      	mov	r1, r3
 80091ca:	4849      	ldr	r0, [pc, #292]	@ (80092f0 <Quad_Enable+0x15c>)
 80091cc:	f009 fe5a 	bl	8012e84 <HAL_QSPI_Command>
 80091d0:	4603      	mov	r3, r0
 80091d2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	  if (ret != HAL_OK) {
 80091d6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d002      	beq.n	80091e4 <Quad_Enable+0x50>
	    return ret;
 80091de:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80091e2:	e081      	b.n	80092e8 <Quad_Enable+0x154>
	  }
	  ret=HAL_QSPI_Receive(&hqspi, &reg, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80091e4:	f107 0336 	add.w	r3, r7, #54	@ 0x36
 80091e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091ec:	4619      	mov	r1, r3
 80091ee:	4840      	ldr	r0, [pc, #256]	@ (80092f0 <Quad_Enable+0x15c>)
 80091f0:	f009 ff38 	bl	8013064 <HAL_QSPI_Receive>
 80091f4:	4603      	mov	r3, r0
 80091f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	  if (ret != HAL_OK) {
 80091fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d002      	beq.n	8009208 <Quad_Enable+0x74>
	  	    return ret;
 8009202:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009206:	e06f      	b.n	80092e8 <Quad_Enable+0x154>
	  	  }
	  if(Write_Enable()!=HAL_OK)
 8009208:	f7ff fda6 	bl	8008d58 <Write_Enable>
 800920c:	4603      	mov	r3, r0
 800920e:	2b00      	cmp	r3, #0
 8009210:	d002      	beq.n	8009218 <Quad_Enable+0x84>
		  {
		  return ret;
 8009212:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009216:	e067      	b.n	80092e8 <Quad_Enable+0x154>
		  }
	  SET_BIT(reg, MX25R6435F_SR_QE);
 8009218:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800921c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009220:	b2db      	uxtb	r3, r3
 8009222:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8009226:	2301      	movs	r3, #1
 8009228:	603b      	str	r3, [r7, #0]
	  ret=HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800922a:	463b      	mov	r3, r7
 800922c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009230:	4619      	mov	r1, r3
 8009232:	482f      	ldr	r0, [pc, #188]	@ (80092f0 <Quad_Enable+0x15c>)
 8009234:	f009 fe26 	bl	8012e84 <HAL_QSPI_Command>
 8009238:	4603      	mov	r3, r0
 800923a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	  if (ret != HAL_OK) {
 800923e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009242:	2b00      	cmp	r3, #0
 8009244:	d002      	beq.n	800924c <Quad_Enable+0xb8>
	  	    return ret;
 8009246:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800924a:	e04d      	b.n	80092e8 <Quad_Enable+0x154>
	  	  }
	  ret=HAL_QSPI_Transmit(&hqspi, &reg, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800924c:	f107 0336 	add.w	r3, r7, #54	@ 0x36
 8009250:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009254:	4619      	mov	r1, r3
 8009256:	4826      	ldr	r0, [pc, #152]	@ (80092f0 <Quad_Enable+0x15c>)
 8009258:	f009 fe72 	bl	8012f40 <HAL_QSPI_Transmit>
 800925c:	4603      	mov	r3, r0
 800925e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	  if (ret != HAL_OK) {
 8009262:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009266:	2b00      	cmp	r3, #0
 8009268:	d002      	beq.n	8009270 <Quad_Enable+0xdc>
	 	  	    return ret;
 800926a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800926e:	e03b      	b.n	80092e8 <Quad_Enable+0x154>
	 	  	  }
	  ret=QSPI_AutoPollingMemReady();
 8009270:	f000 f842 	bl	80092f8 <QSPI_AutoPollingMemReady>
 8009274:	4603      	mov	r3, r0
 8009276:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	  if (ret != HAL_OK) {
 800927a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800927e:	2b00      	cmp	r3, #0
 8009280:	d002      	beq.n	8009288 <Quad_Enable+0xf4>
	 	 	  	    return ret;
 8009282:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009286:	e02f      	b.n	80092e8 <Quad_Enable+0x154>
	 	 	  	  }
	  sCommand.Instruction = READ_STATUS_REG_CMD;
 8009288:	2305      	movs	r3, #5
 800928a:	603b      	str	r3, [r7, #0]
	  ret=HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800928c:	463b      	mov	r3, r7
 800928e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009292:	4619      	mov	r1, r3
 8009294:	4816      	ldr	r0, [pc, #88]	@ (80092f0 <Quad_Enable+0x15c>)
 8009296:	f009 fdf5 	bl	8012e84 <HAL_QSPI_Command>
 800929a:	4603      	mov	r3, r0
 800929c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	  	  if (ret != HAL_OK) {
 80092a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d002      	beq.n	80092ae <Quad_Enable+0x11a>
	  	  	    return ret;
 80092a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80092ac:	e01c      	b.n	80092e8 <Quad_Enable+0x154>
	  	  	  }
	 ret=HAL_QSPI_Receive(&hqspi, &reg, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80092ae:	f107 0336 	add.w	r3, r7, #54	@ 0x36
 80092b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092b6:	4619      	mov	r1, r3
 80092b8:	480d      	ldr	r0, [pc, #52]	@ (80092f0 <Quad_Enable+0x15c>)
 80092ba:	f009 fed3 	bl	8013064 <HAL_QSPI_Receive>
 80092be:	4603      	mov	r3, r0
 80092c0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	  		  if (ret != HAL_OK) {
 80092c4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d002      	beq.n	80092d2 <Quad_Enable+0x13e>
	  		  	    return ret;
 80092cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80092d0:	e00a      	b.n	80092e8 <Quad_Enable+0x154>
	  		  	  }
	  		if((reg & MX25R6435F_SR_QE) == 0){
 80092d2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80092d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d102      	bne.n	80092e4 <Quad_Enable+0x150>
	  		     printf("QUAD enable\n");
 80092de:	4805      	ldr	r0, [pc, #20]	@ (80092f4 <Quad_Enable+0x160>)
 80092e0:	f010 fea6 	bl	801a030 <puts>
	  		  }
	  		return ret;
 80092e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3738      	adds	r7, #56	@ 0x38
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	20000520 	.word	0x20000520
 80092f4:	0801db8c 	.word	0x0801db8c

080092f8 <QSPI_AutoPollingMemReady>:

uint8_t QSPI_AutoPollingMemReady(void)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b094      	sub	sp, #80	@ 0x50
 80092fc:	af00      	add	r7, sp, #0
	uint8_t ret;
	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;
	sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80092fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009302:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.Instruction       = READ_STATUS_REG_CMD;
 8009304:	2305      	movs	r3, #5
 8009306:	61bb      	str	r3, [r7, #24]
	sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8009308:	2300      	movs	r3, #0
 800930a:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800930c:	2300      	movs	r3, #0
 800930e:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.DataMode          = QSPI_DATA_1_LINE;
 8009310:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009314:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.DummyCycles       = 0;
 8009316:	2300      	movs	r3, #0
 8009318:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800931a:	2300      	movs	r3, #0
 800931c:	647b      	str	r3, [r7, #68]	@ 0x44

	//sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800931e:	2300      	movs	r3, #0
 8009320:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfig.Match           = 0;
 8009322:	2300      	movs	r3, #0
 8009324:	603b      	str	r3, [r7, #0]
	sConfig.Mask            = MX25R6435F_SR_WIP;
 8009326:	2301      	movs	r3, #1
 8009328:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 800932a:	2300      	movs	r3, #0
 800932c:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 800932e:	2301      	movs	r3, #1
 8009330:	60fb      	str	r3, [r7, #12]
	sConfig.Interval        = 0x10;
 8009332:	2310      	movs	r3, #16
 8009334:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8009336:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800933a:	617b      	str	r3, [r7, #20]
	ret=HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800933c:	463a      	mov	r2, r7
 800933e:	f107 0118 	add.w	r1, r7, #24
 8009342:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009346:	4809      	ldr	r0, [pc, #36]	@ (800936c <QSPI_AutoPollingMemReady+0x74>)
 8009348:	f009 ff29 	bl	801319e <HAL_QSPI_AutoPolling>
 800934c:	4603      	mov	r3, r0
 800934e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if(ret != HAL_OK)
 8009352:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009356:	2b00      	cmp	r3, #0
 8009358:	d002      	beq.n	8009360 <QSPI_AutoPollingMemReady+0x68>
	{
		return ret;
 800935a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800935e:	e000      	b.n	8009362 <QSPI_AutoPollingMemReady+0x6a>

	}
	return HAL_OK;
 8009360:	2300      	movs	r3, #0
}
 8009362:	4618      	mov	r0, r3
 8009364:	3750      	adds	r7, #80	@ 0x50
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	20000520 	.word	0x20000520

08009370 <Quad_Read>:
uint8_t Quad_Read(uint8_t *pData,uint32_t Read_ADDr,uint32_t Size)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b092      	sub	sp, #72	@ 0x48
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	607a      	str	r2, [r7, #4]
	uint8_t ret;
	ret=Quad_Enable();
 800937c:	f7ff ff0a 	bl	8009194 <Quad_Enable>
 8009380:	4603      	mov	r3, r0
 8009382:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if(ret==HAL_OK)
 8009386:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800938a:	2b00      	cmp	r3, #0
 800938c:	d102      	bne.n	8009394 <Quad_Read+0x24>
	{
		printf("Quad_enable");
 800938e:	4828      	ldr	r0, [pc, #160]	@ (8009430 <Quad_Read+0xc0>)
 8009390:	f010 fde6 	bl	8019f60 <iprintf>

	}
	QSPI_CommandTypeDef sCommand;
	sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009394:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009398:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.Instruction       = 0x6B;//QUAD_READ;
 800939a:	236b      	movs	r3, #107	@ 0x6b
 800939c:	613b      	str	r3, [r7, #16]
	sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
 800939e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80093a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80093a4:	2300      	movs	r3, #0
 80093a6:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.Address           = Read_ADDr;
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	617b      	str	r3, [r7, #20]
	sCommand.AddressSize 	   = QSPI_ADDRESS_24_BITS;
 80093ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80093b0:	61fb      	str	r3, [r7, #28]
	//sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
	sCommand.DataMode          = QSPI_DATA_4_LINES;
 80093b2:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80093b6:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.DummyCycles       = 8;//8
 80093b8:	2308      	movs	r3, #8
 80093ba:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.NbData            = Size;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80093c0:	2300      	movs	r3, #0
 80093c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80093c4:	2300      	movs	r3, #0
 80093c6:	643b      	str	r3, [r7, #64]	@ 0x40
//		if(ret==HAL_OK)
//		{
//			printf("Quad_enable");
//
//		}
	ret=HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80093c8:	f107 0310 	add.w	r3, r7, #16
 80093cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093d0:	4619      	mov	r1, r3
 80093d2:	4818      	ldr	r0, [pc, #96]	@ (8009434 <Quad_Read+0xc4>)
 80093d4:	f009 fd56 	bl	8012e84 <HAL_QSPI_Command>
 80093d8:	4603      	mov	r3, r0
 80093da:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		if (ret != HAL_OK) {
 80093de:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d002      	beq.n	80093ec <Quad_Read+0x7c>
		  	return ret;
 80093e6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80093ea:	e01c      	b.n	8009426 <Quad_Read+0xb6>
		  	}
	ret=HAL_QSPI_Receive(&hqspi,pData, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80093ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093f0:	68f9      	ldr	r1, [r7, #12]
 80093f2:	4810      	ldr	r0, [pc, #64]	@ (8009434 <Quad_Read+0xc4>)
 80093f4:	f009 fe36 	bl	8013064 <HAL_QSPI_Receive>
 80093f8:	4603      	mov	r3, r0
 80093fa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		if (ret != HAL_OK) {
 80093fe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009402:	2b00      	cmp	r3, #0
 8009404:	d002      	beq.n	800940c <Quad_Read+0x9c>
		  	return ret;
 8009406:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800940a:	e00c      	b.n	8009426 <Quad_Read+0xb6>
		  	}
		ret=QSPI_AutoPollingMemReady();
 800940c:	f7ff ff74 	bl	80092f8 <QSPI_AutoPollingMemReady>
 8009410:	4603      	mov	r3, r0
 8009412:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
					  if (ret != HAL_OK)
 8009416:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800941a:	2b00      	cmp	r3, #0
 800941c:	d002      	beq.n	8009424 <Quad_Read+0xb4>
					  {
					 	return ret;
 800941e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009422:	e000      	b.n	8009426 <Quad_Read+0xb6>
					 	}
				return HAL_OK;
 8009424:	2300      	movs	r3, #0
		return HAL_OK;
}
 8009426:	4618      	mov	r0, r3
 8009428:	3748      	adds	r7, #72	@ 0x48
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
 800942e:	bf00      	nop
 8009430:	0801db98 	.word	0x0801db98
 8009434:	20000520 	.word	0x20000520

08009438 <Quad_Write>:
uint8_t Quad_Write(uint8_t *pData,uint32_t Write_ADDr,uint32_t Size)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b092      	sub	sp, #72	@ 0x48
 800943c:	af00      	add	r7, sp, #0
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	607a      	str	r2, [r7, #4]
//	if(ret==HAL_OK)
//		{
//		printf("Quad_enable");
//		}
	//uint8_t aT[] = " ****QSPI communication based on IT****  ****QSPI communication based on IT****  ****QSPI communication based on IT****  ****QSPI communication based on IT****  ****QSPI communication based on IT****  ****QSPI communication based on IT**** ";
	sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009444:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009448:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.Instruction       = QUAD_PAGE_PROG_CMD;
 800944a:	2338      	movs	r3, #56	@ 0x38
 800944c:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800944e:	2300      	movs	r3, #0
 8009450:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.Address           = Write_ADDr;
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	617b      	str	r3, [r7, #20]
	sCommand.AddressSize 	   = QSPI_ADDRESS_24_BITS;
 8009456:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800945a:	61fb      	str	r3, [r7, #28]
	sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 800945c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8009460:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.DataMode          = QSPI_DATA_4_LINES;
 8009462:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8009466:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.DummyCycles       = 0;
 8009468:	2300      	movs	r3, #0
 800946a:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.NbData            = Size;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8009470:	2300      	movs	r3, #0
 8009472:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009474:	2300      	movs	r3, #0
 8009476:	643b      	str	r3, [r7, #64]	@ 0x40
//	ret=Quad_Enable();
//			if(ret==HAL_OK)
//				{
//				printf("Quad_enable");
//				}
			if (Write_Enable() != HAL_OK) {
 8009478:	f7ff fc6e 	bl	8008d58 <Write_Enable>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d001      	beq.n	8009486 <Quad_Write+0x4e>
							return HAL_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	e02e      	b.n	80094e4 <Quad_Write+0xac>
						}
	ret=HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8009486:	f107 0310 	add.w	r3, r7, #16
 800948a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800948e:	4619      	mov	r1, r3
 8009490:	4816      	ldr	r0, [pc, #88]	@ (80094ec <Quad_Write+0xb4>)
 8009492:	f009 fcf7 	bl	8012e84 <HAL_QSPI_Command>
 8009496:	4603      	mov	r3, r0
 8009498:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		if (ret != HAL_OK) {
 800949c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d002      	beq.n	80094aa <Quad_Write+0x72>
		  	return ret;
 80094a4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80094a8:	e01c      	b.n	80094e4 <Quad_Write+0xac>
		  	}
	ret=HAL_QSPI_Transmit(&hqspi, pData, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80094aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80094ae:	68f9      	ldr	r1, [r7, #12]
 80094b0:	480e      	ldr	r0, [pc, #56]	@ (80094ec <Quad_Write+0xb4>)
 80094b2:	f009 fd45 	bl	8012f40 <HAL_QSPI_Transmit>
 80094b6:	4603      	mov	r3, r0
 80094b8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		if (ret != HAL_OK) {
 80094bc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d002      	beq.n	80094ca <Quad_Write+0x92>
			return ret;
 80094c4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80094c8:	e00c      	b.n	80094e4 <Quad_Write+0xac>
			 }
	ret=QSPI_AutoPollingMemReady();
 80094ca:	f7ff ff15 	bl	80092f8 <QSPI_AutoPollingMemReady>
 80094ce:	4603      	mov	r3, r0
 80094d0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			  if (ret != HAL_OK)
 80094d4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d002      	beq.n	80094e2 <Quad_Write+0xaa>
			  {
			 	return ret;
 80094dc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80094e0:	e000      	b.n	80094e4 <Quad_Write+0xac>
			 	}
		return HAL_OK;
 80094e2:	2300      	movs	r3, #0
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3748      	adds	r7, #72	@ 0x48
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	20000520 	.word	0x20000520

080094f0 <QSPI_Sector_Erase>:
uint8_t QSPI_Sector_Erase(uint32_t Address)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b090      	sub	sp, #64	@ 0x40
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
	uint8_t ret;

		if(Write_Enable()!=HAL_OK)
 80094f8:	f7ff fc2e 	bl	8008d58 <Write_Enable>
 80094fc:	4603      	mov	r3, r0
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d002      	beq.n	8009508 <QSPI_Sector_Erase+0x18>
				  {
			printf("Write_enable");
 8009502:	4827      	ldr	r0, [pc, #156]	@ (80095a0 <QSPI_Sector_Erase+0xb0>)
 8009504:	f010 fd2c 	bl	8019f60 <iprintf>
				  }

		QSPI_CommandTypeDef sCommand;
	sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009508:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800950c:	623b      	str	r3, [r7, #32]
	  sCommand.Instruction       = SECTOR_ERASE_CMD;
 800950e:	2320      	movs	r3, #32
 8009510:	60bb      	str	r3, [r7, #8]
	  sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
 8009512:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009516:	627b      	str	r3, [r7, #36]	@ 0x24
	  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8009518:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800951c:	617b      	str	r3, [r7, #20]
	  sCommand.Address           = Address;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	60fb      	str	r3, [r7, #12]
	  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009522:	2300      	movs	r3, #0
 8009524:	62bb      	str	r3, [r7, #40]	@ 0x28
	    sCommand.DataMode          = QSPI_DATA_NONE;
 8009526:	2300      	movs	r3, #0
 8009528:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    sCommand.DummyCycles       = 0;
 800952a:	2300      	movs	r3, #0
 800952c:	61fb      	str	r3, [r7, #28]
	    sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800952e:	2300      	movs	r3, #0
 8009530:	637b      	str	r3, [r7, #52]	@ 0x34

	    sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009532:	2300      	movs	r3, #0
 8009534:	63bb      	str	r3, [r7, #56]	@ 0x38
//	  sCommand.DataMode          = QSPI_DATA_NONE;
//	  sCommand.DummyCycles       = 0;
//	  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
//	  //sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
//	  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
	  if(Write_Enable()!=HAL_OK)
 8009536:	f7ff fc0f 	bl	8008d58 <Write_Enable>
 800953a:	4603      	mov	r3, r0
 800953c:	2b00      	cmp	r3, #0
 800953e:	d005      	beq.n	800954c <QSPI_Sector_Erase+0x5c>
	  		{
	  		printf("Write_enable_fail");
 8009540:	4818      	ldr	r0, [pc, #96]	@ (80095a4 <QSPI_Sector_Erase+0xb4>)
 8009542:	f010 fd0d 	bl	8019f60 <iprintf>
	  		return ret;
 8009546:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800954a:	e024      	b.n	8009596 <QSPI_Sector_Erase+0xa6>
	  		}
	  ret=HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800954c:	f107 0308 	add.w	r3, r7, #8
 8009550:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009554:	4619      	mov	r1, r3
 8009556:	4814      	ldr	r0, [pc, #80]	@ (80095a8 <QSPI_Sector_Erase+0xb8>)
 8009558:	f009 fc94 	bl	8012e84 <HAL_QSPI_Command>
 800955c:	4603      	mov	r3, r0
 800955e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	  		if (ret != HAL_OK) {
 8009562:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009566:	2b00      	cmp	r3, #0
 8009568:	d005      	beq.n	8009576 <QSPI_Sector_Erase+0x86>
	  			printf("Write_enable_fail");
 800956a:	480e      	ldr	r0, [pc, #56]	@ (80095a4 <QSPI_Sector_Erase+0xb4>)
 800956c:	f010 fcf8 	bl	8019f60 <iprintf>
	  		  	return ret;
 8009570:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009574:	e00f      	b.n	8009596 <QSPI_Sector_Erase+0xa6>
	  		  	}
	  ret=QSPI_AutoPollingMemReady();
 8009576:	f7ff febf 	bl	80092f8 <QSPI_AutoPollingMemReady>
 800957a:	4603      	mov	r3, r0
 800957c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	  		if (ret != HAL_OK)
 8009580:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009584:	2b00      	cmp	r3, #0
 8009586:	d005      	beq.n	8009594 <QSPI_Sector_Erase+0xa4>
	  			{
	  			printf("Write_enable_fail");
 8009588:	4806      	ldr	r0, [pc, #24]	@ (80095a4 <QSPI_Sector_Erase+0xb4>)
 800958a:	f010 fce9 	bl	8019f60 <iprintf>
	  			return ret;
 800958e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009592:	e000      	b.n	8009596 <QSPI_Sector_Erase+0xa6>
	  			}
	  		return HAL_OK;
 8009594:	2300      	movs	r3, #0

}
 8009596:	4618      	mov	r0, r3
 8009598:	3740      	adds	r7, #64	@ 0x40
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	0801dba4 	.word	0x0801dba4
 80095a4:	0801db78 	.word	0x0801db78
 80095a8:	20000520 	.word	0x20000520

080095ac <Read_flash_address>:
	printf("CHANGED_Address  %d %d %d %d %d %d \n",current_address[0],current_address[1],current_address[2],current_address[3],current_address[4],current_address[5]);


}
uint32_t Read_flash_address(uint8_t select)
{
 80095ac:	b5b0      	push	{r4, r5, r7, lr}
 80095ae:	b08a      	sub	sp, #40	@ 0x28
 80095b0:	af04      	add	r7, sp, #16
 80095b2:	4603      	mov	r3, r0
 80095b4:	71fb      	strb	r3, [r7, #7]
  uint8_t current_address[6];

  uint32_t add;
  Quad_Read(current_address,flash_address_map,6);
 80095b6:	f107 030c 	add.w	r3, r7, #12
 80095ba:	2206      	movs	r2, #6
 80095bc:	4933      	ldr	r1, [pc, #204]	@ (800968c <Read_flash_address+0xe0>)
 80095be:	4618      	mov	r0, r3
 80095c0:	f7ff fed6 	bl	8009370 <Quad_Read>
 printf("current_add %d %d %d %d %d %d \n",current_address[0],current_address[1],current_address[2],current_address[3],current_address[4],current_address[5]);
 80095c4:	7b3b      	ldrb	r3, [r7, #12]
 80095c6:	4618      	mov	r0, r3
 80095c8:	7b7b      	ldrb	r3, [r7, #13]
 80095ca:	461c      	mov	r4, r3
 80095cc:	7bbb      	ldrb	r3, [r7, #14]
 80095ce:	461d      	mov	r5, r3
 80095d0:	7bfb      	ldrb	r3, [r7, #15]
 80095d2:	7c3a      	ldrb	r2, [r7, #16]
 80095d4:	7c79      	ldrb	r1, [r7, #17]
 80095d6:	9102      	str	r1, [sp, #8]
 80095d8:	9201      	str	r2, [sp, #4]
 80095da:	9300      	str	r3, [sp, #0]
 80095dc:	462b      	mov	r3, r5
 80095de:	4622      	mov	r2, r4
 80095e0:	4601      	mov	r1, r0
 80095e2:	482b      	ldr	r0, [pc, #172]	@ (8009690 <Read_flash_address+0xe4>)
 80095e4:	f010 fcbc 	bl	8019f60 <iprintf>
// printf("select %d \n",select);
  if(select==1)
 80095e8:	79fb      	ldrb	r3, [r7, #7]
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d124      	bne.n	8009638 <Read_flash_address+0x8c>
    {
	  Byte_4_conv.Byte_8[0]=current_address[2];
 80095ee:	7bba      	ldrb	r2, [r7, #14]
 80095f0:	4b28      	ldr	r3, [pc, #160]	@ (8009694 <Read_flash_address+0xe8>)
 80095f2:	701a      	strb	r2, [r3, #0]
	  Byte_4_conv.Byte_8[1]=current_address[1];
 80095f4:	7b7a      	ldrb	r2, [r7, #13]
 80095f6:	4b27      	ldr	r3, [pc, #156]	@ (8009694 <Read_flash_address+0xe8>)
 80095f8:	705a      	strb	r2, [r3, #1]
	  Byte_4_conv.Byte_8[2]=current_address[0];
 80095fa:	7b3a      	ldrb	r2, [r7, #12]
 80095fc:	4b25      	ldr	r3, [pc, #148]	@ (8009694 <Read_flash_address+0xe8>)
 80095fe:	709a      	strb	r2, [r3, #2]
	  Byte_4_conv.Byte_8[3]=0;
 8009600:	4b24      	ldr	r3, [pc, #144]	@ (8009694 <Read_flash_address+0xe8>)
 8009602:	2200      	movs	r2, #0
 8009604:	70da      	strb	r2, [r3, #3]
      add=Byte_4_conv.Byte_32;
 8009606:	4b23      	ldr	r3, [pc, #140]	@ (8009694 <Read_flash_address+0xe8>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	617b      	str	r3, [r7, #20]
     printf("address_1: %ld \n\n",add);
 800960c:	6979      	ldr	r1, [r7, #20]
 800960e:	4822      	ldr	r0, [pc, #136]	@ (8009698 <Read_flash_address+0xec>)
 8009610:	f010 fca6 	bl	8019f60 <iprintf>
      if(add==0xffffff || add>=end_address_Temp||add<=start_address_Temp)
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800961a:	4293      	cmp	r3, r2
 800961c:	d007      	beq.n	800962e <Read_flash_address+0x82>
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	4a1e      	ldr	r2, [pc, #120]	@ (800969c <Read_flash_address+0xf0>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d803      	bhi.n	800962e <Read_flash_address+0x82>
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800962c:	d802      	bhi.n	8009634 <Read_flash_address+0x88>
        {
          //update_address(start_address_Temp,1);
          add=start_address_Temp;
 800962e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009632:	617b      	str	r3, [r7, #20]
         }
      return add;
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	e025      	b.n	8009684 <Read_flash_address+0xd8>
    }
  else if(select==0)
 8009638:	79fb      	ldrb	r3, [r7, #7]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d120      	bne.n	8009680 <Read_flash_address+0xd4>
    {
	  Byte_4_conv.Byte_8[0]=current_address[5];
 800963e:	7c7a      	ldrb	r2, [r7, #17]
 8009640:	4b14      	ldr	r3, [pc, #80]	@ (8009694 <Read_flash_address+0xe8>)
 8009642:	701a      	strb	r2, [r3, #0]
	  Byte_4_conv.Byte_8[1]=current_address[4];
 8009644:	7c3a      	ldrb	r2, [r7, #16]
 8009646:	4b13      	ldr	r3, [pc, #76]	@ (8009694 <Read_flash_address+0xe8>)
 8009648:	705a      	strb	r2, [r3, #1]
	  Byte_4_conv.Byte_8[2]=current_address[3];
 800964a:	7bfa      	ldrb	r2, [r7, #15]
 800964c:	4b11      	ldr	r3, [pc, #68]	@ (8009694 <Read_flash_address+0xe8>)
 800964e:	709a      	strb	r2, [r3, #2]
	  Byte_4_conv.Byte_8[3]=0;
 8009650:	4b10      	ldr	r3, [pc, #64]	@ (8009694 <Read_flash_address+0xe8>)
 8009652:	2200      	movs	r2, #0
 8009654:	70da      	strb	r2, [r3, #3]
	  add=Byte_4_conv.Byte_32;
 8009656:	4b0f      	ldr	r3, [pc, #60]	@ (8009694 <Read_flash_address+0xe8>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	617b      	str	r3, [r7, #20]

      if(add==0xffffff || add>=end_address_UV || add<=start_address_UV)
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8009662:	4293      	cmp	r3, r2
 8009664:	d007      	beq.n	8009676 <Read_flash_address+0xca>
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	4a0d      	ldr	r2, [pc, #52]	@ (80096a0 <Read_flash_address+0xf4>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d803      	bhi.n	8009676 <Read_flash_address+0xca>
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	f5b3 2f7f 	cmp.w	r3, #1044480	@ 0xff000
 8009674:	d802      	bhi.n	800967c <Read_flash_address+0xd0>
              {
                //update_address(start_address_Temp,2);
                 add=start_address_UV;
 8009676:	f44f 237f 	mov.w	r3, #1044480	@ 0xff000
 800967a:	617b      	str	r3, [r7, #20]
               }
            return add;
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	e001      	b.n	8009684 <Read_flash_address+0xd8>
    }
  else
    {
      return(0xffffff);
 8009680:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
    }
}
 8009684:	4618      	mov	r0, r3
 8009686:	3718      	adds	r7, #24
 8009688:	46bd      	mov	sp, r7
 800968a:	bdb0      	pop	{r4, r5, r7, pc}
 800968c:	001ff000 	.word	0x001ff000
 8009690:	0801dc2c 	.word	0x0801dc2c
 8009694:	200003bc 	.word	0x200003bc
 8009698:	0801dc4c 	.word	0x0801dc4c
 800969c:	000feffe 	.word	0x000feffe
 80096a0:	001feffe 	.word	0x001feffe

080096a4 <LL_AHB2_GRP1_EnableClock>:
{
 80096a4:	b480      	push	{r7}
 80096a6:	b085      	sub	sp, #20
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80096ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80096b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80096b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4313      	orrs	r3, r2
 80096ba:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80096bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80096c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	4013      	ands	r3, r2
 80096c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80096c8:	68fb      	ldr	r3, [r7, #12]
}
 80096ca:	bf00      	nop
 80096cc:	3714      	adds	r7, #20
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr
	...

080096d8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b086      	sub	sp, #24
 80096dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096de:	1d3b      	adds	r3, r7, #4
 80096e0:	2200      	movs	r2, #0
 80096e2:	601a      	str	r2, [r3, #0]
 80096e4:	605a      	str	r2, [r3, #4]
 80096e6:	609a      	str	r2, [r3, #8]
 80096e8:	60da      	str	r2, [r3, #12]
 80096ea:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80096ec:	2004      	movs	r0, #4
 80096ee:	f7ff ffd9 	bl	80096a4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80096f2:	2002      	movs	r0, #2
 80096f4:	f7ff ffd6 	bl	80096a4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80096f8:	2001      	movs	r0, #1
 80096fa:	f7ff ffd3 	bl	80096a4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80096fe:	2008      	movs	r0, #8
 8009700:	f7ff ffd0 	bl	80096a4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TS_GPIO_Port, TS_Pin, GPIO_PIN_SET);
 8009704:	2201      	movs	r2, #1
 8009706:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800970a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800970e:	f008 fa49 	bl	8011ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Green_Led_Pin|Yellow_Led_Pin|Red_Led_Pin, GPIO_PIN_SET);
 8009712:	2201      	movs	r2, #1
 8009714:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8009718:	4820      	ldr	r0, [pc, #128]	@ (800979c <MX_GPIO_Init+0xc4>)
 800971a:	f008 fa43 	bl	8011ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = PWR_Pin|EOC_Pin;
 800971e:	f44f 5382 	mov.w	r3, #4160	@ 0x1040
 8009722:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8009724:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8009728:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800972a:	2300      	movs	r3, #0
 800972c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800972e:	1d3b      	adds	r3, r7, #4
 8009730:	4619      	mov	r1, r3
 8009732:	481b      	ldr	r0, [pc, #108]	@ (80097a0 <MX_GPIO_Init+0xc8>)
 8009734:	f007 ffd0 	bl	80116d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TS_Pin;
 8009738:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800973c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800973e:	2311      	movs	r3, #17
 8009740:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009742:	2300      	movs	r3, #0
 8009744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009746:	2303      	movs	r3, #3
 8009748:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(TS_GPIO_Port, &GPIO_InitStruct);
 800974a:	1d3b      	adds	r3, r7, #4
 800974c:	4619      	mov	r1, r3
 800974e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009752:	f007 ffc1 	bl	80116d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = Green_Led_Pin|Yellow_Led_Pin|Red_Led_Pin;
 8009756:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800975a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800975c:	2301      	movs	r3, #1
 800975e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009760:	2300      	movs	r3, #0
 8009762:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009764:	2300      	movs	r3, #0
 8009766:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009768:	1d3b      	adds	r3, r7, #4
 800976a:	4619      	mov	r1, r3
 800976c:	480b      	ldr	r0, [pc, #44]	@ (800979c <MX_GPIO_Init+0xc4>)
 800976e:	f007 ffb3 	bl	80116d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8009772:	2200      	movs	r2, #0
 8009774:	2100      	movs	r1, #0
 8009776:	2017      	movs	r0, #23
 8009778:	f007 fc1d 	bl	8010fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800977c:	2017      	movs	r0, #23
 800977e:	f007 fc34 	bl	8010fea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8009782:	2200      	movs	r2, #0
 8009784:	2100      	movs	r1, #0
 8009786:	2028      	movs	r0, #40	@ 0x28
 8009788:	f007 fc15 	bl	8010fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800978c:	2028      	movs	r0, #40	@ 0x28
 800978e:	f007 fc2c 	bl	8010fea <HAL_NVIC_EnableIRQ>

}
 8009792:	bf00      	nop
 8009794:	3718      	adds	r7, #24
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	48000c00 	.word	0x48000c00
 80097a0:	48000800 	.word	0x48000800

080097a4 <LL_EXTI_EnableIT_0_31>:
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80097ac:	4b06      	ldr	r3, [pc, #24]	@ (80097c8 <LL_EXTI_EnableIT_0_31+0x24>)
 80097ae:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80097b2:	4905      	ldr	r1, [pc, #20]	@ (80097c8 <LL_EXTI_EnableIT_0_31+0x24>)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	4313      	orrs	r3, r2
 80097b8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80097bc:	bf00      	nop
 80097be:	370c      	adds	r7, #12
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr
 80097c8:	58000800 	.word	0x58000800

080097cc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80097d4:	4b05      	ldr	r3, [pc, #20]	@ (80097ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	4904      	ldr	r1, [pc, #16]	@ (80097ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	4313      	orrs	r3, r2
 80097de:	600b      	str	r3, [r1, #0]

}
 80097e0:	bf00      	nop
 80097e2:	370c      	adds	r7, #12
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr
 80097ec:	58000800 	.word	0x58000800

080097f0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80097f6:	4b0d      	ldr	r3, [pc, #52]	@ (800982c <ReadRtcSsrValue+0x3c>)
 80097f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80097fe:	4b0b      	ldr	r3, [pc, #44]	@ (800982c <ReadRtcSsrValue+0x3c>)
 8009800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009802:	b29b      	uxth	r3, r3
 8009804:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8009806:	e005      	b.n	8009814 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800980c:	4b07      	ldr	r3, [pc, #28]	@ (800982c <ReadRtcSsrValue+0x3c>)
 800980e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009810:	b29b      	uxth	r3, r3
 8009812:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	429a      	cmp	r2, r3
 800981a:	d1f5      	bne.n	8009808 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 800981c:	683b      	ldr	r3, [r7, #0]
}
 800981e:	4618      	mov	r0, r3
 8009820:	370c      	adds	r7, #12
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr
 800982a:	bf00      	nop
 800982c:	40002800 	.word	0x40002800

08009830 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8009830:	b480      	push	{r7}
 8009832:	b085      	sub	sp, #20
 8009834:	af00      	add	r7, sp, #0
 8009836:	4603      	mov	r3, r0
 8009838:	460a      	mov	r2, r1
 800983a:	71fb      	strb	r3, [r7, #7]
 800983c:	4613      	mov	r3, r2
 800983e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8009840:	79ba      	ldrb	r2, [r7, #6]
 8009842:	491d      	ldr	r1, [pc, #116]	@ (80098b8 <LinkTimerAfter+0x88>)
 8009844:	4613      	mov	r3, r2
 8009846:	005b      	lsls	r3, r3, #1
 8009848:	4413      	add	r3, r2
 800984a:	00db      	lsls	r3, r3, #3
 800984c:	440b      	add	r3, r1
 800984e:	3315      	adds	r3, #21
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8009854:	7bfb      	ldrb	r3, [r7, #15]
 8009856:	2b06      	cmp	r3, #6
 8009858:	d009      	beq.n	800986e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800985a:	7bfa      	ldrb	r2, [r7, #15]
 800985c:	4916      	ldr	r1, [pc, #88]	@ (80098b8 <LinkTimerAfter+0x88>)
 800985e:	4613      	mov	r3, r2
 8009860:	005b      	lsls	r3, r3, #1
 8009862:	4413      	add	r3, r2
 8009864:	00db      	lsls	r3, r3, #3
 8009866:	440b      	add	r3, r1
 8009868:	3314      	adds	r3, #20
 800986a:	79fa      	ldrb	r2, [r7, #7]
 800986c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800986e:	79fa      	ldrb	r2, [r7, #7]
 8009870:	4911      	ldr	r1, [pc, #68]	@ (80098b8 <LinkTimerAfter+0x88>)
 8009872:	4613      	mov	r3, r2
 8009874:	005b      	lsls	r3, r3, #1
 8009876:	4413      	add	r3, r2
 8009878:	00db      	lsls	r3, r3, #3
 800987a:	440b      	add	r3, r1
 800987c:	3315      	adds	r3, #21
 800987e:	7bfa      	ldrb	r2, [r7, #15]
 8009880:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8009882:	79fa      	ldrb	r2, [r7, #7]
 8009884:	490c      	ldr	r1, [pc, #48]	@ (80098b8 <LinkTimerAfter+0x88>)
 8009886:	4613      	mov	r3, r2
 8009888:	005b      	lsls	r3, r3, #1
 800988a:	4413      	add	r3, r2
 800988c:	00db      	lsls	r3, r3, #3
 800988e:	440b      	add	r3, r1
 8009890:	3314      	adds	r3, #20
 8009892:	79ba      	ldrb	r2, [r7, #6]
 8009894:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8009896:	79ba      	ldrb	r2, [r7, #6]
 8009898:	4907      	ldr	r1, [pc, #28]	@ (80098b8 <LinkTimerAfter+0x88>)
 800989a:	4613      	mov	r3, r2
 800989c:	005b      	lsls	r3, r3, #1
 800989e:	4413      	add	r3, r2
 80098a0:	00db      	lsls	r3, r3, #3
 80098a2:	440b      	add	r3, r1
 80098a4:	3315      	adds	r3, #21
 80098a6:	79fa      	ldrb	r2, [r7, #7]
 80098a8:	701a      	strb	r2, [r3, #0]

  return;
 80098aa:	bf00      	nop
}
 80098ac:	3714      	adds	r7, #20
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr
 80098b6:	bf00      	nop
 80098b8:	200003c0 	.word	0x200003c0

080098bc <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80098bc:	b480      	push	{r7}
 80098be:	b085      	sub	sp, #20
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	4603      	mov	r3, r0
 80098c4:	460a      	mov	r2, r1
 80098c6:	71fb      	strb	r3, [r7, #7]
 80098c8:	4613      	mov	r3, r2
 80098ca:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80098cc:	4b29      	ldr	r3, [pc, #164]	@ (8009974 <LinkTimerBefore+0xb8>)
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	79ba      	ldrb	r2, [r7, #6]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d032      	beq.n	800993e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80098d8:	79ba      	ldrb	r2, [r7, #6]
 80098da:	4927      	ldr	r1, [pc, #156]	@ (8009978 <LinkTimerBefore+0xbc>)
 80098dc:	4613      	mov	r3, r2
 80098de:	005b      	lsls	r3, r3, #1
 80098e0:	4413      	add	r3, r2
 80098e2:	00db      	lsls	r3, r3, #3
 80098e4:	440b      	add	r3, r1
 80098e6:	3314      	adds	r3, #20
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80098ec:	7bfa      	ldrb	r2, [r7, #15]
 80098ee:	4922      	ldr	r1, [pc, #136]	@ (8009978 <LinkTimerBefore+0xbc>)
 80098f0:	4613      	mov	r3, r2
 80098f2:	005b      	lsls	r3, r3, #1
 80098f4:	4413      	add	r3, r2
 80098f6:	00db      	lsls	r3, r3, #3
 80098f8:	440b      	add	r3, r1
 80098fa:	3315      	adds	r3, #21
 80098fc:	79fa      	ldrb	r2, [r7, #7]
 80098fe:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8009900:	79fa      	ldrb	r2, [r7, #7]
 8009902:	491d      	ldr	r1, [pc, #116]	@ (8009978 <LinkTimerBefore+0xbc>)
 8009904:	4613      	mov	r3, r2
 8009906:	005b      	lsls	r3, r3, #1
 8009908:	4413      	add	r3, r2
 800990a:	00db      	lsls	r3, r3, #3
 800990c:	440b      	add	r3, r1
 800990e:	3315      	adds	r3, #21
 8009910:	79ba      	ldrb	r2, [r7, #6]
 8009912:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8009914:	79fa      	ldrb	r2, [r7, #7]
 8009916:	4918      	ldr	r1, [pc, #96]	@ (8009978 <LinkTimerBefore+0xbc>)
 8009918:	4613      	mov	r3, r2
 800991a:	005b      	lsls	r3, r3, #1
 800991c:	4413      	add	r3, r2
 800991e:	00db      	lsls	r3, r3, #3
 8009920:	440b      	add	r3, r1
 8009922:	3314      	adds	r3, #20
 8009924:	7bfa      	ldrb	r2, [r7, #15]
 8009926:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8009928:	79ba      	ldrb	r2, [r7, #6]
 800992a:	4913      	ldr	r1, [pc, #76]	@ (8009978 <LinkTimerBefore+0xbc>)
 800992c:	4613      	mov	r3, r2
 800992e:	005b      	lsls	r3, r3, #1
 8009930:	4413      	add	r3, r2
 8009932:	00db      	lsls	r3, r3, #3
 8009934:	440b      	add	r3, r1
 8009936:	3314      	adds	r3, #20
 8009938:	79fa      	ldrb	r2, [r7, #7]
 800993a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 800993c:	e014      	b.n	8009968 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800993e:	79fa      	ldrb	r2, [r7, #7]
 8009940:	490d      	ldr	r1, [pc, #52]	@ (8009978 <LinkTimerBefore+0xbc>)
 8009942:	4613      	mov	r3, r2
 8009944:	005b      	lsls	r3, r3, #1
 8009946:	4413      	add	r3, r2
 8009948:	00db      	lsls	r3, r3, #3
 800994a:	440b      	add	r3, r1
 800994c:	3315      	adds	r3, #21
 800994e:	79ba      	ldrb	r2, [r7, #6]
 8009950:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8009952:	79ba      	ldrb	r2, [r7, #6]
 8009954:	4908      	ldr	r1, [pc, #32]	@ (8009978 <LinkTimerBefore+0xbc>)
 8009956:	4613      	mov	r3, r2
 8009958:	005b      	lsls	r3, r3, #1
 800995a:	4413      	add	r3, r2
 800995c:	00db      	lsls	r3, r3, #3
 800995e:	440b      	add	r3, r1
 8009960:	3314      	adds	r3, #20
 8009962:	79fa      	ldrb	r2, [r7, #7]
 8009964:	701a      	strb	r2, [r3, #0]
  return;
 8009966:	bf00      	nop
}
 8009968:	3714      	adds	r7, #20
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr
 8009972:	bf00      	nop
 8009974:	20000450 	.word	0x20000450
 8009978:	200003c0 	.word	0x200003c0

0800997c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	4603      	mov	r3, r0
 8009984:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8009986:	4b4e      	ldr	r3, [pc, #312]	@ (8009ac0 <linkTimer+0x144>)
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	b2db      	uxtb	r3, r3
 800998c:	2b06      	cmp	r3, #6
 800998e:	d118      	bne.n	80099c2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8009990:	4b4b      	ldr	r3, [pc, #300]	@ (8009ac0 <linkTimer+0x144>)
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	b2da      	uxtb	r2, r3
 8009996:	4b4b      	ldr	r3, [pc, #300]	@ (8009ac4 <linkTimer+0x148>)
 8009998:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800999a:	4a49      	ldr	r2, [pc, #292]	@ (8009ac0 <linkTimer+0x144>)
 800999c:	79fb      	ldrb	r3, [r7, #7]
 800999e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80099a0:	79fa      	ldrb	r2, [r7, #7]
 80099a2:	4949      	ldr	r1, [pc, #292]	@ (8009ac8 <linkTimer+0x14c>)
 80099a4:	4613      	mov	r3, r2
 80099a6:	005b      	lsls	r3, r3, #1
 80099a8:	4413      	add	r3, r2
 80099aa:	00db      	lsls	r3, r3, #3
 80099ac:	440b      	add	r3, r1
 80099ae:	3315      	adds	r3, #21
 80099b0:	2206      	movs	r2, #6
 80099b2:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80099b4:	4b45      	ldr	r3, [pc, #276]	@ (8009acc <linkTimer+0x150>)
 80099b6:	f04f 32ff 	mov.w	r2, #4294967295
 80099ba:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80099bc:	2300      	movs	r3, #0
 80099be:	81fb      	strh	r3, [r7, #14]
 80099c0:	e078      	b.n	8009ab4 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80099c2:	f000 f909 	bl	8009bd8 <ReturnTimeElapsed>
 80099c6:	4603      	mov	r3, r0
 80099c8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80099ca:	79fa      	ldrb	r2, [r7, #7]
 80099cc:	493e      	ldr	r1, [pc, #248]	@ (8009ac8 <linkTimer+0x14c>)
 80099ce:	4613      	mov	r3, r2
 80099d0:	005b      	lsls	r3, r3, #1
 80099d2:	4413      	add	r3, r2
 80099d4:	00db      	lsls	r3, r3, #3
 80099d6:	440b      	add	r3, r1
 80099d8:	3308      	adds	r3, #8
 80099da:	6819      	ldr	r1, [r3, #0]
 80099dc:	89fb      	ldrh	r3, [r7, #14]
 80099de:	79fa      	ldrb	r2, [r7, #7]
 80099e0:	4419      	add	r1, r3
 80099e2:	4839      	ldr	r0, [pc, #228]	@ (8009ac8 <linkTimer+0x14c>)
 80099e4:	4613      	mov	r3, r2
 80099e6:	005b      	lsls	r3, r3, #1
 80099e8:	4413      	add	r3, r2
 80099ea:	00db      	lsls	r3, r3, #3
 80099ec:	4403      	add	r3, r0
 80099ee:	3308      	adds	r3, #8
 80099f0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80099f2:	79fa      	ldrb	r2, [r7, #7]
 80099f4:	4934      	ldr	r1, [pc, #208]	@ (8009ac8 <linkTimer+0x14c>)
 80099f6:	4613      	mov	r3, r2
 80099f8:	005b      	lsls	r3, r3, #1
 80099fa:	4413      	add	r3, r2
 80099fc:	00db      	lsls	r3, r3, #3
 80099fe:	440b      	add	r3, r1
 8009a00:	3308      	adds	r3, #8
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8009a06:	4b2e      	ldr	r3, [pc, #184]	@ (8009ac0 <linkTimer+0x144>)
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	4a2e      	ldr	r2, [pc, #184]	@ (8009ac8 <linkTimer+0x14c>)
 8009a10:	460b      	mov	r3, r1
 8009a12:	005b      	lsls	r3, r3, #1
 8009a14:	440b      	add	r3, r1
 8009a16:	00db      	lsls	r3, r3, #3
 8009a18:	4413      	add	r3, r2
 8009a1a:	3308      	adds	r3, #8
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	68ba      	ldr	r2, [r7, #8]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d337      	bcc.n	8009a94 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8009a24:	4b26      	ldr	r3, [pc, #152]	@ (8009ac0 <linkTimer+0x144>)
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8009a2a:	7b7a      	ldrb	r2, [r7, #13]
 8009a2c:	4926      	ldr	r1, [pc, #152]	@ (8009ac8 <linkTimer+0x14c>)
 8009a2e:	4613      	mov	r3, r2
 8009a30:	005b      	lsls	r3, r3, #1
 8009a32:	4413      	add	r3, r2
 8009a34:	00db      	lsls	r3, r3, #3
 8009a36:	440b      	add	r3, r1
 8009a38:	3315      	adds	r3, #21
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8009a3e:	e013      	b.n	8009a68 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8009a40:	7b7a      	ldrb	r2, [r7, #13]
 8009a42:	4921      	ldr	r1, [pc, #132]	@ (8009ac8 <linkTimer+0x14c>)
 8009a44:	4613      	mov	r3, r2
 8009a46:	005b      	lsls	r3, r3, #1
 8009a48:	4413      	add	r3, r2
 8009a4a:	00db      	lsls	r3, r3, #3
 8009a4c:	440b      	add	r3, r1
 8009a4e:	3315      	adds	r3, #21
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8009a54:	7b7a      	ldrb	r2, [r7, #13]
 8009a56:	491c      	ldr	r1, [pc, #112]	@ (8009ac8 <linkTimer+0x14c>)
 8009a58:	4613      	mov	r3, r2
 8009a5a:	005b      	lsls	r3, r3, #1
 8009a5c:	4413      	add	r3, r2
 8009a5e:	00db      	lsls	r3, r3, #3
 8009a60:	440b      	add	r3, r1
 8009a62:	3315      	adds	r3, #21
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8009a68:	7b3b      	ldrb	r3, [r7, #12]
 8009a6a:	2b06      	cmp	r3, #6
 8009a6c:	d00b      	beq.n	8009a86 <linkTimer+0x10a>
 8009a6e:	7b3a      	ldrb	r2, [r7, #12]
 8009a70:	4915      	ldr	r1, [pc, #84]	@ (8009ac8 <linkTimer+0x14c>)
 8009a72:	4613      	mov	r3, r2
 8009a74:	005b      	lsls	r3, r3, #1
 8009a76:	4413      	add	r3, r2
 8009a78:	00db      	lsls	r3, r3, #3
 8009a7a:	440b      	add	r3, r1
 8009a7c:	3308      	adds	r3, #8
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	68ba      	ldr	r2, [r7, #8]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d2dc      	bcs.n	8009a40 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8009a86:	7b7a      	ldrb	r2, [r7, #13]
 8009a88:	79fb      	ldrb	r3, [r7, #7]
 8009a8a:	4611      	mov	r1, r2
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7ff fecf 	bl	8009830 <LinkTimerAfter>
 8009a92:	e00f      	b.n	8009ab4 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8009a94:	4b0a      	ldr	r3, [pc, #40]	@ (8009ac0 <linkTimer+0x144>)
 8009a96:	781b      	ldrb	r3, [r3, #0]
 8009a98:	b2da      	uxtb	r2, r3
 8009a9a:	79fb      	ldrb	r3, [r7, #7]
 8009a9c:	4611      	mov	r1, r2
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f7ff ff0c 	bl	80098bc <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8009aa4:	4b06      	ldr	r3, [pc, #24]	@ (8009ac0 <linkTimer+0x144>)
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	b2da      	uxtb	r2, r3
 8009aaa:	4b06      	ldr	r3, [pc, #24]	@ (8009ac4 <linkTimer+0x148>)
 8009aac:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8009aae:	4a04      	ldr	r2, [pc, #16]	@ (8009ac0 <linkTimer+0x144>)
 8009ab0:	79fb      	ldrb	r3, [r7, #7]
 8009ab2:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8009ab4:	89fb      	ldrh	r3, [r7, #14]
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	20000450 	.word	0x20000450
 8009ac4:	20000451 	.word	0x20000451
 8009ac8:	200003c0 	.word	0x200003c0
 8009acc:	20000454 	.word	0x20000454

08009ad0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b085      	sub	sp, #20
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	460a      	mov	r2, r1
 8009ada:	71fb      	strb	r3, [r7, #7]
 8009adc:	4613      	mov	r3, r2
 8009ade:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8009ae0:	4b39      	ldr	r3, [pc, #228]	@ (8009bc8 <UnlinkTimer+0xf8>)
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	b2db      	uxtb	r3, r3
 8009ae6:	79fa      	ldrb	r2, [r7, #7]
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d111      	bne.n	8009b10 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8009aec:	4b36      	ldr	r3, [pc, #216]	@ (8009bc8 <UnlinkTimer+0xf8>)
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	b2da      	uxtb	r2, r3
 8009af2:	4b36      	ldr	r3, [pc, #216]	@ (8009bcc <UnlinkTimer+0xfc>)
 8009af4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8009af6:	79fa      	ldrb	r2, [r7, #7]
 8009af8:	4935      	ldr	r1, [pc, #212]	@ (8009bd0 <UnlinkTimer+0x100>)
 8009afa:	4613      	mov	r3, r2
 8009afc:	005b      	lsls	r3, r3, #1
 8009afe:	4413      	add	r3, r2
 8009b00:	00db      	lsls	r3, r3, #3
 8009b02:	440b      	add	r3, r1
 8009b04:	3315      	adds	r3, #21
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	b2da      	uxtb	r2, r3
 8009b0a:	4b2f      	ldr	r3, [pc, #188]	@ (8009bc8 <UnlinkTimer+0xf8>)
 8009b0c:	701a      	strb	r2, [r3, #0]
 8009b0e:	e03e      	b.n	8009b8e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8009b10:	79fa      	ldrb	r2, [r7, #7]
 8009b12:	492f      	ldr	r1, [pc, #188]	@ (8009bd0 <UnlinkTimer+0x100>)
 8009b14:	4613      	mov	r3, r2
 8009b16:	005b      	lsls	r3, r3, #1
 8009b18:	4413      	add	r3, r2
 8009b1a:	00db      	lsls	r3, r3, #3
 8009b1c:	440b      	add	r3, r1
 8009b1e:	3314      	adds	r3, #20
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8009b24:	79fa      	ldrb	r2, [r7, #7]
 8009b26:	492a      	ldr	r1, [pc, #168]	@ (8009bd0 <UnlinkTimer+0x100>)
 8009b28:	4613      	mov	r3, r2
 8009b2a:	005b      	lsls	r3, r3, #1
 8009b2c:	4413      	add	r3, r2
 8009b2e:	00db      	lsls	r3, r3, #3
 8009b30:	440b      	add	r3, r1
 8009b32:	3315      	adds	r3, #21
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8009b38:	79f9      	ldrb	r1, [r7, #7]
 8009b3a:	7bfa      	ldrb	r2, [r7, #15]
 8009b3c:	4824      	ldr	r0, [pc, #144]	@ (8009bd0 <UnlinkTimer+0x100>)
 8009b3e:	460b      	mov	r3, r1
 8009b40:	005b      	lsls	r3, r3, #1
 8009b42:	440b      	add	r3, r1
 8009b44:	00db      	lsls	r3, r3, #3
 8009b46:	4403      	add	r3, r0
 8009b48:	3315      	adds	r3, #21
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	b2d8      	uxtb	r0, r3
 8009b4e:	4920      	ldr	r1, [pc, #128]	@ (8009bd0 <UnlinkTimer+0x100>)
 8009b50:	4613      	mov	r3, r2
 8009b52:	005b      	lsls	r3, r3, #1
 8009b54:	4413      	add	r3, r2
 8009b56:	00db      	lsls	r3, r3, #3
 8009b58:	440b      	add	r3, r1
 8009b5a:	3315      	adds	r3, #21
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8009b60:	7bbb      	ldrb	r3, [r7, #14]
 8009b62:	2b06      	cmp	r3, #6
 8009b64:	d013      	beq.n	8009b8e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8009b66:	79f9      	ldrb	r1, [r7, #7]
 8009b68:	7bba      	ldrb	r2, [r7, #14]
 8009b6a:	4819      	ldr	r0, [pc, #100]	@ (8009bd0 <UnlinkTimer+0x100>)
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	005b      	lsls	r3, r3, #1
 8009b70:	440b      	add	r3, r1
 8009b72:	00db      	lsls	r3, r3, #3
 8009b74:	4403      	add	r3, r0
 8009b76:	3314      	adds	r3, #20
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	b2d8      	uxtb	r0, r3
 8009b7c:	4914      	ldr	r1, [pc, #80]	@ (8009bd0 <UnlinkTimer+0x100>)
 8009b7e:	4613      	mov	r3, r2
 8009b80:	005b      	lsls	r3, r3, #1
 8009b82:	4413      	add	r3, r2
 8009b84:	00db      	lsls	r3, r3, #3
 8009b86:	440b      	add	r3, r1
 8009b88:	3314      	adds	r3, #20
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8009b8e:	79fa      	ldrb	r2, [r7, #7]
 8009b90:	490f      	ldr	r1, [pc, #60]	@ (8009bd0 <UnlinkTimer+0x100>)
 8009b92:	4613      	mov	r3, r2
 8009b94:	005b      	lsls	r3, r3, #1
 8009b96:	4413      	add	r3, r2
 8009b98:	00db      	lsls	r3, r3, #3
 8009b9a:	440b      	add	r3, r1
 8009b9c:	330c      	adds	r3, #12
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8009ba2:	4b09      	ldr	r3, [pc, #36]	@ (8009bc8 <UnlinkTimer+0xf8>)
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	b2db      	uxtb	r3, r3
 8009ba8:	2b06      	cmp	r3, #6
 8009baa:	d107      	bne.n	8009bbc <UnlinkTimer+0xec>
 8009bac:	79bb      	ldrb	r3, [r7, #6]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d104      	bne.n	8009bbc <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8009bb2:	4b08      	ldr	r3, [pc, #32]	@ (8009bd4 <UnlinkTimer+0x104>)
 8009bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8009bb8:	601a      	str	r2, [r3, #0]
  }

  return;
 8009bba:	bf00      	nop
 8009bbc:	bf00      	nop
}
 8009bbe:	3714      	adds	r7, #20
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr
 8009bc8:	20000450 	.word	0x20000450
 8009bcc:	20000451 	.word	0x20000451
 8009bd0:	200003c0 	.word	0x200003c0
 8009bd4:	20000454 	.word	0x20000454

08009bd8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b082      	sub	sp, #8
 8009bdc:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8009bde:	4b1a      	ldr	r3, [pc, #104]	@ (8009c48 <ReturnTimeElapsed+0x70>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009be6:	d026      	beq.n	8009c36 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8009be8:	f7ff fe02 	bl	80097f0 <ReadRtcSsrValue>
 8009bec:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8009bee:	4b16      	ldr	r3, [pc, #88]	@ (8009c48 <ReturnTimeElapsed+0x70>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d805      	bhi.n	8009c04 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8009bf8:	4b13      	ldr	r3, [pc, #76]	@ (8009c48 <ReturnTimeElapsed+0x70>)
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	1ad3      	subs	r3, r2, r3
 8009c00:	607b      	str	r3, [r7, #4]
 8009c02:	e00a      	b.n	8009c1a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8009c04:	4b11      	ldr	r3, [pc, #68]	@ (8009c4c <ReturnTimeElapsed+0x74>)
 8009c06:	881b      	ldrh	r3, [r3, #0]
 8009c08:	461a      	mov	r2, r3
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	1ad3      	subs	r3, r2, r3
 8009c0e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8009c10:	4b0d      	ldr	r3, [pc, #52]	@ (8009c48 <ReturnTimeElapsed+0x70>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	683a      	ldr	r2, [r7, #0]
 8009c16:	4413      	add	r3, r2
 8009c18:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8009c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8009c50 <ReturnTimeElapsed+0x78>)
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	461a      	mov	r2, r3
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	fb02 f303 	mul.w	r3, r2, r3
 8009c26:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8009c28:	4b0a      	ldr	r3, [pc, #40]	@ (8009c54 <ReturnTimeElapsed+0x7c>)
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	40d3      	lsrs	r3, r2
 8009c32:	607b      	str	r3, [r7, #4]
 8009c34:	e001      	b.n	8009c3a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8009c36:	2300      	movs	r3, #0
 8009c38:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	b29b      	uxth	r3, r3
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3708      	adds	r7, #8
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	20000454 	.word	0x20000454
 8009c4c:	2000045c 	.word	0x2000045c
 8009c50:	2000045a 	.word	0x2000045a
 8009c54:	20000459 	.word	0x20000459

08009c58 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	4603      	mov	r3, r0
 8009c60:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8009c62:	88fb      	ldrh	r3, [r7, #6]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d108      	bne.n	8009c7a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8009c68:	f7ff fdc2 	bl	80097f0 <ReadRtcSsrValue>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	4a21      	ldr	r2, [pc, #132]	@ (8009cf4 <RestartWakeupCounter+0x9c>)
 8009c70:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8009c72:	2003      	movs	r0, #3
 8009c74:	f007 f9e1 	bl	801103a <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8009c78:	e039      	b.n	8009cee <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8009c7a:	88fb      	ldrh	r3, [r7, #6]
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d803      	bhi.n	8009c88 <RestartWakeupCounter+0x30>
 8009c80:	4b1d      	ldr	r3, [pc, #116]	@ (8009cf8 <RestartWakeupCounter+0xa0>)
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d002      	beq.n	8009c8e <RestartWakeupCounter+0x36>
      Value -= 1;
 8009c88:	88fb      	ldrh	r3, [r7, #6]
 8009c8a:	3b01      	subs	r3, #1
 8009c8c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8009c8e:	bf00      	nop
 8009c90:	4b1a      	ldr	r3, [pc, #104]	@ (8009cfc <RestartWakeupCounter+0xa4>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	f003 0304 	and.w	r3, r3, #4
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d0f8      	beq.n	8009c90 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8009c9e:	4b17      	ldr	r3, [pc, #92]	@ (8009cfc <RestartWakeupCounter+0xa4>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	b2da      	uxtb	r2, r3
 8009ca6:	4b15      	ldr	r3, [pc, #84]	@ (8009cfc <RestartWakeupCounter+0xa4>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8009cae:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8009cb0:	4b13      	ldr	r3, [pc, #76]	@ (8009d00 <RestartWakeupCounter+0xa8>)
 8009cb2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8009cb6:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8009cb8:	2003      	movs	r0, #3
 8009cba:	f007 f9cc 	bl	8011056 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8009cbe:	4b11      	ldr	r3, [pc, #68]	@ (8009d04 <RestartWakeupCounter+0xac>)
 8009cc0:	695b      	ldr	r3, [r3, #20]
 8009cc2:	0c1b      	lsrs	r3, r3, #16
 8009cc4:	041b      	lsls	r3, r3, #16
 8009cc6:	88fa      	ldrh	r2, [r7, #6]
 8009cc8:	490e      	ldr	r1, [pc, #56]	@ (8009d04 <RestartWakeupCounter+0xac>)
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8009cce:	f7ff fd8f 	bl	80097f0 <ReadRtcSsrValue>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	4a07      	ldr	r2, [pc, #28]	@ (8009cf4 <RestartWakeupCounter+0x9c>)
 8009cd6:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8009cd8:	4b08      	ldr	r3, [pc, #32]	@ (8009cfc <RestartWakeupCounter+0xa4>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	689a      	ldr	r2, [r3, #8]
 8009cde:	4b07      	ldr	r3, [pc, #28]	@ (8009cfc <RestartWakeupCounter+0xa4>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009ce6:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8009ce8:	f3af 8000 	nop.w
  return ;
 8009cec:	bf00      	nop
}
 8009cee:	3708      	adds	r7, #8
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}
 8009cf4:	20000454 	.word	0x20000454
 8009cf8:	20000459 	.word	0x20000459
 8009cfc:	20000564 	.word	0x20000564
 8009d00:	58000800 	.word	0x58000800
 8009d04:	40002800 	.word	0x40002800

08009d08 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8009d0e:	4b45      	ldr	r3, [pc, #276]	@ (8009e24 <RescheduleTimerList+0x11c>)
 8009d10:	689b      	ldr	r3, [r3, #8]
 8009d12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d1a:	d107      	bne.n	8009d2c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8009d1c:	bf00      	nop
 8009d1e:	4b42      	ldr	r3, [pc, #264]	@ (8009e28 <RescheduleTimerList+0x120>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	68db      	ldr	r3, [r3, #12]
 8009d24:	f003 0304 	and.w	r3, r3, #4
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d1f8      	bne.n	8009d1e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8009d2c:	4b3e      	ldr	r3, [pc, #248]	@ (8009e28 <RescheduleTimerList+0x120>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	689a      	ldr	r2, [r3, #8]
 8009d32:	4b3d      	ldr	r3, [pc, #244]	@ (8009e28 <RescheduleTimerList+0x120>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009d3a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8009d3c:	4b3b      	ldr	r3, [pc, #236]	@ (8009e2c <RescheduleTimerList+0x124>)
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8009d42:	7bfa      	ldrb	r2, [r7, #15]
 8009d44:	493a      	ldr	r1, [pc, #232]	@ (8009e30 <RescheduleTimerList+0x128>)
 8009d46:	4613      	mov	r3, r2
 8009d48:	005b      	lsls	r3, r3, #1
 8009d4a:	4413      	add	r3, r2
 8009d4c:	00db      	lsls	r3, r3, #3
 8009d4e:	440b      	add	r3, r1
 8009d50:	3308      	adds	r3, #8
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8009d56:	f7ff ff3f 	bl	8009bd8 <ReturnTimeElapsed>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8009d5e:	88fb      	ldrh	r3, [r7, #6]
 8009d60:	68ba      	ldr	r2, [r7, #8]
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d205      	bcs.n	8009d72 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8009d66:	2300      	movs	r3, #0
 8009d68:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8009d6a:	4b32      	ldr	r3, [pc, #200]	@ (8009e34 <RescheduleTimerList+0x12c>)
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	701a      	strb	r2, [r3, #0]
 8009d70:	e04d      	b.n	8009e0e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8009d72:	88fb      	ldrh	r3, [r7, #6]
 8009d74:	4a30      	ldr	r2, [pc, #192]	@ (8009e38 <RescheduleTimerList+0x130>)
 8009d76:	8812      	ldrh	r2, [r2, #0]
 8009d78:	b292      	uxth	r2, r2
 8009d7a:	4413      	add	r3, r2
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d906      	bls.n	8009d92 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8009d84:	4b2c      	ldr	r3, [pc, #176]	@ (8009e38 <RescheduleTimerList+0x130>)
 8009d86:	881b      	ldrh	r3, [r3, #0]
 8009d88:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8009d8a:	4b2a      	ldr	r3, [pc, #168]	@ (8009e34 <RescheduleTimerList+0x12c>)
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	701a      	strb	r2, [r3, #0]
 8009d90:	e03d      	b.n	8009e0e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	b29a      	uxth	r2, r3
 8009d96:	88fb      	ldrh	r3, [r7, #6]
 8009d98:	1ad3      	subs	r3, r2, r3
 8009d9a:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8009d9c:	4b25      	ldr	r3, [pc, #148]	@ (8009e34 <RescheduleTimerList+0x12c>)
 8009d9e:	2201      	movs	r2, #1
 8009da0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8009da2:	e034      	b.n	8009e0e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8009da4:	7bfa      	ldrb	r2, [r7, #15]
 8009da6:	4922      	ldr	r1, [pc, #136]	@ (8009e30 <RescheduleTimerList+0x128>)
 8009da8:	4613      	mov	r3, r2
 8009daa:	005b      	lsls	r3, r3, #1
 8009dac:	4413      	add	r3, r2
 8009dae:	00db      	lsls	r3, r3, #3
 8009db0:	440b      	add	r3, r1
 8009db2:	3308      	adds	r3, #8
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	88fb      	ldrh	r3, [r7, #6]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d20a      	bcs.n	8009dd2 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8009dbc:	7bfa      	ldrb	r2, [r7, #15]
 8009dbe:	491c      	ldr	r1, [pc, #112]	@ (8009e30 <RescheduleTimerList+0x128>)
 8009dc0:	4613      	mov	r3, r2
 8009dc2:	005b      	lsls	r3, r3, #1
 8009dc4:	4413      	add	r3, r2
 8009dc6:	00db      	lsls	r3, r3, #3
 8009dc8:	440b      	add	r3, r1
 8009dca:	3308      	adds	r3, #8
 8009dcc:	2200      	movs	r2, #0
 8009dce:	601a      	str	r2, [r3, #0]
 8009dd0:	e013      	b.n	8009dfa <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8009dd2:	7bfa      	ldrb	r2, [r7, #15]
 8009dd4:	4916      	ldr	r1, [pc, #88]	@ (8009e30 <RescheduleTimerList+0x128>)
 8009dd6:	4613      	mov	r3, r2
 8009dd8:	005b      	lsls	r3, r3, #1
 8009dda:	4413      	add	r3, r2
 8009ddc:	00db      	lsls	r3, r3, #3
 8009dde:	440b      	add	r3, r1
 8009de0:	3308      	adds	r3, #8
 8009de2:	6819      	ldr	r1, [r3, #0]
 8009de4:	88fb      	ldrh	r3, [r7, #6]
 8009de6:	7bfa      	ldrb	r2, [r7, #15]
 8009de8:	1ac9      	subs	r1, r1, r3
 8009dea:	4811      	ldr	r0, [pc, #68]	@ (8009e30 <RescheduleTimerList+0x128>)
 8009dec:	4613      	mov	r3, r2
 8009dee:	005b      	lsls	r3, r3, #1
 8009df0:	4413      	add	r3, r2
 8009df2:	00db      	lsls	r3, r3, #3
 8009df4:	4403      	add	r3, r0
 8009df6:	3308      	adds	r3, #8
 8009df8:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8009dfa:	7bfa      	ldrb	r2, [r7, #15]
 8009dfc:	490c      	ldr	r1, [pc, #48]	@ (8009e30 <RescheduleTimerList+0x128>)
 8009dfe:	4613      	mov	r3, r2
 8009e00:	005b      	lsls	r3, r3, #1
 8009e02:	4413      	add	r3, r2
 8009e04:	00db      	lsls	r3, r3, #3
 8009e06:	440b      	add	r3, r1
 8009e08:	3315      	adds	r3, #21
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8009e0e:	7bfb      	ldrb	r3, [r7, #15]
 8009e10:	2b06      	cmp	r3, #6
 8009e12:	d1c7      	bne.n	8009da4 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8009e14:	89bb      	ldrh	r3, [r7, #12]
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7ff ff1e 	bl	8009c58 <RestartWakeupCounter>

  return ;
 8009e1c:	bf00      	nop
}
 8009e1e:	3710      	adds	r7, #16
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}
 8009e24:	40002800 	.word	0x40002800
 8009e28:	20000564 	.word	0x20000564
 8009e2c:	20000450 	.word	0x20000450
 8009e30:	200003c0 	.word	0x200003c0
 8009e34:	20000458 	.word	0x20000458
 8009e38:	2000045e 	.word	0x2000045e

08009e3c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b08a      	sub	sp, #40	@ 0x28
 8009e40:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e42:	f3ef 8310 	mrs	r3, PRIMASK
 8009e46:	617b      	str	r3, [r7, #20]
  return(result);
 8009e48:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009e4a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8009e4c:	b672      	cpsid	i
}
 8009e4e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8009e50:	4b59      	ldr	r3, [pc, #356]	@ (8009fb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	22ca      	movs	r2, #202	@ 0xca
 8009e56:	625a      	str	r2, [r3, #36]	@ 0x24
 8009e58:	4b57      	ldr	r3, [pc, #348]	@ (8009fb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2253      	movs	r2, #83	@ 0x53
 8009e5e:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8009e60:	4b55      	ldr	r3, [pc, #340]	@ (8009fb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	689a      	ldr	r2, [r3, #8]
 8009e66:	4b54      	ldr	r3, [pc, #336]	@ (8009fb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009e6e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8009e70:	4b52      	ldr	r3, [pc, #328]	@ (8009fbc <HW_TS_RTC_Wakeup_Handler+0x180>)
 8009e72:	781b      	ldrb	r3, [r3, #0]
 8009e74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8009e78:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8009e7c:	4950      	ldr	r1, [pc, #320]	@ (8009fc0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8009e7e:	4613      	mov	r3, r2
 8009e80:	005b      	lsls	r3, r3, #1
 8009e82:	4413      	add	r3, r2
 8009e84:	00db      	lsls	r3, r3, #3
 8009e86:	440b      	add	r3, r1
 8009e88:	330c      	adds	r3, #12
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	b2db      	uxtb	r3, r3
 8009e8e:	2b02      	cmp	r3, #2
 8009e90:	d16e      	bne.n	8009f70 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8009e92:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8009e96:	494a      	ldr	r1, [pc, #296]	@ (8009fc0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8009e98:	4613      	mov	r3, r2
 8009e9a:	005b      	lsls	r3, r3, #1
 8009e9c:	4413      	add	r3, r2
 8009e9e:	00db      	lsls	r3, r3, #3
 8009ea0:	440b      	add	r3, r1
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8009ea6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8009eaa:	4945      	ldr	r1, [pc, #276]	@ (8009fc0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8009eac:	4613      	mov	r3, r2
 8009eae:	005b      	lsls	r3, r3, #1
 8009eb0:	4413      	add	r3, r2
 8009eb2:	00db      	lsls	r3, r3, #3
 8009eb4:	440b      	add	r3, r1
 8009eb6:	3310      	adds	r3, #16
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8009ebc:	4b41      	ldr	r3, [pc, #260]	@ (8009fc4 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d04c      	beq.n	8009f60 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8009ec6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8009eca:	493d      	ldr	r1, [pc, #244]	@ (8009fc0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8009ecc:	4613      	mov	r3, r2
 8009ece:	005b      	lsls	r3, r3, #1
 8009ed0:	4413      	add	r3, r2
 8009ed2:	00db      	lsls	r3, r3, #3
 8009ed4:	440b      	add	r3, r1
 8009ed6:	330d      	adds	r3, #13
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d124      	bne.n	8009f2a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8009ee0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009ee4:	2101      	movs	r1, #1
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f7ff fdf2 	bl	8009ad0 <UnlinkTimer>
 8009eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eee:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	f383 8810 	msr	PRIMASK, r3
}
 8009ef6:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8009ef8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8009efc:	4930      	ldr	r1, [pc, #192]	@ (8009fc0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8009efe:	4613      	mov	r3, r2
 8009f00:	005b      	lsls	r3, r3, #1
 8009f02:	4413      	add	r3, r2
 8009f04:	00db      	lsls	r3, r3, #3
 8009f06:	440b      	add	r3, r1
 8009f08:	3304      	adds	r3, #4
 8009f0a:	681a      	ldr	r2, [r3, #0]
 8009f0c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009f10:	4611      	mov	r1, r2
 8009f12:	4618      	mov	r0, r3
 8009f14:	f000 fa32 	bl	800a37c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8009f18:	4b27      	ldr	r3, [pc, #156]	@ (8009fb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	22ca      	movs	r2, #202	@ 0xca
 8009f1e:	625a      	str	r2, [r3, #36]	@ 0x24
 8009f20:	4b25      	ldr	r3, [pc, #148]	@ (8009fb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	2253      	movs	r2, #83	@ 0x53
 8009f26:	625a      	str	r2, [r3, #36]	@ 0x24
 8009f28:	e012      	b.n	8009f50 <HW_TS_RTC_Wakeup_Handler+0x114>
 8009f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f2c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f383 8810 	msr	PRIMASK, r3
}
 8009f34:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8009f36:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f000 f99a 	bl	800a274 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8009f40:	4b1d      	ldr	r3, [pc, #116]	@ (8009fb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	22ca      	movs	r2, #202	@ 0xca
 8009f46:	625a      	str	r2, [r3, #36]	@ 0x24
 8009f48:	4b1b      	ldr	r3, [pc, #108]	@ (8009fb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	2253      	movs	r2, #83	@ 0x53
 8009f4e:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8009f50:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009f54:	69fa      	ldr	r2, [r7, #28]
 8009f56:	4619      	mov	r1, r3
 8009f58:	69b8      	ldr	r0, [r7, #24]
 8009f5a:	f000 fa95 	bl	800a488 <HW_TS_RTC_Int_AppNot>
 8009f5e:	e022      	b.n	8009fa6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8009f60:	f7ff fed2 	bl	8009d08 <RescheduleTimerList>
 8009f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f66:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	f383 8810 	msr	PRIMASK, r3
}
 8009f6e:	e01a      	b.n	8009fa6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8009f70:	bf00      	nop
 8009f72:	4b11      	ldr	r3, [pc, #68]	@ (8009fb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	f003 0304 	and.w	r3, r3, #4
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d0f8      	beq.n	8009f72 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8009f80:	4b0d      	ldr	r3, [pc, #52]	@ (8009fb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	68db      	ldr	r3, [r3, #12]
 8009f86:	b2da      	uxtb	r2, r3
 8009f88:	4b0b      	ldr	r3, [pc, #44]	@ (8009fb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8009f90:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8009f92:	4b0d      	ldr	r3, [pc, #52]	@ (8009fc8 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8009f94:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8009f98:	60da      	str	r2, [r3, #12]
 8009f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f9c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f383 8810 	msr	PRIMASK, r3
}
 8009fa4:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8009fa6:	4b04      	ldr	r3, [pc, #16]	@ (8009fb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	22ff      	movs	r2, #255	@ 0xff
 8009fac:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8009fae:	bf00      	nop
}
 8009fb0:	3728      	adds	r7, #40	@ 0x28
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}
 8009fb6:	bf00      	nop
 8009fb8:	20000564 	.word	0x20000564
 8009fbc:	20000450 	.word	0x20000450
 8009fc0:	200003c0 	.word	0x200003c0
 8009fc4:	20000458 	.word	0x20000458
 8009fc8:	58000800 	.word	0x58000800

08009fcc <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b088      	sub	sp, #32
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	6039      	str	r1, [r7, #0]
 8009fd6:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8009fd8:	4b5e      	ldr	r3, [pc, #376]	@ (800a154 <HW_TS_Init+0x188>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	22ca      	movs	r2, #202	@ 0xca
 8009fde:	625a      	str	r2, [r3, #36]	@ 0x24
 8009fe0:	4b5c      	ldr	r3, [pc, #368]	@ (800a154 <HW_TS_Init+0x188>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	2253      	movs	r2, #83	@ 0x53
 8009fe6:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009fe8:	4b5b      	ldr	r3, [pc, #364]	@ (800a158 <HW_TS_Init+0x18c>)
 8009fea:	689b      	ldr	r3, [r3, #8]
 8009fec:	4a5a      	ldr	r2, [pc, #360]	@ (800a158 <HW_TS_Init+0x18c>)
 8009fee:	f043 0320 	orr.w	r3, r3, #32
 8009ff2:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8009ff4:	4b58      	ldr	r3, [pc, #352]	@ (800a158 <HW_TS_Init+0x18c>)
 8009ff6:	689b      	ldr	r3, [r3, #8]
 8009ff8:	b2db      	uxtb	r3, r3
 8009ffa:	f003 0307 	and.w	r3, r3, #7
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	f1c3 0304 	rsb	r3, r3, #4
 800a004:	b2da      	uxtb	r2, r3
 800a006:	4b55      	ldr	r3, [pc, #340]	@ (800a15c <HW_TS_Init+0x190>)
 800a008:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800a00a:	4b53      	ldr	r3, [pc, #332]	@ (800a158 <HW_TS_Init+0x18c>)
 800a00c:	691b      	ldr	r3, [r3, #16]
 800a00e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a012:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 800a016:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a018:	693a      	ldr	r2, [r7, #16]
 800a01a:	fa92 f2a2 	rbit	r2, r2
 800a01e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800a020:	68fa      	ldr	r2, [r7, #12]
 800a022:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800a024:	697a      	ldr	r2, [r7, #20]
 800a026:	2a00      	cmp	r2, #0
 800a028:	d101      	bne.n	800a02e <HW_TS_Init+0x62>
  {
    return 32U;
 800a02a:	2220      	movs	r2, #32
 800a02c:	e003      	b.n	800a036 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800a02e:	697a      	ldr	r2, [r7, #20]
 800a030:	fab2 f282 	clz	r2, r2
 800a034:	b2d2      	uxtb	r2, r2
 800a036:	40d3      	lsrs	r3, r2
 800a038:	b2db      	uxtb	r3, r3
 800a03a:	3301      	adds	r3, #1
 800a03c:	b2da      	uxtb	r2, r3
 800a03e:	4b48      	ldr	r3, [pc, #288]	@ (800a160 <HW_TS_Init+0x194>)
 800a040:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800a042:	4b45      	ldr	r3, [pc, #276]	@ (800a158 <HW_TS_Init+0x18c>)
 800a044:	691b      	ldr	r3, [r3, #16]
 800a046:	b29b      	uxth	r3, r3
 800a048:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	3301      	adds	r3, #1
 800a050:	b29a      	uxth	r2, r3
 800a052:	4b44      	ldr	r3, [pc, #272]	@ (800a164 <HW_TS_Init+0x198>)
 800a054:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800a056:	4b43      	ldr	r3, [pc, #268]	@ (800a164 <HW_TS_Init+0x198>)
 800a058:	881b      	ldrh	r3, [r3, #0]
 800a05a:	3b01      	subs	r3, #1
 800a05c:	4a40      	ldr	r2, [pc, #256]	@ (800a160 <HW_TS_Init+0x194>)
 800a05e:	7812      	ldrb	r2, [r2, #0]
 800a060:	fb02 f303 	mul.w	r3, r2, r3
 800a064:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800a068:	4a3c      	ldr	r2, [pc, #240]	@ (800a15c <HW_TS_Init+0x190>)
 800a06a:	7812      	ldrb	r2, [r2, #0]
 800a06c:	40d3      	lsrs	r3, r2
 800a06e:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 800a070:	69bb      	ldr	r3, [r7, #24]
 800a072:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a076:	4293      	cmp	r3, r2
 800a078:	d904      	bls.n	800a084 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800a07a:	4b3b      	ldr	r3, [pc, #236]	@ (800a168 <HW_TS_Init+0x19c>)
 800a07c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a080:	801a      	strh	r2, [r3, #0]
 800a082:	e003      	b.n	800a08c <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800a084:	69bb      	ldr	r3, [r7, #24]
 800a086:	b29a      	uxth	r2, r3
 800a088:	4b37      	ldr	r3, [pc, #220]	@ (800a168 <HW_TS_Init+0x19c>)
 800a08a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800a08c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800a090:	f7ff fb9c 	bl	80097cc <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800a094:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800a098:	f7ff fb84 	bl	80097a4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800a09c:	79fb      	ldrb	r3, [r7, #7]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d13d      	bne.n	800a11e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800a0a2:	4b32      	ldr	r3, [pc, #200]	@ (800a16c <HW_TS_Init+0x1a0>)
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800a0a8:	4b31      	ldr	r3, [pc, #196]	@ (800a170 <HW_TS_Init+0x1a4>)
 800a0aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ae:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	77fb      	strb	r3, [r7, #31]
 800a0b4:	e00c      	b.n	800a0d0 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800a0b6:	7ffa      	ldrb	r2, [r7, #31]
 800a0b8:	492e      	ldr	r1, [pc, #184]	@ (800a174 <HW_TS_Init+0x1a8>)
 800a0ba:	4613      	mov	r3, r2
 800a0bc:	005b      	lsls	r3, r3, #1
 800a0be:	4413      	add	r3, r2
 800a0c0:	00db      	lsls	r3, r3, #3
 800a0c2:	440b      	add	r3, r1
 800a0c4:	330c      	adds	r3, #12
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800a0ca:	7ffb      	ldrb	r3, [r7, #31]
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	77fb      	strb	r3, [r7, #31]
 800a0d0:	7ffb      	ldrb	r3, [r7, #31]
 800a0d2:	2b05      	cmp	r3, #5
 800a0d4:	d9ef      	bls.n	800a0b6 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800a0d6:	4b28      	ldr	r3, [pc, #160]	@ (800a178 <HW_TS_Init+0x1ac>)
 800a0d8:	2206      	movs	r2, #6
 800a0da:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 800a0dc:	4b1d      	ldr	r3, [pc, #116]	@ (800a154 <HW_TS_Init+0x188>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	689a      	ldr	r2, [r3, #8]
 800a0e2:	4b1c      	ldr	r3, [pc, #112]	@ (800a154 <HW_TS_Init+0x188>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a0ea:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800a0ec:	4b19      	ldr	r3, [pc, #100]	@ (800a154 <HW_TS_Init+0x188>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	b2da      	uxtb	r2, r3
 800a0f4:	4b17      	ldr	r3, [pc, #92]	@ (800a154 <HW_TS_Init+0x188>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800a0fc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800a0fe:	4b1f      	ldr	r3, [pc, #124]	@ (800a17c <HW_TS_Init+0x1b0>)
 800a100:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800a104:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800a106:	2003      	movs	r0, #3
 800a108:	f006 ffa5 	bl	8011056 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800a10c:	4b11      	ldr	r3, [pc, #68]	@ (800a154 <HW_TS_Init+0x188>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	689a      	ldr	r2, [r3, #8]
 800a112:	4b10      	ldr	r3, [pc, #64]	@ (800a154 <HW_TS_Init+0x188>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a11a:	609a      	str	r2, [r3, #8]
 800a11c:	e009      	b.n	800a132 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800a11e:	4b0d      	ldr	r3, [pc, #52]	@ (800a154 <HW_TS_Init+0x188>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	68db      	ldr	r3, [r3, #12]
 800a124:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d002      	beq.n	800a132 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800a12c:	2003      	movs	r0, #3
 800a12e:	f006 ff84 	bl	801103a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800a132:	4b08      	ldr	r3, [pc, #32]	@ (800a154 <HW_TS_Init+0x188>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	22ff      	movs	r2, #255	@ 0xff
 800a138:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800a13a:	2200      	movs	r2, #0
 800a13c:	2103      	movs	r1, #3
 800a13e:	2003      	movs	r0, #3
 800a140:	f006 ff39 	bl	8010fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800a144:	2003      	movs	r0, #3
 800a146:	f006 ff50 	bl	8010fea <HAL_NVIC_EnableIRQ>

  return;
 800a14a:	bf00      	nop
}
 800a14c:	3720      	adds	r7, #32
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
 800a152:	bf00      	nop
 800a154:	20000564 	.word	0x20000564
 800a158:	40002800 	.word	0x40002800
 800a15c:	20000459 	.word	0x20000459
 800a160:	2000045a 	.word	0x2000045a
 800a164:	2000045c 	.word	0x2000045c
 800a168:	2000045e 	.word	0x2000045e
 800a16c:	20000458 	.word	0x20000458
 800a170:	20000454 	.word	0x20000454
 800a174:	200003c0 	.word	0x200003c0
 800a178:	20000450 	.word	0x20000450
 800a17c:	58000800 	.word	0x58000800

0800a180 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 800a180:	b480      	push	{r7}
 800a182:	b08b      	sub	sp, #44	@ 0x2c
 800a184:	af00      	add	r7, sp, #0
 800a186:	60f8      	str	r0, [r7, #12]
 800a188:	60b9      	str	r1, [r7, #8]
 800a18a:	603b      	str	r3, [r7, #0]
 800a18c:	4613      	mov	r3, r2
 800a18e:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 800a190:	2300      	movs	r3, #0
 800a192:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a196:	f3ef 8310 	mrs	r3, PRIMASK
 800a19a:	61fb      	str	r3, [r7, #28]
  return(result);
 800a19c:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a19e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1a0:	b672      	cpsid	i
}
 800a1a2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800a1a4:	e004      	b.n	800a1b0 <HW_TS_Create+0x30>
  {
    loop++;
 800a1a6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800a1b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a1b4:	2b05      	cmp	r3, #5
 800a1b6:	d80c      	bhi.n	800a1d2 <HW_TS_Create+0x52>
 800a1b8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a1bc:	492c      	ldr	r1, [pc, #176]	@ (800a270 <HW_TS_Create+0xf0>)
 800a1be:	4613      	mov	r3, r2
 800a1c0:	005b      	lsls	r3, r3, #1
 800a1c2:	4413      	add	r3, r2
 800a1c4:	00db      	lsls	r3, r3, #3
 800a1c6:	440b      	add	r3, r1
 800a1c8:	330c      	adds	r3, #12
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	b2db      	uxtb	r3, r3
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d1e9      	bne.n	800a1a6 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800a1d2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a1d6:	2b06      	cmp	r3, #6
 800a1d8:	d038      	beq.n	800a24c <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800a1da:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a1de:	4924      	ldr	r1, [pc, #144]	@ (800a270 <HW_TS_Create+0xf0>)
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	005b      	lsls	r3, r3, #1
 800a1e4:	4413      	add	r3, r2
 800a1e6:	00db      	lsls	r3, r3, #3
 800a1e8:	440b      	add	r3, r1
 800a1ea:	330c      	adds	r3, #12
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	701a      	strb	r2, [r3, #0]
 800a1f0:	6a3b      	ldr	r3, [r7, #32]
 800a1f2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1f4:	69bb      	ldr	r3, [r7, #24]
 800a1f6:	f383 8810 	msr	PRIMASK, r3
}
 800a1fa:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 800a1fc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a200:	491b      	ldr	r1, [pc, #108]	@ (800a270 <HW_TS_Create+0xf0>)
 800a202:	4613      	mov	r3, r2
 800a204:	005b      	lsls	r3, r3, #1
 800a206:	4413      	add	r3, r2
 800a208:	00db      	lsls	r3, r3, #3
 800a20a:	440b      	add	r3, r1
 800a20c:	3310      	adds	r3, #16
 800a20e:	68fa      	ldr	r2, [r7, #12]
 800a210:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800a212:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a216:	4916      	ldr	r1, [pc, #88]	@ (800a270 <HW_TS_Create+0xf0>)
 800a218:	4613      	mov	r3, r2
 800a21a:	005b      	lsls	r3, r3, #1
 800a21c:	4413      	add	r3, r2
 800a21e:	00db      	lsls	r3, r3, #3
 800a220:	440b      	add	r3, r1
 800a222:	330d      	adds	r3, #13
 800a224:	79fa      	ldrb	r2, [r7, #7]
 800a226:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 800a228:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a22c:	4910      	ldr	r1, [pc, #64]	@ (800a270 <HW_TS_Create+0xf0>)
 800a22e:	4613      	mov	r3, r2
 800a230:	005b      	lsls	r3, r3, #1
 800a232:	4413      	add	r3, r2
 800a234:	00db      	lsls	r3, r3, #3
 800a236:	440b      	add	r3, r1
 800a238:	683a      	ldr	r2, [r7, #0]
 800a23a:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a242:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 800a244:	2300      	movs	r3, #0
 800a246:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a24a:	e008      	b.n	800a25e <HW_TS_Create+0xde>
 800a24c:	6a3b      	ldr	r3, [r7, #32]
 800a24e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	f383 8810 	msr	PRIMASK, r3
}
 800a256:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 800a258:	2301      	movs	r3, #1
 800a25a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return(localreturnstatus);
 800a25e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a262:	4618      	mov	r0, r3
 800a264:	372c      	adds	r7, #44	@ 0x2c
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr
 800a26e:	bf00      	nop
 800a270:	200003c0 	.word	0x200003c0

0800a274 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b086      	sub	sp, #24
 800a278:	af00      	add	r7, sp, #0
 800a27a:	4603      	mov	r3, r0
 800a27c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a27e:	f3ef 8310 	mrs	r3, PRIMASK
 800a282:	60fb      	str	r3, [r7, #12]
  return(result);
 800a284:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a286:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a288:	b672      	cpsid	i
}
 800a28a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800a28c:	2003      	movs	r0, #3
 800a28e:	f006 feba 	bl	8011006 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800a292:	4b34      	ldr	r3, [pc, #208]	@ (800a364 <HW_TS_Stop+0xf0>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	22ca      	movs	r2, #202	@ 0xca
 800a298:	625a      	str	r2, [r3, #36]	@ 0x24
 800a29a:	4b32      	ldr	r3, [pc, #200]	@ (800a364 <HW_TS_Stop+0xf0>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	2253      	movs	r2, #83	@ 0x53
 800a2a0:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800a2a2:	79fa      	ldrb	r2, [r7, #7]
 800a2a4:	4930      	ldr	r1, [pc, #192]	@ (800a368 <HW_TS_Stop+0xf4>)
 800a2a6:	4613      	mov	r3, r2
 800a2a8:	005b      	lsls	r3, r3, #1
 800a2aa:	4413      	add	r3, r2
 800a2ac:	00db      	lsls	r3, r3, #3
 800a2ae:	440b      	add	r3, r1
 800a2b0:	330c      	adds	r3, #12
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	2b02      	cmp	r3, #2
 800a2b8:	d142      	bne.n	800a340 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800a2ba:	79fb      	ldrb	r3, [r7, #7]
 800a2bc:	2100      	movs	r1, #0
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f7ff fc06 	bl	8009ad0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800a2c4:	4b29      	ldr	r3, [pc, #164]	@ (800a36c <HW_TS_Stop+0xf8>)
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800a2ca:	7cfb      	ldrb	r3, [r7, #19]
 800a2cc:	2b06      	cmp	r3, #6
 800a2ce:	d12f      	bne.n	800a330 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800a2d0:	4b27      	ldr	r3, [pc, #156]	@ (800a370 <HW_TS_Stop+0xfc>)
 800a2d2:	689b      	ldr	r3, [r3, #8]
 800a2d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a2d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a2dc:	d107      	bne.n	800a2ee <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800a2de:	bf00      	nop
 800a2e0:	4b20      	ldr	r3, [pc, #128]	@ (800a364 <HW_TS_Stop+0xf0>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	68db      	ldr	r3, [r3, #12]
 800a2e6:	f003 0304 	and.w	r3, r3, #4
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d1f8      	bne.n	800a2e0 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800a2ee:	4b1d      	ldr	r3, [pc, #116]	@ (800a364 <HW_TS_Stop+0xf0>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	689a      	ldr	r2, [r3, #8]
 800a2f4:	4b1b      	ldr	r3, [pc, #108]	@ (800a364 <HW_TS_Stop+0xf0>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a2fc:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800a2fe:	bf00      	nop
 800a300:	4b18      	ldr	r3, [pc, #96]	@ (800a364 <HW_TS_Stop+0xf0>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	68db      	ldr	r3, [r3, #12]
 800a306:	f003 0304 	and.w	r3, r3, #4
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d0f8      	beq.n	800a300 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800a30e:	4b15      	ldr	r3, [pc, #84]	@ (800a364 <HW_TS_Stop+0xf0>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	68db      	ldr	r3, [r3, #12]
 800a314:	b2da      	uxtb	r2, r3
 800a316:	4b13      	ldr	r3, [pc, #76]	@ (800a364 <HW_TS_Stop+0xf0>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800a31e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800a320:	4b14      	ldr	r3, [pc, #80]	@ (800a374 <HW_TS_Stop+0x100>)
 800a322:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800a326:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800a328:	2003      	movs	r0, #3
 800a32a:	f006 fe94 	bl	8011056 <HAL_NVIC_ClearPendingIRQ>
 800a32e:	e007      	b.n	800a340 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800a330:	4b11      	ldr	r3, [pc, #68]	@ (800a378 <HW_TS_Stop+0x104>)
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	b2db      	uxtb	r3, r3
 800a336:	7cfa      	ldrb	r2, [r7, #19]
 800a338:	429a      	cmp	r2, r3
 800a33a:	d001      	beq.n	800a340 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 800a33c:	f7ff fce4 	bl	8009d08 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800a340:	4b08      	ldr	r3, [pc, #32]	@ (800a364 <HW_TS_Stop+0xf0>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	22ff      	movs	r2, #255	@ 0xff
 800a346:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800a348:	2003      	movs	r0, #3
 800a34a:	f006 fe4e 	bl	8010fea <HAL_NVIC_EnableIRQ>
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	f383 8810 	msr	PRIMASK, r3
}
 800a358:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800a35a:	bf00      	nop
}
 800a35c:	3718      	adds	r7, #24
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	20000564 	.word	0x20000564
 800a368:	200003c0 	.word	0x200003c0
 800a36c:	20000450 	.word	0x20000450
 800a370:	40002800 	.word	0x40002800
 800a374:	58000800 	.word	0x58000800
 800a378:	20000451 	.word	0x20000451

0800a37c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b086      	sub	sp, #24
 800a380:	af00      	add	r7, sp, #0
 800a382:	4603      	mov	r3, r0
 800a384:	6039      	str	r1, [r7, #0]
 800a386:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800a388:	79fa      	ldrb	r2, [r7, #7]
 800a38a:	493b      	ldr	r1, [pc, #236]	@ (800a478 <HW_TS_Start+0xfc>)
 800a38c:	4613      	mov	r3, r2
 800a38e:	005b      	lsls	r3, r3, #1
 800a390:	4413      	add	r3, r2
 800a392:	00db      	lsls	r3, r3, #3
 800a394:	440b      	add	r3, r1
 800a396:	330c      	adds	r3, #12
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	b2db      	uxtb	r3, r3
 800a39c:	2b02      	cmp	r3, #2
 800a39e:	d103      	bne.n	800a3a8 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 800a3a0:	79fb      	ldrb	r3, [r7, #7]
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f7ff ff66 	bl	800a274 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3a8:	f3ef 8310 	mrs	r3, PRIMASK
 800a3ac:	60fb      	str	r3, [r7, #12]
  return(result);
 800a3ae:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a3b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a3b2:	b672      	cpsid	i
}
 800a3b4:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800a3b6:	2003      	movs	r0, #3
 800a3b8:	f006 fe25 	bl	8011006 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800a3bc:	4b2f      	ldr	r3, [pc, #188]	@ (800a47c <HW_TS_Start+0x100>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	22ca      	movs	r2, #202	@ 0xca
 800a3c2:	625a      	str	r2, [r3, #36]	@ 0x24
 800a3c4:	4b2d      	ldr	r3, [pc, #180]	@ (800a47c <HW_TS_Start+0x100>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2253      	movs	r2, #83	@ 0x53
 800a3ca:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800a3cc:	79fa      	ldrb	r2, [r7, #7]
 800a3ce:	492a      	ldr	r1, [pc, #168]	@ (800a478 <HW_TS_Start+0xfc>)
 800a3d0:	4613      	mov	r3, r2
 800a3d2:	005b      	lsls	r3, r3, #1
 800a3d4:	4413      	add	r3, r2
 800a3d6:	00db      	lsls	r3, r3, #3
 800a3d8:	440b      	add	r3, r1
 800a3da:	330c      	adds	r3, #12
 800a3dc:	2202      	movs	r2, #2
 800a3de:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800a3e0:	79fa      	ldrb	r2, [r7, #7]
 800a3e2:	4925      	ldr	r1, [pc, #148]	@ (800a478 <HW_TS_Start+0xfc>)
 800a3e4:	4613      	mov	r3, r2
 800a3e6:	005b      	lsls	r3, r3, #1
 800a3e8:	4413      	add	r3, r2
 800a3ea:	00db      	lsls	r3, r3, #3
 800a3ec:	440b      	add	r3, r1
 800a3ee:	3308      	adds	r3, #8
 800a3f0:	683a      	ldr	r2, [r7, #0]
 800a3f2:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800a3f4:	79fa      	ldrb	r2, [r7, #7]
 800a3f6:	4920      	ldr	r1, [pc, #128]	@ (800a478 <HW_TS_Start+0xfc>)
 800a3f8:	4613      	mov	r3, r2
 800a3fa:	005b      	lsls	r3, r3, #1
 800a3fc:	4413      	add	r3, r2
 800a3fe:	00db      	lsls	r3, r3, #3
 800a400:	440b      	add	r3, r1
 800a402:	3304      	adds	r3, #4
 800a404:	683a      	ldr	r2, [r7, #0]
 800a406:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800a408:	79fb      	ldrb	r3, [r7, #7]
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7ff fab6 	bl	800997c <linkTimer>
 800a410:	4603      	mov	r3, r0
 800a412:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800a414:	4b1a      	ldr	r3, [pc, #104]	@ (800a480 <HW_TS_Start+0x104>)
 800a416:	781b      	ldrb	r3, [r3, #0]
 800a418:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800a41a:	4b1a      	ldr	r3, [pc, #104]	@ (800a484 <HW_TS_Start+0x108>)
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	7c7a      	ldrb	r2, [r7, #17]
 800a422:	429a      	cmp	r2, r3
 800a424:	d002      	beq.n	800a42c <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800a426:	f7ff fc6f 	bl	8009d08 <RescheduleTimerList>
 800a42a:	e013      	b.n	800a454 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800a42c:	79fa      	ldrb	r2, [r7, #7]
 800a42e:	4912      	ldr	r1, [pc, #72]	@ (800a478 <HW_TS_Start+0xfc>)
 800a430:	4613      	mov	r3, r2
 800a432:	005b      	lsls	r3, r3, #1
 800a434:	4413      	add	r3, r2
 800a436:	00db      	lsls	r3, r3, #3
 800a438:	440b      	add	r3, r1
 800a43a:	3308      	adds	r3, #8
 800a43c:	6819      	ldr	r1, [r3, #0]
 800a43e:	8a7b      	ldrh	r3, [r7, #18]
 800a440:	79fa      	ldrb	r2, [r7, #7]
 800a442:	1ac9      	subs	r1, r1, r3
 800a444:	480c      	ldr	r0, [pc, #48]	@ (800a478 <HW_TS_Start+0xfc>)
 800a446:	4613      	mov	r3, r2
 800a448:	005b      	lsls	r3, r3, #1
 800a44a:	4413      	add	r3, r2
 800a44c:	00db      	lsls	r3, r3, #3
 800a44e:	4403      	add	r3, r0
 800a450:	3308      	adds	r3, #8
 800a452:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800a454:	4b09      	ldr	r3, [pc, #36]	@ (800a47c <HW_TS_Start+0x100>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	22ff      	movs	r2, #255	@ 0xff
 800a45a:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800a45c:	2003      	movs	r0, #3
 800a45e:	f006 fdc4 	bl	8010fea <HAL_NVIC_EnableIRQ>
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	f383 8810 	msr	PRIMASK, r3
}
 800a46c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800a46e:	bf00      	nop
}
 800a470:	3718      	adds	r7, #24
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	200003c0 	.word	0x200003c0
 800a47c:	20000564 	.word	0x20000564
 800a480:	20000450 	.word	0x20000450
 800a484:	20000451 	.word	0x20000451

0800a488 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	460b      	mov	r3, r1
 800a492:	607a      	str	r2, [r7, #4]
 800a494:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	4798      	blx	r3

  return;
 800a49a:	bf00      	nop
}
 800a49c:	3710      	adds	r7, #16
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}

0800a4a2 <LL_AHB2_GRP1_EnableClock>:
{
 800a4a2:	b480      	push	{r7}
 800a4a4:	b085      	sub	sp, #20
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800a4aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a4ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a4b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800a4ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a4be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	4013      	ands	r3, r2
 800a4c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
}
 800a4c8:	bf00      	nop
 800a4ca:	3714      	adds	r7, #20
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr

0800a4d4 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b085      	sub	sp, #20
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800a4dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a4e0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a4e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800a4ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a4f0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	4013      	ands	r3, r2
 800a4f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
}
 800a4fa:	bf00      	nop
 800a4fc:	3714      	adds	r7, #20
 800a4fe:	46bd      	mov	sp, r7
 800a500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a504:	4770      	bx	lr
	...

0800a508 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800a50c:	4b1b      	ldr	r3, [pc, #108]	@ (800a57c <MX_I2C3_Init+0x74>)
 800a50e:	4a1c      	ldr	r2, [pc, #112]	@ (800a580 <MX_I2C3_Init+0x78>)
 800a510:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10707DBC;
 800a512:	4b1a      	ldr	r3, [pc, #104]	@ (800a57c <MX_I2C3_Init+0x74>)
 800a514:	4a1b      	ldr	r2, [pc, #108]	@ (800a584 <MX_I2C3_Init+0x7c>)
 800a516:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800a518:	4b18      	ldr	r3, [pc, #96]	@ (800a57c <MX_I2C3_Init+0x74>)
 800a51a:	2200      	movs	r2, #0
 800a51c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a51e:	4b17      	ldr	r3, [pc, #92]	@ (800a57c <MX_I2C3_Init+0x74>)
 800a520:	2201      	movs	r2, #1
 800a522:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a524:	4b15      	ldr	r3, [pc, #84]	@ (800a57c <MX_I2C3_Init+0x74>)
 800a526:	2200      	movs	r2, #0
 800a528:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800a52a:	4b14      	ldr	r3, [pc, #80]	@ (800a57c <MX_I2C3_Init+0x74>)
 800a52c:	2200      	movs	r2, #0
 800a52e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a530:	4b12      	ldr	r3, [pc, #72]	@ (800a57c <MX_I2C3_Init+0x74>)
 800a532:	2200      	movs	r2, #0
 800a534:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a536:	4b11      	ldr	r3, [pc, #68]	@ (800a57c <MX_I2C3_Init+0x74>)
 800a538:	2200      	movs	r2, #0
 800a53a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a53c:	4b0f      	ldr	r3, [pc, #60]	@ (800a57c <MX_I2C3_Init+0x74>)
 800a53e:	2200      	movs	r2, #0
 800a540:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800a542:	480e      	ldr	r0, [pc, #56]	@ (800a57c <MX_I2C3_Init+0x74>)
 800a544:	f007 fb82 	bl	8011c4c <HAL_I2C_Init>
 800a548:	4603      	mov	r3, r0
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d001      	beq.n	800a552 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800a54e:	f000 fa1d 	bl	800a98c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a552:	2100      	movs	r1, #0
 800a554:	4809      	ldr	r0, [pc, #36]	@ (800a57c <MX_I2C3_Init+0x74>)
 800a556:	f008 f905 	bl	8012764 <HAL_I2CEx_ConfigAnalogFilter>
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d001      	beq.n	800a564 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800a560:	f000 fa14 	bl	800a98c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800a564:	2100      	movs	r1, #0
 800a566:	4805      	ldr	r0, [pc, #20]	@ (800a57c <MX_I2C3_Init+0x74>)
 800a568:	f008 f947 	bl	80127fa <HAL_I2CEx_ConfigDigitalFilter>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d001      	beq.n	800a576 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800a572:	f000 fa0b 	bl	800a98c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800a576:	bf00      	nop
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	bf00      	nop
 800a57c:	20000460 	.word	0x20000460
 800a580:	40005c00 	.word	0x40005c00
 800a584:	10707dbc 	.word	0x10707dbc

0800a588 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b09c      	sub	sp, #112	@ 0x70
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a590:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800a594:	2200      	movs	r2, #0
 800a596:	601a      	str	r2, [r3, #0]
 800a598:	605a      	str	r2, [r3, #4]
 800a59a:	609a      	str	r2, [r3, #8]
 800a59c:	60da      	str	r2, [r3, #12]
 800a59e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a5a0:	f107 030c 	add.w	r3, r7, #12
 800a5a4:	2250      	movs	r2, #80	@ 0x50
 800a5a6:	2100      	movs	r1, #0
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f00f fe41 	bl	801a230 <memset>
  if(i2cHandle->Instance==I2C3)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	4a16      	ldr	r2, [pc, #88]	@ (800a60c <HAL_I2C_MspInit+0x84>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d125      	bne.n	800a604 <HAL_I2C_MspInit+0x7c>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800a5b8:	2308      	movs	r3, #8
 800a5ba:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_SYSCLK;
 800a5bc:	4b14      	ldr	r3, [pc, #80]	@ (800a610 <HAL_I2C_MspInit+0x88>)
 800a5be:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a5c0:	f107 030c 	add.w	r3, r7, #12
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f00a fbbe 	bl	8014d46 <HAL_RCCEx_PeriphCLKConfig>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d001      	beq.n	800a5d4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800a5d0:	f000 f9dc 	bl	800a98c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a5d4:	2002      	movs	r0, #2
 800a5d6:	f7ff ff64 	bl	800a4a2 <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration
    PB13     ------> I2C3_SCL
    PB14     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800a5da:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800a5de:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a5e0:	2312      	movs	r3, #18
 800a5e2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800a5ec:	2304      	movs	r3, #4
 800a5ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a5f0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800a5f4:	4619      	mov	r1, r3
 800a5f6:	4807      	ldr	r0, [pc, #28]	@ (800a614 <HAL_I2C_MspInit+0x8c>)
 800a5f8:	f007 f86e 	bl	80116d8 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800a5fc:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800a600:	f7ff ff68 	bl	800a4d4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800a604:	bf00      	nop
 800a606:	3770      	adds	r7, #112	@ 0x70
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}
 800a60c:	40005c00 	.word	0x40005c00
 800a610:	00301000 	.word	0x00301000
 800a614:	48000400 	.word	0x48000400

0800a618 <LL_AHB3_GRP1_EnableClock>:
{
 800a618:	b480      	push	{r7}
 800a61a:	b085      	sub	sp, #20
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800a620:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a624:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a626:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	4313      	orrs	r3, r2
 800a62e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800a630:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a634:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	4013      	ands	r3, r2
 800a63a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a63c:	68fb      	ldr	r3, [r7, #12]
}
 800a63e:	bf00      	nop
 800a640:	3714      	adds	r7, #20
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr
	...

0800a64c <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 800a650:	4b06      	ldr	r3, [pc, #24]	@ (800a66c <MX_IPCC_Init+0x20>)
 800a652:	4a07      	ldr	r2, [pc, #28]	@ (800a670 <MX_IPCC_Init+0x24>)
 800a654:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800a656:	4805      	ldr	r0, [pc, #20]	@ (800a66c <MX_IPCC_Init+0x20>)
 800a658:	f008 f91c 	bl	8012894 <HAL_IPCC_Init>
 800a65c:	4603      	mov	r3, r0
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d001      	beq.n	800a666 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800a662:	f000 f993 	bl	800a98c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800a666:	bf00      	nop
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop
 800a66c:	200004b4 	.word	0x200004b4
 800a670:	58000c00 	.word	0x58000c00

0800a674 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b082      	sub	sp, #8
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4a0d      	ldr	r2, [pc, #52]	@ (800a6b8 <HAL_IPCC_MspInit+0x44>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d113      	bne.n	800a6ae <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800a686:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800a68a:	f7ff ffc5 	bl	800a618 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800a68e:	2200      	movs	r2, #0
 800a690:	2100      	movs	r1, #0
 800a692:	202c      	movs	r0, #44	@ 0x2c
 800a694:	f006 fc8f 	bl	8010fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800a698:	202c      	movs	r0, #44	@ 0x2c
 800a69a:	f006 fca6 	bl	8010fea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800a69e:	2200      	movs	r2, #0
 800a6a0:	2100      	movs	r1, #0
 800a6a2:	202d      	movs	r0, #45	@ 0x2d
 800a6a4:	f006 fc87 	bl	8010fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800a6a8:	202d      	movs	r0, #45	@ 0x2d
 800a6aa:	f006 fc9e 	bl	8010fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 800a6ae:	bf00      	nop
 800a6b0:	3708      	adds	r7, #8
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	bf00      	nop
 800a6b8:	58000c00 	.word	0x58000c00

0800a6bc <LL_RCC_LSE_SetDriveCapability>:
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800a6c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a6c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6cc:	f023 0218 	bic.w	r2, r3, #24
 800a6d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800a6dc:	bf00      	nop
 800a6de:	370c      	adds	r7, #12
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr

0800a6e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b08c      	sub	sp, #48	@ 0x30
 800a6ec:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a6ee:	f004 ff91 	bl	800f614 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 800a6f2:	f7fe f92f 	bl	8008954 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a6f6:	f000 f887 	bl	800a808 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800a6fa:	f000 f8f7 	bl	800a8ec <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 800a6fe:	f7ff ffa5 	bl	800a64c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a702:	f7fe ffe9 	bl	80096d8 <MX_GPIO_Init>
  MX_DMA_Init();
 800a706:	f7fe fb15 	bl	8008d34 <MX_DMA_Init>
  MX_ADC1_Init();
 800a70a:	f7fd fe97 	bl	800843c <MX_ADC1_Init>
  MX_I2C3_Init();
 800a70e:	f7ff fefb 	bl	800a508 <MX_I2C3_Init>
  MX_QUADSPI_Init();
 800a712:	f001 fa01 	bl	800bb18 <MX_QUADSPI_Init>
  MX_RTC_Init();
 800a716:	f001 fae1 	bl	800bcdc <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 800a71a:	f001 fea3 	bl	800c464 <MX_LPUART1_UART_Init>
  MX_RF_Init();
 800a71e:	f001 faab 	bl	800bc78 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  UV_init();
 800a722:	f7fd fddb 	bl	80082dc <UV_init>
  FL_QUADSPI_Init();
 800a726:	f7fe fb69 	bl	8008dfc <FL_QUADSPI_Init>
  mlx90632_init();
 800a72a:	f000 fd89 	bl	800b240 <mlx90632_init>
  mlx90632_read_eeprom(&PR, &PG, &PO, &PT, &Ea, &Eb, &Fa, &Fb, &Ga, &Gb, &Ha, &Hb, &Ka);
 800a72e:	4b26      	ldr	r3, [pc, #152]	@ (800a7c8 <main+0xe0>)
 800a730:	9308      	str	r3, [sp, #32]
 800a732:	4b26      	ldr	r3, [pc, #152]	@ (800a7cc <main+0xe4>)
 800a734:	9307      	str	r3, [sp, #28]
 800a736:	4b26      	ldr	r3, [pc, #152]	@ (800a7d0 <main+0xe8>)
 800a738:	9306      	str	r3, [sp, #24]
 800a73a:	4b26      	ldr	r3, [pc, #152]	@ (800a7d4 <main+0xec>)
 800a73c:	9305      	str	r3, [sp, #20]
 800a73e:	4b26      	ldr	r3, [pc, #152]	@ (800a7d8 <main+0xf0>)
 800a740:	9304      	str	r3, [sp, #16]
 800a742:	4b26      	ldr	r3, [pc, #152]	@ (800a7dc <main+0xf4>)
 800a744:	9303      	str	r3, [sp, #12]
 800a746:	4b26      	ldr	r3, [pc, #152]	@ (800a7e0 <main+0xf8>)
 800a748:	9302      	str	r3, [sp, #8]
 800a74a:	4b26      	ldr	r3, [pc, #152]	@ (800a7e4 <main+0xfc>)
 800a74c:	9301      	str	r3, [sp, #4]
 800a74e:	4b26      	ldr	r3, [pc, #152]	@ (800a7e8 <main+0x100>)
 800a750:	9300      	str	r3, [sp, #0]
 800a752:	4b26      	ldr	r3, [pc, #152]	@ (800a7ec <main+0x104>)
 800a754:	4a26      	ldr	r2, [pc, #152]	@ (800a7f0 <main+0x108>)
 800a756:	4927      	ldr	r1, [pc, #156]	@ (800a7f4 <main+0x10c>)
 800a758:	4827      	ldr	r0, [pc, #156]	@ (800a7f8 <main+0x110>)
 800a75a:	f000 fec8 	bl	800b4ee <mlx90632_read_eeprom>

  mlx90632_set_meas_type(MLX90632_MTYP_MEDICAL_BURST);
 800a75e:	2080      	movs	r0, #128	@ 0x80
 800a760:	f001 f8d0 	bl	800b904 <mlx90632_set_meas_type>
  mlx90632_set_emissivity(1.00);
 800a764:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800a7c0 <main+0xd8>
 800a768:	f000 fcc0 	bl	800b0ec <mlx90632_set_emissivity>

  if (mlx90632_get_meas_type() != MLX90632_MTYP_MEDICAL_BURST){
 800a76c:	f001 f950 	bl	800ba10 <mlx90632_get_meas_type>
 800a770:	4603      	mov	r3, r0
 800a772:	2b80      	cmp	r3, #128	@ 0x80
 800a774:	d002      	beq.n	800a77c <main+0x94>
	  mlx90632_set_meas_type(MLX90632_MTYP_MEDICAL_BURST);}
 800a776:	2080      	movs	r0, #128	@ 0x80
 800a778:	f001 f8c4 	bl	800b904 <mlx90632_set_meas_type>

  HAL_Delay(10);
 800a77c:	200a      	movs	r0, #10
 800a77e:	f7fe fa5e 	bl	8008c3e <HAL_Delay>

  AccelInit();
 800a782:	f7fd fc0f 	bl	8007fa4 <AccelInit>

  EOC_v=HAL_GPIO_ReadPin(GPIOC,EOC_Pin);
 800a786:	2140      	movs	r1, #64	@ 0x40
 800a788:	481c      	ldr	r0, [pc, #112]	@ (800a7fc <main+0x114>)
 800a78a:	f007 f9f3 	bl	8011b74 <HAL_GPIO_ReadPin>
 800a78e:	4603      	mov	r3, r0
 800a790:	461a      	mov	r2, r3
 800a792:	4b1b      	ldr	r3, [pc, #108]	@ (800a800 <main+0x118>)
 800a794:	701a      	strb	r2, [r3, #0]
  PWR_GD=HAL_GPIO_ReadPin(GPIOC,PWR_Pin);
 800a796:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a79a:	4818      	ldr	r0, [pc, #96]	@ (800a7fc <main+0x114>)
 800a79c:	f007 f9ea 	bl	8011b74 <HAL_GPIO_ReadPin>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	4b17      	ldr	r3, [pc, #92]	@ (800a804 <main+0x11c>)
 800a7a6:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOA,TS_Pin,GPIO_PIN_SET);
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a7ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a7b2:	f007 f9f7 	bl	8011ba4 <HAL_GPIO_WritePin>
//	printf("data2 %d %d %d %d \n",opmod[0],opmod[1],opmod[2],opmod[3]);
//  }
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 800a7b6:	f7fe f8db 	bl	8008970 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 800a7ba:	f7fe fa65 	bl	8008c88 <MX_APPE_Process>
 800a7be:	e7fc      	b.n	800a7ba <main+0xd2>
 800a7c0:	00000000 	.word	0x00000000
 800a7c4:	3ff00000 	.word	0x3ff00000
 800a7c8:	20000030 	.word	0x20000030
 800a7cc:	200004f2 	.word	0x200004f2
 800a7d0:	2000002c 	.word	0x2000002c
 800a7d4:	2000002e 	.word	0x2000002e
 800a7d8:	20000028 	.word	0x20000028
 800a7dc:	20000024 	.word	0x20000024
 800a7e0:	20000020 	.word	0x20000020
 800a7e4:	2000001c 	.word	0x2000001c
 800a7e8:	20000018 	.word	0x20000018
 800a7ec:	20000010 	.word	0x20000010
 800a7f0:	20000014 	.word	0x20000014
 800a7f4:	2000000c 	.word	0x2000000c
 800a7f8:	20000008 	.word	0x20000008
 800a7fc:	48000800 	.word	0x48000800
 800a800:	200004f1 	.word	0x200004f1
 800a804:	200004f0 	.word	0x200004f0

0800a808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b09a      	sub	sp, #104	@ 0x68
 800a80c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a80e:	f107 0320 	add.w	r3, r7, #32
 800a812:	2248      	movs	r2, #72	@ 0x48
 800a814:	2100      	movs	r1, #0
 800a816:	4618      	mov	r0, r3
 800a818:	f00f fd0a 	bl	801a230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a81c:	1d3b      	adds	r3, r7, #4
 800a81e:	2200      	movs	r2, #0
 800a820:	601a      	str	r2, [r3, #0]
 800a822:	605a      	str	r2, [r3, #4]
 800a824:	609a      	str	r2, [r3, #8]
 800a826:	60da      	str	r2, [r3, #12]
 800a828:	611a      	str	r2, [r3, #16]
 800a82a:	615a      	str	r2, [r3, #20]
 800a82c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800a82e:	f008 f8b7 	bl	80129a0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800a832:	2010      	movs	r0, #16
 800a834:	f7ff ff42 	bl	800a6bc <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a838:	4b2b      	ldr	r3, [pc, #172]	@ (800a8e8 <SystemClock_Config+0xe0>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800a840:	4a29      	ldr	r2, [pc, #164]	@ (800a8e8 <SystemClock_Config+0xe0>)
 800a842:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a846:	6013      	str	r3, [r2, #0]
 800a848:	4b27      	ldr	r3, [pc, #156]	@ (800a8e8 <SystemClock_Config+0xe0>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a850:	603b      	str	r3, [r7, #0]
 800a852:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800a854:	2327      	movs	r3, #39	@ 0x27
 800a856:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a858:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a85c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800a85e:	2301      	movs	r3, #1
 800a860:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a862:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a866:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800a868:	2301      	movs	r3, #1
 800a86a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800a86c:	2340      	movs	r3, #64	@ 0x40
 800a86e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800a870:	2300      	movs	r3, #0
 800a872:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800a874:	2360      	movs	r3, #96	@ 0x60
 800a876:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a878:	2302      	movs	r3, #2
 800a87a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800a87c:	2301      	movs	r3, #1
 800a87e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800a880:	2300      	movs	r3, #0
 800a882:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 800a884:	2320      	movs	r3, #32
 800a886:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a888:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a88c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800a88e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800a892:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800a894:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a898:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a89a:	f107 0320 	add.w	r3, r7, #32
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f009 faa0 	bl	8013de4 <HAL_RCC_OscConfig>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d001      	beq.n	800a8ae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800a8aa:	f000 f86f 	bl	800a98c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800a8ae:	236f      	movs	r3, #111	@ 0x6f
 800a8b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a8b2:	2303      	movs	r3, #3
 800a8b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800a8b6:	2380      	movs	r3, #128	@ 0x80
 800a8b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800a8c2:	2380      	movs	r3, #128	@ 0x80
 800a8c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800a8ca:	1d3b      	adds	r3, r7, #4
 800a8cc:	2103      	movs	r1, #3
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f009 fdfc 	bl	80144cc <HAL_RCC_ClockConfig>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d001      	beq.n	800a8de <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800a8da:	f000 f857 	bl	800a98c <Error_Handler>
  }
}
 800a8de:	bf00      	nop
 800a8e0:	3768      	adds	r7, #104	@ 0x68
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	bf00      	nop
 800a8e8:	58000400 	.word	0x58000400

0800a8ec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b094      	sub	sp, #80	@ 0x50
 800a8f0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a8f2:	463b      	mov	r3, r7
 800a8f4:	2250      	movs	r2, #80	@ 0x50
 800a8f6:	2100      	movs	r1, #0
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f00f fc99 	bl	801a230 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800a8fe:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800a902:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 800a904:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a908:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800a90a:	2300      	movs	r3, #0
 800a90c:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800a90e:	2310      	movs	r3, #16
 800a910:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a912:	463b      	mov	r3, r7
 800a914:	4618      	mov	r0, r3
 800a916:	f00a fa16 	bl	8014d46 <HAL_RCCEx_PeriphCLKConfig>
 800a91a:	4603      	mov	r3, r0
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d001      	beq.n	800a924 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800a920:	f000 f834 	bl	800a98c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800a924:	bf00      	nop
 800a926:	3750      	adds	r7, #80	@ 0x50
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 800a934:	1d39      	adds	r1, r7, #4
 800a936:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a93a:	2201      	movs	r2, #1
 800a93c:	4803      	ldr	r0, [pc, #12]	@ (800a94c <__io_putchar+0x20>)
 800a93e:	f00b f90d 	bl	8015b5c <HAL_UART_Transmit>

  return ch;
 800a942:	687b      	ldr	r3, [r7, #4]
}
 800a944:	4618      	mov	r0, r3
 800a946:	3708      	adds	r7, #8
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}
 800a94c:	2000058c 	.word	0x2000058c

0800a950 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 800a956:	2300      	movs	r3, #0
 800a958:	71fb      	strb	r3, [r7, #7]
  /* Place your implementation of fgetc here */

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&hlpuart1);
 800a95a:	4b0b      	ldr	r3, [pc, #44]	@ (800a988 <__io_getchar+0x38>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	2208      	movs	r2, #8
 800a960:	621a      	str	r2, [r3, #32]

  /* Wait for reception of a character on the USART1 RX line
     and echo this character on console */
  HAL_UART_Receive(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 800a962:	1df9      	adds	r1, r7, #7
 800a964:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a968:	2201      	movs	r2, #1
 800a96a:	4807      	ldr	r0, [pc, #28]	@ (800a988 <__io_getchar+0x38>)
 800a96c:	f00b f984 	bl	8015c78 <HAL_UART_Receive>
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 800a970:	1df9      	adds	r1, r7, #7
 800a972:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a976:	2201      	movs	r2, #1
 800a978:	4803      	ldr	r0, [pc, #12]	@ (800a988 <__io_getchar+0x38>)
 800a97a:	f00b f8ef 	bl	8015b5c <HAL_UART_Transmit>
  return ch;
 800a97e:	79fb      	ldrb	r3, [r7, #7]
}
 800a980:	4618      	mov	r0, r3
 800a982:	3708      	adds	r7, #8
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}
 800a988:	2000058c 	.word	0x2000058c

0800a98c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a98c:	b480      	push	{r7}
 800a98e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800a990:	b672      	cpsid	i
}
 800a992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a994:	bf00      	nop
 800a996:	e7fd      	b.n	800a994 <Error_Handler+0x8>

0800a998 <mlx90632_channel_new_select>:
 *
 * @retval 0 When both memory locations are updated as per ret
 * @retval -EINVAL channel_new and channel_old were not updated
 */
STATIC int32_t mlx90632_channel_new_select(int32_t ret, uint8_t *channel_new, uint8_t *channel_old)
{
 800a998:	b480      	push	{r7}
 800a99a:	b085      	sub	sp, #20
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	60f8      	str	r0, [r7, #12]
 800a9a0:	60b9      	str	r1, [r7, #8]
 800a9a2:	607a      	str	r2, [r7, #4]
    switch (ret)
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2b01      	cmp	r3, #1
 800a9a8:	d003      	beq.n	800a9b2 <mlx90632_channel_new_select+0x1a>
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2b02      	cmp	r3, #2
 800a9ae:	d007      	beq.n	800a9c0 <mlx90632_channel_new_select+0x28>
 800a9b0:	e00d      	b.n	800a9ce <mlx90632_channel_new_select+0x36>
    {
        case 1:
            *channel_new = 1;
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	701a      	strb	r2, [r3, #0]
            *channel_old = 2;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2202      	movs	r2, #2
 800a9bc:	701a      	strb	r2, [r3, #0]
            break;
 800a9be:	e009      	b.n	800a9d4 <mlx90632_channel_new_select+0x3c>

        case 2:
            *channel_new = 2;
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	2202      	movs	r2, #2
 800a9c4:	701a      	strb	r2, [r3, #0]
            *channel_old = 1;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	701a      	strb	r2, [r3, #0]
            break;
 800a9cc:	e002      	b.n	800a9d4 <mlx90632_channel_new_select+0x3c>

        default:
            return -EINVAL;
 800a9ce:	f06f 0315 	mvn.w	r3, #21
 800a9d2:	e000      	b.n	800a9d6 <mlx90632_channel_new_select+0x3e>
    }
    return 0;
 800a9d4:	2300      	movs	r3, #0
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3714      	adds	r7, #20
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr

0800a9e2 <mlx90632_read_temp_ambient_raw>:
 *
 * @retval 0 Successfully read both values
 * @retval <0 Something went wrong. Check errno.h for more details.
 */
STATIC int32_t mlx90632_read_temp_ambient_raw(int16_t *ambient_new_raw, int16_t *ambient_old_raw)
{
 800a9e2:	b580      	push	{r7, lr}
 800a9e4:	b084      	sub	sp, #16
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
 800a9ea:	6039      	str	r1, [r7, #0]
    int32_t ret;
    uint16_t read_tmp;

    ret = mlx90632_i2c_read(MLX90632_RAM_3(1), &read_tmp);
 800a9ec:	f107 030a 	add.w	r3, r7, #10
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	f244 0005 	movw	r0, #16389	@ 0x4005
 800a9f6:	f000 fee7 	bl	800b7c8 <mlx90632_i2c_read>
 800a9fa:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	da01      	bge.n	800aa06 <mlx90632_read_temp_ambient_raw+0x24>
        return ret;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	e015      	b.n	800aa32 <mlx90632_read_temp_ambient_raw+0x50>
    *ambient_new_raw = (int16_t)read_tmp;
 800aa06:	897b      	ldrh	r3, [r7, #10]
 800aa08:	b21a      	sxth	r2, r3
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	801a      	strh	r2, [r3, #0]

    ret = mlx90632_i2c_read(MLX90632_RAM_3(2), &read_tmp);
 800aa0e:	f107 030a 	add.w	r3, r7, #10
 800aa12:	4619      	mov	r1, r3
 800aa14:	f244 0008 	movw	r0, #16392	@ 0x4008
 800aa18:	f000 fed6 	bl	800b7c8 <mlx90632_i2c_read>
 800aa1c:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	da01      	bge.n	800aa28 <mlx90632_read_temp_ambient_raw+0x46>
        return ret;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	e004      	b.n	800aa32 <mlx90632_read_temp_ambient_raw+0x50>
    *ambient_old_raw = (int16_t)read_tmp;
 800aa28:	897b      	ldrh	r3, [r7, #10]
 800aa2a:	b21a      	sxth	r2, r3
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	801a      	strh	r2, [r3, #0]

    return ret;
 800aa30:	68fb      	ldr	r3, [r7, #12]
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3710      	adds	r7, #16
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <mlx90632_read_temp_object_raw>:
 * @retval 0 Successfully read both values
 * @retval <0 Something went wrong. Check errno.h for more details.
 */
STATIC int32_t mlx90632_read_temp_object_raw(int32_t start_measurement_ret,
                                             int16_t *object_new_raw, int16_t *object_old_raw)
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b088      	sub	sp, #32
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	60f8      	str	r0, [r7, #12]
 800aa42:	60b9      	str	r1, [r7, #8]
 800aa44:	607a      	str	r2, [r7, #4]
    int32_t ret;
    uint16_t read_tmp;
    int16_t read;
    uint8_t channel, channel_old;

    ret = mlx90632_channel_new_select(start_measurement_ret, &channel, &channel_old);
 800aa46:	f107 0216 	add.w	r2, r7, #22
 800aa4a:	f107 0317 	add.w	r3, r7, #23
 800aa4e:	4619      	mov	r1, r3
 800aa50:	68f8      	ldr	r0, [r7, #12]
 800aa52:	f7ff ffa1 	bl	800a998 <mlx90632_channel_new_select>
 800aa56:	61f8      	str	r0, [r7, #28]
    if (ret != 0)
 800aa58:	69fb      	ldr	r3, [r7, #28]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d002      	beq.n	800aa64 <mlx90632_read_temp_object_raw+0x2a>
        return -EINVAL;
 800aa5e:	f06f 0315 	mvn.w	r3, #21
 800aa62:	e070      	b.n	800ab46 <mlx90632_read_temp_object_raw+0x10c>

    ret = mlx90632_i2c_read(MLX90632_RAM_2(channel), &read_tmp);
 800aa64:	7dfb      	ldrb	r3, [r7, #23]
 800aa66:	461a      	mov	r2, r3
 800aa68:	0052      	lsls	r2, r2, #1
 800aa6a:	4413      	add	r3, r2
 800aa6c:	b29b      	uxth	r3, r3
 800aa6e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800aa72:	3301      	adds	r3, #1
 800aa74:	b29b      	uxth	r3, r3
 800aa76:	b21b      	sxth	r3, r3
 800aa78:	f107 0218 	add.w	r2, r7, #24
 800aa7c:	4611      	mov	r1, r2
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f000 fea2 	bl	800b7c8 <mlx90632_i2c_read>
 800aa84:	61f8      	str	r0, [r7, #28]
    if (ret < 0)
 800aa86:	69fb      	ldr	r3, [r7, #28]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	da01      	bge.n	800aa90 <mlx90632_read_temp_object_raw+0x56>
        return ret;
 800aa8c:	69fb      	ldr	r3, [r7, #28]
 800aa8e:	e05a      	b.n	800ab46 <mlx90632_read_temp_object_raw+0x10c>

    read = (int16_t)read_tmp;
 800aa90:	8b3b      	ldrh	r3, [r7, #24]
 800aa92:	837b      	strh	r3, [r7, #26]

    ret = mlx90632_i2c_read(MLX90632_RAM_1(channel), &read_tmp);
 800aa94:	7dfb      	ldrb	r3, [r7, #23]
 800aa96:	461a      	mov	r2, r3
 800aa98:	0052      	lsls	r2, r2, #1
 800aa9a:	4413      	add	r3, r2
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800aaa2:	b29b      	uxth	r3, r3
 800aaa4:	b21b      	sxth	r3, r3
 800aaa6:	f107 0218 	add.w	r2, r7, #24
 800aaaa:	4611      	mov	r1, r2
 800aaac:	4618      	mov	r0, r3
 800aaae:	f000 fe8b 	bl	800b7c8 <mlx90632_i2c_read>
 800aab2:	61f8      	str	r0, [r7, #28]
    if (ret < 0)
 800aab4:	69fb      	ldr	r3, [r7, #28]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	da01      	bge.n	800aabe <mlx90632_read_temp_object_raw+0x84>
        return ret;
 800aaba:	69fb      	ldr	r3, [r7, #28]
 800aabc:	e043      	b.n	800ab46 <mlx90632_read_temp_object_raw+0x10c>
    *object_new_raw = (read + (int16_t)read_tmp) / 2;
 800aabe:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800aac2:	8b3a      	ldrh	r2, [r7, #24]
 800aac4:	b212      	sxth	r2, r2
 800aac6:	4413      	add	r3, r2
 800aac8:	0fda      	lsrs	r2, r3, #31
 800aaca:	4413      	add	r3, r2
 800aacc:	105b      	asrs	r3, r3, #1
 800aace:	b21a      	sxth	r2, r3
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	801a      	strh	r2, [r3, #0]

    ret = mlx90632_i2c_read(MLX90632_RAM_2(channel_old), &read_tmp);
 800aad4:	7dbb      	ldrb	r3, [r7, #22]
 800aad6:	461a      	mov	r2, r3
 800aad8:	0052      	lsls	r2, r2, #1
 800aada:	4413      	add	r3, r2
 800aadc:	b29b      	uxth	r3, r3
 800aade:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800aae2:	3301      	adds	r3, #1
 800aae4:	b29b      	uxth	r3, r3
 800aae6:	b21b      	sxth	r3, r3
 800aae8:	f107 0218 	add.w	r2, r7, #24
 800aaec:	4611      	mov	r1, r2
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f000 fe6a 	bl	800b7c8 <mlx90632_i2c_read>
 800aaf4:	61f8      	str	r0, [r7, #28]
    if (ret < 0)
 800aaf6:	69fb      	ldr	r3, [r7, #28]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	da01      	bge.n	800ab00 <mlx90632_read_temp_object_raw+0xc6>
        return ret;
 800aafc:	69fb      	ldr	r3, [r7, #28]
 800aafe:	e022      	b.n	800ab46 <mlx90632_read_temp_object_raw+0x10c>
    read = (int16_t)read_tmp;
 800ab00:	8b3b      	ldrh	r3, [r7, #24]
 800ab02:	837b      	strh	r3, [r7, #26]

    ret = mlx90632_i2c_read(MLX90632_RAM_1(channel_old), &read_tmp);
 800ab04:	7dbb      	ldrb	r3, [r7, #22]
 800ab06:	461a      	mov	r2, r3
 800ab08:	0052      	lsls	r2, r2, #1
 800ab0a:	4413      	add	r3, r2
 800ab0c:	b29b      	uxth	r3, r3
 800ab0e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ab12:	b29b      	uxth	r3, r3
 800ab14:	b21b      	sxth	r3, r3
 800ab16:	f107 0218 	add.w	r2, r7, #24
 800ab1a:	4611      	mov	r1, r2
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f000 fe53 	bl	800b7c8 <mlx90632_i2c_read>
 800ab22:	61f8      	str	r0, [r7, #28]
    if (ret < 0)
 800ab24:	69fb      	ldr	r3, [r7, #28]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	da01      	bge.n	800ab2e <mlx90632_read_temp_object_raw+0xf4>
        return ret;
 800ab2a:	69fb      	ldr	r3, [r7, #28]
 800ab2c:	e00b      	b.n	800ab46 <mlx90632_read_temp_object_raw+0x10c>
    *object_old_raw = (read + (int16_t)read_tmp) / 2;
 800ab2e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800ab32:	8b3a      	ldrh	r2, [r7, #24]
 800ab34:	b212      	sxth	r2, r2
 800ab36:	4413      	add	r3, r2
 800ab38:	0fda      	lsrs	r2, r3, #31
 800ab3a:	4413      	add	r3, r2
 800ab3c:	105b      	asrs	r3, r3, #1
 800ab3e:	b21a      	sxth	r2, r3
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	801a      	strh	r2, [r3, #0]

    return ret;
 800ab44:	69fb      	ldr	r3, [r7, #28]
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3720      	adds	r7, #32
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}

0800ab4e <mlx90632_read_temp_raw_burst>:
    return ret;
}

int32_t mlx90632_read_temp_raw_burst(int16_t *ambient_new_raw, int16_t *ambient_old_raw,
                                     int16_t *object_new_raw, int16_t *object_old_raw)
{
 800ab4e:	b580      	push	{r7, lr}
 800ab50:	b086      	sub	sp, #24
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	60f8      	str	r0, [r7, #12]
 800ab56:	60b9      	str	r1, [r7, #8]
 800ab58:	607a      	str	r2, [r7, #4]
 800ab5a:	603b      	str	r3, [r7, #0]
    int32_t ret, start_measurement_ret;

    // trigger and wait for measurement to complete
    start_measurement_ret = mlx90632_start_measurement_burst();
 800ab5c:	f000 fc70 	bl	800b440 <mlx90632_start_measurement_burst>
 800ab60:	6178      	str	r0, [r7, #20]
    if (start_measurement_ret < 0)
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	da01      	bge.n	800ab6c <mlx90632_read_temp_raw_burst+0x1e>
        return start_measurement_ret;
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	e010      	b.n	800ab8e <mlx90632_read_temp_raw_burst+0x40>

    /** Read new and old **ambient** values from sensor */
    ret = mlx90632_read_temp_ambient_raw(ambient_new_raw, ambient_old_raw);
 800ab6c:	68b9      	ldr	r1, [r7, #8]
 800ab6e:	68f8      	ldr	r0, [r7, #12]
 800ab70:	f7ff ff37 	bl	800a9e2 <mlx90632_read_temp_ambient_raw>
 800ab74:	6138      	str	r0, [r7, #16]
    if (ret < 0)
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	da01      	bge.n	800ab80 <mlx90632_read_temp_raw_burst+0x32>
        return ret;
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	e006      	b.n	800ab8e <mlx90632_read_temp_raw_burst+0x40>

    /** Read new and old **object** values from sensor */
    ret = mlx90632_read_temp_object_raw(2, object_new_raw, object_old_raw);
 800ab80:	683a      	ldr	r2, [r7, #0]
 800ab82:	6879      	ldr	r1, [r7, #4]
 800ab84:	2002      	movs	r0, #2
 800ab86:	f7ff ff58 	bl	800aa3a <mlx90632_read_temp_object_raw>
 800ab8a:	6138      	str	r0, [r7, #16]

    return ret;
 800ab8c:	693b      	ldr	r3, [r7, #16]
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3718      	adds	r7, #24
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
	...

0800ab98 <mlx90632_preprocess_temp_ambient>:


/* DSPv5 */
double mlx90632_preprocess_temp_ambient(int16_t ambient_new_raw, int16_t ambient_old_raw, int16_t Gb)
{
 800ab98:	b5b0      	push	{r4, r5, r7, lr}
 800ab9a:	b086      	sub	sp, #24
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	4603      	mov	r3, r0
 800aba0:	80fb      	strh	r3, [r7, #6]
 800aba2:	460b      	mov	r3, r1
 800aba4:	80bb      	strh	r3, [r7, #4]
 800aba6:	4613      	mov	r3, r2
 800aba8:	807b      	strh	r3, [r7, #2]
    double VR_Ta, kGb;

    kGb = ((double)Gb) / 1024.0;
 800abaa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800abae:	4618      	mov	r0, r3
 800abb0:	f7fc fc98 	bl	80074e4 <__aeabi_i2d>
 800abb4:	f04f 0200 	mov.w	r2, #0
 800abb8:	4b27      	ldr	r3, [pc, #156]	@ (800ac58 <mlx90632_preprocess_temp_ambient+0xc0>)
 800abba:	f7fc fe27 	bl	800780c <__aeabi_ddiv>
 800abbe:	4602      	mov	r2, r0
 800abc0:	460b      	mov	r3, r1
 800abc2:	e9c7 2304 	strd	r2, r3, [r7, #16]

    VR_Ta = ambient_old_raw + kGb * (ambient_new_raw / (MLX90632_REF_3));
 800abc6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800abca:	4618      	mov	r0, r3
 800abcc:	f7fc fc8a 	bl	80074e4 <__aeabi_i2d>
 800abd0:	4604      	mov	r4, r0
 800abd2:	460d      	mov	r5, r1
 800abd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800abd8:	4618      	mov	r0, r3
 800abda:	f7fc fc83 	bl	80074e4 <__aeabi_i2d>
 800abde:	f04f 0200 	mov.w	r2, #0
 800abe2:	4b1e      	ldr	r3, [pc, #120]	@ (800ac5c <mlx90632_preprocess_temp_ambient+0xc4>)
 800abe4:	f7fc fe12 	bl	800780c <__aeabi_ddiv>
 800abe8:	4602      	mov	r2, r0
 800abea:	460b      	mov	r3, r1
 800abec:	4610      	mov	r0, r2
 800abee:	4619      	mov	r1, r3
 800abf0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800abf4:	f7fc fce0 	bl	80075b8 <__aeabi_dmul>
 800abf8:	4602      	mov	r2, r0
 800abfa:	460b      	mov	r3, r1
 800abfc:	4620      	mov	r0, r4
 800abfe:	4629      	mov	r1, r5
 800ac00:	f7fc fb24 	bl	800724c <__adddf3>
 800ac04:	4602      	mov	r2, r0
 800ac06:	460b      	mov	r3, r1
 800ac08:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return ((ambient_new_raw / (MLX90632_REF_3)) / VR_Ta) * 524288.0;
 800ac0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ac10:	4618      	mov	r0, r3
 800ac12:	f7fc fc67 	bl	80074e4 <__aeabi_i2d>
 800ac16:	f04f 0200 	mov.w	r2, #0
 800ac1a:	4b10      	ldr	r3, [pc, #64]	@ (800ac5c <mlx90632_preprocess_temp_ambient+0xc4>)
 800ac1c:	f7fc fdf6 	bl	800780c <__aeabi_ddiv>
 800ac20:	4602      	mov	r2, r0
 800ac22:	460b      	mov	r3, r1
 800ac24:	4610      	mov	r0, r2
 800ac26:	4619      	mov	r1, r3
 800ac28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ac2c:	f7fc fdee 	bl	800780c <__aeabi_ddiv>
 800ac30:	4602      	mov	r2, r0
 800ac32:	460b      	mov	r3, r1
 800ac34:	4610      	mov	r0, r2
 800ac36:	4619      	mov	r1, r3
 800ac38:	f04f 0200 	mov.w	r2, #0
 800ac3c:	4b08      	ldr	r3, [pc, #32]	@ (800ac60 <mlx90632_preprocess_temp_ambient+0xc8>)
 800ac3e:	f7fc fcbb 	bl	80075b8 <__aeabi_dmul>
 800ac42:	4602      	mov	r2, r0
 800ac44:	460b      	mov	r3, r1
 800ac46:	ec43 2b17 	vmov	d7, r2, r3
}
 800ac4a:	eeb0 0a47 	vmov.f32	s0, s14
 800ac4e:	eef0 0a67 	vmov.f32	s1, s15
 800ac52:	3718      	adds	r7, #24
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bdb0      	pop	{r4, r5, r7, pc}
 800ac58:	40900000 	.word	0x40900000
 800ac5c:	40280000 	.word	0x40280000
 800ac60:	41200000 	.word	0x41200000

0800ac64 <mlx90632_preprocess_temp_object>:

double mlx90632_preprocess_temp_object(int16_t object_new_raw, int16_t object_old_raw,
                                       int16_t ambient_new_raw, int16_t ambient_old_raw,
                                       int16_t Ka)
{
 800ac64:	b5b0      	push	{r4, r5, r7, lr}
 800ac66:	b086      	sub	sp, #24
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	4604      	mov	r4, r0
 800ac6c:	4608      	mov	r0, r1
 800ac6e:	4611      	mov	r1, r2
 800ac70:	461a      	mov	r2, r3
 800ac72:	4623      	mov	r3, r4
 800ac74:	80fb      	strh	r3, [r7, #6]
 800ac76:	4603      	mov	r3, r0
 800ac78:	80bb      	strh	r3, [r7, #4]
 800ac7a:	460b      	mov	r3, r1
 800ac7c:	807b      	strh	r3, [r7, #2]
 800ac7e:	4613      	mov	r3, r2
 800ac80:	803b      	strh	r3, [r7, #0]
    double VR_IR, kKa;

    kKa = ((double)Ka) / 1024.0;
 800ac82:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800ac86:	4618      	mov	r0, r3
 800ac88:	f7fc fc2c 	bl	80074e4 <__aeabi_i2d>
 800ac8c:	f04f 0200 	mov.w	r2, #0
 800ac90:	4b2a      	ldr	r3, [pc, #168]	@ (800ad3c <mlx90632_preprocess_temp_object+0xd8>)
 800ac92:	f7fc fdbb 	bl	800780c <__aeabi_ddiv>
 800ac96:	4602      	mov	r2, r0
 800ac98:	460b      	mov	r3, r1
 800ac9a:	e9c7 2304 	strd	r2, r3, [r7, #16]

    VR_IR = ambient_old_raw + kKa * (ambient_new_raw / (MLX90632_REF_3));
 800ac9e:	f9b7 3000 	ldrsh.w	r3, [r7]
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7fc fc1e 	bl	80074e4 <__aeabi_i2d>
 800aca8:	4604      	mov	r4, r0
 800acaa:	460d      	mov	r5, r1
 800acac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800acb0:	4618      	mov	r0, r3
 800acb2:	f7fc fc17 	bl	80074e4 <__aeabi_i2d>
 800acb6:	f04f 0200 	mov.w	r2, #0
 800acba:	4b21      	ldr	r3, [pc, #132]	@ (800ad40 <mlx90632_preprocess_temp_object+0xdc>)
 800acbc:	f7fc fda6 	bl	800780c <__aeabi_ddiv>
 800acc0:	4602      	mov	r2, r0
 800acc2:	460b      	mov	r3, r1
 800acc4:	4610      	mov	r0, r2
 800acc6:	4619      	mov	r1, r3
 800acc8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800accc:	f7fc fc74 	bl	80075b8 <__aeabi_dmul>
 800acd0:	4602      	mov	r2, r0
 800acd2:	460b      	mov	r3, r1
 800acd4:	4620      	mov	r0, r4
 800acd6:	4629      	mov	r1, r5
 800acd8:	f7fc fab8 	bl	800724c <__adddf3>
 800acdc:	4602      	mov	r2, r0
 800acde:	460b      	mov	r3, r1
 800ace0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return ((((object_new_raw + object_old_raw) / 2) / (MLX90632_REF_12)) / VR_IR) * 524288.0;
 800ace4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ace8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800acec:	4413      	add	r3, r2
 800acee:	0fda      	lsrs	r2, r3, #31
 800acf0:	4413      	add	r3, r2
 800acf2:	105b      	asrs	r3, r3, #1
 800acf4:	4618      	mov	r0, r3
 800acf6:	f7fc fbf5 	bl	80074e4 <__aeabi_i2d>
 800acfa:	f04f 0200 	mov.w	r2, #0
 800acfe:	4b10      	ldr	r3, [pc, #64]	@ (800ad40 <mlx90632_preprocess_temp_object+0xdc>)
 800ad00:	f7fc fd84 	bl	800780c <__aeabi_ddiv>
 800ad04:	4602      	mov	r2, r0
 800ad06:	460b      	mov	r3, r1
 800ad08:	4610      	mov	r0, r2
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ad10:	f7fc fd7c 	bl	800780c <__aeabi_ddiv>
 800ad14:	4602      	mov	r2, r0
 800ad16:	460b      	mov	r3, r1
 800ad18:	4610      	mov	r0, r2
 800ad1a:	4619      	mov	r1, r3
 800ad1c:	f04f 0200 	mov.w	r2, #0
 800ad20:	4b08      	ldr	r3, [pc, #32]	@ (800ad44 <mlx90632_preprocess_temp_object+0xe0>)
 800ad22:	f7fc fc49 	bl	80075b8 <__aeabi_dmul>
 800ad26:	4602      	mov	r2, r0
 800ad28:	460b      	mov	r3, r1
 800ad2a:	ec43 2b17 	vmov	d7, r2, r3
}
 800ad2e:	eeb0 0a47 	vmov.f32	s0, s14
 800ad32:	eef0 0a67 	vmov.f32	s1, s15
 800ad36:	3718      	adds	r7, #24
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bdb0      	pop	{r4, r5, r7, pc}
 800ad3c:	40900000 	.word	0x40900000
 800ad40:	40280000 	.word	0x40280000
 800ad44:	41200000 	.word	0x41200000

0800ad48 <mlx90632_calc_temp_ambient>:

double mlx90632_calc_temp_ambient(int16_t ambient_new_raw, int16_t ambient_old_raw, int32_t P_T,
                                  int32_t P_R, int32_t P_G, int32_t P_O, int16_t Gb)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b090      	sub	sp, #64	@ 0x40
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	60ba      	str	r2, [r7, #8]
 800ad50:	607b      	str	r3, [r7, #4]
 800ad52:	4603      	mov	r3, r0
 800ad54:	81fb      	strh	r3, [r7, #14]
 800ad56:	460b      	mov	r3, r1
 800ad58:	81bb      	strh	r3, [r7, #12]
    double Asub, Bsub, Ablock, Bblock, Cblock, AMB;

    AMB = mlx90632_preprocess_temp_ambient(ambient_new_raw, ambient_old_raw, Gb);
 800ad5a:	f9b7 2050 	ldrsh.w	r2, [r7, #80]	@ 0x50
 800ad5e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800ad62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7ff ff16 	bl	800ab98 <mlx90632_preprocess_temp_ambient>
 800ad6c:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38

    Asub = ((double)P_T) / (double)17592186044416.0;
 800ad70:	68b8      	ldr	r0, [r7, #8]
 800ad72:	f7fc fbb7 	bl	80074e4 <__aeabi_i2d>
 800ad76:	f04f 0200 	mov.w	r2, #0
 800ad7a:	4b32      	ldr	r3, [pc, #200]	@ (800ae44 <mlx90632_calc_temp_ambient+0xfc>)
 800ad7c:	f7fc fd46 	bl	800780c <__aeabi_ddiv>
 800ad80:	4602      	mov	r2, r0
 800ad82:	460b      	mov	r3, r1
 800ad84:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    Bsub = (double)AMB - ((double)P_R / (double)256.0);
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f7fc fbab 	bl	80074e4 <__aeabi_i2d>
 800ad8e:	f04f 0200 	mov.w	r2, #0
 800ad92:	4b2d      	ldr	r3, [pc, #180]	@ (800ae48 <mlx90632_calc_temp_ambient+0x100>)
 800ad94:	f7fc fd3a 	bl	800780c <__aeabi_ddiv>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	460b      	mov	r3, r1
 800ad9c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800ada0:	f7fc fa52 	bl	8007248 <__aeabi_dsub>
 800ada4:	4602      	mov	r2, r0
 800ada6:	460b      	mov	r3, r1
 800ada8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    Ablock = Asub * (Bsub * Bsub);
 800adac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800adb0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800adb4:	f7fc fc00 	bl	80075b8 <__aeabi_dmul>
 800adb8:	4602      	mov	r2, r0
 800adba:	460b      	mov	r3, r1
 800adbc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800adc0:	f7fc fbfa 	bl	80075b8 <__aeabi_dmul>
 800adc4:	4602      	mov	r2, r0
 800adc6:	460b      	mov	r3, r1
 800adc8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    Bblock = (Bsub / (double)P_G) * (double)1048576.0;
 800adcc:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800adce:	f7fc fb89 	bl	80074e4 <__aeabi_i2d>
 800add2:	4602      	mov	r2, r0
 800add4:	460b      	mov	r3, r1
 800add6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800adda:	f7fc fd17 	bl	800780c <__aeabi_ddiv>
 800adde:	4602      	mov	r2, r0
 800ade0:	460b      	mov	r3, r1
 800ade2:	4610      	mov	r0, r2
 800ade4:	4619      	mov	r1, r3
 800ade6:	f04f 0200 	mov.w	r2, #0
 800adea:	4b18      	ldr	r3, [pc, #96]	@ (800ae4c <mlx90632_calc_temp_ambient+0x104>)
 800adec:	f7fc fbe4 	bl	80075b8 <__aeabi_dmul>
 800adf0:	4602      	mov	r2, r0
 800adf2:	460b      	mov	r3, r1
 800adf4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    Cblock = (double)P_O / (double)256.0;
 800adf8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800adfa:	f7fc fb73 	bl	80074e4 <__aeabi_i2d>
 800adfe:	f04f 0200 	mov.w	r2, #0
 800ae02:	4b11      	ldr	r3, [pc, #68]	@ (800ae48 <mlx90632_calc_temp_ambient+0x100>)
 800ae04:	f7fc fd02 	bl	800780c <__aeabi_ddiv>
 800ae08:	4602      	mov	r2, r0
 800ae0a:	460b      	mov	r3, r1
 800ae0c:	e9c7 2304 	strd	r2, r3, [r7, #16]

    return Bblock + Ablock + Cblock;
 800ae10:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ae14:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ae18:	f7fc fa18 	bl	800724c <__adddf3>
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	460b      	mov	r3, r1
 800ae20:	4610      	mov	r0, r2
 800ae22:	4619      	mov	r1, r3
 800ae24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ae28:	f7fc fa10 	bl	800724c <__adddf3>
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	460b      	mov	r3, r1
 800ae30:	ec43 2b17 	vmov	d7, r2, r3
}
 800ae34:	eeb0 0a47 	vmov.f32	s0, s14
 800ae38:	eef0 0a67 	vmov.f32	s1, s15
 800ae3c:	3740      	adds	r7, #64	@ 0x40
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}
 800ae42:	bf00      	nop
 800ae44:	42b00000 	.word	0x42b00000
 800ae48:	40700000 	.word	0x40700000
 800ae4c:	41300000 	.word	0x41300000

0800ae50 <mlx90632_calc_temp_object_iteration>:
 * @return Calculated object temperature for current iteration in milliCelsius
 */
STATIC double mlx90632_calc_temp_object_iteration(double prev_object_temp, int32_t object, double TAdut,
                                                  int32_t Ga, int32_t Fa, int32_t Fb, int16_t Ha, int16_t Hb,
                                                  double emissivity)
{
 800ae50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae54:	b09c      	sub	sp, #112	@ 0x70
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	ed87 0b08 	vstr	d0, [r7, #32]
 800ae5c:	61f8      	str	r0, [r7, #28]
 800ae5e:	ed87 1b04 	vstr	d1, [r7, #16]
 800ae62:	61b9      	str	r1, [r7, #24]
 800ae64:	60fa      	str	r2, [r7, #12]
 800ae66:	60bb      	str	r3, [r7, #8]
 800ae68:	ed87 2b00 	vstr	d2, [r7]
    // temp variables
    double KsTAtmp, Alpha_corr;
    double Ha_customer, Hb_customer;


    Ha_customer = Ha / ((double)16384.0);
 800ae6c:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	@ 0x90
 800ae70:	4618      	mov	r0, r3
 800ae72:	f7fc fb37 	bl	80074e4 <__aeabi_i2d>
 800ae76:	f04f 0200 	mov.w	r2, #0
 800ae7a:	4b95      	ldr	r3, [pc, #596]	@ (800b0d0 <mlx90632_calc_temp_object_iteration+0x280>)
 800ae7c:	f7fc fcc6 	bl	800780c <__aeabi_ddiv>
 800ae80:	4602      	mov	r2, r0
 800ae82:	460b      	mov	r3, r1
 800ae84:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    Hb_customer = Hb / ((double)1024.0);
 800ae88:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	@ 0x94
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f7fc fb29 	bl	80074e4 <__aeabi_i2d>
 800ae92:	f04f 0200 	mov.w	r2, #0
 800ae96:	4b8f      	ldr	r3, [pc, #572]	@ (800b0d4 <mlx90632_calc_temp_object_iteration+0x284>)
 800ae98:	f7fc fcb8 	bl	800780c <__aeabi_ddiv>
 800ae9c:	4602      	mov	r2, r0
 800ae9e:	460b      	mov	r3, r1
 800aea0:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
    calcedGa = ((double)Ga * (prev_object_temp - 25)) / ((double)68719476736.0);
 800aea4:	69b8      	ldr	r0, [r7, #24]
 800aea6:	f7fc fb1d 	bl	80074e4 <__aeabi_i2d>
 800aeaa:	4682      	mov	sl, r0
 800aeac:	468b      	mov	fp, r1
 800aeae:	f04f 0200 	mov.w	r2, #0
 800aeb2:	4b89      	ldr	r3, [pc, #548]	@ (800b0d8 <mlx90632_calc_temp_object_iteration+0x288>)
 800aeb4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800aeb8:	f7fc f9c6 	bl	8007248 <__aeabi_dsub>
 800aebc:	4602      	mov	r2, r0
 800aebe:	460b      	mov	r3, r1
 800aec0:	4650      	mov	r0, sl
 800aec2:	4659      	mov	r1, fp
 800aec4:	f7fc fb78 	bl	80075b8 <__aeabi_dmul>
 800aec8:	4602      	mov	r2, r0
 800aeca:	460b      	mov	r3, r1
 800aecc:	4610      	mov	r0, r2
 800aece:	4619      	mov	r1, r3
 800aed0:	f04f 0200 	mov.w	r2, #0
 800aed4:	4b81      	ldr	r3, [pc, #516]	@ (800b0dc <mlx90632_calc_temp_object_iteration+0x28c>)
 800aed6:	f7fc fc99 	bl	800780c <__aeabi_ddiv>
 800aeda:	4602      	mov	r2, r0
 800aedc:	460b      	mov	r3, r1
 800aede:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    KsTAtmp = (double)Fb * (TAdut - 25);
 800aee2:	68b8      	ldr	r0, [r7, #8]
 800aee4:	f7fc fafe 	bl	80074e4 <__aeabi_i2d>
 800aee8:	4682      	mov	sl, r0
 800aeea:	468b      	mov	fp, r1
 800aeec:	f04f 0200 	mov.w	r2, #0
 800aef0:	4b79      	ldr	r3, [pc, #484]	@ (800b0d8 <mlx90632_calc_temp_object_iteration+0x288>)
 800aef2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800aef6:	f7fc f9a7 	bl	8007248 <__aeabi_dsub>
 800aefa:	4602      	mov	r2, r0
 800aefc:	460b      	mov	r3, r1
 800aefe:	4650      	mov	r0, sl
 800af00:	4659      	mov	r1, fp
 800af02:	f7fc fb59 	bl	80075b8 <__aeabi_dmul>
 800af06:	4602      	mov	r2, r0
 800af08:	460b      	mov	r3, r1
 800af0a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    calcedGb = KsTAtmp / ((double)68719476736.0);
 800af0e:	f04f 0200 	mov.w	r2, #0
 800af12:	4b72      	ldr	r3, [pc, #456]	@ (800b0dc <mlx90632_calc_temp_object_iteration+0x28c>)
 800af14:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800af18:	f7fc fc78 	bl	800780c <__aeabi_ddiv>
 800af1c:	4602      	mov	r2, r0
 800af1e:	460b      	mov	r3, r1
 800af20:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    Alpha_corr = (((double)(Fa * POW10)) * Ha_customer * (double)(1 + calcedGa + calcedGb)) /
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	17da      	asrs	r2, r3, #31
 800af28:	4698      	mov	r8, r3
 800af2a:	4691      	mov	r9, r2
 800af2c:	4b6c      	ldr	r3, [pc, #432]	@ (800b0e0 <mlx90632_calc_temp_object_iteration+0x290>)
 800af2e:	fb03 f209 	mul.w	r2, r3, r9
 800af32:	2302      	movs	r3, #2
 800af34:	fb03 f308 	mul.w	r3, r3, r8
 800af38:	4413      	add	r3, r2
 800af3a:	4a69      	ldr	r2, [pc, #420]	@ (800b0e0 <mlx90632_calc_temp_object_iteration+0x290>)
 800af3c:	fba8 4502 	umull	r4, r5, r8, r2
 800af40:	442b      	add	r3, r5
 800af42:	461d      	mov	r5, r3
 800af44:	4620      	mov	r0, r4
 800af46:	4629      	mov	r1, r5
 800af48:	f7fc fb08 	bl	800755c <__aeabi_l2d>
 800af4c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800af50:	f7fc fb32 	bl	80075b8 <__aeabi_dmul>
 800af54:	4602      	mov	r2, r0
 800af56:	460b      	mov	r3, r1
 800af58:	4614      	mov	r4, r2
 800af5a:	461d      	mov	r5, r3
 800af5c:	f04f 0200 	mov.w	r2, #0
 800af60:	4b60      	ldr	r3, [pc, #384]	@ (800b0e4 <mlx90632_calc_temp_object_iteration+0x294>)
 800af62:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800af66:	f7fc f971 	bl	800724c <__adddf3>
 800af6a:	4602      	mov	r2, r0
 800af6c:	460b      	mov	r3, r1
 800af6e:	4610      	mov	r0, r2
 800af70:	4619      	mov	r1, r3
 800af72:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800af76:	f7fc f969 	bl	800724c <__adddf3>
 800af7a:	4602      	mov	r2, r0
 800af7c:	460b      	mov	r3, r1
 800af7e:	4620      	mov	r0, r4
 800af80:	4629      	mov	r1, r5
 800af82:	f7fc fb19 	bl	80075b8 <__aeabi_dmul>
 800af86:	4602      	mov	r2, r0
 800af88:	460b      	mov	r3, r1
 800af8a:	4610      	mov	r0, r2
 800af8c:	4619      	mov	r1, r3
 800af8e:	f04f 0200 	mov.w	r2, #0
 800af92:	4b55      	ldr	r3, [pc, #340]	@ (800b0e8 <mlx90632_calc_temp_object_iteration+0x298>)
 800af94:	f7fc fc3a 	bl	800780c <__aeabi_ddiv>
 800af98:	4602      	mov	r2, r0
 800af9a:	460b      	mov	r3, r1
 800af9c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
                 ((double)70368744177664.0);
    calcedFa = object / (emissivity * (Alpha_corr / POW10));
 800afa0:	69f8      	ldr	r0, [r7, #28]
 800afa2:	f7fc fa9f 	bl	80074e4 <__aeabi_i2d>
 800afa6:	4604      	mov	r4, r0
 800afa8:	460d      	mov	r5, r1
 800afaa:	a345      	add	r3, pc, #276	@ (adr r3, 800b0c0 <mlx90632_calc_temp_object_iteration+0x270>)
 800afac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800afb4:	f7fc fc2a 	bl	800780c <__aeabi_ddiv>
 800afb8:	4602      	mov	r2, r0
 800afba:	460b      	mov	r3, r1
 800afbc:	4610      	mov	r0, r2
 800afbe:	4619      	mov	r1, r3
 800afc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afc4:	f7fc faf8 	bl	80075b8 <__aeabi_dmul>
 800afc8:	4602      	mov	r2, r0
 800afca:	460b      	mov	r3, r1
 800afcc:	4620      	mov	r0, r4
 800afce:	4629      	mov	r1, r5
 800afd0:	f7fc fc1c 	bl	800780c <__aeabi_ddiv>
 800afd4:	4602      	mov	r2, r0
 800afd6:	460b      	mov	r3, r1
 800afd8:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    TAdut4 = (TAdut + 273.15) * (TAdut + 273.15) * (TAdut + 273.15) * (TAdut + 273.15);
 800afdc:	a33a      	add	r3, pc, #232	@ (adr r3, 800b0c8 <mlx90632_calc_temp_object_iteration+0x278>)
 800afde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800afe6:	f7fc f931 	bl	800724c <__adddf3>
 800afea:	4602      	mov	r2, r0
 800afec:	460b      	mov	r3, r1
 800afee:	4614      	mov	r4, r2
 800aff0:	461d      	mov	r5, r3
 800aff2:	a335      	add	r3, pc, #212	@ (adr r3, 800b0c8 <mlx90632_calc_temp_object_iteration+0x278>)
 800aff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800affc:	f7fc f926 	bl	800724c <__adddf3>
 800b000:	4602      	mov	r2, r0
 800b002:	460b      	mov	r3, r1
 800b004:	4620      	mov	r0, r4
 800b006:	4629      	mov	r1, r5
 800b008:	f7fc fad6 	bl	80075b8 <__aeabi_dmul>
 800b00c:	4602      	mov	r2, r0
 800b00e:	460b      	mov	r3, r1
 800b010:	4614      	mov	r4, r2
 800b012:	461d      	mov	r5, r3
 800b014:	a32c      	add	r3, pc, #176	@ (adr r3, 800b0c8 <mlx90632_calc_temp_object_iteration+0x278>)
 800b016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b01e:	f7fc f915 	bl	800724c <__adddf3>
 800b022:	4602      	mov	r2, r0
 800b024:	460b      	mov	r3, r1
 800b026:	4620      	mov	r0, r4
 800b028:	4629      	mov	r1, r5
 800b02a:	f7fc fac5 	bl	80075b8 <__aeabi_dmul>
 800b02e:	4602      	mov	r2, r0
 800b030:	460b      	mov	r3, r1
 800b032:	4614      	mov	r4, r2
 800b034:	461d      	mov	r5, r3
 800b036:	a324      	add	r3, pc, #144	@ (adr r3, 800b0c8 <mlx90632_calc_temp_object_iteration+0x278>)
 800b038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b03c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b040:	f7fc f904 	bl	800724c <__adddf3>
 800b044:	4602      	mov	r2, r0
 800b046:	460b      	mov	r3, r1
 800b048:	4620      	mov	r0, r4
 800b04a:	4629      	mov	r1, r5
 800b04c:	f7fc fab4 	bl	80075b8 <__aeabi_dmul>
 800b050:	4602      	mov	r2, r0
 800b052:	460b      	mov	r3, r1
 800b054:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    first_sqrt = sqrt(calcedFa + TAdut4);
 800b058:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800b05c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800b060:	f7fc f8f4 	bl	800724c <__adddf3>
 800b064:	4602      	mov	r2, r0
 800b066:	460b      	mov	r3, r1
 800b068:	ec43 2b17 	vmov	d7, r2, r3
 800b06c:	eeb0 0a47 	vmov.f32	s0, s14
 800b070:	eef0 0a67 	vmov.f32	s1, s15
 800b074:	f012 fc1e 	bl	801d8b4 <sqrt>
 800b078:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28

    return sqrt(first_sqrt) - 273.15 - Hb_customer;
 800b07c:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 800b080:	f012 fc18 	bl	801d8b4 <sqrt>
 800b084:	ec51 0b10 	vmov	r0, r1, d0
 800b088:	a30f      	add	r3, pc, #60	@ (adr r3, 800b0c8 <mlx90632_calc_temp_object_iteration+0x278>)
 800b08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b08e:	f7fc f8db 	bl	8007248 <__aeabi_dsub>
 800b092:	4602      	mov	r2, r0
 800b094:	460b      	mov	r3, r1
 800b096:	4610      	mov	r0, r2
 800b098:	4619      	mov	r1, r3
 800b09a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800b09e:	f7fc f8d3 	bl	8007248 <__aeabi_dsub>
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	460b      	mov	r3, r1
 800b0a6:	ec43 2b17 	vmov	d7, r2, r3
}
 800b0aa:	eeb0 0a47 	vmov.f32	s0, s14
 800b0ae:	eef0 0a67 	vmov.f32	s1, s15
 800b0b2:	3770      	adds	r7, #112	@ 0x70
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b0ba:	bf00      	nop
 800b0bc:	f3af 8000 	nop.w
 800b0c0:	20000000 	.word	0x20000000
 800b0c4:	4202a05f 	.word	0x4202a05f
 800b0c8:	66666666 	.word	0x66666666
 800b0cc:	40711266 	.word	0x40711266
 800b0d0:	40d00000 	.word	0x40d00000
 800b0d4:	40900000 	.word	0x40900000
 800b0d8:	40390000 	.word	0x40390000
 800b0dc:	42300000 	.word	0x42300000
 800b0e0:	540be400 	.word	0x540be400
 800b0e4:	3ff00000 	.word	0x3ff00000
 800b0e8:	42d00000 	.word	0x42d00000

0800b0ec <mlx90632_set_emissivity>:
    return sqrt(first_sqrt) - 273.15 - Hb_customer;
}

static double emissivity = 0.0;
void mlx90632_set_emissivity(double value)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b083      	sub	sp, #12
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	ed87 0b00 	vstr	d0, [r7]
    emissivity = value;
 800b0f6:	4905      	ldr	r1, [pc, #20]	@ (800b10c <mlx90632_set_emissivity+0x20>)
 800b0f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0fc:	e9c1 2300 	strd	r2, r3, [r1]
}
 800b100:	bf00      	nop
 800b102:	370c      	adds	r7, #12
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr
 800b10c:	20000510 	.word	0x20000510

0800b110 <mlx90632_get_emissivity>:

double mlx90632_get_emissivity(void)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	af00      	add	r7, sp, #0
    if (emissivity == 0.0)
 800b114:	4b0c      	ldr	r3, [pc, #48]	@ (800b148 <mlx90632_get_emissivity+0x38>)
 800b116:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b11a:	f04f 0200 	mov.w	r2, #0
 800b11e:	f04f 0300 	mov.w	r3, #0
 800b122:	f7fc fcb1 	bl	8007a88 <__aeabi_dcmpeq>
 800b126:	4603      	mov	r3, r0
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d003      	beq.n	800b134 <mlx90632_get_emissivity+0x24>
    {
        return 1.0;
 800b12c:	f04f 0200 	mov.w	r2, #0
 800b130:	4b06      	ldr	r3, [pc, #24]	@ (800b14c <mlx90632_get_emissivity+0x3c>)
 800b132:	e002      	b.n	800b13a <mlx90632_get_emissivity+0x2a>
    }
    else
    {
        return emissivity;
 800b134:	4b04      	ldr	r3, [pc, #16]	@ (800b148 <mlx90632_get_emissivity+0x38>)
 800b136:	e9d3 2300 	ldrd	r2, r3, [r3]
    }
}
 800b13a:	ec43 2b17 	vmov	d7, r2, r3
 800b13e:	eeb0 0a47 	vmov.f32	s0, s14
 800b142:	eef0 0a67 	vmov.f32	s1, s15
 800b146:	bd80      	pop	{r7, pc}
 800b148:	20000510 	.word	0x20000510
 800b14c:	3ff00000 	.word	0x3ff00000

0800b150 <mlx90632_calc_temp_object>:

double mlx90632_calc_temp_object(int32_t object, int32_t ambient,
                                 int32_t Ea, int32_t Eb, int32_t Ga, int32_t Fa, int32_t Fb,
                                 int16_t Ha, int16_t Hb)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b092      	sub	sp, #72	@ 0x48
 800b154:	af02      	add	r7, sp, #8
 800b156:	60f8      	str	r0, [r7, #12]
 800b158:	60b9      	str	r1, [r7, #8]
 800b15a:	607a      	str	r2, [r7, #4]
 800b15c:	603b      	str	r3, [r7, #0]
    double kEa, kEb, TAdut;
    double temp = 25.0;
 800b15e:	f04f 0200 	mov.w	r2, #0
 800b162:	4b34      	ldr	r3, [pc, #208]	@ (800b234 <mlx90632_calc_temp_object+0xe4>)
 800b164:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double tmp_emi = mlx90632_get_emissivity();
 800b168:	f7ff ffd2 	bl	800b110 <mlx90632_get_emissivity>
 800b16c:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
    int8_t i;

    kEa = ((double)Ea) / ((double)65536.0);
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f7fc f9b7 	bl	80074e4 <__aeabi_i2d>
 800b176:	f04f 0200 	mov.w	r2, #0
 800b17a:	4b2f      	ldr	r3, [pc, #188]	@ (800b238 <mlx90632_calc_temp_object+0xe8>)
 800b17c:	f7fc fb46 	bl	800780c <__aeabi_ddiv>
 800b180:	4602      	mov	r2, r0
 800b182:	460b      	mov	r3, r1
 800b184:	e9c7 2308 	strd	r2, r3, [r7, #32]
    kEb = ((double)Eb) / ((double)256.0);
 800b188:	6838      	ldr	r0, [r7, #0]
 800b18a:	f7fc f9ab 	bl	80074e4 <__aeabi_i2d>
 800b18e:	f04f 0200 	mov.w	r2, #0
 800b192:	4b2a      	ldr	r3, [pc, #168]	@ (800b23c <mlx90632_calc_temp_object+0xec>)
 800b194:	f7fc fb3a 	bl	800780c <__aeabi_ddiv>
 800b198:	4602      	mov	r2, r0
 800b19a:	460b      	mov	r3, r1
 800b19c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    TAdut = (((double)ambient) - kEb) / kEa + 25;
 800b1a0:	68b8      	ldr	r0, [r7, #8]
 800b1a2:	f7fc f99f 	bl	80074e4 <__aeabi_i2d>
 800b1a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b1aa:	f7fc f84d 	bl	8007248 <__aeabi_dsub>
 800b1ae:	4602      	mov	r2, r0
 800b1b0:	460b      	mov	r3, r1
 800b1b2:	4610      	mov	r0, r2
 800b1b4:	4619      	mov	r1, r3
 800b1b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b1ba:	f7fc fb27 	bl	800780c <__aeabi_ddiv>
 800b1be:	4602      	mov	r2, r0
 800b1c0:	460b      	mov	r3, r1
 800b1c2:	4610      	mov	r0, r2
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	f04f 0200 	mov.w	r2, #0
 800b1ca:	4b1a      	ldr	r3, [pc, #104]	@ (800b234 <mlx90632_calc_temp_object+0xe4>)
 800b1cc:	f7fc f83e 	bl	800724c <__adddf3>
 800b1d0:	4602      	mov	r2, r0
 800b1d2:	460b      	mov	r3, r1
 800b1d4:	e9c7 2304 	strd	r2, r3, [r7, #16]

    //iterate through calculations
    for (i = 0; i < 5; ++i)
 800b1d8:	2300      	movs	r3, #0
 800b1da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b1de:	e019      	b.n	800b214 <mlx90632_calc_temp_object+0xc4>
    {
        temp = mlx90632_calc_temp_object_iteration(temp, object, TAdut, Ga, Fa, Fb, Ha, Hb, tmp_emi);
 800b1e0:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	@ 0x58
 800b1e4:	9301      	str	r3, [sp, #4]
 800b1e6:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 800b1ea:	9300      	str	r3, [sp, #0]
 800b1ec:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 800b1f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b1f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b1f4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800b1f6:	ed97 1b04 	vldr	d1, [r7, #16]
 800b1fa:	68f8      	ldr	r0, [r7, #12]
 800b1fc:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 800b200:	f7ff fe26 	bl	800ae50 <mlx90632_calc_temp_object_iteration>
 800b204:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38
    for (i = 0; i < 5; ++i)
 800b208:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b20c:	3301      	adds	r3, #1
 800b20e:	b2db      	uxtb	r3, r3
 800b210:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b214:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800b218:	2b04      	cmp	r3, #4
 800b21a:	dde1      	ble.n	800b1e0 <mlx90632_calc_temp_object+0x90>
    }
    return temp;
 800b21c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b220:	ec43 2b17 	vmov	d7, r2, r3
}
 800b224:	eeb0 0a47 	vmov.f32	s0, s14
 800b228:	eef0 0a67 	vmov.f32	s1, s15
 800b22c:	3740      	adds	r7, #64	@ 0x40
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}
 800b232:	bf00      	nop
 800b234:	40390000 	.word	0x40390000
 800b238:	40f00000 	.word	0x40f00000
 800b23c:	40700000 	.word	0x40700000

0800b240 <mlx90632_init>:
    }
    return temp;
}

int32_t mlx90632_init(void)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b082      	sub	sp, #8
 800b244:	af00      	add	r7, sp, #0
    int32_t ret;
    uint16_t eeprom_version, reg_status;

    ret = mlx90632_i2c_read(MLX90632_EE_VERSION, &eeprom_version);
 800b246:	1cbb      	adds	r3, r7, #2
 800b248:	4619      	mov	r1, r3
 800b24a:	f242 400b 	movw	r0, #9227	@ 0x240b
 800b24e:	f000 fabb 	bl	800b7c8 <mlx90632_i2c_read>
 800b252:	6078      	str	r0, [r7, #4]
    if (ret < 0)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2b00      	cmp	r3, #0
 800b258:	da01      	bge.n	800b25e <mlx90632_init+0x1e>
    {
        return ret;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	e02a      	b.n	800b2b4 <mlx90632_init+0x74>
    }

    if ((eeprom_version & 0x00FF) != MLX90632_DSPv5)
 800b25e:	887b      	ldrh	r3, [r7, #2]
 800b260:	b2db      	uxtb	r3, r3
 800b262:	2b05      	cmp	r3, #5
 800b264:	d002      	beq.n	800b26c <mlx90632_init+0x2c>
    {
        // this here can fail because of big/little endian of cpu/i2c
        return -EPROTONOSUPPORT;
 800b266:	f06f 037a 	mvn.w	r3, #122	@ 0x7a
 800b26a:	e023      	b.n	800b2b4 <mlx90632_init+0x74>
    }

    ret = mlx90632_i2c_read(MLX90632_REG_STATUS, &reg_status);
 800b26c:	463b      	mov	r3, r7
 800b26e:	4619      	mov	r1, r3
 800b270:	f643 70ff 	movw	r0, #16383	@ 0x3fff
 800b274:	f000 faa8 	bl	800b7c8 <mlx90632_i2c_read>
 800b278:	6078      	str	r0, [r7, #4]
    if (ret < 0)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	da01      	bge.n	800b284 <mlx90632_init+0x44>
        return ret;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	e017      	b.n	800b2b4 <mlx90632_init+0x74>

    // Prepare a clean start with setting NEW_DATA to 0
    ret = mlx90632_i2c_write(MLX90632_REG_STATUS, reg_status & ~(MLX90632_STAT_DATA_RDY));
 800b284:	883b      	ldrh	r3, [r7, #0]
 800b286:	f023 0301 	bic.w	r3, r3, #1
 800b28a:	b29b      	uxth	r3, r3
 800b28c:	4619      	mov	r1, r3
 800b28e:	f643 70ff 	movw	r0, #16383	@ 0x3fff
 800b292:	f000 faeb 	bl	800b86c <mlx90632_i2c_write>
 800b296:	6078      	str	r0, [r7, #4]
    if (ret < 0)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	da01      	bge.n	800b2a2 <mlx90632_init+0x62>
        return ret;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	e008      	b.n	800b2b4 <mlx90632_init+0x74>

    if ((eeprom_version & 0x7F00) == MLX90632_XTD_RNG_KEY)
 800b2a2:	887b      	ldrh	r3, [r7, #2]
 800b2a4:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 800b2a8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800b2ac:	d101      	bne.n	800b2b2 <mlx90632_init+0x72>
    {
        return ERANGE;
 800b2ae:	2322      	movs	r3, #34	@ 0x22
 800b2b0:	e000      	b.n	800b2b4 <mlx90632_init+0x74>
    }

    return 0;
 800b2b2:	2300      	movs	r3, #0
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3708      	adds	r7, #8
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}

0800b2bc <mlx90632_addressed_reset>:

int32_t mlx90632_addressed_reset(void)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
    int32_t ret;
    uint16_t reg_ctrl;
    uint16_t reg_value;

    ret = mlx90632_i2c_read(MLX90632_REG_CTRL, &reg_value);
 800b2c2:	463b      	mov	r3, r7
 800b2c4:	4619      	mov	r1, r3
 800b2c6:	f243 0001 	movw	r0, #12289	@ 0x3001
 800b2ca:	f000 fa7d 	bl	800b7c8 <mlx90632_i2c_read>
 800b2ce:	6078      	str	r0, [r7, #4]
    if (ret < 0)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	da01      	bge.n	800b2da <mlx90632_addressed_reset+0x1e>
        return ret;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	e02a      	b.n	800b330 <mlx90632_addressed_reset+0x74>

    reg_ctrl = reg_value & ~MLX90632_CFG_PWR_MASK;
 800b2da:	883b      	ldrh	r3, [r7, #0]
 800b2dc:	f023 0306 	bic.w	r3, r3, #6
 800b2e0:	807b      	strh	r3, [r7, #2]
    reg_ctrl |= MLX90632_PWR_STATUS_STEP;
 800b2e2:	887b      	ldrh	r3, [r7, #2]
 800b2e4:	f043 0304 	orr.w	r3, r3, #4
 800b2e8:	807b      	strh	r3, [r7, #2]
    ret = mlx90632_i2c_write(MLX90632_REG_CTRL, reg_ctrl);
 800b2ea:	887b      	ldrh	r3, [r7, #2]
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	f243 0001 	movw	r0, #12289	@ 0x3001
 800b2f2:	f000 fabb 	bl	800b86c <mlx90632_i2c_write>
 800b2f6:	6078      	str	r0, [r7, #4]
    if (ret < 0)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	da01      	bge.n	800b302 <mlx90632_addressed_reset+0x46>
        return ret;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	e016      	b.n	800b330 <mlx90632_addressed_reset+0x74>

    ret = mlx90632_i2c_write(0x3005, MLX90632_RESET_CMD);
 800b302:	2106      	movs	r1, #6
 800b304:	f243 0005 	movw	r0, #12293	@ 0x3005
 800b308:	f000 fab0 	bl	800b86c <mlx90632_i2c_write>
 800b30c:	6078      	str	r0, [r7, #4]
    if (ret < 0)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2b00      	cmp	r3, #0
 800b312:	da01      	bge.n	800b318 <mlx90632_addressed_reset+0x5c>
        return ret;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	e00b      	b.n	800b330 <mlx90632_addressed_reset+0x74>

    usleep(150, 200);
 800b318:	21c8      	movs	r1, #200	@ 0xc8
 800b31a:	2096      	movs	r0, #150	@ 0x96
 800b31c:	f000 face 	bl	800b8bc <usleep>

    ret = mlx90632_i2c_write(MLX90632_REG_CTRL, reg_value);
 800b320:	883b      	ldrh	r3, [r7, #0]
 800b322:	4619      	mov	r1, r3
 800b324:	f243 0001 	movw	r0, #12289	@ 0x3001
 800b328:	f000 faa0 	bl	800b86c <mlx90632_i2c_write>
 800b32c:	6078      	str	r0, [r7, #4]

    return ret;
 800b32e:	687b      	ldr	r3, [r7, #4]
}
 800b330:	4618      	mov	r0, r3
 800b332:	3708      	adds	r7, #8
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}

0800b338 <mlx90632_get_measurement_time>:

int32_t mlx90632_get_measurement_time(uint16_t meas)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b084      	sub	sp, #16
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	4603      	mov	r3, r0
 800b340:	80fb      	strh	r3, [r7, #6]
    int32_t ret;
    uint16_t reg;

    ret = mlx90632_i2c_read(meas, &reg);
 800b342:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b346:	f107 020a 	add.w	r2, r7, #10
 800b34a:	4611      	mov	r1, r2
 800b34c:	4618      	mov	r0, r3
 800b34e:	f000 fa3b 	bl	800b7c8 <mlx90632_i2c_read>
 800b352:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2b00      	cmp	r3, #0
 800b358:	da01      	bge.n	800b35e <mlx90632_get_measurement_time+0x26>
        return ret;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	e00d      	b.n	800b37a <mlx90632_get_measurement_time+0x42>

    reg &= MLX90632_EE_REFRESH_RATE_MASK;
 800b35e:	897b      	ldrh	r3, [r7, #10]
 800b360:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b364:	b29b      	uxth	r3, r3
 800b366:	817b      	strh	r3, [r7, #10]
    reg = reg >> 8;
 800b368:	897b      	ldrh	r3, [r7, #10]
 800b36a:	0a1b      	lsrs	r3, r3, #8
 800b36c:	b29b      	uxth	r3, r3
 800b36e:	817b      	strh	r3, [r7, #10]

    return MLX90632_MEAS_MAX_TIME >> reg;
 800b370:	897b      	ldrh	r3, [r7, #10]
 800b372:	461a      	mov	r2, r3
 800b374:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800b378:	4113      	asrs	r3, r2
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3710      	adds	r7, #16
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}

0800b382 <mlx90632_calculate_dataset_ready_time>:

int32_t mlx90632_calculate_dataset_ready_time(void)
{
 800b382:	b580      	push	{r7, lr}
 800b384:	b082      	sub	sp, #8
 800b386:	af00      	add	r7, sp, #0
    int32_t ret;
    int32_t refresh_time;

    ret = mlx90632_get_meas_type();
 800b388:	f000 fb42 	bl	800ba10 <mlx90632_get_meas_type>
 800b38c:	6038      	str	r0, [r7, #0]
    if (ret < 0)
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	2b00      	cmp	r3, #0
 800b392:	da01      	bge.n	800b398 <mlx90632_calculate_dataset_ready_time+0x16>
        return ret;
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	e04f      	b.n	800b438 <mlx90632_calculate_dataset_ready_time+0xb6>

    if ((ret != MLX90632_MTYP_MEDICAL_BURST) && (ret != MLX90632_MTYP_EXTENDED_BURST))
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	2b80      	cmp	r3, #128	@ 0x80
 800b39c:	d005      	beq.n	800b3aa <mlx90632_calculate_dataset_ready_time+0x28>
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	2b91      	cmp	r3, #145	@ 0x91
 800b3a2:	d002      	beq.n	800b3aa <mlx90632_calculate_dataset_ready_time+0x28>
        return -EINVAL;
 800b3a4:	f06f 0315 	mvn.w	r3, #21
 800b3a8:	e046      	b.n	800b438 <mlx90632_calculate_dataset_ready_time+0xb6>

    if (ret == MLX90632_MTYP_MEDICAL_BURST)
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	2b80      	cmp	r3, #128	@ 0x80
 800b3ae:	d11a      	bne.n	800b3e6 <mlx90632_calculate_dataset_ready_time+0x64>
    {
        ret = mlx90632_get_measurement_time(MLX90632_EE_MEDICAL_MEAS1);
 800b3b0:	f242 40e1 	movw	r0, #9441	@ 0x24e1
 800b3b4:	f7ff ffc0 	bl	800b338 <mlx90632_get_measurement_time>
 800b3b8:	6038      	str	r0, [r7, #0]
        if (ret < 0)
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	da01      	bge.n	800b3c4 <mlx90632_calculate_dataset_ready_time+0x42>
            return ret;
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	e039      	b.n	800b438 <mlx90632_calculate_dataset_ready_time+0xb6>

        refresh_time = ret;
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	607b      	str	r3, [r7, #4]

        ret = mlx90632_get_measurement_time(MLX90632_EE_MEDICAL_MEAS2);
 800b3c8:	f242 40e2 	movw	r0, #9442	@ 0x24e2
 800b3cc:	f7ff ffb4 	bl	800b338 <mlx90632_get_measurement_time>
 800b3d0:	6038      	str	r0, [r7, #0]
        if (ret < 0)
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	da01      	bge.n	800b3dc <mlx90632_calculate_dataset_ready_time+0x5a>
            return ret;
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	e02d      	b.n	800b438 <mlx90632_calculate_dataset_ready_time+0xb6>

        refresh_time = refresh_time + ret;
 800b3dc:	687a      	ldr	r2, [r7, #4]
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	4413      	add	r3, r2
 800b3e2:	607b      	str	r3, [r7, #4]
 800b3e4:	e027      	b.n	800b436 <mlx90632_calculate_dataset_ready_time+0xb4>
    }
    else
    {
        ret = mlx90632_get_measurement_time(MLX90632_EE_EXTENDED_MEAS1);
 800b3e6:	f242 40f1 	movw	r0, #9457	@ 0x24f1
 800b3ea:	f7ff ffa5 	bl	800b338 <mlx90632_get_measurement_time>
 800b3ee:	6038      	str	r0, [r7, #0]
        if (ret < 0)
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	da01      	bge.n	800b3fa <mlx90632_calculate_dataset_ready_time+0x78>
            return ret;
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	e01e      	b.n	800b438 <mlx90632_calculate_dataset_ready_time+0xb6>

        refresh_time = ret;
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	607b      	str	r3, [r7, #4]

        ret = mlx90632_get_measurement_time(MLX90632_EE_EXTENDED_MEAS2);
 800b3fe:	f242 40f2 	movw	r0, #9458	@ 0x24f2
 800b402:	f7ff ff99 	bl	800b338 <mlx90632_get_measurement_time>
 800b406:	6038      	str	r0, [r7, #0]
        if (ret < 0)
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	da01      	bge.n	800b412 <mlx90632_calculate_dataset_ready_time+0x90>
            return ret;
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	e012      	b.n	800b438 <mlx90632_calculate_dataset_ready_time+0xb6>

        refresh_time = refresh_time + ret;
 800b412:	687a      	ldr	r2, [r7, #4]
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	4413      	add	r3, r2
 800b418:	607b      	str	r3, [r7, #4]

        ret = mlx90632_get_measurement_time(MLX90632_EE_EXTENDED_MEAS3);
 800b41a:	f242 40f3 	movw	r0, #9459	@ 0x24f3
 800b41e:	f7ff ff8b 	bl	800b338 <mlx90632_get_measurement_time>
 800b422:	6038      	str	r0, [r7, #0]
        if (ret < 0)
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	2b00      	cmp	r3, #0
 800b428:	da01      	bge.n	800b42e <mlx90632_calculate_dataset_ready_time+0xac>
            return ret;
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	e004      	b.n	800b438 <mlx90632_calculate_dataset_ready_time+0xb6>

        refresh_time = refresh_time + ret;
 800b42e:	687a      	ldr	r2, [r7, #4]
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	4413      	add	r3, r2
 800b434:	607b      	str	r3, [r7, #4]
    }

    return refresh_time;
 800b436:	687b      	ldr	r3, [r7, #4]
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3708      	adds	r7, #8
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}

0800b440 <mlx90632_start_measurement_burst>:

int32_t mlx90632_start_measurement_burst(void)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b084      	sub	sp, #16
 800b444:	af00      	add	r7, sp, #0
    int32_t ret;
    int tries = MLX90632_MAX_NUMBER_MESUREMENT_READ_TRIES;
 800b446:	2364      	movs	r3, #100	@ 0x64
 800b448:	60fb      	str	r3, [r7, #12]
    uint16_t reg;

    ret = mlx90632_i2c_read(MLX90632_REG_CTRL, &reg);
 800b44a:	1dbb      	adds	r3, r7, #6
 800b44c:	4619      	mov	r1, r3
 800b44e:	f243 0001 	movw	r0, #12289	@ 0x3001
 800b452:	f000 f9b9 	bl	800b7c8 <mlx90632_i2c_read>
 800b456:	60b8      	str	r0, [r7, #8]
    if (ret < 0)
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	da01      	bge.n	800b462 <mlx90632_start_measurement_burst+0x22>
        return ret;
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	e041      	b.n	800b4e6 <mlx90632_start_measurement_burst+0xa6>

    reg |= MLX90632_START_BURST_MEAS;
 800b462:	88fb      	ldrh	r3, [r7, #6]
 800b464:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800b468:	b29b      	uxth	r3, r3
 800b46a:	80fb      	strh	r3, [r7, #6]

    ret = mlx90632_i2c_write(MLX90632_REG_CTRL, reg);
 800b46c:	88fb      	ldrh	r3, [r7, #6]
 800b46e:	4619      	mov	r1, r3
 800b470:	f243 0001 	movw	r0, #12289	@ 0x3001
 800b474:	f000 f9fa 	bl	800b86c <mlx90632_i2c_write>
 800b478:	60b8      	str	r0, [r7, #8]
    if (ret < 0)
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	da01      	bge.n	800b484 <mlx90632_start_measurement_burst+0x44>
        return ret;
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	e030      	b.n	800b4e6 <mlx90632_start_measurement_burst+0xa6>

    ret = mlx90632_calculate_dataset_ready_time();
 800b484:	f7ff ff7d 	bl	800b382 <mlx90632_calculate_dataset_ready_time>
 800b488:	60b8      	str	r0, [r7, #8]
    if (ret < 0)
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	da01      	bge.n	800b494 <mlx90632_start_measurement_burst+0x54>
        return ret;
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	e028      	b.n	800b4e6 <mlx90632_start_measurement_burst+0xa6>
    msleep(ret); /* Waiting for refresh of all the measurement tables */
 800b494:	68b8      	ldr	r0, [r7, #8]
 800b496:	f000 fa29 	bl	800b8ec <msleep>

    while (tries-- > 0)
 800b49a:	e016      	b.n	800b4ca <mlx90632_start_measurement_burst+0x8a>
    {
        ret = mlx90632_i2c_read(MLX90632_REG_STATUS, &reg);
 800b49c:	1dbb      	adds	r3, r7, #6
 800b49e:	4619      	mov	r1, r3
 800b4a0:	f643 70ff 	movw	r0, #16383	@ 0x3fff
 800b4a4:	f000 f990 	bl	800b7c8 <mlx90632_i2c_read>
 800b4a8:	60b8      	str	r0, [r7, #8]
        if (ret < 0)
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	da01      	bge.n	800b4b4 <mlx90632_start_measurement_burst+0x74>
            return ret;
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	e018      	b.n	800b4e6 <mlx90632_start_measurement_burst+0xa6>
        if ((reg & MLX90632_STAT_BUSY) == 0)
 800b4b4:	88fb      	ldrh	r3, [r7, #6]
 800b4b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d00b      	beq.n	800b4d6 <mlx90632_start_measurement_burst+0x96>
            break;
        /* minimum wait time to complete measurement
         * should be calculated according to refresh rate
         * atm 10ms - 11ms
         */
        usleep(10000, 11000);
 800b4be:	f642 21f8 	movw	r1, #11000	@ 0x2af8
 800b4c2:	f242 7010 	movw	r0, #10000	@ 0x2710
 800b4c6:	f000 f9f9 	bl	800b8bc <usleep>
    while (tries-- > 0)
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	1e5a      	subs	r2, r3, #1
 800b4ce:	60fa      	str	r2, [r7, #12]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	dce3      	bgt.n	800b49c <mlx90632_start_measurement_burst+0x5c>
 800b4d4:	e000      	b.n	800b4d8 <mlx90632_start_measurement_burst+0x98>
            break;
 800b4d6:	bf00      	nop
    }

    if (tries < 0)
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	da02      	bge.n	800b4e4 <mlx90632_start_measurement_burst+0xa4>
    {
        // data not ready
        return -ETIMEDOUT;
 800b4de:	f06f 0373 	mvn.w	r3, #115	@ 0x73
 800b4e2:	e000      	b.n	800b4e6 <mlx90632_start_measurement_burst+0xa6>
    }

    return 0;
 800b4e4:	2300      	movs	r3, #0
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3710      	adds	r7, #16
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}

0800b4ee <mlx90632_read_eeprom>:
        return MLX90632_MEAS_HZ_ERROR;

    return (mlx90632_meas_t)MLX90632_REFRESH_RATE(meas1);
}
int mlx90632_read_eeprom(int32_t *PR, int32_t *PG, int32_t *PO, int32_t *PT, int32_t *Ea, int32_t *Eb, int32_t *Fa, int32_t *Fb, int32_t *Ga, int16_t *Gb, int16_t *Ha, int16_t *Hb, int16_t *Ka)
  {
 800b4ee:	b580      	push	{r7, lr}
 800b4f0:	b086      	sub	sp, #24
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	60f8      	str	r0, [r7, #12]
 800b4f6:	60b9      	str	r1, [r7, #8]
 800b4f8:	607a      	str	r2, [r7, #4]
 800b4fa:	603b      	str	r3, [r7, #0]
    int32_t ret;
    ret = mlx90632_i2c_read32(MLX90632_EE_P_R, (uint32_t *) PR);
 800b4fc:	68f9      	ldr	r1, [r7, #12]
 800b4fe:	f242 400c 	movw	r0, #9228	@ 0x240c
 800b502:	f000 f989 	bl	800b818 <mlx90632_i2c_read32>
 800b506:	6178      	str	r0, [r7, #20]
   // printf("P_R %ld\n",PR);
    if(ret < 0)
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	da01      	bge.n	800b512 <mlx90632_read_eeprom+0x24>
      return ret;
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	e084      	b.n	800b61c <mlx90632_read_eeprom+0x12e>
    ret = mlx90632_i2c_read32(MLX90632_EE_P_G, (uint32_t *) PG);
 800b512:	68b9      	ldr	r1, [r7, #8]
 800b514:	f242 400e 	movw	r0, #9230	@ 0x240e
 800b518:	f000 f97e 	bl	800b818 <mlx90632_i2c_read32>
 800b51c:	6178      	str	r0, [r7, #20]
   // printf("P_G %d\n",PG);
    if(ret < 0)
 800b51e:	697b      	ldr	r3, [r7, #20]
 800b520:	2b00      	cmp	r3, #0
 800b522:	da01      	bge.n	800b528 <mlx90632_read_eeprom+0x3a>
      return ret;
 800b524:	697b      	ldr	r3, [r7, #20]
 800b526:	e079      	b.n	800b61c <mlx90632_read_eeprom+0x12e>
    ret = mlx90632_i2c_read32(MLX90632_EE_P_O, (uint32_t *) PO);
 800b528:	6879      	ldr	r1, [r7, #4]
 800b52a:	f242 4012 	movw	r0, #9234	@ 0x2412
 800b52e:	f000 f973 	bl	800b818 <mlx90632_i2c_read32>
 800b532:	6178      	str	r0, [r7, #20]
   // printf("P_o %d\n",PO);
    if(ret < 0)
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	2b00      	cmp	r3, #0
 800b538:	da01      	bge.n	800b53e <mlx90632_read_eeprom+0x50>
      return ret;
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	e06e      	b.n	800b61c <mlx90632_read_eeprom+0x12e>
    ret = mlx90632_i2c_read32(MLX90632_EE_P_T, (uint32_t *) PT);
 800b53e:	6839      	ldr	r1, [r7, #0]
 800b540:	f242 4010 	movw	r0, #9232	@ 0x2410
 800b544:	f000 f968 	bl	800b818 <mlx90632_i2c_read32>
 800b548:	6178      	str	r0, [r7, #20]
   // printf("P_T %d\n",PT);
    if(ret < 0)
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	da01      	bge.n	800b554 <mlx90632_read_eeprom+0x66>
      return ret;
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	e063      	b.n	800b61c <mlx90632_read_eeprom+0x12e>
    ret = mlx90632_i2c_read32(MLX90632_EE_Ea, (uint32_t *) Ea);
 800b554:	6a39      	ldr	r1, [r7, #32]
 800b556:	f242 4024 	movw	r0, #9252	@ 0x2424
 800b55a:	f000 f95d 	bl	800b818 <mlx90632_i2c_read32>
 800b55e:	6178      	str	r0, [r7, #20]
   // printf("E_A %d\n",Ea);
    if(ret < 0)
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	2b00      	cmp	r3, #0
 800b564:	da01      	bge.n	800b56a <mlx90632_read_eeprom+0x7c>
      return ret;
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	e058      	b.n	800b61c <mlx90632_read_eeprom+0x12e>
    ret = mlx90632_i2c_read32(MLX90632_EE_Eb, (uint32_t *) Eb);
 800b56a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b56c:	f242 4026 	movw	r0, #9254	@ 0x2426
 800b570:	f000 f952 	bl	800b818 <mlx90632_i2c_read32>
 800b574:	6178      	str	r0, [r7, #20]
   // printf("E_b %d\n",Eb);
    if(ret < 0)
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	da01      	bge.n	800b580 <mlx90632_read_eeprom+0x92>
      return ret;
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	e04d      	b.n	800b61c <mlx90632_read_eeprom+0x12e>
    ret = mlx90632_i2c_read32(MLX90632_EE_Fa, (uint32_t *) Fa);
 800b580:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b582:	f242 4028 	movw	r0, #9256	@ 0x2428
 800b586:	f000 f947 	bl	800b818 <mlx90632_i2c_read32>
 800b58a:	6178      	str	r0, [r7, #20]
   // printf("F_A %d\n",Fa);
    if(ret < 0)
 800b58c:	697b      	ldr	r3, [r7, #20]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	da01      	bge.n	800b596 <mlx90632_read_eeprom+0xa8>
      return ret;
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	e042      	b.n	800b61c <mlx90632_read_eeprom+0x12e>
    ret = mlx90632_i2c_read32(MLX90632_EE_Fb, (uint32_t *) Fb);
 800b596:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b598:	f242 402a 	movw	r0, #9258	@ 0x242a
 800b59c:	f000 f93c 	bl	800b818 <mlx90632_i2c_read32>
 800b5a0:	6178      	str	r0, [r7, #20]
   // printf("F_b %d\n",Fb);
    if(ret < 0)
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	da01      	bge.n	800b5ac <mlx90632_read_eeprom+0xbe>
      return ret;
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	e037      	b.n	800b61c <mlx90632_read_eeprom+0x12e>
    ret = mlx90632_i2c_read32(MLX90632_EE_Ga, (uint32_t *) Ga);
 800b5ac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b5ae:	f242 402c 	movw	r0, #9260	@ 0x242c
 800b5b2:	f000 f931 	bl	800b818 <mlx90632_i2c_read32>
 800b5b6:	6178      	str	r0, [r7, #20]
   // printf("G_A %d\n",Ga);
    if(ret < 0)
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	da01      	bge.n	800b5c2 <mlx90632_read_eeprom+0xd4>
      return ret;
 800b5be:	697b      	ldr	r3, [r7, #20]
 800b5c0:	e02c      	b.n	800b61c <mlx90632_read_eeprom+0x12e>
    ret = mlx90632_i2c_read(MLX90632_EE_Gb, (uint16_t *) Gb);
 800b5c2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b5c4:	f242 402e 	movw	r0, #9262	@ 0x242e
 800b5c8:	f000 f8fe 	bl	800b7c8 <mlx90632_i2c_read>
 800b5cc:	6178      	str	r0, [r7, #20]
   // printf("G_b %d\n",Gb);
    if(ret < 0)
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	da01      	bge.n	800b5d8 <mlx90632_read_eeprom+0xea>
      return ret;
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	e021      	b.n	800b61c <mlx90632_read_eeprom+0x12e>
    ret = mlx90632_i2c_read(MLX90632_EE_Ha, (uint16_t *) Ha);
 800b5d8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b5da:	f242 4081 	movw	r0, #9345	@ 0x2481
 800b5de:	f000 f8f3 	bl	800b7c8 <mlx90632_i2c_read>
 800b5e2:	6178      	str	r0, [r7, #20]
   // printf("H_A %d\n",Ha);
    if(ret < 0)
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	da01      	bge.n	800b5ee <mlx90632_read_eeprom+0x100>
      return ret;
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	e016      	b.n	800b61c <mlx90632_read_eeprom+0x12e>
    ret = mlx90632_i2c_read(MLX90632_EE_Hb, (uint16_t *) Hb);
 800b5ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b5f0:	f242 4082 	movw	r0, #9346	@ 0x2482
 800b5f4:	f000 f8e8 	bl	800b7c8 <mlx90632_i2c_read>
 800b5f8:	6178      	str	r0, [r7, #20]
   // printf("H_b %d\n",Hb);
    if(ret < 0)
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	da01      	bge.n	800b604 <mlx90632_read_eeprom+0x116>
      return ret;
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	e00b      	b.n	800b61c <mlx90632_read_eeprom+0x12e>
    ret = mlx90632_i2c_read(MLX90632_EE_Ka, (uint16_t *) Ka);
 800b604:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b606:	f242 402f 	movw	r0, #9263	@ 0x242f
 800b60a:	f000 f8dd 	bl	800b7c8 <mlx90632_i2c_read>
 800b60e:	6178      	str	r0, [r7, #20]
   // printf("K_A %d\n",Ka);
    if(ret < 0)
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	2b00      	cmp	r3, #0
 800b614:	da01      	bge.n	800b61a <mlx90632_read_eeprom+0x12c>
      return ret;
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	e000      	b.n	800b61c <mlx90632_read_eeprom+0x12e>
    return 0;
 800b61a:	2300      	movs	r3, #0
  }
 800b61c:	4618      	mov	r0, r3
 800b61e:	3718      	adds	r7, #24
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <Temp>:
float * Temp(void)
{
 800b624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b628:	b086      	sub	sp, #24
 800b62a:	af06      	add	r7, sp, #24
	static float o[2];
	mlx90632_read_temp_raw_burst(&ambient_new_raw, &ambient_old_raw,&object_new_raw, &object_old_raw);
 800b62c:	4b51      	ldr	r3, [pc, #324]	@ (800b774 <Temp+0x150>)
 800b62e:	4a52      	ldr	r2, [pc, #328]	@ (800b778 <Temp+0x154>)
 800b630:	4952      	ldr	r1, [pc, #328]	@ (800b77c <Temp+0x158>)
 800b632:	4853      	ldr	r0, [pc, #332]	@ (800b780 <Temp+0x15c>)
 800b634:	f7ff fa8b 	bl	800ab4e <mlx90632_read_temp_raw_burst>
	//uint16_t d;
	//mlx90632_i2c_read(MLX90632_REG_CTRL, &d);
	//printf("CT %x \n",d);
	o[1] = mlx90632_calc_temp_ambient(ambient_new_raw, ambient_old_raw,PT, PR, PG, PO, Gb);
 800b638:	4b51      	ldr	r3, [pc, #324]	@ (800b780 <Temp+0x15c>)
 800b63a:	f9b3 0000 	ldrsh.w	r0, [r3]
 800b63e:	4b4f      	ldr	r3, [pc, #316]	@ (800b77c <Temp+0x158>)
 800b640:	f9b3 4000 	ldrsh.w	r4, [r3]
 800b644:	4b4f      	ldr	r3, [pc, #316]	@ (800b784 <Temp+0x160>)
 800b646:	681d      	ldr	r5, [r3, #0]
 800b648:	4b4f      	ldr	r3, [pc, #316]	@ (800b788 <Temp+0x164>)
 800b64a:	681e      	ldr	r6, [r3, #0]
 800b64c:	4b4f      	ldr	r3, [pc, #316]	@ (800b78c <Temp+0x168>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	4a4f      	ldr	r2, [pc, #316]	@ (800b790 <Temp+0x16c>)
 800b652:	6812      	ldr	r2, [r2, #0]
 800b654:	494f      	ldr	r1, [pc, #316]	@ (800b794 <Temp+0x170>)
 800b656:	f9b1 1000 	ldrsh.w	r1, [r1]
 800b65a:	9102      	str	r1, [sp, #8]
 800b65c:	9201      	str	r2, [sp, #4]
 800b65e:	9300      	str	r3, [sp, #0]
 800b660:	4633      	mov	r3, r6
 800b662:	462a      	mov	r2, r5
 800b664:	4621      	mov	r1, r4
 800b666:	f7ff fb6f 	bl	800ad48 <mlx90632_calc_temp_ambient>
 800b66a:	ec53 2b10 	vmov	r2, r3, d0
 800b66e:	4610      	mov	r0, r2
 800b670:	4619      	mov	r1, r3
 800b672:	f7fc fa99 	bl	8007ba8 <__aeabi_d2f>
 800b676:	4603      	mov	r3, r0
 800b678:	4a47      	ldr	r2, [pc, #284]	@ (800b798 <Temp+0x174>)
 800b67a:	6053      	str	r3, [r2, #4]

	 pre_ambient = mlx90632_preprocess_temp_ambient(ambient_new_raw, ambient_old_raw, Gb);
 800b67c:	4b40      	ldr	r3, [pc, #256]	@ (800b780 <Temp+0x15c>)
 800b67e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b682:	4a3e      	ldr	r2, [pc, #248]	@ (800b77c <Temp+0x158>)
 800b684:	f9b2 1000 	ldrsh.w	r1, [r2]
 800b688:	4a42      	ldr	r2, [pc, #264]	@ (800b794 <Temp+0x170>)
 800b68a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800b68e:	4618      	mov	r0, r3
 800b690:	f7ff fa82 	bl	800ab98 <mlx90632_preprocess_temp_ambient>
 800b694:	eeb0 7a40 	vmov.f32	s14, s0
 800b698:	eef0 7a60 	vmov.f32	s15, s1
 800b69c:	4b3f      	ldr	r3, [pc, #252]	@ (800b79c <Temp+0x178>)
 800b69e:	ed83 7b00 	vstr	d7, [r3]
	 pre_object = mlx90632_preprocess_temp_object(object_new_raw, object_old_raw, ambient_new_raw, ambient_old_raw,Ka);
 800b6a2:	4b35      	ldr	r3, [pc, #212]	@ (800b778 <Temp+0x154>)
 800b6a4:	f9b3 0000 	ldrsh.w	r0, [r3]
 800b6a8:	4b32      	ldr	r3, [pc, #200]	@ (800b774 <Temp+0x150>)
 800b6aa:	f9b3 1000 	ldrsh.w	r1, [r3]
 800b6ae:	4b34      	ldr	r3, [pc, #208]	@ (800b780 <Temp+0x15c>)
 800b6b0:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b6b4:	4b31      	ldr	r3, [pc, #196]	@ (800b77c <Temp+0x158>)
 800b6b6:	f9b3 4000 	ldrsh.w	r4, [r3]
 800b6ba:	4b39      	ldr	r3, [pc, #228]	@ (800b7a0 <Temp+0x17c>)
 800b6bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b6c0:	9300      	str	r3, [sp, #0]
 800b6c2:	4623      	mov	r3, r4
 800b6c4:	f7ff face 	bl	800ac64 <mlx90632_preprocess_temp_object>
 800b6c8:	eeb0 7a40 	vmov.f32	s14, s0
 800b6cc:	eef0 7a60 	vmov.f32	s15, s1
 800b6d0:	4b34      	ldr	r3, [pc, #208]	@ (800b7a4 <Temp+0x180>)
 800b6d2:	ed83 7b00 	vstr	d7, [r3]
	 /* Calculate object temperature */
	 o[0] = mlx90632_calc_temp_object(pre_object, pre_ambient, Ea, Eb, Ga, Fa, Fb, Ha, Hb);
 800b6d6:	4b33      	ldr	r3, [pc, #204]	@ (800b7a4 <Temp+0x180>)
 800b6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6dc:	4610      	mov	r0, r2
 800b6de:	4619      	mov	r1, r3
 800b6e0:	f7fc fa1a 	bl	8007b18 <__aeabi_d2iz>
 800b6e4:	4680      	mov	r8, r0
 800b6e6:	4b2d      	ldr	r3, [pc, #180]	@ (800b79c <Temp+0x178>)
 800b6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ec:	4610      	mov	r0, r2
 800b6ee:	4619      	mov	r1, r3
 800b6f0:	f7fc fa12 	bl	8007b18 <__aeabi_d2iz>
 800b6f4:	4684      	mov	ip, r0
 800b6f6:	4b2c      	ldr	r3, [pc, #176]	@ (800b7a8 <Temp+0x184>)
 800b6f8:	681d      	ldr	r5, [r3, #0]
 800b6fa:	4b2c      	ldr	r3, [pc, #176]	@ (800b7ac <Temp+0x188>)
 800b6fc:	681e      	ldr	r6, [r3, #0]
 800b6fe:	4b2c      	ldr	r3, [pc, #176]	@ (800b7b0 <Temp+0x18c>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	4a2c      	ldr	r2, [pc, #176]	@ (800b7b4 <Temp+0x190>)
 800b704:	6812      	ldr	r2, [r2, #0]
 800b706:	492c      	ldr	r1, [pc, #176]	@ (800b7b8 <Temp+0x194>)
 800b708:	6809      	ldr	r1, [r1, #0]
 800b70a:	482c      	ldr	r0, [pc, #176]	@ (800b7bc <Temp+0x198>)
 800b70c:	f9b0 0000 	ldrsh.w	r0, [r0]
 800b710:	4c2b      	ldr	r4, [pc, #172]	@ (800b7c0 <Temp+0x19c>)
 800b712:	f9b4 4000 	ldrsh.w	r4, [r4]
 800b716:	9404      	str	r4, [sp, #16]
 800b718:	9003      	str	r0, [sp, #12]
 800b71a:	9102      	str	r1, [sp, #8]
 800b71c:	9201      	str	r2, [sp, #4]
 800b71e:	9300      	str	r3, [sp, #0]
 800b720:	4633      	mov	r3, r6
 800b722:	462a      	mov	r2, r5
 800b724:	4661      	mov	r1, ip
 800b726:	4640      	mov	r0, r8
 800b728:	f7ff fd12 	bl	800b150 <mlx90632_calc_temp_object>
 800b72c:	ec53 2b10 	vmov	r2, r3, d0
 800b730:	4610      	mov	r0, r2
 800b732:	4619      	mov	r1, r3
 800b734:	f7fc fa38 	bl	8007ba8 <__aeabi_d2f>
 800b738:	4603      	mov	r3, r0
 800b73a:	4a17      	ldr	r2, [pc, #92]	@ (800b798 <Temp+0x174>)
 800b73c:	6013      	str	r3, [r2, #0]

	 printf("\n OBject_Temperature: %f & Ambient: %f \t \r\n",o[0],o[1]);
 800b73e:	4b16      	ldr	r3, [pc, #88]	@ (800b798 <Temp+0x174>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	4618      	mov	r0, r3
 800b744:	f7fb fee0 	bl	8007508 <__aeabi_f2d>
 800b748:	4604      	mov	r4, r0
 800b74a:	460d      	mov	r5, r1
 800b74c:	4b12      	ldr	r3, [pc, #72]	@ (800b798 <Temp+0x174>)
 800b74e:	685b      	ldr	r3, [r3, #4]
 800b750:	4618      	mov	r0, r3
 800b752:	f7fb fed9 	bl	8007508 <__aeabi_f2d>
 800b756:	4602      	mov	r2, r0
 800b758:	460b      	mov	r3, r1
 800b75a:	e9cd 2300 	strd	r2, r3, [sp]
 800b75e:	4622      	mov	r2, r4
 800b760:	462b      	mov	r3, r5
 800b762:	4818      	ldr	r0, [pc, #96]	@ (800b7c4 <Temp+0x1a0>)
 800b764:	f00e fbfc 	bl	8019f60 <iprintf>
	 return o;
 800b768:	4b0b      	ldr	r3, [pc, #44]	@ (800b798 <Temp+0x174>)
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	46bd      	mov	sp, r7
 800b76e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b772:	bf00      	nop
 800b774:	200004fa 	.word	0x200004fa
 800b778:	200004f8 	.word	0x200004f8
 800b77c:	200004f6 	.word	0x200004f6
 800b780:	200004f4 	.word	0x200004f4
 800b784:	20000010 	.word	0x20000010
 800b788:	20000008 	.word	0x20000008
 800b78c:	2000000c 	.word	0x2000000c
 800b790:	20000014 	.word	0x20000014
 800b794:	2000002e 	.word	0x2000002e
 800b798:	20000518 	.word	0x20000518
 800b79c:	20000500 	.word	0x20000500
 800b7a0:	20000030 	.word	0x20000030
 800b7a4:	20000508 	.word	0x20000508
 800b7a8:	20000018 	.word	0x20000018
 800b7ac:	2000001c 	.word	0x2000001c
 800b7b0:	20000028 	.word	0x20000028
 800b7b4:	20000020 	.word	0x20000020
 800b7b8:	20000024 	.word	0x20000024
 800b7bc:	2000002c 	.word	0x2000002c
 800b7c0:	200004f2 	.word	0x200004f2
 800b7c4:	0801dc60 	.word	0x0801dc60

0800b7c8 <mlx90632_i2c_read>:




int32_t mlx90632_i2c_read(int16_t register_address, uint16_t *value)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b088      	sub	sp, #32
 800b7cc:	af04      	add	r7, sp, #16
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	6039      	str	r1, [r7, #0]
 800b7d2:	80fb      	strh	r3, [r7, #6]
  uint8_t data[2];
  int32_t ret;
  ret =  HAL_I2C_Mem_Read(&hi2c3,Mlx90632_address,register_address,I2C_MEMADD_SIZE_16BIT,data,2,HAL_MAX_DELAY); //i2c_read(register_address,data,2);
 800b7d4:	88fa      	ldrh	r2, [r7, #6]
 800b7d6:	f04f 33ff 	mov.w	r3, #4294967295
 800b7da:	9302      	str	r3, [sp, #8]
 800b7dc:	2302      	movs	r3, #2
 800b7de:	9301      	str	r3, [sp, #4]
 800b7e0:	f107 0308 	add.w	r3, r7, #8
 800b7e4:	9300      	str	r3, [sp, #0]
 800b7e6:	2302      	movs	r3, #2
 800b7e8:	2174      	movs	r1, #116	@ 0x74
 800b7ea:	480a      	ldr	r0, [pc, #40]	@ (800b814 <mlx90632_i2c_read+0x4c>)
 800b7ec:	f006 fbde 	bl	8011fac <HAL_I2C_Mem_Read>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	60fb      	str	r3, [r7, #12]
    //Endianness
  *value = data[1]|(data[0]<<8);
 800b7f4:	7a7b      	ldrb	r3, [r7, #9]
 800b7f6:	b21a      	sxth	r2, r3
 800b7f8:	7a3b      	ldrb	r3, [r7, #8]
 800b7fa:	021b      	lsls	r3, r3, #8
 800b7fc:	b21b      	sxth	r3, r3
 800b7fe:	4313      	orrs	r3, r2
 800b800:	b21b      	sxth	r3, r3
 800b802:	b29a      	uxth	r2, r3
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	801a      	strh	r2, [r3, #0]
//  //printf("%dread: %x %x=%x \n", ret,data[0],data[1],*value);
  return ret;
 800b808:	68fb      	ldr	r3, [r7, #12]

}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3710      	adds	r7, #16
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}
 800b812:	bf00      	nop
 800b814:	20000460 	.word	0x20000460

0800b818 <mlx90632_i2c_read32>:

/* Implementation of I2C read for 32-bit values */
int32_t mlx90632_i2c_read32(int16_t register_address,uint32_t *value)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b088      	sub	sp, #32
 800b81c:	af04      	add	r7, sp, #16
 800b81e:	4603      	mov	r3, r0
 800b820:	6039      	str	r1, [r7, #0]
 800b822:	80fb      	strh	r3, [r7, #6]
  uint8_t data[4];
  int32_t ret;
  ret =  HAL_I2C_Mem_Read(&hi2c3,Mlx90632_address,register_address,I2C_MEMADD_SIZE_16BIT,data,4,HAL_MAX_DELAY); //i2c_read(register_address,data,2);
 800b824:	88fa      	ldrh	r2, [r7, #6]
 800b826:	f04f 33ff 	mov.w	r3, #4294967295
 800b82a:	9302      	str	r3, [sp, #8]
 800b82c:	2304      	movs	r3, #4
 800b82e:	9301      	str	r3, [sp, #4]
 800b830:	f107 0308 	add.w	r3, r7, #8
 800b834:	9300      	str	r3, [sp, #0]
 800b836:	2302      	movs	r3, #2
 800b838:	2174      	movs	r1, #116	@ 0x74
 800b83a:	480b      	ldr	r0, [pc, #44]	@ (800b868 <mlx90632_i2c_read32+0x50>)
 800b83c:	f006 fbb6 	bl	8011fac <HAL_I2C_Mem_Read>
 800b840:	4603      	mov	r3, r0
 800b842:	60fb      	str	r3, [r7, #12]
  //Endianness
  *value = data[2]<<24|data[3]<<16|data[0]<<8|data[1];
 800b844:	7abb      	ldrb	r3, [r7, #10]
 800b846:	061a      	lsls	r2, r3, #24
 800b848:	7afb      	ldrb	r3, [r7, #11]
 800b84a:	041b      	lsls	r3, r3, #16
 800b84c:	431a      	orrs	r2, r3
 800b84e:	7a3b      	ldrb	r3, [r7, #8]
 800b850:	021b      	lsls	r3, r3, #8
 800b852:	4313      	orrs	r3, r2
 800b854:	7a7a      	ldrb	r2, [r7, #9]
 800b856:	4313      	orrs	r3, r2
 800b858:	461a      	mov	r2, r3
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	601a      	str	r2, [r3, #0]
//  *value= data[0]<<24|data[1]<<16|data[2]<<8|data[3];
  //printf("val32 %x %x %x %x %x\n",data[0],data[1],data[2],data[3],*value);
  return ret;
 800b85e:	68fb      	ldr	r3, [r7, #12]
}
 800b860:	4618      	mov	r0, r3
 800b862:	3710      	adds	r7, #16
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}
 800b868:	20000460 	.word	0x20000460

0800b86c <mlx90632_i2c_write>:

int32_t mlx90632_i2c_write(int16_t register_address, uint16_t value) {
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b088      	sub	sp, #32
 800b870:	af04      	add	r7, sp, #16
 800b872:	4603      	mov	r3, r0
 800b874:	460a      	mov	r2, r1
 800b876:	80fb      	strh	r3, [r7, #6]
 800b878:	4613      	mov	r3, r2
 800b87a:	80bb      	strh	r3, [r7, #4]
  int32_t ret;
  uint8_t data[2];
  data[0] = value >> 8;
 800b87c:	88bb      	ldrh	r3, [r7, #4]
 800b87e:	0a1b      	lsrs	r3, r3, #8
 800b880:	b29b      	uxth	r3, r3
 800b882:	b2db      	uxtb	r3, r3
 800b884:	723b      	strb	r3, [r7, #8]
  data[1] = value;
 800b886:	88bb      	ldrh	r3, [r7, #4]
 800b888:	b2db      	uxtb	r3, r3
 800b88a:	727b      	strb	r3, [r7, #9]
  return ret =  HAL_I2C_Mem_Write(&hi2c3,Mlx90632_address,register_address,I2C_MEMADD_SIZE_16BIT,data,2,HAL_MAX_DELAY); //i2c_read(register_address,data,2);
 800b88c:	88fa      	ldrh	r2, [r7, #6]
 800b88e:	f04f 33ff 	mov.w	r3, #4294967295
 800b892:	9302      	str	r3, [sp, #8]
 800b894:	2302      	movs	r3, #2
 800b896:	9301      	str	r3, [sp, #4]
 800b898:	f107 0308 	add.w	r3, r7, #8
 800b89c:	9300      	str	r3, [sp, #0]
 800b89e:	2302      	movs	r3, #2
 800b8a0:	2174      	movs	r1, #116	@ 0x74
 800b8a2:	4805      	ldr	r0, [pc, #20]	@ (800b8b8 <mlx90632_i2c_write+0x4c>)
 800b8a4:	f006 fa6e 	bl	8011d84 <HAL_I2C_Mem_Write>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	60fb      	str	r3, [r7, #12]
 800b8ac:	68fb      	ldr	r3, [r7, #12]
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3710      	adds	r7, #16
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}
 800b8b6:	bf00      	nop
 800b8b8:	20000460 	.word	0x20000460

0800b8bc <usleep>:

void usleep(int min_range, int max_range)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6039      	str	r1, [r7, #0]
 int a= min_range/1000;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	4a07      	ldr	r2, [pc, #28]	@ (800b8e8 <usleep+0x2c>)
 800b8ca:	fb82 1203 	smull	r1, r2, r2, r3
 800b8ce:	1192      	asrs	r2, r2, #6
 800b8d0:	17db      	asrs	r3, r3, #31
 800b8d2:	1ad3      	subs	r3, r2, r3
 800b8d4:	60fb      	str	r3, [r7, #12]
	HAL_Delay(a);
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f7fd f9b0 	bl	8008c3e <HAL_Delay>
//	 __HAL_TIM_SET_COUNTER(&htim, 0);
//	    while (__HAL_TIM_GET_COUNTER(&htim2) < min_range);
}
 800b8de:	bf00      	nop
 800b8e0:	3710      	adds	r7, #16
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}
 800b8e6:	bf00      	nop
 800b8e8:	10624dd3 	.word	0x10624dd3

0800b8ec <msleep>:

void msleep(int msecs)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b082      	sub	sp, #8
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
	HAL_Delay(msecs);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f7fd f9a1 	bl	8008c3e <HAL_Delay>
}
 800b8fc:	bf00      	nop
 800b8fe:	3708      	adds	r7, #8
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <mlx90632_set_meas_type>:

    return temp;
}

int32_t mlx90632_set_meas_type(uint8_t type)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b084      	sub	sp, #16
 800b908:	af00      	add	r7, sp, #0
 800b90a:	4603      	mov	r3, r0
 800b90c:	71fb      	strb	r3, [r7, #7]
    int32_t ret;
    uint16_t reg_ctrl;

    if ((type != MLX90632_MTYP_MEDICAL) & (type != MLX90632_MTYP_EXTENDED) & (type != MLX90632_MTYP_MEDICAL_BURST) & (type != MLX90632_MTYP_EXTENDED_BURST))
 800b90e:	79fb      	ldrb	r3, [r7, #7]
 800b910:	2b00      	cmp	r3, #0
 800b912:	bf14      	ite	ne
 800b914:	2301      	movne	r3, #1
 800b916:	2300      	moveq	r3, #0
 800b918:	b2da      	uxtb	r2, r3
 800b91a:	79fb      	ldrb	r3, [r7, #7]
 800b91c:	2b11      	cmp	r3, #17
 800b91e:	bf14      	ite	ne
 800b920:	2301      	movne	r3, #1
 800b922:	2300      	moveq	r3, #0
 800b924:	b2db      	uxtb	r3, r3
 800b926:	4013      	ands	r3, r2
 800b928:	b2db      	uxtb	r3, r3
 800b92a:	461a      	mov	r2, r3
 800b92c:	79fb      	ldrb	r3, [r7, #7]
 800b92e:	2b80      	cmp	r3, #128	@ 0x80
 800b930:	bf14      	ite	ne
 800b932:	2301      	movne	r3, #1
 800b934:	2300      	moveq	r3, #0
 800b936:	b2db      	uxtb	r3, r3
 800b938:	4013      	ands	r3, r2
 800b93a:	79fa      	ldrb	r2, [r7, #7]
 800b93c:	2a91      	cmp	r2, #145	@ 0x91
 800b93e:	bf14      	ite	ne
 800b940:	2201      	movne	r2, #1
 800b942:	2200      	moveq	r2, #0
 800b944:	b2d2      	uxtb	r2, r2
 800b946:	4013      	ands	r3, r2
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d002      	beq.n	800b952 <mlx90632_set_meas_type+0x4e>
        return -EINVAL;
 800b94c:	f06f 0315 	mvn.w	r3, #21
 800b950:	e05a      	b.n	800ba08 <mlx90632_set_meas_type+0x104>

    ret = mlx90632_addressed_reset();
 800b952:	f7ff fcb3 	bl	800b2bc <mlx90632_addressed_reset>
 800b956:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	da01      	bge.n	800b962 <mlx90632_set_meas_type+0x5e>
        return ret;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	e052      	b.n	800ba08 <mlx90632_set_meas_type+0x104>

    ret = mlx90632_i2c_read(MLX90632_REG_CTRL, &reg_ctrl);
 800b962:	f107 030a 	add.w	r3, r7, #10
 800b966:	4619      	mov	r1, r3
 800b968:	f243 0001 	movw	r0, #12289	@ 0x3001
 800b96c:	f7ff ff2c 	bl	800b7c8 <mlx90632_i2c_read>
 800b970:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	2b00      	cmp	r3, #0
 800b976:	da01      	bge.n	800b97c <mlx90632_set_meas_type+0x78>
        return ret;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	e045      	b.n	800ba08 <mlx90632_set_meas_type+0x104>

    reg_ctrl = reg_ctrl & (~MLX90632_CFG_MTYP_MASK & ~MLX90632_CFG_PWR_MASK);
 800b97c:	897b      	ldrh	r3, [r7, #10]
 800b97e:	f423 73fb 	bic.w	r3, r3, #502	@ 0x1f6
 800b982:	b29b      	uxth	r3, r3
 800b984:	817b      	strh	r3, [r7, #10]
    reg_ctrl |= (MLX90632_MTYP_STATUS(MLX90632_MEASUREMENT_TYPE_STATUS(type)) | MLX90632_PWR_STATUS_HALT);
 800b986:	79fb      	ldrb	r3, [r7, #7]
 800b988:	011b      	lsls	r3, r3, #4
 800b98a:	b21b      	sxth	r3, r3
 800b98c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b990:	b21a      	sxth	r2, r3
 800b992:	897b      	ldrh	r3, [r7, #10]
 800b994:	b21b      	sxth	r3, r3
 800b996:	4313      	orrs	r3, r2
 800b998:	b21b      	sxth	r3, r3
 800b99a:	b29b      	uxth	r3, r3
 800b99c:	817b      	strh	r3, [r7, #10]

    ret = mlx90632_i2c_write(MLX90632_REG_CTRL, reg_ctrl);
 800b99e:	897b      	ldrh	r3, [r7, #10]
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	f243 0001 	movw	r0, #12289	@ 0x3001
 800b9a6:	f7ff ff61 	bl	800b86c <mlx90632_i2c_write>
 800b9aa:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	da01      	bge.n	800b9b6 <mlx90632_set_meas_type+0xb2>
        return ret;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	e028      	b.n	800ba08 <mlx90632_set_meas_type+0x104>

    ret = mlx90632_i2c_read(MLX90632_REG_CTRL, &reg_ctrl);
 800b9b6:	f107 030a 	add.w	r3, r7, #10
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	f243 0001 	movw	r0, #12289	@ 0x3001
 800b9c0:	f7ff ff02 	bl	800b7c8 <mlx90632_i2c_read>
 800b9c4:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	da01      	bge.n	800b9d0 <mlx90632_set_meas_type+0xcc>
        return ret;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	e01b      	b.n	800ba08 <mlx90632_set_meas_type+0x104>

    reg_ctrl = reg_ctrl & ~MLX90632_CFG_PWR_MASK;
 800b9d0:	897b      	ldrh	r3, [r7, #10]
 800b9d2:	f023 0306 	bic.w	r3, r3, #6
 800b9d6:	b29b      	uxth	r3, r3
 800b9d8:	817b      	strh	r3, [r7, #10]
    if (MLX90632_MEASUREMENT_BURST_STATUS(type))
 800b9da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	da05      	bge.n	800b9ee <mlx90632_set_meas_type+0xea>
    {
        reg_ctrl |= MLX90632_PWR_STATUS_SLEEP_STEP;
 800b9e2:	897b      	ldrh	r3, [r7, #10]
 800b9e4:	f043 0302 	orr.w	r3, r3, #2
 800b9e8:	b29b      	uxth	r3, r3
 800b9ea:	817b      	strh	r3, [r7, #10]
 800b9ec:	e004      	b.n	800b9f8 <mlx90632_set_meas_type+0xf4>
    }
    else
    {
        reg_ctrl |= MLX90632_PWR_STATUS_CONTINUOUS;
 800b9ee:	897b      	ldrh	r3, [r7, #10]
 800b9f0:	f043 0306 	orr.w	r3, r3, #6
 800b9f4:	b29b      	uxth	r3, r3
 800b9f6:	817b      	strh	r3, [r7, #10]
    }

    ret = mlx90632_i2c_write(MLX90632_REG_CTRL, reg_ctrl);
 800b9f8:	897b      	ldrh	r3, [r7, #10]
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	f243 0001 	movw	r0, #12289	@ 0x3001
 800ba00:	f7ff ff34 	bl	800b86c <mlx90632_i2c_write>
 800ba04:	60f8      	str	r0, [r7, #12]

    return ret;
 800ba06:	68fb      	ldr	r3, [r7, #12]
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3710      	adds	r7, #16
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <mlx90632_get_meas_type>:

int32_t mlx90632_get_meas_type(void)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b082      	sub	sp, #8
 800ba14:	af00      	add	r7, sp, #0
    int32_t ret;
    uint16_t reg_ctrl;
    uint16_t reg_temp;

    ret = mlx90632_i2c_read(MLX90632_REG_CTRL, &reg_temp);
 800ba16:	463b      	mov	r3, r7
 800ba18:	4619      	mov	r1, r3
 800ba1a:	f243 0001 	movw	r0, #12289	@ 0x3001
 800ba1e:	f7ff fed3 	bl	800b7c8 <mlx90632_i2c_read>
 800ba22:	6078      	str	r0, [r7, #4]
    if (ret < 0)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	da01      	bge.n	800ba2e <mlx90632_get_meas_type+0x1e>
        return ret;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	e02a      	b.n	800ba84 <mlx90632_get_meas_type+0x74>

    reg_ctrl = MLX90632_MTYP(reg_temp);
 800ba2e:	883b      	ldrh	r3, [r7, #0]
 800ba30:	091b      	lsrs	r3, r3, #4
 800ba32:	b29b      	uxth	r3, r3
 800ba34:	f003 031f 	and.w	r3, r3, #31
 800ba38:	807b      	strh	r3, [r7, #2]

    if ((reg_ctrl != MLX90632_MTYP_MEDICAL) & (reg_ctrl != MLX90632_MTYP_EXTENDED))
 800ba3a:	887b      	ldrh	r3, [r7, #2]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	bf14      	ite	ne
 800ba40:	2301      	movne	r3, #1
 800ba42:	2300      	moveq	r3, #0
 800ba44:	b2da      	uxtb	r2, r3
 800ba46:	887b      	ldrh	r3, [r7, #2]
 800ba48:	2b11      	cmp	r3, #17
 800ba4a:	bf14      	ite	ne
 800ba4c:	2301      	movne	r3, #1
 800ba4e:	2300      	moveq	r3, #0
 800ba50:	b2db      	uxtb	r3, r3
 800ba52:	4013      	ands	r3, r2
 800ba54:	b2db      	uxtb	r3, r3
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d002      	beq.n	800ba60 <mlx90632_get_meas_type+0x50>
        return -EINVAL;
 800ba5a:	f06f 0315 	mvn.w	r3, #21
 800ba5e:	e011      	b.n	800ba84 <mlx90632_get_meas_type+0x74>

    reg_temp = MLX90632_CFG_PWR(reg_temp);
 800ba60:	883b      	ldrh	r3, [r7, #0]
 800ba62:	f003 0306 	and.w	r3, r3, #6
 800ba66:	b29b      	uxth	r3, r3
 800ba68:	803b      	strh	r3, [r7, #0]

    if (reg_temp == MLX90632_PWR_STATUS_SLEEP_STEP)
 800ba6a:	883b      	ldrh	r3, [r7, #0]
 800ba6c:	2b02      	cmp	r3, #2
 800ba6e:	d102      	bne.n	800ba76 <mlx90632_get_meas_type+0x66>
        return MLX90632_BURST_MEASUREMENT_TYPE(reg_ctrl);
 800ba70:	887b      	ldrh	r3, [r7, #2]
 800ba72:	3380      	adds	r3, #128	@ 0x80
 800ba74:	e006      	b.n	800ba84 <mlx90632_get_meas_type+0x74>

    if (reg_temp != MLX90632_PWR_STATUS_CONTINUOUS)
 800ba76:	883b      	ldrh	r3, [r7, #0]
 800ba78:	2b06      	cmp	r3, #6
 800ba7a:	d002      	beq.n	800ba82 <mlx90632_get_meas_type+0x72>
        return -EINVAL;
 800ba7c:	f06f 0315 	mvn.w	r3, #21
 800ba80:	e000      	b.n	800ba84 <mlx90632_get_meas_type+0x74>

    return reg_ctrl;
 800ba82:	887b      	ldrh	r3, [r7, #2]
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3708      	adds	r7, #8
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <LL_AHB2_GRP1_EnableClock>:
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b085      	sub	sp, #20
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800ba94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba98:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ba9a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	4313      	orrs	r3, r2
 800baa2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800baa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800baa8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	4013      	ands	r3, r2
 800baae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800bab0:	68fb      	ldr	r3, [r7, #12]
}
 800bab2:	bf00      	nop
 800bab4:	3714      	adds	r7, #20
 800bab6:	46bd      	mov	sp, r7
 800bab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babc:	4770      	bx	lr

0800babe <LL_AHB3_GRP1_EnableClock>:
{
 800babe:	b480      	push	{r7}
 800bac0:	b085      	sub	sp, #20
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800bac6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800baca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bacc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	4313      	orrs	r3, r2
 800bad4:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800bad6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bada:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	4013      	ands	r3, r2
 800bae0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800bae2:	68fb      	ldr	r3, [r7, #12]
}
 800bae4:	bf00      	nop
 800bae6:	3714      	adds	r7, #20
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr

0800baf0 <LL_AHB3_GRP1_DisableClock>:
{
 800baf0:	b480      	push	{r7}
 800baf2:	b083      	sub	sp, #12
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB3ENR, Periphs);
 800baf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bafc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	43db      	mvns	r3, r3
 800bb02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb06:	4013      	ands	r3, r2
 800bb08:	650b      	str	r3, [r1, #80]	@ 0x50
}
 800bb0a:	bf00      	nop
 800bb0c:	370c      	adds	r7, #12
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb14:	4770      	bx	lr
	...

0800bb18 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 800bb1c:	4b0f      	ldr	r3, [pc, #60]	@ (800bb5c <MX_QUADSPI_Init+0x44>)
 800bb1e:	4a10      	ldr	r2, [pc, #64]	@ (800bb60 <MX_QUADSPI_Init+0x48>)
 800bb20:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 800bb22:	4b0e      	ldr	r3, [pc, #56]	@ (800bb5c <MX_QUADSPI_Init+0x44>)
 800bb24:	2201      	movs	r2, #1
 800bb26:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800bb28:	4b0c      	ldr	r3, [pc, #48]	@ (800bb5c <MX_QUADSPI_Init+0x44>)
 800bb2a:	2204      	movs	r2, #4
 800bb2c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800bb2e:	4b0b      	ldr	r3, [pc, #44]	@ (800bb5c <MX_QUADSPI_Init+0x44>)
 800bb30:	2210      	movs	r2, #16
 800bb32:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 20;
 800bb34:	4b09      	ldr	r3, [pc, #36]	@ (800bb5c <MX_QUADSPI_Init+0x44>)
 800bb36:	2214      	movs	r2, #20
 800bb38:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_2_CYCLE;
 800bb3a:	4b08      	ldr	r3, [pc, #32]	@ (800bb5c <MX_QUADSPI_Init+0x44>)
 800bb3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bb40:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800bb42:	4b06      	ldr	r3, [pc, #24]	@ (800bb5c <MX_QUADSPI_Init+0x44>)
 800bb44:	2200      	movs	r2, #0
 800bb46:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800bb48:	4804      	ldr	r0, [pc, #16]	@ (800bb5c <MX_QUADSPI_Init+0x44>)
 800bb4a:	f006 ff47 	bl	80129dc <HAL_QSPI_Init>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d001      	beq.n	800bb58 <MX_QUADSPI_Init+0x40>
  {
    Error_Handler();
 800bb54:	f7fe ff1a 	bl	800a98c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800bb58:	bf00      	nop
 800bb5a:	bd80      	pop	{r7, pc}
 800bb5c:	20000520 	.word	0x20000520
 800bb60:	a0001000 	.word	0xa0001000

0800bb64 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b088      	sub	sp, #32
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bb6c:	f107 030c 	add.w	r3, r7, #12
 800bb70:	2200      	movs	r2, #0
 800bb72:	601a      	str	r2, [r3, #0]
 800bb74:	605a      	str	r2, [r3, #4]
 800bb76:	609a      	str	r2, [r3, #8]
 800bb78:	60da      	str	r2, [r3, #12]
 800bb7a:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	4a26      	ldr	r2, [pc, #152]	@ (800bc1c <HAL_QSPI_MspInit+0xb8>)
 800bb82:	4293      	cmp	r3, r2
 800bb84:	d146      	bne.n	800bc14 <HAL_QSPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800bb86:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800bb8a:	f7ff ff98 	bl	800babe <LL_AHB3_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bb8e:	2002      	movs	r0, #2
 800bb90:	f7ff ff7c 	bl	800ba8c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bb94:	2001      	movs	r0, #1
 800bb96:	f7ff ff79 	bl	800ba8c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800bb9a:	2008      	movs	r0, #8
 800bb9c:	f7ff ff76 	bl	800ba8c <LL_AHB2_GRP1_EnableClock>
    PD7     ------> QUADSPI_BK1_IO3
    PD3     ------> QUADSPI_BK1_NCS
    PD5     ------> QUADSPI_BK1_IO1
    PD6     ------> QUADSPI_BK1_IO2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800bba0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bba4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bba6:	2302      	movs	r3, #2
 800bba8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800bbb2:	230a      	movs	r3, #10
 800bbb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bbb6:	f107 030c 	add.w	r3, r7, #12
 800bbba:	4619      	mov	r1, r3
 800bbbc:	4818      	ldr	r0, [pc, #96]	@ (800bc20 <HAL_QSPI_MspInit+0xbc>)
 800bbbe:	f005 fd8b 	bl	80116d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800bbc2:	2308      	movs	r3, #8
 800bbc4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bbc6:	2302      	movs	r3, #2
 800bbc8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800bbd2:	230a      	movs	r3, #10
 800bbd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bbd6:	f107 030c 	add.w	r3, r7, #12
 800bbda:	4619      	mov	r1, r3
 800bbdc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800bbe0:	f005 fd7a 	bl	80116d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 800bbe4:	23e8      	movs	r3, #232	@ 0xe8
 800bbe6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bbe8:	2302      	movs	r3, #2
 800bbea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbec:	2300      	movs	r3, #0
 800bbee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800bbf4:	230a      	movs	r3, #10
 800bbf6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800bbf8:	f107 030c 	add.w	r3, r7, #12
 800bbfc:	4619      	mov	r1, r3
 800bbfe:	4809      	ldr	r0, [pc, #36]	@ (800bc24 <HAL_QSPI_MspInit+0xc0>)
 800bc00:	f005 fd6a 	bl	80116d8 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 0, 0);
 800bc04:	2200      	movs	r2, #0
 800bc06:	2100      	movs	r1, #0
 800bc08:	2032      	movs	r0, #50	@ 0x32
 800bc0a:	f005 f9d4 	bl	8010fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800bc0e:	2032      	movs	r0, #50	@ 0x32
 800bc10:	f005 f9eb 	bl	8010fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 800bc14:	bf00      	nop
 800bc16:	3720      	adds	r7, #32
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}
 800bc1c:	a0001000 	.word	0xa0001000
 800bc20:	48000400 	.word	0x48000400
 800bc24:	48000c00 	.word	0x48000c00

0800bc28 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b082      	sub	sp, #8
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	4a0d      	ldr	r2, [pc, #52]	@ (800bc6c <HAL_QSPI_MspDeInit+0x44>)
 800bc36:	4293      	cmp	r3, r2
 800bc38:	d114      	bne.n	800bc64 <HAL_QSPI_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 800bc3a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800bc3e:	f7ff ff57 	bl	800baf0 <LL_AHB3_GRP1_DisableClock>
    PD7     ------> QUADSPI_BK1_IO3
    PD3     ------> QUADSPI_BK1_NCS
    PD5     ------> QUADSPI_BK1_IO1
    PD6     ------> QUADSPI_BK1_IO2
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 800bc42:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bc46:	480a      	ldr	r0, [pc, #40]	@ (800bc70 <HAL_QSPI_MspDeInit+0x48>)
 800bc48:	f005 feb6 	bl	80119b8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3);
 800bc4c:	2108      	movs	r1, #8
 800bc4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800bc52:	f005 feb1 	bl	80119b8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_7|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6);
 800bc56:	21e8      	movs	r1, #232	@ 0xe8
 800bc58:	4806      	ldr	r0, [pc, #24]	@ (800bc74 <HAL_QSPI_MspDeInit+0x4c>)
 800bc5a:	f005 fead 	bl	80119b8 <HAL_GPIO_DeInit>

    /* QUADSPI interrupt Deinit */
    HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 800bc5e:	2032      	movs	r0, #50	@ 0x32
 800bc60:	f005 f9d1 	bl	8011006 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 800bc64:	bf00      	nop
 800bc66:	3708      	adds	r7, #8
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}
 800bc6c:	a0001000 	.word	0xa0001000
 800bc70:	48000400 	.word	0x48000400
 800bc74:	48000c00 	.word	0x48000c00

0800bc78 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 800bc7c:	bf00      	nop
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc84:	4770      	bx	lr

0800bc86 <LL_RCC_EnableRTC>:
{
 800bc86:	b480      	push	{r7}
 800bc88:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800bc8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bc96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800bc9e:	bf00      	nop
 800bca0:	46bd      	mov	sp, r7
 800bca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca6:	4770      	bx	lr

0800bca8 <LL_APB1_GRP1_EnableClock>:
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b085      	sub	sp, #20
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800bcb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcb4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bcb6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	4313      	orrs	r3, r2
 800bcbe:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800bcc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcc4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	4013      	ands	r3, r2
 800bcca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800bccc:	68fb      	ldr	r3, [r7, #12]
}
 800bcce:	bf00      	nop
 800bcd0:	3714      	adds	r7, #20
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd8:	4770      	bx	lr
	...

0800bcdc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800bce0:	4b16      	ldr	r3, [pc, #88]	@ (800bd3c <MX_RTC_Init+0x60>)
 800bce2:	4a17      	ldr	r2, [pc, #92]	@ (800bd40 <MX_RTC_Init+0x64>)
 800bce4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800bce6:	4b15      	ldr	r3, [pc, #84]	@ (800bd3c <MX_RTC_Init+0x60>)
 800bce8:	2200      	movs	r2, #0
 800bcea:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 800bcec:	4b13      	ldr	r3, [pc, #76]	@ (800bd3c <MX_RTC_Init+0x60>)
 800bcee:	220f      	movs	r2, #15
 800bcf0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800bcf2:	4b12      	ldr	r3, [pc, #72]	@ (800bd3c <MX_RTC_Init+0x60>)
 800bcf4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800bcf8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800bcfa:	4b10      	ldr	r3, [pc, #64]	@ (800bd3c <MX_RTC_Init+0x60>)
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800bd00:	4b0e      	ldr	r3, [pc, #56]	@ (800bd3c <MX_RTC_Init+0x60>)
 800bd02:	2200      	movs	r2, #0
 800bd04:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800bd06:	4b0d      	ldr	r3, [pc, #52]	@ (800bd3c <MX_RTC_Init+0x60>)
 800bd08:	2200      	movs	r2, #0
 800bd0a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800bd0c:	4b0b      	ldr	r3, [pc, #44]	@ (800bd3c <MX_RTC_Init+0x60>)
 800bd0e:	2200      	movs	r2, #0
 800bd10:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800bd12:	480a      	ldr	r0, [pc, #40]	@ (800bd3c <MX_RTC_Init+0x60>)
 800bd14:	f009 fa9e 	bl	8015254 <HAL_RTC_Init>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d001      	beq.n	800bd22 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800bd1e:	f7fe fe35 	bl	800a98c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800bd22:	2200      	movs	r2, #0
 800bd24:	2100      	movs	r1, #0
 800bd26:	4805      	ldr	r0, [pc, #20]	@ (800bd3c <MX_RTC_Init+0x60>)
 800bd28:	f009 fdec 	bl	8015904 <HAL_RTCEx_SetWakeUpTimer_IT>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d001      	beq.n	800bd36 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800bd32:	f7fe fe2b 	bl	800a98c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800bd36:	bf00      	nop
 800bd38:	bd80      	pop	{r7, pc}
 800bd3a:	bf00      	nop
 800bd3c:	20000564 	.word	0x20000564
 800bd40:	40002800 	.word	0x40002800

0800bd44 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b096      	sub	sp, #88	@ 0x58
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800bd4c:	f107 0308 	add.w	r3, r7, #8
 800bd50:	2250      	movs	r2, #80	@ 0x50
 800bd52:	2100      	movs	r1, #0
 800bd54:	4618      	mov	r0, r3
 800bd56:	f00e fa6b 	bl	801a230 <memset>
  if(rtcHandle->Instance==RTC)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	4a12      	ldr	r2, [pc, #72]	@ (800bda8 <HAL_RTC_MspInit+0x64>)
 800bd60:	4293      	cmp	r3, r2
 800bd62:	d11d      	bne.n	800bda0 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800bd64:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bd68:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800bd6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bd6e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bd70:	f107 0308 	add.w	r3, r7, #8
 800bd74:	4618      	mov	r0, r3
 800bd76:	f008 ffe6 	bl	8014d46 <HAL_RCCEx_PeriphCLKConfig>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d001      	beq.n	800bd84 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800bd80:	f7fe fe04 	bl	800a98c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800bd84:	f7ff ff7f 	bl	800bc86 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800bd88:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800bd8c:	f7ff ff8c 	bl	800bca8 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800bd90:	2200      	movs	r2, #0
 800bd92:	2100      	movs	r1, #0
 800bd94:	2003      	movs	r0, #3
 800bd96:	f005 f90e 	bl	8010fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800bd9a:	2003      	movs	r0, #3
 800bd9c:	f005 f925 	bl	8010fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800bda0:	bf00      	nop
 800bda2:	3758      	adds	r7, #88	@ 0x58
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}
 800bda8:	40002800 	.word	0x40002800

0800bdac <LL_PWR_SetPowerMode>:
{
 800bdac:	b480      	push	{r7}
 800bdae:	b083      	sub	sp, #12
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 800bdb4:	4b06      	ldr	r3, [pc, #24]	@ (800bdd0 <LL_PWR_SetPowerMode+0x24>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f023 0207 	bic.w	r2, r3, #7
 800bdbc:	4904      	ldr	r1, [pc, #16]	@ (800bdd0 <LL_PWR_SetPowerMode+0x24>)
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	4313      	orrs	r3, r2
 800bdc2:	600b      	str	r3, [r1, #0]
}
 800bdc4:	bf00      	nop
 800bdc6:	370c      	adds	r7, #12
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdce:	4770      	bx	lr
 800bdd0:	58000400 	.word	0x58000400

0800bdd4 <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 800bdd8:	4b03      	ldr	r3, [pc, #12]	@ (800bde8 <LL_PWR_ClearFlag_WU+0x14>)
 800bdda:	221f      	movs	r2, #31
 800bddc:	619a      	str	r2, [r3, #24]
}
 800bdde:	bf00      	nop
 800bde0:	46bd      	mov	sp, r7
 800bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde6:	4770      	bx	lr
 800bde8:	58000400 	.word	0x58000400

0800bdec <LL_PWR_IsActiveFlag_C2SB>:
  * @brief  System standby flag for CPU2
  * @rmtoll EXTSCR       C2SBF         LL_PWR_IsActiveFlag_C2SB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2SB(void)
{
 800bdec:	b480      	push	{r7}
 800bdee:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
 800bdf0:	4b07      	ldr	r3, [pc, #28]	@ (800be10 <LL_PWR_IsActiveFlag_C2SB+0x24>)
 800bdf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bdf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bdfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bdfe:	d101      	bne.n	800be04 <LL_PWR_IsActiveFlag_C2SB+0x18>
 800be00:	2301      	movs	r3, #1
 800be02:	e000      	b.n	800be06 <LL_PWR_IsActiveFlag_C2SB+0x1a>
 800be04:	2300      	movs	r3, #0
}
 800be06:	4618      	mov	r0, r3
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr
 800be10:	58000400 	.word	0x58000400

0800be14 <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 800be14:	b480      	push	{r7}
 800be16:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 800be18:	4b07      	ldr	r3, [pc, #28]	@ (800be38 <LL_PWR_IsActiveFlag_C2DS+0x24>)
 800be1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800be22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800be26:	d101      	bne.n	800be2c <LL_PWR_IsActiveFlag_C2DS+0x18>
 800be28:	2301      	movs	r3, #1
 800be2a:	e000      	b.n	800be2e <LL_PWR_IsActiveFlag_C2DS+0x1a>
 800be2c:	2300      	movs	r3, #0
}
 800be2e:	4618      	mov	r0, r3
 800be30:	46bd      	mov	sp, r7
 800be32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be36:	4770      	bx	lr
 800be38:	58000400 	.word	0x58000400

0800be3c <LL_RCC_HSE_Enable>:
{
 800be3c:	b480      	push	{r7}
 800be3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800be40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800be4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800be4e:	6013      	str	r3, [r2, #0]
}
 800be50:	bf00      	nop
 800be52:	46bd      	mov	sp, r7
 800be54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be58:	4770      	bx	lr

0800be5a <LL_RCC_HSE_IsReady>:
{
 800be5a:	b480      	push	{r7}
 800be5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800be5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800be6c:	d101      	bne.n	800be72 <LL_RCC_HSE_IsReady+0x18>
 800be6e:	2301      	movs	r3, #1
 800be70:	e000      	b.n	800be74 <LL_RCC_HSE_IsReady+0x1a>
 800be72:	2300      	movs	r3, #0
}
 800be74:	4618      	mov	r0, r3
 800be76:	46bd      	mov	sp, r7
 800be78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7c:	4770      	bx	lr

0800be7e <LL_RCC_HSI_Enable>:
{
 800be7e:	b480      	push	{r7}
 800be80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800be82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800be8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800be90:	6013      	str	r3, [r2, #0]
}
 800be92:	bf00      	nop
 800be94:	46bd      	mov	sp, r7
 800be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9a:	4770      	bx	lr

0800be9c <LL_RCC_HSI_IsReady>:
{
 800be9c:	b480      	push	{r7}
 800be9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800bea0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800beaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800beae:	d101      	bne.n	800beb4 <LL_RCC_HSI_IsReady+0x18>
 800beb0:	2301      	movs	r3, #1
 800beb2:	e000      	b.n	800beb6 <LL_RCC_HSI_IsReady+0x1a>
 800beb4:	2300      	movs	r3, #0
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	46bd      	mov	sp, r7
 800beba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebe:	4770      	bx	lr

0800bec0 <LL_RCC_SetSysClkSource>:
{
 800bec0:	b480      	push	{r7}
 800bec2:	b083      	sub	sp, #12
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800bec8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800becc:	689b      	ldr	r3, [r3, #8]
 800bece:	f023 0203 	bic.w	r2, r3, #3
 800bed2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	4313      	orrs	r3, r2
 800beda:	608b      	str	r3, [r1, #8]
}
 800bedc:	bf00      	nop
 800bede:	370c      	adds	r7, #12
 800bee0:	46bd      	mov	sp, r7
 800bee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee6:	4770      	bx	lr

0800bee8 <LL_RCC_GetSysClkSource>:
{
 800bee8:	b480      	push	{r7}
 800beea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800beec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bef0:	689b      	ldr	r3, [r3, #8]
 800bef2:	f003 030c 	and.w	r3, r3, #12
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	46bd      	mov	sp, r7
 800befa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befe:	4770      	bx	lr

0800bf00 <LL_RCC_SetSMPSClockSource>:
{
 800bf00:	b480      	push	{r7}
 800bf02:	b083      	sub	sp, #12
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800bf08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf0e:	f023 0203 	bic.w	r2, r3, #3
 800bf12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800bf1c:	bf00      	nop
 800bf1e:	370c      	adds	r7, #12
 800bf20:	46bd      	mov	sp, r7
 800bf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf26:	4770      	bx	lr

0800bf28 <LL_LPM_EnableSleep>:
{
 800bf28:	b480      	push	{r7}
 800bf2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800bf2c:	4b05      	ldr	r3, [pc, #20]	@ (800bf44 <LL_LPM_EnableSleep+0x1c>)
 800bf2e:	691b      	ldr	r3, [r3, #16]
 800bf30:	4a04      	ldr	r2, [pc, #16]	@ (800bf44 <LL_LPM_EnableSleep+0x1c>)
 800bf32:	f023 0304 	bic.w	r3, r3, #4
 800bf36:	6113      	str	r3, [r2, #16]
}
 800bf38:	bf00      	nop
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf40:	4770      	bx	lr
 800bf42:	bf00      	nop
 800bf44:	e000ed00 	.word	0xe000ed00

0800bf48 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 800bf48:	b480      	push	{r7}
 800bf4a:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800bf4c:	4b05      	ldr	r3, [pc, #20]	@ (800bf64 <LL_LPM_EnableDeepSleep+0x1c>)
 800bf4e:	691b      	ldr	r3, [r3, #16]
 800bf50:	4a04      	ldr	r2, [pc, #16]	@ (800bf64 <LL_LPM_EnableDeepSleep+0x1c>)
 800bf52:	f043 0304 	orr.w	r3, r3, #4
 800bf56:	6113      	str	r3, [r2, #16]
}
 800bf58:	bf00      	nop
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf60:	4770      	bx	lr
 800bf62:	bf00      	nop
 800bf64:	e000ed00 	.word	0xe000ed00

0800bf68 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b083      	sub	sp, #12
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
 800bf70:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	683a      	ldr	r2, [r7, #0]
 800bf76:	3220      	adds	r2, #32
 800bf78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf7c:	4a05      	ldr	r2, [pc, #20]	@ (800bf94 <LL_HSEM_1StepLock+0x2c>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d001      	beq.n	800bf86 <LL_HSEM_1StepLock+0x1e>
 800bf82:	2301      	movs	r3, #1
 800bf84:	e000      	b.n	800bf88 <LL_HSEM_1StepLock+0x20>
 800bf86:	2300      	movs	r3, #0
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	370c      	adds	r7, #12
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr
 800bf94:	80000400 	.word	0x80000400

0800bf98 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 800bf98:	b480      	push	{r7}
 800bf9a:	b085      	sub	sp, #20
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	60f8      	str	r0, [r7, #12]
 800bfa0:	60b9      	str	r1, [r7, #8]
 800bfa2:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f443 6180 	orr.w	r1, r3, #1024	@ 0x400
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	68ba      	ldr	r2, [r7, #8]
 800bfae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800bfb2:	bf00      	nop
 800bfb4:	3714      	adds	r7, #20
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbc:	4770      	bx	lr

0800bfbe <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode(void)
{
 800bfbe:	b580      	push	{r7, lr}
 800bfc0:	af00      	add	r7, sp, #0
/* USER CODE END PWR_EnterOffMode_1 */
  /**
   * The systick should be disabled for the same reason than when the device enters stop mode because
   * at this time, the device may enter either OffMode or StopMode.
   */
  HAL_SuspendTick();
 800bfc2:	f003 fbb9 	bl	800f738 <HAL_SuspendTick>

  EnterLowPower();
 800bfc6:	f000 f835 	bl	800c034 <EnterLowPower>
   * in critical section. If an interrupt occurs while in that critical section before that point,
   * the flag is set and will be cleared here but the system will not enter Off Mode
   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
   * of this critical section
   */
  LL_PWR_ClearFlag_WU();
 800bfca:	f7ff ff03 	bl	800bdd4 <LL_PWR_ClearFlag_WU>

  LL_PWR_SetPowerMode(LL_PWR_MODE_STANDBY);
 800bfce:	2003      	movs	r0, #3
 800bfd0:	f7ff feec 	bl	800bdac <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 800bfd4:	f7ff ffb8 	bl	800bf48 <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 800bfd8:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterOffMode_2 */

/* USER CODE END PWR_EnterOffMode_2 */
  return;
 800bfda:	bf00      	nop
}
 800bfdc:	bd80      	pop	{r7, pc}

0800bfde <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode(void)
{
 800bfde:	b580      	push	{r7, lr}
 800bfe0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitOffMode_1 */

/* USER CODE END PWR_ExitOffMode_1 */
  HAL_ResumeTick();
 800bfe2:	f003 fbb9 	bl	800f758 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitOffMode_2 */

/* USER CODE END PWR_ExitOffMode_2 */
  return;
 800bfe6:	bf00      	nop
}
 800bfe8:	bd80      	pop	{r7, pc}

0800bfea <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode(void)
{
 800bfea:	b580      	push	{r7, lr}
 800bfec:	af00      	add	r7, sp, #0
   *
   * When in production, the HAL_DBGMCU_EnableDBGStopMode() is not called so that the device can reach best power consumption
   * However, the systick should be disabled anyway to avoid the case when it is about to expire at the same time the device enters
   * stop mode (this will abort the Stop Mode entry).
   */
  HAL_SuspendTick();
 800bfee:	f003 fba3 	bl	800f738 <HAL_SuspendTick>

  /**
   * This function is called from CRITICAL SECTION
   */
  EnterLowPower();
 800bff2:	f000 f81f 	bl	800c034 <EnterLowPower>

  /************************************************************************************
   * ENTER STOP MODE
   ***********************************************************************************/
  LL_PWR_SetPowerMode(LL_PWR_MODE_STOP2);
 800bff6:	2002      	movs	r0, #2
 800bff8:	f7ff fed8 	bl	800bdac <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 800bffc:	f7ff ffa4 	bl	800bf48 <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 800c000:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterStopMode_2 */

/* USER CODE END PWR_EnterStopMode_2 */
  return;
 800c002:	bf00      	nop
}
 800c004:	bd80      	pop	{r7, pc}

0800c006 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode(void)
{
 800c006:	b580      	push	{r7, lr}
 800c008:	af00      	add	r7, sp, #0

/* USER CODE END PWR_ExitStopMode_1 */
  /**
   * This function is called from CRITICAL SECTION
   */
  ExitLowPower();
 800c00a:	f000 f84f 	bl	800c0ac <ExitLowPower>

  HAL_ResumeTick();
 800c00e:	f003 fba3 	bl	800f758 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitStopMode_2 */

/* USER CODE END PWR_ExitStopMode_2 */
  return;
 800c012:	bf00      	nop
}
 800c014:	bd80      	pop	{r7, pc}

0800c016 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode(void)
{
 800c016:	b580      	push	{r7, lr}
 800c018:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode_1 */

/* USER CODE END PWR_EnterSleepMode_1 */

  HAL_SuspendTick();
 800c01a:	f003 fb8d 	bl	800f738 <HAL_SuspendTick>

  /************************************************************************************
   * ENTER SLEEP MODE
   ***********************************************************************************/
  LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800c01e:	f7ff ff83 	bl	800bf28 <LL_LPM_EnableSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 800c022:	bf30      	wfi
/* USER CODE BEGIN PWR_EnterSleepMode_2 */

/* USER CODE END PWR_EnterSleepMode_2 */
  return;
 800c024:	bf00      	nop
}
 800c026:	bd80      	pop	{r7, pc}

0800c028 <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode(void)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode_1 */

/* USER CODE END PWR_ExitSleepMode_1 */
  HAL_ResumeTick();
 800c02c:	f003 fb94 	bl	800f758 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitSleepMode_2 */

/* USER CODE END PWR_ExitSleepMode_2 */
  return;
 800c030:	bf00      	nop
}
 800c032:	bd80      	pop	{r7, pc}

0800c034 <EnterLowPower>:
  * @brief Setup the system to enter either stop or off mode
  * @param none
  * @retval none
  */
static void EnterLowPower(void)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 800c038:	bf00      	nop
 800c03a:	2103      	movs	r1, #3
 800c03c:	4819      	ldr	r0, [pc, #100]	@ (800c0a4 <EnterLowPower+0x70>)
 800c03e:	f7ff ff93 	bl	800bf68 <LL_HSEM_1StepLock>
 800c042:	4603      	mov	r3, r0
 800c044:	2b00      	cmp	r3, #0
 800c046:	d1f8      	bne.n	800c03a <EnterLowPower+0x6>

  if (! LL_HSEM_1StepLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID))
 800c048:	2104      	movs	r1, #4
 800c04a:	4816      	ldr	r0, [pc, #88]	@ (800c0a4 <EnterLowPower+0x70>)
 800c04c:	f7ff ff8c 	bl	800bf68 <LL_HSEM_1StepLock>
 800c050:	4603      	mov	r3, r0
 800c052:	2b00      	cmp	r3, #0
 800c054:	d117      	bne.n	800c086 <EnterLowPower+0x52>
  {
    if(LL_PWR_IsActiveFlag_C2DS() || LL_PWR_IsActiveFlag_C2SB())
 800c056:	f7ff fedd 	bl	800be14 <LL_PWR_IsActiveFlag_C2DS>
 800c05a:	4603      	mov	r3, r0
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d104      	bne.n	800c06a <EnterLowPower+0x36>
 800c060:	f7ff fec4 	bl	800bdec <LL_PWR_IsActiveFlag_C2SB>
 800c064:	4603      	mov	r3, r0
 800c066:	2b00      	cmp	r3, #0
 800c068:	d015      	beq.n	800c096 <EnterLowPower+0x62>
    {
      /* Release ENTRY_STOP_MODE semaphore */
      LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 800c06a:	2200      	movs	r2, #0
 800c06c:	2104      	movs	r1, #4
 800c06e:	480d      	ldr	r0, [pc, #52]	@ (800c0a4 <EnterLowPower+0x70>)
 800c070:	f7ff ff92 	bl	800bf98 <LL_HSEM_ReleaseLock>

      Switch_On_HSI();
 800c074:	f000 f852 	bl	800c11c <Switch_On_HSI>
      __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 800c078:	4b0b      	ldr	r3, [pc, #44]	@ (800c0a8 <EnterLowPower+0x74>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	4a0a      	ldr	r2, [pc, #40]	@ (800c0a8 <EnterLowPower+0x74>)
 800c07e:	f023 0307 	bic.w	r3, r3, #7
 800c082:	6013      	str	r3, [r2, #0]
 800c084:	e007      	b.n	800c096 <EnterLowPower+0x62>
    }
  }
  else
  {
    Switch_On_HSI();
 800c086:	f000 f849 	bl	800c11c <Switch_On_HSI>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 800c08a:	4b07      	ldr	r3, [pc, #28]	@ (800c0a8 <EnterLowPower+0x74>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	4a06      	ldr	r2, [pc, #24]	@ (800c0a8 <EnterLowPower+0x74>)
 800c090:	f023 0307 	bic.w	r3, r3, #7
 800c094:	6013      	str	r3, [r2, #0]
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 800c096:	2200      	movs	r2, #0
 800c098:	2103      	movs	r1, #3
 800c09a:	4802      	ldr	r0, [pc, #8]	@ (800c0a4 <EnterLowPower+0x70>)
 800c09c:	f7ff ff7c 	bl	800bf98 <LL_HSEM_ReleaseLock>

  return;
 800c0a0:	bf00      	nop
}
 800c0a2:	bd80      	pop	{r7, pc}
 800c0a4:	58001400 	.word	0x58001400
 800c0a8:	58004000 	.word	0x58004000

0800c0ac <ExitLowPower>:
  * @brief Restore the system to exit stop mode
  * @param none
  * @retval none
  */
static void ExitLowPower(void)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	af00      	add	r7, sp, #0
  /* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	2104      	movs	r1, #4
 800c0b4:	4817      	ldr	r0, [pc, #92]	@ (800c114 <ExitLowPower+0x68>)
 800c0b6:	f7ff ff6f 	bl	800bf98 <LL_HSEM_ReleaseLock>

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 800c0ba:	bf00      	nop
 800c0bc:	2103      	movs	r1, #3
 800c0be:	4815      	ldr	r0, [pc, #84]	@ (800c114 <ExitLowPower+0x68>)
 800c0c0:	f7ff ff52 	bl	800bf68 <LL_HSEM_1StepLock>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d1f8      	bne.n	800c0bc <ExitLowPower+0x10>

  if(LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800c0ca:	f7ff ff0d 	bl	800bee8 <LL_RCC_GetSysClkSource>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	2b04      	cmp	r3, #4
 800c0d2:	d118      	bne.n	800c106 <ExitLowPower+0x5a>
  {
/* Restore the clock configuration of the application in this user section */
/* USER CODE BEGIN ExitLowPower_1 */
    LL_RCC_HSE_Enable( );
 800c0d4:	f7ff feb2 	bl	800be3c <LL_RCC_HSE_Enable>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 800c0d8:	4b0f      	ldr	r3, [pc, #60]	@ (800c118 <ExitLowPower+0x6c>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f023 0307 	bic.w	r3, r3, #7
 800c0e0:	4a0d      	ldr	r2, [pc, #52]	@ (800c118 <ExitLowPower+0x6c>)
 800c0e2:	f043 0301 	orr.w	r3, r3, #1
 800c0e6:	6013      	str	r3, [r2, #0]
    while(!LL_RCC_HSE_IsReady( ));
 800c0e8:	bf00      	nop
 800c0ea:	f7ff feb6 	bl	800be5a <LL_RCC_HSE_IsReady>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d0fa      	beq.n	800c0ea <ExitLowPower+0x3e>
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 800c0f4:	2002      	movs	r0, #2
 800c0f6:	f7ff fee3 	bl	800bec0 <LL_RCC_SetSysClkSource>
    while (LL_RCC_GetSysClkSource( ) != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 800c0fa:	bf00      	nop
 800c0fc:	f7ff fef4 	bl	800bee8 <LL_RCC_GetSysClkSource>
 800c100:	4603      	mov	r3, r0
 800c102:	2b08      	cmp	r3, #8
 800c104:	d1fa      	bne.n	800c0fc <ExitLowPower+0x50>

/* USER CODE END ExitLowPower_2 */
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 800c106:	2200      	movs	r2, #0
 800c108:	2103      	movs	r1, #3
 800c10a:	4802      	ldr	r0, [pc, #8]	@ (800c114 <ExitLowPower+0x68>)
 800c10c:	f7ff ff44 	bl	800bf98 <LL_HSEM_ReleaseLock>

  return;
 800c110:	bf00      	nop
}
 800c112:	bd80      	pop	{r7, pc}
 800c114:	58001400 	.word	0x58001400
 800c118:	58004000 	.word	0x58004000

0800c11c <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI(void)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable();
 800c120:	f7ff fead 	bl	800be7e <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady());
 800c124:	bf00      	nop
 800c126:	f7ff feb9 	bl	800be9c <LL_RCC_HSI_IsReady>
 800c12a:	4603      	mov	r3, r0
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d0fa      	beq.n	800c126 <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800c130:	2001      	movs	r0, #1
 800c132:	f7ff fec5 	bl	800bec0 <LL_RCC_SetSysClkSource>
  LL_RCC_SetSMPSClockSource(LL_RCC_SMPS_CLKSOURCE_HSI);
 800c136:	2000      	movs	r0, #0
 800c138:	f7ff fee2 	bl	800bf00 <LL_RCC_SetSMPSClockSource>
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 800c13c:	bf00      	nop
 800c13e:	f7ff fed3 	bl	800bee8 <LL_RCC_GetSysClkSource>
 800c142:	4603      	mov	r3, r0
 800c144:	2b04      	cmp	r3, #4
 800c146:	d1fa      	bne.n	800c13e <Switch_On_HSI+0x22>
  return;
 800c148:	bf00      	nop
}
 800c14a:	bd80      	pop	{r7, pc}

0800c14c <LL_AHB3_GRP1_EnableClock>:
{
 800c14c:	b480      	push	{r7}
 800c14e:	b085      	sub	sp, #20
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800c154:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c158:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c15a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	4313      	orrs	r3, r2
 800c162:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800c164:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c168:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	4013      	ands	r3, r2
 800c16e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c170:	68fb      	ldr	r3, [r7, #12]
}
 800c172:	bf00      	nop
 800c174:	3714      	adds	r7, #20
 800c176:	46bd      	mov	sp, r7
 800c178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17c:	4770      	bx	lr

0800c17e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c17e:	b580      	push	{r7, lr}
 800c180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800c182:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800c186:	f7ff ffe1 	bl	800c14c <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800c18a:	2200      	movs	r2, #0
 800c18c:	2100      	movs	r1, #0
 800c18e:	202e      	movs	r0, #46	@ 0x2e
 800c190:	f004 ff11 	bl	8010fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800c194:	202e      	movs	r0, #46	@ 0x2e
 800c196:	f004 ff28 	bl	8010fea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c19a:	bf00      	nop
 800c19c:	bd80      	pop	{r7, pc}

0800c19e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c19e:	b480      	push	{r7}
 800c1a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800c1a2:	bf00      	nop
 800c1a4:	e7fd      	b.n	800c1a2 <NMI_Handler+0x4>

0800c1a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c1a6:	b480      	push	{r7}
 800c1a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c1aa:	bf00      	nop
 800c1ac:	e7fd      	b.n	800c1aa <HardFault_Handler+0x4>

0800c1ae <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c1ae:	b480      	push	{r7}
 800c1b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800c1b2:	bf00      	nop
 800c1b4:	e7fd      	b.n	800c1b2 <MemManage_Handler+0x4>

0800c1b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c1b6:	b480      	push	{r7}
 800c1b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800c1ba:	bf00      	nop
 800c1bc:	e7fd      	b.n	800c1ba <BusFault_Handler+0x4>

0800c1be <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c1be:	b480      	push	{r7}
 800c1c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800c1c2:	bf00      	nop
 800c1c4:	e7fd      	b.n	800c1c2 <UsageFault_Handler+0x4>

0800c1c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800c1c6:	b480      	push	{r7}
 800c1c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800c1ca:	bf00      	nop
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d2:	4770      	bx	lr

0800c1d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800c1d8:	bf00      	nop
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e0:	4770      	bx	lr

0800c1e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800c1e2:	b480      	push	{r7}
 800c1e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800c1e6:	bf00      	nop
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ee:	4770      	bx	lr

0800c1f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800c1f4:	f003 fa68 	bl	800f6c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800c1f8:	bf00      	nop
 800c1fa:	bd80      	pop	{r7, pc}

0800c1fc <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800c200:	f7fd fe1c 	bl	8009e3c <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800c204:	bf00      	nop
 800c206:	bd80      	pop	{r7, pc}

0800c208 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800c20c:	4802      	ldr	r0, [pc, #8]	@ (800c218 <DMA1_Channel1_IRQHandler+0x10>)
 800c20e:	f005 f912 	bl	8011436 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800c212:	bf00      	nop
 800c214:	bd80      	pop	{r7, pc}
 800c216:	bf00      	nop
 800c218:	2000035c 	.word	0x2000035c

0800c21c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EOC_Pin);
 800c220:	2040      	movs	r0, #64	@ 0x40
 800c222:	f005 fcd7 	bl	8011bd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800c226:	bf00      	nop
 800c228:	bd80      	pop	{r7, pc}

0800c22a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800c22a:	b580      	push	{r7, lr}
 800c22c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PWR_Pin);
 800c22e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800c232:	f005 fccf 	bl	8011bd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800c236:	bf00      	nop
 800c238:	bd80      	pop	{r7, pc}

0800c23a <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 800c23a:	b580      	push	{r7, lr}
 800c23c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 800c23e:	f003 f821 	bl	800f284 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800c242:	bf00      	nop
 800c244:	bd80      	pop	{r7, pc}

0800c246 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800c246:	b580      	push	{r7, lr}
 800c248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800c24a:	f003 f851 	bl	800f2f0 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 800c24e:	bf00      	nop
 800c250:	bd80      	pop	{r7, pc}

0800c252 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800c252:	b580      	push	{r7, lr}
 800c254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800c256:	f005 fcd5 	bl	8011c04 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800c25a:	bf00      	nop
 800c25c:	bd80      	pop	{r7, pc}
	...

0800c260 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 800c264:	4802      	ldr	r0, [pc, #8]	@ (800c270 <QUADSPI_IRQHandler+0x10>)
 800c266:	f006 fc53 	bl	8012b10 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 800c26a:	bf00      	nop
 800c26c:	bd80      	pop	{r7, pc}
 800c26e:	bf00      	nop
 800c270:	20000520 	.word	0x20000520

0800c274 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800c274:	b480      	push	{r7}
 800c276:	af00      	add	r7, sp, #0
  return 1;
 800c278:	2301      	movs	r3, #1
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	46bd      	mov	sp, r7
 800c27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c282:	4770      	bx	lr

0800c284 <_kill>:

int _kill(int pid, int sig)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b082      	sub	sp, #8
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800c28e:	f00e f821 	bl	801a2d4 <__errno>
 800c292:	4603      	mov	r3, r0
 800c294:	2216      	movs	r2, #22
 800c296:	601a      	str	r2, [r3, #0]
  return -1;
 800c298:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	3708      	adds	r7, #8
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}

0800c2a4 <_exit>:

void _exit (int status)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b082      	sub	sp, #8
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800c2ac:	f04f 31ff 	mov.w	r1, #4294967295
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f7ff ffe7 	bl	800c284 <_kill>
  while (1) {}    /* Make sure we hang here */
 800c2b6:	bf00      	nop
 800c2b8:	e7fd      	b.n	800c2b6 <_exit+0x12>

0800c2ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800c2ba:	b580      	push	{r7, lr}
 800c2bc:	b086      	sub	sp, #24
 800c2be:	af00      	add	r7, sp, #0
 800c2c0:	60f8      	str	r0, [r7, #12]
 800c2c2:	60b9      	str	r1, [r7, #8]
 800c2c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	617b      	str	r3, [r7, #20]
 800c2ca:	e00a      	b.n	800c2e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800c2cc:	f7fe fb40 	bl	800a950 <__io_getchar>
 800c2d0:	4601      	mov	r1, r0
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	1c5a      	adds	r2, r3, #1
 800c2d6:	60ba      	str	r2, [r7, #8]
 800c2d8:	b2ca      	uxtb	r2, r1
 800c2da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	3301      	adds	r3, #1
 800c2e0:	617b      	str	r3, [r7, #20]
 800c2e2:	697a      	ldr	r2, [r7, #20]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	429a      	cmp	r2, r3
 800c2e8:	dbf0      	blt.n	800c2cc <_read+0x12>
  }

  return len;
 800c2ea:	687b      	ldr	r3, [r7, #4]
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3718      	adds	r7, #24
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}

0800c2f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b086      	sub	sp, #24
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	60f8      	str	r0, [r7, #12]
 800c2fc:	60b9      	str	r1, [r7, #8]
 800c2fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c300:	2300      	movs	r3, #0
 800c302:	617b      	str	r3, [r7, #20]
 800c304:	e009      	b.n	800c31a <_write+0x26>
  {
    __io_putchar(*ptr++);
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	1c5a      	adds	r2, r3, #1
 800c30a:	60ba      	str	r2, [r7, #8]
 800c30c:	781b      	ldrb	r3, [r3, #0]
 800c30e:	4618      	mov	r0, r3
 800c310:	f7fe fb0c 	bl	800a92c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	3301      	adds	r3, #1
 800c318:	617b      	str	r3, [r7, #20]
 800c31a:	697a      	ldr	r2, [r7, #20]
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	429a      	cmp	r2, r3
 800c320:	dbf1      	blt.n	800c306 <_write+0x12>
  }
  return len;
 800c322:	687b      	ldr	r3, [r7, #4]
}
 800c324:	4618      	mov	r0, r3
 800c326:	3718      	adds	r7, #24
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <_close>:

int _close(int file)
{
 800c32c:	b480      	push	{r7}
 800c32e:	b083      	sub	sp, #12
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800c334:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c338:	4618      	mov	r0, r3
 800c33a:	370c      	adds	r7, #12
 800c33c:	46bd      	mov	sp, r7
 800c33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c342:	4770      	bx	lr

0800c344 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800c344:	b480      	push	{r7}
 800c346:	b083      	sub	sp, #12
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
 800c34c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800c354:	605a      	str	r2, [r3, #4]
  return 0;
 800c356:	2300      	movs	r3, #0
}
 800c358:	4618      	mov	r0, r3
 800c35a:	370c      	adds	r7, #12
 800c35c:	46bd      	mov	sp, r7
 800c35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c362:	4770      	bx	lr

0800c364 <_isatty>:

int _isatty(int file)
{
 800c364:	b480      	push	{r7}
 800c366:	b083      	sub	sp, #12
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800c36c:	2301      	movs	r3, #1
}
 800c36e:	4618      	mov	r0, r3
 800c370:	370c      	adds	r7, #12
 800c372:	46bd      	mov	sp, r7
 800c374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c378:	4770      	bx	lr

0800c37a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800c37a:	b480      	push	{r7}
 800c37c:	b085      	sub	sp, #20
 800c37e:	af00      	add	r7, sp, #0
 800c380:	60f8      	str	r0, [r7, #12]
 800c382:	60b9      	str	r1, [r7, #8]
 800c384:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800c386:	2300      	movs	r3, #0
}
 800c388:	4618      	mov	r0, r3
 800c38a:	3714      	adds	r7, #20
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr

0800c394 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b086      	sub	sp, #24
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800c39c:	4a14      	ldr	r2, [pc, #80]	@ (800c3f0 <_sbrk+0x5c>)
 800c39e:	4b15      	ldr	r3, [pc, #84]	@ (800c3f4 <_sbrk+0x60>)
 800c3a0:	1ad3      	subs	r3, r2, r3
 800c3a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800c3a8:	4b13      	ldr	r3, [pc, #76]	@ (800c3f8 <_sbrk+0x64>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d102      	bne.n	800c3b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800c3b0:	4b11      	ldr	r3, [pc, #68]	@ (800c3f8 <_sbrk+0x64>)
 800c3b2:	4a12      	ldr	r2, [pc, #72]	@ (800c3fc <_sbrk+0x68>)
 800c3b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800c3b6:	4b10      	ldr	r3, [pc, #64]	@ (800c3f8 <_sbrk+0x64>)
 800c3b8:	681a      	ldr	r2, [r3, #0]
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	4413      	add	r3, r2
 800c3be:	693a      	ldr	r2, [r7, #16]
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d207      	bcs.n	800c3d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800c3c4:	f00d ff86 	bl	801a2d4 <__errno>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	220c      	movs	r2, #12
 800c3cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800c3ce:	f04f 33ff 	mov.w	r3, #4294967295
 800c3d2:	e009      	b.n	800c3e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800c3d4:	4b08      	ldr	r3, [pc, #32]	@ (800c3f8 <_sbrk+0x64>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800c3da:	4b07      	ldr	r3, [pc, #28]	@ (800c3f8 <_sbrk+0x64>)
 800c3dc:	681a      	ldr	r2, [r3, #0]
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	4413      	add	r3, r2
 800c3e2:	4a05      	ldr	r2, [pc, #20]	@ (800c3f8 <_sbrk+0x64>)
 800c3e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3718      	adds	r7, #24
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}
 800c3f0:	20030000 	.word	0x20030000
 800c3f4:	00000400 	.word	0x00000400
 800c3f8:	20000588 	.word	0x20000588
 800c3fc:	20000b90 	.word	0x20000b90

0800c400 <LL_AHB2_GRP1_EnableClock>:
{
 800c400:	b480      	push	{r7}
 800c402:	b085      	sub	sp, #20
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800c408:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c40c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c40e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	4313      	orrs	r3, r2
 800c416:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800c418:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c41c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	4013      	ands	r3, r2
 800c422:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c424:	68fb      	ldr	r3, [r7, #12]
}
 800c426:	bf00      	nop
 800c428:	3714      	adds	r7, #20
 800c42a:	46bd      	mov	sp, r7
 800c42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c430:	4770      	bx	lr

0800c432 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800c432:	b480      	push	{r7}
 800c434:	b085      	sub	sp, #20
 800c436:	af00      	add	r7, sp, #0
 800c438:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800c43a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c43e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c440:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	4313      	orrs	r3, r2
 800c448:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800c44a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c44e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	4013      	ands	r3, r2
 800c454:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c456:	68fb      	ldr	r3, [r7, #12]
}
 800c458:	bf00      	nop
 800c45a:	3714      	adds	r7, #20
 800c45c:	46bd      	mov	sp, r7
 800c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c462:	4770      	bx	lr

0800c464 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800c468:	4b22      	ldr	r3, [pc, #136]	@ (800c4f4 <MX_LPUART1_UART_Init+0x90>)
 800c46a:	4a23      	ldr	r2, [pc, #140]	@ (800c4f8 <MX_LPUART1_UART_Init+0x94>)
 800c46c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 800c46e:	4b21      	ldr	r3, [pc, #132]	@ (800c4f4 <MX_LPUART1_UART_Init+0x90>)
 800c470:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800c474:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c476:	4b1f      	ldr	r3, [pc, #124]	@ (800c4f4 <MX_LPUART1_UART_Init+0x90>)
 800c478:	2200      	movs	r2, #0
 800c47a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800c47c:	4b1d      	ldr	r3, [pc, #116]	@ (800c4f4 <MX_LPUART1_UART_Init+0x90>)
 800c47e:	2200      	movs	r2, #0
 800c480:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800c482:	4b1c      	ldr	r3, [pc, #112]	@ (800c4f4 <MX_LPUART1_UART_Init+0x90>)
 800c484:	2200      	movs	r2, #0
 800c486:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800c488:	4b1a      	ldr	r3, [pc, #104]	@ (800c4f4 <MX_LPUART1_UART_Init+0x90>)
 800c48a:	220c      	movs	r2, #12
 800c48c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c48e:	4b19      	ldr	r3, [pc, #100]	@ (800c4f4 <MX_LPUART1_UART_Init+0x90>)
 800c490:	2200      	movs	r2, #0
 800c492:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800c494:	4b17      	ldr	r3, [pc, #92]	@ (800c4f4 <MX_LPUART1_UART_Init+0x90>)
 800c496:	2200      	movs	r2, #0
 800c498:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800c49a:	4b16      	ldr	r3, [pc, #88]	@ (800c4f4 <MX_LPUART1_UART_Init+0x90>)
 800c49c:	2200      	movs	r2, #0
 800c49e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c4a0:	4b14      	ldr	r3, [pc, #80]	@ (800c4f4 <MX_LPUART1_UART_Init+0x90>)
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800c4a6:	4b13      	ldr	r3, [pc, #76]	@ (800c4f4 <MX_LPUART1_UART_Init+0x90>)
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800c4ac:	4811      	ldr	r0, [pc, #68]	@ (800c4f4 <MX_LPUART1_UART_Init+0x90>)
 800c4ae:	f009 fb05 	bl	8015abc <HAL_UART_Init>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d001      	beq.n	800c4bc <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800c4b8:	f7fe fa68 	bl	800a98c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800c4bc:	2100      	movs	r1, #0
 800c4be:	480d      	ldr	r0, [pc, #52]	@ (800c4f4 <MX_LPUART1_UART_Init+0x90>)
 800c4c0:	f00a f922 	bl	8016708 <HAL_UARTEx_SetTxFifoThreshold>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d001      	beq.n	800c4ce <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800c4ca:	f7fe fa5f 	bl	800a98c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800c4ce:	2100      	movs	r1, #0
 800c4d0:	4808      	ldr	r0, [pc, #32]	@ (800c4f4 <MX_LPUART1_UART_Init+0x90>)
 800c4d2:	f00a f957 	bl	8016784 <HAL_UARTEx_SetRxFifoThreshold>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d001      	beq.n	800c4e0 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800c4dc:	f7fe fa56 	bl	800a98c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800c4e0:	4804      	ldr	r0, [pc, #16]	@ (800c4f4 <MX_LPUART1_UART_Init+0x90>)
 800c4e2:	f00a f8d8 	bl	8016696 <HAL_UARTEx_DisableFifoMode>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d001      	beq.n	800c4f0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800c4ec:	f7fe fa4e 	bl	800a98c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800c4f0:	bf00      	nop
 800c4f2:	bd80      	pop	{r7, pc}
 800c4f4:	2000058c 	.word	0x2000058c
 800c4f8:	40008000 	.word	0x40008000

0800c4fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b09c      	sub	sp, #112	@ 0x70
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c504:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800c508:	2200      	movs	r2, #0
 800c50a:	601a      	str	r2, [r3, #0]
 800c50c:	605a      	str	r2, [r3, #4]
 800c50e:	609a      	str	r2, [r3, #8]
 800c510:	60da      	str	r2, [r3, #12]
 800c512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c514:	f107 030c 	add.w	r3, r7, #12
 800c518:	2250      	movs	r2, #80	@ 0x50
 800c51a:	2100      	movs	r1, #0
 800c51c:	4618      	mov	r0, r3
 800c51e:	f00d fe87 	bl	801a230 <memset>
  if(uartHandle->Instance==LPUART1)
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	4a1f      	ldr	r2, [pc, #124]	@ (800c5a4 <HAL_UART_MspInit+0xa8>)
 800c528:	4293      	cmp	r3, r2
 800c52a:	d136      	bne.n	800c59a <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800c52c:	2302      	movs	r3, #2
 800c52e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800c530:	2300      	movs	r3, #0
 800c532:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c534:	f107 030c 	add.w	r3, r7, #12
 800c538:	4618      	mov	r0, r3
 800c53a:	f008 fc04 	bl	8014d46 <HAL_RCCEx_PeriphCLKConfig>
 800c53e:	4603      	mov	r3, r0
 800c540:	2b00      	cmp	r3, #0
 800c542:	d001      	beq.n	800c548 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800c544:	f7fe fa22 	bl	800a98c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800c548:	2001      	movs	r0, #1
 800c54a:	f7ff ff72 	bl	800c432 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c54e:	2004      	movs	r0, #4
 800c550:	f7ff ff56 	bl	800c400 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c554:	2002      	movs	r0, #2
 800c556:	f7ff ff53 	bl	800c400 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PB5     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800c55a:	2301      	movs	r3, #1
 800c55c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c55e:	2302      	movs	r3, #2
 800c560:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c562:	2300      	movs	r3, #0
 800c564:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c566:	2300      	movs	r3, #0
 800c568:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800c56a:	2308      	movs	r3, #8
 800c56c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c56e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800c572:	4619      	mov	r1, r3
 800c574:	480c      	ldr	r0, [pc, #48]	@ (800c5a8 <HAL_UART_MspInit+0xac>)
 800c576:	f005 f8af 	bl	80116d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800c57a:	2320      	movs	r3, #32
 800c57c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c57e:	2302      	movs	r3, #2
 800c580:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c582:	2300      	movs	r3, #0
 800c584:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c586:	2300      	movs	r3, #0
 800c588:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800c58a:	2308      	movs	r3, #8
 800c58c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c58e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800c592:	4619      	mov	r1, r3
 800c594:	4805      	ldr	r0, [pc, #20]	@ (800c5ac <HAL_UART_MspInit+0xb0>)
 800c596:	f005 f89f 	bl	80116d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800c59a:	bf00      	nop
 800c59c:	3770      	adds	r7, #112	@ 0x70
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}
 800c5a2:	bf00      	nop
 800c5a4:	40008000 	.word	0x40008000
 800c5a8:	48000800 	.word	0x48000800
 800c5ac:	48000400 	.word	0x48000400

0800c5b0 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800c5b4:	4b03      	ldr	r3, [pc, #12]	@ (800c5c4 <LL_FLASH_GetUDN+0x14>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c0:	4770      	bx	lr
 800c5c2:	bf00      	nop
 800c5c4:	1fff7580 	.word	0x1fff7580

0800c5c8 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800c5cc:	4b03      	ldr	r3, [pc, #12]	@ (800c5dc <LL_FLASH_GetDeviceID+0x14>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	b2db      	uxtb	r3, r3
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5da:	4770      	bx	lr
 800c5dc:	1fff7584 	.word	0x1fff7584

0800c5e0 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800c5e4:	4b03      	ldr	r3, [pc, #12]	@ (800c5f4 <LL_FLASH_GetSTCompanyID+0x14>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	0a1b      	lsrs	r3, r3, #8
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f2:	4770      	bx	lr
 800c5f4:	1fff7584 	.word	0x1fff7584

0800c5f8 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800c5f8:	b5b0      	push	{r4, r5, r7, lr}
 800c5fa:	b092      	sub	sp, #72	@ 0x48
 800c5fc:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c5fe:	2392      	movs	r3, #146	@ 0x92
 800c600:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
  uint8_t* BD_A = BleGetBdAddress();
 800c604:	f000 fa28 	bl	800ca58 <BleGetBdAddress>
 800c608:	6438      	str	r0, [r7, #64]	@ 0x40
  a_AdvData[11]=BD_A[5];
 800c60a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c60c:	795a      	ldrb	r2, [r3, #5]
 800c60e:	4b30      	ldr	r3, [pc, #192]	@ (800c6d0 <APP_BLE_Init+0xd8>)
 800c610:	72da      	strb	r2, [r3, #11]
  a_AdvData[12]=BD_A[4];
 800c612:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c614:	791a      	ldrb	r2, [r3, #4]
 800c616:	4b2e      	ldr	r3, [pc, #184]	@ (800c6d0 <APP_BLE_Init+0xd8>)
 800c618:	731a      	strb	r2, [r3, #12]
  a_AdvData[13]=BD_A[3];
 800c61a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c61c:	78da      	ldrb	r2, [r3, #3]
 800c61e:	4b2c      	ldr	r3, [pc, #176]	@ (800c6d0 <APP_BLE_Init+0xd8>)
 800c620:	735a      	strb	r2, [r3, #13]
  a_AdvData[14]=BD_A[2];
 800c622:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c624:	789a      	ldrb	r2, [r3, #2]
 800c626:	4b2a      	ldr	r3, [pc, #168]	@ (800c6d0 <APP_BLE_Init+0xd8>)
 800c628:	739a      	strb	r2, [r3, #14]
  a_AdvData[15]=BD_A[1];
 800c62a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c62c:	785a      	ldrb	r2, [r3, #1]
 800c62e:	4b28      	ldr	r3, [pc, #160]	@ (800c6d0 <APP_BLE_Init+0xd8>)
 800c630:	73da      	strb	r2, [r3, #15]
  a_AdvData[16]=BD_A[0];
 800c632:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c634:	781a      	ldrb	r2, [r3, #0]
 800c636:	4b26      	ldr	r3, [pc, #152]	@ (800c6d0 <APP_BLE_Init+0xd8>)
 800c638:	741a      	strb	r2, [r3, #16]
  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800c63a:	4b26      	ldr	r3, [pc, #152]	@ (800c6d4 <APP_BLE_Init+0xdc>)
 800c63c:	1d3c      	adds	r4, r7, #4
 800c63e:	461d      	mov	r5, r3
 800c640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c64a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c64c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c650:	c403      	stmia	r4!, {r0, r1}
 800c652:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800c654:	f000 f906 	bl	800c864 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800c658:	2101      	movs	r1, #1
 800c65a:	2002      	movs	r0, #2
 800c65c:	f00c fa8c 	bl	8018b78 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800c660:	4a1d      	ldr	r2, [pc, #116]	@ (800c6d8 <APP_BLE_Init+0xe0>)
 800c662:	2100      	movs	r1, #0
 800c664:	2002      	movs	r0, #2
 800c666:	f00c fbe9 	bl	8018e3c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800c66a:	1d3b      	adds	r3, r7, #4
 800c66c:	4618      	mov	r0, r3
 800c66e:	f00b fc23 	bl	8017eb8 <SHCI_C2_BLE_Init>
 800c672:	4603      	mov	r3, r0
 800c674:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (status != SHCI_Success)
 800c678:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d001      	beq.n	800c684 <APP_BLE_Init+0x8c>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800c680:	f7fe f984 	bl	800a98c <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800c684:	f000 f904 	bl	800c890 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800c688:	f00b ff76 	bl	8018578 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c68c:	4b13      	ldr	r3, [pc, #76]	@ (800c6dc <APP_BLE_Init+0xe4>)
 800c68e:	2200      	movs	r2, #0
 800c690:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800c694:	4b11      	ldr	r3, [pc, #68]	@ (800c6dc <APP_BLE_Init+0xe4>)
 800c696:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c69a:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800c69c:	4a10      	ldr	r2, [pc, #64]	@ (800c6e0 <APP_BLE_Init+0xe8>)
 800c69e:	2100      	movs	r1, #0
 800c6a0:	2001      	movs	r0, #1
 800c6a2:	f00c fbcb 	bl	8018e3c <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800c6a6:	2006      	movs	r0, #6
 800c6a8:	f00b f92c 	bl	8017904 <aci_hal_set_radio_activity_mask>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800c6b2:	f000 fdb1 	bl	800d218 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800c6b6:	4b09      	ldr	r3, [pc, #36]	@ (800c6dc <APP_BLE_Init+0xe4>)
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800c6bc:	4b07      	ldr	r3, [pc, #28]	@ (800c6dc <APP_BLE_Init+0xe4>)
 800c6be:	2200      	movs	r2, #0
 800c6c0:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800c6c2:	2001      	movs	r0, #1
 800c6c4:	f000 f998 	bl	800c9f8 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800c6c8:	bf00      	nop
}
 800c6ca:	3748      	adds	r7, #72	@ 0x48
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bdb0      	pop	{r4, r5, r7, pc}
 800c6d0:	20000034 	.word	0x20000034
 800c6d4:	0801dc8c 	.word	0x0801dc8c
 800c6d8:	08017b29 	.word	0x08017b29
 800c6dc:	20000628 	.word	0x20000628
 800c6e0:	0800cae1 	.word	0x0800cae1

0800c6e4 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b08a      	sub	sp, #40	@ 0x28
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800c6ec:	2392      	movs	r3, #146	@ 0x92
 800c6ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	3301      	adds	r3, #1
 800c6f6:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800c6f8:	6a3b      	ldr	r3, [r7, #32]
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	2bff      	cmp	r3, #255	@ 0xff
 800c6fe:	d053      	beq.n	800c7a8 <SVCCTL_App_Notification+0xc4>
 800c700:	2bff      	cmp	r3, #255	@ 0xff
 800c702:	f300 80a1 	bgt.w	800c848 <SVCCTL_App_Notification+0x164>
 800c706:	2b05      	cmp	r3, #5
 800c708:	d002      	beq.n	800c710 <SVCCTL_App_Notification+0x2c>
 800c70a:	2b3e      	cmp	r3, #62	@ 0x3e
 800c70c:	d020      	beq.n	800c750 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800c70e:	e09b      	b.n	800c848 <SVCCTL_App_Notification+0x164>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800c710:	6a3b      	ldr	r3, [r7, #32]
 800c712:	3302      	adds	r3, #2
 800c714:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c71c:	b29a      	uxth	r2, r3
 800c71e:	4b4e      	ldr	r3, [pc, #312]	@ (800c858 <SVCCTL_App_Notification+0x174>)
 800c720:	8adb      	ldrh	r3, [r3, #22]
 800c722:	429a      	cmp	r2, r3
 800c724:	d106      	bne.n	800c734 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800c726:	4b4c      	ldr	r3, [pc, #304]	@ (800c858 <SVCCTL_App_Notification+0x174>)
 800c728:	2200      	movs	r2, #0
 800c72a:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c72c:	4b4a      	ldr	r3, [pc, #296]	@ (800c858 <SVCCTL_App_Notification+0x174>)
 800c72e:	2200      	movs	r2, #0
 800c730:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 800c734:	2001      	movs	r0, #1
 800c736:	f000 f95f 	bl	800c9f8 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800c73a:	4b48      	ldr	r3, [pc, #288]	@ (800c85c <SVCCTL_App_Notification+0x178>)
 800c73c:	2201      	movs	r2, #1
 800c73e:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800c740:	4b45      	ldr	r3, [pc, #276]	@ (800c858 <SVCCTL_App_Notification+0x174>)
 800c742:	8ada      	ldrh	r2, [r3, #22]
 800c744:	4b45      	ldr	r3, [pc, #276]	@ (800c85c <SVCCTL_App_Notification+0x178>)
 800c746:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800c748:	4844      	ldr	r0, [pc, #272]	@ (800c85c <SVCCTL_App_Notification+0x178>)
 800c74a:	f000 fd27 	bl	800d19c <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800c74e:	e07e      	b.n	800c84e <SVCCTL_App_Notification+0x16a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800c750:	6a3b      	ldr	r3, [r7, #32]
 800c752:	3302      	adds	r3, #2
 800c754:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	781b      	ldrb	r3, [r3, #0]
 800c75a:	2b01      	cmp	r3, #1
 800c75c:	d001      	beq.n	800c762 <SVCCTL_App_Notification+0x7e>
 800c75e:	2b03      	cmp	r3, #3
          break;
 800c760:	e021      	b.n	800c7a6 <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800c762:	697b      	ldr	r3, [r7, #20]
 800c764:	3301      	adds	r3, #1
 800c766:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800c768:	4b3b      	ldr	r3, [pc, #236]	@ (800c858 <SVCCTL_App_Notification+0x174>)
 800c76a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c76e:	2b04      	cmp	r3, #4
 800c770:	d104      	bne.n	800c77c <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800c772:	4b39      	ldr	r3, [pc, #228]	@ (800c858 <SVCCTL_App_Notification+0x174>)
 800c774:	2206      	movs	r2, #6
 800c776:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800c77a:	e003      	b.n	800c784 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800c77c:	4b36      	ldr	r3, [pc, #216]	@ (800c858 <SVCCTL_App_Notification+0x174>)
 800c77e:	2205      	movs	r2, #5
 800c780:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c78a:	b29a      	uxth	r2, r3
 800c78c:	4b32      	ldr	r3, [pc, #200]	@ (800c858 <SVCCTL_App_Notification+0x174>)
 800c78e:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800c790:	4b32      	ldr	r3, [pc, #200]	@ (800c85c <SVCCTL_App_Notification+0x178>)
 800c792:	2200      	movs	r2, #0
 800c794:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800c796:	4b30      	ldr	r3, [pc, #192]	@ (800c858 <SVCCTL_App_Notification+0x174>)
 800c798:	8ada      	ldrh	r2, [r3, #22]
 800c79a:	4b30      	ldr	r3, [pc, #192]	@ (800c85c <SVCCTL_App_Notification+0x178>)
 800c79c:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800c79e:	482f      	ldr	r0, [pc, #188]	@ (800c85c <SVCCTL_App_Notification+0x178>)
 800c7a0:	f000 fcfc 	bl	800d19c <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800c7a4:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800c7a6:	e052      	b.n	800c84e <SVCCTL_App_Notification+0x16a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800c7a8:	6a3b      	ldr	r3, [r7, #32]
 800c7aa:	3302      	adds	r3, #2
 800c7ac:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800c7ae:	69fb      	ldr	r3, [r7, #28]
 800c7b0:	881b      	ldrh	r3, [r3, #0]
 800c7b2:	b29b      	uxth	r3, r3
 800c7b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c7b8:	d040      	beq.n	800c83c <SVCCTL_App_Notification+0x158>
 800c7ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c7be:	dc45      	bgt.n	800c84c <SVCCTL_App_Notification+0x168>
 800c7c0:	2b04      	cmp	r3, #4
 800c7c2:	d03d      	beq.n	800c840 <SVCCTL_App_Notification+0x15c>
 800c7c4:	2b04      	cmp	r3, #4
 800c7c6:	db41      	blt.n	800c84c <SVCCTL_App_Notification+0x168>
 800c7c8:	f240 420a 	movw	r2, #1034	@ 0x40a
 800c7cc:	4293      	cmp	r3, r2
 800c7ce:	dc3d      	bgt.n	800c84c <SVCCTL_App_Notification+0x168>
 800c7d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c7d4:	dd3a      	ble.n	800c84c <SVCCTL_App_Notification+0x168>
 800c7d6:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 800c7da:	2b09      	cmp	r3, #9
 800c7dc:	d836      	bhi.n	800c84c <SVCCTL_App_Notification+0x168>
 800c7de:	a201      	add	r2, pc, #4	@ (adr r2, 800c7e4 <SVCCTL_App_Notification+0x100>)
 800c7e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7e4:	0800c835 	.word	0x0800c835
 800c7e8:	0800c80d 	.word	0x0800c80d
 800c7ec:	0800c84d 	.word	0x0800c84d
 800c7f0:	0800c84d 	.word	0x0800c84d
 800c7f4:	0800c84d 	.word	0x0800c84d
 800c7f8:	0800c84d 	.word	0x0800c84d
 800c7fc:	0800c845 	.word	0x0800c845
 800c800:	0800c84d 	.word	0x0800c84d
 800c804:	0800c821 	.word	0x0800c821
 800c808:	0800c845 	.word	0x0800c845
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800c80c:	4b12      	ldr	r3, [pc, #72]	@ (800c858 <SVCCTL_App_Notification+0x174>)
 800c80e:	8adb      	ldrh	r3, [r3, #22]
 800c810:	4913      	ldr	r1, [pc, #76]	@ (800c860 <SVCCTL_App_Notification+0x17c>)
 800c812:	4618      	mov	r0, r3
 800c814:	f00a fa78 	bl	8016d08 <aci_gap_pass_key_resp>
 800c818:	4603      	mov	r3, r0
 800c81a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 800c81e:	e012      	b.n	800c846 <SVCCTL_App_Notification+0x162>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800c820:	4b0d      	ldr	r3, [pc, #52]	@ (800c858 <SVCCTL_App_Notification+0x174>)
 800c822:	8adb      	ldrh	r3, [r3, #22]
 800c824:	2101      	movs	r1, #1
 800c826:	4618      	mov	r0, r3
 800c828:	f00a fc18 	bl	801705c <aci_gap_numeric_comparison_value_confirm_yesno>
 800c82c:	4603      	mov	r3, r0
 800c82e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 800c832:	e008      	b.n	800c846 <SVCCTL_App_Notification+0x162>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800c834:	69fb      	ldr	r3, [r7, #28]
 800c836:	3302      	adds	r3, #2
 800c838:	61bb      	str	r3, [r7, #24]
          break;
 800c83a:	e004      	b.n	800c846 <SVCCTL_App_Notification+0x162>
          break;
 800c83c:	bf00      	nop
 800c83e:	e005      	b.n	800c84c <SVCCTL_App_Notification+0x168>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800c840:	bf00      	nop
 800c842:	e003      	b.n	800c84c <SVCCTL_App_Notification+0x168>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800c844:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800c846:	e001      	b.n	800c84c <SVCCTL_App_Notification+0x168>
      break;
 800c848:	bf00      	nop
 800c84a:	e000      	b.n	800c84e <SVCCTL_App_Notification+0x16a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800c84c:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800c84e:	2301      	movs	r3, #1
}
 800c850:	4618      	mov	r0, r3
 800c852:	3728      	adds	r7, #40	@ 0x28
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}
 800c858:	20000628 	.word	0x20000628
 800c85c:	200006ac 	.word	0x200006ac
 800c860:	0001b207 	.word	0x0001b207

0800c864 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b082      	sub	sp, #8
 800c868:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800c86a:	4b06      	ldr	r3, [pc, #24]	@ (800c884 <Ble_Tl_Init+0x20>)
 800c86c:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800c86e:	4b06      	ldr	r3, [pc, #24]	@ (800c888 <Ble_Tl_Init+0x24>)
 800c870:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800c872:	463b      	mov	r3, r7
 800c874:	4619      	mov	r1, r3
 800c876:	4805      	ldr	r0, [pc, #20]	@ (800c88c <Ble_Tl_Init+0x28>)
 800c878:	f00b f93a 	bl	8017af0 <hci_init>

  return;
 800c87c:	bf00      	nop
}
 800c87e:	3708      	adds	r7, #8
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}
 800c884:	20030028 	.word	0x20030028
 800c888:	0800cb91 	.word	0x0800cb91
 800c88c:	0800cb59 	.word	0x0800cb59

0800c890 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800c890:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c892:	b08d      	sub	sp, #52	@ 0x34
 800c894:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800c896:	2300      	movs	r3, #0
 800c898:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c89a:	2392      	movs	r3, #146	@ 0x92
 800c89c:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800c89e:	f00b f885 	bl	80179ac <hci_reset>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800c8a6:	f000 f8d7 	bl	800ca58 <BleGetBdAddress>
 800c8aa:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800c8ac:	693a      	ldr	r2, [r7, #16]
 800c8ae:	2106      	movs	r1, #6
 800c8b0:	2000      	movs	r0, #0
 800c8b2:	f00a ff3b 	bl	801772c <aci_hal_write_config_data>
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800c8ba:	4a4a      	ldr	r2, [pc, #296]	@ (800c9e4 <Ble_Hci_Gap_Gatt_Init+0x154>)
 800c8bc:	2110      	movs	r1, #16
 800c8be:	2018      	movs	r0, #24
 800c8c0:	f00a ff34 	bl	801772c <aci_hal_write_config_data>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800c8c8:	4a47      	ldr	r2, [pc, #284]	@ (800c9e8 <Ble_Hci_Gap_Gatt_Init+0x158>)
 800c8ca:	2110      	movs	r1, #16
 800c8cc:	2008      	movs	r0, #8
 800c8ce:	f00a ff2d 	bl	801772c <aci_hal_write_config_data>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800c8d6:	211f      	movs	r1, #31
 800c8d8:	2001      	movs	r0, #1
 800c8da:	f00a ffac 	bl	8017836 <aci_hal_set_tx_power_level>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800c8e2:	f00a fc22 	bl	801712a <aci_gatt_init>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800c8ee:	7bfb      	ldrb	r3, [r7, #15]
 800c8f0:	f043 0301 	orr.w	r3, r3, #1
 800c8f4:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800c8f6:	7bfb      	ldrb	r3, [r7, #15]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d01f      	beq.n	800c93c <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800c8fc:	4b3b      	ldr	r3, [pc, #236]	@ (800c9ec <Ble_Hci_Gap_Gatt_Init+0x15c>)
 800c8fe:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800c900:	1dba      	adds	r2, r7, #6
 800c902:	7bf8      	ldrb	r0, [r7, #15]
 800c904:	1cbb      	adds	r3, r7, #2
 800c906:	9301      	str	r3, [sp, #4]
 800c908:	1d3b      	adds	r3, r7, #4
 800c90a:	9300      	str	r3, [sp, #0]
 800c90c:	4613      	mov	r3, r2
 800c90e:	2205      	movs	r2, #5
 800c910:	2100      	movs	r1, #0
 800c912:	f00a fa60 	bl	8016dd6 <aci_gap_init>
 800c916:	4603      	mov	r3, r0
 800c918:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800c91a:	88fc      	ldrh	r4, [r7, #6]
 800c91c:	88bd      	ldrh	r5, [r7, #4]
 800c91e:	68b8      	ldr	r0, [r7, #8]
 800c920:	f7fa fc86 	bl	8007230 <strlen>
 800c924:	4603      	mov	r3, r0
 800c926:	b2da      	uxtb	r2, r3
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	9300      	str	r3, [sp, #0]
 800c92c:	4613      	mov	r3, r2
 800c92e:	2200      	movs	r2, #0
 800c930:	4629      	mov	r1, r5
 800c932:	4620      	mov	r0, r4
 800c934:	f00a fdfc 	bl	8017530 <aci_gatt_update_char_value>
 800c938:	4603      	mov	r3, r0
 800c93a:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800c93c:	88f8      	ldrh	r0, [r7, #6]
 800c93e:	8879      	ldrh	r1, [r7, #2]
 800c940:	463b      	mov	r3, r7
 800c942:	9300      	str	r3, [sp, #0]
 800c944:	2302      	movs	r3, #2
 800c946:	2200      	movs	r2, #0
 800c948:	f00a fdf2 	bl	8017530 <aci_gatt_update_char_value>
 800c94c:	4603      	mov	r3, r0
 800c94e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800c950:	2202      	movs	r2, #2
 800c952:	2102      	movs	r1, #2
 800c954:	2000      	movs	r0, #0
 800c956:	f00b f84d 	bl	80179f4 <hci_le_set_default_phy>
 800c95a:	4603      	mov	r3, r0
 800c95c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800c95e:	4b24      	ldr	r3, [pc, #144]	@ (800c9f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800c960:	2200      	movs	r2, #0
 800c962:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800c964:	4b22      	ldr	r3, [pc, #136]	@ (800c9f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800c966:	781b      	ldrb	r3, [r3, #0]
 800c968:	4618      	mov	r0, r3
 800c96a:	f00a f8b5 	bl	8016ad8 <aci_gap_set_io_capability>
 800c96e:	4603      	mov	r3, r0
 800c970:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800c972:	4b1f      	ldr	r3, [pc, #124]	@ (800c9f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800c974:	2201      	movs	r2, #1
 800c976:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800c978:	4b1d      	ldr	r3, [pc, #116]	@ (800c9f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800c97a:	2208      	movs	r2, #8
 800c97c:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800c97e:	4b1c      	ldr	r3, [pc, #112]	@ (800c9f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800c980:	2210      	movs	r2, #16
 800c982:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800c984:	4b1a      	ldr	r3, [pc, #104]	@ (800c9f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800c986:	2200      	movs	r2, #0
 800c988:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800c98a:	4b19      	ldr	r3, [pc, #100]	@ (800c9f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800c98c:	4a19      	ldr	r2, [pc, #100]	@ (800c9f4 <Ble_Hci_Gap_Gatt_Init+0x164>)
 800c98e:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800c990:	4b17      	ldr	r3, [pc, #92]	@ (800c9f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800c992:	2201      	movs	r2, #1
 800c994:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800c996:	4b16      	ldr	r3, [pc, #88]	@ (800c9f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800c998:	789c      	ldrb	r4, [r3, #2]
 800c99a:	4b15      	ldr	r3, [pc, #84]	@ (800c9f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800c99c:	785d      	ldrb	r5, [r3, #1]
 800c99e:	4b14      	ldr	r3, [pc, #80]	@ (800c9f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800c9a0:	791b      	ldrb	r3, [r3, #4]
 800c9a2:	4a13      	ldr	r2, [pc, #76]	@ (800c9f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800c9a4:	7952      	ldrb	r2, [r2, #5]
 800c9a6:	4912      	ldr	r1, [pc, #72]	@ (800c9f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800c9a8:	78c9      	ldrb	r1, [r1, #3]
 800c9aa:	4811      	ldr	r0, [pc, #68]	@ (800c9f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800c9ac:	6880      	ldr	r0, [r0, #8]
 800c9ae:	2600      	movs	r6, #0
 800c9b0:	9604      	str	r6, [sp, #16]
 800c9b2:	9003      	str	r0, [sp, #12]
 800c9b4:	9102      	str	r1, [sp, #8]
 800c9b6:	9201      	str	r2, [sp, #4]
 800c9b8:	9300      	str	r3, [sp, #0]
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	2202      	movs	r2, #2
 800c9be:	4629      	mov	r1, r5
 800c9c0:	4620      	mov	r0, r4
 800c9c2:	f00a f8dd 	bl	8016b80 <aci_gap_set_authentication_requirement>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800c9ca:	4b09      	ldr	r3, [pc, #36]	@ (800c9f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800c9cc:	789b      	ldrb	r3, [r3, #2]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d003      	beq.n	800c9da <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 800c9d2:	f00a fb1f 	bl	8017014 <aci_gap_configure_filter_accept_list>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 800c9da:	bf00      	nop
 800c9dc:	371c      	adds	r7, #28
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9e2:	bf00      	nop
 800c9e4:	0801e148 	.word	0x0801e148
 800c9e8:	0801e158 	.word	0x0801e158
 800c9ec:	0801dcc8 	.word	0x0801dcc8
 800c9f0:	20000628 	.word	0x20000628
 800c9f4:	0001b207 	.word	0x0001b207

0800c9f8 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b08c      	sub	sp, #48	@ 0x30
 800c9fc:	af08      	add	r7, sp, #32
 800c9fe:	4603      	mov	r3, r0
 800ca00:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ca02:	2392      	movs	r3, #146	@ 0x92
 800ca04:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800ca06:	4a12      	ldr	r2, [pc, #72]	@ (800ca50 <Adv_Request+0x58>)
 800ca08:	79fb      	ldrb	r3, [r7, #7]
 800ca0a:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800ca0e:	2300      	movs	r3, #0
 800ca10:	9306      	str	r3, [sp, #24]
 800ca12:	2300      	movs	r3, #0
 800ca14:	9305      	str	r3, [sp, #20]
 800ca16:	2300      	movs	r3, #0
 800ca18:	9304      	str	r3, [sp, #16]
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	9303      	str	r3, [sp, #12]
 800ca1e:	2300      	movs	r3, #0
 800ca20:	9302      	str	r3, [sp, #8]
 800ca22:	2300      	movs	r3, #0
 800ca24:	9301      	str	r3, [sp, #4]
 800ca26:	2300      	movs	r3, #0
 800ca28:	9300      	str	r3, [sp, #0]
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	22a0      	movs	r2, #160	@ 0xa0
 800ca2e:	2180      	movs	r1, #128	@ 0x80
 800ca30:	2000      	movs	r0, #0
 800ca32:	f009 ff57 	bl	80168e4 <aci_gap_set_discoverable>
 800ca36:	4603      	mov	r3, r0
 800ca38:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800ca3a:	4906      	ldr	r1, [pc, #24]	@ (800ca54 <Adv_Request+0x5c>)
 800ca3c:	2011      	movs	r0, #17
 800ca3e:	f00a fa77 	bl	8016f30 <aci_gap_update_adv_data>
 800ca42:	4603      	mov	r3, r0
 800ca44:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800ca46:	bf00      	nop
}
 800ca48:	3710      	adds	r7, #16
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}
 800ca4e:	bf00      	nop
 800ca50:	20000628 	.word	0x20000628
 800ca54:	20000034 	.word	0x20000034

0800ca58 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b086      	sub	sp, #24
 800ca5c:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800ca5e:	f7ff fda7 	bl	800c5b0 <LL_FLASH_GetUDN>
 800ca62:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca6a:	d023      	beq.n	800cab4 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800ca6c:	f7ff fdb8 	bl	800c5e0 <LL_FLASH_GetSTCompanyID>
 800ca70:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800ca72:	f7ff fda9 	bl	800c5c8 <LL_FLASH_GetDeviceID>
 800ca76:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	b2da      	uxtb	r2, r3
 800ca7c:	4b16      	ldr	r3, [pc, #88]	@ (800cad8 <BleGetBdAddress+0x80>)
 800ca7e:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800ca80:	693b      	ldr	r3, [r7, #16]
 800ca82:	0a1b      	lsrs	r3, r3, #8
 800ca84:	b2da      	uxtb	r2, r3
 800ca86:	4b14      	ldr	r3, [pc, #80]	@ (800cad8 <BleGetBdAddress+0x80>)
 800ca88:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	b2da      	uxtb	r2, r3
 800ca8e:	4b12      	ldr	r3, [pc, #72]	@ (800cad8 <BleGetBdAddress+0x80>)
 800ca90:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	b2da      	uxtb	r2, r3
 800ca96:	4b10      	ldr	r3, [pc, #64]	@ (800cad8 <BleGetBdAddress+0x80>)
 800ca98:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	0a1b      	lsrs	r3, r3, #8
 800ca9e:	b2da      	uxtb	r2, r3
 800caa0:	4b0d      	ldr	r3, [pc, #52]	@ (800cad8 <BleGetBdAddress+0x80>)
 800caa2:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	0c1b      	lsrs	r3, r3, #16
 800caa8:	b2da      	uxtb	r2, r3
 800caaa:	4b0b      	ldr	r3, [pc, #44]	@ (800cad8 <BleGetBdAddress+0x80>)
 800caac:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800caae:	4b0a      	ldr	r3, [pc, #40]	@ (800cad8 <BleGetBdAddress+0x80>)
 800cab0:	617b      	str	r3, [r7, #20]
 800cab2:	e00b      	b.n	800cacc <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800cab4:	2000      	movs	r0, #0
 800cab6:	f00b f9d7 	bl	8017e68 <OTP_Read>
 800caba:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d002      	beq.n	800cac8 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	617b      	str	r3, [r7, #20]
 800cac6:	e001      	b.n	800cacc <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800cac8:	4b04      	ldr	r3, [pc, #16]	@ (800cadc <BleGetBdAddress+0x84>)
 800caca:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800cacc:	697b      	ldr	r3, [r7, #20]
}
 800cace:	4618      	mov	r0, r3
 800cad0:	3718      	adds	r7, #24
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd80      	pop	{r7, pc}
 800cad6:	bf00      	nop
 800cad8:	20000620 	.word	0x20000620
 800cadc:	0801e140 	.word	0x0801e140

0800cae0 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b082      	sub	sp, #8
 800cae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800cae6:	4b0a      	ldr	r3, [pc, #40]	@ (800cb10 <Adv_Cancel+0x30>)
 800cae8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800caec:	2b05      	cmp	r3, #5
 800caee:	d00a      	beq.n	800cb06 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800caf0:	2392      	movs	r3, #146	@ 0x92
 800caf2:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800caf4:	f009 fed2 	bl	801689c <aci_gap_set_non_discoverable>
 800caf8:	4603      	mov	r3, r0
 800cafa:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800cafc:	4b04      	ldr	r3, [pc, #16]	@ (800cb10 <Adv_Cancel+0x30>)
 800cafe:	2200      	movs	r2, #0
 800cb00:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800cb04:	bf00      	nop
 800cb06:	bf00      	nop
}
 800cb08:	3708      	adds	r7, #8
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
 800cb0e:	bf00      	nop
 800cb10:	20000628 	.word	0x20000628

0800cb14 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b082      	sub	sp, #8
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800cb1c:	2100      	movs	r1, #0
 800cb1e:	2002      	movs	r0, #2
 800cb20:	f00c f9ae 	bl	8018e80 <UTIL_SEQ_SetTask>

  return;
 800cb24:	bf00      	nop
}
 800cb26:	3708      	adds	r7, #8
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}

0800cb2c <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b082      	sub	sp, #8
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800cb34:	2001      	movs	r0, #1
 800cb36:	f00c fa35 	bl	8018fa4 <UTIL_SEQ_SetEvt>

  return;
 800cb3a:	bf00      	nop
}
 800cb3c:	3708      	adds	r7, #8
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}

0800cb42 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800cb42:	b580      	push	{r7, lr}
 800cb44:	b082      	sub	sp, #8
 800cb46:	af00      	add	r7, sp, #0
 800cb48:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800cb4a:	2001      	movs	r0, #1
 800cb4c:	f00c fa4a 	bl	8018fe4 <UTIL_SEQ_WaitEvt>

  return;
 800cb50:	bf00      	nop
}
 800cb52:	3708      	adds	r7, #8
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}

0800cb58 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b084      	sub	sp, #16
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	685b      	ldr	r3, [r3, #4]
 800cb68:	3308      	adds	r3, #8
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f00b fd56 	bl	801861c <SVCCTL_UserEvtRx>
 800cb70:	4603      	mov	r3, r0
 800cb72:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800cb74:	7afb      	ldrb	r3, [r7, #11]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d003      	beq.n	800cb82 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	2201      	movs	r2, #1
 800cb7e:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800cb80:	e003      	b.n	800cb8a <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	2200      	movs	r2, #0
 800cb86:	701a      	strb	r2, [r3, #0]
  return;
 800cb88:	bf00      	nop
}
 800cb8a:	3710      	adds	r7, #16
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}

0800cb90 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b084      	sub	sp, #16
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	4603      	mov	r3, r0
 800cb98:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800cb9a:	79fb      	ldrb	r3, [r7, #7]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d002      	beq.n	800cba6 <BLE_StatusNot+0x16>
 800cba0:	2b01      	cmp	r3, #1
 800cba2:	d006      	beq.n	800cbb2 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800cba4:	e00b      	b.n	800cbbe <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800cba6:	237f      	movs	r3, #127	@ 0x7f
 800cba8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800cbaa:	68f8      	ldr	r0, [r7, #12]
 800cbac:	f00c f994 	bl	8018ed8 <UTIL_SEQ_PauseTask>
      break;
 800cbb0:	e005      	b.n	800cbbe <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800cbb2:	237f      	movs	r3, #127	@ 0x7f
 800cbb4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800cbb6:	68f8      	ldr	r0, [r7, #12]
 800cbb8:	f00c f9d4 	bl	8018f64 <UTIL_SEQ_ResumeTask>
      break;
 800cbbc:	bf00      	nop
  }

  return;
 800cbbe:	bf00      	nop
}
 800cbc0:	3710      	adds	r7, #16
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd80      	pop	{r7, pc}
	...

0800cbc8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800cbc8:	b480      	push	{r7}
 800cbca:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800cbcc:	f3bf 8f4f 	dsb	sy
}
 800cbd0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800cbd2:	4b06      	ldr	r3, [pc, #24]	@ (800cbec <__NVIC_SystemReset+0x24>)
 800cbd4:	68db      	ldr	r3, [r3, #12]
 800cbd6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800cbda:	4904      	ldr	r1, [pc, #16]	@ (800cbec <__NVIC_SystemReset+0x24>)
 800cbdc:	4b04      	ldr	r3, [pc, #16]	@ (800cbf0 <__NVIC_SystemReset+0x28>)
 800cbde:	4313      	orrs	r3, r2
 800cbe0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800cbe2:	f3bf 8f4f 	dsb	sy
}
 800cbe6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800cbe8:	bf00      	nop
 800cbea:	e7fd      	b.n	800cbe8 <__NVIC_SystemReset+0x20>
 800cbec:	e000ed00 	.word	0xe000ed00
 800cbf0:	05fa0004 	.word	0x05fa0004

0800cbf4 <Custom_STM_App_Notification>:
void Update_mode(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800cbf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbf6:	b089      	sub	sp, #36	@ 0x24
 800cbf8:	af04      	add	r7, sp, #16
 800cbfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	781b      	ldrb	r3, [r3, #0]
 800cc00:	2b1c      	cmp	r3, #28
 800cc02:	f200 82a1 	bhi.w	800d148 <Custom_STM_App_Notification+0x554>
 800cc06:	a201      	add	r2, pc, #4	@ (adr r2, 800cc0c <Custom_STM_App_Notification+0x18>)
 800cc08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc0c:	0800cc81 	.word	0x0800cc81
 800cc10:	0800cc9d 	.word	0x0800cc9d
 800cc14:	0800cca3 	.word	0x0800cca3
 800cc18:	0800cce1 	.word	0x0800cce1
 800cc1c:	0800cd0d 	.word	0x0800cd0d
 800cc20:	0800cd29 	.word	0x0800cd29
 800cc24:	0800cd95 	.word	0x0800cd95
 800cc28:	0800cdcb 	.word	0x0800cdcb
 800cc2c:	0800d149 	.word	0x0800d149
 800cc30:	0800d149 	.word	0x0800d149
 800cc34:	0800cdf1 	.word	0x0800cdf1
 800cc38:	0800ce2b 	.word	0x0800ce2b
 800cc3c:	0800ce47 	.word	0x0800ce47
 800cc40:	0800ce7d 	.word	0x0800ce7d
 800cc44:	0800cea3 	.word	0x0800cea3
 800cc48:	0800ceb9 	.word	0x0800ceb9
 800cc4c:	0800d149 	.word	0x0800d149
 800cc50:	0800cec7 	.word	0x0800cec7
 800cc54:	0800ced5 	.word	0x0800ced5
 800cc58:	0800cf69 	.word	0x0800cf69
 800cc5c:	0800d015 	.word	0x0800d015
 800cc60:	0800d023 	.word	0x0800d023
 800cc64:	0800d0d5 	.word	0x0800d0d5
 800cc68:	0800d149 	.word	0x0800d149
 800cc6c:	0800d0df 	.word	0x0800d0df
 800cc70:	0800d149 	.word	0x0800d149
 800cc74:	0800d0e9 	.word	0x0800d0e9
 800cc78:	0800d0f9 	.word	0x0800d0f9
 800cc7c:	0800d103 	.word	0x0800d103
    /* USER CODE END CUSTOM_STM_App_Notification_Custom_Evt_Opcode */

    /* Battery_Service */
    case CUSTOM_STM_LEVEL_READ_EVT:
      /* USER CODE BEGIN CUSTOM_STM_LEVEL_READ_EVT */
		printf("\rBattery_level\n");
 800cc80:	48a1      	ldr	r0, [pc, #644]	@ (800cf08 <Custom_STM_App_Notification+0x314>)
 800cc82:	f00d f9d5 	bl	801a030 <puts>
		Battery();
 800cc86:	f000 fd5b 	bl	800d740 <Battery>
		UpdateCharData[0]=Battery_Percentage;
 800cc8a:	4ba0      	ldr	r3, [pc, #640]	@ (800cf0c <Custom_STM_App_Notification+0x318>)
 800cc8c:	781a      	ldrb	r2, [r3, #0]
 800cc8e:	4ba0      	ldr	r3, [pc, #640]	@ (800cf10 <Custom_STM_App_Notification+0x31c>)
 800cc90:	701a      	strb	r2, [r3, #0]
		Custom_STM_App_Update_Char(CUSTOM_STM_LEVEL, (uint8_t *)UpdateCharData);
 800cc92:	499f      	ldr	r1, [pc, #636]	@ (800cf10 <Custom_STM_App_Notification+0x31c>)
 800cc94:	2000      	movs	r0, #0
 800cc96:	f002 f88f 	bl	800edb8 <Custom_STM_App_Update_Char>
      /* USER CODE END CUSTOM_STM_LEVEL_READ_EVT */
      break;
 800cc9a:	e25a      	b.n	800d152 <Custom_STM_App_Notification+0x55e>

    /* Temperature */
    case CUSTOM_STM_IR_T_READ_EVT:
      /* USER CODE BEGIN CUSTOM_STM_IR_T_READ_EVT */
    	Send_Temp_Notification();
 800cc9c:	f000 fb12 	bl	800d2c4 <Send_Temp_Notification>
      /* USER CODE END CUSTOM_STM_IR_T_READ_EVT */
      break;
 800cca0:	e257      	b.n	800d152 <Custom_STM_App_Notification+0x55e>

    case CUSTOM_STM_IR_T_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_IR_T_NOTIFY_ENABLED_EVT */
		printf("Temp_NOTIFY_ENABLED\n");
 800cca2:	489c      	ldr	r0, [pc, #624]	@ (800cf14 <Custom_STM_App_Notification+0x320>)
 800cca4:	f00d f9c4 	bl	801a030 <puts>
		UTIL_SEQ_PauseTask(1<<CFG_UV_ID);
 800cca8:	2008      	movs	r0, #8
 800ccaa:	f00c f915 	bl	8018ed8 <UTIL_SEQ_PauseTask>
		UTIL_SEQ_PauseTask(1<<CFG_UV_ID);
 800ccae:	2008      	movs	r0, #8
 800ccb0:	f00c f912 	bl	8018ed8 <UTIL_SEQ_PauseTask>
		UTIL_SEQ_PauseTask(1<<CFG_LOG_TEMP_ID);
 800ccb4:	2010      	movs	r0, #16
 800ccb6:	f00c f90f 	bl	8018ed8 <UTIL_SEQ_PauseTask>
		UTIL_SEQ_PauseTask(1<<CFG_LOG_UV_ID);
 800ccba:	2020      	movs	r0, #32
 800ccbc:	f00c f90c 	bl	8018ed8 <UTIL_SEQ_PauseTask>
		HW_TS_Stop(UV_TIMER_ID);
 800ccc0:	4b95      	ldr	r3, [pc, #596]	@ (800cf18 <Custom_STM_App_Notification+0x324>)
 800ccc2:	781b      	ldrb	r3, [r3, #0]
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f7fd fad5 	bl	800a274 <HW_TS_Stop>
		HW_TS_Start(TEMP_TIMER_ID,TEMP_UPDATE_PERIOD);
 800ccca:	4b94      	ldr	r3, [pc, #592]	@ (800cf1c <Custom_STM_App_Notification+0x328>)
 800cccc:	781b      	ldrb	r3, [r3, #0]
 800ccce:	4a94      	ldr	r2, [pc, #592]	@ (800cf20 <Custom_STM_App_Notification+0x32c>)
 800ccd0:	6812      	ldr	r2, [r2, #0]
 800ccd2:	4611      	mov	r1, r2
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f7fd fb51 	bl	800a37c <HW_TS_Start>
		Send_Temp_Notification();
 800ccda:	f000 faf3 	bl	800d2c4 <Send_Temp_Notification>
      /* USER CODE END CUSTOM_STM_IR_T_NOTIFY_ENABLED_EVT */
      break;
 800ccde:	e238      	b.n	800d152 <Custom_STM_App_Notification+0x55e>

    case CUSTOM_STM_IR_T_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_IR_T_NOTIFY_DISABLED_EVT */
		HW_TS_Stop(TEMP_TIMER_ID);
 800cce0:	4b8e      	ldr	r3, [pc, #568]	@ (800cf1c <Custom_STM_App_Notification+0x328>)
 800cce2:	781b      	ldrb	r3, [r3, #0]
 800cce4:	4618      	mov	r0, r3
 800cce6:	f7fd fac5 	bl	800a274 <HW_TS_Stop>
		UTIL_SEQ_PauseTask(1<<CFG_TEMP_ID);
 800ccea:	2004      	movs	r0, #4
 800ccec:	f00c f8f4 	bl	8018ed8 <UTIL_SEQ_PauseTask>

		Temp_lower_limit=-21;
 800ccf0:	4b8c      	ldr	r3, [pc, #560]	@ (800cf24 <Custom_STM_App_Notification+0x330>)
 800ccf2:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800ccf6:	801a      	strh	r2, [r3, #0]
		Temp_upper_limit=86;
 800ccf8:	4b8b      	ldr	r3, [pc, #556]	@ (800cf28 <Custom_STM_App_Notification+0x334>)
 800ccfa:	2256      	movs	r2, #86	@ 0x56
 800ccfc:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, Yellow_Led_Pin|Green_Led_Pin|Red_Led_Pin, GPIO_PIN_SET);
 800ccfe:	2201      	movs	r2, #1
 800cd00:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800cd04:	4889      	ldr	r0, [pc, #548]	@ (800cf2c <Custom_STM_App_Notification+0x338>)
 800cd06:	f004 ff4d 	bl	8011ba4 <HAL_GPIO_WritePin>
		//HW_TS_Stop(TEMP_TIMER_ID);
      /* USER CODE END CUSTOM_STM_IR_T_NOTIFY_DISABLED_EVT */
      break;
 800cd0a:	e222      	b.n	800d152 <Custom_STM_App_Notification+0x55e>

    case CUSTOM_STM_A_T_READ_EVT:
      /* USER CODE BEGIN CUSTOM_STM_A_T_READ_EVT */
		printf("\rAnalog_temp\n");
 800cd0c:	4888      	ldr	r0, [pc, #544]	@ (800cf30 <Custom_STM_App_Notification+0x33c>)
 800cd0e:	f00d f98f 	bl	801a030 <puts>
		Analog_Temp();
 800cd12:	f000 fd7b 	bl	800d80c <Analog_Temp>
		UpdateCharData[0]=Dev_Temperature;
 800cd16:	4b87      	ldr	r3, [pc, #540]	@ (800cf34 <Custom_STM_App_Notification+0x340>)
 800cd18:	781a      	ldrb	r2, [r3, #0]
 800cd1a:	4b7d      	ldr	r3, [pc, #500]	@ (800cf10 <Custom_STM_App_Notification+0x31c>)
 800cd1c:	701a      	strb	r2, [r3, #0]
		Custom_STM_App_Update_Char(CUSTOM_STM_A_T, (uint8_t *)UpdateCharData);
 800cd1e:	497c      	ldr	r1, [pc, #496]	@ (800cf10 <Custom_STM_App_Notification+0x31c>)
 800cd20:	2002      	movs	r0, #2
 800cd22:	f002 f849 	bl	800edb8 <Custom_STM_App_Update_Char>
      /* USER CODE END CUSTOM_STM_A_T_READ_EVT */
      break;
 800cd26:	e214      	b.n	800d152 <Custom_STM_App_Notification+0x55e>

    case CUSTOM_STM_S_T_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_S_T_WRITE_NO_RESP_EVT */

		Desire_temp = pNotification->DataTransfered.pPayload[0]<<8 |pNotification->DataTransfered.pPayload[1];
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	685b      	ldr	r3, [r3, #4]
 800cd2c:	781b      	ldrb	r3, [r3, #0]
 800cd2e:	021b      	lsls	r3, r3, #8
 800cd30:	b21a      	sxth	r2, r3
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	685b      	ldr	r3, [r3, #4]
 800cd36:	3301      	adds	r3, #1
 800cd38:	781b      	ldrb	r3, [r3, #0]
 800cd3a:	b21b      	sxth	r3, r3
 800cd3c:	4313      	orrs	r3, r2
 800cd3e:	b21a      	sxth	r2, r3
 800cd40:	4b7d      	ldr	r3, [pc, #500]	@ (800cf38 <Custom_STM_App_Notification+0x344>)
 800cd42:	801a      	strh	r2, [r3, #0]
		Temp_upper_limit=Desire_temp+1;
 800cd44:	4b7c      	ldr	r3, [pc, #496]	@ (800cf38 <Custom_STM_App_Notification+0x344>)
 800cd46:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cd4a:	b29b      	uxth	r3, r3
 800cd4c:	3301      	adds	r3, #1
 800cd4e:	b29b      	uxth	r3, r3
 800cd50:	b21a      	sxth	r2, r3
 800cd52:	4b75      	ldr	r3, [pc, #468]	@ (800cf28 <Custom_STM_App_Notification+0x334>)
 800cd54:	801a      	strh	r2, [r3, #0]
		Temp_lower_limit=Desire_temp-1;
 800cd56:	4b78      	ldr	r3, [pc, #480]	@ (800cf38 <Custom_STM_App_Notification+0x344>)
 800cd58:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cd5c:	b29b      	uxth	r3, r3
 800cd5e:	3b01      	subs	r3, #1
 800cd60:	b29b      	uxth	r3, r3
 800cd62:	b21a      	sxth	r2, r3
 800cd64:	4b6f      	ldr	r3, [pc, #444]	@ (800cf24 <Custom_STM_App_Notification+0x330>)
 800cd66:	801a      	strh	r2, [r3, #0]

		printf("Desire_ temp %d, Temp_up:%d, Temp_low:%d\n",Desire_temp,Temp_upper_limit,Temp_lower_limit);
 800cd68:	4b73      	ldr	r3, [pc, #460]	@ (800cf38 <Custom_STM_App_Notification+0x344>)
 800cd6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cd6e:	4619      	mov	r1, r3
 800cd70:	4b6d      	ldr	r3, [pc, #436]	@ (800cf28 <Custom_STM_App_Notification+0x334>)
 800cd72:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cd76:	461a      	mov	r2, r3
 800cd78:	4b6a      	ldr	r3, [pc, #424]	@ (800cf24 <Custom_STM_App_Notification+0x330>)
 800cd7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cd7e:	486f      	ldr	r0, [pc, #444]	@ (800cf3c <Custom_STM_App_Notification+0x348>)
 800cd80:	f00d f8ee 	bl	8019f60 <iprintf>
		if(mode==0x01)
 800cd84:	4b6e      	ldr	r3, [pc, #440]	@ (800cf40 <Custom_STM_App_Notification+0x34c>)
 800cd86:	781b      	ldrb	r3, [r3, #0]
 800cd88:	2b01      	cmp	r3, #1
 800cd8a:	f040 81df 	bne.w	800d14c <Custom_STM_App_Notification+0x558>
			{
			Update_mode();
 800cd8e:	f001 f82d 	bl	800ddec <Update_mode>
	    	  // HW_TS_Start(MODE_TIMER_ID,Ts_UPDATE_PERIOD);
	    	}
      /* USER CODE END CUSTOM_STM_S_T_WRITE_NO_RESP_EVT */
      break;
 800cd92:	e1db      	b.n	800d14c <Custom_STM_App_Notification+0x558>

    case CUSTOM_STM_L_T_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_L_T_NOTIFY_ENABLED_EVT */
		UTIL_SEQ_PauseTask(1<<CFG_TEMP_ID);
 800cd94:	2004      	movs	r0, #4
 800cd96:	f00c f89f 	bl	8018ed8 <UTIL_SEQ_PauseTask>
		UTIL_SEQ_PauseTask(1<<CFG_UV_ID);
 800cd9a:	2008      	movs	r0, #8
 800cd9c:	f00c f89c 	bl	8018ed8 <UTIL_SEQ_PauseTask>
		UTIL_SEQ_PauseTask(1<<CFG_LOG_UV_ID);
 800cda0:	2020      	movs	r0, #32
 800cda2:	f00c f899 	bl	8018ed8 <UTIL_SEQ_PauseTask>
		HW_TS_Stop(UV_TIMER_ID);
 800cda6:	4b5c      	ldr	r3, [pc, #368]	@ (800cf18 <Custom_STM_App_Notification+0x324>)
 800cda8:	781b      	ldrb	r3, [r3, #0]
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f7fd fa62 	bl	800a274 <HW_TS_Stop>
		HW_TS_Stop(TEMP_TIMER_ID);
 800cdb0:	4b5a      	ldr	r3, [pc, #360]	@ (800cf1c <Custom_STM_App_Notification+0x328>)
 800cdb2:	781b      	ldrb	r3, [r3, #0]
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	f7fd fa5d 	bl	800a274 <HW_TS_Stop>
		HW_TS_Start(TEMP_LOG_ID,LOG_UPDATE_PERIOD);
 800cdba:	4b62      	ldr	r3, [pc, #392]	@ (800cf44 <Custom_STM_App_Notification+0x350>)
 800cdbc:	781b      	ldrb	r3, [r3, #0]
 800cdbe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f7fd fada 	bl	800a37c <HW_TS_Start>
      /* USER CODE END CUSTOM_STM_L_T_NOTIFY_ENABLED_EVT */
      break;
 800cdc8:	e1c3      	b.n	800d152 <Custom_STM_App_Notification+0x55e>

    case CUSTOM_STM_L_T_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_L_T_NOTIFY_DISABLED_EVT */
		HW_TS_Stop(UV_TIMER_ID);
 800cdca:	4b53      	ldr	r3, [pc, #332]	@ (800cf18 <Custom_STM_App_Notification+0x324>)
 800cdcc:	781b      	ldrb	r3, [r3, #0]
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f7fd fa50 	bl	800a274 <HW_TS_Stop>
		HW_TS_Stop(TEMP_TIMER_ID);
 800cdd4:	4b51      	ldr	r3, [pc, #324]	@ (800cf1c <Custom_STM_App_Notification+0x328>)
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f7fd fa4b 	bl	800a274 <HW_TS_Stop>
		HW_TS_Stop(TEMP_LOG_ID);
 800cdde:	4b59      	ldr	r3, [pc, #356]	@ (800cf44 <Custom_STM_App_Notification+0x350>)
 800cde0:	781b      	ldrb	r3, [r3, #0]
 800cde2:	4618      	mov	r0, r3
 800cde4:	f7fd fa46 	bl	800a274 <HW_TS_Stop>
		UTIL_SEQ_PauseTask(1<<CFG_LOG_TEMP_ID);
 800cde8:	2010      	movs	r0, #16
 800cdea:	f00c f875 	bl	8018ed8 <UTIL_SEQ_PauseTask>
      /* USER CODE END CUSTOM_STM_L_T_NOTIFY_DISABLED_EVT */
      break;
 800cdee:	e1b0      	b.n	800d152 <Custom_STM_App_Notification+0x55e>
      break;

    /* UV_Sensor */
    case CUSTOM_STM_UV_V_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_UV_V_NOTIFY_ENABLED_EVT */
		UV_init();
 800cdf0:	f7fb fa74 	bl	80082dc <UV_init>
		printf("UV_NOTIFY_ENABLED\n");
 800cdf4:	4854      	ldr	r0, [pc, #336]	@ (800cf48 <Custom_STM_App_Notification+0x354>)
 800cdf6:	f00d f91b 	bl	801a030 <puts>
		UTIL_SEQ_PauseTask(1<<CFG_TEMP_ID);
 800cdfa:	2004      	movs	r0, #4
 800cdfc:	f00c f86c 	bl	8018ed8 <UTIL_SEQ_PauseTask>
		UTIL_SEQ_PauseTask(1<<CFG_LOG_TEMP_ID);
 800ce00:	2010      	movs	r0, #16
 800ce02:	f00c f869 	bl	8018ed8 <UTIL_SEQ_PauseTask>
		UTIL_SEQ_PauseTask(1<<CFG_LOG_UV_ID);
 800ce06:	2020      	movs	r0, #32
 800ce08:	f00c f866 	bl	8018ed8 <UTIL_SEQ_PauseTask>
		HW_TS_Stop(TEMP_TIMER_ID);
 800ce0c:	4b43      	ldr	r3, [pc, #268]	@ (800cf1c <Custom_STM_App_Notification+0x328>)
 800ce0e:	781b      	ldrb	r3, [r3, #0]
 800ce10:	4618      	mov	r0, r3
 800ce12:	f7fd fa2f 	bl	800a274 <HW_TS_Stop>

		HW_TS_Start(UV_TIMER_ID,UV_UPDATE_PERIOD);
 800ce16:	4b40      	ldr	r3, [pc, #256]	@ (800cf18 <Custom_STM_App_Notification+0x324>)
 800ce18:	781b      	ldrb	r3, [r3, #0]
 800ce1a:	f641 0103 	movw	r1, #6147	@ 0x1803
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f7fd faac 	bl	800a37c <HW_TS_Start>
		Send_UV_Notification();
 800ce24:	f000 fc28 	bl	800d678 <Send_UV_Notification>
      /* USER CODE END CUSTOM_STM_UV_V_NOTIFY_ENABLED_EVT */
      break;
 800ce28:	e193      	b.n	800d152 <Custom_STM_App_Notification+0x55e>

    case CUSTOM_STM_UV_V_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_UV_V_NOTIFY_DISABLED_EVT */
		printf("UV_NOTIFY_DISABLED\n");
 800ce2a:	4848      	ldr	r0, [pc, #288]	@ (800cf4c <Custom_STM_App_Notification+0x358>)
 800ce2c:	f00d f900 	bl	801a030 <puts>
		//HW_TS_Stop(TEMP_TIMER_ID);
		UTIL_SEQ_PauseTask(1<<CFG_UV_ID);
 800ce30:	2008      	movs	r0, #8
 800ce32:	f00c f851 	bl	8018ed8 <UTIL_SEQ_PauseTask>
		HW_TS_Stop(UV_TIMER_ID);
 800ce36:	4b38      	ldr	r3, [pc, #224]	@ (800cf18 <Custom_STM_App_Notification+0x324>)
 800ce38:	781b      	ldrb	r3, [r3, #0]
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f7fd fa1a 	bl	800a274 <HW_TS_Stop>
		UV_init();
 800ce40:	f7fb fa4c 	bl	80082dc <UV_init>
      /* USER CODE END CUSTOM_STM_UV_V_NOTIFY_DISABLED_EVT */
      break;
 800ce44:	e185      	b.n	800d152 <Custom_STM_App_Notification+0x55e>

    case CUSTOM_STM_UV_L_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_UV_L_NOTIFY_ENABLED_EVT */
		UTIL_SEQ_PauseTask(1<<CFG_TEMP_ID);
 800ce46:	2004      	movs	r0, #4
 800ce48:	f00c f846 	bl	8018ed8 <UTIL_SEQ_PauseTask>
		UTIL_SEQ_PauseTask(1<<CFG_UV_ID);
 800ce4c:	2008      	movs	r0, #8
 800ce4e:	f00c f843 	bl	8018ed8 <UTIL_SEQ_PauseTask>
		UTIL_SEQ_PauseTask(1<<CFG_LOG_TEMP_ID);
 800ce52:	2010      	movs	r0, #16
 800ce54:	f00c f840 	bl	8018ed8 <UTIL_SEQ_PauseTask>
		HW_TS_Stop(UV_TIMER_ID);
 800ce58:	4b2f      	ldr	r3, [pc, #188]	@ (800cf18 <Custom_STM_App_Notification+0x324>)
 800ce5a:	781b      	ldrb	r3, [r3, #0]
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f7fd fa09 	bl	800a274 <HW_TS_Stop>
		HW_TS_Stop(TEMP_TIMER_ID);
 800ce62:	4b2e      	ldr	r3, [pc, #184]	@ (800cf1c <Custom_STM_App_Notification+0x328>)
 800ce64:	781b      	ldrb	r3, [r3, #0]
 800ce66:	4618      	mov	r0, r3
 800ce68:	f7fd fa04 	bl	800a274 <HW_TS_Stop>
		HW_TS_Start(UV_LOG_ID,LOG_UPDATE_PERIOD);
 800ce6c:	4b38      	ldr	r3, [pc, #224]	@ (800cf50 <Custom_STM_App_Notification+0x35c>)
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800ce74:	4618      	mov	r0, r3
 800ce76:	f7fd fa81 	bl	800a37c <HW_TS_Start>
      /* USER CODE END CUSTOM_STM_UV_L_NOTIFY_ENABLED_EVT */
      break;
 800ce7a:	e16a      	b.n	800d152 <Custom_STM_App_Notification+0x55e>

    case CUSTOM_STM_UV_L_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_UV_L_NOTIFY_DISABLED_EVT */

		UTIL_SEQ_PauseTask(1<<CFG_LOG_UV_ID);
 800ce7c:	2020      	movs	r0, #32
 800ce7e:	f00c f82b 	bl	8018ed8 <UTIL_SEQ_PauseTask>
		HW_TS_Stop(UV_TIMER_ID);
 800ce82:	4b25      	ldr	r3, [pc, #148]	@ (800cf18 <Custom_STM_App_Notification+0x324>)
 800ce84:	781b      	ldrb	r3, [r3, #0]
 800ce86:	4618      	mov	r0, r3
 800ce88:	f7fd f9f4 	bl	800a274 <HW_TS_Stop>
		HW_TS_Stop(TEMP_TIMER_ID);
 800ce8c:	4b23      	ldr	r3, [pc, #140]	@ (800cf1c <Custom_STM_App_Notification+0x328>)
 800ce8e:	781b      	ldrb	r3, [r3, #0]
 800ce90:	4618      	mov	r0, r3
 800ce92:	f7fd f9ef 	bl	800a274 <HW_TS_Stop>
		HW_TS_Stop(UV_LOG_ID);
 800ce96:	4b2e      	ldr	r3, [pc, #184]	@ (800cf50 <Custom_STM_App_Notification+0x35c>)
 800ce98:	781b      	ldrb	r3, [r3, #0]
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f7fd f9ea 	bl	800a274 <HW_TS_Stop>
      /* USER CODE END CUSTOM_STM_UV_L_NOTIFY_DISABLED_EVT */
      break;
 800cea0:	e157      	b.n	800d152 <Custom_STM_App_Notification+0x55e>

    case CUSTOM_STM_OTA_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_OTA_WRITE_NO_RESP_EVT */
		*(uint32_t*)SRAM1_BASE = *(uint32_t*)pNotification->DataTransfered.pPayload;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	685b      	ldr	r3, [r3, #4]
 800cea6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	6013      	str	r3, [r2, #0]
		printf("Reset\n");
 800ceae:	4829      	ldr	r0, [pc, #164]	@ (800cf54 <Custom_STM_App_Notification+0x360>)
 800ceb0:	f00d f8be 	bl	801a030 <puts>
		NVIC_SystemReset();
 800ceb4:	f7ff fe88 	bl	800cbc8 <__NVIC_SystemReset>
      /* USER CODE END CUSTOM_STM_OTA_WRITE_NO_RESP_EVT */
      break;

    case CUSTOM_STM_AMBI_TEMP_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_AMBI_TEMP_NOTIFY_ENABLED_EVT */
		Send_Temp_Notification();
 800ceb8:	f000 fa04 	bl	800d2c4 <Send_Temp_Notification>
		Custom_STM_App_Update_Char(CUSTOM_STM_AMBI_TEMP, (uint8_t *)AT);
 800cebc:	4926      	ldr	r1, [pc, #152]	@ (800cf58 <Custom_STM_App_Notification+0x364>)
 800cebe:	2009      	movs	r0, #9
 800cec0:	f001 ff7a 	bl	800edb8 <Custom_STM_App_Update_Char>
      /* USER CODE END CUSTOM_STM_AMBI_TEMP_NOTIFY_ENABLED_EVT */
      break;
 800cec4:	e145      	b.n	800d152 <Custom_STM_App_Notification+0x55e>
      /* USER CODE END CUSTOM_STM_AMBI_TEMP_NOTIFY_DISABLED_EVT */
      break;

    case CUSTOM_STM_T_INT_READ_EVT:
      /* USER CODE BEGIN CUSTOM_STM_T_INT_READ_EVT */
    	Custom_STM_App_Update_Char(CUSTOM_STM_IR_T, (uint8_t *)Interval);
 800cec6:	4b25      	ldr	r3, [pc, #148]	@ (800cf5c <Custom_STM_App_Notification+0x368>)
 800cec8:	781b      	ldrb	r3, [r3, #0]
 800ceca:	4619      	mov	r1, r3
 800cecc:	2001      	movs	r0, #1
 800cece:	f001 ff73 	bl	800edb8 <Custom_STM_App_Update_Char>
      /* USER CODE END CUSTOM_STM_T_INT_READ_EVT */
      break;
 800ced2:	e13e      	b.n	800d152 <Custom_STM_App_Notification+0x55e>

    case CUSTOM_STM_T_INT_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_T_INT_WRITE_NO_RESP_EVT */
    	Interval=pNotification->DataTransfered.pPayload[0];
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	685b      	ldr	r3, [r3, #4]
 800ced8:	781a      	ldrb	r2, [r3, #0]
 800ceda:	4b20      	ldr	r3, [pc, #128]	@ (800cf5c <Custom_STM_App_Notification+0x368>)
 800cedc:	701a      	strb	r2, [r3, #0]
    	if(mode==0x01)
 800cede:	4b18      	ldr	r3, [pc, #96]	@ (800cf40 <Custom_STM_App_Notification+0x34c>)
 800cee0:	781b      	ldrb	r3, [r3, #0]
 800cee2:	2b01      	cmp	r3, #1
 800cee4:	d101      	bne.n	800ceea <Custom_STM_App_Notification+0x2f6>
    	    	{
    				Update_mode();
 800cee6:	f000 ff81 	bl	800ddec <Update_mode>

    	    	}
    	TEMP_UPDATE_PERIOD = (uint32_t)(Interval*1000*1000/CFG_TS_TICK_VAL);
 800ceea:	4b1c      	ldr	r3, [pc, #112]	@ (800cf5c <Custom_STM_App_Notification+0x368>)
 800ceec:	781b      	ldrb	r3, [r3, #0]
 800ceee:	461a      	mov	r2, r3
 800cef0:	4b1b      	ldr	r3, [pc, #108]	@ (800cf60 <Custom_STM_App_Notification+0x36c>)
 800cef2:	fb02 f303 	mul.w	r3, r2, r3
 800cef6:	461a      	mov	r2, r3
 800cef8:	4b1a      	ldr	r3, [pc, #104]	@ (800cf64 <Custom_STM_App_Notification+0x370>)
 800cefa:	fba3 2302 	umull	r2, r3, r3, r2
 800cefe:	09db      	lsrs	r3, r3, #7
 800cf00:	4a07      	ldr	r2, [pc, #28]	@ (800cf20 <Custom_STM_App_Notification+0x32c>)
 800cf02:	6013      	str	r3, [r2, #0]

      /* USER CODE END CUSTOM_STM_T_INT_WRITE_NO_RESP_EVT */
      break;
 800cf04:	e125      	b.n	800d152 <Custom_STM_App_Notification+0x55e>
 800cf06:	bf00      	nop
 800cf08:	0801dcd0 	.word	0x0801dcd0
 800cf0c:	200008dc 	.word	0x200008dc
 800cf10:	200006b0 	.word	0x200006b0
 800cf14:	0801dce0 	.word	0x0801dce0
 800cf18:	200008df 	.word	0x200008df
 800cf1c:	200008de 	.word	0x200008de
 800cf20:	200008a0 	.word	0x200008a0
 800cf24:	20000046 	.word	0x20000046
 800cf28:	20000048 	.word	0x20000048
 800cf2c:	48000c00 	.word	0x48000c00
 800cf30:	0801dcf4 	.word	0x0801dcf4
 800cf34:	200008dd 	.word	0x200008dd
 800cf38:	2000004a 	.word	0x2000004a
 800cf3c:	0801dd04 	.word	0x0801dd04
 800cf40:	200008b0 	.word	0x200008b0
 800cf44:	200008e0 	.word	0x200008e0
 800cf48:	0801dd30 	.word	0x0801dd30
 800cf4c:	0801dd44 	.word	0x0801dd44
 800cf50:	200008e1 	.word	0x200008e1
 800cf54:	0801dd58 	.word	0x0801dd58
 800cf58:	200008ac 	.word	0x200008ac
 800cf5c:	20000045 	.word	0x20000045
 800cf60:	000f4240 	.word	0x000f4240
 800cf64:	4325c53f 	.word	0x4325c53f

    /* Utility */
    case CUSTOM_STM_ACCLX_READ_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ACCLX_READ_EVT */
		AccelRead();
 800cf68:	f7fb f8c4 	bl	80080f4 <AccelRead>
		STORE_BE_16(UpdateCharData,output.AccelX);
 800cf6c:	4b7b      	ldr	r3, [pc, #492]	@ (800d15c <Custom_STM_App_Notification+0x568>)
 800cf6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cf72:	b2da      	uxtb	r2, r3
 800cf74:	4b7a      	ldr	r3, [pc, #488]	@ (800d160 <Custom_STM_App_Notification+0x56c>)
 800cf76:	705a      	strb	r2, [r3, #1]
 800cf78:	4b78      	ldr	r3, [pc, #480]	@ (800d15c <Custom_STM_App_Notification+0x568>)
 800cf7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cf7e:	121b      	asrs	r3, r3, #8
 800cf80:	b21b      	sxth	r3, r3
 800cf82:	b2da      	uxtb	r2, r3
 800cf84:	4b76      	ldr	r3, [pc, #472]	@ (800d160 <Custom_STM_App_Notification+0x56c>)
 800cf86:	701a      	strb	r2, [r3, #0]
		STORE_BE_16(UpdateCharData+2,output.AccelY);
 800cf88:	4b74      	ldr	r3, [pc, #464]	@ (800d15c <Custom_STM_App_Notification+0x568>)
 800cf8a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cf8e:	b2da      	uxtb	r2, r3
 800cf90:	4b73      	ldr	r3, [pc, #460]	@ (800d160 <Custom_STM_App_Notification+0x56c>)
 800cf92:	70da      	strb	r2, [r3, #3]
 800cf94:	4b71      	ldr	r3, [pc, #452]	@ (800d15c <Custom_STM_App_Notification+0x568>)
 800cf96:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cf9a:	121b      	asrs	r3, r3, #8
 800cf9c:	b21b      	sxth	r3, r3
 800cf9e:	b2da      	uxtb	r2, r3
 800cfa0:	4b6f      	ldr	r3, [pc, #444]	@ (800d160 <Custom_STM_App_Notification+0x56c>)
 800cfa2:	709a      	strb	r2, [r3, #2]
		STORE_BE_16(UpdateCharData+4,output.AccelZ);
 800cfa4:	4b6d      	ldr	r3, [pc, #436]	@ (800d15c <Custom_STM_App_Notification+0x568>)
 800cfa6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cfaa:	b2da      	uxtb	r2, r3
 800cfac:	4b6c      	ldr	r3, [pc, #432]	@ (800d160 <Custom_STM_App_Notification+0x56c>)
 800cfae:	715a      	strb	r2, [r3, #5]
 800cfb0:	4b6a      	ldr	r3, [pc, #424]	@ (800d15c <Custom_STM_App_Notification+0x568>)
 800cfb2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cfb6:	121b      	asrs	r3, r3, #8
 800cfb8:	b21b      	sxth	r3, r3
 800cfba:	b2da      	uxtb	r2, r3
 800cfbc:	4b68      	ldr	r3, [pc, #416]	@ (800d160 <Custom_STM_App_Notification+0x56c>)
 800cfbe:	711a      	strb	r2, [r3, #4]
		printf("ACClex %d %d %d %d %d %d\n",UpdateCharData[0],UpdateCharData[1],UpdateCharData[2],UpdateCharData[3],UpdateCharData[4],UpdateCharData[5],UpdateCharData[6]);
 800cfc0:	4b67      	ldr	r3, [pc, #412]	@ (800d160 <Custom_STM_App_Notification+0x56c>)
 800cfc2:	781b      	ldrb	r3, [r3, #0]
 800cfc4:	461c      	mov	r4, r3
 800cfc6:	4b66      	ldr	r3, [pc, #408]	@ (800d160 <Custom_STM_App_Notification+0x56c>)
 800cfc8:	785b      	ldrb	r3, [r3, #1]
 800cfca:	461d      	mov	r5, r3
 800cfcc:	4b64      	ldr	r3, [pc, #400]	@ (800d160 <Custom_STM_App_Notification+0x56c>)
 800cfce:	789b      	ldrb	r3, [r3, #2]
 800cfd0:	461e      	mov	r6, r3
 800cfd2:	4b63      	ldr	r3, [pc, #396]	@ (800d160 <Custom_STM_App_Notification+0x56c>)
 800cfd4:	78db      	ldrb	r3, [r3, #3]
 800cfd6:	461a      	mov	r2, r3
 800cfd8:	4b61      	ldr	r3, [pc, #388]	@ (800d160 <Custom_STM_App_Notification+0x56c>)
 800cfda:	791b      	ldrb	r3, [r3, #4]
 800cfdc:	4619      	mov	r1, r3
 800cfde:	4b60      	ldr	r3, [pc, #384]	@ (800d160 <Custom_STM_App_Notification+0x56c>)
 800cfe0:	795b      	ldrb	r3, [r3, #5]
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	4b5e      	ldr	r3, [pc, #376]	@ (800d160 <Custom_STM_App_Notification+0x56c>)
 800cfe6:	799b      	ldrb	r3, [r3, #6]
 800cfe8:	9303      	str	r3, [sp, #12]
 800cfea:	9002      	str	r0, [sp, #8]
 800cfec:	9101      	str	r1, [sp, #4]
 800cfee:	9200      	str	r2, [sp, #0]
 800cff0:	4633      	mov	r3, r6
 800cff2:	462a      	mov	r2, r5
 800cff4:	4621      	mov	r1, r4
 800cff6:	485b      	ldr	r0, [pc, #364]	@ (800d164 <Custom_STM_App_Notification+0x570>)
 800cff8:	f00c ffb2 	bl	8019f60 <iprintf>
		uint8_t status=Custom_STM_App_Update_Char(CUSTOM_STM_ACCLX, (uint8_t *)UpdateCharData);
 800cffc:	4958      	ldr	r1, [pc, #352]	@ (800d160 <Custom_STM_App_Notification+0x56c>)
 800cffe:	200b      	movs	r0, #11
 800d000:	f001 feda 	bl	800edb8 <Custom_STM_App_Update_Char>
 800d004:	4603      	mov	r3, r0
 800d006:	73bb      	strb	r3, [r7, #14]
		printf("status %d \n",status);
 800d008:	7bbb      	ldrb	r3, [r7, #14]
 800d00a:	4619      	mov	r1, r3
 800d00c:	4856      	ldr	r0, [pc, #344]	@ (800d168 <Custom_STM_App_Notification+0x574>)
 800d00e:	f00c ffa7 	bl	8019f60 <iprintf>
      /* USER CODE END CUSTOM_STM_ACCLX_READ_EVT */
      break;
 800d012:	e09e      	b.n	800d152 <Custom_STM_App_Notification+0x55e>

    case CUSTOM_STM_TD_READ_EVT:
      /* USER CODE BEGIN CUSTOM_STM_TD_READ_EVT */
		Date_Time();
 800d014:	f000 fa5a 	bl	800d4cc <Date_Time>
		Custom_STM_App_Update_Char(CUSTOM_STM_TD, (uint8_t *)Time);
 800d018:	4954      	ldr	r1, [pc, #336]	@ (800d16c <Custom_STM_App_Notification+0x578>)
 800d01a:	200c      	movs	r0, #12
 800d01c:	f001 fecc 	bl	800edb8 <Custom_STM_App_Update_Char>
      /* USER CODE END CUSTOM_STM_TD_READ_EVT */
      break;
 800d020:	e097      	b.n	800d152 <Custom_STM_App_Notification+0x55e>

    case CUSTOM_STM_TD_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_TD_WRITE_NO_RESP_EVT */
		sTime.Hours=pNotification->DataTransfered.pPayload[0];
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	685b      	ldr	r3, [r3, #4]
 800d026:	781a      	ldrb	r2, [r3, #0]
 800d028:	4b51      	ldr	r3, [pc, #324]	@ (800d170 <Custom_STM_App_Notification+0x57c>)
 800d02a:	701a      	strb	r2, [r3, #0]
		sTime.Minutes=pNotification->DataTransfered.pPayload[1];
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	685b      	ldr	r3, [r3, #4]
 800d030:	785a      	ldrb	r2, [r3, #1]
 800d032:	4b4f      	ldr	r3, [pc, #316]	@ (800d170 <Custom_STM_App_Notification+0x57c>)
 800d034:	705a      	strb	r2, [r3, #1]
		sTime.Seconds=pNotification->DataTransfered.pPayload[2];
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	685b      	ldr	r3, [r3, #4]
 800d03a:	789a      	ldrb	r2, [r3, #2]
 800d03c:	4b4c      	ldr	r3, [pc, #304]	@ (800d170 <Custom_STM_App_Notification+0x57c>)
 800d03e:	709a      	strb	r2, [r3, #2]
		sTime.SecondFraction=0;
 800d040:	4b4b      	ldr	r3, [pc, #300]	@ (800d170 <Custom_STM_App_Notification+0x57c>)
 800d042:	2200      	movs	r2, #0
 800d044:	609a      	str	r2, [r3, #8]
		sTime.SubSeconds = 0x0;
 800d046:	4b4a      	ldr	r3, [pc, #296]	@ (800d170 <Custom_STM_App_Notification+0x57c>)
 800d048:	2200      	movs	r2, #0
 800d04a:	605a      	str	r2, [r3, #4]
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800d04c:	4b48      	ldr	r3, [pc, #288]	@ (800d170 <Custom_STM_App_Notification+0x57c>)
 800d04e:	2200      	movs	r2, #0
 800d050:	60da      	str	r2, [r3, #12]
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800d052:	4b47      	ldr	r3, [pc, #284]	@ (800d170 <Custom_STM_App_Notification+0x57c>)
 800d054:	2200      	movs	r2, #0
 800d056:	611a      	str	r2, [r3, #16]
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800d058:	2200      	movs	r2, #0
 800d05a:	4945      	ldr	r1, [pc, #276]	@ (800d170 <Custom_STM_App_Notification+0x57c>)
 800d05c:	4845      	ldr	r0, [pc, #276]	@ (800d174 <Custom_STM_App_Notification+0x580>)
 800d05e:	f008 f9a9 	bl	80153b4 <HAL_RTC_SetTime>
 800d062:	4603      	mov	r3, r0
 800d064:	2b00      	cmp	r3, #0
 800d066:	d001      	beq.n	800d06c <Custom_STM_App_Notification+0x478>
		{
			Error_Handler();
 800d068:	f7fd fc90 	bl	800a98c <Error_Handler>
		}
		sDate.WeekDay = pNotification->DataTransfered.pPayload[3];
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	685b      	ldr	r3, [r3, #4]
 800d070:	78da      	ldrb	r2, [r3, #3]
 800d072:	4b41      	ldr	r3, [pc, #260]	@ (800d178 <Custom_STM_App_Notification+0x584>)
 800d074:	701a      	strb	r2, [r3, #0]
		sDate.Month = pNotification->DataTransfered.pPayload[4];
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	685b      	ldr	r3, [r3, #4]
 800d07a:	791a      	ldrb	r2, [r3, #4]
 800d07c:	4b3e      	ldr	r3, [pc, #248]	@ (800d178 <Custom_STM_App_Notification+0x584>)
 800d07e:	705a      	strb	r2, [r3, #1]
		sDate.Date = pNotification->DataTransfered.pPayload[5];
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	685b      	ldr	r3, [r3, #4]
 800d084:	795a      	ldrb	r2, [r3, #5]
 800d086:	4b3c      	ldr	r3, [pc, #240]	@ (800d178 <Custom_STM_App_Notification+0x584>)
 800d088:	709a      	strb	r2, [r3, #2]
		sDate.Year = pNotification->DataTransfered.pPayload[6];  //(1980+20) + value(0-79)
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	685b      	ldr	r3, [r3, #4]
 800d08e:	799a      	ldrb	r2, [r3, #6]
 800d090:	4b39      	ldr	r3, [pc, #228]	@ (800d178 <Custom_STM_App_Notification+0x584>)
 800d092:	70da      	strb	r2, [r3, #3]
		for(uint8_t i=0;i<pNotification->DataTransfered.Length;i++){
 800d094:	2300      	movs	r3, #0
 800d096:	73fb      	strb	r3, [r7, #15]
 800d098:	e00c      	b.n	800d0b4 <Custom_STM_App_Notification+0x4c0>
			printf("Input_time[%d]:%d\n",i,pNotification->DataTransfered.pPayload[i]);
 800d09a:	7bf9      	ldrb	r1, [r7, #15]
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	685a      	ldr	r2, [r3, #4]
 800d0a0:	7bfb      	ldrb	r3, [r7, #15]
 800d0a2:	4413      	add	r3, r2
 800d0a4:	781b      	ldrb	r3, [r3, #0]
 800d0a6:	461a      	mov	r2, r3
 800d0a8:	4834      	ldr	r0, [pc, #208]	@ (800d17c <Custom_STM_App_Notification+0x588>)
 800d0aa:	f00c ff59 	bl	8019f60 <iprintf>
		for(uint8_t i=0;i<pNotification->DataTransfered.Length;i++){
 800d0ae:	7bfb      	ldrb	r3, [r7, #15]
 800d0b0:	3301      	adds	r3, #1
 800d0b2:	73fb      	strb	r3, [r7, #15]
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	7a1b      	ldrb	r3, [r3, #8]
 800d0b8:	7bfa      	ldrb	r2, [r7, #15]
 800d0ba:	429a      	cmp	r2, r3
 800d0bc:	d3ed      	bcc.n	800d09a <Custom_STM_App_Notification+0x4a6>
		}
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800d0be:	2200      	movs	r2, #0
 800d0c0:	492d      	ldr	r1, [pc, #180]	@ (800d178 <Custom_STM_App_Notification+0x584>)
 800d0c2:	482c      	ldr	r0, [pc, #176]	@ (800d174 <Custom_STM_App_Notification+0x580>)
 800d0c4:	f008 fa96 	bl	80155f4 <HAL_RTC_SetDate>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d040      	beq.n	800d150 <Custom_STM_App_Notification+0x55c>
		{
			Error_Handler();
 800d0ce:	f7fd fc5d 	bl	800a98c <Error_Handler>
		}
      /* USER CODE END CUSTOM_STM_TD_WRITE_NO_RESP_EVT */
      break;
 800d0d2:	e03d      	b.n	800d150 <Custom_STM_App_Notification+0x55c>

    case CUSTOM_STM_EC_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_EC_NOTIFY_ENABLED_EVT */
		Custom_STM_App_Update_Char(CUSTOM_STM_EC,&EOC_v);
 800d0d4:	492a      	ldr	r1, [pc, #168]	@ (800d180 <Custom_STM_App_Notification+0x58c>)
 800d0d6:	200d      	movs	r0, #13
 800d0d8:	f001 fe6e 	bl	800edb8 <Custom_STM_App_Update_Char>
      /* USER CODE END CUSTOM_STM_EC_NOTIFY_ENABLED_EVT */
      break;
 800d0dc:	e039      	b.n	800d152 <Custom_STM_App_Notification+0x55e>
      /* USER CODE END CUSTOM_STM_EC_NOTIFY_DISABLED_EVT */
      break;

    case CUSTOM_STM_PWR_GD_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_PWR_GD_NOTIFY_ENABLED_EVT */
		Custom_STM_App_Update_Char(CUSTOM_STM_PWR_GD,&PWR_GD);
 800d0de:	4929      	ldr	r1, [pc, #164]	@ (800d184 <Custom_STM_App_Notification+0x590>)
 800d0e0:	200e      	movs	r0, #14
 800d0e2:	f001 fe69 	bl	800edb8 <Custom_STM_App_Update_Char>
      /* USER CODE END CUSTOM_STM_PWR_GD_NOTIFY_ENABLED_EVT */
      break;
 800d0e6:	e034      	b.n	800d152 <Custom_STM_App_Notification+0x55e>
      /* USER CODE END CUSTOM_STM_PWR_GD_NOTIFY_DISABLED_EVT */
      break;

    case CUSTOM_STM_SOFTWARE_REVISION_STRING_READ_EVT:
      /* USER CODE BEGIN CUSTOM_STM_SOFTWARE_REVISION_STRING_READ_EVT */
		puts(Firmware);
 800d0e8:	4827      	ldr	r0, [pc, #156]	@ (800d188 <Custom_STM_App_Notification+0x594>)
 800d0ea:	f00c ffa1 	bl	801a030 <puts>
		Custom_STM_App_Update_Char(CUSTOM_STM_SOFTWARE_REVISION_STRING,(uint8_t*)&Firmware);
 800d0ee:	4926      	ldr	r1, [pc, #152]	@ (800d188 <Custom_STM_App_Notification+0x594>)
 800d0f0:	200f      	movs	r0, #15
 800d0f2:	f001 fe61 	bl	800edb8 <Custom_STM_App_Update_Char>
      /* USER CODE END CUSTOM_STM_SOFTWARE_REVISION_STRING_READ_EVT */
      break;
 800d0f6:	e02c      	b.n	800d152 <Custom_STM_App_Notification+0x55e>

    /* OperationMode */
    case CUSTOM_STM_MD_READ_EVT:
      /* USER CODE BEGIN CUSTOM_STM_MD_READ_EVT */

    	Custom_STM_App_Update_Char(CUSTOM_STM_MD, &mode);
 800d0f8:	4924      	ldr	r1, [pc, #144]	@ (800d18c <Custom_STM_App_Notification+0x598>)
 800d0fa:	2010      	movs	r0, #16
 800d0fc:	f001 fe5c 	bl	800edb8 <Custom_STM_App_Update_Char>

      /* USER CODE END CUSTOM_STM_MD_READ_EVT */
      break;
 800d100:	e027      	b.n	800d152 <Custom_STM_App_Notification+0x55e>

    case CUSTOM_STM_MD_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_MD_WRITE_NO_RESP_EVT */
    	mode=pNotification->DataTransfered.pPayload[0];
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	685b      	ldr	r3, [r3, #4]
 800d106:	781a      	ldrb	r2, [r3, #0]
 800d108:	4b20      	ldr	r3, [pc, #128]	@ (800d18c <Custom_STM_App_Notification+0x598>)
 800d10a:	701a      	strb	r2, [r3, #0]
    	if(mode==0x01)
 800d10c:	4b1f      	ldr	r3, [pc, #124]	@ (800d18c <Custom_STM_App_Notification+0x598>)
 800d10e:	781b      	ldrb	r3, [r3, #0]
 800d110:	2b01      	cmp	r3, #1
 800d112:	d108      	bne.n	800d126 <Custom_STM_App_Notification+0x532>
    	{
    		Update_mode();
 800d114:	f000 fe6a 	bl	800ddec <Update_mode>
    		printf("mode %d\n",mode);
 800d118:	4b1c      	ldr	r3, [pc, #112]	@ (800d18c <Custom_STM_App_Notification+0x598>)
 800d11a:	781b      	ldrb	r3, [r3, #0]
 800d11c:	4619      	mov	r1, r3
 800d11e:	481c      	ldr	r0, [pc, #112]	@ (800d190 <Custom_STM_App_Notification+0x59c>)
 800d120:	f00c ff1e 	bl	8019f60 <iprintf>
    		HW_TS_Stop(TEMP_TIMER_ID);
    		HAL_GPIO_WritePin(GPIOD,Green_Led_Pin |Yellow_Led_Pin|Red_Led_Pin, GPIO_PIN_SET);
//    		HW_TS_Start(MODE_TIMER_ID,Ts_UPDATE_PERIOD);
    	}
      /* USER CODE END CUSTOM_STM_MD_WRITE_NO_RESP_EVT */
      break;
 800d124:	e015      	b.n	800d152 <Custom_STM_App_Notification+0x55e>
    		mode=0;
 800d126:	4b19      	ldr	r3, [pc, #100]	@ (800d18c <Custom_STM_App_Notification+0x598>)
 800d128:	2200      	movs	r2, #0
 800d12a:	701a      	strb	r2, [r3, #0]
    		Update_mode();
 800d12c:	f000 fe5e 	bl	800ddec <Update_mode>
    		HW_TS_Stop(TEMP_TIMER_ID);
 800d130:	4b18      	ldr	r3, [pc, #96]	@ (800d194 <Custom_STM_App_Notification+0x5a0>)
 800d132:	781b      	ldrb	r3, [r3, #0]
 800d134:	4618      	mov	r0, r3
 800d136:	f7fd f89d 	bl	800a274 <HW_TS_Stop>
    		HAL_GPIO_WritePin(GPIOD,Green_Led_Pin |Yellow_Led_Pin|Red_Led_Pin, GPIO_PIN_SET);
 800d13a:	2201      	movs	r2, #1
 800d13c:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800d140:	4815      	ldr	r0, [pc, #84]	@ (800d198 <Custom_STM_App_Notification+0x5a4>)
 800d142:	f004 fd2f 	bl	8011ba4 <HAL_GPIO_WritePin>
      break;
 800d146:	e004      	b.n	800d152 <Custom_STM_App_Notification+0x55e>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800d148:	bf00      	nop
 800d14a:	e002      	b.n	800d152 <Custom_STM_App_Notification+0x55e>
      break;
 800d14c:	bf00      	nop
 800d14e:	e000      	b.n	800d152 <Custom_STM_App_Notification+0x55e>
      break;
 800d150:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800d152:	bf00      	nop
}
 800d154:	3714      	adds	r7, #20
 800d156:	46bd      	mov	sp, r7
 800d158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d15a:	bf00      	nop
 800d15c:	200002d8 	.word	0x200002d8
 800d160:	200006b0 	.word	0x200006b0
 800d164:	0801dd60 	.word	0x0801dd60
 800d168:	0801dd7c 	.word	0x0801dd7c
 800d16c:	200008bc 	.word	0x200008bc
 800d170:	200008c4 	.word	0x200008c4
 800d174:	20000564 	.word	0x20000564
 800d178:	200008d8 	.word	0x200008d8
 800d17c:	0801dd88 	.word	0x0801dd88
 800d180:	200004f1 	.word	0x200004f1
 800d184:	200004f0 	.word	0x200004f0
 800d188:	20000054 	.word	0x20000054
 800d18c:	200008b0 	.word	0x200008b0
 800d190:	0801dd9c 	.word	0x0801dd9c
 800d194:	200008de 	.word	0x200008de
 800d198:	48000c00 	.word	0x48000c00

0800d19c <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b082      	sub	sp, #8
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	781b      	ldrb	r3, [r3, #0]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d021      	beq.n	800d1f0 <Custom_APP_Notification+0x54>
 800d1ac:	2b01      	cmp	r3, #1
 800d1ae:	d000      	beq.n	800d1b2 <Custom_APP_Notification+0x16>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800d1b0:	e021      	b.n	800d1f6 <Custom_APP_Notification+0x5a>
		if(mode != 1)
 800d1b2:	4b13      	ldr	r3, [pc, #76]	@ (800d200 <Custom_APP_Notification+0x64>)
 800d1b4:	781b      	ldrb	r3, [r3, #0]
 800d1b6:	2b01      	cmp	r3, #1
 800d1b8:	d01c      	beq.n	800d1f4 <Custom_APP_Notification+0x58>
		HW_TS_Stop(UV_TIMER_ID);
 800d1ba:	4b12      	ldr	r3, [pc, #72]	@ (800d204 <Custom_APP_Notification+0x68>)
 800d1bc:	781b      	ldrb	r3, [r3, #0]
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7fd f858 	bl	800a274 <HW_TS_Stop>
		HW_TS_Stop(TEMP_TIMER_ID);
 800d1c4:	4b10      	ldr	r3, [pc, #64]	@ (800d208 <Custom_APP_Notification+0x6c>)
 800d1c6:	781b      	ldrb	r3, [r3, #0]
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	f7fd f853 	bl	800a274 <HW_TS_Stop>
		HW_TS_Stop(UV_LOG_ID);
 800d1ce:	4b0f      	ldr	r3, [pc, #60]	@ (800d20c <Custom_APP_Notification+0x70>)
 800d1d0:	781b      	ldrb	r3, [r3, #0]
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f7fd f84e 	bl	800a274 <HW_TS_Stop>
		HW_TS_Stop(TEMP_LOG_ID);
 800d1d8:	4b0d      	ldr	r3, [pc, #52]	@ (800d210 <Custom_APP_Notification+0x74>)
 800d1da:	781b      	ldrb	r3, [r3, #0]
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f7fd f849 	bl	800a274 <HW_TS_Stop>
		HAL_GPIO_WritePin(GPIOD,Green_Led_Pin |Yellow_Led_Pin|Red_Led_Pin, GPIO_PIN_SET);
 800d1e2:	2201      	movs	r2, #1
 800d1e4:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800d1e8:	480a      	ldr	r0, [pc, #40]	@ (800d214 <Custom_APP_Notification+0x78>)
 800d1ea:	f004 fcdb 	bl	8011ba4 <HAL_GPIO_WritePin>
      break;
 800d1ee:	e001      	b.n	800d1f4 <Custom_APP_Notification+0x58>
      break;
 800d1f0:	bf00      	nop
 800d1f2:	e000      	b.n	800d1f6 <Custom_APP_Notification+0x5a>
      break;
 800d1f4:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800d1f6:	bf00      	nop
}
 800d1f8:	3708      	adds	r7, #8
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}
 800d1fe:	bf00      	nop
 800d200:	200008b0 	.word	0x200008b0
 800d204:	200008df 	.word	0x200008df
 800d208:	200008de 	.word	0x200008de
 800d20c:	200008e1 	.word	0x200008e1
 800d210:	200008e0 	.word	0x200008e0
 800d214:	48000c00 	.word	0x48000c00

0800d218 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	//HAL_GPIO_WritePin(GPIOD, Red_Led_Pin, GPIO_PIN_RESET);
	//printf("Wine_temp_board\n");
	TEMP_UPDATE_PERIOD = (uint32_t)(Interval*1000*1000/CFG_TS_TICK_VAL);
 800d21c:	4b20      	ldr	r3, [pc, #128]	@ (800d2a0 <Custom_APP_Init+0x88>)
 800d21e:	781b      	ldrb	r3, [r3, #0]
 800d220:	461a      	mov	r2, r3
 800d222:	4b20      	ldr	r3, [pc, #128]	@ (800d2a4 <Custom_APP_Init+0x8c>)
 800d224:	fb02 f303 	mul.w	r3, r2, r3
 800d228:	461a      	mov	r2, r3
 800d22a:	4b1f      	ldr	r3, [pc, #124]	@ (800d2a8 <Custom_APP_Init+0x90>)
 800d22c:	fba3 2302 	umull	r2, r3, r3, r2
 800d230:	09db      	lsrs	r3, r3, #7
 800d232:	4a1e      	ldr	r2, [pc, #120]	@ (800d2ac <Custom_APP_Init+0x94>)
 800d234:	6013      	str	r3, [r2, #0]
	Init_mode();
 800d236:	f000 fd71 	bl	800dd1c <Init_mode>
	TEMP_UPDATE_PERIOD = (uint32_t)(Interval*1000*1000/CFG_TS_TICK_VAL);
 800d23a:	4b19      	ldr	r3, [pc, #100]	@ (800d2a0 <Custom_APP_Init+0x88>)
 800d23c:	781b      	ldrb	r3, [r3, #0]
 800d23e:	461a      	mov	r2, r3
 800d240:	4b18      	ldr	r3, [pc, #96]	@ (800d2a4 <Custom_APP_Init+0x8c>)
 800d242:	fb02 f303 	mul.w	r3, r2, r3
 800d246:	461a      	mov	r2, r3
 800d248:	4b17      	ldr	r3, [pc, #92]	@ (800d2a8 <Custom_APP_Init+0x90>)
 800d24a:	fba3 2302 	umull	r2, r3, r3, r2
 800d24e:	09db      	lsrs	r3, r3, #7
 800d250:	4a16      	ldr	r2, [pc, #88]	@ (800d2ac <Custom_APP_Init+0x94>)
 800d252:	6013      	str	r3, [r2, #0]
	//Update_mode_task();
	UV_init();
 800d254:	f7fb f842 	bl	80082dc <UV_init>
	TEMP_APP_Init();
 800d258:	f000 f996 	bl	800d588 <TEMP_APP_Init>
	UV_APP_Init();
 800d25c:	f000 fa4e 	bl	800d6fc <UV_APP_Init>
	Log_Tx_Init();
 800d260:	f000 fc36 	bl	800dad0 <Log_Tx_Init>
	PWR_EOC();
 800d264:	f000 fd3c 	bl	800dce0 <PWR_EOC>
	TS_Toggle();
 800d268:	f000 fcf0 	bl	800dc4c <TS_Toggle>
	puts(Firmware);
 800d26c:	4810      	ldr	r0, [pc, #64]	@ (800d2b0 <Custom_APP_Init+0x98>)
 800d26e:	f00c fedf 	bl	801a030 <puts>
	printf("\r\n");
 800d272:	4810      	ldr	r0, [pc, #64]	@ (800d2b4 <Custom_APP_Init+0x9c>)
 800d274:	f00c fedc 	bl	801a030 <puts>
	Analog_Temp();
 800d278:	f000 fac8 	bl	800d80c <Analog_Temp>
	if(mode==0x01)
 800d27c:	4b0e      	ldr	r3, [pc, #56]	@ (800d2b8 <Custom_APP_Init+0xa0>)
 800d27e:	781b      	ldrb	r3, [r3, #0]
 800d280:	2b01      	cmp	r3, #1
 800d282:	d10b      	bne.n	800d29c <Custom_APP_Init+0x84>
		{
			HW_TS_Start(TEMP_TIMER_ID,TEMP_UPDATE_PERIOD);
 800d284:	4b0d      	ldr	r3, [pc, #52]	@ (800d2bc <Custom_APP_Init+0xa4>)
 800d286:	781b      	ldrb	r3, [r3, #0]
 800d288:	4a08      	ldr	r2, [pc, #32]	@ (800d2ac <Custom_APP_Init+0x94>)
 800d28a:	6812      	ldr	r2, [r2, #0]
 800d28c:	4611      	mov	r1, r2
 800d28e:	4618      	mov	r0, r3
 800d290:	f7fd f874 	bl	800a37c <HW_TS_Start>
			printf("\Auto reload\n");
 800d294:	480a      	ldr	r0, [pc, #40]	@ (800d2c0 <Custom_APP_Init+0xa8>)
 800d296:	f00c fecb 	bl	801a030 <puts>
		}
	//TEMP_APP_Init();
	//HW_TS_Start(UV_TIMER_ID,UV_UPDATE_PERIOD);
  /* USER CODE END CUSTOM_APP_Init */
  return;
 800d29a:	bf00      	nop
 800d29c:	bf00      	nop
}
 800d29e:	bd80      	pop	{r7, pc}
 800d2a0:	20000045 	.word	0x20000045
 800d2a4:	000f4240 	.word	0x000f4240
 800d2a8:	4325c53f 	.word	0x4325c53f
 800d2ac:	200008a0 	.word	0x200008a0
 800d2b0:	20000054 	.word	0x20000054
 800d2b4:	0801dda8 	.word	0x0801dda8
 800d2b8:	200008b0 	.word	0x200008b0
 800d2bc:	200008de 	.word	0x200008de
 800d2c0:	0801ddac 	.word	0x0801ddac

0800d2c4 <Send_Temp_Notification>:

/* OperationMode */

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void Send_Temp_Notification(void)
{
 800d2c4:	b5b0      	push	{r4, r5, r7, lr}
 800d2c6:	b086      	sub	sp, #24
 800d2c8:	af04      	add	r7, sp, #16

	Temperature=Temp();
 800d2ca:	f7fe f9ab 	bl	800b624 <Temp>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	461a      	mov	r2, r3
 800d2d2:	4b72      	ldr	r3, [pc, #456]	@ (800d49c <Send_Temp_Notification+0x1d8>)
 800d2d4:	601a      	str	r2, [r3, #0]
	printf("T %f %d %d %d %d\n",Temperature[0],T[0],T[1],T[2],T[3]);
 800d2d6:	4b71      	ldr	r3, [pc, #452]	@ (800d49c <Send_Temp_Notification+0x1d8>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f7fa f913 	bl	8007508 <__aeabi_f2d>
 800d2e2:	4602      	mov	r2, r0
 800d2e4:	460b      	mov	r3, r1
 800d2e6:	496e      	ldr	r1, [pc, #440]	@ (800d4a0 <Send_Temp_Notification+0x1dc>)
 800d2e8:	7809      	ldrb	r1, [r1, #0]
 800d2ea:	4608      	mov	r0, r1
 800d2ec:	496c      	ldr	r1, [pc, #432]	@ (800d4a0 <Send_Temp_Notification+0x1dc>)
 800d2ee:	7849      	ldrb	r1, [r1, #1]
 800d2f0:	460c      	mov	r4, r1
 800d2f2:	496b      	ldr	r1, [pc, #428]	@ (800d4a0 <Send_Temp_Notification+0x1dc>)
 800d2f4:	7889      	ldrb	r1, [r1, #2]
 800d2f6:	460d      	mov	r5, r1
 800d2f8:	4969      	ldr	r1, [pc, #420]	@ (800d4a0 <Send_Temp_Notification+0x1dc>)
 800d2fa:	78c9      	ldrb	r1, [r1, #3]
 800d2fc:	9103      	str	r1, [sp, #12]
 800d2fe:	9502      	str	r5, [sp, #8]
 800d300:	9401      	str	r4, [sp, #4]
 800d302:	9000      	str	r0, [sp, #0]
 800d304:	4867      	ldr	r0, [pc, #412]	@ (800d4a4 <Send_Temp_Notification+0x1e0>)
 800d306:	f00c fe2b 	bl	8019f60 <iprintf>

	uint8_t light_noti[1];
	memcpy(T,&Temperature[0],4);
 800d30a:	4b64      	ldr	r3, [pc, #400]	@ (800d49c <Send_Temp_Notification+0x1d8>)
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	461a      	mov	r2, r3
 800d312:	4b63      	ldr	r3, [pc, #396]	@ (800d4a0 <Send_Temp_Notification+0x1dc>)
 800d314:	601a      	str	r2, [r3, #0]
	memcpy(AT,&Temperature[1],4);
 800d316:	4b61      	ldr	r3, [pc, #388]	@ (800d49c <Send_Temp_Notification+0x1d8>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	3304      	adds	r3, #4
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	461a      	mov	r2, r3
 800d320:	4b61      	ldr	r3, [pc, #388]	@ (800d4a8 <Send_Temp_Notification+0x1e4>)
 800d322:	601a      	str	r2, [r3, #0]
	//printf("T %d %d %d %d\n",T[0],T[1],T[2],T[3]);
	Custom_STM_App_Update_Char(CUSTOM_STM_IR_T,T);
 800d324:	495e      	ldr	r1, [pc, #376]	@ (800d4a0 <Send_Temp_Notification+0x1dc>)
 800d326:	2001      	movs	r0, #1
 800d328:	f001 fd46 	bl	800edb8 <Custom_STM_App_Update_Char>
	Custom_STM_App_Update_Char(CUSTOM_STM_AMBI_TEMP,T);
 800d32c:	495c      	ldr	r1, [pc, #368]	@ (800d4a0 <Send_Temp_Notification+0x1dc>)
 800d32e:	2009      	movs	r0, #9
 800d330:	f001 fd42 	bl	800edb8 <Custom_STM_App_Update_Char>

	}
	else
	{

		global_storage_count+=1;
 800d334:	4b5d      	ldr	r3, [pc, #372]	@ (800d4ac <Send_Temp_Notification+0x1e8>)
 800d336:	781b      	ldrb	r3, [r3, #0]
 800d338:	3301      	adds	r3, #1
 800d33a:	b2da      	uxtb	r2, r3
 800d33c:	4b5b      	ldr	r3, [pc, #364]	@ (800d4ac <Send_Temp_Notification+0x1e8>)
 800d33e:	701a      	strb	r2, [r3, #0]
	}

	if(Temp_lower_limit >-21 && Temp_upper_limit <86)
 800d340:	4b5b      	ldr	r3, [pc, #364]	@ (800d4b0 <Send_Temp_Notification+0x1ec>)
 800d342:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d346:	f113 0f14 	cmn.w	r3, #20
 800d34a:	f2c0 80a2 	blt.w	800d492 <Send_Temp_Notification+0x1ce>
 800d34e:	4b59      	ldr	r3, [pc, #356]	@ (800d4b4 <Send_Temp_Notification+0x1f0>)
 800d350:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d354:	2b55      	cmp	r3, #85	@ 0x55
 800d356:	f300 809c 	bgt.w	800d492 <Send_Temp_Notification+0x1ce>
	{
		if(Temperature[0]>=Temp_lower_limit && Temperature[0]<=Temp_upper_limit)
 800d35a:	4b50      	ldr	r3, [pc, #320]	@ (800d49c <Send_Temp_Notification+0x1d8>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	ed93 7a00 	vldr	s14, [r3]
 800d362:	4b53      	ldr	r3, [pc, #332]	@ (800d4b0 <Send_Temp_Notification+0x1ec>)
 800d364:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d368:	ee07 3a90 	vmov	s15, r3
 800d36c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d370:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d378:	db26      	blt.n	800d3c8 <Send_Temp_Notification+0x104>
 800d37a:	4b48      	ldr	r3, [pc, #288]	@ (800d49c <Send_Temp_Notification+0x1d8>)
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	ed93 7a00 	vldr	s14, [r3]
 800d382:	4b4c      	ldr	r3, [pc, #304]	@ (800d4b4 <Send_Temp_Notification+0x1f0>)
 800d384:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d388:	ee07 3a90 	vmov	s15, r3
 800d38c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d390:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d398:	d816      	bhi.n	800d3c8 <Send_Temp_Notification+0x104>
		{
			////Green_led //send notification
			printf("In range\n");
 800d39a:	4847      	ldr	r0, [pc, #284]	@ (800d4b8 <Send_Temp_Notification+0x1f4>)
 800d39c:	f00c fe48 	bl	801a030 <puts>
			light_noti[1]=1;
 800d3a0:	2301      	movs	r3, #1
 800d3a2:	717b      	strb	r3, [r7, #5]

			HAL_GPIO_WritePin(GPIOD, Green_Led_Pin, GPIO_PIN_RESET);
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800d3aa:	4844      	ldr	r0, [pc, #272]	@ (800d4bc <Send_Temp_Notification+0x1f8>)
 800d3ac:	f004 fbfa 	bl	8011ba4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, Yellow_Led_Pin|Red_Led_Pin, GPIO_PIN_SET);
 800d3b0:	2201      	movs	r2, #1
 800d3b2:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 800d3b6:	4841      	ldr	r0, [pc, #260]	@ (800d4bc <Send_Temp_Notification+0x1f8>)
 800d3b8:	f004 fbf4 	bl	8011ba4 <HAL_GPIO_WritePin>
			Custom_STM_App_Update_Char(CUSTOM_STM_R_N,light_noti);
 800d3bc:	1d3b      	adds	r3, r7, #4
 800d3be:	4619      	mov	r1, r3
 800d3c0:	2005      	movs	r0, #5
 800d3c2:	f001 fcf9 	bl	800edb8 <Custom_STM_App_Update_Char>
			Custom_STM_App_Update_Char(CUSTOM_STM_R_N,light_noti);

		}
	}

}
 800d3c6:	e064      	b.n	800d492 <Send_Temp_Notification+0x1ce>
		else if(Temperature[0]<Temp_lower_limit)
 800d3c8:	4b34      	ldr	r3, [pc, #208]	@ (800d49c <Send_Temp_Notification+0x1d8>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	ed93 7a00 	vldr	s14, [r3]
 800d3d0:	4b37      	ldr	r3, [pc, #220]	@ (800d4b0 <Send_Temp_Notification+0x1ec>)
 800d3d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d3d6:	ee07 3a90 	vmov	s15, r3
 800d3da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d3de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d3e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3e6:	d516      	bpl.n	800d416 <Send_Temp_Notification+0x152>
			light_noti[1]=2;
 800d3e8:	2302      	movs	r3, #2
 800d3ea:	717b      	strb	r3, [r7, #5]
			printf("lower range\n");
 800d3ec:	4834      	ldr	r0, [pc, #208]	@ (800d4c0 <Send_Temp_Notification+0x1fc>)
 800d3ee:	f00c fe1f 	bl	801a030 <puts>
			HAL_GPIO_WritePin(GPIOD, Yellow_Led_Pin, GPIO_PIN_RESET);
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800d3f8:	4830      	ldr	r0, [pc, #192]	@ (800d4bc <Send_Temp_Notification+0x1f8>)
 800d3fa:	f004 fbd3 	bl	8011ba4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, Green_Led_Pin|Red_Led_Pin, GPIO_PIN_SET);
 800d3fe:	2201      	movs	r2, #1
 800d400:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 800d404:	482d      	ldr	r0, [pc, #180]	@ (800d4bc <Send_Temp_Notification+0x1f8>)
 800d406:	f004 fbcd 	bl	8011ba4 <HAL_GPIO_WritePin>
			Custom_STM_App_Update_Char(CUSTOM_STM_R_N,light_noti);
 800d40a:	1d3b      	adds	r3, r7, #4
 800d40c:	4619      	mov	r1, r3
 800d40e:	2005      	movs	r0, #5
 800d410:	f001 fcd2 	bl	800edb8 <Custom_STM_App_Update_Char>
}
 800d414:	e03d      	b.n	800d492 <Send_Temp_Notification+0x1ce>
		else if(Temperature[0]>Temp_upper_limit)
 800d416:	4b21      	ldr	r3, [pc, #132]	@ (800d49c <Send_Temp_Notification+0x1d8>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	ed93 7a00 	vldr	s14, [r3]
 800d41e:	4b25      	ldr	r3, [pc, #148]	@ (800d4b4 <Send_Temp_Notification+0x1f0>)
 800d420:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d424:	ee07 3a90 	vmov	s15, r3
 800d428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d42c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d434:	dd16      	ble.n	800d464 <Send_Temp_Notification+0x1a0>
			printf("Upper range\n");
 800d436:	4823      	ldr	r0, [pc, #140]	@ (800d4c4 <Send_Temp_Notification+0x200>)
 800d438:	f00c fdfa 	bl	801a030 <puts>
			light_noti[1]=3;
 800d43c:	2303      	movs	r3, #3
 800d43e:	717b      	strb	r3, [r7, #5]
			HAL_GPIO_WritePin(GPIOD, Red_Led_Pin, GPIO_PIN_RESET);
 800d440:	2200      	movs	r2, #0
 800d442:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800d446:	481d      	ldr	r0, [pc, #116]	@ (800d4bc <Send_Temp_Notification+0x1f8>)
 800d448:	f004 fbac 	bl	8011ba4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, Yellow_Led_Pin|Green_Led_Pin, GPIO_PIN_SET);
 800d44c:	2201      	movs	r2, #1
 800d44e:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 800d452:	481a      	ldr	r0, [pc, #104]	@ (800d4bc <Send_Temp_Notification+0x1f8>)
 800d454:	f004 fba6 	bl	8011ba4 <HAL_GPIO_WritePin>
			Custom_STM_App_Update_Char(CUSTOM_STM_R_N,light_noti);
 800d458:	1d3b      	adds	r3, r7, #4
 800d45a:	4619      	mov	r1, r3
 800d45c:	2005      	movs	r0, #5
 800d45e:	f001 fcab 	bl	800edb8 <Custom_STM_App_Update_Char>
}
 800d462:	e016      	b.n	800d492 <Send_Temp_Notification+0x1ce>
			light_noti[1]=0;
 800d464:	2300      	movs	r3, #0
 800d466:	717b      	strb	r3, [r7, #5]
			printf("outoff range\n");
 800d468:	4817      	ldr	r0, [pc, #92]	@ (800d4c8 <Send_Temp_Notification+0x204>)
 800d46a:	f00c fde1 	bl	801a030 <puts>
			Temp_lower_limit=-21;
 800d46e:	4b10      	ldr	r3, [pc, #64]	@ (800d4b0 <Send_Temp_Notification+0x1ec>)
 800d470:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800d474:	801a      	strh	r2, [r3, #0]
			Temp_upper_limit=86;
 800d476:	4b0f      	ldr	r3, [pc, #60]	@ (800d4b4 <Send_Temp_Notification+0x1f0>)
 800d478:	2256      	movs	r2, #86	@ 0x56
 800d47a:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, Yellow_Led_Pin|Green_Led_Pin|Red_Led_Pin, GPIO_PIN_SET);
 800d47c:	2201      	movs	r2, #1
 800d47e:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800d482:	480e      	ldr	r0, [pc, #56]	@ (800d4bc <Send_Temp_Notification+0x1f8>)
 800d484:	f004 fb8e 	bl	8011ba4 <HAL_GPIO_WritePin>
			Custom_STM_App_Update_Char(CUSTOM_STM_R_N,light_noti);
 800d488:	1d3b      	adds	r3, r7, #4
 800d48a:	4619      	mov	r1, r3
 800d48c:	2005      	movs	r0, #5
 800d48e:	f001 fc93 	bl	800edb8 <Custom_STM_App_Update_Char>
}
 800d492:	bf00      	nop
 800d494:	3708      	adds	r7, #8
 800d496:	46bd      	mov	sp, r7
 800d498:	bdb0      	pop	{r4, r5, r7, pc}
 800d49a:	bf00      	nop
 800d49c:	200008a4 	.word	0x200008a4
 800d4a0:	200008a8 	.word	0x200008a8
 800d4a4:	0801ddb8 	.word	0x0801ddb8
 800d4a8:	200008ac 	.word	0x200008ac
 800d4ac:	200008b8 	.word	0x200008b8
 800d4b0:	20000046 	.word	0x20000046
 800d4b4:	20000048 	.word	0x20000048
 800d4b8:	0801ddcc 	.word	0x0801ddcc
 800d4bc:	48000c00 	.word	0x48000c00
 800d4c0:	0801ddd8 	.word	0x0801ddd8
 800d4c4:	0801dde4 	.word	0x0801dde4
 800d4c8:	0801ddf0 	.word	0x0801ddf0

0800d4cc <Date_Time>:

	}
}

void Date_Time(void)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b082      	sub	sp, #8
 800d4d0:	af00      	add	r7, sp, #0
	if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	4925      	ldr	r1, [pc, #148]	@ (800d56c <Date_Time+0xa0>)
 800d4d6:	4826      	ldr	r0, [pc, #152]	@ (800d570 <Date_Time+0xa4>)
 800d4d8:	f008 f830 	bl	801553c <HAL_RTC_GetTime>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d004      	beq.n	800d4ec <Date_Time+0x20>
	{
		Error_Handler();
 800d4e2:	f7fd fa53 	bl	800a98c <Error_Handler>
		printf("Time_fail\n");
 800d4e6:	4823      	ldr	r0, [pc, #140]	@ (800d574 <Date_Time+0xa8>)
 800d4e8:	f00c fda2 	bl	801a030 <puts>
	}
	if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	4922      	ldr	r1, [pc, #136]	@ (800d578 <Date_Time+0xac>)
 800d4f0:	481f      	ldr	r0, [pc, #124]	@ (800d570 <Date_Time+0xa4>)
 800d4f2:	f008 f92d 	bl	8015750 <HAL_RTC_GetDate>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d004      	beq.n	800d506 <Date_Time+0x3a>
	{

		printf("Date_fail\n");
 800d4fc:	481f      	ldr	r0, [pc, #124]	@ (800d57c <Date_Time+0xb0>)
 800d4fe:	f00c fd97 	bl	801a030 <puts>
		Error_Handler();
 800d502:	f7fd fa43 	bl	800a98c <Error_Handler>
	}
	Time[0]=sTime.Hours;
 800d506:	4b19      	ldr	r3, [pc, #100]	@ (800d56c <Date_Time+0xa0>)
 800d508:	781a      	ldrb	r2, [r3, #0]
 800d50a:	4b1d      	ldr	r3, [pc, #116]	@ (800d580 <Date_Time+0xb4>)
 800d50c:	701a      	strb	r2, [r3, #0]
	Time[1]=sTime.Minutes;
 800d50e:	4b17      	ldr	r3, [pc, #92]	@ (800d56c <Date_Time+0xa0>)
 800d510:	785a      	ldrb	r2, [r3, #1]
 800d512:	4b1b      	ldr	r3, [pc, #108]	@ (800d580 <Date_Time+0xb4>)
 800d514:	705a      	strb	r2, [r3, #1]
	Time[2]=sTime.Seconds;
 800d516:	4b15      	ldr	r3, [pc, #84]	@ (800d56c <Date_Time+0xa0>)
 800d518:	789a      	ldrb	r2, [r3, #2]
 800d51a:	4b19      	ldr	r3, [pc, #100]	@ (800d580 <Date_Time+0xb4>)
 800d51c:	709a      	strb	r2, [r3, #2]
	Time[3]=sDate.WeekDay;
 800d51e:	4b16      	ldr	r3, [pc, #88]	@ (800d578 <Date_Time+0xac>)
 800d520:	781a      	ldrb	r2, [r3, #0]
 800d522:	4b17      	ldr	r3, [pc, #92]	@ (800d580 <Date_Time+0xb4>)
 800d524:	70da      	strb	r2, [r3, #3]
	Time[4]=sDate.Date;
 800d526:	4b14      	ldr	r3, [pc, #80]	@ (800d578 <Date_Time+0xac>)
 800d528:	789a      	ldrb	r2, [r3, #2]
 800d52a:	4b15      	ldr	r3, [pc, #84]	@ (800d580 <Date_Time+0xb4>)
 800d52c:	711a      	strb	r2, [r3, #4]
	Time[5]=sDate.Month;
 800d52e:	4b12      	ldr	r3, [pc, #72]	@ (800d578 <Date_Time+0xac>)
 800d530:	785a      	ldrb	r2, [r3, #1]
 800d532:	4b13      	ldr	r3, [pc, #76]	@ (800d580 <Date_Time+0xb4>)
 800d534:	715a      	strb	r2, [r3, #5]
	Time[6]=sDate.Year;
 800d536:	4b10      	ldr	r3, [pc, #64]	@ (800d578 <Date_Time+0xac>)
 800d538:	78da      	ldrb	r2, [r3, #3]
 800d53a:	4b11      	ldr	r3, [pc, #68]	@ (800d580 <Date_Time+0xb4>)
 800d53c:	719a      	strb	r2, [r3, #6]
	for(uint8_t i=0;i<7;i++){
 800d53e:	2300      	movs	r3, #0
 800d540:	71fb      	strb	r3, [r7, #7]
 800d542:	e00a      	b.n	800d55a <Date_Time+0x8e>
		printf("T[%d]:%d\n",i,Time[i]);
 800d544:	79f9      	ldrb	r1, [r7, #7]
 800d546:	79fb      	ldrb	r3, [r7, #7]
 800d548:	4a0d      	ldr	r2, [pc, #52]	@ (800d580 <Date_Time+0xb4>)
 800d54a:	5cd3      	ldrb	r3, [r2, r3]
 800d54c:	461a      	mov	r2, r3
 800d54e:	480d      	ldr	r0, [pc, #52]	@ (800d584 <Date_Time+0xb8>)
 800d550:	f00c fd06 	bl	8019f60 <iprintf>
	for(uint8_t i=0;i<7;i++){
 800d554:	79fb      	ldrb	r3, [r7, #7]
 800d556:	3301      	adds	r3, #1
 800d558:	71fb      	strb	r3, [r7, #7]
 800d55a:	79fb      	ldrb	r3, [r7, #7]
 800d55c:	2b06      	cmp	r3, #6
 800d55e:	d9f1      	bls.n	800d544 <Date_Time+0x78>
	}
}
 800d560:	bf00      	nop
 800d562:	bf00      	nop
 800d564:	3708      	adds	r7, #8
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}
 800d56a:	bf00      	nop
 800d56c:	200008c4 	.word	0x200008c4
 800d570:	20000564 	.word	0x20000564
 800d574:	0801de14 	.word	0x0801de14
 800d578:	200008d8 	.word	0x200008d8
 800d57c:	0801de20 	.word	0x0801de20
 800d580:	200008bc 	.word	0x200008bc
 800d584:	0801de2c 	.word	0x0801de2c

0800d588 <TEMP_APP_Init>:

static void TEMP_APP_Init(void)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b082      	sub	sp, #8
 800d58c:	af00      	add	r7, sp, #0

	UTIL_SEQ_RegTask( 1<<CFG_TEMP_ID, UTIL_SEQ_RFU, Send_Temp_Notification);
 800d58e:	4a11      	ldr	r2, [pc, #68]	@ (800d5d4 <TEMP_APP_Init+0x4c>)
 800d590:	2100      	movs	r1, #0
 800d592:	2004      	movs	r0, #4
 800d594:	f00b fc52 	bl	8018e3c <UTIL_SEQ_RegTask>
	/* Create timer to get the AccGyroMag params and update charecteristic */
	HW_TS_ReturnStatus_t r=HW_TS_Create(CFG_TIM_PROC_ID_ISR, &TEMP_TIMER_ID,hw_ts_Repeated,TEMP_Timer_Callback);
 800d598:	4b0f      	ldr	r3, [pc, #60]	@ (800d5d8 <TEMP_APP_Init+0x50>)
 800d59a:	2201      	movs	r2, #1
 800d59c:	490f      	ldr	r1, [pc, #60]	@ (800d5dc <TEMP_APP_Init+0x54>)
 800d59e:	2000      	movs	r0, #0
 800d5a0:	f7fc fdee 	bl	800a180 <HW_TS_Create>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	71fb      	strb	r3, [r7, #7]
	TEMP_UPDATE_PERIOD = (uint32_t)(Interval*1000*1000/CFG_TS_TICK_VAL);
 800d5a8:	4b0d      	ldr	r3, [pc, #52]	@ (800d5e0 <TEMP_APP_Init+0x58>)
 800d5aa:	781b      	ldrb	r3, [r3, #0]
 800d5ac:	461a      	mov	r2, r3
 800d5ae:	4b0d      	ldr	r3, [pc, #52]	@ (800d5e4 <TEMP_APP_Init+0x5c>)
 800d5b0:	fb02 f303 	mul.w	r3, r2, r3
 800d5b4:	461a      	mov	r2, r3
 800d5b6:	4b0c      	ldr	r3, [pc, #48]	@ (800d5e8 <TEMP_APP_Init+0x60>)
 800d5b8:	fba3 2302 	umull	r2, r3, r3, r2
 800d5bc:	09db      	lsrs	r3, r3, #7
 800d5be:	4a0b      	ldr	r2, [pc, #44]	@ (800d5ec <TEMP_APP_Init+0x64>)
 800d5c0:	6013      	str	r3, [r2, #0]

	printf("\r TEMP_APP_INIT %d\n",r);
 800d5c2:	79fb      	ldrb	r3, [r7, #7]
 800d5c4:	4619      	mov	r1, r3
 800d5c6:	480a      	ldr	r0, [pc, #40]	@ (800d5f0 <TEMP_APP_Init+0x68>)
 800d5c8:	f00c fcca 	bl	8019f60 <iprintf>
	return;
 800d5cc:	bf00      	nop
}
 800d5ce:	3708      	adds	r7, #8
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}
 800d5d4:	0800d2c5 	.word	0x0800d2c5
 800d5d8:	0800d5f5 	.word	0x0800d5f5
 800d5dc:	200008de 	.word	0x200008de
 800d5e0:	20000045 	.word	0x20000045
 800d5e4:	000f4240 	.word	0x000f4240
 800d5e8:	4325c53f 	.word	0x4325c53f
 800d5ec:	200008a0 	.word	0x200008a0
 800d5f0:	0801de38 	.word	0x0801de38

0800d5f4 <TEMP_Timer_Callback>:
static void TEMP_Timer_Callback(void)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b082      	sub	sp, #8
 800d5f8:	af00      	add	r7, sp, #0
	UTIL_SEQ_PauseTask(1<<CFG_UV_ID);
 800d5fa:	2008      	movs	r0, #8
 800d5fc:	f00b fc6c 	bl	8018ed8 <UTIL_SEQ_PauseTask>
	UTIL_SEQ_PauseTask(1<<CFG_LOG_UV_ID);
 800d600:	2020      	movs	r0, #32
 800d602:	f00b fc69 	bl	8018ed8 <UTIL_SEQ_PauseTask>
	UTIL_SEQ_PauseTask(1<<CFG_LOG_TEMP_ID);
 800d606:	2010      	movs	r0, #16
 800d608:	f00b fc66 	bl	8018ed8 <UTIL_SEQ_PauseTask>
	uint32_t status = UTIL_SEQ_IsPauseTask(1<<CFG_TEMP_ID);
 800d60c:	2004      	movs	r0, #4
 800d60e:	f00b fc83 	bl	8018f18 <UTIL_SEQ_IsPauseTask>
 800d612:	6078      	str	r0, [r7, #4]
	//printf("status %d \n",status);
	if(status==1)
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2b01      	cmp	r3, #1
 800d618:	d102      	bne.n	800d620 <TEMP_Timer_Callback+0x2c>
	{
		UTIL_SEQ_ResumeTask(1<<CFG_TEMP_ID);
 800d61a:	2004      	movs	r0, #4
 800d61c:	f00b fca2 	bl	8018f64 <UTIL_SEQ_ResumeTask>
	}
	UTIL_SEQ_SetTask(1<<CFG_TEMP_ID, CFG_SCH_PRIO_2);
 800d620:	2102      	movs	r1, #2
 800d622:	2004      	movs	r0, #4
 800d624:	f00b fc2c 	bl	8018e80 <UTIL_SEQ_SetTask>
	// printf("\r TEMP_APP_CALLBACK\n");
}
 800d628:	bf00      	nop
 800d62a:	3708      	adds	r7, #8
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}

0800d630 <UV_Timer_Callback>:


static void UV_Timer_Callback(void)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b082      	sub	sp, #8
 800d634:	af00      	add	r7, sp, #0
	UTIL_SEQ_PauseTask(1<<CFG_TEMP_ID);
 800d636:	2004      	movs	r0, #4
 800d638:	f00b fc4e 	bl	8018ed8 <UTIL_SEQ_PauseTask>
	UTIL_SEQ_PauseTask(1<<CFG_LOG_UV_ID);
 800d63c:	2020      	movs	r0, #32
 800d63e:	f00b fc4b 	bl	8018ed8 <UTIL_SEQ_PauseTask>
	UTIL_SEQ_PauseTask(1<<CFG_LOG_TEMP_ID);
 800d642:	2010      	movs	r0, #16
 800d644:	f00b fc48 	bl	8018ed8 <UTIL_SEQ_PauseTask>
	uint32_t status = UTIL_SEQ_IsPauseTask(1<<CFG_UV_ID);
 800d648:	2008      	movs	r0, #8
 800d64a:	f00b fc65 	bl	8018f18 <UTIL_SEQ_IsPauseTask>
 800d64e:	6078      	str	r0, [r7, #4]
	if(status==1)
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2b01      	cmp	r3, #1
 800d654:	d102      	bne.n	800d65c <UV_Timer_Callback+0x2c>
	{
		UTIL_SEQ_ResumeTask(1<<CFG_UV_ID);
 800d656:	2008      	movs	r0, #8
 800d658:	f00b fc84 	bl	8018f64 <UTIL_SEQ_ResumeTask>
	}
	UTIL_SEQ_SetTask(1<<CFG_UV_ID, CFG_SCH_PRIO_2);
 800d65c:	2102      	movs	r1, #2
 800d65e:	2008      	movs	r0, #8
 800d660:	f00b fc0e 	bl	8018e80 <UTIL_SEQ_SetTask>
	printf("\r UV_APP_CALLBACK\n");
 800d664:	4803      	ldr	r0, [pc, #12]	@ (800d674 <UV_Timer_Callback+0x44>)
 800d666:	f00c fce3 	bl	801a030 <puts>
}
 800d66a:	bf00      	nop
 800d66c:	3708      	adds	r7, #8
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}
 800d672:	bf00      	nop
 800d674:	0801de4c 	.word	0x0801de4c

0800d678 <Send_UV_Notification>:
void Send_UV_Notification(void)
{
 800d678:	b5b0      	push	{r4, r5, r7, lr}
 800d67a:	b088      	sub	sp, #32
 800d67c:	af04      	add	r7, sp, #16
	f_UV();
 800d67e:	f7fa fe69 	bl	8008354 <f_UV>
	//UV();//printf("F_UV %f \n",f_UV_Data);
	UV_Data = (uint8_t)f_UVI;
 800d682:	4b19      	ldr	r3, [pc, #100]	@ (800d6e8 <Send_UV_Notification+0x70>)
 800d684:	edd3 7a00 	vldr	s15, [r3]
 800d688:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d68c:	edc7 7a01 	vstr	s15, [r7, #4]
 800d690:	793b      	ldrb	r3, [r7, #4]
 800d692:	b2da      	uxtb	r2, r3
 800d694:	4b15      	ldr	r3, [pc, #84]	@ (800d6ec <Send_UV_Notification+0x74>)
 800d696:	701a      	strb	r2, [r3, #0]
	uint8_t UV_TX[sizeof(f_UVI)];
	memcpy(UV_TX,&f_UVI,sizeof(f_UVI));
 800d698:	4b13      	ldr	r3, [pc, #76]	@ (800d6e8 <Send_UV_Notification+0x70>)
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	60fb      	str	r3, [r7, #12]
	memcpy(&f_UV_Data,UV_TX,sizeof(f_UV_Data));
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	4a13      	ldr	r2, [pc, #76]	@ (800d6f0 <Send_UV_Notification+0x78>)
 800d6a2:	6013      	str	r3, [r2, #0]
	printf("\r UV_sense_call[%f]= %x %x %x %x\n",f_UV_Data, UV_TX[0],UV_TX[1],UV_TX[2],UV_TX[3]);
 800d6a4:	4b12      	ldr	r3, [pc, #72]	@ (800d6f0 <Send_UV_Notification+0x78>)
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f7f9 ff2d 	bl	8007508 <__aeabi_f2d>
 800d6ae:	4602      	mov	r2, r0
 800d6b0:	460b      	mov	r3, r1
 800d6b2:	7b39      	ldrb	r1, [r7, #12]
 800d6b4:	7b78      	ldrb	r0, [r7, #13]
 800d6b6:	7bbc      	ldrb	r4, [r7, #14]
 800d6b8:	7bfd      	ldrb	r5, [r7, #15]
 800d6ba:	9503      	str	r5, [sp, #12]
 800d6bc:	9402      	str	r4, [sp, #8]
 800d6be:	9001      	str	r0, [sp, #4]
 800d6c0:	9100      	str	r1, [sp, #0]
 800d6c2:	480c      	ldr	r0, [pc, #48]	@ (800d6f4 <Send_UV_Notification+0x7c>)
 800d6c4:	f00c fc4c 	bl	8019f60 <iprintf>

	Custom_STM_App_Update_Char(CUSTOM_STM_UV_V,UV_TX);
 800d6c8:	f107 030c 	add.w	r3, r7, #12
 800d6cc:	4619      	mov	r1, r3
 800d6ce:	2006      	movs	r0, #6
 800d6d0:	f001 fb72 	bl	800edb8 <Custom_STM_App_Update_Char>
		log_data(14);

	}
	else
	{
		global_storage_count+=1;
 800d6d4:	4b08      	ldr	r3, [pc, #32]	@ (800d6f8 <Send_UV_Notification+0x80>)
 800d6d6:	781b      	ldrb	r3, [r3, #0]
 800d6d8:	3301      	adds	r3, #1
 800d6da:	b2da      	uxtb	r2, r3
 800d6dc:	4b06      	ldr	r3, [pc, #24]	@ (800d6f8 <Send_UV_Notification+0x80>)
 800d6de:	701a      	strb	r2, [r3, #0]
	}
}
 800d6e0:	bf00      	nop
 800d6e2:	3710      	adds	r7, #16
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bdb0      	pop	{r4, r5, r7, pc}
 800d6e8:	200002f4 	.word	0x200002f4
 800d6ec:	200008e4 	.word	0x200008e4
 800d6f0:	200008e8 	.word	0x200008e8
 800d6f4:	0801de60 	.word	0x0801de60
 800d6f8:	200008b8 	.word	0x200008b8

0800d6fc <UV_APP_Init>:
static void UV_APP_Init(void)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b082      	sub	sp, #8
 800d700:	af00      	add	r7, sp, #0

	UTIL_SEQ_RegTask( 1<<CFG_UV_ID, UTIL_SEQ_RFU, Send_UV_Notification);
 800d702:	4a0b      	ldr	r2, [pc, #44]	@ (800d730 <UV_APP_Init+0x34>)
 800d704:	2100      	movs	r1, #0
 800d706:	2008      	movs	r0, #8
 800d708:	f00b fb98 	bl	8018e3c <UTIL_SEQ_RegTask>
	/* Create timer to get the AccGyroMag params and update charecteristic */
	HW_TS_ReturnStatus_t r=HW_TS_Create(CFG_TIM_PROC_ID_ISR, &UV_TIMER_ID,hw_ts_Repeated,UV_Timer_Callback);
 800d70c:	4b09      	ldr	r3, [pc, #36]	@ (800d734 <UV_APP_Init+0x38>)
 800d70e:	2201      	movs	r2, #1
 800d710:	4909      	ldr	r1, [pc, #36]	@ (800d738 <UV_APP_Init+0x3c>)
 800d712:	2000      	movs	r0, #0
 800d714:	f7fc fd34 	bl	800a180 <HW_TS_Create>
 800d718:	4603      	mov	r3, r0
 800d71a:	71fb      	strb	r3, [r7, #7]
	printf("\r UV_APP_Init %d \n",r);
 800d71c:	79fb      	ldrb	r3, [r7, #7]
 800d71e:	4619      	mov	r1, r3
 800d720:	4806      	ldr	r0, [pc, #24]	@ (800d73c <UV_APP_Init+0x40>)
 800d722:	f00c fc1d 	bl	8019f60 <iprintf>
	return;
 800d726:	bf00      	nop
}
 800d728:	3708      	adds	r7, #8
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}
 800d72e:	bf00      	nop
 800d730:	0800d679 	.word	0x0800d679
 800d734:	0800d631 	.word	0x0800d631
 800d738:	200008df 	.word	0x200008df
 800d73c:	0801de84 	.word	0x0801de84

0800d740 <Battery>:

void Battery(void)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b082      	sub	sp, #8
 800d744:	af00      	add	r7, sp, #0


	//ADC_Select_Battery();
	uint16_t Voltage,Battery;
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800d746:	217f      	movs	r1, #127	@ 0x7f
 800d748:	4829      	ldr	r0, [pc, #164]	@ (800d7f0 <Battery+0xb0>)
 800d74a:	f003 fa97 	bl	8010c7c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC_Data ,2);
 800d74e:	2202      	movs	r2, #2
 800d750:	4928      	ldr	r1, [pc, #160]	@ (800d7f4 <Battery+0xb4>)
 800d752:	4827      	ldr	r0, [pc, #156]	@ (800d7f0 <Battery+0xb0>)
 800d754:	f002 fb72 	bl	800fe3c <HAL_ADC_Start_DMA>
	//HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&Battery,1);
	Voltage = ((ADC_Data[0] *3300)/4096)*4;
 800d758:	4b26      	ldr	r3, [pc, #152]	@ (800d7f4 <Battery+0xb4>)
 800d75a:	881b      	ldrh	r3, [r3, #0]
 800d75c:	461a      	mov	r2, r3
 800d75e:	f640 43e4 	movw	r3, #3300	@ 0xce4
 800d762:	fb02 f303 	mul.w	r3, r2, r3
 800d766:	2b00      	cmp	r3, #0
 800d768:	da01      	bge.n	800d76e <Battery+0x2e>
 800d76a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 800d76e:	131b      	asrs	r3, r3, #12
 800d770:	b29b      	uxth	r3, r3
 800d772:	009b      	lsls	r3, r3, #2
 800d774:	80fb      	strh	r3, [r7, #6]
	printf("voltage %d \n",Voltage);
 800d776:	88fb      	ldrh	r3, [r7, #6]
 800d778:	4619      	mov	r1, r3
 800d77a:	481f      	ldr	r0, [pc, #124]	@ (800d7f8 <Battery+0xb8>)
 800d77c:	f00c fbf0 	bl	8019f60 <iprintf>
	Battery =(Voltage-3000)/12;
 800d780:	88fb      	ldrh	r3, [r7, #6]
 800d782:	f6a3 33b8 	subw	r3, r3, #3000	@ 0xbb8
 800d786:	4a1d      	ldr	r2, [pc, #116]	@ (800d7fc <Battery+0xbc>)
 800d788:	fb82 1203 	smull	r1, r2, r2, r3
 800d78c:	1052      	asrs	r2, r2, #1
 800d78e:	17db      	asrs	r3, r3, #31
 800d790:	1ad3      	subs	r3, r2, r3
 800d792:	80bb      	strh	r3, [r7, #4]
	//voltag(ADC_Data*0.80586080586080586080586080586081)*4;// adcx(3300/4096);
	Battery_Percentage=(uint8_t)(Battery);
 800d794:	88bb      	ldrh	r3, [r7, #4]
 800d796:	b2da      	uxtb	r2, r3
 800d798:	4b19      	ldr	r3, [pc, #100]	@ (800d800 <Battery+0xc0>)
 800d79a:	701a      	strb	r2, [r3, #0]
	printf("Battery_Percentage %d %d\n",Battery_Percentage,Battery);
 800d79c:	4b18      	ldr	r3, [pc, #96]	@ (800d800 <Battery+0xc0>)
 800d79e:	781b      	ldrb	r3, [r3, #0]
 800d7a0:	4619      	mov	r1, r3
 800d7a2:	88bb      	ldrh	r3, [r7, #4]
 800d7a4:	461a      	mov	r2, r3
 800d7a6:	4817      	ldr	r0, [pc, #92]	@ (800d804 <Battery+0xc4>)
 800d7a8:	f00c fbda 	bl	8019f60 <iprintf>
	HAL_ADC_Stop_DMA(&hadc1);
 800d7ac:	4810      	ldr	r0, [pc, #64]	@ (800d7f0 <Battery+0xb0>)
 800d7ae:	f002 fbc9 	bl	800ff44 <HAL_ADC_Stop_DMA>
	if(EOC_v ==1 && Voltage <3500)
 800d7b2:	4b15      	ldr	r3, [pc, #84]	@ (800d808 <Battery+0xc8>)
 800d7b4:	781b      	ldrb	r3, [r3, #0]
 800d7b6:	2b01      	cmp	r3, #1
 800d7b8:	d115      	bne.n	800d7e6 <Battery+0xa6>
 800d7ba:	88fb      	ldrh	r3, [r7, #6]
 800d7bc:	f640 52ab 	movw	r2, #3499	@ 0xdab
 800d7c0:	4293      	cmp	r3, r2
 800d7c2:	d810      	bhi.n	800d7e6 <Battery+0xa6>
	{
		HAL_GPIO_WritePin(GPIOA,TS_Pin,GPIO_PIN_RESET);
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d7ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d7ce:	f004 f9e9 	bl	8011ba4 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800d7d2:	2001      	movs	r0, #1
 800d7d4:	f7fb fa33 	bl	8008c3e <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA,TS_Pin,GPIO_PIN_SET);
 800d7d8:	2201      	movs	r2, #1
 800d7da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d7de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d7e2:	f004 f9df 	bl	8011ba4 <HAL_GPIO_WritePin>
	}

}
 800d7e6:	bf00      	nop
 800d7e8:	3708      	adds	r7, #8
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}
 800d7ee:	bf00      	nop
 800d7f0:	200002f8 	.word	0x200002f8
 800d7f4:	200008ec 	.word	0x200008ec
 800d7f8:	0801de98 	.word	0x0801de98
 800d7fc:	2aaaaaab 	.word	0x2aaaaaab
 800d800:	200008dc 	.word	0x200008dc
 800d804:	0801dea8 	.word	0x0801dea8
 800d808:	200004f1 	.word	0x200004f1

0800d80c <Analog_Temp>:
void Analog_Temp(void)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b082      	sub	sp, #8
 800d810:	af00      	add	r7, sp, #0
	//	  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
	//	  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_Temp,1);
	//ADC_Select_Temp();
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800d812:	217f      	movs	r1, #127	@ 0x7f
 800d814:	4829      	ldr	r0, [pc, #164]	@ (800d8bc <Analog_Temp+0xb0>)
 800d816:	f003 fa31 	bl	8010c7c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC_Data ,2);
 800d81a:	2202      	movs	r2, #2
 800d81c:	4928      	ldr	r1, [pc, #160]	@ (800d8c0 <Analog_Temp+0xb4>)
 800d81e:	4827      	ldr	r0, [pc, #156]	@ (800d8bc <Analog_Temp+0xb0>)
 800d820:	f002 fb0c 	bl	800fe3c <HAL_ADC_Start_DMA>
	printf("ADC_Temp:%d :%d\n",ADC_Data[0],ADC_Data[1]);
 800d824:	4b26      	ldr	r3, [pc, #152]	@ (800d8c0 <Analog_Temp+0xb4>)
 800d826:	881b      	ldrh	r3, [r3, #0]
 800d828:	4619      	mov	r1, r3
 800d82a:	4b25      	ldr	r3, [pc, #148]	@ (800d8c0 <Analog_Temp+0xb4>)
 800d82c:	885b      	ldrh	r3, [r3, #2]
 800d82e:	461a      	mov	r2, r3
 800d830:	4824      	ldr	r0, [pc, #144]	@ (800d8c4 <Analog_Temp+0xb8>)
 800d832:	f00c fb95 	bl	8019f60 <iprintf>
	float sample =((((ADC_Data[1] *3300)/4096)*122)/100);
 800d836:	4b22      	ldr	r3, [pc, #136]	@ (800d8c0 <Analog_Temp+0xb4>)
 800d838:	885b      	ldrh	r3, [r3, #2]
 800d83a:	461a      	mov	r2, r3
 800d83c:	f640 43e4 	movw	r3, #3300	@ 0xce4
 800d840:	fb02 f303 	mul.w	r3, r2, r3
 800d844:	2b00      	cmp	r3, #0
 800d846:	da01      	bge.n	800d84c <Analog_Temp+0x40>
 800d848:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 800d84c:	131b      	asrs	r3, r3, #12
 800d84e:	461a      	mov	r2, r3
 800d850:	237a      	movs	r3, #122	@ 0x7a
 800d852:	fb02 f303 	mul.w	r3, r2, r3
 800d856:	4a1c      	ldr	r2, [pc, #112]	@ (800d8c8 <Analog_Temp+0xbc>)
 800d858:	fb82 1203 	smull	r1, r2, r2, r3
 800d85c:	1152      	asrs	r2, r2, #5
 800d85e:	17db      	asrs	r3, r3, #31
 800d860:	1ad3      	subs	r3, r2, r3
 800d862:	ee07 3a90 	vmov	s15, r3
 800d866:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d86a:	edc7 7a01 	vstr	s15, [r7, #4]
	Dev_Temperature=(sample-400)/19.5;
 800d86e:	edd7 7a01 	vldr	s15, [r7, #4]
 800d872:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800d8cc <Analog_Temp+0xc0>
 800d876:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d87a:	ee17 0a90 	vmov	r0, s15
 800d87e:	f7f9 fe43 	bl	8007508 <__aeabi_f2d>
 800d882:	f04f 0200 	mov.w	r2, #0
 800d886:	4b12      	ldr	r3, [pc, #72]	@ (800d8d0 <Analog_Temp+0xc4>)
 800d888:	f7f9 ffc0 	bl	800780c <__aeabi_ddiv>
 800d88c:	4602      	mov	r2, r0
 800d88e:	460b      	mov	r3, r1
 800d890:	4610      	mov	r0, r2
 800d892:	4619      	mov	r1, r3
 800d894:	f7fa f968 	bl	8007b68 <__aeabi_d2uiz>
 800d898:	4603      	mov	r3, r0
 800d89a:	b2da      	uxtb	r2, r3
 800d89c:	4b0d      	ldr	r3, [pc, #52]	@ (800d8d4 <Analog_Temp+0xc8>)
 800d89e:	701a      	strb	r2, [r3, #0]
	printf("AnalogTemp %d \n",Dev_Temperature);
 800d8a0:	4b0c      	ldr	r3, [pc, #48]	@ (800d8d4 <Analog_Temp+0xc8>)
 800d8a2:	781b      	ldrb	r3, [r3, #0]
 800d8a4:	4619      	mov	r1, r3
 800d8a6:	480c      	ldr	r0, [pc, #48]	@ (800d8d8 <Analog_Temp+0xcc>)
 800d8a8:	f00c fb5a 	bl	8019f60 <iprintf>
	HAL_ADC_Stop_DMA(&hadc1);
 800d8ac:	4803      	ldr	r0, [pc, #12]	@ (800d8bc <Analog_Temp+0xb0>)
 800d8ae:	f002 fb49 	bl	800ff44 <HAL_ADC_Stop_DMA>
}
 800d8b2:	bf00      	nop
 800d8b4:	3708      	adds	r7, #8
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}
 800d8ba:	bf00      	nop
 800d8bc:	200002f8 	.word	0x200002f8
 800d8c0:	200008ec 	.word	0x200008ec
 800d8c4:	0801dec4 	.word	0x0801dec4
 800d8c8:	51eb851f 	.word	0x51eb851f
 800d8cc:	43c80000 	.word	0x43c80000
 800d8d0:	40338000 	.word	0x40338000
 800d8d4:	200008dd 	.word	0x200008dd
 800d8d8:	0801ded8 	.word	0x0801ded8

0800d8dc <Tx_log_Temp>:
void Tx_log_Temp(void)
{
 800d8dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d8e0:	b085      	sub	sp, #20
 800d8e2:	af00      	add	r7, sp, #0

	// uint8_t sim= *(uint8_t*) select;
	uint32_t add=Read_flash_address(1);
 800d8e4:	2001      	movs	r0, #1
 800d8e6:	f7fb fe61 	bl	80095ac <Read_flash_address>
 800d8ea:	60f8      	str	r0, [r7, #12]
	printf("current_add %d \n",add);
 800d8ec:	68f9      	ldr	r1, [r7, #12]
 800d8ee:	4836      	ldr	r0, [pc, #216]	@ (800d9c8 <Tx_log_Temp+0xec>)
 800d8f0:	f00c fb36 	bl	8019f60 <iprintf>


	uint32_t data=add-iteration_address1;
 800d8f4:	4b35      	ldr	r3, [pc, #212]	@ (800d9cc <Tx_log_Temp+0xf0>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	68fa      	ldr	r2, [r7, #12]
 800d8fa:	1ad3      	subs	r3, r2, r3
 800d8fc:	60bb      	str	r3, [r7, #8]
	printf("Trasmiting Wine Temperature Log Data \n");
 800d8fe:	4834      	ldr	r0, [pc, #208]	@ (800d9d0 <Tx_log_Temp+0xf4>)
 800d900:	f00c fb96 	bl	801a030 <puts>
	if(data>247)
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	2bf7      	cmp	r3, #247	@ 0xf7
 800d908:	d90f      	bls.n	800d92a <Tx_log_Temp+0x4e>
	{
		// uint8_t read_buffer[247];
		Quad_Read(NotifyCharData,iteration_address1,247);
 800d90a:	4b30      	ldr	r3, [pc, #192]	@ (800d9cc <Tx_log_Temp+0xf0>)
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	22f7      	movs	r2, #247	@ 0xf7
 800d910:	4619      	mov	r1, r3
 800d912:	4830      	ldr	r0, [pc, #192]	@ (800d9d4 <Tx_log_Temp+0xf8>)
 800d914:	f7fb fd2c 	bl	8009370 <Quad_Read>
		Custom_STM_App_Update_Char(CUSTOM_STM_L_T, (uint8_t *)NotifyCharData);
 800d918:	492e      	ldr	r1, [pc, #184]	@ (800d9d4 <Tx_log_Temp+0xf8>)
 800d91a:	2004      	movs	r0, #4
 800d91c:	f001 fa4c 	bl	800edb8 <Custom_STM_App_Update_Char>
		// sl_bt_gatt_server_notify_all(gattdb_Log,247,read_buffer);
		iteration_address1+=247;
 800d920:	4b2a      	ldr	r3, [pc, #168]	@ (800d9cc <Tx_log_Temp+0xf0>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	33f7      	adds	r3, #247	@ 0xf7
 800d926:	4a29      	ldr	r2, [pc, #164]	@ (800d9cc <Tx_log_Temp+0xf0>)
 800d928:	6013      	str	r3, [r2, #0]
	}
	if(data<=247 && data!=0)
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	2bf7      	cmp	r3, #247	@ 0xf7
 800d92e:	d83a      	bhi.n	800d9a6 <Tx_log_Temp+0xca>
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d037      	beq.n	800d9a6 <Tx_log_Temp+0xca>
	{
 800d936:	466b      	mov	r3, sp
 800d938:	461e      	mov	r6, r3
		uint8_t read_buffer[data];
 800d93a:	68b9      	ldr	r1, [r7, #8]
 800d93c:	460b      	mov	r3, r1
 800d93e:	3b01      	subs	r3, #1
 800d940:	607b      	str	r3, [r7, #4]
 800d942:	2300      	movs	r3, #0
 800d944:	4688      	mov	r8, r1
 800d946:	4699      	mov	r9, r3
 800d948:	f04f 0200 	mov.w	r2, #0
 800d94c:	f04f 0300 	mov.w	r3, #0
 800d950:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d954:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d958:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d95c:	2300      	movs	r3, #0
 800d95e:	460c      	mov	r4, r1
 800d960:	461d      	mov	r5, r3
 800d962:	f04f 0200 	mov.w	r2, #0
 800d966:	f04f 0300 	mov.w	r3, #0
 800d96a:	00eb      	lsls	r3, r5, #3
 800d96c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d970:	00e2      	lsls	r2, r4, #3
 800d972:	1dcb      	adds	r3, r1, #7
 800d974:	08db      	lsrs	r3, r3, #3
 800d976:	00db      	lsls	r3, r3, #3
 800d978:	ebad 0d03 	sub.w	sp, sp, r3
 800d97c:	466b      	mov	r3, sp
 800d97e:	3300      	adds	r3, #0
 800d980:	603b      	str	r3, [r7, #0]
		Quad_Read(read_buffer,iteration_address1,data);
 800d982:	4b12      	ldr	r3, [pc, #72]	@ (800d9cc <Tx_log_Temp+0xf0>)
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	68ba      	ldr	r2, [r7, #8]
 800d988:	4619      	mov	r1, r3
 800d98a:	6838      	ldr	r0, [r7, #0]
 800d98c:	f7fb fcf0 	bl	8009370 <Quad_Read>
		Custom_STM_App_Update_Char(  CUSTOM_STM_UV_L, (uint8_t *)NotifyCharData);
 800d990:	4910      	ldr	r1, [pc, #64]	@ (800d9d4 <Tx_log_Temp+0xf8>)
 800d992:	2007      	movs	r0, #7
 800d994:	f001 fa10 	bl	800edb8 <Custom_STM_App_Update_Char>
		//sl_bt_gatt_server_notify_all(gattdb_Log,data,read_buffer);
		iteration_address1+=data;
 800d998:	4b0c      	ldr	r3, [pc, #48]	@ (800d9cc <Tx_log_Temp+0xf0>)
 800d99a:	681a      	ldr	r2, [r3, #0]
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	4413      	add	r3, r2
 800d9a0:	4a0a      	ldr	r2, [pc, #40]	@ (800d9cc <Tx_log_Temp+0xf0>)
 800d9a2:	6013      	str	r3, [r2, #0]
 800d9a4:	46b5      	mov	sp, r6
	}
	if(data==0)
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d108      	bne.n	800d9be <Tx_log_Temp+0xe2>
	{
		iteration_address1=start_address_Temp;    // reset initial address
 800d9ac:	4b07      	ldr	r3, [pc, #28]	@ (800d9cc <Tx_log_Temp+0xf0>)
 800d9ae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800d9b2:	601a      	str	r2, [r3, #0]
		HW_TS_Stop(TEMP_LOG_ID);
 800d9b4:	4b08      	ldr	r3, [pc, #32]	@ (800d9d8 <Tx_log_Temp+0xfc>)
 800d9b6:	781b      	ldrb	r3, [r3, #0]
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f7fc fc5b 	bl	800a274 <HW_TS_Stop>
		// sl_simple_timer_stop(&Log_tx);
	}

}
 800d9be:	bf00      	nop
 800d9c0:	3714      	adds	r7, #20
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9c8:	0801dee8 	.word	0x0801dee8
 800d9cc:	2000004c 	.word	0x2000004c
 800d9d0:	0801defc 	.word	0x0801defc
 800d9d4:	200007a8 	.word	0x200007a8
 800d9d8:	200008e0 	.word	0x200008e0

0800d9dc <Tx_log_UV>:
void Tx_log_UV(void)
{
 800d9dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d9e0:	b085      	sub	sp, #20
 800d9e2:	af00      	add	r7, sp, #0
	uint32_t add=Read_flash_address(0);
 800d9e4:	2000      	movs	r0, #0
 800d9e6:	f7fb fde1 	bl	80095ac <Read_flash_address>
 800d9ea:	60f8      	str	r0, [r7, #12]
	uint32_t data=add-iteration_address2;
 800d9ec:	4b34      	ldr	r3, [pc, #208]	@ (800dac0 <Tx_log_UV+0xe4>)
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	68fa      	ldr	r2, [r7, #12]
 800d9f2:	1ad3      	subs	r3, r2, r3
 800d9f4:	60bb      	str	r3, [r7, #8]
	printf("Trasmiting UV Sensor Log Data \n");
 800d9f6:	4833      	ldr	r0, [pc, #204]	@ (800dac4 <Tx_log_UV+0xe8>)
 800d9f8:	f00c fb1a 	bl	801a030 <puts>
	if(data>247)
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	2bf7      	cmp	r3, #247	@ 0xf7
 800da00:	d90f      	bls.n	800da22 <Tx_log_UV+0x46>
	{
		//uint8_t read_buffer[247];
		Quad_Read(NotifyCharData,iteration_address2,247);
 800da02:	4b2f      	ldr	r3, [pc, #188]	@ (800dac0 <Tx_log_UV+0xe4>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	22f7      	movs	r2, #247	@ 0xf7
 800da08:	4619      	mov	r1, r3
 800da0a:	482f      	ldr	r0, [pc, #188]	@ (800dac8 <Tx_log_UV+0xec>)
 800da0c:	f7fb fcb0 	bl	8009370 <Quad_Read>
		Custom_STM_App_Update_Char(CUSTOM_STM_UV_L, (uint8_t *)NotifyCharData);
 800da10:	492d      	ldr	r1, [pc, #180]	@ (800dac8 <Tx_log_UV+0xec>)
 800da12:	2007      	movs	r0, #7
 800da14:	f001 f9d0 	bl	800edb8 <Custom_STM_App_Update_Char>
		iteration_address2 +=247;
 800da18:	4b29      	ldr	r3, [pc, #164]	@ (800dac0 <Tx_log_UV+0xe4>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	33f7      	adds	r3, #247	@ 0xf7
 800da1e:	4a28      	ldr	r2, [pc, #160]	@ (800dac0 <Tx_log_UV+0xe4>)
 800da20:	6013      	str	r3, [r2, #0]
	}
	if(data<=247 && data!=0)
 800da22:	68bb      	ldr	r3, [r7, #8]
 800da24:	2bf7      	cmp	r3, #247	@ 0xf7
 800da26:	d83a      	bhi.n	800da9e <Tx_log_UV+0xc2>
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d037      	beq.n	800da9e <Tx_log_UV+0xc2>
	{
 800da2e:	466b      	mov	r3, sp
 800da30:	461e      	mov	r6, r3
		uint8_t read_buffer[data];
 800da32:	68b9      	ldr	r1, [r7, #8]
 800da34:	460b      	mov	r3, r1
 800da36:	3b01      	subs	r3, #1
 800da38:	607b      	str	r3, [r7, #4]
 800da3a:	2300      	movs	r3, #0
 800da3c:	4688      	mov	r8, r1
 800da3e:	4699      	mov	r9, r3
 800da40:	f04f 0200 	mov.w	r2, #0
 800da44:	f04f 0300 	mov.w	r3, #0
 800da48:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800da4c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800da50:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800da54:	2300      	movs	r3, #0
 800da56:	460c      	mov	r4, r1
 800da58:	461d      	mov	r5, r3
 800da5a:	f04f 0200 	mov.w	r2, #0
 800da5e:	f04f 0300 	mov.w	r3, #0
 800da62:	00eb      	lsls	r3, r5, #3
 800da64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800da68:	00e2      	lsls	r2, r4, #3
 800da6a:	1dcb      	adds	r3, r1, #7
 800da6c:	08db      	lsrs	r3, r3, #3
 800da6e:	00db      	lsls	r3, r3, #3
 800da70:	ebad 0d03 	sub.w	sp, sp, r3
 800da74:	466b      	mov	r3, sp
 800da76:	3300      	adds	r3, #0
 800da78:	603b      	str	r3, [r7, #0]
		Quad_Read(read_buffer,iteration_address2,data);
 800da7a:	4b11      	ldr	r3, [pc, #68]	@ (800dac0 <Tx_log_UV+0xe4>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	68ba      	ldr	r2, [r7, #8]
 800da80:	4619      	mov	r1, r3
 800da82:	6838      	ldr	r0, [r7, #0]
 800da84:	f7fb fc74 	bl	8009370 <Quad_Read>
		Custom_STM_App_Update_Char(CUSTOM_STM_UV_L, (uint8_t *)NotifyCharData);
 800da88:	490f      	ldr	r1, [pc, #60]	@ (800dac8 <Tx_log_UV+0xec>)
 800da8a:	2007      	movs	r0, #7
 800da8c:	f001 f994 	bl	800edb8 <Custom_STM_App_Update_Char>
		iteration_address2+=data;
 800da90:	4b0b      	ldr	r3, [pc, #44]	@ (800dac0 <Tx_log_UV+0xe4>)
 800da92:	681a      	ldr	r2, [r3, #0]
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	4413      	add	r3, r2
 800da98:	4a09      	ldr	r2, [pc, #36]	@ (800dac0 <Tx_log_UV+0xe4>)
 800da9a:	6013      	str	r3, [r2, #0]
 800da9c:	46b5      	mov	sp, r6

	}
	if(data==0)
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d108      	bne.n	800dab6 <Tx_log_UV+0xda>
	{
		iteration_address2=start_address_UV;    // reset initial address
 800daa4:	4b06      	ldr	r3, [pc, #24]	@ (800dac0 <Tx_log_UV+0xe4>)
 800daa6:	f44f 227f 	mov.w	r2, #1044480	@ 0xff000
 800daaa:	601a      	str	r2, [r3, #0]
		HW_TS_Stop(UV_LOG_ID);
 800daac:	4b07      	ldr	r3, [pc, #28]	@ (800dacc <Tx_log_UV+0xf0>)
 800daae:	781b      	ldrb	r3, [r3, #0]
 800dab0:	4618      	mov	r0, r3
 800dab2:	f7fc fbdf 	bl	800a274 <HW_TS_Stop>
	}
}
 800dab6:	bf00      	nop
 800dab8:	3714      	adds	r7, #20
 800daba:	46bd      	mov	sp, r7
 800dabc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dac0:	20000050 	.word	0x20000050
 800dac4:	0801df24 	.word	0x0801df24
 800dac8:	200007a8 	.word	0x200007a8
 800dacc:	200008e1 	.word	0x200008e1

0800dad0 <Log_Tx_Init>:
static void Log_Tx_Init(void)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	af00      	add	r7, sp, #0
	UTIL_SEQ_RegTask(1 << CFG_LOG_TEMP_ID, UTIL_SEQ_RFU,Tx_log_Temp);
 800dad4:	4a0b      	ldr	r2, [pc, #44]	@ (800db04 <Log_Tx_Init+0x34>)
 800dad6:	2100      	movs	r1, #0
 800dad8:	2010      	movs	r0, #16
 800dada:	f00b f9af 	bl	8018e3c <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask(1 << CFG_LOG_UV_ID, UTIL_SEQ_RFU,Tx_log_UV);
 800dade:	4a0a      	ldr	r2, [pc, #40]	@ (800db08 <Log_Tx_Init+0x38>)
 800dae0:	2100      	movs	r1, #0
 800dae2:	2020      	movs	r0, #32
 800dae4:	f00b f9aa 	bl	8018e3c <UTIL_SEQ_RegTask>
	HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(TEMP_LOG_ID), hw_ts_Repeated,
 800dae8:	4b08      	ldr	r3, [pc, #32]	@ (800db0c <Log_Tx_Init+0x3c>)
 800daea:	2201      	movs	r2, #1
 800daec:	4908      	ldr	r1, [pc, #32]	@ (800db10 <Log_Tx_Init+0x40>)
 800daee:	2000      	movs	r0, #0
 800daf0:	f7fc fb46 	bl	800a180 <HW_TS_Create>
			Log_Temp_Callback); //CALL BACK
	HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(UV_LOG_ID), hw_ts_Repeated,
 800daf4:	4b07      	ldr	r3, [pc, #28]	@ (800db14 <Log_Tx_Init+0x44>)
 800daf6:	2201      	movs	r2, #1
 800daf8:	4907      	ldr	r1, [pc, #28]	@ (800db18 <Log_Tx_Init+0x48>)
 800dafa:	2000      	movs	r0, #0
 800dafc:	f7fc fb40 	bl	800a180 <HW_TS_Create>
			Log_UV_Callback);
}
 800db00:	bf00      	nop
 800db02:	bd80      	pop	{r7, pc}
 800db04:	0800d8dd 	.word	0x0800d8dd
 800db08:	0800d9dd 	.word	0x0800d9dd
 800db0c:	0800db1d 	.word	0x0800db1d
 800db10:	200008e0 	.word	0x200008e0
 800db14:	0800db59 	.word	0x0800db59
 800db18:	200008e1 	.word	0x200008e1

0800db1c <Log_Temp_Callback>:
static void Log_Temp_Callback(void)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b082      	sub	sp, #8
 800db20:	af00      	add	r7, sp, #0
	UTIL_SEQ_PauseTask(1<<CFG_TEMP_ID);
 800db22:	2004      	movs	r0, #4
 800db24:	f00b f9d8 	bl	8018ed8 <UTIL_SEQ_PauseTask>
	UTIL_SEQ_PauseTask(1<<CFG_UV_ID);
 800db28:	2008      	movs	r0, #8
 800db2a:	f00b f9d5 	bl	8018ed8 <UTIL_SEQ_PauseTask>
	UTIL_SEQ_PauseTask(1<<CFG_LOG_UV_ID);
 800db2e:	2020      	movs	r0, #32
 800db30:	f00b f9d2 	bl	8018ed8 <UTIL_SEQ_PauseTask>
	uint32_t status = UTIL_SEQ_IsPauseTask( 1<<CFG_LOG_TEMP_ID);
 800db34:	2010      	movs	r0, #16
 800db36:	f00b f9ef 	bl	8018f18 <UTIL_SEQ_IsPauseTask>
 800db3a:	6078      	str	r0, [r7, #4]
	if(status==1)
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2b01      	cmp	r3, #1
 800db40:	d102      	bne.n	800db48 <Log_Temp_Callback+0x2c>
	{
		UTIL_SEQ_ResumeTask(1<<CFG_LOG_TEMP_ID);
 800db42:	2010      	movs	r0, #16
 800db44:	f00b fa0e 	bl	8018f64 <UTIL_SEQ_ResumeTask>
	}
	UTIL_SEQ_SetTask(1<<CFG_LOG_TEMP_ID,CFG_SCH_PRIO_2);
 800db48:	2102      	movs	r1, #2
 800db4a:	2010      	movs	r0, #16
 800db4c:	f00b f998 	bl	8018e80 <UTIL_SEQ_SetTask>
}
 800db50:	bf00      	nop
 800db52:	3708      	adds	r7, #8
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}

0800db58 <Log_UV_Callback>:
static void Log_UV_Callback(void)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b082      	sub	sp, #8
 800db5c:	af00      	add	r7, sp, #0
	UTIL_SEQ_PauseTask(1<<CFG_TEMP_ID);
 800db5e:	2004      	movs	r0, #4
 800db60:	f00b f9ba 	bl	8018ed8 <UTIL_SEQ_PauseTask>
	UTIL_SEQ_PauseTask(1<<CFG_UV_ID);
 800db64:	2008      	movs	r0, #8
 800db66:	f00b f9b7 	bl	8018ed8 <UTIL_SEQ_PauseTask>
	UTIL_SEQ_PauseTask(1<<CFG_LOG_TEMP_ID);
 800db6a:	2010      	movs	r0, #16
 800db6c:	f00b f9b4 	bl	8018ed8 <UTIL_SEQ_PauseTask>
	uint32_t status = UTIL_SEQ_IsPauseTask( 1<<CFG_LOG_UV_ID);
 800db70:	2020      	movs	r0, #32
 800db72:	f00b f9d1 	bl	8018f18 <UTIL_SEQ_IsPauseTask>
 800db76:	6078      	str	r0, [r7, #4]
	if(status==1)
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2b01      	cmp	r3, #1
 800db7c:	d102      	bne.n	800db84 <Log_UV_Callback+0x2c>
	{
		UTIL_SEQ_ResumeTask(1<<CFG_LOG_UV_ID);
 800db7e:	2020      	movs	r0, #32
 800db80:	f00b f9f0 	bl	8018f64 <UTIL_SEQ_ResumeTask>
	}
	UTIL_SEQ_SetTask(1<<CFG_LOG_UV_ID,CFG_SCH_PRIO_2);
 800db84:	2102      	movs	r1, #2
 800db86:	2020      	movs	r0, #32
 800db88:	f00b f97a 	bl	8018e80 <UTIL_SEQ_SetTask>
}
 800db8c:	bf00      	nop
 800db8e:	3708      	adds	r7, #8
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}

0800db94 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b082      	sub	sp, #8
 800db98:	af00      	add	r7, sp, #0
 800db9a:	4603      	mov	r3, r0
 800db9c:	80fb      	strh	r3, [r7, #6]
	printf("interrupt \n");
 800db9e:	4823      	ldr	r0, [pc, #140]	@ (800dc2c <HAL_GPIO_EXTI_Callback+0x98>)
 800dba0:	f00c fa46 	bl	801a030 <puts>
	if(GPIO_Pin == PWR_Pin)
 800dba4:	88fb      	ldrh	r3, [r7, #6]
 800dba6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dbaa:	d10e      	bne.n	800dbca <HAL_GPIO_EXTI_Callback+0x36>
	{
		//printf("interrupt 1\n");
		//uint8_t PWR_GooD[1];
		PWR_GD=HAL_GPIO_ReadPin(GPIOC,PWR_Pin);
 800dbac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800dbb0:	481f      	ldr	r0, [pc, #124]	@ (800dc30 <HAL_GPIO_EXTI_Callback+0x9c>)
 800dbb2:	f003 ffdf 	bl	8011b74 <HAL_GPIO_ReadPin>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	461a      	mov	r2, r3
 800dbba:	4b1e      	ldr	r3, [pc, #120]	@ (800dc34 <HAL_GPIO_EXTI_Callback+0xa0>)
 800dbbc:	701a      	strb	r2, [r3, #0]
		printf("PWR_GD_interrupt %d \r\n",PWR_GD);
 800dbbe:	4b1d      	ldr	r3, [pc, #116]	@ (800dc34 <HAL_GPIO_EXTI_Callback+0xa0>)
 800dbc0:	781b      	ldrb	r3, [r3, #0]
 800dbc2:	4619      	mov	r1, r3
 800dbc4:	481c      	ldr	r0, [pc, #112]	@ (800dc38 <HAL_GPIO_EXTI_Callback+0xa4>)
 800dbc6:	f00c f9cb 	bl	8019f60 <iprintf>

	}
	if(GPIO_Pin == EOC_Pin)
 800dbca:	88fb      	ldrh	r3, [r7, #6]
 800dbcc:	2b40      	cmp	r3, #64	@ 0x40
 800dbce:	d121      	bne.n	800dc14 <HAL_GPIO_EXTI_Callback+0x80>
	{
		//printf("interrupt 2\n");
		//uint8_t EOC_v[1];
		EOC_v=HAL_GPIO_ReadPin(GPIOC,EOC_Pin);
 800dbd0:	2140      	movs	r1, #64	@ 0x40
 800dbd2:	4817      	ldr	r0, [pc, #92]	@ (800dc30 <HAL_GPIO_EXTI_Callback+0x9c>)
 800dbd4:	f003 ffce 	bl	8011b74 <HAL_GPIO_ReadPin>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	461a      	mov	r2, r3
 800dbdc:	4b17      	ldr	r3, [pc, #92]	@ (800dc3c <HAL_GPIO_EXTI_Callback+0xa8>)
 800dbde:	701a      	strb	r2, [r3, #0]
		PWR_GD=HAL_GPIO_ReadPin(GPIOC,PWR_Pin);
 800dbe0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800dbe4:	4812      	ldr	r0, [pc, #72]	@ (800dc30 <HAL_GPIO_EXTI_Callback+0x9c>)
 800dbe6:	f003 ffc5 	bl	8011b74 <HAL_GPIO_ReadPin>
 800dbea:	4603      	mov	r3, r0
 800dbec:	461a      	mov	r2, r3
 800dbee:	4b11      	ldr	r3, [pc, #68]	@ (800dc34 <HAL_GPIO_EXTI_Callback+0xa0>)
 800dbf0:	701a      	strb	r2, [r3, #0]


		printf("EOC_interrupt %d \r\n",EOC_v);
 800dbf2:	4b12      	ldr	r3, [pc, #72]	@ (800dc3c <HAL_GPIO_EXTI_Callback+0xa8>)
 800dbf4:	781b      	ldrb	r3, [r3, #0]
 800dbf6:	4619      	mov	r1, r3
 800dbf8:	4811      	ldr	r0, [pc, #68]	@ (800dc40 <HAL_GPIO_EXTI_Callback+0xac>)
 800dbfa:	f00c f9b1 	bl	8019f60 <iprintf>
		if(EOC_v==1)
 800dbfe:	4b0f      	ldr	r3, [pc, #60]	@ (800dc3c <HAL_GPIO_EXTI_Callback+0xa8>)
 800dc00:	781b      	ldrb	r3, [r3, #0]
 800dc02:	2b01      	cmp	r3, #1
 800dc04:	d106      	bne.n	800dc14 <HAL_GPIO_EXTI_Callback+0x80>
		{
			HW_TS_Start(Ts_TIMER_ID,Ts_UPDATE_PERIOD);
 800dc06:	4b0f      	ldr	r3, [pc, #60]	@ (800dc44 <HAL_GPIO_EXTI_Callback+0xb0>)
 800dc08:	781b      	ldrb	r3, [r3, #0]
 800dc0a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f7fc fbb4 	bl	800a37c <HW_TS_Start>
		}}
	HW_TS_Start(PWR_TIMER_ID,PWR_UPDATE_PERIOD);
 800dc14:	4b0c      	ldr	r3, [pc, #48]	@ (800dc48 <HAL_GPIO_EXTI_Callback+0xb4>)
 800dc16:	781b      	ldrb	r3, [r3, #0]
 800dc18:	f640 0101 	movw	r1, #2049	@ 0x801
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	f7fc fbad 	bl	800a37c <HW_TS_Start>
	//	Custom_STM_App_Update_Char(CUSTOM_STM_PWR_GD,(uint8_t*)&PWR_GD);
	//	Custom_STM_App_Update_Char(CUSTOM_STM_EC,(uint8_t*)&EOC_v);


}
 800dc22:	bf00      	nop
 800dc24:	3708      	adds	r7, #8
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}
 800dc2a:	bf00      	nop
 800dc2c:	0801df44 	.word	0x0801df44
 800dc30:	48000800 	.word	0x48000800
 800dc34:	200004f0 	.word	0x200004f0
 800dc38:	0801df50 	.word	0x0801df50
 800dc3c:	200004f1 	.word	0x200004f1
 800dc40:	0801df68 	.word	0x0801df68
 800dc44:	200008e2 	.word	0x200008e2
 800dc48:	200008e3 	.word	0x200008e3

0800dc4c <TS_Toggle>:


void TS_Toggle(void)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	af00      	add	r7, sp, #0
	UTIL_SEQ_RegTask( 1<< CFG_TASK_TS_ID, UTIL_SEQ_RFU,TS); //Get_Zmod4410); //register task
 800dc50:	4a06      	ldr	r2, [pc, #24]	@ (800dc6c <TS_Toggle+0x20>)
 800dc52:	2100      	movs	r1, #0
 800dc54:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800dc58:	f00b f8f0 	bl	8018e3c <UTIL_SEQ_RegTask>
	HW_TS_Create(CFG_TIM_PROC_ID_ISR,&(Ts_TIMER_ID), hw_ts_SingleShot, TS_CALL_BACK);
 800dc5c:	4b04      	ldr	r3, [pc, #16]	@ (800dc70 <TS_Toggle+0x24>)
 800dc5e:	2200      	movs	r2, #0
 800dc60:	4904      	ldr	r1, [pc, #16]	@ (800dc74 <TS_Toggle+0x28>)
 800dc62:	2000      	movs	r0, #0
 800dc64:	f7fc fa8c 	bl	800a180 <HW_TS_Create>
}
 800dc68:	bf00      	nop
 800dc6a:	bd80      	pop	{r7, pc}
 800dc6c:	0800dc8d 	.word	0x0800dc8d
 800dc70:	0800dc79 	.word	0x0800dc79
 800dc74:	200008e2 	.word	0x200008e2

0800dc78 <TS_CALL_BACK>:
void TS_CALL_BACK(void)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask(1<<CFG_TASK_TS_ID,CFG_SCH_PRIO_0);
 800dc7c:	2100      	movs	r1, #0
 800dc7e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800dc82:	f00b f8fd 	bl	8018e80 <UTIL_SEQ_SetTask>
}
 800dc86:	bf00      	nop
 800dc88:	bd80      	pop	{r7, pc}
	...

0800dc8c <TS>:
void TS(void)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,TS_Pin,GPIO_PIN_RESET);
 800dc90:	2200      	movs	r2, #0
 800dc92:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800dc96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800dc9a:	f003 ff83 	bl	8011ba4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800dc9e:	2001      	movs	r0, #1
 800dca0:	f7fa ffcd 	bl	8008c3e <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA,TS_Pin,GPIO_PIN_SET);
 800dca4:	2201      	movs	r2, #1
 800dca6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800dcaa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800dcae:	f003 ff79 	bl	8011ba4 <HAL_GPIO_WritePin>
	Custom_STM_App_Update_Char(CUSTOM_STM_PWR_GD,(uint8_t*)&PWR_GD);
 800dcb2:	4908      	ldr	r1, [pc, #32]	@ (800dcd4 <TS+0x48>)
 800dcb4:	200e      	movs	r0, #14
 800dcb6:	f001 f87f 	bl	800edb8 <Custom_STM_App_Update_Char>
	Custom_STM_App_Update_Char(CUSTOM_STM_EC,(uint8_t*)&EOC_v);
 800dcba:	4907      	ldr	r1, [pc, #28]	@ (800dcd8 <TS+0x4c>)
 800dcbc:	200d      	movs	r0, #13
 800dcbe:	f001 f87b 	bl	800edb8 <Custom_STM_App_Update_Char>
	printf("EO_v_interrupt %d \r\n",EOC_v);
 800dcc2:	4b05      	ldr	r3, [pc, #20]	@ (800dcd8 <TS+0x4c>)
 800dcc4:	781b      	ldrb	r3, [r3, #0]
 800dcc6:	4619      	mov	r1, r3
 800dcc8:	4804      	ldr	r0, [pc, #16]	@ (800dcdc <TS+0x50>)
 800dcca:	f00c f949 	bl	8019f60 <iprintf>
}
 800dcce:	bf00      	nop
 800dcd0:	bd80      	pop	{r7, pc}
 800dcd2:	bf00      	nop
 800dcd4:	200004f0 	.word	0x200004f0
 800dcd8:	200004f1 	.word	0x200004f1
 800dcdc:	0801df7c 	.word	0x0801df7c

0800dce0 <PWR_EOC>:
void PWR_EOC(void)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	af00      	add	r7, sp, #0
	UTIL_SEQ_RegTask( 1<<CFG_PWR_EC_ID, UTIL_SEQ_RFU,TS); //Get_Zmod4410); //register task
 800dce4:	4a06      	ldr	r2, [pc, #24]	@ (800dd00 <PWR_EOC+0x20>)
 800dce6:	2100      	movs	r1, #0
 800dce8:	2040      	movs	r0, #64	@ 0x40
 800dcea:	f00b f8a7 	bl	8018e3c <UTIL_SEQ_RegTask>
	HW_TS_Create(CFG_TIM_PROC_ID_ISR,&(PWR_TIMER_ID), hw_ts_SingleShot, PWR_EOC_CALLBACK);
 800dcee:	4b05      	ldr	r3, [pc, #20]	@ (800dd04 <PWR_EOC+0x24>)
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	4905      	ldr	r1, [pc, #20]	@ (800dd08 <PWR_EOC+0x28>)
 800dcf4:	2000      	movs	r0, #0
 800dcf6:	f7fc fa43 	bl	800a180 <HW_TS_Create>
}
 800dcfa:	bf00      	nop
 800dcfc:	bd80      	pop	{r7, pc}
 800dcfe:	bf00      	nop
 800dd00:	0800dc8d 	.word	0x0800dc8d
 800dd04:	0800dd0d 	.word	0x0800dd0d
 800dd08:	200008e3 	.word	0x200008e3

0800dd0c <PWR_EOC_CALLBACK>:
void PWR_EOC_CALLBACK(void)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask(1<<CFG_PWR_EC_ID,CFG_SCH_PRIO_0);
 800dd10:	2100      	movs	r1, #0
 800dd12:	2040      	movs	r0, #64	@ 0x40
 800dd14:	f00b f8b4 	bl	8018e80 <UTIL_SEQ_SetTask>
}
 800dd18:	bf00      	nop
 800dd1a:	bd80      	pop	{r7, pc}

0800dd1c <Init_mode>:
	Custom_STM_App_Update_Char(CUSTOM_STM_PWR_GD,(uint8_t*)&PWR_GD);
	Custom_STM_App_Update_Char(CUSTOM_STM_EC,(uint8_t*)&EOC_v);
}

void Init_mode(void)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b082      	sub	sp, #8
 800dd20:	af00      	add	r7, sp, #0
	int16_t temp_value;
	Quad_Read(opmode,mode_address_map,4);
 800dd22:	2204      	movs	r2, #4
 800dd24:	2100      	movs	r1, #0
 800dd26:	482a      	ldr	r0, [pc, #168]	@ (800ddd0 <Init_mode+0xb4>)
 800dd28:	f7fb fb22 	bl	8009370 <Quad_Read>
	temp_value = opmode[3]<<8 | opmode[2];
 800dd2c:	4b28      	ldr	r3, [pc, #160]	@ (800ddd0 <Init_mode+0xb4>)
 800dd2e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800dd32:	021b      	lsls	r3, r3, #8
 800dd34:	b21b      	sxth	r3, r3
 800dd36:	4a26      	ldr	r2, [pc, #152]	@ (800ddd0 <Init_mode+0xb4>)
 800dd38:	f992 2002 	ldrsb.w	r2, [r2, #2]
 800dd3c:	4313      	orrs	r3, r2
 800dd3e:	80fb      	strh	r3, [r7, #6]
	if(opmode[0]==0x01)
 800dd40:	4b23      	ldr	r3, [pc, #140]	@ (800ddd0 <Init_mode+0xb4>)
 800dd42:	f993 3000 	ldrsb.w	r3, [r3]
 800dd46:	2b01      	cmp	r3, #1
 800dd48:	d12f      	bne.n	800ddaa <Init_mode+0x8e>
	{
		mode=opmode[0];
 800dd4a:	4b21      	ldr	r3, [pc, #132]	@ (800ddd0 <Init_mode+0xb4>)
 800dd4c:	f993 3000 	ldrsb.w	r3, [r3]
 800dd50:	b2da      	uxtb	r2, r3
 800dd52:	4b20      	ldr	r3, [pc, #128]	@ (800ddd4 <Init_mode+0xb8>)
 800dd54:	701a      	strb	r2, [r3, #0]
		Interval = (opmode[1]==0xff) ? Interval:opmode[1];
 800dd56:	4b1e      	ldr	r3, [pc, #120]	@ (800ddd0 <Init_mode+0xb4>)
 800dd58:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800dd5c:	b2da      	uxtb	r2, r3
 800dd5e:	4b1e      	ldr	r3, [pc, #120]	@ (800ddd8 <Init_mode+0xbc>)
 800dd60:	701a      	strb	r2, [r3, #0]
		Desire_temp = (temp_value < -20 || temp_value > 85) ? Desire_temp : temp_value;
 800dd62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dd66:	f113 0f14 	cmn.w	r3, #20
 800dd6a:	db03      	blt.n	800dd74 <Init_mode+0x58>
 800dd6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dd70:	2b55      	cmp	r3, #85	@ 0x55
 800dd72:	dd03      	ble.n	800dd7c <Init_mode+0x60>
 800dd74:	4b19      	ldr	r3, [pc, #100]	@ (800dddc <Init_mode+0xc0>)
 800dd76:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd7a:	e001      	b.n	800dd80 <Init_mode+0x64>
 800dd7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dd80:	4a16      	ldr	r2, [pc, #88]	@ (800dddc <Init_mode+0xc0>)
 800dd82:	8013      	strh	r3, [r2, #0]
		Temp_upper_limit=Desire_temp+1;
 800dd84:	4b15      	ldr	r3, [pc, #84]	@ (800dddc <Init_mode+0xc0>)
 800dd86:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd8a:	b29b      	uxth	r3, r3
 800dd8c:	3301      	adds	r3, #1
 800dd8e:	b29b      	uxth	r3, r3
 800dd90:	b21a      	sxth	r2, r3
 800dd92:	4b13      	ldr	r3, [pc, #76]	@ (800dde0 <Init_mode+0xc4>)
 800dd94:	801a      	strh	r2, [r3, #0]
		Temp_lower_limit=Desire_temp-1;
 800dd96:	4b11      	ldr	r3, [pc, #68]	@ (800dddc <Init_mode+0xc0>)
 800dd98:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd9c:	b29b      	uxth	r3, r3
 800dd9e:	3b01      	subs	r3, #1
 800dda0:	b29b      	uxth	r3, r3
 800dda2:	b21a      	sxth	r2, r3
 800dda4:	4b0f      	ldr	r3, [pc, #60]	@ (800dde4 <Init_mode+0xc8>)
 800dda6:	801a      	strh	r2, [r3, #0]
 800dda8:	e002      	b.n	800ddb0 <Init_mode+0x94>
	}
	else
	{
		mode=0;
 800ddaa:	4b0a      	ldr	r3, [pc, #40]	@ (800ddd4 <Init_mode+0xb8>)
 800ddac:	2200      	movs	r2, #0
 800ddae:	701a      	strb	r2, [r3, #0]
	}
printf(" mode:%d, int:%d,Desire_temp:%d \n",mode,Interval,Desire_temp);
 800ddb0:	4b08      	ldr	r3, [pc, #32]	@ (800ddd4 <Init_mode+0xb8>)
 800ddb2:	781b      	ldrb	r3, [r3, #0]
 800ddb4:	4619      	mov	r1, r3
 800ddb6:	4b08      	ldr	r3, [pc, #32]	@ (800ddd8 <Init_mode+0xbc>)
 800ddb8:	781b      	ldrb	r3, [r3, #0]
 800ddba:	461a      	mov	r2, r3
 800ddbc:	4b07      	ldr	r3, [pc, #28]	@ (800dddc <Init_mode+0xc0>)
 800ddbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ddc2:	4809      	ldr	r0, [pc, #36]	@ (800dde8 <Init_mode+0xcc>)
 800ddc4:	f00c f8cc 	bl	8019f60 <iprintf>
}
 800ddc8:	bf00      	nop
 800ddca:	3708      	adds	r7, #8
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bd80      	pop	{r7, pc}
 800ddd0:	200008b4 	.word	0x200008b4
 800ddd4:	200008b0 	.word	0x200008b0
 800ddd8:	20000045 	.word	0x20000045
 800dddc:	2000004a 	.word	0x2000004a
 800dde0:	20000048 	.word	0x20000048
 800dde4:	20000046 	.word	0x20000046
 800dde8:	0801df94 	.word	0x0801df94

0800ddec <Update_mode>:

void Update_mode(void)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b082      	sub	sp, #8
 800ddf0:	af02      	add	r7, sp, #8
	opmode[0]=mode;
 800ddf2:	4b23      	ldr	r3, [pc, #140]	@ (800de80 <Update_mode+0x94>)
 800ddf4:	781b      	ldrb	r3, [r3, #0]
 800ddf6:	b25a      	sxtb	r2, r3
 800ddf8:	4b22      	ldr	r3, [pc, #136]	@ (800de84 <Update_mode+0x98>)
 800ddfa:	701a      	strb	r2, [r3, #0]
	opmode[1]=Interval;
 800ddfc:	4b22      	ldr	r3, [pc, #136]	@ (800de88 <Update_mode+0x9c>)
 800ddfe:	781b      	ldrb	r3, [r3, #0]
 800de00:	b25a      	sxtb	r2, r3
 800de02:	4b20      	ldr	r3, [pc, #128]	@ (800de84 <Update_mode+0x98>)
 800de04:	705a      	strb	r2, [r3, #1]
	memcpy(opmode+2,&Desire_temp,2);
 800de06:	4a21      	ldr	r2, [pc, #132]	@ (800de8c <Update_mode+0xa0>)
 800de08:	4b21      	ldr	r3, [pc, #132]	@ (800de90 <Update_mode+0xa4>)
 800de0a:	881b      	ldrh	r3, [r3, #0]
 800de0c:	8013      	strh	r3, [r2, #0]
	QSPI_Sector_Erase(mode_address_map);
 800de0e:	2000      	movs	r0, #0
 800de10:	f7fb fb6e 	bl	80094f0 <QSPI_Sector_Erase>
	Quad_Write(opmode,mode_address_map,4);
 800de14:	2204      	movs	r2, #4
 800de16:	2100      	movs	r1, #0
 800de18:	481a      	ldr	r0, [pc, #104]	@ (800de84 <Update_mode+0x98>)
 800de1a:	f7fb fb0d 	bl	8009438 <Quad_Write>
	printf("data %d %d %d %d \n",opmode[0],opmode[1],opmode[2],opmode[3]);
 800de1e:	4b19      	ldr	r3, [pc, #100]	@ (800de84 <Update_mode+0x98>)
 800de20:	f993 3000 	ldrsb.w	r3, [r3]
 800de24:	4619      	mov	r1, r3
 800de26:	4b17      	ldr	r3, [pc, #92]	@ (800de84 <Update_mode+0x98>)
 800de28:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800de2c:	461a      	mov	r2, r3
 800de2e:	4b15      	ldr	r3, [pc, #84]	@ (800de84 <Update_mode+0x98>)
 800de30:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800de34:	4618      	mov	r0, r3
 800de36:	4b13      	ldr	r3, [pc, #76]	@ (800de84 <Update_mode+0x98>)
 800de38:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800de3c:	9300      	str	r3, [sp, #0]
 800de3e:	4603      	mov	r3, r0
 800de40:	4814      	ldr	r0, [pc, #80]	@ (800de94 <Update_mode+0xa8>)
 800de42:	f00c f88d 	bl	8019f60 <iprintf>
	Quad_Read(opmode,mode_address_map,4);
 800de46:	2204      	movs	r2, #4
 800de48:	2100      	movs	r1, #0
 800de4a:	480e      	ldr	r0, [pc, #56]	@ (800de84 <Update_mode+0x98>)
 800de4c:	f7fb fa90 	bl	8009370 <Quad_Read>
	printf("data %d %d %d %d \n",opmode[0],opmode[1],opmode[2],opmode[3]);
 800de50:	4b0c      	ldr	r3, [pc, #48]	@ (800de84 <Update_mode+0x98>)
 800de52:	f993 3000 	ldrsb.w	r3, [r3]
 800de56:	4619      	mov	r1, r3
 800de58:	4b0a      	ldr	r3, [pc, #40]	@ (800de84 <Update_mode+0x98>)
 800de5a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800de5e:	461a      	mov	r2, r3
 800de60:	4b08      	ldr	r3, [pc, #32]	@ (800de84 <Update_mode+0x98>)
 800de62:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800de66:	4618      	mov	r0, r3
 800de68:	4b06      	ldr	r3, [pc, #24]	@ (800de84 <Update_mode+0x98>)
 800de6a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800de6e:	9300      	str	r3, [sp, #0]
 800de70:	4603      	mov	r3, r0
 800de72:	4808      	ldr	r0, [pc, #32]	@ (800de94 <Update_mode+0xa8>)
 800de74:	f00c f874 	bl	8019f60 <iprintf>

}
 800de78:	bf00      	nop
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}
 800de7e:	bf00      	nop
 800de80:	200008b0 	.word	0x200008b0
 800de84:	200008b4 	.word	0x200008b4
 800de88:	20000045 	.word	0x20000045
 800de8c:	200008b6 	.word	0x200008b6
 800de90:	2000004a 	.word	0x2000004a
 800de94:	0801dfb8 	.word	0x0801dfb8

0800de98 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b08c      	sub	sp, #48	@ 0x30
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800dea0:	2300      	movs	r3, #0
 800dea2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	3301      	adds	r3, #1
 800deaa:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 800deac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deae:	781b      	ldrb	r3, [r3, #0]
 800deb0:	2bff      	cmp	r3, #255	@ 0xff
 800deb2:	f040 829c 	bne.w	800e3ee <Custom_STM_Event_Handler+0x556>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800deb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deb8:	3302      	adds	r3, #2
 800deba:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 800debc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800debe:	881b      	ldrh	r3, [r3, #0]
 800dec0:	b29b      	uxth	r3, r3
 800dec2:	f640 4214 	movw	r2, #3092	@ 0xc14
 800dec6:	4293      	cmp	r3, r2
 800dec8:	f000 81b8 	beq.w	800e23c <Custom_STM_Event_Handler+0x3a4>
 800decc:	f640 4214 	movw	r2, #3092	@ 0xc14
 800ded0:	4293      	cmp	r3, r2
 800ded2:	f300 8286 	bgt.w	800e3e2 <Custom_STM_Event_Handler+0x54a>
 800ded6:	f640 4201 	movw	r2, #3073	@ 0xc01
 800deda:	4293      	cmp	r3, r2
 800dedc:	d003      	beq.n	800dee6 <Custom_STM_Event_Handler+0x4e>
 800dede:	f640 4213 	movw	r2, #3091	@ 0xc13
 800dee2:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 800dee4:	e282      	b.n	800e3ec <Custom_STM_Event_Handler+0x554>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800dee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dee8:	3302      	adds	r3, #2
 800deea:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomIr_THdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800deec:	69fb      	ldr	r3, [r7, #28]
 800deee:	885b      	ldrh	r3, [r3, #2]
 800def0:	b29b      	uxth	r3, r3
 800def2:	461a      	mov	r2, r3
 800def4:	4ba5      	ldr	r3, [pc, #660]	@ (800e18c <Custom_STM_Event_Handler+0x2f4>)
 800def6:	88db      	ldrh	r3, [r3, #6]
 800def8:	3302      	adds	r3, #2
 800defa:	429a      	cmp	r2, r3
 800defc:	d119      	bne.n	800df32 <Custom_STM_Event_Handler+0x9a>
            return_value = SVCCTL_EvtAckFlowEnable;
 800defe:	2301      	movs	r3, #1
 800df00:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            switch (attribute_modified->Attr_Data[0])
 800df04:	69fb      	ldr	r3, [r7, #28]
 800df06:	7a1b      	ldrb	r3, [r3, #8]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d002      	beq.n	800df12 <Custom_STM_Event_Handler+0x7a>
 800df0c:	2b01      	cmp	r3, #1
 800df0e:	d008      	beq.n	800df22 <Custom_STM_Event_Handler+0x8a>
              break;
 800df10:	e193      	b.n	800e23a <Custom_STM_Event_Handler+0x3a2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_IR_T_NOTIFY_DISABLED_EVT;
 800df12:	2303      	movs	r3, #3
 800df14:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800df16:	f107 030c 	add.w	r3, r7, #12
 800df1a:	4618      	mov	r0, r3
 800df1c:	f7fe fe6a 	bl	800cbf4 <Custom_STM_App_Notification>
                break;
 800df20:	e18b      	b.n	800e23a <Custom_STM_Event_Handler+0x3a2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_IR_T_NOTIFY_ENABLED_EVT;
 800df22:	2302      	movs	r3, #2
 800df24:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800df26:	f107 030c 	add.w	r3, r7, #12
 800df2a:	4618      	mov	r0, r3
 800df2c:	f7fe fe62 	bl	800cbf4 <Custom_STM_App_Notification>
                break;
 800df30:	e183      	b.n	800e23a <Custom_STM_Event_Handler+0x3a2>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomL_THdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800df32:	69fb      	ldr	r3, [r7, #28]
 800df34:	885b      	ldrh	r3, [r3, #2]
 800df36:	b29b      	uxth	r3, r3
 800df38:	461a      	mov	r2, r3
 800df3a:	4b94      	ldr	r3, [pc, #592]	@ (800e18c <Custom_STM_Event_Handler+0x2f4>)
 800df3c:	899b      	ldrh	r3, [r3, #12]
 800df3e:	3302      	adds	r3, #2
 800df40:	429a      	cmp	r2, r3
 800df42:	d119      	bne.n	800df78 <Custom_STM_Event_Handler+0xe0>
            return_value = SVCCTL_EvtAckFlowEnable;
 800df44:	2301      	movs	r3, #1
 800df46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            switch (attribute_modified->Attr_Data[0])
 800df4a:	69fb      	ldr	r3, [r7, #28]
 800df4c:	7a1b      	ldrb	r3, [r3, #8]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d002      	beq.n	800df58 <Custom_STM_Event_Handler+0xc0>
 800df52:	2b01      	cmp	r3, #1
 800df54:	d008      	beq.n	800df68 <Custom_STM_Event_Handler+0xd0>
              break;
 800df56:	e170      	b.n	800e23a <Custom_STM_Event_Handler+0x3a2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_L_T_NOTIFY_DISABLED_EVT;
 800df58:	2307      	movs	r3, #7
 800df5a:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800df5c:	f107 030c 	add.w	r3, r7, #12
 800df60:	4618      	mov	r0, r3
 800df62:	f7fe fe47 	bl	800cbf4 <Custom_STM_App_Notification>
                break;
 800df66:	e168      	b.n	800e23a <Custom_STM_Event_Handler+0x3a2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_L_T_NOTIFY_ENABLED_EVT;
 800df68:	2306      	movs	r3, #6
 800df6a:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800df6c:	f107 030c 	add.w	r3, r7, #12
 800df70:	4618      	mov	r0, r3
 800df72:	f7fe fe3f 	bl	800cbf4 <Custom_STM_App_Notification>
                break;
 800df76:	e160      	b.n	800e23a <Custom_STM_Event_Handler+0x3a2>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomR_NHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800df78:	69fb      	ldr	r3, [r7, #28]
 800df7a:	885b      	ldrh	r3, [r3, #2]
 800df7c:	b29b      	uxth	r3, r3
 800df7e:	461a      	mov	r2, r3
 800df80:	4b82      	ldr	r3, [pc, #520]	@ (800e18c <Custom_STM_Event_Handler+0x2f4>)
 800df82:	89db      	ldrh	r3, [r3, #14]
 800df84:	3302      	adds	r3, #2
 800df86:	429a      	cmp	r2, r3
 800df88:	d119      	bne.n	800dfbe <Custom_STM_Event_Handler+0x126>
            return_value = SVCCTL_EvtAckFlowEnable;
 800df8a:	2301      	movs	r3, #1
 800df8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            switch (attribute_modified->Attr_Data[0])
 800df90:	69fb      	ldr	r3, [r7, #28]
 800df92:	7a1b      	ldrb	r3, [r3, #8]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d002      	beq.n	800df9e <Custom_STM_Event_Handler+0x106>
 800df98:	2b01      	cmp	r3, #1
 800df9a:	d008      	beq.n	800dfae <Custom_STM_Event_Handler+0x116>
              break;
 800df9c:	e14d      	b.n	800e23a <Custom_STM_Event_Handler+0x3a2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_R_N_NOTIFY_DISABLED_EVT;
 800df9e:	2309      	movs	r3, #9
 800dfa0:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800dfa2:	f107 030c 	add.w	r3, r7, #12
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f7fe fe24 	bl	800cbf4 <Custom_STM_App_Notification>
                break;
 800dfac:	e145      	b.n	800e23a <Custom_STM_Event_Handler+0x3a2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_R_N_NOTIFY_ENABLED_EVT;
 800dfae:	2308      	movs	r3, #8
 800dfb0:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800dfb2:	f107 030c 	add.w	r3, r7, #12
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	f7fe fe1c 	bl	800cbf4 <Custom_STM_App_Notification>
                break;
 800dfbc:	e13d      	b.n	800e23a <Custom_STM_Event_Handler+0x3a2>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomUv_VHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800dfbe:	69fb      	ldr	r3, [r7, #28]
 800dfc0:	885b      	ldrh	r3, [r3, #2]
 800dfc2:	b29b      	uxth	r3, r3
 800dfc4:	461a      	mov	r2, r3
 800dfc6:	4b71      	ldr	r3, [pc, #452]	@ (800e18c <Custom_STM_Event_Handler+0x2f4>)
 800dfc8:	8a5b      	ldrh	r3, [r3, #18]
 800dfca:	3302      	adds	r3, #2
 800dfcc:	429a      	cmp	r2, r3
 800dfce:	d119      	bne.n	800e004 <Custom_STM_Event_Handler+0x16c>
            return_value = SVCCTL_EvtAckFlowEnable;
 800dfd0:	2301      	movs	r3, #1
 800dfd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            switch (attribute_modified->Attr_Data[0])
 800dfd6:	69fb      	ldr	r3, [r7, #28]
 800dfd8:	7a1b      	ldrb	r3, [r3, #8]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d002      	beq.n	800dfe4 <Custom_STM_Event_Handler+0x14c>
 800dfde:	2b01      	cmp	r3, #1
 800dfe0:	d008      	beq.n	800dff4 <Custom_STM_Event_Handler+0x15c>
              break;
 800dfe2:	e12a      	b.n	800e23a <Custom_STM_Event_Handler+0x3a2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_UV_V_NOTIFY_DISABLED_EVT;
 800dfe4:	230b      	movs	r3, #11
 800dfe6:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800dfe8:	f107 030c 	add.w	r3, r7, #12
 800dfec:	4618      	mov	r0, r3
 800dfee:	f7fe fe01 	bl	800cbf4 <Custom_STM_App_Notification>
                break;
 800dff2:	e122      	b.n	800e23a <Custom_STM_Event_Handler+0x3a2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_UV_V_NOTIFY_ENABLED_EVT;
 800dff4:	230a      	movs	r3, #10
 800dff6:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800dff8:	f107 030c 	add.w	r3, r7, #12
 800dffc:	4618      	mov	r0, r3
 800dffe:	f7fe fdf9 	bl	800cbf4 <Custom_STM_App_Notification>
                break;
 800e002:	e11a      	b.n	800e23a <Custom_STM_Event_Handler+0x3a2>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomUv_LHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800e004:	69fb      	ldr	r3, [r7, #28]
 800e006:	885b      	ldrh	r3, [r3, #2]
 800e008:	b29b      	uxth	r3, r3
 800e00a:	461a      	mov	r2, r3
 800e00c:	4b5f      	ldr	r3, [pc, #380]	@ (800e18c <Custom_STM_Event_Handler+0x2f4>)
 800e00e:	8a9b      	ldrh	r3, [r3, #20]
 800e010:	3302      	adds	r3, #2
 800e012:	429a      	cmp	r2, r3
 800e014:	d119      	bne.n	800e04a <Custom_STM_Event_Handler+0x1b2>
            return_value = SVCCTL_EvtAckFlowEnable;
 800e016:	2301      	movs	r3, #1
 800e018:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            switch (attribute_modified->Attr_Data[0])
 800e01c:	69fb      	ldr	r3, [r7, #28]
 800e01e:	7a1b      	ldrb	r3, [r3, #8]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d002      	beq.n	800e02a <Custom_STM_Event_Handler+0x192>
 800e024:	2b01      	cmp	r3, #1
 800e026:	d008      	beq.n	800e03a <Custom_STM_Event_Handler+0x1a2>
              break;
 800e028:	e107      	b.n	800e23a <Custom_STM_Event_Handler+0x3a2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_UV_L_NOTIFY_DISABLED_EVT;
 800e02a:	230d      	movs	r3, #13
 800e02c:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800e02e:	f107 030c 	add.w	r3, r7, #12
 800e032:	4618      	mov	r0, r3
 800e034:	f7fe fdde 	bl	800cbf4 <Custom_STM_App_Notification>
                break;
 800e038:	e0ff      	b.n	800e23a <Custom_STM_Event_Handler+0x3a2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_UV_L_NOTIFY_ENABLED_EVT;
 800e03a:	230c      	movs	r3, #12
 800e03c:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800e03e:	f107 030c 	add.w	r3, r7, #12
 800e042:	4618      	mov	r0, r3
 800e044:	f7fe fdd6 	bl	800cbf4 <Custom_STM_App_Notification>
                break;
 800e048:	e0f7      	b.n	800e23a <Custom_STM_Event_Handler+0x3a2>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomAmbi_TempHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800e04a:	69fb      	ldr	r3, [r7, #28]
 800e04c:	885b      	ldrh	r3, [r3, #2]
 800e04e:	b29b      	uxth	r3, r3
 800e050:	461a      	mov	r2, r3
 800e052:	4b4e      	ldr	r3, [pc, #312]	@ (800e18c <Custom_STM_Event_Handler+0x2f4>)
 800e054:	8b1b      	ldrh	r3, [r3, #24]
 800e056:	3302      	adds	r3, #2
 800e058:	429a      	cmp	r2, r3
 800e05a:	d119      	bne.n	800e090 <Custom_STM_Event_Handler+0x1f8>
            return_value = SVCCTL_EvtAckFlowEnable;
 800e05c:	2301      	movs	r3, #1
 800e05e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            switch (attribute_modified->Attr_Data[0])
 800e062:	69fb      	ldr	r3, [r7, #28]
 800e064:	7a1b      	ldrb	r3, [r3, #8]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d002      	beq.n	800e070 <Custom_STM_Event_Handler+0x1d8>
 800e06a:	2b01      	cmp	r3, #1
 800e06c:	d008      	beq.n	800e080 <Custom_STM_Event_Handler+0x1e8>
              break;
 800e06e:	e0e4      	b.n	800e23a <Custom_STM_Event_Handler+0x3a2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_AMBI_TEMP_NOTIFY_DISABLED_EVT;
 800e070:	2310      	movs	r3, #16
 800e072:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800e074:	f107 030c 	add.w	r3, r7, #12
 800e078:	4618      	mov	r0, r3
 800e07a:	f7fe fdbb 	bl	800cbf4 <Custom_STM_App_Notification>
                break;
 800e07e:	e0dc      	b.n	800e23a <Custom_STM_Event_Handler+0x3a2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_AMBI_TEMP_NOTIFY_ENABLED_EVT;
 800e080:	230f      	movs	r3, #15
 800e082:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800e084:	f107 030c 	add.w	r3, r7, #12
 800e088:	4618      	mov	r0, r3
 800e08a:	f7fe fdb3 	bl	800cbf4 <Custom_STM_App_Notification>
                break;
 800e08e:	e0d4      	b.n	800e23a <Custom_STM_Event_Handler+0x3a2>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomEcHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800e090:	69fb      	ldr	r3, [r7, #28]
 800e092:	885b      	ldrh	r3, [r3, #2]
 800e094:	b29b      	uxth	r3, r3
 800e096:	461a      	mov	r2, r3
 800e098:	4b3c      	ldr	r3, [pc, #240]	@ (800e18c <Custom_STM_Event_Handler+0x2f4>)
 800e09a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800e09c:	3302      	adds	r3, #2
 800e09e:	429a      	cmp	r2, r3
 800e0a0:	d119      	bne.n	800e0d6 <Custom_STM_Event_Handler+0x23e>
            return_value = SVCCTL_EvtAckFlowEnable;
 800e0a2:	2301      	movs	r3, #1
 800e0a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            switch (attribute_modified->Attr_Data[0])
 800e0a8:	69fb      	ldr	r3, [r7, #28]
 800e0aa:	7a1b      	ldrb	r3, [r3, #8]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d002      	beq.n	800e0b6 <Custom_STM_Event_Handler+0x21e>
 800e0b0:	2b01      	cmp	r3, #1
 800e0b2:	d008      	beq.n	800e0c6 <Custom_STM_Event_Handler+0x22e>
              break;
 800e0b4:	e0c1      	b.n	800e23a <Custom_STM_Event_Handler+0x3a2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_EC_NOTIFY_DISABLED_EVT;
 800e0b6:	2317      	movs	r3, #23
 800e0b8:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800e0ba:	f107 030c 	add.w	r3, r7, #12
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f7fe fd98 	bl	800cbf4 <Custom_STM_App_Notification>
                break;
 800e0c4:	e0b9      	b.n	800e23a <Custom_STM_Event_Handler+0x3a2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_EC_NOTIFY_ENABLED_EVT;
 800e0c6:	2316      	movs	r3, #22
 800e0c8:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800e0ca:	f107 030c 	add.w	r3, r7, #12
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	f7fe fd90 	bl	800cbf4 <Custom_STM_App_Notification>
                break;
 800e0d4:	e0b1      	b.n	800e23a <Custom_STM_Event_Handler+0x3a2>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomPwr_GdHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800e0d6:	69fb      	ldr	r3, [r7, #28]
 800e0d8:	885b      	ldrh	r3, [r3, #2]
 800e0da:	b29b      	uxth	r3, r3
 800e0dc:	461a      	mov	r2, r3
 800e0de:	4b2b      	ldr	r3, [pc, #172]	@ (800e18c <Custom_STM_Event_Handler+0x2f4>)
 800e0e0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800e0e2:	3302      	adds	r3, #2
 800e0e4:	429a      	cmp	r2, r3
 800e0e6:	d119      	bne.n	800e11c <Custom_STM_Event_Handler+0x284>
            return_value = SVCCTL_EvtAckFlowEnable;
 800e0e8:	2301      	movs	r3, #1
 800e0ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            switch (attribute_modified->Attr_Data[0])
 800e0ee:	69fb      	ldr	r3, [r7, #28]
 800e0f0:	7a1b      	ldrb	r3, [r3, #8]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d002      	beq.n	800e0fc <Custom_STM_Event_Handler+0x264>
 800e0f6:	2b01      	cmp	r3, #1
 800e0f8:	d008      	beq.n	800e10c <Custom_STM_Event_Handler+0x274>
              break;
 800e0fa:	e09e      	b.n	800e23a <Custom_STM_Event_Handler+0x3a2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_PWR_GD_NOTIFY_DISABLED_EVT;
 800e0fc:	2319      	movs	r3, #25
 800e0fe:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800e100:	f107 030c 	add.w	r3, r7, #12
 800e104:	4618      	mov	r0, r3
 800e106:	f7fe fd75 	bl	800cbf4 <Custom_STM_App_Notification>
                break;
 800e10a:	e096      	b.n	800e23a <Custom_STM_Event_Handler+0x3a2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_PWR_GD_NOTIFY_ENABLED_EVT;
 800e10c:	2318      	movs	r3, #24
 800e10e:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800e110:	f107 030c 	add.w	r3, r7, #12
 800e114:	4618      	mov	r0, r3
 800e116:	f7fe fd6d 	bl	800cbf4 <Custom_STM_App_Notification>
                break;
 800e11a:	e08e      	b.n	800e23a <Custom_STM_Event_Handler+0x3a2>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomS_THdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800e11c:	69fb      	ldr	r3, [r7, #28]
 800e11e:	885b      	ldrh	r3, [r3, #2]
 800e120:	b29b      	uxth	r3, r3
 800e122:	461a      	mov	r2, r3
 800e124:	4b19      	ldr	r3, [pc, #100]	@ (800e18c <Custom_STM_Event_Handler+0x2f4>)
 800e126:	895b      	ldrh	r3, [r3, #10]
 800e128:	3301      	adds	r3, #1
 800e12a:	429a      	cmp	r2, r3
 800e12c:	d112      	bne.n	800e154 <Custom_STM_Event_Handler+0x2bc>
            return_value = SVCCTL_EvtAckFlowEnable;
 800e12e:	2301      	movs	r3, #1
 800e130:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Notification.Custom_Evt_Opcode = CUSTOM_STM_S_T_WRITE_NO_RESP_EVT;
 800e134:	2305      	movs	r3, #5
 800e136:	733b      	strb	r3, [r7, #12]
				Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800e138:	69fb      	ldr	r3, [r7, #28]
 800e13a:	88db      	ldrh	r3, [r3, #6]
 800e13c:	b29b      	uxth	r3, r3
 800e13e:	b2db      	uxtb	r3, r3
 800e140:	753b      	strb	r3, [r7, #20]
				Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800e142:	69fb      	ldr	r3, [r7, #28]
 800e144:	3308      	adds	r3, #8
 800e146:	613b      	str	r3, [r7, #16]
				Custom_STM_App_Notification(&Notification);
 800e148:	f107 030c 	add.w	r3, r7, #12
 800e14c:	4618      	mov	r0, r3
 800e14e:	f7fe fd51 	bl	800cbf4 <Custom_STM_App_Notification>
          break;
 800e152:	e148      	b.n	800e3e6 <Custom_STM_Event_Handler+0x54e>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomOtaHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800e154:	69fb      	ldr	r3, [r7, #28]
 800e156:	885b      	ldrh	r3, [r3, #2]
 800e158:	b29b      	uxth	r3, r3
 800e15a:	461a      	mov	r2, r3
 800e15c:	4b0b      	ldr	r3, [pc, #44]	@ (800e18c <Custom_STM_Event_Handler+0x2f4>)
 800e15e:	8adb      	ldrh	r3, [r3, #22]
 800e160:	3301      	adds	r3, #1
 800e162:	429a      	cmp	r2, r3
 800e164:	d114      	bne.n	800e190 <Custom_STM_Event_Handler+0x2f8>
            return_value = SVCCTL_EvtAckFlowEnable;
 800e166:	2301      	movs	r3, #1
 800e168:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Notification.Custom_Evt_Opcode = CUSTOM_STM_OTA_WRITE_NO_RESP_EVT;
 800e16c:	230e      	movs	r3, #14
 800e16e:	733b      	strb	r3, [r7, #12]
				Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800e170:	69fb      	ldr	r3, [r7, #28]
 800e172:	88db      	ldrh	r3, [r3, #6]
 800e174:	b29b      	uxth	r3, r3
 800e176:	b2db      	uxtb	r3, r3
 800e178:	753b      	strb	r3, [r7, #20]
				Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800e17a:	69fb      	ldr	r3, [r7, #28]
 800e17c:	3308      	adds	r3, #8
 800e17e:	613b      	str	r3, [r7, #16]
				Custom_STM_App_Notification(&Notification);
 800e180:	f107 030c 	add.w	r3, r7, #12
 800e184:	4618      	mov	r0, r3
 800e186:	f7fe fd35 	bl	800cbf4 <Custom_STM_App_Notification>
          break;
 800e18a:	e12c      	b.n	800e3e6 <Custom_STM_Event_Handler+0x54e>
 800e18c:	200008f0 	.word	0x200008f0
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomT_IntHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800e190:	69fb      	ldr	r3, [r7, #28]
 800e192:	885b      	ldrh	r3, [r3, #2]
 800e194:	b29b      	uxth	r3, r3
 800e196:	461a      	mov	r2, r3
 800e198:	4b98      	ldr	r3, [pc, #608]	@ (800e3fc <Custom_STM_Event_Handler+0x564>)
 800e19a:	8b5b      	ldrh	r3, [r3, #26]
 800e19c:	3301      	adds	r3, #1
 800e19e:	429a      	cmp	r2, r3
 800e1a0:	d112      	bne.n	800e1c8 <Custom_STM_Event_Handler+0x330>
            return_value = SVCCTL_EvtAckFlowEnable;
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            Notification.Custom_Evt_Opcode = CUSTOM_STM_T_INT_WRITE_NO_RESP_EVT;
 800e1a8:	2312      	movs	r3, #18
 800e1aa:	733b      	strb	r3, [r7, #12]
            Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800e1ac:	69fb      	ldr	r3, [r7, #28]
 800e1ae:	88db      	ldrh	r3, [r3, #6]
 800e1b0:	b29b      	uxth	r3, r3
 800e1b2:	b2db      	uxtb	r3, r3
 800e1b4:	753b      	strb	r3, [r7, #20]
            Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800e1b6:	69fb      	ldr	r3, [r7, #28]
 800e1b8:	3308      	adds	r3, #8
 800e1ba:	613b      	str	r3, [r7, #16]
            Custom_STM_App_Notification(&Notification);
 800e1bc:	f107 030c 	add.w	r3, r7, #12
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	f7fe fd17 	bl	800cbf4 <Custom_STM_App_Notification>
          break;
 800e1c6:	e10e      	b.n	800e3e6 <Custom_STM_Event_Handler+0x54e>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomTdHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800e1c8:	69fb      	ldr	r3, [r7, #28]
 800e1ca:	885b      	ldrh	r3, [r3, #2]
 800e1cc:	b29b      	uxth	r3, r3
 800e1ce:	461a      	mov	r2, r3
 800e1d0:	4b8a      	ldr	r3, [pc, #552]	@ (800e3fc <Custom_STM_Event_Handler+0x564>)
 800e1d2:	8c1b      	ldrh	r3, [r3, #32]
 800e1d4:	3301      	adds	r3, #1
 800e1d6:	429a      	cmp	r2, r3
 800e1d8:	d112      	bne.n	800e200 <Custom_STM_Event_Handler+0x368>
            return_value = SVCCTL_EvtAckFlowEnable;
 800e1da:	2301      	movs	r3, #1
 800e1dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Notification.Custom_Evt_Opcode = CUSTOM_STM_TD_WRITE_NO_RESP_EVT;
 800e1e0:	2315      	movs	r3, #21
 800e1e2:	733b      	strb	r3, [r7, #12]
				Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800e1e4:	69fb      	ldr	r3, [r7, #28]
 800e1e6:	88db      	ldrh	r3, [r3, #6]
 800e1e8:	b29b      	uxth	r3, r3
 800e1ea:	b2db      	uxtb	r3, r3
 800e1ec:	753b      	strb	r3, [r7, #20]
				Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800e1ee:	69fb      	ldr	r3, [r7, #28]
 800e1f0:	3308      	adds	r3, #8
 800e1f2:	613b      	str	r3, [r7, #16]
				Custom_STM_App_Notification(&Notification);
 800e1f4:	f107 030c 	add.w	r3, r7, #12
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f7fe fcfb 	bl	800cbf4 <Custom_STM_App_Notification>
          break;
 800e1fe:	e0f2      	b.n	800e3e6 <Custom_STM_Event_Handler+0x54e>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomMdHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800e200:	69fb      	ldr	r3, [r7, #28]
 800e202:	885b      	ldrh	r3, [r3, #2]
 800e204:	b29b      	uxth	r3, r3
 800e206:	461a      	mov	r2, r3
 800e208:	4b7c      	ldr	r3, [pc, #496]	@ (800e3fc <Custom_STM_Event_Handler+0x564>)
 800e20a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e20c:	3301      	adds	r3, #1
 800e20e:	429a      	cmp	r2, r3
 800e210:	f040 80e9 	bne.w	800e3e6 <Custom_STM_Event_Handler+0x54e>
            return_value = SVCCTL_EvtAckFlowEnable;
 800e214:	2301      	movs	r3, #1
 800e216:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            Notification.Custom_Evt_Opcode = CUSTOM_STM_MD_WRITE_NO_RESP_EVT;
 800e21a:	231c      	movs	r3, #28
 800e21c:	733b      	strb	r3, [r7, #12]
            Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800e21e:	69fb      	ldr	r3, [r7, #28]
 800e220:	88db      	ldrh	r3, [r3, #6]
 800e222:	b29b      	uxth	r3, r3
 800e224:	b2db      	uxtb	r3, r3
 800e226:	753b      	strb	r3, [r7, #20]
            Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800e228:	69fb      	ldr	r3, [r7, #28]
 800e22a:	3308      	adds	r3, #8
 800e22c:	613b      	str	r3, [r7, #16]
            Custom_STM_App_Notification(&Notification);
 800e22e:	f107 030c 	add.w	r3, r7, #12
 800e232:	4618      	mov	r0, r3
 800e234:	f7fe fcde 	bl	800cbf4 <Custom_STM_App_Notification>
          break;
 800e238:	e0d5      	b.n	800e3e6 <Custom_STM_Event_Handler+0x54e>
 800e23a:	e0d4      	b.n	800e3e6 <Custom_STM_Event_Handler+0x54e>
          read_req = (aci_gatt_read_permit_req_event_rp0*)blecore_evt->data;
 800e23c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e23e:	3302      	adds	r3, #2
 800e240:	623b      	str	r3, [r7, #32]
          if (read_req->Attribute_Handle == (CustomContext.CustomLevelHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800e242:	6a3b      	ldr	r3, [r7, #32]
 800e244:	885b      	ldrh	r3, [r3, #2]
 800e246:	b29b      	uxth	r3, r3
 800e248:	461a      	mov	r2, r3
 800e24a:	4b6c      	ldr	r3, [pc, #432]	@ (800e3fc <Custom_STM_Event_Handler+0x564>)
 800e24c:	885b      	ldrh	r3, [r3, #2]
 800e24e:	3301      	adds	r3, #1
 800e250:	429a      	cmp	r2, r3
 800e252:	d110      	bne.n	800e276 <Custom_STM_Event_Handler+0x3de>
            return_value = SVCCTL_EvtAckFlowEnable;
 800e254:	2301      	movs	r3, #1
 800e256:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Notification.Custom_Evt_Opcode=CUSTOM_STM_LEVEL_READ_EVT;
 800e25a:	2300      	movs	r3, #0
 800e25c:	733b      	strb	r3, [r7, #12]
				Custom_STM_App_Notification(&Notification);
 800e25e:	f107 030c 	add.w	r3, r7, #12
 800e262:	4618      	mov	r0, r3
 800e264:	f7fe fcc6 	bl	800cbf4 <Custom_STM_App_Notification>
            aci_gatt_allow_read(read_req->Connection_Handle);
 800e268:	6a3b      	ldr	r3, [r7, #32]
 800e26a:	881b      	ldrh	r3, [r3, #0]
 800e26c:	b29b      	uxth	r3, r3
 800e26e:	4618      	mov	r0, r3
 800e270:	f009 fa07 	bl	8017682 <aci_gatt_allow_read>
          break;
 800e274:	e0b9      	b.n	800e3ea <Custom_STM_Event_Handler+0x552>
          else if (read_req->Attribute_Handle == (CustomContext.CustomIr_THdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800e276:	6a3b      	ldr	r3, [r7, #32]
 800e278:	885b      	ldrh	r3, [r3, #2]
 800e27a:	b29b      	uxth	r3, r3
 800e27c:	461a      	mov	r2, r3
 800e27e:	4b5f      	ldr	r3, [pc, #380]	@ (800e3fc <Custom_STM_Event_Handler+0x564>)
 800e280:	88db      	ldrh	r3, [r3, #6]
 800e282:	3301      	adds	r3, #1
 800e284:	429a      	cmp	r2, r3
 800e286:	d110      	bne.n	800e2aa <Custom_STM_Event_Handler+0x412>
            return_value = SVCCTL_EvtAckFlowEnable;
 800e288:	2301      	movs	r3, #1
 800e28a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            Notification.Custom_Evt_Opcode=CUSTOM_STM_IR_T_READ_EVT;
 800e28e:	2301      	movs	r3, #1
 800e290:	733b      	strb	r3, [r7, #12]
            Custom_STM_App_Notification(&Notification);
 800e292:	f107 030c 	add.w	r3, r7, #12
 800e296:	4618      	mov	r0, r3
 800e298:	f7fe fcac 	bl	800cbf4 <Custom_STM_App_Notification>
            aci_gatt_allow_read(read_req->Connection_Handle);
 800e29c:	6a3b      	ldr	r3, [r7, #32]
 800e29e:	881b      	ldrh	r3, [r3, #0]
 800e2a0:	b29b      	uxth	r3, r3
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	f009 f9ed 	bl	8017682 <aci_gatt_allow_read>
          break;
 800e2a8:	e09f      	b.n	800e3ea <Custom_STM_Event_Handler+0x552>
          else if (read_req->Attribute_Handle == (CustomContext.CustomA_THdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800e2aa:	6a3b      	ldr	r3, [r7, #32]
 800e2ac:	885b      	ldrh	r3, [r3, #2]
 800e2ae:	b29b      	uxth	r3, r3
 800e2b0:	461a      	mov	r2, r3
 800e2b2:	4b52      	ldr	r3, [pc, #328]	@ (800e3fc <Custom_STM_Event_Handler+0x564>)
 800e2b4:	891b      	ldrh	r3, [r3, #8]
 800e2b6:	3301      	adds	r3, #1
 800e2b8:	429a      	cmp	r2, r3
 800e2ba:	d110      	bne.n	800e2de <Custom_STM_Event_Handler+0x446>
            return_value = SVCCTL_EvtAckFlowEnable;
 800e2bc:	2301      	movs	r3, #1
 800e2be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Notification.Custom_Evt_Opcode=CUSTOM_STM_A_T_READ_EVT;
 800e2c2:	2304      	movs	r3, #4
 800e2c4:	733b      	strb	r3, [r7, #12]
				Custom_STM_App_Notification(&Notification);
 800e2c6:	f107 030c 	add.w	r3, r7, #12
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f7fe fc92 	bl	800cbf4 <Custom_STM_App_Notification>
            aci_gatt_allow_read(read_req->Connection_Handle);
 800e2d0:	6a3b      	ldr	r3, [r7, #32]
 800e2d2:	881b      	ldrh	r3, [r3, #0]
 800e2d4:	b29b      	uxth	r3, r3
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f009 f9d3 	bl	8017682 <aci_gatt_allow_read>
          break;
 800e2dc:	e085      	b.n	800e3ea <Custom_STM_Event_Handler+0x552>
          else if (read_req->Attribute_Handle == (CustomContext.CustomT_IntHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800e2de:	6a3b      	ldr	r3, [r7, #32]
 800e2e0:	885b      	ldrh	r3, [r3, #2]
 800e2e2:	b29b      	uxth	r3, r3
 800e2e4:	461a      	mov	r2, r3
 800e2e6:	4b45      	ldr	r3, [pc, #276]	@ (800e3fc <Custom_STM_Event_Handler+0x564>)
 800e2e8:	8b5b      	ldrh	r3, [r3, #26]
 800e2ea:	3301      	adds	r3, #1
 800e2ec:	429a      	cmp	r2, r3
 800e2ee:	d110      	bne.n	800e312 <Custom_STM_Event_Handler+0x47a>
            return_value = SVCCTL_EvtAckFlowEnable;
 800e2f0:	2301      	movs	r3, #1
 800e2f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            Notification.Custom_Evt_Opcode=CUSTOM_STM_T_INT_READ_EVT;
 800e2f6:	2311      	movs	r3, #17
 800e2f8:	733b      	strb	r3, [r7, #12]
            Custom_STM_App_Notification(&Notification);
 800e2fa:	f107 030c 	add.w	r3, r7, #12
 800e2fe:	4618      	mov	r0, r3
 800e300:	f7fe fc78 	bl	800cbf4 <Custom_STM_App_Notification>
            aci_gatt_allow_read(read_req->Connection_Handle);
 800e304:	6a3b      	ldr	r3, [r7, #32]
 800e306:	881b      	ldrh	r3, [r3, #0]
 800e308:	b29b      	uxth	r3, r3
 800e30a:	4618      	mov	r0, r3
 800e30c:	f009 f9b9 	bl	8017682 <aci_gatt_allow_read>
          break;
 800e310:	e06b      	b.n	800e3ea <Custom_STM_Event_Handler+0x552>
          else if (read_req->Attribute_Handle == (CustomContext.CustomAcclxHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800e312:	6a3b      	ldr	r3, [r7, #32]
 800e314:	885b      	ldrh	r3, [r3, #2]
 800e316:	b29b      	uxth	r3, r3
 800e318:	461a      	mov	r2, r3
 800e31a:	4b38      	ldr	r3, [pc, #224]	@ (800e3fc <Custom_STM_Event_Handler+0x564>)
 800e31c:	8bdb      	ldrh	r3, [r3, #30]
 800e31e:	3301      	adds	r3, #1
 800e320:	429a      	cmp	r2, r3
 800e322:	d110      	bne.n	800e346 <Custom_STM_Event_Handler+0x4ae>
            return_value = SVCCTL_EvtAckFlowEnable;
 800e324:	2301      	movs	r3, #1
 800e326:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Notification.Custom_Evt_Opcode=CUSTOM_STM_ACCLX_READ_EVT;
 800e32a:	2313      	movs	r3, #19
 800e32c:	733b      	strb	r3, [r7, #12]
				Custom_STM_App_Notification(&Notification);
 800e32e:	f107 030c 	add.w	r3, r7, #12
 800e332:	4618      	mov	r0, r3
 800e334:	f7fe fc5e 	bl	800cbf4 <Custom_STM_App_Notification>
            aci_gatt_allow_read(read_req->Connection_Handle);
 800e338:	6a3b      	ldr	r3, [r7, #32]
 800e33a:	881b      	ldrh	r3, [r3, #0]
 800e33c:	b29b      	uxth	r3, r3
 800e33e:	4618      	mov	r0, r3
 800e340:	f009 f99f 	bl	8017682 <aci_gatt_allow_read>
          break;
 800e344:	e051      	b.n	800e3ea <Custom_STM_Event_Handler+0x552>
          else if (read_req->Attribute_Handle == (CustomContext.CustomTdHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800e346:	6a3b      	ldr	r3, [r7, #32]
 800e348:	885b      	ldrh	r3, [r3, #2]
 800e34a:	b29b      	uxth	r3, r3
 800e34c:	461a      	mov	r2, r3
 800e34e:	4b2b      	ldr	r3, [pc, #172]	@ (800e3fc <Custom_STM_Event_Handler+0x564>)
 800e350:	8c1b      	ldrh	r3, [r3, #32]
 800e352:	3301      	adds	r3, #1
 800e354:	429a      	cmp	r2, r3
 800e356:	d110      	bne.n	800e37a <Custom_STM_Event_Handler+0x4e2>
            return_value = SVCCTL_EvtAckFlowEnable;
 800e358:	2301      	movs	r3, #1
 800e35a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Notification.Custom_Evt_Opcode=CUSTOM_STM_TD_READ_EVT;
 800e35e:	2314      	movs	r3, #20
 800e360:	733b      	strb	r3, [r7, #12]
				Custom_STM_App_Notification(&Notification);
 800e362:	f107 030c 	add.w	r3, r7, #12
 800e366:	4618      	mov	r0, r3
 800e368:	f7fe fc44 	bl	800cbf4 <Custom_STM_App_Notification>
            aci_gatt_allow_read(read_req->Connection_Handle);
 800e36c:	6a3b      	ldr	r3, [r7, #32]
 800e36e:	881b      	ldrh	r3, [r3, #0]
 800e370:	b29b      	uxth	r3, r3
 800e372:	4618      	mov	r0, r3
 800e374:	f009 f985 	bl	8017682 <aci_gatt_allow_read>
          break;
 800e378:	e037      	b.n	800e3ea <Custom_STM_Event_Handler+0x552>
          else if (read_req->Attribute_Handle == (CustomContext.CustomSoftware_Revision_StringHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800e37a:	6a3b      	ldr	r3, [r7, #32]
 800e37c:	885b      	ldrh	r3, [r3, #2]
 800e37e:	b29b      	uxth	r3, r3
 800e380:	461a      	mov	r2, r3
 800e382:	4b1e      	ldr	r3, [pc, #120]	@ (800e3fc <Custom_STM_Event_Handler+0x564>)
 800e384:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800e386:	3301      	adds	r3, #1
 800e388:	429a      	cmp	r2, r3
 800e38a:	d110      	bne.n	800e3ae <Custom_STM_Event_Handler+0x516>
            return_value = SVCCTL_EvtAckFlowEnable;
 800e38c:	2301      	movs	r3, #1
 800e38e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Notification.Custom_Evt_Opcode=CUSTOM_STM_SOFTWARE_REVISION_STRING_READ_EVT;
 800e392:	231a      	movs	r3, #26
 800e394:	733b      	strb	r3, [r7, #12]
				Custom_STM_App_Notification(&Notification);
 800e396:	f107 030c 	add.w	r3, r7, #12
 800e39a:	4618      	mov	r0, r3
 800e39c:	f7fe fc2a 	bl	800cbf4 <Custom_STM_App_Notification>
            aci_gatt_allow_read(read_req->Connection_Handle);
 800e3a0:	6a3b      	ldr	r3, [r7, #32]
 800e3a2:	881b      	ldrh	r3, [r3, #0]
 800e3a4:	b29b      	uxth	r3, r3
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f009 f96b 	bl	8017682 <aci_gatt_allow_read>
          break;
 800e3ac:	e01d      	b.n	800e3ea <Custom_STM_Event_Handler+0x552>
          else if (read_req->Attribute_Handle == (CustomContext.CustomMdHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800e3ae:	6a3b      	ldr	r3, [r7, #32]
 800e3b0:	885b      	ldrh	r3, [r3, #2]
 800e3b2:	b29b      	uxth	r3, r3
 800e3b4:	461a      	mov	r2, r3
 800e3b6:	4b11      	ldr	r3, [pc, #68]	@ (800e3fc <Custom_STM_Event_Handler+0x564>)
 800e3b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e3ba:	3301      	adds	r3, #1
 800e3bc:	429a      	cmp	r2, r3
 800e3be:	d114      	bne.n	800e3ea <Custom_STM_Event_Handler+0x552>
            return_value = SVCCTL_EvtAckFlowEnable;
 800e3c0:	2301      	movs	r3, #1
 800e3c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            Notification.Custom_Evt_Opcode=CUSTOM_STM_MD_READ_EVT;
 800e3c6:	231b      	movs	r3, #27
 800e3c8:	733b      	strb	r3, [r7, #12]
            Custom_STM_App_Notification(&Notification);
 800e3ca:	f107 030c 	add.w	r3, r7, #12
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	f7fe fc10 	bl	800cbf4 <Custom_STM_App_Notification>
            aci_gatt_allow_read(read_req->Connection_Handle);
 800e3d4:	6a3b      	ldr	r3, [r7, #32]
 800e3d6:	881b      	ldrh	r3, [r3, #0]
 800e3d8:	b29b      	uxth	r3, r3
 800e3da:	4618      	mov	r0, r3
 800e3dc:	f009 f951 	bl	8017682 <aci_gatt_allow_read>
          break;
 800e3e0:	e003      	b.n	800e3ea <Custom_STM_Event_Handler+0x552>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800e3e2:	bf00      	nop
 800e3e4:	e004      	b.n	800e3f0 <Custom_STM_Event_Handler+0x558>
          break;
 800e3e6:	bf00      	nop
 800e3e8:	e002      	b.n	800e3f0 <Custom_STM_Event_Handler+0x558>
          break;
 800e3ea:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800e3ec:	e000      	b.n	800e3f0 <Custom_STM_Event_Handler+0x558>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800e3ee:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800e3f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	3730      	adds	r7, #48	@ 0x30
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd80      	pop	{r7, pc}
 800e3fc:	200008f0 	.word	0x200008f0

0800e400 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b08c      	sub	sp, #48	@ 0x30
 800e404:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800e406:	2392      	movs	r3, #146	@ 0x92
 800e408:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800e40a:	48da      	ldr	r0, [pc, #872]	@ (800e774 <SVCCTL_InitCustomSvc+0x374>)
 800e40c:	f00a f8ec 	bl	80185e8 <SVCCTL_RegisterSvcHandler>
   *                              = 3
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 3;
 800e410:	2303      	movs	r3, #3
 800e412:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
	/* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_BATTERY_SERVICE_UUID(uuid.Char_UUID_128);
 800e414:	238f      	movs	r3, #143	@ 0x8f
 800e416:	713b      	strb	r3, [r7, #4]
 800e418:	23e5      	movs	r3, #229	@ 0xe5
 800e41a:	717b      	strb	r3, [r7, #5]
 800e41c:	23b3      	movs	r3, #179	@ 0xb3
 800e41e:	71bb      	strb	r3, [r7, #6]
 800e420:	23d5      	movs	r3, #213	@ 0xd5
 800e422:	71fb      	strb	r3, [r7, #7]
 800e424:	232e      	movs	r3, #46	@ 0x2e
 800e426:	723b      	strb	r3, [r7, #8]
 800e428:	237f      	movs	r3, #127	@ 0x7f
 800e42a:	727b      	strb	r3, [r7, #9]
 800e42c:	234a      	movs	r3, #74	@ 0x4a
 800e42e:	72bb      	strb	r3, [r7, #10]
 800e430:	2398      	movs	r3, #152	@ 0x98
 800e432:	72fb      	strb	r3, [r7, #11]
 800e434:	232a      	movs	r3, #42	@ 0x2a
 800e436:	733b      	strb	r3, [r7, #12]
 800e438:	2348      	movs	r3, #72	@ 0x48
 800e43a:	737b      	strb	r3, [r7, #13]
 800e43c:	237a      	movs	r3, #122	@ 0x7a
 800e43e:	73bb      	strb	r3, [r7, #14]
 800e440:	23cc      	movs	r3, #204	@ 0xcc
 800e442:	73fb      	strb	r3, [r7, #15]
 800e444:	230f      	movs	r3, #15
 800e446:	743b      	strb	r3, [r7, #16]
 800e448:	2318      	movs	r3, #24
 800e44a:	747b      	strb	r3, [r7, #17]
 800e44c:	2300      	movs	r3, #0
 800e44e:	74bb      	strb	r3, [r7, #18]
 800e450:	2300      	movs	r3, #0
 800e452:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800e454:	7dbb      	ldrb	r3, [r7, #22]
 800e456:	1d39      	adds	r1, r7, #4
 800e458:	4ac7      	ldr	r2, [pc, #796]	@ (800e778 <SVCCTL_InitCustomSvc+0x378>)
 800e45a:	9200      	str	r2, [sp, #0]
 800e45c:	2201      	movs	r2, #1
 800e45e:	2002      	movs	r0, #2
 800e460:	f008 fe88 	bl	8017174 <aci_gatt_add_service>
 800e464:	4603      	mov	r3, r0
 800e466:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  level
   */
  COPY_LEVEL_UUID(uuid.Char_UUID_128);
 800e468:	2319      	movs	r3, #25
 800e46a:	713b      	strb	r3, [r7, #4]
 800e46c:	23ed      	movs	r3, #237	@ 0xed
 800e46e:	717b      	strb	r3, [r7, #5]
 800e470:	2382      	movs	r3, #130	@ 0x82
 800e472:	71bb      	strb	r3, [r7, #6]
 800e474:	23ae      	movs	r3, #174	@ 0xae
 800e476:	71fb      	strb	r3, [r7, #7]
 800e478:	23ed      	movs	r3, #237	@ 0xed
 800e47a:	723b      	strb	r3, [r7, #8]
 800e47c:	2321      	movs	r3, #33	@ 0x21
 800e47e:	727b      	strb	r3, [r7, #9]
 800e480:	234c      	movs	r3, #76	@ 0x4c
 800e482:	72bb      	strb	r3, [r7, #10]
 800e484:	239d      	movs	r3, #157	@ 0x9d
 800e486:	72fb      	strb	r3, [r7, #11]
 800e488:	2341      	movs	r3, #65	@ 0x41
 800e48a:	733b      	strb	r3, [r7, #12]
 800e48c:	2345      	movs	r3, #69	@ 0x45
 800e48e:	737b      	strb	r3, [r7, #13]
 800e490:	2322      	movs	r3, #34	@ 0x22
 800e492:	73bb      	strb	r3, [r7, #14]
 800e494:	238e      	movs	r3, #142	@ 0x8e
 800e496:	73fb      	strb	r3, [r7, #15]
 800e498:	2319      	movs	r3, #25
 800e49a:	743b      	strb	r3, [r7, #16]
 800e49c:	232a      	movs	r3, #42	@ 0x2a
 800e49e:	747b      	strb	r3, [r7, #17]
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	74bb      	strb	r3, [r7, #18]
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomBat_SerHdle,
 800e4a8:	4bb3      	ldr	r3, [pc, #716]	@ (800e778 <SVCCTL_InitCustomSvc+0x378>)
 800e4aa:	8818      	ldrh	r0, [r3, #0]
 800e4ac:	4bb3      	ldr	r3, [pc, #716]	@ (800e77c <SVCCTL_InitCustomSvc+0x37c>)
 800e4ae:	781b      	ldrb	r3, [r3, #0]
 800e4b0:	4619      	mov	r1, r3
 800e4b2:	1d3a      	adds	r2, r7, #4
 800e4b4:	4bb2      	ldr	r3, [pc, #712]	@ (800e780 <SVCCTL_InitCustomSvc+0x380>)
 800e4b6:	9305      	str	r3, [sp, #20]
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	9304      	str	r3, [sp, #16]
 800e4bc:	2310      	movs	r3, #16
 800e4be:	9303      	str	r3, [sp, #12]
 800e4c0:	2304      	movs	r3, #4
 800e4c2:	9302      	str	r3, [sp, #8]
 800e4c4:	2304      	movs	r3, #4
 800e4c6:	9301      	str	r3, [sp, #4]
 800e4c8:	2302      	movs	r3, #2
 800e4ca:	9300      	str	r3, [sp, #0]
 800e4cc:	460b      	mov	r3, r1
 800e4ce:	2102      	movs	r1, #2
 800e4d0:	f008 ff26 	bl	8017320 <aci_gatt_add_char>
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	75fb      	strb	r3, [r7, #23]
   *                              = 14
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 14;
 800e4d8:	230e      	movs	r3, #14
 800e4da:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
	/* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_TEMPERATURE_UUID(uuid.Char_UUID_128);
 800e4dc:	233d      	movs	r3, #61	@ 0x3d
 800e4de:	713b      	strb	r3, [r7, #4]
 800e4e0:	2392      	movs	r3, #146	@ 0x92
 800e4e2:	717b      	strb	r3, [r7, #5]
 800e4e4:	23b4      	movs	r3, #180	@ 0xb4
 800e4e6:	71bb      	strb	r3, [r7, #6]
 800e4e8:	2399      	movs	r3, #153	@ 0x99
 800e4ea:	71fb      	strb	r3, [r7, #7]
 800e4ec:	238b      	movs	r3, #139	@ 0x8b
 800e4ee:	723b      	strb	r3, [r7, #8]
 800e4f0:	2330      	movs	r3, #48	@ 0x30
 800e4f2:	727b      	strb	r3, [r7, #9]
 800e4f4:	23d1      	movs	r3, #209	@ 0xd1
 800e4f6:	72bb      	strb	r3, [r7, #10]
 800e4f8:	23a0      	movs	r3, #160	@ 0xa0
 800e4fa:	72fb      	strb	r3, [r7, #11]
 800e4fc:	2357      	movs	r3, #87	@ 0x57
 800e4fe:	733b      	strb	r3, [r7, #12]
 800e500:	2344      	movs	r3, #68	@ 0x44
 800e502:	737b      	strb	r3, [r7, #13]
 800e504:	23a2      	movs	r3, #162	@ 0xa2
 800e506:	73bb      	strb	r3, [r7, #14]
 800e508:	2393      	movs	r3, #147	@ 0x93
 800e50a:	73fb      	strb	r3, [r7, #15]
 800e50c:	2312      	movs	r3, #18
 800e50e:	743b      	strb	r3, [r7, #16]
 800e510:	2332      	movs	r3, #50	@ 0x32
 800e512:	747b      	strb	r3, [r7, #17]
 800e514:	23c8      	movs	r3, #200	@ 0xc8
 800e516:	74bb      	strb	r3, [r7, #18]
 800e518:	2361      	movs	r3, #97	@ 0x61
 800e51a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800e51c:	7dbb      	ldrb	r3, [r7, #22]
 800e51e:	1d39      	adds	r1, r7, #4
 800e520:	4a98      	ldr	r2, [pc, #608]	@ (800e784 <SVCCTL_InitCustomSvc+0x384>)
 800e522:	9200      	str	r2, [sp, #0]
 800e524:	2201      	movs	r2, #1
 800e526:	2002      	movs	r0, #2
 800e528:	f008 fe24 	bl	8017174 <aci_gatt_add_service>
 800e52c:	4603      	mov	r3, r0
 800e52e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  IR_temperature
   */
  COPY_IR_TEMPERATURE_UUID(uuid.Char_UUID_128);
 800e530:	2353      	movs	r3, #83	@ 0x53
 800e532:	713b      	strb	r3, [r7, #4]
 800e534:	23d5      	movs	r3, #213	@ 0xd5
 800e536:	717b      	strb	r3, [r7, #5]
 800e538:	23da      	movs	r3, #218	@ 0xda
 800e53a:	71bb      	strb	r3, [r7, #6]
 800e53c:	2348      	movs	r3, #72	@ 0x48
 800e53e:	71fb      	strb	r3, [r7, #7]
 800e540:	23f4      	movs	r3, #244	@ 0xf4
 800e542:	723b      	strb	r3, [r7, #8]
 800e544:	237c      	movs	r3, #124	@ 0x7c
 800e546:	727b      	strb	r3, [r7, #9]
 800e548:	23d8      	movs	r3, #216	@ 0xd8
 800e54a:	72bb      	strb	r3, [r7, #10]
 800e54c:	238f      	movs	r3, #143	@ 0x8f
 800e54e:	72fb      	strb	r3, [r7, #11]
 800e550:	2360      	movs	r3, #96	@ 0x60
 800e552:	733b      	strb	r3, [r7, #12]
 800e554:	2345      	movs	r3, #69	@ 0x45
 800e556:	737b      	strb	r3, [r7, #13]
 800e558:	239b      	movs	r3, #155	@ 0x9b
 800e55a:	73bb      	strb	r3, [r7, #14]
 800e55c:	2321      	movs	r3, #33	@ 0x21
 800e55e:	73fb      	strb	r3, [r7, #15]
 800e560:	2322      	movs	r3, #34	@ 0x22
 800e562:	743b      	strb	r3, [r7, #16]
 800e564:	23c3      	movs	r3, #195	@ 0xc3
 800e566:	747b      	strb	r3, [r7, #17]
 800e568:	230a      	movs	r3, #10
 800e56a:	74bb      	strb	r3, [r7, #18]
 800e56c:	233a      	movs	r3, #58	@ 0x3a
 800e56e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomTempHdle,
 800e570:	4b81      	ldr	r3, [pc, #516]	@ (800e778 <SVCCTL_InitCustomSvc+0x378>)
 800e572:	8898      	ldrh	r0, [r3, #4]
 800e574:	4b84      	ldr	r3, [pc, #528]	@ (800e788 <SVCCTL_InitCustomSvc+0x388>)
 800e576:	781b      	ldrb	r3, [r3, #0]
 800e578:	4619      	mov	r1, r3
 800e57a:	1d3a      	adds	r2, r7, #4
 800e57c:	4b83      	ldr	r3, [pc, #524]	@ (800e78c <SVCCTL_InitCustomSvc+0x38c>)
 800e57e:	9305      	str	r3, [sp, #20]
 800e580:	2300      	movs	r3, #0
 800e582:	9304      	str	r3, [sp, #16]
 800e584:	2310      	movs	r3, #16
 800e586:	9303      	str	r3, [sp, #12]
 800e588:	2304      	movs	r3, #4
 800e58a:	9302      	str	r3, [sp, #8]
 800e58c:	2300      	movs	r3, #0
 800e58e:	9301      	str	r3, [sp, #4]
 800e590:	2312      	movs	r3, #18
 800e592:	9300      	str	r3, [sp, #0]
 800e594:	460b      	mov	r3, r1
 800e596:	2102      	movs	r1, #2
 800e598:	f008 fec2 	bl	8017320 <aci_gatt_add_char>
 800e59c:	4603      	mov	r3, r0
 800e59e:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service2_Char1 */
  /**
   *  Analog_Temperature
   */
  COPY_ANALOG_TEMPERATURE_UUID(uuid.Char_UUID_128);
 800e5a0:	23d0      	movs	r3, #208	@ 0xd0
 800e5a2:	713b      	strb	r3, [r7, #4]
 800e5a4:	2346      	movs	r3, #70	@ 0x46
 800e5a6:	717b      	strb	r3, [r7, #5]
 800e5a8:	233a      	movs	r3, #58	@ 0x3a
 800e5aa:	71bb      	strb	r3, [r7, #6]
 800e5ac:	239a      	movs	r3, #154	@ 0x9a
 800e5ae:	71fb      	strb	r3, [r7, #7]
 800e5b0:	237a      	movs	r3, #122	@ 0x7a
 800e5b2:	723b      	strb	r3, [r7, #8]
 800e5b4:	2382      	movs	r3, #130	@ 0x82
 800e5b6:	727b      	strb	r3, [r7, #9]
 800e5b8:	2303      	movs	r3, #3
 800e5ba:	72bb      	strb	r3, [r7, #10]
 800e5bc:	238c      	movs	r3, #140	@ 0x8c
 800e5be:	72fb      	strb	r3, [r7, #11]
 800e5c0:	2304      	movs	r3, #4
 800e5c2:	733b      	strb	r3, [r7, #12]
 800e5c4:	234b      	movs	r3, #75	@ 0x4b
 800e5c6:	737b      	strb	r3, [r7, #13]
 800e5c8:	2373      	movs	r3, #115	@ 0x73
 800e5ca:	73bb      	strb	r3, [r7, #14]
 800e5cc:	236a      	movs	r3, #106	@ 0x6a
 800e5ce:	73fb      	strb	r3, [r7, #15]
 800e5d0:	23e2      	movs	r3, #226	@ 0xe2
 800e5d2:	743b      	strb	r3, [r7, #16]
 800e5d4:	238c      	movs	r3, #140	@ 0x8c
 800e5d6:	747b      	strb	r3, [r7, #17]
 800e5d8:	23ba      	movs	r3, #186	@ 0xba
 800e5da:	74bb      	strb	r3, [r7, #18]
 800e5dc:	235a      	movs	r3, #90	@ 0x5a
 800e5de:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomTempHdle,
 800e5e0:	4b65      	ldr	r3, [pc, #404]	@ (800e778 <SVCCTL_InitCustomSvc+0x378>)
 800e5e2:	8898      	ldrh	r0, [r3, #4]
 800e5e4:	4b6a      	ldr	r3, [pc, #424]	@ (800e790 <SVCCTL_InitCustomSvc+0x390>)
 800e5e6:	781b      	ldrb	r3, [r3, #0]
 800e5e8:	4619      	mov	r1, r3
 800e5ea:	1d3a      	adds	r2, r7, #4
 800e5ec:	4b69      	ldr	r3, [pc, #420]	@ (800e794 <SVCCTL_InitCustomSvc+0x394>)
 800e5ee:	9305      	str	r3, [sp, #20]
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	9304      	str	r3, [sp, #16]
 800e5f4:	2310      	movs	r3, #16
 800e5f6:	9303      	str	r3, [sp, #12]
 800e5f8:	2304      	movs	r3, #4
 800e5fa:	9302      	str	r3, [sp, #8]
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	9301      	str	r3, [sp, #4]
 800e600:	2302      	movs	r3, #2
 800e602:	9300      	str	r3, [sp, #0]
 800e604:	460b      	mov	r3, r1
 800e606:	2102      	movs	r1, #2
 800e608:	f008 fe8a 	bl	8017320 <aci_gatt_add_char>
 800e60c:	4603      	mov	r3, r0
 800e60e:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service2_Char2 */
  /**
   *  Set_Temp
   */
  COPY_SET_TEMP_UUID(uuid.Char_UUID_128);
 800e610:	238c      	movs	r3, #140	@ 0x8c
 800e612:	713b      	strb	r3, [r7, #4]
 800e614:	23df      	movs	r3, #223	@ 0xdf
 800e616:	717b      	strb	r3, [r7, #5]
 800e618:	23a8      	movs	r3, #168	@ 0xa8
 800e61a:	71bb      	strb	r3, [r7, #6]
 800e61c:	23c4      	movs	r3, #196	@ 0xc4
 800e61e:	71fb      	strb	r3, [r7, #7]
 800e620:	2308      	movs	r3, #8
 800e622:	723b      	strb	r3, [r7, #8]
 800e624:	23b4      	movs	r3, #180	@ 0xb4
 800e626:	727b      	strb	r3, [r7, #9]
 800e628:	23df      	movs	r3, #223	@ 0xdf
 800e62a:	72bb      	strb	r3, [r7, #10]
 800e62c:	23a9      	movs	r3, #169	@ 0xa9
 800e62e:	72fb      	strb	r3, [r7, #11]
 800e630:	23b8      	movs	r3, #184	@ 0xb8
 800e632:	733b      	strb	r3, [r7, #12]
 800e634:	2343      	movs	r3, #67	@ 0x43
 800e636:	737b      	strb	r3, [r7, #13]
 800e638:	2345      	movs	r3, #69	@ 0x45
 800e63a:	73bb      	strb	r3, [r7, #14]
 800e63c:	2307      	movs	r3, #7
 800e63e:	73fb      	strb	r3, [r7, #15]
 800e640:	23c1      	movs	r3, #193	@ 0xc1
 800e642:	743b      	strb	r3, [r7, #16]
 800e644:	234b      	movs	r3, #75	@ 0x4b
 800e646:	747b      	strb	r3, [r7, #17]
 800e648:	2324      	movs	r3, #36	@ 0x24
 800e64a:	74bb      	strb	r3, [r7, #18]
 800e64c:	230a      	movs	r3, #10
 800e64e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomTempHdle,
 800e650:	4b49      	ldr	r3, [pc, #292]	@ (800e778 <SVCCTL_InitCustomSvc+0x378>)
 800e652:	8898      	ldrh	r0, [r3, #4]
 800e654:	4b50      	ldr	r3, [pc, #320]	@ (800e798 <SVCCTL_InitCustomSvc+0x398>)
 800e656:	781b      	ldrb	r3, [r3, #0]
 800e658:	4619      	mov	r1, r3
 800e65a:	1d3a      	adds	r2, r7, #4
 800e65c:	4b4f      	ldr	r3, [pc, #316]	@ (800e79c <SVCCTL_InitCustomSvc+0x39c>)
 800e65e:	9305      	str	r3, [sp, #20]
 800e660:	2300      	movs	r3, #0
 800e662:	9304      	str	r3, [sp, #16]
 800e664:	2310      	movs	r3, #16
 800e666:	9303      	str	r3, [sp, #12]
 800e668:	2301      	movs	r3, #1
 800e66a:	9302      	str	r3, [sp, #8]
 800e66c:	2300      	movs	r3, #0
 800e66e:	9301      	str	r3, [sp, #4]
 800e670:	2304      	movs	r3, #4
 800e672:	9300      	str	r3, [sp, #0]
 800e674:	460b      	mov	r3, r1
 800e676:	2102      	movs	r1, #2
 800e678:	f008 fe52 	bl	8017320 <aci_gatt_add_char>
 800e67c:	4603      	mov	r3, r0
 800e67e:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service2_Char3 */
  /**
   *  Log_Temp
   */
  COPY_LOG_TEMP_UUID(uuid.Char_UUID_128);
 800e680:	2363      	movs	r3, #99	@ 0x63
 800e682:	713b      	strb	r3, [r7, #4]
 800e684:	23bf      	movs	r3, #191	@ 0xbf
 800e686:	717b      	strb	r3, [r7, #5]
 800e688:	23d4      	movs	r3, #212	@ 0xd4
 800e68a:	71bb      	strb	r3, [r7, #6]
 800e68c:	2343      	movs	r3, #67	@ 0x43
 800e68e:	71fb      	strb	r3, [r7, #7]
 800e690:	2305      	movs	r3, #5
 800e692:	723b      	strb	r3, [r7, #8]
 800e694:	238b      	movs	r3, #139	@ 0x8b
 800e696:	727b      	strb	r3, [r7, #9]
 800e698:	231d      	movs	r3, #29
 800e69a:	72bb      	strb	r3, [r7, #10]
 800e69c:	238b      	movs	r3, #139	@ 0x8b
 800e69e:	72fb      	strb	r3, [r7, #11]
 800e6a0:	23a4      	movs	r3, #164	@ 0xa4
 800e6a2:	733b      	strb	r3, [r7, #12]
 800e6a4:	2344      	movs	r3, #68	@ 0x44
 800e6a6:	737b      	strb	r3, [r7, #13]
 800e6a8:	2316      	movs	r3, #22
 800e6aa:	73bb      	strb	r3, [r7, #14]
 800e6ac:	236a      	movs	r3, #106	@ 0x6a
 800e6ae:	73fb      	strb	r3, [r7, #15]
 800e6b0:	23c1      	movs	r3, #193	@ 0xc1
 800e6b2:	743b      	strb	r3, [r7, #16]
 800e6b4:	23e7      	movs	r3, #231	@ 0xe7
 800e6b6:	747b      	strb	r3, [r7, #17]
 800e6b8:	2372      	movs	r3, #114	@ 0x72
 800e6ba:	74bb      	strb	r3, [r7, #18]
 800e6bc:	23d5      	movs	r3, #213	@ 0xd5
 800e6be:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomTempHdle,
 800e6c0:	4b2d      	ldr	r3, [pc, #180]	@ (800e778 <SVCCTL_InitCustomSvc+0x378>)
 800e6c2:	8898      	ldrh	r0, [r3, #4]
 800e6c4:	4b36      	ldr	r3, [pc, #216]	@ (800e7a0 <SVCCTL_InitCustomSvc+0x3a0>)
 800e6c6:	781b      	ldrb	r3, [r3, #0]
 800e6c8:	4619      	mov	r1, r3
 800e6ca:	1d3a      	adds	r2, r7, #4
 800e6cc:	4b35      	ldr	r3, [pc, #212]	@ (800e7a4 <SVCCTL_InitCustomSvc+0x3a4>)
 800e6ce:	9305      	str	r3, [sp, #20]
 800e6d0:	2301      	movs	r3, #1
 800e6d2:	9304      	str	r3, [sp, #16]
 800e6d4:	2310      	movs	r3, #16
 800e6d6:	9303      	str	r3, [sp, #12]
 800e6d8:	2304      	movs	r3, #4
 800e6da:	9302      	str	r3, [sp, #8]
 800e6dc:	2300      	movs	r3, #0
 800e6de:	9301      	str	r3, [sp, #4]
 800e6e0:	2310      	movs	r3, #16
 800e6e2:	9300      	str	r3, [sp, #0]
 800e6e4:	460b      	mov	r3, r1
 800e6e6:	2102      	movs	r1, #2
 800e6e8:	f008 fe1a 	bl	8017320 <aci_gatt_add_char>
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service2_Char4 */
  /**
   *  Range_Notification
   */
  COPY_RANGE_NOTIFICATION_UUID(uuid.Char_UUID_128);
 800e6f0:	23b3      	movs	r3, #179	@ 0xb3
 800e6f2:	713b      	strb	r3, [r7, #4]
 800e6f4:	234d      	movs	r3, #77	@ 0x4d
 800e6f6:	717b      	strb	r3, [r7, #5]
 800e6f8:	235b      	movs	r3, #91	@ 0x5b
 800e6fa:	71bb      	strb	r3, [r7, #6]
 800e6fc:	23fa      	movs	r3, #250	@ 0xfa
 800e6fe:	71fb      	strb	r3, [r7, #7]
 800e700:	23b1      	movs	r3, #177	@ 0xb1
 800e702:	723b      	strb	r3, [r7, #8]
 800e704:	235a      	movs	r3, #90	@ 0x5a
 800e706:	727b      	strb	r3, [r7, #9]
 800e708:	2345      	movs	r3, #69	@ 0x45
 800e70a:	72bb      	strb	r3, [r7, #10]
 800e70c:	23b9      	movs	r3, #185	@ 0xb9
 800e70e:	72fb      	strb	r3, [r7, #11]
 800e710:	2313      	movs	r3, #19
 800e712:	733b      	strb	r3, [r7, #12]
 800e714:	234f      	movs	r3, #79	@ 0x4f
 800e716:	737b      	strb	r3, [r7, #13]
 800e718:	236c      	movs	r3, #108	@ 0x6c
 800e71a:	73bb      	strb	r3, [r7, #14]
 800e71c:	23d9      	movs	r3, #217	@ 0xd9
 800e71e:	73fb      	strb	r3, [r7, #15]
 800e720:	2307      	movs	r3, #7
 800e722:	743b      	strb	r3, [r7, #16]
 800e724:	2348      	movs	r3, #72	@ 0x48
 800e726:	747b      	strb	r3, [r7, #17]
 800e728:	231a      	movs	r3, #26
 800e72a:	74bb      	strb	r3, [r7, #18]
 800e72c:	235a      	movs	r3, #90	@ 0x5a
 800e72e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomTempHdle,
 800e730:	4b11      	ldr	r3, [pc, #68]	@ (800e778 <SVCCTL_InitCustomSvc+0x378>)
 800e732:	8898      	ldrh	r0, [r3, #4]
 800e734:	4b1c      	ldr	r3, [pc, #112]	@ (800e7a8 <SVCCTL_InitCustomSvc+0x3a8>)
 800e736:	781b      	ldrb	r3, [r3, #0]
 800e738:	4619      	mov	r1, r3
 800e73a:	1d3a      	adds	r2, r7, #4
 800e73c:	4b1b      	ldr	r3, [pc, #108]	@ (800e7ac <SVCCTL_InitCustomSvc+0x3ac>)
 800e73e:	9305      	str	r3, [sp, #20]
 800e740:	2300      	movs	r3, #0
 800e742:	9304      	str	r3, [sp, #16]
 800e744:	2310      	movs	r3, #16
 800e746:	9303      	str	r3, [sp, #12]
 800e748:	2300      	movs	r3, #0
 800e74a:	9302      	str	r3, [sp, #8]
 800e74c:	2300      	movs	r3, #0
 800e74e:	9301      	str	r3, [sp, #4]
 800e750:	2310      	movs	r3, #16
 800e752:	9300      	str	r3, [sp, #0]
 800e754:	460b      	mov	r3, r1
 800e756:	2102      	movs	r1, #2
 800e758:	f008 fde2 	bl	8017320 <aci_gatt_add_char>
 800e75c:	4603      	mov	r3, r0
 800e75e:	75fb      	strb	r3, [r7, #23]
   *                              = 14
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 14;
 800e760:	230e      	movs	r3, #14
 800e762:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
	/* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_UV_SENSOR_UUID(uuid.Char_UUID_128);
 800e764:	2302      	movs	r3, #2
 800e766:	713b      	strb	r3, [r7, #4]
 800e768:	2300      	movs	r3, #0
 800e76a:	717b      	strb	r3, [r7, #5]
 800e76c:	2312      	movs	r3, #18
 800e76e:	71bb      	strb	r3, [r7, #6]
 800e770:	e01e      	b.n	800e7b0 <SVCCTL_InitCustomSvc+0x3b0>
 800e772:	bf00      	nop
 800e774:	0800de99 	.word	0x0800de99
 800e778:	200008f0 	.word	0x200008f0
 800e77c:	20000068 	.word	0x20000068
 800e780:	200008f2 	.word	0x200008f2
 800e784:	200008f4 	.word	0x200008f4
 800e788:	20000069 	.word	0x20000069
 800e78c:	200008f6 	.word	0x200008f6
 800e790:	2000006a 	.word	0x2000006a
 800e794:	200008f8 	.word	0x200008f8
 800e798:	2000006b 	.word	0x2000006b
 800e79c:	200008fa 	.word	0x200008fa
 800e7a0:	2000006c 	.word	0x2000006c
 800e7a4:	200008fc 	.word	0x200008fc
 800e7a8:	2000006d 	.word	0x2000006d
 800e7ac:	200008fe 	.word	0x200008fe
 800e7b0:	23ac      	movs	r3, #172	@ 0xac
 800e7b2:	71fb      	strb	r3, [r7, #7]
 800e7b4:	2342      	movs	r3, #66	@ 0x42
 800e7b6:	723b      	strb	r3, [r7, #8]
 800e7b8:	2302      	movs	r3, #2
 800e7ba:	727b      	strb	r3, [r7, #9]
 800e7bc:	2356      	movs	r3, #86	@ 0x56
 800e7be:	72bb      	strb	r3, [r7, #10]
 800e7c0:	23be      	movs	r3, #190	@ 0xbe
 800e7c2:	72fb      	strb	r3, [r7, #11]
 800e7c4:	23ee      	movs	r3, #238	@ 0xee
 800e7c6:	733b      	strb	r3, [r7, #12]
 800e7c8:	2311      	movs	r3, #17
 800e7ca:	737b      	strb	r3, [r7, #13]
 800e7cc:	23b8      	movs	r3, #184	@ 0xb8
 800e7ce:	73bb      	strb	r3, [r7, #14]
 800e7d0:	232f      	movs	r3, #47	@ 0x2f
 800e7d2:	73fb      	strb	r3, [r7, #15]
 800e7d4:	2356      	movs	r3, #86	@ 0x56
 800e7d6:	743b      	strb	r3, [r7, #16]
 800e7d8:	235b      	movs	r3, #91	@ 0x5b
 800e7da:	747b      	strb	r3, [r7, #17]
 800e7dc:	2359      	movs	r3, #89	@ 0x59
 800e7de:	74bb      	strb	r3, [r7, #18]
 800e7e0:	23fe      	movs	r3, #254	@ 0xfe
 800e7e2:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800e7e4:	7dbb      	ldrb	r3, [r7, #22]
 800e7e6:	1d39      	adds	r1, r7, #4
 800e7e8:	4ad7      	ldr	r2, [pc, #860]	@ (800eb48 <SVCCTL_InitCustomSvc+0x748>)
 800e7ea:	9200      	str	r2, [sp, #0]
 800e7ec:	2201      	movs	r2, #1
 800e7ee:	2002      	movs	r0, #2
 800e7f0:	f008 fcc0 	bl	8017174 <aci_gatt_add_service>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  UV_Value
   */
  COPY_UV_VALUE_UUID(uuid.Char_UUID_128);
 800e7f8:	2302      	movs	r3, #2
 800e7fa:	713b      	strb	r3, [r7, #4]
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	717b      	strb	r3, [r7, #5]
 800e800:	2312      	movs	r3, #18
 800e802:	71bb      	strb	r3, [r7, #6]
 800e804:	23ac      	movs	r3, #172	@ 0xac
 800e806:	71fb      	strb	r3, [r7, #7]
 800e808:	2342      	movs	r3, #66	@ 0x42
 800e80a:	723b      	strb	r3, [r7, #8]
 800e80c:	2302      	movs	r3, #2
 800e80e:	727b      	strb	r3, [r7, #9]
 800e810:	2356      	movs	r3, #86	@ 0x56
 800e812:	72bb      	strb	r3, [r7, #10]
 800e814:	23be      	movs	r3, #190	@ 0xbe
 800e816:	72fb      	strb	r3, [r7, #11]
 800e818:	23ee      	movs	r3, #238	@ 0xee
 800e81a:	733b      	strb	r3, [r7, #12]
 800e81c:	2311      	movs	r3, #17
 800e81e:	737b      	strb	r3, [r7, #13]
 800e820:	23b8      	movs	r3, #184	@ 0xb8
 800e822:	73bb      	strb	r3, [r7, #14]
 800e824:	232f      	movs	r3, #47	@ 0x2f
 800e826:	73fb      	strb	r3, [r7, #15]
 800e828:	2330      	movs	r3, #48	@ 0x30
 800e82a:	743b      	strb	r3, [r7, #16]
 800e82c:	235e      	movs	r3, #94	@ 0x5e
 800e82e:	747b      	strb	r3, [r7, #17]
 800e830:	2359      	movs	r3, #89	@ 0x59
 800e832:	74bb      	strb	r3, [r7, #18]
 800e834:	23fe      	movs	r3, #254	@ 0xfe
 800e836:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomUv_SHdle,
 800e838:	4bc4      	ldr	r3, [pc, #784]	@ (800eb4c <SVCCTL_InitCustomSvc+0x74c>)
 800e83a:	8a18      	ldrh	r0, [r3, #16]
 800e83c:	4bc4      	ldr	r3, [pc, #784]	@ (800eb50 <SVCCTL_InitCustomSvc+0x750>)
 800e83e:	781b      	ldrb	r3, [r3, #0]
 800e840:	4619      	mov	r1, r3
 800e842:	1d3a      	adds	r2, r7, #4
 800e844:	4bc3      	ldr	r3, [pc, #780]	@ (800eb54 <SVCCTL_InitCustomSvc+0x754>)
 800e846:	9305      	str	r3, [sp, #20]
 800e848:	2300      	movs	r3, #0
 800e84a:	9304      	str	r3, [sp, #16]
 800e84c:	2310      	movs	r3, #16
 800e84e:	9303      	str	r3, [sp, #12]
 800e850:	2300      	movs	r3, #0
 800e852:	9302      	str	r3, [sp, #8]
 800e854:	2300      	movs	r3, #0
 800e856:	9301      	str	r3, [sp, #4]
 800e858:	2310      	movs	r3, #16
 800e85a:	9300      	str	r3, [sp, #0]
 800e85c:	460b      	mov	r3, r1
 800e85e:	2102      	movs	r1, #2
 800e860:	f008 fd5e 	bl	8017320 <aci_gatt_add_char>
 800e864:	4603      	mov	r3, r0
 800e866:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service3_Char1 */
  /**
   *  UV_Log
   */
  COPY_UV_LOG_UUID(uuid.Char_UUID_128);
 800e868:	2302      	movs	r3, #2
 800e86a:	713b      	strb	r3, [r7, #4]
 800e86c:	2300      	movs	r3, #0
 800e86e:	717b      	strb	r3, [r7, #5]
 800e870:	2312      	movs	r3, #18
 800e872:	71bb      	strb	r3, [r7, #6]
 800e874:	23ac      	movs	r3, #172	@ 0xac
 800e876:	71fb      	strb	r3, [r7, #7]
 800e878:	2342      	movs	r3, #66	@ 0x42
 800e87a:	723b      	strb	r3, [r7, #8]
 800e87c:	2302      	movs	r3, #2
 800e87e:	727b      	strb	r3, [r7, #9]
 800e880:	2356      	movs	r3, #86	@ 0x56
 800e882:	72bb      	strb	r3, [r7, #10]
 800e884:	23be      	movs	r3, #190	@ 0xbe
 800e886:	72fb      	strb	r3, [r7, #11]
 800e888:	23ee      	movs	r3, #238	@ 0xee
 800e88a:	733b      	strb	r3, [r7, #12]
 800e88c:	2311      	movs	r3, #17
 800e88e:	737b      	strb	r3, [r7, #13]
 800e890:	23b8      	movs	r3, #184	@ 0xb8
 800e892:	73bb      	strb	r3, [r7, #14]
 800e894:	232f      	movs	r3, #47	@ 0x2f
 800e896:	73fb      	strb	r3, [r7, #15]
 800e898:	2384      	movs	r3, #132	@ 0x84
 800e89a:	743b      	strb	r3, [r7, #16]
 800e89c:	235f      	movs	r3, #95	@ 0x5f
 800e89e:	747b      	strb	r3, [r7, #17]
 800e8a0:	2359      	movs	r3, #89	@ 0x59
 800e8a2:	74bb      	strb	r3, [r7, #18]
 800e8a4:	23fe      	movs	r3, #254	@ 0xfe
 800e8a6:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomUv_SHdle,
 800e8a8:	4ba8      	ldr	r3, [pc, #672]	@ (800eb4c <SVCCTL_InitCustomSvc+0x74c>)
 800e8aa:	8a18      	ldrh	r0, [r3, #16]
 800e8ac:	4baa      	ldr	r3, [pc, #680]	@ (800eb58 <SVCCTL_InitCustomSvc+0x758>)
 800e8ae:	781b      	ldrb	r3, [r3, #0]
 800e8b0:	4619      	mov	r1, r3
 800e8b2:	1d3a      	adds	r2, r7, #4
 800e8b4:	4ba9      	ldr	r3, [pc, #676]	@ (800eb5c <SVCCTL_InitCustomSvc+0x75c>)
 800e8b6:	9305      	str	r3, [sp, #20]
 800e8b8:	2301      	movs	r3, #1
 800e8ba:	9304      	str	r3, [sp, #16]
 800e8bc:	2310      	movs	r3, #16
 800e8be:	9303      	str	r3, [sp, #12]
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	9302      	str	r3, [sp, #8]
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	9301      	str	r3, [sp, #4]
 800e8c8:	2310      	movs	r3, #16
 800e8ca:	9300      	str	r3, [sp, #0]
 800e8cc:	460b      	mov	r3, r1
 800e8ce:	2102      	movs	r1, #2
 800e8d0:	f008 fd26 	bl	8017320 <aci_gatt_add_char>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service3_Char2 */
  /**
   *  BLE_CFG_OTA_REBOOT_CHAR
   */
  COPY_BLE_CFG_OTA_REBOOT_CHAR_UUID(uuid.Char_UUID_128);
 800e8d8:	2319      	movs	r3, #25
 800e8da:	713b      	strb	r3, [r7, #4]
 800e8dc:	23ed      	movs	r3, #237	@ 0xed
 800e8de:	717b      	strb	r3, [r7, #5]
 800e8e0:	2382      	movs	r3, #130	@ 0x82
 800e8e2:	71bb      	strb	r3, [r7, #6]
 800e8e4:	23ae      	movs	r3, #174	@ 0xae
 800e8e6:	71fb      	strb	r3, [r7, #7]
 800e8e8:	23ed      	movs	r3, #237	@ 0xed
 800e8ea:	723b      	strb	r3, [r7, #8]
 800e8ec:	2321      	movs	r3, #33	@ 0x21
 800e8ee:	727b      	strb	r3, [r7, #9]
 800e8f0:	234c      	movs	r3, #76	@ 0x4c
 800e8f2:	72bb      	strb	r3, [r7, #10]
 800e8f4:	239d      	movs	r3, #157	@ 0x9d
 800e8f6:	72fb      	strb	r3, [r7, #11]
 800e8f8:	2341      	movs	r3, #65	@ 0x41
 800e8fa:	733b      	strb	r3, [r7, #12]
 800e8fc:	2345      	movs	r3, #69	@ 0x45
 800e8fe:	737b      	strb	r3, [r7, #13]
 800e900:	2322      	movs	r3, #34	@ 0x22
 800e902:	73bb      	strb	r3, [r7, #14]
 800e904:	238e      	movs	r3, #142	@ 0x8e
 800e906:	73fb      	strb	r3, [r7, #15]
 800e908:	2311      	movs	r3, #17
 800e90a:	743b      	strb	r3, [r7, #16]
 800e90c:	23fe      	movs	r3, #254	@ 0xfe
 800e90e:	747b      	strb	r3, [r7, #17]
 800e910:	2300      	movs	r3, #0
 800e912:	74bb      	strb	r3, [r7, #18]
 800e914:	2300      	movs	r3, #0
 800e916:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomUv_SHdle,
 800e918:	4b8c      	ldr	r3, [pc, #560]	@ (800eb4c <SVCCTL_InitCustomSvc+0x74c>)
 800e91a:	8a18      	ldrh	r0, [r3, #16]
 800e91c:	4b90      	ldr	r3, [pc, #576]	@ (800eb60 <SVCCTL_InitCustomSvc+0x760>)
 800e91e:	781b      	ldrb	r3, [r3, #0]
 800e920:	4619      	mov	r1, r3
 800e922:	1d3a      	adds	r2, r7, #4
 800e924:	4b8f      	ldr	r3, [pc, #572]	@ (800eb64 <SVCCTL_InitCustomSvc+0x764>)
 800e926:	9305      	str	r3, [sp, #20]
 800e928:	2300      	movs	r3, #0
 800e92a:	9304      	str	r3, [sp, #16]
 800e92c:	2310      	movs	r3, #16
 800e92e:	9303      	str	r3, [sp, #12]
 800e930:	2301      	movs	r3, #1
 800e932:	9302      	str	r3, [sp, #8]
 800e934:	2300      	movs	r3, #0
 800e936:	9301      	str	r3, [sp, #4]
 800e938:	2304      	movs	r3, #4
 800e93a:	9300      	str	r3, [sp, #0]
 800e93c:	460b      	mov	r3, r1
 800e93e:	2102      	movs	r1, #2
 800e940:	f008 fcee 	bl	8017320 <aci_gatt_add_char>
 800e944:	4603      	mov	r3, r0
 800e946:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service3_Char3 */
  /**
   *  Ambient_Temperature
   */
  COPY_AMBIENT_TEMPERATURE_UUID(uuid.Char_UUID_128);
 800e948:	2302      	movs	r3, #2
 800e94a:	713b      	strb	r3, [r7, #4]
 800e94c:	2300      	movs	r3, #0
 800e94e:	717b      	strb	r3, [r7, #5]
 800e950:	2312      	movs	r3, #18
 800e952:	71bb      	strb	r3, [r7, #6]
 800e954:	23ac      	movs	r3, #172	@ 0xac
 800e956:	71fb      	strb	r3, [r7, #7]
 800e958:	2342      	movs	r3, #66	@ 0x42
 800e95a:	723b      	strb	r3, [r7, #8]
 800e95c:	2302      	movs	r3, #2
 800e95e:	727b      	strb	r3, [r7, #9]
 800e960:	2356      	movs	r3, #86	@ 0x56
 800e962:	72bb      	strb	r3, [r7, #10]
 800e964:	23be      	movs	r3, #190	@ 0xbe
 800e966:	72fb      	strb	r3, [r7, #11]
 800e968:	23ee      	movs	r3, #238	@ 0xee
 800e96a:	733b      	strb	r3, [r7, #12]
 800e96c:	2311      	movs	r3, #17
 800e96e:	737b      	strb	r3, [r7, #13]
 800e970:	23b8      	movs	r3, #184	@ 0xb8
 800e972:	73bb      	strb	r3, [r7, #14]
 800e974:	232f      	movs	r3, #47	@ 0x2f
 800e976:	73fb      	strb	r3, [r7, #15]
 800e978:	236a      	movs	r3, #106	@ 0x6a
 800e97a:	743b      	strb	r3, [r7, #16]
 800e97c:	2388      	movs	r3, #136	@ 0x88
 800e97e:	747b      	strb	r3, [r7, #17]
 800e980:	2359      	movs	r3, #89	@ 0x59
 800e982:	74bb      	strb	r3, [r7, #18]
 800e984:	23fe      	movs	r3, #254	@ 0xfe
 800e986:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomUv_SHdle,
 800e988:	4b70      	ldr	r3, [pc, #448]	@ (800eb4c <SVCCTL_InitCustomSvc+0x74c>)
 800e98a:	8a18      	ldrh	r0, [r3, #16]
 800e98c:	4b76      	ldr	r3, [pc, #472]	@ (800eb68 <SVCCTL_InitCustomSvc+0x768>)
 800e98e:	781b      	ldrb	r3, [r3, #0]
 800e990:	4619      	mov	r1, r3
 800e992:	1d3a      	adds	r2, r7, #4
 800e994:	4b75      	ldr	r3, [pc, #468]	@ (800eb6c <SVCCTL_InitCustomSvc+0x76c>)
 800e996:	9305      	str	r3, [sp, #20]
 800e998:	2300      	movs	r3, #0
 800e99a:	9304      	str	r3, [sp, #16]
 800e99c:	2310      	movs	r3, #16
 800e99e:	9303      	str	r3, [sp, #12]
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	9302      	str	r3, [sp, #8]
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	9301      	str	r3, [sp, #4]
 800e9a8:	2310      	movs	r3, #16
 800e9aa:	9300      	str	r3, [sp, #0]
 800e9ac:	460b      	mov	r3, r1
 800e9ae:	2102      	movs	r1, #2
 800e9b0:	f008 fcb6 	bl	8017320 <aci_gatt_add_char>
 800e9b4:	4603      	mov	r3, r0
 800e9b6:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service3_Char4 */
  /**
   *  TIME_INTERVAL
   */
  COPY_TIME_INTERVAL_UUID(uuid.Char_UUID_128);
 800e9b8:	2302      	movs	r3, #2
 800e9ba:	713b      	strb	r3, [r7, #4]
 800e9bc:	2300      	movs	r3, #0
 800e9be:	717b      	strb	r3, [r7, #5]
 800e9c0:	2312      	movs	r3, #18
 800e9c2:	71bb      	strb	r3, [r7, #6]
 800e9c4:	23ac      	movs	r3, #172	@ 0xac
 800e9c6:	71fb      	strb	r3, [r7, #7]
 800e9c8:	2342      	movs	r3, #66	@ 0x42
 800e9ca:	723b      	strb	r3, [r7, #8]
 800e9cc:	2302      	movs	r3, #2
 800e9ce:	727b      	strb	r3, [r7, #9]
 800e9d0:	2356      	movs	r3, #86	@ 0x56
 800e9d2:	72bb      	strb	r3, [r7, #10]
 800e9d4:	23be      	movs	r3, #190	@ 0xbe
 800e9d6:	72fb      	strb	r3, [r7, #11]
 800e9d8:	23ee      	movs	r3, #238	@ 0xee
 800e9da:	733b      	strb	r3, [r7, #12]
 800e9dc:	2311      	movs	r3, #17
 800e9de:	737b      	strb	r3, [r7, #13]
 800e9e0:	23b8      	movs	r3, #184	@ 0xb8
 800e9e2:	73bb      	strb	r3, [r7, #14]
 800e9e4:	232f      	movs	r3, #47	@ 0x2f
 800e9e6:	73fb      	strb	r3, [r7, #15]
 800e9e8:	2384      	movs	r3, #132	@ 0x84
 800e9ea:	743b      	strb	r3, [r7, #16]
 800e9ec:	239f      	movs	r3, #159	@ 0x9f
 800e9ee:	747b      	strb	r3, [r7, #17]
 800e9f0:	2359      	movs	r3, #89	@ 0x59
 800e9f2:	74bb      	strb	r3, [r7, #18]
 800e9f4:	23fe      	movs	r3, #254	@ 0xfe
 800e9f6:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomUv_SHdle,
 800e9f8:	4b54      	ldr	r3, [pc, #336]	@ (800eb4c <SVCCTL_InitCustomSvc+0x74c>)
 800e9fa:	8a18      	ldrh	r0, [r3, #16]
 800e9fc:	4b5c      	ldr	r3, [pc, #368]	@ (800eb70 <SVCCTL_InitCustomSvc+0x770>)
 800e9fe:	781b      	ldrb	r3, [r3, #0]
 800ea00:	4619      	mov	r1, r3
 800ea02:	1d3a      	adds	r2, r7, #4
 800ea04:	4b5b      	ldr	r3, [pc, #364]	@ (800eb74 <SVCCTL_InitCustomSvc+0x774>)
 800ea06:	9305      	str	r3, [sp, #20]
 800ea08:	2300      	movs	r3, #0
 800ea0a:	9304      	str	r3, [sp, #16]
 800ea0c:	2310      	movs	r3, #16
 800ea0e:	9303      	str	r3, [sp, #12]
 800ea10:	2305      	movs	r3, #5
 800ea12:	9302      	str	r3, [sp, #8]
 800ea14:	2300      	movs	r3, #0
 800ea16:	9301      	str	r3, [sp, #4]
 800ea18:	2306      	movs	r3, #6
 800ea1a:	9300      	str	r3, [sp, #0]
 800ea1c:	460b      	mov	r3, r1
 800ea1e:	2102      	movs	r1, #2
 800ea20:	f008 fc7e 	bl	8017320 <aci_gatt_add_char>
 800ea24:	4603      	mov	r3, r0
 800ea26:	75fb      	strb	r3, [r7, #23]
   *                              = 13
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 13;
 800ea28:	230d      	movs	r3, #13
 800ea2a:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
	/* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_UTILITY_UUID(uuid.Char_UUID_128);
 800ea2c:	2302      	movs	r3, #2
 800ea2e:	713b      	strb	r3, [r7, #4]
 800ea30:	2300      	movs	r3, #0
 800ea32:	717b      	strb	r3, [r7, #5]
 800ea34:	2312      	movs	r3, #18
 800ea36:	71bb      	strb	r3, [r7, #6]
 800ea38:	23ac      	movs	r3, #172	@ 0xac
 800ea3a:	71fb      	strb	r3, [r7, #7]
 800ea3c:	2342      	movs	r3, #66	@ 0x42
 800ea3e:	723b      	strb	r3, [r7, #8]
 800ea40:	2302      	movs	r3, #2
 800ea42:	727b      	strb	r3, [r7, #9]
 800ea44:	2356      	movs	r3, #86	@ 0x56
 800ea46:	72bb      	strb	r3, [r7, #10]
 800ea48:	23be      	movs	r3, #190	@ 0xbe
 800ea4a:	72fb      	strb	r3, [r7, #11]
 800ea4c:	23ee      	movs	r3, #238	@ 0xee
 800ea4e:	733b      	strb	r3, [r7, #12]
 800ea50:	2311      	movs	r3, #17
 800ea52:	737b      	strb	r3, [r7, #13]
 800ea54:	23b8      	movs	r3, #184	@ 0xb8
 800ea56:	73bb      	strb	r3, [r7, #14]
 800ea58:	232f      	movs	r3, #47	@ 0x2f
 800ea5a:	73fb      	strb	r3, [r7, #15]
 800ea5c:	23c2      	movs	r3, #194	@ 0xc2
 800ea5e:	743b      	strb	r3, [r7, #16]
 800ea60:	2371      	movs	r3, #113	@ 0x71
 800ea62:	747b      	strb	r3, [r7, #17]
 800ea64:	2359      	movs	r3, #89	@ 0x59
 800ea66:	74bb      	strb	r3, [r7, #18]
 800ea68:	23fe      	movs	r3, #254	@ 0xfe
 800ea6a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800ea6c:	7dbb      	ldrb	r3, [r7, #22]
 800ea6e:	1d39      	adds	r1, r7, #4
 800ea70:	4a41      	ldr	r2, [pc, #260]	@ (800eb78 <SVCCTL_InitCustomSvc+0x778>)
 800ea72:	9200      	str	r2, [sp, #0]
 800ea74:	2201      	movs	r2, #1
 800ea76:	2002      	movs	r0, #2
 800ea78:	f008 fb7c 	bl	8017174 <aci_gatt_add_service>
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  Acclerometer
   */
  COPY_ACCLEROMETER_UUID(uuid.Char_UUID_128);
 800ea80:	2302      	movs	r3, #2
 800ea82:	713b      	strb	r3, [r7, #4]
 800ea84:	2300      	movs	r3, #0
 800ea86:	717b      	strb	r3, [r7, #5]
 800ea88:	2312      	movs	r3, #18
 800ea8a:	71bb      	strb	r3, [r7, #6]
 800ea8c:	23ac      	movs	r3, #172	@ 0xac
 800ea8e:	71fb      	strb	r3, [r7, #7]
 800ea90:	2342      	movs	r3, #66	@ 0x42
 800ea92:	723b      	strb	r3, [r7, #8]
 800ea94:	2302      	movs	r3, #2
 800ea96:	727b      	strb	r3, [r7, #9]
 800ea98:	2356      	movs	r3, #86	@ 0x56
 800ea9a:	72bb      	strb	r3, [r7, #10]
 800ea9c:	23be      	movs	r3, #190	@ 0xbe
 800ea9e:	72fb      	strb	r3, [r7, #11]
 800eaa0:	23ee      	movs	r3, #238	@ 0xee
 800eaa2:	733b      	strb	r3, [r7, #12]
 800eaa4:	2311      	movs	r3, #17
 800eaa6:	737b      	strb	r3, [r7, #13]
 800eaa8:	23b8      	movs	r3, #184	@ 0xb8
 800eaaa:	73bb      	strb	r3, [r7, #14]
 800eaac:	232f      	movs	r3, #47	@ 0x2f
 800eaae:	73fb      	strb	r3, [r7, #15]
 800eab0:	23c6      	movs	r3, #198	@ 0xc6
 800eab2:	743b      	strb	r3, [r7, #16]
 800eab4:	2372      	movs	r3, #114	@ 0x72
 800eab6:	747b      	strb	r3, [r7, #17]
 800eab8:	2359      	movs	r3, #89	@ 0x59
 800eaba:	74bb      	strb	r3, [r7, #18]
 800eabc:	23fe      	movs	r3, #254	@ 0xfe
 800eabe:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomUtHdle,
 800eac0:	4b22      	ldr	r3, [pc, #136]	@ (800eb4c <SVCCTL_InitCustomSvc+0x74c>)
 800eac2:	8b98      	ldrh	r0, [r3, #28]
 800eac4:	4b2d      	ldr	r3, [pc, #180]	@ (800eb7c <SVCCTL_InitCustomSvc+0x77c>)
 800eac6:	781b      	ldrb	r3, [r3, #0]
 800eac8:	4619      	mov	r1, r3
 800eaca:	1d3a      	adds	r2, r7, #4
 800eacc:	4b2c      	ldr	r3, [pc, #176]	@ (800eb80 <SVCCTL_InitCustomSvc+0x780>)
 800eace:	9305      	str	r3, [sp, #20]
 800ead0:	2300      	movs	r3, #0
 800ead2:	9304      	str	r3, [sp, #16]
 800ead4:	2310      	movs	r3, #16
 800ead6:	9303      	str	r3, [sp, #12]
 800ead8:	2304      	movs	r3, #4
 800eada:	9302      	str	r3, [sp, #8]
 800eadc:	2300      	movs	r3, #0
 800eade:	9301      	str	r3, [sp, #4]
 800eae0:	2302      	movs	r3, #2
 800eae2:	9300      	str	r3, [sp, #0]
 800eae4:	460b      	mov	r3, r1
 800eae6:	2102      	movs	r1, #2
 800eae8:	f008 fc1a 	bl	8017320 <aci_gatt_add_char>
 800eaec:	4603      	mov	r3, r0
 800eaee:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service4_Char1 */
  /**
   *  Time_Date
   */
  COPY_TIME_DATE_UUID(uuid.Char_UUID_128);
 800eaf0:	2302      	movs	r3, #2
 800eaf2:	713b      	strb	r3, [r7, #4]
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	717b      	strb	r3, [r7, #5]
 800eaf8:	2312      	movs	r3, #18
 800eafa:	71bb      	strb	r3, [r7, #6]
 800eafc:	23ac      	movs	r3, #172	@ 0xac
 800eafe:	71fb      	strb	r3, [r7, #7]
 800eb00:	2342      	movs	r3, #66	@ 0x42
 800eb02:	723b      	strb	r3, [r7, #8]
 800eb04:	2302      	movs	r3, #2
 800eb06:	727b      	strb	r3, [r7, #9]
 800eb08:	2356      	movs	r3, #86	@ 0x56
 800eb0a:	72bb      	strb	r3, [r7, #10]
 800eb0c:	23be      	movs	r3, #190	@ 0xbe
 800eb0e:	72fb      	strb	r3, [r7, #11]
 800eb10:	23ee      	movs	r3, #238	@ 0xee
 800eb12:	733b      	strb	r3, [r7, #12]
 800eb14:	2311      	movs	r3, #17
 800eb16:	737b      	strb	r3, [r7, #13]
 800eb18:	23b8      	movs	r3, #184	@ 0xb8
 800eb1a:	73bb      	strb	r3, [r7, #14]
 800eb1c:	232f      	movs	r3, #47	@ 0x2f
 800eb1e:	73fb      	strb	r3, [r7, #15]
 800eb20:	2324      	movs	r3, #36	@ 0x24
 800eb22:	743b      	strb	r3, [r7, #16]
 800eb24:	2374      	movs	r3, #116	@ 0x74
 800eb26:	747b      	strb	r3, [r7, #17]
 800eb28:	2359      	movs	r3, #89	@ 0x59
 800eb2a:	74bb      	strb	r3, [r7, #18]
 800eb2c:	23fe      	movs	r3, #254	@ 0xfe
 800eb2e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomUtHdle,
 800eb30:	4b06      	ldr	r3, [pc, #24]	@ (800eb4c <SVCCTL_InitCustomSvc+0x74c>)
 800eb32:	8b98      	ldrh	r0, [r3, #28]
 800eb34:	4b13      	ldr	r3, [pc, #76]	@ (800eb84 <SVCCTL_InitCustomSvc+0x784>)
 800eb36:	781b      	ldrb	r3, [r3, #0]
 800eb38:	4619      	mov	r1, r3
 800eb3a:	1d3a      	adds	r2, r7, #4
 800eb3c:	4b12      	ldr	r3, [pc, #72]	@ (800eb88 <SVCCTL_InitCustomSvc+0x788>)
 800eb3e:	9305      	str	r3, [sp, #20]
 800eb40:	2300      	movs	r3, #0
 800eb42:	9304      	str	r3, [sp, #16]
 800eb44:	e022      	b.n	800eb8c <SVCCTL_InitCustomSvc+0x78c>
 800eb46:	bf00      	nop
 800eb48:	20000900 	.word	0x20000900
 800eb4c:	200008f0 	.word	0x200008f0
 800eb50:	2000006e 	.word	0x2000006e
 800eb54:	20000902 	.word	0x20000902
 800eb58:	2000006f 	.word	0x2000006f
 800eb5c:	20000904 	.word	0x20000904
 800eb60:	20000070 	.word	0x20000070
 800eb64:	20000906 	.word	0x20000906
 800eb68:	20000071 	.word	0x20000071
 800eb6c:	20000908 	.word	0x20000908
 800eb70:	20000072 	.word	0x20000072
 800eb74:	2000090a 	.word	0x2000090a
 800eb78:	2000090c 	.word	0x2000090c
 800eb7c:	20000073 	.word	0x20000073
 800eb80:	2000090e 	.word	0x2000090e
 800eb84:	20000074 	.word	0x20000074
 800eb88:	20000910 	.word	0x20000910
 800eb8c:	2310      	movs	r3, #16
 800eb8e:	9303      	str	r3, [sp, #12]
 800eb90:	2305      	movs	r3, #5
 800eb92:	9302      	str	r3, [sp, #8]
 800eb94:	2300      	movs	r3, #0
 800eb96:	9301      	str	r3, [sp, #4]
 800eb98:	2306      	movs	r3, #6
 800eb9a:	9300      	str	r3, [sp, #0]
 800eb9c:	460b      	mov	r3, r1
 800eb9e:	2102      	movs	r1, #2
 800eba0:	f008 fbbe 	bl	8017320 <aci_gatt_add_char>
 800eba4:	4603      	mov	r3, r0
 800eba6:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service4_Char2 */
  /**
   *  EOC
   */
  COPY_EOC_UUID(uuid.Char_UUID_128);
 800eba8:	2302      	movs	r3, #2
 800ebaa:	713b      	strb	r3, [r7, #4]
 800ebac:	2300      	movs	r3, #0
 800ebae:	717b      	strb	r3, [r7, #5]
 800ebb0:	2312      	movs	r3, #18
 800ebb2:	71bb      	strb	r3, [r7, #6]
 800ebb4:	23ac      	movs	r3, #172	@ 0xac
 800ebb6:	71fb      	strb	r3, [r7, #7]
 800ebb8:	2342      	movs	r3, #66	@ 0x42
 800ebba:	723b      	strb	r3, [r7, #8]
 800ebbc:	2302      	movs	r3, #2
 800ebbe:	727b      	strb	r3, [r7, #9]
 800ebc0:	2356      	movs	r3, #86	@ 0x56
 800ebc2:	72bb      	strb	r3, [r7, #10]
 800ebc4:	23be      	movs	r3, #190	@ 0xbe
 800ebc6:	72fb      	strb	r3, [r7, #11]
 800ebc8:	23ee      	movs	r3, #238	@ 0xee
 800ebca:	733b      	strb	r3, [r7, #12]
 800ebcc:	2311      	movs	r3, #17
 800ebce:	737b      	strb	r3, [r7, #13]
 800ebd0:	23b8      	movs	r3, #184	@ 0xb8
 800ebd2:	73bb      	strb	r3, [r7, #14]
 800ebd4:	232f      	movs	r3, #47	@ 0x2f
 800ebd6:	73fb      	strb	r3, [r7, #15]
 800ebd8:	2332      	movs	r3, #50	@ 0x32
 800ebda:	743b      	strb	r3, [r7, #16]
 800ebdc:	2375      	movs	r3, #117	@ 0x75
 800ebde:	747b      	strb	r3, [r7, #17]
 800ebe0:	2359      	movs	r3, #89	@ 0x59
 800ebe2:	74bb      	strb	r3, [r7, #18]
 800ebe4:	23fe      	movs	r3, #254	@ 0xfe
 800ebe6:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomUtHdle,
 800ebe8:	4b69      	ldr	r3, [pc, #420]	@ (800ed90 <SVCCTL_InitCustomSvc+0x990>)
 800ebea:	8b98      	ldrh	r0, [r3, #28]
 800ebec:	4b69      	ldr	r3, [pc, #420]	@ (800ed94 <SVCCTL_InitCustomSvc+0x994>)
 800ebee:	781b      	ldrb	r3, [r3, #0]
 800ebf0:	4619      	mov	r1, r3
 800ebf2:	1d3a      	adds	r2, r7, #4
 800ebf4:	4b68      	ldr	r3, [pc, #416]	@ (800ed98 <SVCCTL_InitCustomSvc+0x998>)
 800ebf6:	9305      	str	r3, [sp, #20]
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	9304      	str	r3, [sp, #16]
 800ebfc:	2310      	movs	r3, #16
 800ebfe:	9303      	str	r3, [sp, #12]
 800ec00:	2300      	movs	r3, #0
 800ec02:	9302      	str	r3, [sp, #8]
 800ec04:	2300      	movs	r3, #0
 800ec06:	9301      	str	r3, [sp, #4]
 800ec08:	2310      	movs	r3, #16
 800ec0a:	9300      	str	r3, [sp, #0]
 800ec0c:	460b      	mov	r3, r1
 800ec0e:	2102      	movs	r1, #2
 800ec10:	f008 fb86 	bl	8017320 <aci_gatt_add_char>
 800ec14:	4603      	mov	r3, r0
 800ec16:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service4_Char3 */
  /**
   *  PWR_GD
   */
  COPY_PWR_GD_UUID(uuid.Char_UUID_128);
 800ec18:	2302      	movs	r3, #2
 800ec1a:	713b      	strb	r3, [r7, #4]
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	717b      	strb	r3, [r7, #5]
 800ec20:	2312      	movs	r3, #18
 800ec22:	71bb      	strb	r3, [r7, #6]
 800ec24:	23ac      	movs	r3, #172	@ 0xac
 800ec26:	71fb      	strb	r3, [r7, #7]
 800ec28:	2342      	movs	r3, #66	@ 0x42
 800ec2a:	723b      	strb	r3, [r7, #8]
 800ec2c:	2302      	movs	r3, #2
 800ec2e:	727b      	strb	r3, [r7, #9]
 800ec30:	2356      	movs	r3, #86	@ 0x56
 800ec32:	72bb      	strb	r3, [r7, #10]
 800ec34:	23be      	movs	r3, #190	@ 0xbe
 800ec36:	72fb      	strb	r3, [r7, #11]
 800ec38:	23ee      	movs	r3, #238	@ 0xee
 800ec3a:	733b      	strb	r3, [r7, #12]
 800ec3c:	2311      	movs	r3, #17
 800ec3e:	737b      	strb	r3, [r7, #13]
 800ec40:	23b8      	movs	r3, #184	@ 0xb8
 800ec42:	73bb      	strb	r3, [r7, #14]
 800ec44:	232f      	movs	r3, #47	@ 0x2f
 800ec46:	73fb      	strb	r3, [r7, #15]
 800ec48:	2384      	movs	r3, #132	@ 0x84
 800ec4a:	743b      	strb	r3, [r7, #16]
 800ec4c:	2378      	movs	r3, #120	@ 0x78
 800ec4e:	747b      	strb	r3, [r7, #17]
 800ec50:	2359      	movs	r3, #89	@ 0x59
 800ec52:	74bb      	strb	r3, [r7, #18]
 800ec54:	23fe      	movs	r3, #254	@ 0xfe
 800ec56:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomUtHdle,
 800ec58:	4b4d      	ldr	r3, [pc, #308]	@ (800ed90 <SVCCTL_InitCustomSvc+0x990>)
 800ec5a:	8b98      	ldrh	r0, [r3, #28]
 800ec5c:	4b4f      	ldr	r3, [pc, #316]	@ (800ed9c <SVCCTL_InitCustomSvc+0x99c>)
 800ec5e:	781b      	ldrb	r3, [r3, #0]
 800ec60:	4619      	mov	r1, r3
 800ec62:	1d3a      	adds	r2, r7, #4
 800ec64:	4b4e      	ldr	r3, [pc, #312]	@ (800eda0 <SVCCTL_InitCustomSvc+0x9a0>)
 800ec66:	9305      	str	r3, [sp, #20]
 800ec68:	2300      	movs	r3, #0
 800ec6a:	9304      	str	r3, [sp, #16]
 800ec6c:	2310      	movs	r3, #16
 800ec6e:	9303      	str	r3, [sp, #12]
 800ec70:	2300      	movs	r3, #0
 800ec72:	9302      	str	r3, [sp, #8]
 800ec74:	2300      	movs	r3, #0
 800ec76:	9301      	str	r3, [sp, #4]
 800ec78:	2310      	movs	r3, #16
 800ec7a:	9300      	str	r3, [sp, #0]
 800ec7c:	460b      	mov	r3, r1
 800ec7e:	2102      	movs	r1, #2
 800ec80:	f008 fb4e 	bl	8017320 <aci_gatt_add_char>
 800ec84:	4603      	mov	r3, r0
 800ec86:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service4_Char4 */
  /**
   *  Software_Revision_String
   */
  uuid.Char_UUID_16 = 0x2a28;
 800ec88:	f642 2328 	movw	r3, #10792	@ 0x2a28
 800ec8c:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_char(CustomContext.CustomUtHdle,
 800ec8e:	4b40      	ldr	r3, [pc, #256]	@ (800ed90 <SVCCTL_InitCustomSvc+0x990>)
 800ec90:	8b98      	ldrh	r0, [r3, #28]
 800ec92:	4b44      	ldr	r3, [pc, #272]	@ (800eda4 <SVCCTL_InitCustomSvc+0x9a4>)
 800ec94:	781b      	ldrb	r3, [r3, #0]
 800ec96:	4619      	mov	r1, r3
 800ec98:	1d3a      	adds	r2, r7, #4
 800ec9a:	4b43      	ldr	r3, [pc, #268]	@ (800eda8 <SVCCTL_InitCustomSvc+0x9a8>)
 800ec9c:	9305      	str	r3, [sp, #20]
 800ec9e:	2300      	movs	r3, #0
 800eca0:	9304      	str	r3, [sp, #16]
 800eca2:	2310      	movs	r3, #16
 800eca4:	9303      	str	r3, [sp, #12]
 800eca6:	2304      	movs	r3, #4
 800eca8:	9302      	str	r3, [sp, #8]
 800ecaa:	2304      	movs	r3, #4
 800ecac:	9301      	str	r3, [sp, #4]
 800ecae:	2302      	movs	r3, #2
 800ecb0:	9300      	str	r3, [sp, #0]
 800ecb2:	460b      	mov	r3, r1
 800ecb4:	2101      	movs	r1, #1
 800ecb6:	f008 fb33 	bl	8017320 <aci_gatt_add_char>
 800ecba:	4603      	mov	r3, r0
 800ecbc:	75fb      	strb	r3, [r7, #23]
   *                              = 3
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 3;
 800ecbe:	2303      	movs	r3, #3
 800ecc0:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
	/* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_OPERATIONMODE_UUID(uuid.Char_UUID_128);
 800ecc2:	235f      	movs	r3, #95	@ 0x5f
 800ecc4:	713b      	strb	r3, [r7, #4]
 800ecc6:	236f      	movs	r3, #111	@ 0x6f
 800ecc8:	717b      	strb	r3, [r7, #5]
 800ecca:	2307      	movs	r3, #7
 800eccc:	71bb      	strb	r3, [r7, #6]
 800ecce:	23ff      	movs	r3, #255	@ 0xff
 800ecd0:	71fb      	strb	r3, [r7, #7]
 800ecd2:	235b      	movs	r3, #91	@ 0x5b
 800ecd4:	723b      	strb	r3, [r7, #8]
 800ecd6:	23fb      	movs	r3, #251	@ 0xfb
 800ecd8:	727b      	strb	r3, [r7, #9]
 800ecda:	232c      	movs	r3, #44	@ 0x2c
 800ecdc:	72bb      	strb	r3, [r7, #10]
 800ecde:	238c      	movs	r3, #140	@ 0x8c
 800ece0:	72fb      	strb	r3, [r7, #11]
 800ece2:	23e9      	movs	r3, #233	@ 0xe9
 800ece4:	733b      	strb	r3, [r7, #12]
 800ece6:	2344      	movs	r3, #68	@ 0x44
 800ece8:	737b      	strb	r3, [r7, #13]
 800ecea:	235f      	movs	r3, #95	@ 0x5f
 800ecec:	73bb      	strb	r3, [r7, #14]
 800ecee:	23e8      	movs	r3, #232	@ 0xe8
 800ecf0:	73fb      	strb	r3, [r7, #15]
 800ecf2:	2369      	movs	r3, #105	@ 0x69
 800ecf4:	743b      	strb	r3, [r7, #16]
 800ecf6:	23c3      	movs	r3, #195	@ 0xc3
 800ecf8:	747b      	strb	r3, [r7, #17]
 800ecfa:	23d0      	movs	r3, #208	@ 0xd0
 800ecfc:	74bb      	strb	r3, [r7, #18]
 800ecfe:	232b      	movs	r3, #43	@ 0x2b
 800ed00:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800ed02:	7dbb      	ldrb	r3, [r7, #22]
 800ed04:	1d39      	adds	r1, r7, #4
 800ed06:	4a29      	ldr	r2, [pc, #164]	@ (800edac <SVCCTL_InitCustomSvc+0x9ac>)
 800ed08:	9200      	str	r2, [sp, #0]
 800ed0a:	2201      	movs	r2, #1
 800ed0c:	2002      	movs	r0, #2
 800ed0e:	f008 fa31 	bl	8017174 <aci_gatt_add_service>
 800ed12:	4603      	mov	r3, r0
 800ed14:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  MODE
   */
  COPY_MODE_UUID(uuid.Char_UUID_128);
 800ed16:	2359      	movs	r3, #89	@ 0x59
 800ed18:	713b      	strb	r3, [r7, #4]
 800ed1a:	23ca      	movs	r3, #202	@ 0xca
 800ed1c:	717b      	strb	r3, [r7, #5]
 800ed1e:	2337      	movs	r3, #55	@ 0x37
 800ed20:	71bb      	strb	r3, [r7, #6]
 800ed22:	2381      	movs	r3, #129	@ 0x81
 800ed24:	71fb      	strb	r3, [r7, #7]
 800ed26:	23f5      	movs	r3, #245	@ 0xf5
 800ed28:	723b      	strb	r3, [r7, #8]
 800ed2a:	23ee      	movs	r3, #238	@ 0xee
 800ed2c:	727b      	strb	r3, [r7, #9]
 800ed2e:	23be      	movs	r3, #190	@ 0xbe
 800ed30:	72bb      	strb	r3, [r7, #10]
 800ed32:	23b8      	movs	r3, #184	@ 0xb8
 800ed34:	72fb      	strb	r3, [r7, #11]
 800ed36:	2385      	movs	r3, #133	@ 0x85
 800ed38:	733b      	strb	r3, [r7, #12]
 800ed3a:	2342      	movs	r3, #66	@ 0x42
 800ed3c:	737b      	strb	r3, [r7, #13]
 800ed3e:	2354      	movs	r3, #84	@ 0x54
 800ed40:	73bb      	strb	r3, [r7, #14]
 800ed42:	238a      	movs	r3, #138	@ 0x8a
 800ed44:	73fb      	strb	r3, [r7, #15]
 800ed46:	2352      	movs	r3, #82	@ 0x52
 800ed48:	743b      	strb	r3, [r7, #16]
 800ed4a:	2394      	movs	r3, #148	@ 0x94
 800ed4c:	747b      	strb	r3, [r7, #17]
 800ed4e:	23f4      	movs	r3, #244	@ 0xf4
 800ed50:	74bb      	strb	r3, [r7, #18]
 800ed52:	2325      	movs	r3, #37	@ 0x25
 800ed54:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomOp_MHdle,
 800ed56:	4b0e      	ldr	r3, [pc, #56]	@ (800ed90 <SVCCTL_InitCustomSvc+0x990>)
 800ed58:	8d18      	ldrh	r0, [r3, #40]	@ 0x28
 800ed5a:	4b15      	ldr	r3, [pc, #84]	@ (800edb0 <SVCCTL_InitCustomSvc+0x9b0>)
 800ed5c:	781b      	ldrb	r3, [r3, #0]
 800ed5e:	4619      	mov	r1, r3
 800ed60:	1d3a      	adds	r2, r7, #4
 800ed62:	4b14      	ldr	r3, [pc, #80]	@ (800edb4 <SVCCTL_InitCustomSvc+0x9b4>)
 800ed64:	9305      	str	r3, [sp, #20]
 800ed66:	2300      	movs	r3, #0
 800ed68:	9304      	str	r3, [sp, #16]
 800ed6a:	2310      	movs	r3, #16
 800ed6c:	9303      	str	r3, [sp, #12]
 800ed6e:	2305      	movs	r3, #5
 800ed70:	9302      	str	r3, [sp, #8]
 800ed72:	2300      	movs	r3, #0
 800ed74:	9301      	str	r3, [sp, #4]
 800ed76:	2306      	movs	r3, #6
 800ed78:	9300      	str	r3, [sp, #0]
 800ed7a:	460b      	mov	r3, r1
 800ed7c:	2102      	movs	r1, #2
 800ed7e:	f008 facf 	bl	8017320 <aci_gatt_add_char>
 800ed82:	4603      	mov	r3, r0
 800ed84:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800ed86:	bf00      	nop
}
 800ed88:	3718      	adds	r7, #24
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	bd80      	pop	{r7, pc}
 800ed8e:	bf00      	nop
 800ed90:	200008f0 	.word	0x200008f0
 800ed94:	20000075 	.word	0x20000075
 800ed98:	20000912 	.word	0x20000912
 800ed9c:	20000076 	.word	0x20000076
 800eda0:	20000914 	.word	0x20000914
 800eda4:	20000077 	.word	0x20000077
 800eda8:	20000916 	.word	0x20000916
 800edac:	20000918 	.word	0x20000918
 800edb0:	20000078 	.word	0x20000078
 800edb4:	2000091a 	.word	0x2000091a

0800edb8 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b086      	sub	sp, #24
 800edbc:	af02      	add	r7, sp, #8
 800edbe:	4603      	mov	r3, r0
 800edc0:	6039      	str	r1, [r7, #0]
 800edc2:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800edc4:	2392      	movs	r3, #146	@ 0x92
 800edc6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 800edc8:	79fb      	ldrb	r3, [r7, #7]
 800edca:	2b10      	cmp	r3, #16
 800edcc:	f200 8125 	bhi.w	800f01a <Custom_STM_App_Update_Char+0x262>
 800edd0:	a201      	add	r2, pc, #4	@ (adr r2, 800edd8 <Custom_STM_App_Update_Char+0x20>)
 800edd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edd6:	bf00      	nop
 800edd8:	0800ee1d 	.word	0x0800ee1d
 800eddc:	0800ee3b 	.word	0x0800ee3b
 800ede0:	0800ee59 	.word	0x0800ee59
 800ede4:	0800ee77 	.word	0x0800ee77
 800ede8:	0800ee95 	.word	0x0800ee95
 800edec:	0800eeb3 	.word	0x0800eeb3
 800edf0:	0800eed1 	.word	0x0800eed1
 800edf4:	0800eeef 	.word	0x0800eeef
 800edf8:	0800ef0d 	.word	0x0800ef0d
 800edfc:	0800ef2b 	.word	0x0800ef2b
 800ee00:	0800ef49 	.word	0x0800ef49
 800ee04:	0800ef67 	.word	0x0800ef67
 800ee08:	0800ef85 	.word	0x0800ef85
 800ee0c:	0800efa3 	.word	0x0800efa3
 800ee10:	0800efc1 	.word	0x0800efc1
 800ee14:	0800efdf 	.word	0x0800efdf
 800ee18:	0800effd 	.word	0x0800effd
  {

    case CUSTOM_STM_LEVEL:
      ret = aci_gatt_update_char_value(CustomContext.CustomBat_SerHdle,
 800ee1c:	4b82      	ldr	r3, [pc, #520]	@ (800f028 <Custom_STM_App_Update_Char+0x270>)
 800ee1e:	8818      	ldrh	r0, [r3, #0]
 800ee20:	4b81      	ldr	r3, [pc, #516]	@ (800f028 <Custom_STM_App_Update_Char+0x270>)
 800ee22:	8859      	ldrh	r1, [r3, #2]
 800ee24:	4b81      	ldr	r3, [pc, #516]	@ (800f02c <Custom_STM_App_Update_Char+0x274>)
 800ee26:	781a      	ldrb	r2, [r3, #0]
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	9300      	str	r3, [sp, #0]
 800ee2c:	4613      	mov	r3, r2
 800ee2e:	2200      	movs	r2, #0
 800ee30:	f008 fb7e 	bl	8017530 <aci_gatt_update_char_value>
 800ee34:	4603      	mov	r3, r0
 800ee36:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value LEVEL command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_1*/
      break;
 800ee38:	e0f0      	b.n	800f01c <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_IR_T:
      ret = aci_gatt_update_char_value(CustomContext.CustomTempHdle,
 800ee3a:	4b7b      	ldr	r3, [pc, #492]	@ (800f028 <Custom_STM_App_Update_Char+0x270>)
 800ee3c:	8898      	ldrh	r0, [r3, #4]
 800ee3e:	4b7a      	ldr	r3, [pc, #488]	@ (800f028 <Custom_STM_App_Update_Char+0x270>)
 800ee40:	88d9      	ldrh	r1, [r3, #6]
 800ee42:	4b7b      	ldr	r3, [pc, #492]	@ (800f030 <Custom_STM_App_Update_Char+0x278>)
 800ee44:	781a      	ldrb	r2, [r3, #0]
 800ee46:	683b      	ldr	r3, [r7, #0]
 800ee48:	9300      	str	r3, [sp, #0]
 800ee4a:	4613      	mov	r3, r2
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	f008 fb6f 	bl	8017530 <aci_gatt_update_char_value>
 800ee52:	4603      	mov	r3, r0
 800ee54:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value IR_T command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_2_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_1*/
      break;
 800ee56:	e0e1      	b.n	800f01c <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_A_T:
      ret = aci_gatt_update_char_value(CustomContext.CustomTempHdle,
 800ee58:	4b73      	ldr	r3, [pc, #460]	@ (800f028 <Custom_STM_App_Update_Char+0x270>)
 800ee5a:	8898      	ldrh	r0, [r3, #4]
 800ee5c:	4b72      	ldr	r3, [pc, #456]	@ (800f028 <Custom_STM_App_Update_Char+0x270>)
 800ee5e:	8919      	ldrh	r1, [r3, #8]
 800ee60:	4b74      	ldr	r3, [pc, #464]	@ (800f034 <Custom_STM_App_Update_Char+0x27c>)
 800ee62:	781a      	ldrb	r2, [r3, #0]
 800ee64:	683b      	ldr	r3, [r7, #0]
 800ee66:	9300      	str	r3, [sp, #0]
 800ee68:	4613      	mov	r3, r2
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	f008 fb60 	bl	8017530 <aci_gatt_update_char_value>
 800ee70:	4603      	mov	r3, r0
 800ee72:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value A_T command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_2_Char_2*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_2*/
      break;
 800ee74:	e0d2      	b.n	800f01c <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_S_T:
      ret = aci_gatt_update_char_value(CustomContext.CustomTempHdle,
 800ee76:	4b6c      	ldr	r3, [pc, #432]	@ (800f028 <Custom_STM_App_Update_Char+0x270>)
 800ee78:	8898      	ldrh	r0, [r3, #4]
 800ee7a:	4b6b      	ldr	r3, [pc, #428]	@ (800f028 <Custom_STM_App_Update_Char+0x270>)
 800ee7c:	8959      	ldrh	r1, [r3, #10]
 800ee7e:	4b6e      	ldr	r3, [pc, #440]	@ (800f038 <Custom_STM_App_Update_Char+0x280>)
 800ee80:	781a      	ldrb	r2, [r3, #0]
 800ee82:	683b      	ldr	r3, [r7, #0]
 800ee84:	9300      	str	r3, [sp, #0]
 800ee86:	4613      	mov	r3, r2
 800ee88:	2200      	movs	r2, #0
 800ee8a:	f008 fb51 	bl	8017530 <aci_gatt_update_char_value>
 800ee8e:	4603      	mov	r3, r0
 800ee90:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value S_T command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_2_Char_3*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_3*/
      break;
 800ee92:	e0c3      	b.n	800f01c <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_L_T:
      ret = aci_gatt_update_char_value(CustomContext.CustomTempHdle,
 800ee94:	4b64      	ldr	r3, [pc, #400]	@ (800f028 <Custom_STM_App_Update_Char+0x270>)
 800ee96:	8898      	ldrh	r0, [r3, #4]
 800ee98:	4b63      	ldr	r3, [pc, #396]	@ (800f028 <Custom_STM_App_Update_Char+0x270>)
 800ee9a:	8999      	ldrh	r1, [r3, #12]
 800ee9c:	4b67      	ldr	r3, [pc, #412]	@ (800f03c <Custom_STM_App_Update_Char+0x284>)
 800ee9e:	781a      	ldrb	r2, [r3, #0]
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	9300      	str	r3, [sp, #0]
 800eea4:	4613      	mov	r3, r2
 800eea6:	2200      	movs	r2, #0
 800eea8:	f008 fb42 	bl	8017530 <aci_gatt_update_char_value>
 800eeac:	4603      	mov	r3, r0
 800eeae:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value L_T command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_2_Char_4*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_4*/
      break;
 800eeb0:	e0b4      	b.n	800f01c <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_R_N:
      ret = aci_gatt_update_char_value(CustomContext.CustomTempHdle,
 800eeb2:	4b5d      	ldr	r3, [pc, #372]	@ (800f028 <Custom_STM_App_Update_Char+0x270>)
 800eeb4:	8898      	ldrh	r0, [r3, #4]
 800eeb6:	4b5c      	ldr	r3, [pc, #368]	@ (800f028 <Custom_STM_App_Update_Char+0x270>)
 800eeb8:	89d9      	ldrh	r1, [r3, #14]
 800eeba:	4b61      	ldr	r3, [pc, #388]	@ (800f040 <Custom_STM_App_Update_Char+0x288>)
 800eebc:	781a      	ldrb	r2, [r3, #0]
 800eebe:	683b      	ldr	r3, [r7, #0]
 800eec0:	9300      	str	r3, [sp, #0]
 800eec2:	4613      	mov	r3, r2
 800eec4:	2200      	movs	r2, #0
 800eec6:	f008 fb33 	bl	8017530 <aci_gatt_update_char_value>
 800eeca:	4603      	mov	r3, r0
 800eecc:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value R_N command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_2_Char_5*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_5*/
      break;
 800eece:	e0a5      	b.n	800f01c <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_UV_V:
      ret = aci_gatt_update_char_value(CustomContext.CustomUv_SHdle,
 800eed0:	4b55      	ldr	r3, [pc, #340]	@ (800f028 <Custom_STM_App_Update_Char+0x270>)
 800eed2:	8a18      	ldrh	r0, [r3, #16]
 800eed4:	4b54      	ldr	r3, [pc, #336]	@ (800f028 <Custom_STM_App_Update_Char+0x270>)
 800eed6:	8a59      	ldrh	r1, [r3, #18]
 800eed8:	4b5a      	ldr	r3, [pc, #360]	@ (800f044 <Custom_STM_App_Update_Char+0x28c>)
 800eeda:	781a      	ldrb	r2, [r3, #0]
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	9300      	str	r3, [sp, #0]
 800eee0:	4613      	mov	r3, r2
 800eee2:	2200      	movs	r2, #0
 800eee4:	f008 fb24 	bl	8017530 <aci_gatt_update_char_value>
 800eee8:	4603      	mov	r3, r0
 800eeea:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value UV_V command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_3_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_3_Char_1*/
      break;
 800eeec:	e096      	b.n	800f01c <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_UV_L:
      ret = aci_gatt_update_char_value(CustomContext.CustomUv_SHdle,
 800eeee:	4b4e      	ldr	r3, [pc, #312]	@ (800f028 <Custom_STM_App_Update_Char+0x270>)
 800eef0:	8a18      	ldrh	r0, [r3, #16]
 800eef2:	4b4d      	ldr	r3, [pc, #308]	@ (800f028 <Custom_STM_App_Update_Char+0x270>)
 800eef4:	8a99      	ldrh	r1, [r3, #20]
 800eef6:	4b54      	ldr	r3, [pc, #336]	@ (800f048 <Custom_STM_App_Update_Char+0x290>)
 800eef8:	781a      	ldrb	r2, [r3, #0]
 800eefa:	683b      	ldr	r3, [r7, #0]
 800eefc:	9300      	str	r3, [sp, #0]
 800eefe:	4613      	mov	r3, r2
 800ef00:	2200      	movs	r2, #0
 800ef02:	f008 fb15 	bl	8017530 <aci_gatt_update_char_value>
 800ef06:	4603      	mov	r3, r0
 800ef08:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value UV_L command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_3_Char_2*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_3_Char_2*/
      break;
 800ef0a:	e087      	b.n	800f01c <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_OTA:
      ret = aci_gatt_update_char_value(CustomContext.CustomUv_SHdle,
 800ef0c:	4b46      	ldr	r3, [pc, #280]	@ (800f028 <Custom_STM_App_Update_Char+0x270>)
 800ef0e:	8a18      	ldrh	r0, [r3, #16]
 800ef10:	4b45      	ldr	r3, [pc, #276]	@ (800f028 <Custom_STM_App_Update_Char+0x270>)
 800ef12:	8ad9      	ldrh	r1, [r3, #22]
 800ef14:	4b4d      	ldr	r3, [pc, #308]	@ (800f04c <Custom_STM_App_Update_Char+0x294>)
 800ef16:	781a      	ldrb	r2, [r3, #0]
 800ef18:	683b      	ldr	r3, [r7, #0]
 800ef1a:	9300      	str	r3, [sp, #0]
 800ef1c:	4613      	mov	r3, r2
 800ef1e:	2200      	movs	r2, #0
 800ef20:	f008 fb06 	bl	8017530 <aci_gatt_update_char_value>
 800ef24:	4603      	mov	r3, r0
 800ef26:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value OTA command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_3_Char_3*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_3_Char_3*/
      break;
 800ef28:	e078      	b.n	800f01c <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_AMBI_TEMP:
      ret = aci_gatt_update_char_value(CustomContext.CustomUv_SHdle,
 800ef2a:	4b3f      	ldr	r3, [pc, #252]	@ (800f028 <Custom_STM_App_Update_Char+0x270>)
 800ef2c:	8a18      	ldrh	r0, [r3, #16]
 800ef2e:	4b3e      	ldr	r3, [pc, #248]	@ (800f028 <Custom_STM_App_Update_Char+0x270>)
 800ef30:	8b19      	ldrh	r1, [r3, #24]
 800ef32:	4b47      	ldr	r3, [pc, #284]	@ (800f050 <Custom_STM_App_Update_Char+0x298>)
 800ef34:	781a      	ldrb	r2, [r3, #0]
 800ef36:	683b      	ldr	r3, [r7, #0]
 800ef38:	9300      	str	r3, [sp, #0]
 800ef3a:	4613      	mov	r3, r2
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	f008 faf7 	bl	8017530 <aci_gatt_update_char_value>
 800ef42:	4603      	mov	r3, r0
 800ef44:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value AMBI_TEMP command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_3_Char_4*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_3_Char_4*/
      break;
 800ef46:	e069      	b.n	800f01c <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_T_INT:
      ret = aci_gatt_update_char_value(CustomContext.CustomUv_SHdle,
 800ef48:	4b37      	ldr	r3, [pc, #220]	@ (800f028 <Custom_STM_App_Update_Char+0x270>)
 800ef4a:	8a18      	ldrh	r0, [r3, #16]
 800ef4c:	4b36      	ldr	r3, [pc, #216]	@ (800f028 <Custom_STM_App_Update_Char+0x270>)
 800ef4e:	8b59      	ldrh	r1, [r3, #26]
 800ef50:	4b40      	ldr	r3, [pc, #256]	@ (800f054 <Custom_STM_App_Update_Char+0x29c>)
 800ef52:	781a      	ldrb	r2, [r3, #0]
 800ef54:	683b      	ldr	r3, [r7, #0]
 800ef56:	9300      	str	r3, [sp, #0]
 800ef58:	4613      	mov	r3, r2
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	f008 fae8 	bl	8017530 <aci_gatt_update_char_value>
 800ef60:	4603      	mov	r3, r0
 800ef62:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value T_INT command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_3_Char_5*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_3_Char_5*/
      break;
 800ef64:	e05a      	b.n	800f01c <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_ACCLX:
      ret = aci_gatt_update_char_value(CustomContext.CustomUtHdle,
 800ef66:	4b30      	ldr	r3, [pc, #192]	@ (800f028 <Custom_STM_App_Update_Char+0x270>)
 800ef68:	8b98      	ldrh	r0, [r3, #28]
 800ef6a:	4b2f      	ldr	r3, [pc, #188]	@ (800f028 <Custom_STM_App_Update_Char+0x270>)
 800ef6c:	8bd9      	ldrh	r1, [r3, #30]
 800ef6e:	4b3a      	ldr	r3, [pc, #232]	@ (800f058 <Custom_STM_App_Update_Char+0x2a0>)
 800ef70:	781a      	ldrb	r2, [r3, #0]
 800ef72:	683b      	ldr	r3, [r7, #0]
 800ef74:	9300      	str	r3, [sp, #0]
 800ef76:	4613      	mov	r3, r2
 800ef78:	2200      	movs	r2, #0
 800ef7a:	f008 fad9 	bl	8017530 <aci_gatt_update_char_value>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ACCLX command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_4_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_4_Char_1*/
      break;
 800ef82:	e04b      	b.n	800f01c <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_TD:
      ret = aci_gatt_update_char_value(CustomContext.CustomUtHdle,
 800ef84:	4b28      	ldr	r3, [pc, #160]	@ (800f028 <Custom_STM_App_Update_Char+0x270>)
 800ef86:	8b98      	ldrh	r0, [r3, #28]
 800ef88:	4b27      	ldr	r3, [pc, #156]	@ (800f028 <Custom_STM_App_Update_Char+0x270>)
 800ef8a:	8c19      	ldrh	r1, [r3, #32]
 800ef8c:	4b33      	ldr	r3, [pc, #204]	@ (800f05c <Custom_STM_App_Update_Char+0x2a4>)
 800ef8e:	781a      	ldrb	r2, [r3, #0]
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	9300      	str	r3, [sp, #0]
 800ef94:	4613      	mov	r3, r2
 800ef96:	2200      	movs	r2, #0
 800ef98:	f008 faca 	bl	8017530 <aci_gatt_update_char_value>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value TD command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_4_Char_2*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_4_Char_2*/
      break;
 800efa0:	e03c      	b.n	800f01c <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_EC:
      ret = aci_gatt_update_char_value(CustomContext.CustomUtHdle,
 800efa2:	4b21      	ldr	r3, [pc, #132]	@ (800f028 <Custom_STM_App_Update_Char+0x270>)
 800efa4:	8b98      	ldrh	r0, [r3, #28]
 800efa6:	4b20      	ldr	r3, [pc, #128]	@ (800f028 <Custom_STM_App_Update_Char+0x270>)
 800efa8:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 800efaa:	4b2d      	ldr	r3, [pc, #180]	@ (800f060 <Custom_STM_App_Update_Char+0x2a8>)
 800efac:	781a      	ldrb	r2, [r3, #0]
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	9300      	str	r3, [sp, #0]
 800efb2:	4613      	mov	r3, r2
 800efb4:	2200      	movs	r2, #0
 800efb6:	f008 fabb 	bl	8017530 <aci_gatt_update_char_value>
 800efba:	4603      	mov	r3, r0
 800efbc:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value EC command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_4_Char_3*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_4_Char_3*/
      break;
 800efbe:	e02d      	b.n	800f01c <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_PWR_GD:
      ret = aci_gatt_update_char_value(CustomContext.CustomUtHdle,
 800efc0:	4b19      	ldr	r3, [pc, #100]	@ (800f028 <Custom_STM_App_Update_Char+0x270>)
 800efc2:	8b98      	ldrh	r0, [r3, #28]
 800efc4:	4b18      	ldr	r3, [pc, #96]	@ (800f028 <Custom_STM_App_Update_Char+0x270>)
 800efc6:	8c99      	ldrh	r1, [r3, #36]	@ 0x24
 800efc8:	4b26      	ldr	r3, [pc, #152]	@ (800f064 <Custom_STM_App_Update_Char+0x2ac>)
 800efca:	781a      	ldrb	r2, [r3, #0]
 800efcc:	683b      	ldr	r3, [r7, #0]
 800efce:	9300      	str	r3, [sp, #0]
 800efd0:	4613      	mov	r3, r2
 800efd2:	2200      	movs	r2, #0
 800efd4:	f008 faac 	bl	8017530 <aci_gatt_update_char_value>
 800efd8:	4603      	mov	r3, r0
 800efda:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value PWR_GD command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_4_Char_4*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_4_Char_4*/
      break;
 800efdc:	e01e      	b.n	800f01c <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_SOFTWARE_REVISION_STRING:
      ret = aci_gatt_update_char_value(CustomContext.CustomUtHdle,
 800efde:	4b12      	ldr	r3, [pc, #72]	@ (800f028 <Custom_STM_App_Update_Char+0x270>)
 800efe0:	8b98      	ldrh	r0, [r3, #28]
 800efe2:	4b11      	ldr	r3, [pc, #68]	@ (800f028 <Custom_STM_App_Update_Char+0x270>)
 800efe4:	8cd9      	ldrh	r1, [r3, #38]	@ 0x26
 800efe6:	4b20      	ldr	r3, [pc, #128]	@ (800f068 <Custom_STM_App_Update_Char+0x2b0>)
 800efe8:	781a      	ldrb	r2, [r3, #0]
 800efea:	683b      	ldr	r3, [r7, #0]
 800efec:	9300      	str	r3, [sp, #0]
 800efee:	4613      	mov	r3, r2
 800eff0:	2200      	movs	r2, #0
 800eff2:	f008 fa9d 	bl	8017530 <aci_gatt_update_char_value>
 800eff6:	4603      	mov	r3, r0
 800eff8:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value SOFTWARE_REVISION_STRING command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_4_Char_5*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_4_Char_5*/
      break;
 800effa:	e00f      	b.n	800f01c <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_MD:
      ret = aci_gatt_update_char_value(CustomContext.CustomOp_MHdle,
 800effc:	4b0a      	ldr	r3, [pc, #40]	@ (800f028 <Custom_STM_App_Update_Char+0x270>)
 800effe:	8d18      	ldrh	r0, [r3, #40]	@ 0x28
 800f000:	4b09      	ldr	r3, [pc, #36]	@ (800f028 <Custom_STM_App_Update_Char+0x270>)
 800f002:	8d59      	ldrh	r1, [r3, #42]	@ 0x2a
 800f004:	4b19      	ldr	r3, [pc, #100]	@ (800f06c <Custom_STM_App_Update_Char+0x2b4>)
 800f006:	781a      	ldrb	r2, [r3, #0]
 800f008:	683b      	ldr	r3, [r7, #0]
 800f00a:	9300      	str	r3, [sp, #0]
 800f00c:	4613      	mov	r3, r2
 800f00e:	2200      	movs	r2, #0
 800f010:	f008 fa8e 	bl	8017530 <aci_gatt_update_char_value>
 800f014:	4603      	mov	r3, r0
 800f016:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value MD command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_5_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_5_Char_1*/
      break;
 800f018:	e000      	b.n	800f01c <Custom_STM_App_Update_Char+0x264>

    default:
      break;
 800f01a:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 800f01c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f01e:	4618      	mov	r0, r3
 800f020:	3710      	adds	r7, #16
 800f022:	46bd      	mov	sp, r7
 800f024:	bd80      	pop	{r7, pc}
 800f026:	bf00      	nop
 800f028:	200008f0 	.word	0x200008f0
 800f02c:	20000068 	.word	0x20000068
 800f030:	20000069 	.word	0x20000069
 800f034:	2000006a 	.word	0x2000006a
 800f038:	2000006b 	.word	0x2000006b
 800f03c:	2000006c 	.word	0x2000006c
 800f040:	2000006d 	.word	0x2000006d
 800f044:	2000006e 	.word	0x2000006e
 800f048:	2000006f 	.word	0x2000006f
 800f04c:	20000070 	.word	0x20000070
 800f050:	20000071 	.word	0x20000071
 800f054:	20000072 	.word	0x20000072
 800f058:	20000073 	.word	0x20000073
 800f05c:	20000074 	.word	0x20000074
 800f060:	20000075 	.word	0x20000075
 800f064:	20000076 	.word	0x20000076
 800f068:	20000077 	.word	0x20000077
 800f06c:	20000078 	.word	0x20000078

0800f070 <LL_PWR_EnableBootC2>:
{
 800f070:	b480      	push	{r7}
 800f072:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800f074:	4b05      	ldr	r3, [pc, #20]	@ (800f08c <LL_PWR_EnableBootC2+0x1c>)
 800f076:	68db      	ldr	r3, [r3, #12]
 800f078:	4a04      	ldr	r2, [pc, #16]	@ (800f08c <LL_PWR_EnableBootC2+0x1c>)
 800f07a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f07e:	60d3      	str	r3, [r2, #12]
}
 800f080:	bf00      	nop
 800f082:	46bd      	mov	sp, r7
 800f084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f088:	4770      	bx	lr
 800f08a:	bf00      	nop
 800f08c:	58000400 	.word	0x58000400

0800f090 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800f090:	b480      	push	{r7}
 800f092:	b083      	sub	sp, #12
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800f098:	4b06      	ldr	r3, [pc, #24]	@ (800f0b4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800f09a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800f09e:	4905      	ldr	r1, [pc, #20]	@ (800f0b4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	4313      	orrs	r3, r2
 800f0a4:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800f0a8:	bf00      	nop
 800f0aa:	370c      	adds	r7, #12
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b2:	4770      	bx	lr
 800f0b4:	58000800 	.word	0x58000800

0800f0b8 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800f0b8:	b480      	push	{r7}
 800f0ba:	b083      	sub	sp, #12
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800f0c0:	4b05      	ldr	r3, [pc, #20]	@ (800f0d8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800f0c2:	6a1a      	ldr	r2, [r3, #32]
 800f0c4:	4904      	ldr	r1, [pc, #16]	@ (800f0d8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	4313      	orrs	r3, r2
 800f0ca:	620b      	str	r3, [r1, #32]
}
 800f0cc:	bf00      	nop
 800f0ce:	370c      	adds	r7, #12
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d6:	4770      	bx	lr
 800f0d8:	58000800 	.word	0x58000800

0800f0dc <LL_AHB3_GRP1_EnableClock>:
{
 800f0dc:	b480      	push	{r7}
 800f0de:	b085      	sub	sp, #20
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800f0e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f0e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f0ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	4313      	orrs	r3, r2
 800f0f2:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800f0f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f0f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	4013      	ands	r3, r2
 800f0fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800f100:	68fb      	ldr	r3, [r7, #12]
}
 800f102:	bf00      	nop
 800f104:	3714      	adds	r7, #20
 800f106:	46bd      	mov	sp, r7
 800f108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10c:	4770      	bx	lr

0800f10e <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800f10e:	b480      	push	{r7}
 800f110:	b085      	sub	sp, #20
 800f112:	af00      	add	r7, sp, #0
 800f114:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800f116:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f11a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800f11e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	4313      	orrs	r3, r2
 800f126:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800f12a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f12e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	4013      	ands	r3, r2
 800f136:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800f138:	68fb      	ldr	r3, [r7, #12]
}
 800f13a:	bf00      	nop
 800f13c:	3714      	adds	r7, #20
 800f13e:	46bd      	mov	sp, r7
 800f140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f144:	4770      	bx	lr

0800f146 <LL_C1_IPCC_EnableIT_TXF>:
{
 800f146:	b480      	push	{r7}
 800f148:	b083      	sub	sp, #12
 800f14a:	af00      	add	r7, sp, #0
 800f14c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	601a      	str	r2, [r3, #0]
}
 800f15a:	bf00      	nop
 800f15c:	370c      	adds	r7, #12
 800f15e:	46bd      	mov	sp, r7
 800f160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f164:	4770      	bx	lr

0800f166 <LL_C1_IPCC_EnableIT_RXO>:
{
 800f166:	b480      	push	{r7}
 800f168:	b083      	sub	sp, #12
 800f16a:	af00      	add	r7, sp, #0
 800f16c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	f043 0201 	orr.w	r2, r3, #1
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	601a      	str	r2, [r3, #0]
}
 800f17a:	bf00      	nop
 800f17c:	370c      	adds	r7, #12
 800f17e:	46bd      	mov	sp, r7
 800f180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f184:	4770      	bx	lr

0800f186 <LL_C1_IPCC_EnableTransmitChannel>:
{
 800f186:	b480      	push	{r7}
 800f188:	b083      	sub	sp, #12
 800f18a:	af00      	add	r7, sp, #0
 800f18c:	6078      	str	r0, [r7, #4]
 800f18e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	685a      	ldr	r2, [r3, #4]
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	041b      	lsls	r3, r3, #16
 800f198:	43db      	mvns	r3, r3
 800f19a:	401a      	ands	r2, r3
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	605a      	str	r2, [r3, #4]
}
 800f1a0:	bf00      	nop
 800f1a2:	370c      	adds	r7, #12
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1aa:	4770      	bx	lr

0800f1ac <LL_C1_IPCC_DisableTransmitChannel>:
{
 800f1ac:	b480      	push	{r7}
 800f1ae:	b083      	sub	sp, #12
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
 800f1b4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	685a      	ldr	r2, [r3, #4]
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	041b      	lsls	r3, r3, #16
 800f1be:	431a      	orrs	r2, r3
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	605a      	str	r2, [r3, #4]
}
 800f1c4:	bf00      	nop
 800f1c6:	370c      	adds	r7, #12
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ce:	4770      	bx	lr

0800f1d0 <LL_C1_IPCC_EnableReceiveChannel>:
{
 800f1d0:	b480      	push	{r7}
 800f1d2:	b083      	sub	sp, #12
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	6078      	str	r0, [r7, #4]
 800f1d8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	685a      	ldr	r2, [r3, #4]
 800f1de:	683b      	ldr	r3, [r7, #0]
 800f1e0:	43db      	mvns	r3, r3
 800f1e2:	401a      	ands	r2, r3
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	605a      	str	r2, [r3, #4]
}
 800f1e8:	bf00      	nop
 800f1ea:	370c      	adds	r7, #12
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f2:	4770      	bx	lr

0800f1f4 <LL_C1_IPCC_ClearFlag_CHx>:
{
 800f1f4:	b480      	push	{r7}
 800f1f6:	b083      	sub	sp, #12
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
 800f1fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	683a      	ldr	r2, [r7, #0]
 800f202:	609a      	str	r2, [r3, #8]
}
 800f204:	bf00      	nop
 800f206:	370c      	adds	r7, #12
 800f208:	46bd      	mov	sp, r7
 800f20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20e:	4770      	bx	lr

0800f210 <LL_C1_IPCC_SetFlag_CHx>:
{
 800f210:	b480      	push	{r7}
 800f212:	b083      	sub	sp, #12
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
 800f218:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800f21a:	683b      	ldr	r3, [r7, #0]
 800f21c:	041a      	lsls	r2, r3, #16
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	609a      	str	r2, [r3, #8]
}
 800f222:	bf00      	nop
 800f224:	370c      	adds	r7, #12
 800f226:	46bd      	mov	sp, r7
 800f228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22c:	4770      	bx	lr

0800f22e <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800f22e:	b480      	push	{r7}
 800f230:	b083      	sub	sp, #12
 800f232:	af00      	add	r7, sp, #0
 800f234:	6078      	str	r0, [r7, #4]
 800f236:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	68da      	ldr	r2, [r3, #12]
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	4013      	ands	r3, r2
 800f240:	683a      	ldr	r2, [r7, #0]
 800f242:	429a      	cmp	r2, r3
 800f244:	d101      	bne.n	800f24a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800f246:	2301      	movs	r3, #1
 800f248:	e000      	b.n	800f24c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800f24a:	2300      	movs	r3, #0
}
 800f24c:	4618      	mov	r0, r3
 800f24e:	370c      	adds	r7, #12
 800f250:	46bd      	mov	sp, r7
 800f252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f256:	4770      	bx	lr

0800f258 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800f258:	b480      	push	{r7}
 800f25a:	b083      	sub	sp, #12
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
 800f260:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	69da      	ldr	r2, [r3, #28]
 800f266:	683b      	ldr	r3, [r7, #0]
 800f268:	4013      	ands	r3, r2
 800f26a:	683a      	ldr	r2, [r7, #0]
 800f26c:	429a      	cmp	r2, r3
 800f26e:	d101      	bne.n	800f274 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800f270:	2301      	movs	r3, #1
 800f272:	e000      	b.n	800f276 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800f274:	2300      	movs	r3, #0
}
 800f276:	4618      	mov	r0, r3
 800f278:	370c      	adds	r7, #12
 800f27a:	46bd      	mov	sp, r7
 800f27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f280:	4770      	bx	lr
	...

0800f284 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800f284:	b580      	push	{r7, lr}
 800f286:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800f288:	2102      	movs	r1, #2
 800f28a:	4818      	ldr	r0, [pc, #96]	@ (800f2ec <HW_IPCC_Rx_Handler+0x68>)
 800f28c:	f7ff ffe4 	bl	800f258 <LL_C2_IPCC_IsActiveFlag_CHx>
 800f290:	4603      	mov	r3, r0
 800f292:	2b00      	cmp	r3, #0
 800f294:	d008      	beq.n	800f2a8 <HW_IPCC_Rx_Handler+0x24>
 800f296:	4b15      	ldr	r3, [pc, #84]	@ (800f2ec <HW_IPCC_Rx_Handler+0x68>)
 800f298:	685b      	ldr	r3, [r3, #4]
 800f29a:	f003 0302 	and.w	r3, r3, #2
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d102      	bne.n	800f2a8 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800f2a2:	f000 f8d5 	bl	800f450 <HW_IPCC_SYS_EvtHandler>
 800f2a6:	e01e      	b.n	800f2e6 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800f2a8:	2101      	movs	r1, #1
 800f2aa:	4810      	ldr	r0, [pc, #64]	@ (800f2ec <HW_IPCC_Rx_Handler+0x68>)
 800f2ac:	f7ff ffd4 	bl	800f258 <LL_C2_IPCC_IsActiveFlag_CHx>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d008      	beq.n	800f2c8 <HW_IPCC_Rx_Handler+0x44>
 800f2b6:	4b0d      	ldr	r3, [pc, #52]	@ (800f2ec <HW_IPCC_Rx_Handler+0x68>)
 800f2b8:	685b      	ldr	r3, [r3, #4]
 800f2ba:	f003 0301 	and.w	r3, r3, #1
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d102      	bne.n	800f2c8 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800f2c2:	f000 f889 	bl	800f3d8 <HW_IPCC_BLE_EvtHandler>
 800f2c6:	e00e      	b.n	800f2e6 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800f2c8:	2108      	movs	r1, #8
 800f2ca:	4808      	ldr	r0, [pc, #32]	@ (800f2ec <HW_IPCC_Rx_Handler+0x68>)
 800f2cc:	f7ff ffc4 	bl	800f258 <LL_C2_IPCC_IsActiveFlag_CHx>
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d008      	beq.n	800f2e8 <HW_IPCC_Rx_Handler+0x64>
 800f2d6:	4b05      	ldr	r3, [pc, #20]	@ (800f2ec <HW_IPCC_Rx_Handler+0x68>)
 800f2d8:	685b      	ldr	r3, [r3, #4]
 800f2da:	f003 0308 	and.w	r3, r3, #8
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d102      	bne.n	800f2e8 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800f2e2:	f000 f901 	bl	800f4e8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800f2e6:	bf00      	nop
 800f2e8:	bf00      	nop
}
 800f2ea:	bd80      	pop	{r7, pc}
 800f2ec:	58000c00 	.word	0x58000c00

0800f2f0 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800f2f4:	2102      	movs	r1, #2
 800f2f6:	4818      	ldr	r0, [pc, #96]	@ (800f358 <HW_IPCC_Tx_Handler+0x68>)
 800f2f8:	f7ff ff99 	bl	800f22e <LL_C1_IPCC_IsActiveFlag_CHx>
 800f2fc:	4603      	mov	r3, r0
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d108      	bne.n	800f314 <HW_IPCC_Tx_Handler+0x24>
 800f302:	4b15      	ldr	r3, [pc, #84]	@ (800f358 <HW_IPCC_Tx_Handler+0x68>)
 800f304:	685b      	ldr	r3, [r3, #4]
 800f306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d102      	bne.n	800f314 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800f30e:	f000 f893 	bl	800f438 <HW_IPCC_SYS_CmdEvtHandler>
 800f312:	e01e      	b.n	800f352 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800f314:	2108      	movs	r1, #8
 800f316:	4810      	ldr	r0, [pc, #64]	@ (800f358 <HW_IPCC_Tx_Handler+0x68>)
 800f318:	f7ff ff89 	bl	800f22e <LL_C1_IPCC_IsActiveFlag_CHx>
 800f31c:	4603      	mov	r3, r0
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d108      	bne.n	800f334 <HW_IPCC_Tx_Handler+0x44>
 800f322:	4b0d      	ldr	r3, [pc, #52]	@ (800f358 <HW_IPCC_Tx_Handler+0x68>)
 800f324:	685b      	ldr	r3, [r3, #4]
 800f326:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d102      	bne.n	800f334 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800f32e:	f000 f8bd 	bl	800f4ac <HW_IPCC_MM_FreeBufHandler>
 800f332:	e00e      	b.n	800f352 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800f334:	2120      	movs	r1, #32
 800f336:	4808      	ldr	r0, [pc, #32]	@ (800f358 <HW_IPCC_Tx_Handler+0x68>)
 800f338:	f7ff ff79 	bl	800f22e <LL_C1_IPCC_IsActiveFlag_CHx>
 800f33c:	4603      	mov	r3, r0
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d108      	bne.n	800f354 <HW_IPCC_Tx_Handler+0x64>
 800f342:	4b05      	ldr	r3, [pc, #20]	@ (800f358 <HW_IPCC_Tx_Handler+0x68>)
 800f344:	685b      	ldr	r3, [r3, #4]
 800f346:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d102      	bne.n	800f354 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800f34e:	f000 f84f 	bl	800f3f0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800f352:	bf00      	nop
 800f354:	bf00      	nop
}
 800f356:	bd80      	pop	{r7, pc}
 800f358:	58000c00 	.word	0x58000c00

0800f35c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800f360:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800f364:	f7ff fed3 	bl	800f10e <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800f368:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800f36c:	f7ff fea4 	bl	800f0b8 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800f370:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800f374:	f7ff fe8c 	bl	800f090 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800f378:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800f37a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800f37c:	f7ff fe78 	bl	800f070 <LL_PWR_EnableBootC2>

  return;
 800f380:	bf00      	nop
}
 800f382:	bd80      	pop	{r7, pc}

0800f384 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800f384:	b580      	push	{r7, lr}
 800f386:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800f388:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800f38c:	f7ff fea6 	bl	800f0dc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800f390:	4806      	ldr	r0, [pc, #24]	@ (800f3ac <HW_IPCC_Init+0x28>)
 800f392:	f7ff fee8 	bl	800f166 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800f396:	4805      	ldr	r0, [pc, #20]	@ (800f3ac <HW_IPCC_Init+0x28>)
 800f398:	f7ff fed5 	bl	800f146 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800f39c:	202c      	movs	r0, #44	@ 0x2c
 800f39e:	f001 fe24 	bl	8010fea <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800f3a2:	202d      	movs	r0, #45	@ 0x2d
 800f3a4:	f001 fe21 	bl	8010fea <HAL_NVIC_EnableIRQ>

  return;
 800f3a8:	bf00      	nop
}
 800f3aa:	bd80      	pop	{r7, pc}
 800f3ac:	58000c00 	.word	0x58000c00

0800f3b0 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800f3b4:	2101      	movs	r1, #1
 800f3b6:	4802      	ldr	r0, [pc, #8]	@ (800f3c0 <HW_IPCC_BLE_Init+0x10>)
 800f3b8:	f7ff ff0a 	bl	800f1d0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800f3bc:	bf00      	nop
}
 800f3be:	bd80      	pop	{r7, pc}
 800f3c0:	58000c00 	.word	0x58000c00

0800f3c4 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800f3c8:	2101      	movs	r1, #1
 800f3ca:	4802      	ldr	r0, [pc, #8]	@ (800f3d4 <HW_IPCC_BLE_SendCmd+0x10>)
 800f3cc:	f7ff ff20 	bl	800f210 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800f3d0:	bf00      	nop
}
 800f3d2:	bd80      	pop	{r7, pc}
 800f3d4:	58000c00 	.word	0x58000c00

0800f3d8 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800f3dc:	f009 fa02 	bl	80187e4 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800f3e0:	2101      	movs	r1, #1
 800f3e2:	4802      	ldr	r0, [pc, #8]	@ (800f3ec <HW_IPCC_BLE_EvtHandler+0x14>)
 800f3e4:	f7ff ff06 	bl	800f1f4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800f3e8:	bf00      	nop
}
 800f3ea:	bd80      	pop	{r7, pc}
 800f3ec:	58000c00 	.word	0x58000c00

0800f3f0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800f3f4:	2120      	movs	r1, #32
 800f3f6:	4803      	ldr	r0, [pc, #12]	@ (800f404 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800f3f8:	f7ff fed8 	bl	800f1ac <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800f3fc:	f009 fa22 	bl	8018844 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800f400:	bf00      	nop
}
 800f402:	bd80      	pop	{r7, pc}
 800f404:	58000c00 	.word	0x58000c00

0800f408 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800f40c:	2102      	movs	r1, #2
 800f40e:	4802      	ldr	r0, [pc, #8]	@ (800f418 <HW_IPCC_SYS_Init+0x10>)
 800f410:	f7ff fede 	bl	800f1d0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800f414:	bf00      	nop
}
 800f416:	bd80      	pop	{r7, pc}
 800f418:	58000c00 	.word	0x58000c00

0800f41c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800f420:	2102      	movs	r1, #2
 800f422:	4804      	ldr	r0, [pc, #16]	@ (800f434 <HW_IPCC_SYS_SendCmd+0x18>)
 800f424:	f7ff fef4 	bl	800f210 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800f428:	2102      	movs	r1, #2
 800f42a:	4802      	ldr	r0, [pc, #8]	@ (800f434 <HW_IPCC_SYS_SendCmd+0x18>)
 800f42c:	f7ff feab 	bl	800f186 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800f430:	bf00      	nop
}
 800f432:	bd80      	pop	{r7, pc}
 800f434:	58000c00 	.word	0x58000c00

0800f438 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800f43c:	2102      	movs	r1, #2
 800f43e:	4803      	ldr	r0, [pc, #12]	@ (800f44c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800f440:	f7ff feb4 	bl	800f1ac <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800f444:	f009 fa4e 	bl	80188e4 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800f448:	bf00      	nop
}
 800f44a:	bd80      	pop	{r7, pc}
 800f44c:	58000c00 	.word	0x58000c00

0800f450 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800f450:	b580      	push	{r7, lr}
 800f452:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800f454:	f009 fa5c 	bl	8018910 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800f458:	2102      	movs	r1, #2
 800f45a:	4802      	ldr	r0, [pc, #8]	@ (800f464 <HW_IPCC_SYS_EvtHandler+0x14>)
 800f45c:	f7ff feca 	bl	800f1f4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800f460:	bf00      	nop
}
 800f462:	bd80      	pop	{r7, pc}
 800f464:	58000c00 	.word	0x58000c00

0800f468 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b082      	sub	sp, #8
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800f470:	2108      	movs	r1, #8
 800f472:	480c      	ldr	r0, [pc, #48]	@ (800f4a4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800f474:	f7ff fedb 	bl	800f22e <LL_C1_IPCC_IsActiveFlag_CHx>
 800f478:	4603      	mov	r3, r0
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d007      	beq.n	800f48e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800f47e:	4a0a      	ldr	r2, [pc, #40]	@ (800f4a8 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800f484:	2108      	movs	r1, #8
 800f486:	4807      	ldr	r0, [pc, #28]	@ (800f4a4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800f488:	f7ff fe7d 	bl	800f186 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800f48c:	e006      	b.n	800f49c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800f492:	2108      	movs	r1, #8
 800f494:	4803      	ldr	r0, [pc, #12]	@ (800f4a4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800f496:	f7ff febb 	bl	800f210 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800f49a:	bf00      	nop
}
 800f49c:	3708      	adds	r7, #8
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	bd80      	pop	{r7, pc}
 800f4a2:	bf00      	nop
 800f4a4:	58000c00 	.word	0x58000c00
 800f4a8:	2000091c 	.word	0x2000091c

0800f4ac <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800f4b0:	2108      	movs	r1, #8
 800f4b2:	4806      	ldr	r0, [pc, #24]	@ (800f4cc <HW_IPCC_MM_FreeBufHandler+0x20>)
 800f4b4:	f7ff fe7a 	bl	800f1ac <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800f4b8:	4b05      	ldr	r3, [pc, #20]	@ (800f4d0 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800f4be:	2108      	movs	r1, #8
 800f4c0:	4802      	ldr	r0, [pc, #8]	@ (800f4cc <HW_IPCC_MM_FreeBufHandler+0x20>)
 800f4c2:	f7ff fea5 	bl	800f210 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800f4c6:	bf00      	nop
}
 800f4c8:	bd80      	pop	{r7, pc}
 800f4ca:	bf00      	nop
 800f4cc:	58000c00 	.word	0x58000c00
 800f4d0:	2000091c 	.word	0x2000091c

0800f4d4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800f4d8:	2108      	movs	r1, #8
 800f4da:	4802      	ldr	r0, [pc, #8]	@ (800f4e4 <HW_IPCC_TRACES_Init+0x10>)
 800f4dc:	f7ff fe78 	bl	800f1d0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800f4e0:	bf00      	nop
}
 800f4e2:	bd80      	pop	{r7, pc}
 800f4e4:	58000c00 	.word	0x58000c00

0800f4e8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800f4ec:	f009 fab8 	bl	8018a60 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800f4f0:	2108      	movs	r1, #8
 800f4f2:	4802      	ldr	r0, [pc, #8]	@ (800f4fc <HW_IPCC_TRACES_EvtHandler+0x14>)
 800f4f4:	f7ff fe7e 	bl	800f1f4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800f4f8:	bf00      	nop
}
 800f4fa:	bd80      	pop	{r7, pc}
 800f4fc:	58000c00 	.word	0x58000c00

0800f500 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800f500:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800f502:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800f504:	3304      	adds	r3, #4

0800f506 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800f506:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800f508:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800f50a:	d3f9      	bcc.n	800f500 <CopyDataInit>
  bx lr
 800f50c:	4770      	bx	lr

0800f50e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800f50e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800f510:	3004      	adds	r0, #4

0800f512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800f512:	4288      	cmp	r0, r1
  bcc FillZerobss
 800f514:	d3fb      	bcc.n	800f50e <FillZerobss>
  bx lr
 800f516:	4770      	bx	lr

0800f518 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800f518:	480c      	ldr	r0, [pc, #48]	@ (800f54c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800f51a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800f51c:	f000 f828 	bl	800f570 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800f520:	480b      	ldr	r0, [pc, #44]	@ (800f550 <LoopForever+0x8>)
 800f522:	490c      	ldr	r1, [pc, #48]	@ (800f554 <LoopForever+0xc>)
 800f524:	4a0c      	ldr	r2, [pc, #48]	@ (800f558 <LoopForever+0x10>)
 800f526:	2300      	movs	r3, #0
 800f528:	f7ff ffed 	bl	800f506 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800f52c:	480b      	ldr	r0, [pc, #44]	@ (800f55c <LoopForever+0x14>)
 800f52e:	490c      	ldr	r1, [pc, #48]	@ (800f560 <LoopForever+0x18>)
 800f530:	2300      	movs	r3, #0
 800f532:	f7ff ffee 	bl	800f512 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800f536:	480b      	ldr	r0, [pc, #44]	@ (800f564 <LoopForever+0x1c>)
 800f538:	490b      	ldr	r1, [pc, #44]	@ (800f568 <LoopForever+0x20>)
 800f53a:	2300      	movs	r3, #0
 800f53c:	f7ff ffe9 	bl	800f512 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800f540:	f00a fece 	bl	801a2e0 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800f544:	f7fb f8d0 	bl	800a6e8 <main>

0800f548 <LoopForever>:

LoopForever:
  b LoopForever
 800f548:	e7fe      	b.n	800f548 <LoopForever>
 800f54a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800f54c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800f550:	20000008 	.word	0x20000008
 800f554:	20000268 	.word	0x20000268
 800f558:	0801e684 	.word	0x0801e684
  INIT_BSS _sbss, _ebss
 800f55c:	200002b8 	.word	0x200002b8
 800f560:	20000b8c 	.word	0x20000b8c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800f564:	200301e4 	.word	0x200301e4
 800f568:	20030a67 	.word	0x20030a67

0800f56c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800f56c:	e7fe      	b.n	800f56c <ADC1_IRQHandler>
	...

0800f570 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800f570:	b480      	push	{r7}
 800f572:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800f574:	4b24      	ldr	r3, [pc, #144]	@ (800f608 <SystemInit+0x98>)
 800f576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f57a:	4a23      	ldr	r2, [pc, #140]	@ (800f608 <SystemInit+0x98>)
 800f57c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f580:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800f584:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f58e:	f043 0301 	orr.w	r3, r3, #1
 800f592:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800f594:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f598:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800f59c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800f59e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f5a2:	681a      	ldr	r2, [r3, #0]
 800f5a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f5a8:	4b18      	ldr	r3, [pc, #96]	@ (800f60c <SystemInit+0x9c>)
 800f5aa:	4013      	ands	r3, r2
 800f5ac:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800f5ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f5b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f5b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f5ba:	f023 0305 	bic.w	r3, r3, #5
 800f5be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800f5c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f5c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f5ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f5ce:	f023 0301 	bic.w	r3, r3, #1
 800f5d2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800f5d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f5da:	4a0d      	ldr	r2, [pc, #52]	@ (800f610 <SystemInit+0xa0>)
 800f5dc:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800f5de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f5e2:	4a0b      	ldr	r2, [pc, #44]	@ (800f610 <SystemInit+0xa0>)
 800f5e4:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800f5e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f5f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f5f4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800f5f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	619a      	str	r2, [r3, #24]
}
 800f5fe:	bf00      	nop
 800f600:	46bd      	mov	sp, r7
 800f602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f606:	4770      	bx	lr
 800f608:	e000ed00 	.word	0xe000ed00
 800f60c:	faf6fefb 	.word	0xfaf6fefb
 800f610:	22041000 	.word	0x22041000

0800f614 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b082      	sub	sp, #8
 800f618:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800f61a:	2300      	movs	r3, #0
 800f61c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f61e:	4b0c      	ldr	r3, [pc, #48]	@ (800f650 <HAL_Init+0x3c>)
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	4a0b      	ldr	r2, [pc, #44]	@ (800f650 <HAL_Init+0x3c>)
 800f624:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f628:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800f62a:	2003      	movs	r0, #3
 800f62c:	f001 fcb8 	bl	8010fa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800f630:	2000      	movs	r0, #0
 800f632:	f000 f80f 	bl	800f654 <HAL_InitTick>
 800f636:	4603      	mov	r3, r0
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d002      	beq.n	800f642 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800f63c:	2301      	movs	r3, #1
 800f63e:	71fb      	strb	r3, [r7, #7]
 800f640:	e001      	b.n	800f646 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800f642:	f7fc fd9c 	bl	800c17e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800f646:	79fb      	ldrb	r3, [r7, #7]
}
 800f648:	4618      	mov	r0, r3
 800f64a:	3708      	adds	r7, #8
 800f64c:	46bd      	mov	sp, r7
 800f64e:	bd80      	pop	{r7, pc}
 800f650:	58004000 	.word	0x58004000

0800f654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b084      	sub	sp, #16
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800f65c:	2300      	movs	r3, #0
 800f65e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800f660:	4b17      	ldr	r3, [pc, #92]	@ (800f6c0 <HAL_InitTick+0x6c>)
 800f662:	781b      	ldrb	r3, [r3, #0]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d024      	beq.n	800f6b2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800f668:	f005 f8dc 	bl	8014824 <HAL_RCC_GetHCLKFreq>
 800f66c:	4602      	mov	r2, r0
 800f66e:	4b14      	ldr	r3, [pc, #80]	@ (800f6c0 <HAL_InitTick+0x6c>)
 800f670:	781b      	ldrb	r3, [r3, #0]
 800f672:	4619      	mov	r1, r3
 800f674:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f678:	fbb3 f3f1 	udiv	r3, r3, r1
 800f67c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f680:	4618      	mov	r0, r3
 800f682:	f001 fcce 	bl	8011022 <HAL_SYSTICK_Config>
 800f686:	4603      	mov	r3, r0
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d10f      	bne.n	800f6ac <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	2b0f      	cmp	r3, #15
 800f690:	d809      	bhi.n	800f6a6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800f692:	2200      	movs	r2, #0
 800f694:	6879      	ldr	r1, [r7, #4]
 800f696:	f04f 30ff 	mov.w	r0, #4294967295
 800f69a:	f001 fc8c 	bl	8010fb6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800f69e:	4a09      	ldr	r2, [pc, #36]	@ (800f6c4 <HAL_InitTick+0x70>)
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	6013      	str	r3, [r2, #0]
 800f6a4:	e007      	b.n	800f6b6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800f6a6:	2301      	movs	r3, #1
 800f6a8:	73fb      	strb	r3, [r7, #15]
 800f6aa:	e004      	b.n	800f6b6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800f6ac:	2301      	movs	r3, #1
 800f6ae:	73fb      	strb	r3, [r7, #15]
 800f6b0:	e001      	b.n	800f6b6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800f6b2:	2301      	movs	r3, #1
 800f6b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800f6b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	3710      	adds	r7, #16
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	bd80      	pop	{r7, pc}
 800f6c0:	20000084 	.word	0x20000084
 800f6c4:	20000080 	.word	0x20000080

0800f6c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800f6c8:	b480      	push	{r7}
 800f6ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800f6cc:	4b06      	ldr	r3, [pc, #24]	@ (800f6e8 <HAL_IncTick+0x20>)
 800f6ce:	781b      	ldrb	r3, [r3, #0]
 800f6d0:	461a      	mov	r2, r3
 800f6d2:	4b06      	ldr	r3, [pc, #24]	@ (800f6ec <HAL_IncTick+0x24>)
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	4413      	add	r3, r2
 800f6d8:	4a04      	ldr	r2, [pc, #16]	@ (800f6ec <HAL_IncTick+0x24>)
 800f6da:	6013      	str	r3, [r2, #0]
}
 800f6dc:	bf00      	nop
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e4:	4770      	bx	lr
 800f6e6:	bf00      	nop
 800f6e8:	20000084 	.word	0x20000084
 800f6ec:	20000920 	.word	0x20000920

0800f6f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800f6f0:	b480      	push	{r7}
 800f6f2:	af00      	add	r7, sp, #0
  return uwTick;
 800f6f4:	4b03      	ldr	r3, [pc, #12]	@ (800f704 <HAL_GetTick+0x14>)
 800f6f6:	681b      	ldr	r3, [r3, #0]
}
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f700:	4770      	bx	lr
 800f702:	bf00      	nop
 800f704:	20000920 	.word	0x20000920

0800f708 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800f708:	b480      	push	{r7}
 800f70a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800f70c:	4b03      	ldr	r3, [pc, #12]	@ (800f71c <HAL_GetTickPrio+0x14>)
 800f70e:	681b      	ldr	r3, [r3, #0]
}
 800f710:	4618      	mov	r0, r3
 800f712:	46bd      	mov	sp, r7
 800f714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f718:	4770      	bx	lr
 800f71a:	bf00      	nop
 800f71c:	20000080 	.word	0x20000080

0800f720 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 800f720:	b480      	push	{r7}
 800f722:	af00      	add	r7, sp, #0
  return uwTickFreq;
 800f724:	4b03      	ldr	r3, [pc, #12]	@ (800f734 <HAL_GetTickFreq+0x14>)
 800f726:	781b      	ldrb	r3, [r3, #0]
}
 800f728:	4618      	mov	r0, r3
 800f72a:	46bd      	mov	sp, r7
 800f72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f730:	4770      	bx	lr
 800f732:	bf00      	nop
 800f734:	20000084 	.word	0x20000084

0800f738 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800f738:	b480      	push	{r7}
 800f73a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800f73c:	4b05      	ldr	r3, [pc, #20]	@ (800f754 <HAL_SuspendTick+0x1c>)
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	4a04      	ldr	r2, [pc, #16]	@ (800f754 <HAL_SuspendTick+0x1c>)
 800f742:	f023 0302 	bic.w	r3, r3, #2
 800f746:	6013      	str	r3, [r2, #0]
}
 800f748:	bf00      	nop
 800f74a:	46bd      	mov	sp, r7
 800f74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f750:	4770      	bx	lr
 800f752:	bf00      	nop
 800f754:	e000e010 	.word	0xe000e010

0800f758 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800f758:	b480      	push	{r7}
 800f75a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800f75c:	4b05      	ldr	r3, [pc, #20]	@ (800f774 <HAL_ResumeTick+0x1c>)
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	4a04      	ldr	r2, [pc, #16]	@ (800f774 <HAL_ResumeTick+0x1c>)
 800f762:	f043 0302 	orr.w	r3, r3, #2
 800f766:	6013      	str	r3, [r2, #0]
}
 800f768:	bf00      	nop
 800f76a:	46bd      	mov	sp, r7
 800f76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f770:	4770      	bx	lr
 800f772:	bf00      	nop
 800f774:	e000e010 	.word	0xe000e010

0800f778 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800f778:	b480      	push	{r7}
 800f77a:	b083      	sub	sp, #12
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
 800f780:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	689b      	ldr	r3, [r3, #8]
 800f786:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800f78a:	683b      	ldr	r3, [r7, #0]
 800f78c:	431a      	orrs	r2, r3
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800f792:	bf00      	nop
 800f794:	370c      	adds	r7, #12
 800f796:	46bd      	mov	sp, r7
 800f798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79c:	4770      	bx	lr

0800f79e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800f79e:	b480      	push	{r7}
 800f7a0:	b083      	sub	sp, #12
 800f7a2:	af00      	add	r7, sp, #0
 800f7a4:	6078      	str	r0, [r7, #4]
 800f7a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	689b      	ldr	r3, [r3, #8]
 800f7ac:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	431a      	orrs	r2, r3
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	609a      	str	r2, [r3, #8]
}
 800f7b8:	bf00      	nop
 800f7ba:	370c      	adds	r7, #12
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c2:	4770      	bx	lr

0800f7c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800f7c4:	b480      	push	{r7}
 800f7c6:	b083      	sub	sp, #12
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	689b      	ldr	r3, [r3, #8]
 800f7d0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	370c      	adds	r7, #12
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7de:	4770      	bx	lr

0800f7e0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800f7e0:	b480      	push	{r7}
 800f7e2:	b087      	sub	sp, #28
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	60f8      	str	r0, [r7, #12]
 800f7e8:	60b9      	str	r1, [r7, #8]
 800f7ea:	607a      	str	r2, [r7, #4]
 800f7ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	3360      	adds	r3, #96	@ 0x60
 800f7f2:	461a      	mov	r2, r3
 800f7f4:	68bb      	ldr	r3, [r7, #8]
 800f7f6:	009b      	lsls	r3, r3, #2
 800f7f8:	4413      	add	r3, r2
 800f7fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800f7fc:	697b      	ldr	r3, [r7, #20]
 800f7fe:	681a      	ldr	r2, [r3, #0]
 800f800:	4b08      	ldr	r3, [pc, #32]	@ (800f824 <LL_ADC_SetOffset+0x44>)
 800f802:	4013      	ands	r3, r2
 800f804:	687a      	ldr	r2, [r7, #4]
 800f806:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800f80a:	683a      	ldr	r2, [r7, #0]
 800f80c:	430a      	orrs	r2, r1
 800f80e:	4313      	orrs	r3, r2
 800f810:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800f814:	697b      	ldr	r3, [r7, #20]
 800f816:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800f818:	bf00      	nop
 800f81a:	371c      	adds	r7, #28
 800f81c:	46bd      	mov	sp, r7
 800f81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f822:	4770      	bx	lr
 800f824:	03fff000 	.word	0x03fff000

0800f828 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800f828:	b480      	push	{r7}
 800f82a:	b085      	sub	sp, #20
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
 800f830:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	3360      	adds	r3, #96	@ 0x60
 800f836:	461a      	mov	r2, r3
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	009b      	lsls	r3, r3, #2
 800f83c:	4413      	add	r3, r2
 800f83e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800f848:	4618      	mov	r0, r3
 800f84a:	3714      	adds	r7, #20
 800f84c:	46bd      	mov	sp, r7
 800f84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f852:	4770      	bx	lr

0800f854 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800f854:	b480      	push	{r7}
 800f856:	b087      	sub	sp, #28
 800f858:	af00      	add	r7, sp, #0
 800f85a:	60f8      	str	r0, [r7, #12]
 800f85c:	60b9      	str	r1, [r7, #8]
 800f85e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	3360      	adds	r3, #96	@ 0x60
 800f864:	461a      	mov	r2, r3
 800f866:	68bb      	ldr	r3, [r7, #8]
 800f868:	009b      	lsls	r3, r3, #2
 800f86a:	4413      	add	r3, r2
 800f86c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800f86e:	697b      	ldr	r3, [r7, #20]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	431a      	orrs	r2, r3
 800f87a:	697b      	ldr	r3, [r7, #20]
 800f87c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800f87e:	bf00      	nop
 800f880:	371c      	adds	r7, #28
 800f882:	46bd      	mov	sp, r7
 800f884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f888:	4770      	bx	lr

0800f88a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800f88a:	b480      	push	{r7}
 800f88c:	b083      	sub	sp, #12
 800f88e:	af00      	add	r7, sp, #0
 800f890:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	68db      	ldr	r3, [r3, #12]
 800f896:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d101      	bne.n	800f8a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800f89e:	2301      	movs	r3, #1
 800f8a0:	e000      	b.n	800f8a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800f8a2:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	370c      	adds	r7, #12
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ae:	4770      	bx	lr

0800f8b0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800f8b0:	b480      	push	{r7}
 800f8b2:	b087      	sub	sp, #28
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	60f8      	str	r0, [r7, #12]
 800f8b8:	60b9      	str	r1, [r7, #8]
 800f8ba:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	3330      	adds	r3, #48	@ 0x30
 800f8c0:	461a      	mov	r2, r3
 800f8c2:	68bb      	ldr	r3, [r7, #8]
 800f8c4:	0a1b      	lsrs	r3, r3, #8
 800f8c6:	009b      	lsls	r3, r3, #2
 800f8c8:	f003 030c 	and.w	r3, r3, #12
 800f8cc:	4413      	add	r3, r2
 800f8ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800f8d0:	697b      	ldr	r3, [r7, #20]
 800f8d2:	681a      	ldr	r2, [r3, #0]
 800f8d4:	68bb      	ldr	r3, [r7, #8]
 800f8d6:	f003 031f 	and.w	r3, r3, #31
 800f8da:	211f      	movs	r1, #31
 800f8dc:	fa01 f303 	lsl.w	r3, r1, r3
 800f8e0:	43db      	mvns	r3, r3
 800f8e2:	401a      	ands	r2, r3
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	0e9b      	lsrs	r3, r3, #26
 800f8e8:	f003 011f 	and.w	r1, r3, #31
 800f8ec:	68bb      	ldr	r3, [r7, #8]
 800f8ee:	f003 031f 	and.w	r3, r3, #31
 800f8f2:	fa01 f303 	lsl.w	r3, r1, r3
 800f8f6:	431a      	orrs	r2, r3
 800f8f8:	697b      	ldr	r3, [r7, #20]
 800f8fa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800f8fc:	bf00      	nop
 800f8fe:	371c      	adds	r7, #28
 800f900:	46bd      	mov	sp, r7
 800f902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f906:	4770      	bx	lr

0800f908 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800f908:	b480      	push	{r7}
 800f90a:	b087      	sub	sp, #28
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	60f8      	str	r0, [r7, #12]
 800f910:	60b9      	str	r1, [r7, #8]
 800f912:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	3314      	adds	r3, #20
 800f918:	461a      	mov	r2, r3
 800f91a:	68bb      	ldr	r3, [r7, #8]
 800f91c:	0e5b      	lsrs	r3, r3, #25
 800f91e:	009b      	lsls	r3, r3, #2
 800f920:	f003 0304 	and.w	r3, r3, #4
 800f924:	4413      	add	r3, r2
 800f926:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800f928:	697b      	ldr	r3, [r7, #20]
 800f92a:	681a      	ldr	r2, [r3, #0]
 800f92c:	68bb      	ldr	r3, [r7, #8]
 800f92e:	0d1b      	lsrs	r3, r3, #20
 800f930:	f003 031f 	and.w	r3, r3, #31
 800f934:	2107      	movs	r1, #7
 800f936:	fa01 f303 	lsl.w	r3, r1, r3
 800f93a:	43db      	mvns	r3, r3
 800f93c:	401a      	ands	r2, r3
 800f93e:	68bb      	ldr	r3, [r7, #8]
 800f940:	0d1b      	lsrs	r3, r3, #20
 800f942:	f003 031f 	and.w	r3, r3, #31
 800f946:	6879      	ldr	r1, [r7, #4]
 800f948:	fa01 f303 	lsl.w	r3, r1, r3
 800f94c:	431a      	orrs	r2, r3
 800f94e:	697b      	ldr	r3, [r7, #20]
 800f950:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800f952:	bf00      	nop
 800f954:	371c      	adds	r7, #28
 800f956:	46bd      	mov	sp, r7
 800f958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95c:	4770      	bx	lr
	...

0800f960 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800f960:	b480      	push	{r7}
 800f962:	b085      	sub	sp, #20
 800f964:	af00      	add	r7, sp, #0
 800f966:	60f8      	str	r0, [r7, #12]
 800f968:	60b9      	str	r1, [r7, #8]
 800f96a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800f972:	68bb      	ldr	r3, [r7, #8]
 800f974:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f978:	43db      	mvns	r3, r3
 800f97a:	401a      	ands	r2, r3
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	f003 0318 	and.w	r3, r3, #24
 800f982:	4908      	ldr	r1, [pc, #32]	@ (800f9a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 800f984:	40d9      	lsrs	r1, r3
 800f986:	68bb      	ldr	r3, [r7, #8]
 800f988:	400b      	ands	r3, r1
 800f98a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f98e:	431a      	orrs	r2, r3
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800f996:	bf00      	nop
 800f998:	3714      	adds	r7, #20
 800f99a:	46bd      	mov	sp, r7
 800f99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a0:	4770      	bx	lr
 800f9a2:	bf00      	nop
 800f9a4:	0007ffff 	.word	0x0007ffff

0800f9a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800f9a8:	b480      	push	{r7}
 800f9aa:	b083      	sub	sp, #12
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	689b      	ldr	r3, [r3, #8]
 800f9b4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800f9b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800f9bc:	687a      	ldr	r2, [r7, #4]
 800f9be:	6093      	str	r3, [r2, #8]
}
 800f9c0:	bf00      	nop
 800f9c2:	370c      	adds	r7, #12
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ca:	4770      	bx	lr

0800f9cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800f9cc:	b480      	push	{r7}
 800f9ce:	b083      	sub	sp, #12
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	689b      	ldr	r3, [r3, #8]
 800f9d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f9dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f9e0:	d101      	bne.n	800f9e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800f9e2:	2301      	movs	r3, #1
 800f9e4:	e000      	b.n	800f9e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800f9e6:	2300      	movs	r3, #0
}
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	370c      	adds	r7, #12
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f2:	4770      	bx	lr

0800f9f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800f9f4:	b480      	push	{r7}
 800f9f6:	b083      	sub	sp, #12
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	689b      	ldr	r3, [r3, #8]
 800fa00:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800fa04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800fa08:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800fa10:	bf00      	nop
 800fa12:	370c      	adds	r7, #12
 800fa14:	46bd      	mov	sp, r7
 800fa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1a:	4770      	bx	lr

0800fa1c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800fa1c:	b480      	push	{r7}
 800fa1e:	b083      	sub	sp, #12
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	689b      	ldr	r3, [r3, #8]
 800fa28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fa2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fa30:	d101      	bne.n	800fa36 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800fa32:	2301      	movs	r3, #1
 800fa34:	e000      	b.n	800fa38 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800fa36:	2300      	movs	r3, #0
}
 800fa38:	4618      	mov	r0, r3
 800fa3a:	370c      	adds	r7, #12
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa42:	4770      	bx	lr

0800fa44 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800fa44:	b480      	push	{r7}
 800fa46:	b083      	sub	sp, #12
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	689b      	ldr	r3, [r3, #8]
 800fa50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fa54:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800fa58:	f043 0201 	orr.w	r2, r3, #1
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800fa60:	bf00      	nop
 800fa62:	370c      	adds	r7, #12
 800fa64:	46bd      	mov	sp, r7
 800fa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6a:	4770      	bx	lr

0800fa6c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800fa6c:	b480      	push	{r7}
 800fa6e:	b083      	sub	sp, #12
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	689b      	ldr	r3, [r3, #8]
 800fa78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fa7c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800fa80:	f043 0202 	orr.w	r2, r3, #2
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800fa88:	bf00      	nop
 800fa8a:	370c      	adds	r7, #12
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa92:	4770      	bx	lr

0800fa94 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800fa94:	b480      	push	{r7}
 800fa96:	b083      	sub	sp, #12
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	689b      	ldr	r3, [r3, #8]
 800faa0:	f003 0301 	and.w	r3, r3, #1
 800faa4:	2b01      	cmp	r3, #1
 800faa6:	d101      	bne.n	800faac <LL_ADC_IsEnabled+0x18>
 800faa8:	2301      	movs	r3, #1
 800faaa:	e000      	b.n	800faae <LL_ADC_IsEnabled+0x1a>
 800faac:	2300      	movs	r3, #0
}
 800faae:	4618      	mov	r0, r3
 800fab0:	370c      	adds	r7, #12
 800fab2:	46bd      	mov	sp, r7
 800fab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab8:	4770      	bx	lr

0800faba <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800faba:	b480      	push	{r7}
 800fabc:	b083      	sub	sp, #12
 800fabe:	af00      	add	r7, sp, #0
 800fac0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	689b      	ldr	r3, [r3, #8]
 800fac6:	f003 0302 	and.w	r3, r3, #2
 800faca:	2b02      	cmp	r3, #2
 800facc:	d101      	bne.n	800fad2 <LL_ADC_IsDisableOngoing+0x18>
 800face:	2301      	movs	r3, #1
 800fad0:	e000      	b.n	800fad4 <LL_ADC_IsDisableOngoing+0x1a>
 800fad2:	2300      	movs	r3, #0
}
 800fad4:	4618      	mov	r0, r3
 800fad6:	370c      	adds	r7, #12
 800fad8:	46bd      	mov	sp, r7
 800fada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fade:	4770      	bx	lr

0800fae0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800fae0:	b480      	push	{r7}
 800fae2:	b083      	sub	sp, #12
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	689b      	ldr	r3, [r3, #8]
 800faec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800faf0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800faf4:	f043 0204 	orr.w	r2, r3, #4
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800fafc:	bf00      	nop
 800fafe:	370c      	adds	r7, #12
 800fb00:	46bd      	mov	sp, r7
 800fb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb06:	4770      	bx	lr

0800fb08 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800fb08:	b480      	push	{r7}
 800fb0a:	b083      	sub	sp, #12
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	689b      	ldr	r3, [r3, #8]
 800fb14:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fb18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800fb1c:	f043 0210 	orr.w	r2, r3, #16
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800fb24:	bf00      	nop
 800fb26:	370c      	adds	r7, #12
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2e:	4770      	bx	lr

0800fb30 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800fb30:	b480      	push	{r7}
 800fb32:	b083      	sub	sp, #12
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	689b      	ldr	r3, [r3, #8]
 800fb3c:	f003 0304 	and.w	r3, r3, #4
 800fb40:	2b04      	cmp	r3, #4
 800fb42:	d101      	bne.n	800fb48 <LL_ADC_REG_IsConversionOngoing+0x18>
 800fb44:	2301      	movs	r3, #1
 800fb46:	e000      	b.n	800fb4a <LL_ADC_REG_IsConversionOngoing+0x1a>
 800fb48:	2300      	movs	r3, #0
}
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	370c      	adds	r7, #12
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb54:	4770      	bx	lr

0800fb56 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800fb56:	b480      	push	{r7}
 800fb58:	b083      	sub	sp, #12
 800fb5a:	af00      	add	r7, sp, #0
 800fb5c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	689b      	ldr	r3, [r3, #8]
 800fb62:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fb66:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800fb6a:	f043 0220 	orr.w	r2, r3, #32
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800fb72:	bf00      	nop
 800fb74:	370c      	adds	r7, #12
 800fb76:	46bd      	mov	sp, r7
 800fb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7c:	4770      	bx	lr

0800fb7e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800fb7e:	b480      	push	{r7}
 800fb80:	b083      	sub	sp, #12
 800fb82:	af00      	add	r7, sp, #0
 800fb84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	689b      	ldr	r3, [r3, #8]
 800fb8a:	f003 0308 	and.w	r3, r3, #8
 800fb8e:	2b08      	cmp	r3, #8
 800fb90:	d101      	bne.n	800fb96 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800fb92:	2301      	movs	r3, #1
 800fb94:	e000      	b.n	800fb98 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800fb96:	2300      	movs	r3, #0
}
 800fb98:	4618      	mov	r0, r3
 800fb9a:	370c      	adds	r7, #12
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba2:	4770      	bx	lr

0800fba4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b088      	sub	sp, #32
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fbac:	2300      	movs	r3, #0
 800fbae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d101      	bne.n	800fbc2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800fbbe:	2301      	movs	r3, #1
 800fbc0:	e12e      	b.n	800fe20 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	691b      	ldr	r3, [r3, #16]
 800fbc6:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d109      	bne.n	800fbe4 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800fbd0:	6878      	ldr	r0, [r7, #4]
 800fbd2:	f7f8 fca7 	bl	8008524 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	2200      	movs	r2, #0
 800fbda:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	2200      	movs	r2, #0
 800fbe0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	4618      	mov	r0, r3
 800fbea:	f7ff feef 	bl	800f9cc <LL_ADC_IsDeepPowerDownEnabled>
 800fbee:	4603      	mov	r3, r0
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d004      	beq.n	800fbfe <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	f7ff fed5 	bl	800f9a8 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	4618      	mov	r0, r3
 800fc04:	f7ff ff0a 	bl	800fa1c <LL_ADC_IsInternalRegulatorEnabled>
 800fc08:	4603      	mov	r3, r0
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d115      	bne.n	800fc3a <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	4618      	mov	r0, r3
 800fc14:	f7ff feee 	bl	800f9f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800fc18:	4b83      	ldr	r3, [pc, #524]	@ (800fe28 <HAL_ADC_Init+0x284>)
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	099b      	lsrs	r3, r3, #6
 800fc1e:	4a83      	ldr	r2, [pc, #524]	@ (800fe2c <HAL_ADC_Init+0x288>)
 800fc20:	fba2 2303 	umull	r2, r3, r2, r3
 800fc24:	099b      	lsrs	r3, r3, #6
 800fc26:	3301      	adds	r3, #1
 800fc28:	005b      	lsls	r3, r3, #1
 800fc2a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800fc2c:	e002      	b.n	800fc34 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 800fc2e:	68bb      	ldr	r3, [r7, #8]
 800fc30:	3b01      	subs	r3, #1
 800fc32:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800fc34:	68bb      	ldr	r3, [r7, #8]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d1f9      	bne.n	800fc2e <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	4618      	mov	r0, r3
 800fc40:	f7ff feec 	bl	800fa1c <LL_ADC_IsInternalRegulatorEnabled>
 800fc44:	4603      	mov	r3, r0
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d10d      	bne.n	800fc66 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fc4e:	f043 0210 	orr.w	r2, r3, #16
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fc5a:	f043 0201 	orr.w	r2, r3, #1
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800fc62:	2301      	movs	r3, #1
 800fc64:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f7ff ff60 	bl	800fb30 <LL_ADC_REG_IsConversionOngoing>
 800fc70:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fc76:	f003 0310 	and.w	r3, r3, #16
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	f040 80c7 	bne.w	800fe0e <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800fc80:	697b      	ldr	r3, [r7, #20]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	f040 80c3 	bne.w	800fe0e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fc8c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800fc90:	f043 0202 	orr.w	r2, r3, #2
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	f7ff fef9 	bl	800fa94 <LL_ADC_IsEnabled>
 800fca2:	4603      	mov	r3, r0
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d10b      	bne.n	800fcc0 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800fca8:	4861      	ldr	r0, [pc, #388]	@ (800fe30 <HAL_ADC_Init+0x28c>)
 800fcaa:	f7ff fef3 	bl	800fa94 <LL_ADC_IsEnabled>
 800fcae:	4603      	mov	r3, r0
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d105      	bne.n	800fcc0 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	685b      	ldr	r3, [r3, #4]
 800fcb8:	4619      	mov	r1, r3
 800fcba:	485e      	ldr	r0, [pc, #376]	@ (800fe34 <HAL_ADC_Init+0x290>)
 800fcbc:	f7ff fd5c 	bl	800f778 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	7e5b      	ldrb	r3, [r3, #25]
 800fcc4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800fcca:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800fcd0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800fcd6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fcde:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 800fce0:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800fce2:	69ba      	ldr	r2, [r7, #24]
 800fce4:	4313      	orrs	r3, r2
 800fce6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fcee:	2b01      	cmp	r3, #1
 800fcf0:	d106      	bne.n	800fd00 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcf6:	3b01      	subs	r3, #1
 800fcf8:	045b      	lsls	r3, r3, #17
 800fcfa:	69ba      	ldr	r2, [r7, #24]
 800fcfc:	4313      	orrs	r3, r2
 800fcfe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d009      	beq.n	800fd1c <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd0c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd14:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800fd16:	69ba      	ldr	r2, [r7, #24]
 800fd18:	4313      	orrs	r3, r2
 800fd1a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	68da      	ldr	r2, [r3, #12]
 800fd22:	4b45      	ldr	r3, [pc, #276]	@ (800fe38 <HAL_ADC_Init+0x294>)
 800fd24:	4013      	ands	r3, r2
 800fd26:	687a      	ldr	r2, [r7, #4]
 800fd28:	6812      	ldr	r2, [r2, #0]
 800fd2a:	69b9      	ldr	r1, [r7, #24]
 800fd2c:	430b      	orrs	r3, r1
 800fd2e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	4618      	mov	r0, r3
 800fd36:	f7ff fefb 	bl	800fb30 <LL_ADC_REG_IsConversionOngoing>
 800fd3a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	4618      	mov	r0, r3
 800fd42:	f7ff ff1c 	bl	800fb7e <LL_ADC_INJ_IsConversionOngoing>
 800fd46:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800fd48:	693b      	ldr	r3, [r7, #16]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d13d      	bne.n	800fdca <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d13a      	bne.n	800fdca <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800fd58:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fd60:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800fd62:	4313      	orrs	r3, r2
 800fd64:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	68db      	ldr	r3, [r3, #12]
 800fd6c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800fd70:	f023 0302 	bic.w	r3, r3, #2
 800fd74:	687a      	ldr	r2, [r7, #4]
 800fd76:	6812      	ldr	r2, [r2, #0]
 800fd78:	69b9      	ldr	r1, [r7, #24]
 800fd7a:	430b      	orrs	r3, r1
 800fd7c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800fd84:	2b01      	cmp	r3, #1
 800fd86:	d118      	bne.n	800fdba <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	691b      	ldr	r3, [r3, #16]
 800fd8e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800fd92:	f023 0304 	bic.w	r3, r3, #4
 800fd96:	687a      	ldr	r2, [r7, #4]
 800fd98:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800fd9a:	687a      	ldr	r2, [r7, #4]
 800fd9c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800fd9e:	4311      	orrs	r1, r2
 800fda0:	687a      	ldr	r2, [r7, #4]
 800fda2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800fda4:	4311      	orrs	r1, r2
 800fda6:	687a      	ldr	r2, [r7, #4]
 800fda8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800fdaa:	430a      	orrs	r2, r1
 800fdac:	431a      	orrs	r2, r3
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	f042 0201 	orr.w	r2, r2, #1
 800fdb6:	611a      	str	r2, [r3, #16]
 800fdb8:	e007      	b.n	800fdca <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	691a      	ldr	r2, [r3, #16]
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	f022 0201 	bic.w	r2, r2, #1
 800fdc8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	691b      	ldr	r3, [r3, #16]
 800fdce:	2b01      	cmp	r3, #1
 800fdd0:	d10c      	bne.n	800fdec <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fdd8:	f023 010f 	bic.w	r1, r3, #15
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	69db      	ldr	r3, [r3, #28]
 800fde0:	1e5a      	subs	r2, r3, #1
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	430a      	orrs	r2, r1
 800fde8:	631a      	str	r2, [r3, #48]	@ 0x30
 800fdea:	e007      	b.n	800fdfc <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	f022 020f 	bic.w	r2, r2, #15
 800fdfa:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe00:	f023 0303 	bic.w	r3, r3, #3
 800fe04:	f043 0201 	orr.w	r2, r3, #1
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	655a      	str	r2, [r3, #84]	@ 0x54
 800fe0c:	e007      	b.n	800fe1e <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe12:	f043 0210 	orr.w	r2, r3, #16
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800fe1a:	2301      	movs	r3, #1
 800fe1c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800fe1e:	7ffb      	ldrb	r3, [r7, #31]
}
 800fe20:	4618      	mov	r0, r3
 800fe22:	3720      	adds	r7, #32
 800fe24:	46bd      	mov	sp, r7
 800fe26:	bd80      	pop	{r7, pc}
 800fe28:	2000007c 	.word	0x2000007c
 800fe2c:	053e2d63 	.word	0x053e2d63
 800fe30:	50040000 	.word	0x50040000
 800fe34:	50040300 	.word	0x50040300
 800fe38:	fff0c007 	.word	0xfff0c007

0800fe3c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b086      	sub	sp, #24
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	60f8      	str	r0, [r7, #12]
 800fe44:	60b9      	str	r1, [r7, #8]
 800fe46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	f7ff fe6f 	bl	800fb30 <LL_ADC_REG_IsConversionOngoing>
 800fe52:	4603      	mov	r3, r0
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d167      	bne.n	800ff28 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800fe5e:	2b01      	cmp	r3, #1
 800fe60:	d101      	bne.n	800fe66 <HAL_ADC_Start_DMA+0x2a>
 800fe62:	2302      	movs	r3, #2
 800fe64:	e063      	b.n	800ff2e <HAL_ADC_Start_DMA+0xf2>
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	2201      	movs	r2, #1
 800fe6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800fe6e:	68f8      	ldr	r0, [r7, #12]
 800fe70:	f000 fd6a 	bl	8010948 <ADC_Enable>
 800fe74:	4603      	mov	r3, r0
 800fe76:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800fe78:	7dfb      	ldrb	r3, [r7, #23]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d14f      	bne.n	800ff1e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe82:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800fe86:	f023 0301 	bic.w	r3, r3, #1
 800fe8a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d006      	beq.n	800feac <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fea2:	f023 0206 	bic.w	r2, r3, #6
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	659a      	str	r2, [r3, #88]	@ 0x58
 800feaa:	e002      	b.n	800feb2 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	2200      	movs	r2, #0
 800feb0:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800feb6:	4a20      	ldr	r2, [pc, #128]	@ (800ff38 <HAL_ADC_Start_DMA+0xfc>)
 800feb8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800febe:	4a1f      	ldr	r2, [pc, #124]	@ (800ff3c <HAL_ADC_Start_DMA+0x100>)
 800fec0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fec6:	4a1e      	ldr	r2, [pc, #120]	@ (800ff40 <HAL_ADC_Start_DMA+0x104>)
 800fec8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	221c      	movs	r2, #28
 800fed0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	2200      	movs	r2, #0
 800fed6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	685a      	ldr	r2, [r3, #4]
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	f042 0210 	orr.w	r2, r2, #16
 800fee8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	68da      	ldr	r2, [r3, #12]
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	f042 0201 	orr.w	r2, r2, #1
 800fef8:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	3340      	adds	r3, #64	@ 0x40
 800ff04:	4619      	mov	r1, r3
 800ff06:	68ba      	ldr	r2, [r7, #8]
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	f001 f95b 	bl	80111c4 <HAL_DMA_Start_IT>
 800ff0e:	4603      	mov	r3, r0
 800ff10:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	4618      	mov	r0, r3
 800ff18:	f7ff fde2 	bl	800fae0 <LL_ADC_REG_StartConversion>
 800ff1c:	e006      	b.n	800ff2c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	2200      	movs	r2, #0
 800ff22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800ff26:	e001      	b.n	800ff2c <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800ff28:	2302      	movs	r3, #2
 800ff2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800ff2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff2e:	4618      	mov	r0, r3
 800ff30:	3718      	adds	r7, #24
 800ff32:	46bd      	mov	sp, r7
 800ff34:	bd80      	pop	{r7, pc}
 800ff36:	bf00      	nop
 800ff38:	08010afb 	.word	0x08010afb
 800ff3c:	08010bd3 	.word	0x08010bd3
 800ff40:	08010bef 	.word	0x08010bef

0800ff44 <HAL_ADC_Stop_DMA>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b084      	sub	sp, #16
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ff52:	2b01      	cmp	r3, #1
 800ff54:	d101      	bne.n	800ff5a <HAL_ADC_Stop_DMA+0x16>
 800ff56:	2302      	movs	r3, #2
 800ff58:	e051      	b.n	800fffe <HAL_ADC_Stop_DMA+0xba>
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	2201      	movs	r2, #1
 800ff5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential ADC group regular conversion on going */
#if defined(ADC_SUPPORT_2_5_MSPS)
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800ff62:	2103      	movs	r1, #3
 800ff64:	6878      	ldr	r0, [r7, #4]
 800ff66:	f000 fc33 	bl	80107d0 <ADC_ConversionStop>
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800ff6e:	7bfb      	ldrb	r3, [r7, #15]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d13f      	bne.n	800fff4 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	68da      	ldr	r2, [r3, #12]
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	f022 0201 	bic.w	r2, r2, #1
 800ff82:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ff88:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800ff8c:	b2db      	uxtb	r3, r3
 800ff8e:	2b02      	cmp	r3, #2
 800ff90:	d10f      	bne.n	800ffb2 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ff96:	4618      	mov	r0, r3
 800ff98:	f001 f98f 	bl	80112ba <HAL_DMA_Abort>
 800ff9c:	4603      	mov	r3, r0
 800ff9e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800ffa0:	7bfb      	ldrb	r3, [r7, #15]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d005      	beq.n	800ffb2 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ffaa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	685a      	ldr	r2, [r3, #4]
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	f022 0210 	bic.w	r2, r2, #16
 800ffc0:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800ffc2:	7bfb      	ldrb	r3, [r7, #15]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d105      	bne.n	800ffd4 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800ffc8:	6878      	ldr	r0, [r7, #4]
 800ffca:	f000 fd37 	bl	8010a3c <ADC_Disable>
 800ffce:	4603      	mov	r3, r0
 800ffd0:	73fb      	strb	r3, [r7, #15]
 800ffd2:	e002      	b.n	800ffda <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800ffd4:	6878      	ldr	r0, [r7, #4]
 800ffd6:	f000 fd31 	bl	8010a3c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800ffda:	7bfb      	ldrb	r3, [r7, #15]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d109      	bne.n	800fff4 <HAL_ADC_Stop_DMA+0xb0>
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ffe4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800ffe8:	f023 0301 	bic.w	r3, r3, #1
 800ffec:	f043 0201 	orr.w	r2, r3, #1
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	2200      	movs	r2, #0
 800fff8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800fffc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fffe:	4618      	mov	r0, r3
 8010000:	3710      	adds	r7, #16
 8010002:	46bd      	mov	sp, r7
 8010004:	bd80      	pop	{r7, pc}

08010006 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8010006:	b480      	push	{r7}
 8010008:	b083      	sub	sp, #12
 801000a:	af00      	add	r7, sp, #0
 801000c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 801000e:	bf00      	nop
 8010010:	370c      	adds	r7, #12
 8010012:	46bd      	mov	sp, r7
 8010014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010018:	4770      	bx	lr

0801001a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 801001a:	b480      	push	{r7}
 801001c:	b083      	sub	sp, #12
 801001e:	af00      	add	r7, sp, #0
 8010020:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8010022:	bf00      	nop
 8010024:	370c      	adds	r7, #12
 8010026:	46bd      	mov	sp, r7
 8010028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002c:	4770      	bx	lr

0801002e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 801002e:	b480      	push	{r7}
 8010030:	b083      	sub	sp, #12
 8010032:	af00      	add	r7, sp, #0
 8010034:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8010036:	bf00      	nop
 8010038:	370c      	adds	r7, #12
 801003a:	46bd      	mov	sp, r7
 801003c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010040:	4770      	bx	lr
	...

08010044 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8010044:	b580      	push	{r7, lr}
 8010046:	b0b6      	sub	sp, #216	@ 0xd8
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
 801004c:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801004e:	2300      	movs	r3, #0
 8010050:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8010054:	2300      	movs	r3, #0
 8010056:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801005e:	2b01      	cmp	r3, #1
 8010060:	d101      	bne.n	8010066 <HAL_ADC_ConfigChannel+0x22>
 8010062:	2302      	movs	r3, #2
 8010064:	e39f      	b.n	80107a6 <HAL_ADC_ConfigChannel+0x762>
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	2201      	movs	r2, #1
 801006a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	4618      	mov	r0, r3
 8010074:	f7ff fd5c 	bl	800fb30 <LL_ADC_REG_IsConversionOngoing>
 8010078:	4603      	mov	r3, r0
 801007a:	2b00      	cmp	r3, #0
 801007c:	f040 8384 	bne.w	8010788 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	6818      	ldr	r0, [r3, #0]
 8010084:	683b      	ldr	r3, [r7, #0]
 8010086:	6859      	ldr	r1, [r3, #4]
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	461a      	mov	r2, r3
 801008e:	f7ff fc0f 	bl	800f8b0 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	4618      	mov	r0, r3
 8010098:	f7ff fd4a 	bl	800fb30 <LL_ADC_REG_IsConversionOngoing>
 801009c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	4618      	mov	r0, r3
 80100a6:	f7ff fd6a 	bl	800fb7e <LL_ADC_INJ_IsConversionOngoing>
 80100aa:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80100ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	f040 81a6 	bne.w	8010404 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80100b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80100bc:	2b00      	cmp	r3, #0
 80100be:	f040 81a1 	bne.w	8010404 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	6818      	ldr	r0, [r3, #0]
 80100c6:	683b      	ldr	r3, [r7, #0]
 80100c8:	6819      	ldr	r1, [r3, #0]
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	689b      	ldr	r3, [r3, #8]
 80100ce:	461a      	mov	r2, r3
 80100d0:	f7ff fc1a 	bl	800f908 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	695a      	ldr	r2, [r3, #20]
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	68db      	ldr	r3, [r3, #12]
 80100de:	08db      	lsrs	r3, r3, #3
 80100e0:	f003 0303 	and.w	r3, r3, #3
 80100e4:	005b      	lsls	r3, r3, #1
 80100e6:	fa02 f303 	lsl.w	r3, r2, r3
 80100ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80100ee:	683b      	ldr	r3, [r7, #0]
 80100f0:	691b      	ldr	r3, [r3, #16]
 80100f2:	2b04      	cmp	r3, #4
 80100f4:	d00a      	beq.n	801010c <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	6818      	ldr	r0, [r3, #0]
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	6919      	ldr	r1, [r3, #16]
 80100fe:	683b      	ldr	r3, [r7, #0]
 8010100:	681a      	ldr	r2, [r3, #0]
 8010102:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010106:	f7ff fb6b 	bl	800f7e0 <LL_ADC_SetOffset>
 801010a:	e17b      	b.n	8010404 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	2100      	movs	r1, #0
 8010112:	4618      	mov	r0, r3
 8010114:	f7ff fb88 	bl	800f828 <LL_ADC_GetOffsetChannel>
 8010118:	4603      	mov	r3, r0
 801011a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801011e:	2b00      	cmp	r3, #0
 8010120:	d10a      	bne.n	8010138 <HAL_ADC_ConfigChannel+0xf4>
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	2100      	movs	r1, #0
 8010128:	4618      	mov	r0, r3
 801012a:	f7ff fb7d 	bl	800f828 <LL_ADC_GetOffsetChannel>
 801012e:	4603      	mov	r3, r0
 8010130:	0e9b      	lsrs	r3, r3, #26
 8010132:	f003 021f 	and.w	r2, r3, #31
 8010136:	e01e      	b.n	8010176 <HAL_ADC_ConfigChannel+0x132>
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	2100      	movs	r1, #0
 801013e:	4618      	mov	r0, r3
 8010140:	f7ff fb72 	bl	800f828 <LL_ADC_GetOffsetChannel>
 8010144:	4603      	mov	r3, r0
 8010146:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801014a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801014e:	fa93 f3a3 	rbit	r3, r3
 8010152:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 8010156:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801015a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 801015e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010162:	2b00      	cmp	r3, #0
 8010164:	d101      	bne.n	801016a <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 8010166:	2320      	movs	r3, #32
 8010168:	e004      	b.n	8010174 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 801016a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801016e:	fab3 f383 	clz	r3, r3
 8010172:	b2db      	uxtb	r3, r3
 8010174:	461a      	mov	r2, r3
 8010176:	683b      	ldr	r3, [r7, #0]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801017e:	2b00      	cmp	r3, #0
 8010180:	d105      	bne.n	801018e <HAL_ADC_ConfigChannel+0x14a>
 8010182:	683b      	ldr	r3, [r7, #0]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	0e9b      	lsrs	r3, r3, #26
 8010188:	f003 031f 	and.w	r3, r3, #31
 801018c:	e018      	b.n	80101c0 <HAL_ADC_ConfigChannel+0x17c>
 801018e:	683b      	ldr	r3, [r7, #0]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010196:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801019a:	fa93 f3a3 	rbit	r3, r3
 801019e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80101a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80101a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80101aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d101      	bne.n	80101b6 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 80101b2:	2320      	movs	r3, #32
 80101b4:	e004      	b.n	80101c0 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 80101b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80101ba:	fab3 f383 	clz	r3, r3
 80101be:	b2db      	uxtb	r3, r3
 80101c0:	429a      	cmp	r2, r3
 80101c2:	d106      	bne.n	80101d2 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	2200      	movs	r2, #0
 80101ca:	2100      	movs	r1, #0
 80101cc:	4618      	mov	r0, r3
 80101ce:	f7ff fb41 	bl	800f854 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	2101      	movs	r1, #1
 80101d8:	4618      	mov	r0, r3
 80101da:	f7ff fb25 	bl	800f828 <LL_ADC_GetOffsetChannel>
 80101de:	4603      	mov	r3, r0
 80101e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d10a      	bne.n	80101fe <HAL_ADC_ConfigChannel+0x1ba>
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	2101      	movs	r1, #1
 80101ee:	4618      	mov	r0, r3
 80101f0:	f7ff fb1a 	bl	800f828 <LL_ADC_GetOffsetChannel>
 80101f4:	4603      	mov	r3, r0
 80101f6:	0e9b      	lsrs	r3, r3, #26
 80101f8:	f003 021f 	and.w	r2, r3, #31
 80101fc:	e01e      	b.n	801023c <HAL_ADC_ConfigChannel+0x1f8>
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	2101      	movs	r1, #1
 8010204:	4618      	mov	r0, r3
 8010206:	f7ff fb0f 	bl	800f828 <LL_ADC_GetOffsetChannel>
 801020a:	4603      	mov	r3, r0
 801020c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010210:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010214:	fa93 f3a3 	rbit	r3, r3
 8010218:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 801021c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010220:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8010224:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8010228:	2b00      	cmp	r3, #0
 801022a:	d101      	bne.n	8010230 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 801022c:	2320      	movs	r3, #32
 801022e:	e004      	b.n	801023a <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8010230:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8010234:	fab3 f383 	clz	r3, r3
 8010238:	b2db      	uxtb	r3, r3
 801023a:	461a      	mov	r2, r3
 801023c:	683b      	ldr	r3, [r7, #0]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010244:	2b00      	cmp	r3, #0
 8010246:	d105      	bne.n	8010254 <HAL_ADC_ConfigChannel+0x210>
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	0e9b      	lsrs	r3, r3, #26
 801024e:	f003 031f 	and.w	r3, r3, #31
 8010252:	e018      	b.n	8010286 <HAL_ADC_ConfigChannel+0x242>
 8010254:	683b      	ldr	r3, [r7, #0]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801025c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010260:	fa93 f3a3 	rbit	r3, r3
 8010264:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8010268:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801026c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8010270:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010274:	2b00      	cmp	r3, #0
 8010276:	d101      	bne.n	801027c <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8010278:	2320      	movs	r3, #32
 801027a:	e004      	b.n	8010286 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 801027c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010280:	fab3 f383 	clz	r3, r3
 8010284:	b2db      	uxtb	r3, r3
 8010286:	429a      	cmp	r2, r3
 8010288:	d106      	bne.n	8010298 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	2200      	movs	r2, #0
 8010290:	2101      	movs	r1, #1
 8010292:	4618      	mov	r0, r3
 8010294:	f7ff fade 	bl	800f854 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	2102      	movs	r1, #2
 801029e:	4618      	mov	r0, r3
 80102a0:	f7ff fac2 	bl	800f828 <LL_ADC_GetOffsetChannel>
 80102a4:	4603      	mov	r3, r0
 80102a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d10a      	bne.n	80102c4 <HAL_ADC_ConfigChannel+0x280>
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	2102      	movs	r1, #2
 80102b4:	4618      	mov	r0, r3
 80102b6:	f7ff fab7 	bl	800f828 <LL_ADC_GetOffsetChannel>
 80102ba:	4603      	mov	r3, r0
 80102bc:	0e9b      	lsrs	r3, r3, #26
 80102be:	f003 021f 	and.w	r2, r3, #31
 80102c2:	e01e      	b.n	8010302 <HAL_ADC_ConfigChannel+0x2be>
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	2102      	movs	r1, #2
 80102ca:	4618      	mov	r0, r3
 80102cc:	f7ff faac 	bl	800f828 <LL_ADC_GetOffsetChannel>
 80102d0:	4603      	mov	r3, r0
 80102d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80102d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80102da:	fa93 f3a3 	rbit	r3, r3
 80102de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80102e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80102e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80102ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d101      	bne.n	80102f6 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 80102f2:	2320      	movs	r3, #32
 80102f4:	e004      	b.n	8010300 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80102f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80102fa:	fab3 f383 	clz	r3, r3
 80102fe:	b2db      	uxtb	r3, r3
 8010300:	461a      	mov	r2, r3
 8010302:	683b      	ldr	r3, [r7, #0]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801030a:	2b00      	cmp	r3, #0
 801030c:	d105      	bne.n	801031a <HAL_ADC_ConfigChannel+0x2d6>
 801030e:	683b      	ldr	r3, [r7, #0]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	0e9b      	lsrs	r3, r3, #26
 8010314:	f003 031f 	and.w	r3, r3, #31
 8010318:	e016      	b.n	8010348 <HAL_ADC_ConfigChannel+0x304>
 801031a:	683b      	ldr	r3, [r7, #0]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010322:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010326:	fa93 f3a3 	rbit	r3, r3
 801032a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 801032c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801032e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8010332:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010336:	2b00      	cmp	r3, #0
 8010338:	d101      	bne.n	801033e <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 801033a:	2320      	movs	r3, #32
 801033c:	e004      	b.n	8010348 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 801033e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010342:	fab3 f383 	clz	r3, r3
 8010346:	b2db      	uxtb	r3, r3
 8010348:	429a      	cmp	r2, r3
 801034a:	d106      	bne.n	801035a <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	2200      	movs	r2, #0
 8010352:	2102      	movs	r1, #2
 8010354:	4618      	mov	r0, r3
 8010356:	f7ff fa7d 	bl	800f854 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	2103      	movs	r1, #3
 8010360:	4618      	mov	r0, r3
 8010362:	f7ff fa61 	bl	800f828 <LL_ADC_GetOffsetChannel>
 8010366:	4603      	mov	r3, r0
 8010368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801036c:	2b00      	cmp	r3, #0
 801036e:	d10a      	bne.n	8010386 <HAL_ADC_ConfigChannel+0x342>
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	2103      	movs	r1, #3
 8010376:	4618      	mov	r0, r3
 8010378:	f7ff fa56 	bl	800f828 <LL_ADC_GetOffsetChannel>
 801037c:	4603      	mov	r3, r0
 801037e:	0e9b      	lsrs	r3, r3, #26
 8010380:	f003 021f 	and.w	r2, r3, #31
 8010384:	e017      	b.n	80103b6 <HAL_ADC_ConfigChannel+0x372>
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	2103      	movs	r1, #3
 801038c:	4618      	mov	r0, r3
 801038e:	f7ff fa4b 	bl	800f828 <LL_ADC_GetOffsetChannel>
 8010392:	4603      	mov	r3, r0
 8010394:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010396:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010398:	fa93 f3a3 	rbit	r3, r3
 801039c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 801039e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80103a0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80103a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d101      	bne.n	80103ac <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 80103a8:	2320      	movs	r3, #32
 80103aa:	e003      	b.n	80103b4 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 80103ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80103ae:	fab3 f383 	clz	r3, r3
 80103b2:	b2db      	uxtb	r3, r3
 80103b4:	461a      	mov	r2, r3
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d105      	bne.n	80103ce <HAL_ADC_ConfigChannel+0x38a>
 80103c2:	683b      	ldr	r3, [r7, #0]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	0e9b      	lsrs	r3, r3, #26
 80103c8:	f003 031f 	and.w	r3, r3, #31
 80103cc:	e011      	b.n	80103f2 <HAL_ADC_ConfigChannel+0x3ae>
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80103d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80103d6:	fa93 f3a3 	rbit	r3, r3
 80103da:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80103dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80103de:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80103e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d101      	bne.n	80103ea <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 80103e6:	2320      	movs	r3, #32
 80103e8:	e003      	b.n	80103f2 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 80103ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80103ec:	fab3 f383 	clz	r3, r3
 80103f0:	b2db      	uxtb	r3, r3
 80103f2:	429a      	cmp	r2, r3
 80103f4:	d106      	bne.n	8010404 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	2200      	movs	r2, #0
 80103fc:	2103      	movs	r1, #3
 80103fe:	4618      	mov	r0, r3
 8010400:	f7ff fa28 	bl	800f854 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	4618      	mov	r0, r3
 801040a:	f7ff fb43 	bl	800fa94 <LL_ADC_IsEnabled>
 801040e:	4603      	mov	r3, r0
 8010410:	2b00      	cmp	r3, #0
 8010412:	f040 81c2 	bne.w	801079a <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	6818      	ldr	r0, [r3, #0]
 801041a:	683b      	ldr	r3, [r7, #0]
 801041c:	6819      	ldr	r1, [r3, #0]
 801041e:	683b      	ldr	r3, [r7, #0]
 8010420:	68db      	ldr	r3, [r3, #12]
 8010422:	461a      	mov	r2, r3
 8010424:	f7ff fa9c 	bl	800f960 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8010428:	683b      	ldr	r3, [r7, #0]
 801042a:	68db      	ldr	r3, [r3, #12]
 801042c:	4a8e      	ldr	r2, [pc, #568]	@ (8010668 <HAL_ADC_ConfigChannel+0x624>)
 801042e:	4293      	cmp	r3, r2
 8010430:	f040 8130 	bne.w	8010694 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8010438:	683b      	ldr	r3, [r7, #0]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010440:	2b00      	cmp	r3, #0
 8010442:	d10b      	bne.n	801045c <HAL_ADC_ConfigChannel+0x418>
 8010444:	683b      	ldr	r3, [r7, #0]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	0e9b      	lsrs	r3, r3, #26
 801044a:	3301      	adds	r3, #1
 801044c:	f003 031f 	and.w	r3, r3, #31
 8010450:	2b09      	cmp	r3, #9
 8010452:	bf94      	ite	ls
 8010454:	2301      	movls	r3, #1
 8010456:	2300      	movhi	r3, #0
 8010458:	b2db      	uxtb	r3, r3
 801045a:	e019      	b.n	8010490 <HAL_ADC_ConfigChannel+0x44c>
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010462:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010464:	fa93 f3a3 	rbit	r3, r3
 8010468:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 801046a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801046c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 801046e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010470:	2b00      	cmp	r3, #0
 8010472:	d101      	bne.n	8010478 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8010474:	2320      	movs	r3, #32
 8010476:	e003      	b.n	8010480 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8010478:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801047a:	fab3 f383 	clz	r3, r3
 801047e:	b2db      	uxtb	r3, r3
 8010480:	3301      	adds	r3, #1
 8010482:	f003 031f 	and.w	r3, r3, #31
 8010486:	2b09      	cmp	r3, #9
 8010488:	bf94      	ite	ls
 801048a:	2301      	movls	r3, #1
 801048c:	2300      	movhi	r3, #0
 801048e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8010490:	2b00      	cmp	r3, #0
 8010492:	d079      	beq.n	8010588 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8010494:	683b      	ldr	r3, [r7, #0]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801049c:	2b00      	cmp	r3, #0
 801049e:	d107      	bne.n	80104b0 <HAL_ADC_ConfigChannel+0x46c>
 80104a0:	683b      	ldr	r3, [r7, #0]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	0e9b      	lsrs	r3, r3, #26
 80104a6:	3301      	adds	r3, #1
 80104a8:	069b      	lsls	r3, r3, #26
 80104aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80104ae:	e015      	b.n	80104dc <HAL_ADC_ConfigChannel+0x498>
 80104b0:	683b      	ldr	r3, [r7, #0]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80104b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80104b8:	fa93 f3a3 	rbit	r3, r3
 80104bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80104be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80104c0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80104c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d101      	bne.n	80104cc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80104c8:	2320      	movs	r3, #32
 80104ca:	e003      	b.n	80104d4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80104cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80104ce:	fab3 f383 	clz	r3, r3
 80104d2:	b2db      	uxtb	r3, r3
 80104d4:	3301      	adds	r3, #1
 80104d6:	069b      	lsls	r3, r3, #26
 80104d8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80104dc:	683b      	ldr	r3, [r7, #0]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d109      	bne.n	80104fc <HAL_ADC_ConfigChannel+0x4b8>
 80104e8:	683b      	ldr	r3, [r7, #0]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	0e9b      	lsrs	r3, r3, #26
 80104ee:	3301      	adds	r3, #1
 80104f0:	f003 031f 	and.w	r3, r3, #31
 80104f4:	2101      	movs	r1, #1
 80104f6:	fa01 f303 	lsl.w	r3, r1, r3
 80104fa:	e017      	b.n	801052c <HAL_ADC_ConfigChannel+0x4e8>
 80104fc:	683b      	ldr	r3, [r7, #0]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010502:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010504:	fa93 f3a3 	rbit	r3, r3
 8010508:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 801050a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801050c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 801050e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010510:	2b00      	cmp	r3, #0
 8010512:	d101      	bne.n	8010518 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8010514:	2320      	movs	r3, #32
 8010516:	e003      	b.n	8010520 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8010518:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801051a:	fab3 f383 	clz	r3, r3
 801051e:	b2db      	uxtb	r3, r3
 8010520:	3301      	adds	r3, #1
 8010522:	f003 031f 	and.w	r3, r3, #31
 8010526:	2101      	movs	r1, #1
 8010528:	fa01 f303 	lsl.w	r3, r1, r3
 801052c:	ea42 0103 	orr.w	r1, r2, r3
 8010530:	683b      	ldr	r3, [r7, #0]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010538:	2b00      	cmp	r3, #0
 801053a:	d10a      	bne.n	8010552 <HAL_ADC_ConfigChannel+0x50e>
 801053c:	683b      	ldr	r3, [r7, #0]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	0e9b      	lsrs	r3, r3, #26
 8010542:	3301      	adds	r3, #1
 8010544:	f003 021f 	and.w	r2, r3, #31
 8010548:	4613      	mov	r3, r2
 801054a:	005b      	lsls	r3, r3, #1
 801054c:	4413      	add	r3, r2
 801054e:	051b      	lsls	r3, r3, #20
 8010550:	e018      	b.n	8010584 <HAL_ADC_ConfigChannel+0x540>
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801055a:	fa93 f3a3 	rbit	r3, r3
 801055e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8010560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010562:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8010564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010566:	2b00      	cmp	r3, #0
 8010568:	d101      	bne.n	801056e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 801056a:	2320      	movs	r3, #32
 801056c:	e003      	b.n	8010576 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 801056e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010570:	fab3 f383 	clz	r3, r3
 8010574:	b2db      	uxtb	r3, r3
 8010576:	3301      	adds	r3, #1
 8010578:	f003 021f 	and.w	r2, r3, #31
 801057c:	4613      	mov	r3, r2
 801057e:	005b      	lsls	r3, r3, #1
 8010580:	4413      	add	r3, r2
 8010582:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8010584:	430b      	orrs	r3, r1
 8010586:	e080      	b.n	801068a <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010590:	2b00      	cmp	r3, #0
 8010592:	d107      	bne.n	80105a4 <HAL_ADC_ConfigChannel+0x560>
 8010594:	683b      	ldr	r3, [r7, #0]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	0e9b      	lsrs	r3, r3, #26
 801059a:	3301      	adds	r3, #1
 801059c:	069b      	lsls	r3, r3, #26
 801059e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80105a2:	e015      	b.n	80105d0 <HAL_ADC_ConfigChannel+0x58c>
 80105a4:	683b      	ldr	r3, [r7, #0]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80105aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105ac:	fa93 f3a3 	rbit	r3, r3
 80105b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80105b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105b4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80105b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d101      	bne.n	80105c0 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80105bc:	2320      	movs	r3, #32
 80105be:	e003      	b.n	80105c8 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80105c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105c2:	fab3 f383 	clz	r3, r3
 80105c6:	b2db      	uxtb	r3, r3
 80105c8:	3301      	adds	r3, #1
 80105ca:	069b      	lsls	r3, r3, #26
 80105cc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80105d0:	683b      	ldr	r3, [r7, #0]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d109      	bne.n	80105f0 <HAL_ADC_ConfigChannel+0x5ac>
 80105dc:	683b      	ldr	r3, [r7, #0]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	0e9b      	lsrs	r3, r3, #26
 80105e2:	3301      	adds	r3, #1
 80105e4:	f003 031f 	and.w	r3, r3, #31
 80105e8:	2101      	movs	r1, #1
 80105ea:	fa01 f303 	lsl.w	r3, r1, r3
 80105ee:	e017      	b.n	8010620 <HAL_ADC_ConfigChannel+0x5dc>
 80105f0:	683b      	ldr	r3, [r7, #0]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80105f6:	6a3b      	ldr	r3, [r7, #32]
 80105f8:	fa93 f3a3 	rbit	r3, r3
 80105fc:	61fb      	str	r3, [r7, #28]
  return result;
 80105fe:	69fb      	ldr	r3, [r7, #28]
 8010600:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8010602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010604:	2b00      	cmp	r3, #0
 8010606:	d101      	bne.n	801060c <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8010608:	2320      	movs	r3, #32
 801060a:	e003      	b.n	8010614 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 801060c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801060e:	fab3 f383 	clz	r3, r3
 8010612:	b2db      	uxtb	r3, r3
 8010614:	3301      	adds	r3, #1
 8010616:	f003 031f 	and.w	r3, r3, #31
 801061a:	2101      	movs	r1, #1
 801061c:	fa01 f303 	lsl.w	r3, r1, r3
 8010620:	ea42 0103 	orr.w	r1, r2, r3
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801062c:	2b00      	cmp	r3, #0
 801062e:	d10d      	bne.n	801064c <HAL_ADC_ConfigChannel+0x608>
 8010630:	683b      	ldr	r3, [r7, #0]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	0e9b      	lsrs	r3, r3, #26
 8010636:	3301      	adds	r3, #1
 8010638:	f003 021f 	and.w	r2, r3, #31
 801063c:	4613      	mov	r3, r2
 801063e:	005b      	lsls	r3, r3, #1
 8010640:	4413      	add	r3, r2
 8010642:	3b1e      	subs	r3, #30
 8010644:	051b      	lsls	r3, r3, #20
 8010646:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 801064a:	e01d      	b.n	8010688 <HAL_ADC_ConfigChannel+0x644>
 801064c:	683b      	ldr	r3, [r7, #0]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010652:	697b      	ldr	r3, [r7, #20]
 8010654:	fa93 f3a3 	rbit	r3, r3
 8010658:	613b      	str	r3, [r7, #16]
  return result;
 801065a:	693b      	ldr	r3, [r7, #16]
 801065c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801065e:	69bb      	ldr	r3, [r7, #24]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d103      	bne.n	801066c <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8010664:	2320      	movs	r3, #32
 8010666:	e005      	b.n	8010674 <HAL_ADC_ConfigChannel+0x630>
 8010668:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 801066c:	69bb      	ldr	r3, [r7, #24]
 801066e:	fab3 f383 	clz	r3, r3
 8010672:	b2db      	uxtb	r3, r3
 8010674:	3301      	adds	r3, #1
 8010676:	f003 021f 	and.w	r2, r3, #31
 801067a:	4613      	mov	r3, r2
 801067c:	005b      	lsls	r3, r3, #1
 801067e:	4413      	add	r3, r2
 8010680:	3b1e      	subs	r3, #30
 8010682:	051b      	lsls	r3, r3, #20
 8010684:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8010688:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 801068a:	683a      	ldr	r2, [r7, #0]
 801068c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801068e:	4619      	mov	r1, r3
 8010690:	f7ff f93a 	bl	800f908 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010694:	683b      	ldr	r3, [r7, #0]
 8010696:	681a      	ldr	r2, [r3, #0]
 8010698:	4b45      	ldr	r3, [pc, #276]	@ (80107b0 <HAL_ADC_ConfigChannel+0x76c>)
 801069a:	4013      	ands	r3, r2
 801069c:	2b00      	cmp	r3, #0
 801069e:	d07c      	beq.n	801079a <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80106a0:	4844      	ldr	r0, [pc, #272]	@ (80107b4 <HAL_ADC_ConfigChannel+0x770>)
 80106a2:	f7ff f88f 	bl	800f7c4 <LL_ADC_GetCommonPathInternalCh>
 80106a6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80106aa:	4843      	ldr	r0, [pc, #268]	@ (80107b8 <HAL_ADC_ConfigChannel+0x774>)
 80106ac:	f7ff f9f2 	bl	800fa94 <LL_ADC_IsEnabled>
 80106b0:	4603      	mov	r3, r0
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d15e      	bne.n	8010774 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80106b6:	683b      	ldr	r3, [r7, #0]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	4a40      	ldr	r2, [pc, #256]	@ (80107bc <HAL_ADC_ConfigChannel+0x778>)
 80106bc:	4293      	cmp	r3, r2
 80106be:	d127      	bne.n	8010710 <HAL_ADC_ConfigChannel+0x6cc>
 80106c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80106c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d121      	bne.n	8010710 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	4a39      	ldr	r2, [pc, #228]	@ (80107b8 <HAL_ADC_ConfigChannel+0x774>)
 80106d2:	4293      	cmp	r3, r2
 80106d4:	d161      	bne.n	801079a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80106d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80106da:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80106de:	4619      	mov	r1, r3
 80106e0:	4834      	ldr	r0, [pc, #208]	@ (80107b4 <HAL_ADC_ConfigChannel+0x770>)
 80106e2:	f7ff f85c 	bl	800f79e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80106e6:	4b36      	ldr	r3, [pc, #216]	@ (80107c0 <HAL_ADC_ConfigChannel+0x77c>)
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	099b      	lsrs	r3, r3, #6
 80106ec:	4a35      	ldr	r2, [pc, #212]	@ (80107c4 <HAL_ADC_ConfigChannel+0x780>)
 80106ee:	fba2 2303 	umull	r2, r3, r2, r3
 80106f2:	099b      	lsrs	r3, r3, #6
 80106f4:	1c5a      	adds	r2, r3, #1
 80106f6:	4613      	mov	r3, r2
 80106f8:	005b      	lsls	r3, r3, #1
 80106fa:	4413      	add	r3, r2
 80106fc:	009b      	lsls	r3, r3, #2
 80106fe:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8010700:	e002      	b.n	8010708 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	3b01      	subs	r3, #1
 8010706:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d1f9      	bne.n	8010702 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 801070e:	e044      	b.n	801079a <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8010710:	683b      	ldr	r3, [r7, #0]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	4a2c      	ldr	r2, [pc, #176]	@ (80107c8 <HAL_ADC_ConfigChannel+0x784>)
 8010716:	4293      	cmp	r3, r2
 8010718:	d113      	bne.n	8010742 <HAL_ADC_ConfigChannel+0x6fe>
 801071a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801071e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010722:	2b00      	cmp	r3, #0
 8010724:	d10d      	bne.n	8010742 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	4a23      	ldr	r2, [pc, #140]	@ (80107b8 <HAL_ADC_ConfigChannel+0x774>)
 801072c:	4293      	cmp	r3, r2
 801072e:	d134      	bne.n	801079a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8010730:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010734:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8010738:	4619      	mov	r1, r3
 801073a:	481e      	ldr	r0, [pc, #120]	@ (80107b4 <HAL_ADC_ConfigChannel+0x770>)
 801073c:	f7ff f82f 	bl	800f79e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8010740:	e02b      	b.n	801079a <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8010742:	683b      	ldr	r3, [r7, #0]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	4a21      	ldr	r2, [pc, #132]	@ (80107cc <HAL_ADC_ConfigChannel+0x788>)
 8010748:	4293      	cmp	r3, r2
 801074a:	d126      	bne.n	801079a <HAL_ADC_ConfigChannel+0x756>
 801074c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010750:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010754:	2b00      	cmp	r3, #0
 8010756:	d120      	bne.n	801079a <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	4a16      	ldr	r2, [pc, #88]	@ (80107b8 <HAL_ADC_ConfigChannel+0x774>)
 801075e:	4293      	cmp	r3, r2
 8010760:	d11b      	bne.n	801079a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8010762:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010766:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801076a:	4619      	mov	r1, r3
 801076c:	4811      	ldr	r0, [pc, #68]	@ (80107b4 <HAL_ADC_ConfigChannel+0x770>)
 801076e:	f7ff f816 	bl	800f79e <LL_ADC_SetCommonPathInternalCh>
 8010772:	e012      	b.n	801079a <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010778:	f043 0220 	orr.w	r2, r3, #32
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8010780:	2301      	movs	r3, #1
 8010782:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8010786:	e008      	b.n	801079a <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801078c:	f043 0220 	orr.w	r2, r3, #32
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8010794:	2301      	movs	r3, #1
 8010796:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	2200      	movs	r2, #0
 801079e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 80107a2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80107a6:	4618      	mov	r0, r3
 80107a8:	37d8      	adds	r7, #216	@ 0xd8
 80107aa:	46bd      	mov	sp, r7
 80107ac:	bd80      	pop	{r7, pc}
 80107ae:	bf00      	nop
 80107b0:	80080000 	.word	0x80080000
 80107b4:	50040300 	.word	0x50040300
 80107b8:	50040000 	.word	0x50040000
 80107bc:	c7520000 	.word	0xc7520000
 80107c0:	2000007c 	.word	0x2000007c
 80107c4:	053e2d63 	.word	0x053e2d63
 80107c8:	cb840000 	.word	0xcb840000
 80107cc:	80000001 	.word	0x80000001

080107d0 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b088      	sub	sp, #32
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
 80107d8:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80107da:	2300      	movs	r3, #0
 80107dc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80107de:	683b      	ldr	r3, [r7, #0]
 80107e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	4618      	mov	r0, r3
 80107e8:	f7ff f9a2 	bl	800fb30 <LL_ADC_REG_IsConversionOngoing>
 80107ec:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	4618      	mov	r0, r3
 80107f4:	f7ff f9c3 	bl	800fb7e <LL_ADC_INJ_IsConversionOngoing>
 80107f8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80107fa:	693b      	ldr	r3, [r7, #16]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d103      	bne.n	8010808 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	2b00      	cmp	r3, #0
 8010804:	f000 8098 	beq.w	8010938 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	68db      	ldr	r3, [r3, #12]
 801080e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010812:	2b00      	cmp	r3, #0
 8010814:	d02a      	beq.n	801086c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	7e5b      	ldrb	r3, [r3, #25]
 801081a:	2b01      	cmp	r3, #1
 801081c:	d126      	bne.n	801086c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	7e1b      	ldrb	r3, [r3, #24]
 8010822:	2b01      	cmp	r3, #1
 8010824:	d122      	bne.n	801086c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8010826:	2301      	movs	r3, #1
 8010828:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 801082a:	e014      	b.n	8010856 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 801082c:	69fb      	ldr	r3, [r7, #28]
 801082e:	4a45      	ldr	r2, [pc, #276]	@ (8010944 <ADC_ConversionStop+0x174>)
 8010830:	4293      	cmp	r3, r2
 8010832:	d90d      	bls.n	8010850 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010838:	f043 0210 	orr.w	r2, r3, #16
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010844:	f043 0201 	orr.w	r2, r3, #1
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 801084c:	2301      	movs	r3, #1
 801084e:	e074      	b.n	801093a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8010850:	69fb      	ldr	r3, [r7, #28]
 8010852:	3301      	adds	r3, #1
 8010854:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010860:	2b40      	cmp	r3, #64	@ 0x40
 8010862:	d1e3      	bne.n	801082c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	2240      	movs	r2, #64	@ 0x40
 801086a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 801086c:	69bb      	ldr	r3, [r7, #24]
 801086e:	2b02      	cmp	r3, #2
 8010870:	d014      	beq.n	801089c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	4618      	mov	r0, r3
 8010878:	f7ff f95a 	bl	800fb30 <LL_ADC_REG_IsConversionOngoing>
 801087c:	4603      	mov	r3, r0
 801087e:	2b00      	cmp	r3, #0
 8010880:	d00c      	beq.n	801089c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	4618      	mov	r0, r3
 8010888:	f7ff f917 	bl	800faba <LL_ADC_IsDisableOngoing>
 801088c:	4603      	mov	r3, r0
 801088e:	2b00      	cmp	r3, #0
 8010890:	d104      	bne.n	801089c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	4618      	mov	r0, r3
 8010898:	f7ff f936 	bl	800fb08 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 801089c:	69bb      	ldr	r3, [r7, #24]
 801089e:	2b01      	cmp	r3, #1
 80108a0:	d014      	beq.n	80108cc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	4618      	mov	r0, r3
 80108a8:	f7ff f969 	bl	800fb7e <LL_ADC_INJ_IsConversionOngoing>
 80108ac:	4603      	mov	r3, r0
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d00c      	beq.n	80108cc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	4618      	mov	r0, r3
 80108b8:	f7ff f8ff 	bl	800faba <LL_ADC_IsDisableOngoing>
 80108bc:	4603      	mov	r3, r0
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d104      	bne.n	80108cc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	4618      	mov	r0, r3
 80108c8:	f7ff f945 	bl	800fb56 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80108cc:	69bb      	ldr	r3, [r7, #24]
 80108ce:	2b02      	cmp	r3, #2
 80108d0:	d005      	beq.n	80108de <ADC_ConversionStop+0x10e>
 80108d2:	69bb      	ldr	r3, [r7, #24]
 80108d4:	2b03      	cmp	r3, #3
 80108d6:	d105      	bne.n	80108e4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80108d8:	230c      	movs	r3, #12
 80108da:	617b      	str	r3, [r7, #20]
        break;
 80108dc:	e005      	b.n	80108ea <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80108de:	2308      	movs	r3, #8
 80108e0:	617b      	str	r3, [r7, #20]
        break;
 80108e2:	e002      	b.n	80108ea <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80108e4:	2304      	movs	r3, #4
 80108e6:	617b      	str	r3, [r7, #20]
        break;
 80108e8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80108ea:	f7fe ff01 	bl	800f6f0 <HAL_GetTick>
 80108ee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80108f0:	e01b      	b.n	801092a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80108f2:	f7fe fefd 	bl	800f6f0 <HAL_GetTick>
 80108f6:	4602      	mov	r2, r0
 80108f8:	68bb      	ldr	r3, [r7, #8]
 80108fa:	1ad3      	subs	r3, r2, r3
 80108fc:	2b05      	cmp	r3, #5
 80108fe:	d914      	bls.n	801092a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	689a      	ldr	r2, [r3, #8]
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	4013      	ands	r3, r2
 801090a:	2b00      	cmp	r3, #0
 801090c:	d00d      	beq.n	801092a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010912:	f043 0210 	orr.w	r2, r3, #16
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801091e:	f043 0201 	orr.w	r2, r3, #1
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8010926:	2301      	movs	r3, #1
 8010928:	e007      	b.n	801093a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	689a      	ldr	r2, [r3, #8]
 8010930:	697b      	ldr	r3, [r7, #20]
 8010932:	4013      	ands	r3, r2
 8010934:	2b00      	cmp	r3, #0
 8010936:	d1dc      	bne.n	80108f2 <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 8010938:	2300      	movs	r3, #0
}
 801093a:	4618      	mov	r0, r3
 801093c:	3720      	adds	r7, #32
 801093e:	46bd      	mov	sp, r7
 8010940:	bd80      	pop	{r7, pc}
 8010942:	bf00      	nop
 8010944:	a33fffff 	.word	0xa33fffff

08010948 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8010948:	b580      	push	{r7, lr}
 801094a:	b084      	sub	sp, #16
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8010950:	2300      	movs	r3, #0
 8010952:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	4618      	mov	r0, r3
 801095a:	f7ff f89b 	bl	800fa94 <LL_ADC_IsEnabled>
 801095e:	4603      	mov	r3, r0
 8010960:	2b00      	cmp	r3, #0
 8010962:	d15e      	bne.n	8010a22 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	689a      	ldr	r2, [r3, #8]
 801096a:	4b30      	ldr	r3, [pc, #192]	@ (8010a2c <ADC_Enable+0xe4>)
 801096c:	4013      	ands	r3, r2
 801096e:	2b00      	cmp	r3, #0
 8010970:	d00d      	beq.n	801098e <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010976:	f043 0210 	orr.w	r2, r3, #16
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010982:	f043 0201 	orr.w	r2, r3, #1
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 801098a:	2301      	movs	r3, #1
 801098c:	e04a      	b.n	8010a24 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	4618      	mov	r0, r3
 8010994:	f7ff f856 	bl	800fa44 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8010998:	4825      	ldr	r0, [pc, #148]	@ (8010a30 <ADC_Enable+0xe8>)
 801099a:	f7fe ff13 	bl	800f7c4 <LL_ADC_GetCommonPathInternalCh>
 801099e:	4603      	mov	r3, r0
 80109a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d00f      	beq.n	80109c8 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80109a8:	4b22      	ldr	r3, [pc, #136]	@ (8010a34 <ADC_Enable+0xec>)
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	099b      	lsrs	r3, r3, #6
 80109ae:	4a22      	ldr	r2, [pc, #136]	@ (8010a38 <ADC_Enable+0xf0>)
 80109b0:	fba2 2303 	umull	r2, r3, r2, r3
 80109b4:	099b      	lsrs	r3, r3, #6
 80109b6:	3301      	adds	r3, #1
 80109b8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80109ba:	e002      	b.n	80109c2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80109bc:	68bb      	ldr	r3, [r7, #8]
 80109be:	3b01      	subs	r3, #1
 80109c0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80109c2:	68bb      	ldr	r3, [r7, #8]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d1f9      	bne.n	80109bc <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80109c8:	f7fe fe92 	bl	800f6f0 <HAL_GetTick>
 80109cc:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80109ce:	e021      	b.n	8010a14 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	4618      	mov	r0, r3
 80109d6:	f7ff f85d 	bl	800fa94 <LL_ADC_IsEnabled>
 80109da:	4603      	mov	r3, r0
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d104      	bne.n	80109ea <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	4618      	mov	r0, r3
 80109e6:	f7ff f82d 	bl	800fa44 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80109ea:	f7fe fe81 	bl	800f6f0 <HAL_GetTick>
 80109ee:	4602      	mov	r2, r0
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	1ad3      	subs	r3, r2, r3
 80109f4:	2b02      	cmp	r3, #2
 80109f6:	d90d      	bls.n	8010a14 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80109fc:	f043 0210 	orr.w	r2, r3, #16
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010a08:	f043 0201 	orr.w	r2, r3, #1
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 8010a10:	2301      	movs	r3, #1
 8010a12:	e007      	b.n	8010a24 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	f003 0301 	and.w	r3, r3, #1
 8010a1e:	2b01      	cmp	r3, #1
 8010a20:	d1d6      	bne.n	80109d0 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8010a22:	2300      	movs	r3, #0
}
 8010a24:	4618      	mov	r0, r3
 8010a26:	3710      	adds	r7, #16
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	bd80      	pop	{r7, pc}
 8010a2c:	8000003f 	.word	0x8000003f
 8010a30:	50040300 	.word	0x50040300
 8010a34:	2000007c 	.word	0x2000007c
 8010a38:	053e2d63 	.word	0x053e2d63

08010a3c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b084      	sub	sp, #16
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	4618      	mov	r0, r3
 8010a4a:	f7ff f836 	bl	800faba <LL_ADC_IsDisableOngoing>
 8010a4e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	4618      	mov	r0, r3
 8010a56:	f7ff f81d 	bl	800fa94 <LL_ADC_IsEnabled>
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d047      	beq.n	8010af0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d144      	bne.n	8010af0 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	689b      	ldr	r3, [r3, #8]
 8010a6c:	f003 030d 	and.w	r3, r3, #13
 8010a70:	2b01      	cmp	r3, #1
 8010a72:	d10c      	bne.n	8010a8e <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	4618      	mov	r0, r3
 8010a7a:	f7fe fff7 	bl	800fa6c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	2203      	movs	r2, #3
 8010a84:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8010a86:	f7fe fe33 	bl	800f6f0 <HAL_GetTick>
 8010a8a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8010a8c:	e029      	b.n	8010ae2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010a92:	f043 0210 	orr.w	r2, r3, #16
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010a9e:	f043 0201 	orr.w	r2, r3, #1
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8010aa6:	2301      	movs	r3, #1
 8010aa8:	e023      	b.n	8010af2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8010aaa:	f7fe fe21 	bl	800f6f0 <HAL_GetTick>
 8010aae:	4602      	mov	r2, r0
 8010ab0:	68bb      	ldr	r3, [r7, #8]
 8010ab2:	1ad3      	subs	r3, r2, r3
 8010ab4:	2b02      	cmp	r3, #2
 8010ab6:	d914      	bls.n	8010ae2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	689b      	ldr	r3, [r3, #8]
 8010abe:	f003 0301 	and.w	r3, r3, #1
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d00d      	beq.n	8010ae2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010aca:	f043 0210 	orr.w	r2, r3, #16
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010ad6:	f043 0201 	orr.w	r2, r3, #1
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8010ade:	2301      	movs	r3, #1
 8010ae0:	e007      	b.n	8010af2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	689b      	ldr	r3, [r3, #8]
 8010ae8:	f003 0301 	and.w	r3, r3, #1
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d1dc      	bne.n	8010aaa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8010af0:	2300      	movs	r3, #0
}
 8010af2:	4618      	mov	r0, r3
 8010af4:	3710      	adds	r7, #16
 8010af6:	46bd      	mov	sp, r7
 8010af8:	bd80      	pop	{r7, pc}

08010afa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8010afa:	b580      	push	{r7, lr}
 8010afc:	b084      	sub	sp, #16
 8010afe:	af00      	add	r7, sp, #0
 8010b00:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b06:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010b0c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d14b      	bne.n	8010bac <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010b18:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	f003 0308 	and.w	r3, r3, #8
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d021      	beq.n	8010b72 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	4618      	mov	r0, r3
 8010b34:	f7fe fea9 	bl	800f88a <LL_ADC_REG_IsTriggerSourceSWStart>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d032      	beq.n	8010ba4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	68db      	ldr	r3, [r3, #12]
 8010b44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d12b      	bne.n	8010ba4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010b50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010b5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d11f      	bne.n	8010ba4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010b68:	f043 0201 	orr.w	r2, r3, #1
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	655a      	str	r2, [r3, #84]	@ 0x54
 8010b70:	e018      	b.n	8010ba4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	68db      	ldr	r3, [r3, #12]
 8010b78:	f003 0302 	and.w	r3, r3, #2
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d111      	bne.n	8010ba4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010b84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010b90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d105      	bne.n	8010ba4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010b9c:	f043 0201 	orr.w	r2, r3, #1
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8010ba4:	68f8      	ldr	r0, [r7, #12]
 8010ba6:	f7ff fa2e 	bl	8010006 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8010baa:	e00e      	b.n	8010bca <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010bb0:	f003 0310 	and.w	r3, r3, #16
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d003      	beq.n	8010bc0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8010bb8:	68f8      	ldr	r0, [r7, #12]
 8010bba:	f7ff fa38 	bl	801002e <HAL_ADC_ErrorCallback>
}
 8010bbe:	e004      	b.n	8010bca <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010bc6:	6878      	ldr	r0, [r7, #4]
 8010bc8:	4798      	blx	r3
}
 8010bca:	bf00      	nop
 8010bcc:	3710      	adds	r7, #16
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	bd80      	pop	{r7, pc}

08010bd2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8010bd2:	b580      	push	{r7, lr}
 8010bd4:	b084      	sub	sp, #16
 8010bd6:	af00      	add	r7, sp, #0
 8010bd8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010bde:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8010be0:	68f8      	ldr	r0, [r7, #12]
 8010be2:	f7ff fa1a 	bl	801001a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8010be6:	bf00      	nop
 8010be8:	3710      	adds	r7, #16
 8010bea:	46bd      	mov	sp, r7
 8010bec:	bd80      	pop	{r7, pc}

08010bee <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8010bee:	b580      	push	{r7, lr}
 8010bf0:	b084      	sub	sp, #16
 8010bf2:	af00      	add	r7, sp, #0
 8010bf4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010bfa:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010c00:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010c0c:	f043 0204 	orr.w	r2, r3, #4
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8010c14:	68f8      	ldr	r0, [r7, #12]
 8010c16:	f7ff fa0a 	bl	801002e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8010c1a:	bf00      	nop
 8010c1c:	3710      	adds	r7, #16
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	bd80      	pop	{r7, pc}

08010c22 <LL_ADC_StartCalibration>:
{
 8010c22:	b480      	push	{r7}
 8010c24:	b083      	sub	sp, #12
 8010c26:	af00      	add	r7, sp, #0
 8010c28:	6078      	str	r0, [r7, #4]
 8010c2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	689b      	ldr	r3, [r3, #8]
 8010c30:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8010c34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8010c38:	683a      	ldr	r2, [r7, #0]
 8010c3a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8010c3e:	4313      	orrs	r3, r2
 8010c40:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	609a      	str	r2, [r3, #8]
}
 8010c48:	bf00      	nop
 8010c4a:	370c      	adds	r7, #12
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c52:	4770      	bx	lr

08010c54 <LL_ADC_IsCalibrationOnGoing>:
{
 8010c54:	b480      	push	{r7}
 8010c56:	b083      	sub	sp, #12
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	689b      	ldr	r3, [r3, #8]
 8010c60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010c64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010c68:	d101      	bne.n	8010c6e <LL_ADC_IsCalibrationOnGoing+0x1a>
 8010c6a:	2301      	movs	r3, #1
 8010c6c:	e000      	b.n	8010c70 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8010c6e:	2300      	movs	r3, #0
}
 8010c70:	4618      	mov	r0, r3
 8010c72:	370c      	adds	r7, #12
 8010c74:	46bd      	mov	sp, r7
 8010c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7a:	4770      	bx	lr

08010c7c <HAL_ADCEx_Calibration_Start>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b084      	sub	sp, #16
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
 8010c84:	6039      	str	r1, [r7, #0]
  uint32_t adc_clk_async_presc;
  __IO uint32_t delay_cpu_cycles;
#endif /* ADC_SUPPORT_2_5_MSPS */

  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8010c86:	2300      	movs	r3, #0
 8010c88:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8010c90:	2b01      	cmp	r3, #1
 8010c92:	d101      	bne.n	8010c98 <HAL_ADCEx_Calibration_Start+0x1c>
 8010c94:	2302      	movs	r3, #2
 8010c96:	e04d      	b.n	8010d34 <HAL_ADCEx_Calibration_Start+0xb8>
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	2201      	movs	r2, #1
 8010c9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8010ca0:	6878      	ldr	r0, [r7, #4]
 8010ca2:	f7ff fecb 	bl	8010a3c <ADC_Disable>
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8010caa:	7bfb      	ldrb	r3, [r7, #15]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d136      	bne.n	8010d1e <HAL_ADCEx_Calibration_Start+0xa2>
#if defined(ADC_SUPPORT_2_5_MSPS)
    ADC_STATE_CLR_SET(hadc->State,
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
#else
    ADC_STATE_CLR_SET(hadc->State,
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010cb4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8010cb8:	f023 0302 	bic.w	r3, r3, #2
 8010cbc:	f043 0202 	orr.w	r2, r3, #2
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	655a      	str	r2, [r3, #84]	@ 0x54
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);

#else
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	6839      	ldr	r1, [r7, #0]
 8010cca:	4618      	mov	r0, r3
 8010ccc:	f7ff ffa9 	bl	8010c22 <LL_ADC_StartCalibration>
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8010cd0:	e014      	b.n	8010cfc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8010cd2:	68bb      	ldr	r3, [r7, #8]
 8010cd4:	3301      	adds	r3, #1
 8010cd6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8010cd8:	68bb      	ldr	r3, [r7, #8]
 8010cda:	4a18      	ldr	r2, [pc, #96]	@ (8010d3c <HAL_ADCEx_Calibration_Start+0xc0>)
 8010cdc:	4293      	cmp	r3, r2
 8010cde:	d90d      	bls.n	8010cfc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010ce4:	f023 0312 	bic.w	r3, r3, #18
 8010ce8:	f043 0210 	orr.w	r2, r3, #16
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8010cf8:	2301      	movs	r3, #1
 8010cfa:	e01b      	b.n	8010d34 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	4618      	mov	r0, r3
 8010d02:	f7ff ffa7 	bl	8010c54 <LL_ADC_IsCalibrationOnGoing>
 8010d06:	4603      	mov	r3, r0
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d1e2      	bne.n	8010cd2 <HAL_ADCEx_Calibration_Start+0x56>
    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010d10:	f023 0303 	bic.w	r3, r3, #3
 8010d14:	f043 0201 	orr.w	r2, r3, #1
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	655a      	str	r2, [r3, #84]	@ 0x54
 8010d1c:	e005      	b.n	8010d2a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010d22:	f043 0210 	orr.w	r2, r3, #16
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8010d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d34:	4618      	mov	r0, r3
 8010d36:	3710      	adds	r7, #16
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	bd80      	pop	{r7, pc}
 8010d3c:	00026aaa 	.word	0x00026aaa

08010d40 <__NVIC_SetPriorityGrouping>:
{
 8010d40:	b480      	push	{r7}
 8010d42:	b085      	sub	sp, #20
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	f003 0307 	and.w	r3, r3, #7
 8010d4e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010d50:	4b0c      	ldr	r3, [pc, #48]	@ (8010d84 <__NVIC_SetPriorityGrouping+0x44>)
 8010d52:	68db      	ldr	r3, [r3, #12]
 8010d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010d56:	68ba      	ldr	r2, [r7, #8]
 8010d58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8010d5c:	4013      	ands	r3, r2
 8010d5e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010d64:	68bb      	ldr	r3, [r7, #8]
 8010d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8010d68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8010d6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8010d72:	4a04      	ldr	r2, [pc, #16]	@ (8010d84 <__NVIC_SetPriorityGrouping+0x44>)
 8010d74:	68bb      	ldr	r3, [r7, #8]
 8010d76:	60d3      	str	r3, [r2, #12]
}
 8010d78:	bf00      	nop
 8010d7a:	3714      	adds	r7, #20
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d82:	4770      	bx	lr
 8010d84:	e000ed00 	.word	0xe000ed00

08010d88 <__NVIC_GetPriorityGrouping>:
{
 8010d88:	b480      	push	{r7}
 8010d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010d8c:	4b04      	ldr	r3, [pc, #16]	@ (8010da0 <__NVIC_GetPriorityGrouping+0x18>)
 8010d8e:	68db      	ldr	r3, [r3, #12]
 8010d90:	0a1b      	lsrs	r3, r3, #8
 8010d92:	f003 0307 	and.w	r3, r3, #7
}
 8010d96:	4618      	mov	r0, r3
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9e:	4770      	bx	lr
 8010da0:	e000ed00 	.word	0xe000ed00

08010da4 <__NVIC_EnableIRQ>:
{
 8010da4:	b480      	push	{r7}
 8010da6:	b083      	sub	sp, #12
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	4603      	mov	r3, r0
 8010dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	db0b      	blt.n	8010dce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010db6:	79fb      	ldrb	r3, [r7, #7]
 8010db8:	f003 021f 	and.w	r2, r3, #31
 8010dbc:	4907      	ldr	r1, [pc, #28]	@ (8010ddc <__NVIC_EnableIRQ+0x38>)
 8010dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010dc2:	095b      	lsrs	r3, r3, #5
 8010dc4:	2001      	movs	r0, #1
 8010dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8010dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010dce:	bf00      	nop
 8010dd0:	370c      	adds	r7, #12
 8010dd2:	46bd      	mov	sp, r7
 8010dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd8:	4770      	bx	lr
 8010dda:	bf00      	nop
 8010ddc:	e000e100 	.word	0xe000e100

08010de0 <__NVIC_DisableIRQ>:
{
 8010de0:	b480      	push	{r7}
 8010de2:	b083      	sub	sp, #12
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	4603      	mov	r3, r0
 8010de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	db12      	blt.n	8010e18 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010df2:	79fb      	ldrb	r3, [r7, #7]
 8010df4:	f003 021f 	and.w	r2, r3, #31
 8010df8:	490a      	ldr	r1, [pc, #40]	@ (8010e24 <__NVIC_DisableIRQ+0x44>)
 8010dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010dfe:	095b      	lsrs	r3, r3, #5
 8010e00:	2001      	movs	r0, #1
 8010e02:	fa00 f202 	lsl.w	r2, r0, r2
 8010e06:	3320      	adds	r3, #32
 8010e08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8010e0c:	f3bf 8f4f 	dsb	sy
}
 8010e10:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010e12:	f3bf 8f6f 	isb	sy
}
 8010e16:	bf00      	nop
}
 8010e18:	bf00      	nop
 8010e1a:	370c      	adds	r7, #12
 8010e1c:	46bd      	mov	sp, r7
 8010e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e22:	4770      	bx	lr
 8010e24:	e000e100 	.word	0xe000e100

08010e28 <__NVIC_SetPendingIRQ>:
{
 8010e28:	b480      	push	{r7}
 8010e2a:	b083      	sub	sp, #12
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	4603      	mov	r3, r0
 8010e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	db0c      	blt.n	8010e54 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010e3a:	79fb      	ldrb	r3, [r7, #7]
 8010e3c:	f003 021f 	and.w	r2, r3, #31
 8010e40:	4907      	ldr	r1, [pc, #28]	@ (8010e60 <__NVIC_SetPendingIRQ+0x38>)
 8010e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010e46:	095b      	lsrs	r3, r3, #5
 8010e48:	2001      	movs	r0, #1
 8010e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8010e4e:	3340      	adds	r3, #64	@ 0x40
 8010e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010e54:	bf00      	nop
 8010e56:	370c      	adds	r7, #12
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5e:	4770      	bx	lr
 8010e60:	e000e100 	.word	0xe000e100

08010e64 <__NVIC_ClearPendingIRQ>:
{
 8010e64:	b480      	push	{r7}
 8010e66:	b083      	sub	sp, #12
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	db0c      	blt.n	8010e90 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010e76:	79fb      	ldrb	r3, [r7, #7]
 8010e78:	f003 021f 	and.w	r2, r3, #31
 8010e7c:	4907      	ldr	r1, [pc, #28]	@ (8010e9c <__NVIC_ClearPendingIRQ+0x38>)
 8010e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010e82:	095b      	lsrs	r3, r3, #5
 8010e84:	2001      	movs	r0, #1
 8010e86:	fa00 f202 	lsl.w	r2, r0, r2
 8010e8a:	3360      	adds	r3, #96	@ 0x60
 8010e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010e90:	bf00      	nop
 8010e92:	370c      	adds	r7, #12
 8010e94:	46bd      	mov	sp, r7
 8010e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9a:	4770      	bx	lr
 8010e9c:	e000e100 	.word	0xe000e100

08010ea0 <__NVIC_SetPriority>:
{
 8010ea0:	b480      	push	{r7}
 8010ea2:	b083      	sub	sp, #12
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	6039      	str	r1, [r7, #0]
 8010eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	db0a      	blt.n	8010eca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010eb4:	683b      	ldr	r3, [r7, #0]
 8010eb6:	b2da      	uxtb	r2, r3
 8010eb8:	490c      	ldr	r1, [pc, #48]	@ (8010eec <__NVIC_SetPriority+0x4c>)
 8010eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010ebe:	0112      	lsls	r2, r2, #4
 8010ec0:	b2d2      	uxtb	r2, r2
 8010ec2:	440b      	add	r3, r1
 8010ec4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8010ec8:	e00a      	b.n	8010ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010eca:	683b      	ldr	r3, [r7, #0]
 8010ecc:	b2da      	uxtb	r2, r3
 8010ece:	4908      	ldr	r1, [pc, #32]	@ (8010ef0 <__NVIC_SetPriority+0x50>)
 8010ed0:	79fb      	ldrb	r3, [r7, #7]
 8010ed2:	f003 030f 	and.w	r3, r3, #15
 8010ed6:	3b04      	subs	r3, #4
 8010ed8:	0112      	lsls	r2, r2, #4
 8010eda:	b2d2      	uxtb	r2, r2
 8010edc:	440b      	add	r3, r1
 8010ede:	761a      	strb	r2, [r3, #24]
}
 8010ee0:	bf00      	nop
 8010ee2:	370c      	adds	r7, #12
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eea:	4770      	bx	lr
 8010eec:	e000e100 	.word	0xe000e100
 8010ef0:	e000ed00 	.word	0xe000ed00

08010ef4 <NVIC_EncodePriority>:
{
 8010ef4:	b480      	push	{r7}
 8010ef6:	b089      	sub	sp, #36	@ 0x24
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	60f8      	str	r0, [r7, #12]
 8010efc:	60b9      	str	r1, [r7, #8]
 8010efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	f003 0307 	and.w	r3, r3, #7
 8010f06:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010f08:	69fb      	ldr	r3, [r7, #28]
 8010f0a:	f1c3 0307 	rsb	r3, r3, #7
 8010f0e:	2b04      	cmp	r3, #4
 8010f10:	bf28      	it	cs
 8010f12:	2304      	movcs	r3, #4
 8010f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010f16:	69fb      	ldr	r3, [r7, #28]
 8010f18:	3304      	adds	r3, #4
 8010f1a:	2b06      	cmp	r3, #6
 8010f1c:	d902      	bls.n	8010f24 <NVIC_EncodePriority+0x30>
 8010f1e:	69fb      	ldr	r3, [r7, #28]
 8010f20:	3b03      	subs	r3, #3
 8010f22:	e000      	b.n	8010f26 <NVIC_EncodePriority+0x32>
 8010f24:	2300      	movs	r3, #0
 8010f26:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010f28:	f04f 32ff 	mov.w	r2, #4294967295
 8010f2c:	69bb      	ldr	r3, [r7, #24]
 8010f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8010f32:	43da      	mvns	r2, r3
 8010f34:	68bb      	ldr	r3, [r7, #8]
 8010f36:	401a      	ands	r2, r3
 8010f38:	697b      	ldr	r3, [r7, #20]
 8010f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8010f40:	697b      	ldr	r3, [r7, #20]
 8010f42:	fa01 f303 	lsl.w	r3, r1, r3
 8010f46:	43d9      	mvns	r1, r3
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010f4c:	4313      	orrs	r3, r2
}
 8010f4e:	4618      	mov	r0, r3
 8010f50:	3724      	adds	r7, #36	@ 0x24
 8010f52:	46bd      	mov	sp, r7
 8010f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f58:	4770      	bx	lr
	...

08010f5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8010f5c:	b580      	push	{r7, lr}
 8010f5e:	b082      	sub	sp, #8
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	3b01      	subs	r3, #1
 8010f68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010f6c:	d301      	bcc.n	8010f72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8010f6e:	2301      	movs	r3, #1
 8010f70:	e00f      	b.n	8010f92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010f72:	4a0a      	ldr	r2, [pc, #40]	@ (8010f9c <SysTick_Config+0x40>)
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	3b01      	subs	r3, #1
 8010f78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8010f7a:	210f      	movs	r1, #15
 8010f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8010f80:	f7ff ff8e 	bl	8010ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010f84:	4b05      	ldr	r3, [pc, #20]	@ (8010f9c <SysTick_Config+0x40>)
 8010f86:	2200      	movs	r2, #0
 8010f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010f8a:	4b04      	ldr	r3, [pc, #16]	@ (8010f9c <SysTick_Config+0x40>)
 8010f8c:	2207      	movs	r2, #7
 8010f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010f90:	2300      	movs	r3, #0
}
 8010f92:	4618      	mov	r0, r3
 8010f94:	3708      	adds	r7, #8
 8010f96:	46bd      	mov	sp, r7
 8010f98:	bd80      	pop	{r7, pc}
 8010f9a:	bf00      	nop
 8010f9c:	e000e010 	.word	0xe000e010

08010fa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b082      	sub	sp, #8
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010fa8:	6878      	ldr	r0, [r7, #4]
 8010faa:	f7ff fec9 	bl	8010d40 <__NVIC_SetPriorityGrouping>
}
 8010fae:	bf00      	nop
 8010fb0:	3708      	adds	r7, #8
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	bd80      	pop	{r7, pc}

08010fb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010fb6:	b580      	push	{r7, lr}
 8010fb8:	b086      	sub	sp, #24
 8010fba:	af00      	add	r7, sp, #0
 8010fbc:	4603      	mov	r3, r0
 8010fbe:	60b9      	str	r1, [r7, #8]
 8010fc0:	607a      	str	r2, [r7, #4]
 8010fc2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8010fc4:	f7ff fee0 	bl	8010d88 <__NVIC_GetPriorityGrouping>
 8010fc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010fca:	687a      	ldr	r2, [r7, #4]
 8010fcc:	68b9      	ldr	r1, [r7, #8]
 8010fce:	6978      	ldr	r0, [r7, #20]
 8010fd0:	f7ff ff90 	bl	8010ef4 <NVIC_EncodePriority>
 8010fd4:	4602      	mov	r2, r0
 8010fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010fda:	4611      	mov	r1, r2
 8010fdc:	4618      	mov	r0, r3
 8010fde:	f7ff ff5f 	bl	8010ea0 <__NVIC_SetPriority>
}
 8010fe2:	bf00      	nop
 8010fe4:	3718      	adds	r7, #24
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	bd80      	pop	{r7, pc}

08010fea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010fea:	b580      	push	{r7, lr}
 8010fec:	b082      	sub	sp, #8
 8010fee:	af00      	add	r7, sp, #0
 8010ff0:	4603      	mov	r3, r0
 8010ff2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	f7ff fed3 	bl	8010da4 <__NVIC_EnableIRQ>
}
 8010ffe:	bf00      	nop
 8011000:	3708      	adds	r7, #8
 8011002:	46bd      	mov	sp, r7
 8011004:	bd80      	pop	{r7, pc}

08011006 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8011006:	b580      	push	{r7, lr}
 8011008:	b082      	sub	sp, #8
 801100a:	af00      	add	r7, sp, #0
 801100c:	4603      	mov	r3, r0
 801100e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8011010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011014:	4618      	mov	r0, r3
 8011016:	f7ff fee3 	bl	8010de0 <__NVIC_DisableIRQ>
}
 801101a:	bf00      	nop
 801101c:	3708      	adds	r7, #8
 801101e:	46bd      	mov	sp, r7
 8011020:	bd80      	pop	{r7, pc}

08011022 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8011022:	b580      	push	{r7, lr}
 8011024:	b082      	sub	sp, #8
 8011026:	af00      	add	r7, sp, #0
 8011028:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 801102a:	6878      	ldr	r0, [r7, #4]
 801102c:	f7ff ff96 	bl	8010f5c <SysTick_Config>
 8011030:	4603      	mov	r3, r0
}
 8011032:	4618      	mov	r0, r3
 8011034:	3708      	adds	r7, #8
 8011036:	46bd      	mov	sp, r7
 8011038:	bd80      	pop	{r7, pc}

0801103a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 801103a:	b580      	push	{r7, lr}
 801103c:	b082      	sub	sp, #8
 801103e:	af00      	add	r7, sp, #0
 8011040:	4603      	mov	r3, r0
 8011042:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8011044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011048:	4618      	mov	r0, r3
 801104a:	f7ff feed 	bl	8010e28 <__NVIC_SetPendingIRQ>
}
 801104e:	bf00      	nop
 8011050:	3708      	adds	r7, #8
 8011052:	46bd      	mov	sp, r7
 8011054:	bd80      	pop	{r7, pc}

08011056 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8011056:	b580      	push	{r7, lr}
 8011058:	b082      	sub	sp, #8
 801105a:	af00      	add	r7, sp, #0
 801105c:	4603      	mov	r3, r0
 801105e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8011060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011064:	4618      	mov	r0, r3
 8011066:	f7ff fefd 	bl	8010e64 <__NVIC_ClearPendingIRQ>
}
 801106a:	bf00      	nop
 801106c:	3708      	adds	r7, #8
 801106e:	46bd      	mov	sp, r7
 8011070:	bd80      	pop	{r7, pc}
	...

08011074 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8011074:	b580      	push	{r7, lr}
 8011076:	b084      	sub	sp, #16
 8011078:	af00      	add	r7, sp, #0
 801107a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d101      	bne.n	8011086 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8011082:	2301      	movs	r3, #1
 8011084:	e08e      	b.n	80111a4 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	461a      	mov	r2, r3
 801108c:	4b47      	ldr	r3, [pc, #284]	@ (80111ac <HAL_DMA_Init+0x138>)
 801108e:	429a      	cmp	r2, r3
 8011090:	d80f      	bhi.n	80110b2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	461a      	mov	r2, r3
 8011098:	4b45      	ldr	r3, [pc, #276]	@ (80111b0 <HAL_DMA_Init+0x13c>)
 801109a:	4413      	add	r3, r2
 801109c:	4a45      	ldr	r2, [pc, #276]	@ (80111b4 <HAL_DMA_Init+0x140>)
 801109e:	fba2 2303 	umull	r2, r3, r2, r3
 80110a2:	091b      	lsrs	r3, r3, #4
 80110a4:	009a      	lsls	r2, r3, #2
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	4a42      	ldr	r2, [pc, #264]	@ (80111b8 <HAL_DMA_Init+0x144>)
 80110ae:	641a      	str	r2, [r3, #64]	@ 0x40
 80110b0:	e00e      	b.n	80110d0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	461a      	mov	r2, r3
 80110b8:	4b40      	ldr	r3, [pc, #256]	@ (80111bc <HAL_DMA_Init+0x148>)
 80110ba:	4413      	add	r3, r2
 80110bc:	4a3d      	ldr	r2, [pc, #244]	@ (80111b4 <HAL_DMA_Init+0x140>)
 80110be:	fba2 2303 	umull	r2, r3, r2, r3
 80110c2:	091b      	lsrs	r3, r3, #4
 80110c4:	009a      	lsls	r2, r3, #2
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	4a3c      	ldr	r2, [pc, #240]	@ (80111c0 <HAL_DMA_Init+0x14c>)
 80110ce:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	2202      	movs	r2, #2
 80110d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80110e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80110ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80110f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	691b      	ldr	r3, [r3, #16]
 80110fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011100:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	699b      	ldr	r3, [r3, #24]
 8011106:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801110c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	6a1b      	ldr	r3, [r3, #32]
 8011112:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8011114:	68fa      	ldr	r2, [r7, #12]
 8011116:	4313      	orrs	r3, r2
 8011118:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	68fa      	ldr	r2, [r7, #12]
 8011120:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8011122:	6878      	ldr	r0, [r7, #4]
 8011124:	f000 fa74 	bl	8011610 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	689b      	ldr	r3, [r3, #8]
 801112c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011130:	d102      	bne.n	8011138 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	2200      	movs	r2, #0
 8011136:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	685a      	ldr	r2, [r3, #4]
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011140:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8011144:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801114a:	687a      	ldr	r2, [r7, #4]
 801114c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 801114e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	685b      	ldr	r3, [r3, #4]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d010      	beq.n	801117a <HAL_DMA_Init+0x106>
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	685b      	ldr	r3, [r3, #4]
 801115c:	2b04      	cmp	r3, #4
 801115e:	d80c      	bhi.n	801117a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8011160:	6878      	ldr	r0, [r7, #4]
 8011162:	f000 fa93 	bl	801168c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801116a:	2200      	movs	r2, #0
 801116c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011172:	687a      	ldr	r2, [r7, #4]
 8011174:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8011176:	605a      	str	r2, [r3, #4]
 8011178:	e008      	b.n	801118c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	2200      	movs	r2, #0
 801117e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	2200      	movs	r2, #0
 8011184:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	2200      	movs	r2, #0
 801118a:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	2200      	movs	r2, #0
 8011190:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	2201      	movs	r2, #1
 8011196:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	2200      	movs	r2, #0
 801119e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80111a2:	2300      	movs	r3, #0
}
 80111a4:	4618      	mov	r0, r3
 80111a6:	3710      	adds	r7, #16
 80111a8:	46bd      	mov	sp, r7
 80111aa:	bd80      	pop	{r7, pc}
 80111ac:	40020407 	.word	0x40020407
 80111b0:	bffdfff8 	.word	0xbffdfff8
 80111b4:	cccccccd 	.word	0xcccccccd
 80111b8:	40020000 	.word	0x40020000
 80111bc:	bffdfbf8 	.word	0xbffdfbf8
 80111c0:	40020400 	.word	0x40020400

080111c4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80111c4:	b580      	push	{r7, lr}
 80111c6:	b086      	sub	sp, #24
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	60f8      	str	r0, [r7, #12]
 80111cc:	60b9      	str	r1, [r7, #8]
 80111ce:	607a      	str	r2, [r7, #4]
 80111d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80111d2:	2300      	movs	r3, #0
 80111d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80111dc:	2b01      	cmp	r3, #1
 80111de:	d101      	bne.n	80111e4 <HAL_DMA_Start_IT+0x20>
 80111e0:	2302      	movs	r3, #2
 80111e2:	e066      	b.n	80112b2 <HAL_DMA_Start_IT+0xee>
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	2201      	movs	r2, #1
 80111e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80111f2:	b2db      	uxtb	r3, r3
 80111f4:	2b01      	cmp	r3, #1
 80111f6:	d155      	bne.n	80112a4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	2202      	movs	r2, #2
 80111fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	2200      	movs	r2, #0
 8011204:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	681a      	ldr	r2, [r3, #0]
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	f022 0201 	bic.w	r2, r2, #1
 8011214:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8011216:	683b      	ldr	r3, [r7, #0]
 8011218:	687a      	ldr	r2, [r7, #4]
 801121a:	68b9      	ldr	r1, [r7, #8]
 801121c:	68f8      	ldr	r0, [r7, #12]
 801121e:	f000 f9b9 	bl	8011594 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011226:	2b00      	cmp	r3, #0
 8011228:	d008      	beq.n	801123c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	681a      	ldr	r2, [r3, #0]
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	f042 020e 	orr.w	r2, r2, #14
 8011238:	601a      	str	r2, [r3, #0]
 801123a:	e00f      	b.n	801125c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	681a      	ldr	r2, [r3, #0]
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	f022 0204 	bic.w	r2, r2, #4
 801124a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	681a      	ldr	r2, [r3, #0]
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	f042 020a 	orr.w	r2, r2, #10
 801125a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011266:	2b00      	cmp	r3, #0
 8011268:	d007      	beq.n	801127a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801126e:	681a      	ldr	r2, [r3, #0]
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011274:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011278:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801127e:	2b00      	cmp	r3, #0
 8011280:	d007      	beq.n	8011292 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011286:	681a      	ldr	r2, [r3, #0]
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801128c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011290:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	681a      	ldr	r2, [r3, #0]
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	f042 0201 	orr.w	r2, r2, #1
 80112a0:	601a      	str	r2, [r3, #0]
 80112a2:	e005      	b.n	80112b0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	2200      	movs	r2, #0
 80112a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80112ac:	2302      	movs	r3, #2
 80112ae:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80112b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80112b2:	4618      	mov	r0, r3
 80112b4:	3718      	adds	r7, #24
 80112b6:	46bd      	mov	sp, r7
 80112b8:	bd80      	pop	{r7, pc}

080112ba <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80112ba:	b480      	push	{r7}
 80112bc:	b083      	sub	sp, #12
 80112be:	af00      	add	r7, sp, #0
 80112c0:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d101      	bne.n	80112cc <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80112c8:	2301      	movs	r3, #1
 80112ca:	e04f      	b.n	801136c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80112d2:	b2db      	uxtb	r3, r3
 80112d4:	2b02      	cmp	r3, #2
 80112d6:	d008      	beq.n	80112ea <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	2204      	movs	r2, #4
 80112dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	2200      	movs	r2, #0
 80112e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80112e6:	2301      	movs	r3, #1
 80112e8:	e040      	b.n	801136c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	681a      	ldr	r2, [r3, #0]
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	f022 020e 	bic.w	r2, r2, #14
 80112f8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80112fe:	681a      	ldr	r2, [r3, #0]
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011304:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8011308:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	681a      	ldr	r2, [r3, #0]
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	f022 0201 	bic.w	r2, r2, #1
 8011318:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801131e:	f003 021c 	and.w	r2, r3, #28
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011326:	2101      	movs	r1, #1
 8011328:	fa01 f202 	lsl.w	r2, r1, r2
 801132c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011332:	687a      	ldr	r2, [r7, #4]
 8011334:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8011336:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801133c:	2b00      	cmp	r3, #0
 801133e:	d00c      	beq.n	801135a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011344:	681a      	ldr	r2, [r3, #0]
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801134a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801134e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011354:	687a      	ldr	r2, [r7, #4]
 8011356:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8011358:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	2201      	movs	r2, #1
 801135e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	2200      	movs	r2, #0
 8011366:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 801136a:	2300      	movs	r3, #0
}
 801136c:	4618      	mov	r0, r3
 801136e:	370c      	adds	r7, #12
 8011370:	46bd      	mov	sp, r7
 8011372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011376:	4770      	bx	lr

08011378 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8011378:	b580      	push	{r7, lr}
 801137a:	b084      	sub	sp, #16
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011380:	2300      	movs	r3, #0
 8011382:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 801138a:	b2db      	uxtb	r3, r3
 801138c:	2b02      	cmp	r3, #2
 801138e:	d005      	beq.n	801139c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	2204      	movs	r2, #4
 8011394:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8011396:	2301      	movs	r3, #1
 8011398:	73fb      	strb	r3, [r7, #15]
 801139a:	e047      	b.n	801142c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	681a      	ldr	r2, [r3, #0]
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	f022 020e 	bic.w	r2, r2, #14
 80113aa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	681a      	ldr	r2, [r3, #0]
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	f022 0201 	bic.w	r2, r2, #1
 80113ba:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80113c0:	681a      	ldr	r2, [r3, #0]
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80113c6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80113ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80113d0:	f003 021c 	and.w	r2, r3, #28
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80113d8:	2101      	movs	r1, #1
 80113da:	fa01 f202 	lsl.w	r2, r1, r2
 80113de:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80113e4:	687a      	ldr	r2, [r7, #4]
 80113e6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80113e8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d00c      	beq.n	801140c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80113f6:	681a      	ldr	r2, [r3, #0]
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80113fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8011400:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011406:	687a      	ldr	r2, [r7, #4]
 8011408:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 801140a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	2201      	movs	r2, #1
 8011410:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	2200      	movs	r2, #0
 8011418:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011420:	2b00      	cmp	r3, #0
 8011422:	d003      	beq.n	801142c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011428:	6878      	ldr	r0, [r7, #4]
 801142a:	4798      	blx	r3
    }
  }
  return status;
 801142c:	7bfb      	ldrb	r3, [r7, #15]
}
 801142e:	4618      	mov	r0, r3
 8011430:	3710      	adds	r7, #16
 8011432:	46bd      	mov	sp, r7
 8011434:	bd80      	pop	{r7, pc}

08011436 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8011436:	b580      	push	{r7, lr}
 8011438:	b084      	sub	sp, #16
 801143a:	af00      	add	r7, sp, #0
 801143c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011452:	f003 031c 	and.w	r3, r3, #28
 8011456:	2204      	movs	r2, #4
 8011458:	409a      	lsls	r2, r3
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	4013      	ands	r3, r2
 801145e:	2b00      	cmp	r3, #0
 8011460:	d026      	beq.n	80114b0 <HAL_DMA_IRQHandler+0x7a>
 8011462:	68bb      	ldr	r3, [r7, #8]
 8011464:	f003 0304 	and.w	r3, r3, #4
 8011468:	2b00      	cmp	r3, #0
 801146a:	d021      	beq.n	80114b0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	f003 0320 	and.w	r3, r3, #32
 8011476:	2b00      	cmp	r3, #0
 8011478:	d107      	bne.n	801148a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	681a      	ldr	r2, [r3, #0]
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	f022 0204 	bic.w	r2, r2, #4
 8011488:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801148e:	f003 021c 	and.w	r2, r3, #28
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011496:	2104      	movs	r1, #4
 8011498:	fa01 f202 	lsl.w	r2, r1, r2
 801149c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d071      	beq.n	801158a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80114aa:	6878      	ldr	r0, [r7, #4]
 80114ac:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80114ae:	e06c      	b.n	801158a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80114b4:	f003 031c 	and.w	r3, r3, #28
 80114b8:	2202      	movs	r2, #2
 80114ba:	409a      	lsls	r2, r3
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	4013      	ands	r3, r2
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d02e      	beq.n	8011522 <HAL_DMA_IRQHandler+0xec>
 80114c4:	68bb      	ldr	r3, [r7, #8]
 80114c6:	f003 0302 	and.w	r3, r3, #2
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d029      	beq.n	8011522 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	f003 0320 	and.w	r3, r3, #32
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d10b      	bne.n	80114f4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	681a      	ldr	r2, [r3, #0]
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	f022 020a 	bic.w	r2, r2, #10
 80114ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	2201      	movs	r2, #1
 80114f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80114f8:	f003 021c 	and.w	r2, r3, #28
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011500:	2102      	movs	r1, #2
 8011502:	fa01 f202 	lsl.w	r2, r1, r2
 8011506:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	2200      	movs	r2, #0
 801150c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011514:	2b00      	cmp	r3, #0
 8011516:	d038      	beq.n	801158a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801151c:	6878      	ldr	r0, [r7, #4]
 801151e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8011520:	e033      	b.n	801158a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011526:	f003 031c 	and.w	r3, r3, #28
 801152a:	2208      	movs	r2, #8
 801152c:	409a      	lsls	r2, r3
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	4013      	ands	r3, r2
 8011532:	2b00      	cmp	r3, #0
 8011534:	d02a      	beq.n	801158c <HAL_DMA_IRQHandler+0x156>
 8011536:	68bb      	ldr	r3, [r7, #8]
 8011538:	f003 0308 	and.w	r3, r3, #8
 801153c:	2b00      	cmp	r3, #0
 801153e:	d025      	beq.n	801158c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	681a      	ldr	r2, [r3, #0]
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	f022 020e 	bic.w	r2, r2, #14
 801154e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011554:	f003 021c 	and.w	r2, r3, #28
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801155c:	2101      	movs	r1, #1
 801155e:	fa01 f202 	lsl.w	r2, r1, r2
 8011562:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	2201      	movs	r2, #1
 8011568:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	2201      	movs	r2, #1
 801156e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	2200      	movs	r2, #0
 8011576:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801157e:	2b00      	cmp	r3, #0
 8011580:	d004      	beq.n	801158c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011586:	6878      	ldr	r0, [r7, #4]
 8011588:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 801158a:	bf00      	nop
 801158c:	bf00      	nop
}
 801158e:	3710      	adds	r7, #16
 8011590:	46bd      	mov	sp, r7
 8011592:	bd80      	pop	{r7, pc}

08011594 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011594:	b480      	push	{r7}
 8011596:	b085      	sub	sp, #20
 8011598:	af00      	add	r7, sp, #0
 801159a:	60f8      	str	r0, [r7, #12]
 801159c:	60b9      	str	r1, [r7, #8]
 801159e:	607a      	str	r2, [r7, #4]
 80115a0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80115a6:	68fa      	ldr	r2, [r7, #12]
 80115a8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80115aa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d004      	beq.n	80115be <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80115b8:	68fa      	ldr	r2, [r7, #12]
 80115ba:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80115bc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80115c2:	f003 021c 	and.w	r2, r3, #28
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80115ca:	2101      	movs	r1, #1
 80115cc:	fa01 f202 	lsl.w	r2, r1, r2
 80115d0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	683a      	ldr	r2, [r7, #0]
 80115d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	689b      	ldr	r3, [r3, #8]
 80115de:	2b10      	cmp	r3, #16
 80115e0:	d108      	bne.n	80115f4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	687a      	ldr	r2, [r7, #4]
 80115e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	68ba      	ldr	r2, [r7, #8]
 80115f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80115f2:	e007      	b.n	8011604 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	68ba      	ldr	r2, [r7, #8]
 80115fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	687a      	ldr	r2, [r7, #4]
 8011602:	60da      	str	r2, [r3, #12]
}
 8011604:	bf00      	nop
 8011606:	3714      	adds	r7, #20
 8011608:	46bd      	mov	sp, r7
 801160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801160e:	4770      	bx	lr

08011610 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8011610:	b480      	push	{r7}
 8011612:	b085      	sub	sp, #20
 8011614:	af00      	add	r7, sp, #0
 8011616:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	461a      	mov	r2, r3
 801161e:	4b17      	ldr	r3, [pc, #92]	@ (801167c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8011620:	429a      	cmp	r2, r3
 8011622:	d80a      	bhi.n	801163a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011628:	089b      	lsrs	r3, r3, #2
 801162a:	009b      	lsls	r3, r3, #2
 801162c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011630:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8011634:	687a      	ldr	r2, [r7, #4]
 8011636:	6493      	str	r3, [r2, #72]	@ 0x48
 8011638:	e007      	b.n	801164a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801163e:	089b      	lsrs	r3, r3, #2
 8011640:	009a      	lsls	r2, r3, #2
 8011642:	4b0f      	ldr	r3, [pc, #60]	@ (8011680 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8011644:	4413      	add	r3, r2
 8011646:	687a      	ldr	r2, [r7, #4]
 8011648:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	b2db      	uxtb	r3, r3
 8011650:	3b08      	subs	r3, #8
 8011652:	4a0c      	ldr	r2, [pc, #48]	@ (8011684 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8011654:	fba2 2303 	umull	r2, r3, r2, r3
 8011658:	091b      	lsrs	r3, r3, #4
 801165a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	4a0a      	ldr	r2, [pc, #40]	@ (8011688 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8011660:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	f003 031f 	and.w	r3, r3, #31
 8011668:	2201      	movs	r2, #1
 801166a:	409a      	lsls	r2, r3
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8011670:	bf00      	nop
 8011672:	3714      	adds	r7, #20
 8011674:	46bd      	mov	sp, r7
 8011676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167a:	4770      	bx	lr
 801167c:	40020407 	.word	0x40020407
 8011680:	4002081c 	.word	0x4002081c
 8011684:	cccccccd 	.word	0xcccccccd
 8011688:	40020880 	.word	0x40020880

0801168c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801168c:	b480      	push	{r7}
 801168e:	b085      	sub	sp, #20
 8011690:	af00      	add	r7, sp, #0
 8011692:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	685b      	ldr	r3, [r3, #4]
 8011698:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801169c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801169e:	68fa      	ldr	r2, [r7, #12]
 80116a0:	4b0b      	ldr	r3, [pc, #44]	@ (80116d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80116a2:	4413      	add	r3, r2
 80116a4:	009b      	lsls	r3, r3, #2
 80116a6:	461a      	mov	r2, r3
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	4a09      	ldr	r2, [pc, #36]	@ (80116d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80116b0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	3b01      	subs	r3, #1
 80116b6:	f003 0303 	and.w	r3, r3, #3
 80116ba:	2201      	movs	r2, #1
 80116bc:	409a      	lsls	r2, r3
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80116c2:	bf00      	nop
 80116c4:	3714      	adds	r7, #20
 80116c6:	46bd      	mov	sp, r7
 80116c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116cc:	4770      	bx	lr
 80116ce:	bf00      	nop
 80116d0:	1000823f 	.word	0x1000823f
 80116d4:	40020940 	.word	0x40020940

080116d8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80116d8:	b480      	push	{r7}
 80116da:	b087      	sub	sp, #28
 80116dc:	af00      	add	r7, sp, #0
 80116de:	6078      	str	r0, [r7, #4]
 80116e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80116e2:	2300      	movs	r3, #0
 80116e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80116e6:	e14c      	b.n	8011982 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80116e8:	683b      	ldr	r3, [r7, #0]
 80116ea:	681a      	ldr	r2, [r3, #0]
 80116ec:	2101      	movs	r1, #1
 80116ee:	697b      	ldr	r3, [r7, #20]
 80116f0:	fa01 f303 	lsl.w	r3, r1, r3
 80116f4:	4013      	ands	r3, r2
 80116f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	f000 813e 	beq.w	801197c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8011700:	683b      	ldr	r3, [r7, #0]
 8011702:	685b      	ldr	r3, [r3, #4]
 8011704:	f003 0303 	and.w	r3, r3, #3
 8011708:	2b01      	cmp	r3, #1
 801170a:	d005      	beq.n	8011718 <HAL_GPIO_Init+0x40>
 801170c:	683b      	ldr	r3, [r7, #0]
 801170e:	685b      	ldr	r3, [r3, #4]
 8011710:	f003 0303 	and.w	r3, r3, #3
 8011714:	2b02      	cmp	r3, #2
 8011716:	d130      	bne.n	801177a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	689b      	ldr	r3, [r3, #8]
 801171c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 801171e:	697b      	ldr	r3, [r7, #20]
 8011720:	005b      	lsls	r3, r3, #1
 8011722:	2203      	movs	r2, #3
 8011724:	fa02 f303 	lsl.w	r3, r2, r3
 8011728:	43db      	mvns	r3, r3
 801172a:	693a      	ldr	r2, [r7, #16]
 801172c:	4013      	ands	r3, r2
 801172e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8011730:	683b      	ldr	r3, [r7, #0]
 8011732:	68da      	ldr	r2, [r3, #12]
 8011734:	697b      	ldr	r3, [r7, #20]
 8011736:	005b      	lsls	r3, r3, #1
 8011738:	fa02 f303 	lsl.w	r3, r2, r3
 801173c:	693a      	ldr	r2, [r7, #16]
 801173e:	4313      	orrs	r3, r2
 8011740:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	693a      	ldr	r2, [r7, #16]
 8011746:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	685b      	ldr	r3, [r3, #4]
 801174c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801174e:	2201      	movs	r2, #1
 8011750:	697b      	ldr	r3, [r7, #20]
 8011752:	fa02 f303 	lsl.w	r3, r2, r3
 8011756:	43db      	mvns	r3, r3
 8011758:	693a      	ldr	r2, [r7, #16]
 801175a:	4013      	ands	r3, r2
 801175c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801175e:	683b      	ldr	r3, [r7, #0]
 8011760:	685b      	ldr	r3, [r3, #4]
 8011762:	091b      	lsrs	r3, r3, #4
 8011764:	f003 0201 	and.w	r2, r3, #1
 8011768:	697b      	ldr	r3, [r7, #20]
 801176a:	fa02 f303 	lsl.w	r3, r2, r3
 801176e:	693a      	ldr	r2, [r7, #16]
 8011770:	4313      	orrs	r3, r2
 8011772:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	693a      	ldr	r2, [r7, #16]
 8011778:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801177a:	683b      	ldr	r3, [r7, #0]
 801177c:	685b      	ldr	r3, [r3, #4]
 801177e:	f003 0303 	and.w	r3, r3, #3
 8011782:	2b03      	cmp	r3, #3
 8011784:	d017      	beq.n	80117b6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	68db      	ldr	r3, [r3, #12]
 801178a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801178c:	697b      	ldr	r3, [r7, #20]
 801178e:	005b      	lsls	r3, r3, #1
 8011790:	2203      	movs	r2, #3
 8011792:	fa02 f303 	lsl.w	r3, r2, r3
 8011796:	43db      	mvns	r3, r3
 8011798:	693a      	ldr	r2, [r7, #16]
 801179a:	4013      	ands	r3, r2
 801179c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801179e:	683b      	ldr	r3, [r7, #0]
 80117a0:	689a      	ldr	r2, [r3, #8]
 80117a2:	697b      	ldr	r3, [r7, #20]
 80117a4:	005b      	lsls	r3, r3, #1
 80117a6:	fa02 f303 	lsl.w	r3, r2, r3
 80117aa:	693a      	ldr	r2, [r7, #16]
 80117ac:	4313      	orrs	r3, r2
 80117ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	693a      	ldr	r2, [r7, #16]
 80117b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80117b6:	683b      	ldr	r3, [r7, #0]
 80117b8:	685b      	ldr	r3, [r3, #4]
 80117ba:	f003 0303 	and.w	r3, r3, #3
 80117be:	2b02      	cmp	r3, #2
 80117c0:	d123      	bne.n	801180a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80117c2:	697b      	ldr	r3, [r7, #20]
 80117c4:	08da      	lsrs	r2, r3, #3
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	3208      	adds	r2, #8
 80117ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80117d0:	697b      	ldr	r3, [r7, #20]
 80117d2:	f003 0307 	and.w	r3, r3, #7
 80117d6:	009b      	lsls	r3, r3, #2
 80117d8:	220f      	movs	r2, #15
 80117da:	fa02 f303 	lsl.w	r3, r2, r3
 80117de:	43db      	mvns	r3, r3
 80117e0:	693a      	ldr	r2, [r7, #16]
 80117e2:	4013      	ands	r3, r2
 80117e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80117e6:	683b      	ldr	r3, [r7, #0]
 80117e8:	691a      	ldr	r2, [r3, #16]
 80117ea:	697b      	ldr	r3, [r7, #20]
 80117ec:	f003 0307 	and.w	r3, r3, #7
 80117f0:	009b      	lsls	r3, r3, #2
 80117f2:	fa02 f303 	lsl.w	r3, r2, r3
 80117f6:	693a      	ldr	r2, [r7, #16]
 80117f8:	4313      	orrs	r3, r2
 80117fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80117fc:	697b      	ldr	r3, [r7, #20]
 80117fe:	08da      	lsrs	r2, r3, #3
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	3208      	adds	r2, #8
 8011804:	6939      	ldr	r1, [r7, #16]
 8011806:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8011810:	697b      	ldr	r3, [r7, #20]
 8011812:	005b      	lsls	r3, r3, #1
 8011814:	2203      	movs	r2, #3
 8011816:	fa02 f303 	lsl.w	r3, r2, r3
 801181a:	43db      	mvns	r3, r3
 801181c:	693a      	ldr	r2, [r7, #16]
 801181e:	4013      	ands	r3, r2
 8011820:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8011822:	683b      	ldr	r3, [r7, #0]
 8011824:	685b      	ldr	r3, [r3, #4]
 8011826:	f003 0203 	and.w	r2, r3, #3
 801182a:	697b      	ldr	r3, [r7, #20]
 801182c:	005b      	lsls	r3, r3, #1
 801182e:	fa02 f303 	lsl.w	r3, r2, r3
 8011832:	693a      	ldr	r2, [r7, #16]
 8011834:	4313      	orrs	r3, r2
 8011836:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	693a      	ldr	r2, [r7, #16]
 801183c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801183e:	683b      	ldr	r3, [r7, #0]
 8011840:	685b      	ldr	r3, [r3, #4]
 8011842:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8011846:	2b00      	cmp	r3, #0
 8011848:	f000 8098 	beq.w	801197c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 801184c:	4a54      	ldr	r2, [pc, #336]	@ (80119a0 <HAL_GPIO_Init+0x2c8>)
 801184e:	697b      	ldr	r3, [r7, #20]
 8011850:	089b      	lsrs	r3, r3, #2
 8011852:	3302      	adds	r3, #2
 8011854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011858:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 801185a:	697b      	ldr	r3, [r7, #20]
 801185c:	f003 0303 	and.w	r3, r3, #3
 8011860:	009b      	lsls	r3, r3, #2
 8011862:	220f      	movs	r2, #15
 8011864:	fa02 f303 	lsl.w	r3, r2, r3
 8011868:	43db      	mvns	r3, r3
 801186a:	693a      	ldr	r2, [r7, #16]
 801186c:	4013      	ands	r3, r2
 801186e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8011876:	d019      	beq.n	80118ac <HAL_GPIO_Init+0x1d4>
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	4a4a      	ldr	r2, [pc, #296]	@ (80119a4 <HAL_GPIO_Init+0x2cc>)
 801187c:	4293      	cmp	r3, r2
 801187e:	d013      	beq.n	80118a8 <HAL_GPIO_Init+0x1d0>
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	4a49      	ldr	r2, [pc, #292]	@ (80119a8 <HAL_GPIO_Init+0x2d0>)
 8011884:	4293      	cmp	r3, r2
 8011886:	d00d      	beq.n	80118a4 <HAL_GPIO_Init+0x1cc>
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	4a48      	ldr	r2, [pc, #288]	@ (80119ac <HAL_GPIO_Init+0x2d4>)
 801188c:	4293      	cmp	r3, r2
 801188e:	d007      	beq.n	80118a0 <HAL_GPIO_Init+0x1c8>
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	4a47      	ldr	r2, [pc, #284]	@ (80119b0 <HAL_GPIO_Init+0x2d8>)
 8011894:	4293      	cmp	r3, r2
 8011896:	d101      	bne.n	801189c <HAL_GPIO_Init+0x1c4>
 8011898:	2304      	movs	r3, #4
 801189a:	e008      	b.n	80118ae <HAL_GPIO_Init+0x1d6>
 801189c:	2307      	movs	r3, #7
 801189e:	e006      	b.n	80118ae <HAL_GPIO_Init+0x1d6>
 80118a0:	2303      	movs	r3, #3
 80118a2:	e004      	b.n	80118ae <HAL_GPIO_Init+0x1d6>
 80118a4:	2302      	movs	r3, #2
 80118a6:	e002      	b.n	80118ae <HAL_GPIO_Init+0x1d6>
 80118a8:	2301      	movs	r3, #1
 80118aa:	e000      	b.n	80118ae <HAL_GPIO_Init+0x1d6>
 80118ac:	2300      	movs	r3, #0
 80118ae:	697a      	ldr	r2, [r7, #20]
 80118b0:	f002 0203 	and.w	r2, r2, #3
 80118b4:	0092      	lsls	r2, r2, #2
 80118b6:	4093      	lsls	r3, r2
 80118b8:	693a      	ldr	r2, [r7, #16]
 80118ba:	4313      	orrs	r3, r2
 80118bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80118be:	4938      	ldr	r1, [pc, #224]	@ (80119a0 <HAL_GPIO_Init+0x2c8>)
 80118c0:	697b      	ldr	r3, [r7, #20]
 80118c2:	089b      	lsrs	r3, r3, #2
 80118c4:	3302      	adds	r3, #2
 80118c6:	693a      	ldr	r2, [r7, #16]
 80118c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80118cc:	4b39      	ldr	r3, [pc, #228]	@ (80119b4 <HAL_GPIO_Init+0x2dc>)
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	43db      	mvns	r3, r3
 80118d6:	693a      	ldr	r2, [r7, #16]
 80118d8:	4013      	ands	r3, r2
 80118da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80118dc:	683b      	ldr	r3, [r7, #0]
 80118de:	685b      	ldr	r3, [r3, #4]
 80118e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d003      	beq.n	80118f0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80118e8:	693a      	ldr	r2, [r7, #16]
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	4313      	orrs	r3, r2
 80118ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80118f0:	4a30      	ldr	r2, [pc, #192]	@ (80119b4 <HAL_GPIO_Init+0x2dc>)
 80118f2:	693b      	ldr	r3, [r7, #16]
 80118f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80118f6:	4b2f      	ldr	r3, [pc, #188]	@ (80119b4 <HAL_GPIO_Init+0x2dc>)
 80118f8:	685b      	ldr	r3, [r3, #4]
 80118fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	43db      	mvns	r3, r3
 8011900:	693a      	ldr	r2, [r7, #16]
 8011902:	4013      	ands	r3, r2
 8011904:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8011906:	683b      	ldr	r3, [r7, #0]
 8011908:	685b      	ldr	r3, [r3, #4]
 801190a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801190e:	2b00      	cmp	r3, #0
 8011910:	d003      	beq.n	801191a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8011912:	693a      	ldr	r2, [r7, #16]
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	4313      	orrs	r3, r2
 8011918:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 801191a:	4a26      	ldr	r2, [pc, #152]	@ (80119b4 <HAL_GPIO_Init+0x2dc>)
 801191c:	693b      	ldr	r3, [r7, #16]
 801191e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8011920:	4b24      	ldr	r3, [pc, #144]	@ (80119b4 <HAL_GPIO_Init+0x2dc>)
 8011922:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	43db      	mvns	r3, r3
 801192c:	693a      	ldr	r2, [r7, #16]
 801192e:	4013      	ands	r3, r2
 8011930:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8011932:	683b      	ldr	r3, [r7, #0]
 8011934:	685b      	ldr	r3, [r3, #4]
 8011936:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801193a:	2b00      	cmp	r3, #0
 801193c:	d003      	beq.n	8011946 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 801193e:	693a      	ldr	r2, [r7, #16]
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	4313      	orrs	r3, r2
 8011944:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8011946:	4a1b      	ldr	r2, [pc, #108]	@ (80119b4 <HAL_GPIO_Init+0x2dc>)
 8011948:	693b      	ldr	r3, [r7, #16]
 801194a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 801194e:	4b19      	ldr	r3, [pc, #100]	@ (80119b4 <HAL_GPIO_Init+0x2dc>)
 8011950:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011954:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	43db      	mvns	r3, r3
 801195a:	693a      	ldr	r2, [r7, #16]
 801195c:	4013      	ands	r3, r2
 801195e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8011960:	683b      	ldr	r3, [r7, #0]
 8011962:	685b      	ldr	r3, [r3, #4]
 8011964:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011968:	2b00      	cmp	r3, #0
 801196a:	d003      	beq.n	8011974 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 801196c:	693a      	ldr	r2, [r7, #16]
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	4313      	orrs	r3, r2
 8011972:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8011974:	4a0f      	ldr	r2, [pc, #60]	@ (80119b4 <HAL_GPIO_Init+0x2dc>)
 8011976:	693b      	ldr	r3, [r7, #16]
 8011978:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 801197c:	697b      	ldr	r3, [r7, #20]
 801197e:	3301      	adds	r3, #1
 8011980:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8011982:	683b      	ldr	r3, [r7, #0]
 8011984:	681a      	ldr	r2, [r3, #0]
 8011986:	697b      	ldr	r3, [r7, #20]
 8011988:	fa22 f303 	lsr.w	r3, r2, r3
 801198c:	2b00      	cmp	r3, #0
 801198e:	f47f aeab 	bne.w	80116e8 <HAL_GPIO_Init+0x10>
  }
}
 8011992:	bf00      	nop
 8011994:	bf00      	nop
 8011996:	371c      	adds	r7, #28
 8011998:	46bd      	mov	sp, r7
 801199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801199e:	4770      	bx	lr
 80119a0:	40010000 	.word	0x40010000
 80119a4:	48000400 	.word	0x48000400
 80119a8:	48000800 	.word	0x48000800
 80119ac:	48000c00 	.word	0x48000c00
 80119b0:	48001000 	.word	0x48001000
 80119b4:	58000800 	.word	0x58000800

080119b8 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80119b8:	b480      	push	{r7}
 80119ba:	b087      	sub	sp, #28
 80119bc:	af00      	add	r7, sp, #0
 80119be:	6078      	str	r0, [r7, #4]
 80119c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80119c2:	2300      	movs	r3, #0
 80119c4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80119c6:	e0bb      	b.n	8011b40 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80119c8:	2201      	movs	r2, #1
 80119ca:	697b      	ldr	r3, [r7, #20]
 80119cc:	fa02 f303 	lsl.w	r3, r2, r3
 80119d0:	683a      	ldr	r2, [r7, #0]
 80119d2:	4013      	ands	r3, r2
 80119d4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80119d6:	693b      	ldr	r3, [r7, #16]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	f000 80ae 	beq.w	8011b3a <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80119de:	4a5f      	ldr	r2, [pc, #380]	@ (8011b5c <HAL_GPIO_DeInit+0x1a4>)
 80119e0:	697b      	ldr	r3, [r7, #20]
 80119e2:	089b      	lsrs	r3, r3, #2
 80119e4:	3302      	adds	r3, #2
 80119e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80119ea:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 80119ec:	697b      	ldr	r3, [r7, #20]
 80119ee:	f003 0303 	and.w	r3, r3, #3
 80119f2:	009b      	lsls	r3, r3, #2
 80119f4:	220f      	movs	r2, #15
 80119f6:	fa02 f303 	lsl.w	r3, r2, r3
 80119fa:	68fa      	ldr	r2, [r7, #12]
 80119fc:	4013      	ands	r3, r2
 80119fe:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8011a06:	d019      	beq.n	8011a3c <HAL_GPIO_DeInit+0x84>
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	4a55      	ldr	r2, [pc, #340]	@ (8011b60 <HAL_GPIO_DeInit+0x1a8>)
 8011a0c:	4293      	cmp	r3, r2
 8011a0e:	d013      	beq.n	8011a38 <HAL_GPIO_DeInit+0x80>
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	4a54      	ldr	r2, [pc, #336]	@ (8011b64 <HAL_GPIO_DeInit+0x1ac>)
 8011a14:	4293      	cmp	r3, r2
 8011a16:	d00d      	beq.n	8011a34 <HAL_GPIO_DeInit+0x7c>
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	4a53      	ldr	r2, [pc, #332]	@ (8011b68 <HAL_GPIO_DeInit+0x1b0>)
 8011a1c:	4293      	cmp	r3, r2
 8011a1e:	d007      	beq.n	8011a30 <HAL_GPIO_DeInit+0x78>
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	4a52      	ldr	r2, [pc, #328]	@ (8011b6c <HAL_GPIO_DeInit+0x1b4>)
 8011a24:	4293      	cmp	r3, r2
 8011a26:	d101      	bne.n	8011a2c <HAL_GPIO_DeInit+0x74>
 8011a28:	2304      	movs	r3, #4
 8011a2a:	e008      	b.n	8011a3e <HAL_GPIO_DeInit+0x86>
 8011a2c:	2307      	movs	r3, #7
 8011a2e:	e006      	b.n	8011a3e <HAL_GPIO_DeInit+0x86>
 8011a30:	2303      	movs	r3, #3
 8011a32:	e004      	b.n	8011a3e <HAL_GPIO_DeInit+0x86>
 8011a34:	2302      	movs	r3, #2
 8011a36:	e002      	b.n	8011a3e <HAL_GPIO_DeInit+0x86>
 8011a38:	2301      	movs	r3, #1
 8011a3a:	e000      	b.n	8011a3e <HAL_GPIO_DeInit+0x86>
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	697a      	ldr	r2, [r7, #20]
 8011a40:	f002 0203 	and.w	r2, r2, #3
 8011a44:	0092      	lsls	r2, r2, #2
 8011a46:	4093      	lsls	r3, r2
 8011a48:	68fa      	ldr	r2, [r7, #12]
 8011a4a:	429a      	cmp	r2, r3
 8011a4c:	d136      	bne.n	8011abc <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8011a4e:	4b48      	ldr	r3, [pc, #288]	@ (8011b70 <HAL_GPIO_DeInit+0x1b8>)
 8011a50:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8011a54:	693b      	ldr	r3, [r7, #16]
 8011a56:	43db      	mvns	r3, r3
 8011a58:	4945      	ldr	r1, [pc, #276]	@ (8011b70 <HAL_GPIO_DeInit+0x1b8>)
 8011a5a:	4013      	ands	r3, r2
 8011a5c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8011a60:	4b43      	ldr	r3, [pc, #268]	@ (8011b70 <HAL_GPIO_DeInit+0x1b8>)
 8011a62:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8011a66:	693b      	ldr	r3, [r7, #16]
 8011a68:	43db      	mvns	r3, r3
 8011a6a:	4941      	ldr	r1, [pc, #260]	@ (8011b70 <HAL_GPIO_DeInit+0x1b8>)
 8011a6c:	4013      	ands	r3, r2
 8011a6e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8011a72:	4b3f      	ldr	r3, [pc, #252]	@ (8011b70 <HAL_GPIO_DeInit+0x1b8>)
 8011a74:	681a      	ldr	r2, [r3, #0]
 8011a76:	693b      	ldr	r3, [r7, #16]
 8011a78:	43db      	mvns	r3, r3
 8011a7a:	493d      	ldr	r1, [pc, #244]	@ (8011b70 <HAL_GPIO_DeInit+0x1b8>)
 8011a7c:	4013      	ands	r3, r2
 8011a7e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8011a80:	4b3b      	ldr	r3, [pc, #236]	@ (8011b70 <HAL_GPIO_DeInit+0x1b8>)
 8011a82:	685a      	ldr	r2, [r3, #4]
 8011a84:	693b      	ldr	r3, [r7, #16]
 8011a86:	43db      	mvns	r3, r3
 8011a88:	4939      	ldr	r1, [pc, #228]	@ (8011b70 <HAL_GPIO_DeInit+0x1b8>)
 8011a8a:	4013      	ands	r3, r2
 8011a8c:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8011a8e:	697b      	ldr	r3, [r7, #20]
 8011a90:	f003 0303 	and.w	r3, r3, #3
 8011a94:	009b      	lsls	r3, r3, #2
 8011a96:	220f      	movs	r2, #15
 8011a98:	fa02 f303 	lsl.w	r3, r2, r3
 8011a9c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8011a9e:	4a2f      	ldr	r2, [pc, #188]	@ (8011b5c <HAL_GPIO_DeInit+0x1a4>)
 8011aa0:	697b      	ldr	r3, [r7, #20]
 8011aa2:	089b      	lsrs	r3, r3, #2
 8011aa4:	3302      	adds	r3, #2
 8011aa6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	43da      	mvns	r2, r3
 8011aae:	482b      	ldr	r0, [pc, #172]	@ (8011b5c <HAL_GPIO_DeInit+0x1a4>)
 8011ab0:	697b      	ldr	r3, [r7, #20]
 8011ab2:	089b      	lsrs	r3, r3, #2
 8011ab4:	400a      	ands	r2, r1
 8011ab6:	3302      	adds	r3, #2
 8011ab8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	681a      	ldr	r2, [r3, #0]
 8011ac0:	697b      	ldr	r3, [r7, #20]
 8011ac2:	005b      	lsls	r3, r3, #1
 8011ac4:	2103      	movs	r1, #3
 8011ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8011aca:	431a      	orrs	r2, r3
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8011ad0:	697b      	ldr	r3, [r7, #20]
 8011ad2:	08da      	lsrs	r2, r3, #3
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	3208      	adds	r2, #8
 8011ad8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011adc:	697b      	ldr	r3, [r7, #20]
 8011ade:	f003 0307 	and.w	r3, r3, #7
 8011ae2:	009b      	lsls	r3, r3, #2
 8011ae4:	220f      	movs	r2, #15
 8011ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8011aea:	43db      	mvns	r3, r3
 8011aec:	697a      	ldr	r2, [r7, #20]
 8011aee:	08d2      	lsrs	r2, r2, #3
 8011af0:	4019      	ands	r1, r3
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	3208      	adds	r2, #8
 8011af6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	68da      	ldr	r2, [r3, #12]
 8011afe:	697b      	ldr	r3, [r7, #20]
 8011b00:	005b      	lsls	r3, r3, #1
 8011b02:	2103      	movs	r1, #3
 8011b04:	fa01 f303 	lsl.w	r3, r1, r3
 8011b08:	43db      	mvns	r3, r3
 8011b0a:	401a      	ands	r2, r3
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	685a      	ldr	r2, [r3, #4]
 8011b14:	2101      	movs	r1, #1
 8011b16:	697b      	ldr	r3, [r7, #20]
 8011b18:	fa01 f303 	lsl.w	r3, r1, r3
 8011b1c:	43db      	mvns	r3, r3
 8011b1e:	401a      	ands	r2, r3
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	689a      	ldr	r2, [r3, #8]
 8011b28:	697b      	ldr	r3, [r7, #20]
 8011b2a:	005b      	lsls	r3, r3, #1
 8011b2c:	2103      	movs	r1, #3
 8011b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8011b32:	43db      	mvns	r3, r3
 8011b34:	401a      	ands	r2, r3
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	609a      	str	r2, [r3, #8]
    }

    position++;
 8011b3a:	697b      	ldr	r3, [r7, #20]
 8011b3c:	3301      	adds	r3, #1
 8011b3e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8011b40:	683a      	ldr	r2, [r7, #0]
 8011b42:	697b      	ldr	r3, [r7, #20]
 8011b44:	fa22 f303 	lsr.w	r3, r2, r3
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	f47f af3d 	bne.w	80119c8 <HAL_GPIO_DeInit+0x10>
  }
}
 8011b4e:	bf00      	nop
 8011b50:	bf00      	nop
 8011b52:	371c      	adds	r7, #28
 8011b54:	46bd      	mov	sp, r7
 8011b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b5a:	4770      	bx	lr
 8011b5c:	40010000 	.word	0x40010000
 8011b60:	48000400 	.word	0x48000400
 8011b64:	48000800 	.word	0x48000800
 8011b68:	48000c00 	.word	0x48000c00
 8011b6c:	48001000 	.word	0x48001000
 8011b70:	58000800 	.word	0x58000800

08011b74 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8011b74:	b480      	push	{r7}
 8011b76:	b085      	sub	sp, #20
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	6078      	str	r0, [r7, #4]
 8011b7c:	460b      	mov	r3, r1
 8011b7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	691a      	ldr	r2, [r3, #16]
 8011b84:	887b      	ldrh	r3, [r7, #2]
 8011b86:	4013      	ands	r3, r2
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d002      	beq.n	8011b92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8011b8c:	2301      	movs	r3, #1
 8011b8e:	73fb      	strb	r3, [r7, #15]
 8011b90:	e001      	b.n	8011b96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8011b92:	2300      	movs	r3, #0
 8011b94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8011b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b98:	4618      	mov	r0, r3
 8011b9a:	3714      	adds	r7, #20
 8011b9c:	46bd      	mov	sp, r7
 8011b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba2:	4770      	bx	lr

08011ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8011ba4:	b480      	push	{r7}
 8011ba6:	b083      	sub	sp, #12
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	6078      	str	r0, [r7, #4]
 8011bac:	460b      	mov	r3, r1
 8011bae:	807b      	strh	r3, [r7, #2]
 8011bb0:	4613      	mov	r3, r2
 8011bb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8011bb4:	787b      	ldrb	r3, [r7, #1]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d003      	beq.n	8011bc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8011bba:	887a      	ldrh	r2, [r7, #2]
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8011bc0:	e002      	b.n	8011bc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8011bc2:	887a      	ldrh	r2, [r7, #2]
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8011bc8:	bf00      	nop
 8011bca:	370c      	adds	r7, #12
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd2:	4770      	bx	lr

08011bd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	b082      	sub	sp, #8
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	4603      	mov	r3, r0
 8011bdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8011bde:	4b08      	ldr	r3, [pc, #32]	@ (8011c00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8011be0:	68da      	ldr	r2, [r3, #12]
 8011be2:	88fb      	ldrh	r3, [r7, #6]
 8011be4:	4013      	ands	r3, r2
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d006      	beq.n	8011bf8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8011bea:	4a05      	ldr	r2, [pc, #20]	@ (8011c00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8011bec:	88fb      	ldrh	r3, [r7, #6]
 8011bee:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8011bf0:	88fb      	ldrh	r3, [r7, #6]
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	f7fb ffce 	bl	800db94 <HAL_GPIO_EXTI_Callback>
  }
}
 8011bf8:	bf00      	nop
 8011bfa:	3708      	adds	r7, #8
 8011bfc:	46bd      	mov	sp, r7
 8011bfe:	bd80      	pop	{r7, pc}
 8011c00:	58000800 	.word	0x58000800

08011c04 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8011c04:	b580      	push	{r7, lr}
 8011c06:	b082      	sub	sp, #8
 8011c08:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8011c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8011c34 <HAL_HSEM_IRQHandler+0x30>)
 8011c0c:	68db      	ldr	r3, [r3, #12]
 8011c0e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8011c10:	4b08      	ldr	r3, [pc, #32]	@ (8011c34 <HAL_HSEM_IRQHandler+0x30>)
 8011c12:	681a      	ldr	r2, [r3, #0]
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	43db      	mvns	r3, r3
 8011c18:	4906      	ldr	r1, [pc, #24]	@ (8011c34 <HAL_HSEM_IRQHandler+0x30>)
 8011c1a:	4013      	ands	r3, r2
 8011c1c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8011c1e:	4a05      	ldr	r2, [pc, #20]	@ (8011c34 <HAL_HSEM_IRQHandler+0x30>)
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8011c24:	6878      	ldr	r0, [r7, #4]
 8011c26:	f000 f807 	bl	8011c38 <HAL_HSEM_FreeCallback>
}
 8011c2a:	bf00      	nop
 8011c2c:	3708      	adds	r7, #8
 8011c2e:	46bd      	mov	sp, r7
 8011c30:	bd80      	pop	{r7, pc}
 8011c32:	bf00      	nop
 8011c34:	58001500 	.word	0x58001500

08011c38 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8011c38:	b480      	push	{r7}
 8011c3a:	b083      	sub	sp, #12
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8011c40:	bf00      	nop
 8011c42:	370c      	adds	r7, #12
 8011c44:	46bd      	mov	sp, r7
 8011c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c4a:	4770      	bx	lr

08011c4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b082      	sub	sp, #8
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d101      	bne.n	8011c5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8011c5a:	2301      	movs	r3, #1
 8011c5c:	e08d      	b.n	8011d7a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011c64:	b2db      	uxtb	r3, r3
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d106      	bne.n	8011c78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	2200      	movs	r2, #0
 8011c6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8011c72:	6878      	ldr	r0, [r7, #4]
 8011c74:	f7f8 fc88 	bl	800a588 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	2224      	movs	r2, #36	@ 0x24
 8011c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	681a      	ldr	r2, [r3, #0]
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	f022 0201 	bic.w	r2, r2, #1
 8011c8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	685a      	ldr	r2, [r3, #4]
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8011c9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	689a      	ldr	r2, [r3, #8]
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8011cac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	68db      	ldr	r3, [r3, #12]
 8011cb2:	2b01      	cmp	r3, #1
 8011cb4:	d107      	bne.n	8011cc6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	689a      	ldr	r2, [r3, #8]
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8011cc2:	609a      	str	r2, [r3, #8]
 8011cc4:	e006      	b.n	8011cd4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	689a      	ldr	r2, [r3, #8]
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8011cd2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	68db      	ldr	r3, [r3, #12]
 8011cd8:	2b02      	cmp	r3, #2
 8011cda:	d108      	bne.n	8011cee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	685a      	ldr	r2, [r3, #4]
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011cea:	605a      	str	r2, [r3, #4]
 8011cec:	e007      	b.n	8011cfe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	685a      	ldr	r2, [r3, #4]
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8011cfc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	685b      	ldr	r3, [r3, #4]
 8011d04:	687a      	ldr	r2, [r7, #4]
 8011d06:	6812      	ldr	r2, [r2, #0]
 8011d08:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8011d0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011d10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	68da      	ldr	r2, [r3, #12]
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8011d20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	691a      	ldr	r2, [r3, #16]
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	695b      	ldr	r3, [r3, #20]
 8011d2a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	699b      	ldr	r3, [r3, #24]
 8011d32:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	430a      	orrs	r2, r1
 8011d3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	69d9      	ldr	r1, [r3, #28]
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	6a1a      	ldr	r2, [r3, #32]
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	430a      	orrs	r2, r1
 8011d4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	681a      	ldr	r2, [r3, #0]
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	f042 0201 	orr.w	r2, r2, #1
 8011d5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	2200      	movs	r2, #0
 8011d60:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	2220      	movs	r2, #32
 8011d66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	2200      	movs	r2, #0
 8011d6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	2200      	movs	r2, #0
 8011d74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8011d78:	2300      	movs	r3, #0
}
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	3708      	adds	r7, #8
 8011d7e:	46bd      	mov	sp, r7
 8011d80:	bd80      	pop	{r7, pc}
	...

08011d84 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b088      	sub	sp, #32
 8011d88:	af02      	add	r7, sp, #8
 8011d8a:	60f8      	str	r0, [r7, #12]
 8011d8c:	4608      	mov	r0, r1
 8011d8e:	4611      	mov	r1, r2
 8011d90:	461a      	mov	r2, r3
 8011d92:	4603      	mov	r3, r0
 8011d94:	817b      	strh	r3, [r7, #10]
 8011d96:	460b      	mov	r3, r1
 8011d98:	813b      	strh	r3, [r7, #8]
 8011d9a:	4613      	mov	r3, r2
 8011d9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011da4:	b2db      	uxtb	r3, r3
 8011da6:	2b20      	cmp	r3, #32
 8011da8:	f040 80f9 	bne.w	8011f9e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8011dac:	6a3b      	ldr	r3, [r7, #32]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d002      	beq.n	8011db8 <HAL_I2C_Mem_Write+0x34>
 8011db2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d105      	bne.n	8011dc4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011dbe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8011dc0:	2301      	movs	r3, #1
 8011dc2:	e0ed      	b.n	8011fa0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011dca:	2b01      	cmp	r3, #1
 8011dcc:	d101      	bne.n	8011dd2 <HAL_I2C_Mem_Write+0x4e>
 8011dce:	2302      	movs	r3, #2
 8011dd0:	e0e6      	b.n	8011fa0 <HAL_I2C_Mem_Write+0x21c>
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	2201      	movs	r2, #1
 8011dd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8011dda:	f7fd fc89 	bl	800f6f0 <HAL_GetTick>
 8011dde:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8011de0:	697b      	ldr	r3, [r7, #20]
 8011de2:	9300      	str	r3, [sp, #0]
 8011de4:	2319      	movs	r3, #25
 8011de6:	2201      	movs	r2, #1
 8011de8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8011dec:	68f8      	ldr	r0, [r7, #12]
 8011dee:	f000 fac3 	bl	8012378 <I2C_WaitOnFlagUntilTimeout>
 8011df2:	4603      	mov	r3, r0
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d001      	beq.n	8011dfc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8011df8:	2301      	movs	r3, #1
 8011dfa:	e0d1      	b.n	8011fa0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	2221      	movs	r2, #33	@ 0x21
 8011e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	2240      	movs	r2, #64	@ 0x40
 8011e08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	2200      	movs	r2, #0
 8011e10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	6a3a      	ldr	r2, [r7, #32]
 8011e16:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011e1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	2200      	movs	r2, #0
 8011e22:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8011e24:	88f8      	ldrh	r0, [r7, #6]
 8011e26:	893a      	ldrh	r2, [r7, #8]
 8011e28:	8979      	ldrh	r1, [r7, #10]
 8011e2a:	697b      	ldr	r3, [r7, #20]
 8011e2c:	9301      	str	r3, [sp, #4]
 8011e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e30:	9300      	str	r3, [sp, #0]
 8011e32:	4603      	mov	r3, r0
 8011e34:	68f8      	ldr	r0, [r7, #12]
 8011e36:	f000 f9d3 	bl	80121e0 <I2C_RequestMemoryWrite>
 8011e3a:	4603      	mov	r3, r0
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d005      	beq.n	8011e4c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	2200      	movs	r2, #0
 8011e44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8011e48:	2301      	movs	r3, #1
 8011e4a:	e0a9      	b.n	8011fa0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011e50:	b29b      	uxth	r3, r3
 8011e52:	2bff      	cmp	r3, #255	@ 0xff
 8011e54:	d90e      	bls.n	8011e74 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	22ff      	movs	r2, #255	@ 0xff
 8011e5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011e60:	b2da      	uxtb	r2, r3
 8011e62:	8979      	ldrh	r1, [r7, #10]
 8011e64:	2300      	movs	r3, #0
 8011e66:	9300      	str	r3, [sp, #0]
 8011e68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8011e6c:	68f8      	ldr	r0, [r7, #12]
 8011e6e:	f000 fc47 	bl	8012700 <I2C_TransferConfig>
 8011e72:	e00f      	b.n	8011e94 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011e78:	b29a      	uxth	r2, r3
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011e82:	b2da      	uxtb	r2, r3
 8011e84:	8979      	ldrh	r1, [r7, #10]
 8011e86:	2300      	movs	r3, #0
 8011e88:	9300      	str	r3, [sp, #0]
 8011e8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8011e8e:	68f8      	ldr	r0, [r7, #12]
 8011e90:	f000 fc36 	bl	8012700 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8011e94:	697a      	ldr	r2, [r7, #20]
 8011e96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011e98:	68f8      	ldr	r0, [r7, #12]
 8011e9a:	f000 fac6 	bl	801242a <I2C_WaitOnTXISFlagUntilTimeout>
 8011e9e:	4603      	mov	r3, r0
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d001      	beq.n	8011ea8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8011ea4:	2301      	movs	r3, #1
 8011ea6:	e07b      	b.n	8011fa0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011eac:	781a      	ldrb	r2, [r3, #0]
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011eb8:	1c5a      	adds	r2, r3, #1
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011ec2:	b29b      	uxth	r3, r3
 8011ec4:	3b01      	subs	r3, #1
 8011ec6:	b29a      	uxth	r2, r3
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011ed0:	3b01      	subs	r3, #1
 8011ed2:	b29a      	uxth	r2, r3
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011edc:	b29b      	uxth	r3, r3
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d034      	beq.n	8011f4c <HAL_I2C_Mem_Write+0x1c8>
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d130      	bne.n	8011f4c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8011eea:	697b      	ldr	r3, [r7, #20]
 8011eec:	9300      	str	r3, [sp, #0]
 8011eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ef0:	2200      	movs	r2, #0
 8011ef2:	2180      	movs	r1, #128	@ 0x80
 8011ef4:	68f8      	ldr	r0, [r7, #12]
 8011ef6:	f000 fa3f 	bl	8012378 <I2C_WaitOnFlagUntilTimeout>
 8011efa:	4603      	mov	r3, r0
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d001      	beq.n	8011f04 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8011f00:	2301      	movs	r3, #1
 8011f02:	e04d      	b.n	8011fa0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011f08:	b29b      	uxth	r3, r3
 8011f0a:	2bff      	cmp	r3, #255	@ 0xff
 8011f0c:	d90e      	bls.n	8011f2c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	22ff      	movs	r2, #255	@ 0xff
 8011f12:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011f18:	b2da      	uxtb	r2, r3
 8011f1a:	8979      	ldrh	r1, [r7, #10]
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	9300      	str	r3, [sp, #0]
 8011f20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8011f24:	68f8      	ldr	r0, [r7, #12]
 8011f26:	f000 fbeb 	bl	8012700 <I2C_TransferConfig>
 8011f2a:	e00f      	b.n	8011f4c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011f30:	b29a      	uxth	r2, r3
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011f3a:	b2da      	uxtb	r2, r3
 8011f3c:	8979      	ldrh	r1, [r7, #10]
 8011f3e:	2300      	movs	r3, #0
 8011f40:	9300      	str	r3, [sp, #0]
 8011f42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8011f46:	68f8      	ldr	r0, [r7, #12]
 8011f48:	f000 fbda 	bl	8012700 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011f50:	b29b      	uxth	r3, r3
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d19e      	bne.n	8011e94 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8011f56:	697a      	ldr	r2, [r7, #20]
 8011f58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011f5a:	68f8      	ldr	r0, [r7, #12]
 8011f5c:	f000 faac 	bl	80124b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8011f60:	4603      	mov	r3, r0
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d001      	beq.n	8011f6a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8011f66:	2301      	movs	r3, #1
 8011f68:	e01a      	b.n	8011fa0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	2220      	movs	r2, #32
 8011f70:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	6859      	ldr	r1, [r3, #4]
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	681a      	ldr	r2, [r3, #0]
 8011f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8011fa8 <HAL_I2C_Mem_Write+0x224>)
 8011f7e:	400b      	ands	r3, r1
 8011f80:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	2220      	movs	r2, #32
 8011f86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	2200      	movs	r2, #0
 8011f8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	2200      	movs	r2, #0
 8011f96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	e000      	b.n	8011fa0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8011f9e:	2302      	movs	r3, #2
  }
}
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	3718      	adds	r7, #24
 8011fa4:	46bd      	mov	sp, r7
 8011fa6:	bd80      	pop	{r7, pc}
 8011fa8:	fe00e800 	.word	0xfe00e800

08011fac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011fac:	b580      	push	{r7, lr}
 8011fae:	b088      	sub	sp, #32
 8011fb0:	af02      	add	r7, sp, #8
 8011fb2:	60f8      	str	r0, [r7, #12]
 8011fb4:	4608      	mov	r0, r1
 8011fb6:	4611      	mov	r1, r2
 8011fb8:	461a      	mov	r2, r3
 8011fba:	4603      	mov	r3, r0
 8011fbc:	817b      	strh	r3, [r7, #10]
 8011fbe:	460b      	mov	r3, r1
 8011fc0:	813b      	strh	r3, [r7, #8]
 8011fc2:	4613      	mov	r3, r2
 8011fc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011fcc:	b2db      	uxtb	r3, r3
 8011fce:	2b20      	cmp	r3, #32
 8011fd0:	f040 80fd 	bne.w	80121ce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8011fd4:	6a3b      	ldr	r3, [r7, #32]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d002      	beq.n	8011fe0 <HAL_I2C_Mem_Read+0x34>
 8011fda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d105      	bne.n	8011fec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011fe6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8011fe8:	2301      	movs	r3, #1
 8011fea:	e0f1      	b.n	80121d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011ff2:	2b01      	cmp	r3, #1
 8011ff4:	d101      	bne.n	8011ffa <HAL_I2C_Mem_Read+0x4e>
 8011ff6:	2302      	movs	r3, #2
 8011ff8:	e0ea      	b.n	80121d0 <HAL_I2C_Mem_Read+0x224>
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	2201      	movs	r2, #1
 8011ffe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8012002:	f7fd fb75 	bl	800f6f0 <HAL_GetTick>
 8012006:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8012008:	697b      	ldr	r3, [r7, #20]
 801200a:	9300      	str	r3, [sp, #0]
 801200c:	2319      	movs	r3, #25
 801200e:	2201      	movs	r2, #1
 8012010:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8012014:	68f8      	ldr	r0, [r7, #12]
 8012016:	f000 f9af 	bl	8012378 <I2C_WaitOnFlagUntilTimeout>
 801201a:	4603      	mov	r3, r0
 801201c:	2b00      	cmp	r3, #0
 801201e:	d001      	beq.n	8012024 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8012020:	2301      	movs	r3, #1
 8012022:	e0d5      	b.n	80121d0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	2222      	movs	r2, #34	@ 0x22
 8012028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	2240      	movs	r2, #64	@ 0x40
 8012030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	2200      	movs	r2, #0
 8012038:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	6a3a      	ldr	r2, [r7, #32]
 801203e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012044:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	2200      	movs	r2, #0
 801204a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801204c:	88f8      	ldrh	r0, [r7, #6]
 801204e:	893a      	ldrh	r2, [r7, #8]
 8012050:	8979      	ldrh	r1, [r7, #10]
 8012052:	697b      	ldr	r3, [r7, #20]
 8012054:	9301      	str	r3, [sp, #4]
 8012056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012058:	9300      	str	r3, [sp, #0]
 801205a:	4603      	mov	r3, r0
 801205c:	68f8      	ldr	r0, [r7, #12]
 801205e:	f000 f913 	bl	8012288 <I2C_RequestMemoryRead>
 8012062:	4603      	mov	r3, r0
 8012064:	2b00      	cmp	r3, #0
 8012066:	d005      	beq.n	8012074 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	2200      	movs	r2, #0
 801206c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8012070:	2301      	movs	r3, #1
 8012072:	e0ad      	b.n	80121d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012078:	b29b      	uxth	r3, r3
 801207a:	2bff      	cmp	r3, #255	@ 0xff
 801207c:	d90e      	bls.n	801209c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	22ff      	movs	r2, #255	@ 0xff
 8012082:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012088:	b2da      	uxtb	r2, r3
 801208a:	8979      	ldrh	r1, [r7, #10]
 801208c:	4b52      	ldr	r3, [pc, #328]	@ (80121d8 <HAL_I2C_Mem_Read+0x22c>)
 801208e:	9300      	str	r3, [sp, #0]
 8012090:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8012094:	68f8      	ldr	r0, [r7, #12]
 8012096:	f000 fb33 	bl	8012700 <I2C_TransferConfig>
 801209a:	e00f      	b.n	80120bc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80120a0:	b29a      	uxth	r2, r3
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80120aa:	b2da      	uxtb	r2, r3
 80120ac:	8979      	ldrh	r1, [r7, #10]
 80120ae:	4b4a      	ldr	r3, [pc, #296]	@ (80121d8 <HAL_I2C_Mem_Read+0x22c>)
 80120b0:	9300      	str	r3, [sp, #0]
 80120b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80120b6:	68f8      	ldr	r0, [r7, #12]
 80120b8:	f000 fb22 	bl	8012700 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80120bc:	697b      	ldr	r3, [r7, #20]
 80120be:	9300      	str	r3, [sp, #0]
 80120c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120c2:	2200      	movs	r2, #0
 80120c4:	2104      	movs	r1, #4
 80120c6:	68f8      	ldr	r0, [r7, #12]
 80120c8:	f000 f956 	bl	8012378 <I2C_WaitOnFlagUntilTimeout>
 80120cc:	4603      	mov	r3, r0
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d001      	beq.n	80120d6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80120d2:	2301      	movs	r3, #1
 80120d4:	e07c      	b.n	80121d0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120e0:	b2d2      	uxtb	r2, r2
 80120e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120e8:	1c5a      	adds	r2, r3, #1
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80120f2:	3b01      	subs	r3, #1
 80120f4:	b29a      	uxth	r2, r3
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80120fe:	b29b      	uxth	r3, r3
 8012100:	3b01      	subs	r3, #1
 8012102:	b29a      	uxth	r2, r3
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801210c:	b29b      	uxth	r3, r3
 801210e:	2b00      	cmp	r3, #0
 8012110:	d034      	beq.n	801217c <HAL_I2C_Mem_Read+0x1d0>
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012116:	2b00      	cmp	r3, #0
 8012118:	d130      	bne.n	801217c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801211a:	697b      	ldr	r3, [r7, #20]
 801211c:	9300      	str	r3, [sp, #0]
 801211e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012120:	2200      	movs	r2, #0
 8012122:	2180      	movs	r1, #128	@ 0x80
 8012124:	68f8      	ldr	r0, [r7, #12]
 8012126:	f000 f927 	bl	8012378 <I2C_WaitOnFlagUntilTimeout>
 801212a:	4603      	mov	r3, r0
 801212c:	2b00      	cmp	r3, #0
 801212e:	d001      	beq.n	8012134 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8012130:	2301      	movs	r3, #1
 8012132:	e04d      	b.n	80121d0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012138:	b29b      	uxth	r3, r3
 801213a:	2bff      	cmp	r3, #255	@ 0xff
 801213c:	d90e      	bls.n	801215c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	22ff      	movs	r2, #255	@ 0xff
 8012142:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012148:	b2da      	uxtb	r2, r3
 801214a:	8979      	ldrh	r1, [r7, #10]
 801214c:	2300      	movs	r3, #0
 801214e:	9300      	str	r3, [sp, #0]
 8012150:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8012154:	68f8      	ldr	r0, [r7, #12]
 8012156:	f000 fad3 	bl	8012700 <I2C_TransferConfig>
 801215a:	e00f      	b.n	801217c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012160:	b29a      	uxth	r2, r3
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801216a:	b2da      	uxtb	r2, r3
 801216c:	8979      	ldrh	r1, [r7, #10]
 801216e:	2300      	movs	r3, #0
 8012170:	9300      	str	r3, [sp, #0]
 8012172:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8012176:	68f8      	ldr	r0, [r7, #12]
 8012178:	f000 fac2 	bl	8012700 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012180:	b29b      	uxth	r3, r3
 8012182:	2b00      	cmp	r3, #0
 8012184:	d19a      	bne.n	80120bc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012186:	697a      	ldr	r2, [r7, #20]
 8012188:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801218a:	68f8      	ldr	r0, [r7, #12]
 801218c:	f000 f994 	bl	80124b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8012190:	4603      	mov	r3, r0
 8012192:	2b00      	cmp	r3, #0
 8012194:	d001      	beq.n	801219a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8012196:	2301      	movs	r3, #1
 8012198:	e01a      	b.n	80121d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	2220      	movs	r2, #32
 80121a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	6859      	ldr	r1, [r3, #4]
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	681a      	ldr	r2, [r3, #0]
 80121ac:	4b0b      	ldr	r3, [pc, #44]	@ (80121dc <HAL_I2C_Mem_Read+0x230>)
 80121ae:	400b      	ands	r3, r1
 80121b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	2220      	movs	r2, #32
 80121b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	2200      	movs	r2, #0
 80121be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	2200      	movs	r2, #0
 80121c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80121ca:	2300      	movs	r3, #0
 80121cc:	e000      	b.n	80121d0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80121ce:	2302      	movs	r3, #2
  }
}
 80121d0:	4618      	mov	r0, r3
 80121d2:	3718      	adds	r7, #24
 80121d4:	46bd      	mov	sp, r7
 80121d6:	bd80      	pop	{r7, pc}
 80121d8:	80002400 	.word	0x80002400
 80121dc:	fe00e800 	.word	0xfe00e800

080121e0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b086      	sub	sp, #24
 80121e4:	af02      	add	r7, sp, #8
 80121e6:	60f8      	str	r0, [r7, #12]
 80121e8:	4608      	mov	r0, r1
 80121ea:	4611      	mov	r1, r2
 80121ec:	461a      	mov	r2, r3
 80121ee:	4603      	mov	r3, r0
 80121f0:	817b      	strh	r3, [r7, #10]
 80121f2:	460b      	mov	r3, r1
 80121f4:	813b      	strh	r3, [r7, #8]
 80121f6:	4613      	mov	r3, r2
 80121f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80121fa:	88fb      	ldrh	r3, [r7, #6]
 80121fc:	b2da      	uxtb	r2, r3
 80121fe:	8979      	ldrh	r1, [r7, #10]
 8012200:	4b20      	ldr	r3, [pc, #128]	@ (8012284 <I2C_RequestMemoryWrite+0xa4>)
 8012202:	9300      	str	r3, [sp, #0]
 8012204:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8012208:	68f8      	ldr	r0, [r7, #12]
 801220a:	f000 fa79 	bl	8012700 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801220e:	69fa      	ldr	r2, [r7, #28]
 8012210:	69b9      	ldr	r1, [r7, #24]
 8012212:	68f8      	ldr	r0, [r7, #12]
 8012214:	f000 f909 	bl	801242a <I2C_WaitOnTXISFlagUntilTimeout>
 8012218:	4603      	mov	r3, r0
 801221a:	2b00      	cmp	r3, #0
 801221c:	d001      	beq.n	8012222 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 801221e:	2301      	movs	r3, #1
 8012220:	e02c      	b.n	801227c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8012222:	88fb      	ldrh	r3, [r7, #6]
 8012224:	2b01      	cmp	r3, #1
 8012226:	d105      	bne.n	8012234 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8012228:	893b      	ldrh	r3, [r7, #8]
 801222a:	b2da      	uxtb	r2, r3
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	629a      	str	r2, [r3, #40]	@ 0x28
 8012232:	e015      	b.n	8012260 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8012234:	893b      	ldrh	r3, [r7, #8]
 8012236:	0a1b      	lsrs	r3, r3, #8
 8012238:	b29b      	uxth	r3, r3
 801223a:	b2da      	uxtb	r2, r3
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8012242:	69fa      	ldr	r2, [r7, #28]
 8012244:	69b9      	ldr	r1, [r7, #24]
 8012246:	68f8      	ldr	r0, [r7, #12]
 8012248:	f000 f8ef 	bl	801242a <I2C_WaitOnTXISFlagUntilTimeout>
 801224c:	4603      	mov	r3, r0
 801224e:	2b00      	cmp	r3, #0
 8012250:	d001      	beq.n	8012256 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8012252:	2301      	movs	r3, #1
 8012254:	e012      	b.n	801227c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8012256:	893b      	ldrh	r3, [r7, #8]
 8012258:	b2da      	uxtb	r2, r3
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8012260:	69fb      	ldr	r3, [r7, #28]
 8012262:	9300      	str	r3, [sp, #0]
 8012264:	69bb      	ldr	r3, [r7, #24]
 8012266:	2200      	movs	r2, #0
 8012268:	2180      	movs	r1, #128	@ 0x80
 801226a:	68f8      	ldr	r0, [r7, #12]
 801226c:	f000 f884 	bl	8012378 <I2C_WaitOnFlagUntilTimeout>
 8012270:	4603      	mov	r3, r0
 8012272:	2b00      	cmp	r3, #0
 8012274:	d001      	beq.n	801227a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8012276:	2301      	movs	r3, #1
 8012278:	e000      	b.n	801227c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 801227a:	2300      	movs	r3, #0
}
 801227c:	4618      	mov	r0, r3
 801227e:	3710      	adds	r7, #16
 8012280:	46bd      	mov	sp, r7
 8012282:	bd80      	pop	{r7, pc}
 8012284:	80002000 	.word	0x80002000

08012288 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8012288:	b580      	push	{r7, lr}
 801228a:	b086      	sub	sp, #24
 801228c:	af02      	add	r7, sp, #8
 801228e:	60f8      	str	r0, [r7, #12]
 8012290:	4608      	mov	r0, r1
 8012292:	4611      	mov	r1, r2
 8012294:	461a      	mov	r2, r3
 8012296:	4603      	mov	r3, r0
 8012298:	817b      	strh	r3, [r7, #10]
 801229a:	460b      	mov	r3, r1
 801229c:	813b      	strh	r3, [r7, #8]
 801229e:	4613      	mov	r3, r2
 80122a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80122a2:	88fb      	ldrh	r3, [r7, #6]
 80122a4:	b2da      	uxtb	r2, r3
 80122a6:	8979      	ldrh	r1, [r7, #10]
 80122a8:	4b20      	ldr	r3, [pc, #128]	@ (801232c <I2C_RequestMemoryRead+0xa4>)
 80122aa:	9300      	str	r3, [sp, #0]
 80122ac:	2300      	movs	r3, #0
 80122ae:	68f8      	ldr	r0, [r7, #12]
 80122b0:	f000 fa26 	bl	8012700 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80122b4:	69fa      	ldr	r2, [r7, #28]
 80122b6:	69b9      	ldr	r1, [r7, #24]
 80122b8:	68f8      	ldr	r0, [r7, #12]
 80122ba:	f000 f8b6 	bl	801242a <I2C_WaitOnTXISFlagUntilTimeout>
 80122be:	4603      	mov	r3, r0
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d001      	beq.n	80122c8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80122c4:	2301      	movs	r3, #1
 80122c6:	e02c      	b.n	8012322 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80122c8:	88fb      	ldrh	r3, [r7, #6]
 80122ca:	2b01      	cmp	r3, #1
 80122cc:	d105      	bne.n	80122da <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80122ce:	893b      	ldrh	r3, [r7, #8]
 80122d0:	b2da      	uxtb	r2, r3
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80122d8:	e015      	b.n	8012306 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80122da:	893b      	ldrh	r3, [r7, #8]
 80122dc:	0a1b      	lsrs	r3, r3, #8
 80122de:	b29b      	uxth	r3, r3
 80122e0:	b2da      	uxtb	r2, r3
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80122e8:	69fa      	ldr	r2, [r7, #28]
 80122ea:	69b9      	ldr	r1, [r7, #24]
 80122ec:	68f8      	ldr	r0, [r7, #12]
 80122ee:	f000 f89c 	bl	801242a <I2C_WaitOnTXISFlagUntilTimeout>
 80122f2:	4603      	mov	r3, r0
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d001      	beq.n	80122fc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80122f8:	2301      	movs	r3, #1
 80122fa:	e012      	b.n	8012322 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80122fc:	893b      	ldrh	r3, [r7, #8]
 80122fe:	b2da      	uxtb	r2, r3
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8012306:	69fb      	ldr	r3, [r7, #28]
 8012308:	9300      	str	r3, [sp, #0]
 801230a:	69bb      	ldr	r3, [r7, #24]
 801230c:	2200      	movs	r2, #0
 801230e:	2140      	movs	r1, #64	@ 0x40
 8012310:	68f8      	ldr	r0, [r7, #12]
 8012312:	f000 f831 	bl	8012378 <I2C_WaitOnFlagUntilTimeout>
 8012316:	4603      	mov	r3, r0
 8012318:	2b00      	cmp	r3, #0
 801231a:	d001      	beq.n	8012320 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 801231c:	2301      	movs	r3, #1
 801231e:	e000      	b.n	8012322 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8012320:	2300      	movs	r3, #0
}
 8012322:	4618      	mov	r0, r3
 8012324:	3710      	adds	r7, #16
 8012326:	46bd      	mov	sp, r7
 8012328:	bd80      	pop	{r7, pc}
 801232a:	bf00      	nop
 801232c:	80002000 	.word	0x80002000

08012330 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8012330:	b480      	push	{r7}
 8012332:	b083      	sub	sp, #12
 8012334:	af00      	add	r7, sp, #0
 8012336:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	699b      	ldr	r3, [r3, #24]
 801233e:	f003 0302 	and.w	r3, r3, #2
 8012342:	2b02      	cmp	r3, #2
 8012344:	d103      	bne.n	801234e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	2200      	movs	r2, #0
 801234c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	699b      	ldr	r3, [r3, #24]
 8012354:	f003 0301 	and.w	r3, r3, #1
 8012358:	2b01      	cmp	r3, #1
 801235a:	d007      	beq.n	801236c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	699a      	ldr	r2, [r3, #24]
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	f042 0201 	orr.w	r2, r2, #1
 801236a:	619a      	str	r2, [r3, #24]
  }
}
 801236c:	bf00      	nop
 801236e:	370c      	adds	r7, #12
 8012370:	46bd      	mov	sp, r7
 8012372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012376:	4770      	bx	lr

08012378 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8012378:	b580      	push	{r7, lr}
 801237a:	b084      	sub	sp, #16
 801237c:	af00      	add	r7, sp, #0
 801237e:	60f8      	str	r0, [r7, #12]
 8012380:	60b9      	str	r1, [r7, #8]
 8012382:	603b      	str	r3, [r7, #0]
 8012384:	4613      	mov	r3, r2
 8012386:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8012388:	e03b      	b.n	8012402 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801238a:	69ba      	ldr	r2, [r7, #24]
 801238c:	6839      	ldr	r1, [r7, #0]
 801238e:	68f8      	ldr	r0, [r7, #12]
 8012390:	f000 f8d6 	bl	8012540 <I2C_IsErrorOccurred>
 8012394:	4603      	mov	r3, r0
 8012396:	2b00      	cmp	r3, #0
 8012398:	d001      	beq.n	801239e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 801239a:	2301      	movs	r3, #1
 801239c:	e041      	b.n	8012422 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801239e:	683b      	ldr	r3, [r7, #0]
 80123a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123a4:	d02d      	beq.n	8012402 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80123a6:	f7fd f9a3 	bl	800f6f0 <HAL_GetTick>
 80123aa:	4602      	mov	r2, r0
 80123ac:	69bb      	ldr	r3, [r7, #24]
 80123ae:	1ad3      	subs	r3, r2, r3
 80123b0:	683a      	ldr	r2, [r7, #0]
 80123b2:	429a      	cmp	r2, r3
 80123b4:	d302      	bcc.n	80123bc <I2C_WaitOnFlagUntilTimeout+0x44>
 80123b6:	683b      	ldr	r3, [r7, #0]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d122      	bne.n	8012402 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	699a      	ldr	r2, [r3, #24]
 80123c2:	68bb      	ldr	r3, [r7, #8]
 80123c4:	4013      	ands	r3, r2
 80123c6:	68ba      	ldr	r2, [r7, #8]
 80123c8:	429a      	cmp	r2, r3
 80123ca:	bf0c      	ite	eq
 80123cc:	2301      	moveq	r3, #1
 80123ce:	2300      	movne	r3, #0
 80123d0:	b2db      	uxtb	r3, r3
 80123d2:	461a      	mov	r2, r3
 80123d4:	79fb      	ldrb	r3, [r7, #7]
 80123d6:	429a      	cmp	r2, r3
 80123d8:	d113      	bne.n	8012402 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80123de:	f043 0220 	orr.w	r2, r3, #32
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	2220      	movs	r2, #32
 80123ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	2200      	movs	r2, #0
 80123f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	2200      	movs	r2, #0
 80123fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80123fe:	2301      	movs	r3, #1
 8012400:	e00f      	b.n	8012422 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	699a      	ldr	r2, [r3, #24]
 8012408:	68bb      	ldr	r3, [r7, #8]
 801240a:	4013      	ands	r3, r2
 801240c:	68ba      	ldr	r2, [r7, #8]
 801240e:	429a      	cmp	r2, r3
 8012410:	bf0c      	ite	eq
 8012412:	2301      	moveq	r3, #1
 8012414:	2300      	movne	r3, #0
 8012416:	b2db      	uxtb	r3, r3
 8012418:	461a      	mov	r2, r3
 801241a:	79fb      	ldrb	r3, [r7, #7]
 801241c:	429a      	cmp	r2, r3
 801241e:	d0b4      	beq.n	801238a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012420:	2300      	movs	r3, #0
}
 8012422:	4618      	mov	r0, r3
 8012424:	3710      	adds	r7, #16
 8012426:	46bd      	mov	sp, r7
 8012428:	bd80      	pop	{r7, pc}

0801242a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801242a:	b580      	push	{r7, lr}
 801242c:	b084      	sub	sp, #16
 801242e:	af00      	add	r7, sp, #0
 8012430:	60f8      	str	r0, [r7, #12]
 8012432:	60b9      	str	r1, [r7, #8]
 8012434:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8012436:	e033      	b.n	80124a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8012438:	687a      	ldr	r2, [r7, #4]
 801243a:	68b9      	ldr	r1, [r7, #8]
 801243c:	68f8      	ldr	r0, [r7, #12]
 801243e:	f000 f87f 	bl	8012540 <I2C_IsErrorOccurred>
 8012442:	4603      	mov	r3, r0
 8012444:	2b00      	cmp	r3, #0
 8012446:	d001      	beq.n	801244c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8012448:	2301      	movs	r3, #1
 801244a:	e031      	b.n	80124b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801244c:	68bb      	ldr	r3, [r7, #8]
 801244e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012452:	d025      	beq.n	80124a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012454:	f7fd f94c 	bl	800f6f0 <HAL_GetTick>
 8012458:	4602      	mov	r2, r0
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	1ad3      	subs	r3, r2, r3
 801245e:	68ba      	ldr	r2, [r7, #8]
 8012460:	429a      	cmp	r2, r3
 8012462:	d302      	bcc.n	801246a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8012464:	68bb      	ldr	r3, [r7, #8]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d11a      	bne.n	80124a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	699b      	ldr	r3, [r3, #24]
 8012470:	f003 0302 	and.w	r3, r3, #2
 8012474:	2b02      	cmp	r3, #2
 8012476:	d013      	beq.n	80124a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801247c:	f043 0220 	orr.w	r2, r3, #32
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	2220      	movs	r2, #32
 8012488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	2200      	movs	r2, #0
 8012490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	2200      	movs	r2, #0
 8012498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 801249c:	2301      	movs	r3, #1
 801249e:	e007      	b.n	80124b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	699b      	ldr	r3, [r3, #24]
 80124a6:	f003 0302 	and.w	r3, r3, #2
 80124aa:	2b02      	cmp	r3, #2
 80124ac:	d1c4      	bne.n	8012438 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80124ae:	2300      	movs	r3, #0
}
 80124b0:	4618      	mov	r0, r3
 80124b2:	3710      	adds	r7, #16
 80124b4:	46bd      	mov	sp, r7
 80124b6:	bd80      	pop	{r7, pc}

080124b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80124b8:	b580      	push	{r7, lr}
 80124ba:	b084      	sub	sp, #16
 80124bc:	af00      	add	r7, sp, #0
 80124be:	60f8      	str	r0, [r7, #12]
 80124c0:	60b9      	str	r1, [r7, #8]
 80124c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80124c4:	e02f      	b.n	8012526 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80124c6:	687a      	ldr	r2, [r7, #4]
 80124c8:	68b9      	ldr	r1, [r7, #8]
 80124ca:	68f8      	ldr	r0, [r7, #12]
 80124cc:	f000 f838 	bl	8012540 <I2C_IsErrorOccurred>
 80124d0:	4603      	mov	r3, r0
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d001      	beq.n	80124da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80124d6:	2301      	movs	r3, #1
 80124d8:	e02d      	b.n	8012536 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80124da:	f7fd f909 	bl	800f6f0 <HAL_GetTick>
 80124de:	4602      	mov	r2, r0
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	1ad3      	subs	r3, r2, r3
 80124e4:	68ba      	ldr	r2, [r7, #8]
 80124e6:	429a      	cmp	r2, r3
 80124e8:	d302      	bcc.n	80124f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80124ea:	68bb      	ldr	r3, [r7, #8]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d11a      	bne.n	8012526 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	699b      	ldr	r3, [r3, #24]
 80124f6:	f003 0320 	and.w	r3, r3, #32
 80124fa:	2b20      	cmp	r3, #32
 80124fc:	d013      	beq.n	8012526 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012502:	f043 0220 	orr.w	r2, r3, #32
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	2220      	movs	r2, #32
 801250e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	2200      	movs	r2, #0
 8012516:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	2200      	movs	r2, #0
 801251e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8012522:	2301      	movs	r3, #1
 8012524:	e007      	b.n	8012536 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	699b      	ldr	r3, [r3, #24]
 801252c:	f003 0320 	and.w	r3, r3, #32
 8012530:	2b20      	cmp	r3, #32
 8012532:	d1c8      	bne.n	80124c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8012534:	2300      	movs	r3, #0
}
 8012536:	4618      	mov	r0, r3
 8012538:	3710      	adds	r7, #16
 801253a:	46bd      	mov	sp, r7
 801253c:	bd80      	pop	{r7, pc}
	...

08012540 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8012540:	b580      	push	{r7, lr}
 8012542:	b08a      	sub	sp, #40	@ 0x28
 8012544:	af00      	add	r7, sp, #0
 8012546:	60f8      	str	r0, [r7, #12]
 8012548:	60b9      	str	r1, [r7, #8]
 801254a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801254c:	2300      	movs	r3, #0
 801254e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	699b      	ldr	r3, [r3, #24]
 8012558:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 801255a:	2300      	movs	r3, #0
 801255c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8012562:	69bb      	ldr	r3, [r7, #24]
 8012564:	f003 0310 	and.w	r3, r3, #16
 8012568:	2b00      	cmp	r3, #0
 801256a:	d068      	beq.n	801263e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	2210      	movs	r2, #16
 8012572:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8012574:	e049      	b.n	801260a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8012576:	68bb      	ldr	r3, [r7, #8]
 8012578:	f1b3 3fff 	cmp.w	r3, #4294967295
 801257c:	d045      	beq.n	801260a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801257e:	f7fd f8b7 	bl	800f6f0 <HAL_GetTick>
 8012582:	4602      	mov	r2, r0
 8012584:	69fb      	ldr	r3, [r7, #28]
 8012586:	1ad3      	subs	r3, r2, r3
 8012588:	68ba      	ldr	r2, [r7, #8]
 801258a:	429a      	cmp	r2, r3
 801258c:	d302      	bcc.n	8012594 <I2C_IsErrorOccurred+0x54>
 801258e:	68bb      	ldr	r3, [r7, #8]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d13a      	bne.n	801260a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	685b      	ldr	r3, [r3, #4]
 801259a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801259e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80125a6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	699b      	ldr	r3, [r3, #24]
 80125ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80125b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80125b6:	d121      	bne.n	80125fc <I2C_IsErrorOccurred+0xbc>
 80125b8:	697b      	ldr	r3, [r7, #20]
 80125ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80125be:	d01d      	beq.n	80125fc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80125c0:	7cfb      	ldrb	r3, [r7, #19]
 80125c2:	2b20      	cmp	r3, #32
 80125c4:	d01a      	beq.n	80125fc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	685a      	ldr	r2, [r3, #4]
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80125d4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80125d6:	f7fd f88b 	bl	800f6f0 <HAL_GetTick>
 80125da:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80125dc:	e00e      	b.n	80125fc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80125de:	f7fd f887 	bl	800f6f0 <HAL_GetTick>
 80125e2:	4602      	mov	r2, r0
 80125e4:	69fb      	ldr	r3, [r7, #28]
 80125e6:	1ad3      	subs	r3, r2, r3
 80125e8:	2b19      	cmp	r3, #25
 80125ea:	d907      	bls.n	80125fc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80125ec:	6a3b      	ldr	r3, [r7, #32]
 80125ee:	f043 0320 	orr.w	r3, r3, #32
 80125f2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80125f4:	2301      	movs	r3, #1
 80125f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80125fa:	e006      	b.n	801260a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	699b      	ldr	r3, [r3, #24]
 8012602:	f003 0320 	and.w	r3, r3, #32
 8012606:	2b20      	cmp	r3, #32
 8012608:	d1e9      	bne.n	80125de <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	699b      	ldr	r3, [r3, #24]
 8012610:	f003 0320 	and.w	r3, r3, #32
 8012614:	2b20      	cmp	r3, #32
 8012616:	d003      	beq.n	8012620 <I2C_IsErrorOccurred+0xe0>
 8012618:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801261c:	2b00      	cmp	r3, #0
 801261e:	d0aa      	beq.n	8012576 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8012620:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012624:	2b00      	cmp	r3, #0
 8012626:	d103      	bne.n	8012630 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	2220      	movs	r2, #32
 801262e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8012630:	6a3b      	ldr	r3, [r7, #32]
 8012632:	f043 0304 	orr.w	r3, r3, #4
 8012636:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8012638:	2301      	movs	r3, #1
 801263a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	699b      	ldr	r3, [r3, #24]
 8012644:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8012646:	69bb      	ldr	r3, [r7, #24]
 8012648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801264c:	2b00      	cmp	r3, #0
 801264e:	d00b      	beq.n	8012668 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8012650:	6a3b      	ldr	r3, [r7, #32]
 8012652:	f043 0301 	orr.w	r3, r3, #1
 8012656:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8012660:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8012662:	2301      	movs	r3, #1
 8012664:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8012668:	69bb      	ldr	r3, [r7, #24]
 801266a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801266e:	2b00      	cmp	r3, #0
 8012670:	d00b      	beq.n	801268a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8012672:	6a3b      	ldr	r3, [r7, #32]
 8012674:	f043 0308 	orr.w	r3, r3, #8
 8012678:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8012682:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8012684:	2301      	movs	r3, #1
 8012686:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 801268a:	69bb      	ldr	r3, [r7, #24]
 801268c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012690:	2b00      	cmp	r3, #0
 8012692:	d00b      	beq.n	80126ac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8012694:	6a3b      	ldr	r3, [r7, #32]
 8012696:	f043 0302 	orr.w	r3, r3, #2
 801269a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80126a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80126a6:	2301      	movs	r3, #1
 80126a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80126ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d01c      	beq.n	80126ee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80126b4:	68f8      	ldr	r0, [r7, #12]
 80126b6:	f7ff fe3b 	bl	8012330 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	6859      	ldr	r1, [r3, #4]
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	681a      	ldr	r2, [r3, #0]
 80126c4:	4b0d      	ldr	r3, [pc, #52]	@ (80126fc <I2C_IsErrorOccurred+0x1bc>)
 80126c6:	400b      	ands	r3, r1
 80126c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80126ce:	6a3b      	ldr	r3, [r7, #32]
 80126d0:	431a      	orrs	r2, r3
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	2220      	movs	r2, #32
 80126da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	2200      	movs	r2, #0
 80126e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	2200      	movs	r2, #0
 80126ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80126ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80126f2:	4618      	mov	r0, r3
 80126f4:	3728      	adds	r7, #40	@ 0x28
 80126f6:	46bd      	mov	sp, r7
 80126f8:	bd80      	pop	{r7, pc}
 80126fa:	bf00      	nop
 80126fc:	fe00e800 	.word	0xfe00e800

08012700 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8012700:	b480      	push	{r7}
 8012702:	b087      	sub	sp, #28
 8012704:	af00      	add	r7, sp, #0
 8012706:	60f8      	str	r0, [r7, #12]
 8012708:	607b      	str	r3, [r7, #4]
 801270a:	460b      	mov	r3, r1
 801270c:	817b      	strh	r3, [r7, #10]
 801270e:	4613      	mov	r3, r2
 8012710:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8012712:	897b      	ldrh	r3, [r7, #10]
 8012714:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8012718:	7a7b      	ldrb	r3, [r7, #9]
 801271a:	041b      	lsls	r3, r3, #16
 801271c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8012720:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8012726:	6a3b      	ldr	r3, [r7, #32]
 8012728:	4313      	orrs	r3, r2
 801272a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801272e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	685a      	ldr	r2, [r3, #4]
 8012736:	6a3b      	ldr	r3, [r7, #32]
 8012738:	0d5b      	lsrs	r3, r3, #21
 801273a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 801273e:	4b08      	ldr	r3, [pc, #32]	@ (8012760 <I2C_TransferConfig+0x60>)
 8012740:	430b      	orrs	r3, r1
 8012742:	43db      	mvns	r3, r3
 8012744:	ea02 0103 	and.w	r1, r2, r3
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	697a      	ldr	r2, [r7, #20]
 801274e:	430a      	orrs	r2, r1
 8012750:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8012752:	bf00      	nop
 8012754:	371c      	adds	r7, #28
 8012756:	46bd      	mov	sp, r7
 8012758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801275c:	4770      	bx	lr
 801275e:	bf00      	nop
 8012760:	03ff63ff 	.word	0x03ff63ff

08012764 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8012764:	b480      	push	{r7}
 8012766:	b083      	sub	sp, #12
 8012768:	af00      	add	r7, sp, #0
 801276a:	6078      	str	r0, [r7, #4]
 801276c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012774:	b2db      	uxtb	r3, r3
 8012776:	2b20      	cmp	r3, #32
 8012778:	d138      	bne.n	80127ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012780:	2b01      	cmp	r3, #1
 8012782:	d101      	bne.n	8012788 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8012784:	2302      	movs	r3, #2
 8012786:	e032      	b.n	80127ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	2201      	movs	r2, #1
 801278c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	2224      	movs	r2, #36	@ 0x24
 8012794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	681a      	ldr	r2, [r3, #0]
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	f022 0201 	bic.w	r2, r2, #1
 80127a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	681a      	ldr	r2, [r3, #0]
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80127b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	6819      	ldr	r1, [r3, #0]
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	683a      	ldr	r2, [r7, #0]
 80127c4:	430a      	orrs	r2, r1
 80127c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	681a      	ldr	r2, [r3, #0]
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	f042 0201 	orr.w	r2, r2, #1
 80127d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	2220      	movs	r2, #32
 80127dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	2200      	movs	r2, #0
 80127e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80127e8:	2300      	movs	r3, #0
 80127ea:	e000      	b.n	80127ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80127ec:	2302      	movs	r3, #2
  }
}
 80127ee:	4618      	mov	r0, r3
 80127f0:	370c      	adds	r7, #12
 80127f2:	46bd      	mov	sp, r7
 80127f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f8:	4770      	bx	lr

080127fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80127fa:	b480      	push	{r7}
 80127fc:	b085      	sub	sp, #20
 80127fe:	af00      	add	r7, sp, #0
 8012800:	6078      	str	r0, [r7, #4]
 8012802:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801280a:	b2db      	uxtb	r3, r3
 801280c:	2b20      	cmp	r3, #32
 801280e:	d139      	bne.n	8012884 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012816:	2b01      	cmp	r3, #1
 8012818:	d101      	bne.n	801281e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801281a:	2302      	movs	r3, #2
 801281c:	e033      	b.n	8012886 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	2201      	movs	r2, #1
 8012822:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	2224      	movs	r2, #36	@ 0x24
 801282a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	681a      	ldr	r2, [r3, #0]
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	f022 0201 	bic.w	r2, r2, #1
 801283c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 801284c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801284e:	683b      	ldr	r3, [r7, #0]
 8012850:	021b      	lsls	r3, r3, #8
 8012852:	68fa      	ldr	r2, [r7, #12]
 8012854:	4313      	orrs	r3, r2
 8012856:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	68fa      	ldr	r2, [r7, #12]
 801285e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	681a      	ldr	r2, [r3, #0]
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	f042 0201 	orr.w	r2, r2, #1
 801286e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	2220      	movs	r2, #32
 8012874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	2200      	movs	r2, #0
 801287c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8012880:	2300      	movs	r3, #0
 8012882:	e000      	b.n	8012886 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8012884:	2302      	movs	r3, #2
  }
}
 8012886:	4618      	mov	r0, r3
 8012888:	3714      	adds	r7, #20
 801288a:	46bd      	mov	sp, r7
 801288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012890:	4770      	bx	lr
	...

08012894 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b084      	sub	sp, #16
 8012898:	af00      	add	r7, sp, #0
 801289a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 801289c:	2300      	movs	r3, #0
 801289e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d01e      	beq.n	80128e4 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80128a6:	4b13      	ldr	r3, [pc, #76]	@ (80128f4 <HAL_IPCC_Init+0x60>)
 80128a8:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80128b0:	b2db      	uxtb	r3, r3
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d102      	bne.n	80128bc <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80128b6:	6878      	ldr	r0, [r7, #4]
 80128b8:	f7f7 fedc 	bl	800a674 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80128bc:	68b8      	ldr	r0, [r7, #8]
 80128be:	f000 f85b 	bl	8012978 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80128c2:	68bb      	ldr	r3, [r7, #8]
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 80128ca:	68bb      	ldr	r3, [r7, #8]
 80128cc:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80128ce:	6878      	ldr	r0, [r7, #4]
 80128d0:	f000 f82c 	bl	801292c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	2200      	movs	r2, #0
 80128d8:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	2201      	movs	r2, #1
 80128de:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 80128e2:	e001      	b.n	80128e8 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80128e4:	2301      	movs	r3, #1
 80128e6:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80128e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80128ea:	4618      	mov	r0, r3
 80128ec:	3710      	adds	r7, #16
 80128ee:	46bd      	mov	sp, r7
 80128f0:	bd80      	pop	{r7, pc}
 80128f2:	bf00      	nop
 80128f4:	58000c00 	.word	0x58000c00

080128f8 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80128f8:	b480      	push	{r7}
 80128fa:	b085      	sub	sp, #20
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	60f8      	str	r0, [r7, #12]
 8012900:	60b9      	str	r1, [r7, #8]
 8012902:	4613      	mov	r3, r2
 8012904:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8012906:	bf00      	nop
 8012908:	3714      	adds	r7, #20
 801290a:	46bd      	mov	sp, r7
 801290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012910:	4770      	bx	lr

08012912 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8012912:	b480      	push	{r7}
 8012914:	b085      	sub	sp, #20
 8012916:	af00      	add	r7, sp, #0
 8012918:	60f8      	str	r0, [r7, #12]
 801291a:	60b9      	str	r1, [r7, #8]
 801291c:	4613      	mov	r3, r2
 801291e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8012920:	bf00      	nop
 8012922:	3714      	adds	r7, #20
 8012924:	46bd      	mov	sp, r7
 8012926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801292a:	4770      	bx	lr

0801292c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 801292c:	b480      	push	{r7}
 801292e:	b085      	sub	sp, #20
 8012930:	af00      	add	r7, sp, #0
 8012932:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8012934:	2300      	movs	r3, #0
 8012936:	60fb      	str	r3, [r7, #12]
 8012938:	e00f      	b.n	801295a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 801293a:	687a      	ldr	r2, [r7, #4]
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	009b      	lsls	r3, r3, #2
 8012940:	4413      	add	r3, r2
 8012942:	4a0b      	ldr	r2, [pc, #44]	@ (8012970 <IPCC_SetDefaultCallbacks+0x44>)
 8012944:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8012946:	687a      	ldr	r2, [r7, #4]
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	3306      	adds	r3, #6
 801294c:	009b      	lsls	r3, r3, #2
 801294e:	4413      	add	r3, r2
 8012950:	4a08      	ldr	r2, [pc, #32]	@ (8012974 <IPCC_SetDefaultCallbacks+0x48>)
 8012952:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	3301      	adds	r3, #1
 8012958:	60fb      	str	r3, [r7, #12]
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	2b05      	cmp	r3, #5
 801295e:	d9ec      	bls.n	801293a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8012960:	bf00      	nop
 8012962:	bf00      	nop
 8012964:	3714      	adds	r7, #20
 8012966:	46bd      	mov	sp, r7
 8012968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801296c:	4770      	bx	lr
 801296e:	bf00      	nop
 8012970:	080128f9 	.word	0x080128f9
 8012974:	08012913 	.word	0x08012913

08012978 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8012978:	b480      	push	{r7}
 801297a:	b083      	sub	sp, #12
 801297c:	af00      	add	r7, sp, #0
 801297e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	2200      	movs	r2, #0
 8012984:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 801298c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	223f      	movs	r2, #63	@ 0x3f
 8012992:	609a      	str	r2, [r3, #8]
}
 8012994:	bf00      	nop
 8012996:	370c      	adds	r7, #12
 8012998:	46bd      	mov	sp, r7
 801299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801299e:	4770      	bx	lr

080129a0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80129a0:	b480      	push	{r7}
 80129a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80129a4:	4b05      	ldr	r3, [pc, #20]	@ (80129bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	4a04      	ldr	r2, [pc, #16]	@ (80129bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80129aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80129ae:	6013      	str	r3, [r2, #0]
}
 80129b0:	bf00      	nop
 80129b2:	46bd      	mov	sp, r7
 80129b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b8:	4770      	bx	lr
 80129ba:	bf00      	nop
 80129bc:	58000400 	.word	0x58000400

080129c0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80129c0:	b480      	push	{r7}
 80129c2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80129c4:	4b04      	ldr	r3, [pc, #16]	@ (80129d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80129cc:	4618      	mov	r0, r3
 80129ce:	46bd      	mov	sp, r7
 80129d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d4:	4770      	bx	lr
 80129d6:	bf00      	nop
 80129d8:	58000400 	.word	0x58000400

080129dc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80129dc:	b580      	push	{r7, lr}
 80129de:	b086      	sub	sp, #24
 80129e0:	af02      	add	r7, sp, #8
 80129e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80129e4:	f7fc fe84 	bl	800f6f0 <HAL_GetTick>
 80129e8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d101      	bne.n	80129f4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80129f0:	2301      	movs	r3, #1
 80129f2:	e063      	b.n	8012abc <HAL_QSPI_Init+0xe0>
  assert_param(IS_QSPI_SSHIFT(hqspi->Init.SampleShifting));
  assert_param(IS_QSPI_FLASH_SIZE(hqspi->Init.FlashSize));
  assert_param(IS_QSPI_CS_HIGH_TIME(hqspi->Init.ChipSelectHighTime));
  assert_param(IS_QSPI_CLOCK_MODE(hqspi->Init.ClockMode));

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80129fa:	b2db      	uxtb	r3, r3
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d10b      	bne.n	8012a18 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	2200      	movs	r2, #0
 8012a04:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8012a08:	6878      	ldr	r0, [r7, #4]
 8012a0a:	f7f9 f8ab 	bl	800bb64 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8012a0e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8012a12:	6878      	ldr	r0, [r7, #4]
 8012a14:	f000 fc8a 	bl	801332c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	689b      	ldr	r3, [r3, #8]
 8012a26:	3b01      	subs	r3, #1
 8012a28:	021a      	lsls	r2, r3, #8
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	430a      	orrs	r2, r1
 8012a30:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012a36:	9300      	str	r3, [sp, #0]
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	2200      	movs	r2, #0
 8012a3c:	2120      	movs	r1, #32
 8012a3e:	6878      	ldr	r0, [r7, #4]
 8012a40:	f000 fcb5 	bl	80133ae <QSPI_WaitFlagStateUntilTimeout>
 8012a44:	4603      	mov	r3, r0
 8012a46:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8012a48:	7afb      	ldrb	r3, [r7, #11]
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d131      	bne.n	8012ab2 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012a58:	f023 0310 	bic.w	r3, r3, #16
 8012a5c:	687a      	ldr	r2, [r7, #4]
 8012a5e:	6852      	ldr	r2, [r2, #4]
 8012a60:	0611      	lsls	r1, r2, #24
 8012a62:	687a      	ldr	r2, [r7, #4]
 8012a64:	68d2      	ldr	r2, [r2, #12]
 8012a66:	4311      	orrs	r1, r2
 8012a68:	687a      	ldr	r2, [r7, #4]
 8012a6a:	6812      	ldr	r2, [r2, #0]
 8012a6c:	430b      	orrs	r3, r1
 8012a6e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	685a      	ldr	r2, [r3, #4]
 8012a76:	4b13      	ldr	r3, [pc, #76]	@ (8012ac4 <HAL_QSPI_Init+0xe8>)
 8012a78:	4013      	ands	r3, r2
 8012a7a:	687a      	ldr	r2, [r7, #4]
 8012a7c:	6912      	ldr	r2, [r2, #16]
 8012a7e:	0411      	lsls	r1, r2, #16
 8012a80:	687a      	ldr	r2, [r7, #4]
 8012a82:	6952      	ldr	r2, [r2, #20]
 8012a84:	4311      	orrs	r1, r2
 8012a86:	687a      	ldr	r2, [r7, #4]
 8012a88:	6992      	ldr	r2, [r2, #24]
 8012a8a:	4311      	orrs	r1, r2
 8012a8c:	687a      	ldr	r2, [r7, #4]
 8012a8e:	6812      	ldr	r2, [r2, #0]
 8012a90:	430b      	orrs	r3, r1
 8012a92:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	681a      	ldr	r2, [r3, #0]
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	f042 0201 	orr.w	r2, r2, #1
 8012aa2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	2200      	movs	r2, #0
 8012aa8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	2201      	movs	r2, #1
 8012aae:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	2200      	movs	r2, #0
 8012ab6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8012aba:	7afb      	ldrb	r3, [r7, #11]
}
 8012abc:	4618      	mov	r0, r3
 8012abe:	3710      	adds	r7, #16
 8012ac0:	46bd      	mov	sp, r7
 8012ac2:	bd80      	pop	{r7, pc}
 8012ac4:	ffe0f8fe 	.word	0xffe0f8fe

08012ac8 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	b082      	sub	sp, #8
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d101      	bne.n	8012ada <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8012ad6:	2301      	movs	r3, #1
 8012ad8:	e016      	b.n	8012b08 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	681a      	ldr	r2, [r3, #0]
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	f022 0201 	bic.w	r2, r2, #1
 8012ae8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8012aea:	6878      	ldr	r0, [r7, #4]
 8012aec:	f7f9 f89c 	bl	800bc28 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	2200      	movs	r2, #0
 8012af4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	2200      	movs	r2, #0
 8012afa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	2200      	movs	r2, #0
 8012b02:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8012b06:	2300      	movs	r3, #0
}
 8012b08:	4618      	mov	r0, r3
 8012b0a:	3708      	adds	r7, #8
 8012b0c:	46bd      	mov	sp, r7
 8012b0e:	bd80      	pop	{r7, pc}

08012b10 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b086      	sub	sp, #24
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	689b      	ldr	r3, [r3, #8]
 8012b1e:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 8012b28:	697b      	ldr	r3, [r7, #20]
 8012b2a:	f003 0304 	and.w	r3, r3, #4
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d064      	beq.n	8012bfc <HAL_QSPI_IRQHandler+0xec>
 8012b32:	693b      	ldr	r3, [r7, #16]
 8012b34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d05f      	beq.n	8012bfc <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	3320      	adds	r3, #32
 8012b42:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8012b4a:	b2db      	uxtb	r3, r3
 8012b4c:	2b12      	cmp	r3, #18
 8012b4e:	d125      	bne.n	8012b9c <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8012b50:	e01c      	b.n	8012b8c <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d00f      	beq.n	8012b7a <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	69db      	ldr	r3, [r3, #28]
 8012b5e:	781a      	ldrb	r2, [r3, #0]
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	69db      	ldr	r3, [r3, #28]
 8012b68:	1c5a      	adds	r2, r3, #1
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	61da      	str	r2, [r3, #28]
          hqspi->TxXferCount--;
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b72:	1e5a      	subs	r2, r3, #1
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	625a      	str	r2, [r3, #36]	@ 0x24
 8012b78:	e008      	b.n	8012b8c <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	681a      	ldr	r2, [r3, #0]
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8012b88:	601a      	str	r2, [r3, #0]
          break;
 8012b8a:	e033      	b.n	8012bf4 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	689b      	ldr	r3, [r3, #8]
 8012b92:	f003 0304 	and.w	r3, r3, #4
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d1db      	bne.n	8012b52 <HAL_QSPI_IRQHandler+0x42>
 8012b9a:	e02b      	b.n	8012bf4 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8012ba2:	b2db      	uxtb	r3, r3
 8012ba4:	2b22      	cmp	r3, #34	@ 0x22
 8012ba6:	d125      	bne.n	8012bf4 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8012ba8:	e01d      	b.n	8012be6 <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d010      	beq.n	8012bd4 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012bb6:	68fa      	ldr	r2, [r7, #12]
 8012bb8:	7812      	ldrb	r2, [r2, #0]
 8012bba:	b2d2      	uxtb	r2, r2
 8012bbc:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012bc2:	1c5a      	adds	r2, r3, #1
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	629a      	str	r2, [r3, #40]	@ 0x28
          hqspi->RxXferCount--;
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012bcc:	1e5a      	subs	r2, r3, #1
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	631a      	str	r2, [r3, #48]	@ 0x30
 8012bd2:	e008      	b.n	8012be6 <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	681a      	ldr	r2, [r3, #0]
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8012be2:	601a      	str	r2, [r3, #0]
          break;
 8012be4:	e006      	b.n	8012bf4 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	689b      	ldr	r3, [r3, #8]
 8012bec:	f003 0304 	and.w	r3, r3, #4
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d1da      	bne.n	8012baa <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 8012bf4:	6878      	ldr	r0, [r7, #4]
 8012bf6:	f000 fb7b 	bl	80132f0 <HAL_QSPI_FifoThresholdCallback>
 8012bfa:	e13c      	b.n	8012e76 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 8012bfc:	697b      	ldr	r3, [r7, #20]
 8012bfe:	f003 0302 	and.w	r3, r3, #2
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	f000 80b0 	beq.w	8012d68 <HAL_QSPI_IRQHandler+0x258>
 8012c08:	693b      	ldr	r3, [r7, #16]
 8012c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	f000 80aa 	beq.w	8012d68 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	2202      	movs	r2, #2
 8012c1a:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	681a      	ldr	r2, [r3, #0]
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 8012c2a:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8012c32:	b2db      	uxtb	r3, r3
 8012c34:	2b12      	cmp	r3, #18
 8012c36:	d120      	bne.n	8012c7a <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	f003 0304 	and.w	r3, r3, #4
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d011      	beq.n	8012c6a <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	681a      	ldr	r2, [r3, #0]
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	f022 0204 	bic.w	r2, r2, #4
 8012c54:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	681a      	ldr	r2, [r3, #0]
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	f022 0201 	bic.w	r2, r2, #1
 8012c68:	601a      	str	r2, [r3, #0]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	2201      	movs	r2, #1
 8012c6e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 8012c72:	6878      	ldr	r0, [r7, #4]
 8012c74:	f000 fb32 	bl	80132dc <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8012c78:	e0fa      	b.n	8012e70 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8012c80:	b2db      	uxtb	r3, r3
 8012c82:	2b22      	cmp	r3, #34	@ 0x22
 8012c84:	d143      	bne.n	8012d0e <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	f003 0304 	and.w	r3, r3, #4
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d012      	beq.n	8012cba <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	681a      	ldr	r2, [r3, #0]
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	f022 0204 	bic.w	r2, r2, #4
 8012ca2:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	681a      	ldr	r2, [r3, #0]
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	f022 0201 	bic.w	r2, r2, #1
 8012cb6:	601a      	str	r2, [r3, #0]
 8012cb8:	e021      	b.n	8012cfe <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	3320      	adds	r3, #32
 8012cc0:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8012cc2:	e013      	b.n	8012cec <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d017      	beq.n	8012cfc <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012cd0:	68fa      	ldr	r2, [r7, #12]
 8012cd2:	7812      	ldrb	r2, [r2, #0]
 8012cd4:	b2d2      	uxtb	r2, r2
 8012cd6:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012cdc:	1c5a      	adds	r2, r3, #1
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	629a      	str	r2, [r3, #40]	@ 0x28
            hqspi->RxXferCount--;
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012ce6:	1e5a      	subs	r2, r3, #1
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	631a      	str	r2, [r3, #48]	@ 0x30
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	689b      	ldr	r3, [r3, #8]
 8012cf2:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d1e4      	bne.n	8012cc4 <HAL_QSPI_IRQHandler+0x1b4>
 8012cfa:	e000      	b.n	8012cfe <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 8012cfc:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	2201      	movs	r2, #1
 8012d02:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 8012d06:	6878      	ldr	r0, [r7, #4]
 8012d08:	f000 fade 	bl	80132c8 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8012d0c:	e0b0      	b.n	8012e70 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8012d14:	b2db      	uxtb	r3, r3
 8012d16:	2b02      	cmp	r3, #2
 8012d18:	d107      	bne.n	8012d2a <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	2201      	movs	r2, #1
 8012d1e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 8012d22:	6878      	ldr	r0, [r7, #4]
 8012d24:	f000 fac6 	bl	80132b4 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8012d28:	e0a2      	b.n	8012e70 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8012d30:	b2db      	uxtb	r3, r3
 8012d32:	2b08      	cmp	r3, #8
 8012d34:	f040 809c 	bne.w	8012e70 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	695a      	ldr	r2, [r3, #20]
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8012d46:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	2201      	movs	r2, #1
 8012d4c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d103      	bne.n	8012d60 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8012d58:	6878      	ldr	r0, [r7, #4]
 8012d5a:	f000 faa1 	bl	80132a0 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8012d5e:	e087      	b.n	8012e70 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8012d60:	6878      	ldr	r0, [r7, #4]
 8012d62:	f000 fa93 	bl	801328c <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8012d66:	e083      	b.n	8012e70 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8012d68:	697b      	ldr	r3, [r7, #20]
 8012d6a:	f003 0308 	and.w	r3, r3, #8
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d01f      	beq.n	8012db2 <HAL_QSPI_IRQHandler+0x2a2>
 8012d72:	693b      	ldr	r3, [r7, #16]
 8012d74:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d01a      	beq.n	8012db2 <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	2208      	movs	r2, #8
 8012d82:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d00b      	beq.n	8012daa <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	681a      	ldr	r2, [r3, #0]
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000
 8012da0:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	2201      	movs	r2, #1
 8012da6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 8012daa:	6878      	ldr	r0, [r7, #4]
 8012dac:	f000 faaa 	bl	8013304 <HAL_QSPI_StatusMatchCallback>
 8012db0:	e061      	b.n	8012e76 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 8012db2:	697b      	ldr	r3, [r7, #20]
 8012db4:	f003 0301 	and.w	r3, r3, #1
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d047      	beq.n	8012e4c <HAL_QSPI_IRQHandler+0x33c>
 8012dbc:	693b      	ldr	r3, [r7, #16]
 8012dbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d042      	beq.n	8012e4c <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	2201      	movs	r2, #1
 8012dcc:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	681a      	ldr	r2, [r3, #0]
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8012ddc:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012de2:	f043 0202 	orr.w	r2, r3, #2
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	63da      	str	r2, [r3, #60]	@ 0x3c

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	f003 0304 	and.w	r3, r3, #4
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d021      	beq.n	8012e3c <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	681a      	ldr	r2, [r3, #0]
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	f022 0204 	bic.w	r2, r2, #4
 8012e06:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012e0c:	4a1c      	ldr	r2, [pc, #112]	@ (8012e80 <HAL_QSPI_IRQHandler+0x370>)
 8012e0e:	639a      	str	r2, [r3, #56]	@ 0x38
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012e14:	4618      	mov	r0, r3
 8012e16:	f7fe faaf 	bl	8011378 <HAL_DMA_Abort_IT>
 8012e1a:	4603      	mov	r3, r0
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d029      	beq.n	8012e74 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012e24:	f043 0204 	orr.w	r2, r3, #4
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	2201      	movs	r2, #1
 8012e30:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8012e34:	6878      	ldr	r0, [r7, #4]
 8012e36:	f000 fa29 	bl	801328c <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8012e3a:	e01b      	b.n	8012e74 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	2201      	movs	r2, #1
 8012e40:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 8012e44:	6878      	ldr	r0, [r7, #4]
 8012e46:	f000 fa21 	bl	801328c <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8012e4a:	e013      	b.n	8012e74 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 8012e4c:	697b      	ldr	r3, [r7, #20]
 8012e4e:	f003 0310 	and.w	r3, r3, #16
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d00f      	beq.n	8012e76 <HAL_QSPI_IRQHandler+0x366>
 8012e56:	693b      	ldr	r3, [r7, #16]
 8012e58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d00a      	beq.n	8012e76 <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	2210      	movs	r2, #16
 8012e66:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8012e68:	6878      	ldr	r0, [r7, #4]
 8012e6a:	f000 fa55 	bl	8013318 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 8012e6e:	e002      	b.n	8012e76 <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8012e70:	bf00      	nop
 8012e72:	e000      	b.n	8012e76 <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8012e74:	bf00      	nop
}
 8012e76:	bf00      	nop
 8012e78:	3718      	adds	r7, #24
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	bd80      	pop	{r7, pc}
 8012e7e:	bf00      	nop
 8012e80:	08013349 	.word	0x08013349

08012e84 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8012e84:	b580      	push	{r7, lr}
 8012e86:	b088      	sub	sp, #32
 8012e88:	af02      	add	r7, sp, #8
 8012e8a:	60f8      	str	r0, [r7, #12]
 8012e8c:	60b9      	str	r1, [r7, #8]
 8012e8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8012e90:	f7fc fc2e 	bl	800f6f0 <HAL_GetTick>
 8012e94:	6138      	str	r0, [r7, #16]

  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012e9c:	b2db      	uxtb	r3, r3
 8012e9e:	2b01      	cmp	r3, #1
 8012ea0:	d101      	bne.n	8012ea6 <HAL_QSPI_Command+0x22>
 8012ea2:	2302      	movs	r3, #2
 8012ea4:	e048      	b.n	8012f38 <HAL_QSPI_Command+0xb4>
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	2201      	movs	r2, #1
 8012eaa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8012eb4:	b2db      	uxtb	r3, r3
 8012eb6:	2b01      	cmp	r3, #1
 8012eb8:	d137      	bne.n	8012f2a <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	2200      	movs	r2, #0
 8012ebe:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	2202      	movs	r2, #2
 8012ec4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	9300      	str	r3, [sp, #0]
 8012ecc:	693b      	ldr	r3, [r7, #16]
 8012ece:	2200      	movs	r2, #0
 8012ed0:	2120      	movs	r1, #32
 8012ed2:	68f8      	ldr	r0, [r7, #12]
 8012ed4:	f000 fa6b 	bl	80133ae <QSPI_WaitFlagStateUntilTimeout>
 8012ed8:	4603      	mov	r3, r0
 8012eda:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8012edc:	7dfb      	ldrb	r3, [r7, #23]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d125      	bne.n	8012f2e <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8012ee2:	2200      	movs	r2, #0
 8012ee4:	68b9      	ldr	r1, [r7, #8]
 8012ee6:	68f8      	ldr	r0, [r7, #12]
 8012ee8:	f000 fa98 	bl	801341c <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8012eec:	68bb      	ldr	r3, [r7, #8]
 8012eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d115      	bne.n	8012f20 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	9300      	str	r3, [sp, #0]
 8012ef8:	693b      	ldr	r3, [r7, #16]
 8012efa:	2201      	movs	r2, #1
 8012efc:	2102      	movs	r1, #2
 8012efe:	68f8      	ldr	r0, [r7, #12]
 8012f00:	f000 fa55 	bl	80133ae <QSPI_WaitFlagStateUntilTimeout>
 8012f04:	4603      	mov	r3, r0
 8012f06:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8012f08:	7dfb      	ldrb	r3, [r7, #23]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d10f      	bne.n	8012f2e <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	2202      	movs	r2, #2
 8012f14:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	2201      	movs	r2, #1
 8012f1a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8012f1e:	e006      	b.n	8012f2e <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	2201      	movs	r2, #1
 8012f24:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8012f28:	e001      	b.n	8012f2e <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8012f2a:	2302      	movs	r3, #2
 8012f2c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	2200      	movs	r2, #0
 8012f32:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8012f36:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f38:	4618      	mov	r0, r3
 8012f3a:	3718      	adds	r7, #24
 8012f3c:	46bd      	mov	sp, r7
 8012f3e:	bd80      	pop	{r7, pc}

08012f40 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8012f40:	b580      	push	{r7, lr}
 8012f42:	b08a      	sub	sp, #40	@ 0x28
 8012f44:	af02      	add	r7, sp, #8
 8012f46:	60f8      	str	r0, [r7, #12]
 8012f48:	60b9      	str	r1, [r7, #8]
 8012f4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012f4c:	2300      	movs	r3, #0
 8012f4e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8012f50:	f7fc fbce 	bl	800f6f0 <HAL_GetTick>
 8012f54:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	3320      	adds	r3, #32
 8012f5c:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012f64:	b2db      	uxtb	r3, r3
 8012f66:	2b01      	cmp	r3, #1
 8012f68:	d101      	bne.n	8012f6e <HAL_QSPI_Transmit+0x2e>
 8012f6a:	2302      	movs	r3, #2
 8012f6c:	e076      	b.n	801305c <HAL_QSPI_Transmit+0x11c>
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	2201      	movs	r2, #1
 8012f72:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8012f7c:	b2db      	uxtb	r3, r3
 8012f7e:	2b01      	cmp	r3, #1
 8012f80:	d165      	bne.n	801304e <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	2200      	movs	r2, #0
 8012f86:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(pData != NULL )
 8012f88:	68bb      	ldr	r3, [r7, #8]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d056      	beq.n	801303c <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	2212      	movs	r2, #18
 8012f92:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	691b      	ldr	r3, [r3, #16]
 8012f9c:	1c5a      	adds	r2, r3, #1
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	625a      	str	r2, [r3, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	691b      	ldr	r3, [r3, #16]
 8012fa8:	1c5a      	adds	r2, r3, #1
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	68ba      	ldr	r2, [r7, #8]
 8012fb2:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	695a      	ldr	r2, [r3, #20]
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8012fc2:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8012fc4:	e01b      	b.n	8012ffe <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	9300      	str	r3, [sp, #0]
 8012fca:	69bb      	ldr	r3, [r7, #24]
 8012fcc:	2201      	movs	r2, #1
 8012fce:	2104      	movs	r1, #4
 8012fd0:	68f8      	ldr	r0, [r7, #12]
 8012fd2:	f000 f9ec 	bl	80133ae <QSPI_WaitFlagStateUntilTimeout>
 8012fd6:	4603      	mov	r3, r0
 8012fd8:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8012fda:	7ffb      	ldrb	r3, [r7, #31]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d113      	bne.n	8013008 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	69db      	ldr	r3, [r3, #28]
 8012fe4:	781a      	ldrb	r2, [r3, #0]
 8012fe6:	697b      	ldr	r3, [r7, #20]
 8012fe8:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	69db      	ldr	r3, [r3, #28]
 8012fee:	1c5a      	adds	r2, r3, #1
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ff8:	1e5a      	subs	r2, r3, #1
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	625a      	str	r2, [r3, #36]	@ 0x24
      while(hqspi->TxXferCount > 0U)
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013002:	2b00      	cmp	r3, #0
 8013004:	d1df      	bne.n	8012fc6 <HAL_QSPI_Transmit+0x86>
 8013006:	e000      	b.n	801300a <HAL_QSPI_Transmit+0xca>
          break;
 8013008:	bf00      	nop
      }

      if (status == HAL_OK)
 801300a:	7ffb      	ldrb	r3, [r7, #31]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d110      	bne.n	8013032 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	9300      	str	r3, [sp, #0]
 8013014:	69bb      	ldr	r3, [r7, #24]
 8013016:	2201      	movs	r2, #1
 8013018:	2102      	movs	r1, #2
 801301a:	68f8      	ldr	r0, [r7, #12]
 801301c:	f000 f9c7 	bl	80133ae <QSPI_WaitFlagStateUntilTimeout>
 8013020:	4603      	mov	r3, r0
 8013022:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8013024:	7ffb      	ldrb	r3, [r7, #31]
 8013026:	2b00      	cmp	r3, #0
 8013028:	d103      	bne.n	8013032 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	2202      	movs	r2, #2
 8013030:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	2201      	movs	r2, #1
 8013036:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 801303a:	e00a      	b.n	8013052 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013040:	f043 0208 	orr.w	r2, r3, #8
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	63da      	str	r2, [r3, #60]	@ 0x3c
      status = HAL_ERROR;
 8013048:	2301      	movs	r3, #1
 801304a:	77fb      	strb	r3, [r7, #31]
 801304c:	e001      	b.n	8013052 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 801304e:	2302      	movs	r3, #2
 8013050:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	2200      	movs	r2, #0
 8013056:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 801305a:	7ffb      	ldrb	r3, [r7, #31]
}
 801305c:	4618      	mov	r0, r3
 801305e:	3720      	adds	r7, #32
 8013060:	46bd      	mov	sp, r7
 8013062:	bd80      	pop	{r7, pc}

08013064 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8013064:	b580      	push	{r7, lr}
 8013066:	b08a      	sub	sp, #40	@ 0x28
 8013068:	af02      	add	r7, sp, #8
 801306a:	60f8      	str	r0, [r7, #12]
 801306c:	60b9      	str	r1, [r7, #8]
 801306e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013070:	2300      	movs	r3, #0
 8013072:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8013074:	f7fc fb3c 	bl	800f6f0 <HAL_GetTick>
 8013078:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	699b      	ldr	r3, [r3, #24]
 8013080:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	3320      	adds	r3, #32
 8013088:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013090:	b2db      	uxtb	r3, r3
 8013092:	2b01      	cmp	r3, #1
 8013094:	d101      	bne.n	801309a <HAL_QSPI_Receive+0x36>
 8013096:	2302      	movs	r3, #2
 8013098:	e07d      	b.n	8013196 <HAL_QSPI_Receive+0x132>
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	2201      	movs	r2, #1
 801309e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80130a8:	b2db      	uxtb	r3, r3
 80130aa:	2b01      	cmp	r3, #1
 80130ac:	d16c      	bne.n	8013188 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	2200      	movs	r2, #0
 80130b2:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(pData != NULL )
 80130b4:	68bb      	ldr	r3, [r7, #8]
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d05d      	beq.n	8013176 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	2222      	movs	r2, #34	@ 0x22
 80130be:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	691b      	ldr	r3, [r3, #16]
 80130c8:	1c5a      	adds	r2, r3, #1
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	691b      	ldr	r3, [r3, #16]
 80130d4:	1c5a      	adds	r2, r3, #1
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->pRxBuffPtr = pData;
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	68ba      	ldr	r2, [r7, #8]
 80130de:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	695b      	ldr	r3, [r3, #20]
 80130e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80130f2:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	697a      	ldr	r2, [r7, #20]
 80130fa:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 80130fc:	e01c      	b.n	8013138 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	9300      	str	r3, [sp, #0]
 8013102:	69bb      	ldr	r3, [r7, #24]
 8013104:	2201      	movs	r2, #1
 8013106:	2106      	movs	r1, #6
 8013108:	68f8      	ldr	r0, [r7, #12]
 801310a:	f000 f950 	bl	80133ae <QSPI_WaitFlagStateUntilTimeout>
 801310e:	4603      	mov	r3, r0
 8013110:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8013112:	7ffb      	ldrb	r3, [r7, #31]
 8013114:	2b00      	cmp	r3, #0
 8013116:	d114      	bne.n	8013142 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801311c:	693a      	ldr	r2, [r7, #16]
 801311e:	7812      	ldrb	r2, [r2, #0]
 8013120:	b2d2      	uxtb	r2, r2
 8013122:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013128:	1c5a      	adds	r2, r3, #1
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	629a      	str	r2, [r3, #40]	@ 0x28
        hqspi->RxXferCount--;
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013132:	1e5a      	subs	r2, r3, #1
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	631a      	str	r2, [r3, #48]	@ 0x30
      while(hqspi->RxXferCount > 0U)
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801313c:	2b00      	cmp	r3, #0
 801313e:	d1de      	bne.n	80130fe <HAL_QSPI_Receive+0x9a>
 8013140:	e000      	b.n	8013144 <HAL_QSPI_Receive+0xe0>
          break;
 8013142:	bf00      	nop
      }

      if (status == HAL_OK)
 8013144:	7ffb      	ldrb	r3, [r7, #31]
 8013146:	2b00      	cmp	r3, #0
 8013148:	d110      	bne.n	801316c <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	9300      	str	r3, [sp, #0]
 801314e:	69bb      	ldr	r3, [r7, #24]
 8013150:	2201      	movs	r2, #1
 8013152:	2102      	movs	r1, #2
 8013154:	68f8      	ldr	r0, [r7, #12]
 8013156:	f000 f92a 	bl	80133ae <QSPI_WaitFlagStateUntilTimeout>
 801315a:	4603      	mov	r3, r0
 801315c:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 801315e:	7ffb      	ldrb	r3, [r7, #31]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d103      	bne.n	801316c <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	2202      	movs	r2, #2
 801316a:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	2201      	movs	r2, #1
 8013170:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8013174:	e00a      	b.n	801318c <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801317a:	f043 0208 	orr.w	r2, r3, #8
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	63da      	str	r2, [r3, #60]	@ 0x3c
      status = HAL_ERROR;
 8013182:	2301      	movs	r3, #1
 8013184:	77fb      	strb	r3, [r7, #31]
 8013186:	e001      	b.n	801318c <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8013188:	2302      	movs	r3, #2
 801318a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	2200      	movs	r2, #0
 8013190:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 8013194:	7ffb      	ldrb	r3, [r7, #31]
}
 8013196:	4618      	mov	r0, r3
 8013198:	3720      	adds	r7, #32
 801319a:	46bd      	mov	sp, r7
 801319c:	bd80      	pop	{r7, pc}

0801319e <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 801319e:	b580      	push	{r7, lr}
 80131a0:	b088      	sub	sp, #32
 80131a2:	af02      	add	r7, sp, #8
 80131a4:	60f8      	str	r0, [r7, #12]
 80131a6:	60b9      	str	r1, [r7, #8]
 80131a8:	607a      	str	r2, [r7, #4]
 80131aa:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80131ac:	f7fc faa0 	bl	800f6f0 <HAL_GetTick>
 80131b0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80131b8:	b2db      	uxtb	r3, r3
 80131ba:	2b01      	cmp	r3, #1
 80131bc:	d101      	bne.n	80131c2 <HAL_QSPI_AutoPolling+0x24>
 80131be:	2302      	movs	r3, #2
 80131c0:	e060      	b.n	8013284 <HAL_QSPI_AutoPolling+0xe6>
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	2201      	movs	r2, #1
 80131c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80131d0:	b2db      	uxtb	r3, r3
 80131d2:	2b01      	cmp	r3, #1
 80131d4:	d14f      	bne.n	8013276 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	2200      	movs	r2, #0
 80131da:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	2242      	movs	r2, #66	@ 0x42
 80131e0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80131e4:	683b      	ldr	r3, [r7, #0]
 80131e6:	9300      	str	r3, [sp, #0]
 80131e8:	693b      	ldr	r3, [r7, #16]
 80131ea:	2200      	movs	r2, #0
 80131ec:	2120      	movs	r1, #32
 80131ee:	68f8      	ldr	r0, [r7, #12]
 80131f0:	f000 f8dd 	bl	80133ae <QSPI_WaitFlagStateUntilTimeout>
 80131f4:	4603      	mov	r3, r0
 80131f6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80131f8:	7dfb      	ldrb	r3, [r7, #23]
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d13d      	bne.n	801327a <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	687a      	ldr	r2, [r7, #4]
 8013204:	6812      	ldr	r2, [r2, #0]
 8013206:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	687a      	ldr	r2, [r7, #4]
 801320e:	6852      	ldr	r2, [r2, #4]
 8013210:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	687a      	ldr	r2, [r7, #4]
 8013218:	6892      	ldr	r2, [r2, #8]
 801321a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	691b      	ldr	r3, [r3, #16]
 801322a:	431a      	orrs	r2, r3
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8013234:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	68da      	ldr	r2, [r3, #12]
 801323a:	68bb      	ldr	r3, [r7, #8]
 801323c:	629a      	str	r2, [r3, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 801323e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8013242:	68b9      	ldr	r1, [r7, #8]
 8013244:	68f8      	ldr	r0, [r7, #12]
 8013246:	f000 f8e9 	bl	801341c <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 801324a:	683b      	ldr	r3, [r7, #0]
 801324c:	9300      	str	r3, [sp, #0]
 801324e:	693b      	ldr	r3, [r7, #16]
 8013250:	2201      	movs	r2, #1
 8013252:	2108      	movs	r1, #8
 8013254:	68f8      	ldr	r0, [r7, #12]
 8013256:	f000 f8aa 	bl	80133ae <QSPI_WaitFlagStateUntilTimeout>
 801325a:	4603      	mov	r3, r0
 801325c:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 801325e:	7dfb      	ldrb	r3, [r7, #23]
 8013260:	2b00      	cmp	r3, #0
 8013262:	d10a      	bne.n	801327a <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	2208      	movs	r2, #8
 801326a:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	2201      	movs	r2, #1
 8013270:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8013274:	e001      	b.n	801327a <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8013276:	2302      	movs	r3, #2
 8013278:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	2200      	movs	r2, #0
 801327e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8013282:	7dfb      	ldrb	r3, [r7, #23]
}
 8013284:	4618      	mov	r0, r3
 8013286:	3718      	adds	r7, #24
 8013288:	46bd      	mov	sp, r7
 801328a:	bd80      	pop	{r7, pc}

0801328c <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 801328c:	b480      	push	{r7}
 801328e:	b083      	sub	sp, #12
 8013290:	af00      	add	r7, sp, #0
 8013292:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 8013294:	bf00      	nop
 8013296:	370c      	adds	r7, #12
 8013298:	46bd      	mov	sp, r7
 801329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801329e:	4770      	bx	lr

080132a0 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80132a0:	b480      	push	{r7}
 80132a2:	b083      	sub	sp, #12
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 80132a8:	bf00      	nop
 80132aa:	370c      	adds	r7, #12
 80132ac:	46bd      	mov	sp, r7
 80132ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b2:	4770      	bx	lr

080132b4 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80132b4:	b480      	push	{r7}
 80132b6:	b083      	sub	sp, #12
 80132b8:	af00      	add	r7, sp, #0
 80132ba:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 80132bc:	bf00      	nop
 80132be:	370c      	adds	r7, #12
 80132c0:	46bd      	mov	sp, r7
 80132c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c6:	4770      	bx	lr

080132c8 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80132c8:	b480      	push	{r7}
 80132ca:	b083      	sub	sp, #12
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 80132d0:	bf00      	nop
 80132d2:	370c      	adds	r7, #12
 80132d4:	46bd      	mov	sp, r7
 80132d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132da:	4770      	bx	lr

080132dc <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80132dc:	b480      	push	{r7}
 80132de:	b083      	sub	sp, #12
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 80132e4:	bf00      	nop
 80132e6:	370c      	adds	r7, #12
 80132e8:	46bd      	mov	sp, r7
 80132ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ee:	4770      	bx	lr

080132f0 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 80132f0:	b480      	push	{r7}
 80132f2:	b083      	sub	sp, #12
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 80132f8:	bf00      	nop
 80132fa:	370c      	adds	r7, #12
 80132fc:	46bd      	mov	sp, r7
 80132fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013302:	4770      	bx	lr

08013304 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8013304:	b480      	push	{r7}
 8013306:	b083      	sub	sp, #12
 8013308:	af00      	add	r7, sp, #0
 801330a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 801330c:	bf00      	nop
 801330e:	370c      	adds	r7, #12
 8013310:	46bd      	mov	sp, r7
 8013312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013316:	4770      	bx	lr

08013318 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8013318:	b480      	push	{r7}
 801331a:	b083      	sub	sp, #12
 801331c:	af00      	add	r7, sp, #0
 801331e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 8013320:	bf00      	nop
 8013322:	370c      	adds	r7, #12
 8013324:	46bd      	mov	sp, r7
 8013326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801332a:	4770      	bx	lr

0801332c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 801332c:	b480      	push	{r7}
 801332e:	b083      	sub	sp, #12
 8013330:	af00      	add	r7, sp, #0
 8013332:	6078      	str	r0, [r7, #4]
 8013334:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	683a      	ldr	r2, [r7, #0]
 801333a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 801333c:	bf00      	nop
 801333e:	370c      	adds	r7, #12
 8013340:	46bd      	mov	sp, r7
 8013342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013346:	4770      	bx	lr

08013348 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 8013348:	b580      	push	{r7, lr}
 801334a:	b084      	sub	sp, #16
 801334c:	af00      	add	r7, sp, #0
 801334e:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013354:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	2200      	movs	r2, #0
 801335a:	631a      	str	r2, [r3, #48]	@ 0x30
  hqspi->TxXferCount = 0U;
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	2200      	movs	r2, #0
 8013360:	625a      	str	r2, [r3, #36]	@ 0x24

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8013368:	b2db      	uxtb	r3, r3
 801336a:	2b08      	cmp	r3, #8
 801336c:	d114      	bne.n	8013398 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	2202      	movs	r2, #2
 8013374:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	681a      	ldr	r2, [r3, #0]
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8013384:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	681a      	ldr	r2, [r3, #0]
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	f042 0202 	orr.w	r2, r2, #2
 8013394:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 8013396:	e006      	b.n	80133a6 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	2201      	movs	r2, #1
 801339c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    HAL_QSPI_ErrorCallback(hqspi);
 80133a0:	68f8      	ldr	r0, [r7, #12]
 80133a2:	f7ff ff73 	bl	801328c <HAL_QSPI_ErrorCallback>
}
 80133a6:	bf00      	nop
 80133a8:	3710      	adds	r7, #16
 80133aa:	46bd      	mov	sp, r7
 80133ac:	bd80      	pop	{r7, pc}

080133ae <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80133ae:	b580      	push	{r7, lr}
 80133b0:	b084      	sub	sp, #16
 80133b2:	af00      	add	r7, sp, #0
 80133b4:	60f8      	str	r0, [r7, #12]
 80133b6:	60b9      	str	r1, [r7, #8]
 80133b8:	603b      	str	r3, [r7, #0]
 80133ba:	4613      	mov	r3, r2
 80133bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80133be:	e01a      	b.n	80133f6 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80133c0:	69bb      	ldr	r3, [r7, #24]
 80133c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133c6:	d016      	beq.n	80133f6 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80133c8:	f7fc f992 	bl	800f6f0 <HAL_GetTick>
 80133cc:	4602      	mov	r2, r0
 80133ce:	683b      	ldr	r3, [r7, #0]
 80133d0:	1ad3      	subs	r3, r2, r3
 80133d2:	69ba      	ldr	r2, [r7, #24]
 80133d4:	429a      	cmp	r2, r3
 80133d6:	d302      	bcc.n	80133de <QSPI_WaitFlagStateUntilTimeout+0x30>
 80133d8:	69bb      	ldr	r3, [r7, #24]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d10b      	bne.n	80133f6 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	2204      	movs	r2, #4
 80133e2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80133ea:	f043 0201 	orr.w	r2, r3, #1
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80133f2:	2301      	movs	r3, #1
 80133f4:	e00e      	b.n	8013414 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	689a      	ldr	r2, [r3, #8]
 80133fc:	68bb      	ldr	r3, [r7, #8]
 80133fe:	4013      	ands	r3, r2
 8013400:	2b00      	cmp	r3, #0
 8013402:	bf14      	ite	ne
 8013404:	2301      	movne	r3, #1
 8013406:	2300      	moveq	r3, #0
 8013408:	b2db      	uxtb	r3, r3
 801340a:	461a      	mov	r2, r3
 801340c:	79fb      	ldrb	r3, [r7, #7]
 801340e:	429a      	cmp	r2, r3
 8013410:	d1d6      	bne.n	80133c0 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8013412:	2300      	movs	r3, #0
}
 8013414:	4618      	mov	r0, r3
 8013416:	3710      	adds	r7, #16
 8013418:	46bd      	mov	sp, r7
 801341a:	bd80      	pop	{r7, pc}

0801341c <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 801341c:	b480      	push	{r7}
 801341e:	b085      	sub	sp, #20
 8013420:	af00      	add	r7, sp, #0
 8013422:	60f8      	str	r0, [r7, #12]
 8013424:	60b9      	str	r1, [r7, #8]
 8013426:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8013428:	68bb      	ldr	r3, [r7, #8]
 801342a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801342c:	2b00      	cmp	r3, #0
 801342e:	d009      	beq.n	8013444 <QSPI_Config+0x28>
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8013436:	d005      	beq.n	8013444 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8013438:	68bb      	ldr	r3, [r7, #8]
 801343a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	3a01      	subs	r2, #1
 8013442:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8013444:	68bb      	ldr	r3, [r7, #8]
 8013446:	699b      	ldr	r3, [r3, #24]
 8013448:	2b00      	cmp	r3, #0
 801344a:	f000 80ad 	beq.w	80135a8 <QSPI_Config+0x18c>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 801344e:	68bb      	ldr	r3, [r7, #8]
 8013450:	6a1b      	ldr	r3, [r3, #32]
 8013452:	2b00      	cmp	r3, #0
 8013454:	d059      	beq.n	801350a <QSPI_Config+0xee>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	68ba      	ldr	r2, [r7, #8]
 801345c:	6892      	ldr	r2, [r2, #8]
 801345e:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8013460:	68bb      	ldr	r3, [r7, #8]
 8013462:	69db      	ldr	r3, [r3, #28]
 8013464:	2b00      	cmp	r3, #0
 8013466:	d02e      	beq.n	80134c6 <QSPI_Config+0xaa>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 8013468:	68bb      	ldr	r3, [r7, #8]
 801346a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801346c:	68bb      	ldr	r3, [r7, #8]
 801346e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013470:	431a      	orrs	r2, r3
 8013472:	68bb      	ldr	r3, [r7, #8]
 8013474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013476:	431a      	orrs	r2, r3
 8013478:	68bb      	ldr	r3, [r7, #8]
 801347a:	695b      	ldr	r3, [r3, #20]
 801347c:	049b      	lsls	r3, r3, #18
 801347e:	431a      	orrs	r2, r3
 8013480:	68bb      	ldr	r3, [r7, #8]
 8013482:	691b      	ldr	r3, [r3, #16]
 8013484:	431a      	orrs	r2, r3
 8013486:	68bb      	ldr	r3, [r7, #8]
 8013488:	6a1b      	ldr	r3, [r3, #32]
 801348a:	431a      	orrs	r2, r3
 801348c:	68bb      	ldr	r3, [r7, #8]
 801348e:	68db      	ldr	r3, [r3, #12]
 8013490:	431a      	orrs	r2, r3
 8013492:	68bb      	ldr	r3, [r7, #8]
 8013494:	69db      	ldr	r3, [r3, #28]
 8013496:	431a      	orrs	r2, r3
 8013498:	68bb      	ldr	r3, [r7, #8]
 801349a:	699b      	ldr	r3, [r3, #24]
 801349c:	431a      	orrs	r2, r3
 801349e:	68bb      	ldr	r3, [r7, #8]
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	ea42 0103 	orr.w	r1, r2, r3
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	687a      	ldr	r2, [r7, #4]
 80134ac:	430a      	orrs	r2, r1
 80134ae:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80134b6:	f000 8119 	beq.w	80136ec <QSPI_Config+0x2d0>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	68ba      	ldr	r2, [r7, #8]
 80134c0:	6852      	ldr	r2, [r2, #4]
 80134c2:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80134c4:	e112      	b.n	80136ec <QSPI_Config+0x2d0>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 80134c6:	68bb      	ldr	r3, [r7, #8]
 80134c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80134ca:	68bb      	ldr	r3, [r7, #8]
 80134cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80134ce:	431a      	orrs	r2, r3
 80134d0:	68bb      	ldr	r3, [r7, #8]
 80134d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80134d4:	431a      	orrs	r2, r3
 80134d6:	68bb      	ldr	r3, [r7, #8]
 80134d8:	695b      	ldr	r3, [r3, #20]
 80134da:	049b      	lsls	r3, r3, #18
 80134dc:	431a      	orrs	r2, r3
 80134de:	68bb      	ldr	r3, [r7, #8]
 80134e0:	691b      	ldr	r3, [r3, #16]
 80134e2:	431a      	orrs	r2, r3
 80134e4:	68bb      	ldr	r3, [r7, #8]
 80134e6:	6a1b      	ldr	r3, [r3, #32]
 80134e8:	431a      	orrs	r2, r3
 80134ea:	68bb      	ldr	r3, [r7, #8]
 80134ec:	69db      	ldr	r3, [r3, #28]
 80134ee:	431a      	orrs	r2, r3
 80134f0:	68bb      	ldr	r3, [r7, #8]
 80134f2:	699b      	ldr	r3, [r3, #24]
 80134f4:	431a      	orrs	r2, r3
 80134f6:	68bb      	ldr	r3, [r7, #8]
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	ea42 0103 	orr.w	r1, r2, r3
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	687a      	ldr	r2, [r7, #4]
 8013504:	430a      	orrs	r2, r1
 8013506:	615a      	str	r2, [r3, #20]
}
 8013508:	e0f0      	b.n	80136ec <QSPI_Config+0x2d0>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 801350a:	68bb      	ldr	r3, [r7, #8]
 801350c:	69db      	ldr	r3, [r3, #28]
 801350e:	2b00      	cmp	r3, #0
 8013510:	d02b      	beq.n	801356a <QSPI_Config+0x14e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 8013512:	68bb      	ldr	r3, [r7, #8]
 8013514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013516:	68bb      	ldr	r3, [r7, #8]
 8013518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801351a:	431a      	orrs	r2, r3
 801351c:	68bb      	ldr	r3, [r7, #8]
 801351e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013520:	431a      	orrs	r2, r3
 8013522:	68bb      	ldr	r3, [r7, #8]
 8013524:	695b      	ldr	r3, [r3, #20]
 8013526:	049b      	lsls	r3, r3, #18
 8013528:	431a      	orrs	r2, r3
 801352a:	68bb      	ldr	r3, [r7, #8]
 801352c:	6a1b      	ldr	r3, [r3, #32]
 801352e:	431a      	orrs	r2, r3
 8013530:	68bb      	ldr	r3, [r7, #8]
 8013532:	68db      	ldr	r3, [r3, #12]
 8013534:	431a      	orrs	r2, r3
 8013536:	68bb      	ldr	r3, [r7, #8]
 8013538:	69db      	ldr	r3, [r3, #28]
 801353a:	431a      	orrs	r2, r3
 801353c:	68bb      	ldr	r3, [r7, #8]
 801353e:	699b      	ldr	r3, [r3, #24]
 8013540:	431a      	orrs	r2, r3
 8013542:	68bb      	ldr	r3, [r7, #8]
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	ea42 0103 	orr.w	r1, r2, r3
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	687a      	ldr	r2, [r7, #4]
 8013550:	430a      	orrs	r2, r1
 8013552:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 801355a:	f000 80c7 	beq.w	80136ec <QSPI_Config+0x2d0>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	68ba      	ldr	r2, [r7, #8]
 8013564:	6852      	ldr	r2, [r2, #4]
 8013566:	619a      	str	r2, [r3, #24]
}
 8013568:	e0c0      	b.n	80136ec <QSPI_Config+0x2d0>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 801356a:	68bb      	ldr	r3, [r7, #8]
 801356c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801356e:	68bb      	ldr	r3, [r7, #8]
 8013570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013572:	431a      	orrs	r2, r3
 8013574:	68bb      	ldr	r3, [r7, #8]
 8013576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013578:	431a      	orrs	r2, r3
 801357a:	68bb      	ldr	r3, [r7, #8]
 801357c:	695b      	ldr	r3, [r3, #20]
 801357e:	049b      	lsls	r3, r3, #18
 8013580:	431a      	orrs	r2, r3
 8013582:	68bb      	ldr	r3, [r7, #8]
 8013584:	6a1b      	ldr	r3, [r3, #32]
 8013586:	431a      	orrs	r2, r3
 8013588:	68bb      	ldr	r3, [r7, #8]
 801358a:	69db      	ldr	r3, [r3, #28]
 801358c:	431a      	orrs	r2, r3
 801358e:	68bb      	ldr	r3, [r7, #8]
 8013590:	699b      	ldr	r3, [r3, #24]
 8013592:	431a      	orrs	r2, r3
 8013594:	68bb      	ldr	r3, [r7, #8]
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	ea42 0103 	orr.w	r1, r2, r3
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	687a      	ldr	r2, [r7, #4]
 80135a2:	430a      	orrs	r2, r1
 80135a4:	615a      	str	r2, [r3, #20]
}
 80135a6:	e0a1      	b.n	80136ec <QSPI_Config+0x2d0>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80135a8:	68bb      	ldr	r3, [r7, #8]
 80135aa:	6a1b      	ldr	r3, [r3, #32]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d052      	beq.n	8013656 <QSPI_Config+0x23a>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	68ba      	ldr	r2, [r7, #8]
 80135b6:	6892      	ldr	r2, [r2, #8]
 80135b8:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80135ba:	68bb      	ldr	r3, [r7, #8]
 80135bc:	69db      	ldr	r3, [r3, #28]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d02a      	beq.n	8013618 <QSPI_Config+0x1fc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 80135c2:	68bb      	ldr	r3, [r7, #8]
 80135c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80135c6:	68bb      	ldr	r3, [r7, #8]
 80135c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80135ca:	431a      	orrs	r2, r3
 80135cc:	68bb      	ldr	r3, [r7, #8]
 80135ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80135d0:	431a      	orrs	r2, r3
 80135d2:	68bb      	ldr	r3, [r7, #8]
 80135d4:	695b      	ldr	r3, [r3, #20]
 80135d6:	049b      	lsls	r3, r3, #18
 80135d8:	431a      	orrs	r2, r3
 80135da:	68bb      	ldr	r3, [r7, #8]
 80135dc:	691b      	ldr	r3, [r3, #16]
 80135de:	431a      	orrs	r2, r3
 80135e0:	68bb      	ldr	r3, [r7, #8]
 80135e2:	6a1b      	ldr	r3, [r3, #32]
 80135e4:	431a      	orrs	r2, r3
 80135e6:	68bb      	ldr	r3, [r7, #8]
 80135e8:	68db      	ldr	r3, [r3, #12]
 80135ea:	431a      	orrs	r2, r3
 80135ec:	68bb      	ldr	r3, [r7, #8]
 80135ee:	69db      	ldr	r3, [r3, #28]
 80135f0:	431a      	orrs	r2, r3
 80135f2:	68bb      	ldr	r3, [r7, #8]
 80135f4:	699b      	ldr	r3, [r3, #24]
 80135f6:	ea42 0103 	orr.w	r1, r2, r3
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	687a      	ldr	r2, [r7, #4]
 8013600:	430a      	orrs	r2, r1
 8013602:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 801360a:	d06f      	beq.n	80136ec <QSPI_Config+0x2d0>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 801360c:	68fb      	ldr	r3, [r7, #12]
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	68ba      	ldr	r2, [r7, #8]
 8013612:	6852      	ldr	r2, [r2, #4]
 8013614:	619a      	str	r2, [r3, #24]
}
 8013616:	e069      	b.n	80136ec <QSPI_Config+0x2d0>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 8013618:	68bb      	ldr	r3, [r7, #8]
 801361a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801361c:	68bb      	ldr	r3, [r7, #8]
 801361e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013620:	431a      	orrs	r2, r3
 8013622:	68bb      	ldr	r3, [r7, #8]
 8013624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013626:	431a      	orrs	r2, r3
 8013628:	68bb      	ldr	r3, [r7, #8]
 801362a:	695b      	ldr	r3, [r3, #20]
 801362c:	049b      	lsls	r3, r3, #18
 801362e:	431a      	orrs	r2, r3
 8013630:	68bb      	ldr	r3, [r7, #8]
 8013632:	691b      	ldr	r3, [r3, #16]
 8013634:	431a      	orrs	r2, r3
 8013636:	68bb      	ldr	r3, [r7, #8]
 8013638:	6a1b      	ldr	r3, [r3, #32]
 801363a:	431a      	orrs	r2, r3
 801363c:	68bb      	ldr	r3, [r7, #8]
 801363e:	69db      	ldr	r3, [r3, #28]
 8013640:	431a      	orrs	r2, r3
 8013642:	68bb      	ldr	r3, [r7, #8]
 8013644:	699b      	ldr	r3, [r3, #24]
 8013646:	ea42 0103 	orr.w	r1, r2, r3
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	687a      	ldr	r2, [r7, #4]
 8013650:	430a      	orrs	r2, r1
 8013652:	615a      	str	r2, [r3, #20]
}
 8013654:	e04a      	b.n	80136ec <QSPI_Config+0x2d0>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8013656:	68bb      	ldr	r3, [r7, #8]
 8013658:	69db      	ldr	r3, [r3, #28]
 801365a:	2b00      	cmp	r3, #0
 801365c:	d027      	beq.n	80136ae <QSPI_Config+0x292>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 801365e:	68bb      	ldr	r3, [r7, #8]
 8013660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013662:	68bb      	ldr	r3, [r7, #8]
 8013664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013666:	431a      	orrs	r2, r3
 8013668:	68bb      	ldr	r3, [r7, #8]
 801366a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801366c:	431a      	orrs	r2, r3
 801366e:	68bb      	ldr	r3, [r7, #8]
 8013670:	695b      	ldr	r3, [r3, #20]
 8013672:	049b      	lsls	r3, r3, #18
 8013674:	431a      	orrs	r2, r3
 8013676:	68bb      	ldr	r3, [r7, #8]
 8013678:	6a1b      	ldr	r3, [r3, #32]
 801367a:	431a      	orrs	r2, r3
 801367c:	68bb      	ldr	r3, [r7, #8]
 801367e:	68db      	ldr	r3, [r3, #12]
 8013680:	431a      	orrs	r2, r3
 8013682:	68bb      	ldr	r3, [r7, #8]
 8013684:	69db      	ldr	r3, [r3, #28]
 8013686:	431a      	orrs	r2, r3
 8013688:	68bb      	ldr	r3, [r7, #8]
 801368a:	699b      	ldr	r3, [r3, #24]
 801368c:	ea42 0103 	orr.w	r1, r2, r3
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	687a      	ldr	r2, [r7, #4]
 8013696:	430a      	orrs	r2, r1
 8013698:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80136a0:	d024      	beq.n	80136ec <QSPI_Config+0x2d0>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	68ba      	ldr	r2, [r7, #8]
 80136a8:	6852      	ldr	r2, [r2, #4]
 80136aa:	619a      	str	r2, [r3, #24]
}
 80136ac:	e01e      	b.n	80136ec <QSPI_Config+0x2d0>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80136ae:	68bb      	ldr	r3, [r7, #8]
 80136b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d01a      	beq.n	80136ec <QSPI_Config+0x2d0>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 80136b6:	68bb      	ldr	r3, [r7, #8]
 80136b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80136ba:	68bb      	ldr	r3, [r7, #8]
 80136bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80136be:	431a      	orrs	r2, r3
 80136c0:	68bb      	ldr	r3, [r7, #8]
 80136c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80136c4:	431a      	orrs	r2, r3
 80136c6:	68bb      	ldr	r3, [r7, #8]
 80136c8:	695b      	ldr	r3, [r3, #20]
 80136ca:	049b      	lsls	r3, r3, #18
 80136cc:	431a      	orrs	r2, r3
 80136ce:	68bb      	ldr	r3, [r7, #8]
 80136d0:	6a1b      	ldr	r3, [r3, #32]
 80136d2:	431a      	orrs	r2, r3
 80136d4:	68bb      	ldr	r3, [r7, #8]
 80136d6:	69db      	ldr	r3, [r3, #28]
 80136d8:	431a      	orrs	r2, r3
 80136da:	68bb      	ldr	r3, [r7, #8]
 80136dc:	699b      	ldr	r3, [r3, #24]
 80136de:	ea42 0103 	orr.w	r1, r2, r3
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	687a      	ldr	r2, [r7, #4]
 80136e8:	430a      	orrs	r2, r1
 80136ea:	615a      	str	r2, [r3, #20]
}
 80136ec:	bf00      	nop
 80136ee:	3714      	adds	r7, #20
 80136f0:	46bd      	mov	sp, r7
 80136f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f6:	4770      	bx	lr

080136f8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80136f8:	b480      	push	{r7}
 80136fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80136fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8013706:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801370a:	d101      	bne.n	8013710 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 801370c:	2301      	movs	r3, #1
 801370e:	e000      	b.n	8013712 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8013710:	2300      	movs	r3, #0
}
 8013712:	4618      	mov	r0, r3
 8013714:	46bd      	mov	sp, r7
 8013716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801371a:	4770      	bx	lr

0801371c <LL_RCC_HSE_Enable>:
{
 801371c:	b480      	push	{r7}
 801371e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8013720:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801372a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801372e:	6013      	str	r3, [r2, #0]
}
 8013730:	bf00      	nop
 8013732:	46bd      	mov	sp, r7
 8013734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013738:	4770      	bx	lr

0801373a <LL_RCC_HSE_Disable>:
{
 801373a:	b480      	push	{r7}
 801373c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 801373e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013748:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801374c:	6013      	str	r3, [r2, #0]
}
 801374e:	bf00      	nop
 8013750:	46bd      	mov	sp, r7
 8013752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013756:	4770      	bx	lr

08013758 <LL_RCC_HSE_IsReady>:
{
 8013758:	b480      	push	{r7}
 801375a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 801375c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013766:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801376a:	d101      	bne.n	8013770 <LL_RCC_HSE_IsReady+0x18>
 801376c:	2301      	movs	r3, #1
 801376e:	e000      	b.n	8013772 <LL_RCC_HSE_IsReady+0x1a>
 8013770:	2300      	movs	r3, #0
}
 8013772:	4618      	mov	r0, r3
 8013774:	46bd      	mov	sp, r7
 8013776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801377a:	4770      	bx	lr

0801377c <LL_RCC_HSI_Enable>:
{
 801377c:	b480      	push	{r7}
 801377e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8013780:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801378a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801378e:	6013      	str	r3, [r2, #0]
}
 8013790:	bf00      	nop
 8013792:	46bd      	mov	sp, r7
 8013794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013798:	4770      	bx	lr

0801379a <LL_RCC_HSI_Disable>:
{
 801379a:	b480      	push	{r7}
 801379c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 801379e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80137a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80137ac:	6013      	str	r3, [r2, #0]
}
 80137ae:	bf00      	nop
 80137b0:	46bd      	mov	sp, r7
 80137b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b6:	4770      	bx	lr

080137b8 <LL_RCC_HSI_IsReady>:
{
 80137b8:	b480      	push	{r7}
 80137ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80137bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80137c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80137ca:	d101      	bne.n	80137d0 <LL_RCC_HSI_IsReady+0x18>
 80137cc:	2301      	movs	r3, #1
 80137ce:	e000      	b.n	80137d2 <LL_RCC_HSI_IsReady+0x1a>
 80137d0:	2300      	movs	r3, #0
}
 80137d2:	4618      	mov	r0, r3
 80137d4:	46bd      	mov	sp, r7
 80137d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137da:	4770      	bx	lr

080137dc <LL_RCC_HSI_SetCalibTrimming>:
{
 80137dc:	b480      	push	{r7}
 80137de:	b083      	sub	sp, #12
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80137e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80137e8:	685b      	ldr	r3, [r3, #4]
 80137ea:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	061b      	lsls	r3, r3, #24
 80137f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80137f6:	4313      	orrs	r3, r2
 80137f8:	604b      	str	r3, [r1, #4]
}
 80137fa:	bf00      	nop
 80137fc:	370c      	adds	r7, #12
 80137fe:	46bd      	mov	sp, r7
 8013800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013804:	4770      	bx	lr

08013806 <LL_RCC_HSI48_Enable>:
{
 8013806:	b480      	push	{r7}
 8013808:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 801380a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801380e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8013812:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013816:	f043 0301 	orr.w	r3, r3, #1
 801381a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 801381e:	bf00      	nop
 8013820:	46bd      	mov	sp, r7
 8013822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013826:	4770      	bx	lr

08013828 <LL_RCC_HSI48_Disable>:
{
 8013828:	b480      	push	{r7}
 801382a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 801382c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013830:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8013834:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013838:	f023 0301 	bic.w	r3, r3, #1
 801383c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8013840:	bf00      	nop
 8013842:	46bd      	mov	sp, r7
 8013844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013848:	4770      	bx	lr

0801384a <LL_RCC_HSI48_IsReady>:
{
 801384a:	b480      	push	{r7}
 801384c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 801384e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013852:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8013856:	f003 0302 	and.w	r3, r3, #2
 801385a:	2b02      	cmp	r3, #2
 801385c:	d101      	bne.n	8013862 <LL_RCC_HSI48_IsReady+0x18>
 801385e:	2301      	movs	r3, #1
 8013860:	e000      	b.n	8013864 <LL_RCC_HSI48_IsReady+0x1a>
 8013862:	2300      	movs	r3, #0
}
 8013864:	4618      	mov	r0, r3
 8013866:	46bd      	mov	sp, r7
 8013868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801386c:	4770      	bx	lr

0801386e <LL_RCC_LSE_Enable>:
{
 801386e:	b480      	push	{r7}
 8013870:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8013872:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801387a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801387e:	f043 0301 	orr.w	r3, r3, #1
 8013882:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8013886:	bf00      	nop
 8013888:	46bd      	mov	sp, r7
 801388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801388e:	4770      	bx	lr

08013890 <LL_RCC_LSE_Disable>:
{
 8013890:	b480      	push	{r7}
 8013892:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8013894:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013898:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801389c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80138a0:	f023 0301 	bic.w	r3, r3, #1
 80138a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80138a8:	bf00      	nop
 80138aa:	46bd      	mov	sp, r7
 80138ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138b0:	4770      	bx	lr

080138b2 <LL_RCC_LSE_EnableBypass>:
{
 80138b2:	b480      	push	{r7}
 80138b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80138b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80138ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80138be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80138c2:	f043 0304 	orr.w	r3, r3, #4
 80138c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80138ca:	bf00      	nop
 80138cc:	46bd      	mov	sp, r7
 80138ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d2:	4770      	bx	lr

080138d4 <LL_RCC_LSE_DisableBypass>:
{
 80138d4:	b480      	push	{r7}
 80138d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80138d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80138dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80138e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80138e4:	f023 0304 	bic.w	r3, r3, #4
 80138e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80138ec:	bf00      	nop
 80138ee:	46bd      	mov	sp, r7
 80138f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138f4:	4770      	bx	lr

080138f6 <LL_RCC_LSE_IsReady>:
{
 80138f6:	b480      	push	{r7}
 80138f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80138fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80138fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013902:	f003 0302 	and.w	r3, r3, #2
 8013906:	2b02      	cmp	r3, #2
 8013908:	d101      	bne.n	801390e <LL_RCC_LSE_IsReady+0x18>
 801390a:	2301      	movs	r3, #1
 801390c:	e000      	b.n	8013910 <LL_RCC_LSE_IsReady+0x1a>
 801390e:	2300      	movs	r3, #0
}
 8013910:	4618      	mov	r0, r3
 8013912:	46bd      	mov	sp, r7
 8013914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013918:	4770      	bx	lr

0801391a <LL_RCC_LSI1_Enable>:
{
 801391a:	b480      	push	{r7}
 801391c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 801391e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013922:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013926:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801392a:	f043 0301 	orr.w	r3, r3, #1
 801392e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8013932:	bf00      	nop
 8013934:	46bd      	mov	sp, r7
 8013936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801393a:	4770      	bx	lr

0801393c <LL_RCC_LSI1_Disable>:
{
 801393c:	b480      	push	{r7}
 801393e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8013940:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013944:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013948:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801394c:	f023 0301 	bic.w	r3, r3, #1
 8013950:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8013954:	bf00      	nop
 8013956:	46bd      	mov	sp, r7
 8013958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801395c:	4770      	bx	lr

0801395e <LL_RCC_LSI1_IsReady>:
{
 801395e:	b480      	push	{r7}
 8013960:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8013962:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013966:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801396a:	f003 0302 	and.w	r3, r3, #2
 801396e:	2b02      	cmp	r3, #2
 8013970:	d101      	bne.n	8013976 <LL_RCC_LSI1_IsReady+0x18>
 8013972:	2301      	movs	r3, #1
 8013974:	e000      	b.n	8013978 <LL_RCC_LSI1_IsReady+0x1a>
 8013976:	2300      	movs	r3, #0
}
 8013978:	4618      	mov	r0, r3
 801397a:	46bd      	mov	sp, r7
 801397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013980:	4770      	bx	lr

08013982 <LL_RCC_LSI2_Enable>:
{
 8013982:	b480      	push	{r7}
 8013984:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8013986:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801398a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801398e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013992:	f043 0304 	orr.w	r3, r3, #4
 8013996:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 801399a:	bf00      	nop
 801399c:	46bd      	mov	sp, r7
 801399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139a2:	4770      	bx	lr

080139a4 <LL_RCC_LSI2_Disable>:
{
 80139a4:	b480      	push	{r7}
 80139a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80139a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80139ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80139b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80139b4:	f023 0304 	bic.w	r3, r3, #4
 80139b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80139bc:	bf00      	nop
 80139be:	46bd      	mov	sp, r7
 80139c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c4:	4770      	bx	lr

080139c6 <LL_RCC_LSI2_IsReady>:
{
 80139c6:	b480      	push	{r7}
 80139c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80139ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80139ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80139d2:	f003 0308 	and.w	r3, r3, #8
 80139d6:	2b08      	cmp	r3, #8
 80139d8:	d101      	bne.n	80139de <LL_RCC_LSI2_IsReady+0x18>
 80139da:	2301      	movs	r3, #1
 80139dc:	e000      	b.n	80139e0 <LL_RCC_LSI2_IsReady+0x1a>
 80139de:	2300      	movs	r3, #0
}
 80139e0:	4618      	mov	r0, r3
 80139e2:	46bd      	mov	sp, r7
 80139e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139e8:	4770      	bx	lr

080139ea <LL_RCC_LSI2_SetTrimming>:
{
 80139ea:	b480      	push	{r7}
 80139ec:	b083      	sub	sp, #12
 80139ee:	af00      	add	r7, sp, #0
 80139f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80139f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80139f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80139fa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	021b      	lsls	r3, r3, #8
 8013a02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8013a06:	4313      	orrs	r3, r2
 8013a08:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8013a0c:	bf00      	nop
 8013a0e:	370c      	adds	r7, #12
 8013a10:	46bd      	mov	sp, r7
 8013a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a16:	4770      	bx	lr

08013a18 <LL_RCC_MSI_Enable>:
{
 8013a18:	b480      	push	{r7}
 8013a1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8013a1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013a26:	f043 0301 	orr.w	r3, r3, #1
 8013a2a:	6013      	str	r3, [r2, #0]
}
 8013a2c:	bf00      	nop
 8013a2e:	46bd      	mov	sp, r7
 8013a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a34:	4770      	bx	lr

08013a36 <LL_RCC_MSI_Disable>:
{
 8013a36:	b480      	push	{r7}
 8013a38:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8013a3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013a44:	f023 0301 	bic.w	r3, r3, #1
 8013a48:	6013      	str	r3, [r2, #0]
}
 8013a4a:	bf00      	nop
 8013a4c:	46bd      	mov	sp, r7
 8013a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a52:	4770      	bx	lr

08013a54 <LL_RCC_MSI_IsReady>:
{
 8013a54:	b480      	push	{r7}
 8013a56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8013a58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	f003 0302 	and.w	r3, r3, #2
 8013a62:	2b02      	cmp	r3, #2
 8013a64:	d101      	bne.n	8013a6a <LL_RCC_MSI_IsReady+0x16>
 8013a66:	2301      	movs	r3, #1
 8013a68:	e000      	b.n	8013a6c <LL_RCC_MSI_IsReady+0x18>
 8013a6a:	2300      	movs	r3, #0
}
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	46bd      	mov	sp, r7
 8013a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a74:	4770      	bx	lr

08013a76 <LL_RCC_MSI_SetRange>:
{
 8013a76:	b480      	push	{r7}
 8013a78:	b083      	sub	sp, #12
 8013a7a:	af00      	add	r7, sp, #0
 8013a7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8013a7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8013a88:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	4313      	orrs	r3, r2
 8013a90:	600b      	str	r3, [r1, #0]
}
 8013a92:	bf00      	nop
 8013a94:	370c      	adds	r7, #12
 8013a96:	46bd      	mov	sp, r7
 8013a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a9c:	4770      	bx	lr

08013a9e <LL_RCC_MSI_GetRange>:
{
 8013a9e:	b480      	push	{r7}
 8013aa0:	b083      	sub	sp, #12
 8013aa2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8013aa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013aae:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	2bb0      	cmp	r3, #176	@ 0xb0
 8013ab4:	d901      	bls.n	8013aba <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8013ab6:	23b0      	movs	r3, #176	@ 0xb0
 8013ab8:	607b      	str	r3, [r7, #4]
  return msiRange;
 8013aba:	687b      	ldr	r3, [r7, #4]
}
 8013abc:	4618      	mov	r0, r3
 8013abe:	370c      	adds	r7, #12
 8013ac0:	46bd      	mov	sp, r7
 8013ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac6:	4770      	bx	lr

08013ac8 <LL_RCC_MSI_SetCalibTrimming>:
{
 8013ac8:	b480      	push	{r7}
 8013aca:	b083      	sub	sp, #12
 8013acc:	af00      	add	r7, sp, #0
 8013ace:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8013ad0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013ad4:	685b      	ldr	r3, [r3, #4]
 8013ad6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	021b      	lsls	r3, r3, #8
 8013ade:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8013ae2:	4313      	orrs	r3, r2
 8013ae4:	604b      	str	r3, [r1, #4]
}
 8013ae6:	bf00      	nop
 8013ae8:	370c      	adds	r7, #12
 8013aea:	46bd      	mov	sp, r7
 8013aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af0:	4770      	bx	lr

08013af2 <LL_RCC_SetSysClkSource>:
{
 8013af2:	b480      	push	{r7}
 8013af4:	b083      	sub	sp, #12
 8013af6:	af00      	add	r7, sp, #0
 8013af8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8013afa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013afe:	689b      	ldr	r3, [r3, #8]
 8013b00:	f023 0203 	bic.w	r2, r3, #3
 8013b04:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	4313      	orrs	r3, r2
 8013b0c:	608b      	str	r3, [r1, #8]
}
 8013b0e:	bf00      	nop
 8013b10:	370c      	adds	r7, #12
 8013b12:	46bd      	mov	sp, r7
 8013b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b18:	4770      	bx	lr

08013b1a <LL_RCC_GetSysClkSource>:
{
 8013b1a:	b480      	push	{r7}
 8013b1c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8013b1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013b22:	689b      	ldr	r3, [r3, #8]
 8013b24:	f003 030c 	and.w	r3, r3, #12
}
 8013b28:	4618      	mov	r0, r3
 8013b2a:	46bd      	mov	sp, r7
 8013b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b30:	4770      	bx	lr

08013b32 <LL_RCC_SetAHBPrescaler>:
{
 8013b32:	b480      	push	{r7}
 8013b34:	b083      	sub	sp, #12
 8013b36:	af00      	add	r7, sp, #0
 8013b38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8013b3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013b3e:	689b      	ldr	r3, [r3, #8]
 8013b40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8013b44:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	4313      	orrs	r3, r2
 8013b4c:	608b      	str	r3, [r1, #8]
}
 8013b4e:	bf00      	nop
 8013b50:	370c      	adds	r7, #12
 8013b52:	46bd      	mov	sp, r7
 8013b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b58:	4770      	bx	lr

08013b5a <LL_C2_RCC_SetAHBPrescaler>:
{
 8013b5a:	b480      	push	{r7}
 8013b5c:	b083      	sub	sp, #12
 8013b5e:	af00      	add	r7, sp, #0
 8013b60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8013b62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013b66:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8013b6a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8013b6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	4313      	orrs	r3, r2
 8013b76:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8013b7a:	bf00      	nop
 8013b7c:	370c      	adds	r7, #12
 8013b7e:	46bd      	mov	sp, r7
 8013b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b84:	4770      	bx	lr

08013b86 <LL_RCC_SetAHB4Prescaler>:
{
 8013b86:	b480      	push	{r7}
 8013b88:	b083      	sub	sp, #12
 8013b8a:	af00      	add	r7, sp, #0
 8013b8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8013b8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013b92:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8013b96:	f023 020f 	bic.w	r2, r3, #15
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	091b      	lsrs	r3, r3, #4
 8013b9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8013ba2:	4313      	orrs	r3, r2
 8013ba4:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8013ba8:	bf00      	nop
 8013baa:	370c      	adds	r7, #12
 8013bac:	46bd      	mov	sp, r7
 8013bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bb2:	4770      	bx	lr

08013bb4 <LL_RCC_SetAPB1Prescaler>:
{
 8013bb4:	b480      	push	{r7}
 8013bb6:	b083      	sub	sp, #12
 8013bb8:	af00      	add	r7, sp, #0
 8013bba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8013bbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013bc0:	689b      	ldr	r3, [r3, #8]
 8013bc2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8013bc6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	4313      	orrs	r3, r2
 8013bce:	608b      	str	r3, [r1, #8]
}
 8013bd0:	bf00      	nop
 8013bd2:	370c      	adds	r7, #12
 8013bd4:	46bd      	mov	sp, r7
 8013bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bda:	4770      	bx	lr

08013bdc <LL_RCC_SetAPB2Prescaler>:
{
 8013bdc:	b480      	push	{r7}
 8013bde:	b083      	sub	sp, #12
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8013be4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013be8:	689b      	ldr	r3, [r3, #8]
 8013bea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8013bee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	4313      	orrs	r3, r2
 8013bf6:	608b      	str	r3, [r1, #8]
}
 8013bf8:	bf00      	nop
 8013bfa:	370c      	adds	r7, #12
 8013bfc:	46bd      	mov	sp, r7
 8013bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c02:	4770      	bx	lr

08013c04 <LL_RCC_GetAHBPrescaler>:
{
 8013c04:	b480      	push	{r7}
 8013c06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8013c08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013c0c:	689b      	ldr	r3, [r3, #8]
 8013c0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8013c12:	4618      	mov	r0, r3
 8013c14:	46bd      	mov	sp, r7
 8013c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c1a:	4770      	bx	lr

08013c1c <LL_RCC_GetAHB4Prescaler>:
{
 8013c1c:	b480      	push	{r7}
 8013c1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8013c20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013c24:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8013c28:	011b      	lsls	r3, r3, #4
 8013c2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8013c2e:	4618      	mov	r0, r3
 8013c30:	46bd      	mov	sp, r7
 8013c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c36:	4770      	bx	lr

08013c38 <LL_RCC_GetAPB1Prescaler>:
{
 8013c38:	b480      	push	{r7}
 8013c3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8013c3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013c40:	689b      	ldr	r3, [r3, #8]
 8013c42:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8013c46:	4618      	mov	r0, r3
 8013c48:	46bd      	mov	sp, r7
 8013c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c4e:	4770      	bx	lr

08013c50 <LL_RCC_GetAPB2Prescaler>:
{
 8013c50:	b480      	push	{r7}
 8013c52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8013c54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013c58:	689b      	ldr	r3, [r3, #8]
 8013c5a:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8013c5e:	4618      	mov	r0, r3
 8013c60:	46bd      	mov	sp, r7
 8013c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c66:	4770      	bx	lr

08013c68 <LL_RCC_PLL_Enable>:
{
 8013c68:	b480      	push	{r7}
 8013c6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8013c6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013c76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8013c7a:	6013      	str	r3, [r2, #0]
}
 8013c7c:	bf00      	nop
 8013c7e:	46bd      	mov	sp, r7
 8013c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c84:	4770      	bx	lr

08013c86 <LL_RCC_PLL_Disable>:
{
 8013c86:	b480      	push	{r7}
 8013c88:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8013c8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013c94:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8013c98:	6013      	str	r3, [r2, #0]
}
 8013c9a:	bf00      	nop
 8013c9c:	46bd      	mov	sp, r7
 8013c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ca2:	4770      	bx	lr

08013ca4 <LL_RCC_PLL_IsReady>:
{
 8013ca4:	b480      	push	{r7}
 8013ca6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8013ca8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013cb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013cb6:	d101      	bne.n	8013cbc <LL_RCC_PLL_IsReady+0x18>
 8013cb8:	2301      	movs	r3, #1
 8013cba:	e000      	b.n	8013cbe <LL_RCC_PLL_IsReady+0x1a>
 8013cbc:	2300      	movs	r3, #0
}
 8013cbe:	4618      	mov	r0, r3
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc6:	4770      	bx	lr

08013cc8 <LL_RCC_PLL_GetN>:
{
 8013cc8:	b480      	push	{r7}
 8013cca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8013ccc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013cd0:	68db      	ldr	r3, [r3, #12]
 8013cd2:	0a1b      	lsrs	r3, r3, #8
 8013cd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8013cd8:	4618      	mov	r0, r3
 8013cda:	46bd      	mov	sp, r7
 8013cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ce0:	4770      	bx	lr

08013ce2 <LL_RCC_PLL_GetR>:
{
 8013ce2:	b480      	push	{r7}
 8013ce4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8013ce6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013cea:	68db      	ldr	r3, [r3, #12]
 8013cec:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8013cf0:	4618      	mov	r0, r3
 8013cf2:	46bd      	mov	sp, r7
 8013cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf8:	4770      	bx	lr

08013cfa <LL_RCC_PLL_GetDivider>:
{
 8013cfa:	b480      	push	{r7}
 8013cfc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8013cfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013d02:	68db      	ldr	r3, [r3, #12]
 8013d04:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8013d08:	4618      	mov	r0, r3
 8013d0a:	46bd      	mov	sp, r7
 8013d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d10:	4770      	bx	lr

08013d12 <LL_RCC_PLL_GetMainSource>:
{
 8013d12:	b480      	push	{r7}
 8013d14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8013d16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013d1a:	68db      	ldr	r3, [r3, #12]
 8013d1c:	f003 0303 	and.w	r3, r3, #3
}
 8013d20:	4618      	mov	r0, r3
 8013d22:	46bd      	mov	sp, r7
 8013d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d28:	4770      	bx	lr

08013d2a <LL_RCC_IsActiveFlag_HPRE>:
{
 8013d2a:	b480      	push	{r7}
 8013d2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8013d2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013d32:	689b      	ldr	r3, [r3, #8]
 8013d34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013d38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013d3c:	d101      	bne.n	8013d42 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8013d3e:	2301      	movs	r3, #1
 8013d40:	e000      	b.n	8013d44 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8013d42:	2300      	movs	r3, #0
}
 8013d44:	4618      	mov	r0, r3
 8013d46:	46bd      	mov	sp, r7
 8013d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d4c:	4770      	bx	lr

08013d4e <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8013d4e:	b480      	push	{r7}
 8013d50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8013d52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013d56:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8013d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013d5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013d62:	d101      	bne.n	8013d68 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8013d64:	2301      	movs	r3, #1
 8013d66:	e000      	b.n	8013d6a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8013d68:	2300      	movs	r3, #0
}
 8013d6a:	4618      	mov	r0, r3
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d72:	4770      	bx	lr

08013d74 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8013d74:	b480      	push	{r7}
 8013d76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8013d78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013d7c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8013d80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013d84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013d88:	d101      	bne.n	8013d8e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8013d8a:	2301      	movs	r3, #1
 8013d8c:	e000      	b.n	8013d90 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8013d8e:	2300      	movs	r3, #0
}
 8013d90:	4618      	mov	r0, r3
 8013d92:	46bd      	mov	sp, r7
 8013d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d98:	4770      	bx	lr

08013d9a <LL_RCC_IsActiveFlag_PPRE1>:
{
 8013d9a:	b480      	push	{r7}
 8013d9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8013d9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013da2:	689b      	ldr	r3, [r3, #8]
 8013da4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013da8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013dac:	d101      	bne.n	8013db2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8013dae:	2301      	movs	r3, #1
 8013db0:	e000      	b.n	8013db4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8013db2:	2300      	movs	r3, #0
}
 8013db4:	4618      	mov	r0, r3
 8013db6:	46bd      	mov	sp, r7
 8013db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dbc:	4770      	bx	lr

08013dbe <LL_RCC_IsActiveFlag_PPRE2>:
{
 8013dbe:	b480      	push	{r7}
 8013dc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8013dc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013dc6:	689b      	ldr	r3, [r3, #8]
 8013dc8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8013dcc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8013dd0:	d101      	bne.n	8013dd6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8013dd2:	2301      	movs	r3, #1
 8013dd4:	e000      	b.n	8013dd8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8013dd6:	2300      	movs	r3, #0
}
 8013dd8:	4618      	mov	r0, r3
 8013dda:	46bd      	mov	sp, r7
 8013ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de0:	4770      	bx	lr
	...

08013de4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8013de4:	b590      	push	{r4, r7, lr}
 8013de6:	b08d      	sub	sp, #52	@ 0x34
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d101      	bne.n	8013df6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8013df2:	2301      	movs	r3, #1
 8013df4:	e363      	b.n	80144be <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	f003 0320 	and.w	r3, r3, #32
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	f000 808d 	beq.w	8013f1e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8013e04:	f7ff fe89 	bl	8013b1a <LL_RCC_GetSysClkSource>
 8013e08:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8013e0a:	f7ff ff82 	bl	8013d12 <LL_RCC_PLL_GetMainSource>
 8013e0e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8013e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d005      	beq.n	8013e22 <HAL_RCC_OscConfig+0x3e>
 8013e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e18:	2b0c      	cmp	r3, #12
 8013e1a:	d147      	bne.n	8013eac <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8013e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e1e:	2b01      	cmp	r3, #1
 8013e20:	d144      	bne.n	8013eac <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	69db      	ldr	r3, [r3, #28]
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d101      	bne.n	8013e2e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8013e2a:	2301      	movs	r3, #1
 8013e2c:	e347      	b.n	80144be <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8013e32:	f7ff fe34 	bl	8013a9e <LL_RCC_MSI_GetRange>
 8013e36:	4603      	mov	r3, r0
 8013e38:	429c      	cmp	r4, r3
 8013e3a:	d914      	bls.n	8013e66 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e40:	4618      	mov	r0, r3
 8013e42:	f000 fd2f 	bl	80148a4 <RCC_SetFlashLatencyFromMSIRange>
 8013e46:	4603      	mov	r3, r0
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d001      	beq.n	8013e50 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8013e4c:	2301      	movs	r3, #1
 8013e4e:	e336      	b.n	80144be <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e54:	4618      	mov	r0, r3
 8013e56:	f7ff fe0e 	bl	8013a76 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	6a1b      	ldr	r3, [r3, #32]
 8013e5e:	4618      	mov	r0, r3
 8013e60:	f7ff fe32 	bl	8013ac8 <LL_RCC_MSI_SetCalibTrimming>
 8013e64:	e013      	b.n	8013e8e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	f7ff fe03 	bl	8013a76 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	6a1b      	ldr	r3, [r3, #32]
 8013e74:	4618      	mov	r0, r3
 8013e76:	f7ff fe27 	bl	8013ac8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e7e:	4618      	mov	r0, r3
 8013e80:	f000 fd10 	bl	80148a4 <RCC_SetFlashLatencyFromMSIRange>
 8013e84:	4603      	mov	r3, r0
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d001      	beq.n	8013e8e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8013e8a:	2301      	movs	r3, #1
 8013e8c:	e317      	b.n	80144be <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8013e8e:	f000 fcc9 	bl	8014824 <HAL_RCC_GetHCLKFreq>
 8013e92:	4603      	mov	r3, r0
 8013e94:	4aa4      	ldr	r2, [pc, #656]	@ (8014128 <HAL_RCC_OscConfig+0x344>)
 8013e96:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8013e98:	4ba4      	ldr	r3, [pc, #656]	@ (801412c <HAL_RCC_OscConfig+0x348>)
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	f7fb fbd9 	bl	800f654 <HAL_InitTick>
 8013ea2:	4603      	mov	r3, r0
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d039      	beq.n	8013f1c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8013ea8:	2301      	movs	r3, #1
 8013eaa:	e308      	b.n	80144be <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	69db      	ldr	r3, [r3, #28]
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d01e      	beq.n	8013ef2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8013eb4:	f7ff fdb0 	bl	8013a18 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8013eb8:	f7fb fc1a 	bl	800f6f0 <HAL_GetTick>
 8013ebc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8013ebe:	e008      	b.n	8013ed2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8013ec0:	f7fb fc16 	bl	800f6f0 <HAL_GetTick>
 8013ec4:	4602      	mov	r2, r0
 8013ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ec8:	1ad3      	subs	r3, r2, r3
 8013eca:	2b02      	cmp	r3, #2
 8013ecc:	d901      	bls.n	8013ed2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8013ece:	2303      	movs	r3, #3
 8013ed0:	e2f5      	b.n	80144be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8013ed2:	f7ff fdbf 	bl	8013a54 <LL_RCC_MSI_IsReady>
 8013ed6:	4603      	mov	r3, r0
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d0f1      	beq.n	8013ec0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ee0:	4618      	mov	r0, r3
 8013ee2:	f7ff fdc8 	bl	8013a76 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	6a1b      	ldr	r3, [r3, #32]
 8013eea:	4618      	mov	r0, r3
 8013eec:	f7ff fdec 	bl	8013ac8 <LL_RCC_MSI_SetCalibTrimming>
 8013ef0:	e015      	b.n	8013f1e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8013ef2:	f7ff fda0 	bl	8013a36 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8013ef6:	f7fb fbfb 	bl	800f6f0 <HAL_GetTick>
 8013efa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8013efc:	e008      	b.n	8013f10 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8013efe:	f7fb fbf7 	bl	800f6f0 <HAL_GetTick>
 8013f02:	4602      	mov	r2, r0
 8013f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f06:	1ad3      	subs	r3, r2, r3
 8013f08:	2b02      	cmp	r3, #2
 8013f0a:	d901      	bls.n	8013f10 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8013f0c:	2303      	movs	r3, #3
 8013f0e:	e2d6      	b.n	80144be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8013f10:	f7ff fda0 	bl	8013a54 <LL_RCC_MSI_IsReady>
 8013f14:	4603      	mov	r3, r0
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d1f1      	bne.n	8013efe <HAL_RCC_OscConfig+0x11a>
 8013f1a:	e000      	b.n	8013f1e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8013f1c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	f003 0301 	and.w	r3, r3, #1
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d047      	beq.n	8013fba <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8013f2a:	f7ff fdf6 	bl	8013b1a <LL_RCC_GetSysClkSource>
 8013f2e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8013f30:	f7ff feef 	bl	8013d12 <LL_RCC_PLL_GetMainSource>
 8013f34:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8013f36:	6a3b      	ldr	r3, [r7, #32]
 8013f38:	2b08      	cmp	r3, #8
 8013f3a:	d005      	beq.n	8013f48 <HAL_RCC_OscConfig+0x164>
 8013f3c:	6a3b      	ldr	r3, [r7, #32]
 8013f3e:	2b0c      	cmp	r3, #12
 8013f40:	d108      	bne.n	8013f54 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8013f42:	69fb      	ldr	r3, [r7, #28]
 8013f44:	2b03      	cmp	r3, #3
 8013f46:	d105      	bne.n	8013f54 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	685b      	ldr	r3, [r3, #4]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d134      	bne.n	8013fba <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8013f50:	2301      	movs	r3, #1
 8013f52:	e2b4      	b.n	80144be <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	685b      	ldr	r3, [r3, #4]
 8013f58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013f5c:	d102      	bne.n	8013f64 <HAL_RCC_OscConfig+0x180>
 8013f5e:	f7ff fbdd 	bl	801371c <LL_RCC_HSE_Enable>
 8013f62:	e001      	b.n	8013f68 <HAL_RCC_OscConfig+0x184>
 8013f64:	f7ff fbe9 	bl	801373a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	685b      	ldr	r3, [r3, #4]
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d012      	beq.n	8013f96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013f70:	f7fb fbbe 	bl	800f6f0 <HAL_GetTick>
 8013f74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8013f76:	e008      	b.n	8013f8a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8013f78:	f7fb fbba 	bl	800f6f0 <HAL_GetTick>
 8013f7c:	4602      	mov	r2, r0
 8013f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f80:	1ad3      	subs	r3, r2, r3
 8013f82:	2b64      	cmp	r3, #100	@ 0x64
 8013f84:	d901      	bls.n	8013f8a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8013f86:	2303      	movs	r3, #3
 8013f88:	e299      	b.n	80144be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8013f8a:	f7ff fbe5 	bl	8013758 <LL_RCC_HSE_IsReady>
 8013f8e:	4603      	mov	r3, r0
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d0f1      	beq.n	8013f78 <HAL_RCC_OscConfig+0x194>
 8013f94:	e011      	b.n	8013fba <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013f96:	f7fb fbab 	bl	800f6f0 <HAL_GetTick>
 8013f9a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8013f9c:	e008      	b.n	8013fb0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8013f9e:	f7fb fba7 	bl	800f6f0 <HAL_GetTick>
 8013fa2:	4602      	mov	r2, r0
 8013fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fa6:	1ad3      	subs	r3, r2, r3
 8013fa8:	2b64      	cmp	r3, #100	@ 0x64
 8013faa:	d901      	bls.n	8013fb0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8013fac:	2303      	movs	r3, #3
 8013fae:	e286      	b.n	80144be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8013fb0:	f7ff fbd2 	bl	8013758 <LL_RCC_HSE_IsReady>
 8013fb4:	4603      	mov	r3, r0
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d1f1      	bne.n	8013f9e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	681b      	ldr	r3, [r3, #0]
 8013fbe:	f003 0302 	and.w	r3, r3, #2
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d04c      	beq.n	8014060 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8013fc6:	f7ff fda8 	bl	8013b1a <LL_RCC_GetSysClkSource>
 8013fca:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8013fcc:	f7ff fea1 	bl	8013d12 <LL_RCC_PLL_GetMainSource>
 8013fd0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8013fd2:	69bb      	ldr	r3, [r7, #24]
 8013fd4:	2b04      	cmp	r3, #4
 8013fd6:	d005      	beq.n	8013fe4 <HAL_RCC_OscConfig+0x200>
 8013fd8:	69bb      	ldr	r3, [r7, #24]
 8013fda:	2b0c      	cmp	r3, #12
 8013fdc:	d10e      	bne.n	8013ffc <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8013fde:	697b      	ldr	r3, [r7, #20]
 8013fe0:	2b02      	cmp	r3, #2
 8013fe2:	d10b      	bne.n	8013ffc <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	68db      	ldr	r3, [r3, #12]
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d101      	bne.n	8013ff0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8013fec:	2301      	movs	r3, #1
 8013fee:	e266      	b.n	80144be <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	691b      	ldr	r3, [r3, #16]
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	f7ff fbf1 	bl	80137dc <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8013ffa:	e031      	b.n	8014060 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	68db      	ldr	r3, [r3, #12]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d019      	beq.n	8014038 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8014004:	f7ff fbba 	bl	801377c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014008:	f7fb fb72 	bl	800f6f0 <HAL_GetTick>
 801400c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 801400e:	e008      	b.n	8014022 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8014010:	f7fb fb6e 	bl	800f6f0 <HAL_GetTick>
 8014014:	4602      	mov	r2, r0
 8014016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014018:	1ad3      	subs	r3, r2, r3
 801401a:	2b02      	cmp	r3, #2
 801401c:	d901      	bls.n	8014022 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801401e:	2303      	movs	r3, #3
 8014020:	e24d      	b.n	80144be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8014022:	f7ff fbc9 	bl	80137b8 <LL_RCC_HSI_IsReady>
 8014026:	4603      	mov	r3, r0
 8014028:	2b00      	cmp	r3, #0
 801402a:	d0f1      	beq.n	8014010 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	691b      	ldr	r3, [r3, #16]
 8014030:	4618      	mov	r0, r3
 8014032:	f7ff fbd3 	bl	80137dc <LL_RCC_HSI_SetCalibTrimming>
 8014036:	e013      	b.n	8014060 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8014038:	f7ff fbaf 	bl	801379a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801403c:	f7fb fb58 	bl	800f6f0 <HAL_GetTick>
 8014040:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8014042:	e008      	b.n	8014056 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8014044:	f7fb fb54 	bl	800f6f0 <HAL_GetTick>
 8014048:	4602      	mov	r2, r0
 801404a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801404c:	1ad3      	subs	r3, r2, r3
 801404e:	2b02      	cmp	r3, #2
 8014050:	d901      	bls.n	8014056 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8014052:	2303      	movs	r3, #3
 8014054:	e233      	b.n	80144be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8014056:	f7ff fbaf 	bl	80137b8 <LL_RCC_HSI_IsReady>
 801405a:	4603      	mov	r3, r0
 801405c:	2b00      	cmp	r3, #0
 801405e:	d1f1      	bne.n	8014044 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	f003 0308 	and.w	r3, r3, #8
 8014068:	2b00      	cmp	r3, #0
 801406a:	d106      	bne.n	801407a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8014074:	2b00      	cmp	r3, #0
 8014076:	f000 80a3 	beq.w	80141c0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	695b      	ldr	r3, [r3, #20]
 801407e:	2b00      	cmp	r3, #0
 8014080:	d076      	beq.n	8014170 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	f003 0310 	and.w	r3, r3, #16
 801408a:	2b00      	cmp	r3, #0
 801408c:	d046      	beq.n	801411c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 801408e:	f7ff fc66 	bl	801395e <LL_RCC_LSI1_IsReady>
 8014092:	4603      	mov	r3, r0
 8014094:	2b00      	cmp	r3, #0
 8014096:	d113      	bne.n	80140c0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8014098:	f7ff fc3f 	bl	801391a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801409c:	f7fb fb28 	bl	800f6f0 <HAL_GetTick>
 80140a0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80140a2:	e008      	b.n	80140b6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80140a4:	f7fb fb24 	bl	800f6f0 <HAL_GetTick>
 80140a8:	4602      	mov	r2, r0
 80140aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140ac:	1ad3      	subs	r3, r2, r3
 80140ae:	2b02      	cmp	r3, #2
 80140b0:	d901      	bls.n	80140b6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80140b2:	2303      	movs	r3, #3
 80140b4:	e203      	b.n	80144be <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80140b6:	f7ff fc52 	bl	801395e <LL_RCC_LSI1_IsReady>
 80140ba:	4603      	mov	r3, r0
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d0f1      	beq.n	80140a4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80140c0:	f7ff fc5f 	bl	8013982 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80140c4:	f7fb fb14 	bl	800f6f0 <HAL_GetTick>
 80140c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80140ca:	e008      	b.n	80140de <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80140cc:	f7fb fb10 	bl	800f6f0 <HAL_GetTick>
 80140d0:	4602      	mov	r2, r0
 80140d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140d4:	1ad3      	subs	r3, r2, r3
 80140d6:	2b03      	cmp	r3, #3
 80140d8:	d901      	bls.n	80140de <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80140da:	2303      	movs	r3, #3
 80140dc:	e1ef      	b.n	80144be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80140de:	f7ff fc72 	bl	80139c6 <LL_RCC_LSI2_IsReady>
 80140e2:	4603      	mov	r3, r0
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d0f1      	beq.n	80140cc <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	699b      	ldr	r3, [r3, #24]
 80140ec:	4618      	mov	r0, r3
 80140ee:	f7ff fc7c 	bl	80139ea <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80140f2:	f7ff fc23 	bl	801393c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80140f6:	f7fb fafb 	bl	800f6f0 <HAL_GetTick>
 80140fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80140fc:	e008      	b.n	8014110 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80140fe:	f7fb faf7 	bl	800f6f0 <HAL_GetTick>
 8014102:	4602      	mov	r2, r0
 8014104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014106:	1ad3      	subs	r3, r2, r3
 8014108:	2b02      	cmp	r3, #2
 801410a:	d901      	bls.n	8014110 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 801410c:	2303      	movs	r3, #3
 801410e:	e1d6      	b.n	80144be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8014110:	f7ff fc25 	bl	801395e <LL_RCC_LSI1_IsReady>
 8014114:	4603      	mov	r3, r0
 8014116:	2b00      	cmp	r3, #0
 8014118:	d1f1      	bne.n	80140fe <HAL_RCC_OscConfig+0x31a>
 801411a:	e051      	b.n	80141c0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 801411c:	f7ff fbfd 	bl	801391a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014120:	f7fb fae6 	bl	800f6f0 <HAL_GetTick>
 8014124:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8014126:	e00c      	b.n	8014142 <HAL_RCC_OscConfig+0x35e>
 8014128:	2000007c 	.word	0x2000007c
 801412c:	20000080 	.word	0x20000080
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8014130:	f7fb fade 	bl	800f6f0 <HAL_GetTick>
 8014134:	4602      	mov	r2, r0
 8014136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014138:	1ad3      	subs	r3, r2, r3
 801413a:	2b02      	cmp	r3, #2
 801413c:	d901      	bls.n	8014142 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 801413e:	2303      	movs	r3, #3
 8014140:	e1bd      	b.n	80144be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8014142:	f7ff fc0c 	bl	801395e <LL_RCC_LSI1_IsReady>
 8014146:	4603      	mov	r3, r0
 8014148:	2b00      	cmp	r3, #0
 801414a:	d0f1      	beq.n	8014130 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 801414c:	f7ff fc2a 	bl	80139a4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8014150:	e008      	b.n	8014164 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8014152:	f7fb facd 	bl	800f6f0 <HAL_GetTick>
 8014156:	4602      	mov	r2, r0
 8014158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801415a:	1ad3      	subs	r3, r2, r3
 801415c:	2b03      	cmp	r3, #3
 801415e:	d901      	bls.n	8014164 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8014160:	2303      	movs	r3, #3
 8014162:	e1ac      	b.n	80144be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8014164:	f7ff fc2f 	bl	80139c6 <LL_RCC_LSI2_IsReady>
 8014168:	4603      	mov	r3, r0
 801416a:	2b00      	cmp	r3, #0
 801416c:	d1f1      	bne.n	8014152 <HAL_RCC_OscConfig+0x36e>
 801416e:	e027      	b.n	80141c0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8014170:	f7ff fc18 	bl	80139a4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014174:	f7fb fabc 	bl	800f6f0 <HAL_GetTick>
 8014178:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 801417a:	e008      	b.n	801418e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 801417c:	f7fb fab8 	bl	800f6f0 <HAL_GetTick>
 8014180:	4602      	mov	r2, r0
 8014182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014184:	1ad3      	subs	r3, r2, r3
 8014186:	2b03      	cmp	r3, #3
 8014188:	d901      	bls.n	801418e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 801418a:	2303      	movs	r3, #3
 801418c:	e197      	b.n	80144be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 801418e:	f7ff fc1a 	bl	80139c6 <LL_RCC_LSI2_IsReady>
 8014192:	4603      	mov	r3, r0
 8014194:	2b00      	cmp	r3, #0
 8014196:	d1f1      	bne.n	801417c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8014198:	f7ff fbd0 	bl	801393c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801419c:	f7fb faa8 	bl	800f6f0 <HAL_GetTick>
 80141a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80141a2:	e008      	b.n	80141b6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80141a4:	f7fb faa4 	bl	800f6f0 <HAL_GetTick>
 80141a8:	4602      	mov	r2, r0
 80141aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141ac:	1ad3      	subs	r3, r2, r3
 80141ae:	2b02      	cmp	r3, #2
 80141b0:	d901      	bls.n	80141b6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80141b2:	2303      	movs	r3, #3
 80141b4:	e183      	b.n	80144be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80141b6:	f7ff fbd2 	bl	801395e <LL_RCC_LSI1_IsReady>
 80141ba:	4603      	mov	r3, r0
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d1f1      	bne.n	80141a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	f003 0304 	and.w	r3, r3, #4
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d05b      	beq.n	8014284 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80141cc:	4ba7      	ldr	r3, [pc, #668]	@ (801446c <HAL_RCC_OscConfig+0x688>)
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d114      	bne.n	8014202 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80141d8:	f7fe fbe2 	bl	80129a0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80141dc:	f7fb fa88 	bl	800f6f0 <HAL_GetTick>
 80141e0:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80141e2:	e008      	b.n	80141f6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80141e4:	f7fb fa84 	bl	800f6f0 <HAL_GetTick>
 80141e8:	4602      	mov	r2, r0
 80141ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141ec:	1ad3      	subs	r3, r2, r3
 80141ee:	2b02      	cmp	r3, #2
 80141f0:	d901      	bls.n	80141f6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80141f2:	2303      	movs	r3, #3
 80141f4:	e163      	b.n	80144be <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80141f6:	4b9d      	ldr	r3, [pc, #628]	@ (801446c <HAL_RCC_OscConfig+0x688>)
 80141f8:	681b      	ldr	r3, [r3, #0]
 80141fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d0f0      	beq.n	80141e4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	689b      	ldr	r3, [r3, #8]
 8014206:	2b01      	cmp	r3, #1
 8014208:	d102      	bne.n	8014210 <HAL_RCC_OscConfig+0x42c>
 801420a:	f7ff fb30 	bl	801386e <LL_RCC_LSE_Enable>
 801420e:	e00c      	b.n	801422a <HAL_RCC_OscConfig+0x446>
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	689b      	ldr	r3, [r3, #8]
 8014214:	2b05      	cmp	r3, #5
 8014216:	d104      	bne.n	8014222 <HAL_RCC_OscConfig+0x43e>
 8014218:	f7ff fb4b 	bl	80138b2 <LL_RCC_LSE_EnableBypass>
 801421c:	f7ff fb27 	bl	801386e <LL_RCC_LSE_Enable>
 8014220:	e003      	b.n	801422a <HAL_RCC_OscConfig+0x446>
 8014222:	f7ff fb35 	bl	8013890 <LL_RCC_LSE_Disable>
 8014226:	f7ff fb55 	bl	80138d4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	689b      	ldr	r3, [r3, #8]
 801422e:	2b00      	cmp	r3, #0
 8014230:	d014      	beq.n	801425c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014232:	f7fb fa5d 	bl	800f6f0 <HAL_GetTick>
 8014236:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8014238:	e00a      	b.n	8014250 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801423a:	f7fb fa59 	bl	800f6f0 <HAL_GetTick>
 801423e:	4602      	mov	r2, r0
 8014240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014242:	1ad3      	subs	r3, r2, r3
 8014244:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014248:	4293      	cmp	r3, r2
 801424a:	d901      	bls.n	8014250 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 801424c:	2303      	movs	r3, #3
 801424e:	e136      	b.n	80144be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8014250:	f7ff fb51 	bl	80138f6 <LL_RCC_LSE_IsReady>
 8014254:	4603      	mov	r3, r0
 8014256:	2b00      	cmp	r3, #0
 8014258:	d0ef      	beq.n	801423a <HAL_RCC_OscConfig+0x456>
 801425a:	e013      	b.n	8014284 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801425c:	f7fb fa48 	bl	800f6f0 <HAL_GetTick>
 8014260:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8014262:	e00a      	b.n	801427a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8014264:	f7fb fa44 	bl	800f6f0 <HAL_GetTick>
 8014268:	4602      	mov	r2, r0
 801426a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801426c:	1ad3      	subs	r3, r2, r3
 801426e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014272:	4293      	cmp	r3, r2
 8014274:	d901      	bls.n	801427a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8014276:	2303      	movs	r3, #3
 8014278:	e121      	b.n	80144be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 801427a:	f7ff fb3c 	bl	80138f6 <LL_RCC_LSE_IsReady>
 801427e:	4603      	mov	r3, r0
 8014280:	2b00      	cmp	r3, #0
 8014282:	d1ef      	bne.n	8014264 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801428c:	2b00      	cmp	r3, #0
 801428e:	d02c      	beq.n	80142ea <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014294:	2b00      	cmp	r3, #0
 8014296:	d014      	beq.n	80142c2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8014298:	f7ff fab5 	bl	8013806 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801429c:	f7fb fa28 	bl	800f6f0 <HAL_GetTick>
 80142a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80142a2:	e008      	b.n	80142b6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80142a4:	f7fb fa24 	bl	800f6f0 <HAL_GetTick>
 80142a8:	4602      	mov	r2, r0
 80142aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142ac:	1ad3      	subs	r3, r2, r3
 80142ae:	2b02      	cmp	r3, #2
 80142b0:	d901      	bls.n	80142b6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80142b2:	2303      	movs	r3, #3
 80142b4:	e103      	b.n	80144be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80142b6:	f7ff fac8 	bl	801384a <LL_RCC_HSI48_IsReady>
 80142ba:	4603      	mov	r3, r0
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d0f1      	beq.n	80142a4 <HAL_RCC_OscConfig+0x4c0>
 80142c0:	e013      	b.n	80142ea <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80142c2:	f7ff fab1 	bl	8013828 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80142c6:	f7fb fa13 	bl	800f6f0 <HAL_GetTick>
 80142ca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80142cc:	e008      	b.n	80142e0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80142ce:	f7fb fa0f 	bl	800f6f0 <HAL_GetTick>
 80142d2:	4602      	mov	r2, r0
 80142d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142d6:	1ad3      	subs	r3, r2, r3
 80142d8:	2b02      	cmp	r3, #2
 80142da:	d901      	bls.n	80142e0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80142dc:	2303      	movs	r3, #3
 80142de:	e0ee      	b.n	80144be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80142e0:	f7ff fab3 	bl	801384a <LL_RCC_HSI48_IsReady>
 80142e4:	4603      	mov	r3, r0
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d1f1      	bne.n	80142ce <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	f000 80e4 	beq.w	80144bc <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80142f4:	f7ff fc11 	bl	8013b1a <LL_RCC_GetSysClkSource>
 80142f8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80142fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80142fe:	68db      	ldr	r3, [r3, #12]
 8014300:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014306:	2b02      	cmp	r3, #2
 8014308:	f040 80b4 	bne.w	8014474 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	f003 0203 	and.w	r2, r3, #3
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014316:	429a      	cmp	r2, r3
 8014318:	d123      	bne.n	8014362 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801431a:	68fb      	ldr	r3, [r7, #12]
 801431c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014324:	429a      	cmp	r2, r3
 8014326:	d11c      	bne.n	8014362 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8014328:	68fb      	ldr	r3, [r7, #12]
 801432a:	0a1b      	lsrs	r3, r3, #8
 801432c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8014334:	429a      	cmp	r2, r3
 8014336:	d114      	bne.n	8014362 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8014338:	68fb      	ldr	r3, [r7, #12]
 801433a:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8014342:	429a      	cmp	r2, r3
 8014344:	d10d      	bne.n	8014362 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8014350:	429a      	cmp	r2, r3
 8014352:	d106      	bne.n	8014362 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8014354:	68fb      	ldr	r3, [r7, #12]
 8014356:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 801435e:	429a      	cmp	r2, r3
 8014360:	d05d      	beq.n	801441e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014362:	693b      	ldr	r3, [r7, #16]
 8014364:	2b0c      	cmp	r3, #12
 8014366:	d058      	beq.n	801441a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8014368:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8014372:	2b00      	cmp	r3, #0
 8014374:	d001      	beq.n	801437a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8014376:	2301      	movs	r3, #1
 8014378:	e0a1      	b.n	80144be <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 801437a:	f7ff fc84 	bl	8013c86 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 801437e:	f7fb f9b7 	bl	800f6f0 <HAL_GetTick>
 8014382:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8014384:	e008      	b.n	8014398 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014386:	f7fb f9b3 	bl	800f6f0 <HAL_GetTick>
 801438a:	4602      	mov	r2, r0
 801438c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801438e:	1ad3      	subs	r3, r2, r3
 8014390:	2b02      	cmp	r3, #2
 8014392:	d901      	bls.n	8014398 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8014394:	2303      	movs	r3, #3
 8014396:	e092      	b.n	80144be <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8014398:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d1ef      	bne.n	8014386 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80143a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80143aa:	68da      	ldr	r2, [r3, #12]
 80143ac:	4b30      	ldr	r3, [pc, #192]	@ (8014470 <HAL_RCC_OscConfig+0x68c>)
 80143ae:	4013      	ands	r3, r2
 80143b0:	687a      	ldr	r2, [r7, #4]
 80143b2:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80143b4:	687a      	ldr	r2, [r7, #4]
 80143b6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80143b8:	4311      	orrs	r1, r2
 80143ba:	687a      	ldr	r2, [r7, #4]
 80143bc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80143be:	0212      	lsls	r2, r2, #8
 80143c0:	4311      	orrs	r1, r2
 80143c2:	687a      	ldr	r2, [r7, #4]
 80143c4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80143c6:	4311      	orrs	r1, r2
 80143c8:	687a      	ldr	r2, [r7, #4]
 80143ca:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80143cc:	4311      	orrs	r1, r2
 80143ce:	687a      	ldr	r2, [r7, #4]
 80143d0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80143d2:	430a      	orrs	r2, r1
 80143d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80143d8:	4313      	orrs	r3, r2
 80143da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80143dc:	f7ff fc44 	bl	8013c68 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80143e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80143e4:	68db      	ldr	r3, [r3, #12]
 80143e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80143ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80143ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80143f0:	f7fb f97e 	bl	800f6f0 <HAL_GetTick>
 80143f4:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80143f6:	e008      	b.n	801440a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80143f8:	f7fb f97a 	bl	800f6f0 <HAL_GetTick>
 80143fc:	4602      	mov	r2, r0
 80143fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014400:	1ad3      	subs	r3, r2, r3
 8014402:	2b02      	cmp	r3, #2
 8014404:	d901      	bls.n	801440a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8014406:	2303      	movs	r3, #3
 8014408:	e059      	b.n	80144be <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801440a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014414:	2b00      	cmp	r3, #0
 8014416:	d0ef      	beq.n	80143f8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014418:	e050      	b.n	80144bc <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 801441a:	2301      	movs	r3, #1
 801441c:	e04f      	b.n	80144be <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801441e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014428:	2b00      	cmp	r3, #0
 801442a:	d147      	bne.n	80144bc <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 801442c:	f7ff fc1c 	bl	8013c68 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8014430:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014434:	68db      	ldr	r3, [r3, #12]
 8014436:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801443a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801443e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8014440:	f7fb f956 	bl	800f6f0 <HAL_GetTick>
 8014444:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014446:	e008      	b.n	801445a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014448:	f7fb f952 	bl	800f6f0 <HAL_GetTick>
 801444c:	4602      	mov	r2, r0
 801444e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014450:	1ad3      	subs	r3, r2, r3
 8014452:	2b02      	cmp	r3, #2
 8014454:	d901      	bls.n	801445a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8014456:	2303      	movs	r3, #3
 8014458:	e031      	b.n	80144be <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801445a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014464:	2b00      	cmp	r3, #0
 8014466:	d0ef      	beq.n	8014448 <HAL_RCC_OscConfig+0x664>
 8014468:	e028      	b.n	80144bc <HAL_RCC_OscConfig+0x6d8>
 801446a:	bf00      	nop
 801446c:	58000400 	.word	0x58000400
 8014470:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014474:	693b      	ldr	r3, [r7, #16]
 8014476:	2b0c      	cmp	r3, #12
 8014478:	d01e      	beq.n	80144b8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801447a:	f7ff fc04 	bl	8013c86 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801447e:	f7fb f937 	bl	800f6f0 <HAL_GetTick>
 8014482:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8014484:	e008      	b.n	8014498 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014486:	f7fb f933 	bl	800f6f0 <HAL_GetTick>
 801448a:	4602      	mov	r2, r0
 801448c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801448e:	1ad3      	subs	r3, r2, r3
 8014490:	2b02      	cmp	r3, #2
 8014492:	d901      	bls.n	8014498 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8014494:	2303      	movs	r3, #3
 8014496:	e012      	b.n	80144be <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8014498:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d1ef      	bne.n	8014486 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80144a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80144aa:	68da      	ldr	r2, [r3, #12]
 80144ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80144b0:	4b05      	ldr	r3, [pc, #20]	@ (80144c8 <HAL_RCC_OscConfig+0x6e4>)
 80144b2:	4013      	ands	r3, r2
 80144b4:	60cb      	str	r3, [r1, #12]
 80144b6:	e001      	b.n	80144bc <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80144b8:	2301      	movs	r3, #1
 80144ba:	e000      	b.n	80144be <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80144bc:	2300      	movs	r3, #0
}
 80144be:	4618      	mov	r0, r3
 80144c0:	3734      	adds	r7, #52	@ 0x34
 80144c2:	46bd      	mov	sp, r7
 80144c4:	bd90      	pop	{r4, r7, pc}
 80144c6:	bf00      	nop
 80144c8:	eefefffc 	.word	0xeefefffc

080144cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80144cc:	b580      	push	{r7, lr}
 80144ce:	b084      	sub	sp, #16
 80144d0:	af00      	add	r7, sp, #0
 80144d2:	6078      	str	r0, [r7, #4]
 80144d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d101      	bne.n	80144e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80144dc:	2301      	movs	r3, #1
 80144de:	e12d      	b.n	801473c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80144e0:	4b98      	ldr	r3, [pc, #608]	@ (8014744 <HAL_RCC_ClockConfig+0x278>)
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	f003 0307 	and.w	r3, r3, #7
 80144e8:	683a      	ldr	r2, [r7, #0]
 80144ea:	429a      	cmp	r2, r3
 80144ec:	d91b      	bls.n	8014526 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80144ee:	4b95      	ldr	r3, [pc, #596]	@ (8014744 <HAL_RCC_ClockConfig+0x278>)
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	f023 0207 	bic.w	r2, r3, #7
 80144f6:	4993      	ldr	r1, [pc, #588]	@ (8014744 <HAL_RCC_ClockConfig+0x278>)
 80144f8:	683b      	ldr	r3, [r7, #0]
 80144fa:	4313      	orrs	r3, r2
 80144fc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80144fe:	f7fb f8f7 	bl	800f6f0 <HAL_GetTick>
 8014502:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014504:	e008      	b.n	8014518 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8014506:	f7fb f8f3 	bl	800f6f0 <HAL_GetTick>
 801450a:	4602      	mov	r2, r0
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	1ad3      	subs	r3, r2, r3
 8014510:	2b02      	cmp	r3, #2
 8014512:	d901      	bls.n	8014518 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8014514:	2303      	movs	r3, #3
 8014516:	e111      	b.n	801473c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014518:	4b8a      	ldr	r3, [pc, #552]	@ (8014744 <HAL_RCC_ClockConfig+0x278>)
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	f003 0307 	and.w	r3, r3, #7
 8014520:	683a      	ldr	r2, [r7, #0]
 8014522:	429a      	cmp	r2, r3
 8014524:	d1ef      	bne.n	8014506 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	f003 0302 	and.w	r3, r3, #2
 801452e:	2b00      	cmp	r3, #0
 8014530:	d016      	beq.n	8014560 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	689b      	ldr	r3, [r3, #8]
 8014536:	4618      	mov	r0, r3
 8014538:	f7ff fafb 	bl	8013b32 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801453c:	f7fb f8d8 	bl	800f6f0 <HAL_GetTick>
 8014540:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8014542:	e008      	b.n	8014556 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8014544:	f7fb f8d4 	bl	800f6f0 <HAL_GetTick>
 8014548:	4602      	mov	r2, r0
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	1ad3      	subs	r3, r2, r3
 801454e:	2b02      	cmp	r3, #2
 8014550:	d901      	bls.n	8014556 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8014552:	2303      	movs	r3, #3
 8014554:	e0f2      	b.n	801473c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8014556:	f7ff fbe8 	bl	8013d2a <LL_RCC_IsActiveFlag_HPRE>
 801455a:	4603      	mov	r3, r0
 801455c:	2b00      	cmp	r3, #0
 801455e:	d0f1      	beq.n	8014544 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	f003 0320 	and.w	r3, r3, #32
 8014568:	2b00      	cmp	r3, #0
 801456a:	d016      	beq.n	801459a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	695b      	ldr	r3, [r3, #20]
 8014570:	4618      	mov	r0, r3
 8014572:	f7ff faf2 	bl	8013b5a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8014576:	f7fb f8bb 	bl	800f6f0 <HAL_GetTick>
 801457a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 801457c:	e008      	b.n	8014590 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801457e:	f7fb f8b7 	bl	800f6f0 <HAL_GetTick>
 8014582:	4602      	mov	r2, r0
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	1ad3      	subs	r3, r2, r3
 8014588:	2b02      	cmp	r3, #2
 801458a:	d901      	bls.n	8014590 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 801458c:	2303      	movs	r3, #3
 801458e:	e0d5      	b.n	801473c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8014590:	f7ff fbdd 	bl	8013d4e <LL_RCC_IsActiveFlag_C2HPRE>
 8014594:	4603      	mov	r3, r0
 8014596:	2b00      	cmp	r3, #0
 8014598:	d0f1      	beq.n	801457e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	681b      	ldr	r3, [r3, #0]
 801459e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d016      	beq.n	80145d4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	699b      	ldr	r3, [r3, #24]
 80145aa:	4618      	mov	r0, r3
 80145ac:	f7ff faeb 	bl	8013b86 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80145b0:	f7fb f89e 	bl	800f6f0 <HAL_GetTick>
 80145b4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80145b6:	e008      	b.n	80145ca <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80145b8:	f7fb f89a 	bl	800f6f0 <HAL_GetTick>
 80145bc:	4602      	mov	r2, r0
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	1ad3      	subs	r3, r2, r3
 80145c2:	2b02      	cmp	r3, #2
 80145c4:	d901      	bls.n	80145ca <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80145c6:	2303      	movs	r3, #3
 80145c8:	e0b8      	b.n	801473c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80145ca:	f7ff fbd3 	bl	8013d74 <LL_RCC_IsActiveFlag_SHDHPRE>
 80145ce:	4603      	mov	r3, r0
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d0f1      	beq.n	80145b8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	f003 0304 	and.w	r3, r3, #4
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d016      	beq.n	801460e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	68db      	ldr	r3, [r3, #12]
 80145e4:	4618      	mov	r0, r3
 80145e6:	f7ff fae5 	bl	8013bb4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80145ea:	f7fb f881 	bl	800f6f0 <HAL_GetTick>
 80145ee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80145f0:	e008      	b.n	8014604 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80145f2:	f7fb f87d 	bl	800f6f0 <HAL_GetTick>
 80145f6:	4602      	mov	r2, r0
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	1ad3      	subs	r3, r2, r3
 80145fc:	2b02      	cmp	r3, #2
 80145fe:	d901      	bls.n	8014604 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8014600:	2303      	movs	r3, #3
 8014602:	e09b      	b.n	801473c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8014604:	f7ff fbc9 	bl	8013d9a <LL_RCC_IsActiveFlag_PPRE1>
 8014608:	4603      	mov	r3, r0
 801460a:	2b00      	cmp	r3, #0
 801460c:	d0f1      	beq.n	80145f2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	f003 0308 	and.w	r3, r3, #8
 8014616:	2b00      	cmp	r3, #0
 8014618:	d017      	beq.n	801464a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	691b      	ldr	r3, [r3, #16]
 801461e:	00db      	lsls	r3, r3, #3
 8014620:	4618      	mov	r0, r3
 8014622:	f7ff fadb 	bl	8013bdc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8014626:	f7fb f863 	bl	800f6f0 <HAL_GetTick>
 801462a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 801462c:	e008      	b.n	8014640 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801462e:	f7fb f85f 	bl	800f6f0 <HAL_GetTick>
 8014632:	4602      	mov	r2, r0
 8014634:	68fb      	ldr	r3, [r7, #12]
 8014636:	1ad3      	subs	r3, r2, r3
 8014638:	2b02      	cmp	r3, #2
 801463a:	d901      	bls.n	8014640 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 801463c:	2303      	movs	r3, #3
 801463e:	e07d      	b.n	801473c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8014640:	f7ff fbbd 	bl	8013dbe <LL_RCC_IsActiveFlag_PPRE2>
 8014644:	4603      	mov	r3, r0
 8014646:	2b00      	cmp	r3, #0
 8014648:	d0f1      	beq.n	801462e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	f003 0301 	and.w	r3, r3, #1
 8014652:	2b00      	cmp	r3, #0
 8014654:	d043      	beq.n	80146de <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	685b      	ldr	r3, [r3, #4]
 801465a:	2b02      	cmp	r3, #2
 801465c:	d106      	bne.n	801466c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 801465e:	f7ff f87b 	bl	8013758 <LL_RCC_HSE_IsReady>
 8014662:	4603      	mov	r3, r0
 8014664:	2b00      	cmp	r3, #0
 8014666:	d11e      	bne.n	80146a6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8014668:	2301      	movs	r3, #1
 801466a:	e067      	b.n	801473c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	685b      	ldr	r3, [r3, #4]
 8014670:	2b03      	cmp	r3, #3
 8014672:	d106      	bne.n	8014682 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8014674:	f7ff fb16 	bl	8013ca4 <LL_RCC_PLL_IsReady>
 8014678:	4603      	mov	r3, r0
 801467a:	2b00      	cmp	r3, #0
 801467c:	d113      	bne.n	80146a6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 801467e:	2301      	movs	r3, #1
 8014680:	e05c      	b.n	801473c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	685b      	ldr	r3, [r3, #4]
 8014686:	2b00      	cmp	r3, #0
 8014688:	d106      	bne.n	8014698 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 801468a:	f7ff f9e3 	bl	8013a54 <LL_RCC_MSI_IsReady>
 801468e:	4603      	mov	r3, r0
 8014690:	2b00      	cmp	r3, #0
 8014692:	d108      	bne.n	80146a6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8014694:	2301      	movs	r3, #1
 8014696:	e051      	b.n	801473c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8014698:	f7ff f88e 	bl	80137b8 <LL_RCC_HSI_IsReady>
 801469c:	4603      	mov	r3, r0
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d101      	bne.n	80146a6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80146a2:	2301      	movs	r3, #1
 80146a4:	e04a      	b.n	801473c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	685b      	ldr	r3, [r3, #4]
 80146aa:	4618      	mov	r0, r3
 80146ac:	f7ff fa21 	bl	8013af2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80146b0:	f7fb f81e 	bl	800f6f0 <HAL_GetTick>
 80146b4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80146b6:	e00a      	b.n	80146ce <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80146b8:	f7fb f81a 	bl	800f6f0 <HAL_GetTick>
 80146bc:	4602      	mov	r2, r0
 80146be:	68fb      	ldr	r3, [r7, #12]
 80146c0:	1ad3      	subs	r3, r2, r3
 80146c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80146c6:	4293      	cmp	r3, r2
 80146c8:	d901      	bls.n	80146ce <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80146ca:	2303      	movs	r3, #3
 80146cc:	e036      	b.n	801473c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80146ce:	f7ff fa24 	bl	8013b1a <LL_RCC_GetSysClkSource>
 80146d2:	4602      	mov	r2, r0
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	685b      	ldr	r3, [r3, #4]
 80146d8:	009b      	lsls	r3, r3, #2
 80146da:	429a      	cmp	r2, r3
 80146dc:	d1ec      	bne.n	80146b8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80146de:	4b19      	ldr	r3, [pc, #100]	@ (8014744 <HAL_RCC_ClockConfig+0x278>)
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	f003 0307 	and.w	r3, r3, #7
 80146e6:	683a      	ldr	r2, [r7, #0]
 80146e8:	429a      	cmp	r2, r3
 80146ea:	d21b      	bcs.n	8014724 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80146ec:	4b15      	ldr	r3, [pc, #84]	@ (8014744 <HAL_RCC_ClockConfig+0x278>)
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	f023 0207 	bic.w	r2, r3, #7
 80146f4:	4913      	ldr	r1, [pc, #76]	@ (8014744 <HAL_RCC_ClockConfig+0x278>)
 80146f6:	683b      	ldr	r3, [r7, #0]
 80146f8:	4313      	orrs	r3, r2
 80146fa:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80146fc:	f7fa fff8 	bl	800f6f0 <HAL_GetTick>
 8014700:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014702:	e008      	b.n	8014716 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8014704:	f7fa fff4 	bl	800f6f0 <HAL_GetTick>
 8014708:	4602      	mov	r2, r0
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	1ad3      	subs	r3, r2, r3
 801470e:	2b02      	cmp	r3, #2
 8014710:	d901      	bls.n	8014716 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8014712:	2303      	movs	r3, #3
 8014714:	e012      	b.n	801473c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014716:	4b0b      	ldr	r3, [pc, #44]	@ (8014744 <HAL_RCC_ClockConfig+0x278>)
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	f003 0307 	and.w	r3, r3, #7
 801471e:	683a      	ldr	r2, [r7, #0]
 8014720:	429a      	cmp	r2, r3
 8014722:	d1ef      	bne.n	8014704 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8014724:	f000 f87e 	bl	8014824 <HAL_RCC_GetHCLKFreq>
 8014728:	4603      	mov	r3, r0
 801472a:	4a07      	ldr	r2, [pc, #28]	@ (8014748 <HAL_RCC_ClockConfig+0x27c>)
 801472c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 801472e:	f7fa ffeb 	bl	800f708 <HAL_GetTickPrio>
 8014732:	4603      	mov	r3, r0
 8014734:	4618      	mov	r0, r3
 8014736:	f7fa ff8d 	bl	800f654 <HAL_InitTick>
 801473a:	4603      	mov	r3, r0
}
 801473c:	4618      	mov	r0, r3
 801473e:	3710      	adds	r7, #16
 8014740:	46bd      	mov	sp, r7
 8014742:	bd80      	pop	{r7, pc}
 8014744:	58004000 	.word	0x58004000
 8014748:	2000007c 	.word	0x2000007c

0801474c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801474c:	b590      	push	{r4, r7, lr}
 801474e:	b085      	sub	sp, #20
 8014750:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014752:	f7ff f9e2 	bl	8013b1a <LL_RCC_GetSysClkSource>
 8014756:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	2b00      	cmp	r3, #0
 801475c:	d10a      	bne.n	8014774 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 801475e:	f7ff f99e 	bl	8013a9e <LL_RCC_MSI_GetRange>
 8014762:	4603      	mov	r3, r0
 8014764:	091b      	lsrs	r3, r3, #4
 8014766:	f003 030f 	and.w	r3, r3, #15
 801476a:	4a2b      	ldr	r2, [pc, #172]	@ (8014818 <HAL_RCC_GetSysClockFreq+0xcc>)
 801476c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014770:	60fb      	str	r3, [r7, #12]
 8014772:	e04b      	b.n	801480c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	2b04      	cmp	r3, #4
 8014778:	d102      	bne.n	8014780 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801477a:	4b28      	ldr	r3, [pc, #160]	@ (801481c <HAL_RCC_GetSysClockFreq+0xd0>)
 801477c:	60fb      	str	r3, [r7, #12]
 801477e:	e045      	b.n	801480c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	2b08      	cmp	r3, #8
 8014784:	d10a      	bne.n	801479c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8014786:	f7fe ffb7 	bl	80136f8 <LL_RCC_HSE_IsEnabledDiv2>
 801478a:	4603      	mov	r3, r0
 801478c:	2b01      	cmp	r3, #1
 801478e:	d102      	bne.n	8014796 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8014790:	4b22      	ldr	r3, [pc, #136]	@ (801481c <HAL_RCC_GetSysClockFreq+0xd0>)
 8014792:	60fb      	str	r3, [r7, #12]
 8014794:	e03a      	b.n	801480c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8014796:	4b22      	ldr	r3, [pc, #136]	@ (8014820 <HAL_RCC_GetSysClockFreq+0xd4>)
 8014798:	60fb      	str	r3, [r7, #12]
 801479a:	e037      	b.n	801480c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 801479c:	f7ff fab9 	bl	8013d12 <LL_RCC_PLL_GetMainSource>
 80147a0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80147a2:	683b      	ldr	r3, [r7, #0]
 80147a4:	2b02      	cmp	r3, #2
 80147a6:	d003      	beq.n	80147b0 <HAL_RCC_GetSysClockFreq+0x64>
 80147a8:	683b      	ldr	r3, [r7, #0]
 80147aa:	2b03      	cmp	r3, #3
 80147ac:	d003      	beq.n	80147b6 <HAL_RCC_GetSysClockFreq+0x6a>
 80147ae:	e00d      	b.n	80147cc <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80147b0:	4b1a      	ldr	r3, [pc, #104]	@ (801481c <HAL_RCC_GetSysClockFreq+0xd0>)
 80147b2:	60bb      	str	r3, [r7, #8]
        break;
 80147b4:	e015      	b.n	80147e2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80147b6:	f7fe ff9f 	bl	80136f8 <LL_RCC_HSE_IsEnabledDiv2>
 80147ba:	4603      	mov	r3, r0
 80147bc:	2b01      	cmp	r3, #1
 80147be:	d102      	bne.n	80147c6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80147c0:	4b16      	ldr	r3, [pc, #88]	@ (801481c <HAL_RCC_GetSysClockFreq+0xd0>)
 80147c2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80147c4:	e00d      	b.n	80147e2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80147c6:	4b16      	ldr	r3, [pc, #88]	@ (8014820 <HAL_RCC_GetSysClockFreq+0xd4>)
 80147c8:	60bb      	str	r3, [r7, #8]
        break;
 80147ca:	e00a      	b.n	80147e2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80147cc:	f7ff f967 	bl	8013a9e <LL_RCC_MSI_GetRange>
 80147d0:	4603      	mov	r3, r0
 80147d2:	091b      	lsrs	r3, r3, #4
 80147d4:	f003 030f 	and.w	r3, r3, #15
 80147d8:	4a0f      	ldr	r2, [pc, #60]	@ (8014818 <HAL_RCC_GetSysClockFreq+0xcc>)
 80147da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80147de:	60bb      	str	r3, [r7, #8]
        break;
 80147e0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80147e2:	f7ff fa71 	bl	8013cc8 <LL_RCC_PLL_GetN>
 80147e6:	4602      	mov	r2, r0
 80147e8:	68bb      	ldr	r3, [r7, #8]
 80147ea:	fb03 f402 	mul.w	r4, r3, r2
 80147ee:	f7ff fa84 	bl	8013cfa <LL_RCC_PLL_GetDivider>
 80147f2:	4603      	mov	r3, r0
 80147f4:	091b      	lsrs	r3, r3, #4
 80147f6:	3301      	adds	r3, #1
 80147f8:	fbb4 f4f3 	udiv	r4, r4, r3
 80147fc:	f7ff fa71 	bl	8013ce2 <LL_RCC_PLL_GetR>
 8014800:	4603      	mov	r3, r0
 8014802:	0f5b      	lsrs	r3, r3, #29
 8014804:	3301      	adds	r3, #1
 8014806:	fbb4 f3f3 	udiv	r3, r4, r3
 801480a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 801480c:	68fb      	ldr	r3, [r7, #12]
}
 801480e:	4618      	mov	r0, r3
 8014810:	3714      	adds	r7, #20
 8014812:	46bd      	mov	sp, r7
 8014814:	bd90      	pop	{r4, r7, pc}
 8014816:	bf00      	nop
 8014818:	0801e1c8 	.word	0x0801e1c8
 801481c:	00f42400 	.word	0x00f42400
 8014820:	01e84800 	.word	0x01e84800

08014824 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8014824:	b598      	push	{r3, r4, r7, lr}
 8014826:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8014828:	f7ff ff90 	bl	801474c <HAL_RCC_GetSysClockFreq>
 801482c:	4604      	mov	r4, r0
 801482e:	f7ff f9e9 	bl	8013c04 <LL_RCC_GetAHBPrescaler>
 8014832:	4603      	mov	r3, r0
 8014834:	091b      	lsrs	r3, r3, #4
 8014836:	f003 030f 	and.w	r3, r3, #15
 801483a:	4a03      	ldr	r2, [pc, #12]	@ (8014848 <HAL_RCC_GetHCLKFreq+0x24>)
 801483c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014840:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8014844:	4618      	mov	r0, r3
 8014846:	bd98      	pop	{r3, r4, r7, pc}
 8014848:	0801e168 	.word	0x0801e168

0801484c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801484c:	b598      	push	{r3, r4, r7, lr}
 801484e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8014850:	f7ff ffe8 	bl	8014824 <HAL_RCC_GetHCLKFreq>
 8014854:	4604      	mov	r4, r0
 8014856:	f7ff f9ef 	bl	8013c38 <LL_RCC_GetAPB1Prescaler>
 801485a:	4603      	mov	r3, r0
 801485c:	0a1b      	lsrs	r3, r3, #8
 801485e:	f003 0307 	and.w	r3, r3, #7
 8014862:	4a04      	ldr	r2, [pc, #16]	@ (8014874 <HAL_RCC_GetPCLK1Freq+0x28>)
 8014864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014868:	f003 031f 	and.w	r3, r3, #31
 801486c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8014870:	4618      	mov	r0, r3
 8014872:	bd98      	pop	{r3, r4, r7, pc}
 8014874:	0801e1a8 	.word	0x0801e1a8

08014878 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8014878:	b598      	push	{r3, r4, r7, lr}
 801487a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 801487c:	f7ff ffd2 	bl	8014824 <HAL_RCC_GetHCLKFreq>
 8014880:	4604      	mov	r4, r0
 8014882:	f7ff f9e5 	bl	8013c50 <LL_RCC_GetAPB2Prescaler>
 8014886:	4603      	mov	r3, r0
 8014888:	0adb      	lsrs	r3, r3, #11
 801488a:	f003 0307 	and.w	r3, r3, #7
 801488e:	4a04      	ldr	r2, [pc, #16]	@ (80148a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8014890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014894:	f003 031f 	and.w	r3, r3, #31
 8014898:	fa24 f303 	lsr.w	r3, r4, r3
}
 801489c:	4618      	mov	r0, r3
 801489e:	bd98      	pop	{r3, r4, r7, pc}
 80148a0:	0801e1a8 	.word	0x0801e1a8

080148a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80148a4:	b590      	push	{r4, r7, lr}
 80148a6:	b085      	sub	sp, #20
 80148a8:	af00      	add	r7, sp, #0
 80148aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	2bb0      	cmp	r3, #176	@ 0xb0
 80148b0:	d903      	bls.n	80148ba <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80148b2:	4b15      	ldr	r3, [pc, #84]	@ (8014908 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80148b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80148b6:	60fb      	str	r3, [r7, #12]
 80148b8:	e007      	b.n	80148ca <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	091b      	lsrs	r3, r3, #4
 80148be:	f003 030f 	and.w	r3, r3, #15
 80148c2:	4a11      	ldr	r2, [pc, #68]	@ (8014908 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80148c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80148c8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80148ca:	f7ff f9a7 	bl	8013c1c <LL_RCC_GetAHB4Prescaler>
 80148ce:	4603      	mov	r3, r0
 80148d0:	091b      	lsrs	r3, r3, #4
 80148d2:	f003 030f 	and.w	r3, r3, #15
 80148d6:	4a0d      	ldr	r2, [pc, #52]	@ (801490c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80148d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80148dc:	68fa      	ldr	r2, [r7, #12]
 80148de:	fbb2 f3f3 	udiv	r3, r2, r3
 80148e2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80148e4:	68bb      	ldr	r3, [r7, #8]
 80148e6:	4a0a      	ldr	r2, [pc, #40]	@ (8014910 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80148e8:	fba2 2303 	umull	r2, r3, r2, r3
 80148ec:	0c9c      	lsrs	r4, r3, #18
 80148ee:	f7fe f867 	bl	80129c0 <HAL_PWREx_GetVoltageRange>
 80148f2:	4603      	mov	r3, r0
 80148f4:	4619      	mov	r1, r3
 80148f6:	4620      	mov	r0, r4
 80148f8:	f000 f80c 	bl	8014914 <RCC_SetFlashLatency>
 80148fc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80148fe:	4618      	mov	r0, r3
 8014900:	3714      	adds	r7, #20
 8014902:	46bd      	mov	sp, r7
 8014904:	bd90      	pop	{r4, r7, pc}
 8014906:	bf00      	nop
 8014908:	0801e1c8 	.word	0x0801e1c8
 801490c:	0801e168 	.word	0x0801e168
 8014910:	431bde83 	.word	0x431bde83

08014914 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8014914:	b590      	push	{r4, r7, lr}
 8014916:	b093      	sub	sp, #76	@ 0x4c
 8014918:	af00      	add	r7, sp, #0
 801491a:	6078      	str	r0, [r7, #4]
 801491c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 801491e:	4b37      	ldr	r3, [pc, #220]	@ (80149fc <RCC_SetFlashLatency+0xe8>)
 8014920:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8014924:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014926:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 801492a:	4a35      	ldr	r2, [pc, #212]	@ (8014a00 <RCC_SetFlashLatency+0xec>)
 801492c:	f107 031c 	add.w	r3, r7, #28
 8014930:	ca07      	ldmia	r2, {r0, r1, r2}
 8014932:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8014936:	4b33      	ldr	r3, [pc, #204]	@ (8014a04 <RCC_SetFlashLatency+0xf0>)
 8014938:	f107 040c 	add.w	r4, r7, #12
 801493c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801493e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8014942:	2300      	movs	r3, #0
 8014944:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8014946:	683b      	ldr	r3, [r7, #0]
 8014948:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801494c:	d11a      	bne.n	8014984 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 801494e:	2300      	movs	r3, #0
 8014950:	643b      	str	r3, [r7, #64]	@ 0x40
 8014952:	e013      	b.n	801497c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8014954:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014956:	009b      	lsls	r3, r3, #2
 8014958:	3348      	adds	r3, #72	@ 0x48
 801495a:	443b      	add	r3, r7
 801495c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8014960:	687a      	ldr	r2, [r7, #4]
 8014962:	429a      	cmp	r2, r3
 8014964:	d807      	bhi.n	8014976 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8014966:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014968:	009b      	lsls	r3, r3, #2
 801496a:	3348      	adds	r3, #72	@ 0x48
 801496c:	443b      	add	r3, r7
 801496e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8014972:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8014974:	e020      	b.n	80149b8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8014976:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014978:	3301      	adds	r3, #1
 801497a:	643b      	str	r3, [r7, #64]	@ 0x40
 801497c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801497e:	2b03      	cmp	r3, #3
 8014980:	d9e8      	bls.n	8014954 <RCC_SetFlashLatency+0x40>
 8014982:	e019      	b.n	80149b8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8014984:	2300      	movs	r3, #0
 8014986:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014988:	e013      	b.n	80149b2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 801498a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801498c:	009b      	lsls	r3, r3, #2
 801498e:	3348      	adds	r3, #72	@ 0x48
 8014990:	443b      	add	r3, r7
 8014992:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8014996:	687a      	ldr	r2, [r7, #4]
 8014998:	429a      	cmp	r2, r3
 801499a:	d807      	bhi.n	80149ac <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 801499c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801499e:	009b      	lsls	r3, r3, #2
 80149a0:	3348      	adds	r3, #72	@ 0x48
 80149a2:	443b      	add	r3, r7
 80149a4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80149a8:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80149aa:	e005      	b.n	80149b8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80149ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80149ae:	3301      	adds	r3, #1
 80149b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80149b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80149b4:	2b02      	cmp	r3, #2
 80149b6:	d9e8      	bls.n	801498a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80149b8:	4b13      	ldr	r3, [pc, #76]	@ (8014a08 <RCC_SetFlashLatency+0xf4>)
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	f023 0207 	bic.w	r2, r3, #7
 80149c0:	4911      	ldr	r1, [pc, #68]	@ (8014a08 <RCC_SetFlashLatency+0xf4>)
 80149c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80149c4:	4313      	orrs	r3, r2
 80149c6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80149c8:	f7fa fe92 	bl	800f6f0 <HAL_GetTick>
 80149cc:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80149ce:	e008      	b.n	80149e2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80149d0:	f7fa fe8e 	bl	800f6f0 <HAL_GetTick>
 80149d4:	4602      	mov	r2, r0
 80149d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149d8:	1ad3      	subs	r3, r2, r3
 80149da:	2b02      	cmp	r3, #2
 80149dc:	d901      	bls.n	80149e2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80149de:	2303      	movs	r3, #3
 80149e0:	e007      	b.n	80149f2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80149e2:	4b09      	ldr	r3, [pc, #36]	@ (8014a08 <RCC_SetFlashLatency+0xf4>)
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	f003 0307 	and.w	r3, r3, #7
 80149ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80149ec:	429a      	cmp	r2, r3
 80149ee:	d1ef      	bne.n	80149d0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80149f0:	2300      	movs	r3, #0
}
 80149f2:	4618      	mov	r0, r3
 80149f4:	374c      	adds	r7, #76	@ 0x4c
 80149f6:	46bd      	mov	sp, r7
 80149f8:	bd90      	pop	{r4, r7, pc}
 80149fa:	bf00      	nop
 80149fc:	0801dfcc 	.word	0x0801dfcc
 8014a00:	0801dfdc 	.word	0x0801dfdc
 8014a04:	0801dfe8 	.word	0x0801dfe8
 8014a08:	58004000 	.word	0x58004000

08014a0c <LL_RCC_LSE_IsEnabled>:
{
 8014a0c:	b480      	push	{r7}
 8014a0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8014a10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014a18:	f003 0301 	and.w	r3, r3, #1
 8014a1c:	2b01      	cmp	r3, #1
 8014a1e:	d101      	bne.n	8014a24 <LL_RCC_LSE_IsEnabled+0x18>
 8014a20:	2301      	movs	r3, #1
 8014a22:	e000      	b.n	8014a26 <LL_RCC_LSE_IsEnabled+0x1a>
 8014a24:	2300      	movs	r3, #0
}
 8014a26:	4618      	mov	r0, r3
 8014a28:	46bd      	mov	sp, r7
 8014a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a2e:	4770      	bx	lr

08014a30 <LL_RCC_LSE_IsReady>:
{
 8014a30:	b480      	push	{r7}
 8014a32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8014a34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014a3c:	f003 0302 	and.w	r3, r3, #2
 8014a40:	2b02      	cmp	r3, #2
 8014a42:	d101      	bne.n	8014a48 <LL_RCC_LSE_IsReady+0x18>
 8014a44:	2301      	movs	r3, #1
 8014a46:	e000      	b.n	8014a4a <LL_RCC_LSE_IsReady+0x1a>
 8014a48:	2300      	movs	r3, #0
}
 8014a4a:	4618      	mov	r0, r3
 8014a4c:	46bd      	mov	sp, r7
 8014a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a52:	4770      	bx	lr

08014a54 <LL_RCC_SetRFWKPClockSource>:
{
 8014a54:	b480      	push	{r7}
 8014a56:	b083      	sub	sp, #12
 8014a58:	af00      	add	r7, sp, #0
 8014a5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8014a5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8014a64:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8014a68:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	4313      	orrs	r3, r2
 8014a70:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8014a74:	bf00      	nop
 8014a76:	370c      	adds	r7, #12
 8014a78:	46bd      	mov	sp, r7
 8014a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a7e:	4770      	bx	lr

08014a80 <LL_RCC_SetSMPSClockSource>:
{
 8014a80:	b480      	push	{r7}
 8014a82:	b083      	sub	sp, #12
 8014a84:	af00      	add	r7, sp, #0
 8014a86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8014a88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014a8e:	f023 0203 	bic.w	r2, r3, #3
 8014a92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	4313      	orrs	r3, r2
 8014a9a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8014a9c:	bf00      	nop
 8014a9e:	370c      	adds	r7, #12
 8014aa0:	46bd      	mov	sp, r7
 8014aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aa6:	4770      	bx	lr

08014aa8 <LL_RCC_SetSMPSPrescaler>:
{
 8014aa8:	b480      	push	{r7}
 8014aaa:	b083      	sub	sp, #12
 8014aac:	af00      	add	r7, sp, #0
 8014aae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8014ab0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014ab6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8014aba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	4313      	orrs	r3, r2
 8014ac2:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8014ac4:	bf00      	nop
 8014ac6:	370c      	adds	r7, #12
 8014ac8:	46bd      	mov	sp, r7
 8014aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ace:	4770      	bx	lr

08014ad0 <LL_RCC_SetUSARTClockSource>:
{
 8014ad0:	b480      	push	{r7}
 8014ad2:	b083      	sub	sp, #12
 8014ad4:	af00      	add	r7, sp, #0
 8014ad6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8014ad8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014ae0:	f023 0203 	bic.w	r2, r3, #3
 8014ae4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	4313      	orrs	r3, r2
 8014aec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8014af0:	bf00      	nop
 8014af2:	370c      	adds	r7, #12
 8014af4:	46bd      	mov	sp, r7
 8014af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014afa:	4770      	bx	lr

08014afc <LL_RCC_SetLPUARTClockSource>:
{
 8014afc:	b480      	push	{r7}
 8014afe:	b083      	sub	sp, #12
 8014b00:	af00      	add	r7, sp, #0
 8014b02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8014b04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014b0c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8014b10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	4313      	orrs	r3, r2
 8014b18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8014b1c:	bf00      	nop
 8014b1e:	370c      	adds	r7, #12
 8014b20:	46bd      	mov	sp, r7
 8014b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b26:	4770      	bx	lr

08014b28 <LL_RCC_SetI2CClockSource>:
{
 8014b28:	b480      	push	{r7}
 8014b2a:	b083      	sub	sp, #12
 8014b2c:	af00      	add	r7, sp, #0
 8014b2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8014b30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014b34:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	091b      	lsrs	r3, r3, #4
 8014b3c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8014b40:	43db      	mvns	r3, r3
 8014b42:	401a      	ands	r2, r3
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	011b      	lsls	r3, r3, #4
 8014b48:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8014b4c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014b50:	4313      	orrs	r3, r2
 8014b52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8014b56:	bf00      	nop
 8014b58:	370c      	adds	r7, #12
 8014b5a:	46bd      	mov	sp, r7
 8014b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b60:	4770      	bx	lr

08014b62 <LL_RCC_SetLPTIMClockSource>:
{
 8014b62:	b480      	push	{r7}
 8014b64:	b083      	sub	sp, #12
 8014b66:	af00      	add	r7, sp, #0
 8014b68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8014b6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014b6e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	0c1b      	lsrs	r3, r3, #16
 8014b76:	041b      	lsls	r3, r3, #16
 8014b78:	43db      	mvns	r3, r3
 8014b7a:	401a      	ands	r2, r3
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	041b      	lsls	r3, r3, #16
 8014b80:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014b84:	4313      	orrs	r3, r2
 8014b86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8014b8a:	bf00      	nop
 8014b8c:	370c      	adds	r7, #12
 8014b8e:	46bd      	mov	sp, r7
 8014b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b94:	4770      	bx	lr

08014b96 <LL_RCC_SetSAIClockSource>:
{
 8014b96:	b480      	push	{r7}
 8014b98:	b083      	sub	sp, #12
 8014b9a:	af00      	add	r7, sp, #0
 8014b9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8014b9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014ba6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8014baa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	4313      	orrs	r3, r2
 8014bb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8014bb6:	bf00      	nop
 8014bb8:	370c      	adds	r7, #12
 8014bba:	46bd      	mov	sp, r7
 8014bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bc0:	4770      	bx	lr

08014bc2 <LL_RCC_SetRNGClockSource>:
{
 8014bc2:	b480      	push	{r7}
 8014bc4:	b083      	sub	sp, #12
 8014bc6:	af00      	add	r7, sp, #0
 8014bc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8014bca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014bd2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8014bd6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	4313      	orrs	r3, r2
 8014bde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8014be2:	bf00      	nop
 8014be4:	370c      	adds	r7, #12
 8014be6:	46bd      	mov	sp, r7
 8014be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bec:	4770      	bx	lr

08014bee <LL_RCC_SetCLK48ClockSource>:
{
 8014bee:	b480      	push	{r7}
 8014bf0:	b083      	sub	sp, #12
 8014bf2:	af00      	add	r7, sp, #0
 8014bf4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8014bf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014bfe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8014c02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	4313      	orrs	r3, r2
 8014c0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8014c0e:	bf00      	nop
 8014c10:	370c      	adds	r7, #12
 8014c12:	46bd      	mov	sp, r7
 8014c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c18:	4770      	bx	lr

08014c1a <LL_RCC_SetUSBClockSource>:
{
 8014c1a:	b580      	push	{r7, lr}
 8014c1c:	b082      	sub	sp, #8
 8014c1e:	af00      	add	r7, sp, #0
 8014c20:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8014c22:	6878      	ldr	r0, [r7, #4]
 8014c24:	f7ff ffe3 	bl	8014bee <LL_RCC_SetCLK48ClockSource>
}
 8014c28:	bf00      	nop
 8014c2a:	3708      	adds	r7, #8
 8014c2c:	46bd      	mov	sp, r7
 8014c2e:	bd80      	pop	{r7, pc}

08014c30 <LL_RCC_SetADCClockSource>:
{
 8014c30:	b480      	push	{r7}
 8014c32:	b083      	sub	sp, #12
 8014c34:	af00      	add	r7, sp, #0
 8014c36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8014c38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014c40:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8014c44:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	4313      	orrs	r3, r2
 8014c4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8014c50:	bf00      	nop
 8014c52:	370c      	adds	r7, #12
 8014c54:	46bd      	mov	sp, r7
 8014c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c5a:	4770      	bx	lr

08014c5c <LL_RCC_SetRTCClockSource>:
{
 8014c5c:	b480      	push	{r7}
 8014c5e:	b083      	sub	sp, #12
 8014c60:	af00      	add	r7, sp, #0
 8014c62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8014c64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014c6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8014c70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	4313      	orrs	r3, r2
 8014c78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8014c7c:	bf00      	nop
 8014c7e:	370c      	adds	r7, #12
 8014c80:	46bd      	mov	sp, r7
 8014c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c86:	4770      	bx	lr

08014c88 <LL_RCC_GetRTCClockSource>:
{
 8014c88:	b480      	push	{r7}
 8014c8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8014c8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014c94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8014c98:	4618      	mov	r0, r3
 8014c9a:	46bd      	mov	sp, r7
 8014c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ca0:	4770      	bx	lr

08014ca2 <LL_RCC_ForceBackupDomainReset>:
{
 8014ca2:	b480      	push	{r7}
 8014ca4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8014ca6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014cae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8014cb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8014cb6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8014cba:	bf00      	nop
 8014cbc:	46bd      	mov	sp, r7
 8014cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cc2:	4770      	bx	lr

08014cc4 <LL_RCC_ReleaseBackupDomainReset>:
{
 8014cc4:	b480      	push	{r7}
 8014cc6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8014cc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014cd0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8014cd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8014cd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8014cdc:	bf00      	nop
 8014cde:	46bd      	mov	sp, r7
 8014ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce4:	4770      	bx	lr

08014ce6 <LL_RCC_PLLSAI1_Enable>:
{
 8014ce6:	b480      	push	{r7}
 8014ce8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8014cea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8014cf4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8014cf8:	6013      	str	r3, [r2, #0]
}
 8014cfa:	bf00      	nop
 8014cfc:	46bd      	mov	sp, r7
 8014cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d02:	4770      	bx	lr

08014d04 <LL_RCC_PLLSAI1_Disable>:
{
 8014d04:	b480      	push	{r7}
 8014d06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8014d08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8014d12:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8014d16:	6013      	str	r3, [r2, #0]
}
 8014d18:	bf00      	nop
 8014d1a:	46bd      	mov	sp, r7
 8014d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d20:	4770      	bx	lr

08014d22 <LL_RCC_PLLSAI1_IsReady>:
{
 8014d22:	b480      	push	{r7}
 8014d24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8014d26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014d2a:	681b      	ldr	r3, [r3, #0]
 8014d2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014d30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8014d34:	d101      	bne.n	8014d3a <LL_RCC_PLLSAI1_IsReady+0x18>
 8014d36:	2301      	movs	r3, #1
 8014d38:	e000      	b.n	8014d3c <LL_RCC_PLLSAI1_IsReady+0x1a>
 8014d3a:	2300      	movs	r3, #0
}
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	46bd      	mov	sp, r7
 8014d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d44:	4770      	bx	lr

08014d46 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8014d46:	b580      	push	{r7, lr}
 8014d48:	b088      	sub	sp, #32
 8014d4a:	af00      	add	r7, sp, #0
 8014d4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8014d4e:	2300      	movs	r3, #0
 8014d50:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8014d52:	2300      	movs	r3, #0
 8014d54:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d034      	beq.n	8014dcc <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014d66:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8014d6a:	d021      	beq.n	8014db0 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8014d6c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8014d70:	d81b      	bhi.n	8014daa <HAL_RCCEx_PeriphCLKConfig+0x64>
 8014d72:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8014d76:	d01d      	beq.n	8014db4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8014d78:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8014d7c:	d815      	bhi.n	8014daa <HAL_RCCEx_PeriphCLKConfig+0x64>
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d00b      	beq.n	8014d9a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8014d82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014d86:	d110      	bne.n	8014daa <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8014d88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014d8c:	68db      	ldr	r3, [r3, #12]
 8014d8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8014d92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8014d96:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8014d98:	e00d      	b.n	8014db6 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	3304      	adds	r3, #4
 8014d9e:	4618      	mov	r0, r3
 8014da0:	f000 f947 	bl	8015032 <RCCEx_PLLSAI1_ConfigNP>
 8014da4:	4603      	mov	r3, r0
 8014da6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8014da8:	e005      	b.n	8014db6 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8014daa:	2301      	movs	r3, #1
 8014dac:	77fb      	strb	r3, [r7, #31]
        break;
 8014dae:	e002      	b.n	8014db6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8014db0:	bf00      	nop
 8014db2:	e000      	b.n	8014db6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8014db4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014db6:	7ffb      	ldrb	r3, [r7, #31]
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d105      	bne.n	8014dc8 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	f7ff fee8 	bl	8014b96 <LL_RCC_SetSAIClockSource>
 8014dc6:	e001      	b.n	8014dcc <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014dc8:	7ffb      	ldrb	r3, [r7, #31]
 8014dca:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	681b      	ldr	r3, [r3, #0]
 8014dd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d046      	beq.n	8014e66 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8014dd8:	f7ff ff56 	bl	8014c88 <LL_RCC_GetRTCClockSource>
 8014ddc:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014de2:	69ba      	ldr	r2, [r7, #24]
 8014de4:	429a      	cmp	r2, r3
 8014de6:	d03c      	beq.n	8014e62 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8014de8:	f7fd fdda 	bl	80129a0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8014dec:	69bb      	ldr	r3, [r7, #24]
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d105      	bne.n	8014dfe <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014df6:	4618      	mov	r0, r3
 8014df8:	f7ff ff30 	bl	8014c5c <LL_RCC_SetRTCClockSource>
 8014dfc:	e02e      	b.n	8014e5c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8014dfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014e06:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8014e08:	f7ff ff4b 	bl	8014ca2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8014e0c:	f7ff ff5a 	bl	8014cc4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8014e10:	697b      	ldr	r3, [r7, #20]
 8014e12:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014e1a:	4313      	orrs	r3, r2
 8014e1c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8014e1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8014e22:	697b      	ldr	r3, [r7, #20]
 8014e24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8014e28:	f7ff fdf0 	bl	8014a0c <LL_RCC_LSE_IsEnabled>
 8014e2c:	4603      	mov	r3, r0
 8014e2e:	2b01      	cmp	r3, #1
 8014e30:	d114      	bne.n	8014e5c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8014e32:	f7fa fc5d 	bl	800f6f0 <HAL_GetTick>
 8014e36:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8014e38:	e00b      	b.n	8014e52 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8014e3a:	f7fa fc59 	bl	800f6f0 <HAL_GetTick>
 8014e3e:	4602      	mov	r2, r0
 8014e40:	693b      	ldr	r3, [r7, #16]
 8014e42:	1ad3      	subs	r3, r2, r3
 8014e44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014e48:	4293      	cmp	r3, r2
 8014e4a:	d902      	bls.n	8014e52 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8014e4c:	2303      	movs	r3, #3
 8014e4e:	77fb      	strb	r3, [r7, #31]
              break;
 8014e50:	e004      	b.n	8014e5c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8014e52:	f7ff fded 	bl	8014a30 <LL_RCC_LSE_IsReady>
 8014e56:	4603      	mov	r3, r0
 8014e58:	2b01      	cmp	r3, #1
 8014e5a:	d1ee      	bne.n	8014e3a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8014e5c:	7ffb      	ldrb	r3, [r7, #31]
 8014e5e:	77bb      	strb	r3, [r7, #30]
 8014e60:	e001      	b.n	8014e66 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014e62:	7ffb      	ldrb	r3, [r7, #31]
 8014e64:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	681b      	ldr	r3, [r3, #0]
 8014e6a:	f003 0301 	and.w	r3, r3, #1
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d004      	beq.n	8014e7c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	699b      	ldr	r3, [r3, #24]
 8014e76:	4618      	mov	r0, r3
 8014e78:	f7ff fe2a 	bl	8014ad0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	f003 0302 	and.w	r3, r3, #2
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d004      	beq.n	8014e92 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	69db      	ldr	r3, [r3, #28]
 8014e8c:	4618      	mov	r0, r3
 8014e8e:	f7ff fe35 	bl	8014afc <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	f003 0310 	and.w	r3, r3, #16
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d004      	beq.n	8014ea8 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014ea2:	4618      	mov	r0, r3
 8014ea4:	f7ff fe5d 	bl	8014b62 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	f003 0320 	and.w	r3, r3, #32
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d004      	beq.n	8014ebe <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014eb8:	4618      	mov	r0, r3
 8014eba:	f7ff fe52 	bl	8014b62 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	f003 0304 	and.w	r3, r3, #4
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d004      	beq.n	8014ed4 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	6a1b      	ldr	r3, [r3, #32]
 8014ece:	4618      	mov	r0, r3
 8014ed0:	f7ff fe2a 	bl	8014b28 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	f003 0308 	and.w	r3, r3, #8
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d004      	beq.n	8014eea <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014ee4:	4618      	mov	r0, r3
 8014ee6:	f7ff fe1f 	bl	8014b28 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	681b      	ldr	r3, [r3, #0]
 8014eee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d022      	beq.n	8014f3c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014efa:	4618      	mov	r0, r3
 8014efc:	f7ff fe8d 	bl	8014c1a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014f04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8014f08:	d107      	bne.n	8014f1a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8014f0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014f0e:	68db      	ldr	r3, [r3, #12]
 8014f10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8014f14:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8014f18:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014f1e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8014f22:	d10b      	bne.n	8014f3c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	3304      	adds	r3, #4
 8014f28:	4618      	mov	r0, r3
 8014f2a:	f000 f8dd 	bl	80150e8 <RCCEx_PLLSAI1_ConfigNQ>
 8014f2e:	4603      	mov	r3, r0
 8014f30:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8014f32:	7ffb      	ldrb	r3, [r7, #31]
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d001      	beq.n	8014f3c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8014f38:	7ffb      	ldrb	r3, [r7, #31]
 8014f3a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	681b      	ldr	r3, [r3, #0]
 8014f40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d02b      	beq.n	8014fa0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014f50:	d008      	beq.n	8014f64 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014f56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014f5a:	d003      	beq.n	8014f64 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d105      	bne.n	8014f70 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014f68:	4618      	mov	r0, r3
 8014f6a:	f7ff fe2a 	bl	8014bc2 <LL_RCC_SetRNGClockSource>
 8014f6e:	e00a      	b.n	8014f86 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014f74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8014f78:	60fb      	str	r3, [r7, #12]
 8014f7a:	2000      	movs	r0, #0
 8014f7c:	f7ff fe21 	bl	8014bc2 <LL_RCC_SetRNGClockSource>
 8014f80:	68f8      	ldr	r0, [r7, #12]
 8014f82:	f7ff fe34 	bl	8014bee <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014f8a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8014f8e:	d107      	bne.n	8014fa0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8014f90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014f94:	68db      	ldr	r3, [r3, #12]
 8014f96:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8014f9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8014f9e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d022      	beq.n	8014ff2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014fb0:	4618      	mov	r0, r3
 8014fb2:	f7ff fe3d 	bl	8014c30 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014fba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8014fbe:	d107      	bne.n	8014fd0 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8014fc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014fc4:	68db      	ldr	r3, [r3, #12]
 8014fc6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8014fca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8014fce:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014fd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014fd8:	d10b      	bne.n	8014ff2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	3304      	adds	r3, #4
 8014fde:	4618      	mov	r0, r3
 8014fe0:	f000 f8dd 	bl	801519e <RCCEx_PLLSAI1_ConfigNR>
 8014fe4:	4603      	mov	r3, r0
 8014fe6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8014fe8:	7ffb      	ldrb	r3, [r7, #31]
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d001      	beq.n	8014ff2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8014fee:	7ffb      	ldrb	r3, [r7, #31]
 8014ff0:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d004      	beq.n	8015008 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015002:	4618      	mov	r0, r3
 8015004:	f7ff fd26 	bl	8014a54 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8015010:	2b00      	cmp	r3, #0
 8015012:	d009      	beq.n	8015028 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015018:	4618      	mov	r0, r3
 801501a:	f7ff fd45 	bl	8014aa8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015022:	4618      	mov	r0, r3
 8015024:	f7ff fd2c 	bl	8014a80 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8015028:	7fbb      	ldrb	r3, [r7, #30]
}
 801502a:	4618      	mov	r0, r3
 801502c:	3720      	adds	r7, #32
 801502e:	46bd      	mov	sp, r7
 8015030:	bd80      	pop	{r7, pc}

08015032 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8015032:	b580      	push	{r7, lr}
 8015034:	b084      	sub	sp, #16
 8015036:	af00      	add	r7, sp, #0
 8015038:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801503a:	2300      	movs	r3, #0
 801503c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 801503e:	f7ff fe61 	bl	8014d04 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8015042:	f7fa fb55 	bl	800f6f0 <HAL_GetTick>
 8015046:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8015048:	e009      	b.n	801505e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801504a:	f7fa fb51 	bl	800f6f0 <HAL_GetTick>
 801504e:	4602      	mov	r2, r0
 8015050:	68bb      	ldr	r3, [r7, #8]
 8015052:	1ad3      	subs	r3, r2, r3
 8015054:	2b02      	cmp	r3, #2
 8015056:	d902      	bls.n	801505e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8015058:	2303      	movs	r3, #3
 801505a:	73fb      	strb	r3, [r7, #15]
      break;
 801505c:	e004      	b.n	8015068 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801505e:	f7ff fe60 	bl	8014d22 <LL_RCC_PLLSAI1_IsReady>
 8015062:	4603      	mov	r3, r0
 8015064:	2b00      	cmp	r3, #0
 8015066:	d1f0      	bne.n	801504a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8015068:	7bfb      	ldrb	r3, [r7, #15]
 801506a:	2b00      	cmp	r3, #0
 801506c:	d137      	bne.n	80150de <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 801506e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015072:	691b      	ldr	r3, [r3, #16]
 8015074:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	021b      	lsls	r3, r3, #8
 801507e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015082:	4313      	orrs	r3, r2
 8015084:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8015086:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801508a:	691b      	ldr	r3, [r3, #16]
 801508c:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	685b      	ldr	r3, [r3, #4]
 8015094:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015098:	4313      	orrs	r3, r2
 801509a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 801509c:	f7ff fe23 	bl	8014ce6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80150a0:	f7fa fb26 	bl	800f6f0 <HAL_GetTick>
 80150a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80150a6:	e009      	b.n	80150bc <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80150a8:	f7fa fb22 	bl	800f6f0 <HAL_GetTick>
 80150ac:	4602      	mov	r2, r0
 80150ae:	68bb      	ldr	r3, [r7, #8]
 80150b0:	1ad3      	subs	r3, r2, r3
 80150b2:	2b02      	cmp	r3, #2
 80150b4:	d902      	bls.n	80150bc <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80150b6:	2303      	movs	r3, #3
 80150b8:	73fb      	strb	r3, [r7, #15]
        break;
 80150ba:	e004      	b.n	80150c6 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80150bc:	f7ff fe31 	bl	8014d22 <LL_RCC_PLLSAI1_IsReady>
 80150c0:	4603      	mov	r3, r0
 80150c2:	2b01      	cmp	r3, #1
 80150c4:	d1f0      	bne.n	80150a8 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80150c6:	7bfb      	ldrb	r3, [r7, #15]
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d108      	bne.n	80150de <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80150cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80150d0:	691a      	ldr	r2, [r3, #16]
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	691b      	ldr	r3, [r3, #16]
 80150d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80150da:	4313      	orrs	r3, r2
 80150dc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80150de:	7bfb      	ldrb	r3, [r7, #15]
}
 80150e0:	4618      	mov	r0, r3
 80150e2:	3710      	adds	r7, #16
 80150e4:	46bd      	mov	sp, r7
 80150e6:	bd80      	pop	{r7, pc}

080150e8 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80150e8:	b580      	push	{r7, lr}
 80150ea:	b084      	sub	sp, #16
 80150ec:	af00      	add	r7, sp, #0
 80150ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80150f0:	2300      	movs	r3, #0
 80150f2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80150f4:	f7ff fe06 	bl	8014d04 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80150f8:	f7fa fafa 	bl	800f6f0 <HAL_GetTick>
 80150fc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80150fe:	e009      	b.n	8015114 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8015100:	f7fa faf6 	bl	800f6f0 <HAL_GetTick>
 8015104:	4602      	mov	r2, r0
 8015106:	68bb      	ldr	r3, [r7, #8]
 8015108:	1ad3      	subs	r3, r2, r3
 801510a:	2b02      	cmp	r3, #2
 801510c:	d902      	bls.n	8015114 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 801510e:	2303      	movs	r3, #3
 8015110:	73fb      	strb	r3, [r7, #15]
      break;
 8015112:	e004      	b.n	801511e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8015114:	f7ff fe05 	bl	8014d22 <LL_RCC_PLLSAI1_IsReady>
 8015118:	4603      	mov	r3, r0
 801511a:	2b00      	cmp	r3, #0
 801511c:	d1f0      	bne.n	8015100 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 801511e:	7bfb      	ldrb	r3, [r7, #15]
 8015120:	2b00      	cmp	r3, #0
 8015122:	d137      	bne.n	8015194 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8015124:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015128:	691b      	ldr	r3, [r3, #16]
 801512a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	681b      	ldr	r3, [r3, #0]
 8015132:	021b      	lsls	r3, r3, #8
 8015134:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015138:	4313      	orrs	r3, r2
 801513a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 801513c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015140:	691b      	ldr	r3, [r3, #16]
 8015142:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	689b      	ldr	r3, [r3, #8]
 801514a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801514e:	4313      	orrs	r3, r2
 8015150:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8015152:	f7ff fdc8 	bl	8014ce6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8015156:	f7fa facb 	bl	800f6f0 <HAL_GetTick>
 801515a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801515c:	e009      	b.n	8015172 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801515e:	f7fa fac7 	bl	800f6f0 <HAL_GetTick>
 8015162:	4602      	mov	r2, r0
 8015164:	68bb      	ldr	r3, [r7, #8]
 8015166:	1ad3      	subs	r3, r2, r3
 8015168:	2b02      	cmp	r3, #2
 801516a:	d902      	bls.n	8015172 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 801516c:	2303      	movs	r3, #3
 801516e:	73fb      	strb	r3, [r7, #15]
        break;
 8015170:	e004      	b.n	801517c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8015172:	f7ff fdd6 	bl	8014d22 <LL_RCC_PLLSAI1_IsReady>
 8015176:	4603      	mov	r3, r0
 8015178:	2b01      	cmp	r3, #1
 801517a:	d1f0      	bne.n	801515e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 801517c:	7bfb      	ldrb	r3, [r7, #15]
 801517e:	2b00      	cmp	r3, #0
 8015180:	d108      	bne.n	8015194 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8015182:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015186:	691a      	ldr	r2, [r3, #16]
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	691b      	ldr	r3, [r3, #16]
 801518c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015190:	4313      	orrs	r3, r2
 8015192:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8015194:	7bfb      	ldrb	r3, [r7, #15]
}
 8015196:	4618      	mov	r0, r3
 8015198:	3710      	adds	r7, #16
 801519a:	46bd      	mov	sp, r7
 801519c:	bd80      	pop	{r7, pc}

0801519e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 801519e:	b580      	push	{r7, lr}
 80151a0:	b084      	sub	sp, #16
 80151a2:	af00      	add	r7, sp, #0
 80151a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80151a6:	2300      	movs	r3, #0
 80151a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80151aa:	f7ff fdab 	bl	8014d04 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80151ae:	f7fa fa9f 	bl	800f6f0 <HAL_GetTick>
 80151b2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80151b4:	e009      	b.n	80151ca <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80151b6:	f7fa fa9b 	bl	800f6f0 <HAL_GetTick>
 80151ba:	4602      	mov	r2, r0
 80151bc:	68bb      	ldr	r3, [r7, #8]
 80151be:	1ad3      	subs	r3, r2, r3
 80151c0:	2b02      	cmp	r3, #2
 80151c2:	d902      	bls.n	80151ca <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80151c4:	2303      	movs	r3, #3
 80151c6:	73fb      	strb	r3, [r7, #15]
      break;
 80151c8:	e004      	b.n	80151d4 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80151ca:	f7ff fdaa 	bl	8014d22 <LL_RCC_PLLSAI1_IsReady>
 80151ce:	4603      	mov	r3, r0
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	d1f0      	bne.n	80151b6 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80151d4:	7bfb      	ldrb	r3, [r7, #15]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d137      	bne.n	801524a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80151da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80151de:	691b      	ldr	r3, [r3, #16]
 80151e0:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	681b      	ldr	r3, [r3, #0]
 80151e8:	021b      	lsls	r3, r3, #8
 80151ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80151ee:	4313      	orrs	r3, r2
 80151f0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80151f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80151f6:	691b      	ldr	r3, [r3, #16]
 80151f8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	68db      	ldr	r3, [r3, #12]
 8015200:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015204:	4313      	orrs	r3, r2
 8015206:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8015208:	f7ff fd6d 	bl	8014ce6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801520c:	f7fa fa70 	bl	800f6f0 <HAL_GetTick>
 8015210:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8015212:	e009      	b.n	8015228 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8015214:	f7fa fa6c 	bl	800f6f0 <HAL_GetTick>
 8015218:	4602      	mov	r2, r0
 801521a:	68bb      	ldr	r3, [r7, #8]
 801521c:	1ad3      	subs	r3, r2, r3
 801521e:	2b02      	cmp	r3, #2
 8015220:	d902      	bls.n	8015228 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8015222:	2303      	movs	r3, #3
 8015224:	73fb      	strb	r3, [r7, #15]
        break;
 8015226:	e004      	b.n	8015232 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8015228:	f7ff fd7b 	bl	8014d22 <LL_RCC_PLLSAI1_IsReady>
 801522c:	4603      	mov	r3, r0
 801522e:	2b01      	cmp	r3, #1
 8015230:	d1f0      	bne.n	8015214 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8015232:	7bfb      	ldrb	r3, [r7, #15]
 8015234:	2b00      	cmp	r3, #0
 8015236:	d108      	bne.n	801524a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8015238:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801523c:	691a      	ldr	r2, [r3, #16]
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	691b      	ldr	r3, [r3, #16]
 8015242:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015246:	4313      	orrs	r3, r2
 8015248:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 801524a:	7bfb      	ldrb	r3, [r7, #15]
}
 801524c:	4618      	mov	r0, r3
 801524e:	3710      	adds	r7, #16
 8015250:	46bd      	mov	sp, r7
 8015252:	bd80      	pop	{r7, pc}

08015254 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8015254:	b580      	push	{r7, lr}
 8015256:	b084      	sub	sp, #16
 8015258:	af00      	add	r7, sp, #0
 801525a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	2b00      	cmp	r3, #0
 8015260:	d101      	bne.n	8015266 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8015262:	2301      	movs	r3, #1
 8015264:	e09f      	b.n	80153a6 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 801526c:	b2db      	uxtb	r3, r3
 801526e:	2b00      	cmp	r3, #0
 8015270:	d106      	bne.n	8015280 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	2200      	movs	r2, #0
 8015276:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 801527a:	6878      	ldr	r0, [r7, #4]
 801527c:	f7f6 fd62 	bl	800bd44 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	2202      	movs	r2, #2
 8015284:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8015288:	4b49      	ldr	r3, [pc, #292]	@ (80153b0 <HAL_RTC_Init+0x15c>)
 801528a:	68db      	ldr	r3, [r3, #12]
 801528c:	f003 0310 	and.w	r3, r3, #16
 8015290:	2b10      	cmp	r3, #16
 8015292:	d07e      	beq.n	8015392 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	681b      	ldr	r3, [r3, #0]
 8015298:	22ca      	movs	r2, #202	@ 0xca
 801529a:	625a      	str	r2, [r3, #36]	@ 0x24
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	2253      	movs	r2, #83	@ 0x53
 80152a2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80152a4:	6878      	ldr	r0, [r7, #4]
 80152a6:	f000 fac6 	bl	8015836 <RTC_EnterInitMode>
 80152aa:	4603      	mov	r3, r0
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d00a      	beq.n	80152c6 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	22ff      	movs	r2, #255	@ 0xff
 80152b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	2204      	movs	r2, #4
 80152bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 80152c0:	2301      	movs	r3, #1
 80152c2:	73fb      	strb	r3, [r7, #15]
 80152c4:	e067      	b.n	8015396 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	689b      	ldr	r3, [r3, #8]
 80152cc:	687a      	ldr	r2, [r7, #4]
 80152ce:	6812      	ldr	r2, [r2, #0]
 80152d0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80152d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80152d8:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	6899      	ldr	r1, [r3, #8]
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	685a      	ldr	r2, [r3, #4]
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	691b      	ldr	r3, [r3, #16]
 80152e8:	431a      	orrs	r2, r3
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	699b      	ldr	r3, [r3, #24]
 80152ee:	431a      	orrs	r2, r3
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	430a      	orrs	r2, r1
 80152f6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	687a      	ldr	r2, [r7, #4]
 80152fe:	68d2      	ldr	r2, [r2, #12]
 8015300:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	6919      	ldr	r1, [r3, #16]
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	689b      	ldr	r3, [r3, #8]
 801530c:	041a      	lsls	r2, r3, #16
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	430a      	orrs	r2, r1
 8015314:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	68da      	ldr	r2, [r3, #12]
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8015324:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	681b      	ldr	r3, [r3, #0]
 801532a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	f022 0203 	bic.w	r2, r2, #3
 8015334:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	69da      	ldr	r2, [r3, #28]
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	695b      	ldr	r3, [r3, #20]
 8015344:	431a      	orrs	r2, r3
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	681b      	ldr	r3, [r3, #0]
 801534a:	430a      	orrs	r2, r1
 801534c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	689b      	ldr	r3, [r3, #8]
 8015354:	f003 0320 	and.w	r3, r3, #32
 8015358:	2b00      	cmp	r3, #0
 801535a:	d113      	bne.n	8015384 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801535c:	6878      	ldr	r0, [r7, #4]
 801535e:	f000 fa44 	bl	80157ea <HAL_RTC_WaitForSynchro>
 8015362:	4603      	mov	r3, r0
 8015364:	2b00      	cmp	r3, #0
 8015366:	d00d      	beq.n	8015384 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	22ff      	movs	r2, #255	@ 0xff
 801536e:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	2204      	movs	r2, #4
 8015374:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	2200      	movs	r2, #0
 801537c:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8015380:	2301      	movs	r3, #1
 8015382:	e010      	b.n	80153a6 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	681b      	ldr	r3, [r3, #0]
 8015388:	22ff      	movs	r2, #255	@ 0xff
 801538a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 801538c:	2300      	movs	r3, #0
 801538e:	73fb      	strb	r3, [r7, #15]
 8015390:	e001      	b.n	8015396 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8015392:	2300      	movs	r3, #0
 8015394:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8015396:	7bfb      	ldrb	r3, [r7, #15]
 8015398:	2b00      	cmp	r3, #0
 801539a:	d103      	bne.n	80153a4 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	2201      	movs	r2, #1
 80153a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 80153a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80153a6:	4618      	mov	r0, r3
 80153a8:	3710      	adds	r7, #16
 80153aa:	46bd      	mov	sp, r7
 80153ac:	bd80      	pop	{r7, pc}
 80153ae:	bf00      	nop
 80153b0:	40002800 	.word	0x40002800

080153b4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80153b4:	b590      	push	{r4, r7, lr}
 80153b6:	b087      	sub	sp, #28
 80153b8:	af00      	add	r7, sp, #0
 80153ba:	60f8      	str	r0, [r7, #12]
 80153bc:	60b9      	str	r1, [r7, #8]
 80153be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80153c6:	2b01      	cmp	r3, #1
 80153c8:	d101      	bne.n	80153ce <HAL_RTC_SetTime+0x1a>
 80153ca:	2302      	movs	r3, #2
 80153cc:	e0b2      	b.n	8015534 <HAL_RTC_SetTime+0x180>
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	2201      	movs	r2, #1
 80153d2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	2202      	movs	r2, #2
 80153da:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d126      	bne.n	8015432 <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	689b      	ldr	r3, [r3, #8]
 80153ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d102      	bne.n	80153f8 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80153f2:	68bb      	ldr	r3, [r7, #8]
 80153f4:	2200      	movs	r2, #0
 80153f6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80153f8:	68bb      	ldr	r3, [r7, #8]
 80153fa:	781b      	ldrb	r3, [r3, #0]
 80153fc:	4618      	mov	r0, r3
 80153fe:	f000 fa44 	bl	801588a <RTC_ByteToBcd2>
 8015402:	4603      	mov	r3, r0
 8015404:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8015406:	68bb      	ldr	r3, [r7, #8]
 8015408:	785b      	ldrb	r3, [r3, #1]
 801540a:	4618      	mov	r0, r3
 801540c:	f000 fa3d 	bl	801588a <RTC_ByteToBcd2>
 8015410:	4603      	mov	r3, r0
 8015412:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8015414:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8015416:	68bb      	ldr	r3, [r7, #8]
 8015418:	789b      	ldrb	r3, [r3, #2]
 801541a:	4618      	mov	r0, r3
 801541c:	f000 fa35 	bl	801588a <RTC_ByteToBcd2>
 8015420:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8015422:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8015426:	68bb      	ldr	r3, [r7, #8]
 8015428:	78db      	ldrb	r3, [r3, #3]
 801542a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 801542c:	4313      	orrs	r3, r2
 801542e:	617b      	str	r3, [r7, #20]
 8015430:	e018      	b.n	8015464 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	689b      	ldr	r3, [r3, #8]
 8015438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801543c:	2b00      	cmp	r3, #0
 801543e:	d102      	bne.n	8015446 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8015440:	68bb      	ldr	r3, [r7, #8]
 8015442:	2200      	movs	r2, #0
 8015444:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8015446:	68bb      	ldr	r3, [r7, #8]
 8015448:	781b      	ldrb	r3, [r3, #0]
 801544a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 801544c:	68bb      	ldr	r3, [r7, #8]
 801544e:	785b      	ldrb	r3, [r3, #1]
 8015450:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8015452:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8015454:	68ba      	ldr	r2, [r7, #8]
 8015456:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8015458:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 801545a:	68bb      	ldr	r3, [r7, #8]
 801545c:	78db      	ldrb	r3, [r3, #3]
 801545e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8015460:	4313      	orrs	r3, r2
 8015462:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	22ca      	movs	r2, #202	@ 0xca
 801546a:	625a      	str	r2, [r3, #36]	@ 0x24
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	681b      	ldr	r3, [r3, #0]
 8015470:	2253      	movs	r2, #83	@ 0x53
 8015472:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8015474:	68f8      	ldr	r0, [r7, #12]
 8015476:	f000 f9de 	bl	8015836 <RTC_EnterInitMode>
 801547a:	4603      	mov	r3, r0
 801547c:	2b00      	cmp	r3, #0
 801547e:	d00d      	beq.n	801549c <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	22ff      	movs	r2, #255	@ 0xff
 8015486:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	2204      	movs	r2, #4
 801548c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	2200      	movs	r2, #0
 8015494:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8015498:	2301      	movs	r3, #1
 801549a:	e04b      	b.n	8015534 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	681a      	ldr	r2, [r3, #0]
 80154a0:	697b      	ldr	r3, [r7, #20]
 80154a2:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80154a6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80154aa:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	689a      	ldr	r2, [r3, #8]
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	681b      	ldr	r3, [r3, #0]
 80154b6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80154ba:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80154bc:	68fb      	ldr	r3, [r7, #12]
 80154be:	681b      	ldr	r3, [r3, #0]
 80154c0:	6899      	ldr	r1, [r3, #8]
 80154c2:	68bb      	ldr	r3, [r7, #8]
 80154c4:	68da      	ldr	r2, [r3, #12]
 80154c6:	68bb      	ldr	r3, [r7, #8]
 80154c8:	691b      	ldr	r3, [r3, #16]
 80154ca:	431a      	orrs	r2, r3
 80154cc:	68fb      	ldr	r3, [r7, #12]
 80154ce:	681b      	ldr	r3, [r3, #0]
 80154d0:	430a      	orrs	r2, r1
 80154d2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	681b      	ldr	r3, [r3, #0]
 80154d8:	68da      	ldr	r2, [r3, #12]
 80154da:	68fb      	ldr	r3, [r7, #12]
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80154e2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80154e4:	68fb      	ldr	r3, [r7, #12]
 80154e6:	681b      	ldr	r3, [r3, #0]
 80154e8:	689b      	ldr	r3, [r3, #8]
 80154ea:	f003 0320 	and.w	r3, r3, #32
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d113      	bne.n	801551a <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80154f2:	68f8      	ldr	r0, [r7, #12]
 80154f4:	f000 f979 	bl	80157ea <HAL_RTC_WaitForSynchro>
 80154f8:	4603      	mov	r3, r0
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d00d      	beq.n	801551a <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80154fe:	68fb      	ldr	r3, [r7, #12]
 8015500:	681b      	ldr	r3, [r3, #0]
 8015502:	22ff      	movs	r2, #255	@ 0xff
 8015504:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	2204      	movs	r2, #4
 801550a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	2200      	movs	r2, #0
 8015512:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8015516:	2301      	movs	r3, #1
 8015518:	e00c      	b.n	8015534 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	22ff      	movs	r2, #255	@ 0xff
 8015520:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8015522:	68fb      	ldr	r3, [r7, #12]
 8015524:	2201      	movs	r2, #1
 8015526:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    __HAL_UNLOCK(hrtc);
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	2200      	movs	r2, #0
 801552e:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8015532:	2300      	movs	r3, #0
  }
}
 8015534:	4618      	mov	r0, r3
 8015536:	371c      	adds	r7, #28
 8015538:	46bd      	mov	sp, r7
 801553a:	bd90      	pop	{r4, r7, pc}

0801553c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801553c:	b580      	push	{r7, lr}
 801553e:	b086      	sub	sp, #24
 8015540:	af00      	add	r7, sp, #0
 8015542:	60f8      	str	r0, [r7, #12]
 8015544:	60b9      	str	r1, [r7, #8]
 8015546:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8015548:	68fb      	ldr	r3, [r7, #12]
 801554a:	681b      	ldr	r3, [r3, #0]
 801554c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801554e:	68bb      	ldr	r3, [r7, #8]
 8015550:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8015552:	68fb      	ldr	r3, [r7, #12]
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	691b      	ldr	r3, [r3, #16]
 8015558:	f3c3 020e 	ubfx	r2, r3, #0, #15
 801555c:	68bb      	ldr	r3, [r7, #8]
 801555e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	681b      	ldr	r3, [r3, #0]
 8015564:	681b      	ldr	r3, [r3, #0]
 8015566:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 801556a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 801556e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8015570:	697b      	ldr	r3, [r7, #20]
 8015572:	0c1b      	lsrs	r3, r3, #16
 8015574:	b2db      	uxtb	r3, r3
 8015576:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801557a:	b2da      	uxtb	r2, r3
 801557c:	68bb      	ldr	r3, [r7, #8]
 801557e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8015580:	697b      	ldr	r3, [r7, #20]
 8015582:	0a1b      	lsrs	r3, r3, #8
 8015584:	b2db      	uxtb	r3, r3
 8015586:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801558a:	b2da      	uxtb	r2, r3
 801558c:	68bb      	ldr	r3, [r7, #8]
 801558e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8015590:	697b      	ldr	r3, [r7, #20]
 8015592:	b2db      	uxtb	r3, r3
 8015594:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015598:	b2da      	uxtb	r2, r3
 801559a:	68bb      	ldr	r3, [r7, #8]
 801559c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 801559e:	697b      	ldr	r3, [r7, #20]
 80155a0:	0c1b      	lsrs	r3, r3, #16
 80155a2:	b2db      	uxtb	r3, r3
 80155a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80155a8:	b2da      	uxtb	r2, r3
 80155aa:	68bb      	ldr	r3, [r7, #8]
 80155ac:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d11a      	bne.n	80155ea <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80155b4:	68bb      	ldr	r3, [r7, #8]
 80155b6:	781b      	ldrb	r3, [r3, #0]
 80155b8:	4618      	mov	r0, r3
 80155ba:	f000 f986 	bl	80158ca <RTC_Bcd2ToByte>
 80155be:	4603      	mov	r3, r0
 80155c0:	461a      	mov	r2, r3
 80155c2:	68bb      	ldr	r3, [r7, #8]
 80155c4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80155c6:	68bb      	ldr	r3, [r7, #8]
 80155c8:	785b      	ldrb	r3, [r3, #1]
 80155ca:	4618      	mov	r0, r3
 80155cc:	f000 f97d 	bl	80158ca <RTC_Bcd2ToByte>
 80155d0:	4603      	mov	r3, r0
 80155d2:	461a      	mov	r2, r3
 80155d4:	68bb      	ldr	r3, [r7, #8]
 80155d6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80155d8:	68bb      	ldr	r3, [r7, #8]
 80155da:	789b      	ldrb	r3, [r3, #2]
 80155dc:	4618      	mov	r0, r3
 80155de:	f000 f974 	bl	80158ca <RTC_Bcd2ToByte>
 80155e2:	4603      	mov	r3, r0
 80155e4:	461a      	mov	r2, r3
 80155e6:	68bb      	ldr	r3, [r7, #8]
 80155e8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80155ea:	2300      	movs	r3, #0
}
 80155ec:	4618      	mov	r0, r3
 80155ee:	3718      	adds	r7, #24
 80155f0:	46bd      	mov	sp, r7
 80155f2:	bd80      	pop	{r7, pc}

080155f4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80155f4:	b590      	push	{r4, r7, lr}
 80155f6:	b087      	sub	sp, #28
 80155f8:	af00      	add	r7, sp, #0
 80155fa:	60f8      	str	r0, [r7, #12]
 80155fc:	60b9      	str	r1, [r7, #8]
 80155fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015606:	2b01      	cmp	r3, #1
 8015608:	d101      	bne.n	801560e <HAL_RTC_SetDate+0x1a>
 801560a:	2302      	movs	r3, #2
 801560c:	e09c      	b.n	8015748 <HAL_RTC_SetDate+0x154>
 801560e:	68fb      	ldr	r3, [r7, #12]
 8015610:	2201      	movs	r2, #1
 8015612:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	2202      	movs	r2, #2
 801561a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	2b00      	cmp	r3, #0
 8015622:	d10e      	bne.n	8015642 <HAL_RTC_SetDate+0x4e>
 8015624:	68bb      	ldr	r3, [r7, #8]
 8015626:	785b      	ldrb	r3, [r3, #1]
 8015628:	f003 0310 	and.w	r3, r3, #16
 801562c:	2b00      	cmp	r3, #0
 801562e:	d008      	beq.n	8015642 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8015630:	68bb      	ldr	r3, [r7, #8]
 8015632:	785b      	ldrb	r3, [r3, #1]
 8015634:	f023 0310 	bic.w	r3, r3, #16
 8015638:	b2db      	uxtb	r3, r3
 801563a:	330a      	adds	r3, #10
 801563c:	b2da      	uxtb	r2, r3
 801563e:	68bb      	ldr	r3, [r7, #8]
 8015640:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	2b00      	cmp	r3, #0
 8015646:	d11c      	bne.n	8015682 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8015648:	68bb      	ldr	r3, [r7, #8]
 801564a:	78db      	ldrb	r3, [r3, #3]
 801564c:	4618      	mov	r0, r3
 801564e:	f000 f91c 	bl	801588a <RTC_ByteToBcd2>
 8015652:	4603      	mov	r3, r0
 8015654:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8015656:	68bb      	ldr	r3, [r7, #8]
 8015658:	785b      	ldrb	r3, [r3, #1]
 801565a:	4618      	mov	r0, r3
 801565c:	f000 f915 	bl	801588a <RTC_ByteToBcd2>
 8015660:	4603      	mov	r3, r0
 8015662:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8015664:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8015666:	68bb      	ldr	r3, [r7, #8]
 8015668:	789b      	ldrb	r3, [r3, #2]
 801566a:	4618      	mov	r0, r3
 801566c:	f000 f90d 	bl	801588a <RTC_ByteToBcd2>
 8015670:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8015672:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8015676:	68bb      	ldr	r3, [r7, #8]
 8015678:	781b      	ldrb	r3, [r3, #0]
 801567a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 801567c:	4313      	orrs	r3, r2
 801567e:	617b      	str	r3, [r7, #20]
 8015680:	e00e      	b.n	80156a0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8015682:	68bb      	ldr	r3, [r7, #8]
 8015684:	78db      	ldrb	r3, [r3, #3]
 8015686:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8015688:	68bb      	ldr	r3, [r7, #8]
 801568a:	785b      	ldrb	r3, [r3, #1]
 801568c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 801568e:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8015690:	68ba      	ldr	r2, [r7, #8]
 8015692:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8015694:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8015696:	68bb      	ldr	r3, [r7, #8]
 8015698:	781b      	ldrb	r3, [r3, #0]
 801569a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 801569c:	4313      	orrs	r3, r2
 801569e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	681b      	ldr	r3, [r3, #0]
 80156a4:	22ca      	movs	r2, #202	@ 0xca
 80156a6:	625a      	str	r2, [r3, #36]	@ 0x24
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	2253      	movs	r2, #83	@ 0x53
 80156ae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80156b0:	68f8      	ldr	r0, [r7, #12]
 80156b2:	f000 f8c0 	bl	8015836 <RTC_EnterInitMode>
 80156b6:	4603      	mov	r3, r0
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d00d      	beq.n	80156d8 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80156bc:	68fb      	ldr	r3, [r7, #12]
 80156be:	681b      	ldr	r3, [r3, #0]
 80156c0:	22ff      	movs	r2, #255	@ 0xff
 80156c2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	2204      	movs	r2, #4
 80156c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	2200      	movs	r2, #0
 80156d0:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80156d4:	2301      	movs	r3, #1
 80156d6:	e037      	b.n	8015748 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80156d8:	68fb      	ldr	r3, [r7, #12]
 80156da:	681a      	ldr	r2, [r3, #0]
 80156dc:	697b      	ldr	r3, [r7, #20]
 80156de:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80156e2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80156e6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	681b      	ldr	r3, [r3, #0]
 80156ec:	68da      	ldr	r2, [r3, #12]
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	681b      	ldr	r3, [r3, #0]
 80156f2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80156f6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	681b      	ldr	r3, [r3, #0]
 80156fc:	689b      	ldr	r3, [r3, #8]
 80156fe:	f003 0320 	and.w	r3, r3, #32
 8015702:	2b00      	cmp	r3, #0
 8015704:	d113      	bne.n	801572e <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8015706:	68f8      	ldr	r0, [r7, #12]
 8015708:	f000 f86f 	bl	80157ea <HAL_RTC_WaitForSynchro>
 801570c:	4603      	mov	r3, r0
 801570e:	2b00      	cmp	r3, #0
 8015710:	d00d      	beq.n	801572e <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015712:	68fb      	ldr	r3, [r7, #12]
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	22ff      	movs	r2, #255	@ 0xff
 8015718:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	2204      	movs	r2, #4
 801571e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	2200      	movs	r2, #0
 8015726:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 801572a:	2301      	movs	r3, #1
 801572c:	e00c      	b.n	8015748 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801572e:	68fb      	ldr	r3, [r7, #12]
 8015730:	681b      	ldr	r3, [r3, #0]
 8015732:	22ff      	movs	r2, #255	@ 0xff
 8015734:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8015736:	68fb      	ldr	r3, [r7, #12]
 8015738:	2201      	movs	r2, #1
 801573a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	2200      	movs	r2, #0
 8015742:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8015746:	2300      	movs	r3, #0
  }
}
 8015748:	4618      	mov	r0, r3
 801574a:	371c      	adds	r7, #28
 801574c:	46bd      	mov	sp, r7
 801574e:	bd90      	pop	{r4, r7, pc}

08015750 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8015750:	b580      	push	{r7, lr}
 8015752:	b086      	sub	sp, #24
 8015754:	af00      	add	r7, sp, #0
 8015756:	60f8      	str	r0, [r7, #12]
 8015758:	60b9      	str	r1, [r7, #8]
 801575a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	681b      	ldr	r3, [r3, #0]
 8015760:	685b      	ldr	r3, [r3, #4]
 8015762:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8015766:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 801576a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 801576c:	697b      	ldr	r3, [r7, #20]
 801576e:	0c1b      	lsrs	r3, r3, #16
 8015770:	b2da      	uxtb	r2, r3
 8015772:	68bb      	ldr	r3, [r7, #8]
 8015774:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8015776:	697b      	ldr	r3, [r7, #20]
 8015778:	0a1b      	lsrs	r3, r3, #8
 801577a:	b2db      	uxtb	r3, r3
 801577c:	f003 031f 	and.w	r3, r3, #31
 8015780:	b2da      	uxtb	r2, r3
 8015782:	68bb      	ldr	r3, [r7, #8]
 8015784:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8015786:	697b      	ldr	r3, [r7, #20]
 8015788:	b2db      	uxtb	r3, r3
 801578a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801578e:	b2da      	uxtb	r2, r3
 8015790:	68bb      	ldr	r3, [r7, #8]
 8015792:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8015794:	697b      	ldr	r3, [r7, #20]
 8015796:	0b5b      	lsrs	r3, r3, #13
 8015798:	b2db      	uxtb	r3, r3
 801579a:	f003 0307 	and.w	r3, r3, #7
 801579e:	b2da      	uxtb	r2, r3
 80157a0:	68bb      	ldr	r3, [r7, #8]
 80157a2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d11a      	bne.n	80157e0 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80157aa:	68bb      	ldr	r3, [r7, #8]
 80157ac:	78db      	ldrb	r3, [r3, #3]
 80157ae:	4618      	mov	r0, r3
 80157b0:	f000 f88b 	bl	80158ca <RTC_Bcd2ToByte>
 80157b4:	4603      	mov	r3, r0
 80157b6:	461a      	mov	r2, r3
 80157b8:	68bb      	ldr	r3, [r7, #8]
 80157ba:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80157bc:	68bb      	ldr	r3, [r7, #8]
 80157be:	785b      	ldrb	r3, [r3, #1]
 80157c0:	4618      	mov	r0, r3
 80157c2:	f000 f882 	bl	80158ca <RTC_Bcd2ToByte>
 80157c6:	4603      	mov	r3, r0
 80157c8:	461a      	mov	r2, r3
 80157ca:	68bb      	ldr	r3, [r7, #8]
 80157cc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80157ce:	68bb      	ldr	r3, [r7, #8]
 80157d0:	789b      	ldrb	r3, [r3, #2]
 80157d2:	4618      	mov	r0, r3
 80157d4:	f000 f879 	bl	80158ca <RTC_Bcd2ToByte>
 80157d8:	4603      	mov	r3, r0
 80157da:	461a      	mov	r2, r3
 80157dc:	68bb      	ldr	r3, [r7, #8]
 80157de:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80157e0:	2300      	movs	r3, #0
}
 80157e2:	4618      	mov	r0, r3
 80157e4:	3718      	adds	r7, #24
 80157e6:	46bd      	mov	sp, r7
 80157e8:	bd80      	pop	{r7, pc}

080157ea <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80157ea:	b580      	push	{r7, lr}
 80157ec:	b084      	sub	sp, #16
 80157ee:	af00      	add	r7, sp, #0
 80157f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	68da      	ldr	r2, [r3, #12]
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	681b      	ldr	r3, [r3, #0]
 80157fc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8015800:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8015802:	f7f9 ff75 	bl	800f6f0 <HAL_GetTick>
 8015806:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8015808:	e009      	b.n	801581e <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801580a:	f7f9 ff71 	bl	800f6f0 <HAL_GetTick>
 801580e:	4602      	mov	r2, r0
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	1ad3      	subs	r3, r2, r3
 8015814:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8015818:	d901      	bls.n	801581e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 801581a:	2303      	movs	r3, #3
 801581c:	e007      	b.n	801582e <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	681b      	ldr	r3, [r3, #0]
 8015822:	68db      	ldr	r3, [r3, #12]
 8015824:	f003 0320 	and.w	r3, r3, #32
 8015828:	2b00      	cmp	r3, #0
 801582a:	d0ee      	beq.n	801580a <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 801582c:	2300      	movs	r3, #0
}
 801582e:	4618      	mov	r0, r3
 8015830:	3710      	adds	r7, #16
 8015832:	46bd      	mov	sp, r7
 8015834:	bd80      	pop	{r7, pc}

08015836 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8015836:	b580      	push	{r7, lr}
 8015838:	b084      	sub	sp, #16
 801583a:	af00      	add	r7, sp, #0
 801583c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	681b      	ldr	r3, [r3, #0]
 8015842:	68db      	ldr	r3, [r3, #12]
 8015844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015848:	2b00      	cmp	r3, #0
 801584a:	d119      	bne.n	8015880 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	f04f 32ff 	mov.w	r2, #4294967295
 8015854:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8015856:	f7f9 ff4b 	bl	800f6f0 <HAL_GetTick>
 801585a:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 801585c:	e009      	b.n	8015872 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 801585e:	f7f9 ff47 	bl	800f6f0 <HAL_GetTick>
 8015862:	4602      	mov	r2, r0
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	1ad3      	subs	r3, r2, r3
 8015868:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801586c:	d901      	bls.n	8015872 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 801586e:	2303      	movs	r3, #3
 8015870:	e007      	b.n	8015882 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	68db      	ldr	r3, [r3, #12]
 8015878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801587c:	2b00      	cmp	r3, #0
 801587e:	d0ee      	beq.n	801585e <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8015880:	2300      	movs	r3, #0
}
 8015882:	4618      	mov	r0, r3
 8015884:	3710      	adds	r7, #16
 8015886:	46bd      	mov	sp, r7
 8015888:	bd80      	pop	{r7, pc}

0801588a <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 801588a:	b480      	push	{r7}
 801588c:	b085      	sub	sp, #20
 801588e:	af00      	add	r7, sp, #0
 8015890:	4603      	mov	r3, r0
 8015892:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8015894:	2300      	movs	r3, #0
 8015896:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8015898:	79fb      	ldrb	r3, [r7, #7]
 801589a:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 801589c:	e005      	b.n	80158aa <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 801589e:	68fb      	ldr	r3, [r7, #12]
 80158a0:	3301      	adds	r3, #1
 80158a2:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80158a4:	7afb      	ldrb	r3, [r7, #11]
 80158a6:	3b0a      	subs	r3, #10
 80158a8:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 80158aa:	7afb      	ldrb	r3, [r7, #11]
 80158ac:	2b09      	cmp	r3, #9
 80158ae:	d8f6      	bhi.n	801589e <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	b2db      	uxtb	r3, r3
 80158b4:	011b      	lsls	r3, r3, #4
 80158b6:	b2da      	uxtb	r2, r3
 80158b8:	7afb      	ldrb	r3, [r7, #11]
 80158ba:	4313      	orrs	r3, r2
 80158bc:	b2db      	uxtb	r3, r3
}
 80158be:	4618      	mov	r0, r3
 80158c0:	3714      	adds	r7, #20
 80158c2:	46bd      	mov	sp, r7
 80158c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158c8:	4770      	bx	lr

080158ca <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80158ca:	b480      	push	{r7}
 80158cc:	b085      	sub	sp, #20
 80158ce:	af00      	add	r7, sp, #0
 80158d0:	4603      	mov	r3, r0
 80158d2:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80158d4:	79fb      	ldrb	r3, [r7, #7]
 80158d6:	091b      	lsrs	r3, r3, #4
 80158d8:	b2db      	uxtb	r3, r3
 80158da:	461a      	mov	r2, r3
 80158dc:	4613      	mov	r3, r2
 80158de:	009b      	lsls	r3, r3, #2
 80158e0:	4413      	add	r3, r2
 80158e2:	005b      	lsls	r3, r3, #1
 80158e4:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80158e6:	68fb      	ldr	r3, [r7, #12]
 80158e8:	b2da      	uxtb	r2, r3
 80158ea:	79fb      	ldrb	r3, [r7, #7]
 80158ec:	f003 030f 	and.w	r3, r3, #15
 80158f0:	b2db      	uxtb	r3, r3
 80158f2:	4413      	add	r3, r2
 80158f4:	b2db      	uxtb	r3, r3
}
 80158f6:	4618      	mov	r0, r3
 80158f8:	3714      	adds	r7, #20
 80158fa:	46bd      	mov	sp, r7
 80158fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015900:	4770      	bx	lr
	...

08015904 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8015904:	b580      	push	{r7, lr}
 8015906:	b086      	sub	sp, #24
 8015908:	af00      	add	r7, sp, #0
 801590a:	60f8      	str	r0, [r7, #12]
 801590c:	60b9      	str	r1, [r7, #8]
 801590e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015916:	2b01      	cmp	r3, #1
 8015918:	d101      	bne.n	801591e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 801591a:	2302      	movs	r3, #2
 801591c:	e0a8      	b.n	8015a70 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	2201      	movs	r2, #1
 8015922:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8015926:	68fb      	ldr	r3, [r7, #12]
 8015928:	2202      	movs	r2, #2
 801592a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801592e:	68fb      	ldr	r3, [r7, #12]
 8015930:	681b      	ldr	r3, [r3, #0]
 8015932:	22ca      	movs	r2, #202	@ 0xca
 8015934:	625a      	str	r2, [r3, #36]	@ 0x24
 8015936:	68fb      	ldr	r3, [r7, #12]
 8015938:	681b      	ldr	r3, [r3, #0]
 801593a:	2253      	movs	r2, #83	@ 0x53
 801593c:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	681b      	ldr	r3, [r3, #0]
 8015942:	689b      	ldr	r3, [r3, #8]
 8015944:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8015948:	2b00      	cmp	r3, #0
 801594a:	d020      	beq.n	801598e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 801594c:	f7f9 fed0 	bl	800f6f0 <HAL_GetTick>
 8015950:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8015952:	e015      	b.n	8015980 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8015954:	f7f9 fecc 	bl	800f6f0 <HAL_GetTick>
 8015958:	4602      	mov	r2, r0
 801595a:	697b      	ldr	r3, [r7, #20]
 801595c:	1ad3      	subs	r3, r2, r3
 801595e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8015962:	d90d      	bls.n	8015980 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015964:	68fb      	ldr	r3, [r7, #12]
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	22ff      	movs	r2, #255	@ 0xff
 801596a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801596c:	68fb      	ldr	r3, [r7, #12]
 801596e:	2203      	movs	r2, #3
 8015970:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8015974:	68fb      	ldr	r3, [r7, #12]
 8015976:	2200      	movs	r2, #0
 8015978:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 801597c:	2303      	movs	r3, #3
 801597e:	e077      	b.n	8015a70 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8015980:	68fb      	ldr	r3, [r7, #12]
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	68db      	ldr	r3, [r3, #12]
 8015986:	f003 0304 	and.w	r3, r3, #4
 801598a:	2b00      	cmp	r3, #0
 801598c:	d1e2      	bne.n	8015954 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801598e:	68fb      	ldr	r3, [r7, #12]
 8015990:	681b      	ldr	r3, [r3, #0]
 8015992:	689a      	ldr	r2, [r3, #8]
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	681b      	ldr	r3, [r3, #0]
 8015998:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801599c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801599e:	68fb      	ldr	r3, [r7, #12]
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	68db      	ldr	r3, [r3, #12]
 80159a4:	b2da      	uxtb	r2, r3
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	681b      	ldr	r3, [r3, #0]
 80159aa:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80159ae:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80159b0:	f7f9 fe9e 	bl	800f6f0 <HAL_GetTick>
 80159b4:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80159b6:	e015      	b.n	80159e4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80159b8:	f7f9 fe9a 	bl	800f6f0 <HAL_GetTick>
 80159bc:	4602      	mov	r2, r0
 80159be:	697b      	ldr	r3, [r7, #20]
 80159c0:	1ad3      	subs	r3, r2, r3
 80159c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80159c6:	d90d      	bls.n	80159e4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	681b      	ldr	r3, [r3, #0]
 80159cc:	22ff      	movs	r2, #255	@ 0xff
 80159ce:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80159d0:	68fb      	ldr	r3, [r7, #12]
 80159d2:	2203      	movs	r2, #3
 80159d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	2200      	movs	r2, #0
 80159dc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80159e0:	2303      	movs	r3, #3
 80159e2:	e045      	b.n	8015a70 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	681b      	ldr	r3, [r3, #0]
 80159e8:	68db      	ldr	r3, [r3, #12]
 80159ea:	f003 0304 	and.w	r3, r3, #4
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d0e2      	beq.n	80159b8 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80159f2:	68fb      	ldr	r3, [r7, #12]
 80159f4:	681b      	ldr	r3, [r3, #0]
 80159f6:	68ba      	ldr	r2, [r7, #8]
 80159f8:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80159fa:	68fb      	ldr	r3, [r7, #12]
 80159fc:	681b      	ldr	r3, [r3, #0]
 80159fe:	689a      	ldr	r2, [r3, #8]
 8015a00:	68fb      	ldr	r3, [r7, #12]
 8015a02:	681b      	ldr	r3, [r3, #0]
 8015a04:	f022 0207 	bic.w	r2, r2, #7
 8015a08:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8015a0a:	68fb      	ldr	r3, [r7, #12]
 8015a0c:	681b      	ldr	r3, [r3, #0]
 8015a0e:	6899      	ldr	r1, [r3, #8]
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	681b      	ldr	r3, [r3, #0]
 8015a14:	687a      	ldr	r2, [r7, #4]
 8015a16:	430a      	orrs	r2, r1
 8015a18:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8015a1a:	4b17      	ldr	r3, [pc, #92]	@ (8015a78 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8015a1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015a20:	4a15      	ldr	r2, [pc, #84]	@ (8015a78 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8015a22:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015a26:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8015a2a:	4b13      	ldr	r3, [pc, #76]	@ (8015a78 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8015a2c:	681b      	ldr	r3, [r3, #0]
 8015a2e:	4a12      	ldr	r2, [pc, #72]	@ (8015a78 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8015a30:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015a34:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	689a      	ldr	r2, [r3, #8]
 8015a3c:	68fb      	ldr	r3, [r7, #12]
 8015a3e:	681b      	ldr	r3, [r3, #0]
 8015a40:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8015a44:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	689a      	ldr	r2, [r3, #8]
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	681b      	ldr	r3, [r3, #0]
 8015a50:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8015a54:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015a56:	68fb      	ldr	r3, [r7, #12]
 8015a58:	681b      	ldr	r3, [r3, #0]
 8015a5a:	22ff      	movs	r2, #255	@ 0xff
 8015a5c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8015a5e:	68fb      	ldr	r3, [r7, #12]
 8015a60:	2201      	movs	r2, #1
 8015a62:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8015a66:	68fb      	ldr	r3, [r7, #12]
 8015a68:	2200      	movs	r2, #0
 8015a6a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8015a6e:	2300      	movs	r3, #0
}
 8015a70:	4618      	mov	r0, r3
 8015a72:	3718      	adds	r7, #24
 8015a74:	46bd      	mov	sp, r7
 8015a76:	bd80      	pop	{r7, pc}
 8015a78:	58000800 	.word	0x58000800

08015a7c <LL_RCC_GetUSARTClockSource>:
{
 8015a7c:	b480      	push	{r7}
 8015a7e:	b083      	sub	sp, #12
 8015a80:	af00      	add	r7, sp, #0
 8015a82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8015a84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015a88:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	4013      	ands	r3, r2
}
 8015a90:	4618      	mov	r0, r3
 8015a92:	370c      	adds	r7, #12
 8015a94:	46bd      	mov	sp, r7
 8015a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a9a:	4770      	bx	lr

08015a9c <LL_RCC_GetLPUARTClockSource>:
{
 8015a9c:	b480      	push	{r7}
 8015a9e:	b083      	sub	sp, #12
 8015aa0:	af00      	add	r7, sp, #0
 8015aa2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8015aa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015aa8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	4013      	ands	r3, r2
}
 8015ab0:	4618      	mov	r0, r3
 8015ab2:	370c      	adds	r7, #12
 8015ab4:	46bd      	mov	sp, r7
 8015ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aba:	4770      	bx	lr

08015abc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8015abc:	b580      	push	{r7, lr}
 8015abe:	b082      	sub	sp, #8
 8015ac0:	af00      	add	r7, sp, #0
 8015ac2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d101      	bne.n	8015ace <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8015aca:	2301      	movs	r3, #1
 8015acc:	e042      	b.n	8015b54 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d106      	bne.n	8015ae6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	2200      	movs	r2, #0
 8015adc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015ae0:	6878      	ldr	r0, [r7, #4]
 8015ae2:	f7f6 fd0b 	bl	800c4fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	2224      	movs	r2, #36	@ 0x24
 8015aea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	681b      	ldr	r3, [r3, #0]
 8015af2:	681a      	ldr	r2, [r3, #0]
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	f022 0201 	bic.w	r2, r2, #1
 8015afc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d002      	beq.n	8015b0c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8015b06:	6878      	ldr	r0, [r7, #4]
 8015b08:	f000 fba6 	bl	8016258 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8015b0c:	6878      	ldr	r0, [r7, #4]
 8015b0e:	f000 f97b 	bl	8015e08 <UART_SetConfig>
 8015b12:	4603      	mov	r3, r0
 8015b14:	2b01      	cmp	r3, #1
 8015b16:	d101      	bne.n	8015b1c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8015b18:	2301      	movs	r3, #1
 8015b1a:	e01b      	b.n	8015b54 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	681b      	ldr	r3, [r3, #0]
 8015b20:	685a      	ldr	r2, [r3, #4]
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	681b      	ldr	r3, [r3, #0]
 8015b26:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8015b2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	681b      	ldr	r3, [r3, #0]
 8015b30:	689a      	ldr	r2, [r3, #8]
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	681b      	ldr	r3, [r3, #0]
 8015b36:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8015b3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	681b      	ldr	r3, [r3, #0]
 8015b40:	681a      	ldr	r2, [r3, #0]
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	681b      	ldr	r3, [r3, #0]
 8015b46:	f042 0201 	orr.w	r2, r2, #1
 8015b4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8015b4c:	6878      	ldr	r0, [r7, #4]
 8015b4e:	f000 fc25 	bl	801639c <UART_CheckIdleState>
 8015b52:	4603      	mov	r3, r0
}
 8015b54:	4618      	mov	r0, r3
 8015b56:	3708      	adds	r7, #8
 8015b58:	46bd      	mov	sp, r7
 8015b5a:	bd80      	pop	{r7, pc}

08015b5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015b5c:	b580      	push	{r7, lr}
 8015b5e:	b08a      	sub	sp, #40	@ 0x28
 8015b60:	af02      	add	r7, sp, #8
 8015b62:	60f8      	str	r0, [r7, #12]
 8015b64:	60b9      	str	r1, [r7, #8]
 8015b66:	603b      	str	r3, [r7, #0]
 8015b68:	4613      	mov	r3, r2
 8015b6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015b72:	2b20      	cmp	r3, #32
 8015b74:	d17b      	bne.n	8015c6e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8015b76:	68bb      	ldr	r3, [r7, #8]
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d002      	beq.n	8015b82 <HAL_UART_Transmit+0x26>
 8015b7c:	88fb      	ldrh	r3, [r7, #6]
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d101      	bne.n	8015b86 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8015b82:	2301      	movs	r3, #1
 8015b84:	e074      	b.n	8015c70 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015b86:	68fb      	ldr	r3, [r7, #12]
 8015b88:	2200      	movs	r2, #0
 8015b8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015b8e:	68fb      	ldr	r3, [r7, #12]
 8015b90:	2221      	movs	r2, #33	@ 0x21
 8015b92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8015b96:	f7f9 fdab 	bl	800f6f0 <HAL_GetTick>
 8015b9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	88fa      	ldrh	r2, [r7, #6]
 8015ba0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8015ba4:	68fb      	ldr	r3, [r7, #12]
 8015ba6:	88fa      	ldrh	r2, [r7, #6]
 8015ba8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	689b      	ldr	r3, [r3, #8]
 8015bb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015bb4:	d108      	bne.n	8015bc8 <HAL_UART_Transmit+0x6c>
 8015bb6:	68fb      	ldr	r3, [r7, #12]
 8015bb8:	691b      	ldr	r3, [r3, #16]
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d104      	bne.n	8015bc8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8015bbe:	2300      	movs	r3, #0
 8015bc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8015bc2:	68bb      	ldr	r3, [r7, #8]
 8015bc4:	61bb      	str	r3, [r7, #24]
 8015bc6:	e003      	b.n	8015bd0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8015bc8:	68bb      	ldr	r3, [r7, #8]
 8015bca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8015bcc:	2300      	movs	r3, #0
 8015bce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8015bd0:	e030      	b.n	8015c34 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8015bd2:	683b      	ldr	r3, [r7, #0]
 8015bd4:	9300      	str	r3, [sp, #0]
 8015bd6:	697b      	ldr	r3, [r7, #20]
 8015bd8:	2200      	movs	r2, #0
 8015bda:	2180      	movs	r1, #128	@ 0x80
 8015bdc:	68f8      	ldr	r0, [r7, #12]
 8015bde:	f000 fc87 	bl	80164f0 <UART_WaitOnFlagUntilTimeout>
 8015be2:	4603      	mov	r3, r0
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d005      	beq.n	8015bf4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8015be8:	68fb      	ldr	r3, [r7, #12]
 8015bea:	2220      	movs	r2, #32
 8015bec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8015bf0:	2303      	movs	r3, #3
 8015bf2:	e03d      	b.n	8015c70 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8015bf4:	69fb      	ldr	r3, [r7, #28]
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d10b      	bne.n	8015c12 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8015bfa:	69bb      	ldr	r3, [r7, #24]
 8015bfc:	881b      	ldrh	r3, [r3, #0]
 8015bfe:	461a      	mov	r2, r3
 8015c00:	68fb      	ldr	r3, [r7, #12]
 8015c02:	681b      	ldr	r3, [r3, #0]
 8015c04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8015c08:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8015c0a:	69bb      	ldr	r3, [r7, #24]
 8015c0c:	3302      	adds	r3, #2
 8015c0e:	61bb      	str	r3, [r7, #24]
 8015c10:	e007      	b.n	8015c22 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8015c12:	69fb      	ldr	r3, [r7, #28]
 8015c14:	781a      	ldrb	r2, [r3, #0]
 8015c16:	68fb      	ldr	r3, [r7, #12]
 8015c18:	681b      	ldr	r3, [r3, #0]
 8015c1a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8015c1c:	69fb      	ldr	r3, [r7, #28]
 8015c1e:	3301      	adds	r3, #1
 8015c20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8015c28:	b29b      	uxth	r3, r3
 8015c2a:	3b01      	subs	r3, #1
 8015c2c:	b29a      	uxth	r2, r3
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8015c34:	68fb      	ldr	r3, [r7, #12]
 8015c36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8015c3a:	b29b      	uxth	r3, r3
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d1c8      	bne.n	8015bd2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8015c40:	683b      	ldr	r3, [r7, #0]
 8015c42:	9300      	str	r3, [sp, #0]
 8015c44:	697b      	ldr	r3, [r7, #20]
 8015c46:	2200      	movs	r2, #0
 8015c48:	2140      	movs	r1, #64	@ 0x40
 8015c4a:	68f8      	ldr	r0, [r7, #12]
 8015c4c:	f000 fc50 	bl	80164f0 <UART_WaitOnFlagUntilTimeout>
 8015c50:	4603      	mov	r3, r0
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d005      	beq.n	8015c62 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8015c56:	68fb      	ldr	r3, [r7, #12]
 8015c58:	2220      	movs	r2, #32
 8015c5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8015c5e:	2303      	movs	r3, #3
 8015c60:	e006      	b.n	8015c70 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8015c62:	68fb      	ldr	r3, [r7, #12]
 8015c64:	2220      	movs	r2, #32
 8015c66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8015c6a:	2300      	movs	r3, #0
 8015c6c:	e000      	b.n	8015c70 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8015c6e:	2302      	movs	r3, #2
  }
}
 8015c70:	4618      	mov	r0, r3
 8015c72:	3720      	adds	r7, #32
 8015c74:	46bd      	mov	sp, r7
 8015c76:	bd80      	pop	{r7, pc}

08015c78 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015c78:	b580      	push	{r7, lr}
 8015c7a:	b08a      	sub	sp, #40	@ 0x28
 8015c7c:	af02      	add	r7, sp, #8
 8015c7e:	60f8      	str	r0, [r7, #12]
 8015c80:	60b9      	str	r1, [r7, #8]
 8015c82:	603b      	str	r3, [r7, #0]
 8015c84:	4613      	mov	r3, r2
 8015c86:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015c88:	68fb      	ldr	r3, [r7, #12]
 8015c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015c8e:	2b20      	cmp	r3, #32
 8015c90:	f040 80b5 	bne.w	8015dfe <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8015c94:	68bb      	ldr	r3, [r7, #8]
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d002      	beq.n	8015ca0 <HAL_UART_Receive+0x28>
 8015c9a:	88fb      	ldrh	r3, [r7, #6]
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d101      	bne.n	8015ca4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8015ca0:	2301      	movs	r3, #1
 8015ca2:	e0ad      	b.n	8015e00 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015ca4:	68fb      	ldr	r3, [r7, #12]
 8015ca6:	2200      	movs	r2, #0
 8015ca8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015cac:	68fb      	ldr	r3, [r7, #12]
 8015cae:	2222      	movs	r2, #34	@ 0x22
 8015cb0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015cb4:	68fb      	ldr	r3, [r7, #12]
 8015cb6:	2200      	movs	r2, #0
 8015cb8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8015cba:	f7f9 fd19 	bl	800f6f0 <HAL_GetTick>
 8015cbe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	88fa      	ldrh	r2, [r7, #6]
 8015cc4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8015cc8:	68fb      	ldr	r3, [r7, #12]
 8015cca:	88fa      	ldrh	r2, [r7, #6]
 8015ccc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	689b      	ldr	r3, [r3, #8]
 8015cd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015cd8:	d10e      	bne.n	8015cf8 <HAL_UART_Receive+0x80>
 8015cda:	68fb      	ldr	r3, [r7, #12]
 8015cdc:	691b      	ldr	r3, [r3, #16]
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d105      	bne.n	8015cee <HAL_UART_Receive+0x76>
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8015ce8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8015cec:	e02d      	b.n	8015d4a <HAL_UART_Receive+0xd2>
 8015cee:	68fb      	ldr	r3, [r7, #12]
 8015cf0:	22ff      	movs	r2, #255	@ 0xff
 8015cf2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8015cf6:	e028      	b.n	8015d4a <HAL_UART_Receive+0xd2>
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	689b      	ldr	r3, [r3, #8]
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d10d      	bne.n	8015d1c <HAL_UART_Receive+0xa4>
 8015d00:	68fb      	ldr	r3, [r7, #12]
 8015d02:	691b      	ldr	r3, [r3, #16]
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d104      	bne.n	8015d12 <HAL_UART_Receive+0x9a>
 8015d08:	68fb      	ldr	r3, [r7, #12]
 8015d0a:	22ff      	movs	r2, #255	@ 0xff
 8015d0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8015d10:	e01b      	b.n	8015d4a <HAL_UART_Receive+0xd2>
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	227f      	movs	r2, #127	@ 0x7f
 8015d16:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8015d1a:	e016      	b.n	8015d4a <HAL_UART_Receive+0xd2>
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	689b      	ldr	r3, [r3, #8]
 8015d20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015d24:	d10d      	bne.n	8015d42 <HAL_UART_Receive+0xca>
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	691b      	ldr	r3, [r3, #16]
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d104      	bne.n	8015d38 <HAL_UART_Receive+0xc0>
 8015d2e:	68fb      	ldr	r3, [r7, #12]
 8015d30:	227f      	movs	r2, #127	@ 0x7f
 8015d32:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8015d36:	e008      	b.n	8015d4a <HAL_UART_Receive+0xd2>
 8015d38:	68fb      	ldr	r3, [r7, #12]
 8015d3a:	223f      	movs	r2, #63	@ 0x3f
 8015d3c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8015d40:	e003      	b.n	8015d4a <HAL_UART_Receive+0xd2>
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	2200      	movs	r2, #0
 8015d46:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8015d4a:	68fb      	ldr	r3, [r7, #12]
 8015d4c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015d50:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	689b      	ldr	r3, [r3, #8]
 8015d56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015d5a:	d108      	bne.n	8015d6e <HAL_UART_Receive+0xf6>
 8015d5c:	68fb      	ldr	r3, [r7, #12]
 8015d5e:	691b      	ldr	r3, [r3, #16]
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d104      	bne.n	8015d6e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8015d64:	2300      	movs	r3, #0
 8015d66:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8015d68:	68bb      	ldr	r3, [r7, #8]
 8015d6a:	61bb      	str	r3, [r7, #24]
 8015d6c:	e003      	b.n	8015d76 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8015d6e:	68bb      	ldr	r3, [r7, #8]
 8015d70:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8015d72:	2300      	movs	r3, #0
 8015d74:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8015d76:	e036      	b.n	8015de6 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8015d78:	683b      	ldr	r3, [r7, #0]
 8015d7a:	9300      	str	r3, [sp, #0]
 8015d7c:	697b      	ldr	r3, [r7, #20]
 8015d7e:	2200      	movs	r2, #0
 8015d80:	2120      	movs	r1, #32
 8015d82:	68f8      	ldr	r0, [r7, #12]
 8015d84:	f000 fbb4 	bl	80164f0 <UART_WaitOnFlagUntilTimeout>
 8015d88:	4603      	mov	r3, r0
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d005      	beq.n	8015d9a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8015d8e:	68fb      	ldr	r3, [r7, #12]
 8015d90:	2220      	movs	r2, #32
 8015d92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8015d96:	2303      	movs	r3, #3
 8015d98:	e032      	b.n	8015e00 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8015d9a:	69fb      	ldr	r3, [r7, #28]
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d10c      	bne.n	8015dba <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8015da0:	68fb      	ldr	r3, [r7, #12]
 8015da2:	681b      	ldr	r3, [r3, #0]
 8015da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015da6:	b29a      	uxth	r2, r3
 8015da8:	8a7b      	ldrh	r3, [r7, #18]
 8015daa:	4013      	ands	r3, r2
 8015dac:	b29a      	uxth	r2, r3
 8015dae:	69bb      	ldr	r3, [r7, #24]
 8015db0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8015db2:	69bb      	ldr	r3, [r7, #24]
 8015db4:	3302      	adds	r3, #2
 8015db6:	61bb      	str	r3, [r7, #24]
 8015db8:	e00c      	b.n	8015dd4 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015dc0:	b2da      	uxtb	r2, r3
 8015dc2:	8a7b      	ldrh	r3, [r7, #18]
 8015dc4:	b2db      	uxtb	r3, r3
 8015dc6:	4013      	ands	r3, r2
 8015dc8:	b2da      	uxtb	r2, r3
 8015dca:	69fb      	ldr	r3, [r7, #28]
 8015dcc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8015dce:	69fb      	ldr	r3, [r7, #28]
 8015dd0:	3301      	adds	r3, #1
 8015dd2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8015dd4:	68fb      	ldr	r3, [r7, #12]
 8015dd6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8015dda:	b29b      	uxth	r3, r3
 8015ddc:	3b01      	subs	r3, #1
 8015dde:	b29a      	uxth	r2, r3
 8015de0:	68fb      	ldr	r3, [r7, #12]
 8015de2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8015dec:	b29b      	uxth	r3, r3
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d1c2      	bne.n	8015d78 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8015df2:	68fb      	ldr	r3, [r7, #12]
 8015df4:	2220      	movs	r2, #32
 8015df6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8015dfa:	2300      	movs	r3, #0
 8015dfc:	e000      	b.n	8015e00 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8015dfe:	2302      	movs	r3, #2
  }
}
 8015e00:	4618      	mov	r0, r3
 8015e02:	3720      	adds	r7, #32
 8015e04:	46bd      	mov	sp, r7
 8015e06:	bd80      	pop	{r7, pc}

08015e08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8015e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015e0c:	b08c      	sub	sp, #48	@ 0x30
 8015e0e:	af00      	add	r7, sp, #0
 8015e10:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8015e12:	2300      	movs	r3, #0
 8015e14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8015e18:	697b      	ldr	r3, [r7, #20]
 8015e1a:	689a      	ldr	r2, [r3, #8]
 8015e1c:	697b      	ldr	r3, [r7, #20]
 8015e1e:	691b      	ldr	r3, [r3, #16]
 8015e20:	431a      	orrs	r2, r3
 8015e22:	697b      	ldr	r3, [r7, #20]
 8015e24:	695b      	ldr	r3, [r3, #20]
 8015e26:	431a      	orrs	r2, r3
 8015e28:	697b      	ldr	r3, [r7, #20]
 8015e2a:	69db      	ldr	r3, [r3, #28]
 8015e2c:	4313      	orrs	r3, r2
 8015e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8015e30:	697b      	ldr	r3, [r7, #20]
 8015e32:	681b      	ldr	r3, [r3, #0]
 8015e34:	681a      	ldr	r2, [r3, #0]
 8015e36:	4baf      	ldr	r3, [pc, #700]	@ (80160f4 <UART_SetConfig+0x2ec>)
 8015e38:	4013      	ands	r3, r2
 8015e3a:	697a      	ldr	r2, [r7, #20]
 8015e3c:	6812      	ldr	r2, [r2, #0]
 8015e3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015e40:	430b      	orrs	r3, r1
 8015e42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8015e44:	697b      	ldr	r3, [r7, #20]
 8015e46:	681b      	ldr	r3, [r3, #0]
 8015e48:	685b      	ldr	r3, [r3, #4]
 8015e4a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8015e4e:	697b      	ldr	r3, [r7, #20]
 8015e50:	68da      	ldr	r2, [r3, #12]
 8015e52:	697b      	ldr	r3, [r7, #20]
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	430a      	orrs	r2, r1
 8015e58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8015e5a:	697b      	ldr	r3, [r7, #20]
 8015e5c:	699b      	ldr	r3, [r3, #24]
 8015e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8015e60:	697b      	ldr	r3, [r7, #20]
 8015e62:	681b      	ldr	r3, [r3, #0]
 8015e64:	4aa4      	ldr	r2, [pc, #656]	@ (80160f8 <UART_SetConfig+0x2f0>)
 8015e66:	4293      	cmp	r3, r2
 8015e68:	d004      	beq.n	8015e74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8015e6a:	697b      	ldr	r3, [r7, #20]
 8015e6c:	6a1b      	ldr	r3, [r3, #32]
 8015e6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015e70:	4313      	orrs	r3, r2
 8015e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8015e74:	697b      	ldr	r3, [r7, #20]
 8015e76:	681b      	ldr	r3, [r3, #0]
 8015e78:	689b      	ldr	r3, [r3, #8]
 8015e7a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8015e7e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8015e82:	697a      	ldr	r2, [r7, #20]
 8015e84:	6812      	ldr	r2, [r2, #0]
 8015e86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015e88:	430b      	orrs	r3, r1
 8015e8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8015e8c:	697b      	ldr	r3, [r7, #20]
 8015e8e:	681b      	ldr	r3, [r3, #0]
 8015e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015e92:	f023 010f 	bic.w	r1, r3, #15
 8015e96:	697b      	ldr	r3, [r7, #20]
 8015e98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015e9a:	697b      	ldr	r3, [r7, #20]
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	430a      	orrs	r2, r1
 8015ea0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8015ea2:	697b      	ldr	r3, [r7, #20]
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	4a95      	ldr	r2, [pc, #596]	@ (80160fc <UART_SetConfig+0x2f4>)
 8015ea8:	4293      	cmp	r3, r2
 8015eaa:	d125      	bne.n	8015ef8 <UART_SetConfig+0xf0>
 8015eac:	2003      	movs	r0, #3
 8015eae:	f7ff fde5 	bl	8015a7c <LL_RCC_GetUSARTClockSource>
 8015eb2:	4603      	mov	r3, r0
 8015eb4:	2b03      	cmp	r3, #3
 8015eb6:	d81b      	bhi.n	8015ef0 <UART_SetConfig+0xe8>
 8015eb8:	a201      	add	r2, pc, #4	@ (adr r2, 8015ec0 <UART_SetConfig+0xb8>)
 8015eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ebe:	bf00      	nop
 8015ec0:	08015ed1 	.word	0x08015ed1
 8015ec4:	08015ee1 	.word	0x08015ee1
 8015ec8:	08015ed9 	.word	0x08015ed9
 8015ecc:	08015ee9 	.word	0x08015ee9
 8015ed0:	2301      	movs	r3, #1
 8015ed2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015ed6:	e042      	b.n	8015f5e <UART_SetConfig+0x156>
 8015ed8:	2302      	movs	r3, #2
 8015eda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015ede:	e03e      	b.n	8015f5e <UART_SetConfig+0x156>
 8015ee0:	2304      	movs	r3, #4
 8015ee2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015ee6:	e03a      	b.n	8015f5e <UART_SetConfig+0x156>
 8015ee8:	2308      	movs	r3, #8
 8015eea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015eee:	e036      	b.n	8015f5e <UART_SetConfig+0x156>
 8015ef0:	2310      	movs	r3, #16
 8015ef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015ef6:	e032      	b.n	8015f5e <UART_SetConfig+0x156>
 8015ef8:	697b      	ldr	r3, [r7, #20]
 8015efa:	681b      	ldr	r3, [r3, #0]
 8015efc:	4a7e      	ldr	r2, [pc, #504]	@ (80160f8 <UART_SetConfig+0x2f0>)
 8015efe:	4293      	cmp	r3, r2
 8015f00:	d12a      	bne.n	8015f58 <UART_SetConfig+0x150>
 8015f02:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8015f06:	f7ff fdc9 	bl	8015a9c <LL_RCC_GetLPUARTClockSource>
 8015f0a:	4603      	mov	r3, r0
 8015f0c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8015f10:	d01a      	beq.n	8015f48 <UART_SetConfig+0x140>
 8015f12:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8015f16:	d81b      	bhi.n	8015f50 <UART_SetConfig+0x148>
 8015f18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015f1c:	d00c      	beq.n	8015f38 <UART_SetConfig+0x130>
 8015f1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015f22:	d815      	bhi.n	8015f50 <UART_SetConfig+0x148>
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d003      	beq.n	8015f30 <UART_SetConfig+0x128>
 8015f28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8015f2c:	d008      	beq.n	8015f40 <UART_SetConfig+0x138>
 8015f2e:	e00f      	b.n	8015f50 <UART_SetConfig+0x148>
 8015f30:	2300      	movs	r3, #0
 8015f32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015f36:	e012      	b.n	8015f5e <UART_SetConfig+0x156>
 8015f38:	2302      	movs	r3, #2
 8015f3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015f3e:	e00e      	b.n	8015f5e <UART_SetConfig+0x156>
 8015f40:	2304      	movs	r3, #4
 8015f42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015f46:	e00a      	b.n	8015f5e <UART_SetConfig+0x156>
 8015f48:	2308      	movs	r3, #8
 8015f4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015f4e:	e006      	b.n	8015f5e <UART_SetConfig+0x156>
 8015f50:	2310      	movs	r3, #16
 8015f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015f56:	e002      	b.n	8015f5e <UART_SetConfig+0x156>
 8015f58:	2310      	movs	r3, #16
 8015f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8015f5e:	697b      	ldr	r3, [r7, #20]
 8015f60:	681b      	ldr	r3, [r3, #0]
 8015f62:	4a65      	ldr	r2, [pc, #404]	@ (80160f8 <UART_SetConfig+0x2f0>)
 8015f64:	4293      	cmp	r3, r2
 8015f66:	f040 8097 	bne.w	8016098 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8015f6a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8015f6e:	2b08      	cmp	r3, #8
 8015f70:	d823      	bhi.n	8015fba <UART_SetConfig+0x1b2>
 8015f72:	a201      	add	r2, pc, #4	@ (adr r2, 8015f78 <UART_SetConfig+0x170>)
 8015f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f78:	08015f9d 	.word	0x08015f9d
 8015f7c:	08015fbb 	.word	0x08015fbb
 8015f80:	08015fa5 	.word	0x08015fa5
 8015f84:	08015fbb 	.word	0x08015fbb
 8015f88:	08015fab 	.word	0x08015fab
 8015f8c:	08015fbb 	.word	0x08015fbb
 8015f90:	08015fbb 	.word	0x08015fbb
 8015f94:	08015fbb 	.word	0x08015fbb
 8015f98:	08015fb3 	.word	0x08015fb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015f9c:	f7fe fc56 	bl	801484c <HAL_RCC_GetPCLK1Freq>
 8015fa0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8015fa2:	e010      	b.n	8015fc6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015fa4:	4b56      	ldr	r3, [pc, #344]	@ (8016100 <UART_SetConfig+0x2f8>)
 8015fa6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8015fa8:	e00d      	b.n	8015fc6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8015faa:	f7fe fbcf 	bl	801474c <HAL_RCC_GetSysClockFreq>
 8015fae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8015fb0:	e009      	b.n	8015fc6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015fb2:	f248 0306 	movw	r3, #32774	@ 0x8006
 8015fb6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8015fb8:	e005      	b.n	8015fc6 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8015fba:	2300      	movs	r3, #0
 8015fbc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8015fbe:	2301      	movs	r3, #1
 8015fc0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8015fc4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8015fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	f000 812b 	beq.w	8016224 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8015fce:	697b      	ldr	r3, [r7, #20]
 8015fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015fd2:	4a4c      	ldr	r2, [pc, #304]	@ (8016104 <UART_SetConfig+0x2fc>)
 8015fd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015fd8:	461a      	mov	r2, r3
 8015fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8015fe0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8015fe2:	697b      	ldr	r3, [r7, #20]
 8015fe4:	685a      	ldr	r2, [r3, #4]
 8015fe6:	4613      	mov	r3, r2
 8015fe8:	005b      	lsls	r3, r3, #1
 8015fea:	4413      	add	r3, r2
 8015fec:	69ba      	ldr	r2, [r7, #24]
 8015fee:	429a      	cmp	r2, r3
 8015ff0:	d305      	bcc.n	8015ffe <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8015ff2:	697b      	ldr	r3, [r7, #20]
 8015ff4:	685b      	ldr	r3, [r3, #4]
 8015ff6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8015ff8:	69ba      	ldr	r2, [r7, #24]
 8015ffa:	429a      	cmp	r2, r3
 8015ffc:	d903      	bls.n	8016006 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8015ffe:	2301      	movs	r3, #1
 8016000:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8016004:	e10e      	b.n	8016224 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016008:	2200      	movs	r2, #0
 801600a:	60bb      	str	r3, [r7, #8]
 801600c:	60fa      	str	r2, [r7, #12]
 801600e:	697b      	ldr	r3, [r7, #20]
 8016010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016012:	4a3c      	ldr	r2, [pc, #240]	@ (8016104 <UART_SetConfig+0x2fc>)
 8016014:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016018:	b29b      	uxth	r3, r3
 801601a:	2200      	movs	r2, #0
 801601c:	603b      	str	r3, [r7, #0]
 801601e:	607a      	str	r2, [r7, #4]
 8016020:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016024:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8016028:	f7f1 fe0e 	bl	8007c48 <__aeabi_uldivmod>
 801602c:	4602      	mov	r2, r0
 801602e:	460b      	mov	r3, r1
 8016030:	4610      	mov	r0, r2
 8016032:	4619      	mov	r1, r3
 8016034:	f04f 0200 	mov.w	r2, #0
 8016038:	f04f 0300 	mov.w	r3, #0
 801603c:	020b      	lsls	r3, r1, #8
 801603e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8016042:	0202      	lsls	r2, r0, #8
 8016044:	6979      	ldr	r1, [r7, #20]
 8016046:	6849      	ldr	r1, [r1, #4]
 8016048:	0849      	lsrs	r1, r1, #1
 801604a:	2000      	movs	r0, #0
 801604c:	460c      	mov	r4, r1
 801604e:	4605      	mov	r5, r0
 8016050:	eb12 0804 	adds.w	r8, r2, r4
 8016054:	eb43 0905 	adc.w	r9, r3, r5
 8016058:	697b      	ldr	r3, [r7, #20]
 801605a:	685b      	ldr	r3, [r3, #4]
 801605c:	2200      	movs	r2, #0
 801605e:	469a      	mov	sl, r3
 8016060:	4693      	mov	fp, r2
 8016062:	4652      	mov	r2, sl
 8016064:	465b      	mov	r3, fp
 8016066:	4640      	mov	r0, r8
 8016068:	4649      	mov	r1, r9
 801606a:	f7f1 fded 	bl	8007c48 <__aeabi_uldivmod>
 801606e:	4602      	mov	r2, r0
 8016070:	460b      	mov	r3, r1
 8016072:	4613      	mov	r3, r2
 8016074:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8016076:	6a3b      	ldr	r3, [r7, #32]
 8016078:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801607c:	d308      	bcc.n	8016090 <UART_SetConfig+0x288>
 801607e:	6a3b      	ldr	r3, [r7, #32]
 8016080:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016084:	d204      	bcs.n	8016090 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8016086:	697b      	ldr	r3, [r7, #20]
 8016088:	681b      	ldr	r3, [r3, #0]
 801608a:	6a3a      	ldr	r2, [r7, #32]
 801608c:	60da      	str	r2, [r3, #12]
 801608e:	e0c9      	b.n	8016224 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8016090:	2301      	movs	r3, #1
 8016092:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8016096:	e0c5      	b.n	8016224 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8016098:	697b      	ldr	r3, [r7, #20]
 801609a:	69db      	ldr	r3, [r3, #28]
 801609c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80160a0:	d16d      	bne.n	801617e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80160a2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80160a6:	3b01      	subs	r3, #1
 80160a8:	2b07      	cmp	r3, #7
 80160aa:	d82d      	bhi.n	8016108 <UART_SetConfig+0x300>
 80160ac:	a201      	add	r2, pc, #4	@ (adr r2, 80160b4 <UART_SetConfig+0x2ac>)
 80160ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80160b2:	bf00      	nop
 80160b4:	080160d5 	.word	0x080160d5
 80160b8:	080160dd 	.word	0x080160dd
 80160bc:	08016109 	.word	0x08016109
 80160c0:	080160e3 	.word	0x080160e3
 80160c4:	08016109 	.word	0x08016109
 80160c8:	08016109 	.word	0x08016109
 80160cc:	08016109 	.word	0x08016109
 80160d0:	080160eb 	.word	0x080160eb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80160d4:	f7fe fbd0 	bl	8014878 <HAL_RCC_GetPCLK2Freq>
 80160d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80160da:	e01b      	b.n	8016114 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80160dc:	4b08      	ldr	r3, [pc, #32]	@ (8016100 <UART_SetConfig+0x2f8>)
 80160de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80160e0:	e018      	b.n	8016114 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80160e2:	f7fe fb33 	bl	801474c <HAL_RCC_GetSysClockFreq>
 80160e6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80160e8:	e014      	b.n	8016114 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80160ea:	f248 0306 	movw	r3, #32774	@ 0x8006
 80160ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80160f0:	e010      	b.n	8016114 <UART_SetConfig+0x30c>
 80160f2:	bf00      	nop
 80160f4:	cfff69f3 	.word	0xcfff69f3
 80160f8:	40008000 	.word	0x40008000
 80160fc:	40013800 	.word	0x40013800
 8016100:	00f42400 	.word	0x00f42400
 8016104:	0801e208 	.word	0x0801e208
      default:
        pclk = 0U;
 8016108:	2300      	movs	r3, #0
 801610a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801610c:	2301      	movs	r3, #1
 801610e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8016112:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8016114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016116:	2b00      	cmp	r3, #0
 8016118:	f000 8084 	beq.w	8016224 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801611c:	697b      	ldr	r3, [r7, #20]
 801611e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016120:	4a4b      	ldr	r2, [pc, #300]	@ (8016250 <UART_SetConfig+0x448>)
 8016122:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016126:	461a      	mov	r2, r3
 8016128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801612a:	fbb3 f3f2 	udiv	r3, r3, r2
 801612e:	005a      	lsls	r2, r3, #1
 8016130:	697b      	ldr	r3, [r7, #20]
 8016132:	685b      	ldr	r3, [r3, #4]
 8016134:	085b      	lsrs	r3, r3, #1
 8016136:	441a      	add	r2, r3
 8016138:	697b      	ldr	r3, [r7, #20]
 801613a:	685b      	ldr	r3, [r3, #4]
 801613c:	fbb2 f3f3 	udiv	r3, r2, r3
 8016140:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016142:	6a3b      	ldr	r3, [r7, #32]
 8016144:	2b0f      	cmp	r3, #15
 8016146:	d916      	bls.n	8016176 <UART_SetConfig+0x36e>
 8016148:	6a3b      	ldr	r3, [r7, #32]
 801614a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801614e:	d212      	bcs.n	8016176 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8016150:	6a3b      	ldr	r3, [r7, #32]
 8016152:	b29b      	uxth	r3, r3
 8016154:	f023 030f 	bic.w	r3, r3, #15
 8016158:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801615a:	6a3b      	ldr	r3, [r7, #32]
 801615c:	085b      	lsrs	r3, r3, #1
 801615e:	b29b      	uxth	r3, r3
 8016160:	f003 0307 	and.w	r3, r3, #7
 8016164:	b29a      	uxth	r2, r3
 8016166:	8bfb      	ldrh	r3, [r7, #30]
 8016168:	4313      	orrs	r3, r2
 801616a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 801616c:	697b      	ldr	r3, [r7, #20]
 801616e:	681b      	ldr	r3, [r3, #0]
 8016170:	8bfa      	ldrh	r2, [r7, #30]
 8016172:	60da      	str	r2, [r3, #12]
 8016174:	e056      	b.n	8016224 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8016176:	2301      	movs	r3, #1
 8016178:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 801617c:	e052      	b.n	8016224 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 801617e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8016182:	3b01      	subs	r3, #1
 8016184:	2b07      	cmp	r3, #7
 8016186:	d822      	bhi.n	80161ce <UART_SetConfig+0x3c6>
 8016188:	a201      	add	r2, pc, #4	@ (adr r2, 8016190 <UART_SetConfig+0x388>)
 801618a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801618e:	bf00      	nop
 8016190:	080161b1 	.word	0x080161b1
 8016194:	080161b9 	.word	0x080161b9
 8016198:	080161cf 	.word	0x080161cf
 801619c:	080161bf 	.word	0x080161bf
 80161a0:	080161cf 	.word	0x080161cf
 80161a4:	080161cf 	.word	0x080161cf
 80161a8:	080161cf 	.word	0x080161cf
 80161ac:	080161c7 	.word	0x080161c7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80161b0:	f7fe fb62 	bl	8014878 <HAL_RCC_GetPCLK2Freq>
 80161b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80161b6:	e010      	b.n	80161da <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80161b8:	4b26      	ldr	r3, [pc, #152]	@ (8016254 <UART_SetConfig+0x44c>)
 80161ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80161bc:	e00d      	b.n	80161da <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80161be:	f7fe fac5 	bl	801474c <HAL_RCC_GetSysClockFreq>
 80161c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80161c4:	e009      	b.n	80161da <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80161c6:	f248 0306 	movw	r3, #32774	@ 0x8006
 80161ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80161cc:	e005      	b.n	80161da <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80161ce:	2300      	movs	r3, #0
 80161d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80161d2:	2301      	movs	r3, #1
 80161d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80161d8:	bf00      	nop
    }

    if (pclk != 0U)
 80161da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d021      	beq.n	8016224 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80161e0:	697b      	ldr	r3, [r7, #20]
 80161e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80161e4:	4a1a      	ldr	r2, [pc, #104]	@ (8016250 <UART_SetConfig+0x448>)
 80161e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80161ea:	461a      	mov	r2, r3
 80161ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80161f2:	697b      	ldr	r3, [r7, #20]
 80161f4:	685b      	ldr	r3, [r3, #4]
 80161f6:	085b      	lsrs	r3, r3, #1
 80161f8:	441a      	add	r2, r3
 80161fa:	697b      	ldr	r3, [r7, #20]
 80161fc:	685b      	ldr	r3, [r3, #4]
 80161fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8016202:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016204:	6a3b      	ldr	r3, [r7, #32]
 8016206:	2b0f      	cmp	r3, #15
 8016208:	d909      	bls.n	801621e <UART_SetConfig+0x416>
 801620a:	6a3b      	ldr	r3, [r7, #32]
 801620c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016210:	d205      	bcs.n	801621e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8016212:	6a3b      	ldr	r3, [r7, #32]
 8016214:	b29a      	uxth	r2, r3
 8016216:	697b      	ldr	r3, [r7, #20]
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	60da      	str	r2, [r3, #12]
 801621c:	e002      	b.n	8016224 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 801621e:	2301      	movs	r3, #1
 8016220:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8016224:	697b      	ldr	r3, [r7, #20]
 8016226:	2201      	movs	r2, #1
 8016228:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801622c:	697b      	ldr	r3, [r7, #20]
 801622e:	2201      	movs	r2, #1
 8016230:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8016234:	697b      	ldr	r3, [r7, #20]
 8016236:	2200      	movs	r2, #0
 8016238:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801623a:	697b      	ldr	r3, [r7, #20]
 801623c:	2200      	movs	r2, #0
 801623e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8016240:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8016244:	4618      	mov	r0, r3
 8016246:	3730      	adds	r7, #48	@ 0x30
 8016248:	46bd      	mov	sp, r7
 801624a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801624e:	bf00      	nop
 8016250:	0801e208 	.word	0x0801e208
 8016254:	00f42400 	.word	0x00f42400

08016258 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8016258:	b480      	push	{r7}
 801625a:	b083      	sub	sp, #12
 801625c:	af00      	add	r7, sp, #0
 801625e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016264:	f003 0308 	and.w	r3, r3, #8
 8016268:	2b00      	cmp	r3, #0
 801626a:	d00a      	beq.n	8016282 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	681b      	ldr	r3, [r3, #0]
 8016270:	685b      	ldr	r3, [r3, #4]
 8016272:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	681b      	ldr	r3, [r3, #0]
 801627e:	430a      	orrs	r2, r1
 8016280:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016286:	f003 0301 	and.w	r3, r3, #1
 801628a:	2b00      	cmp	r3, #0
 801628c:	d00a      	beq.n	80162a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	681b      	ldr	r3, [r3, #0]
 8016292:	685b      	ldr	r3, [r3, #4]
 8016294:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	681b      	ldr	r3, [r3, #0]
 80162a0:	430a      	orrs	r2, r1
 80162a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80162a8:	f003 0302 	and.w	r3, r3, #2
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d00a      	beq.n	80162c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	681b      	ldr	r3, [r3, #0]
 80162b4:	685b      	ldr	r3, [r3, #4]
 80162b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	681b      	ldr	r3, [r3, #0]
 80162c2:	430a      	orrs	r2, r1
 80162c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80162ca:	f003 0304 	and.w	r3, r3, #4
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d00a      	beq.n	80162e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	681b      	ldr	r3, [r3, #0]
 80162d6:	685b      	ldr	r3, [r3, #4]
 80162d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	430a      	orrs	r2, r1
 80162e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80162ec:	f003 0310 	and.w	r3, r3, #16
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d00a      	beq.n	801630a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	681b      	ldr	r3, [r3, #0]
 80162f8:	689b      	ldr	r3, [r3, #8]
 80162fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	430a      	orrs	r2, r1
 8016308:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801630e:	f003 0320 	and.w	r3, r3, #32
 8016312:	2b00      	cmp	r3, #0
 8016314:	d00a      	beq.n	801632c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	689b      	ldr	r3, [r3, #8]
 801631c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	681b      	ldr	r3, [r3, #0]
 8016328:	430a      	orrs	r2, r1
 801632a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016334:	2b00      	cmp	r3, #0
 8016336:	d01a      	beq.n	801636e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	681b      	ldr	r3, [r3, #0]
 801633c:	685b      	ldr	r3, [r3, #4]
 801633e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	681b      	ldr	r3, [r3, #0]
 801634a:	430a      	orrs	r2, r1
 801634c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016352:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016356:	d10a      	bne.n	801636e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	685b      	ldr	r3, [r3, #4]
 801635e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	430a      	orrs	r2, r1
 801636c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016376:	2b00      	cmp	r3, #0
 8016378:	d00a      	beq.n	8016390 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	681b      	ldr	r3, [r3, #0]
 801637e:	685b      	ldr	r3, [r3, #4]
 8016380:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	681b      	ldr	r3, [r3, #0]
 801638c:	430a      	orrs	r2, r1
 801638e:	605a      	str	r2, [r3, #4]
  }
}
 8016390:	bf00      	nop
 8016392:	370c      	adds	r7, #12
 8016394:	46bd      	mov	sp, r7
 8016396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801639a:	4770      	bx	lr

0801639c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801639c:	b580      	push	{r7, lr}
 801639e:	b098      	sub	sp, #96	@ 0x60
 80163a0:	af02      	add	r7, sp, #8
 80163a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	2200      	movs	r2, #0
 80163a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80163ac:	f7f9 f9a0 	bl	800f6f0 <HAL_GetTick>
 80163b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	681b      	ldr	r3, [r3, #0]
 80163b6:	681b      	ldr	r3, [r3, #0]
 80163b8:	f003 0308 	and.w	r3, r3, #8
 80163bc:	2b08      	cmp	r3, #8
 80163be:	d12f      	bne.n	8016420 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80163c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80163c4:	9300      	str	r3, [sp, #0]
 80163c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80163c8:	2200      	movs	r2, #0
 80163ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80163ce:	6878      	ldr	r0, [r7, #4]
 80163d0:	f000 f88e 	bl	80164f0 <UART_WaitOnFlagUntilTimeout>
 80163d4:	4603      	mov	r3, r0
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	d022      	beq.n	8016420 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	681b      	ldr	r3, [r3, #0]
 80163de:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80163e2:	e853 3f00 	ldrex	r3, [r3]
 80163e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80163e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80163ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80163ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	681b      	ldr	r3, [r3, #0]
 80163f4:	461a      	mov	r2, r3
 80163f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80163f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80163fa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80163fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016400:	e841 2300 	strex	r3, r2, [r1]
 8016404:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8016406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016408:	2b00      	cmp	r3, #0
 801640a:	d1e6      	bne.n	80163da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	2220      	movs	r2, #32
 8016410:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	2200      	movs	r2, #0
 8016418:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801641c:	2303      	movs	r3, #3
 801641e:	e063      	b.n	80164e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	681b      	ldr	r3, [r3, #0]
 8016424:	681b      	ldr	r3, [r3, #0]
 8016426:	f003 0304 	and.w	r3, r3, #4
 801642a:	2b04      	cmp	r3, #4
 801642c:	d149      	bne.n	80164c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801642e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8016432:	9300      	str	r3, [sp, #0]
 8016434:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016436:	2200      	movs	r2, #0
 8016438:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801643c:	6878      	ldr	r0, [r7, #4]
 801643e:	f000 f857 	bl	80164f0 <UART_WaitOnFlagUntilTimeout>
 8016442:	4603      	mov	r3, r0
 8016444:	2b00      	cmp	r3, #0
 8016446:	d03c      	beq.n	80164c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801644e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016450:	e853 3f00 	ldrex	r3, [r3]
 8016454:	623b      	str	r3, [r7, #32]
   return(result);
 8016456:	6a3b      	ldr	r3, [r7, #32]
 8016458:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801645c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	681b      	ldr	r3, [r3, #0]
 8016462:	461a      	mov	r2, r3
 8016464:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016466:	633b      	str	r3, [r7, #48]	@ 0x30
 8016468:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801646a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801646c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801646e:	e841 2300 	strex	r3, r2, [r1]
 8016472:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8016474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016476:	2b00      	cmp	r3, #0
 8016478:	d1e6      	bne.n	8016448 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	681b      	ldr	r3, [r3, #0]
 801647e:	3308      	adds	r3, #8
 8016480:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016482:	693b      	ldr	r3, [r7, #16]
 8016484:	e853 3f00 	ldrex	r3, [r3]
 8016488:	60fb      	str	r3, [r7, #12]
   return(result);
 801648a:	68fb      	ldr	r3, [r7, #12]
 801648c:	f023 0301 	bic.w	r3, r3, #1
 8016490:	64bb      	str	r3, [r7, #72]	@ 0x48
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	3308      	adds	r3, #8
 8016498:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801649a:	61fa      	str	r2, [r7, #28]
 801649c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801649e:	69b9      	ldr	r1, [r7, #24]
 80164a0:	69fa      	ldr	r2, [r7, #28]
 80164a2:	e841 2300 	strex	r3, r2, [r1]
 80164a6:	617b      	str	r3, [r7, #20]
   return(result);
 80164a8:	697b      	ldr	r3, [r7, #20]
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d1e5      	bne.n	801647a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	2220      	movs	r2, #32
 80164b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	2200      	movs	r2, #0
 80164ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80164be:	2303      	movs	r3, #3
 80164c0:	e012      	b.n	80164e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	2220      	movs	r2, #32
 80164c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	2220      	movs	r2, #32
 80164ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	2200      	movs	r2, #0
 80164d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	2200      	movs	r2, #0
 80164dc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	2200      	movs	r2, #0
 80164e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80164e6:	2300      	movs	r3, #0
}
 80164e8:	4618      	mov	r0, r3
 80164ea:	3758      	adds	r7, #88	@ 0x58
 80164ec:	46bd      	mov	sp, r7
 80164ee:	bd80      	pop	{r7, pc}

080164f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80164f0:	b580      	push	{r7, lr}
 80164f2:	b084      	sub	sp, #16
 80164f4:	af00      	add	r7, sp, #0
 80164f6:	60f8      	str	r0, [r7, #12]
 80164f8:	60b9      	str	r1, [r7, #8]
 80164fa:	603b      	str	r3, [r7, #0]
 80164fc:	4613      	mov	r3, r2
 80164fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016500:	e04f      	b.n	80165a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8016502:	69bb      	ldr	r3, [r7, #24]
 8016504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016508:	d04b      	beq.n	80165a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801650a:	f7f9 f8f1 	bl	800f6f0 <HAL_GetTick>
 801650e:	4602      	mov	r2, r0
 8016510:	683b      	ldr	r3, [r7, #0]
 8016512:	1ad3      	subs	r3, r2, r3
 8016514:	69ba      	ldr	r2, [r7, #24]
 8016516:	429a      	cmp	r2, r3
 8016518:	d302      	bcc.n	8016520 <UART_WaitOnFlagUntilTimeout+0x30>
 801651a:	69bb      	ldr	r3, [r7, #24]
 801651c:	2b00      	cmp	r3, #0
 801651e:	d101      	bne.n	8016524 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8016520:	2303      	movs	r3, #3
 8016522:	e04e      	b.n	80165c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8016524:	68fb      	ldr	r3, [r7, #12]
 8016526:	681b      	ldr	r3, [r3, #0]
 8016528:	681b      	ldr	r3, [r3, #0]
 801652a:	f003 0304 	and.w	r3, r3, #4
 801652e:	2b00      	cmp	r3, #0
 8016530:	d037      	beq.n	80165a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8016532:	68bb      	ldr	r3, [r7, #8]
 8016534:	2b80      	cmp	r3, #128	@ 0x80
 8016536:	d034      	beq.n	80165a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8016538:	68bb      	ldr	r3, [r7, #8]
 801653a:	2b40      	cmp	r3, #64	@ 0x40
 801653c:	d031      	beq.n	80165a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801653e:	68fb      	ldr	r3, [r7, #12]
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	69db      	ldr	r3, [r3, #28]
 8016544:	f003 0308 	and.w	r3, r3, #8
 8016548:	2b08      	cmp	r3, #8
 801654a:	d110      	bne.n	801656e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801654c:	68fb      	ldr	r3, [r7, #12]
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	2208      	movs	r2, #8
 8016552:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8016554:	68f8      	ldr	r0, [r7, #12]
 8016556:	f000 f838 	bl	80165ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801655a:	68fb      	ldr	r3, [r7, #12]
 801655c:	2208      	movs	r2, #8
 801655e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8016562:	68fb      	ldr	r3, [r7, #12]
 8016564:	2200      	movs	r2, #0
 8016566:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801656a:	2301      	movs	r3, #1
 801656c:	e029      	b.n	80165c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801656e:	68fb      	ldr	r3, [r7, #12]
 8016570:	681b      	ldr	r3, [r3, #0]
 8016572:	69db      	ldr	r3, [r3, #28]
 8016574:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8016578:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801657c:	d111      	bne.n	80165a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801657e:	68fb      	ldr	r3, [r7, #12]
 8016580:	681b      	ldr	r3, [r3, #0]
 8016582:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8016586:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8016588:	68f8      	ldr	r0, [r7, #12]
 801658a:	f000 f81e 	bl	80165ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	2220      	movs	r2, #32
 8016592:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8016596:	68fb      	ldr	r3, [r7, #12]
 8016598:	2200      	movs	r2, #0
 801659a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801659e:	2303      	movs	r3, #3
 80165a0:	e00f      	b.n	80165c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80165a2:	68fb      	ldr	r3, [r7, #12]
 80165a4:	681b      	ldr	r3, [r3, #0]
 80165a6:	69da      	ldr	r2, [r3, #28]
 80165a8:	68bb      	ldr	r3, [r7, #8]
 80165aa:	4013      	ands	r3, r2
 80165ac:	68ba      	ldr	r2, [r7, #8]
 80165ae:	429a      	cmp	r2, r3
 80165b0:	bf0c      	ite	eq
 80165b2:	2301      	moveq	r3, #1
 80165b4:	2300      	movne	r3, #0
 80165b6:	b2db      	uxtb	r3, r3
 80165b8:	461a      	mov	r2, r3
 80165ba:	79fb      	ldrb	r3, [r7, #7]
 80165bc:	429a      	cmp	r2, r3
 80165be:	d0a0      	beq.n	8016502 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80165c0:	2300      	movs	r3, #0
}
 80165c2:	4618      	mov	r0, r3
 80165c4:	3710      	adds	r7, #16
 80165c6:	46bd      	mov	sp, r7
 80165c8:	bd80      	pop	{r7, pc}

080165ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80165ca:	b480      	push	{r7}
 80165cc:	b095      	sub	sp, #84	@ 0x54
 80165ce:	af00      	add	r7, sp, #0
 80165d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80165d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80165da:	e853 3f00 	ldrex	r3, [r3]
 80165de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80165e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80165e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80165e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	681b      	ldr	r3, [r3, #0]
 80165ec:	461a      	mov	r2, r3
 80165ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80165f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80165f2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80165f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80165f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80165f8:	e841 2300 	strex	r3, r2, [r1]
 80165fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80165fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016600:	2b00      	cmp	r3, #0
 8016602:	d1e6      	bne.n	80165d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	3308      	adds	r3, #8
 801660a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801660c:	6a3b      	ldr	r3, [r7, #32]
 801660e:	e853 3f00 	ldrex	r3, [r3]
 8016612:	61fb      	str	r3, [r7, #28]
   return(result);
 8016614:	69fb      	ldr	r3, [r7, #28]
 8016616:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801661a:	f023 0301 	bic.w	r3, r3, #1
 801661e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	3308      	adds	r3, #8
 8016626:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8016628:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801662a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801662c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801662e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016630:	e841 2300 	strex	r3, r2, [r1]
 8016634:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8016636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016638:	2b00      	cmp	r3, #0
 801663a:	d1e3      	bne.n	8016604 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016640:	2b01      	cmp	r3, #1
 8016642:	d118      	bne.n	8016676 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	681b      	ldr	r3, [r3, #0]
 8016648:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801664a:	68fb      	ldr	r3, [r7, #12]
 801664c:	e853 3f00 	ldrex	r3, [r3]
 8016650:	60bb      	str	r3, [r7, #8]
   return(result);
 8016652:	68bb      	ldr	r3, [r7, #8]
 8016654:	f023 0310 	bic.w	r3, r3, #16
 8016658:	647b      	str	r3, [r7, #68]	@ 0x44
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	681b      	ldr	r3, [r3, #0]
 801665e:	461a      	mov	r2, r3
 8016660:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016662:	61bb      	str	r3, [r7, #24]
 8016664:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016666:	6979      	ldr	r1, [r7, #20]
 8016668:	69ba      	ldr	r2, [r7, #24]
 801666a:	e841 2300 	strex	r3, r2, [r1]
 801666e:	613b      	str	r3, [r7, #16]
   return(result);
 8016670:	693b      	ldr	r3, [r7, #16]
 8016672:	2b00      	cmp	r3, #0
 8016674:	d1e6      	bne.n	8016644 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	2220      	movs	r2, #32
 801667a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	2200      	movs	r2, #0
 8016682:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	2200      	movs	r2, #0
 8016688:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801668a:	bf00      	nop
 801668c:	3754      	adds	r7, #84	@ 0x54
 801668e:	46bd      	mov	sp, r7
 8016690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016694:	4770      	bx	lr

08016696 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8016696:	b480      	push	{r7}
 8016698:	b085      	sub	sp, #20
 801669a:	af00      	add	r7, sp, #0
 801669c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80166a4:	2b01      	cmp	r3, #1
 80166a6:	d101      	bne.n	80166ac <HAL_UARTEx_DisableFifoMode+0x16>
 80166a8:	2302      	movs	r3, #2
 80166aa:	e027      	b.n	80166fc <HAL_UARTEx_DisableFifoMode+0x66>
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	2201      	movs	r2, #1
 80166b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	2224      	movs	r2, #36	@ 0x24
 80166b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	681b      	ldr	r3, [r3, #0]
 80166c0:	681b      	ldr	r3, [r3, #0]
 80166c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	681b      	ldr	r3, [r3, #0]
 80166c8:	681a      	ldr	r2, [r3, #0]
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	f022 0201 	bic.w	r2, r2, #1
 80166d2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80166d4:	68fb      	ldr	r3, [r7, #12]
 80166d6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80166da:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	2200      	movs	r2, #0
 80166e0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	68fa      	ldr	r2, [r7, #12]
 80166e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	2220      	movs	r2, #32
 80166ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	2200      	movs	r2, #0
 80166f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80166fa:	2300      	movs	r3, #0
}
 80166fc:	4618      	mov	r0, r3
 80166fe:	3714      	adds	r7, #20
 8016700:	46bd      	mov	sp, r7
 8016702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016706:	4770      	bx	lr

08016708 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8016708:	b580      	push	{r7, lr}
 801670a:	b084      	sub	sp, #16
 801670c:	af00      	add	r7, sp, #0
 801670e:	6078      	str	r0, [r7, #4]
 8016710:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8016718:	2b01      	cmp	r3, #1
 801671a:	d101      	bne.n	8016720 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801671c:	2302      	movs	r3, #2
 801671e:	e02d      	b.n	801677c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	2201      	movs	r2, #1
 8016724:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	2224      	movs	r2, #36	@ 0x24
 801672c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	681b      	ldr	r3, [r3, #0]
 8016734:	681b      	ldr	r3, [r3, #0]
 8016736:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	681b      	ldr	r3, [r3, #0]
 801673c:	681a      	ldr	r2, [r3, #0]
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	681b      	ldr	r3, [r3, #0]
 8016742:	f022 0201 	bic.w	r2, r2, #1
 8016746:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	689b      	ldr	r3, [r3, #8]
 801674e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	681b      	ldr	r3, [r3, #0]
 8016756:	683a      	ldr	r2, [r7, #0]
 8016758:	430a      	orrs	r2, r1
 801675a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801675c:	6878      	ldr	r0, [r7, #4]
 801675e:	f000 f84f 	bl	8016800 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	681b      	ldr	r3, [r3, #0]
 8016766:	68fa      	ldr	r2, [r7, #12]
 8016768:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	2220      	movs	r2, #32
 801676e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	2200      	movs	r2, #0
 8016776:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801677a:	2300      	movs	r3, #0
}
 801677c:	4618      	mov	r0, r3
 801677e:	3710      	adds	r7, #16
 8016780:	46bd      	mov	sp, r7
 8016782:	bd80      	pop	{r7, pc}

08016784 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8016784:	b580      	push	{r7, lr}
 8016786:	b084      	sub	sp, #16
 8016788:	af00      	add	r7, sp, #0
 801678a:	6078      	str	r0, [r7, #4]
 801678c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8016794:	2b01      	cmp	r3, #1
 8016796:	d101      	bne.n	801679c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8016798:	2302      	movs	r3, #2
 801679a:	e02d      	b.n	80167f8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	2201      	movs	r2, #1
 80167a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	2224      	movs	r2, #36	@ 0x24
 80167a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	681b      	ldr	r3, [r3, #0]
 80167b0:	681b      	ldr	r3, [r3, #0]
 80167b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	681b      	ldr	r3, [r3, #0]
 80167b8:	681a      	ldr	r2, [r3, #0]
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	681b      	ldr	r3, [r3, #0]
 80167be:	f022 0201 	bic.w	r2, r2, #1
 80167c2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	681b      	ldr	r3, [r3, #0]
 80167c8:	689b      	ldr	r3, [r3, #8]
 80167ca:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	681b      	ldr	r3, [r3, #0]
 80167d2:	683a      	ldr	r2, [r7, #0]
 80167d4:	430a      	orrs	r2, r1
 80167d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80167d8:	6878      	ldr	r0, [r7, #4]
 80167da:	f000 f811 	bl	8016800 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	681b      	ldr	r3, [r3, #0]
 80167e2:	68fa      	ldr	r2, [r7, #12]
 80167e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	2220      	movs	r2, #32
 80167ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	2200      	movs	r2, #0
 80167f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80167f6:	2300      	movs	r3, #0
}
 80167f8:	4618      	mov	r0, r3
 80167fa:	3710      	adds	r7, #16
 80167fc:	46bd      	mov	sp, r7
 80167fe:	bd80      	pop	{r7, pc}

08016800 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8016800:	b480      	push	{r7}
 8016802:	b085      	sub	sp, #20
 8016804:	af00      	add	r7, sp, #0
 8016806:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801680c:	2b00      	cmp	r3, #0
 801680e:	d108      	bne.n	8016822 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	2201      	movs	r2, #1
 8016814:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	2201      	movs	r2, #1
 801681c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8016820:	e031      	b.n	8016886 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8016822:	2308      	movs	r3, #8
 8016824:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8016826:	2308      	movs	r3, #8
 8016828:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	681b      	ldr	r3, [r3, #0]
 801682e:	689b      	ldr	r3, [r3, #8]
 8016830:	0e5b      	lsrs	r3, r3, #25
 8016832:	b2db      	uxtb	r3, r3
 8016834:	f003 0307 	and.w	r3, r3, #7
 8016838:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	689b      	ldr	r3, [r3, #8]
 8016840:	0f5b      	lsrs	r3, r3, #29
 8016842:	b2db      	uxtb	r3, r3
 8016844:	f003 0307 	and.w	r3, r3, #7
 8016848:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801684a:	7bbb      	ldrb	r3, [r7, #14]
 801684c:	7b3a      	ldrb	r2, [r7, #12]
 801684e:	4911      	ldr	r1, [pc, #68]	@ (8016894 <UARTEx_SetNbDataToProcess+0x94>)
 8016850:	5c8a      	ldrb	r2, [r1, r2]
 8016852:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8016856:	7b3a      	ldrb	r2, [r7, #12]
 8016858:	490f      	ldr	r1, [pc, #60]	@ (8016898 <UARTEx_SetNbDataToProcess+0x98>)
 801685a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801685c:	fb93 f3f2 	sdiv	r3, r3, r2
 8016860:	b29a      	uxth	r2, r3
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8016868:	7bfb      	ldrb	r3, [r7, #15]
 801686a:	7b7a      	ldrb	r2, [r7, #13]
 801686c:	4909      	ldr	r1, [pc, #36]	@ (8016894 <UARTEx_SetNbDataToProcess+0x94>)
 801686e:	5c8a      	ldrb	r2, [r1, r2]
 8016870:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8016874:	7b7a      	ldrb	r2, [r7, #13]
 8016876:	4908      	ldr	r1, [pc, #32]	@ (8016898 <UARTEx_SetNbDataToProcess+0x98>)
 8016878:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801687a:	fb93 f3f2 	sdiv	r3, r3, r2
 801687e:	b29a      	uxth	r2, r3
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8016886:	bf00      	nop
 8016888:	3714      	adds	r7, #20
 801688a:	46bd      	mov	sp, r7
 801688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016890:	4770      	bx	lr
 8016892:	bf00      	nop
 8016894:	0801e220 	.word	0x0801e220
 8016898:	0801e228 	.word	0x0801e228

0801689c <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 801689c:	b580      	push	{r7, lr}
 801689e:	b088      	sub	sp, #32
 80168a0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80168a2:	2300      	movs	r3, #0
 80168a4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80168a6:	f107 0308 	add.w	r3, r7, #8
 80168aa:	2218      	movs	r2, #24
 80168ac:	2100      	movs	r1, #0
 80168ae:	4618      	mov	r0, r3
 80168b0:	f001 faca 	bl	8017e48 <Osal_MemSet>
  rq.ogf = 0x3f;
 80168b4:	233f      	movs	r3, #63	@ 0x3f
 80168b6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80168b8:	2381      	movs	r3, #129	@ 0x81
 80168ba:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80168bc:	1dfb      	adds	r3, r7, #7
 80168be:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80168c0:	2301      	movs	r3, #1
 80168c2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80168c4:	f107 0308 	add.w	r3, r7, #8
 80168c8:	2100      	movs	r1, #0
 80168ca:	4618      	mov	r0, r3
 80168cc:	f001 f97a 	bl	8017bc4 <hci_send_req>
 80168d0:	4603      	mov	r3, r0
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	da01      	bge.n	80168da <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80168d6:	23ff      	movs	r3, #255	@ 0xff
 80168d8:	e000      	b.n	80168dc <aci_gap_set_non_discoverable+0x40>
  return status;
 80168da:	79fb      	ldrb	r3, [r7, #7]
}
 80168dc:	4618      	mov	r0, r3
 80168de:	3720      	adds	r7, #32
 80168e0:	46bd      	mov	sp, r7
 80168e2:	bd80      	pop	{r7, pc}

080168e4 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 80168e4:	b5b0      	push	{r4, r5, r7, lr}
 80168e6:	b0ce      	sub	sp, #312	@ 0x138
 80168e8:	af00      	add	r7, sp, #0
 80168ea:	4605      	mov	r5, r0
 80168ec:	460c      	mov	r4, r1
 80168ee:	4610      	mov	r0, r2
 80168f0:	4619      	mov	r1, r3
 80168f2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80168f6:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80168fa:	462a      	mov	r2, r5
 80168fc:	701a      	strb	r2, [r3, #0]
 80168fe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016902:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8016906:	4622      	mov	r2, r4
 8016908:	801a      	strh	r2, [r3, #0]
 801690a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801690e:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8016912:	4602      	mov	r2, r0
 8016914:	801a      	strh	r2, [r3, #0]
 8016916:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801691a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 801691e:	460a      	mov	r2, r1
 8016920:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8016922:	f107 0310 	add.w	r3, r7, #16
 8016926:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 801692a:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 801692e:	3308      	adds	r3, #8
 8016930:	f107 0210 	add.w	r2, r7, #16
 8016934:	4413      	add	r3, r2
 8016936:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 801693a:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 801693e:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8016942:	4413      	add	r3, r2
 8016944:	3309      	adds	r3, #9
 8016946:	f107 0210 	add.w	r2, r7, #16
 801694a:	4413      	add	r3, r2
 801694c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8016950:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016954:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8016958:	2200      	movs	r2, #0
 801695a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801695c:	2300      	movs	r3, #0
 801695e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8016962:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8016966:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801696a:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 801696e:	7812      	ldrb	r2, [r2, #0]
 8016970:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8016972:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016976:	3301      	adds	r3, #1
 8016978:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 801697c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8016980:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8016984:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8016988:	8812      	ldrh	r2, [r2, #0]
 801698a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 801698e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016992:	3302      	adds	r3, #2
 8016994:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8016998:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801699c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80169a0:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 80169a4:	8812      	ldrh	r2, [r2, #0]
 80169a6:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80169aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80169ae:	3302      	adds	r3, #2
 80169b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80169b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80169b8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80169bc:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80169c0:	7812      	ldrb	r2, [r2, #0]
 80169c2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80169c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80169c8:	3301      	adds	r3, #1
 80169ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80169ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80169d2:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80169d6:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80169d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80169dc:	3301      	adds	r3, #1
 80169de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80169e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80169e6:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80169ea:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80169ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80169f0:	3301      	adds	r3, #1
 80169f2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80169f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80169fa:	3308      	adds	r3, #8
 80169fc:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8016a00:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8016a04:	4618      	mov	r0, r3
 8016a06:	f001 fa0f 	bl	8017e28 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8016a0a:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8016a0e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8016a12:	4413      	add	r3, r2
 8016a14:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8016a18:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8016a1c:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8016a20:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8016a22:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016a26:	3301      	adds	r3, #1
 8016a28:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8016a2c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8016a30:	3301      	adds	r3, #1
 8016a32:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8016a36:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8016a3a:	4618      	mov	r0, r3
 8016a3c:	f001 f9f4 	bl	8017e28 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8016a40:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8016a44:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8016a48:	4413      	add	r3, r2
 8016a4a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8016a4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016a52:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8016a56:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8016a58:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016a5c:	3302      	adds	r3, #2
 8016a5e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8016a62:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016a66:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8016a6a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8016a6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016a70:	3302      	adds	r3, #2
 8016a72:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8016a76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016a7a:	2218      	movs	r2, #24
 8016a7c:	2100      	movs	r1, #0
 8016a7e:	4618      	mov	r0, r3
 8016a80:	f001 f9e2 	bl	8017e48 <Osal_MemSet>
  rq.ogf = 0x3f;
 8016a84:	233f      	movs	r3, #63	@ 0x3f
 8016a86:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8016a8a:	2383      	movs	r3, #131	@ 0x83
 8016a8c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8016a90:	f107 0310 	add.w	r3, r7, #16
 8016a94:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8016a98:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016a9c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8016aa0:	f107 030f 	add.w	r3, r7, #15
 8016aa4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8016aa8:	2301      	movs	r3, #1
 8016aaa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8016aae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016ab2:	2100      	movs	r1, #0
 8016ab4:	4618      	mov	r0, r3
 8016ab6:	f001 f885 	bl	8017bc4 <hci_send_req>
 8016aba:	4603      	mov	r3, r0
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	da01      	bge.n	8016ac4 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8016ac0:	23ff      	movs	r3, #255	@ 0xff
 8016ac2:	e004      	b.n	8016ace <aci_gap_set_discoverable+0x1ea>
  return status;
 8016ac4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016ac8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8016acc:	781b      	ldrb	r3, [r3, #0]
}
 8016ace:	4618      	mov	r0, r3
 8016ad0:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8016ad4:	46bd      	mov	sp, r7
 8016ad6:	bdb0      	pop	{r4, r5, r7, pc}

08016ad8 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8016ad8:	b580      	push	{r7, lr}
 8016ada:	b0cc      	sub	sp, #304	@ 0x130
 8016adc:	af00      	add	r7, sp, #0
 8016ade:	4602      	mov	r2, r0
 8016ae0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016ae4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8016ae8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8016aea:	f107 0310 	add.w	r3, r7, #16
 8016aee:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8016af2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016af6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8016afa:	2200      	movs	r2, #0
 8016afc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8016afe:	2300      	movs	r3, #0
 8016b00:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8016b04:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016b08:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8016b0c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8016b10:	7812      	ldrb	r2, [r2, #0]
 8016b12:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8016b14:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016b18:	3301      	adds	r3, #1
 8016b1a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8016b1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016b22:	2218      	movs	r2, #24
 8016b24:	2100      	movs	r1, #0
 8016b26:	4618      	mov	r0, r3
 8016b28:	f001 f98e 	bl	8017e48 <Osal_MemSet>
  rq.ogf = 0x3f;
 8016b2c:	233f      	movs	r3, #63	@ 0x3f
 8016b2e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 8016b32:	2385      	movs	r3, #133	@ 0x85
 8016b34:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8016b38:	f107 0310 	add.w	r3, r7, #16
 8016b3c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8016b40:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016b44:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8016b48:	f107 030f 	add.w	r3, r7, #15
 8016b4c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8016b50:	2301      	movs	r3, #1
 8016b52:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8016b56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016b5a:	2100      	movs	r1, #0
 8016b5c:	4618      	mov	r0, r3
 8016b5e:	f001 f831 	bl	8017bc4 <hci_send_req>
 8016b62:	4603      	mov	r3, r0
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	da01      	bge.n	8016b6c <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8016b68:	23ff      	movs	r3, #255	@ 0xff
 8016b6a:	e004      	b.n	8016b76 <aci_gap_set_io_capability+0x9e>
  return status;
 8016b6c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016b70:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8016b74:	781b      	ldrb	r3, [r3, #0]
}
 8016b76:	4618      	mov	r0, r3
 8016b78:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8016b7c:	46bd      	mov	sp, r7
 8016b7e:	bd80      	pop	{r7, pc}

08016b80 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8016b80:	b5b0      	push	{r4, r5, r7, lr}
 8016b82:	b0cc      	sub	sp, #304	@ 0x130
 8016b84:	af00      	add	r7, sp, #0
 8016b86:	4605      	mov	r5, r0
 8016b88:	460c      	mov	r4, r1
 8016b8a:	4610      	mov	r0, r2
 8016b8c:	4619      	mov	r1, r3
 8016b8e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016b92:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8016b96:	462a      	mov	r2, r5
 8016b98:	701a      	strb	r2, [r3, #0]
 8016b9a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016b9e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8016ba2:	4622      	mov	r2, r4
 8016ba4:	701a      	strb	r2, [r3, #0]
 8016ba6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016baa:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8016bae:	4602      	mov	r2, r0
 8016bb0:	701a      	strb	r2, [r3, #0]
 8016bb2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016bb6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8016bba:	460a      	mov	r2, r1
 8016bbc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8016bbe:	f107 0310 	add.w	r3, r7, #16
 8016bc2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8016bc6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016bca:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8016bce:	2200      	movs	r2, #0
 8016bd0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8016bd2:	2300      	movs	r3, #0
 8016bd4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8016bd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016bdc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8016be0:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8016be4:	7812      	ldrb	r2, [r2, #0]
 8016be6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8016be8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016bec:	3301      	adds	r3, #1
 8016bee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8016bf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016bf6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8016bfa:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8016bfe:	7812      	ldrb	r2, [r2, #0]
 8016c00:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8016c02:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016c06:	3301      	adds	r3, #1
 8016c08:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 8016c0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016c10:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8016c14:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8016c18:	7812      	ldrb	r2, [r2, #0]
 8016c1a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8016c1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016c20:	3301      	adds	r3, #1
 8016c22:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8016c26:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016c2a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8016c2e:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8016c32:	7812      	ldrb	r2, [r2, #0]
 8016c34:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8016c36:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016c3a:	3301      	adds	r3, #1
 8016c3c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8016c40:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016c44:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8016c48:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8016c4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016c4e:	3301      	adds	r3, #1
 8016c50:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8016c54:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016c58:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8016c5c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8016c5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016c62:	3301      	adds	r3, #1
 8016c64:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8016c68:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016c6c:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8016c70:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8016c72:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016c76:	3301      	adds	r3, #1
 8016c78:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8016c7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016c80:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8016c84:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8016c88:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016c8c:	3304      	adds	r3, #4
 8016c8e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8016c92:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016c96:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8016c9a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8016c9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016ca0:	3301      	adds	r3, #1
 8016ca2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8016ca6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016caa:	2218      	movs	r2, #24
 8016cac:	2100      	movs	r1, #0
 8016cae:	4618      	mov	r0, r3
 8016cb0:	f001 f8ca 	bl	8017e48 <Osal_MemSet>
  rq.ogf = 0x3f;
 8016cb4:	233f      	movs	r3, #63	@ 0x3f
 8016cb6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 8016cba:	2386      	movs	r3, #134	@ 0x86
 8016cbc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8016cc0:	f107 0310 	add.w	r3, r7, #16
 8016cc4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8016cc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016ccc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8016cd0:	f107 030f 	add.w	r3, r7, #15
 8016cd4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8016cd8:	2301      	movs	r3, #1
 8016cda:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8016cde:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016ce2:	2100      	movs	r1, #0
 8016ce4:	4618      	mov	r0, r3
 8016ce6:	f000 ff6d 	bl	8017bc4 <hci_send_req>
 8016cea:	4603      	mov	r3, r0
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	da01      	bge.n	8016cf4 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8016cf0:	23ff      	movs	r3, #255	@ 0xff
 8016cf2:	e004      	b.n	8016cfe <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8016cf4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016cf8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8016cfc:	781b      	ldrb	r3, [r3, #0]
}
 8016cfe:	4618      	mov	r0, r3
 8016d00:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8016d04:	46bd      	mov	sp, r7
 8016d06:	bdb0      	pop	{r4, r5, r7, pc}

08016d08 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8016d08:	b580      	push	{r7, lr}
 8016d0a:	b0cc      	sub	sp, #304	@ 0x130
 8016d0c:	af00      	add	r7, sp, #0
 8016d0e:	4602      	mov	r2, r0
 8016d10:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016d14:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8016d18:	6019      	str	r1, [r3, #0]
 8016d1a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016d1e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8016d22:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8016d24:	f107 0310 	add.w	r3, r7, #16
 8016d28:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8016d2c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016d30:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8016d34:	2200      	movs	r2, #0
 8016d36:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8016d38:	2300      	movs	r3, #0
 8016d3a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8016d3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016d42:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8016d46:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8016d4a:	8812      	ldrh	r2, [r2, #0]
 8016d4c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8016d4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016d52:	3302      	adds	r3, #2
 8016d54:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8016d58:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016d5c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8016d60:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8016d64:	6812      	ldr	r2, [r2, #0]
 8016d66:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8016d6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016d6e:	3304      	adds	r3, #4
 8016d70:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8016d74:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016d78:	2218      	movs	r2, #24
 8016d7a:	2100      	movs	r1, #0
 8016d7c:	4618      	mov	r0, r3
 8016d7e:	f001 f863 	bl	8017e48 <Osal_MemSet>
  rq.ogf = 0x3f;
 8016d82:	233f      	movs	r3, #63	@ 0x3f
 8016d84:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8016d88:	2388      	movs	r3, #136	@ 0x88
 8016d8a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8016d8e:	f107 0310 	add.w	r3, r7, #16
 8016d92:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8016d96:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016d9a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8016d9e:	f107 030f 	add.w	r3, r7, #15
 8016da2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8016da6:	2301      	movs	r3, #1
 8016da8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8016dac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016db0:	2100      	movs	r1, #0
 8016db2:	4618      	mov	r0, r3
 8016db4:	f000 ff06 	bl	8017bc4 <hci_send_req>
 8016db8:	4603      	mov	r3, r0
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	da01      	bge.n	8016dc2 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8016dbe:	23ff      	movs	r3, #255	@ 0xff
 8016dc0:	e004      	b.n	8016dcc <aci_gap_pass_key_resp+0xc4>
  return status;
 8016dc2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016dc6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8016dca:	781b      	ldrb	r3, [r3, #0]
}
 8016dcc:	4618      	mov	r0, r3
 8016dce:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8016dd2:	46bd      	mov	sp, r7
 8016dd4:	bd80      	pop	{r7, pc}

08016dd6 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8016dd6:	b590      	push	{r4, r7, lr}
 8016dd8:	b0cd      	sub	sp, #308	@ 0x134
 8016dda:	af00      	add	r7, sp, #0
 8016ddc:	4604      	mov	r4, r0
 8016dde:	4608      	mov	r0, r1
 8016de0:	4611      	mov	r1, r2
 8016de2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8016de6:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8016dea:	6013      	str	r3, [r2, #0]
 8016dec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016df0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8016df4:	4622      	mov	r2, r4
 8016df6:	701a      	strb	r2, [r3, #0]
 8016df8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016dfc:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8016e00:	4602      	mov	r2, r0
 8016e02:	701a      	strb	r2, [r3, #0]
 8016e04:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016e08:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8016e0c:	460a      	mov	r2, r1
 8016e0e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8016e10:	f107 0310 	add.w	r3, r7, #16
 8016e14:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8016e18:	f107 0308 	add.w	r3, r7, #8
 8016e1c:	2207      	movs	r2, #7
 8016e1e:	2100      	movs	r1, #0
 8016e20:	4618      	mov	r0, r3
 8016e22:	f001 f811 	bl	8017e48 <Osal_MemSet>
  int index_input = 0;
 8016e26:	2300      	movs	r3, #0
 8016e28:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8016e2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016e30:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8016e34:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8016e38:	7812      	ldrb	r2, [r2, #0]
 8016e3a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8016e3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016e40:	3301      	adds	r3, #1
 8016e42:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8016e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016e4a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8016e4e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8016e52:	7812      	ldrb	r2, [r2, #0]
 8016e54:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8016e56:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016e5a:	3301      	adds	r3, #1
 8016e5c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8016e60:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016e64:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8016e68:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8016e6c:	7812      	ldrb	r2, [r2, #0]
 8016e6e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8016e70:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016e74:	3301      	adds	r3, #1
 8016e76:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8016e7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016e7e:	2218      	movs	r2, #24
 8016e80:	2100      	movs	r1, #0
 8016e82:	4618      	mov	r0, r3
 8016e84:	f000 ffe0 	bl	8017e48 <Osal_MemSet>
  rq.ogf = 0x3f;
 8016e88:	233f      	movs	r3, #63	@ 0x3f
 8016e8a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 8016e8e:	238a      	movs	r3, #138	@ 0x8a
 8016e90:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8016e94:	f107 0310 	add.w	r3, r7, #16
 8016e98:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8016e9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016ea0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8016ea4:	f107 0308 	add.w	r3, r7, #8
 8016ea8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8016eac:	2307      	movs	r3, #7
 8016eae:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8016eb2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016eb6:	2100      	movs	r1, #0
 8016eb8:	4618      	mov	r0, r3
 8016eba:	f000 fe83 	bl	8017bc4 <hci_send_req>
 8016ebe:	4603      	mov	r3, r0
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	da01      	bge.n	8016ec8 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8016ec4:	23ff      	movs	r3, #255	@ 0xff
 8016ec6:	e02e      	b.n	8016f26 <aci_gap_init+0x150>
  if ( resp.Status )
 8016ec8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016ecc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8016ed0:	781b      	ldrb	r3, [r3, #0]
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d005      	beq.n	8016ee2 <aci_gap_init+0x10c>
    return resp.Status;
 8016ed6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016eda:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8016ede:	781b      	ldrb	r3, [r3, #0]
 8016ee0:	e021      	b.n	8016f26 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8016ee2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016ee6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8016eea:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8016eee:	b29a      	uxth	r2, r3
 8016ef0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016ef4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8016ef8:	681b      	ldr	r3, [r3, #0]
 8016efa:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8016efc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016f00:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8016f04:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8016f08:	b29a      	uxth	r2, r3
 8016f0a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8016f0e:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8016f10:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016f14:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8016f18:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8016f1c:	b29a      	uxth	r2, r3
 8016f1e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8016f22:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8016f24:	2300      	movs	r3, #0
}
 8016f26:	4618      	mov	r0, r3
 8016f28:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8016f2c:	46bd      	mov	sp, r7
 8016f2e:	bd90      	pop	{r4, r7, pc}

08016f30 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8016f30:	b580      	push	{r7, lr}
 8016f32:	b0cc      	sub	sp, #304	@ 0x130
 8016f34:	af00      	add	r7, sp, #0
 8016f36:	4602      	mov	r2, r0
 8016f38:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016f3c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8016f40:	6019      	str	r1, [r3, #0]
 8016f42:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016f46:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8016f4a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8016f4c:	f107 0310 	add.w	r3, r7, #16
 8016f50:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8016f54:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016f58:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8016f5c:	2200      	movs	r2, #0
 8016f5e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8016f60:	2300      	movs	r3, #0
 8016f62:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8016f66:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016f6a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8016f6e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8016f72:	7812      	ldrb	r2, [r2, #0]
 8016f74:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8016f76:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016f7a:	3301      	adds	r3, #1
 8016f7c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8016f80:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016f84:	1c58      	adds	r0, r3, #1
 8016f86:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016f8a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8016f8e:	781a      	ldrb	r2, [r3, #0]
 8016f90:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016f94:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8016f98:	6819      	ldr	r1, [r3, #0]
 8016f9a:	f000 ff45 	bl	8017e28 <Osal_MemCpy>
  index_input += AdvDataLen;
 8016f9e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016fa2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8016fa6:	781b      	ldrb	r3, [r3, #0]
 8016fa8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8016fac:	4413      	add	r3, r2
 8016fae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8016fb2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016fb6:	2218      	movs	r2, #24
 8016fb8:	2100      	movs	r1, #0
 8016fba:	4618      	mov	r0, r3
 8016fbc:	f000 ff44 	bl	8017e48 <Osal_MemSet>
  rq.ogf = 0x3f;
 8016fc0:	233f      	movs	r3, #63	@ 0x3f
 8016fc2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8016fc6:	238e      	movs	r3, #142	@ 0x8e
 8016fc8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8016fcc:	f107 0310 	add.w	r3, r7, #16
 8016fd0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8016fd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016fd8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8016fdc:	f107 030f 	add.w	r3, r7, #15
 8016fe0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8016fe4:	2301      	movs	r3, #1
 8016fe6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8016fea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016fee:	2100      	movs	r1, #0
 8016ff0:	4618      	mov	r0, r3
 8016ff2:	f000 fde7 	bl	8017bc4 <hci_send_req>
 8016ff6:	4603      	mov	r3, r0
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	da01      	bge.n	8017000 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8016ffc:	23ff      	movs	r3, #255	@ 0xff
 8016ffe:	e004      	b.n	801700a <aci_gap_update_adv_data+0xda>
  return status;
 8017000:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017004:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8017008:	781b      	ldrb	r3, [r3, #0]
}
 801700a:	4618      	mov	r0, r3
 801700c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8017010:	46bd      	mov	sp, r7
 8017012:	bd80      	pop	{r7, pc}

08017014 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8017014:	b580      	push	{r7, lr}
 8017016:	b088      	sub	sp, #32
 8017018:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 801701a:	2300      	movs	r3, #0
 801701c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801701e:	f107 0308 	add.w	r3, r7, #8
 8017022:	2218      	movs	r2, #24
 8017024:	2100      	movs	r1, #0
 8017026:	4618      	mov	r0, r3
 8017028:	f000 ff0e 	bl	8017e48 <Osal_MemSet>
  rq.ogf = 0x3f;
 801702c:	233f      	movs	r3, #63	@ 0x3f
 801702e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8017030:	2392      	movs	r3, #146	@ 0x92
 8017032:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8017034:	1dfb      	adds	r3, r7, #7
 8017036:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8017038:	2301      	movs	r3, #1
 801703a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 801703c:	f107 0308 	add.w	r3, r7, #8
 8017040:	2100      	movs	r1, #0
 8017042:	4618      	mov	r0, r3
 8017044:	f000 fdbe 	bl	8017bc4 <hci_send_req>
 8017048:	4603      	mov	r3, r0
 801704a:	2b00      	cmp	r3, #0
 801704c:	da01      	bge.n	8017052 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 801704e:	23ff      	movs	r3, #255	@ 0xff
 8017050:	e000      	b.n	8017054 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8017052:	79fb      	ldrb	r3, [r7, #7]
}
 8017054:	4618      	mov	r0, r3
 8017056:	3720      	adds	r7, #32
 8017058:	46bd      	mov	sp, r7
 801705a:	bd80      	pop	{r7, pc}

0801705c <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 801705c:	b580      	push	{r7, lr}
 801705e:	b0cc      	sub	sp, #304	@ 0x130
 8017060:	af00      	add	r7, sp, #0
 8017062:	4602      	mov	r2, r0
 8017064:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017068:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801706c:	801a      	strh	r2, [r3, #0]
 801706e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017072:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8017076:	460a      	mov	r2, r1
 8017078:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 801707a:	f107 0310 	add.w	r3, r7, #16
 801707e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8017082:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017086:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801708a:	2200      	movs	r2, #0
 801708c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801708e:	2300      	movs	r3, #0
 8017090:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8017094:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8017098:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801709c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80170a0:	8812      	ldrh	r2, [r2, #0]
 80170a2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80170a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80170a8:	3302      	adds	r3, #2
 80170aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 80170ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80170b2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80170b6:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80170ba:	7812      	ldrb	r2, [r2, #0]
 80170bc:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80170be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80170c2:	3301      	adds	r3, #1
 80170c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80170c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80170cc:	2218      	movs	r2, #24
 80170ce:	2100      	movs	r1, #0
 80170d0:	4618      	mov	r0, r3
 80170d2:	f000 feb9 	bl	8017e48 <Osal_MemSet>
  rq.ogf = 0x3f;
 80170d6:	233f      	movs	r3, #63	@ 0x3f
 80170d8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 80170dc:	23a5      	movs	r3, #165	@ 0xa5
 80170de:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80170e2:	f107 0310 	add.w	r3, r7, #16
 80170e6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80170ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80170ee:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80170f2:	f107 030f 	add.w	r3, r7, #15
 80170f6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80170fa:	2301      	movs	r3, #1
 80170fc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8017100:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8017104:	2100      	movs	r1, #0
 8017106:	4618      	mov	r0, r3
 8017108:	f000 fd5c 	bl	8017bc4 <hci_send_req>
 801710c:	4603      	mov	r3, r0
 801710e:	2b00      	cmp	r3, #0
 8017110:	da01      	bge.n	8017116 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8017112:	23ff      	movs	r3, #255	@ 0xff
 8017114:	e004      	b.n	8017120 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8017116:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801711a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801711e:	781b      	ldrb	r3, [r3, #0]
}
 8017120:	4618      	mov	r0, r3
 8017122:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8017126:	46bd      	mov	sp, r7
 8017128:	bd80      	pop	{r7, pc}

0801712a <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 801712a:	b580      	push	{r7, lr}
 801712c:	b088      	sub	sp, #32
 801712e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8017130:	2300      	movs	r3, #0
 8017132:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8017134:	f107 0308 	add.w	r3, r7, #8
 8017138:	2218      	movs	r2, #24
 801713a:	2100      	movs	r1, #0
 801713c:	4618      	mov	r0, r3
 801713e:	f000 fe83 	bl	8017e48 <Osal_MemSet>
  rq.ogf = 0x3f;
 8017142:	233f      	movs	r3, #63	@ 0x3f
 8017144:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8017146:	f240 1301 	movw	r3, #257	@ 0x101
 801714a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 801714c:	1dfb      	adds	r3, r7, #7
 801714e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8017150:	2301      	movs	r3, #1
 8017152:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8017154:	f107 0308 	add.w	r3, r7, #8
 8017158:	2100      	movs	r1, #0
 801715a:	4618      	mov	r0, r3
 801715c:	f000 fd32 	bl	8017bc4 <hci_send_req>
 8017160:	4603      	mov	r3, r0
 8017162:	2b00      	cmp	r3, #0
 8017164:	da01      	bge.n	801716a <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8017166:	23ff      	movs	r3, #255	@ 0xff
 8017168:	e000      	b.n	801716c <aci_gatt_init+0x42>
  return status;
 801716a:	79fb      	ldrb	r3, [r7, #7]
}
 801716c:	4618      	mov	r0, r3
 801716e:	3720      	adds	r7, #32
 8017170:	46bd      	mov	sp, r7
 8017172:	bd80      	pop	{r7, pc}

08017174 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8017174:	b590      	push	{r4, r7, lr}
 8017176:	b0cf      	sub	sp, #316	@ 0x13c
 8017178:	af00      	add	r7, sp, #0
 801717a:	4604      	mov	r4, r0
 801717c:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8017180:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8017184:	6001      	str	r1, [r0, #0]
 8017186:	4610      	mov	r0, r2
 8017188:	4619      	mov	r1, r3
 801718a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801718e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8017192:	4622      	mov	r2, r4
 8017194:	701a      	strb	r2, [r3, #0]
 8017196:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801719a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 801719e:	4602      	mov	r2, r0
 80171a0:	701a      	strb	r2, [r3, #0]
 80171a2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80171a6:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80171aa:	460a      	mov	r2, r1
 80171ac:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80171ae:	f107 0310 	add.w	r3, r7, #16
 80171b2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80171b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80171ba:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80171be:	781b      	ldrb	r3, [r3, #0]
 80171c0:	2b01      	cmp	r3, #1
 80171c2:	d00a      	beq.n	80171da <aci_gatt_add_service+0x66>
 80171c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80171c8:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80171cc:	781b      	ldrb	r3, [r3, #0]
 80171ce:	2b02      	cmp	r3, #2
 80171d0:	d101      	bne.n	80171d6 <aci_gatt_add_service+0x62>
 80171d2:	2311      	movs	r3, #17
 80171d4:	e002      	b.n	80171dc <aci_gatt_add_service+0x68>
 80171d6:	2301      	movs	r3, #1
 80171d8:	e000      	b.n	80171dc <aci_gatt_add_service+0x68>
 80171da:	2303      	movs	r3, #3
 80171dc:	f107 0210 	add.w	r2, r7, #16
 80171e0:	4413      	add	r3, r2
 80171e2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80171e6:	f107 030c 	add.w	r3, r7, #12
 80171ea:	2203      	movs	r2, #3
 80171ec:	2100      	movs	r1, #0
 80171ee:	4618      	mov	r0, r3
 80171f0:	f000 fe2a 	bl	8017e48 <Osal_MemSet>
  int index_input = 0;
 80171f4:	2300      	movs	r3, #0
 80171f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80171fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80171fe:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8017202:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8017206:	7812      	ldrb	r2, [r2, #0]
 8017208:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801720a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801720e:	3301      	adds	r3, #1
 8017210:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8017214:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8017218:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 801721c:	781b      	ldrb	r3, [r3, #0]
 801721e:	2b01      	cmp	r3, #1
 8017220:	d002      	beq.n	8017228 <aci_gatt_add_service+0xb4>
 8017222:	2b02      	cmp	r3, #2
 8017224:	d004      	beq.n	8017230 <aci_gatt_add_service+0xbc>
 8017226:	e007      	b.n	8017238 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8017228:	2302      	movs	r3, #2
 801722a:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 801722e:	e005      	b.n	801723c <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8017230:	2310      	movs	r3, #16
 8017232:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8017236:	e001      	b.n	801723c <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8017238:	2397      	movs	r3, #151	@ 0x97
 801723a:	e06c      	b.n	8017316 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 801723c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8017240:	1c58      	adds	r0, r3, #1
 8017242:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8017246:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801724a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801724e:	6819      	ldr	r1, [r3, #0]
 8017250:	f000 fdea 	bl	8017e28 <Osal_MemCpy>
    index_input += size;
 8017254:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8017258:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 801725c:	4413      	add	r3, r2
 801725e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8017262:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8017266:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801726a:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 801726e:	7812      	ldrb	r2, [r2, #0]
 8017270:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8017272:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017276:	3301      	adds	r3, #1
 8017278:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 801727c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8017280:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8017284:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8017288:	7812      	ldrb	r2, [r2, #0]
 801728a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 801728c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017290:	3301      	adds	r3, #1
 8017292:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8017296:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801729a:	2218      	movs	r2, #24
 801729c:	2100      	movs	r1, #0
 801729e:	4618      	mov	r0, r3
 80172a0:	f000 fdd2 	bl	8017e48 <Osal_MemSet>
  rq.ogf = 0x3f;
 80172a4:	233f      	movs	r3, #63	@ 0x3f
 80172a6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 80172aa:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80172ae:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80172b2:	f107 0310 	add.w	r3, r7, #16
 80172b6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80172ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80172be:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 80172c2:	f107 030c 	add.w	r3, r7, #12
 80172c6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 80172ca:	2303      	movs	r3, #3
 80172cc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80172d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80172d4:	2100      	movs	r1, #0
 80172d6:	4618      	mov	r0, r3
 80172d8:	f000 fc74 	bl	8017bc4 <hci_send_req>
 80172dc:	4603      	mov	r3, r0
 80172de:	2b00      	cmp	r3, #0
 80172e0:	da01      	bge.n	80172e6 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80172e2:	23ff      	movs	r3, #255	@ 0xff
 80172e4:	e017      	b.n	8017316 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 80172e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80172ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80172ee:	781b      	ldrb	r3, [r3, #0]
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	d005      	beq.n	8017300 <aci_gatt_add_service+0x18c>
    return resp.Status;
 80172f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80172f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80172fc:	781b      	ldrb	r3, [r3, #0]
 80172fe:	e00a      	b.n	8017316 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8017300:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8017304:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8017308:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801730c:	b29a      	uxth	r2, r3
 801730e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8017312:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8017314:	2300      	movs	r3, #0
}
 8017316:	4618      	mov	r0, r3
 8017318:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 801731c:	46bd      	mov	sp, r7
 801731e:	bd90      	pop	{r4, r7, pc}

08017320 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8017320:	b590      	push	{r4, r7, lr}
 8017322:	b0d1      	sub	sp, #324	@ 0x144
 8017324:	af00      	add	r7, sp, #0
 8017326:	4604      	mov	r4, r0
 8017328:	4608      	mov	r0, r1
 801732a:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 801732e:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8017332:	600a      	str	r2, [r1, #0]
 8017334:	4619      	mov	r1, r3
 8017336:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801733a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 801733e:	4622      	mov	r2, r4
 8017340:	801a      	strh	r2, [r3, #0]
 8017342:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8017346:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 801734a:	4602      	mov	r2, r0
 801734c:	701a      	strb	r2, [r3, #0]
 801734e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8017352:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8017356:	460a      	mov	r2, r1
 8017358:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 801735a:	f107 0318 	add.w	r3, r7, #24
 801735e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8017362:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8017366:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 801736a:	781b      	ldrb	r3, [r3, #0]
 801736c:	2b01      	cmp	r3, #1
 801736e:	d00a      	beq.n	8017386 <aci_gatt_add_char+0x66>
 8017370:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8017374:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8017378:	781b      	ldrb	r3, [r3, #0]
 801737a:	2b02      	cmp	r3, #2
 801737c:	d101      	bne.n	8017382 <aci_gatt_add_char+0x62>
 801737e:	2313      	movs	r3, #19
 8017380:	e002      	b.n	8017388 <aci_gatt_add_char+0x68>
 8017382:	2303      	movs	r3, #3
 8017384:	e000      	b.n	8017388 <aci_gatt_add_char+0x68>
 8017386:	2305      	movs	r3, #5
 8017388:	f107 0218 	add.w	r2, r7, #24
 801738c:	4413      	add	r3, r2
 801738e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8017392:	f107 0314 	add.w	r3, r7, #20
 8017396:	2203      	movs	r2, #3
 8017398:	2100      	movs	r1, #0
 801739a:	4618      	mov	r0, r3
 801739c:	f000 fd54 	bl	8017e48 <Osal_MemSet>
  int index_input = 0;
 80173a0:	2300      	movs	r3, #0
 80173a2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 80173a6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80173aa:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80173ae:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80173b2:	8812      	ldrh	r2, [r2, #0]
 80173b4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80173b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80173ba:	3302      	adds	r3, #2
 80173bc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 80173c0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80173c4:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80173c8:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 80173cc:	7812      	ldrb	r2, [r2, #0]
 80173ce:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80173d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80173d4:	3301      	adds	r3, #1
 80173d6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80173da:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80173de:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80173e2:	781b      	ldrb	r3, [r3, #0]
 80173e4:	2b01      	cmp	r3, #1
 80173e6:	d002      	beq.n	80173ee <aci_gatt_add_char+0xce>
 80173e8:	2b02      	cmp	r3, #2
 80173ea:	d004      	beq.n	80173f6 <aci_gatt_add_char+0xd6>
 80173ec:	e007      	b.n	80173fe <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 80173ee:	2302      	movs	r3, #2
 80173f0:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80173f4:	e005      	b.n	8017402 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80173f6:	2310      	movs	r3, #16
 80173f8:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80173fc:	e001      	b.n	8017402 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80173fe:	2397      	movs	r3, #151	@ 0x97
 8017400:	e091      	b.n	8017526 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8017402:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8017406:	1cd8      	adds	r0, r3, #3
 8017408:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 801740c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8017410:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8017414:	6819      	ldr	r1, [r3, #0]
 8017416:	f000 fd07 	bl	8017e28 <Osal_MemCpy>
    index_input += size;
 801741a:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 801741e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8017422:	4413      	add	r3, r2
 8017424:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8017428:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801742c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8017430:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8017434:	8812      	ldrh	r2, [r2, #0]
 8017436:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8017438:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801743c:	3302      	adds	r3, #2
 801743e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8017442:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8017446:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 801744a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 801744c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8017450:	3301      	adds	r3, #1
 8017452:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8017456:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801745a:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 801745e:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8017460:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8017464:	3301      	adds	r3, #1
 8017466:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 801746a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801746e:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8017472:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8017474:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8017478:	3301      	adds	r3, #1
 801747a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 801747e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8017482:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8017486:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8017488:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801748c:	3301      	adds	r3, #1
 801748e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8017492:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8017496:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 801749a:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 801749c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80174a0:	3301      	adds	r3, #1
 80174a2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80174a6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80174aa:	2218      	movs	r2, #24
 80174ac:	2100      	movs	r1, #0
 80174ae:	4618      	mov	r0, r3
 80174b0:	f000 fcca 	bl	8017e48 <Osal_MemSet>
  rq.ogf = 0x3f;
 80174b4:	233f      	movs	r3, #63	@ 0x3f
 80174b6:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 80174ba:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80174be:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 80174c2:	f107 0318 	add.w	r3, r7, #24
 80174c6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 80174ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80174ce:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 80174d2:	f107 0314 	add.w	r3, r7, #20
 80174d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 80174da:	2303      	movs	r3, #3
 80174dc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80174e0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80174e4:	2100      	movs	r1, #0
 80174e6:	4618      	mov	r0, r3
 80174e8:	f000 fb6c 	bl	8017bc4 <hci_send_req>
 80174ec:	4603      	mov	r3, r0
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	da01      	bge.n	80174f6 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80174f2:	23ff      	movs	r3, #255	@ 0xff
 80174f4:	e017      	b.n	8017526 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 80174f6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80174fa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80174fe:	781b      	ldrb	r3, [r3, #0]
 8017500:	2b00      	cmp	r3, #0
 8017502:	d005      	beq.n	8017510 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8017504:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8017508:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801750c:	781b      	ldrb	r3, [r3, #0]
 801750e:	e00a      	b.n	8017526 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8017510:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8017514:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8017518:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801751c:	b29a      	uxth	r2, r3
 801751e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8017522:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8017524:	2300      	movs	r3, #0
}
 8017526:	4618      	mov	r0, r3
 8017528:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 801752c:	46bd      	mov	sp, r7
 801752e:	bd90      	pop	{r4, r7, pc}

08017530 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8017530:	b5b0      	push	{r4, r5, r7, lr}
 8017532:	b0cc      	sub	sp, #304	@ 0x130
 8017534:	af00      	add	r7, sp, #0
 8017536:	4605      	mov	r5, r0
 8017538:	460c      	mov	r4, r1
 801753a:	4610      	mov	r0, r2
 801753c:	4619      	mov	r1, r3
 801753e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017542:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8017546:	462a      	mov	r2, r5
 8017548:	801a      	strh	r2, [r3, #0]
 801754a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801754e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8017552:	4622      	mov	r2, r4
 8017554:	801a      	strh	r2, [r3, #0]
 8017556:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801755a:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 801755e:	4602      	mov	r2, r0
 8017560:	701a      	strb	r2, [r3, #0]
 8017562:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017566:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 801756a:	460a      	mov	r2, r1
 801756c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 801756e:	f107 0310 	add.w	r3, r7, #16
 8017572:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8017576:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801757a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801757e:	2200      	movs	r2, #0
 8017580:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8017582:	2300      	movs	r3, #0
 8017584:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8017588:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801758c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8017590:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8017594:	8812      	ldrh	r2, [r2, #0]
 8017596:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8017598:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801759c:	3302      	adds	r3, #2
 801759e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 80175a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80175a6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80175aa:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80175ae:	8812      	ldrh	r2, [r2, #0]
 80175b0:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80175b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80175b6:	3302      	adds	r3, #2
 80175b8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 80175bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80175c0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80175c4:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 80175c8:	7812      	ldrb	r2, [r2, #0]
 80175ca:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80175cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80175d0:	3301      	adds	r3, #1
 80175d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80175d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80175da:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80175de:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 80175e2:	7812      	ldrb	r2, [r2, #0]
 80175e4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80175e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80175ea:	3301      	adds	r3, #1
 80175ec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80175f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80175f4:	1d98      	adds	r0, r3, #6
 80175f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80175fa:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80175fe:	781b      	ldrb	r3, [r3, #0]
 8017600:	461a      	mov	r2, r3
 8017602:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8017606:	f000 fc0f 	bl	8017e28 <Osal_MemCpy>
  index_input += Char_Value_Length;
 801760a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801760e:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8017612:	781b      	ldrb	r3, [r3, #0]
 8017614:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8017618:	4413      	add	r3, r2
 801761a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801761e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8017622:	2218      	movs	r2, #24
 8017624:	2100      	movs	r1, #0
 8017626:	4618      	mov	r0, r3
 8017628:	f000 fc0e 	bl	8017e48 <Osal_MemSet>
  rq.ogf = 0x3f;
 801762c:	233f      	movs	r3, #63	@ 0x3f
 801762e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8017632:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8017636:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801763a:	f107 0310 	add.w	r3, r7, #16
 801763e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8017642:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017646:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 801764a:	f107 030f 	add.w	r3, r7, #15
 801764e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8017652:	2301      	movs	r3, #1
 8017654:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8017658:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801765c:	2100      	movs	r1, #0
 801765e:	4618      	mov	r0, r3
 8017660:	f000 fab0 	bl	8017bc4 <hci_send_req>
 8017664:	4603      	mov	r3, r0
 8017666:	2b00      	cmp	r3, #0
 8017668:	da01      	bge.n	801766e <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 801766a:	23ff      	movs	r3, #255	@ 0xff
 801766c:	e004      	b.n	8017678 <aci_gatt_update_char_value+0x148>
  return status;
 801766e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017672:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8017676:	781b      	ldrb	r3, [r3, #0]
}
 8017678:	4618      	mov	r0, r3
 801767a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 801767e:	46bd      	mov	sp, r7
 8017680:	bdb0      	pop	{r4, r5, r7, pc}

08017682 <aci_gatt_allow_read>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_allow_read( uint16_t Connection_Handle )
{
 8017682:	b580      	push	{r7, lr}
 8017684:	b0cc      	sub	sp, #304	@ 0x130
 8017686:	af00      	add	r7, sp, #0
 8017688:	4602      	mov	r2, r0
 801768a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801768e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8017692:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 8017694:	f107 0310 	add.w	r3, r7, #16
 8017698:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801769c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80176a0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80176a4:	2200      	movs	r2, #0
 80176a6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80176a8:	2300      	movs	r3, #0
 80176aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80176ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80176b2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80176b6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80176ba:	8812      	ldrh	r2, [r2, #0]
 80176bc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80176be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80176c2:	3302      	adds	r3, #2
 80176c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80176c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80176cc:	2218      	movs	r2, #24
 80176ce:	2100      	movs	r1, #0
 80176d0:	4618      	mov	r0, r3
 80176d2:	f000 fbb9 	bl	8017e48 <Osal_MemSet>
  rq.ogf = 0x3f;
 80176d6:	233f      	movs	r3, #63	@ 0x3f
 80176d8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x127;
 80176dc:	f240 1327 	movw	r3, #295	@ 0x127
 80176e0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80176e4:	f107 0310 	add.w	r3, r7, #16
 80176e8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80176ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80176f0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80176f4:	f107 030f 	add.w	r3, r7, #15
 80176f8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80176fc:	2301      	movs	r3, #1
 80176fe:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8017702:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8017706:	2100      	movs	r1, #0
 8017708:	4618      	mov	r0, r3
 801770a:	f000 fa5b 	bl	8017bc4 <hci_send_req>
 801770e:	4603      	mov	r3, r0
 8017710:	2b00      	cmp	r3, #0
 8017712:	da01      	bge.n	8017718 <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 8017714:	23ff      	movs	r3, #255	@ 0xff
 8017716:	e004      	b.n	8017722 <aci_gatt_allow_read+0xa0>
  return status;
 8017718:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801771c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8017720:	781b      	ldrb	r3, [r3, #0]
}
 8017722:	4618      	mov	r0, r3
 8017724:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8017728:	46bd      	mov	sp, r7
 801772a:	bd80      	pop	{r7, pc}

0801772c <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 801772c:	b580      	push	{r7, lr}
 801772e:	b0cc      	sub	sp, #304	@ 0x130
 8017730:	af00      	add	r7, sp, #0
 8017732:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017736:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 801773a:	601a      	str	r2, [r3, #0]
 801773c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017740:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8017744:	4602      	mov	r2, r0
 8017746:	701a      	strb	r2, [r3, #0]
 8017748:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801774c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8017750:	460a      	mov	r2, r1
 8017752:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8017754:	f107 0310 	add.w	r3, r7, #16
 8017758:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801775c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017760:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8017764:	2200      	movs	r2, #0
 8017766:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8017768:	2300      	movs	r3, #0
 801776a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 801776e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8017772:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8017776:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 801777a:	7812      	ldrb	r2, [r2, #0]
 801777c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801777e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017782:	3301      	adds	r3, #1
 8017784:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8017788:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801778c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8017790:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8017794:	7812      	ldrb	r2, [r2, #0]
 8017796:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8017798:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801779c:	3301      	adds	r3, #1
 801779e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80177a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80177a6:	1c98      	adds	r0, r3, #2
 80177a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80177ac:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80177b0:	781a      	ldrb	r2, [r3, #0]
 80177b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80177b6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80177ba:	6819      	ldr	r1, [r3, #0]
 80177bc:	f000 fb34 	bl	8017e28 <Osal_MemCpy>
  index_input += Length;
 80177c0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80177c4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80177c8:	781b      	ldrb	r3, [r3, #0]
 80177ca:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80177ce:	4413      	add	r3, r2
 80177d0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80177d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80177d8:	2218      	movs	r2, #24
 80177da:	2100      	movs	r1, #0
 80177dc:	4618      	mov	r0, r3
 80177de:	f000 fb33 	bl	8017e48 <Osal_MemSet>
  rq.ogf = 0x3f;
 80177e2:	233f      	movs	r3, #63	@ 0x3f
 80177e4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 80177e8:	230c      	movs	r3, #12
 80177ea:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80177ee:	f107 0310 	add.w	r3, r7, #16
 80177f2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80177f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80177fa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80177fe:	f107 030f 	add.w	r3, r7, #15
 8017802:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8017806:	2301      	movs	r3, #1
 8017808:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801780c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8017810:	2100      	movs	r1, #0
 8017812:	4618      	mov	r0, r3
 8017814:	f000 f9d6 	bl	8017bc4 <hci_send_req>
 8017818:	4603      	mov	r3, r0
 801781a:	2b00      	cmp	r3, #0
 801781c:	da01      	bge.n	8017822 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 801781e:	23ff      	movs	r3, #255	@ 0xff
 8017820:	e004      	b.n	801782c <aci_hal_write_config_data+0x100>
  return status;
 8017822:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017826:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801782a:	781b      	ldrb	r3, [r3, #0]
}
 801782c:	4618      	mov	r0, r3
 801782e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8017832:	46bd      	mov	sp, r7
 8017834:	bd80      	pop	{r7, pc}

08017836 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8017836:	b580      	push	{r7, lr}
 8017838:	b0cc      	sub	sp, #304	@ 0x130
 801783a:	af00      	add	r7, sp, #0
 801783c:	4602      	mov	r2, r0
 801783e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017842:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8017846:	701a      	strb	r2, [r3, #0]
 8017848:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801784c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8017850:	460a      	mov	r2, r1
 8017852:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8017854:	f107 0310 	add.w	r3, r7, #16
 8017858:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801785c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017860:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8017864:	2200      	movs	r2, #0
 8017866:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8017868:	2300      	movs	r3, #0
 801786a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 801786e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8017872:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8017876:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 801787a:	7812      	ldrb	r2, [r2, #0]
 801787c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801787e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017882:	3301      	adds	r3, #1
 8017884:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8017888:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801788c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8017890:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8017894:	7812      	ldrb	r2, [r2, #0]
 8017896:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8017898:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801789c:	3301      	adds	r3, #1
 801789e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80178a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80178a6:	2218      	movs	r2, #24
 80178a8:	2100      	movs	r1, #0
 80178aa:	4618      	mov	r0, r3
 80178ac:	f000 facc 	bl	8017e48 <Osal_MemSet>
  rq.ogf = 0x3f;
 80178b0:	233f      	movs	r3, #63	@ 0x3f
 80178b2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 80178b6:	230f      	movs	r3, #15
 80178b8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80178bc:	f107 0310 	add.w	r3, r7, #16
 80178c0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80178c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80178c8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80178cc:	f107 030f 	add.w	r3, r7, #15
 80178d0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80178d4:	2301      	movs	r3, #1
 80178d6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80178da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80178de:	2100      	movs	r1, #0
 80178e0:	4618      	mov	r0, r3
 80178e2:	f000 f96f 	bl	8017bc4 <hci_send_req>
 80178e6:	4603      	mov	r3, r0
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	da01      	bge.n	80178f0 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80178ec:	23ff      	movs	r3, #255	@ 0xff
 80178ee:	e004      	b.n	80178fa <aci_hal_set_tx_power_level+0xc4>
  return status;
 80178f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80178f4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80178f8:	781b      	ldrb	r3, [r3, #0]
}
 80178fa:	4618      	mov	r0, r3
 80178fc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8017900:	46bd      	mov	sp, r7
 8017902:	bd80      	pop	{r7, pc}

08017904 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8017904:	b580      	push	{r7, lr}
 8017906:	b0cc      	sub	sp, #304	@ 0x130
 8017908:	af00      	add	r7, sp, #0
 801790a:	4602      	mov	r2, r0
 801790c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017910:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8017914:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8017916:	f107 0310 	add.w	r3, r7, #16
 801791a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801791e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017922:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8017926:	2200      	movs	r2, #0
 8017928:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801792a:	2300      	movs	r3, #0
 801792c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8017930:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8017934:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8017938:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801793c:	8812      	ldrh	r2, [r2, #0]
 801793e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8017940:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017944:	3302      	adds	r3, #2
 8017946:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801794a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801794e:	2218      	movs	r2, #24
 8017950:	2100      	movs	r1, #0
 8017952:	4618      	mov	r0, r3
 8017954:	f000 fa78 	bl	8017e48 <Osal_MemSet>
  rq.ogf = 0x3f;
 8017958:	233f      	movs	r3, #63	@ 0x3f
 801795a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 801795e:	2318      	movs	r3, #24
 8017960:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8017964:	f107 0310 	add.w	r3, r7, #16
 8017968:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801796c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017970:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8017974:	f107 030f 	add.w	r3, r7, #15
 8017978:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 801797c:	2301      	movs	r3, #1
 801797e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8017982:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8017986:	2100      	movs	r1, #0
 8017988:	4618      	mov	r0, r3
 801798a:	f000 f91b 	bl	8017bc4 <hci_send_req>
 801798e:	4603      	mov	r3, r0
 8017990:	2b00      	cmp	r3, #0
 8017992:	da01      	bge.n	8017998 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8017994:	23ff      	movs	r3, #255	@ 0xff
 8017996:	e004      	b.n	80179a2 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8017998:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801799c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80179a0:	781b      	ldrb	r3, [r3, #0]
}
 80179a2:	4618      	mov	r0, r3
 80179a4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80179a8:	46bd      	mov	sp, r7
 80179aa:	bd80      	pop	{r7, pc}

080179ac <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80179ac:	b580      	push	{r7, lr}
 80179ae:	b088      	sub	sp, #32
 80179b0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80179b2:	2300      	movs	r3, #0
 80179b4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80179b6:	f107 0308 	add.w	r3, r7, #8
 80179ba:	2218      	movs	r2, #24
 80179bc:	2100      	movs	r1, #0
 80179be:	4618      	mov	r0, r3
 80179c0:	f000 fa42 	bl	8017e48 <Osal_MemSet>
  rq.ogf = 0x03;
 80179c4:	2303      	movs	r3, #3
 80179c6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80179c8:	2303      	movs	r3, #3
 80179ca:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80179cc:	1dfb      	adds	r3, r7, #7
 80179ce:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80179d0:	2301      	movs	r3, #1
 80179d2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80179d4:	f107 0308 	add.w	r3, r7, #8
 80179d8:	2100      	movs	r1, #0
 80179da:	4618      	mov	r0, r3
 80179dc:	f000 f8f2 	bl	8017bc4 <hci_send_req>
 80179e0:	4603      	mov	r3, r0
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	da01      	bge.n	80179ea <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80179e6:	23ff      	movs	r3, #255	@ 0xff
 80179e8:	e000      	b.n	80179ec <hci_reset+0x40>
  return status;
 80179ea:	79fb      	ldrb	r3, [r7, #7]
}
 80179ec:	4618      	mov	r0, r3
 80179ee:	3720      	adds	r7, #32
 80179f0:	46bd      	mov	sp, r7
 80179f2:	bd80      	pop	{r7, pc}

080179f4 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 80179f4:	b590      	push	{r4, r7, lr}
 80179f6:	b0cd      	sub	sp, #308	@ 0x134
 80179f8:	af00      	add	r7, sp, #0
 80179fa:	4604      	mov	r4, r0
 80179fc:	4608      	mov	r0, r1
 80179fe:	4611      	mov	r1, r2
 8017a00:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017a04:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8017a08:	4622      	mov	r2, r4
 8017a0a:	701a      	strb	r2, [r3, #0]
 8017a0c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017a10:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8017a14:	4602      	mov	r2, r0
 8017a16:	701a      	strb	r2, [r3, #0]
 8017a18:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017a1c:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8017a20:	460a      	mov	r2, r1
 8017a22:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8017a24:	f107 0310 	add.w	r3, r7, #16
 8017a28:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8017a2c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017a30:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8017a34:	2200      	movs	r2, #0
 8017a36:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8017a38:	2300      	movs	r3, #0
 8017a3a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8017a3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8017a42:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8017a46:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8017a4a:	7812      	ldrb	r2, [r2, #0]
 8017a4c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8017a4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017a52:	3301      	adds	r3, #1
 8017a54:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8017a58:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8017a5c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8017a60:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8017a64:	7812      	ldrb	r2, [r2, #0]
 8017a66:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8017a68:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017a6c:	3301      	adds	r3, #1
 8017a6e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8017a72:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8017a76:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8017a7a:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8017a7e:	7812      	ldrb	r2, [r2, #0]
 8017a80:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8017a82:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017a86:	3301      	adds	r3, #1
 8017a88:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8017a8c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8017a90:	2218      	movs	r2, #24
 8017a92:	2100      	movs	r1, #0
 8017a94:	4618      	mov	r0, r3
 8017a96:	f000 f9d7 	bl	8017e48 <Osal_MemSet>
  rq.ogf = 0x08;
 8017a9a:	2308      	movs	r3, #8
 8017a9c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8017aa0:	2331      	movs	r3, #49	@ 0x31
 8017aa2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8017aa6:	f107 0310 	add.w	r3, r7, #16
 8017aaa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8017aae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017ab2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8017ab6:	f107 030f 	add.w	r3, r7, #15
 8017aba:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8017abe:	2301      	movs	r3, #1
 8017ac0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8017ac4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8017ac8:	2100      	movs	r1, #0
 8017aca:	4618      	mov	r0, r3
 8017acc:	f000 f87a 	bl	8017bc4 <hci_send_req>
 8017ad0:	4603      	mov	r3, r0
 8017ad2:	2b00      	cmp	r3, #0
 8017ad4:	da01      	bge.n	8017ada <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8017ad6:	23ff      	movs	r3, #255	@ 0xff
 8017ad8:	e004      	b.n	8017ae4 <hci_le_set_default_phy+0xf0>
  return status;
 8017ada:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017ade:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8017ae2:	781b      	ldrb	r3, [r3, #0]
}
 8017ae4:	4618      	mov	r0, r3
 8017ae6:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8017aea:	46bd      	mov	sp, r7
 8017aec:	bd90      	pop	{r4, r7, pc}
	...

08017af0 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8017af0:	b580      	push	{r7, lr}
 8017af2:	b082      	sub	sp, #8
 8017af4:	af00      	add	r7, sp, #0
 8017af6:	6078      	str	r0, [r7, #4]
 8017af8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8017afa:	683b      	ldr	r3, [r7, #0]
 8017afc:	685b      	ldr	r3, [r3, #4]
 8017afe:	4a08      	ldr	r2, [pc, #32]	@ (8017b20 <hci_init+0x30>)
 8017b00:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8017b02:	4a08      	ldr	r2, [pc, #32]	@ (8017b24 <hci_init+0x34>)
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8017b08:	4806      	ldr	r0, [pc, #24]	@ (8017b24 <hci_init+0x34>)
 8017b0a:	f000 f979 	bl	8017e00 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8017b0e:	683b      	ldr	r3, [r7, #0]
 8017b10:	681b      	ldr	r3, [r3, #0]
 8017b12:	4618      	mov	r0, r3
 8017b14:	f000 f8da 	bl	8017ccc <TlInit>

  return;
 8017b18:	bf00      	nop
}
 8017b1a:	3708      	adds	r7, #8
 8017b1c:	46bd      	mov	sp, r7
 8017b1e:	bd80      	pop	{r7, pc}
 8017b20:	2000094c 	.word	0x2000094c
 8017b24:	20000924 	.word	0x20000924

08017b28 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8017b28:	b580      	push	{r7, lr}
 8017b2a:	b084      	sub	sp, #16
 8017b2c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8017b2e:	4822      	ldr	r0, [pc, #136]	@ (8017bb8 <hci_user_evt_proc+0x90>)
 8017b30:	f000 fbfc 	bl	801832c <LST_is_empty>
 8017b34:	4603      	mov	r3, r0
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	d12b      	bne.n	8017b92 <hci_user_evt_proc+0x6a>
 8017b3a:	4b20      	ldr	r3, [pc, #128]	@ (8017bbc <hci_user_evt_proc+0x94>)
 8017b3c:	781b      	ldrb	r3, [r3, #0]
 8017b3e:	2b00      	cmp	r3, #0
 8017b40:	d027      	beq.n	8017b92 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8017b42:	f107 030c 	add.w	r3, r7, #12
 8017b46:	4619      	mov	r1, r3
 8017b48:	481b      	ldr	r0, [pc, #108]	@ (8017bb8 <hci_user_evt_proc+0x90>)
 8017b4a:	f000 fc7e 	bl	801844a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8017b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8017bc0 <hci_user_evt_proc+0x98>)
 8017b50:	69db      	ldr	r3, [r3, #28]
 8017b52:	2b00      	cmp	r3, #0
 8017b54:	d00c      	beq.n	8017b70 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8017b56:	68fb      	ldr	r3, [r7, #12]
 8017b58:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8017b5a:	2301      	movs	r3, #1
 8017b5c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8017b5e:	4b18      	ldr	r3, [pc, #96]	@ (8017bc0 <hci_user_evt_proc+0x98>)
 8017b60:	69db      	ldr	r3, [r3, #28]
 8017b62:	1d3a      	adds	r2, r7, #4
 8017b64:	4610      	mov	r0, r2
 8017b66:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8017b68:	793a      	ldrb	r2, [r7, #4]
 8017b6a:	4b14      	ldr	r3, [pc, #80]	@ (8017bbc <hci_user_evt_proc+0x94>)
 8017b6c:	701a      	strb	r2, [r3, #0]
 8017b6e:	e002      	b.n	8017b76 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8017b70:	4b12      	ldr	r3, [pc, #72]	@ (8017bbc <hci_user_evt_proc+0x94>)
 8017b72:	2201      	movs	r2, #1
 8017b74:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8017b76:	4b11      	ldr	r3, [pc, #68]	@ (8017bbc <hci_user_evt_proc+0x94>)
 8017b78:	781b      	ldrb	r3, [r3, #0]
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	d004      	beq.n	8017b88 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8017b7e:	68fb      	ldr	r3, [r7, #12]
 8017b80:	4618      	mov	r0, r3
 8017b82:	f000 ff23 	bl	80189cc <TL_MM_EvtDone>
 8017b86:	e004      	b.n	8017b92 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8017b88:	68fb      	ldr	r3, [r7, #12]
 8017b8a:	4619      	mov	r1, r3
 8017b8c:	480a      	ldr	r0, [pc, #40]	@ (8017bb8 <hci_user_evt_proc+0x90>)
 8017b8e:	f000 fbef 	bl	8018370 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8017b92:	4809      	ldr	r0, [pc, #36]	@ (8017bb8 <hci_user_evt_proc+0x90>)
 8017b94:	f000 fbca 	bl	801832c <LST_is_empty>
 8017b98:	4603      	mov	r3, r0
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	d107      	bne.n	8017bae <hci_user_evt_proc+0x86>
 8017b9e:	4b07      	ldr	r3, [pc, #28]	@ (8017bbc <hci_user_evt_proc+0x94>)
 8017ba0:	781b      	ldrb	r3, [r3, #0]
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	d003      	beq.n	8017bae <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8017ba6:	4804      	ldr	r0, [pc, #16]	@ (8017bb8 <hci_user_evt_proc+0x90>)
 8017ba8:	f7f4 ffb4 	bl	800cb14 <hci_notify_asynch_evt>
  }


  return;
 8017bac:	bf00      	nop
 8017bae:	bf00      	nop
}
 8017bb0:	3710      	adds	r7, #16
 8017bb2:	46bd      	mov	sp, r7
 8017bb4:	bd80      	pop	{r7, pc}
 8017bb6:	bf00      	nop
 8017bb8:	2000026c 	.word	0x2000026c
 8017bbc:	20000278 	.word	0x20000278
 8017bc0:	20000924 	.word	0x20000924

08017bc4 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8017bc4:	b580      	push	{r7, lr}
 8017bc6:	b088      	sub	sp, #32
 8017bc8:	af00      	add	r7, sp, #0
 8017bca:	6078      	str	r0, [r7, #4]
 8017bcc:	460b      	mov	r3, r1
 8017bce:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8017bd0:	2000      	movs	r0, #0
 8017bd2:	f000 f8d1 	bl	8017d78 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8017bd6:	2300      	movs	r3, #0
 8017bd8:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	885b      	ldrh	r3, [r3, #2]
 8017bde:	b21b      	sxth	r3, r3
 8017be0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8017be4:	b21a      	sxth	r2, r3
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	881b      	ldrh	r3, [r3, #0]
 8017bea:	029b      	lsls	r3, r3, #10
 8017bec:	b21b      	sxth	r3, r3
 8017bee:	4313      	orrs	r3, r2
 8017bf0:	b21b      	sxth	r3, r3
 8017bf2:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8017bf4:	4b33      	ldr	r3, [pc, #204]	@ (8017cc4 <hci_send_req+0x100>)
 8017bf6:	2201      	movs	r2, #1
 8017bf8:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	68db      	ldr	r3, [r3, #12]
 8017bfe:	b2d9      	uxtb	r1, r3
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	689a      	ldr	r2, [r3, #8]
 8017c04:	8bbb      	ldrh	r3, [r7, #28]
 8017c06:	4618      	mov	r0, r3
 8017c08:	f000 f890 	bl	8017d2c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8017c0c:	e04e      	b.n	8017cac <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8017c0e:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8017c12:	f7f4 ff96 	bl	800cb42 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8017c16:	e043      	b.n	8017ca0 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8017c18:	f107 030c 	add.w	r3, r7, #12
 8017c1c:	4619      	mov	r1, r3
 8017c1e:	482a      	ldr	r0, [pc, #168]	@ (8017cc8 <hci_send_req+0x104>)
 8017c20:	f000 fc13 	bl	801844a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8017c24:	68fb      	ldr	r3, [r7, #12]
 8017c26:	7a5b      	ldrb	r3, [r3, #9]
 8017c28:	2b0f      	cmp	r3, #15
 8017c2a:	d114      	bne.n	8017c56 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8017c2c:	68fb      	ldr	r3, [r7, #12]
 8017c2e:	330b      	adds	r3, #11
 8017c30:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8017c32:	693b      	ldr	r3, [r7, #16]
 8017c34:	885b      	ldrh	r3, [r3, #2]
 8017c36:	b29b      	uxth	r3, r3
 8017c38:	8bba      	ldrh	r2, [r7, #28]
 8017c3a:	429a      	cmp	r2, r3
 8017c3c:	d104      	bne.n	8017c48 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	691b      	ldr	r3, [r3, #16]
 8017c42:	693a      	ldr	r2, [r7, #16]
 8017c44:	7812      	ldrb	r2, [r2, #0]
 8017c46:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8017c48:	693b      	ldr	r3, [r7, #16]
 8017c4a:	785b      	ldrb	r3, [r3, #1]
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	d027      	beq.n	8017ca0 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8017c50:	2301      	movs	r3, #1
 8017c52:	77fb      	strb	r3, [r7, #31]
 8017c54:	e024      	b.n	8017ca0 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8017c56:	68fb      	ldr	r3, [r7, #12]
 8017c58:	330b      	adds	r3, #11
 8017c5a:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8017c5c:	69bb      	ldr	r3, [r7, #24]
 8017c5e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8017c62:	b29b      	uxth	r3, r3
 8017c64:	8bba      	ldrh	r2, [r7, #28]
 8017c66:	429a      	cmp	r2, r3
 8017c68:	d114      	bne.n	8017c94 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8017c6a:	68fb      	ldr	r3, [r7, #12]
 8017c6c:	7a9b      	ldrb	r3, [r3, #10]
 8017c6e:	3b03      	subs	r3, #3
 8017c70:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	695a      	ldr	r2, [r3, #20]
 8017c76:	7dfb      	ldrb	r3, [r7, #23]
 8017c78:	429a      	cmp	r2, r3
 8017c7a:	bfa8      	it	ge
 8017c7c:	461a      	movge	r2, r3
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	6918      	ldr	r0, [r3, #16]
 8017c86:	69bb      	ldr	r3, [r7, #24]
 8017c88:	1cd9      	adds	r1, r3, #3
 8017c8a:	687b      	ldr	r3, [r7, #4]
 8017c8c:	695b      	ldr	r3, [r3, #20]
 8017c8e:	461a      	mov	r2, r3
 8017c90:	f002 fb4d 	bl	801a32e <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8017c94:	69bb      	ldr	r3, [r7, #24]
 8017c96:	781b      	ldrb	r3, [r3, #0]
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	d001      	beq.n	8017ca0 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8017c9c:	2301      	movs	r3, #1
 8017c9e:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8017ca0:	4809      	ldr	r0, [pc, #36]	@ (8017cc8 <hci_send_req+0x104>)
 8017ca2:	f000 fb43 	bl	801832c <LST_is_empty>
 8017ca6:	4603      	mov	r3, r0
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	d0b5      	beq.n	8017c18 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8017cac:	7ffb      	ldrb	r3, [r7, #31]
 8017cae:	2b00      	cmp	r3, #0
 8017cb0:	d0ad      	beq.n	8017c0e <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8017cb2:	2001      	movs	r0, #1
 8017cb4:	f000 f860 	bl	8017d78 <NotifyCmdStatus>

  return 0;
 8017cb8:	2300      	movs	r3, #0
}
 8017cba:	4618      	mov	r0, r3
 8017cbc:	3720      	adds	r7, #32
 8017cbe:	46bd      	mov	sp, r7
 8017cc0:	bd80      	pop	{r7, pc}
 8017cc2:	bf00      	nop
 8017cc4:	20000950 	.word	0x20000950
 8017cc8:	20000944 	.word	0x20000944

08017ccc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8017ccc:	b580      	push	{r7, lr}
 8017cce:	b086      	sub	sp, #24
 8017cd0:	af00      	add	r7, sp, #0
 8017cd2:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8017cd4:	480f      	ldr	r0, [pc, #60]	@ (8017d14 <TlInit+0x48>)
 8017cd6:	f000 fb19 	bl	801830c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8017cda:	4a0f      	ldr	r2, [pc, #60]	@ (8017d18 <TlInit+0x4c>)
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8017ce0:	480e      	ldr	r0, [pc, #56]	@ (8017d1c <TlInit+0x50>)
 8017ce2:	f000 fb13 	bl	801830c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8017ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8017d20 <TlInit+0x54>)
 8017ce8:	2201      	movs	r2, #1
 8017cea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8017cec:	4b0d      	ldr	r3, [pc, #52]	@ (8017d24 <TlInit+0x58>)
 8017cee:	681b      	ldr	r3, [r3, #0]
 8017cf0:	2b00      	cmp	r3, #0
 8017cf2:	d00a      	beq.n	8017d0a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8017cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8017d28 <TlInit+0x5c>)
 8017cfa:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8017cfc:	4b09      	ldr	r3, [pc, #36]	@ (8017d24 <TlInit+0x58>)
 8017cfe:	681b      	ldr	r3, [r3, #0]
 8017d00:	f107 0208 	add.w	r2, r7, #8
 8017d04:	4610      	mov	r0, r2
 8017d06:	4798      	blx	r3
  }

  return;
 8017d08:	bf00      	nop
 8017d0a:	bf00      	nop
}
 8017d0c:	3718      	adds	r7, #24
 8017d0e:	46bd      	mov	sp, r7
 8017d10:	bd80      	pop	{r7, pc}
 8017d12:	bf00      	nop
 8017d14:	20000944 	.word	0x20000944
 8017d18:	20000274 	.word	0x20000274
 8017d1c:	2000026c 	.word	0x2000026c
 8017d20:	20000278 	.word	0x20000278
 8017d24:	20000924 	.word	0x20000924
 8017d28:	08017db9 	.word	0x08017db9

08017d2c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8017d2c:	b580      	push	{r7, lr}
 8017d2e:	b082      	sub	sp, #8
 8017d30:	af00      	add	r7, sp, #0
 8017d32:	4603      	mov	r3, r0
 8017d34:	603a      	str	r2, [r7, #0]
 8017d36:	80fb      	strh	r3, [r7, #6]
 8017d38:	460b      	mov	r3, r1
 8017d3a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8017d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8017d70 <SendCmd+0x44>)
 8017d3e:	681b      	ldr	r3, [r3, #0]
 8017d40:	88fa      	ldrh	r2, [r7, #6]
 8017d42:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8017d46:	4b0a      	ldr	r3, [pc, #40]	@ (8017d70 <SendCmd+0x44>)
 8017d48:	681b      	ldr	r3, [r3, #0]
 8017d4a:	797a      	ldrb	r2, [r7, #5]
 8017d4c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8017d4e:	4b08      	ldr	r3, [pc, #32]	@ (8017d70 <SendCmd+0x44>)
 8017d50:	681b      	ldr	r3, [r3, #0]
 8017d52:	330c      	adds	r3, #12
 8017d54:	797a      	ldrb	r2, [r7, #5]
 8017d56:	6839      	ldr	r1, [r7, #0]
 8017d58:	4618      	mov	r0, r3
 8017d5a:	f002 fae8 	bl	801a32e <memcpy>

  hciContext.io.Send(0,0);
 8017d5e:	4b05      	ldr	r3, [pc, #20]	@ (8017d74 <SendCmd+0x48>)
 8017d60:	691b      	ldr	r3, [r3, #16]
 8017d62:	2100      	movs	r1, #0
 8017d64:	2000      	movs	r0, #0
 8017d66:	4798      	blx	r3

  return;
 8017d68:	bf00      	nop
}
 8017d6a:	3708      	adds	r7, #8
 8017d6c:	46bd      	mov	sp, r7
 8017d6e:	bd80      	pop	{r7, pc}
 8017d70:	20000274 	.word	0x20000274
 8017d74:	20000924 	.word	0x20000924

08017d78 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8017d78:	b580      	push	{r7, lr}
 8017d7a:	b082      	sub	sp, #8
 8017d7c:	af00      	add	r7, sp, #0
 8017d7e:	4603      	mov	r3, r0
 8017d80:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8017d82:	79fb      	ldrb	r3, [r7, #7]
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d108      	bne.n	8017d9a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8017d88:	4b0a      	ldr	r3, [pc, #40]	@ (8017db4 <NotifyCmdStatus+0x3c>)
 8017d8a:	681b      	ldr	r3, [r3, #0]
 8017d8c:	2b00      	cmp	r3, #0
 8017d8e:	d00d      	beq.n	8017dac <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8017d90:	4b08      	ldr	r3, [pc, #32]	@ (8017db4 <NotifyCmdStatus+0x3c>)
 8017d92:	681b      	ldr	r3, [r3, #0]
 8017d94:	2000      	movs	r0, #0
 8017d96:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8017d98:	e008      	b.n	8017dac <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8017d9a:	4b06      	ldr	r3, [pc, #24]	@ (8017db4 <NotifyCmdStatus+0x3c>)
 8017d9c:	681b      	ldr	r3, [r3, #0]
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d004      	beq.n	8017dac <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8017da2:	4b04      	ldr	r3, [pc, #16]	@ (8017db4 <NotifyCmdStatus+0x3c>)
 8017da4:	681b      	ldr	r3, [r3, #0]
 8017da6:	2001      	movs	r0, #1
 8017da8:	4798      	blx	r3
  return;
 8017daa:	bf00      	nop
 8017dac:	bf00      	nop
}
 8017dae:	3708      	adds	r7, #8
 8017db0:	46bd      	mov	sp, r7
 8017db2:	bd80      	pop	{r7, pc}
 8017db4:	2000094c 	.word	0x2000094c

08017db8 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8017db8:	b580      	push	{r7, lr}
 8017dba:	b082      	sub	sp, #8
 8017dbc:	af00      	add	r7, sp, #0
 8017dbe:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8017dc0:	687b      	ldr	r3, [r7, #4]
 8017dc2:	7a5b      	ldrb	r3, [r3, #9]
 8017dc4:	2b0f      	cmp	r3, #15
 8017dc6:	d003      	beq.n	8017dd0 <TlEvtReceived+0x18>
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	7a5b      	ldrb	r3, [r3, #9]
 8017dcc:	2b0e      	cmp	r3, #14
 8017dce:	d107      	bne.n	8017de0 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8017dd0:	6879      	ldr	r1, [r7, #4]
 8017dd2:	4809      	ldr	r0, [pc, #36]	@ (8017df8 <TlEvtReceived+0x40>)
 8017dd4:	f000 faf2 	bl	80183bc <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8017dd8:	2000      	movs	r0, #0
 8017dda:	f7f4 fea7 	bl	800cb2c <hci_cmd_resp_release>
 8017dde:	e006      	b.n	8017dee <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8017de0:	6879      	ldr	r1, [r7, #4]
 8017de2:	4806      	ldr	r0, [pc, #24]	@ (8017dfc <TlEvtReceived+0x44>)
 8017de4:	f000 faea 	bl	80183bc <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8017de8:	4804      	ldr	r0, [pc, #16]	@ (8017dfc <TlEvtReceived+0x44>)
 8017dea:	f7f4 fe93 	bl	800cb14 <hci_notify_asynch_evt>
  }

  return;
 8017dee:	bf00      	nop
}
 8017df0:	3708      	adds	r7, #8
 8017df2:	46bd      	mov	sp, r7
 8017df4:	bd80      	pop	{r7, pc}
 8017df6:	bf00      	nop
 8017df8:	20000944 	.word	0x20000944
 8017dfc:	2000026c 	.word	0x2000026c

08017e00 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8017e00:	b480      	push	{r7}
 8017e02:	b083      	sub	sp, #12
 8017e04:	af00      	add	r7, sp, #0
 8017e06:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	4a05      	ldr	r2, [pc, #20]	@ (8017e20 <hci_register_io_bus+0x20>)
 8017e0c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	4a04      	ldr	r2, [pc, #16]	@ (8017e24 <hci_register_io_bus+0x24>)
 8017e12:	611a      	str	r2, [r3, #16]

  return;
 8017e14:	bf00      	nop
}
 8017e16:	370c      	adds	r7, #12
 8017e18:	46bd      	mov	sp, r7
 8017e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e1e:	4770      	bx	lr
 8017e20:	08018745 	.word	0x08018745
 8017e24:	080187ad 	.word	0x080187ad

08017e28 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8017e28:	b580      	push	{r7, lr}
 8017e2a:	b084      	sub	sp, #16
 8017e2c:	af00      	add	r7, sp, #0
 8017e2e:	60f8      	str	r0, [r7, #12]
 8017e30:	60b9      	str	r1, [r7, #8]
 8017e32:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8017e34:	687a      	ldr	r2, [r7, #4]
 8017e36:	68b9      	ldr	r1, [r7, #8]
 8017e38:	68f8      	ldr	r0, [r7, #12]
 8017e3a:	f002 fa78 	bl	801a32e <memcpy>
 8017e3e:	4603      	mov	r3, r0
}
 8017e40:	4618      	mov	r0, r3
 8017e42:	3710      	adds	r7, #16
 8017e44:	46bd      	mov	sp, r7
 8017e46:	bd80      	pop	{r7, pc}

08017e48 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8017e48:	b580      	push	{r7, lr}
 8017e4a:	b084      	sub	sp, #16
 8017e4c:	af00      	add	r7, sp, #0
 8017e4e:	60f8      	str	r0, [r7, #12]
 8017e50:	60b9      	str	r1, [r7, #8]
 8017e52:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8017e54:	687a      	ldr	r2, [r7, #4]
 8017e56:	68b9      	ldr	r1, [r7, #8]
 8017e58:	68f8      	ldr	r0, [r7, #12]
 8017e5a:	f002 f9e9 	bl	801a230 <memset>
 8017e5e:	4603      	mov	r3, r0
}
 8017e60:	4618      	mov	r0, r3
 8017e62:	3710      	adds	r7, #16
 8017e64:	46bd      	mov	sp, r7
 8017e66:	bd80      	pop	{r7, pc}

08017e68 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8017e68:	b480      	push	{r7}
 8017e6a:	b085      	sub	sp, #20
 8017e6c:	af00      	add	r7, sp, #0
 8017e6e:	4603      	mov	r3, r0
 8017e70:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8017e72:	4b0f      	ldr	r3, [pc, #60]	@ (8017eb0 <OTP_Read+0x48>)
 8017e74:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8017e76:	e002      	b.n	8017e7e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8017e78:	68fb      	ldr	r3, [r7, #12]
 8017e7a:	3b08      	subs	r3, #8
 8017e7c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8017e7e:	68fb      	ldr	r3, [r7, #12]
 8017e80:	3307      	adds	r3, #7
 8017e82:	781b      	ldrb	r3, [r3, #0]
 8017e84:	79fa      	ldrb	r2, [r7, #7]
 8017e86:	429a      	cmp	r2, r3
 8017e88:	d003      	beq.n	8017e92 <OTP_Read+0x2a>
 8017e8a:	68fb      	ldr	r3, [r7, #12]
 8017e8c:	4a09      	ldr	r2, [pc, #36]	@ (8017eb4 <OTP_Read+0x4c>)
 8017e8e:	4293      	cmp	r3, r2
 8017e90:	d1f2      	bne.n	8017e78 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8017e92:	68fb      	ldr	r3, [r7, #12]
 8017e94:	3307      	adds	r3, #7
 8017e96:	781b      	ldrb	r3, [r3, #0]
 8017e98:	79fa      	ldrb	r2, [r7, #7]
 8017e9a:	429a      	cmp	r2, r3
 8017e9c:	d001      	beq.n	8017ea2 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8017e9e:	2300      	movs	r3, #0
 8017ea0:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8017ea2:	68fb      	ldr	r3, [r7, #12]
}
 8017ea4:	4618      	mov	r0, r3
 8017ea6:	3714      	adds	r7, #20
 8017ea8:	46bd      	mov	sp, r7
 8017eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eae:	4770      	bx	lr
 8017eb0:	1fff73f8 	.word	0x1fff73f8
 8017eb4:	1fff7000 	.word	0x1fff7000

08017eb8 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8017eb8:	b580      	push	{r7, lr}
 8017eba:	b088      	sub	sp, #32
 8017ebc:	af00      	add	r7, sp, #0
 8017ebe:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8017ec0:	f107 030c 	add.w	r3, r7, #12
 8017ec4:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8017ecc:	69fb      	ldr	r3, [r7, #28]
 8017ece:	212e      	movs	r1, #46	@ 0x2e
 8017ed0:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8017ed4:	f000 f94c 	bl	8018170 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8017ed8:	69fb      	ldr	r3, [r7, #28]
 8017eda:	330b      	adds	r3, #11
 8017edc:	78db      	ldrb	r3, [r3, #3]
}
 8017ede:	4618      	mov	r0, r3
 8017ee0:	3720      	adds	r7, #32
 8017ee2:	46bd      	mov	sp, r7
 8017ee4:	bd80      	pop	{r7, pc}

08017ee6 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8017ee6:	b580      	push	{r7, lr}
 8017ee8:	b088      	sub	sp, #32
 8017eea:	af00      	add	r7, sp, #0
 8017eec:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8017eee:	f107 030c 	add.w	r3, r7, #12
 8017ef2:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8017efa:	69fb      	ldr	r3, [r7, #28]
 8017efc:	210f      	movs	r1, #15
 8017efe:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8017f02:	f000 f935 	bl	8018170 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8017f06:	69fb      	ldr	r3, [r7, #28]
 8017f08:	330b      	adds	r3, #11
 8017f0a:	78db      	ldrb	r3, [r3, #3]
}
 8017f0c:	4618      	mov	r0, r3
 8017f0e:	3720      	adds	r7, #32
 8017f10:	46bd      	mov	sp, r7
 8017f12:	bd80      	pop	{r7, pc}

08017f14 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8017f14:	b580      	push	{r7, lr}
 8017f16:	b088      	sub	sp, #32
 8017f18:	af00      	add	r7, sp, #0
 8017f1a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8017f1c:	f107 030c 	add.w	r3, r7, #12
 8017f20:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8017f22:	69fb      	ldr	r3, [r7, #28]
 8017f24:	687a      	ldr	r2, [r7, #4]
 8017f26:	2110      	movs	r1, #16
 8017f28:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8017f2c:	f000 f920 	bl	8018170 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8017f30:	69fb      	ldr	r3, [r7, #28]
 8017f32:	330b      	adds	r3, #11
 8017f34:	78db      	ldrb	r3, [r3, #3]
}
 8017f36:	4618      	mov	r0, r3
 8017f38:	3720      	adds	r7, #32
 8017f3a:	46bd      	mov	sp, r7
 8017f3c:	bd80      	pop	{r7, pc}
	...

08017f40 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8017f40:	b480      	push	{r7}
 8017f42:	b08b      	sub	sp, #44	@ 0x2c
 8017f44:	af00      	add	r7, sp, #0
 8017f46:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8017f48:	2300      	movs	r3, #0
 8017f4a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8017f4c:	2300      	movs	r3, #0
 8017f4e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8017f50:	2300      	movs	r3, #0
 8017f52:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8017f54:	2300      	movs	r3, #0
 8017f56:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8017f58:	2300      	movs	r3, #0
 8017f5a:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8017f5c:	2300      	movs	r3, #0
 8017f5e:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8017f60:	2300      	movs	r3, #0
 8017f62:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8017f64:	2300      	movs	r3, #0
 8017f66:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8017f68:	4b4a      	ldr	r3, [pc, #296]	@ (8018094 <SHCI_GetWirelessFwInfo+0x154>)
 8017f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017f6c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8017f70:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8017f72:	693b      	ldr	r3, [r7, #16]
 8017f74:	009b      	lsls	r3, r3, #2
 8017f76:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8017f7a:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8017f7e:	681b      	ldr	r3, [r3, #0]
 8017f80:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8017f82:	68bb      	ldr	r3, [r7, #8]
 8017f84:	681b      	ldr	r3, [r3, #0]
 8017f86:	4a44      	ldr	r2, [pc, #272]	@ (8018098 <SHCI_GetWirelessFwInfo+0x158>)
 8017f88:	4293      	cmp	r3, r2
 8017f8a:	d10f      	bne.n	8017fac <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8017f8c:	68bb      	ldr	r3, [r7, #8]
 8017f8e:	695b      	ldr	r3, [r3, #20]
 8017f90:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8017f92:	68bb      	ldr	r3, [r7, #8]
 8017f94:	699b      	ldr	r3, [r3, #24]
 8017f96:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8017f98:	68bb      	ldr	r3, [r7, #8]
 8017f9a:	69db      	ldr	r3, [r3, #28]
 8017f9c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8017f9e:	68bb      	ldr	r3, [r7, #8]
 8017fa0:	68db      	ldr	r3, [r3, #12]
 8017fa2:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8017fa4:	68bb      	ldr	r3, [r7, #8]
 8017fa6:	691b      	ldr	r3, [r3, #16]
 8017fa8:	617b      	str	r3, [r7, #20]
 8017faa:	e01a      	b.n	8017fe2 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8017fac:	693b      	ldr	r3, [r7, #16]
 8017fae:	009b      	lsls	r3, r3, #2
 8017fb0:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8017fb4:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8017fb8:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8017fba:	68fb      	ldr	r3, [r7, #12]
 8017fbc:	681b      	ldr	r3, [r3, #0]
 8017fbe:	691b      	ldr	r3, [r3, #16]
 8017fc0:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8017fc2:	68fb      	ldr	r3, [r7, #12]
 8017fc4:	681b      	ldr	r3, [r3, #0]
 8017fc6:	695b      	ldr	r3, [r3, #20]
 8017fc8:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8017fca:	68fb      	ldr	r3, [r7, #12]
 8017fcc:	681b      	ldr	r3, [r3, #0]
 8017fce:	699b      	ldr	r3, [r3, #24]
 8017fd0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8017fd2:	68fb      	ldr	r3, [r7, #12]
 8017fd4:	681b      	ldr	r3, [r3, #0]
 8017fd6:	685b      	ldr	r3, [r3, #4]
 8017fd8:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8017fda:	68fb      	ldr	r3, [r7, #12]
 8017fdc:	681b      	ldr	r3, [r3, #0]
 8017fde:	689b      	ldr	r3, [r3, #8]
 8017fe0:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8017fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fe4:	0e1b      	lsrs	r3, r3, #24
 8017fe6:	b2da      	uxtb	r2, r3
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8017fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fee:	0c1b      	lsrs	r3, r3, #16
 8017ff0:	b2da      	uxtb	r2, r3
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8017ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ff8:	0a1b      	lsrs	r3, r3, #8
 8017ffa:	b2da      	uxtb	r2, r3
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8018000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018002:	091b      	lsrs	r3, r3, #4
 8018004:	b2db      	uxtb	r3, r3
 8018006:	f003 030f 	and.w	r3, r3, #15
 801800a:	b2da      	uxtb	r2, r3
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8018010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018012:	b2db      	uxtb	r3, r3
 8018014:	f003 030f 	and.w	r3, r3, #15
 8018018:	b2da      	uxtb	r2, r3
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 801801e:	6a3b      	ldr	r3, [r7, #32]
 8018020:	0e1b      	lsrs	r3, r3, #24
 8018022:	b2da      	uxtb	r2, r3
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8018028:	6a3b      	ldr	r3, [r7, #32]
 801802a:	0c1b      	lsrs	r3, r3, #16
 801802c:	b2da      	uxtb	r2, r3
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8018032:	6a3b      	ldr	r3, [r7, #32]
 8018034:	0a1b      	lsrs	r3, r3, #8
 8018036:	b2da      	uxtb	r2, r3
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 801803c:	6a3b      	ldr	r3, [r7, #32]
 801803e:	b2da      	uxtb	r2, r3
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8018044:	69fb      	ldr	r3, [r7, #28]
 8018046:	b2da      	uxtb	r2, r3
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 801804c:	69bb      	ldr	r3, [r7, #24]
 801804e:	0e1b      	lsrs	r3, r3, #24
 8018050:	b2da      	uxtb	r2, r3
 8018052:	687b      	ldr	r3, [r7, #4]
 8018054:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8018056:	69bb      	ldr	r3, [r7, #24]
 8018058:	0c1b      	lsrs	r3, r3, #16
 801805a:	b2da      	uxtb	r2, r3
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8018060:	69bb      	ldr	r3, [r7, #24]
 8018062:	0a1b      	lsrs	r3, r3, #8
 8018064:	b2da      	uxtb	r2, r3
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 801806a:	697b      	ldr	r3, [r7, #20]
 801806c:	0e1b      	lsrs	r3, r3, #24
 801806e:	b2da      	uxtb	r2, r3
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8018074:	697b      	ldr	r3, [r7, #20]
 8018076:	0c1b      	lsrs	r3, r3, #16
 8018078:	b2da      	uxtb	r2, r3
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 801807e:	697b      	ldr	r3, [r7, #20]
 8018080:	b2da      	uxtb	r2, r3
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8018086:	2300      	movs	r3, #0
}
 8018088:	4618      	mov	r0, r3
 801808a:	372c      	adds	r7, #44	@ 0x2c
 801808c:	46bd      	mov	sp, r7
 801808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018092:	4770      	bx	lr
 8018094:	58004000 	.word	0x58004000
 8018098:	a94656b9 	.word	0xa94656b9

0801809c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 801809c:	b580      	push	{r7, lr}
 801809e:	b082      	sub	sp, #8
 80180a0:	af00      	add	r7, sp, #0
 80180a2:	6078      	str	r0, [r7, #4]
 80180a4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80180a6:	683b      	ldr	r3, [r7, #0]
 80180a8:	685b      	ldr	r3, [r3, #4]
 80180aa:	4a08      	ldr	r2, [pc, #32]	@ (80180cc <shci_init+0x30>)
 80180ac:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80180ae:	4a08      	ldr	r2, [pc, #32]	@ (80180d0 <shci_init+0x34>)
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80180b4:	4806      	ldr	r0, [pc, #24]	@ (80180d0 <shci_init+0x34>)
 80180b6:	f000 f915 	bl	80182e4 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80180ba:	683b      	ldr	r3, [r7, #0]
 80180bc:	681b      	ldr	r3, [r3, #0]
 80180be:	4618      	mov	r0, r3
 80180c0:	f000 f898 	bl	80181f4 <TlInit>

  return;
 80180c4:	bf00      	nop
}
 80180c6:	3708      	adds	r7, #8
 80180c8:	46bd      	mov	sp, r7
 80180ca:	bd80      	pop	{r7, pc}
 80180cc:	20000974 	.word	0x20000974
 80180d0:	20000954 	.word	0x20000954

080180d4 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80180d4:	b580      	push	{r7, lr}
 80180d6:	b084      	sub	sp, #16
 80180d8:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80180da:	4822      	ldr	r0, [pc, #136]	@ (8018164 <shci_user_evt_proc+0x90>)
 80180dc:	f000 f926 	bl	801832c <LST_is_empty>
 80180e0:	4603      	mov	r3, r0
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	d12b      	bne.n	801813e <shci_user_evt_proc+0x6a>
 80180e6:	4b20      	ldr	r3, [pc, #128]	@ (8018168 <shci_user_evt_proc+0x94>)
 80180e8:	781b      	ldrb	r3, [r3, #0]
 80180ea:	2b00      	cmp	r3, #0
 80180ec:	d027      	beq.n	801813e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80180ee:	f107 030c 	add.w	r3, r7, #12
 80180f2:	4619      	mov	r1, r3
 80180f4:	481b      	ldr	r0, [pc, #108]	@ (8018164 <shci_user_evt_proc+0x90>)
 80180f6:	f000 f9a8 	bl	801844a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80180fa:	4b1c      	ldr	r3, [pc, #112]	@ (801816c <shci_user_evt_proc+0x98>)
 80180fc:	69db      	ldr	r3, [r3, #28]
 80180fe:	2b00      	cmp	r3, #0
 8018100:	d00c      	beq.n	801811c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8018102:	68fb      	ldr	r3, [r7, #12]
 8018104:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8018106:	2301      	movs	r3, #1
 8018108:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 801810a:	4b18      	ldr	r3, [pc, #96]	@ (801816c <shci_user_evt_proc+0x98>)
 801810c:	69db      	ldr	r3, [r3, #28]
 801810e:	1d3a      	adds	r2, r7, #4
 8018110:	4610      	mov	r0, r2
 8018112:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8018114:	793a      	ldrb	r2, [r7, #4]
 8018116:	4b14      	ldr	r3, [pc, #80]	@ (8018168 <shci_user_evt_proc+0x94>)
 8018118:	701a      	strb	r2, [r3, #0]
 801811a:	e002      	b.n	8018122 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 801811c:	4b12      	ldr	r3, [pc, #72]	@ (8018168 <shci_user_evt_proc+0x94>)
 801811e:	2201      	movs	r2, #1
 8018120:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8018122:	4b11      	ldr	r3, [pc, #68]	@ (8018168 <shci_user_evt_proc+0x94>)
 8018124:	781b      	ldrb	r3, [r3, #0]
 8018126:	2b00      	cmp	r3, #0
 8018128:	d004      	beq.n	8018134 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 801812a:	68fb      	ldr	r3, [r7, #12]
 801812c:	4618      	mov	r0, r3
 801812e:	f000 fc4d 	bl	80189cc <TL_MM_EvtDone>
 8018132:	e004      	b.n	801813e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8018134:	68fb      	ldr	r3, [r7, #12]
 8018136:	4619      	mov	r1, r3
 8018138:	480a      	ldr	r0, [pc, #40]	@ (8018164 <shci_user_evt_proc+0x90>)
 801813a:	f000 f919 	bl	8018370 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 801813e:	4809      	ldr	r0, [pc, #36]	@ (8018164 <shci_user_evt_proc+0x90>)
 8018140:	f000 f8f4 	bl	801832c <LST_is_empty>
 8018144:	4603      	mov	r3, r0
 8018146:	2b00      	cmp	r3, #0
 8018148:	d107      	bne.n	801815a <shci_user_evt_proc+0x86>
 801814a:	4b07      	ldr	r3, [pc, #28]	@ (8018168 <shci_user_evt_proc+0x94>)
 801814c:	781b      	ldrb	r3, [r3, #0]
 801814e:	2b00      	cmp	r3, #0
 8018150:	d003      	beq.n	801815a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8018152:	4804      	ldr	r0, [pc, #16]	@ (8018164 <shci_user_evt_proc+0x90>)
 8018154:	f7f0 fdb3 	bl	8008cbe <shci_notify_asynch_evt>
  }


  return;
 8018158:	bf00      	nop
 801815a:	bf00      	nop
}
 801815c:	3710      	adds	r7, #16
 801815e:	46bd      	mov	sp, r7
 8018160:	bd80      	pop	{r7, pc}
 8018162:	bf00      	nop
 8018164:	200002a0 	.word	0x200002a0
 8018168:	200002b0 	.word	0x200002b0
 801816c:	20000954 	.word	0x20000954

08018170 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8018170:	b580      	push	{r7, lr}
 8018172:	b084      	sub	sp, #16
 8018174:	af00      	add	r7, sp, #0
 8018176:	60ba      	str	r2, [r7, #8]
 8018178:	607b      	str	r3, [r7, #4]
 801817a:	4603      	mov	r3, r0
 801817c:	81fb      	strh	r3, [r7, #14]
 801817e:	460b      	mov	r3, r1
 8018180:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8018182:	2000      	movs	r0, #0
 8018184:	f000 f868 	bl	8018258 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8018188:	4b17      	ldr	r3, [pc, #92]	@ (80181e8 <shci_send+0x78>)
 801818a:	681b      	ldr	r3, [r3, #0]
 801818c:	89fa      	ldrh	r2, [r7, #14]
 801818e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8018192:	4b15      	ldr	r3, [pc, #84]	@ (80181e8 <shci_send+0x78>)
 8018194:	681b      	ldr	r3, [r3, #0]
 8018196:	7b7a      	ldrb	r2, [r7, #13]
 8018198:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 801819a:	4b13      	ldr	r3, [pc, #76]	@ (80181e8 <shci_send+0x78>)
 801819c:	681b      	ldr	r3, [r3, #0]
 801819e:	330c      	adds	r3, #12
 80181a0:	7b7a      	ldrb	r2, [r7, #13]
 80181a2:	68b9      	ldr	r1, [r7, #8]
 80181a4:	4618      	mov	r0, r3
 80181a6:	f002 f8c2 	bl	801a32e <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 80181aa:	4b10      	ldr	r3, [pc, #64]	@ (80181ec <shci_send+0x7c>)
 80181ac:	2201      	movs	r2, #1
 80181ae:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 80181b0:	4b0f      	ldr	r3, [pc, #60]	@ (80181f0 <shci_send+0x80>)
 80181b2:	691b      	ldr	r3, [r3, #16]
 80181b4:	2100      	movs	r1, #0
 80181b6:	2000      	movs	r0, #0
 80181b8:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80181ba:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 80181be:	f7f0 fd95 	bl	8008cec <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80181c2:	687b      	ldr	r3, [r7, #4]
 80181c4:	f103 0008 	add.w	r0, r3, #8
 80181c8:	4b07      	ldr	r3, [pc, #28]	@ (80181e8 <shci_send+0x78>)
 80181ca:	6819      	ldr	r1, [r3, #0]
 80181cc:	4b06      	ldr	r3, [pc, #24]	@ (80181e8 <shci_send+0x78>)
 80181ce:	681b      	ldr	r3, [r3, #0]
 80181d0:	789b      	ldrb	r3, [r3, #2]
 80181d2:	3303      	adds	r3, #3
 80181d4:	461a      	mov	r2, r3
 80181d6:	f002 f8aa 	bl	801a32e <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80181da:	2001      	movs	r0, #1
 80181dc:	f000 f83c 	bl	8018258 <Cmd_SetStatus>

  return;
 80181e0:	bf00      	nop
}
 80181e2:	3710      	adds	r7, #16
 80181e4:	46bd      	mov	sp, r7
 80181e6:	bd80      	pop	{r7, pc}
 80181e8:	200002ac 	.word	0x200002ac
 80181ec:	20000978 	.word	0x20000978
 80181f0:	20000954 	.word	0x20000954

080181f4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80181f4:	b580      	push	{r7, lr}
 80181f6:	b086      	sub	sp, #24
 80181f8:	af00      	add	r7, sp, #0
 80181fa:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80181fc:	4a10      	ldr	r2, [pc, #64]	@ (8018240 <TlInit+0x4c>)
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8018202:	4810      	ldr	r0, [pc, #64]	@ (8018244 <TlInit+0x50>)
 8018204:	f000 f882 	bl	801830c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8018208:	2001      	movs	r0, #1
 801820a:	f000 f825 	bl	8018258 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 801820e:	4b0e      	ldr	r3, [pc, #56]	@ (8018248 <TlInit+0x54>)
 8018210:	2201      	movs	r2, #1
 8018212:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8018214:	4b0d      	ldr	r3, [pc, #52]	@ (801824c <TlInit+0x58>)
 8018216:	681b      	ldr	r3, [r3, #0]
 8018218:	2b00      	cmp	r3, #0
 801821a:	d00c      	beq.n	8018236 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8018220:	4b0b      	ldr	r3, [pc, #44]	@ (8018250 <TlInit+0x5c>)
 8018222:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8018224:	4b0b      	ldr	r3, [pc, #44]	@ (8018254 <TlInit+0x60>)
 8018226:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8018228:	4b08      	ldr	r3, [pc, #32]	@ (801824c <TlInit+0x58>)
 801822a:	681b      	ldr	r3, [r3, #0]
 801822c:	f107 020c 	add.w	r2, r7, #12
 8018230:	4610      	mov	r0, r2
 8018232:	4798      	blx	r3
  }

  return;
 8018234:	bf00      	nop
 8018236:	bf00      	nop
}
 8018238:	3718      	adds	r7, #24
 801823a:	46bd      	mov	sp, r7
 801823c:	bd80      	pop	{r7, pc}
 801823e:	bf00      	nop
 8018240:	200002ac 	.word	0x200002ac
 8018244:	200002a0 	.word	0x200002a0
 8018248:	200002b0 	.word	0x200002b0
 801824c:	20000954 	.word	0x20000954
 8018250:	080182a9 	.word	0x080182a9
 8018254:	080182c1 	.word	0x080182c1

08018258 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8018258:	b580      	push	{r7, lr}
 801825a:	b082      	sub	sp, #8
 801825c:	af00      	add	r7, sp, #0
 801825e:	4603      	mov	r3, r0
 8018260:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8018262:	79fb      	ldrb	r3, [r7, #7]
 8018264:	2b00      	cmp	r3, #0
 8018266:	d10b      	bne.n	8018280 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8018268:	4b0d      	ldr	r3, [pc, #52]	@ (80182a0 <Cmd_SetStatus+0x48>)
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	2b00      	cmp	r3, #0
 801826e:	d003      	beq.n	8018278 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8018270:	4b0b      	ldr	r3, [pc, #44]	@ (80182a0 <Cmd_SetStatus+0x48>)
 8018272:	681b      	ldr	r3, [r3, #0]
 8018274:	2000      	movs	r0, #0
 8018276:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8018278:	4b0a      	ldr	r3, [pc, #40]	@ (80182a4 <Cmd_SetStatus+0x4c>)
 801827a:	2200      	movs	r2, #0
 801827c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 801827e:	e00b      	b.n	8018298 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8018280:	4b08      	ldr	r3, [pc, #32]	@ (80182a4 <Cmd_SetStatus+0x4c>)
 8018282:	2201      	movs	r2, #1
 8018284:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8018286:	4b06      	ldr	r3, [pc, #24]	@ (80182a0 <Cmd_SetStatus+0x48>)
 8018288:	681b      	ldr	r3, [r3, #0]
 801828a:	2b00      	cmp	r3, #0
 801828c:	d004      	beq.n	8018298 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 801828e:	4b04      	ldr	r3, [pc, #16]	@ (80182a0 <Cmd_SetStatus+0x48>)
 8018290:	681b      	ldr	r3, [r3, #0]
 8018292:	2001      	movs	r0, #1
 8018294:	4798      	blx	r3
  return;
 8018296:	bf00      	nop
 8018298:	bf00      	nop
}
 801829a:	3708      	adds	r7, #8
 801829c:	46bd      	mov	sp, r7
 801829e:	bd80      	pop	{r7, pc}
 80182a0:	20000974 	.word	0x20000974
 80182a4:	200002a8 	.word	0x200002a8

080182a8 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80182a8:	b580      	push	{r7, lr}
 80182aa:	b082      	sub	sp, #8
 80182ac:	af00      	add	r7, sp, #0
 80182ae:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80182b0:	2000      	movs	r0, #0
 80182b2:	f7f0 fd10 	bl	8008cd6 <shci_cmd_resp_release>

  return;
 80182b6:	bf00      	nop
}
 80182b8:	3708      	adds	r7, #8
 80182ba:	46bd      	mov	sp, r7
 80182bc:	bd80      	pop	{r7, pc}
	...

080182c0 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80182c0:	b580      	push	{r7, lr}
 80182c2:	b082      	sub	sp, #8
 80182c4:	af00      	add	r7, sp, #0
 80182c6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80182c8:	6879      	ldr	r1, [r7, #4]
 80182ca:	4805      	ldr	r0, [pc, #20]	@ (80182e0 <TlUserEvtReceived+0x20>)
 80182cc:	f000 f876 	bl	80183bc <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80182d0:	4803      	ldr	r0, [pc, #12]	@ (80182e0 <TlUserEvtReceived+0x20>)
 80182d2:	f7f0 fcf4 	bl	8008cbe <shci_notify_asynch_evt>

  return;
 80182d6:	bf00      	nop
}
 80182d8:	3708      	adds	r7, #8
 80182da:	46bd      	mov	sp, r7
 80182dc:	bd80      	pop	{r7, pc}
 80182de:	bf00      	nop
 80182e0:	200002a0 	.word	0x200002a0

080182e4 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80182e4:	b480      	push	{r7}
 80182e6:	b083      	sub	sp, #12
 80182e8:	af00      	add	r7, sp, #0
 80182ea:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	4a05      	ldr	r2, [pc, #20]	@ (8018304 <shci_register_io_bus+0x20>)
 80182f0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	4a04      	ldr	r2, [pc, #16]	@ (8018308 <shci_register_io_bus+0x24>)
 80182f6:	611a      	str	r2, [r3, #16]

  return;
 80182f8:	bf00      	nop
}
 80182fa:	370c      	adds	r7, #12
 80182fc:	46bd      	mov	sp, r7
 80182fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018302:	4770      	bx	lr
 8018304:	08018859 	.word	0x08018859
 8018308:	080188ad 	.word	0x080188ad

0801830c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 801830c:	b480      	push	{r7}
 801830e:	b083      	sub	sp, #12
 8018310:	af00      	add	r7, sp, #0
 8018312:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	687a      	ldr	r2, [r7, #4]
 8018318:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 801831a:	687b      	ldr	r3, [r7, #4]
 801831c:	687a      	ldr	r2, [r7, #4]
 801831e:	605a      	str	r2, [r3, #4]
}
 8018320:	bf00      	nop
 8018322:	370c      	adds	r7, #12
 8018324:	46bd      	mov	sp, r7
 8018326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801832a:	4770      	bx	lr

0801832c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 801832c:	b480      	push	{r7}
 801832e:	b087      	sub	sp, #28
 8018330:	af00      	add	r7, sp, #0
 8018332:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018334:	f3ef 8310 	mrs	r3, PRIMASK
 8018338:	60fb      	str	r3, [r7, #12]
  return(result);
 801833a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801833c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801833e:	b672      	cpsid	i
}
 8018340:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	681b      	ldr	r3, [r3, #0]
 8018346:	687a      	ldr	r2, [r7, #4]
 8018348:	429a      	cmp	r2, r3
 801834a:	d102      	bne.n	8018352 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 801834c:	2301      	movs	r3, #1
 801834e:	75fb      	strb	r3, [r7, #23]
 8018350:	e001      	b.n	8018356 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8018352:	2300      	movs	r3, #0
 8018354:	75fb      	strb	r3, [r7, #23]
 8018356:	693b      	ldr	r3, [r7, #16]
 8018358:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801835a:	68bb      	ldr	r3, [r7, #8]
 801835c:	f383 8810 	msr	PRIMASK, r3
}
 8018360:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8018362:	7dfb      	ldrb	r3, [r7, #23]
}
 8018364:	4618      	mov	r0, r3
 8018366:	371c      	adds	r7, #28
 8018368:	46bd      	mov	sp, r7
 801836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801836e:	4770      	bx	lr

08018370 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8018370:	b480      	push	{r7}
 8018372:	b087      	sub	sp, #28
 8018374:	af00      	add	r7, sp, #0
 8018376:	6078      	str	r0, [r7, #4]
 8018378:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801837a:	f3ef 8310 	mrs	r3, PRIMASK
 801837e:	60fb      	str	r3, [r7, #12]
  return(result);
 8018380:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8018382:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018384:	b672      	cpsid	i
}
 8018386:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	681a      	ldr	r2, [r3, #0]
 801838c:	683b      	ldr	r3, [r7, #0]
 801838e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8018390:	683b      	ldr	r3, [r7, #0]
 8018392:	687a      	ldr	r2, [r7, #4]
 8018394:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	683a      	ldr	r2, [r7, #0]
 801839a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 801839c:	683b      	ldr	r3, [r7, #0]
 801839e:	681b      	ldr	r3, [r3, #0]
 80183a0:	683a      	ldr	r2, [r7, #0]
 80183a2:	605a      	str	r2, [r3, #4]
 80183a4:	697b      	ldr	r3, [r7, #20]
 80183a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80183a8:	693b      	ldr	r3, [r7, #16]
 80183aa:	f383 8810 	msr	PRIMASK, r3
}
 80183ae:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80183b0:	bf00      	nop
 80183b2:	371c      	adds	r7, #28
 80183b4:	46bd      	mov	sp, r7
 80183b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183ba:	4770      	bx	lr

080183bc <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80183bc:	b480      	push	{r7}
 80183be:	b087      	sub	sp, #28
 80183c0:	af00      	add	r7, sp, #0
 80183c2:	6078      	str	r0, [r7, #4]
 80183c4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80183c6:	f3ef 8310 	mrs	r3, PRIMASK
 80183ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80183cc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80183ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80183d0:	b672      	cpsid	i
}
 80183d2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80183d4:	683b      	ldr	r3, [r7, #0]
 80183d6:	687a      	ldr	r2, [r7, #4]
 80183d8:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80183da:	687b      	ldr	r3, [r7, #4]
 80183dc:	685a      	ldr	r2, [r3, #4]
 80183de:	683b      	ldr	r3, [r7, #0]
 80183e0:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	683a      	ldr	r2, [r7, #0]
 80183e6:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80183e8:	683b      	ldr	r3, [r7, #0]
 80183ea:	685b      	ldr	r3, [r3, #4]
 80183ec:	683a      	ldr	r2, [r7, #0]
 80183ee:	601a      	str	r2, [r3, #0]
 80183f0:	697b      	ldr	r3, [r7, #20]
 80183f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80183f4:	693b      	ldr	r3, [r7, #16]
 80183f6:	f383 8810 	msr	PRIMASK, r3
}
 80183fa:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80183fc:	bf00      	nop
 80183fe:	371c      	adds	r7, #28
 8018400:	46bd      	mov	sp, r7
 8018402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018406:	4770      	bx	lr

08018408 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8018408:	b480      	push	{r7}
 801840a:	b087      	sub	sp, #28
 801840c:	af00      	add	r7, sp, #0
 801840e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018410:	f3ef 8310 	mrs	r3, PRIMASK
 8018414:	60fb      	str	r3, [r7, #12]
  return(result);
 8018416:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8018418:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801841a:	b672      	cpsid	i
}
 801841c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 801841e:	687b      	ldr	r3, [r7, #4]
 8018420:	685b      	ldr	r3, [r3, #4]
 8018422:	687a      	ldr	r2, [r7, #4]
 8018424:	6812      	ldr	r2, [r2, #0]
 8018426:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	681b      	ldr	r3, [r3, #0]
 801842c:	687a      	ldr	r2, [r7, #4]
 801842e:	6852      	ldr	r2, [r2, #4]
 8018430:	605a      	str	r2, [r3, #4]
 8018432:	697b      	ldr	r3, [r7, #20]
 8018434:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018436:	693b      	ldr	r3, [r7, #16]
 8018438:	f383 8810 	msr	PRIMASK, r3
}
 801843c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 801843e:	bf00      	nop
 8018440:	371c      	adds	r7, #28
 8018442:	46bd      	mov	sp, r7
 8018444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018448:	4770      	bx	lr

0801844a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 801844a:	b580      	push	{r7, lr}
 801844c:	b086      	sub	sp, #24
 801844e:	af00      	add	r7, sp, #0
 8018450:	6078      	str	r0, [r7, #4]
 8018452:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018454:	f3ef 8310 	mrs	r3, PRIMASK
 8018458:	60fb      	str	r3, [r7, #12]
  return(result);
 801845a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801845c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801845e:	b672      	cpsid	i
}
 8018460:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	681a      	ldr	r2, [r3, #0]
 8018466:	683b      	ldr	r3, [r7, #0]
 8018468:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	681b      	ldr	r3, [r3, #0]
 801846e:	4618      	mov	r0, r3
 8018470:	f7ff ffca 	bl	8018408 <LST_remove_node>
 8018474:	697b      	ldr	r3, [r7, #20]
 8018476:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018478:	693b      	ldr	r3, [r7, #16]
 801847a:	f383 8810 	msr	PRIMASK, r3
}
 801847e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8018480:	bf00      	nop
 8018482:	3718      	adds	r7, #24
 8018484:	46bd      	mov	sp, r7
 8018486:	bd80      	pop	{r7, pc}

08018488 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8018488:	b480      	push	{r7}
 801848a:	af00      	add	r7, sp, #0
  return;
 801848c:	bf00      	nop
}
 801848e:	46bd      	mov	sp, r7
 8018490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018494:	4770      	bx	lr

08018496 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8018496:	b480      	push	{r7}
 8018498:	af00      	add	r7, sp, #0
  return;
 801849a:	bf00      	nop
}
 801849c:	46bd      	mov	sp, r7
 801849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184a2:	4770      	bx	lr

080184a4 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 80184a4:	b480      	push	{r7}
 80184a6:	af00      	add	r7, sp, #0
  return;
 80184a8:	bf00      	nop
}
 80184aa:	46bd      	mov	sp, r7
 80184ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184b0:	4770      	bx	lr

080184b2 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 80184b2:	b480      	push	{r7}
 80184b4:	af00      	add	r7, sp, #0
  return;
 80184b6:	bf00      	nop
}
 80184b8:	46bd      	mov	sp, r7
 80184ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184be:	4770      	bx	lr

080184c0 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 80184c0:	b480      	push	{r7}
 80184c2:	af00      	add	r7, sp, #0
  return;
 80184c4:	bf00      	nop
}
 80184c6:	46bd      	mov	sp, r7
 80184c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184cc:	4770      	bx	lr

080184ce <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 80184ce:	b480      	push	{r7}
 80184d0:	af00      	add	r7, sp, #0
  return;
 80184d2:	bf00      	nop
}
 80184d4:	46bd      	mov	sp, r7
 80184d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184da:	4770      	bx	lr

080184dc <HRS_Init>:
__WEAK void HRS_Init( void )
{
 80184dc:	b480      	push	{r7}
 80184de:	af00      	add	r7, sp, #0
  return;
 80184e0:	bf00      	nop
}
 80184e2:	46bd      	mov	sp, r7
 80184e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184e8:	4770      	bx	lr

080184ea <HTS_Init>:
__WEAK void HTS_Init( void )
{
 80184ea:	b480      	push	{r7}
 80184ec:	af00      	add	r7, sp, #0
  return;
 80184ee:	bf00      	nop
}
 80184f0:	46bd      	mov	sp, r7
 80184f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184f6:	4770      	bx	lr

080184f8 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 80184f8:	b480      	push	{r7}
 80184fa:	af00      	add	r7, sp, #0
  return;
 80184fc:	bf00      	nop
}
 80184fe:	46bd      	mov	sp, r7
 8018500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018504:	4770      	bx	lr

08018506 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8018506:	b480      	push	{r7}
 8018508:	af00      	add	r7, sp, #0
  return;
 801850a:	bf00      	nop
}
 801850c:	46bd      	mov	sp, r7
 801850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018512:	4770      	bx	lr

08018514 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8018514:	b480      	push	{r7}
 8018516:	af00      	add	r7, sp, #0
  return;
 8018518:	bf00      	nop
}
 801851a:	46bd      	mov	sp, r7
 801851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018520:	4770      	bx	lr

08018522 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8018522:	b480      	push	{r7}
 8018524:	af00      	add	r7, sp, #0
  return;
 8018526:	bf00      	nop
}
 8018528:	46bd      	mov	sp, r7
 801852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801852e:	4770      	bx	lr

08018530 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8018530:	b480      	push	{r7}
 8018532:	af00      	add	r7, sp, #0
  return;
 8018534:	bf00      	nop
}
 8018536:	46bd      	mov	sp, r7
 8018538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801853c:	4770      	bx	lr

0801853e <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 801853e:	b480      	push	{r7}
 8018540:	af00      	add	r7, sp, #0
  return;
 8018542:	bf00      	nop
}
 8018544:	46bd      	mov	sp, r7
 8018546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801854a:	4770      	bx	lr

0801854c <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 801854c:	b480      	push	{r7}
 801854e:	af00      	add	r7, sp, #0
  return;
 8018550:	bf00      	nop
}
 8018552:	46bd      	mov	sp, r7
 8018554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018558:	4770      	bx	lr

0801855a <MESH_Init>:
__WEAK void MESH_Init( void )
{
 801855a:	b480      	push	{r7}
 801855c:	af00      	add	r7, sp, #0
  return;
 801855e:	bf00      	nop
}
 8018560:	46bd      	mov	sp, r7
 8018562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018566:	4770      	bx	lr

08018568 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8018568:	b480      	push	{r7}
 801856a:	af00      	add	r7, sp, #0
  return;
 801856c:	bf00      	nop
}
 801856e:	46bd      	mov	sp, r7
 8018570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018574:	4770      	bx	lr
	...

08018578 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8018578:	b580      	push	{r7, lr}
 801857a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 801857c:	4b04      	ldr	r3, [pc, #16]	@ (8018590 <SVCCTL_Init+0x18>)
 801857e:	2200      	movs	r2, #0
 8018580:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8018582:	4b04      	ldr	r3, [pc, #16]	@ (8018594 <SVCCTL_Init+0x1c>)
 8018584:	2200      	movs	r2, #0
 8018586:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8018588:	f000 f806 	bl	8018598 <SVCCTL_SvcInit>

  return;
 801858c:	bf00      	nop
}
 801858e:	bd80      	pop	{r7, pc}
 8018590:	2000027c 	.word	0x2000027c
 8018594:	2000029c 	.word	0x2000029c

08018598 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8018598:	b580      	push	{r7, lr}
 801859a:	af00      	add	r7, sp, #0
  BAS_Init();
 801859c:	f7ff ff74 	bl	8018488 <BAS_Init>

  BLS_Init();
 80185a0:	f7ff ff79 	bl	8018496 <BLS_Init>

  CRS_STM_Init();
 80185a4:	f7ff ff7e 	bl	80184a4 <CRS_STM_Init>

  DIS_Init();
 80185a8:	f7ff ff83 	bl	80184b2 <DIS_Init>

  EDS_STM_Init();
 80185ac:	f7ff ff88 	bl	80184c0 <EDS_STM_Init>

  HIDS_Init();
 80185b0:	f7ff ff8d 	bl	80184ce <HIDS_Init>

  HRS_Init();
 80185b4:	f7ff ff92 	bl	80184dc <HRS_Init>

  HTS_Init();
 80185b8:	f7ff ff97 	bl	80184ea <HTS_Init>

  IAS_Init();
 80185bc:	f7ff ff9c 	bl	80184f8 <IAS_Init>

  LLS_Init();
 80185c0:	f7ff ffa1 	bl	8018506 <LLS_Init>

  TPS_Init();
 80185c4:	f7ff ffa6 	bl	8018514 <TPS_Init>

  MOTENV_STM_Init();
 80185c8:	f7ff ffab 	bl	8018522 <MOTENV_STM_Init>

  P2PS_STM_Init();
 80185cc:	f7ff ffb0 	bl	8018530 <P2PS_STM_Init>

  ZDD_STM_Init();
 80185d0:	f7ff ffb5 	bl	801853e <ZDD_STM_Init>

  OTAS_STM_Init();
 80185d4:	f7ff ffba 	bl	801854c <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80185d8:	f7ff ffc6 	bl	8018568 <BVOPUS_STM_Init>

  MESH_Init();
 80185dc:	f7ff ffbd 	bl	801855a <MESH_Init>

  SVCCTL_InitCustomSvc();
 80185e0:	f7f5 ff0e 	bl	800e400 <SVCCTL_InitCustomSvc>
  
  return;
 80185e4:	bf00      	nop
}
 80185e6:	bd80      	pop	{r7, pc}

080185e8 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 80185e8:	b480      	push	{r7}
 80185ea:	b083      	sub	sp, #12
 80185ec:	af00      	add	r7, sp, #0
 80185ee:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80185f0:	4b09      	ldr	r3, [pc, #36]	@ (8018618 <SVCCTL_RegisterSvcHandler+0x30>)
 80185f2:	7f1b      	ldrb	r3, [r3, #28]
 80185f4:	4619      	mov	r1, r3
 80185f6:	4a08      	ldr	r2, [pc, #32]	@ (8018618 <SVCCTL_RegisterSvcHandler+0x30>)
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80185fe:	4b06      	ldr	r3, [pc, #24]	@ (8018618 <SVCCTL_RegisterSvcHandler+0x30>)
 8018600:	7f1b      	ldrb	r3, [r3, #28]
 8018602:	3301      	adds	r3, #1
 8018604:	b2da      	uxtb	r2, r3
 8018606:	4b04      	ldr	r3, [pc, #16]	@ (8018618 <SVCCTL_RegisterSvcHandler+0x30>)
 8018608:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 801860a:	bf00      	nop
}
 801860c:	370c      	adds	r7, #12
 801860e:	46bd      	mov	sp, r7
 8018610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018614:	4770      	bx	lr
 8018616:	bf00      	nop
 8018618:	2000027c 	.word	0x2000027c

0801861c <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 801861c:	b580      	push	{r7, lr}
 801861e:	b086      	sub	sp, #24
 8018620:	af00      	add	r7, sp, #0
 8018622:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8018624:	687b      	ldr	r3, [r7, #4]
 8018626:	3301      	adds	r3, #1
 8018628:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 801862a:	2300      	movs	r3, #0
 801862c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 801862e:	693b      	ldr	r3, [r7, #16]
 8018630:	781b      	ldrb	r3, [r3, #0]
 8018632:	2bff      	cmp	r3, #255	@ 0xff
 8018634:	d125      	bne.n	8018682 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8018636:	693b      	ldr	r3, [r7, #16]
 8018638:	3302      	adds	r3, #2
 801863a:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 801863c:	68fb      	ldr	r3, [r7, #12]
 801863e:	881b      	ldrh	r3, [r3, #0]
 8018640:	b29b      	uxth	r3, r3
 8018642:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8018646:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801864a:	d118      	bne.n	801867e <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 801864c:	2300      	movs	r3, #0
 801864e:	757b      	strb	r3, [r7, #21]
 8018650:	e00d      	b.n	801866e <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8018652:	7d7b      	ldrb	r3, [r7, #21]
 8018654:	4a1a      	ldr	r2, [pc, #104]	@ (80186c0 <SVCCTL_UserEvtRx+0xa4>)
 8018656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801865a:	6878      	ldr	r0, [r7, #4]
 801865c:	4798      	blx	r3
 801865e:	4603      	mov	r3, r0
 8018660:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8018662:	7dfb      	ldrb	r3, [r7, #23]
 8018664:	2b00      	cmp	r3, #0
 8018666:	d108      	bne.n	801867a <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8018668:	7d7b      	ldrb	r3, [r7, #21]
 801866a:	3301      	adds	r3, #1
 801866c:	757b      	strb	r3, [r7, #21]
 801866e:	4b14      	ldr	r3, [pc, #80]	@ (80186c0 <SVCCTL_UserEvtRx+0xa4>)
 8018670:	7f1b      	ldrb	r3, [r3, #28]
 8018672:	7d7a      	ldrb	r2, [r7, #21]
 8018674:	429a      	cmp	r2, r3
 8018676:	d3ec      	bcc.n	8018652 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8018678:	e002      	b.n	8018680 <SVCCTL_UserEvtRx+0x64>
              break;
 801867a:	bf00      	nop
          break;
 801867c:	e000      	b.n	8018680 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 801867e:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8018680:	e000      	b.n	8018684 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8018682:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8018684:	7dfb      	ldrb	r3, [r7, #23]
 8018686:	2b02      	cmp	r3, #2
 8018688:	d00f      	beq.n	80186aa <SVCCTL_UserEvtRx+0x8e>
 801868a:	2b02      	cmp	r3, #2
 801868c:	dc10      	bgt.n	80186b0 <SVCCTL_UserEvtRx+0x94>
 801868e:	2b00      	cmp	r3, #0
 8018690:	d002      	beq.n	8018698 <SVCCTL_UserEvtRx+0x7c>
 8018692:	2b01      	cmp	r3, #1
 8018694:	d006      	beq.n	80186a4 <SVCCTL_UserEvtRx+0x88>
 8018696:	e00b      	b.n	80186b0 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8018698:	6878      	ldr	r0, [r7, #4]
 801869a:	f7f4 f823 	bl	800c6e4 <SVCCTL_App_Notification>
 801869e:	4603      	mov	r3, r0
 80186a0:	75bb      	strb	r3, [r7, #22]
      break;
 80186a2:	e008      	b.n	80186b6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80186a4:	2301      	movs	r3, #1
 80186a6:	75bb      	strb	r3, [r7, #22]
      break;
 80186a8:	e005      	b.n	80186b6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80186aa:	2300      	movs	r3, #0
 80186ac:	75bb      	strb	r3, [r7, #22]
      break;
 80186ae:	e002      	b.n	80186b6 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80186b0:	2301      	movs	r3, #1
 80186b2:	75bb      	strb	r3, [r7, #22]
      break;
 80186b4:	bf00      	nop
  }

  return (return_status);
 80186b6:	7dbb      	ldrb	r3, [r7, #22]
}
 80186b8:	4618      	mov	r0, r3
 80186ba:	3718      	adds	r7, #24
 80186bc:	46bd      	mov	sp, r7
 80186be:	bd80      	pop	{r7, pc}
 80186c0:	2000027c 	.word	0x2000027c

080186c4 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 80186c4:	b580      	push	{r7, lr}
 80186c6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80186c8:	f7f6 fe48 	bl	800f35c <HW_IPCC_Enable>

  return;
 80186cc:	bf00      	nop
}
 80186ce:	bd80      	pop	{r7, pc}

080186d0 <TL_Init>:


void TL_Init( void )
{
 80186d0:	b580      	push	{r7, lr}
 80186d2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80186d4:	4b10      	ldr	r3, [pc, #64]	@ (8018718 <TL_Init+0x48>)
 80186d6:	4a11      	ldr	r2, [pc, #68]	@ (801871c <TL_Init+0x4c>)
 80186d8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80186da:	4b0f      	ldr	r3, [pc, #60]	@ (8018718 <TL_Init+0x48>)
 80186dc:	4a10      	ldr	r2, [pc, #64]	@ (8018720 <TL_Init+0x50>)
 80186de:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80186e0:	4b0d      	ldr	r3, [pc, #52]	@ (8018718 <TL_Init+0x48>)
 80186e2:	4a10      	ldr	r2, [pc, #64]	@ (8018724 <TL_Init+0x54>)
 80186e4:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80186e6:	4b0c      	ldr	r3, [pc, #48]	@ (8018718 <TL_Init+0x48>)
 80186e8:	4a0f      	ldr	r2, [pc, #60]	@ (8018728 <TL_Init+0x58>)
 80186ea:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80186ec:	4b0a      	ldr	r3, [pc, #40]	@ (8018718 <TL_Init+0x48>)
 80186ee:	4a0f      	ldr	r2, [pc, #60]	@ (801872c <TL_Init+0x5c>)
 80186f0:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80186f2:	4b09      	ldr	r3, [pc, #36]	@ (8018718 <TL_Init+0x48>)
 80186f4:	4a0e      	ldr	r2, [pc, #56]	@ (8018730 <TL_Init+0x60>)
 80186f6:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80186f8:	4b07      	ldr	r3, [pc, #28]	@ (8018718 <TL_Init+0x48>)
 80186fa:	4a0e      	ldr	r2, [pc, #56]	@ (8018734 <TL_Init+0x64>)
 80186fc:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80186fe:	4b06      	ldr	r3, [pc, #24]	@ (8018718 <TL_Init+0x48>)
 8018700:	4a0d      	ldr	r2, [pc, #52]	@ (8018738 <TL_Init+0x68>)
 8018702:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8018704:	4b04      	ldr	r3, [pc, #16]	@ (8018718 <TL_Init+0x48>)
 8018706:	4a0d      	ldr	r2, [pc, #52]	@ (801873c <TL_Init+0x6c>)
 8018708:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 801870a:	4b03      	ldr	r3, [pc, #12]	@ (8018718 <TL_Init+0x48>)
 801870c:	4a0c      	ldr	r2, [pc, #48]	@ (8018740 <TL_Init+0x70>)
 801870e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8018710:	f7f6 fe38 	bl	800f384 <HW_IPCC_Init>

  return;
 8018714:	bf00      	nop
}
 8018716:	bd80      	pop	{r7, pc}
 8018718:	20030000 	.word	0x20030000
 801871c:	20030134 	.word	0x20030134
 8018720:	20030154 	.word	0x20030154
 8018724:	20030164 	.word	0x20030164
 8018728:	20030174 	.word	0x20030174
 801872c:	2003017c 	.word	0x2003017c
 8018730:	20030184 	.word	0x20030184
 8018734:	2003018c 	.word	0x2003018c
 8018738:	200301a8 	.word	0x200301a8
 801873c:	200301ac 	.word	0x200301ac
 8018740:	200301b8 	.word	0x200301b8

08018744 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8018744:	b580      	push	{r7, lr}
 8018746:	b084      	sub	sp, #16
 8018748:	af00      	add	r7, sp, #0
 801874a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8018750:	4811      	ldr	r0, [pc, #68]	@ (8018798 <TL_BLE_Init+0x54>)
 8018752:	f7ff fddb 	bl	801830c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8018756:	4b11      	ldr	r3, [pc, #68]	@ (801879c <TL_BLE_Init+0x58>)
 8018758:	685b      	ldr	r3, [r3, #4]
 801875a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 801875c:	68fb      	ldr	r3, [r7, #12]
 801875e:	689a      	ldr	r2, [r3, #8]
 8018760:	68bb      	ldr	r3, [r7, #8]
 8018762:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8018764:	68fb      	ldr	r3, [r7, #12]
 8018766:	68da      	ldr	r2, [r3, #12]
 8018768:	68bb      	ldr	r3, [r7, #8]
 801876a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 801876c:	68bb      	ldr	r3, [r7, #8]
 801876e:	4a0c      	ldr	r2, [pc, #48]	@ (80187a0 <TL_BLE_Init+0x5c>)
 8018770:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8018772:	68bb      	ldr	r3, [r7, #8]
 8018774:	4a08      	ldr	r2, [pc, #32]	@ (8018798 <TL_BLE_Init+0x54>)
 8018776:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8018778:	f7f6 fe1a 	bl	800f3b0 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 801877c:	68fb      	ldr	r3, [r7, #12]
 801877e:	681b      	ldr	r3, [r3, #0]
 8018780:	4a08      	ldr	r2, [pc, #32]	@ (80187a4 <TL_BLE_Init+0x60>)
 8018782:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8018784:	68fb      	ldr	r3, [r7, #12]
 8018786:	685b      	ldr	r3, [r3, #4]
 8018788:	4a07      	ldr	r2, [pc, #28]	@ (80187a8 <TL_BLE_Init+0x64>)
 801878a:	6013      	str	r3, [r2, #0]

  return 0;
 801878c:	2300      	movs	r3, #0
}
 801878e:	4618      	mov	r0, r3
 8018790:	3710      	adds	r7, #16
 8018792:	46bd      	mov	sp, r7
 8018794:	bd80      	pop	{r7, pc}
 8018796:	bf00      	nop
 8018798:	200301d4 	.word	0x200301d4
 801879c:	20030000 	.word	0x20030000
 80187a0:	20030a58 	.word	0x20030a58
 80187a4:	20000984 	.word	0x20000984
 80187a8:	20000988 	.word	0x20000988

080187ac <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80187ac:	b580      	push	{r7, lr}
 80187ae:	b082      	sub	sp, #8
 80187b0:	af00      	add	r7, sp, #0
 80187b2:	6078      	str	r0, [r7, #4]
 80187b4:	460b      	mov	r3, r1
 80187b6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80187b8:	4b09      	ldr	r3, [pc, #36]	@ (80187e0 <TL_BLE_SendCmd+0x34>)
 80187ba:	685b      	ldr	r3, [r3, #4]
 80187bc:	681b      	ldr	r3, [r3, #0]
 80187be:	2201      	movs	r2, #1
 80187c0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80187c2:	4b07      	ldr	r3, [pc, #28]	@ (80187e0 <TL_BLE_SendCmd+0x34>)
 80187c4:	685b      	ldr	r3, [r3, #4]
 80187c6:	681b      	ldr	r3, [r3, #0]
 80187c8:	4619      	mov	r1, r3
 80187ca:	2001      	movs	r0, #1
 80187cc:	f000 f96c 	bl	8018aa8 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80187d0:	f7f6 fdf8 	bl	800f3c4 <HW_IPCC_BLE_SendCmd>

  return 0;
 80187d4:	2300      	movs	r3, #0
}
 80187d6:	4618      	mov	r0, r3
 80187d8:	3708      	adds	r7, #8
 80187da:	46bd      	mov	sp, r7
 80187dc:	bd80      	pop	{r7, pc}
 80187de:	bf00      	nop
 80187e0:	20030000 	.word	0x20030000

080187e4 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80187e4:	b580      	push	{r7, lr}
 80187e6:	b082      	sub	sp, #8
 80187e8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80187ea:	e01c      	b.n	8018826 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80187ec:	1d3b      	adds	r3, r7, #4
 80187ee:	4619      	mov	r1, r3
 80187f0:	4812      	ldr	r0, [pc, #72]	@ (801883c <HW_IPCC_BLE_RxEvtNot+0x58>)
 80187f2:	f7ff fe2a 	bl	801844a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80187f6:	687b      	ldr	r3, [r7, #4]
 80187f8:	7a5b      	ldrb	r3, [r3, #9]
 80187fa:	2b0f      	cmp	r3, #15
 80187fc:	d003      	beq.n	8018806 <HW_IPCC_BLE_RxEvtNot+0x22>
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	7a5b      	ldrb	r3, [r3, #9]
 8018802:	2b0e      	cmp	r3, #14
 8018804:	d105      	bne.n	8018812 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8018806:	687b      	ldr	r3, [r7, #4]
 8018808:	4619      	mov	r1, r3
 801880a:	2002      	movs	r0, #2
 801880c:	f000 f94c 	bl	8018aa8 <OutputDbgTrace>
 8018810:	e004      	b.n	801881c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	4619      	mov	r1, r3
 8018816:	2003      	movs	r0, #3
 8018818:	f000 f946 	bl	8018aa8 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 801881c:	4b08      	ldr	r3, [pc, #32]	@ (8018840 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 801881e:	681b      	ldr	r3, [r3, #0]
 8018820:	687a      	ldr	r2, [r7, #4]
 8018822:	4610      	mov	r0, r2
 8018824:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8018826:	4805      	ldr	r0, [pc, #20]	@ (801883c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8018828:	f7ff fd80 	bl	801832c <LST_is_empty>
 801882c:	4603      	mov	r3, r0
 801882e:	2b00      	cmp	r3, #0
 8018830:	d0dc      	beq.n	80187ec <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8018832:	bf00      	nop
}
 8018834:	3708      	adds	r7, #8
 8018836:	46bd      	mov	sp, r7
 8018838:	bd80      	pop	{r7, pc}
 801883a:	bf00      	nop
 801883c:	200301d4 	.word	0x200301d4
 8018840:	20000984 	.word	0x20000984

08018844 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8018844:	b580      	push	{r7, lr}
 8018846:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8018848:	4b02      	ldr	r3, [pc, #8]	@ (8018854 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 801884a:	681b      	ldr	r3, [r3, #0]
 801884c:	4798      	blx	r3

  return;
 801884e:	bf00      	nop
}
 8018850:	bd80      	pop	{r7, pc}
 8018852:	bf00      	nop
 8018854:	20000988 	.word	0x20000988

08018858 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8018858:	b580      	push	{r7, lr}
 801885a:	b084      	sub	sp, #16
 801885c:	af00      	add	r7, sp, #0
 801885e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8018864:	480d      	ldr	r0, [pc, #52]	@ (801889c <TL_SYS_Init+0x44>)
 8018866:	f7ff fd51 	bl	801830c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 801886a:	4b0d      	ldr	r3, [pc, #52]	@ (80188a0 <TL_SYS_Init+0x48>)
 801886c:	68db      	ldr	r3, [r3, #12]
 801886e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8018870:	68fb      	ldr	r3, [r7, #12]
 8018872:	689a      	ldr	r2, [r3, #8]
 8018874:	68bb      	ldr	r3, [r7, #8]
 8018876:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8018878:	68bb      	ldr	r3, [r7, #8]
 801887a:	4a08      	ldr	r2, [pc, #32]	@ (801889c <TL_SYS_Init+0x44>)
 801887c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 801887e:	f7f6 fdc3 	bl	800f408 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8018882:	68fb      	ldr	r3, [r7, #12]
 8018884:	681b      	ldr	r3, [r3, #0]
 8018886:	4a07      	ldr	r2, [pc, #28]	@ (80188a4 <TL_SYS_Init+0x4c>)
 8018888:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 801888a:	68fb      	ldr	r3, [r7, #12]
 801888c:	685b      	ldr	r3, [r3, #4]
 801888e:	4a06      	ldr	r2, [pc, #24]	@ (80188a8 <TL_SYS_Init+0x50>)
 8018890:	6013      	str	r3, [r2, #0]

  return 0;
 8018892:	2300      	movs	r3, #0
}
 8018894:	4618      	mov	r0, r3
 8018896:	3710      	adds	r7, #16
 8018898:	46bd      	mov	sp, r7
 801889a:	bd80      	pop	{r7, pc}
 801889c:	200301dc 	.word	0x200301dc
 80188a0:	20030000 	.word	0x20030000
 80188a4:	2000098c 	.word	0x2000098c
 80188a8:	20000990 	.word	0x20000990

080188ac <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80188ac:	b580      	push	{r7, lr}
 80188ae:	b082      	sub	sp, #8
 80188b0:	af00      	add	r7, sp, #0
 80188b2:	6078      	str	r0, [r7, #4]
 80188b4:	460b      	mov	r3, r1
 80188b6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80188b8:	4b09      	ldr	r3, [pc, #36]	@ (80188e0 <TL_SYS_SendCmd+0x34>)
 80188ba:	68db      	ldr	r3, [r3, #12]
 80188bc:	681b      	ldr	r3, [r3, #0]
 80188be:	2210      	movs	r2, #16
 80188c0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80188c2:	4b07      	ldr	r3, [pc, #28]	@ (80188e0 <TL_SYS_SendCmd+0x34>)
 80188c4:	68db      	ldr	r3, [r3, #12]
 80188c6:	681b      	ldr	r3, [r3, #0]
 80188c8:	4619      	mov	r1, r3
 80188ca:	2004      	movs	r0, #4
 80188cc:	f000 f8ec 	bl	8018aa8 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80188d0:	f7f6 fda4 	bl	800f41c <HW_IPCC_SYS_SendCmd>

  return 0;
 80188d4:	2300      	movs	r3, #0
}
 80188d6:	4618      	mov	r0, r3
 80188d8:	3708      	adds	r7, #8
 80188da:	46bd      	mov	sp, r7
 80188dc:	bd80      	pop	{r7, pc}
 80188de:	bf00      	nop
 80188e0:	20030000 	.word	0x20030000

080188e4 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80188e4:	b580      	push	{r7, lr}
 80188e6:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80188e8:	4b07      	ldr	r3, [pc, #28]	@ (8018908 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80188ea:	68db      	ldr	r3, [r3, #12]
 80188ec:	681b      	ldr	r3, [r3, #0]
 80188ee:	4619      	mov	r1, r3
 80188f0:	2005      	movs	r0, #5
 80188f2:	f000 f8d9 	bl	8018aa8 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80188f6:	4b05      	ldr	r3, [pc, #20]	@ (801890c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80188f8:	681b      	ldr	r3, [r3, #0]
 80188fa:	4a03      	ldr	r2, [pc, #12]	@ (8018908 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80188fc:	68d2      	ldr	r2, [r2, #12]
 80188fe:	6812      	ldr	r2, [r2, #0]
 8018900:	4610      	mov	r0, r2
 8018902:	4798      	blx	r3

  return;
 8018904:	bf00      	nop
}
 8018906:	bd80      	pop	{r7, pc}
 8018908:	20030000 	.word	0x20030000
 801890c:	2000098c 	.word	0x2000098c

08018910 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8018910:	b580      	push	{r7, lr}
 8018912:	b082      	sub	sp, #8
 8018914:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8018916:	e00e      	b.n	8018936 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8018918:	1d3b      	adds	r3, r7, #4
 801891a:	4619      	mov	r1, r3
 801891c:	480b      	ldr	r0, [pc, #44]	@ (801894c <HW_IPCC_SYS_EvtNot+0x3c>)
 801891e:	f7ff fd94 	bl	801844a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	4619      	mov	r1, r3
 8018926:	2006      	movs	r0, #6
 8018928:	f000 f8be 	bl	8018aa8 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 801892c:	4b08      	ldr	r3, [pc, #32]	@ (8018950 <HW_IPCC_SYS_EvtNot+0x40>)
 801892e:	681b      	ldr	r3, [r3, #0]
 8018930:	687a      	ldr	r2, [r7, #4]
 8018932:	4610      	mov	r0, r2
 8018934:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8018936:	4805      	ldr	r0, [pc, #20]	@ (801894c <HW_IPCC_SYS_EvtNot+0x3c>)
 8018938:	f7ff fcf8 	bl	801832c <LST_is_empty>
 801893c:	4603      	mov	r3, r0
 801893e:	2b00      	cmp	r3, #0
 8018940:	d0ea      	beq.n	8018918 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8018942:	bf00      	nop
}
 8018944:	3708      	adds	r7, #8
 8018946:	46bd      	mov	sp, r7
 8018948:	bd80      	pop	{r7, pc}
 801894a:	bf00      	nop
 801894c:	200301dc 	.word	0x200301dc
 8018950:	20000990 	.word	0x20000990

08018954 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8018954:	b580      	push	{r7, lr}
 8018956:	b082      	sub	sp, #8
 8018958:	af00      	add	r7, sp, #0
 801895a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 801895c:	4817      	ldr	r0, [pc, #92]	@ (80189bc <TL_MM_Init+0x68>)
 801895e:	f7ff fcd5 	bl	801830c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8018962:	4817      	ldr	r0, [pc, #92]	@ (80189c0 <TL_MM_Init+0x6c>)
 8018964:	f7ff fcd2 	bl	801830c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8018968:	4b16      	ldr	r3, [pc, #88]	@ (80189c4 <TL_MM_Init+0x70>)
 801896a:	691b      	ldr	r3, [r3, #16]
 801896c:	4a16      	ldr	r2, [pc, #88]	@ (80189c8 <TL_MM_Init+0x74>)
 801896e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8018970:	4b15      	ldr	r3, [pc, #84]	@ (80189c8 <TL_MM_Init+0x74>)
 8018972:	681b      	ldr	r3, [r3, #0]
 8018974:	687a      	ldr	r2, [r7, #4]
 8018976:	6892      	ldr	r2, [r2, #8]
 8018978:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 801897a:	4b13      	ldr	r3, [pc, #76]	@ (80189c8 <TL_MM_Init+0x74>)
 801897c:	681b      	ldr	r3, [r3, #0]
 801897e:	687a      	ldr	r2, [r7, #4]
 8018980:	68d2      	ldr	r2, [r2, #12]
 8018982:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8018984:	4b10      	ldr	r3, [pc, #64]	@ (80189c8 <TL_MM_Init+0x74>)
 8018986:	681b      	ldr	r3, [r3, #0]
 8018988:	4a0c      	ldr	r2, [pc, #48]	@ (80189bc <TL_MM_Init+0x68>)
 801898a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 801898c:	4b0e      	ldr	r3, [pc, #56]	@ (80189c8 <TL_MM_Init+0x74>)
 801898e:	681b      	ldr	r3, [r3, #0]
 8018990:	687a      	ldr	r2, [r7, #4]
 8018992:	6812      	ldr	r2, [r2, #0]
 8018994:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8018996:	4b0c      	ldr	r3, [pc, #48]	@ (80189c8 <TL_MM_Init+0x74>)
 8018998:	681b      	ldr	r3, [r3, #0]
 801899a:	687a      	ldr	r2, [r7, #4]
 801899c:	6852      	ldr	r2, [r2, #4]
 801899e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80189a0:	4b09      	ldr	r3, [pc, #36]	@ (80189c8 <TL_MM_Init+0x74>)
 80189a2:	681b      	ldr	r3, [r3, #0]
 80189a4:	687a      	ldr	r2, [r7, #4]
 80189a6:	6912      	ldr	r2, [r2, #16]
 80189a8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80189aa:	4b07      	ldr	r3, [pc, #28]	@ (80189c8 <TL_MM_Init+0x74>)
 80189ac:	681b      	ldr	r3, [r3, #0]
 80189ae:	687a      	ldr	r2, [r7, #4]
 80189b0:	6952      	ldr	r2, [r2, #20]
 80189b2:	619a      	str	r2, [r3, #24]

  return;
 80189b4:	bf00      	nop
}
 80189b6:	3708      	adds	r7, #8
 80189b8:	46bd      	mov	sp, r7
 80189ba:	bd80      	pop	{r7, pc}
 80189bc:	200301c4 	.word	0x200301c4
 80189c0:	2000097c 	.word	0x2000097c
 80189c4:	20030000 	.word	0x20030000
 80189c8:	20000994 	.word	0x20000994

080189cc <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80189cc:	b580      	push	{r7, lr}
 80189ce:	b082      	sub	sp, #8
 80189d0:	af00      	add	r7, sp, #0
 80189d2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80189d4:	6879      	ldr	r1, [r7, #4]
 80189d6:	4807      	ldr	r0, [pc, #28]	@ (80189f4 <TL_MM_EvtDone+0x28>)
 80189d8:	f7ff fcf0 	bl	80183bc <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80189dc:	6879      	ldr	r1, [r7, #4]
 80189de:	2000      	movs	r0, #0
 80189e0:	f000 f862 	bl	8018aa8 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80189e4:	4804      	ldr	r0, [pc, #16]	@ (80189f8 <TL_MM_EvtDone+0x2c>)
 80189e6:	f7f6 fd3f 	bl	800f468 <HW_IPCC_MM_SendFreeBuf>

  return;
 80189ea:	bf00      	nop
}
 80189ec:	3708      	adds	r7, #8
 80189ee:	46bd      	mov	sp, r7
 80189f0:	bd80      	pop	{r7, pc}
 80189f2:	bf00      	nop
 80189f4:	2000097c 	.word	0x2000097c
 80189f8:	080189fd 	.word	0x080189fd

080189fc <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80189fc:	b580      	push	{r7, lr}
 80189fe:	b082      	sub	sp, #8
 8018a00:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8018a02:	e00c      	b.n	8018a1e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8018a04:	1d3b      	adds	r3, r7, #4
 8018a06:	4619      	mov	r1, r3
 8018a08:	480a      	ldr	r0, [pc, #40]	@ (8018a34 <SendFreeBuf+0x38>)
 8018a0a:	f7ff fd1e 	bl	801844a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8018a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8018a38 <SendFreeBuf+0x3c>)
 8018a10:	691b      	ldr	r3, [r3, #16]
 8018a12:	691b      	ldr	r3, [r3, #16]
 8018a14:	687a      	ldr	r2, [r7, #4]
 8018a16:	4611      	mov	r1, r2
 8018a18:	4618      	mov	r0, r3
 8018a1a:	f7ff fccf 	bl	80183bc <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8018a1e:	4805      	ldr	r0, [pc, #20]	@ (8018a34 <SendFreeBuf+0x38>)
 8018a20:	f7ff fc84 	bl	801832c <LST_is_empty>
 8018a24:	4603      	mov	r3, r0
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	d0ec      	beq.n	8018a04 <SendFreeBuf+0x8>
  }

  return;
 8018a2a:	bf00      	nop
}
 8018a2c:	3708      	adds	r7, #8
 8018a2e:	46bd      	mov	sp, r7
 8018a30:	bd80      	pop	{r7, pc}
 8018a32:	bf00      	nop
 8018a34:	2000097c 	.word	0x2000097c
 8018a38:	20030000 	.word	0x20030000

08018a3c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8018a3c:	b580      	push	{r7, lr}
 8018a3e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8018a40:	4805      	ldr	r0, [pc, #20]	@ (8018a58 <TL_TRACES_Init+0x1c>)
 8018a42:	f7ff fc63 	bl	801830c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8018a46:	4b05      	ldr	r3, [pc, #20]	@ (8018a5c <TL_TRACES_Init+0x20>)
 8018a48:	695b      	ldr	r3, [r3, #20]
 8018a4a:	4a03      	ldr	r2, [pc, #12]	@ (8018a58 <TL_TRACES_Init+0x1c>)
 8018a4c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8018a4e:	f7f6 fd41 	bl	800f4d4 <HW_IPCC_TRACES_Init>

  return;
 8018a52:	bf00      	nop
}
 8018a54:	bd80      	pop	{r7, pc}
 8018a56:	bf00      	nop
 8018a58:	200301cc 	.word	0x200301cc
 8018a5c:	20030000 	.word	0x20030000

08018a60 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8018a60:	b580      	push	{r7, lr}
 8018a62:	b082      	sub	sp, #8
 8018a64:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8018a66:	e008      	b.n	8018a7a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8018a68:	1d3b      	adds	r3, r7, #4
 8018a6a:	4619      	mov	r1, r3
 8018a6c:	4808      	ldr	r0, [pc, #32]	@ (8018a90 <HW_IPCC_TRACES_EvtNot+0x30>)
 8018a6e:	f7ff fcec 	bl	801844a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8018a72:	687b      	ldr	r3, [r7, #4]
 8018a74:	4618      	mov	r0, r3
 8018a76:	f000 f80d 	bl	8018a94 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8018a7a:	4805      	ldr	r0, [pc, #20]	@ (8018a90 <HW_IPCC_TRACES_EvtNot+0x30>)
 8018a7c:	f7ff fc56 	bl	801832c <LST_is_empty>
 8018a80:	4603      	mov	r3, r0
 8018a82:	2b00      	cmp	r3, #0
 8018a84:	d0f0      	beq.n	8018a68 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8018a86:	bf00      	nop
}
 8018a88:	3708      	adds	r7, #8
 8018a8a:	46bd      	mov	sp, r7
 8018a8c:	bd80      	pop	{r7, pc}
 8018a8e:	bf00      	nop
 8018a90:	200301cc 	.word	0x200301cc

08018a94 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8018a94:	b480      	push	{r7}
 8018a96:	b083      	sub	sp, #12
 8018a98:	af00      	add	r7, sp, #0
 8018a9a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8018a9c:	bf00      	nop
 8018a9e:	370c      	adds	r7, #12
 8018aa0:	46bd      	mov	sp, r7
 8018aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aa6:	4770      	bx	lr

08018aa8 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8018aa8:	b480      	push	{r7}
 8018aaa:	b085      	sub	sp, #20
 8018aac:	af00      	add	r7, sp, #0
 8018aae:	4603      	mov	r3, r0
 8018ab0:	6039      	str	r1, [r7, #0]
 8018ab2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8018ab4:	79fb      	ldrb	r3, [r7, #7]
 8018ab6:	2b06      	cmp	r3, #6
 8018ab8:	d845      	bhi.n	8018b46 <OutputDbgTrace+0x9e>
 8018aba:	a201      	add	r2, pc, #4	@ (adr r2, 8018ac0 <OutputDbgTrace+0x18>)
 8018abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ac0:	08018add 	.word	0x08018add
 8018ac4:	08018b01 	.word	0x08018b01
 8018ac8:	08018b07 	.word	0x08018b07
 8018acc:	08018b1b 	.word	0x08018b1b
 8018ad0:	08018b27 	.word	0x08018b27
 8018ad4:	08018b2d 	.word	0x08018b2d
 8018ad8:	08018b3b 	.word	0x08018b3b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8018adc:	683b      	ldr	r3, [r7, #0]
 8018ade:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8018ae0:	68fb      	ldr	r3, [r7, #12]
 8018ae2:	7a5b      	ldrb	r3, [r3, #9]
 8018ae4:	2bff      	cmp	r3, #255	@ 0xff
 8018ae6:	d005      	beq.n	8018af4 <OutputDbgTrace+0x4c>
 8018ae8:	2bff      	cmp	r3, #255	@ 0xff
 8018aea:	dc05      	bgt.n	8018af8 <OutputDbgTrace+0x50>
 8018aec:	2b0e      	cmp	r3, #14
 8018aee:	d005      	beq.n	8018afc <OutputDbgTrace+0x54>
 8018af0:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8018af2:	e001      	b.n	8018af8 <OutputDbgTrace+0x50>
          break;
 8018af4:	bf00      	nop
 8018af6:	e027      	b.n	8018b48 <OutputDbgTrace+0xa0>
          break;
 8018af8:	bf00      	nop
 8018afa:	e025      	b.n	8018b48 <OutputDbgTrace+0xa0>
          break;
 8018afc:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8018afe:	e023      	b.n	8018b48 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8018b00:	683b      	ldr	r3, [r7, #0]
 8018b02:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8018b04:	e020      	b.n	8018b48 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8018b06:	683b      	ldr	r3, [r7, #0]
 8018b08:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8018b0a:	68fb      	ldr	r3, [r7, #12]
 8018b0c:	7a5b      	ldrb	r3, [r3, #9]
 8018b0e:	2b0e      	cmp	r3, #14
 8018b10:	d001      	beq.n	8018b16 <OutputDbgTrace+0x6e>
 8018b12:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8018b14:	e000      	b.n	8018b18 <OutputDbgTrace+0x70>
          break;
 8018b16:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8018b18:	e016      	b.n	8018b48 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8018b1a:	683b      	ldr	r3, [r7, #0]
 8018b1c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8018b1e:	68fb      	ldr	r3, [r7, #12]
 8018b20:	7a5b      	ldrb	r3, [r3, #9]
 8018b22:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8018b24:	e010      	b.n	8018b48 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8018b26:	683b      	ldr	r3, [r7, #0]
 8018b28:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8018b2a:	e00d      	b.n	8018b48 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8018b2c:	683b      	ldr	r3, [r7, #0]
 8018b2e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8018b30:	68fb      	ldr	r3, [r7, #12]
 8018b32:	7a5b      	ldrb	r3, [r3, #9]
 8018b34:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8018b36:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8018b38:	e006      	b.n	8018b48 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8018b3a:	683b      	ldr	r3, [r7, #0]
 8018b3c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8018b3e:	68fb      	ldr	r3, [r7, #12]
 8018b40:	7a5b      	ldrb	r3, [r3, #9]
 8018b42:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8018b44:	e000      	b.n	8018b48 <OutputDbgTrace+0xa0>

    default:
      break;
 8018b46:	bf00      	nop
  }

  return;
 8018b48:	bf00      	nop
}
 8018b4a:	3714      	adds	r7, #20
 8018b4c:	46bd      	mov	sp, r7
 8018b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b52:	4770      	bx	lr

08018b54 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8018b54:	b480      	push	{r7}
 8018b56:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8018b58:	4b05      	ldr	r3, [pc, #20]	@ (8018b70 <UTIL_LPM_Init+0x1c>)
 8018b5a:	2200      	movs	r2, #0
 8018b5c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8018b5e:	4b05      	ldr	r3, [pc, #20]	@ (8018b74 <UTIL_LPM_Init+0x20>)
 8018b60:	2200      	movs	r2, #0
 8018b62:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8018b64:	bf00      	nop
 8018b66:	46bd      	mov	sp, r7
 8018b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b6c:	4770      	bx	lr
 8018b6e:	bf00      	nop
 8018b70:	20000998 	.word	0x20000998
 8018b74:	2000099c 	.word	0x2000099c

08018b78 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8018b78:	b480      	push	{r7}
 8018b7a:	b087      	sub	sp, #28
 8018b7c:	af00      	add	r7, sp, #0
 8018b7e:	6078      	str	r0, [r7, #4]
 8018b80:	460b      	mov	r3, r1
 8018b82:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018b84:	f3ef 8310 	mrs	r3, PRIMASK
 8018b88:	613b      	str	r3, [r7, #16]
  return(result);
 8018b8a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8018b8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018b8e:	b672      	cpsid	i
}
 8018b90:	bf00      	nop
  
  switch(state)
 8018b92:	78fb      	ldrb	r3, [r7, #3]
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	d008      	beq.n	8018baa <UTIL_LPM_SetOffMode+0x32>
 8018b98:	2b01      	cmp	r3, #1
 8018b9a:	d10e      	bne.n	8018bba <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8018b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8018bd4 <UTIL_LPM_SetOffMode+0x5c>)
 8018b9e:	681a      	ldr	r2, [r3, #0]
 8018ba0:	687b      	ldr	r3, [r7, #4]
 8018ba2:	4313      	orrs	r3, r2
 8018ba4:	4a0b      	ldr	r2, [pc, #44]	@ (8018bd4 <UTIL_LPM_SetOffMode+0x5c>)
 8018ba6:	6013      	str	r3, [r2, #0]
      break;
 8018ba8:	e008      	b.n	8018bbc <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8018baa:	687b      	ldr	r3, [r7, #4]
 8018bac:	43da      	mvns	r2, r3
 8018bae:	4b09      	ldr	r3, [pc, #36]	@ (8018bd4 <UTIL_LPM_SetOffMode+0x5c>)
 8018bb0:	681b      	ldr	r3, [r3, #0]
 8018bb2:	4013      	ands	r3, r2
 8018bb4:	4a07      	ldr	r2, [pc, #28]	@ (8018bd4 <UTIL_LPM_SetOffMode+0x5c>)
 8018bb6:	6013      	str	r3, [r2, #0]
      break;
 8018bb8:	e000      	b.n	8018bbc <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8018bba:	bf00      	nop
 8018bbc:	697b      	ldr	r3, [r7, #20]
 8018bbe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018bc0:	68fb      	ldr	r3, [r7, #12]
 8018bc2:	f383 8810 	msr	PRIMASK, r3
}
 8018bc6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8018bc8:	bf00      	nop
 8018bca:	371c      	adds	r7, #28
 8018bcc:	46bd      	mov	sp, r7
 8018bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bd2:	4770      	bx	lr
 8018bd4:	2000099c 	.word	0x2000099c

08018bd8 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8018bd8:	b580      	push	{r7, lr}
 8018bda:	b084      	sub	sp, #16
 8018bdc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018bde:	f3ef 8310 	mrs	r3, PRIMASK
 8018be2:	60bb      	str	r3, [r7, #8]
  return(result);
 8018be4:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 8018be6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8018be8:	b672      	cpsid	i
}
 8018bea:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8018bec:	4b12      	ldr	r3, [pc, #72]	@ (8018c38 <UTIL_LPM_EnterLowPower+0x60>)
 8018bee:	681b      	ldr	r3, [r3, #0]
 8018bf0:	2b00      	cmp	r3, #0
 8018bf2:	d006      	beq.n	8018c02 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8018bf4:	4b11      	ldr	r3, [pc, #68]	@ (8018c3c <UTIL_LPM_EnterLowPower+0x64>)
 8018bf6:	681b      	ldr	r3, [r3, #0]
 8018bf8:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8018bfa:	4b10      	ldr	r3, [pc, #64]	@ (8018c3c <UTIL_LPM_EnterLowPower+0x64>)
 8018bfc:	685b      	ldr	r3, [r3, #4]
 8018bfe:	4798      	blx	r3
 8018c00:	e010      	b.n	8018c24 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8018c02:	4b0f      	ldr	r3, [pc, #60]	@ (8018c40 <UTIL_LPM_EnterLowPower+0x68>)
 8018c04:	681b      	ldr	r3, [r3, #0]
 8018c06:	2b00      	cmp	r3, #0
 8018c08:	d006      	beq.n	8018c18 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8018c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8018c3c <UTIL_LPM_EnterLowPower+0x64>)
 8018c0c:	689b      	ldr	r3, [r3, #8]
 8018c0e:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8018c10:	4b0a      	ldr	r3, [pc, #40]	@ (8018c3c <UTIL_LPM_EnterLowPower+0x64>)
 8018c12:	68db      	ldr	r3, [r3, #12]
 8018c14:	4798      	blx	r3
 8018c16:	e005      	b.n	8018c24 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8018c18:	4b08      	ldr	r3, [pc, #32]	@ (8018c3c <UTIL_LPM_EnterLowPower+0x64>)
 8018c1a:	691b      	ldr	r3, [r3, #16]
 8018c1c:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8018c1e:	4b07      	ldr	r3, [pc, #28]	@ (8018c3c <UTIL_LPM_EnterLowPower+0x64>)
 8018c20:	695b      	ldr	r3, [r3, #20]
 8018c22:	4798      	blx	r3
 8018c24:	68fb      	ldr	r3, [r7, #12]
 8018c26:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	f383 8810 	msr	PRIMASK, r3
}
 8018c2e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8018c30:	bf00      	nop
 8018c32:	3710      	adds	r7, #16
 8018c34:	46bd      	mov	sp, r7
 8018c36:	bd80      	pop	{r7, pc}
 8018c38:	20000998 	.word	0x20000998
 8018c3c:	0801e128 	.word	0x0801e128
 8018c40:	2000099c 	.word	0x2000099c

08018c44 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8018c44:	b580      	push	{r7, lr}
 8018c46:	b090      	sub	sp, #64	@ 0x40
 8018c48:	af00      	add	r7, sp, #0
 8018c4a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8018c4c:	4b73      	ldr	r3, [pc, #460]	@ (8018e1c <UTIL_SEQ_Run+0x1d8>)
 8018c4e:	681b      	ldr	r3, [r3, #0]
 8018c50:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8018c52:	4b72      	ldr	r3, [pc, #456]	@ (8018e1c <UTIL_SEQ_Run+0x1d8>)
 8018c54:	681a      	ldr	r2, [r3, #0]
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	4013      	ands	r3, r2
 8018c5a:	4a70      	ldr	r2, [pc, #448]	@ (8018e1c <UTIL_SEQ_Run+0x1d8>)
 8018c5c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8018c5e:	4b70      	ldr	r3, [pc, #448]	@ (8018e20 <UTIL_SEQ_Run+0x1dc>)
 8018c60:	681b      	ldr	r3, [r3, #0]
 8018c62:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8018c64:	4b6f      	ldr	r3, [pc, #444]	@ (8018e24 <UTIL_SEQ_Run+0x1e0>)
 8018c66:	681b      	ldr	r3, [r3, #0]
 8018c68:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8018c6a:	4b6f      	ldr	r3, [pc, #444]	@ (8018e28 <UTIL_SEQ_Run+0x1e4>)
 8018c6c:	681b      	ldr	r3, [r3, #0]
 8018c6e:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8018c70:	4b6e      	ldr	r3, [pc, #440]	@ (8018e2c <UTIL_SEQ_Run+0x1e8>)
 8018c72:	681b      	ldr	r3, [r3, #0]
 8018c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8018c76:	e08d      	b.n	8018d94 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8018c78:	2300      	movs	r3, #0
 8018c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8018c7c:	e002      	b.n	8018c84 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8018c7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018c80:	3301      	adds	r3, #1
 8018c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8018c84:	4a6a      	ldr	r2, [pc, #424]	@ (8018e30 <UTIL_SEQ_Run+0x1ec>)
 8018c86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018c88:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8018c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018c8e:	401a      	ands	r2, r3
 8018c90:	4b62      	ldr	r3, [pc, #392]	@ (8018e1c <UTIL_SEQ_Run+0x1d8>)
 8018c92:	681b      	ldr	r3, [r3, #0]
 8018c94:	4013      	ands	r3, r2
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	d0f1      	beq.n	8018c7e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8018c9a:	4a65      	ldr	r2, [pc, #404]	@ (8018e30 <UTIL_SEQ_Run+0x1ec>)
 8018c9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018c9e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8018ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018ca4:	401a      	ands	r2, r3
 8018ca6:	4b5d      	ldr	r3, [pc, #372]	@ (8018e1c <UTIL_SEQ_Run+0x1d8>)
 8018ca8:	681b      	ldr	r3, [r3, #0]
 8018caa:	4013      	ands	r3, r2
 8018cac:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8018cae:	4a60      	ldr	r2, [pc, #384]	@ (8018e30 <UTIL_SEQ_Run+0x1ec>)
 8018cb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018cb2:	00db      	lsls	r3, r3, #3
 8018cb4:	4413      	add	r3, r2
 8018cb6:	685a      	ldr	r2, [r3, #4]
 8018cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018cba:	4013      	ands	r3, r2
 8018cbc:	2b00      	cmp	r3, #0
 8018cbe:	d106      	bne.n	8018cce <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8018cc0:	4a5b      	ldr	r2, [pc, #364]	@ (8018e30 <UTIL_SEQ_Run+0x1ec>)
 8018cc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018cc4:	00db      	lsls	r3, r3, #3
 8018cc6:	4413      	add	r3, r2
 8018cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8018ccc:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8018cce:	4a58      	ldr	r2, [pc, #352]	@ (8018e30 <UTIL_SEQ_Run+0x1ec>)
 8018cd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018cd2:	00db      	lsls	r3, r3, #3
 8018cd4:	4413      	add	r3, r2
 8018cd6:	685a      	ldr	r2, [r3, #4]
 8018cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018cda:	4013      	ands	r3, r2
 8018cdc:	4618      	mov	r0, r3
 8018cde:	f000 f9d9 	bl	8019094 <SEQ_BitPosition>
 8018ce2:	4603      	mov	r3, r0
 8018ce4:	461a      	mov	r2, r3
 8018ce6:	4b53      	ldr	r3, [pc, #332]	@ (8018e34 <UTIL_SEQ_Run+0x1f0>)
 8018ce8:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8018cea:	4a51      	ldr	r2, [pc, #324]	@ (8018e30 <UTIL_SEQ_Run+0x1ec>)
 8018cec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018cee:	00db      	lsls	r3, r3, #3
 8018cf0:	4413      	add	r3, r2
 8018cf2:	685a      	ldr	r2, [r3, #4]
 8018cf4:	4b4f      	ldr	r3, [pc, #316]	@ (8018e34 <UTIL_SEQ_Run+0x1f0>)
 8018cf6:	681b      	ldr	r3, [r3, #0]
 8018cf8:	2101      	movs	r1, #1
 8018cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8018cfe:	43db      	mvns	r3, r3
 8018d00:	401a      	ands	r2, r3
 8018d02:	494b      	ldr	r1, [pc, #300]	@ (8018e30 <UTIL_SEQ_Run+0x1ec>)
 8018d04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018d06:	00db      	lsls	r3, r3, #3
 8018d08:	440b      	add	r3, r1
 8018d0a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018d0c:	f3ef 8310 	mrs	r3, PRIMASK
 8018d10:	61bb      	str	r3, [r7, #24]
  return(result);
 8018d12:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8018d14:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8018d16:	b672      	cpsid	i
}
 8018d18:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8018d1a:	4b46      	ldr	r3, [pc, #280]	@ (8018e34 <UTIL_SEQ_Run+0x1f0>)
 8018d1c:	681b      	ldr	r3, [r3, #0]
 8018d1e:	2201      	movs	r2, #1
 8018d20:	fa02 f303 	lsl.w	r3, r2, r3
 8018d24:	43da      	mvns	r2, r3
 8018d26:	4b3e      	ldr	r3, [pc, #248]	@ (8018e20 <UTIL_SEQ_Run+0x1dc>)
 8018d28:	681b      	ldr	r3, [r3, #0]
 8018d2a:	4013      	ands	r3, r2
 8018d2c:	4a3c      	ldr	r2, [pc, #240]	@ (8018e20 <UTIL_SEQ_Run+0x1dc>)
 8018d2e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8018d30:	2302      	movs	r3, #2
 8018d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018d34:	e013      	b.n	8018d5e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8018d36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018d38:	3b01      	subs	r3, #1
 8018d3a:	4a3d      	ldr	r2, [pc, #244]	@ (8018e30 <UTIL_SEQ_Run+0x1ec>)
 8018d3c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8018d40:	4b3c      	ldr	r3, [pc, #240]	@ (8018e34 <UTIL_SEQ_Run+0x1f0>)
 8018d42:	681b      	ldr	r3, [r3, #0]
 8018d44:	2201      	movs	r2, #1
 8018d46:	fa02 f303 	lsl.w	r3, r2, r3
 8018d4a:	43da      	mvns	r2, r3
 8018d4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018d4e:	3b01      	subs	r3, #1
 8018d50:	400a      	ands	r2, r1
 8018d52:	4937      	ldr	r1, [pc, #220]	@ (8018e30 <UTIL_SEQ_Run+0x1ec>)
 8018d54:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8018d58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018d5a:	3b01      	subs	r3, #1
 8018d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018d5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018d60:	2b00      	cmp	r3, #0
 8018d62:	d1e8      	bne.n	8018d36 <UTIL_SEQ_Run+0xf2>
 8018d64:	6a3b      	ldr	r3, [r7, #32]
 8018d66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018d68:	697b      	ldr	r3, [r7, #20]
 8018d6a:	f383 8810 	msr	PRIMASK, r3
}
 8018d6e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8018d70:	4b30      	ldr	r3, [pc, #192]	@ (8018e34 <UTIL_SEQ_Run+0x1f0>)
 8018d72:	681b      	ldr	r3, [r3, #0]
 8018d74:	4a30      	ldr	r2, [pc, #192]	@ (8018e38 <UTIL_SEQ_Run+0x1f4>)
 8018d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018d7a:	4798      	blx	r3

    local_taskset = TaskSet;
 8018d7c:	4b28      	ldr	r3, [pc, #160]	@ (8018e20 <UTIL_SEQ_Run+0x1dc>)
 8018d7e:	681b      	ldr	r3, [r3, #0]
 8018d80:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 8018d82:	4b28      	ldr	r3, [pc, #160]	@ (8018e24 <UTIL_SEQ_Run+0x1e0>)
 8018d84:	681b      	ldr	r3, [r3, #0]
 8018d86:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8018d88:	4b27      	ldr	r3, [pc, #156]	@ (8018e28 <UTIL_SEQ_Run+0x1e4>)
 8018d8a:	681b      	ldr	r3, [r3, #0]
 8018d8c:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 8018d8e:	4b27      	ldr	r3, [pc, #156]	@ (8018e2c <UTIL_SEQ_Run+0x1e8>)
 8018d90:	681b      	ldr	r3, [r3, #0]
 8018d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8018d94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018d98:	401a      	ands	r2, r3
 8018d9a:	4b20      	ldr	r3, [pc, #128]	@ (8018e1c <UTIL_SEQ_Run+0x1d8>)
 8018d9c:	681b      	ldr	r3, [r3, #0]
 8018d9e:	4013      	ands	r3, r2
 8018da0:	2b00      	cmp	r3, #0
 8018da2:	d005      	beq.n	8018db0 <UTIL_SEQ_Run+0x16c>
 8018da4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018da8:	4013      	ands	r3, r2
 8018daa:	2b00      	cmp	r3, #0
 8018dac:	f43f af64 	beq.w	8018c78 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8018db0:	4b20      	ldr	r3, [pc, #128]	@ (8018e34 <UTIL_SEQ_Run+0x1f0>)
 8018db2:	f04f 32ff 	mov.w	r2, #4294967295
 8018db6:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8018db8:	f000 f95e 	bl	8019078 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018dbc:	f3ef 8310 	mrs	r3, PRIMASK
 8018dc0:	613b      	str	r3, [r7, #16]
  return(result);
 8018dc2:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8018dc4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8018dc6:	b672      	cpsid	i
}
 8018dc8:	bf00      	nop
  local_taskset = TaskSet;
 8018dca:	4b15      	ldr	r3, [pc, #84]	@ (8018e20 <UTIL_SEQ_Run+0x1dc>)
 8018dcc:	681b      	ldr	r3, [r3, #0]
 8018dce:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8018dd0:	4b14      	ldr	r3, [pc, #80]	@ (8018e24 <UTIL_SEQ_Run+0x1e0>)
 8018dd2:	681b      	ldr	r3, [r3, #0]
 8018dd4:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8018dd6:	4b14      	ldr	r3, [pc, #80]	@ (8018e28 <UTIL_SEQ_Run+0x1e4>)
 8018dd8:	681b      	ldr	r3, [r3, #0]
 8018dda:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8018ddc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018de0:	401a      	ands	r2, r3
 8018de2:	4b0e      	ldr	r3, [pc, #56]	@ (8018e1c <UTIL_SEQ_Run+0x1d8>)
 8018de4:	681b      	ldr	r3, [r3, #0]
 8018de6:	4013      	ands	r3, r2
 8018de8:	2b00      	cmp	r3, #0
 8018dea:	d107      	bne.n	8018dfc <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8018dec:	4b0f      	ldr	r3, [pc, #60]	@ (8018e2c <UTIL_SEQ_Run+0x1e8>)
 8018dee:	681a      	ldr	r2, [r3, #0]
 8018df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018df2:	4013      	ands	r3, r2
 8018df4:	2b00      	cmp	r3, #0
 8018df6:	d101      	bne.n	8018dfc <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8018df8:	f7ef ff4e 	bl	8008c98 <UTIL_SEQ_Idle>
 8018dfc:	69fb      	ldr	r3, [r7, #28]
 8018dfe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e00:	68fb      	ldr	r3, [r7, #12]
 8018e02:	f383 8810 	msr	PRIMASK, r3
}
 8018e06:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8018e08:	f000 f93d 	bl	8019086 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8018e0c:	4a03      	ldr	r2, [pc, #12]	@ (8018e1c <UTIL_SEQ_Run+0x1d8>)
 8018e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e10:	6013      	str	r3, [r2, #0]

  return;
 8018e12:	bf00      	nop
}
 8018e14:	3740      	adds	r7, #64	@ 0x40
 8018e16:	46bd      	mov	sp, r7
 8018e18:	bd80      	pop	{r7, pc}
 8018e1a:	bf00      	nop
 8018e1c:	2000008c 	.word	0x2000008c
 8018e20:	200009a0 	.word	0x200009a0
 8018e24:	200009a4 	.word	0x200009a4
 8018e28:	20000088 	.word	0x20000088
 8018e2c:	200009a8 	.word	0x200009a8
 8018e30:	20000a30 	.word	0x20000a30
 8018e34:	200009ac 	.word	0x200009ac
 8018e38:	200009b0 	.word	0x200009b0

08018e3c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8018e3c:	b580      	push	{r7, lr}
 8018e3e:	b088      	sub	sp, #32
 8018e40:	af00      	add	r7, sp, #0
 8018e42:	60f8      	str	r0, [r7, #12]
 8018e44:	60b9      	str	r1, [r7, #8]
 8018e46:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018e48:	f3ef 8310 	mrs	r3, PRIMASK
 8018e4c:	617b      	str	r3, [r7, #20]
  return(result);
 8018e4e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8018e50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8018e52:	b672      	cpsid	i
}
 8018e54:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8018e56:	68f8      	ldr	r0, [r7, #12]
 8018e58:	f000 f91c 	bl	8019094 <SEQ_BitPosition>
 8018e5c:	4603      	mov	r3, r0
 8018e5e:	4619      	mov	r1, r3
 8018e60:	4a06      	ldr	r2, [pc, #24]	@ (8018e7c <UTIL_SEQ_RegTask+0x40>)
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8018e68:	69fb      	ldr	r3, [r7, #28]
 8018e6a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e6c:	69bb      	ldr	r3, [r7, #24]
 8018e6e:	f383 8810 	msr	PRIMASK, r3
}
 8018e72:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8018e74:	bf00      	nop
}
 8018e76:	3720      	adds	r7, #32
 8018e78:	46bd      	mov	sp, r7
 8018e7a:	bd80      	pop	{r7, pc}
 8018e7c:	200009b0 	.word	0x200009b0

08018e80 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8018e80:	b480      	push	{r7}
 8018e82:	b087      	sub	sp, #28
 8018e84:	af00      	add	r7, sp, #0
 8018e86:	6078      	str	r0, [r7, #4]
 8018e88:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018e8a:	f3ef 8310 	mrs	r3, PRIMASK
 8018e8e:	60fb      	str	r3, [r7, #12]
  return(result);
 8018e90:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8018e92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018e94:	b672      	cpsid	i
}
 8018e96:	bf00      	nop

  TaskSet |= TaskId_bm;
 8018e98:	4b0d      	ldr	r3, [pc, #52]	@ (8018ed0 <UTIL_SEQ_SetTask+0x50>)
 8018e9a:	681a      	ldr	r2, [r3, #0]
 8018e9c:	687b      	ldr	r3, [r7, #4]
 8018e9e:	4313      	orrs	r3, r2
 8018ea0:	4a0b      	ldr	r2, [pc, #44]	@ (8018ed0 <UTIL_SEQ_SetTask+0x50>)
 8018ea2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8018ea4:	4a0b      	ldr	r2, [pc, #44]	@ (8018ed4 <UTIL_SEQ_SetTask+0x54>)
 8018ea6:	683b      	ldr	r3, [r7, #0]
 8018ea8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8018eac:	687b      	ldr	r3, [r7, #4]
 8018eae:	431a      	orrs	r2, r3
 8018eb0:	4908      	ldr	r1, [pc, #32]	@ (8018ed4 <UTIL_SEQ_SetTask+0x54>)
 8018eb2:	683b      	ldr	r3, [r7, #0]
 8018eb4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8018eb8:	697b      	ldr	r3, [r7, #20]
 8018eba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018ebc:	693b      	ldr	r3, [r7, #16]
 8018ebe:	f383 8810 	msr	PRIMASK, r3
}
 8018ec2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8018ec4:	bf00      	nop
}
 8018ec6:	371c      	adds	r7, #28
 8018ec8:	46bd      	mov	sp, r7
 8018eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ece:	4770      	bx	lr
 8018ed0:	200009a0 	.word	0x200009a0
 8018ed4:	20000a30 	.word	0x20000a30

08018ed8 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8018ed8:	b480      	push	{r7}
 8018eda:	b087      	sub	sp, #28
 8018edc:	af00      	add	r7, sp, #0
 8018ede:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018ee0:	f3ef 8310 	mrs	r3, PRIMASK
 8018ee4:	60fb      	str	r3, [r7, #12]
  return(result);
 8018ee6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8018ee8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018eea:	b672      	cpsid	i
}
 8018eec:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8018eee:	687b      	ldr	r3, [r7, #4]
 8018ef0:	43da      	mvns	r2, r3
 8018ef2:	4b08      	ldr	r3, [pc, #32]	@ (8018f14 <UTIL_SEQ_PauseTask+0x3c>)
 8018ef4:	681b      	ldr	r3, [r3, #0]
 8018ef6:	4013      	ands	r3, r2
 8018ef8:	4a06      	ldr	r2, [pc, #24]	@ (8018f14 <UTIL_SEQ_PauseTask+0x3c>)
 8018efa:	6013      	str	r3, [r2, #0]
 8018efc:	697b      	ldr	r3, [r7, #20]
 8018efe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018f00:	693b      	ldr	r3, [r7, #16]
 8018f02:	f383 8810 	msr	PRIMASK, r3
}
 8018f06:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8018f08:	bf00      	nop
}
 8018f0a:	371c      	adds	r7, #28
 8018f0c:	46bd      	mov	sp, r7
 8018f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f12:	4770      	bx	lr
 8018f14:	20000088 	.word	0x20000088

08018f18 <UTIL_SEQ_IsPauseTask>:

uint32_t UTIL_SEQ_IsPauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8018f18:	b480      	push	{r7}
 8018f1a:	b087      	sub	sp, #28
 8018f1c:	af00      	add	r7, sp, #0
 8018f1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018f20:	f3ef 8310 	mrs	r3, PRIMASK
 8018f24:	60bb      	str	r3, [r7, #8]
  return(result);
 8018f26:	68bb      	ldr	r3, [r7, #8]
  uint32_t _status;
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8018f28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018f2a:	b672      	cpsid	i
}
 8018f2c:	bf00      	nop

  _status = ((TaskMask & TaskId_bm) == TaskId_bm) ? 0u:1u;
 8018f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8018f60 <UTIL_SEQ_IsPauseTask+0x48>)
 8018f30:	681a      	ldr	r2, [r3, #0]
 8018f32:	687b      	ldr	r3, [r7, #4]
 8018f34:	4013      	ands	r3, r2
 8018f36:	687a      	ldr	r2, [r7, #4]
 8018f38:	429a      	cmp	r2, r3
 8018f3a:	bf14      	ite	ne
 8018f3c:	2301      	movne	r3, #1
 8018f3e:	2300      	moveq	r3, #0
 8018f40:	b2db      	uxtb	r3, r3
 8018f42:	613b      	str	r3, [r7, #16]
 8018f44:	697b      	ldr	r3, [r7, #20]
 8018f46:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018f48:	68fb      	ldr	r3, [r7, #12]
 8018f4a:	f383 8810 	msr	PRIMASK, r3
}
 8018f4e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
 8018f50:	693b      	ldr	r3, [r7, #16]
}
 8018f52:	4618      	mov	r0, r3
 8018f54:	371c      	adds	r7, #28
 8018f56:	46bd      	mov	sp, r7
 8018f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f5c:	4770      	bx	lr
 8018f5e:	bf00      	nop
 8018f60:	20000088 	.word	0x20000088

08018f64 <UTIL_SEQ_ResumeTask>:

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8018f64:	b480      	push	{r7}
 8018f66:	b087      	sub	sp, #28
 8018f68:	af00      	add	r7, sp, #0
 8018f6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018f6c:	f3ef 8310 	mrs	r3, PRIMASK
 8018f70:	60fb      	str	r3, [r7, #12]
  return(result);
 8018f72:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8018f74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018f76:	b672      	cpsid	i
}
 8018f78:	bf00      	nop

  TaskMask |= TaskId_bm;
 8018f7a:	4b09      	ldr	r3, [pc, #36]	@ (8018fa0 <UTIL_SEQ_ResumeTask+0x3c>)
 8018f7c:	681a      	ldr	r2, [r3, #0]
 8018f7e:	687b      	ldr	r3, [r7, #4]
 8018f80:	4313      	orrs	r3, r2
 8018f82:	4a07      	ldr	r2, [pc, #28]	@ (8018fa0 <UTIL_SEQ_ResumeTask+0x3c>)
 8018f84:	6013      	str	r3, [r2, #0]
 8018f86:	697b      	ldr	r3, [r7, #20]
 8018f88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018f8a:	693b      	ldr	r3, [r7, #16]
 8018f8c:	f383 8810 	msr	PRIMASK, r3
}
 8018f90:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8018f92:	bf00      	nop
}
 8018f94:	371c      	adds	r7, #28
 8018f96:	46bd      	mov	sp, r7
 8018f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f9c:	4770      	bx	lr
 8018f9e:	bf00      	nop
 8018fa0:	20000088 	.word	0x20000088

08018fa4 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8018fa4:	b480      	push	{r7}
 8018fa6:	b087      	sub	sp, #28
 8018fa8:	af00      	add	r7, sp, #0
 8018faa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018fac:	f3ef 8310 	mrs	r3, PRIMASK
 8018fb0:	60fb      	str	r3, [r7, #12]
  return(result);
 8018fb2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8018fb4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018fb6:	b672      	cpsid	i
}
 8018fb8:	bf00      	nop

  EvtSet |= EvtId_bm;
 8018fba:	4b09      	ldr	r3, [pc, #36]	@ (8018fe0 <UTIL_SEQ_SetEvt+0x3c>)
 8018fbc:	681a      	ldr	r2, [r3, #0]
 8018fbe:	687b      	ldr	r3, [r7, #4]
 8018fc0:	4313      	orrs	r3, r2
 8018fc2:	4a07      	ldr	r2, [pc, #28]	@ (8018fe0 <UTIL_SEQ_SetEvt+0x3c>)
 8018fc4:	6013      	str	r3, [r2, #0]
 8018fc6:	697b      	ldr	r3, [r7, #20]
 8018fc8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018fca:	693b      	ldr	r3, [r7, #16]
 8018fcc:	f383 8810 	msr	PRIMASK, r3
}
 8018fd0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8018fd2:	bf00      	nop
}
 8018fd4:	371c      	adds	r7, #28
 8018fd6:	46bd      	mov	sp, r7
 8018fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fdc:	4770      	bx	lr
 8018fde:	bf00      	nop
 8018fe0:	200009a4 	.word	0x200009a4

08018fe4 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8018fe4:	b580      	push	{r7, lr}
 8018fe6:	b088      	sub	sp, #32
 8018fe8:	af00      	add	r7, sp, #0
 8018fea:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8018fec:	4b1f      	ldr	r3, [pc, #124]	@ (801906c <UTIL_SEQ_WaitEvt+0x88>)
 8018fee:	681b      	ldr	r3, [r3, #0]
 8018ff0:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8018ff2:	4b1e      	ldr	r3, [pc, #120]	@ (801906c <UTIL_SEQ_WaitEvt+0x88>)
 8018ff4:	681b      	ldr	r3, [r3, #0]
 8018ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018ffa:	d102      	bne.n	8019002 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8018ffc:	2300      	movs	r3, #0
 8018ffe:	61fb      	str	r3, [r7, #28]
 8019000:	e005      	b.n	801900e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8019002:	4b1a      	ldr	r3, [pc, #104]	@ (801906c <UTIL_SEQ_WaitEvt+0x88>)
 8019004:	681b      	ldr	r3, [r3, #0]
 8019006:	2201      	movs	r2, #1
 8019008:	fa02 f303 	lsl.w	r3, r2, r3
 801900c:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 801900e:	4b18      	ldr	r3, [pc, #96]	@ (8019070 <UTIL_SEQ_WaitEvt+0x8c>)
 8019010:	681b      	ldr	r3, [r3, #0]
 8019012:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8019014:	4a16      	ldr	r2, [pc, #88]	@ (8019070 <UTIL_SEQ_WaitEvt+0x8c>)
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 801901a:	e003      	b.n	8019024 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 801901c:	6879      	ldr	r1, [r7, #4]
 801901e:	69f8      	ldr	r0, [r7, #28]
 8019020:	f7ef fe40 	bl	8008ca4 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8019024:	4b13      	ldr	r3, [pc, #76]	@ (8019074 <UTIL_SEQ_WaitEvt+0x90>)
 8019026:	681a      	ldr	r2, [r3, #0]
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	4013      	ands	r3, r2
 801902c:	2b00      	cmp	r3, #0
 801902e:	d0f5      	beq.n	801901c <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8019030:	4a0e      	ldr	r2, [pc, #56]	@ (801906c <UTIL_SEQ_WaitEvt+0x88>)
 8019032:	69bb      	ldr	r3, [r7, #24]
 8019034:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019036:	f3ef 8310 	mrs	r3, PRIMASK
 801903a:	60bb      	str	r3, [r7, #8]
  return(result);
 801903c:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801903e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8019040:	b672      	cpsid	i
}
 8019042:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	43da      	mvns	r2, r3
 8019048:	4b0a      	ldr	r3, [pc, #40]	@ (8019074 <UTIL_SEQ_WaitEvt+0x90>)
 801904a:	681b      	ldr	r3, [r3, #0]
 801904c:	4013      	ands	r3, r2
 801904e:	4a09      	ldr	r2, [pc, #36]	@ (8019074 <UTIL_SEQ_WaitEvt+0x90>)
 8019050:	6013      	str	r3, [r2, #0]
 8019052:	693b      	ldr	r3, [r7, #16]
 8019054:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019056:	68fb      	ldr	r3, [r7, #12]
 8019058:	f383 8810 	msr	PRIMASK, r3
}
 801905c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 801905e:	4a04      	ldr	r2, [pc, #16]	@ (8019070 <UTIL_SEQ_WaitEvt+0x8c>)
 8019060:	697b      	ldr	r3, [r7, #20]
 8019062:	6013      	str	r3, [r2, #0]
  return;
 8019064:	bf00      	nop
}
 8019066:	3720      	adds	r7, #32
 8019068:	46bd      	mov	sp, r7
 801906a:	bd80      	pop	{r7, pc}
 801906c:	200009ac 	.word	0x200009ac
 8019070:	200009a8 	.word	0x200009a8
 8019074:	200009a4 	.word	0x200009a4

08019078 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8019078:	b480      	push	{r7}
 801907a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801907c:	bf00      	nop
}
 801907e:	46bd      	mov	sp, r7
 8019080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019084:	4770      	bx	lr

08019086 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8019086:	b480      	push	{r7}
 8019088:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801908a:	bf00      	nop
}
 801908c:	46bd      	mov	sp, r7
 801908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019092:	4770      	bx	lr

08019094 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8019094:	b480      	push	{r7}
 8019096:	b085      	sub	sp, #20
 8019098:	af00      	add	r7, sp, #0
 801909a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801909c:	2300      	movs	r3, #0
 801909e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 80190a0:	687b      	ldr	r3, [r7, #4]
 80190a2:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80190a4:	68bb      	ldr	r3, [r7, #8]
 80190a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80190aa:	d204      	bcs.n	80190b6 <SEQ_BitPosition+0x22>
 80190ac:	2310      	movs	r3, #16
 80190ae:	73fb      	strb	r3, [r7, #15]
 80190b0:	68bb      	ldr	r3, [r7, #8]
 80190b2:	041b      	lsls	r3, r3, #16
 80190b4:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 80190b6:	68bb      	ldr	r3, [r7, #8]
 80190b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80190bc:	d205      	bcs.n	80190ca <SEQ_BitPosition+0x36>
 80190be:	7bfb      	ldrb	r3, [r7, #15]
 80190c0:	3308      	adds	r3, #8
 80190c2:	73fb      	strb	r3, [r7, #15]
 80190c4:	68bb      	ldr	r3, [r7, #8]
 80190c6:	021b      	lsls	r3, r3, #8
 80190c8:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 80190ca:	68bb      	ldr	r3, [r7, #8]
 80190cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80190d0:	d205      	bcs.n	80190de <SEQ_BitPosition+0x4a>
 80190d2:	7bfb      	ldrb	r3, [r7, #15]
 80190d4:	3304      	adds	r3, #4
 80190d6:	73fb      	strb	r3, [r7, #15]
 80190d8:	68bb      	ldr	r3, [r7, #8]
 80190da:	011b      	lsls	r3, r3, #4
 80190dc:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 80190de:	68bb      	ldr	r3, [r7, #8]
 80190e0:	0f1b      	lsrs	r3, r3, #28
 80190e2:	4a07      	ldr	r2, [pc, #28]	@ (8019100 <SEQ_BitPosition+0x6c>)
 80190e4:	5cd2      	ldrb	r2, [r2, r3]
 80190e6:	7bfb      	ldrb	r3, [r7, #15]
 80190e8:	4413      	add	r3, r2
 80190ea:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80190ec:	7bfb      	ldrb	r3, [r7, #15]
 80190ee:	f1c3 031f 	rsb	r3, r3, #31
 80190f2:	b2db      	uxtb	r3, r3
}
 80190f4:	4618      	mov	r0, r3
 80190f6:	3714      	adds	r7, #20
 80190f8:	46bd      	mov	sp, r7
 80190fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190fe:	4770      	bx	lr
 8019100:	0801e230 	.word	0x0801e230

08019104 <__cvt>:
 8019104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019108:	ec57 6b10 	vmov	r6, r7, d0
 801910c:	2f00      	cmp	r7, #0
 801910e:	460c      	mov	r4, r1
 8019110:	4619      	mov	r1, r3
 8019112:	463b      	mov	r3, r7
 8019114:	bfbb      	ittet	lt
 8019116:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801911a:	461f      	movlt	r7, r3
 801911c:	2300      	movge	r3, #0
 801911e:	232d      	movlt	r3, #45	@ 0x2d
 8019120:	700b      	strb	r3, [r1, #0]
 8019122:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019124:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8019128:	4691      	mov	r9, r2
 801912a:	f023 0820 	bic.w	r8, r3, #32
 801912e:	bfbc      	itt	lt
 8019130:	4632      	movlt	r2, r6
 8019132:	4616      	movlt	r6, r2
 8019134:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8019138:	d005      	beq.n	8019146 <__cvt+0x42>
 801913a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801913e:	d100      	bne.n	8019142 <__cvt+0x3e>
 8019140:	3401      	adds	r4, #1
 8019142:	2102      	movs	r1, #2
 8019144:	e000      	b.n	8019148 <__cvt+0x44>
 8019146:	2103      	movs	r1, #3
 8019148:	ab03      	add	r3, sp, #12
 801914a:	9301      	str	r3, [sp, #4]
 801914c:	ab02      	add	r3, sp, #8
 801914e:	9300      	str	r3, [sp, #0]
 8019150:	ec47 6b10 	vmov	d0, r6, r7
 8019154:	4653      	mov	r3, sl
 8019156:	4622      	mov	r2, r4
 8019158:	f001 f986 	bl	801a468 <_dtoa_r>
 801915c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8019160:	4605      	mov	r5, r0
 8019162:	d119      	bne.n	8019198 <__cvt+0x94>
 8019164:	f019 0f01 	tst.w	r9, #1
 8019168:	d00e      	beq.n	8019188 <__cvt+0x84>
 801916a:	eb00 0904 	add.w	r9, r0, r4
 801916e:	2200      	movs	r2, #0
 8019170:	2300      	movs	r3, #0
 8019172:	4630      	mov	r0, r6
 8019174:	4639      	mov	r1, r7
 8019176:	f7ee fc87 	bl	8007a88 <__aeabi_dcmpeq>
 801917a:	b108      	cbz	r0, 8019180 <__cvt+0x7c>
 801917c:	f8cd 900c 	str.w	r9, [sp, #12]
 8019180:	2230      	movs	r2, #48	@ 0x30
 8019182:	9b03      	ldr	r3, [sp, #12]
 8019184:	454b      	cmp	r3, r9
 8019186:	d31e      	bcc.n	80191c6 <__cvt+0xc2>
 8019188:	9b03      	ldr	r3, [sp, #12]
 801918a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801918c:	1b5b      	subs	r3, r3, r5
 801918e:	4628      	mov	r0, r5
 8019190:	6013      	str	r3, [r2, #0]
 8019192:	b004      	add	sp, #16
 8019194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019198:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801919c:	eb00 0904 	add.w	r9, r0, r4
 80191a0:	d1e5      	bne.n	801916e <__cvt+0x6a>
 80191a2:	7803      	ldrb	r3, [r0, #0]
 80191a4:	2b30      	cmp	r3, #48	@ 0x30
 80191a6:	d10a      	bne.n	80191be <__cvt+0xba>
 80191a8:	2200      	movs	r2, #0
 80191aa:	2300      	movs	r3, #0
 80191ac:	4630      	mov	r0, r6
 80191ae:	4639      	mov	r1, r7
 80191b0:	f7ee fc6a 	bl	8007a88 <__aeabi_dcmpeq>
 80191b4:	b918      	cbnz	r0, 80191be <__cvt+0xba>
 80191b6:	f1c4 0401 	rsb	r4, r4, #1
 80191ba:	f8ca 4000 	str.w	r4, [sl]
 80191be:	f8da 3000 	ldr.w	r3, [sl]
 80191c2:	4499      	add	r9, r3
 80191c4:	e7d3      	b.n	801916e <__cvt+0x6a>
 80191c6:	1c59      	adds	r1, r3, #1
 80191c8:	9103      	str	r1, [sp, #12]
 80191ca:	701a      	strb	r2, [r3, #0]
 80191cc:	e7d9      	b.n	8019182 <__cvt+0x7e>

080191ce <__exponent>:
 80191ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80191d0:	2900      	cmp	r1, #0
 80191d2:	bfba      	itte	lt
 80191d4:	4249      	neglt	r1, r1
 80191d6:	232d      	movlt	r3, #45	@ 0x2d
 80191d8:	232b      	movge	r3, #43	@ 0x2b
 80191da:	2909      	cmp	r1, #9
 80191dc:	7002      	strb	r2, [r0, #0]
 80191de:	7043      	strb	r3, [r0, #1]
 80191e0:	dd29      	ble.n	8019236 <__exponent+0x68>
 80191e2:	f10d 0307 	add.w	r3, sp, #7
 80191e6:	461d      	mov	r5, r3
 80191e8:	270a      	movs	r7, #10
 80191ea:	461a      	mov	r2, r3
 80191ec:	fbb1 f6f7 	udiv	r6, r1, r7
 80191f0:	fb07 1416 	mls	r4, r7, r6, r1
 80191f4:	3430      	adds	r4, #48	@ 0x30
 80191f6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80191fa:	460c      	mov	r4, r1
 80191fc:	2c63      	cmp	r4, #99	@ 0x63
 80191fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8019202:	4631      	mov	r1, r6
 8019204:	dcf1      	bgt.n	80191ea <__exponent+0x1c>
 8019206:	3130      	adds	r1, #48	@ 0x30
 8019208:	1e94      	subs	r4, r2, #2
 801920a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801920e:	1c41      	adds	r1, r0, #1
 8019210:	4623      	mov	r3, r4
 8019212:	42ab      	cmp	r3, r5
 8019214:	d30a      	bcc.n	801922c <__exponent+0x5e>
 8019216:	f10d 0309 	add.w	r3, sp, #9
 801921a:	1a9b      	subs	r3, r3, r2
 801921c:	42ac      	cmp	r4, r5
 801921e:	bf88      	it	hi
 8019220:	2300      	movhi	r3, #0
 8019222:	3302      	adds	r3, #2
 8019224:	4403      	add	r3, r0
 8019226:	1a18      	subs	r0, r3, r0
 8019228:	b003      	add	sp, #12
 801922a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801922c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8019230:	f801 6f01 	strb.w	r6, [r1, #1]!
 8019234:	e7ed      	b.n	8019212 <__exponent+0x44>
 8019236:	2330      	movs	r3, #48	@ 0x30
 8019238:	3130      	adds	r1, #48	@ 0x30
 801923a:	7083      	strb	r3, [r0, #2]
 801923c:	70c1      	strb	r1, [r0, #3]
 801923e:	1d03      	adds	r3, r0, #4
 8019240:	e7f1      	b.n	8019226 <__exponent+0x58>
	...

08019244 <_printf_float>:
 8019244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019248:	b08d      	sub	sp, #52	@ 0x34
 801924a:	460c      	mov	r4, r1
 801924c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8019250:	4616      	mov	r6, r2
 8019252:	461f      	mov	r7, r3
 8019254:	4605      	mov	r5, r0
 8019256:	f000 fff3 	bl	801a240 <_localeconv_r>
 801925a:	6803      	ldr	r3, [r0, #0]
 801925c:	9304      	str	r3, [sp, #16]
 801925e:	4618      	mov	r0, r3
 8019260:	f7ed ffe6 	bl	8007230 <strlen>
 8019264:	2300      	movs	r3, #0
 8019266:	930a      	str	r3, [sp, #40]	@ 0x28
 8019268:	f8d8 3000 	ldr.w	r3, [r8]
 801926c:	9005      	str	r0, [sp, #20]
 801926e:	3307      	adds	r3, #7
 8019270:	f023 0307 	bic.w	r3, r3, #7
 8019274:	f103 0208 	add.w	r2, r3, #8
 8019278:	f894 a018 	ldrb.w	sl, [r4, #24]
 801927c:	f8d4 b000 	ldr.w	fp, [r4]
 8019280:	f8c8 2000 	str.w	r2, [r8]
 8019284:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019288:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801928c:	9307      	str	r3, [sp, #28]
 801928e:	f8cd 8018 	str.w	r8, [sp, #24]
 8019292:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8019296:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801929a:	4b9c      	ldr	r3, [pc, #624]	@ (801950c <_printf_float+0x2c8>)
 801929c:	f04f 32ff 	mov.w	r2, #4294967295
 80192a0:	f7ee fc24 	bl	8007aec <__aeabi_dcmpun>
 80192a4:	bb70      	cbnz	r0, 8019304 <_printf_float+0xc0>
 80192a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80192aa:	4b98      	ldr	r3, [pc, #608]	@ (801950c <_printf_float+0x2c8>)
 80192ac:	f04f 32ff 	mov.w	r2, #4294967295
 80192b0:	f7ee fbfe 	bl	8007ab0 <__aeabi_dcmple>
 80192b4:	bb30      	cbnz	r0, 8019304 <_printf_float+0xc0>
 80192b6:	2200      	movs	r2, #0
 80192b8:	2300      	movs	r3, #0
 80192ba:	4640      	mov	r0, r8
 80192bc:	4649      	mov	r1, r9
 80192be:	f7ee fbed 	bl	8007a9c <__aeabi_dcmplt>
 80192c2:	b110      	cbz	r0, 80192ca <_printf_float+0x86>
 80192c4:	232d      	movs	r3, #45	@ 0x2d
 80192c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80192ca:	4a91      	ldr	r2, [pc, #580]	@ (8019510 <_printf_float+0x2cc>)
 80192cc:	4b91      	ldr	r3, [pc, #580]	@ (8019514 <_printf_float+0x2d0>)
 80192ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80192d2:	bf94      	ite	ls
 80192d4:	4690      	movls	r8, r2
 80192d6:	4698      	movhi	r8, r3
 80192d8:	2303      	movs	r3, #3
 80192da:	6123      	str	r3, [r4, #16]
 80192dc:	f02b 0304 	bic.w	r3, fp, #4
 80192e0:	6023      	str	r3, [r4, #0]
 80192e2:	f04f 0900 	mov.w	r9, #0
 80192e6:	9700      	str	r7, [sp, #0]
 80192e8:	4633      	mov	r3, r6
 80192ea:	aa0b      	add	r2, sp, #44	@ 0x2c
 80192ec:	4621      	mov	r1, r4
 80192ee:	4628      	mov	r0, r5
 80192f0:	f000 f9d2 	bl	8019698 <_printf_common>
 80192f4:	3001      	adds	r0, #1
 80192f6:	f040 808d 	bne.w	8019414 <_printf_float+0x1d0>
 80192fa:	f04f 30ff 	mov.w	r0, #4294967295
 80192fe:	b00d      	add	sp, #52	@ 0x34
 8019300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019304:	4642      	mov	r2, r8
 8019306:	464b      	mov	r3, r9
 8019308:	4640      	mov	r0, r8
 801930a:	4649      	mov	r1, r9
 801930c:	f7ee fbee 	bl	8007aec <__aeabi_dcmpun>
 8019310:	b140      	cbz	r0, 8019324 <_printf_float+0xe0>
 8019312:	464b      	mov	r3, r9
 8019314:	2b00      	cmp	r3, #0
 8019316:	bfbc      	itt	lt
 8019318:	232d      	movlt	r3, #45	@ 0x2d
 801931a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801931e:	4a7e      	ldr	r2, [pc, #504]	@ (8019518 <_printf_float+0x2d4>)
 8019320:	4b7e      	ldr	r3, [pc, #504]	@ (801951c <_printf_float+0x2d8>)
 8019322:	e7d4      	b.n	80192ce <_printf_float+0x8a>
 8019324:	6863      	ldr	r3, [r4, #4]
 8019326:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801932a:	9206      	str	r2, [sp, #24]
 801932c:	1c5a      	adds	r2, r3, #1
 801932e:	d13b      	bne.n	80193a8 <_printf_float+0x164>
 8019330:	2306      	movs	r3, #6
 8019332:	6063      	str	r3, [r4, #4]
 8019334:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8019338:	2300      	movs	r3, #0
 801933a:	6022      	str	r2, [r4, #0]
 801933c:	9303      	str	r3, [sp, #12]
 801933e:	ab0a      	add	r3, sp, #40	@ 0x28
 8019340:	e9cd a301 	strd	sl, r3, [sp, #4]
 8019344:	ab09      	add	r3, sp, #36	@ 0x24
 8019346:	9300      	str	r3, [sp, #0]
 8019348:	6861      	ldr	r1, [r4, #4]
 801934a:	ec49 8b10 	vmov	d0, r8, r9
 801934e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8019352:	4628      	mov	r0, r5
 8019354:	f7ff fed6 	bl	8019104 <__cvt>
 8019358:	9b06      	ldr	r3, [sp, #24]
 801935a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801935c:	2b47      	cmp	r3, #71	@ 0x47
 801935e:	4680      	mov	r8, r0
 8019360:	d129      	bne.n	80193b6 <_printf_float+0x172>
 8019362:	1cc8      	adds	r0, r1, #3
 8019364:	db02      	blt.n	801936c <_printf_float+0x128>
 8019366:	6863      	ldr	r3, [r4, #4]
 8019368:	4299      	cmp	r1, r3
 801936a:	dd41      	ble.n	80193f0 <_printf_float+0x1ac>
 801936c:	f1aa 0a02 	sub.w	sl, sl, #2
 8019370:	fa5f fa8a 	uxtb.w	sl, sl
 8019374:	3901      	subs	r1, #1
 8019376:	4652      	mov	r2, sl
 8019378:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801937c:	9109      	str	r1, [sp, #36]	@ 0x24
 801937e:	f7ff ff26 	bl	80191ce <__exponent>
 8019382:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019384:	1813      	adds	r3, r2, r0
 8019386:	2a01      	cmp	r2, #1
 8019388:	4681      	mov	r9, r0
 801938a:	6123      	str	r3, [r4, #16]
 801938c:	dc02      	bgt.n	8019394 <_printf_float+0x150>
 801938e:	6822      	ldr	r2, [r4, #0]
 8019390:	07d2      	lsls	r2, r2, #31
 8019392:	d501      	bpl.n	8019398 <_printf_float+0x154>
 8019394:	3301      	adds	r3, #1
 8019396:	6123      	str	r3, [r4, #16]
 8019398:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801939c:	2b00      	cmp	r3, #0
 801939e:	d0a2      	beq.n	80192e6 <_printf_float+0xa2>
 80193a0:	232d      	movs	r3, #45	@ 0x2d
 80193a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80193a6:	e79e      	b.n	80192e6 <_printf_float+0xa2>
 80193a8:	9a06      	ldr	r2, [sp, #24]
 80193aa:	2a47      	cmp	r2, #71	@ 0x47
 80193ac:	d1c2      	bne.n	8019334 <_printf_float+0xf0>
 80193ae:	2b00      	cmp	r3, #0
 80193b0:	d1c0      	bne.n	8019334 <_printf_float+0xf0>
 80193b2:	2301      	movs	r3, #1
 80193b4:	e7bd      	b.n	8019332 <_printf_float+0xee>
 80193b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80193ba:	d9db      	bls.n	8019374 <_printf_float+0x130>
 80193bc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80193c0:	d118      	bne.n	80193f4 <_printf_float+0x1b0>
 80193c2:	2900      	cmp	r1, #0
 80193c4:	6863      	ldr	r3, [r4, #4]
 80193c6:	dd0b      	ble.n	80193e0 <_printf_float+0x19c>
 80193c8:	6121      	str	r1, [r4, #16]
 80193ca:	b913      	cbnz	r3, 80193d2 <_printf_float+0x18e>
 80193cc:	6822      	ldr	r2, [r4, #0]
 80193ce:	07d0      	lsls	r0, r2, #31
 80193d0:	d502      	bpl.n	80193d8 <_printf_float+0x194>
 80193d2:	3301      	adds	r3, #1
 80193d4:	440b      	add	r3, r1
 80193d6:	6123      	str	r3, [r4, #16]
 80193d8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80193da:	f04f 0900 	mov.w	r9, #0
 80193de:	e7db      	b.n	8019398 <_printf_float+0x154>
 80193e0:	b913      	cbnz	r3, 80193e8 <_printf_float+0x1a4>
 80193e2:	6822      	ldr	r2, [r4, #0]
 80193e4:	07d2      	lsls	r2, r2, #31
 80193e6:	d501      	bpl.n	80193ec <_printf_float+0x1a8>
 80193e8:	3302      	adds	r3, #2
 80193ea:	e7f4      	b.n	80193d6 <_printf_float+0x192>
 80193ec:	2301      	movs	r3, #1
 80193ee:	e7f2      	b.n	80193d6 <_printf_float+0x192>
 80193f0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80193f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80193f6:	4299      	cmp	r1, r3
 80193f8:	db05      	blt.n	8019406 <_printf_float+0x1c2>
 80193fa:	6823      	ldr	r3, [r4, #0]
 80193fc:	6121      	str	r1, [r4, #16]
 80193fe:	07d8      	lsls	r0, r3, #31
 8019400:	d5ea      	bpl.n	80193d8 <_printf_float+0x194>
 8019402:	1c4b      	adds	r3, r1, #1
 8019404:	e7e7      	b.n	80193d6 <_printf_float+0x192>
 8019406:	2900      	cmp	r1, #0
 8019408:	bfd4      	ite	le
 801940a:	f1c1 0202 	rsble	r2, r1, #2
 801940e:	2201      	movgt	r2, #1
 8019410:	4413      	add	r3, r2
 8019412:	e7e0      	b.n	80193d6 <_printf_float+0x192>
 8019414:	6823      	ldr	r3, [r4, #0]
 8019416:	055a      	lsls	r2, r3, #21
 8019418:	d407      	bmi.n	801942a <_printf_float+0x1e6>
 801941a:	6923      	ldr	r3, [r4, #16]
 801941c:	4642      	mov	r2, r8
 801941e:	4631      	mov	r1, r6
 8019420:	4628      	mov	r0, r5
 8019422:	47b8      	blx	r7
 8019424:	3001      	adds	r0, #1
 8019426:	d12b      	bne.n	8019480 <_printf_float+0x23c>
 8019428:	e767      	b.n	80192fa <_printf_float+0xb6>
 801942a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801942e:	f240 80dd 	bls.w	80195ec <_printf_float+0x3a8>
 8019432:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8019436:	2200      	movs	r2, #0
 8019438:	2300      	movs	r3, #0
 801943a:	f7ee fb25 	bl	8007a88 <__aeabi_dcmpeq>
 801943e:	2800      	cmp	r0, #0
 8019440:	d033      	beq.n	80194aa <_printf_float+0x266>
 8019442:	4a37      	ldr	r2, [pc, #220]	@ (8019520 <_printf_float+0x2dc>)
 8019444:	2301      	movs	r3, #1
 8019446:	4631      	mov	r1, r6
 8019448:	4628      	mov	r0, r5
 801944a:	47b8      	blx	r7
 801944c:	3001      	adds	r0, #1
 801944e:	f43f af54 	beq.w	80192fa <_printf_float+0xb6>
 8019452:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8019456:	4543      	cmp	r3, r8
 8019458:	db02      	blt.n	8019460 <_printf_float+0x21c>
 801945a:	6823      	ldr	r3, [r4, #0]
 801945c:	07d8      	lsls	r0, r3, #31
 801945e:	d50f      	bpl.n	8019480 <_printf_float+0x23c>
 8019460:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019464:	4631      	mov	r1, r6
 8019466:	4628      	mov	r0, r5
 8019468:	47b8      	blx	r7
 801946a:	3001      	adds	r0, #1
 801946c:	f43f af45 	beq.w	80192fa <_printf_float+0xb6>
 8019470:	f04f 0900 	mov.w	r9, #0
 8019474:	f108 38ff 	add.w	r8, r8, #4294967295
 8019478:	f104 0a1a 	add.w	sl, r4, #26
 801947c:	45c8      	cmp	r8, r9
 801947e:	dc09      	bgt.n	8019494 <_printf_float+0x250>
 8019480:	6823      	ldr	r3, [r4, #0]
 8019482:	079b      	lsls	r3, r3, #30
 8019484:	f100 8103 	bmi.w	801968e <_printf_float+0x44a>
 8019488:	68e0      	ldr	r0, [r4, #12]
 801948a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801948c:	4298      	cmp	r0, r3
 801948e:	bfb8      	it	lt
 8019490:	4618      	movlt	r0, r3
 8019492:	e734      	b.n	80192fe <_printf_float+0xba>
 8019494:	2301      	movs	r3, #1
 8019496:	4652      	mov	r2, sl
 8019498:	4631      	mov	r1, r6
 801949a:	4628      	mov	r0, r5
 801949c:	47b8      	blx	r7
 801949e:	3001      	adds	r0, #1
 80194a0:	f43f af2b 	beq.w	80192fa <_printf_float+0xb6>
 80194a4:	f109 0901 	add.w	r9, r9, #1
 80194a8:	e7e8      	b.n	801947c <_printf_float+0x238>
 80194aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80194ac:	2b00      	cmp	r3, #0
 80194ae:	dc39      	bgt.n	8019524 <_printf_float+0x2e0>
 80194b0:	4a1b      	ldr	r2, [pc, #108]	@ (8019520 <_printf_float+0x2dc>)
 80194b2:	2301      	movs	r3, #1
 80194b4:	4631      	mov	r1, r6
 80194b6:	4628      	mov	r0, r5
 80194b8:	47b8      	blx	r7
 80194ba:	3001      	adds	r0, #1
 80194bc:	f43f af1d 	beq.w	80192fa <_printf_float+0xb6>
 80194c0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80194c4:	ea59 0303 	orrs.w	r3, r9, r3
 80194c8:	d102      	bne.n	80194d0 <_printf_float+0x28c>
 80194ca:	6823      	ldr	r3, [r4, #0]
 80194cc:	07d9      	lsls	r1, r3, #31
 80194ce:	d5d7      	bpl.n	8019480 <_printf_float+0x23c>
 80194d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80194d4:	4631      	mov	r1, r6
 80194d6:	4628      	mov	r0, r5
 80194d8:	47b8      	blx	r7
 80194da:	3001      	adds	r0, #1
 80194dc:	f43f af0d 	beq.w	80192fa <_printf_float+0xb6>
 80194e0:	f04f 0a00 	mov.w	sl, #0
 80194e4:	f104 0b1a 	add.w	fp, r4, #26
 80194e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80194ea:	425b      	negs	r3, r3
 80194ec:	4553      	cmp	r3, sl
 80194ee:	dc01      	bgt.n	80194f4 <_printf_float+0x2b0>
 80194f0:	464b      	mov	r3, r9
 80194f2:	e793      	b.n	801941c <_printf_float+0x1d8>
 80194f4:	2301      	movs	r3, #1
 80194f6:	465a      	mov	r2, fp
 80194f8:	4631      	mov	r1, r6
 80194fa:	4628      	mov	r0, r5
 80194fc:	47b8      	blx	r7
 80194fe:	3001      	adds	r0, #1
 8019500:	f43f aefb 	beq.w	80192fa <_printf_float+0xb6>
 8019504:	f10a 0a01 	add.w	sl, sl, #1
 8019508:	e7ee      	b.n	80194e8 <_printf_float+0x2a4>
 801950a:	bf00      	nop
 801950c:	7fefffff 	.word	0x7fefffff
 8019510:	0801e240 	.word	0x0801e240
 8019514:	0801e244 	.word	0x0801e244
 8019518:	0801e248 	.word	0x0801e248
 801951c:	0801e24c 	.word	0x0801e24c
 8019520:	0801e250 	.word	0x0801e250
 8019524:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8019526:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801952a:	4553      	cmp	r3, sl
 801952c:	bfa8      	it	ge
 801952e:	4653      	movge	r3, sl
 8019530:	2b00      	cmp	r3, #0
 8019532:	4699      	mov	r9, r3
 8019534:	dc36      	bgt.n	80195a4 <_printf_float+0x360>
 8019536:	f04f 0b00 	mov.w	fp, #0
 801953a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801953e:	f104 021a 	add.w	r2, r4, #26
 8019542:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8019544:	9306      	str	r3, [sp, #24]
 8019546:	eba3 0309 	sub.w	r3, r3, r9
 801954a:	455b      	cmp	r3, fp
 801954c:	dc31      	bgt.n	80195b2 <_printf_float+0x36e>
 801954e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019550:	459a      	cmp	sl, r3
 8019552:	dc3a      	bgt.n	80195ca <_printf_float+0x386>
 8019554:	6823      	ldr	r3, [r4, #0]
 8019556:	07da      	lsls	r2, r3, #31
 8019558:	d437      	bmi.n	80195ca <_printf_float+0x386>
 801955a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801955c:	ebaa 0903 	sub.w	r9, sl, r3
 8019560:	9b06      	ldr	r3, [sp, #24]
 8019562:	ebaa 0303 	sub.w	r3, sl, r3
 8019566:	4599      	cmp	r9, r3
 8019568:	bfa8      	it	ge
 801956a:	4699      	movge	r9, r3
 801956c:	f1b9 0f00 	cmp.w	r9, #0
 8019570:	dc33      	bgt.n	80195da <_printf_float+0x396>
 8019572:	f04f 0800 	mov.w	r8, #0
 8019576:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801957a:	f104 0b1a 	add.w	fp, r4, #26
 801957e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019580:	ebaa 0303 	sub.w	r3, sl, r3
 8019584:	eba3 0309 	sub.w	r3, r3, r9
 8019588:	4543      	cmp	r3, r8
 801958a:	f77f af79 	ble.w	8019480 <_printf_float+0x23c>
 801958e:	2301      	movs	r3, #1
 8019590:	465a      	mov	r2, fp
 8019592:	4631      	mov	r1, r6
 8019594:	4628      	mov	r0, r5
 8019596:	47b8      	blx	r7
 8019598:	3001      	adds	r0, #1
 801959a:	f43f aeae 	beq.w	80192fa <_printf_float+0xb6>
 801959e:	f108 0801 	add.w	r8, r8, #1
 80195a2:	e7ec      	b.n	801957e <_printf_float+0x33a>
 80195a4:	4642      	mov	r2, r8
 80195a6:	4631      	mov	r1, r6
 80195a8:	4628      	mov	r0, r5
 80195aa:	47b8      	blx	r7
 80195ac:	3001      	adds	r0, #1
 80195ae:	d1c2      	bne.n	8019536 <_printf_float+0x2f2>
 80195b0:	e6a3      	b.n	80192fa <_printf_float+0xb6>
 80195b2:	2301      	movs	r3, #1
 80195b4:	4631      	mov	r1, r6
 80195b6:	4628      	mov	r0, r5
 80195b8:	9206      	str	r2, [sp, #24]
 80195ba:	47b8      	blx	r7
 80195bc:	3001      	adds	r0, #1
 80195be:	f43f ae9c 	beq.w	80192fa <_printf_float+0xb6>
 80195c2:	9a06      	ldr	r2, [sp, #24]
 80195c4:	f10b 0b01 	add.w	fp, fp, #1
 80195c8:	e7bb      	b.n	8019542 <_printf_float+0x2fe>
 80195ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80195ce:	4631      	mov	r1, r6
 80195d0:	4628      	mov	r0, r5
 80195d2:	47b8      	blx	r7
 80195d4:	3001      	adds	r0, #1
 80195d6:	d1c0      	bne.n	801955a <_printf_float+0x316>
 80195d8:	e68f      	b.n	80192fa <_printf_float+0xb6>
 80195da:	9a06      	ldr	r2, [sp, #24]
 80195dc:	464b      	mov	r3, r9
 80195de:	4442      	add	r2, r8
 80195e0:	4631      	mov	r1, r6
 80195e2:	4628      	mov	r0, r5
 80195e4:	47b8      	blx	r7
 80195e6:	3001      	adds	r0, #1
 80195e8:	d1c3      	bne.n	8019572 <_printf_float+0x32e>
 80195ea:	e686      	b.n	80192fa <_printf_float+0xb6>
 80195ec:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80195f0:	f1ba 0f01 	cmp.w	sl, #1
 80195f4:	dc01      	bgt.n	80195fa <_printf_float+0x3b6>
 80195f6:	07db      	lsls	r3, r3, #31
 80195f8:	d536      	bpl.n	8019668 <_printf_float+0x424>
 80195fa:	2301      	movs	r3, #1
 80195fc:	4642      	mov	r2, r8
 80195fe:	4631      	mov	r1, r6
 8019600:	4628      	mov	r0, r5
 8019602:	47b8      	blx	r7
 8019604:	3001      	adds	r0, #1
 8019606:	f43f ae78 	beq.w	80192fa <_printf_float+0xb6>
 801960a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801960e:	4631      	mov	r1, r6
 8019610:	4628      	mov	r0, r5
 8019612:	47b8      	blx	r7
 8019614:	3001      	adds	r0, #1
 8019616:	f43f ae70 	beq.w	80192fa <_printf_float+0xb6>
 801961a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801961e:	2200      	movs	r2, #0
 8019620:	2300      	movs	r3, #0
 8019622:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019626:	f7ee fa2f 	bl	8007a88 <__aeabi_dcmpeq>
 801962a:	b9c0      	cbnz	r0, 801965e <_printf_float+0x41a>
 801962c:	4653      	mov	r3, sl
 801962e:	f108 0201 	add.w	r2, r8, #1
 8019632:	4631      	mov	r1, r6
 8019634:	4628      	mov	r0, r5
 8019636:	47b8      	blx	r7
 8019638:	3001      	adds	r0, #1
 801963a:	d10c      	bne.n	8019656 <_printf_float+0x412>
 801963c:	e65d      	b.n	80192fa <_printf_float+0xb6>
 801963e:	2301      	movs	r3, #1
 8019640:	465a      	mov	r2, fp
 8019642:	4631      	mov	r1, r6
 8019644:	4628      	mov	r0, r5
 8019646:	47b8      	blx	r7
 8019648:	3001      	adds	r0, #1
 801964a:	f43f ae56 	beq.w	80192fa <_printf_float+0xb6>
 801964e:	f108 0801 	add.w	r8, r8, #1
 8019652:	45d0      	cmp	r8, sl
 8019654:	dbf3      	blt.n	801963e <_printf_float+0x3fa>
 8019656:	464b      	mov	r3, r9
 8019658:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801965c:	e6df      	b.n	801941e <_printf_float+0x1da>
 801965e:	f04f 0800 	mov.w	r8, #0
 8019662:	f104 0b1a 	add.w	fp, r4, #26
 8019666:	e7f4      	b.n	8019652 <_printf_float+0x40e>
 8019668:	2301      	movs	r3, #1
 801966a:	4642      	mov	r2, r8
 801966c:	e7e1      	b.n	8019632 <_printf_float+0x3ee>
 801966e:	2301      	movs	r3, #1
 8019670:	464a      	mov	r2, r9
 8019672:	4631      	mov	r1, r6
 8019674:	4628      	mov	r0, r5
 8019676:	47b8      	blx	r7
 8019678:	3001      	adds	r0, #1
 801967a:	f43f ae3e 	beq.w	80192fa <_printf_float+0xb6>
 801967e:	f108 0801 	add.w	r8, r8, #1
 8019682:	68e3      	ldr	r3, [r4, #12]
 8019684:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8019686:	1a5b      	subs	r3, r3, r1
 8019688:	4543      	cmp	r3, r8
 801968a:	dcf0      	bgt.n	801966e <_printf_float+0x42a>
 801968c:	e6fc      	b.n	8019488 <_printf_float+0x244>
 801968e:	f04f 0800 	mov.w	r8, #0
 8019692:	f104 0919 	add.w	r9, r4, #25
 8019696:	e7f4      	b.n	8019682 <_printf_float+0x43e>

08019698 <_printf_common>:
 8019698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801969c:	4616      	mov	r6, r2
 801969e:	4698      	mov	r8, r3
 80196a0:	688a      	ldr	r2, [r1, #8]
 80196a2:	690b      	ldr	r3, [r1, #16]
 80196a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80196a8:	4293      	cmp	r3, r2
 80196aa:	bfb8      	it	lt
 80196ac:	4613      	movlt	r3, r2
 80196ae:	6033      	str	r3, [r6, #0]
 80196b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80196b4:	4607      	mov	r7, r0
 80196b6:	460c      	mov	r4, r1
 80196b8:	b10a      	cbz	r2, 80196be <_printf_common+0x26>
 80196ba:	3301      	adds	r3, #1
 80196bc:	6033      	str	r3, [r6, #0]
 80196be:	6823      	ldr	r3, [r4, #0]
 80196c0:	0699      	lsls	r1, r3, #26
 80196c2:	bf42      	ittt	mi
 80196c4:	6833      	ldrmi	r3, [r6, #0]
 80196c6:	3302      	addmi	r3, #2
 80196c8:	6033      	strmi	r3, [r6, #0]
 80196ca:	6825      	ldr	r5, [r4, #0]
 80196cc:	f015 0506 	ands.w	r5, r5, #6
 80196d0:	d106      	bne.n	80196e0 <_printf_common+0x48>
 80196d2:	f104 0a19 	add.w	sl, r4, #25
 80196d6:	68e3      	ldr	r3, [r4, #12]
 80196d8:	6832      	ldr	r2, [r6, #0]
 80196da:	1a9b      	subs	r3, r3, r2
 80196dc:	42ab      	cmp	r3, r5
 80196de:	dc26      	bgt.n	801972e <_printf_common+0x96>
 80196e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80196e4:	6822      	ldr	r2, [r4, #0]
 80196e6:	3b00      	subs	r3, #0
 80196e8:	bf18      	it	ne
 80196ea:	2301      	movne	r3, #1
 80196ec:	0692      	lsls	r2, r2, #26
 80196ee:	d42b      	bmi.n	8019748 <_printf_common+0xb0>
 80196f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80196f4:	4641      	mov	r1, r8
 80196f6:	4638      	mov	r0, r7
 80196f8:	47c8      	blx	r9
 80196fa:	3001      	adds	r0, #1
 80196fc:	d01e      	beq.n	801973c <_printf_common+0xa4>
 80196fe:	6823      	ldr	r3, [r4, #0]
 8019700:	6922      	ldr	r2, [r4, #16]
 8019702:	f003 0306 	and.w	r3, r3, #6
 8019706:	2b04      	cmp	r3, #4
 8019708:	bf02      	ittt	eq
 801970a:	68e5      	ldreq	r5, [r4, #12]
 801970c:	6833      	ldreq	r3, [r6, #0]
 801970e:	1aed      	subeq	r5, r5, r3
 8019710:	68a3      	ldr	r3, [r4, #8]
 8019712:	bf0c      	ite	eq
 8019714:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019718:	2500      	movne	r5, #0
 801971a:	4293      	cmp	r3, r2
 801971c:	bfc4      	itt	gt
 801971e:	1a9b      	subgt	r3, r3, r2
 8019720:	18ed      	addgt	r5, r5, r3
 8019722:	2600      	movs	r6, #0
 8019724:	341a      	adds	r4, #26
 8019726:	42b5      	cmp	r5, r6
 8019728:	d11a      	bne.n	8019760 <_printf_common+0xc8>
 801972a:	2000      	movs	r0, #0
 801972c:	e008      	b.n	8019740 <_printf_common+0xa8>
 801972e:	2301      	movs	r3, #1
 8019730:	4652      	mov	r2, sl
 8019732:	4641      	mov	r1, r8
 8019734:	4638      	mov	r0, r7
 8019736:	47c8      	blx	r9
 8019738:	3001      	adds	r0, #1
 801973a:	d103      	bne.n	8019744 <_printf_common+0xac>
 801973c:	f04f 30ff 	mov.w	r0, #4294967295
 8019740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019744:	3501      	adds	r5, #1
 8019746:	e7c6      	b.n	80196d6 <_printf_common+0x3e>
 8019748:	18e1      	adds	r1, r4, r3
 801974a:	1c5a      	adds	r2, r3, #1
 801974c:	2030      	movs	r0, #48	@ 0x30
 801974e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019752:	4422      	add	r2, r4
 8019754:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019758:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801975c:	3302      	adds	r3, #2
 801975e:	e7c7      	b.n	80196f0 <_printf_common+0x58>
 8019760:	2301      	movs	r3, #1
 8019762:	4622      	mov	r2, r4
 8019764:	4641      	mov	r1, r8
 8019766:	4638      	mov	r0, r7
 8019768:	47c8      	blx	r9
 801976a:	3001      	adds	r0, #1
 801976c:	d0e6      	beq.n	801973c <_printf_common+0xa4>
 801976e:	3601      	adds	r6, #1
 8019770:	e7d9      	b.n	8019726 <_printf_common+0x8e>
	...

08019774 <_printf_i>:
 8019774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019778:	7e0f      	ldrb	r7, [r1, #24]
 801977a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801977c:	2f78      	cmp	r7, #120	@ 0x78
 801977e:	4691      	mov	r9, r2
 8019780:	4680      	mov	r8, r0
 8019782:	460c      	mov	r4, r1
 8019784:	469a      	mov	sl, r3
 8019786:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801978a:	d807      	bhi.n	801979c <_printf_i+0x28>
 801978c:	2f62      	cmp	r7, #98	@ 0x62
 801978e:	d80a      	bhi.n	80197a6 <_printf_i+0x32>
 8019790:	2f00      	cmp	r7, #0
 8019792:	f000 80d2 	beq.w	801993a <_printf_i+0x1c6>
 8019796:	2f58      	cmp	r7, #88	@ 0x58
 8019798:	f000 80b9 	beq.w	801990e <_printf_i+0x19a>
 801979c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80197a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80197a4:	e03a      	b.n	801981c <_printf_i+0xa8>
 80197a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80197aa:	2b15      	cmp	r3, #21
 80197ac:	d8f6      	bhi.n	801979c <_printf_i+0x28>
 80197ae:	a101      	add	r1, pc, #4	@ (adr r1, 80197b4 <_printf_i+0x40>)
 80197b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80197b4:	0801980d 	.word	0x0801980d
 80197b8:	08019821 	.word	0x08019821
 80197bc:	0801979d 	.word	0x0801979d
 80197c0:	0801979d 	.word	0x0801979d
 80197c4:	0801979d 	.word	0x0801979d
 80197c8:	0801979d 	.word	0x0801979d
 80197cc:	08019821 	.word	0x08019821
 80197d0:	0801979d 	.word	0x0801979d
 80197d4:	0801979d 	.word	0x0801979d
 80197d8:	0801979d 	.word	0x0801979d
 80197dc:	0801979d 	.word	0x0801979d
 80197e0:	08019921 	.word	0x08019921
 80197e4:	0801984b 	.word	0x0801984b
 80197e8:	080198db 	.word	0x080198db
 80197ec:	0801979d 	.word	0x0801979d
 80197f0:	0801979d 	.word	0x0801979d
 80197f4:	08019943 	.word	0x08019943
 80197f8:	0801979d 	.word	0x0801979d
 80197fc:	0801984b 	.word	0x0801984b
 8019800:	0801979d 	.word	0x0801979d
 8019804:	0801979d 	.word	0x0801979d
 8019808:	080198e3 	.word	0x080198e3
 801980c:	6833      	ldr	r3, [r6, #0]
 801980e:	1d1a      	adds	r2, r3, #4
 8019810:	681b      	ldr	r3, [r3, #0]
 8019812:	6032      	str	r2, [r6, #0]
 8019814:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019818:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801981c:	2301      	movs	r3, #1
 801981e:	e09d      	b.n	801995c <_printf_i+0x1e8>
 8019820:	6833      	ldr	r3, [r6, #0]
 8019822:	6820      	ldr	r0, [r4, #0]
 8019824:	1d19      	adds	r1, r3, #4
 8019826:	6031      	str	r1, [r6, #0]
 8019828:	0606      	lsls	r6, r0, #24
 801982a:	d501      	bpl.n	8019830 <_printf_i+0xbc>
 801982c:	681d      	ldr	r5, [r3, #0]
 801982e:	e003      	b.n	8019838 <_printf_i+0xc4>
 8019830:	0645      	lsls	r5, r0, #25
 8019832:	d5fb      	bpl.n	801982c <_printf_i+0xb8>
 8019834:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019838:	2d00      	cmp	r5, #0
 801983a:	da03      	bge.n	8019844 <_printf_i+0xd0>
 801983c:	232d      	movs	r3, #45	@ 0x2d
 801983e:	426d      	negs	r5, r5
 8019840:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019844:	4859      	ldr	r0, [pc, #356]	@ (80199ac <_printf_i+0x238>)
 8019846:	230a      	movs	r3, #10
 8019848:	e011      	b.n	801986e <_printf_i+0xfa>
 801984a:	6821      	ldr	r1, [r4, #0]
 801984c:	6833      	ldr	r3, [r6, #0]
 801984e:	0608      	lsls	r0, r1, #24
 8019850:	f853 5b04 	ldr.w	r5, [r3], #4
 8019854:	d402      	bmi.n	801985c <_printf_i+0xe8>
 8019856:	0649      	lsls	r1, r1, #25
 8019858:	bf48      	it	mi
 801985a:	b2ad      	uxthmi	r5, r5
 801985c:	2f6f      	cmp	r7, #111	@ 0x6f
 801985e:	4853      	ldr	r0, [pc, #332]	@ (80199ac <_printf_i+0x238>)
 8019860:	6033      	str	r3, [r6, #0]
 8019862:	bf14      	ite	ne
 8019864:	230a      	movne	r3, #10
 8019866:	2308      	moveq	r3, #8
 8019868:	2100      	movs	r1, #0
 801986a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801986e:	6866      	ldr	r6, [r4, #4]
 8019870:	60a6      	str	r6, [r4, #8]
 8019872:	2e00      	cmp	r6, #0
 8019874:	bfa2      	ittt	ge
 8019876:	6821      	ldrge	r1, [r4, #0]
 8019878:	f021 0104 	bicge.w	r1, r1, #4
 801987c:	6021      	strge	r1, [r4, #0]
 801987e:	b90d      	cbnz	r5, 8019884 <_printf_i+0x110>
 8019880:	2e00      	cmp	r6, #0
 8019882:	d04b      	beq.n	801991c <_printf_i+0x1a8>
 8019884:	4616      	mov	r6, r2
 8019886:	fbb5 f1f3 	udiv	r1, r5, r3
 801988a:	fb03 5711 	mls	r7, r3, r1, r5
 801988e:	5dc7      	ldrb	r7, [r0, r7]
 8019890:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019894:	462f      	mov	r7, r5
 8019896:	42bb      	cmp	r3, r7
 8019898:	460d      	mov	r5, r1
 801989a:	d9f4      	bls.n	8019886 <_printf_i+0x112>
 801989c:	2b08      	cmp	r3, #8
 801989e:	d10b      	bne.n	80198b8 <_printf_i+0x144>
 80198a0:	6823      	ldr	r3, [r4, #0]
 80198a2:	07df      	lsls	r7, r3, #31
 80198a4:	d508      	bpl.n	80198b8 <_printf_i+0x144>
 80198a6:	6923      	ldr	r3, [r4, #16]
 80198a8:	6861      	ldr	r1, [r4, #4]
 80198aa:	4299      	cmp	r1, r3
 80198ac:	bfde      	ittt	le
 80198ae:	2330      	movle	r3, #48	@ 0x30
 80198b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80198b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80198b8:	1b92      	subs	r2, r2, r6
 80198ba:	6122      	str	r2, [r4, #16]
 80198bc:	f8cd a000 	str.w	sl, [sp]
 80198c0:	464b      	mov	r3, r9
 80198c2:	aa03      	add	r2, sp, #12
 80198c4:	4621      	mov	r1, r4
 80198c6:	4640      	mov	r0, r8
 80198c8:	f7ff fee6 	bl	8019698 <_printf_common>
 80198cc:	3001      	adds	r0, #1
 80198ce:	d14a      	bne.n	8019966 <_printf_i+0x1f2>
 80198d0:	f04f 30ff 	mov.w	r0, #4294967295
 80198d4:	b004      	add	sp, #16
 80198d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80198da:	6823      	ldr	r3, [r4, #0]
 80198dc:	f043 0320 	orr.w	r3, r3, #32
 80198e0:	6023      	str	r3, [r4, #0]
 80198e2:	4833      	ldr	r0, [pc, #204]	@ (80199b0 <_printf_i+0x23c>)
 80198e4:	2778      	movs	r7, #120	@ 0x78
 80198e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80198ea:	6823      	ldr	r3, [r4, #0]
 80198ec:	6831      	ldr	r1, [r6, #0]
 80198ee:	061f      	lsls	r7, r3, #24
 80198f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80198f4:	d402      	bmi.n	80198fc <_printf_i+0x188>
 80198f6:	065f      	lsls	r7, r3, #25
 80198f8:	bf48      	it	mi
 80198fa:	b2ad      	uxthmi	r5, r5
 80198fc:	6031      	str	r1, [r6, #0]
 80198fe:	07d9      	lsls	r1, r3, #31
 8019900:	bf44      	itt	mi
 8019902:	f043 0320 	orrmi.w	r3, r3, #32
 8019906:	6023      	strmi	r3, [r4, #0]
 8019908:	b11d      	cbz	r5, 8019912 <_printf_i+0x19e>
 801990a:	2310      	movs	r3, #16
 801990c:	e7ac      	b.n	8019868 <_printf_i+0xf4>
 801990e:	4827      	ldr	r0, [pc, #156]	@ (80199ac <_printf_i+0x238>)
 8019910:	e7e9      	b.n	80198e6 <_printf_i+0x172>
 8019912:	6823      	ldr	r3, [r4, #0]
 8019914:	f023 0320 	bic.w	r3, r3, #32
 8019918:	6023      	str	r3, [r4, #0]
 801991a:	e7f6      	b.n	801990a <_printf_i+0x196>
 801991c:	4616      	mov	r6, r2
 801991e:	e7bd      	b.n	801989c <_printf_i+0x128>
 8019920:	6833      	ldr	r3, [r6, #0]
 8019922:	6825      	ldr	r5, [r4, #0]
 8019924:	6961      	ldr	r1, [r4, #20]
 8019926:	1d18      	adds	r0, r3, #4
 8019928:	6030      	str	r0, [r6, #0]
 801992a:	062e      	lsls	r6, r5, #24
 801992c:	681b      	ldr	r3, [r3, #0]
 801992e:	d501      	bpl.n	8019934 <_printf_i+0x1c0>
 8019930:	6019      	str	r1, [r3, #0]
 8019932:	e002      	b.n	801993a <_printf_i+0x1c6>
 8019934:	0668      	lsls	r0, r5, #25
 8019936:	d5fb      	bpl.n	8019930 <_printf_i+0x1bc>
 8019938:	8019      	strh	r1, [r3, #0]
 801993a:	2300      	movs	r3, #0
 801993c:	6123      	str	r3, [r4, #16]
 801993e:	4616      	mov	r6, r2
 8019940:	e7bc      	b.n	80198bc <_printf_i+0x148>
 8019942:	6833      	ldr	r3, [r6, #0]
 8019944:	1d1a      	adds	r2, r3, #4
 8019946:	6032      	str	r2, [r6, #0]
 8019948:	681e      	ldr	r6, [r3, #0]
 801994a:	6862      	ldr	r2, [r4, #4]
 801994c:	2100      	movs	r1, #0
 801994e:	4630      	mov	r0, r6
 8019950:	f7ed fc1e 	bl	8007190 <memchr>
 8019954:	b108      	cbz	r0, 801995a <_printf_i+0x1e6>
 8019956:	1b80      	subs	r0, r0, r6
 8019958:	6060      	str	r0, [r4, #4]
 801995a:	6863      	ldr	r3, [r4, #4]
 801995c:	6123      	str	r3, [r4, #16]
 801995e:	2300      	movs	r3, #0
 8019960:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019964:	e7aa      	b.n	80198bc <_printf_i+0x148>
 8019966:	6923      	ldr	r3, [r4, #16]
 8019968:	4632      	mov	r2, r6
 801996a:	4649      	mov	r1, r9
 801996c:	4640      	mov	r0, r8
 801996e:	47d0      	blx	sl
 8019970:	3001      	adds	r0, #1
 8019972:	d0ad      	beq.n	80198d0 <_printf_i+0x15c>
 8019974:	6823      	ldr	r3, [r4, #0]
 8019976:	079b      	lsls	r3, r3, #30
 8019978:	d413      	bmi.n	80199a2 <_printf_i+0x22e>
 801997a:	68e0      	ldr	r0, [r4, #12]
 801997c:	9b03      	ldr	r3, [sp, #12]
 801997e:	4298      	cmp	r0, r3
 8019980:	bfb8      	it	lt
 8019982:	4618      	movlt	r0, r3
 8019984:	e7a6      	b.n	80198d4 <_printf_i+0x160>
 8019986:	2301      	movs	r3, #1
 8019988:	4632      	mov	r2, r6
 801998a:	4649      	mov	r1, r9
 801998c:	4640      	mov	r0, r8
 801998e:	47d0      	blx	sl
 8019990:	3001      	adds	r0, #1
 8019992:	d09d      	beq.n	80198d0 <_printf_i+0x15c>
 8019994:	3501      	adds	r5, #1
 8019996:	68e3      	ldr	r3, [r4, #12]
 8019998:	9903      	ldr	r1, [sp, #12]
 801999a:	1a5b      	subs	r3, r3, r1
 801999c:	42ab      	cmp	r3, r5
 801999e:	dcf2      	bgt.n	8019986 <_printf_i+0x212>
 80199a0:	e7eb      	b.n	801997a <_printf_i+0x206>
 80199a2:	2500      	movs	r5, #0
 80199a4:	f104 0619 	add.w	r6, r4, #25
 80199a8:	e7f5      	b.n	8019996 <_printf_i+0x222>
 80199aa:	bf00      	nop
 80199ac:	0801e252 	.word	0x0801e252
 80199b0:	0801e263 	.word	0x0801e263

080199b4 <_scanf_float>:
 80199b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199b8:	b087      	sub	sp, #28
 80199ba:	4617      	mov	r7, r2
 80199bc:	9303      	str	r3, [sp, #12]
 80199be:	688b      	ldr	r3, [r1, #8]
 80199c0:	1e5a      	subs	r2, r3, #1
 80199c2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80199c6:	bf81      	itttt	hi
 80199c8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80199cc:	eb03 0b05 	addhi.w	fp, r3, r5
 80199d0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80199d4:	608b      	strhi	r3, [r1, #8]
 80199d6:	680b      	ldr	r3, [r1, #0]
 80199d8:	460a      	mov	r2, r1
 80199da:	f04f 0500 	mov.w	r5, #0
 80199de:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80199e2:	f842 3b1c 	str.w	r3, [r2], #28
 80199e6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80199ea:	4680      	mov	r8, r0
 80199ec:	460c      	mov	r4, r1
 80199ee:	bf98      	it	ls
 80199f0:	f04f 0b00 	movls.w	fp, #0
 80199f4:	9201      	str	r2, [sp, #4]
 80199f6:	4616      	mov	r6, r2
 80199f8:	46aa      	mov	sl, r5
 80199fa:	46a9      	mov	r9, r5
 80199fc:	9502      	str	r5, [sp, #8]
 80199fe:	68a2      	ldr	r2, [r4, #8]
 8019a00:	b152      	cbz	r2, 8019a18 <_scanf_float+0x64>
 8019a02:	683b      	ldr	r3, [r7, #0]
 8019a04:	781b      	ldrb	r3, [r3, #0]
 8019a06:	2b4e      	cmp	r3, #78	@ 0x4e
 8019a08:	d864      	bhi.n	8019ad4 <_scanf_float+0x120>
 8019a0a:	2b40      	cmp	r3, #64	@ 0x40
 8019a0c:	d83c      	bhi.n	8019a88 <_scanf_float+0xd4>
 8019a0e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8019a12:	b2c8      	uxtb	r0, r1
 8019a14:	280e      	cmp	r0, #14
 8019a16:	d93a      	bls.n	8019a8e <_scanf_float+0xda>
 8019a18:	f1b9 0f00 	cmp.w	r9, #0
 8019a1c:	d003      	beq.n	8019a26 <_scanf_float+0x72>
 8019a1e:	6823      	ldr	r3, [r4, #0]
 8019a20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8019a24:	6023      	str	r3, [r4, #0]
 8019a26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019a2a:	f1ba 0f01 	cmp.w	sl, #1
 8019a2e:	f200 8117 	bhi.w	8019c60 <_scanf_float+0x2ac>
 8019a32:	9b01      	ldr	r3, [sp, #4]
 8019a34:	429e      	cmp	r6, r3
 8019a36:	f200 8108 	bhi.w	8019c4a <_scanf_float+0x296>
 8019a3a:	2001      	movs	r0, #1
 8019a3c:	b007      	add	sp, #28
 8019a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a42:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8019a46:	2a0d      	cmp	r2, #13
 8019a48:	d8e6      	bhi.n	8019a18 <_scanf_float+0x64>
 8019a4a:	a101      	add	r1, pc, #4	@ (adr r1, 8019a50 <_scanf_float+0x9c>)
 8019a4c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8019a50:	08019b97 	.word	0x08019b97
 8019a54:	08019a19 	.word	0x08019a19
 8019a58:	08019a19 	.word	0x08019a19
 8019a5c:	08019a19 	.word	0x08019a19
 8019a60:	08019bf7 	.word	0x08019bf7
 8019a64:	08019bcf 	.word	0x08019bcf
 8019a68:	08019a19 	.word	0x08019a19
 8019a6c:	08019a19 	.word	0x08019a19
 8019a70:	08019ba5 	.word	0x08019ba5
 8019a74:	08019a19 	.word	0x08019a19
 8019a78:	08019a19 	.word	0x08019a19
 8019a7c:	08019a19 	.word	0x08019a19
 8019a80:	08019a19 	.word	0x08019a19
 8019a84:	08019b5d 	.word	0x08019b5d
 8019a88:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8019a8c:	e7db      	b.n	8019a46 <_scanf_float+0x92>
 8019a8e:	290e      	cmp	r1, #14
 8019a90:	d8c2      	bhi.n	8019a18 <_scanf_float+0x64>
 8019a92:	a001      	add	r0, pc, #4	@ (adr r0, 8019a98 <_scanf_float+0xe4>)
 8019a94:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8019a98:	08019b4d 	.word	0x08019b4d
 8019a9c:	08019a19 	.word	0x08019a19
 8019aa0:	08019b4d 	.word	0x08019b4d
 8019aa4:	08019be3 	.word	0x08019be3
 8019aa8:	08019a19 	.word	0x08019a19
 8019aac:	08019af5 	.word	0x08019af5
 8019ab0:	08019b33 	.word	0x08019b33
 8019ab4:	08019b33 	.word	0x08019b33
 8019ab8:	08019b33 	.word	0x08019b33
 8019abc:	08019b33 	.word	0x08019b33
 8019ac0:	08019b33 	.word	0x08019b33
 8019ac4:	08019b33 	.word	0x08019b33
 8019ac8:	08019b33 	.word	0x08019b33
 8019acc:	08019b33 	.word	0x08019b33
 8019ad0:	08019b33 	.word	0x08019b33
 8019ad4:	2b6e      	cmp	r3, #110	@ 0x6e
 8019ad6:	d809      	bhi.n	8019aec <_scanf_float+0x138>
 8019ad8:	2b60      	cmp	r3, #96	@ 0x60
 8019ada:	d8b2      	bhi.n	8019a42 <_scanf_float+0x8e>
 8019adc:	2b54      	cmp	r3, #84	@ 0x54
 8019ade:	d07b      	beq.n	8019bd8 <_scanf_float+0x224>
 8019ae0:	2b59      	cmp	r3, #89	@ 0x59
 8019ae2:	d199      	bne.n	8019a18 <_scanf_float+0x64>
 8019ae4:	2d07      	cmp	r5, #7
 8019ae6:	d197      	bne.n	8019a18 <_scanf_float+0x64>
 8019ae8:	2508      	movs	r5, #8
 8019aea:	e02c      	b.n	8019b46 <_scanf_float+0x192>
 8019aec:	2b74      	cmp	r3, #116	@ 0x74
 8019aee:	d073      	beq.n	8019bd8 <_scanf_float+0x224>
 8019af0:	2b79      	cmp	r3, #121	@ 0x79
 8019af2:	e7f6      	b.n	8019ae2 <_scanf_float+0x12e>
 8019af4:	6821      	ldr	r1, [r4, #0]
 8019af6:	05c8      	lsls	r0, r1, #23
 8019af8:	d51b      	bpl.n	8019b32 <_scanf_float+0x17e>
 8019afa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8019afe:	6021      	str	r1, [r4, #0]
 8019b00:	f109 0901 	add.w	r9, r9, #1
 8019b04:	f1bb 0f00 	cmp.w	fp, #0
 8019b08:	d003      	beq.n	8019b12 <_scanf_float+0x15e>
 8019b0a:	3201      	adds	r2, #1
 8019b0c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019b10:	60a2      	str	r2, [r4, #8]
 8019b12:	68a3      	ldr	r3, [r4, #8]
 8019b14:	3b01      	subs	r3, #1
 8019b16:	60a3      	str	r3, [r4, #8]
 8019b18:	6923      	ldr	r3, [r4, #16]
 8019b1a:	3301      	adds	r3, #1
 8019b1c:	6123      	str	r3, [r4, #16]
 8019b1e:	687b      	ldr	r3, [r7, #4]
 8019b20:	3b01      	subs	r3, #1
 8019b22:	2b00      	cmp	r3, #0
 8019b24:	607b      	str	r3, [r7, #4]
 8019b26:	f340 8087 	ble.w	8019c38 <_scanf_float+0x284>
 8019b2a:	683b      	ldr	r3, [r7, #0]
 8019b2c:	3301      	adds	r3, #1
 8019b2e:	603b      	str	r3, [r7, #0]
 8019b30:	e765      	b.n	80199fe <_scanf_float+0x4a>
 8019b32:	eb1a 0105 	adds.w	r1, sl, r5
 8019b36:	f47f af6f 	bne.w	8019a18 <_scanf_float+0x64>
 8019b3a:	6822      	ldr	r2, [r4, #0]
 8019b3c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8019b40:	6022      	str	r2, [r4, #0]
 8019b42:	460d      	mov	r5, r1
 8019b44:	468a      	mov	sl, r1
 8019b46:	f806 3b01 	strb.w	r3, [r6], #1
 8019b4a:	e7e2      	b.n	8019b12 <_scanf_float+0x15e>
 8019b4c:	6822      	ldr	r2, [r4, #0]
 8019b4e:	0610      	lsls	r0, r2, #24
 8019b50:	f57f af62 	bpl.w	8019a18 <_scanf_float+0x64>
 8019b54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8019b58:	6022      	str	r2, [r4, #0]
 8019b5a:	e7f4      	b.n	8019b46 <_scanf_float+0x192>
 8019b5c:	f1ba 0f00 	cmp.w	sl, #0
 8019b60:	d10e      	bne.n	8019b80 <_scanf_float+0x1cc>
 8019b62:	f1b9 0f00 	cmp.w	r9, #0
 8019b66:	d10e      	bne.n	8019b86 <_scanf_float+0x1d2>
 8019b68:	6822      	ldr	r2, [r4, #0]
 8019b6a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8019b6e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8019b72:	d108      	bne.n	8019b86 <_scanf_float+0x1d2>
 8019b74:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8019b78:	6022      	str	r2, [r4, #0]
 8019b7a:	f04f 0a01 	mov.w	sl, #1
 8019b7e:	e7e2      	b.n	8019b46 <_scanf_float+0x192>
 8019b80:	f1ba 0f02 	cmp.w	sl, #2
 8019b84:	d055      	beq.n	8019c32 <_scanf_float+0x27e>
 8019b86:	2d01      	cmp	r5, #1
 8019b88:	d002      	beq.n	8019b90 <_scanf_float+0x1dc>
 8019b8a:	2d04      	cmp	r5, #4
 8019b8c:	f47f af44 	bne.w	8019a18 <_scanf_float+0x64>
 8019b90:	3501      	adds	r5, #1
 8019b92:	b2ed      	uxtb	r5, r5
 8019b94:	e7d7      	b.n	8019b46 <_scanf_float+0x192>
 8019b96:	f1ba 0f01 	cmp.w	sl, #1
 8019b9a:	f47f af3d 	bne.w	8019a18 <_scanf_float+0x64>
 8019b9e:	f04f 0a02 	mov.w	sl, #2
 8019ba2:	e7d0      	b.n	8019b46 <_scanf_float+0x192>
 8019ba4:	b97d      	cbnz	r5, 8019bc6 <_scanf_float+0x212>
 8019ba6:	f1b9 0f00 	cmp.w	r9, #0
 8019baa:	f47f af38 	bne.w	8019a1e <_scanf_float+0x6a>
 8019bae:	6822      	ldr	r2, [r4, #0]
 8019bb0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8019bb4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8019bb8:	f040 8108 	bne.w	8019dcc <_scanf_float+0x418>
 8019bbc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8019bc0:	6022      	str	r2, [r4, #0]
 8019bc2:	2501      	movs	r5, #1
 8019bc4:	e7bf      	b.n	8019b46 <_scanf_float+0x192>
 8019bc6:	2d03      	cmp	r5, #3
 8019bc8:	d0e2      	beq.n	8019b90 <_scanf_float+0x1dc>
 8019bca:	2d05      	cmp	r5, #5
 8019bcc:	e7de      	b.n	8019b8c <_scanf_float+0x1d8>
 8019bce:	2d02      	cmp	r5, #2
 8019bd0:	f47f af22 	bne.w	8019a18 <_scanf_float+0x64>
 8019bd4:	2503      	movs	r5, #3
 8019bd6:	e7b6      	b.n	8019b46 <_scanf_float+0x192>
 8019bd8:	2d06      	cmp	r5, #6
 8019bda:	f47f af1d 	bne.w	8019a18 <_scanf_float+0x64>
 8019bde:	2507      	movs	r5, #7
 8019be0:	e7b1      	b.n	8019b46 <_scanf_float+0x192>
 8019be2:	6822      	ldr	r2, [r4, #0]
 8019be4:	0591      	lsls	r1, r2, #22
 8019be6:	f57f af17 	bpl.w	8019a18 <_scanf_float+0x64>
 8019bea:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8019bee:	6022      	str	r2, [r4, #0]
 8019bf0:	f8cd 9008 	str.w	r9, [sp, #8]
 8019bf4:	e7a7      	b.n	8019b46 <_scanf_float+0x192>
 8019bf6:	6822      	ldr	r2, [r4, #0]
 8019bf8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8019bfc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8019c00:	d006      	beq.n	8019c10 <_scanf_float+0x25c>
 8019c02:	0550      	lsls	r0, r2, #21
 8019c04:	f57f af08 	bpl.w	8019a18 <_scanf_float+0x64>
 8019c08:	f1b9 0f00 	cmp.w	r9, #0
 8019c0c:	f000 80de 	beq.w	8019dcc <_scanf_float+0x418>
 8019c10:	0591      	lsls	r1, r2, #22
 8019c12:	bf58      	it	pl
 8019c14:	9902      	ldrpl	r1, [sp, #8]
 8019c16:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8019c1a:	bf58      	it	pl
 8019c1c:	eba9 0101 	subpl.w	r1, r9, r1
 8019c20:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8019c24:	bf58      	it	pl
 8019c26:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8019c2a:	6022      	str	r2, [r4, #0]
 8019c2c:	f04f 0900 	mov.w	r9, #0
 8019c30:	e789      	b.n	8019b46 <_scanf_float+0x192>
 8019c32:	f04f 0a03 	mov.w	sl, #3
 8019c36:	e786      	b.n	8019b46 <_scanf_float+0x192>
 8019c38:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8019c3c:	4639      	mov	r1, r7
 8019c3e:	4640      	mov	r0, r8
 8019c40:	4798      	blx	r3
 8019c42:	2800      	cmp	r0, #0
 8019c44:	f43f aedb 	beq.w	80199fe <_scanf_float+0x4a>
 8019c48:	e6e6      	b.n	8019a18 <_scanf_float+0x64>
 8019c4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8019c4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8019c52:	463a      	mov	r2, r7
 8019c54:	4640      	mov	r0, r8
 8019c56:	4798      	blx	r3
 8019c58:	6923      	ldr	r3, [r4, #16]
 8019c5a:	3b01      	subs	r3, #1
 8019c5c:	6123      	str	r3, [r4, #16]
 8019c5e:	e6e8      	b.n	8019a32 <_scanf_float+0x7e>
 8019c60:	1e6b      	subs	r3, r5, #1
 8019c62:	2b06      	cmp	r3, #6
 8019c64:	d824      	bhi.n	8019cb0 <_scanf_float+0x2fc>
 8019c66:	2d02      	cmp	r5, #2
 8019c68:	d836      	bhi.n	8019cd8 <_scanf_float+0x324>
 8019c6a:	9b01      	ldr	r3, [sp, #4]
 8019c6c:	429e      	cmp	r6, r3
 8019c6e:	f67f aee4 	bls.w	8019a3a <_scanf_float+0x86>
 8019c72:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8019c76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8019c7a:	463a      	mov	r2, r7
 8019c7c:	4640      	mov	r0, r8
 8019c7e:	4798      	blx	r3
 8019c80:	6923      	ldr	r3, [r4, #16]
 8019c82:	3b01      	subs	r3, #1
 8019c84:	6123      	str	r3, [r4, #16]
 8019c86:	e7f0      	b.n	8019c6a <_scanf_float+0x2b6>
 8019c88:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8019c8c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8019c90:	463a      	mov	r2, r7
 8019c92:	4640      	mov	r0, r8
 8019c94:	4798      	blx	r3
 8019c96:	6923      	ldr	r3, [r4, #16]
 8019c98:	3b01      	subs	r3, #1
 8019c9a:	6123      	str	r3, [r4, #16]
 8019c9c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019ca0:	fa5f fa8a 	uxtb.w	sl, sl
 8019ca4:	f1ba 0f02 	cmp.w	sl, #2
 8019ca8:	d1ee      	bne.n	8019c88 <_scanf_float+0x2d4>
 8019caa:	3d03      	subs	r5, #3
 8019cac:	b2ed      	uxtb	r5, r5
 8019cae:	1b76      	subs	r6, r6, r5
 8019cb0:	6823      	ldr	r3, [r4, #0]
 8019cb2:	05da      	lsls	r2, r3, #23
 8019cb4:	d530      	bpl.n	8019d18 <_scanf_float+0x364>
 8019cb6:	055b      	lsls	r3, r3, #21
 8019cb8:	d511      	bpl.n	8019cde <_scanf_float+0x32a>
 8019cba:	9b01      	ldr	r3, [sp, #4]
 8019cbc:	429e      	cmp	r6, r3
 8019cbe:	f67f aebc 	bls.w	8019a3a <_scanf_float+0x86>
 8019cc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8019cc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8019cca:	463a      	mov	r2, r7
 8019ccc:	4640      	mov	r0, r8
 8019cce:	4798      	blx	r3
 8019cd0:	6923      	ldr	r3, [r4, #16]
 8019cd2:	3b01      	subs	r3, #1
 8019cd4:	6123      	str	r3, [r4, #16]
 8019cd6:	e7f0      	b.n	8019cba <_scanf_float+0x306>
 8019cd8:	46aa      	mov	sl, r5
 8019cda:	46b3      	mov	fp, r6
 8019cdc:	e7de      	b.n	8019c9c <_scanf_float+0x2e8>
 8019cde:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8019ce2:	6923      	ldr	r3, [r4, #16]
 8019ce4:	2965      	cmp	r1, #101	@ 0x65
 8019ce6:	f103 33ff 	add.w	r3, r3, #4294967295
 8019cea:	f106 35ff 	add.w	r5, r6, #4294967295
 8019cee:	6123      	str	r3, [r4, #16]
 8019cf0:	d00c      	beq.n	8019d0c <_scanf_float+0x358>
 8019cf2:	2945      	cmp	r1, #69	@ 0x45
 8019cf4:	d00a      	beq.n	8019d0c <_scanf_float+0x358>
 8019cf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8019cfa:	463a      	mov	r2, r7
 8019cfc:	4640      	mov	r0, r8
 8019cfe:	4798      	blx	r3
 8019d00:	6923      	ldr	r3, [r4, #16]
 8019d02:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8019d06:	3b01      	subs	r3, #1
 8019d08:	1eb5      	subs	r5, r6, #2
 8019d0a:	6123      	str	r3, [r4, #16]
 8019d0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8019d10:	463a      	mov	r2, r7
 8019d12:	4640      	mov	r0, r8
 8019d14:	4798      	blx	r3
 8019d16:	462e      	mov	r6, r5
 8019d18:	6822      	ldr	r2, [r4, #0]
 8019d1a:	f012 0210 	ands.w	r2, r2, #16
 8019d1e:	d001      	beq.n	8019d24 <_scanf_float+0x370>
 8019d20:	2000      	movs	r0, #0
 8019d22:	e68b      	b.n	8019a3c <_scanf_float+0x88>
 8019d24:	7032      	strb	r2, [r6, #0]
 8019d26:	6823      	ldr	r3, [r4, #0]
 8019d28:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8019d2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8019d30:	d11c      	bne.n	8019d6c <_scanf_float+0x3b8>
 8019d32:	9b02      	ldr	r3, [sp, #8]
 8019d34:	454b      	cmp	r3, r9
 8019d36:	eba3 0209 	sub.w	r2, r3, r9
 8019d3a:	d123      	bne.n	8019d84 <_scanf_float+0x3d0>
 8019d3c:	9901      	ldr	r1, [sp, #4]
 8019d3e:	2200      	movs	r2, #0
 8019d40:	4640      	mov	r0, r8
 8019d42:	f002 fd09 	bl	801c758 <_strtod_r>
 8019d46:	9b03      	ldr	r3, [sp, #12]
 8019d48:	6821      	ldr	r1, [r4, #0]
 8019d4a:	681b      	ldr	r3, [r3, #0]
 8019d4c:	f011 0f02 	tst.w	r1, #2
 8019d50:	ec57 6b10 	vmov	r6, r7, d0
 8019d54:	f103 0204 	add.w	r2, r3, #4
 8019d58:	d01f      	beq.n	8019d9a <_scanf_float+0x3e6>
 8019d5a:	9903      	ldr	r1, [sp, #12]
 8019d5c:	600a      	str	r2, [r1, #0]
 8019d5e:	681b      	ldr	r3, [r3, #0]
 8019d60:	e9c3 6700 	strd	r6, r7, [r3]
 8019d64:	68e3      	ldr	r3, [r4, #12]
 8019d66:	3301      	adds	r3, #1
 8019d68:	60e3      	str	r3, [r4, #12]
 8019d6a:	e7d9      	b.n	8019d20 <_scanf_float+0x36c>
 8019d6c:	9b04      	ldr	r3, [sp, #16]
 8019d6e:	2b00      	cmp	r3, #0
 8019d70:	d0e4      	beq.n	8019d3c <_scanf_float+0x388>
 8019d72:	9905      	ldr	r1, [sp, #20]
 8019d74:	230a      	movs	r3, #10
 8019d76:	3101      	adds	r1, #1
 8019d78:	4640      	mov	r0, r8
 8019d7a:	f002 fd6d 	bl	801c858 <_strtol_r>
 8019d7e:	9b04      	ldr	r3, [sp, #16]
 8019d80:	9e05      	ldr	r6, [sp, #20]
 8019d82:	1ac2      	subs	r2, r0, r3
 8019d84:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8019d88:	429e      	cmp	r6, r3
 8019d8a:	bf28      	it	cs
 8019d8c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8019d90:	4910      	ldr	r1, [pc, #64]	@ (8019dd4 <_scanf_float+0x420>)
 8019d92:	4630      	mov	r0, r6
 8019d94:	f000 f954 	bl	801a040 <siprintf>
 8019d98:	e7d0      	b.n	8019d3c <_scanf_float+0x388>
 8019d9a:	f011 0f04 	tst.w	r1, #4
 8019d9e:	9903      	ldr	r1, [sp, #12]
 8019da0:	600a      	str	r2, [r1, #0]
 8019da2:	d1dc      	bne.n	8019d5e <_scanf_float+0x3aa>
 8019da4:	681d      	ldr	r5, [r3, #0]
 8019da6:	4632      	mov	r2, r6
 8019da8:	463b      	mov	r3, r7
 8019daa:	4630      	mov	r0, r6
 8019dac:	4639      	mov	r1, r7
 8019dae:	f7ed fe9d 	bl	8007aec <__aeabi_dcmpun>
 8019db2:	b128      	cbz	r0, 8019dc0 <_scanf_float+0x40c>
 8019db4:	4808      	ldr	r0, [pc, #32]	@ (8019dd8 <_scanf_float+0x424>)
 8019db6:	f000 fac9 	bl	801a34c <nanf>
 8019dba:	ed85 0a00 	vstr	s0, [r5]
 8019dbe:	e7d1      	b.n	8019d64 <_scanf_float+0x3b0>
 8019dc0:	4630      	mov	r0, r6
 8019dc2:	4639      	mov	r1, r7
 8019dc4:	f7ed fef0 	bl	8007ba8 <__aeabi_d2f>
 8019dc8:	6028      	str	r0, [r5, #0]
 8019dca:	e7cb      	b.n	8019d64 <_scanf_float+0x3b0>
 8019dcc:	f04f 0900 	mov.w	r9, #0
 8019dd0:	e629      	b.n	8019a26 <_scanf_float+0x72>
 8019dd2:	bf00      	nop
 8019dd4:	0801e274 	.word	0x0801e274
 8019dd8:	0801e60d 	.word	0x0801e60d

08019ddc <std>:
 8019ddc:	2300      	movs	r3, #0
 8019dde:	b510      	push	{r4, lr}
 8019de0:	4604      	mov	r4, r0
 8019de2:	e9c0 3300 	strd	r3, r3, [r0]
 8019de6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019dea:	6083      	str	r3, [r0, #8]
 8019dec:	8181      	strh	r1, [r0, #12]
 8019dee:	6643      	str	r3, [r0, #100]	@ 0x64
 8019df0:	81c2      	strh	r2, [r0, #14]
 8019df2:	6183      	str	r3, [r0, #24]
 8019df4:	4619      	mov	r1, r3
 8019df6:	2208      	movs	r2, #8
 8019df8:	305c      	adds	r0, #92	@ 0x5c
 8019dfa:	f000 fa19 	bl	801a230 <memset>
 8019dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8019e34 <std+0x58>)
 8019e00:	6263      	str	r3, [r4, #36]	@ 0x24
 8019e02:	4b0d      	ldr	r3, [pc, #52]	@ (8019e38 <std+0x5c>)
 8019e04:	62a3      	str	r3, [r4, #40]	@ 0x28
 8019e06:	4b0d      	ldr	r3, [pc, #52]	@ (8019e3c <std+0x60>)
 8019e08:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8019e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8019e40 <std+0x64>)
 8019e0c:	6323      	str	r3, [r4, #48]	@ 0x30
 8019e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8019e44 <std+0x68>)
 8019e10:	6224      	str	r4, [r4, #32]
 8019e12:	429c      	cmp	r4, r3
 8019e14:	d006      	beq.n	8019e24 <std+0x48>
 8019e16:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8019e1a:	4294      	cmp	r4, r2
 8019e1c:	d002      	beq.n	8019e24 <std+0x48>
 8019e1e:	33d0      	adds	r3, #208	@ 0xd0
 8019e20:	429c      	cmp	r4, r3
 8019e22:	d105      	bne.n	8019e30 <std+0x54>
 8019e24:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8019e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e2c:	f000 ba7c 	b.w	801a328 <__retarget_lock_init_recursive>
 8019e30:	bd10      	pop	{r4, pc}
 8019e32:	bf00      	nop
 8019e34:	0801a081 	.word	0x0801a081
 8019e38:	0801a0a3 	.word	0x0801a0a3
 8019e3c:	0801a0db 	.word	0x0801a0db
 8019e40:	0801a0ff 	.word	0x0801a0ff
 8019e44:	20000a40 	.word	0x20000a40

08019e48 <stdio_exit_handler>:
 8019e48:	4a02      	ldr	r2, [pc, #8]	@ (8019e54 <stdio_exit_handler+0xc>)
 8019e4a:	4903      	ldr	r1, [pc, #12]	@ (8019e58 <stdio_exit_handler+0x10>)
 8019e4c:	4803      	ldr	r0, [pc, #12]	@ (8019e5c <stdio_exit_handler+0x14>)
 8019e4e:	f000 b869 	b.w	8019f24 <_fwalk_sglue>
 8019e52:	bf00      	nop
 8019e54:	20000090 	.word	0x20000090
 8019e58:	0801ce99 	.word	0x0801ce99
 8019e5c:	200000a0 	.word	0x200000a0

08019e60 <cleanup_stdio>:
 8019e60:	6841      	ldr	r1, [r0, #4]
 8019e62:	4b0c      	ldr	r3, [pc, #48]	@ (8019e94 <cleanup_stdio+0x34>)
 8019e64:	4299      	cmp	r1, r3
 8019e66:	b510      	push	{r4, lr}
 8019e68:	4604      	mov	r4, r0
 8019e6a:	d001      	beq.n	8019e70 <cleanup_stdio+0x10>
 8019e6c:	f003 f814 	bl	801ce98 <_fflush_r>
 8019e70:	68a1      	ldr	r1, [r4, #8]
 8019e72:	4b09      	ldr	r3, [pc, #36]	@ (8019e98 <cleanup_stdio+0x38>)
 8019e74:	4299      	cmp	r1, r3
 8019e76:	d002      	beq.n	8019e7e <cleanup_stdio+0x1e>
 8019e78:	4620      	mov	r0, r4
 8019e7a:	f003 f80d 	bl	801ce98 <_fflush_r>
 8019e7e:	68e1      	ldr	r1, [r4, #12]
 8019e80:	4b06      	ldr	r3, [pc, #24]	@ (8019e9c <cleanup_stdio+0x3c>)
 8019e82:	4299      	cmp	r1, r3
 8019e84:	d004      	beq.n	8019e90 <cleanup_stdio+0x30>
 8019e86:	4620      	mov	r0, r4
 8019e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e8c:	f003 b804 	b.w	801ce98 <_fflush_r>
 8019e90:	bd10      	pop	{r4, pc}
 8019e92:	bf00      	nop
 8019e94:	20000a40 	.word	0x20000a40
 8019e98:	20000aa8 	.word	0x20000aa8
 8019e9c:	20000b10 	.word	0x20000b10

08019ea0 <global_stdio_init.part.0>:
 8019ea0:	b510      	push	{r4, lr}
 8019ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8019ed0 <global_stdio_init.part.0+0x30>)
 8019ea4:	4c0b      	ldr	r4, [pc, #44]	@ (8019ed4 <global_stdio_init.part.0+0x34>)
 8019ea6:	4a0c      	ldr	r2, [pc, #48]	@ (8019ed8 <global_stdio_init.part.0+0x38>)
 8019ea8:	601a      	str	r2, [r3, #0]
 8019eaa:	4620      	mov	r0, r4
 8019eac:	2200      	movs	r2, #0
 8019eae:	2104      	movs	r1, #4
 8019eb0:	f7ff ff94 	bl	8019ddc <std>
 8019eb4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8019eb8:	2201      	movs	r2, #1
 8019eba:	2109      	movs	r1, #9
 8019ebc:	f7ff ff8e 	bl	8019ddc <std>
 8019ec0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8019ec4:	2202      	movs	r2, #2
 8019ec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019eca:	2112      	movs	r1, #18
 8019ecc:	f7ff bf86 	b.w	8019ddc <std>
 8019ed0:	20000b78 	.word	0x20000b78
 8019ed4:	20000a40 	.word	0x20000a40
 8019ed8:	08019e49 	.word	0x08019e49

08019edc <__sfp_lock_acquire>:
 8019edc:	4801      	ldr	r0, [pc, #4]	@ (8019ee4 <__sfp_lock_acquire+0x8>)
 8019ede:	f000 ba24 	b.w	801a32a <__retarget_lock_acquire_recursive>
 8019ee2:	bf00      	nop
 8019ee4:	20000b81 	.word	0x20000b81

08019ee8 <__sfp_lock_release>:
 8019ee8:	4801      	ldr	r0, [pc, #4]	@ (8019ef0 <__sfp_lock_release+0x8>)
 8019eea:	f000 ba1f 	b.w	801a32c <__retarget_lock_release_recursive>
 8019eee:	bf00      	nop
 8019ef0:	20000b81 	.word	0x20000b81

08019ef4 <__sinit>:
 8019ef4:	b510      	push	{r4, lr}
 8019ef6:	4604      	mov	r4, r0
 8019ef8:	f7ff fff0 	bl	8019edc <__sfp_lock_acquire>
 8019efc:	6a23      	ldr	r3, [r4, #32]
 8019efe:	b11b      	cbz	r3, 8019f08 <__sinit+0x14>
 8019f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f04:	f7ff bff0 	b.w	8019ee8 <__sfp_lock_release>
 8019f08:	4b04      	ldr	r3, [pc, #16]	@ (8019f1c <__sinit+0x28>)
 8019f0a:	6223      	str	r3, [r4, #32]
 8019f0c:	4b04      	ldr	r3, [pc, #16]	@ (8019f20 <__sinit+0x2c>)
 8019f0e:	681b      	ldr	r3, [r3, #0]
 8019f10:	2b00      	cmp	r3, #0
 8019f12:	d1f5      	bne.n	8019f00 <__sinit+0xc>
 8019f14:	f7ff ffc4 	bl	8019ea0 <global_stdio_init.part.0>
 8019f18:	e7f2      	b.n	8019f00 <__sinit+0xc>
 8019f1a:	bf00      	nop
 8019f1c:	08019e61 	.word	0x08019e61
 8019f20:	20000b78 	.word	0x20000b78

08019f24 <_fwalk_sglue>:
 8019f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019f28:	4607      	mov	r7, r0
 8019f2a:	4688      	mov	r8, r1
 8019f2c:	4614      	mov	r4, r2
 8019f2e:	2600      	movs	r6, #0
 8019f30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019f34:	f1b9 0901 	subs.w	r9, r9, #1
 8019f38:	d505      	bpl.n	8019f46 <_fwalk_sglue+0x22>
 8019f3a:	6824      	ldr	r4, [r4, #0]
 8019f3c:	2c00      	cmp	r4, #0
 8019f3e:	d1f7      	bne.n	8019f30 <_fwalk_sglue+0xc>
 8019f40:	4630      	mov	r0, r6
 8019f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019f46:	89ab      	ldrh	r3, [r5, #12]
 8019f48:	2b01      	cmp	r3, #1
 8019f4a:	d907      	bls.n	8019f5c <_fwalk_sglue+0x38>
 8019f4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019f50:	3301      	adds	r3, #1
 8019f52:	d003      	beq.n	8019f5c <_fwalk_sglue+0x38>
 8019f54:	4629      	mov	r1, r5
 8019f56:	4638      	mov	r0, r7
 8019f58:	47c0      	blx	r8
 8019f5a:	4306      	orrs	r6, r0
 8019f5c:	3568      	adds	r5, #104	@ 0x68
 8019f5e:	e7e9      	b.n	8019f34 <_fwalk_sglue+0x10>

08019f60 <iprintf>:
 8019f60:	b40f      	push	{r0, r1, r2, r3}
 8019f62:	b507      	push	{r0, r1, r2, lr}
 8019f64:	4906      	ldr	r1, [pc, #24]	@ (8019f80 <iprintf+0x20>)
 8019f66:	ab04      	add	r3, sp, #16
 8019f68:	6808      	ldr	r0, [r1, #0]
 8019f6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8019f6e:	6881      	ldr	r1, [r0, #8]
 8019f70:	9301      	str	r3, [sp, #4]
 8019f72:	f002 fdf5 	bl	801cb60 <_vfiprintf_r>
 8019f76:	b003      	add	sp, #12
 8019f78:	f85d eb04 	ldr.w	lr, [sp], #4
 8019f7c:	b004      	add	sp, #16
 8019f7e:	4770      	bx	lr
 8019f80:	2000009c 	.word	0x2000009c

08019f84 <_puts_r>:
 8019f84:	6a03      	ldr	r3, [r0, #32]
 8019f86:	b570      	push	{r4, r5, r6, lr}
 8019f88:	6884      	ldr	r4, [r0, #8]
 8019f8a:	4605      	mov	r5, r0
 8019f8c:	460e      	mov	r6, r1
 8019f8e:	b90b      	cbnz	r3, 8019f94 <_puts_r+0x10>
 8019f90:	f7ff ffb0 	bl	8019ef4 <__sinit>
 8019f94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019f96:	07db      	lsls	r3, r3, #31
 8019f98:	d405      	bmi.n	8019fa6 <_puts_r+0x22>
 8019f9a:	89a3      	ldrh	r3, [r4, #12]
 8019f9c:	0598      	lsls	r0, r3, #22
 8019f9e:	d402      	bmi.n	8019fa6 <_puts_r+0x22>
 8019fa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019fa2:	f000 f9c2 	bl	801a32a <__retarget_lock_acquire_recursive>
 8019fa6:	89a3      	ldrh	r3, [r4, #12]
 8019fa8:	0719      	lsls	r1, r3, #28
 8019faa:	d502      	bpl.n	8019fb2 <_puts_r+0x2e>
 8019fac:	6923      	ldr	r3, [r4, #16]
 8019fae:	2b00      	cmp	r3, #0
 8019fb0:	d135      	bne.n	801a01e <_puts_r+0x9a>
 8019fb2:	4621      	mov	r1, r4
 8019fb4:	4628      	mov	r0, r5
 8019fb6:	f000 f8e5 	bl	801a184 <__swsetup_r>
 8019fba:	b380      	cbz	r0, 801a01e <_puts_r+0x9a>
 8019fbc:	f04f 35ff 	mov.w	r5, #4294967295
 8019fc0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019fc2:	07da      	lsls	r2, r3, #31
 8019fc4:	d405      	bmi.n	8019fd2 <_puts_r+0x4e>
 8019fc6:	89a3      	ldrh	r3, [r4, #12]
 8019fc8:	059b      	lsls	r3, r3, #22
 8019fca:	d402      	bmi.n	8019fd2 <_puts_r+0x4e>
 8019fcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019fce:	f000 f9ad 	bl	801a32c <__retarget_lock_release_recursive>
 8019fd2:	4628      	mov	r0, r5
 8019fd4:	bd70      	pop	{r4, r5, r6, pc}
 8019fd6:	2b00      	cmp	r3, #0
 8019fd8:	da04      	bge.n	8019fe4 <_puts_r+0x60>
 8019fda:	69a2      	ldr	r2, [r4, #24]
 8019fdc:	429a      	cmp	r2, r3
 8019fde:	dc17      	bgt.n	801a010 <_puts_r+0x8c>
 8019fe0:	290a      	cmp	r1, #10
 8019fe2:	d015      	beq.n	801a010 <_puts_r+0x8c>
 8019fe4:	6823      	ldr	r3, [r4, #0]
 8019fe6:	1c5a      	adds	r2, r3, #1
 8019fe8:	6022      	str	r2, [r4, #0]
 8019fea:	7019      	strb	r1, [r3, #0]
 8019fec:	68a3      	ldr	r3, [r4, #8]
 8019fee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019ff2:	3b01      	subs	r3, #1
 8019ff4:	60a3      	str	r3, [r4, #8]
 8019ff6:	2900      	cmp	r1, #0
 8019ff8:	d1ed      	bne.n	8019fd6 <_puts_r+0x52>
 8019ffa:	2b00      	cmp	r3, #0
 8019ffc:	da11      	bge.n	801a022 <_puts_r+0x9e>
 8019ffe:	4622      	mov	r2, r4
 801a000:	210a      	movs	r1, #10
 801a002:	4628      	mov	r0, r5
 801a004:	f000 f87f 	bl	801a106 <__swbuf_r>
 801a008:	3001      	adds	r0, #1
 801a00a:	d0d7      	beq.n	8019fbc <_puts_r+0x38>
 801a00c:	250a      	movs	r5, #10
 801a00e:	e7d7      	b.n	8019fc0 <_puts_r+0x3c>
 801a010:	4622      	mov	r2, r4
 801a012:	4628      	mov	r0, r5
 801a014:	f000 f877 	bl	801a106 <__swbuf_r>
 801a018:	3001      	adds	r0, #1
 801a01a:	d1e7      	bne.n	8019fec <_puts_r+0x68>
 801a01c:	e7ce      	b.n	8019fbc <_puts_r+0x38>
 801a01e:	3e01      	subs	r6, #1
 801a020:	e7e4      	b.n	8019fec <_puts_r+0x68>
 801a022:	6823      	ldr	r3, [r4, #0]
 801a024:	1c5a      	adds	r2, r3, #1
 801a026:	6022      	str	r2, [r4, #0]
 801a028:	220a      	movs	r2, #10
 801a02a:	701a      	strb	r2, [r3, #0]
 801a02c:	e7ee      	b.n	801a00c <_puts_r+0x88>
	...

0801a030 <puts>:
 801a030:	4b02      	ldr	r3, [pc, #8]	@ (801a03c <puts+0xc>)
 801a032:	4601      	mov	r1, r0
 801a034:	6818      	ldr	r0, [r3, #0]
 801a036:	f7ff bfa5 	b.w	8019f84 <_puts_r>
 801a03a:	bf00      	nop
 801a03c:	2000009c 	.word	0x2000009c

0801a040 <siprintf>:
 801a040:	b40e      	push	{r1, r2, r3}
 801a042:	b500      	push	{lr}
 801a044:	b09c      	sub	sp, #112	@ 0x70
 801a046:	ab1d      	add	r3, sp, #116	@ 0x74
 801a048:	9002      	str	r0, [sp, #8]
 801a04a:	9006      	str	r0, [sp, #24]
 801a04c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801a050:	4809      	ldr	r0, [pc, #36]	@ (801a078 <siprintf+0x38>)
 801a052:	9107      	str	r1, [sp, #28]
 801a054:	9104      	str	r1, [sp, #16]
 801a056:	4909      	ldr	r1, [pc, #36]	@ (801a07c <siprintf+0x3c>)
 801a058:	f853 2b04 	ldr.w	r2, [r3], #4
 801a05c:	9105      	str	r1, [sp, #20]
 801a05e:	6800      	ldr	r0, [r0, #0]
 801a060:	9301      	str	r3, [sp, #4]
 801a062:	a902      	add	r1, sp, #8
 801a064:	f002 fc56 	bl	801c914 <_svfiprintf_r>
 801a068:	9b02      	ldr	r3, [sp, #8]
 801a06a:	2200      	movs	r2, #0
 801a06c:	701a      	strb	r2, [r3, #0]
 801a06e:	b01c      	add	sp, #112	@ 0x70
 801a070:	f85d eb04 	ldr.w	lr, [sp], #4
 801a074:	b003      	add	sp, #12
 801a076:	4770      	bx	lr
 801a078:	2000009c 	.word	0x2000009c
 801a07c:	ffff0208 	.word	0xffff0208

0801a080 <__sread>:
 801a080:	b510      	push	{r4, lr}
 801a082:	460c      	mov	r4, r1
 801a084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a088:	f000 f900 	bl	801a28c <_read_r>
 801a08c:	2800      	cmp	r0, #0
 801a08e:	bfab      	itete	ge
 801a090:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801a092:	89a3      	ldrhlt	r3, [r4, #12]
 801a094:	181b      	addge	r3, r3, r0
 801a096:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801a09a:	bfac      	ite	ge
 801a09c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801a09e:	81a3      	strhlt	r3, [r4, #12]
 801a0a0:	bd10      	pop	{r4, pc}

0801a0a2 <__swrite>:
 801a0a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0a6:	461f      	mov	r7, r3
 801a0a8:	898b      	ldrh	r3, [r1, #12]
 801a0aa:	05db      	lsls	r3, r3, #23
 801a0ac:	4605      	mov	r5, r0
 801a0ae:	460c      	mov	r4, r1
 801a0b0:	4616      	mov	r6, r2
 801a0b2:	d505      	bpl.n	801a0c0 <__swrite+0x1e>
 801a0b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a0b8:	2302      	movs	r3, #2
 801a0ba:	2200      	movs	r2, #0
 801a0bc:	f000 f8d4 	bl	801a268 <_lseek_r>
 801a0c0:	89a3      	ldrh	r3, [r4, #12]
 801a0c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a0c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801a0ca:	81a3      	strh	r3, [r4, #12]
 801a0cc:	4632      	mov	r2, r6
 801a0ce:	463b      	mov	r3, r7
 801a0d0:	4628      	mov	r0, r5
 801a0d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a0d6:	f000 b8eb 	b.w	801a2b0 <_write_r>

0801a0da <__sseek>:
 801a0da:	b510      	push	{r4, lr}
 801a0dc:	460c      	mov	r4, r1
 801a0de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a0e2:	f000 f8c1 	bl	801a268 <_lseek_r>
 801a0e6:	1c43      	adds	r3, r0, #1
 801a0e8:	89a3      	ldrh	r3, [r4, #12]
 801a0ea:	bf15      	itete	ne
 801a0ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 801a0ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801a0f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801a0f6:	81a3      	strheq	r3, [r4, #12]
 801a0f8:	bf18      	it	ne
 801a0fa:	81a3      	strhne	r3, [r4, #12]
 801a0fc:	bd10      	pop	{r4, pc}

0801a0fe <__sclose>:
 801a0fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a102:	f000 b8a1 	b.w	801a248 <_close_r>

0801a106 <__swbuf_r>:
 801a106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a108:	460e      	mov	r6, r1
 801a10a:	4614      	mov	r4, r2
 801a10c:	4605      	mov	r5, r0
 801a10e:	b118      	cbz	r0, 801a118 <__swbuf_r+0x12>
 801a110:	6a03      	ldr	r3, [r0, #32]
 801a112:	b90b      	cbnz	r3, 801a118 <__swbuf_r+0x12>
 801a114:	f7ff feee 	bl	8019ef4 <__sinit>
 801a118:	69a3      	ldr	r3, [r4, #24]
 801a11a:	60a3      	str	r3, [r4, #8]
 801a11c:	89a3      	ldrh	r3, [r4, #12]
 801a11e:	071a      	lsls	r2, r3, #28
 801a120:	d501      	bpl.n	801a126 <__swbuf_r+0x20>
 801a122:	6923      	ldr	r3, [r4, #16]
 801a124:	b943      	cbnz	r3, 801a138 <__swbuf_r+0x32>
 801a126:	4621      	mov	r1, r4
 801a128:	4628      	mov	r0, r5
 801a12a:	f000 f82b 	bl	801a184 <__swsetup_r>
 801a12e:	b118      	cbz	r0, 801a138 <__swbuf_r+0x32>
 801a130:	f04f 37ff 	mov.w	r7, #4294967295
 801a134:	4638      	mov	r0, r7
 801a136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a138:	6823      	ldr	r3, [r4, #0]
 801a13a:	6922      	ldr	r2, [r4, #16]
 801a13c:	1a98      	subs	r0, r3, r2
 801a13e:	6963      	ldr	r3, [r4, #20]
 801a140:	b2f6      	uxtb	r6, r6
 801a142:	4283      	cmp	r3, r0
 801a144:	4637      	mov	r7, r6
 801a146:	dc05      	bgt.n	801a154 <__swbuf_r+0x4e>
 801a148:	4621      	mov	r1, r4
 801a14a:	4628      	mov	r0, r5
 801a14c:	f002 fea4 	bl	801ce98 <_fflush_r>
 801a150:	2800      	cmp	r0, #0
 801a152:	d1ed      	bne.n	801a130 <__swbuf_r+0x2a>
 801a154:	68a3      	ldr	r3, [r4, #8]
 801a156:	3b01      	subs	r3, #1
 801a158:	60a3      	str	r3, [r4, #8]
 801a15a:	6823      	ldr	r3, [r4, #0]
 801a15c:	1c5a      	adds	r2, r3, #1
 801a15e:	6022      	str	r2, [r4, #0]
 801a160:	701e      	strb	r6, [r3, #0]
 801a162:	6962      	ldr	r2, [r4, #20]
 801a164:	1c43      	adds	r3, r0, #1
 801a166:	429a      	cmp	r2, r3
 801a168:	d004      	beq.n	801a174 <__swbuf_r+0x6e>
 801a16a:	89a3      	ldrh	r3, [r4, #12]
 801a16c:	07db      	lsls	r3, r3, #31
 801a16e:	d5e1      	bpl.n	801a134 <__swbuf_r+0x2e>
 801a170:	2e0a      	cmp	r6, #10
 801a172:	d1df      	bne.n	801a134 <__swbuf_r+0x2e>
 801a174:	4621      	mov	r1, r4
 801a176:	4628      	mov	r0, r5
 801a178:	f002 fe8e 	bl	801ce98 <_fflush_r>
 801a17c:	2800      	cmp	r0, #0
 801a17e:	d0d9      	beq.n	801a134 <__swbuf_r+0x2e>
 801a180:	e7d6      	b.n	801a130 <__swbuf_r+0x2a>
	...

0801a184 <__swsetup_r>:
 801a184:	b538      	push	{r3, r4, r5, lr}
 801a186:	4b29      	ldr	r3, [pc, #164]	@ (801a22c <__swsetup_r+0xa8>)
 801a188:	4605      	mov	r5, r0
 801a18a:	6818      	ldr	r0, [r3, #0]
 801a18c:	460c      	mov	r4, r1
 801a18e:	b118      	cbz	r0, 801a198 <__swsetup_r+0x14>
 801a190:	6a03      	ldr	r3, [r0, #32]
 801a192:	b90b      	cbnz	r3, 801a198 <__swsetup_r+0x14>
 801a194:	f7ff feae 	bl	8019ef4 <__sinit>
 801a198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a19c:	0719      	lsls	r1, r3, #28
 801a19e:	d422      	bmi.n	801a1e6 <__swsetup_r+0x62>
 801a1a0:	06da      	lsls	r2, r3, #27
 801a1a2:	d407      	bmi.n	801a1b4 <__swsetup_r+0x30>
 801a1a4:	2209      	movs	r2, #9
 801a1a6:	602a      	str	r2, [r5, #0]
 801a1a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a1ac:	81a3      	strh	r3, [r4, #12]
 801a1ae:	f04f 30ff 	mov.w	r0, #4294967295
 801a1b2:	e033      	b.n	801a21c <__swsetup_r+0x98>
 801a1b4:	0758      	lsls	r0, r3, #29
 801a1b6:	d512      	bpl.n	801a1de <__swsetup_r+0x5a>
 801a1b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a1ba:	b141      	cbz	r1, 801a1ce <__swsetup_r+0x4a>
 801a1bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a1c0:	4299      	cmp	r1, r3
 801a1c2:	d002      	beq.n	801a1ca <__swsetup_r+0x46>
 801a1c4:	4628      	mov	r0, r5
 801a1c6:	f000 ff13 	bl	801aff0 <_free_r>
 801a1ca:	2300      	movs	r3, #0
 801a1cc:	6363      	str	r3, [r4, #52]	@ 0x34
 801a1ce:	89a3      	ldrh	r3, [r4, #12]
 801a1d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801a1d4:	81a3      	strh	r3, [r4, #12]
 801a1d6:	2300      	movs	r3, #0
 801a1d8:	6063      	str	r3, [r4, #4]
 801a1da:	6923      	ldr	r3, [r4, #16]
 801a1dc:	6023      	str	r3, [r4, #0]
 801a1de:	89a3      	ldrh	r3, [r4, #12]
 801a1e0:	f043 0308 	orr.w	r3, r3, #8
 801a1e4:	81a3      	strh	r3, [r4, #12]
 801a1e6:	6923      	ldr	r3, [r4, #16]
 801a1e8:	b94b      	cbnz	r3, 801a1fe <__swsetup_r+0x7a>
 801a1ea:	89a3      	ldrh	r3, [r4, #12]
 801a1ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801a1f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a1f4:	d003      	beq.n	801a1fe <__swsetup_r+0x7a>
 801a1f6:	4621      	mov	r1, r4
 801a1f8:	4628      	mov	r0, r5
 801a1fa:	f002 fe9b 	bl	801cf34 <__smakebuf_r>
 801a1fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a202:	f013 0201 	ands.w	r2, r3, #1
 801a206:	d00a      	beq.n	801a21e <__swsetup_r+0x9a>
 801a208:	2200      	movs	r2, #0
 801a20a:	60a2      	str	r2, [r4, #8]
 801a20c:	6962      	ldr	r2, [r4, #20]
 801a20e:	4252      	negs	r2, r2
 801a210:	61a2      	str	r2, [r4, #24]
 801a212:	6922      	ldr	r2, [r4, #16]
 801a214:	b942      	cbnz	r2, 801a228 <__swsetup_r+0xa4>
 801a216:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801a21a:	d1c5      	bne.n	801a1a8 <__swsetup_r+0x24>
 801a21c:	bd38      	pop	{r3, r4, r5, pc}
 801a21e:	0799      	lsls	r1, r3, #30
 801a220:	bf58      	it	pl
 801a222:	6962      	ldrpl	r2, [r4, #20]
 801a224:	60a2      	str	r2, [r4, #8]
 801a226:	e7f4      	b.n	801a212 <__swsetup_r+0x8e>
 801a228:	2000      	movs	r0, #0
 801a22a:	e7f7      	b.n	801a21c <__swsetup_r+0x98>
 801a22c:	2000009c 	.word	0x2000009c

0801a230 <memset>:
 801a230:	4402      	add	r2, r0
 801a232:	4603      	mov	r3, r0
 801a234:	4293      	cmp	r3, r2
 801a236:	d100      	bne.n	801a23a <memset+0xa>
 801a238:	4770      	bx	lr
 801a23a:	f803 1b01 	strb.w	r1, [r3], #1
 801a23e:	e7f9      	b.n	801a234 <memset+0x4>

0801a240 <_localeconv_r>:
 801a240:	4800      	ldr	r0, [pc, #0]	@ (801a244 <_localeconv_r+0x4>)
 801a242:	4770      	bx	lr
 801a244:	200001dc 	.word	0x200001dc

0801a248 <_close_r>:
 801a248:	b538      	push	{r3, r4, r5, lr}
 801a24a:	4d06      	ldr	r5, [pc, #24]	@ (801a264 <_close_r+0x1c>)
 801a24c:	2300      	movs	r3, #0
 801a24e:	4604      	mov	r4, r0
 801a250:	4608      	mov	r0, r1
 801a252:	602b      	str	r3, [r5, #0]
 801a254:	f7f2 f86a 	bl	800c32c <_close>
 801a258:	1c43      	adds	r3, r0, #1
 801a25a:	d102      	bne.n	801a262 <_close_r+0x1a>
 801a25c:	682b      	ldr	r3, [r5, #0]
 801a25e:	b103      	cbz	r3, 801a262 <_close_r+0x1a>
 801a260:	6023      	str	r3, [r4, #0]
 801a262:	bd38      	pop	{r3, r4, r5, pc}
 801a264:	20000b7c 	.word	0x20000b7c

0801a268 <_lseek_r>:
 801a268:	b538      	push	{r3, r4, r5, lr}
 801a26a:	4d07      	ldr	r5, [pc, #28]	@ (801a288 <_lseek_r+0x20>)
 801a26c:	4604      	mov	r4, r0
 801a26e:	4608      	mov	r0, r1
 801a270:	4611      	mov	r1, r2
 801a272:	2200      	movs	r2, #0
 801a274:	602a      	str	r2, [r5, #0]
 801a276:	461a      	mov	r2, r3
 801a278:	f7f2 f87f 	bl	800c37a <_lseek>
 801a27c:	1c43      	adds	r3, r0, #1
 801a27e:	d102      	bne.n	801a286 <_lseek_r+0x1e>
 801a280:	682b      	ldr	r3, [r5, #0]
 801a282:	b103      	cbz	r3, 801a286 <_lseek_r+0x1e>
 801a284:	6023      	str	r3, [r4, #0]
 801a286:	bd38      	pop	{r3, r4, r5, pc}
 801a288:	20000b7c 	.word	0x20000b7c

0801a28c <_read_r>:
 801a28c:	b538      	push	{r3, r4, r5, lr}
 801a28e:	4d07      	ldr	r5, [pc, #28]	@ (801a2ac <_read_r+0x20>)
 801a290:	4604      	mov	r4, r0
 801a292:	4608      	mov	r0, r1
 801a294:	4611      	mov	r1, r2
 801a296:	2200      	movs	r2, #0
 801a298:	602a      	str	r2, [r5, #0]
 801a29a:	461a      	mov	r2, r3
 801a29c:	f7f2 f80d 	bl	800c2ba <_read>
 801a2a0:	1c43      	adds	r3, r0, #1
 801a2a2:	d102      	bne.n	801a2aa <_read_r+0x1e>
 801a2a4:	682b      	ldr	r3, [r5, #0]
 801a2a6:	b103      	cbz	r3, 801a2aa <_read_r+0x1e>
 801a2a8:	6023      	str	r3, [r4, #0]
 801a2aa:	bd38      	pop	{r3, r4, r5, pc}
 801a2ac:	20000b7c 	.word	0x20000b7c

0801a2b0 <_write_r>:
 801a2b0:	b538      	push	{r3, r4, r5, lr}
 801a2b2:	4d07      	ldr	r5, [pc, #28]	@ (801a2d0 <_write_r+0x20>)
 801a2b4:	4604      	mov	r4, r0
 801a2b6:	4608      	mov	r0, r1
 801a2b8:	4611      	mov	r1, r2
 801a2ba:	2200      	movs	r2, #0
 801a2bc:	602a      	str	r2, [r5, #0]
 801a2be:	461a      	mov	r2, r3
 801a2c0:	f7f2 f818 	bl	800c2f4 <_write>
 801a2c4:	1c43      	adds	r3, r0, #1
 801a2c6:	d102      	bne.n	801a2ce <_write_r+0x1e>
 801a2c8:	682b      	ldr	r3, [r5, #0]
 801a2ca:	b103      	cbz	r3, 801a2ce <_write_r+0x1e>
 801a2cc:	6023      	str	r3, [r4, #0]
 801a2ce:	bd38      	pop	{r3, r4, r5, pc}
 801a2d0:	20000b7c 	.word	0x20000b7c

0801a2d4 <__errno>:
 801a2d4:	4b01      	ldr	r3, [pc, #4]	@ (801a2dc <__errno+0x8>)
 801a2d6:	6818      	ldr	r0, [r3, #0]
 801a2d8:	4770      	bx	lr
 801a2da:	bf00      	nop
 801a2dc:	2000009c 	.word	0x2000009c

0801a2e0 <__libc_init_array>:
 801a2e0:	b570      	push	{r4, r5, r6, lr}
 801a2e2:	4d0d      	ldr	r5, [pc, #52]	@ (801a318 <__libc_init_array+0x38>)
 801a2e4:	4c0d      	ldr	r4, [pc, #52]	@ (801a31c <__libc_init_array+0x3c>)
 801a2e6:	1b64      	subs	r4, r4, r5
 801a2e8:	10a4      	asrs	r4, r4, #2
 801a2ea:	2600      	movs	r6, #0
 801a2ec:	42a6      	cmp	r6, r4
 801a2ee:	d109      	bne.n	801a304 <__libc_init_array+0x24>
 801a2f0:	4d0b      	ldr	r5, [pc, #44]	@ (801a320 <__libc_init_array+0x40>)
 801a2f2:	4c0c      	ldr	r4, [pc, #48]	@ (801a324 <__libc_init_array+0x44>)
 801a2f4:	f003 fbe4 	bl	801dac0 <_init>
 801a2f8:	1b64      	subs	r4, r4, r5
 801a2fa:	10a4      	asrs	r4, r4, #2
 801a2fc:	2600      	movs	r6, #0
 801a2fe:	42a6      	cmp	r6, r4
 801a300:	d105      	bne.n	801a30e <__libc_init_array+0x2e>
 801a302:	bd70      	pop	{r4, r5, r6, pc}
 801a304:	f855 3b04 	ldr.w	r3, [r5], #4
 801a308:	4798      	blx	r3
 801a30a:	3601      	adds	r6, #1
 801a30c:	e7ee      	b.n	801a2ec <__libc_init_array+0xc>
 801a30e:	f855 3b04 	ldr.w	r3, [r5], #4
 801a312:	4798      	blx	r3
 801a314:	3601      	adds	r6, #1
 801a316:	e7f2      	b.n	801a2fe <__libc_init_array+0x1e>
 801a318:	0801e678 	.word	0x0801e678
 801a31c:	0801e678 	.word	0x0801e678
 801a320:	0801e678 	.word	0x0801e678
 801a324:	0801e67c 	.word	0x0801e67c

0801a328 <__retarget_lock_init_recursive>:
 801a328:	4770      	bx	lr

0801a32a <__retarget_lock_acquire_recursive>:
 801a32a:	4770      	bx	lr

0801a32c <__retarget_lock_release_recursive>:
 801a32c:	4770      	bx	lr

0801a32e <memcpy>:
 801a32e:	440a      	add	r2, r1
 801a330:	4291      	cmp	r1, r2
 801a332:	f100 33ff 	add.w	r3, r0, #4294967295
 801a336:	d100      	bne.n	801a33a <memcpy+0xc>
 801a338:	4770      	bx	lr
 801a33a:	b510      	push	{r4, lr}
 801a33c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a340:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a344:	4291      	cmp	r1, r2
 801a346:	d1f9      	bne.n	801a33c <memcpy+0xe>
 801a348:	bd10      	pop	{r4, pc}
	...

0801a34c <nanf>:
 801a34c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801a354 <nanf+0x8>
 801a350:	4770      	bx	lr
 801a352:	bf00      	nop
 801a354:	7fc00000 	.word	0x7fc00000

0801a358 <quorem>:
 801a358:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a35c:	6903      	ldr	r3, [r0, #16]
 801a35e:	690c      	ldr	r4, [r1, #16]
 801a360:	42a3      	cmp	r3, r4
 801a362:	4607      	mov	r7, r0
 801a364:	db7e      	blt.n	801a464 <quorem+0x10c>
 801a366:	3c01      	subs	r4, #1
 801a368:	f101 0814 	add.w	r8, r1, #20
 801a36c:	00a3      	lsls	r3, r4, #2
 801a36e:	f100 0514 	add.w	r5, r0, #20
 801a372:	9300      	str	r3, [sp, #0]
 801a374:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a378:	9301      	str	r3, [sp, #4]
 801a37a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801a37e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a382:	3301      	adds	r3, #1
 801a384:	429a      	cmp	r2, r3
 801a386:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801a38a:	fbb2 f6f3 	udiv	r6, r2, r3
 801a38e:	d32e      	bcc.n	801a3ee <quorem+0x96>
 801a390:	f04f 0a00 	mov.w	sl, #0
 801a394:	46c4      	mov	ip, r8
 801a396:	46ae      	mov	lr, r5
 801a398:	46d3      	mov	fp, sl
 801a39a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801a39e:	b298      	uxth	r0, r3
 801a3a0:	fb06 a000 	mla	r0, r6, r0, sl
 801a3a4:	0c02      	lsrs	r2, r0, #16
 801a3a6:	0c1b      	lsrs	r3, r3, #16
 801a3a8:	fb06 2303 	mla	r3, r6, r3, r2
 801a3ac:	f8de 2000 	ldr.w	r2, [lr]
 801a3b0:	b280      	uxth	r0, r0
 801a3b2:	b292      	uxth	r2, r2
 801a3b4:	1a12      	subs	r2, r2, r0
 801a3b6:	445a      	add	r2, fp
 801a3b8:	f8de 0000 	ldr.w	r0, [lr]
 801a3bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a3c0:	b29b      	uxth	r3, r3
 801a3c2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801a3c6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801a3ca:	b292      	uxth	r2, r2
 801a3cc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801a3d0:	45e1      	cmp	r9, ip
 801a3d2:	f84e 2b04 	str.w	r2, [lr], #4
 801a3d6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801a3da:	d2de      	bcs.n	801a39a <quorem+0x42>
 801a3dc:	9b00      	ldr	r3, [sp, #0]
 801a3de:	58eb      	ldr	r3, [r5, r3]
 801a3e0:	b92b      	cbnz	r3, 801a3ee <quorem+0x96>
 801a3e2:	9b01      	ldr	r3, [sp, #4]
 801a3e4:	3b04      	subs	r3, #4
 801a3e6:	429d      	cmp	r5, r3
 801a3e8:	461a      	mov	r2, r3
 801a3ea:	d32f      	bcc.n	801a44c <quorem+0xf4>
 801a3ec:	613c      	str	r4, [r7, #16]
 801a3ee:	4638      	mov	r0, r7
 801a3f0:	f001 f9c2 	bl	801b778 <__mcmp>
 801a3f4:	2800      	cmp	r0, #0
 801a3f6:	db25      	blt.n	801a444 <quorem+0xec>
 801a3f8:	4629      	mov	r1, r5
 801a3fa:	2000      	movs	r0, #0
 801a3fc:	f858 2b04 	ldr.w	r2, [r8], #4
 801a400:	f8d1 c000 	ldr.w	ip, [r1]
 801a404:	fa1f fe82 	uxth.w	lr, r2
 801a408:	fa1f f38c 	uxth.w	r3, ip
 801a40c:	eba3 030e 	sub.w	r3, r3, lr
 801a410:	4403      	add	r3, r0
 801a412:	0c12      	lsrs	r2, r2, #16
 801a414:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801a418:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801a41c:	b29b      	uxth	r3, r3
 801a41e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a422:	45c1      	cmp	r9, r8
 801a424:	f841 3b04 	str.w	r3, [r1], #4
 801a428:	ea4f 4022 	mov.w	r0, r2, asr #16
 801a42c:	d2e6      	bcs.n	801a3fc <quorem+0xa4>
 801a42e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a432:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a436:	b922      	cbnz	r2, 801a442 <quorem+0xea>
 801a438:	3b04      	subs	r3, #4
 801a43a:	429d      	cmp	r5, r3
 801a43c:	461a      	mov	r2, r3
 801a43e:	d30b      	bcc.n	801a458 <quorem+0x100>
 801a440:	613c      	str	r4, [r7, #16]
 801a442:	3601      	adds	r6, #1
 801a444:	4630      	mov	r0, r6
 801a446:	b003      	add	sp, #12
 801a448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a44c:	6812      	ldr	r2, [r2, #0]
 801a44e:	3b04      	subs	r3, #4
 801a450:	2a00      	cmp	r2, #0
 801a452:	d1cb      	bne.n	801a3ec <quorem+0x94>
 801a454:	3c01      	subs	r4, #1
 801a456:	e7c6      	b.n	801a3e6 <quorem+0x8e>
 801a458:	6812      	ldr	r2, [r2, #0]
 801a45a:	3b04      	subs	r3, #4
 801a45c:	2a00      	cmp	r2, #0
 801a45e:	d1ef      	bne.n	801a440 <quorem+0xe8>
 801a460:	3c01      	subs	r4, #1
 801a462:	e7ea      	b.n	801a43a <quorem+0xe2>
 801a464:	2000      	movs	r0, #0
 801a466:	e7ee      	b.n	801a446 <quorem+0xee>

0801a468 <_dtoa_r>:
 801a468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a46c:	69c7      	ldr	r7, [r0, #28]
 801a46e:	b099      	sub	sp, #100	@ 0x64
 801a470:	ed8d 0b02 	vstr	d0, [sp, #8]
 801a474:	ec55 4b10 	vmov	r4, r5, d0
 801a478:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801a47a:	9109      	str	r1, [sp, #36]	@ 0x24
 801a47c:	4683      	mov	fp, r0
 801a47e:	920e      	str	r2, [sp, #56]	@ 0x38
 801a480:	9313      	str	r3, [sp, #76]	@ 0x4c
 801a482:	b97f      	cbnz	r7, 801a4a4 <_dtoa_r+0x3c>
 801a484:	2010      	movs	r0, #16
 801a486:	f000 fdfd 	bl	801b084 <malloc>
 801a48a:	4602      	mov	r2, r0
 801a48c:	f8cb 001c 	str.w	r0, [fp, #28]
 801a490:	b920      	cbnz	r0, 801a49c <_dtoa_r+0x34>
 801a492:	4ba7      	ldr	r3, [pc, #668]	@ (801a730 <_dtoa_r+0x2c8>)
 801a494:	21ef      	movs	r1, #239	@ 0xef
 801a496:	48a7      	ldr	r0, [pc, #668]	@ (801a734 <_dtoa_r+0x2cc>)
 801a498:	f002 fdee 	bl	801d078 <__assert_func>
 801a49c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801a4a0:	6007      	str	r7, [r0, #0]
 801a4a2:	60c7      	str	r7, [r0, #12]
 801a4a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 801a4a8:	6819      	ldr	r1, [r3, #0]
 801a4aa:	b159      	cbz	r1, 801a4c4 <_dtoa_r+0x5c>
 801a4ac:	685a      	ldr	r2, [r3, #4]
 801a4ae:	604a      	str	r2, [r1, #4]
 801a4b0:	2301      	movs	r3, #1
 801a4b2:	4093      	lsls	r3, r2
 801a4b4:	608b      	str	r3, [r1, #8]
 801a4b6:	4658      	mov	r0, fp
 801a4b8:	f000 feda 	bl	801b270 <_Bfree>
 801a4bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 801a4c0:	2200      	movs	r2, #0
 801a4c2:	601a      	str	r2, [r3, #0]
 801a4c4:	1e2b      	subs	r3, r5, #0
 801a4c6:	bfb9      	ittee	lt
 801a4c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801a4cc:	9303      	strlt	r3, [sp, #12]
 801a4ce:	2300      	movge	r3, #0
 801a4d0:	6033      	strge	r3, [r6, #0]
 801a4d2:	9f03      	ldr	r7, [sp, #12]
 801a4d4:	4b98      	ldr	r3, [pc, #608]	@ (801a738 <_dtoa_r+0x2d0>)
 801a4d6:	bfbc      	itt	lt
 801a4d8:	2201      	movlt	r2, #1
 801a4da:	6032      	strlt	r2, [r6, #0]
 801a4dc:	43bb      	bics	r3, r7
 801a4de:	d112      	bne.n	801a506 <_dtoa_r+0x9e>
 801a4e0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801a4e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 801a4e6:	6013      	str	r3, [r2, #0]
 801a4e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801a4ec:	4323      	orrs	r3, r4
 801a4ee:	f000 854d 	beq.w	801af8c <_dtoa_r+0xb24>
 801a4f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801a4f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801a74c <_dtoa_r+0x2e4>
 801a4f8:	2b00      	cmp	r3, #0
 801a4fa:	f000 854f 	beq.w	801af9c <_dtoa_r+0xb34>
 801a4fe:	f10a 0303 	add.w	r3, sl, #3
 801a502:	f000 bd49 	b.w	801af98 <_dtoa_r+0xb30>
 801a506:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a50a:	2200      	movs	r2, #0
 801a50c:	ec51 0b17 	vmov	r0, r1, d7
 801a510:	2300      	movs	r3, #0
 801a512:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801a516:	f7ed fab7 	bl	8007a88 <__aeabi_dcmpeq>
 801a51a:	4680      	mov	r8, r0
 801a51c:	b158      	cbz	r0, 801a536 <_dtoa_r+0xce>
 801a51e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801a520:	2301      	movs	r3, #1
 801a522:	6013      	str	r3, [r2, #0]
 801a524:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801a526:	b113      	cbz	r3, 801a52e <_dtoa_r+0xc6>
 801a528:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801a52a:	4b84      	ldr	r3, [pc, #528]	@ (801a73c <_dtoa_r+0x2d4>)
 801a52c:	6013      	str	r3, [r2, #0]
 801a52e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801a750 <_dtoa_r+0x2e8>
 801a532:	f000 bd33 	b.w	801af9c <_dtoa_r+0xb34>
 801a536:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801a53a:	aa16      	add	r2, sp, #88	@ 0x58
 801a53c:	a917      	add	r1, sp, #92	@ 0x5c
 801a53e:	4658      	mov	r0, fp
 801a540:	f001 fa3a 	bl	801b9b8 <__d2b>
 801a544:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801a548:	4681      	mov	r9, r0
 801a54a:	2e00      	cmp	r6, #0
 801a54c:	d077      	beq.n	801a63e <_dtoa_r+0x1d6>
 801a54e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a550:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801a554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a558:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801a55c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801a560:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801a564:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801a568:	4619      	mov	r1, r3
 801a56a:	2200      	movs	r2, #0
 801a56c:	4b74      	ldr	r3, [pc, #464]	@ (801a740 <_dtoa_r+0x2d8>)
 801a56e:	f7ec fe6b 	bl	8007248 <__aeabi_dsub>
 801a572:	a369      	add	r3, pc, #420	@ (adr r3, 801a718 <_dtoa_r+0x2b0>)
 801a574:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a578:	f7ed f81e 	bl	80075b8 <__aeabi_dmul>
 801a57c:	a368      	add	r3, pc, #416	@ (adr r3, 801a720 <_dtoa_r+0x2b8>)
 801a57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a582:	f7ec fe63 	bl	800724c <__adddf3>
 801a586:	4604      	mov	r4, r0
 801a588:	4630      	mov	r0, r6
 801a58a:	460d      	mov	r5, r1
 801a58c:	f7ec ffaa 	bl	80074e4 <__aeabi_i2d>
 801a590:	a365      	add	r3, pc, #404	@ (adr r3, 801a728 <_dtoa_r+0x2c0>)
 801a592:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a596:	f7ed f80f 	bl	80075b8 <__aeabi_dmul>
 801a59a:	4602      	mov	r2, r0
 801a59c:	460b      	mov	r3, r1
 801a59e:	4620      	mov	r0, r4
 801a5a0:	4629      	mov	r1, r5
 801a5a2:	f7ec fe53 	bl	800724c <__adddf3>
 801a5a6:	4604      	mov	r4, r0
 801a5a8:	460d      	mov	r5, r1
 801a5aa:	f7ed fab5 	bl	8007b18 <__aeabi_d2iz>
 801a5ae:	2200      	movs	r2, #0
 801a5b0:	4607      	mov	r7, r0
 801a5b2:	2300      	movs	r3, #0
 801a5b4:	4620      	mov	r0, r4
 801a5b6:	4629      	mov	r1, r5
 801a5b8:	f7ed fa70 	bl	8007a9c <__aeabi_dcmplt>
 801a5bc:	b140      	cbz	r0, 801a5d0 <_dtoa_r+0x168>
 801a5be:	4638      	mov	r0, r7
 801a5c0:	f7ec ff90 	bl	80074e4 <__aeabi_i2d>
 801a5c4:	4622      	mov	r2, r4
 801a5c6:	462b      	mov	r3, r5
 801a5c8:	f7ed fa5e 	bl	8007a88 <__aeabi_dcmpeq>
 801a5cc:	b900      	cbnz	r0, 801a5d0 <_dtoa_r+0x168>
 801a5ce:	3f01      	subs	r7, #1
 801a5d0:	2f16      	cmp	r7, #22
 801a5d2:	d851      	bhi.n	801a678 <_dtoa_r+0x210>
 801a5d4:	4b5b      	ldr	r3, [pc, #364]	@ (801a744 <_dtoa_r+0x2dc>)
 801a5d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801a5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801a5e2:	f7ed fa5b 	bl	8007a9c <__aeabi_dcmplt>
 801a5e6:	2800      	cmp	r0, #0
 801a5e8:	d048      	beq.n	801a67c <_dtoa_r+0x214>
 801a5ea:	3f01      	subs	r7, #1
 801a5ec:	2300      	movs	r3, #0
 801a5ee:	9312      	str	r3, [sp, #72]	@ 0x48
 801a5f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801a5f2:	1b9b      	subs	r3, r3, r6
 801a5f4:	1e5a      	subs	r2, r3, #1
 801a5f6:	bf44      	itt	mi
 801a5f8:	f1c3 0801 	rsbmi	r8, r3, #1
 801a5fc:	2300      	movmi	r3, #0
 801a5fe:	9208      	str	r2, [sp, #32]
 801a600:	bf54      	ite	pl
 801a602:	f04f 0800 	movpl.w	r8, #0
 801a606:	9308      	strmi	r3, [sp, #32]
 801a608:	2f00      	cmp	r7, #0
 801a60a:	db39      	blt.n	801a680 <_dtoa_r+0x218>
 801a60c:	9b08      	ldr	r3, [sp, #32]
 801a60e:	970f      	str	r7, [sp, #60]	@ 0x3c
 801a610:	443b      	add	r3, r7
 801a612:	9308      	str	r3, [sp, #32]
 801a614:	2300      	movs	r3, #0
 801a616:	930a      	str	r3, [sp, #40]	@ 0x28
 801a618:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a61a:	2b09      	cmp	r3, #9
 801a61c:	d864      	bhi.n	801a6e8 <_dtoa_r+0x280>
 801a61e:	2b05      	cmp	r3, #5
 801a620:	bfc4      	itt	gt
 801a622:	3b04      	subgt	r3, #4
 801a624:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801a626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a628:	f1a3 0302 	sub.w	r3, r3, #2
 801a62c:	bfcc      	ite	gt
 801a62e:	2400      	movgt	r4, #0
 801a630:	2401      	movle	r4, #1
 801a632:	2b03      	cmp	r3, #3
 801a634:	d863      	bhi.n	801a6fe <_dtoa_r+0x296>
 801a636:	e8df f003 	tbb	[pc, r3]
 801a63a:	372a      	.short	0x372a
 801a63c:	5535      	.short	0x5535
 801a63e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801a642:	441e      	add	r6, r3
 801a644:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801a648:	2b20      	cmp	r3, #32
 801a64a:	bfc1      	itttt	gt
 801a64c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801a650:	409f      	lslgt	r7, r3
 801a652:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801a656:	fa24 f303 	lsrgt.w	r3, r4, r3
 801a65a:	bfd6      	itet	le
 801a65c:	f1c3 0320 	rsble	r3, r3, #32
 801a660:	ea47 0003 	orrgt.w	r0, r7, r3
 801a664:	fa04 f003 	lslle.w	r0, r4, r3
 801a668:	f7ec ff2c 	bl	80074c4 <__aeabi_ui2d>
 801a66c:	2201      	movs	r2, #1
 801a66e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801a672:	3e01      	subs	r6, #1
 801a674:	9214      	str	r2, [sp, #80]	@ 0x50
 801a676:	e777      	b.n	801a568 <_dtoa_r+0x100>
 801a678:	2301      	movs	r3, #1
 801a67a:	e7b8      	b.n	801a5ee <_dtoa_r+0x186>
 801a67c:	9012      	str	r0, [sp, #72]	@ 0x48
 801a67e:	e7b7      	b.n	801a5f0 <_dtoa_r+0x188>
 801a680:	427b      	negs	r3, r7
 801a682:	930a      	str	r3, [sp, #40]	@ 0x28
 801a684:	2300      	movs	r3, #0
 801a686:	eba8 0807 	sub.w	r8, r8, r7
 801a68a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a68c:	e7c4      	b.n	801a618 <_dtoa_r+0x1b0>
 801a68e:	2300      	movs	r3, #0
 801a690:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a692:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a694:	2b00      	cmp	r3, #0
 801a696:	dc35      	bgt.n	801a704 <_dtoa_r+0x29c>
 801a698:	2301      	movs	r3, #1
 801a69a:	9300      	str	r3, [sp, #0]
 801a69c:	9307      	str	r3, [sp, #28]
 801a69e:	461a      	mov	r2, r3
 801a6a0:	920e      	str	r2, [sp, #56]	@ 0x38
 801a6a2:	e00b      	b.n	801a6bc <_dtoa_r+0x254>
 801a6a4:	2301      	movs	r3, #1
 801a6a6:	e7f3      	b.n	801a690 <_dtoa_r+0x228>
 801a6a8:	2300      	movs	r3, #0
 801a6aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a6ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a6ae:	18fb      	adds	r3, r7, r3
 801a6b0:	9300      	str	r3, [sp, #0]
 801a6b2:	3301      	adds	r3, #1
 801a6b4:	2b01      	cmp	r3, #1
 801a6b6:	9307      	str	r3, [sp, #28]
 801a6b8:	bfb8      	it	lt
 801a6ba:	2301      	movlt	r3, #1
 801a6bc:	f8db 001c 	ldr.w	r0, [fp, #28]
 801a6c0:	2100      	movs	r1, #0
 801a6c2:	2204      	movs	r2, #4
 801a6c4:	f102 0514 	add.w	r5, r2, #20
 801a6c8:	429d      	cmp	r5, r3
 801a6ca:	d91f      	bls.n	801a70c <_dtoa_r+0x2a4>
 801a6cc:	6041      	str	r1, [r0, #4]
 801a6ce:	4658      	mov	r0, fp
 801a6d0:	f000 fd8e 	bl	801b1f0 <_Balloc>
 801a6d4:	4682      	mov	sl, r0
 801a6d6:	2800      	cmp	r0, #0
 801a6d8:	d13c      	bne.n	801a754 <_dtoa_r+0x2ec>
 801a6da:	4b1b      	ldr	r3, [pc, #108]	@ (801a748 <_dtoa_r+0x2e0>)
 801a6dc:	4602      	mov	r2, r0
 801a6de:	f240 11af 	movw	r1, #431	@ 0x1af
 801a6e2:	e6d8      	b.n	801a496 <_dtoa_r+0x2e>
 801a6e4:	2301      	movs	r3, #1
 801a6e6:	e7e0      	b.n	801a6aa <_dtoa_r+0x242>
 801a6e8:	2401      	movs	r4, #1
 801a6ea:	2300      	movs	r3, #0
 801a6ec:	9309      	str	r3, [sp, #36]	@ 0x24
 801a6ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 801a6f0:	f04f 33ff 	mov.w	r3, #4294967295
 801a6f4:	9300      	str	r3, [sp, #0]
 801a6f6:	9307      	str	r3, [sp, #28]
 801a6f8:	2200      	movs	r2, #0
 801a6fa:	2312      	movs	r3, #18
 801a6fc:	e7d0      	b.n	801a6a0 <_dtoa_r+0x238>
 801a6fe:	2301      	movs	r3, #1
 801a700:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a702:	e7f5      	b.n	801a6f0 <_dtoa_r+0x288>
 801a704:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a706:	9300      	str	r3, [sp, #0]
 801a708:	9307      	str	r3, [sp, #28]
 801a70a:	e7d7      	b.n	801a6bc <_dtoa_r+0x254>
 801a70c:	3101      	adds	r1, #1
 801a70e:	0052      	lsls	r2, r2, #1
 801a710:	e7d8      	b.n	801a6c4 <_dtoa_r+0x25c>
 801a712:	bf00      	nop
 801a714:	f3af 8000 	nop.w
 801a718:	636f4361 	.word	0x636f4361
 801a71c:	3fd287a7 	.word	0x3fd287a7
 801a720:	8b60c8b3 	.word	0x8b60c8b3
 801a724:	3fc68a28 	.word	0x3fc68a28
 801a728:	509f79fb 	.word	0x509f79fb
 801a72c:	3fd34413 	.word	0x3fd34413
 801a730:	0801e286 	.word	0x0801e286
 801a734:	0801e29d 	.word	0x0801e29d
 801a738:	7ff00000 	.word	0x7ff00000
 801a73c:	0801e251 	.word	0x0801e251
 801a740:	3ff80000 	.word	0x3ff80000
 801a744:	0801e398 	.word	0x0801e398
 801a748:	0801e2f5 	.word	0x0801e2f5
 801a74c:	0801e282 	.word	0x0801e282
 801a750:	0801e250 	.word	0x0801e250
 801a754:	f8db 301c 	ldr.w	r3, [fp, #28]
 801a758:	6018      	str	r0, [r3, #0]
 801a75a:	9b07      	ldr	r3, [sp, #28]
 801a75c:	2b0e      	cmp	r3, #14
 801a75e:	f200 80a4 	bhi.w	801a8aa <_dtoa_r+0x442>
 801a762:	2c00      	cmp	r4, #0
 801a764:	f000 80a1 	beq.w	801a8aa <_dtoa_r+0x442>
 801a768:	2f00      	cmp	r7, #0
 801a76a:	dd33      	ble.n	801a7d4 <_dtoa_r+0x36c>
 801a76c:	4bad      	ldr	r3, [pc, #692]	@ (801aa24 <_dtoa_r+0x5bc>)
 801a76e:	f007 020f 	and.w	r2, r7, #15
 801a772:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a776:	ed93 7b00 	vldr	d7, [r3]
 801a77a:	05f8      	lsls	r0, r7, #23
 801a77c:	ed8d 7b04 	vstr	d7, [sp, #16]
 801a780:	ea4f 1427 	mov.w	r4, r7, asr #4
 801a784:	d516      	bpl.n	801a7b4 <_dtoa_r+0x34c>
 801a786:	4ba8      	ldr	r3, [pc, #672]	@ (801aa28 <_dtoa_r+0x5c0>)
 801a788:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801a78c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801a790:	f7ed f83c 	bl	800780c <__aeabi_ddiv>
 801a794:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a798:	f004 040f 	and.w	r4, r4, #15
 801a79c:	2603      	movs	r6, #3
 801a79e:	4da2      	ldr	r5, [pc, #648]	@ (801aa28 <_dtoa_r+0x5c0>)
 801a7a0:	b954      	cbnz	r4, 801a7b8 <_dtoa_r+0x350>
 801a7a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a7a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a7aa:	f7ed f82f 	bl	800780c <__aeabi_ddiv>
 801a7ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a7b2:	e028      	b.n	801a806 <_dtoa_r+0x39e>
 801a7b4:	2602      	movs	r6, #2
 801a7b6:	e7f2      	b.n	801a79e <_dtoa_r+0x336>
 801a7b8:	07e1      	lsls	r1, r4, #31
 801a7ba:	d508      	bpl.n	801a7ce <_dtoa_r+0x366>
 801a7bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a7c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a7c4:	f7ec fef8 	bl	80075b8 <__aeabi_dmul>
 801a7c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a7cc:	3601      	adds	r6, #1
 801a7ce:	1064      	asrs	r4, r4, #1
 801a7d0:	3508      	adds	r5, #8
 801a7d2:	e7e5      	b.n	801a7a0 <_dtoa_r+0x338>
 801a7d4:	f000 80d2 	beq.w	801a97c <_dtoa_r+0x514>
 801a7d8:	427c      	negs	r4, r7
 801a7da:	4b92      	ldr	r3, [pc, #584]	@ (801aa24 <_dtoa_r+0x5bc>)
 801a7dc:	4d92      	ldr	r5, [pc, #584]	@ (801aa28 <_dtoa_r+0x5c0>)
 801a7de:	f004 020f 	and.w	r2, r4, #15
 801a7e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801a7ee:	f7ec fee3 	bl	80075b8 <__aeabi_dmul>
 801a7f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a7f6:	1124      	asrs	r4, r4, #4
 801a7f8:	2300      	movs	r3, #0
 801a7fa:	2602      	movs	r6, #2
 801a7fc:	2c00      	cmp	r4, #0
 801a7fe:	f040 80b2 	bne.w	801a966 <_dtoa_r+0x4fe>
 801a802:	2b00      	cmp	r3, #0
 801a804:	d1d3      	bne.n	801a7ae <_dtoa_r+0x346>
 801a806:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801a808:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801a80c:	2b00      	cmp	r3, #0
 801a80e:	f000 80b7 	beq.w	801a980 <_dtoa_r+0x518>
 801a812:	4b86      	ldr	r3, [pc, #536]	@ (801aa2c <_dtoa_r+0x5c4>)
 801a814:	2200      	movs	r2, #0
 801a816:	4620      	mov	r0, r4
 801a818:	4629      	mov	r1, r5
 801a81a:	f7ed f93f 	bl	8007a9c <__aeabi_dcmplt>
 801a81e:	2800      	cmp	r0, #0
 801a820:	f000 80ae 	beq.w	801a980 <_dtoa_r+0x518>
 801a824:	9b07      	ldr	r3, [sp, #28]
 801a826:	2b00      	cmp	r3, #0
 801a828:	f000 80aa 	beq.w	801a980 <_dtoa_r+0x518>
 801a82c:	9b00      	ldr	r3, [sp, #0]
 801a82e:	2b00      	cmp	r3, #0
 801a830:	dd37      	ble.n	801a8a2 <_dtoa_r+0x43a>
 801a832:	1e7b      	subs	r3, r7, #1
 801a834:	9304      	str	r3, [sp, #16]
 801a836:	4620      	mov	r0, r4
 801a838:	4b7d      	ldr	r3, [pc, #500]	@ (801aa30 <_dtoa_r+0x5c8>)
 801a83a:	2200      	movs	r2, #0
 801a83c:	4629      	mov	r1, r5
 801a83e:	f7ec febb 	bl	80075b8 <__aeabi_dmul>
 801a842:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a846:	9c00      	ldr	r4, [sp, #0]
 801a848:	3601      	adds	r6, #1
 801a84a:	4630      	mov	r0, r6
 801a84c:	f7ec fe4a 	bl	80074e4 <__aeabi_i2d>
 801a850:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a854:	f7ec feb0 	bl	80075b8 <__aeabi_dmul>
 801a858:	4b76      	ldr	r3, [pc, #472]	@ (801aa34 <_dtoa_r+0x5cc>)
 801a85a:	2200      	movs	r2, #0
 801a85c:	f7ec fcf6 	bl	800724c <__adddf3>
 801a860:	4605      	mov	r5, r0
 801a862:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801a866:	2c00      	cmp	r4, #0
 801a868:	f040 808d 	bne.w	801a986 <_dtoa_r+0x51e>
 801a86c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a870:	4b71      	ldr	r3, [pc, #452]	@ (801aa38 <_dtoa_r+0x5d0>)
 801a872:	2200      	movs	r2, #0
 801a874:	f7ec fce8 	bl	8007248 <__aeabi_dsub>
 801a878:	4602      	mov	r2, r0
 801a87a:	460b      	mov	r3, r1
 801a87c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801a880:	462a      	mov	r2, r5
 801a882:	4633      	mov	r3, r6
 801a884:	f7ed f928 	bl	8007ad8 <__aeabi_dcmpgt>
 801a888:	2800      	cmp	r0, #0
 801a88a:	f040 828b 	bne.w	801ada4 <_dtoa_r+0x93c>
 801a88e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a892:	462a      	mov	r2, r5
 801a894:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801a898:	f7ed f900 	bl	8007a9c <__aeabi_dcmplt>
 801a89c:	2800      	cmp	r0, #0
 801a89e:	f040 8128 	bne.w	801aaf2 <_dtoa_r+0x68a>
 801a8a2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801a8a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801a8aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801a8ac:	2b00      	cmp	r3, #0
 801a8ae:	f2c0 815a 	blt.w	801ab66 <_dtoa_r+0x6fe>
 801a8b2:	2f0e      	cmp	r7, #14
 801a8b4:	f300 8157 	bgt.w	801ab66 <_dtoa_r+0x6fe>
 801a8b8:	4b5a      	ldr	r3, [pc, #360]	@ (801aa24 <_dtoa_r+0x5bc>)
 801a8ba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801a8be:	ed93 7b00 	vldr	d7, [r3]
 801a8c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a8c4:	2b00      	cmp	r3, #0
 801a8c6:	ed8d 7b00 	vstr	d7, [sp]
 801a8ca:	da03      	bge.n	801a8d4 <_dtoa_r+0x46c>
 801a8cc:	9b07      	ldr	r3, [sp, #28]
 801a8ce:	2b00      	cmp	r3, #0
 801a8d0:	f340 8101 	ble.w	801aad6 <_dtoa_r+0x66e>
 801a8d4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801a8d8:	4656      	mov	r6, sl
 801a8da:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a8de:	4620      	mov	r0, r4
 801a8e0:	4629      	mov	r1, r5
 801a8e2:	f7ec ff93 	bl	800780c <__aeabi_ddiv>
 801a8e6:	f7ed f917 	bl	8007b18 <__aeabi_d2iz>
 801a8ea:	4680      	mov	r8, r0
 801a8ec:	f7ec fdfa 	bl	80074e4 <__aeabi_i2d>
 801a8f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a8f4:	f7ec fe60 	bl	80075b8 <__aeabi_dmul>
 801a8f8:	4602      	mov	r2, r0
 801a8fa:	460b      	mov	r3, r1
 801a8fc:	4620      	mov	r0, r4
 801a8fe:	4629      	mov	r1, r5
 801a900:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801a904:	f7ec fca0 	bl	8007248 <__aeabi_dsub>
 801a908:	f806 4b01 	strb.w	r4, [r6], #1
 801a90c:	9d07      	ldr	r5, [sp, #28]
 801a90e:	eba6 040a 	sub.w	r4, r6, sl
 801a912:	42a5      	cmp	r5, r4
 801a914:	4602      	mov	r2, r0
 801a916:	460b      	mov	r3, r1
 801a918:	f040 8117 	bne.w	801ab4a <_dtoa_r+0x6e2>
 801a91c:	f7ec fc96 	bl	800724c <__adddf3>
 801a920:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a924:	4604      	mov	r4, r0
 801a926:	460d      	mov	r5, r1
 801a928:	f7ed f8d6 	bl	8007ad8 <__aeabi_dcmpgt>
 801a92c:	2800      	cmp	r0, #0
 801a92e:	f040 80f9 	bne.w	801ab24 <_dtoa_r+0x6bc>
 801a932:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a936:	4620      	mov	r0, r4
 801a938:	4629      	mov	r1, r5
 801a93a:	f7ed f8a5 	bl	8007a88 <__aeabi_dcmpeq>
 801a93e:	b118      	cbz	r0, 801a948 <_dtoa_r+0x4e0>
 801a940:	f018 0f01 	tst.w	r8, #1
 801a944:	f040 80ee 	bne.w	801ab24 <_dtoa_r+0x6bc>
 801a948:	4649      	mov	r1, r9
 801a94a:	4658      	mov	r0, fp
 801a94c:	f000 fc90 	bl	801b270 <_Bfree>
 801a950:	2300      	movs	r3, #0
 801a952:	7033      	strb	r3, [r6, #0]
 801a954:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a956:	3701      	adds	r7, #1
 801a958:	601f      	str	r7, [r3, #0]
 801a95a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801a95c:	2b00      	cmp	r3, #0
 801a95e:	f000 831d 	beq.w	801af9c <_dtoa_r+0xb34>
 801a962:	601e      	str	r6, [r3, #0]
 801a964:	e31a      	b.n	801af9c <_dtoa_r+0xb34>
 801a966:	07e2      	lsls	r2, r4, #31
 801a968:	d505      	bpl.n	801a976 <_dtoa_r+0x50e>
 801a96a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a96e:	f7ec fe23 	bl	80075b8 <__aeabi_dmul>
 801a972:	3601      	adds	r6, #1
 801a974:	2301      	movs	r3, #1
 801a976:	1064      	asrs	r4, r4, #1
 801a978:	3508      	adds	r5, #8
 801a97a:	e73f      	b.n	801a7fc <_dtoa_r+0x394>
 801a97c:	2602      	movs	r6, #2
 801a97e:	e742      	b.n	801a806 <_dtoa_r+0x39e>
 801a980:	9c07      	ldr	r4, [sp, #28]
 801a982:	9704      	str	r7, [sp, #16]
 801a984:	e761      	b.n	801a84a <_dtoa_r+0x3e2>
 801a986:	4b27      	ldr	r3, [pc, #156]	@ (801aa24 <_dtoa_r+0x5bc>)
 801a988:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801a98a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a98e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801a992:	4454      	add	r4, sl
 801a994:	2900      	cmp	r1, #0
 801a996:	d053      	beq.n	801aa40 <_dtoa_r+0x5d8>
 801a998:	4928      	ldr	r1, [pc, #160]	@ (801aa3c <_dtoa_r+0x5d4>)
 801a99a:	2000      	movs	r0, #0
 801a99c:	f7ec ff36 	bl	800780c <__aeabi_ddiv>
 801a9a0:	4633      	mov	r3, r6
 801a9a2:	462a      	mov	r2, r5
 801a9a4:	f7ec fc50 	bl	8007248 <__aeabi_dsub>
 801a9a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801a9ac:	4656      	mov	r6, sl
 801a9ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a9b2:	f7ed f8b1 	bl	8007b18 <__aeabi_d2iz>
 801a9b6:	4605      	mov	r5, r0
 801a9b8:	f7ec fd94 	bl	80074e4 <__aeabi_i2d>
 801a9bc:	4602      	mov	r2, r0
 801a9be:	460b      	mov	r3, r1
 801a9c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a9c4:	f7ec fc40 	bl	8007248 <__aeabi_dsub>
 801a9c8:	3530      	adds	r5, #48	@ 0x30
 801a9ca:	4602      	mov	r2, r0
 801a9cc:	460b      	mov	r3, r1
 801a9ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801a9d2:	f806 5b01 	strb.w	r5, [r6], #1
 801a9d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801a9da:	f7ed f85f 	bl	8007a9c <__aeabi_dcmplt>
 801a9de:	2800      	cmp	r0, #0
 801a9e0:	d171      	bne.n	801aac6 <_dtoa_r+0x65e>
 801a9e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a9e6:	4911      	ldr	r1, [pc, #68]	@ (801aa2c <_dtoa_r+0x5c4>)
 801a9e8:	2000      	movs	r0, #0
 801a9ea:	f7ec fc2d 	bl	8007248 <__aeabi_dsub>
 801a9ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801a9f2:	f7ed f853 	bl	8007a9c <__aeabi_dcmplt>
 801a9f6:	2800      	cmp	r0, #0
 801a9f8:	f040 8095 	bne.w	801ab26 <_dtoa_r+0x6be>
 801a9fc:	42a6      	cmp	r6, r4
 801a9fe:	f43f af50 	beq.w	801a8a2 <_dtoa_r+0x43a>
 801aa02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801aa06:	4b0a      	ldr	r3, [pc, #40]	@ (801aa30 <_dtoa_r+0x5c8>)
 801aa08:	2200      	movs	r2, #0
 801aa0a:	f7ec fdd5 	bl	80075b8 <__aeabi_dmul>
 801aa0e:	4b08      	ldr	r3, [pc, #32]	@ (801aa30 <_dtoa_r+0x5c8>)
 801aa10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801aa14:	2200      	movs	r2, #0
 801aa16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801aa1a:	f7ec fdcd 	bl	80075b8 <__aeabi_dmul>
 801aa1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801aa22:	e7c4      	b.n	801a9ae <_dtoa_r+0x546>
 801aa24:	0801e398 	.word	0x0801e398
 801aa28:	0801e370 	.word	0x0801e370
 801aa2c:	3ff00000 	.word	0x3ff00000
 801aa30:	40240000 	.word	0x40240000
 801aa34:	401c0000 	.word	0x401c0000
 801aa38:	40140000 	.word	0x40140000
 801aa3c:	3fe00000 	.word	0x3fe00000
 801aa40:	4631      	mov	r1, r6
 801aa42:	4628      	mov	r0, r5
 801aa44:	f7ec fdb8 	bl	80075b8 <__aeabi_dmul>
 801aa48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801aa4c:	9415      	str	r4, [sp, #84]	@ 0x54
 801aa4e:	4656      	mov	r6, sl
 801aa50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801aa54:	f7ed f860 	bl	8007b18 <__aeabi_d2iz>
 801aa58:	4605      	mov	r5, r0
 801aa5a:	f7ec fd43 	bl	80074e4 <__aeabi_i2d>
 801aa5e:	4602      	mov	r2, r0
 801aa60:	460b      	mov	r3, r1
 801aa62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801aa66:	f7ec fbef 	bl	8007248 <__aeabi_dsub>
 801aa6a:	3530      	adds	r5, #48	@ 0x30
 801aa6c:	f806 5b01 	strb.w	r5, [r6], #1
 801aa70:	4602      	mov	r2, r0
 801aa72:	460b      	mov	r3, r1
 801aa74:	42a6      	cmp	r6, r4
 801aa76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801aa7a:	f04f 0200 	mov.w	r2, #0
 801aa7e:	d124      	bne.n	801aaca <_dtoa_r+0x662>
 801aa80:	4bac      	ldr	r3, [pc, #688]	@ (801ad34 <_dtoa_r+0x8cc>)
 801aa82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801aa86:	f7ec fbe1 	bl	800724c <__adddf3>
 801aa8a:	4602      	mov	r2, r0
 801aa8c:	460b      	mov	r3, r1
 801aa8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801aa92:	f7ed f821 	bl	8007ad8 <__aeabi_dcmpgt>
 801aa96:	2800      	cmp	r0, #0
 801aa98:	d145      	bne.n	801ab26 <_dtoa_r+0x6be>
 801aa9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801aa9e:	49a5      	ldr	r1, [pc, #660]	@ (801ad34 <_dtoa_r+0x8cc>)
 801aaa0:	2000      	movs	r0, #0
 801aaa2:	f7ec fbd1 	bl	8007248 <__aeabi_dsub>
 801aaa6:	4602      	mov	r2, r0
 801aaa8:	460b      	mov	r3, r1
 801aaaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801aaae:	f7ec fff5 	bl	8007a9c <__aeabi_dcmplt>
 801aab2:	2800      	cmp	r0, #0
 801aab4:	f43f aef5 	beq.w	801a8a2 <_dtoa_r+0x43a>
 801aab8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801aaba:	1e73      	subs	r3, r6, #1
 801aabc:	9315      	str	r3, [sp, #84]	@ 0x54
 801aabe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801aac2:	2b30      	cmp	r3, #48	@ 0x30
 801aac4:	d0f8      	beq.n	801aab8 <_dtoa_r+0x650>
 801aac6:	9f04      	ldr	r7, [sp, #16]
 801aac8:	e73e      	b.n	801a948 <_dtoa_r+0x4e0>
 801aaca:	4b9b      	ldr	r3, [pc, #620]	@ (801ad38 <_dtoa_r+0x8d0>)
 801aacc:	f7ec fd74 	bl	80075b8 <__aeabi_dmul>
 801aad0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801aad4:	e7bc      	b.n	801aa50 <_dtoa_r+0x5e8>
 801aad6:	d10c      	bne.n	801aaf2 <_dtoa_r+0x68a>
 801aad8:	4b98      	ldr	r3, [pc, #608]	@ (801ad3c <_dtoa_r+0x8d4>)
 801aada:	2200      	movs	r2, #0
 801aadc:	e9dd 0100 	ldrd	r0, r1, [sp]
 801aae0:	f7ec fd6a 	bl	80075b8 <__aeabi_dmul>
 801aae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801aae8:	f7ec ffec 	bl	8007ac4 <__aeabi_dcmpge>
 801aaec:	2800      	cmp	r0, #0
 801aaee:	f000 8157 	beq.w	801ada0 <_dtoa_r+0x938>
 801aaf2:	2400      	movs	r4, #0
 801aaf4:	4625      	mov	r5, r4
 801aaf6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801aaf8:	43db      	mvns	r3, r3
 801aafa:	9304      	str	r3, [sp, #16]
 801aafc:	4656      	mov	r6, sl
 801aafe:	2700      	movs	r7, #0
 801ab00:	4621      	mov	r1, r4
 801ab02:	4658      	mov	r0, fp
 801ab04:	f000 fbb4 	bl	801b270 <_Bfree>
 801ab08:	2d00      	cmp	r5, #0
 801ab0a:	d0dc      	beq.n	801aac6 <_dtoa_r+0x65e>
 801ab0c:	b12f      	cbz	r7, 801ab1a <_dtoa_r+0x6b2>
 801ab0e:	42af      	cmp	r7, r5
 801ab10:	d003      	beq.n	801ab1a <_dtoa_r+0x6b2>
 801ab12:	4639      	mov	r1, r7
 801ab14:	4658      	mov	r0, fp
 801ab16:	f000 fbab 	bl	801b270 <_Bfree>
 801ab1a:	4629      	mov	r1, r5
 801ab1c:	4658      	mov	r0, fp
 801ab1e:	f000 fba7 	bl	801b270 <_Bfree>
 801ab22:	e7d0      	b.n	801aac6 <_dtoa_r+0x65e>
 801ab24:	9704      	str	r7, [sp, #16]
 801ab26:	4633      	mov	r3, r6
 801ab28:	461e      	mov	r6, r3
 801ab2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ab2e:	2a39      	cmp	r2, #57	@ 0x39
 801ab30:	d107      	bne.n	801ab42 <_dtoa_r+0x6da>
 801ab32:	459a      	cmp	sl, r3
 801ab34:	d1f8      	bne.n	801ab28 <_dtoa_r+0x6c0>
 801ab36:	9a04      	ldr	r2, [sp, #16]
 801ab38:	3201      	adds	r2, #1
 801ab3a:	9204      	str	r2, [sp, #16]
 801ab3c:	2230      	movs	r2, #48	@ 0x30
 801ab3e:	f88a 2000 	strb.w	r2, [sl]
 801ab42:	781a      	ldrb	r2, [r3, #0]
 801ab44:	3201      	adds	r2, #1
 801ab46:	701a      	strb	r2, [r3, #0]
 801ab48:	e7bd      	b.n	801aac6 <_dtoa_r+0x65e>
 801ab4a:	4b7b      	ldr	r3, [pc, #492]	@ (801ad38 <_dtoa_r+0x8d0>)
 801ab4c:	2200      	movs	r2, #0
 801ab4e:	f7ec fd33 	bl	80075b8 <__aeabi_dmul>
 801ab52:	2200      	movs	r2, #0
 801ab54:	2300      	movs	r3, #0
 801ab56:	4604      	mov	r4, r0
 801ab58:	460d      	mov	r5, r1
 801ab5a:	f7ec ff95 	bl	8007a88 <__aeabi_dcmpeq>
 801ab5e:	2800      	cmp	r0, #0
 801ab60:	f43f aebb 	beq.w	801a8da <_dtoa_r+0x472>
 801ab64:	e6f0      	b.n	801a948 <_dtoa_r+0x4e0>
 801ab66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801ab68:	2a00      	cmp	r2, #0
 801ab6a:	f000 80db 	beq.w	801ad24 <_dtoa_r+0x8bc>
 801ab6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ab70:	2a01      	cmp	r2, #1
 801ab72:	f300 80bf 	bgt.w	801acf4 <_dtoa_r+0x88c>
 801ab76:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ab78:	2a00      	cmp	r2, #0
 801ab7a:	f000 80b7 	beq.w	801acec <_dtoa_r+0x884>
 801ab7e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801ab82:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801ab84:	4646      	mov	r6, r8
 801ab86:	9a08      	ldr	r2, [sp, #32]
 801ab88:	2101      	movs	r1, #1
 801ab8a:	441a      	add	r2, r3
 801ab8c:	4658      	mov	r0, fp
 801ab8e:	4498      	add	r8, r3
 801ab90:	9208      	str	r2, [sp, #32]
 801ab92:	f000 fc6b 	bl	801b46c <__i2b>
 801ab96:	4605      	mov	r5, r0
 801ab98:	b15e      	cbz	r6, 801abb2 <_dtoa_r+0x74a>
 801ab9a:	9b08      	ldr	r3, [sp, #32]
 801ab9c:	2b00      	cmp	r3, #0
 801ab9e:	dd08      	ble.n	801abb2 <_dtoa_r+0x74a>
 801aba0:	42b3      	cmp	r3, r6
 801aba2:	9a08      	ldr	r2, [sp, #32]
 801aba4:	bfa8      	it	ge
 801aba6:	4633      	movge	r3, r6
 801aba8:	eba8 0803 	sub.w	r8, r8, r3
 801abac:	1af6      	subs	r6, r6, r3
 801abae:	1ad3      	subs	r3, r2, r3
 801abb0:	9308      	str	r3, [sp, #32]
 801abb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801abb4:	b1f3      	cbz	r3, 801abf4 <_dtoa_r+0x78c>
 801abb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801abb8:	2b00      	cmp	r3, #0
 801abba:	f000 80b7 	beq.w	801ad2c <_dtoa_r+0x8c4>
 801abbe:	b18c      	cbz	r4, 801abe4 <_dtoa_r+0x77c>
 801abc0:	4629      	mov	r1, r5
 801abc2:	4622      	mov	r2, r4
 801abc4:	4658      	mov	r0, fp
 801abc6:	f000 fd11 	bl	801b5ec <__pow5mult>
 801abca:	464a      	mov	r2, r9
 801abcc:	4601      	mov	r1, r0
 801abce:	4605      	mov	r5, r0
 801abd0:	4658      	mov	r0, fp
 801abd2:	f000 fc61 	bl	801b498 <__multiply>
 801abd6:	4649      	mov	r1, r9
 801abd8:	9004      	str	r0, [sp, #16]
 801abda:	4658      	mov	r0, fp
 801abdc:	f000 fb48 	bl	801b270 <_Bfree>
 801abe0:	9b04      	ldr	r3, [sp, #16]
 801abe2:	4699      	mov	r9, r3
 801abe4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801abe6:	1b1a      	subs	r2, r3, r4
 801abe8:	d004      	beq.n	801abf4 <_dtoa_r+0x78c>
 801abea:	4649      	mov	r1, r9
 801abec:	4658      	mov	r0, fp
 801abee:	f000 fcfd 	bl	801b5ec <__pow5mult>
 801abf2:	4681      	mov	r9, r0
 801abf4:	2101      	movs	r1, #1
 801abf6:	4658      	mov	r0, fp
 801abf8:	f000 fc38 	bl	801b46c <__i2b>
 801abfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801abfe:	4604      	mov	r4, r0
 801ac00:	2b00      	cmp	r3, #0
 801ac02:	f000 81cf 	beq.w	801afa4 <_dtoa_r+0xb3c>
 801ac06:	461a      	mov	r2, r3
 801ac08:	4601      	mov	r1, r0
 801ac0a:	4658      	mov	r0, fp
 801ac0c:	f000 fcee 	bl	801b5ec <__pow5mult>
 801ac10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ac12:	2b01      	cmp	r3, #1
 801ac14:	4604      	mov	r4, r0
 801ac16:	f300 8095 	bgt.w	801ad44 <_dtoa_r+0x8dc>
 801ac1a:	9b02      	ldr	r3, [sp, #8]
 801ac1c:	2b00      	cmp	r3, #0
 801ac1e:	f040 8087 	bne.w	801ad30 <_dtoa_r+0x8c8>
 801ac22:	9b03      	ldr	r3, [sp, #12]
 801ac24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ac28:	2b00      	cmp	r3, #0
 801ac2a:	f040 8089 	bne.w	801ad40 <_dtoa_r+0x8d8>
 801ac2e:	9b03      	ldr	r3, [sp, #12]
 801ac30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801ac34:	0d1b      	lsrs	r3, r3, #20
 801ac36:	051b      	lsls	r3, r3, #20
 801ac38:	b12b      	cbz	r3, 801ac46 <_dtoa_r+0x7de>
 801ac3a:	9b08      	ldr	r3, [sp, #32]
 801ac3c:	3301      	adds	r3, #1
 801ac3e:	9308      	str	r3, [sp, #32]
 801ac40:	f108 0801 	add.w	r8, r8, #1
 801ac44:	2301      	movs	r3, #1
 801ac46:	930a      	str	r3, [sp, #40]	@ 0x28
 801ac48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ac4a:	2b00      	cmp	r3, #0
 801ac4c:	f000 81b0 	beq.w	801afb0 <_dtoa_r+0xb48>
 801ac50:	6923      	ldr	r3, [r4, #16]
 801ac52:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801ac56:	6918      	ldr	r0, [r3, #16]
 801ac58:	f000 fbbc 	bl	801b3d4 <__hi0bits>
 801ac5c:	f1c0 0020 	rsb	r0, r0, #32
 801ac60:	9b08      	ldr	r3, [sp, #32]
 801ac62:	4418      	add	r0, r3
 801ac64:	f010 001f 	ands.w	r0, r0, #31
 801ac68:	d077      	beq.n	801ad5a <_dtoa_r+0x8f2>
 801ac6a:	f1c0 0320 	rsb	r3, r0, #32
 801ac6e:	2b04      	cmp	r3, #4
 801ac70:	dd6b      	ble.n	801ad4a <_dtoa_r+0x8e2>
 801ac72:	9b08      	ldr	r3, [sp, #32]
 801ac74:	f1c0 001c 	rsb	r0, r0, #28
 801ac78:	4403      	add	r3, r0
 801ac7a:	4480      	add	r8, r0
 801ac7c:	4406      	add	r6, r0
 801ac7e:	9308      	str	r3, [sp, #32]
 801ac80:	f1b8 0f00 	cmp.w	r8, #0
 801ac84:	dd05      	ble.n	801ac92 <_dtoa_r+0x82a>
 801ac86:	4649      	mov	r1, r9
 801ac88:	4642      	mov	r2, r8
 801ac8a:	4658      	mov	r0, fp
 801ac8c:	f000 fd08 	bl	801b6a0 <__lshift>
 801ac90:	4681      	mov	r9, r0
 801ac92:	9b08      	ldr	r3, [sp, #32]
 801ac94:	2b00      	cmp	r3, #0
 801ac96:	dd05      	ble.n	801aca4 <_dtoa_r+0x83c>
 801ac98:	4621      	mov	r1, r4
 801ac9a:	461a      	mov	r2, r3
 801ac9c:	4658      	mov	r0, fp
 801ac9e:	f000 fcff 	bl	801b6a0 <__lshift>
 801aca2:	4604      	mov	r4, r0
 801aca4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801aca6:	2b00      	cmp	r3, #0
 801aca8:	d059      	beq.n	801ad5e <_dtoa_r+0x8f6>
 801acaa:	4621      	mov	r1, r4
 801acac:	4648      	mov	r0, r9
 801acae:	f000 fd63 	bl	801b778 <__mcmp>
 801acb2:	2800      	cmp	r0, #0
 801acb4:	da53      	bge.n	801ad5e <_dtoa_r+0x8f6>
 801acb6:	1e7b      	subs	r3, r7, #1
 801acb8:	9304      	str	r3, [sp, #16]
 801acba:	4649      	mov	r1, r9
 801acbc:	2300      	movs	r3, #0
 801acbe:	220a      	movs	r2, #10
 801acc0:	4658      	mov	r0, fp
 801acc2:	f000 faf7 	bl	801b2b4 <__multadd>
 801acc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801acc8:	4681      	mov	r9, r0
 801acca:	2b00      	cmp	r3, #0
 801accc:	f000 8172 	beq.w	801afb4 <_dtoa_r+0xb4c>
 801acd0:	2300      	movs	r3, #0
 801acd2:	4629      	mov	r1, r5
 801acd4:	220a      	movs	r2, #10
 801acd6:	4658      	mov	r0, fp
 801acd8:	f000 faec 	bl	801b2b4 <__multadd>
 801acdc:	9b00      	ldr	r3, [sp, #0]
 801acde:	2b00      	cmp	r3, #0
 801ace0:	4605      	mov	r5, r0
 801ace2:	dc67      	bgt.n	801adb4 <_dtoa_r+0x94c>
 801ace4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ace6:	2b02      	cmp	r3, #2
 801ace8:	dc41      	bgt.n	801ad6e <_dtoa_r+0x906>
 801acea:	e063      	b.n	801adb4 <_dtoa_r+0x94c>
 801acec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801acee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801acf2:	e746      	b.n	801ab82 <_dtoa_r+0x71a>
 801acf4:	9b07      	ldr	r3, [sp, #28]
 801acf6:	1e5c      	subs	r4, r3, #1
 801acf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801acfa:	42a3      	cmp	r3, r4
 801acfc:	bfbf      	itttt	lt
 801acfe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801ad00:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801ad02:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801ad04:	1ae3      	sublt	r3, r4, r3
 801ad06:	bfb4      	ite	lt
 801ad08:	18d2      	addlt	r2, r2, r3
 801ad0a:	1b1c      	subge	r4, r3, r4
 801ad0c:	9b07      	ldr	r3, [sp, #28]
 801ad0e:	bfbc      	itt	lt
 801ad10:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801ad12:	2400      	movlt	r4, #0
 801ad14:	2b00      	cmp	r3, #0
 801ad16:	bfb5      	itete	lt
 801ad18:	eba8 0603 	sublt.w	r6, r8, r3
 801ad1c:	9b07      	ldrge	r3, [sp, #28]
 801ad1e:	2300      	movlt	r3, #0
 801ad20:	4646      	movge	r6, r8
 801ad22:	e730      	b.n	801ab86 <_dtoa_r+0x71e>
 801ad24:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801ad26:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801ad28:	4646      	mov	r6, r8
 801ad2a:	e735      	b.n	801ab98 <_dtoa_r+0x730>
 801ad2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ad2e:	e75c      	b.n	801abea <_dtoa_r+0x782>
 801ad30:	2300      	movs	r3, #0
 801ad32:	e788      	b.n	801ac46 <_dtoa_r+0x7de>
 801ad34:	3fe00000 	.word	0x3fe00000
 801ad38:	40240000 	.word	0x40240000
 801ad3c:	40140000 	.word	0x40140000
 801ad40:	9b02      	ldr	r3, [sp, #8]
 801ad42:	e780      	b.n	801ac46 <_dtoa_r+0x7de>
 801ad44:	2300      	movs	r3, #0
 801ad46:	930a      	str	r3, [sp, #40]	@ 0x28
 801ad48:	e782      	b.n	801ac50 <_dtoa_r+0x7e8>
 801ad4a:	d099      	beq.n	801ac80 <_dtoa_r+0x818>
 801ad4c:	9a08      	ldr	r2, [sp, #32]
 801ad4e:	331c      	adds	r3, #28
 801ad50:	441a      	add	r2, r3
 801ad52:	4498      	add	r8, r3
 801ad54:	441e      	add	r6, r3
 801ad56:	9208      	str	r2, [sp, #32]
 801ad58:	e792      	b.n	801ac80 <_dtoa_r+0x818>
 801ad5a:	4603      	mov	r3, r0
 801ad5c:	e7f6      	b.n	801ad4c <_dtoa_r+0x8e4>
 801ad5e:	9b07      	ldr	r3, [sp, #28]
 801ad60:	9704      	str	r7, [sp, #16]
 801ad62:	2b00      	cmp	r3, #0
 801ad64:	dc20      	bgt.n	801ada8 <_dtoa_r+0x940>
 801ad66:	9300      	str	r3, [sp, #0]
 801ad68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ad6a:	2b02      	cmp	r3, #2
 801ad6c:	dd1e      	ble.n	801adac <_dtoa_r+0x944>
 801ad6e:	9b00      	ldr	r3, [sp, #0]
 801ad70:	2b00      	cmp	r3, #0
 801ad72:	f47f aec0 	bne.w	801aaf6 <_dtoa_r+0x68e>
 801ad76:	4621      	mov	r1, r4
 801ad78:	2205      	movs	r2, #5
 801ad7a:	4658      	mov	r0, fp
 801ad7c:	f000 fa9a 	bl	801b2b4 <__multadd>
 801ad80:	4601      	mov	r1, r0
 801ad82:	4604      	mov	r4, r0
 801ad84:	4648      	mov	r0, r9
 801ad86:	f000 fcf7 	bl	801b778 <__mcmp>
 801ad8a:	2800      	cmp	r0, #0
 801ad8c:	f77f aeb3 	ble.w	801aaf6 <_dtoa_r+0x68e>
 801ad90:	4656      	mov	r6, sl
 801ad92:	2331      	movs	r3, #49	@ 0x31
 801ad94:	f806 3b01 	strb.w	r3, [r6], #1
 801ad98:	9b04      	ldr	r3, [sp, #16]
 801ad9a:	3301      	adds	r3, #1
 801ad9c:	9304      	str	r3, [sp, #16]
 801ad9e:	e6ae      	b.n	801aafe <_dtoa_r+0x696>
 801ada0:	9c07      	ldr	r4, [sp, #28]
 801ada2:	9704      	str	r7, [sp, #16]
 801ada4:	4625      	mov	r5, r4
 801ada6:	e7f3      	b.n	801ad90 <_dtoa_r+0x928>
 801ada8:	9b07      	ldr	r3, [sp, #28]
 801adaa:	9300      	str	r3, [sp, #0]
 801adac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801adae:	2b00      	cmp	r3, #0
 801adb0:	f000 8104 	beq.w	801afbc <_dtoa_r+0xb54>
 801adb4:	2e00      	cmp	r6, #0
 801adb6:	dd05      	ble.n	801adc4 <_dtoa_r+0x95c>
 801adb8:	4629      	mov	r1, r5
 801adba:	4632      	mov	r2, r6
 801adbc:	4658      	mov	r0, fp
 801adbe:	f000 fc6f 	bl	801b6a0 <__lshift>
 801adc2:	4605      	mov	r5, r0
 801adc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801adc6:	2b00      	cmp	r3, #0
 801adc8:	d05a      	beq.n	801ae80 <_dtoa_r+0xa18>
 801adca:	6869      	ldr	r1, [r5, #4]
 801adcc:	4658      	mov	r0, fp
 801adce:	f000 fa0f 	bl	801b1f0 <_Balloc>
 801add2:	4606      	mov	r6, r0
 801add4:	b928      	cbnz	r0, 801ade2 <_dtoa_r+0x97a>
 801add6:	4b84      	ldr	r3, [pc, #528]	@ (801afe8 <_dtoa_r+0xb80>)
 801add8:	4602      	mov	r2, r0
 801adda:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801adde:	f7ff bb5a 	b.w	801a496 <_dtoa_r+0x2e>
 801ade2:	692a      	ldr	r2, [r5, #16]
 801ade4:	3202      	adds	r2, #2
 801ade6:	0092      	lsls	r2, r2, #2
 801ade8:	f105 010c 	add.w	r1, r5, #12
 801adec:	300c      	adds	r0, #12
 801adee:	f7ff fa9e 	bl	801a32e <memcpy>
 801adf2:	2201      	movs	r2, #1
 801adf4:	4631      	mov	r1, r6
 801adf6:	4658      	mov	r0, fp
 801adf8:	f000 fc52 	bl	801b6a0 <__lshift>
 801adfc:	f10a 0301 	add.w	r3, sl, #1
 801ae00:	9307      	str	r3, [sp, #28]
 801ae02:	9b00      	ldr	r3, [sp, #0]
 801ae04:	4453      	add	r3, sl
 801ae06:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ae08:	9b02      	ldr	r3, [sp, #8]
 801ae0a:	f003 0301 	and.w	r3, r3, #1
 801ae0e:	462f      	mov	r7, r5
 801ae10:	930a      	str	r3, [sp, #40]	@ 0x28
 801ae12:	4605      	mov	r5, r0
 801ae14:	9b07      	ldr	r3, [sp, #28]
 801ae16:	4621      	mov	r1, r4
 801ae18:	3b01      	subs	r3, #1
 801ae1a:	4648      	mov	r0, r9
 801ae1c:	9300      	str	r3, [sp, #0]
 801ae1e:	f7ff fa9b 	bl	801a358 <quorem>
 801ae22:	4639      	mov	r1, r7
 801ae24:	9002      	str	r0, [sp, #8]
 801ae26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801ae2a:	4648      	mov	r0, r9
 801ae2c:	f000 fca4 	bl	801b778 <__mcmp>
 801ae30:	462a      	mov	r2, r5
 801ae32:	9008      	str	r0, [sp, #32]
 801ae34:	4621      	mov	r1, r4
 801ae36:	4658      	mov	r0, fp
 801ae38:	f000 fcba 	bl	801b7b0 <__mdiff>
 801ae3c:	68c2      	ldr	r2, [r0, #12]
 801ae3e:	4606      	mov	r6, r0
 801ae40:	bb02      	cbnz	r2, 801ae84 <_dtoa_r+0xa1c>
 801ae42:	4601      	mov	r1, r0
 801ae44:	4648      	mov	r0, r9
 801ae46:	f000 fc97 	bl	801b778 <__mcmp>
 801ae4a:	4602      	mov	r2, r0
 801ae4c:	4631      	mov	r1, r6
 801ae4e:	4658      	mov	r0, fp
 801ae50:	920e      	str	r2, [sp, #56]	@ 0x38
 801ae52:	f000 fa0d 	bl	801b270 <_Bfree>
 801ae56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ae58:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ae5a:	9e07      	ldr	r6, [sp, #28]
 801ae5c:	ea43 0102 	orr.w	r1, r3, r2
 801ae60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ae62:	4319      	orrs	r1, r3
 801ae64:	d110      	bne.n	801ae88 <_dtoa_r+0xa20>
 801ae66:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801ae6a:	d029      	beq.n	801aec0 <_dtoa_r+0xa58>
 801ae6c:	9b08      	ldr	r3, [sp, #32]
 801ae6e:	2b00      	cmp	r3, #0
 801ae70:	dd02      	ble.n	801ae78 <_dtoa_r+0xa10>
 801ae72:	9b02      	ldr	r3, [sp, #8]
 801ae74:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801ae78:	9b00      	ldr	r3, [sp, #0]
 801ae7a:	f883 8000 	strb.w	r8, [r3]
 801ae7e:	e63f      	b.n	801ab00 <_dtoa_r+0x698>
 801ae80:	4628      	mov	r0, r5
 801ae82:	e7bb      	b.n	801adfc <_dtoa_r+0x994>
 801ae84:	2201      	movs	r2, #1
 801ae86:	e7e1      	b.n	801ae4c <_dtoa_r+0x9e4>
 801ae88:	9b08      	ldr	r3, [sp, #32]
 801ae8a:	2b00      	cmp	r3, #0
 801ae8c:	db04      	blt.n	801ae98 <_dtoa_r+0xa30>
 801ae8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ae90:	430b      	orrs	r3, r1
 801ae92:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ae94:	430b      	orrs	r3, r1
 801ae96:	d120      	bne.n	801aeda <_dtoa_r+0xa72>
 801ae98:	2a00      	cmp	r2, #0
 801ae9a:	dded      	ble.n	801ae78 <_dtoa_r+0xa10>
 801ae9c:	4649      	mov	r1, r9
 801ae9e:	2201      	movs	r2, #1
 801aea0:	4658      	mov	r0, fp
 801aea2:	f000 fbfd 	bl	801b6a0 <__lshift>
 801aea6:	4621      	mov	r1, r4
 801aea8:	4681      	mov	r9, r0
 801aeaa:	f000 fc65 	bl	801b778 <__mcmp>
 801aeae:	2800      	cmp	r0, #0
 801aeb0:	dc03      	bgt.n	801aeba <_dtoa_r+0xa52>
 801aeb2:	d1e1      	bne.n	801ae78 <_dtoa_r+0xa10>
 801aeb4:	f018 0f01 	tst.w	r8, #1
 801aeb8:	d0de      	beq.n	801ae78 <_dtoa_r+0xa10>
 801aeba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801aebe:	d1d8      	bne.n	801ae72 <_dtoa_r+0xa0a>
 801aec0:	9a00      	ldr	r2, [sp, #0]
 801aec2:	2339      	movs	r3, #57	@ 0x39
 801aec4:	7013      	strb	r3, [r2, #0]
 801aec6:	4633      	mov	r3, r6
 801aec8:	461e      	mov	r6, r3
 801aeca:	3b01      	subs	r3, #1
 801aecc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801aed0:	2a39      	cmp	r2, #57	@ 0x39
 801aed2:	d052      	beq.n	801af7a <_dtoa_r+0xb12>
 801aed4:	3201      	adds	r2, #1
 801aed6:	701a      	strb	r2, [r3, #0]
 801aed8:	e612      	b.n	801ab00 <_dtoa_r+0x698>
 801aeda:	2a00      	cmp	r2, #0
 801aedc:	dd07      	ble.n	801aeee <_dtoa_r+0xa86>
 801aede:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801aee2:	d0ed      	beq.n	801aec0 <_dtoa_r+0xa58>
 801aee4:	9a00      	ldr	r2, [sp, #0]
 801aee6:	f108 0301 	add.w	r3, r8, #1
 801aeea:	7013      	strb	r3, [r2, #0]
 801aeec:	e608      	b.n	801ab00 <_dtoa_r+0x698>
 801aeee:	9b07      	ldr	r3, [sp, #28]
 801aef0:	9a07      	ldr	r2, [sp, #28]
 801aef2:	f803 8c01 	strb.w	r8, [r3, #-1]
 801aef6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801aef8:	4293      	cmp	r3, r2
 801aefa:	d028      	beq.n	801af4e <_dtoa_r+0xae6>
 801aefc:	4649      	mov	r1, r9
 801aefe:	2300      	movs	r3, #0
 801af00:	220a      	movs	r2, #10
 801af02:	4658      	mov	r0, fp
 801af04:	f000 f9d6 	bl	801b2b4 <__multadd>
 801af08:	42af      	cmp	r7, r5
 801af0a:	4681      	mov	r9, r0
 801af0c:	f04f 0300 	mov.w	r3, #0
 801af10:	f04f 020a 	mov.w	r2, #10
 801af14:	4639      	mov	r1, r7
 801af16:	4658      	mov	r0, fp
 801af18:	d107      	bne.n	801af2a <_dtoa_r+0xac2>
 801af1a:	f000 f9cb 	bl	801b2b4 <__multadd>
 801af1e:	4607      	mov	r7, r0
 801af20:	4605      	mov	r5, r0
 801af22:	9b07      	ldr	r3, [sp, #28]
 801af24:	3301      	adds	r3, #1
 801af26:	9307      	str	r3, [sp, #28]
 801af28:	e774      	b.n	801ae14 <_dtoa_r+0x9ac>
 801af2a:	f000 f9c3 	bl	801b2b4 <__multadd>
 801af2e:	4629      	mov	r1, r5
 801af30:	4607      	mov	r7, r0
 801af32:	2300      	movs	r3, #0
 801af34:	220a      	movs	r2, #10
 801af36:	4658      	mov	r0, fp
 801af38:	f000 f9bc 	bl	801b2b4 <__multadd>
 801af3c:	4605      	mov	r5, r0
 801af3e:	e7f0      	b.n	801af22 <_dtoa_r+0xaba>
 801af40:	9b00      	ldr	r3, [sp, #0]
 801af42:	2b00      	cmp	r3, #0
 801af44:	bfcc      	ite	gt
 801af46:	461e      	movgt	r6, r3
 801af48:	2601      	movle	r6, #1
 801af4a:	4456      	add	r6, sl
 801af4c:	2700      	movs	r7, #0
 801af4e:	4649      	mov	r1, r9
 801af50:	2201      	movs	r2, #1
 801af52:	4658      	mov	r0, fp
 801af54:	f000 fba4 	bl	801b6a0 <__lshift>
 801af58:	4621      	mov	r1, r4
 801af5a:	4681      	mov	r9, r0
 801af5c:	f000 fc0c 	bl	801b778 <__mcmp>
 801af60:	2800      	cmp	r0, #0
 801af62:	dcb0      	bgt.n	801aec6 <_dtoa_r+0xa5e>
 801af64:	d102      	bne.n	801af6c <_dtoa_r+0xb04>
 801af66:	f018 0f01 	tst.w	r8, #1
 801af6a:	d1ac      	bne.n	801aec6 <_dtoa_r+0xa5e>
 801af6c:	4633      	mov	r3, r6
 801af6e:	461e      	mov	r6, r3
 801af70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801af74:	2a30      	cmp	r2, #48	@ 0x30
 801af76:	d0fa      	beq.n	801af6e <_dtoa_r+0xb06>
 801af78:	e5c2      	b.n	801ab00 <_dtoa_r+0x698>
 801af7a:	459a      	cmp	sl, r3
 801af7c:	d1a4      	bne.n	801aec8 <_dtoa_r+0xa60>
 801af7e:	9b04      	ldr	r3, [sp, #16]
 801af80:	3301      	adds	r3, #1
 801af82:	9304      	str	r3, [sp, #16]
 801af84:	2331      	movs	r3, #49	@ 0x31
 801af86:	f88a 3000 	strb.w	r3, [sl]
 801af8a:	e5b9      	b.n	801ab00 <_dtoa_r+0x698>
 801af8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801af8e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801afec <_dtoa_r+0xb84>
 801af92:	b11b      	cbz	r3, 801af9c <_dtoa_r+0xb34>
 801af94:	f10a 0308 	add.w	r3, sl, #8
 801af98:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801af9a:	6013      	str	r3, [r2, #0]
 801af9c:	4650      	mov	r0, sl
 801af9e:	b019      	add	sp, #100	@ 0x64
 801afa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801afa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801afa6:	2b01      	cmp	r3, #1
 801afa8:	f77f ae37 	ble.w	801ac1a <_dtoa_r+0x7b2>
 801afac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801afae:	930a      	str	r3, [sp, #40]	@ 0x28
 801afb0:	2001      	movs	r0, #1
 801afb2:	e655      	b.n	801ac60 <_dtoa_r+0x7f8>
 801afb4:	9b00      	ldr	r3, [sp, #0]
 801afb6:	2b00      	cmp	r3, #0
 801afb8:	f77f aed6 	ble.w	801ad68 <_dtoa_r+0x900>
 801afbc:	4656      	mov	r6, sl
 801afbe:	4621      	mov	r1, r4
 801afc0:	4648      	mov	r0, r9
 801afc2:	f7ff f9c9 	bl	801a358 <quorem>
 801afc6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801afca:	f806 8b01 	strb.w	r8, [r6], #1
 801afce:	9b00      	ldr	r3, [sp, #0]
 801afd0:	eba6 020a 	sub.w	r2, r6, sl
 801afd4:	4293      	cmp	r3, r2
 801afd6:	ddb3      	ble.n	801af40 <_dtoa_r+0xad8>
 801afd8:	4649      	mov	r1, r9
 801afda:	2300      	movs	r3, #0
 801afdc:	220a      	movs	r2, #10
 801afde:	4658      	mov	r0, fp
 801afe0:	f000 f968 	bl	801b2b4 <__multadd>
 801afe4:	4681      	mov	r9, r0
 801afe6:	e7ea      	b.n	801afbe <_dtoa_r+0xb56>
 801afe8:	0801e2f5 	.word	0x0801e2f5
 801afec:	0801e279 	.word	0x0801e279

0801aff0 <_free_r>:
 801aff0:	b538      	push	{r3, r4, r5, lr}
 801aff2:	4605      	mov	r5, r0
 801aff4:	2900      	cmp	r1, #0
 801aff6:	d041      	beq.n	801b07c <_free_r+0x8c>
 801aff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801affc:	1f0c      	subs	r4, r1, #4
 801affe:	2b00      	cmp	r3, #0
 801b000:	bfb8      	it	lt
 801b002:	18e4      	addlt	r4, r4, r3
 801b004:	f000 f8e8 	bl	801b1d8 <__malloc_lock>
 801b008:	4a1d      	ldr	r2, [pc, #116]	@ (801b080 <_free_r+0x90>)
 801b00a:	6813      	ldr	r3, [r2, #0]
 801b00c:	b933      	cbnz	r3, 801b01c <_free_r+0x2c>
 801b00e:	6063      	str	r3, [r4, #4]
 801b010:	6014      	str	r4, [r2, #0]
 801b012:	4628      	mov	r0, r5
 801b014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b018:	f000 b8e4 	b.w	801b1e4 <__malloc_unlock>
 801b01c:	42a3      	cmp	r3, r4
 801b01e:	d908      	bls.n	801b032 <_free_r+0x42>
 801b020:	6820      	ldr	r0, [r4, #0]
 801b022:	1821      	adds	r1, r4, r0
 801b024:	428b      	cmp	r3, r1
 801b026:	bf01      	itttt	eq
 801b028:	6819      	ldreq	r1, [r3, #0]
 801b02a:	685b      	ldreq	r3, [r3, #4]
 801b02c:	1809      	addeq	r1, r1, r0
 801b02e:	6021      	streq	r1, [r4, #0]
 801b030:	e7ed      	b.n	801b00e <_free_r+0x1e>
 801b032:	461a      	mov	r2, r3
 801b034:	685b      	ldr	r3, [r3, #4]
 801b036:	b10b      	cbz	r3, 801b03c <_free_r+0x4c>
 801b038:	42a3      	cmp	r3, r4
 801b03a:	d9fa      	bls.n	801b032 <_free_r+0x42>
 801b03c:	6811      	ldr	r1, [r2, #0]
 801b03e:	1850      	adds	r0, r2, r1
 801b040:	42a0      	cmp	r0, r4
 801b042:	d10b      	bne.n	801b05c <_free_r+0x6c>
 801b044:	6820      	ldr	r0, [r4, #0]
 801b046:	4401      	add	r1, r0
 801b048:	1850      	adds	r0, r2, r1
 801b04a:	4283      	cmp	r3, r0
 801b04c:	6011      	str	r1, [r2, #0]
 801b04e:	d1e0      	bne.n	801b012 <_free_r+0x22>
 801b050:	6818      	ldr	r0, [r3, #0]
 801b052:	685b      	ldr	r3, [r3, #4]
 801b054:	6053      	str	r3, [r2, #4]
 801b056:	4408      	add	r0, r1
 801b058:	6010      	str	r0, [r2, #0]
 801b05a:	e7da      	b.n	801b012 <_free_r+0x22>
 801b05c:	d902      	bls.n	801b064 <_free_r+0x74>
 801b05e:	230c      	movs	r3, #12
 801b060:	602b      	str	r3, [r5, #0]
 801b062:	e7d6      	b.n	801b012 <_free_r+0x22>
 801b064:	6820      	ldr	r0, [r4, #0]
 801b066:	1821      	adds	r1, r4, r0
 801b068:	428b      	cmp	r3, r1
 801b06a:	bf04      	itt	eq
 801b06c:	6819      	ldreq	r1, [r3, #0]
 801b06e:	685b      	ldreq	r3, [r3, #4]
 801b070:	6063      	str	r3, [r4, #4]
 801b072:	bf04      	itt	eq
 801b074:	1809      	addeq	r1, r1, r0
 801b076:	6021      	streq	r1, [r4, #0]
 801b078:	6054      	str	r4, [r2, #4]
 801b07a:	e7ca      	b.n	801b012 <_free_r+0x22>
 801b07c:	bd38      	pop	{r3, r4, r5, pc}
 801b07e:	bf00      	nop
 801b080:	20000b88 	.word	0x20000b88

0801b084 <malloc>:
 801b084:	4b02      	ldr	r3, [pc, #8]	@ (801b090 <malloc+0xc>)
 801b086:	4601      	mov	r1, r0
 801b088:	6818      	ldr	r0, [r3, #0]
 801b08a:	f000 b825 	b.w	801b0d8 <_malloc_r>
 801b08e:	bf00      	nop
 801b090:	2000009c 	.word	0x2000009c

0801b094 <sbrk_aligned>:
 801b094:	b570      	push	{r4, r5, r6, lr}
 801b096:	4e0f      	ldr	r6, [pc, #60]	@ (801b0d4 <sbrk_aligned+0x40>)
 801b098:	460c      	mov	r4, r1
 801b09a:	6831      	ldr	r1, [r6, #0]
 801b09c:	4605      	mov	r5, r0
 801b09e:	b911      	cbnz	r1, 801b0a6 <sbrk_aligned+0x12>
 801b0a0:	f001 ffd2 	bl	801d048 <_sbrk_r>
 801b0a4:	6030      	str	r0, [r6, #0]
 801b0a6:	4621      	mov	r1, r4
 801b0a8:	4628      	mov	r0, r5
 801b0aa:	f001 ffcd 	bl	801d048 <_sbrk_r>
 801b0ae:	1c43      	adds	r3, r0, #1
 801b0b0:	d103      	bne.n	801b0ba <sbrk_aligned+0x26>
 801b0b2:	f04f 34ff 	mov.w	r4, #4294967295
 801b0b6:	4620      	mov	r0, r4
 801b0b8:	bd70      	pop	{r4, r5, r6, pc}
 801b0ba:	1cc4      	adds	r4, r0, #3
 801b0bc:	f024 0403 	bic.w	r4, r4, #3
 801b0c0:	42a0      	cmp	r0, r4
 801b0c2:	d0f8      	beq.n	801b0b6 <sbrk_aligned+0x22>
 801b0c4:	1a21      	subs	r1, r4, r0
 801b0c6:	4628      	mov	r0, r5
 801b0c8:	f001 ffbe 	bl	801d048 <_sbrk_r>
 801b0cc:	3001      	adds	r0, #1
 801b0ce:	d1f2      	bne.n	801b0b6 <sbrk_aligned+0x22>
 801b0d0:	e7ef      	b.n	801b0b2 <sbrk_aligned+0x1e>
 801b0d2:	bf00      	nop
 801b0d4:	20000b84 	.word	0x20000b84

0801b0d8 <_malloc_r>:
 801b0d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b0dc:	1ccd      	adds	r5, r1, #3
 801b0de:	f025 0503 	bic.w	r5, r5, #3
 801b0e2:	3508      	adds	r5, #8
 801b0e4:	2d0c      	cmp	r5, #12
 801b0e6:	bf38      	it	cc
 801b0e8:	250c      	movcc	r5, #12
 801b0ea:	2d00      	cmp	r5, #0
 801b0ec:	4606      	mov	r6, r0
 801b0ee:	db01      	blt.n	801b0f4 <_malloc_r+0x1c>
 801b0f0:	42a9      	cmp	r1, r5
 801b0f2:	d904      	bls.n	801b0fe <_malloc_r+0x26>
 801b0f4:	230c      	movs	r3, #12
 801b0f6:	6033      	str	r3, [r6, #0]
 801b0f8:	2000      	movs	r0, #0
 801b0fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b0fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801b1d4 <_malloc_r+0xfc>
 801b102:	f000 f869 	bl	801b1d8 <__malloc_lock>
 801b106:	f8d8 3000 	ldr.w	r3, [r8]
 801b10a:	461c      	mov	r4, r3
 801b10c:	bb44      	cbnz	r4, 801b160 <_malloc_r+0x88>
 801b10e:	4629      	mov	r1, r5
 801b110:	4630      	mov	r0, r6
 801b112:	f7ff ffbf 	bl	801b094 <sbrk_aligned>
 801b116:	1c43      	adds	r3, r0, #1
 801b118:	4604      	mov	r4, r0
 801b11a:	d158      	bne.n	801b1ce <_malloc_r+0xf6>
 801b11c:	f8d8 4000 	ldr.w	r4, [r8]
 801b120:	4627      	mov	r7, r4
 801b122:	2f00      	cmp	r7, #0
 801b124:	d143      	bne.n	801b1ae <_malloc_r+0xd6>
 801b126:	2c00      	cmp	r4, #0
 801b128:	d04b      	beq.n	801b1c2 <_malloc_r+0xea>
 801b12a:	6823      	ldr	r3, [r4, #0]
 801b12c:	4639      	mov	r1, r7
 801b12e:	4630      	mov	r0, r6
 801b130:	eb04 0903 	add.w	r9, r4, r3
 801b134:	f001 ff88 	bl	801d048 <_sbrk_r>
 801b138:	4581      	cmp	r9, r0
 801b13a:	d142      	bne.n	801b1c2 <_malloc_r+0xea>
 801b13c:	6821      	ldr	r1, [r4, #0]
 801b13e:	1a6d      	subs	r5, r5, r1
 801b140:	4629      	mov	r1, r5
 801b142:	4630      	mov	r0, r6
 801b144:	f7ff ffa6 	bl	801b094 <sbrk_aligned>
 801b148:	3001      	adds	r0, #1
 801b14a:	d03a      	beq.n	801b1c2 <_malloc_r+0xea>
 801b14c:	6823      	ldr	r3, [r4, #0]
 801b14e:	442b      	add	r3, r5
 801b150:	6023      	str	r3, [r4, #0]
 801b152:	f8d8 3000 	ldr.w	r3, [r8]
 801b156:	685a      	ldr	r2, [r3, #4]
 801b158:	bb62      	cbnz	r2, 801b1b4 <_malloc_r+0xdc>
 801b15a:	f8c8 7000 	str.w	r7, [r8]
 801b15e:	e00f      	b.n	801b180 <_malloc_r+0xa8>
 801b160:	6822      	ldr	r2, [r4, #0]
 801b162:	1b52      	subs	r2, r2, r5
 801b164:	d420      	bmi.n	801b1a8 <_malloc_r+0xd0>
 801b166:	2a0b      	cmp	r2, #11
 801b168:	d917      	bls.n	801b19a <_malloc_r+0xc2>
 801b16a:	1961      	adds	r1, r4, r5
 801b16c:	42a3      	cmp	r3, r4
 801b16e:	6025      	str	r5, [r4, #0]
 801b170:	bf18      	it	ne
 801b172:	6059      	strne	r1, [r3, #4]
 801b174:	6863      	ldr	r3, [r4, #4]
 801b176:	bf08      	it	eq
 801b178:	f8c8 1000 	streq.w	r1, [r8]
 801b17c:	5162      	str	r2, [r4, r5]
 801b17e:	604b      	str	r3, [r1, #4]
 801b180:	4630      	mov	r0, r6
 801b182:	f000 f82f 	bl	801b1e4 <__malloc_unlock>
 801b186:	f104 000b 	add.w	r0, r4, #11
 801b18a:	1d23      	adds	r3, r4, #4
 801b18c:	f020 0007 	bic.w	r0, r0, #7
 801b190:	1ac2      	subs	r2, r0, r3
 801b192:	bf1c      	itt	ne
 801b194:	1a1b      	subne	r3, r3, r0
 801b196:	50a3      	strne	r3, [r4, r2]
 801b198:	e7af      	b.n	801b0fa <_malloc_r+0x22>
 801b19a:	6862      	ldr	r2, [r4, #4]
 801b19c:	42a3      	cmp	r3, r4
 801b19e:	bf0c      	ite	eq
 801b1a0:	f8c8 2000 	streq.w	r2, [r8]
 801b1a4:	605a      	strne	r2, [r3, #4]
 801b1a6:	e7eb      	b.n	801b180 <_malloc_r+0xa8>
 801b1a8:	4623      	mov	r3, r4
 801b1aa:	6864      	ldr	r4, [r4, #4]
 801b1ac:	e7ae      	b.n	801b10c <_malloc_r+0x34>
 801b1ae:	463c      	mov	r4, r7
 801b1b0:	687f      	ldr	r7, [r7, #4]
 801b1b2:	e7b6      	b.n	801b122 <_malloc_r+0x4a>
 801b1b4:	461a      	mov	r2, r3
 801b1b6:	685b      	ldr	r3, [r3, #4]
 801b1b8:	42a3      	cmp	r3, r4
 801b1ba:	d1fb      	bne.n	801b1b4 <_malloc_r+0xdc>
 801b1bc:	2300      	movs	r3, #0
 801b1be:	6053      	str	r3, [r2, #4]
 801b1c0:	e7de      	b.n	801b180 <_malloc_r+0xa8>
 801b1c2:	230c      	movs	r3, #12
 801b1c4:	6033      	str	r3, [r6, #0]
 801b1c6:	4630      	mov	r0, r6
 801b1c8:	f000 f80c 	bl	801b1e4 <__malloc_unlock>
 801b1cc:	e794      	b.n	801b0f8 <_malloc_r+0x20>
 801b1ce:	6005      	str	r5, [r0, #0]
 801b1d0:	e7d6      	b.n	801b180 <_malloc_r+0xa8>
 801b1d2:	bf00      	nop
 801b1d4:	20000b88 	.word	0x20000b88

0801b1d8 <__malloc_lock>:
 801b1d8:	4801      	ldr	r0, [pc, #4]	@ (801b1e0 <__malloc_lock+0x8>)
 801b1da:	f7ff b8a6 	b.w	801a32a <__retarget_lock_acquire_recursive>
 801b1de:	bf00      	nop
 801b1e0:	20000b80 	.word	0x20000b80

0801b1e4 <__malloc_unlock>:
 801b1e4:	4801      	ldr	r0, [pc, #4]	@ (801b1ec <__malloc_unlock+0x8>)
 801b1e6:	f7ff b8a1 	b.w	801a32c <__retarget_lock_release_recursive>
 801b1ea:	bf00      	nop
 801b1ec:	20000b80 	.word	0x20000b80

0801b1f0 <_Balloc>:
 801b1f0:	b570      	push	{r4, r5, r6, lr}
 801b1f2:	69c6      	ldr	r6, [r0, #28]
 801b1f4:	4604      	mov	r4, r0
 801b1f6:	460d      	mov	r5, r1
 801b1f8:	b976      	cbnz	r6, 801b218 <_Balloc+0x28>
 801b1fa:	2010      	movs	r0, #16
 801b1fc:	f7ff ff42 	bl	801b084 <malloc>
 801b200:	4602      	mov	r2, r0
 801b202:	61e0      	str	r0, [r4, #28]
 801b204:	b920      	cbnz	r0, 801b210 <_Balloc+0x20>
 801b206:	4b18      	ldr	r3, [pc, #96]	@ (801b268 <_Balloc+0x78>)
 801b208:	4818      	ldr	r0, [pc, #96]	@ (801b26c <_Balloc+0x7c>)
 801b20a:	216b      	movs	r1, #107	@ 0x6b
 801b20c:	f001 ff34 	bl	801d078 <__assert_func>
 801b210:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b214:	6006      	str	r6, [r0, #0]
 801b216:	60c6      	str	r6, [r0, #12]
 801b218:	69e6      	ldr	r6, [r4, #28]
 801b21a:	68f3      	ldr	r3, [r6, #12]
 801b21c:	b183      	cbz	r3, 801b240 <_Balloc+0x50>
 801b21e:	69e3      	ldr	r3, [r4, #28]
 801b220:	68db      	ldr	r3, [r3, #12]
 801b222:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b226:	b9b8      	cbnz	r0, 801b258 <_Balloc+0x68>
 801b228:	2101      	movs	r1, #1
 801b22a:	fa01 f605 	lsl.w	r6, r1, r5
 801b22e:	1d72      	adds	r2, r6, #5
 801b230:	0092      	lsls	r2, r2, #2
 801b232:	4620      	mov	r0, r4
 801b234:	f001 ff3e 	bl	801d0b4 <_calloc_r>
 801b238:	b160      	cbz	r0, 801b254 <_Balloc+0x64>
 801b23a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801b23e:	e00e      	b.n	801b25e <_Balloc+0x6e>
 801b240:	2221      	movs	r2, #33	@ 0x21
 801b242:	2104      	movs	r1, #4
 801b244:	4620      	mov	r0, r4
 801b246:	f001 ff35 	bl	801d0b4 <_calloc_r>
 801b24a:	69e3      	ldr	r3, [r4, #28]
 801b24c:	60f0      	str	r0, [r6, #12]
 801b24e:	68db      	ldr	r3, [r3, #12]
 801b250:	2b00      	cmp	r3, #0
 801b252:	d1e4      	bne.n	801b21e <_Balloc+0x2e>
 801b254:	2000      	movs	r0, #0
 801b256:	bd70      	pop	{r4, r5, r6, pc}
 801b258:	6802      	ldr	r2, [r0, #0]
 801b25a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b25e:	2300      	movs	r3, #0
 801b260:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b264:	e7f7      	b.n	801b256 <_Balloc+0x66>
 801b266:	bf00      	nop
 801b268:	0801e286 	.word	0x0801e286
 801b26c:	0801e306 	.word	0x0801e306

0801b270 <_Bfree>:
 801b270:	b570      	push	{r4, r5, r6, lr}
 801b272:	69c6      	ldr	r6, [r0, #28]
 801b274:	4605      	mov	r5, r0
 801b276:	460c      	mov	r4, r1
 801b278:	b976      	cbnz	r6, 801b298 <_Bfree+0x28>
 801b27a:	2010      	movs	r0, #16
 801b27c:	f7ff ff02 	bl	801b084 <malloc>
 801b280:	4602      	mov	r2, r0
 801b282:	61e8      	str	r0, [r5, #28]
 801b284:	b920      	cbnz	r0, 801b290 <_Bfree+0x20>
 801b286:	4b09      	ldr	r3, [pc, #36]	@ (801b2ac <_Bfree+0x3c>)
 801b288:	4809      	ldr	r0, [pc, #36]	@ (801b2b0 <_Bfree+0x40>)
 801b28a:	218f      	movs	r1, #143	@ 0x8f
 801b28c:	f001 fef4 	bl	801d078 <__assert_func>
 801b290:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b294:	6006      	str	r6, [r0, #0]
 801b296:	60c6      	str	r6, [r0, #12]
 801b298:	b13c      	cbz	r4, 801b2aa <_Bfree+0x3a>
 801b29a:	69eb      	ldr	r3, [r5, #28]
 801b29c:	6862      	ldr	r2, [r4, #4]
 801b29e:	68db      	ldr	r3, [r3, #12]
 801b2a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b2a4:	6021      	str	r1, [r4, #0]
 801b2a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b2aa:	bd70      	pop	{r4, r5, r6, pc}
 801b2ac:	0801e286 	.word	0x0801e286
 801b2b0:	0801e306 	.word	0x0801e306

0801b2b4 <__multadd>:
 801b2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b2b8:	690d      	ldr	r5, [r1, #16]
 801b2ba:	4607      	mov	r7, r0
 801b2bc:	460c      	mov	r4, r1
 801b2be:	461e      	mov	r6, r3
 801b2c0:	f101 0c14 	add.w	ip, r1, #20
 801b2c4:	2000      	movs	r0, #0
 801b2c6:	f8dc 3000 	ldr.w	r3, [ip]
 801b2ca:	b299      	uxth	r1, r3
 801b2cc:	fb02 6101 	mla	r1, r2, r1, r6
 801b2d0:	0c1e      	lsrs	r6, r3, #16
 801b2d2:	0c0b      	lsrs	r3, r1, #16
 801b2d4:	fb02 3306 	mla	r3, r2, r6, r3
 801b2d8:	b289      	uxth	r1, r1
 801b2da:	3001      	adds	r0, #1
 801b2dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801b2e0:	4285      	cmp	r5, r0
 801b2e2:	f84c 1b04 	str.w	r1, [ip], #4
 801b2e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801b2ea:	dcec      	bgt.n	801b2c6 <__multadd+0x12>
 801b2ec:	b30e      	cbz	r6, 801b332 <__multadd+0x7e>
 801b2ee:	68a3      	ldr	r3, [r4, #8]
 801b2f0:	42ab      	cmp	r3, r5
 801b2f2:	dc19      	bgt.n	801b328 <__multadd+0x74>
 801b2f4:	6861      	ldr	r1, [r4, #4]
 801b2f6:	4638      	mov	r0, r7
 801b2f8:	3101      	adds	r1, #1
 801b2fa:	f7ff ff79 	bl	801b1f0 <_Balloc>
 801b2fe:	4680      	mov	r8, r0
 801b300:	b928      	cbnz	r0, 801b30e <__multadd+0x5a>
 801b302:	4602      	mov	r2, r0
 801b304:	4b0c      	ldr	r3, [pc, #48]	@ (801b338 <__multadd+0x84>)
 801b306:	480d      	ldr	r0, [pc, #52]	@ (801b33c <__multadd+0x88>)
 801b308:	21ba      	movs	r1, #186	@ 0xba
 801b30a:	f001 feb5 	bl	801d078 <__assert_func>
 801b30e:	6922      	ldr	r2, [r4, #16]
 801b310:	3202      	adds	r2, #2
 801b312:	f104 010c 	add.w	r1, r4, #12
 801b316:	0092      	lsls	r2, r2, #2
 801b318:	300c      	adds	r0, #12
 801b31a:	f7ff f808 	bl	801a32e <memcpy>
 801b31e:	4621      	mov	r1, r4
 801b320:	4638      	mov	r0, r7
 801b322:	f7ff ffa5 	bl	801b270 <_Bfree>
 801b326:	4644      	mov	r4, r8
 801b328:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b32c:	3501      	adds	r5, #1
 801b32e:	615e      	str	r6, [r3, #20]
 801b330:	6125      	str	r5, [r4, #16]
 801b332:	4620      	mov	r0, r4
 801b334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b338:	0801e2f5 	.word	0x0801e2f5
 801b33c:	0801e306 	.word	0x0801e306

0801b340 <__s2b>:
 801b340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b344:	460c      	mov	r4, r1
 801b346:	4615      	mov	r5, r2
 801b348:	461f      	mov	r7, r3
 801b34a:	2209      	movs	r2, #9
 801b34c:	3308      	adds	r3, #8
 801b34e:	4606      	mov	r6, r0
 801b350:	fb93 f3f2 	sdiv	r3, r3, r2
 801b354:	2100      	movs	r1, #0
 801b356:	2201      	movs	r2, #1
 801b358:	429a      	cmp	r2, r3
 801b35a:	db09      	blt.n	801b370 <__s2b+0x30>
 801b35c:	4630      	mov	r0, r6
 801b35e:	f7ff ff47 	bl	801b1f0 <_Balloc>
 801b362:	b940      	cbnz	r0, 801b376 <__s2b+0x36>
 801b364:	4602      	mov	r2, r0
 801b366:	4b19      	ldr	r3, [pc, #100]	@ (801b3cc <__s2b+0x8c>)
 801b368:	4819      	ldr	r0, [pc, #100]	@ (801b3d0 <__s2b+0x90>)
 801b36a:	21d3      	movs	r1, #211	@ 0xd3
 801b36c:	f001 fe84 	bl	801d078 <__assert_func>
 801b370:	0052      	lsls	r2, r2, #1
 801b372:	3101      	adds	r1, #1
 801b374:	e7f0      	b.n	801b358 <__s2b+0x18>
 801b376:	9b08      	ldr	r3, [sp, #32]
 801b378:	6143      	str	r3, [r0, #20]
 801b37a:	2d09      	cmp	r5, #9
 801b37c:	f04f 0301 	mov.w	r3, #1
 801b380:	6103      	str	r3, [r0, #16]
 801b382:	dd16      	ble.n	801b3b2 <__s2b+0x72>
 801b384:	f104 0909 	add.w	r9, r4, #9
 801b388:	46c8      	mov	r8, r9
 801b38a:	442c      	add	r4, r5
 801b38c:	f818 3b01 	ldrb.w	r3, [r8], #1
 801b390:	4601      	mov	r1, r0
 801b392:	3b30      	subs	r3, #48	@ 0x30
 801b394:	220a      	movs	r2, #10
 801b396:	4630      	mov	r0, r6
 801b398:	f7ff ff8c 	bl	801b2b4 <__multadd>
 801b39c:	45a0      	cmp	r8, r4
 801b39e:	d1f5      	bne.n	801b38c <__s2b+0x4c>
 801b3a0:	f1a5 0408 	sub.w	r4, r5, #8
 801b3a4:	444c      	add	r4, r9
 801b3a6:	1b2d      	subs	r5, r5, r4
 801b3a8:	1963      	adds	r3, r4, r5
 801b3aa:	42bb      	cmp	r3, r7
 801b3ac:	db04      	blt.n	801b3b8 <__s2b+0x78>
 801b3ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b3b2:	340a      	adds	r4, #10
 801b3b4:	2509      	movs	r5, #9
 801b3b6:	e7f6      	b.n	801b3a6 <__s2b+0x66>
 801b3b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b3bc:	4601      	mov	r1, r0
 801b3be:	3b30      	subs	r3, #48	@ 0x30
 801b3c0:	220a      	movs	r2, #10
 801b3c2:	4630      	mov	r0, r6
 801b3c4:	f7ff ff76 	bl	801b2b4 <__multadd>
 801b3c8:	e7ee      	b.n	801b3a8 <__s2b+0x68>
 801b3ca:	bf00      	nop
 801b3cc:	0801e2f5 	.word	0x0801e2f5
 801b3d0:	0801e306 	.word	0x0801e306

0801b3d4 <__hi0bits>:
 801b3d4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801b3d8:	4603      	mov	r3, r0
 801b3da:	bf36      	itet	cc
 801b3dc:	0403      	lslcc	r3, r0, #16
 801b3de:	2000      	movcs	r0, #0
 801b3e0:	2010      	movcc	r0, #16
 801b3e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801b3e6:	bf3c      	itt	cc
 801b3e8:	021b      	lslcc	r3, r3, #8
 801b3ea:	3008      	addcc	r0, #8
 801b3ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801b3f0:	bf3c      	itt	cc
 801b3f2:	011b      	lslcc	r3, r3, #4
 801b3f4:	3004      	addcc	r0, #4
 801b3f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b3fa:	bf3c      	itt	cc
 801b3fc:	009b      	lslcc	r3, r3, #2
 801b3fe:	3002      	addcc	r0, #2
 801b400:	2b00      	cmp	r3, #0
 801b402:	db05      	blt.n	801b410 <__hi0bits+0x3c>
 801b404:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801b408:	f100 0001 	add.w	r0, r0, #1
 801b40c:	bf08      	it	eq
 801b40e:	2020      	moveq	r0, #32
 801b410:	4770      	bx	lr

0801b412 <__lo0bits>:
 801b412:	6803      	ldr	r3, [r0, #0]
 801b414:	4602      	mov	r2, r0
 801b416:	f013 0007 	ands.w	r0, r3, #7
 801b41a:	d00b      	beq.n	801b434 <__lo0bits+0x22>
 801b41c:	07d9      	lsls	r1, r3, #31
 801b41e:	d421      	bmi.n	801b464 <__lo0bits+0x52>
 801b420:	0798      	lsls	r0, r3, #30
 801b422:	bf49      	itett	mi
 801b424:	085b      	lsrmi	r3, r3, #1
 801b426:	089b      	lsrpl	r3, r3, #2
 801b428:	2001      	movmi	r0, #1
 801b42a:	6013      	strmi	r3, [r2, #0]
 801b42c:	bf5c      	itt	pl
 801b42e:	6013      	strpl	r3, [r2, #0]
 801b430:	2002      	movpl	r0, #2
 801b432:	4770      	bx	lr
 801b434:	b299      	uxth	r1, r3
 801b436:	b909      	cbnz	r1, 801b43c <__lo0bits+0x2a>
 801b438:	0c1b      	lsrs	r3, r3, #16
 801b43a:	2010      	movs	r0, #16
 801b43c:	b2d9      	uxtb	r1, r3
 801b43e:	b909      	cbnz	r1, 801b444 <__lo0bits+0x32>
 801b440:	3008      	adds	r0, #8
 801b442:	0a1b      	lsrs	r3, r3, #8
 801b444:	0719      	lsls	r1, r3, #28
 801b446:	bf04      	itt	eq
 801b448:	091b      	lsreq	r3, r3, #4
 801b44a:	3004      	addeq	r0, #4
 801b44c:	0799      	lsls	r1, r3, #30
 801b44e:	bf04      	itt	eq
 801b450:	089b      	lsreq	r3, r3, #2
 801b452:	3002      	addeq	r0, #2
 801b454:	07d9      	lsls	r1, r3, #31
 801b456:	d403      	bmi.n	801b460 <__lo0bits+0x4e>
 801b458:	085b      	lsrs	r3, r3, #1
 801b45a:	f100 0001 	add.w	r0, r0, #1
 801b45e:	d003      	beq.n	801b468 <__lo0bits+0x56>
 801b460:	6013      	str	r3, [r2, #0]
 801b462:	4770      	bx	lr
 801b464:	2000      	movs	r0, #0
 801b466:	4770      	bx	lr
 801b468:	2020      	movs	r0, #32
 801b46a:	4770      	bx	lr

0801b46c <__i2b>:
 801b46c:	b510      	push	{r4, lr}
 801b46e:	460c      	mov	r4, r1
 801b470:	2101      	movs	r1, #1
 801b472:	f7ff febd 	bl	801b1f0 <_Balloc>
 801b476:	4602      	mov	r2, r0
 801b478:	b928      	cbnz	r0, 801b486 <__i2b+0x1a>
 801b47a:	4b05      	ldr	r3, [pc, #20]	@ (801b490 <__i2b+0x24>)
 801b47c:	4805      	ldr	r0, [pc, #20]	@ (801b494 <__i2b+0x28>)
 801b47e:	f240 1145 	movw	r1, #325	@ 0x145
 801b482:	f001 fdf9 	bl	801d078 <__assert_func>
 801b486:	2301      	movs	r3, #1
 801b488:	6144      	str	r4, [r0, #20]
 801b48a:	6103      	str	r3, [r0, #16]
 801b48c:	bd10      	pop	{r4, pc}
 801b48e:	bf00      	nop
 801b490:	0801e2f5 	.word	0x0801e2f5
 801b494:	0801e306 	.word	0x0801e306

0801b498 <__multiply>:
 801b498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b49c:	4614      	mov	r4, r2
 801b49e:	690a      	ldr	r2, [r1, #16]
 801b4a0:	6923      	ldr	r3, [r4, #16]
 801b4a2:	429a      	cmp	r2, r3
 801b4a4:	bfa8      	it	ge
 801b4a6:	4623      	movge	r3, r4
 801b4a8:	460f      	mov	r7, r1
 801b4aa:	bfa4      	itt	ge
 801b4ac:	460c      	movge	r4, r1
 801b4ae:	461f      	movge	r7, r3
 801b4b0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801b4b4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801b4b8:	68a3      	ldr	r3, [r4, #8]
 801b4ba:	6861      	ldr	r1, [r4, #4]
 801b4bc:	eb0a 0609 	add.w	r6, sl, r9
 801b4c0:	42b3      	cmp	r3, r6
 801b4c2:	b085      	sub	sp, #20
 801b4c4:	bfb8      	it	lt
 801b4c6:	3101      	addlt	r1, #1
 801b4c8:	f7ff fe92 	bl	801b1f0 <_Balloc>
 801b4cc:	b930      	cbnz	r0, 801b4dc <__multiply+0x44>
 801b4ce:	4602      	mov	r2, r0
 801b4d0:	4b44      	ldr	r3, [pc, #272]	@ (801b5e4 <__multiply+0x14c>)
 801b4d2:	4845      	ldr	r0, [pc, #276]	@ (801b5e8 <__multiply+0x150>)
 801b4d4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801b4d8:	f001 fdce 	bl	801d078 <__assert_func>
 801b4dc:	f100 0514 	add.w	r5, r0, #20
 801b4e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801b4e4:	462b      	mov	r3, r5
 801b4e6:	2200      	movs	r2, #0
 801b4e8:	4543      	cmp	r3, r8
 801b4ea:	d321      	bcc.n	801b530 <__multiply+0x98>
 801b4ec:	f107 0114 	add.w	r1, r7, #20
 801b4f0:	f104 0214 	add.w	r2, r4, #20
 801b4f4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801b4f8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801b4fc:	9302      	str	r3, [sp, #8]
 801b4fe:	1b13      	subs	r3, r2, r4
 801b500:	3b15      	subs	r3, #21
 801b502:	f023 0303 	bic.w	r3, r3, #3
 801b506:	3304      	adds	r3, #4
 801b508:	f104 0715 	add.w	r7, r4, #21
 801b50c:	42ba      	cmp	r2, r7
 801b50e:	bf38      	it	cc
 801b510:	2304      	movcc	r3, #4
 801b512:	9301      	str	r3, [sp, #4]
 801b514:	9b02      	ldr	r3, [sp, #8]
 801b516:	9103      	str	r1, [sp, #12]
 801b518:	428b      	cmp	r3, r1
 801b51a:	d80c      	bhi.n	801b536 <__multiply+0x9e>
 801b51c:	2e00      	cmp	r6, #0
 801b51e:	dd03      	ble.n	801b528 <__multiply+0x90>
 801b520:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801b524:	2b00      	cmp	r3, #0
 801b526:	d05b      	beq.n	801b5e0 <__multiply+0x148>
 801b528:	6106      	str	r6, [r0, #16]
 801b52a:	b005      	add	sp, #20
 801b52c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b530:	f843 2b04 	str.w	r2, [r3], #4
 801b534:	e7d8      	b.n	801b4e8 <__multiply+0x50>
 801b536:	f8b1 a000 	ldrh.w	sl, [r1]
 801b53a:	f1ba 0f00 	cmp.w	sl, #0
 801b53e:	d024      	beq.n	801b58a <__multiply+0xf2>
 801b540:	f104 0e14 	add.w	lr, r4, #20
 801b544:	46a9      	mov	r9, r5
 801b546:	f04f 0c00 	mov.w	ip, #0
 801b54a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801b54e:	f8d9 3000 	ldr.w	r3, [r9]
 801b552:	fa1f fb87 	uxth.w	fp, r7
 801b556:	b29b      	uxth	r3, r3
 801b558:	fb0a 330b 	mla	r3, sl, fp, r3
 801b55c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801b560:	f8d9 7000 	ldr.w	r7, [r9]
 801b564:	4463      	add	r3, ip
 801b566:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801b56a:	fb0a c70b 	mla	r7, sl, fp, ip
 801b56e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801b572:	b29b      	uxth	r3, r3
 801b574:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801b578:	4572      	cmp	r2, lr
 801b57a:	f849 3b04 	str.w	r3, [r9], #4
 801b57e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801b582:	d8e2      	bhi.n	801b54a <__multiply+0xb2>
 801b584:	9b01      	ldr	r3, [sp, #4]
 801b586:	f845 c003 	str.w	ip, [r5, r3]
 801b58a:	9b03      	ldr	r3, [sp, #12]
 801b58c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801b590:	3104      	adds	r1, #4
 801b592:	f1b9 0f00 	cmp.w	r9, #0
 801b596:	d021      	beq.n	801b5dc <__multiply+0x144>
 801b598:	682b      	ldr	r3, [r5, #0]
 801b59a:	f104 0c14 	add.w	ip, r4, #20
 801b59e:	46ae      	mov	lr, r5
 801b5a0:	f04f 0a00 	mov.w	sl, #0
 801b5a4:	f8bc b000 	ldrh.w	fp, [ip]
 801b5a8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801b5ac:	fb09 770b 	mla	r7, r9, fp, r7
 801b5b0:	4457      	add	r7, sl
 801b5b2:	b29b      	uxth	r3, r3
 801b5b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801b5b8:	f84e 3b04 	str.w	r3, [lr], #4
 801b5bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 801b5c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b5c4:	f8be 3000 	ldrh.w	r3, [lr]
 801b5c8:	fb09 330a 	mla	r3, r9, sl, r3
 801b5cc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801b5d0:	4562      	cmp	r2, ip
 801b5d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b5d6:	d8e5      	bhi.n	801b5a4 <__multiply+0x10c>
 801b5d8:	9f01      	ldr	r7, [sp, #4]
 801b5da:	51eb      	str	r3, [r5, r7]
 801b5dc:	3504      	adds	r5, #4
 801b5de:	e799      	b.n	801b514 <__multiply+0x7c>
 801b5e0:	3e01      	subs	r6, #1
 801b5e2:	e79b      	b.n	801b51c <__multiply+0x84>
 801b5e4:	0801e2f5 	.word	0x0801e2f5
 801b5e8:	0801e306 	.word	0x0801e306

0801b5ec <__pow5mult>:
 801b5ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b5f0:	4615      	mov	r5, r2
 801b5f2:	f012 0203 	ands.w	r2, r2, #3
 801b5f6:	4607      	mov	r7, r0
 801b5f8:	460e      	mov	r6, r1
 801b5fa:	d007      	beq.n	801b60c <__pow5mult+0x20>
 801b5fc:	4c25      	ldr	r4, [pc, #148]	@ (801b694 <__pow5mult+0xa8>)
 801b5fe:	3a01      	subs	r2, #1
 801b600:	2300      	movs	r3, #0
 801b602:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b606:	f7ff fe55 	bl	801b2b4 <__multadd>
 801b60a:	4606      	mov	r6, r0
 801b60c:	10ad      	asrs	r5, r5, #2
 801b60e:	d03d      	beq.n	801b68c <__pow5mult+0xa0>
 801b610:	69fc      	ldr	r4, [r7, #28]
 801b612:	b97c      	cbnz	r4, 801b634 <__pow5mult+0x48>
 801b614:	2010      	movs	r0, #16
 801b616:	f7ff fd35 	bl	801b084 <malloc>
 801b61a:	4602      	mov	r2, r0
 801b61c:	61f8      	str	r0, [r7, #28]
 801b61e:	b928      	cbnz	r0, 801b62c <__pow5mult+0x40>
 801b620:	4b1d      	ldr	r3, [pc, #116]	@ (801b698 <__pow5mult+0xac>)
 801b622:	481e      	ldr	r0, [pc, #120]	@ (801b69c <__pow5mult+0xb0>)
 801b624:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801b628:	f001 fd26 	bl	801d078 <__assert_func>
 801b62c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b630:	6004      	str	r4, [r0, #0]
 801b632:	60c4      	str	r4, [r0, #12]
 801b634:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801b638:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b63c:	b94c      	cbnz	r4, 801b652 <__pow5mult+0x66>
 801b63e:	f240 2171 	movw	r1, #625	@ 0x271
 801b642:	4638      	mov	r0, r7
 801b644:	f7ff ff12 	bl	801b46c <__i2b>
 801b648:	2300      	movs	r3, #0
 801b64a:	f8c8 0008 	str.w	r0, [r8, #8]
 801b64e:	4604      	mov	r4, r0
 801b650:	6003      	str	r3, [r0, #0]
 801b652:	f04f 0900 	mov.w	r9, #0
 801b656:	07eb      	lsls	r3, r5, #31
 801b658:	d50a      	bpl.n	801b670 <__pow5mult+0x84>
 801b65a:	4631      	mov	r1, r6
 801b65c:	4622      	mov	r2, r4
 801b65e:	4638      	mov	r0, r7
 801b660:	f7ff ff1a 	bl	801b498 <__multiply>
 801b664:	4631      	mov	r1, r6
 801b666:	4680      	mov	r8, r0
 801b668:	4638      	mov	r0, r7
 801b66a:	f7ff fe01 	bl	801b270 <_Bfree>
 801b66e:	4646      	mov	r6, r8
 801b670:	106d      	asrs	r5, r5, #1
 801b672:	d00b      	beq.n	801b68c <__pow5mult+0xa0>
 801b674:	6820      	ldr	r0, [r4, #0]
 801b676:	b938      	cbnz	r0, 801b688 <__pow5mult+0x9c>
 801b678:	4622      	mov	r2, r4
 801b67a:	4621      	mov	r1, r4
 801b67c:	4638      	mov	r0, r7
 801b67e:	f7ff ff0b 	bl	801b498 <__multiply>
 801b682:	6020      	str	r0, [r4, #0]
 801b684:	f8c0 9000 	str.w	r9, [r0]
 801b688:	4604      	mov	r4, r0
 801b68a:	e7e4      	b.n	801b656 <__pow5mult+0x6a>
 801b68c:	4630      	mov	r0, r6
 801b68e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b692:	bf00      	nop
 801b694:	0801e360 	.word	0x0801e360
 801b698:	0801e286 	.word	0x0801e286
 801b69c:	0801e306 	.word	0x0801e306

0801b6a0 <__lshift>:
 801b6a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b6a4:	460c      	mov	r4, r1
 801b6a6:	6849      	ldr	r1, [r1, #4]
 801b6a8:	6923      	ldr	r3, [r4, #16]
 801b6aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801b6ae:	68a3      	ldr	r3, [r4, #8]
 801b6b0:	4607      	mov	r7, r0
 801b6b2:	4691      	mov	r9, r2
 801b6b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b6b8:	f108 0601 	add.w	r6, r8, #1
 801b6bc:	42b3      	cmp	r3, r6
 801b6be:	db0b      	blt.n	801b6d8 <__lshift+0x38>
 801b6c0:	4638      	mov	r0, r7
 801b6c2:	f7ff fd95 	bl	801b1f0 <_Balloc>
 801b6c6:	4605      	mov	r5, r0
 801b6c8:	b948      	cbnz	r0, 801b6de <__lshift+0x3e>
 801b6ca:	4602      	mov	r2, r0
 801b6cc:	4b28      	ldr	r3, [pc, #160]	@ (801b770 <__lshift+0xd0>)
 801b6ce:	4829      	ldr	r0, [pc, #164]	@ (801b774 <__lshift+0xd4>)
 801b6d0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801b6d4:	f001 fcd0 	bl	801d078 <__assert_func>
 801b6d8:	3101      	adds	r1, #1
 801b6da:	005b      	lsls	r3, r3, #1
 801b6dc:	e7ee      	b.n	801b6bc <__lshift+0x1c>
 801b6de:	2300      	movs	r3, #0
 801b6e0:	f100 0114 	add.w	r1, r0, #20
 801b6e4:	f100 0210 	add.w	r2, r0, #16
 801b6e8:	4618      	mov	r0, r3
 801b6ea:	4553      	cmp	r3, sl
 801b6ec:	db33      	blt.n	801b756 <__lshift+0xb6>
 801b6ee:	6920      	ldr	r0, [r4, #16]
 801b6f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b6f4:	f104 0314 	add.w	r3, r4, #20
 801b6f8:	f019 091f 	ands.w	r9, r9, #31
 801b6fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b700:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801b704:	d02b      	beq.n	801b75e <__lshift+0xbe>
 801b706:	f1c9 0e20 	rsb	lr, r9, #32
 801b70a:	468a      	mov	sl, r1
 801b70c:	2200      	movs	r2, #0
 801b70e:	6818      	ldr	r0, [r3, #0]
 801b710:	fa00 f009 	lsl.w	r0, r0, r9
 801b714:	4310      	orrs	r0, r2
 801b716:	f84a 0b04 	str.w	r0, [sl], #4
 801b71a:	f853 2b04 	ldr.w	r2, [r3], #4
 801b71e:	459c      	cmp	ip, r3
 801b720:	fa22 f20e 	lsr.w	r2, r2, lr
 801b724:	d8f3      	bhi.n	801b70e <__lshift+0x6e>
 801b726:	ebac 0304 	sub.w	r3, ip, r4
 801b72a:	3b15      	subs	r3, #21
 801b72c:	f023 0303 	bic.w	r3, r3, #3
 801b730:	3304      	adds	r3, #4
 801b732:	f104 0015 	add.w	r0, r4, #21
 801b736:	4584      	cmp	ip, r0
 801b738:	bf38      	it	cc
 801b73a:	2304      	movcc	r3, #4
 801b73c:	50ca      	str	r2, [r1, r3]
 801b73e:	b10a      	cbz	r2, 801b744 <__lshift+0xa4>
 801b740:	f108 0602 	add.w	r6, r8, #2
 801b744:	3e01      	subs	r6, #1
 801b746:	4638      	mov	r0, r7
 801b748:	612e      	str	r6, [r5, #16]
 801b74a:	4621      	mov	r1, r4
 801b74c:	f7ff fd90 	bl	801b270 <_Bfree>
 801b750:	4628      	mov	r0, r5
 801b752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b756:	f842 0f04 	str.w	r0, [r2, #4]!
 801b75a:	3301      	adds	r3, #1
 801b75c:	e7c5      	b.n	801b6ea <__lshift+0x4a>
 801b75e:	3904      	subs	r1, #4
 801b760:	f853 2b04 	ldr.w	r2, [r3], #4
 801b764:	f841 2f04 	str.w	r2, [r1, #4]!
 801b768:	459c      	cmp	ip, r3
 801b76a:	d8f9      	bhi.n	801b760 <__lshift+0xc0>
 801b76c:	e7ea      	b.n	801b744 <__lshift+0xa4>
 801b76e:	bf00      	nop
 801b770:	0801e2f5 	.word	0x0801e2f5
 801b774:	0801e306 	.word	0x0801e306

0801b778 <__mcmp>:
 801b778:	690a      	ldr	r2, [r1, #16]
 801b77a:	4603      	mov	r3, r0
 801b77c:	6900      	ldr	r0, [r0, #16]
 801b77e:	1a80      	subs	r0, r0, r2
 801b780:	b530      	push	{r4, r5, lr}
 801b782:	d10e      	bne.n	801b7a2 <__mcmp+0x2a>
 801b784:	3314      	adds	r3, #20
 801b786:	3114      	adds	r1, #20
 801b788:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801b78c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801b790:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801b794:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801b798:	4295      	cmp	r5, r2
 801b79a:	d003      	beq.n	801b7a4 <__mcmp+0x2c>
 801b79c:	d205      	bcs.n	801b7aa <__mcmp+0x32>
 801b79e:	f04f 30ff 	mov.w	r0, #4294967295
 801b7a2:	bd30      	pop	{r4, r5, pc}
 801b7a4:	42a3      	cmp	r3, r4
 801b7a6:	d3f3      	bcc.n	801b790 <__mcmp+0x18>
 801b7a8:	e7fb      	b.n	801b7a2 <__mcmp+0x2a>
 801b7aa:	2001      	movs	r0, #1
 801b7ac:	e7f9      	b.n	801b7a2 <__mcmp+0x2a>
	...

0801b7b0 <__mdiff>:
 801b7b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7b4:	4689      	mov	r9, r1
 801b7b6:	4606      	mov	r6, r0
 801b7b8:	4611      	mov	r1, r2
 801b7ba:	4648      	mov	r0, r9
 801b7bc:	4614      	mov	r4, r2
 801b7be:	f7ff ffdb 	bl	801b778 <__mcmp>
 801b7c2:	1e05      	subs	r5, r0, #0
 801b7c4:	d112      	bne.n	801b7ec <__mdiff+0x3c>
 801b7c6:	4629      	mov	r1, r5
 801b7c8:	4630      	mov	r0, r6
 801b7ca:	f7ff fd11 	bl	801b1f0 <_Balloc>
 801b7ce:	4602      	mov	r2, r0
 801b7d0:	b928      	cbnz	r0, 801b7de <__mdiff+0x2e>
 801b7d2:	4b3f      	ldr	r3, [pc, #252]	@ (801b8d0 <__mdiff+0x120>)
 801b7d4:	f240 2137 	movw	r1, #567	@ 0x237
 801b7d8:	483e      	ldr	r0, [pc, #248]	@ (801b8d4 <__mdiff+0x124>)
 801b7da:	f001 fc4d 	bl	801d078 <__assert_func>
 801b7de:	2301      	movs	r3, #1
 801b7e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801b7e4:	4610      	mov	r0, r2
 801b7e6:	b003      	add	sp, #12
 801b7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7ec:	bfbc      	itt	lt
 801b7ee:	464b      	movlt	r3, r9
 801b7f0:	46a1      	movlt	r9, r4
 801b7f2:	4630      	mov	r0, r6
 801b7f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801b7f8:	bfba      	itte	lt
 801b7fa:	461c      	movlt	r4, r3
 801b7fc:	2501      	movlt	r5, #1
 801b7fe:	2500      	movge	r5, #0
 801b800:	f7ff fcf6 	bl	801b1f0 <_Balloc>
 801b804:	4602      	mov	r2, r0
 801b806:	b918      	cbnz	r0, 801b810 <__mdiff+0x60>
 801b808:	4b31      	ldr	r3, [pc, #196]	@ (801b8d0 <__mdiff+0x120>)
 801b80a:	f240 2145 	movw	r1, #581	@ 0x245
 801b80e:	e7e3      	b.n	801b7d8 <__mdiff+0x28>
 801b810:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801b814:	6926      	ldr	r6, [r4, #16]
 801b816:	60c5      	str	r5, [r0, #12]
 801b818:	f109 0310 	add.w	r3, r9, #16
 801b81c:	f109 0514 	add.w	r5, r9, #20
 801b820:	f104 0e14 	add.w	lr, r4, #20
 801b824:	f100 0b14 	add.w	fp, r0, #20
 801b828:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801b82c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801b830:	9301      	str	r3, [sp, #4]
 801b832:	46d9      	mov	r9, fp
 801b834:	f04f 0c00 	mov.w	ip, #0
 801b838:	9b01      	ldr	r3, [sp, #4]
 801b83a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801b83e:	f853 af04 	ldr.w	sl, [r3, #4]!
 801b842:	9301      	str	r3, [sp, #4]
 801b844:	fa1f f38a 	uxth.w	r3, sl
 801b848:	4619      	mov	r1, r3
 801b84a:	b283      	uxth	r3, r0
 801b84c:	1acb      	subs	r3, r1, r3
 801b84e:	0c00      	lsrs	r0, r0, #16
 801b850:	4463      	add	r3, ip
 801b852:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801b856:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801b85a:	b29b      	uxth	r3, r3
 801b85c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801b860:	4576      	cmp	r6, lr
 801b862:	f849 3b04 	str.w	r3, [r9], #4
 801b866:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801b86a:	d8e5      	bhi.n	801b838 <__mdiff+0x88>
 801b86c:	1b33      	subs	r3, r6, r4
 801b86e:	3b15      	subs	r3, #21
 801b870:	f023 0303 	bic.w	r3, r3, #3
 801b874:	3415      	adds	r4, #21
 801b876:	3304      	adds	r3, #4
 801b878:	42a6      	cmp	r6, r4
 801b87a:	bf38      	it	cc
 801b87c:	2304      	movcc	r3, #4
 801b87e:	441d      	add	r5, r3
 801b880:	445b      	add	r3, fp
 801b882:	461e      	mov	r6, r3
 801b884:	462c      	mov	r4, r5
 801b886:	4544      	cmp	r4, r8
 801b888:	d30e      	bcc.n	801b8a8 <__mdiff+0xf8>
 801b88a:	f108 0103 	add.w	r1, r8, #3
 801b88e:	1b49      	subs	r1, r1, r5
 801b890:	f021 0103 	bic.w	r1, r1, #3
 801b894:	3d03      	subs	r5, #3
 801b896:	45a8      	cmp	r8, r5
 801b898:	bf38      	it	cc
 801b89a:	2100      	movcc	r1, #0
 801b89c:	440b      	add	r3, r1
 801b89e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801b8a2:	b191      	cbz	r1, 801b8ca <__mdiff+0x11a>
 801b8a4:	6117      	str	r7, [r2, #16]
 801b8a6:	e79d      	b.n	801b7e4 <__mdiff+0x34>
 801b8a8:	f854 1b04 	ldr.w	r1, [r4], #4
 801b8ac:	46e6      	mov	lr, ip
 801b8ae:	0c08      	lsrs	r0, r1, #16
 801b8b0:	fa1c fc81 	uxtah	ip, ip, r1
 801b8b4:	4471      	add	r1, lr
 801b8b6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801b8ba:	b289      	uxth	r1, r1
 801b8bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801b8c0:	f846 1b04 	str.w	r1, [r6], #4
 801b8c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801b8c8:	e7dd      	b.n	801b886 <__mdiff+0xd6>
 801b8ca:	3f01      	subs	r7, #1
 801b8cc:	e7e7      	b.n	801b89e <__mdiff+0xee>
 801b8ce:	bf00      	nop
 801b8d0:	0801e2f5 	.word	0x0801e2f5
 801b8d4:	0801e306 	.word	0x0801e306

0801b8d8 <__ulp>:
 801b8d8:	b082      	sub	sp, #8
 801b8da:	ed8d 0b00 	vstr	d0, [sp]
 801b8de:	9a01      	ldr	r2, [sp, #4]
 801b8e0:	4b0f      	ldr	r3, [pc, #60]	@ (801b920 <__ulp+0x48>)
 801b8e2:	4013      	ands	r3, r2
 801b8e4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801b8e8:	2b00      	cmp	r3, #0
 801b8ea:	dc08      	bgt.n	801b8fe <__ulp+0x26>
 801b8ec:	425b      	negs	r3, r3
 801b8ee:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801b8f2:	ea4f 5223 	mov.w	r2, r3, asr #20
 801b8f6:	da04      	bge.n	801b902 <__ulp+0x2a>
 801b8f8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801b8fc:	4113      	asrs	r3, r2
 801b8fe:	2200      	movs	r2, #0
 801b900:	e008      	b.n	801b914 <__ulp+0x3c>
 801b902:	f1a2 0314 	sub.w	r3, r2, #20
 801b906:	2b1e      	cmp	r3, #30
 801b908:	bfda      	itte	le
 801b90a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801b90e:	40da      	lsrle	r2, r3
 801b910:	2201      	movgt	r2, #1
 801b912:	2300      	movs	r3, #0
 801b914:	4619      	mov	r1, r3
 801b916:	4610      	mov	r0, r2
 801b918:	ec41 0b10 	vmov	d0, r0, r1
 801b91c:	b002      	add	sp, #8
 801b91e:	4770      	bx	lr
 801b920:	7ff00000 	.word	0x7ff00000

0801b924 <__b2d>:
 801b924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b928:	6906      	ldr	r6, [r0, #16]
 801b92a:	f100 0814 	add.w	r8, r0, #20
 801b92e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801b932:	1f37      	subs	r7, r6, #4
 801b934:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801b938:	4610      	mov	r0, r2
 801b93a:	f7ff fd4b 	bl	801b3d4 <__hi0bits>
 801b93e:	f1c0 0320 	rsb	r3, r0, #32
 801b942:	280a      	cmp	r0, #10
 801b944:	600b      	str	r3, [r1, #0]
 801b946:	491b      	ldr	r1, [pc, #108]	@ (801b9b4 <__b2d+0x90>)
 801b948:	dc15      	bgt.n	801b976 <__b2d+0x52>
 801b94a:	f1c0 0c0b 	rsb	ip, r0, #11
 801b94e:	fa22 f30c 	lsr.w	r3, r2, ip
 801b952:	45b8      	cmp	r8, r7
 801b954:	ea43 0501 	orr.w	r5, r3, r1
 801b958:	bf34      	ite	cc
 801b95a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801b95e:	2300      	movcs	r3, #0
 801b960:	3015      	adds	r0, #21
 801b962:	fa02 f000 	lsl.w	r0, r2, r0
 801b966:	fa23 f30c 	lsr.w	r3, r3, ip
 801b96a:	4303      	orrs	r3, r0
 801b96c:	461c      	mov	r4, r3
 801b96e:	ec45 4b10 	vmov	d0, r4, r5
 801b972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b976:	45b8      	cmp	r8, r7
 801b978:	bf3a      	itte	cc
 801b97a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801b97e:	f1a6 0708 	subcc.w	r7, r6, #8
 801b982:	2300      	movcs	r3, #0
 801b984:	380b      	subs	r0, #11
 801b986:	d012      	beq.n	801b9ae <__b2d+0x8a>
 801b988:	f1c0 0120 	rsb	r1, r0, #32
 801b98c:	fa23 f401 	lsr.w	r4, r3, r1
 801b990:	4082      	lsls	r2, r0
 801b992:	4322      	orrs	r2, r4
 801b994:	4547      	cmp	r7, r8
 801b996:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801b99a:	bf8c      	ite	hi
 801b99c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801b9a0:	2200      	movls	r2, #0
 801b9a2:	4083      	lsls	r3, r0
 801b9a4:	40ca      	lsrs	r2, r1
 801b9a6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801b9aa:	4313      	orrs	r3, r2
 801b9ac:	e7de      	b.n	801b96c <__b2d+0x48>
 801b9ae:	ea42 0501 	orr.w	r5, r2, r1
 801b9b2:	e7db      	b.n	801b96c <__b2d+0x48>
 801b9b4:	3ff00000 	.word	0x3ff00000

0801b9b8 <__d2b>:
 801b9b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b9bc:	460f      	mov	r7, r1
 801b9be:	2101      	movs	r1, #1
 801b9c0:	ec59 8b10 	vmov	r8, r9, d0
 801b9c4:	4616      	mov	r6, r2
 801b9c6:	f7ff fc13 	bl	801b1f0 <_Balloc>
 801b9ca:	4604      	mov	r4, r0
 801b9cc:	b930      	cbnz	r0, 801b9dc <__d2b+0x24>
 801b9ce:	4602      	mov	r2, r0
 801b9d0:	4b23      	ldr	r3, [pc, #140]	@ (801ba60 <__d2b+0xa8>)
 801b9d2:	4824      	ldr	r0, [pc, #144]	@ (801ba64 <__d2b+0xac>)
 801b9d4:	f240 310f 	movw	r1, #783	@ 0x30f
 801b9d8:	f001 fb4e 	bl	801d078 <__assert_func>
 801b9dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801b9e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b9e4:	b10d      	cbz	r5, 801b9ea <__d2b+0x32>
 801b9e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801b9ea:	9301      	str	r3, [sp, #4]
 801b9ec:	f1b8 0300 	subs.w	r3, r8, #0
 801b9f0:	d023      	beq.n	801ba3a <__d2b+0x82>
 801b9f2:	4668      	mov	r0, sp
 801b9f4:	9300      	str	r3, [sp, #0]
 801b9f6:	f7ff fd0c 	bl	801b412 <__lo0bits>
 801b9fa:	e9dd 1200 	ldrd	r1, r2, [sp]
 801b9fe:	b1d0      	cbz	r0, 801ba36 <__d2b+0x7e>
 801ba00:	f1c0 0320 	rsb	r3, r0, #32
 801ba04:	fa02 f303 	lsl.w	r3, r2, r3
 801ba08:	430b      	orrs	r3, r1
 801ba0a:	40c2      	lsrs	r2, r0
 801ba0c:	6163      	str	r3, [r4, #20]
 801ba0e:	9201      	str	r2, [sp, #4]
 801ba10:	9b01      	ldr	r3, [sp, #4]
 801ba12:	61a3      	str	r3, [r4, #24]
 801ba14:	2b00      	cmp	r3, #0
 801ba16:	bf0c      	ite	eq
 801ba18:	2201      	moveq	r2, #1
 801ba1a:	2202      	movne	r2, #2
 801ba1c:	6122      	str	r2, [r4, #16]
 801ba1e:	b1a5      	cbz	r5, 801ba4a <__d2b+0x92>
 801ba20:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801ba24:	4405      	add	r5, r0
 801ba26:	603d      	str	r5, [r7, #0]
 801ba28:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801ba2c:	6030      	str	r0, [r6, #0]
 801ba2e:	4620      	mov	r0, r4
 801ba30:	b003      	add	sp, #12
 801ba32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ba36:	6161      	str	r1, [r4, #20]
 801ba38:	e7ea      	b.n	801ba10 <__d2b+0x58>
 801ba3a:	a801      	add	r0, sp, #4
 801ba3c:	f7ff fce9 	bl	801b412 <__lo0bits>
 801ba40:	9b01      	ldr	r3, [sp, #4]
 801ba42:	6163      	str	r3, [r4, #20]
 801ba44:	3020      	adds	r0, #32
 801ba46:	2201      	movs	r2, #1
 801ba48:	e7e8      	b.n	801ba1c <__d2b+0x64>
 801ba4a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801ba4e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801ba52:	6038      	str	r0, [r7, #0]
 801ba54:	6918      	ldr	r0, [r3, #16]
 801ba56:	f7ff fcbd 	bl	801b3d4 <__hi0bits>
 801ba5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801ba5e:	e7e5      	b.n	801ba2c <__d2b+0x74>
 801ba60:	0801e2f5 	.word	0x0801e2f5
 801ba64:	0801e306 	.word	0x0801e306

0801ba68 <__ratio>:
 801ba68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba6c:	b085      	sub	sp, #20
 801ba6e:	e9cd 1000 	strd	r1, r0, [sp]
 801ba72:	a902      	add	r1, sp, #8
 801ba74:	f7ff ff56 	bl	801b924 <__b2d>
 801ba78:	9800      	ldr	r0, [sp, #0]
 801ba7a:	a903      	add	r1, sp, #12
 801ba7c:	ec55 4b10 	vmov	r4, r5, d0
 801ba80:	f7ff ff50 	bl	801b924 <__b2d>
 801ba84:	9b01      	ldr	r3, [sp, #4]
 801ba86:	6919      	ldr	r1, [r3, #16]
 801ba88:	9b00      	ldr	r3, [sp, #0]
 801ba8a:	691b      	ldr	r3, [r3, #16]
 801ba8c:	1ac9      	subs	r1, r1, r3
 801ba8e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801ba92:	1a9b      	subs	r3, r3, r2
 801ba94:	ec5b ab10 	vmov	sl, fp, d0
 801ba98:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801ba9c:	2b00      	cmp	r3, #0
 801ba9e:	bfce      	itee	gt
 801baa0:	462a      	movgt	r2, r5
 801baa2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801baa6:	465a      	movle	r2, fp
 801baa8:	462f      	mov	r7, r5
 801baaa:	46d9      	mov	r9, fp
 801baac:	bfcc      	ite	gt
 801baae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801bab2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801bab6:	464b      	mov	r3, r9
 801bab8:	4652      	mov	r2, sl
 801baba:	4620      	mov	r0, r4
 801babc:	4639      	mov	r1, r7
 801babe:	f7eb fea5 	bl	800780c <__aeabi_ddiv>
 801bac2:	ec41 0b10 	vmov	d0, r0, r1
 801bac6:	b005      	add	sp, #20
 801bac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bacc <__copybits>:
 801bacc:	3901      	subs	r1, #1
 801bace:	b570      	push	{r4, r5, r6, lr}
 801bad0:	1149      	asrs	r1, r1, #5
 801bad2:	6914      	ldr	r4, [r2, #16]
 801bad4:	3101      	adds	r1, #1
 801bad6:	f102 0314 	add.w	r3, r2, #20
 801bada:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801bade:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801bae2:	1f05      	subs	r5, r0, #4
 801bae4:	42a3      	cmp	r3, r4
 801bae6:	d30c      	bcc.n	801bb02 <__copybits+0x36>
 801bae8:	1aa3      	subs	r3, r4, r2
 801baea:	3b11      	subs	r3, #17
 801baec:	f023 0303 	bic.w	r3, r3, #3
 801baf0:	3211      	adds	r2, #17
 801baf2:	42a2      	cmp	r2, r4
 801baf4:	bf88      	it	hi
 801baf6:	2300      	movhi	r3, #0
 801baf8:	4418      	add	r0, r3
 801bafa:	2300      	movs	r3, #0
 801bafc:	4288      	cmp	r0, r1
 801bafe:	d305      	bcc.n	801bb0c <__copybits+0x40>
 801bb00:	bd70      	pop	{r4, r5, r6, pc}
 801bb02:	f853 6b04 	ldr.w	r6, [r3], #4
 801bb06:	f845 6f04 	str.w	r6, [r5, #4]!
 801bb0a:	e7eb      	b.n	801bae4 <__copybits+0x18>
 801bb0c:	f840 3b04 	str.w	r3, [r0], #4
 801bb10:	e7f4      	b.n	801bafc <__copybits+0x30>

0801bb12 <__any_on>:
 801bb12:	f100 0214 	add.w	r2, r0, #20
 801bb16:	6900      	ldr	r0, [r0, #16]
 801bb18:	114b      	asrs	r3, r1, #5
 801bb1a:	4298      	cmp	r0, r3
 801bb1c:	b510      	push	{r4, lr}
 801bb1e:	db11      	blt.n	801bb44 <__any_on+0x32>
 801bb20:	dd0a      	ble.n	801bb38 <__any_on+0x26>
 801bb22:	f011 011f 	ands.w	r1, r1, #31
 801bb26:	d007      	beq.n	801bb38 <__any_on+0x26>
 801bb28:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801bb2c:	fa24 f001 	lsr.w	r0, r4, r1
 801bb30:	fa00 f101 	lsl.w	r1, r0, r1
 801bb34:	428c      	cmp	r4, r1
 801bb36:	d10b      	bne.n	801bb50 <__any_on+0x3e>
 801bb38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801bb3c:	4293      	cmp	r3, r2
 801bb3e:	d803      	bhi.n	801bb48 <__any_on+0x36>
 801bb40:	2000      	movs	r0, #0
 801bb42:	bd10      	pop	{r4, pc}
 801bb44:	4603      	mov	r3, r0
 801bb46:	e7f7      	b.n	801bb38 <__any_on+0x26>
 801bb48:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801bb4c:	2900      	cmp	r1, #0
 801bb4e:	d0f5      	beq.n	801bb3c <__any_on+0x2a>
 801bb50:	2001      	movs	r0, #1
 801bb52:	e7f6      	b.n	801bb42 <__any_on+0x30>

0801bb54 <sulp>:
 801bb54:	b570      	push	{r4, r5, r6, lr}
 801bb56:	4604      	mov	r4, r0
 801bb58:	460d      	mov	r5, r1
 801bb5a:	ec45 4b10 	vmov	d0, r4, r5
 801bb5e:	4616      	mov	r6, r2
 801bb60:	f7ff feba 	bl	801b8d8 <__ulp>
 801bb64:	ec51 0b10 	vmov	r0, r1, d0
 801bb68:	b17e      	cbz	r6, 801bb8a <sulp+0x36>
 801bb6a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801bb6e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801bb72:	2b00      	cmp	r3, #0
 801bb74:	dd09      	ble.n	801bb8a <sulp+0x36>
 801bb76:	051b      	lsls	r3, r3, #20
 801bb78:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801bb7c:	2400      	movs	r4, #0
 801bb7e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801bb82:	4622      	mov	r2, r4
 801bb84:	462b      	mov	r3, r5
 801bb86:	f7eb fd17 	bl	80075b8 <__aeabi_dmul>
 801bb8a:	ec41 0b10 	vmov	d0, r0, r1
 801bb8e:	bd70      	pop	{r4, r5, r6, pc}

0801bb90 <_strtod_l>:
 801bb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb94:	b09f      	sub	sp, #124	@ 0x7c
 801bb96:	460c      	mov	r4, r1
 801bb98:	9217      	str	r2, [sp, #92]	@ 0x5c
 801bb9a:	2200      	movs	r2, #0
 801bb9c:	921a      	str	r2, [sp, #104]	@ 0x68
 801bb9e:	9005      	str	r0, [sp, #20]
 801bba0:	f04f 0a00 	mov.w	sl, #0
 801bba4:	f04f 0b00 	mov.w	fp, #0
 801bba8:	460a      	mov	r2, r1
 801bbaa:	9219      	str	r2, [sp, #100]	@ 0x64
 801bbac:	7811      	ldrb	r1, [r2, #0]
 801bbae:	292b      	cmp	r1, #43	@ 0x2b
 801bbb0:	d04a      	beq.n	801bc48 <_strtod_l+0xb8>
 801bbb2:	d838      	bhi.n	801bc26 <_strtod_l+0x96>
 801bbb4:	290d      	cmp	r1, #13
 801bbb6:	d832      	bhi.n	801bc1e <_strtod_l+0x8e>
 801bbb8:	2908      	cmp	r1, #8
 801bbba:	d832      	bhi.n	801bc22 <_strtod_l+0x92>
 801bbbc:	2900      	cmp	r1, #0
 801bbbe:	d03b      	beq.n	801bc38 <_strtod_l+0xa8>
 801bbc0:	2200      	movs	r2, #0
 801bbc2:	920b      	str	r2, [sp, #44]	@ 0x2c
 801bbc4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801bbc6:	782a      	ldrb	r2, [r5, #0]
 801bbc8:	2a30      	cmp	r2, #48	@ 0x30
 801bbca:	f040 80b3 	bne.w	801bd34 <_strtod_l+0x1a4>
 801bbce:	786a      	ldrb	r2, [r5, #1]
 801bbd0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801bbd4:	2a58      	cmp	r2, #88	@ 0x58
 801bbd6:	d16e      	bne.n	801bcb6 <_strtod_l+0x126>
 801bbd8:	9302      	str	r3, [sp, #8]
 801bbda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bbdc:	9301      	str	r3, [sp, #4]
 801bbde:	ab1a      	add	r3, sp, #104	@ 0x68
 801bbe0:	9300      	str	r3, [sp, #0]
 801bbe2:	4a8e      	ldr	r2, [pc, #568]	@ (801be1c <_strtod_l+0x28c>)
 801bbe4:	9805      	ldr	r0, [sp, #20]
 801bbe6:	ab1b      	add	r3, sp, #108	@ 0x6c
 801bbe8:	a919      	add	r1, sp, #100	@ 0x64
 801bbea:	f001 fadf 	bl	801d1ac <__gethex>
 801bbee:	f010 060f 	ands.w	r6, r0, #15
 801bbf2:	4604      	mov	r4, r0
 801bbf4:	d005      	beq.n	801bc02 <_strtod_l+0x72>
 801bbf6:	2e06      	cmp	r6, #6
 801bbf8:	d128      	bne.n	801bc4c <_strtod_l+0xbc>
 801bbfa:	3501      	adds	r5, #1
 801bbfc:	2300      	movs	r3, #0
 801bbfe:	9519      	str	r5, [sp, #100]	@ 0x64
 801bc00:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bc02:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801bc04:	2b00      	cmp	r3, #0
 801bc06:	f040 858e 	bne.w	801c726 <_strtod_l+0xb96>
 801bc0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bc0c:	b1cb      	cbz	r3, 801bc42 <_strtod_l+0xb2>
 801bc0e:	4652      	mov	r2, sl
 801bc10:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801bc14:	ec43 2b10 	vmov	d0, r2, r3
 801bc18:	b01f      	add	sp, #124	@ 0x7c
 801bc1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc1e:	2920      	cmp	r1, #32
 801bc20:	d1ce      	bne.n	801bbc0 <_strtod_l+0x30>
 801bc22:	3201      	adds	r2, #1
 801bc24:	e7c1      	b.n	801bbaa <_strtod_l+0x1a>
 801bc26:	292d      	cmp	r1, #45	@ 0x2d
 801bc28:	d1ca      	bne.n	801bbc0 <_strtod_l+0x30>
 801bc2a:	2101      	movs	r1, #1
 801bc2c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801bc2e:	1c51      	adds	r1, r2, #1
 801bc30:	9119      	str	r1, [sp, #100]	@ 0x64
 801bc32:	7852      	ldrb	r2, [r2, #1]
 801bc34:	2a00      	cmp	r2, #0
 801bc36:	d1c5      	bne.n	801bbc4 <_strtod_l+0x34>
 801bc38:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801bc3a:	9419      	str	r4, [sp, #100]	@ 0x64
 801bc3c:	2b00      	cmp	r3, #0
 801bc3e:	f040 8570 	bne.w	801c722 <_strtod_l+0xb92>
 801bc42:	4652      	mov	r2, sl
 801bc44:	465b      	mov	r3, fp
 801bc46:	e7e5      	b.n	801bc14 <_strtod_l+0x84>
 801bc48:	2100      	movs	r1, #0
 801bc4a:	e7ef      	b.n	801bc2c <_strtod_l+0x9c>
 801bc4c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801bc4e:	b13a      	cbz	r2, 801bc60 <_strtod_l+0xd0>
 801bc50:	2135      	movs	r1, #53	@ 0x35
 801bc52:	a81c      	add	r0, sp, #112	@ 0x70
 801bc54:	f7ff ff3a 	bl	801bacc <__copybits>
 801bc58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801bc5a:	9805      	ldr	r0, [sp, #20]
 801bc5c:	f7ff fb08 	bl	801b270 <_Bfree>
 801bc60:	3e01      	subs	r6, #1
 801bc62:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801bc64:	2e04      	cmp	r6, #4
 801bc66:	d806      	bhi.n	801bc76 <_strtod_l+0xe6>
 801bc68:	e8df f006 	tbb	[pc, r6]
 801bc6c:	201d0314 	.word	0x201d0314
 801bc70:	14          	.byte	0x14
 801bc71:	00          	.byte	0x00
 801bc72:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801bc76:	05e1      	lsls	r1, r4, #23
 801bc78:	bf48      	it	mi
 801bc7a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801bc7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801bc82:	0d1b      	lsrs	r3, r3, #20
 801bc84:	051b      	lsls	r3, r3, #20
 801bc86:	2b00      	cmp	r3, #0
 801bc88:	d1bb      	bne.n	801bc02 <_strtod_l+0x72>
 801bc8a:	f7fe fb23 	bl	801a2d4 <__errno>
 801bc8e:	2322      	movs	r3, #34	@ 0x22
 801bc90:	6003      	str	r3, [r0, #0]
 801bc92:	e7b6      	b.n	801bc02 <_strtod_l+0x72>
 801bc94:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 801bc98:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801bc9c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801bca0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801bca4:	e7e7      	b.n	801bc76 <_strtod_l+0xe6>
 801bca6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 801be24 <_strtod_l+0x294>
 801bcaa:	e7e4      	b.n	801bc76 <_strtod_l+0xe6>
 801bcac:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 801bcb0:	f04f 3aff 	mov.w	sl, #4294967295
 801bcb4:	e7df      	b.n	801bc76 <_strtod_l+0xe6>
 801bcb6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801bcb8:	1c5a      	adds	r2, r3, #1
 801bcba:	9219      	str	r2, [sp, #100]	@ 0x64
 801bcbc:	785b      	ldrb	r3, [r3, #1]
 801bcbe:	2b30      	cmp	r3, #48	@ 0x30
 801bcc0:	d0f9      	beq.n	801bcb6 <_strtod_l+0x126>
 801bcc2:	2b00      	cmp	r3, #0
 801bcc4:	d09d      	beq.n	801bc02 <_strtod_l+0x72>
 801bcc6:	2301      	movs	r3, #1
 801bcc8:	9309      	str	r3, [sp, #36]	@ 0x24
 801bcca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801bccc:	930c      	str	r3, [sp, #48]	@ 0x30
 801bcce:	2300      	movs	r3, #0
 801bcd0:	9308      	str	r3, [sp, #32]
 801bcd2:	930a      	str	r3, [sp, #40]	@ 0x28
 801bcd4:	461f      	mov	r7, r3
 801bcd6:	220a      	movs	r2, #10
 801bcd8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801bcda:	7805      	ldrb	r5, [r0, #0]
 801bcdc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 801bce0:	b2d9      	uxtb	r1, r3
 801bce2:	2909      	cmp	r1, #9
 801bce4:	d928      	bls.n	801bd38 <_strtod_l+0x1a8>
 801bce6:	494e      	ldr	r1, [pc, #312]	@ (801be20 <_strtod_l+0x290>)
 801bce8:	2201      	movs	r2, #1
 801bcea:	f001 f979 	bl	801cfe0 <strncmp>
 801bcee:	2800      	cmp	r0, #0
 801bcf0:	d032      	beq.n	801bd58 <_strtod_l+0x1c8>
 801bcf2:	2000      	movs	r0, #0
 801bcf4:	462a      	mov	r2, r5
 801bcf6:	4681      	mov	r9, r0
 801bcf8:	463d      	mov	r5, r7
 801bcfa:	4603      	mov	r3, r0
 801bcfc:	2a65      	cmp	r2, #101	@ 0x65
 801bcfe:	d001      	beq.n	801bd04 <_strtod_l+0x174>
 801bd00:	2a45      	cmp	r2, #69	@ 0x45
 801bd02:	d114      	bne.n	801bd2e <_strtod_l+0x19e>
 801bd04:	b91d      	cbnz	r5, 801bd0e <_strtod_l+0x17e>
 801bd06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bd08:	4302      	orrs	r2, r0
 801bd0a:	d095      	beq.n	801bc38 <_strtod_l+0xa8>
 801bd0c:	2500      	movs	r5, #0
 801bd0e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 801bd10:	1c62      	adds	r2, r4, #1
 801bd12:	9219      	str	r2, [sp, #100]	@ 0x64
 801bd14:	7862      	ldrb	r2, [r4, #1]
 801bd16:	2a2b      	cmp	r2, #43	@ 0x2b
 801bd18:	d077      	beq.n	801be0a <_strtod_l+0x27a>
 801bd1a:	2a2d      	cmp	r2, #45	@ 0x2d
 801bd1c:	d07b      	beq.n	801be16 <_strtod_l+0x286>
 801bd1e:	f04f 0c00 	mov.w	ip, #0
 801bd22:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801bd26:	2909      	cmp	r1, #9
 801bd28:	f240 8082 	bls.w	801be30 <_strtod_l+0x2a0>
 801bd2c:	9419      	str	r4, [sp, #100]	@ 0x64
 801bd2e:	f04f 0800 	mov.w	r8, #0
 801bd32:	e0a2      	b.n	801be7a <_strtod_l+0x2ea>
 801bd34:	2300      	movs	r3, #0
 801bd36:	e7c7      	b.n	801bcc8 <_strtod_l+0x138>
 801bd38:	2f08      	cmp	r7, #8
 801bd3a:	bfd5      	itete	le
 801bd3c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801bd3e:	9908      	ldrgt	r1, [sp, #32]
 801bd40:	fb02 3301 	mlale	r3, r2, r1, r3
 801bd44:	fb02 3301 	mlagt	r3, r2, r1, r3
 801bd48:	f100 0001 	add.w	r0, r0, #1
 801bd4c:	bfd4      	ite	le
 801bd4e:	930a      	strle	r3, [sp, #40]	@ 0x28
 801bd50:	9308      	strgt	r3, [sp, #32]
 801bd52:	3701      	adds	r7, #1
 801bd54:	9019      	str	r0, [sp, #100]	@ 0x64
 801bd56:	e7bf      	b.n	801bcd8 <_strtod_l+0x148>
 801bd58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801bd5a:	1c5a      	adds	r2, r3, #1
 801bd5c:	9219      	str	r2, [sp, #100]	@ 0x64
 801bd5e:	785a      	ldrb	r2, [r3, #1]
 801bd60:	b37f      	cbz	r7, 801bdc2 <_strtod_l+0x232>
 801bd62:	4681      	mov	r9, r0
 801bd64:	463d      	mov	r5, r7
 801bd66:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801bd6a:	2b09      	cmp	r3, #9
 801bd6c:	d912      	bls.n	801bd94 <_strtod_l+0x204>
 801bd6e:	2301      	movs	r3, #1
 801bd70:	e7c4      	b.n	801bcfc <_strtod_l+0x16c>
 801bd72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801bd74:	1c5a      	adds	r2, r3, #1
 801bd76:	9219      	str	r2, [sp, #100]	@ 0x64
 801bd78:	785a      	ldrb	r2, [r3, #1]
 801bd7a:	3001      	adds	r0, #1
 801bd7c:	2a30      	cmp	r2, #48	@ 0x30
 801bd7e:	d0f8      	beq.n	801bd72 <_strtod_l+0x1e2>
 801bd80:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801bd84:	2b08      	cmp	r3, #8
 801bd86:	f200 84d3 	bhi.w	801c730 <_strtod_l+0xba0>
 801bd8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801bd8c:	930c      	str	r3, [sp, #48]	@ 0x30
 801bd8e:	4681      	mov	r9, r0
 801bd90:	2000      	movs	r0, #0
 801bd92:	4605      	mov	r5, r0
 801bd94:	3a30      	subs	r2, #48	@ 0x30
 801bd96:	f100 0301 	add.w	r3, r0, #1
 801bd9a:	d02a      	beq.n	801bdf2 <_strtod_l+0x262>
 801bd9c:	4499      	add	r9, r3
 801bd9e:	eb00 0c05 	add.w	ip, r0, r5
 801bda2:	462b      	mov	r3, r5
 801bda4:	210a      	movs	r1, #10
 801bda6:	4563      	cmp	r3, ip
 801bda8:	d10d      	bne.n	801bdc6 <_strtod_l+0x236>
 801bdaa:	1c69      	adds	r1, r5, #1
 801bdac:	4401      	add	r1, r0
 801bdae:	4428      	add	r0, r5
 801bdb0:	2808      	cmp	r0, #8
 801bdb2:	dc16      	bgt.n	801bde2 <_strtod_l+0x252>
 801bdb4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801bdb6:	230a      	movs	r3, #10
 801bdb8:	fb03 2300 	mla	r3, r3, r0, r2
 801bdbc:	930a      	str	r3, [sp, #40]	@ 0x28
 801bdbe:	2300      	movs	r3, #0
 801bdc0:	e018      	b.n	801bdf4 <_strtod_l+0x264>
 801bdc2:	4638      	mov	r0, r7
 801bdc4:	e7da      	b.n	801bd7c <_strtod_l+0x1ec>
 801bdc6:	2b08      	cmp	r3, #8
 801bdc8:	f103 0301 	add.w	r3, r3, #1
 801bdcc:	dc03      	bgt.n	801bdd6 <_strtod_l+0x246>
 801bdce:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801bdd0:	434e      	muls	r6, r1
 801bdd2:	960a      	str	r6, [sp, #40]	@ 0x28
 801bdd4:	e7e7      	b.n	801bda6 <_strtod_l+0x216>
 801bdd6:	2b10      	cmp	r3, #16
 801bdd8:	bfde      	ittt	le
 801bdda:	9e08      	ldrle	r6, [sp, #32]
 801bddc:	434e      	mulle	r6, r1
 801bdde:	9608      	strle	r6, [sp, #32]
 801bde0:	e7e1      	b.n	801bda6 <_strtod_l+0x216>
 801bde2:	280f      	cmp	r0, #15
 801bde4:	dceb      	bgt.n	801bdbe <_strtod_l+0x22e>
 801bde6:	9808      	ldr	r0, [sp, #32]
 801bde8:	230a      	movs	r3, #10
 801bdea:	fb03 2300 	mla	r3, r3, r0, r2
 801bdee:	9308      	str	r3, [sp, #32]
 801bdf0:	e7e5      	b.n	801bdbe <_strtod_l+0x22e>
 801bdf2:	4629      	mov	r1, r5
 801bdf4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801bdf6:	1c50      	adds	r0, r2, #1
 801bdf8:	9019      	str	r0, [sp, #100]	@ 0x64
 801bdfa:	7852      	ldrb	r2, [r2, #1]
 801bdfc:	4618      	mov	r0, r3
 801bdfe:	460d      	mov	r5, r1
 801be00:	e7b1      	b.n	801bd66 <_strtod_l+0x1d6>
 801be02:	f04f 0900 	mov.w	r9, #0
 801be06:	2301      	movs	r3, #1
 801be08:	e77d      	b.n	801bd06 <_strtod_l+0x176>
 801be0a:	f04f 0c00 	mov.w	ip, #0
 801be0e:	1ca2      	adds	r2, r4, #2
 801be10:	9219      	str	r2, [sp, #100]	@ 0x64
 801be12:	78a2      	ldrb	r2, [r4, #2]
 801be14:	e785      	b.n	801bd22 <_strtod_l+0x192>
 801be16:	f04f 0c01 	mov.w	ip, #1
 801be1a:	e7f8      	b.n	801be0e <_strtod_l+0x27e>
 801be1c:	0801e478 	.word	0x0801e478
 801be20:	0801e460 	.word	0x0801e460
 801be24:	7ff00000 	.word	0x7ff00000
 801be28:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801be2a:	1c51      	adds	r1, r2, #1
 801be2c:	9119      	str	r1, [sp, #100]	@ 0x64
 801be2e:	7852      	ldrb	r2, [r2, #1]
 801be30:	2a30      	cmp	r2, #48	@ 0x30
 801be32:	d0f9      	beq.n	801be28 <_strtod_l+0x298>
 801be34:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801be38:	2908      	cmp	r1, #8
 801be3a:	f63f af78 	bhi.w	801bd2e <_strtod_l+0x19e>
 801be3e:	3a30      	subs	r2, #48	@ 0x30
 801be40:	920e      	str	r2, [sp, #56]	@ 0x38
 801be42:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801be44:	920f      	str	r2, [sp, #60]	@ 0x3c
 801be46:	f04f 080a 	mov.w	r8, #10
 801be4a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801be4c:	1c56      	adds	r6, r2, #1
 801be4e:	9619      	str	r6, [sp, #100]	@ 0x64
 801be50:	7852      	ldrb	r2, [r2, #1]
 801be52:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801be56:	f1be 0f09 	cmp.w	lr, #9
 801be5a:	d939      	bls.n	801bed0 <_strtod_l+0x340>
 801be5c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801be5e:	1a76      	subs	r6, r6, r1
 801be60:	2e08      	cmp	r6, #8
 801be62:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801be66:	dc03      	bgt.n	801be70 <_strtod_l+0x2e0>
 801be68:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801be6a:	4588      	cmp	r8, r1
 801be6c:	bfa8      	it	ge
 801be6e:	4688      	movge	r8, r1
 801be70:	f1bc 0f00 	cmp.w	ip, #0
 801be74:	d001      	beq.n	801be7a <_strtod_l+0x2ea>
 801be76:	f1c8 0800 	rsb	r8, r8, #0
 801be7a:	2d00      	cmp	r5, #0
 801be7c:	d14e      	bne.n	801bf1c <_strtod_l+0x38c>
 801be7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801be80:	4308      	orrs	r0, r1
 801be82:	f47f aebe 	bne.w	801bc02 <_strtod_l+0x72>
 801be86:	2b00      	cmp	r3, #0
 801be88:	f47f aed6 	bne.w	801bc38 <_strtod_l+0xa8>
 801be8c:	2a69      	cmp	r2, #105	@ 0x69
 801be8e:	d028      	beq.n	801bee2 <_strtod_l+0x352>
 801be90:	dc25      	bgt.n	801bede <_strtod_l+0x34e>
 801be92:	2a49      	cmp	r2, #73	@ 0x49
 801be94:	d025      	beq.n	801bee2 <_strtod_l+0x352>
 801be96:	2a4e      	cmp	r2, #78	@ 0x4e
 801be98:	f47f aece 	bne.w	801bc38 <_strtod_l+0xa8>
 801be9c:	499b      	ldr	r1, [pc, #620]	@ (801c10c <_strtod_l+0x57c>)
 801be9e:	a819      	add	r0, sp, #100	@ 0x64
 801bea0:	f001 fba6 	bl	801d5f0 <__match>
 801bea4:	2800      	cmp	r0, #0
 801bea6:	f43f aec7 	beq.w	801bc38 <_strtod_l+0xa8>
 801beaa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801beac:	781b      	ldrb	r3, [r3, #0]
 801beae:	2b28      	cmp	r3, #40	@ 0x28
 801beb0:	d12e      	bne.n	801bf10 <_strtod_l+0x380>
 801beb2:	4997      	ldr	r1, [pc, #604]	@ (801c110 <_strtod_l+0x580>)
 801beb4:	aa1c      	add	r2, sp, #112	@ 0x70
 801beb6:	a819      	add	r0, sp, #100	@ 0x64
 801beb8:	f001 fbae 	bl	801d618 <__hexnan>
 801bebc:	2805      	cmp	r0, #5
 801bebe:	d127      	bne.n	801bf10 <_strtod_l+0x380>
 801bec0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801bec2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801bec6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801beca:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801bece:	e698      	b.n	801bc02 <_strtod_l+0x72>
 801bed0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801bed2:	fb08 2101 	mla	r1, r8, r1, r2
 801bed6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801beda:	920e      	str	r2, [sp, #56]	@ 0x38
 801bedc:	e7b5      	b.n	801be4a <_strtod_l+0x2ba>
 801bede:	2a6e      	cmp	r2, #110	@ 0x6e
 801bee0:	e7da      	b.n	801be98 <_strtod_l+0x308>
 801bee2:	498c      	ldr	r1, [pc, #560]	@ (801c114 <_strtod_l+0x584>)
 801bee4:	a819      	add	r0, sp, #100	@ 0x64
 801bee6:	f001 fb83 	bl	801d5f0 <__match>
 801beea:	2800      	cmp	r0, #0
 801beec:	f43f aea4 	beq.w	801bc38 <_strtod_l+0xa8>
 801bef0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801bef2:	4989      	ldr	r1, [pc, #548]	@ (801c118 <_strtod_l+0x588>)
 801bef4:	3b01      	subs	r3, #1
 801bef6:	a819      	add	r0, sp, #100	@ 0x64
 801bef8:	9319      	str	r3, [sp, #100]	@ 0x64
 801befa:	f001 fb79 	bl	801d5f0 <__match>
 801befe:	b910      	cbnz	r0, 801bf06 <_strtod_l+0x376>
 801bf00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801bf02:	3301      	adds	r3, #1
 801bf04:	9319      	str	r3, [sp, #100]	@ 0x64
 801bf06:	f8df b220 	ldr.w	fp, [pc, #544]	@ 801c128 <_strtod_l+0x598>
 801bf0a:	f04f 0a00 	mov.w	sl, #0
 801bf0e:	e678      	b.n	801bc02 <_strtod_l+0x72>
 801bf10:	4882      	ldr	r0, [pc, #520]	@ (801c11c <_strtod_l+0x58c>)
 801bf12:	f001 f8a9 	bl	801d068 <nan>
 801bf16:	ec5b ab10 	vmov	sl, fp, d0
 801bf1a:	e672      	b.n	801bc02 <_strtod_l+0x72>
 801bf1c:	eba8 0309 	sub.w	r3, r8, r9
 801bf20:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801bf22:	9309      	str	r3, [sp, #36]	@ 0x24
 801bf24:	2f00      	cmp	r7, #0
 801bf26:	bf08      	it	eq
 801bf28:	462f      	moveq	r7, r5
 801bf2a:	2d10      	cmp	r5, #16
 801bf2c:	462c      	mov	r4, r5
 801bf2e:	bfa8      	it	ge
 801bf30:	2410      	movge	r4, #16
 801bf32:	f7eb fac7 	bl	80074c4 <__aeabi_ui2d>
 801bf36:	2d09      	cmp	r5, #9
 801bf38:	4682      	mov	sl, r0
 801bf3a:	468b      	mov	fp, r1
 801bf3c:	dc13      	bgt.n	801bf66 <_strtod_l+0x3d6>
 801bf3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bf40:	2b00      	cmp	r3, #0
 801bf42:	f43f ae5e 	beq.w	801bc02 <_strtod_l+0x72>
 801bf46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bf48:	dd78      	ble.n	801c03c <_strtod_l+0x4ac>
 801bf4a:	2b16      	cmp	r3, #22
 801bf4c:	dc5f      	bgt.n	801c00e <_strtod_l+0x47e>
 801bf4e:	4974      	ldr	r1, [pc, #464]	@ (801c120 <_strtod_l+0x590>)
 801bf50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801bf54:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bf58:	4652      	mov	r2, sl
 801bf5a:	465b      	mov	r3, fp
 801bf5c:	f7eb fb2c 	bl	80075b8 <__aeabi_dmul>
 801bf60:	4682      	mov	sl, r0
 801bf62:	468b      	mov	fp, r1
 801bf64:	e64d      	b.n	801bc02 <_strtod_l+0x72>
 801bf66:	4b6e      	ldr	r3, [pc, #440]	@ (801c120 <_strtod_l+0x590>)
 801bf68:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801bf6c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 801bf70:	f7eb fb22 	bl	80075b8 <__aeabi_dmul>
 801bf74:	4682      	mov	sl, r0
 801bf76:	9808      	ldr	r0, [sp, #32]
 801bf78:	468b      	mov	fp, r1
 801bf7a:	f7eb faa3 	bl	80074c4 <__aeabi_ui2d>
 801bf7e:	4602      	mov	r2, r0
 801bf80:	460b      	mov	r3, r1
 801bf82:	4650      	mov	r0, sl
 801bf84:	4659      	mov	r1, fp
 801bf86:	f7eb f961 	bl	800724c <__adddf3>
 801bf8a:	2d0f      	cmp	r5, #15
 801bf8c:	4682      	mov	sl, r0
 801bf8e:	468b      	mov	fp, r1
 801bf90:	ddd5      	ble.n	801bf3e <_strtod_l+0x3ae>
 801bf92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bf94:	1b2c      	subs	r4, r5, r4
 801bf96:	441c      	add	r4, r3
 801bf98:	2c00      	cmp	r4, #0
 801bf9a:	f340 8096 	ble.w	801c0ca <_strtod_l+0x53a>
 801bf9e:	f014 030f 	ands.w	r3, r4, #15
 801bfa2:	d00a      	beq.n	801bfba <_strtod_l+0x42a>
 801bfa4:	495e      	ldr	r1, [pc, #376]	@ (801c120 <_strtod_l+0x590>)
 801bfa6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801bfaa:	4652      	mov	r2, sl
 801bfac:	465b      	mov	r3, fp
 801bfae:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bfb2:	f7eb fb01 	bl	80075b8 <__aeabi_dmul>
 801bfb6:	4682      	mov	sl, r0
 801bfb8:	468b      	mov	fp, r1
 801bfba:	f034 040f 	bics.w	r4, r4, #15
 801bfbe:	d073      	beq.n	801c0a8 <_strtod_l+0x518>
 801bfc0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801bfc4:	dd48      	ble.n	801c058 <_strtod_l+0x4c8>
 801bfc6:	2400      	movs	r4, #0
 801bfc8:	46a0      	mov	r8, r4
 801bfca:	940a      	str	r4, [sp, #40]	@ 0x28
 801bfcc:	46a1      	mov	r9, r4
 801bfce:	9a05      	ldr	r2, [sp, #20]
 801bfd0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 801c128 <_strtod_l+0x598>
 801bfd4:	2322      	movs	r3, #34	@ 0x22
 801bfd6:	6013      	str	r3, [r2, #0]
 801bfd8:	f04f 0a00 	mov.w	sl, #0
 801bfdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bfde:	2b00      	cmp	r3, #0
 801bfe0:	f43f ae0f 	beq.w	801bc02 <_strtod_l+0x72>
 801bfe4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801bfe6:	9805      	ldr	r0, [sp, #20]
 801bfe8:	f7ff f942 	bl	801b270 <_Bfree>
 801bfec:	9805      	ldr	r0, [sp, #20]
 801bfee:	4649      	mov	r1, r9
 801bff0:	f7ff f93e 	bl	801b270 <_Bfree>
 801bff4:	9805      	ldr	r0, [sp, #20]
 801bff6:	4641      	mov	r1, r8
 801bff8:	f7ff f93a 	bl	801b270 <_Bfree>
 801bffc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bffe:	9805      	ldr	r0, [sp, #20]
 801c000:	f7ff f936 	bl	801b270 <_Bfree>
 801c004:	9805      	ldr	r0, [sp, #20]
 801c006:	4621      	mov	r1, r4
 801c008:	f7ff f932 	bl	801b270 <_Bfree>
 801c00c:	e5f9      	b.n	801bc02 <_strtod_l+0x72>
 801c00e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c010:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801c014:	4293      	cmp	r3, r2
 801c016:	dbbc      	blt.n	801bf92 <_strtod_l+0x402>
 801c018:	4c41      	ldr	r4, [pc, #260]	@ (801c120 <_strtod_l+0x590>)
 801c01a:	f1c5 050f 	rsb	r5, r5, #15
 801c01e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801c022:	4652      	mov	r2, sl
 801c024:	465b      	mov	r3, fp
 801c026:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c02a:	f7eb fac5 	bl	80075b8 <__aeabi_dmul>
 801c02e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c030:	1b5d      	subs	r5, r3, r5
 801c032:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801c036:	e9d4 2300 	ldrd	r2, r3, [r4]
 801c03a:	e78f      	b.n	801bf5c <_strtod_l+0x3cc>
 801c03c:	3316      	adds	r3, #22
 801c03e:	dba8      	blt.n	801bf92 <_strtod_l+0x402>
 801c040:	4b37      	ldr	r3, [pc, #220]	@ (801c120 <_strtod_l+0x590>)
 801c042:	eba9 0808 	sub.w	r8, r9, r8
 801c046:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801c04a:	e9d8 2300 	ldrd	r2, r3, [r8]
 801c04e:	4650      	mov	r0, sl
 801c050:	4659      	mov	r1, fp
 801c052:	f7eb fbdb 	bl	800780c <__aeabi_ddiv>
 801c056:	e783      	b.n	801bf60 <_strtod_l+0x3d0>
 801c058:	4b32      	ldr	r3, [pc, #200]	@ (801c124 <_strtod_l+0x594>)
 801c05a:	9308      	str	r3, [sp, #32]
 801c05c:	2300      	movs	r3, #0
 801c05e:	1124      	asrs	r4, r4, #4
 801c060:	4650      	mov	r0, sl
 801c062:	4659      	mov	r1, fp
 801c064:	461e      	mov	r6, r3
 801c066:	2c01      	cmp	r4, #1
 801c068:	dc21      	bgt.n	801c0ae <_strtod_l+0x51e>
 801c06a:	b10b      	cbz	r3, 801c070 <_strtod_l+0x4e0>
 801c06c:	4682      	mov	sl, r0
 801c06e:	468b      	mov	fp, r1
 801c070:	492c      	ldr	r1, [pc, #176]	@ (801c124 <_strtod_l+0x594>)
 801c072:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801c076:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801c07a:	4652      	mov	r2, sl
 801c07c:	465b      	mov	r3, fp
 801c07e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c082:	f7eb fa99 	bl	80075b8 <__aeabi_dmul>
 801c086:	4b28      	ldr	r3, [pc, #160]	@ (801c128 <_strtod_l+0x598>)
 801c088:	460a      	mov	r2, r1
 801c08a:	400b      	ands	r3, r1
 801c08c:	4927      	ldr	r1, [pc, #156]	@ (801c12c <_strtod_l+0x59c>)
 801c08e:	428b      	cmp	r3, r1
 801c090:	4682      	mov	sl, r0
 801c092:	d898      	bhi.n	801bfc6 <_strtod_l+0x436>
 801c094:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 801c098:	428b      	cmp	r3, r1
 801c09a:	bf86      	itte	hi
 801c09c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 801c130 <_strtod_l+0x5a0>
 801c0a0:	f04f 3aff 	movhi.w	sl, #4294967295
 801c0a4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 801c0a8:	2300      	movs	r3, #0
 801c0aa:	9308      	str	r3, [sp, #32]
 801c0ac:	e07a      	b.n	801c1a4 <_strtod_l+0x614>
 801c0ae:	07e2      	lsls	r2, r4, #31
 801c0b0:	d505      	bpl.n	801c0be <_strtod_l+0x52e>
 801c0b2:	9b08      	ldr	r3, [sp, #32]
 801c0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0b8:	f7eb fa7e 	bl	80075b8 <__aeabi_dmul>
 801c0bc:	2301      	movs	r3, #1
 801c0be:	9a08      	ldr	r2, [sp, #32]
 801c0c0:	3208      	adds	r2, #8
 801c0c2:	3601      	adds	r6, #1
 801c0c4:	1064      	asrs	r4, r4, #1
 801c0c6:	9208      	str	r2, [sp, #32]
 801c0c8:	e7cd      	b.n	801c066 <_strtod_l+0x4d6>
 801c0ca:	d0ed      	beq.n	801c0a8 <_strtod_l+0x518>
 801c0cc:	4264      	negs	r4, r4
 801c0ce:	f014 020f 	ands.w	r2, r4, #15
 801c0d2:	d00a      	beq.n	801c0ea <_strtod_l+0x55a>
 801c0d4:	4b12      	ldr	r3, [pc, #72]	@ (801c120 <_strtod_l+0x590>)
 801c0d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c0da:	4650      	mov	r0, sl
 801c0dc:	4659      	mov	r1, fp
 801c0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0e2:	f7eb fb93 	bl	800780c <__aeabi_ddiv>
 801c0e6:	4682      	mov	sl, r0
 801c0e8:	468b      	mov	fp, r1
 801c0ea:	1124      	asrs	r4, r4, #4
 801c0ec:	d0dc      	beq.n	801c0a8 <_strtod_l+0x518>
 801c0ee:	2c1f      	cmp	r4, #31
 801c0f0:	dd20      	ble.n	801c134 <_strtod_l+0x5a4>
 801c0f2:	2400      	movs	r4, #0
 801c0f4:	46a0      	mov	r8, r4
 801c0f6:	940a      	str	r4, [sp, #40]	@ 0x28
 801c0f8:	46a1      	mov	r9, r4
 801c0fa:	9a05      	ldr	r2, [sp, #20]
 801c0fc:	2322      	movs	r3, #34	@ 0x22
 801c0fe:	f04f 0a00 	mov.w	sl, #0
 801c102:	f04f 0b00 	mov.w	fp, #0
 801c106:	6013      	str	r3, [r2, #0]
 801c108:	e768      	b.n	801bfdc <_strtod_l+0x44c>
 801c10a:	bf00      	nop
 801c10c:	0801e24d 	.word	0x0801e24d
 801c110:	0801e464 	.word	0x0801e464
 801c114:	0801e245 	.word	0x0801e245
 801c118:	0801e27c 	.word	0x0801e27c
 801c11c:	0801e60d 	.word	0x0801e60d
 801c120:	0801e398 	.word	0x0801e398
 801c124:	0801e370 	.word	0x0801e370
 801c128:	7ff00000 	.word	0x7ff00000
 801c12c:	7ca00000 	.word	0x7ca00000
 801c130:	7fefffff 	.word	0x7fefffff
 801c134:	f014 0310 	ands.w	r3, r4, #16
 801c138:	bf18      	it	ne
 801c13a:	236a      	movne	r3, #106	@ 0x6a
 801c13c:	4ea9      	ldr	r6, [pc, #676]	@ (801c3e4 <_strtod_l+0x854>)
 801c13e:	9308      	str	r3, [sp, #32]
 801c140:	4650      	mov	r0, sl
 801c142:	4659      	mov	r1, fp
 801c144:	2300      	movs	r3, #0
 801c146:	07e2      	lsls	r2, r4, #31
 801c148:	d504      	bpl.n	801c154 <_strtod_l+0x5c4>
 801c14a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801c14e:	f7eb fa33 	bl	80075b8 <__aeabi_dmul>
 801c152:	2301      	movs	r3, #1
 801c154:	1064      	asrs	r4, r4, #1
 801c156:	f106 0608 	add.w	r6, r6, #8
 801c15a:	d1f4      	bne.n	801c146 <_strtod_l+0x5b6>
 801c15c:	b10b      	cbz	r3, 801c162 <_strtod_l+0x5d2>
 801c15e:	4682      	mov	sl, r0
 801c160:	468b      	mov	fp, r1
 801c162:	9b08      	ldr	r3, [sp, #32]
 801c164:	b1b3      	cbz	r3, 801c194 <_strtod_l+0x604>
 801c166:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801c16a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801c16e:	2b00      	cmp	r3, #0
 801c170:	4659      	mov	r1, fp
 801c172:	dd0f      	ble.n	801c194 <_strtod_l+0x604>
 801c174:	2b1f      	cmp	r3, #31
 801c176:	dd55      	ble.n	801c224 <_strtod_l+0x694>
 801c178:	2b34      	cmp	r3, #52	@ 0x34
 801c17a:	bfde      	ittt	le
 801c17c:	f04f 33ff 	movle.w	r3, #4294967295
 801c180:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801c184:	4093      	lslle	r3, r2
 801c186:	f04f 0a00 	mov.w	sl, #0
 801c18a:	bfcc      	ite	gt
 801c18c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801c190:	ea03 0b01 	andle.w	fp, r3, r1
 801c194:	2200      	movs	r2, #0
 801c196:	2300      	movs	r3, #0
 801c198:	4650      	mov	r0, sl
 801c19a:	4659      	mov	r1, fp
 801c19c:	f7eb fc74 	bl	8007a88 <__aeabi_dcmpeq>
 801c1a0:	2800      	cmp	r0, #0
 801c1a2:	d1a6      	bne.n	801c0f2 <_strtod_l+0x562>
 801c1a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c1a6:	9300      	str	r3, [sp, #0]
 801c1a8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801c1aa:	9805      	ldr	r0, [sp, #20]
 801c1ac:	462b      	mov	r3, r5
 801c1ae:	463a      	mov	r2, r7
 801c1b0:	f7ff f8c6 	bl	801b340 <__s2b>
 801c1b4:	900a      	str	r0, [sp, #40]	@ 0x28
 801c1b6:	2800      	cmp	r0, #0
 801c1b8:	f43f af05 	beq.w	801bfc6 <_strtod_l+0x436>
 801c1bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c1be:	2a00      	cmp	r2, #0
 801c1c0:	eba9 0308 	sub.w	r3, r9, r8
 801c1c4:	bfa8      	it	ge
 801c1c6:	2300      	movge	r3, #0
 801c1c8:	9312      	str	r3, [sp, #72]	@ 0x48
 801c1ca:	2400      	movs	r4, #0
 801c1cc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801c1d0:	9316      	str	r3, [sp, #88]	@ 0x58
 801c1d2:	46a0      	mov	r8, r4
 801c1d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c1d6:	9805      	ldr	r0, [sp, #20]
 801c1d8:	6859      	ldr	r1, [r3, #4]
 801c1da:	f7ff f809 	bl	801b1f0 <_Balloc>
 801c1de:	4681      	mov	r9, r0
 801c1e0:	2800      	cmp	r0, #0
 801c1e2:	f43f aef4 	beq.w	801bfce <_strtod_l+0x43e>
 801c1e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c1e8:	691a      	ldr	r2, [r3, #16]
 801c1ea:	3202      	adds	r2, #2
 801c1ec:	f103 010c 	add.w	r1, r3, #12
 801c1f0:	0092      	lsls	r2, r2, #2
 801c1f2:	300c      	adds	r0, #12
 801c1f4:	f7fe f89b 	bl	801a32e <memcpy>
 801c1f8:	ec4b ab10 	vmov	d0, sl, fp
 801c1fc:	9805      	ldr	r0, [sp, #20]
 801c1fe:	aa1c      	add	r2, sp, #112	@ 0x70
 801c200:	a91b      	add	r1, sp, #108	@ 0x6c
 801c202:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801c206:	f7ff fbd7 	bl	801b9b8 <__d2b>
 801c20a:	901a      	str	r0, [sp, #104]	@ 0x68
 801c20c:	2800      	cmp	r0, #0
 801c20e:	f43f aede 	beq.w	801bfce <_strtod_l+0x43e>
 801c212:	9805      	ldr	r0, [sp, #20]
 801c214:	2101      	movs	r1, #1
 801c216:	f7ff f929 	bl	801b46c <__i2b>
 801c21a:	4680      	mov	r8, r0
 801c21c:	b948      	cbnz	r0, 801c232 <_strtod_l+0x6a2>
 801c21e:	f04f 0800 	mov.w	r8, #0
 801c222:	e6d4      	b.n	801bfce <_strtod_l+0x43e>
 801c224:	f04f 32ff 	mov.w	r2, #4294967295
 801c228:	fa02 f303 	lsl.w	r3, r2, r3
 801c22c:	ea03 0a0a 	and.w	sl, r3, sl
 801c230:	e7b0      	b.n	801c194 <_strtod_l+0x604>
 801c232:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801c234:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801c236:	2d00      	cmp	r5, #0
 801c238:	bfab      	itete	ge
 801c23a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801c23c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801c23e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801c240:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801c242:	bfac      	ite	ge
 801c244:	18ef      	addge	r7, r5, r3
 801c246:	1b5e      	sublt	r6, r3, r5
 801c248:	9b08      	ldr	r3, [sp, #32]
 801c24a:	1aed      	subs	r5, r5, r3
 801c24c:	4415      	add	r5, r2
 801c24e:	4b66      	ldr	r3, [pc, #408]	@ (801c3e8 <_strtod_l+0x858>)
 801c250:	3d01      	subs	r5, #1
 801c252:	429d      	cmp	r5, r3
 801c254:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801c258:	da50      	bge.n	801c2fc <_strtod_l+0x76c>
 801c25a:	1b5b      	subs	r3, r3, r5
 801c25c:	2b1f      	cmp	r3, #31
 801c25e:	eba2 0203 	sub.w	r2, r2, r3
 801c262:	f04f 0101 	mov.w	r1, #1
 801c266:	dc3d      	bgt.n	801c2e4 <_strtod_l+0x754>
 801c268:	fa01 f303 	lsl.w	r3, r1, r3
 801c26c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c26e:	2300      	movs	r3, #0
 801c270:	9310      	str	r3, [sp, #64]	@ 0x40
 801c272:	18bd      	adds	r5, r7, r2
 801c274:	9b08      	ldr	r3, [sp, #32]
 801c276:	42af      	cmp	r7, r5
 801c278:	4416      	add	r6, r2
 801c27a:	441e      	add	r6, r3
 801c27c:	463b      	mov	r3, r7
 801c27e:	bfa8      	it	ge
 801c280:	462b      	movge	r3, r5
 801c282:	42b3      	cmp	r3, r6
 801c284:	bfa8      	it	ge
 801c286:	4633      	movge	r3, r6
 801c288:	2b00      	cmp	r3, #0
 801c28a:	bfc2      	ittt	gt
 801c28c:	1aed      	subgt	r5, r5, r3
 801c28e:	1af6      	subgt	r6, r6, r3
 801c290:	1aff      	subgt	r7, r7, r3
 801c292:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c294:	2b00      	cmp	r3, #0
 801c296:	dd16      	ble.n	801c2c6 <_strtod_l+0x736>
 801c298:	4641      	mov	r1, r8
 801c29a:	9805      	ldr	r0, [sp, #20]
 801c29c:	461a      	mov	r2, r3
 801c29e:	f7ff f9a5 	bl	801b5ec <__pow5mult>
 801c2a2:	4680      	mov	r8, r0
 801c2a4:	2800      	cmp	r0, #0
 801c2a6:	d0ba      	beq.n	801c21e <_strtod_l+0x68e>
 801c2a8:	4601      	mov	r1, r0
 801c2aa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801c2ac:	9805      	ldr	r0, [sp, #20]
 801c2ae:	f7ff f8f3 	bl	801b498 <__multiply>
 801c2b2:	900e      	str	r0, [sp, #56]	@ 0x38
 801c2b4:	2800      	cmp	r0, #0
 801c2b6:	f43f ae8a 	beq.w	801bfce <_strtod_l+0x43e>
 801c2ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801c2bc:	9805      	ldr	r0, [sp, #20]
 801c2be:	f7fe ffd7 	bl	801b270 <_Bfree>
 801c2c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c2c4:	931a      	str	r3, [sp, #104]	@ 0x68
 801c2c6:	2d00      	cmp	r5, #0
 801c2c8:	dc1d      	bgt.n	801c306 <_strtod_l+0x776>
 801c2ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c2cc:	2b00      	cmp	r3, #0
 801c2ce:	dd23      	ble.n	801c318 <_strtod_l+0x788>
 801c2d0:	4649      	mov	r1, r9
 801c2d2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801c2d4:	9805      	ldr	r0, [sp, #20]
 801c2d6:	f7ff f989 	bl	801b5ec <__pow5mult>
 801c2da:	4681      	mov	r9, r0
 801c2dc:	b9e0      	cbnz	r0, 801c318 <_strtod_l+0x788>
 801c2de:	f04f 0900 	mov.w	r9, #0
 801c2e2:	e674      	b.n	801bfce <_strtod_l+0x43e>
 801c2e4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801c2e8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801c2ec:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801c2f0:	35e2      	adds	r5, #226	@ 0xe2
 801c2f2:	fa01 f305 	lsl.w	r3, r1, r5
 801c2f6:	9310      	str	r3, [sp, #64]	@ 0x40
 801c2f8:	9113      	str	r1, [sp, #76]	@ 0x4c
 801c2fa:	e7ba      	b.n	801c272 <_strtod_l+0x6e2>
 801c2fc:	2300      	movs	r3, #0
 801c2fe:	9310      	str	r3, [sp, #64]	@ 0x40
 801c300:	2301      	movs	r3, #1
 801c302:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c304:	e7b5      	b.n	801c272 <_strtod_l+0x6e2>
 801c306:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801c308:	9805      	ldr	r0, [sp, #20]
 801c30a:	462a      	mov	r2, r5
 801c30c:	f7ff f9c8 	bl	801b6a0 <__lshift>
 801c310:	901a      	str	r0, [sp, #104]	@ 0x68
 801c312:	2800      	cmp	r0, #0
 801c314:	d1d9      	bne.n	801c2ca <_strtod_l+0x73a>
 801c316:	e65a      	b.n	801bfce <_strtod_l+0x43e>
 801c318:	2e00      	cmp	r6, #0
 801c31a:	dd07      	ble.n	801c32c <_strtod_l+0x79c>
 801c31c:	4649      	mov	r1, r9
 801c31e:	9805      	ldr	r0, [sp, #20]
 801c320:	4632      	mov	r2, r6
 801c322:	f7ff f9bd 	bl	801b6a0 <__lshift>
 801c326:	4681      	mov	r9, r0
 801c328:	2800      	cmp	r0, #0
 801c32a:	d0d8      	beq.n	801c2de <_strtod_l+0x74e>
 801c32c:	2f00      	cmp	r7, #0
 801c32e:	dd08      	ble.n	801c342 <_strtod_l+0x7b2>
 801c330:	4641      	mov	r1, r8
 801c332:	9805      	ldr	r0, [sp, #20]
 801c334:	463a      	mov	r2, r7
 801c336:	f7ff f9b3 	bl	801b6a0 <__lshift>
 801c33a:	4680      	mov	r8, r0
 801c33c:	2800      	cmp	r0, #0
 801c33e:	f43f ae46 	beq.w	801bfce <_strtod_l+0x43e>
 801c342:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801c344:	9805      	ldr	r0, [sp, #20]
 801c346:	464a      	mov	r2, r9
 801c348:	f7ff fa32 	bl	801b7b0 <__mdiff>
 801c34c:	4604      	mov	r4, r0
 801c34e:	2800      	cmp	r0, #0
 801c350:	f43f ae3d 	beq.w	801bfce <_strtod_l+0x43e>
 801c354:	68c3      	ldr	r3, [r0, #12]
 801c356:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c358:	2300      	movs	r3, #0
 801c35a:	60c3      	str	r3, [r0, #12]
 801c35c:	4641      	mov	r1, r8
 801c35e:	f7ff fa0b 	bl	801b778 <__mcmp>
 801c362:	2800      	cmp	r0, #0
 801c364:	da46      	bge.n	801c3f4 <_strtod_l+0x864>
 801c366:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c368:	ea53 030a 	orrs.w	r3, r3, sl
 801c36c:	d16c      	bne.n	801c448 <_strtod_l+0x8b8>
 801c36e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c372:	2b00      	cmp	r3, #0
 801c374:	d168      	bne.n	801c448 <_strtod_l+0x8b8>
 801c376:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801c37a:	0d1b      	lsrs	r3, r3, #20
 801c37c:	051b      	lsls	r3, r3, #20
 801c37e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801c382:	d961      	bls.n	801c448 <_strtod_l+0x8b8>
 801c384:	6963      	ldr	r3, [r4, #20]
 801c386:	b913      	cbnz	r3, 801c38e <_strtod_l+0x7fe>
 801c388:	6923      	ldr	r3, [r4, #16]
 801c38a:	2b01      	cmp	r3, #1
 801c38c:	dd5c      	ble.n	801c448 <_strtod_l+0x8b8>
 801c38e:	4621      	mov	r1, r4
 801c390:	2201      	movs	r2, #1
 801c392:	9805      	ldr	r0, [sp, #20]
 801c394:	f7ff f984 	bl	801b6a0 <__lshift>
 801c398:	4641      	mov	r1, r8
 801c39a:	4604      	mov	r4, r0
 801c39c:	f7ff f9ec 	bl	801b778 <__mcmp>
 801c3a0:	2800      	cmp	r0, #0
 801c3a2:	dd51      	ble.n	801c448 <_strtod_l+0x8b8>
 801c3a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801c3a8:	9a08      	ldr	r2, [sp, #32]
 801c3aa:	0d1b      	lsrs	r3, r3, #20
 801c3ac:	051b      	lsls	r3, r3, #20
 801c3ae:	2a00      	cmp	r2, #0
 801c3b0:	d06b      	beq.n	801c48a <_strtod_l+0x8fa>
 801c3b2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801c3b6:	d868      	bhi.n	801c48a <_strtod_l+0x8fa>
 801c3b8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801c3bc:	f67f ae9d 	bls.w	801c0fa <_strtod_l+0x56a>
 801c3c0:	4b0a      	ldr	r3, [pc, #40]	@ (801c3ec <_strtod_l+0x85c>)
 801c3c2:	4650      	mov	r0, sl
 801c3c4:	4659      	mov	r1, fp
 801c3c6:	2200      	movs	r2, #0
 801c3c8:	f7eb f8f6 	bl	80075b8 <__aeabi_dmul>
 801c3cc:	4b08      	ldr	r3, [pc, #32]	@ (801c3f0 <_strtod_l+0x860>)
 801c3ce:	400b      	ands	r3, r1
 801c3d0:	4682      	mov	sl, r0
 801c3d2:	468b      	mov	fp, r1
 801c3d4:	2b00      	cmp	r3, #0
 801c3d6:	f47f ae05 	bne.w	801bfe4 <_strtod_l+0x454>
 801c3da:	9a05      	ldr	r2, [sp, #20]
 801c3dc:	2322      	movs	r3, #34	@ 0x22
 801c3de:	6013      	str	r3, [r2, #0]
 801c3e0:	e600      	b.n	801bfe4 <_strtod_l+0x454>
 801c3e2:	bf00      	nop
 801c3e4:	0801e490 	.word	0x0801e490
 801c3e8:	fffffc02 	.word	0xfffffc02
 801c3ec:	39500000 	.word	0x39500000
 801c3f0:	7ff00000 	.word	0x7ff00000
 801c3f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801c3f8:	d165      	bne.n	801c4c6 <_strtod_l+0x936>
 801c3fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c3fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c400:	b35a      	cbz	r2, 801c45a <_strtod_l+0x8ca>
 801c402:	4a9f      	ldr	r2, [pc, #636]	@ (801c680 <_strtod_l+0xaf0>)
 801c404:	4293      	cmp	r3, r2
 801c406:	d12b      	bne.n	801c460 <_strtod_l+0x8d0>
 801c408:	9b08      	ldr	r3, [sp, #32]
 801c40a:	4651      	mov	r1, sl
 801c40c:	b303      	cbz	r3, 801c450 <_strtod_l+0x8c0>
 801c40e:	4b9d      	ldr	r3, [pc, #628]	@ (801c684 <_strtod_l+0xaf4>)
 801c410:	465a      	mov	r2, fp
 801c412:	4013      	ands	r3, r2
 801c414:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 801c418:	f04f 32ff 	mov.w	r2, #4294967295
 801c41c:	d81b      	bhi.n	801c456 <_strtod_l+0x8c6>
 801c41e:	0d1b      	lsrs	r3, r3, #20
 801c420:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801c424:	fa02 f303 	lsl.w	r3, r2, r3
 801c428:	4299      	cmp	r1, r3
 801c42a:	d119      	bne.n	801c460 <_strtod_l+0x8d0>
 801c42c:	4b96      	ldr	r3, [pc, #600]	@ (801c688 <_strtod_l+0xaf8>)
 801c42e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c430:	429a      	cmp	r2, r3
 801c432:	d102      	bne.n	801c43a <_strtod_l+0x8aa>
 801c434:	3101      	adds	r1, #1
 801c436:	f43f adca 	beq.w	801bfce <_strtod_l+0x43e>
 801c43a:	4b92      	ldr	r3, [pc, #584]	@ (801c684 <_strtod_l+0xaf4>)
 801c43c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c43e:	401a      	ands	r2, r3
 801c440:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801c444:	f04f 0a00 	mov.w	sl, #0
 801c448:	9b08      	ldr	r3, [sp, #32]
 801c44a:	2b00      	cmp	r3, #0
 801c44c:	d1b8      	bne.n	801c3c0 <_strtod_l+0x830>
 801c44e:	e5c9      	b.n	801bfe4 <_strtod_l+0x454>
 801c450:	f04f 33ff 	mov.w	r3, #4294967295
 801c454:	e7e8      	b.n	801c428 <_strtod_l+0x898>
 801c456:	4613      	mov	r3, r2
 801c458:	e7e6      	b.n	801c428 <_strtod_l+0x898>
 801c45a:	ea53 030a 	orrs.w	r3, r3, sl
 801c45e:	d0a1      	beq.n	801c3a4 <_strtod_l+0x814>
 801c460:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c462:	b1db      	cbz	r3, 801c49c <_strtod_l+0x90c>
 801c464:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c466:	4213      	tst	r3, r2
 801c468:	d0ee      	beq.n	801c448 <_strtod_l+0x8b8>
 801c46a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c46c:	9a08      	ldr	r2, [sp, #32]
 801c46e:	4650      	mov	r0, sl
 801c470:	4659      	mov	r1, fp
 801c472:	b1bb      	cbz	r3, 801c4a4 <_strtod_l+0x914>
 801c474:	f7ff fb6e 	bl	801bb54 <sulp>
 801c478:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801c47c:	ec53 2b10 	vmov	r2, r3, d0
 801c480:	f7ea fee4 	bl	800724c <__adddf3>
 801c484:	4682      	mov	sl, r0
 801c486:	468b      	mov	fp, r1
 801c488:	e7de      	b.n	801c448 <_strtod_l+0x8b8>
 801c48a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801c48e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801c492:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801c496:	f04f 3aff 	mov.w	sl, #4294967295
 801c49a:	e7d5      	b.n	801c448 <_strtod_l+0x8b8>
 801c49c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801c49e:	ea13 0f0a 	tst.w	r3, sl
 801c4a2:	e7e1      	b.n	801c468 <_strtod_l+0x8d8>
 801c4a4:	f7ff fb56 	bl	801bb54 <sulp>
 801c4a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801c4ac:	ec53 2b10 	vmov	r2, r3, d0
 801c4b0:	f7ea feca 	bl	8007248 <__aeabi_dsub>
 801c4b4:	2200      	movs	r2, #0
 801c4b6:	2300      	movs	r3, #0
 801c4b8:	4682      	mov	sl, r0
 801c4ba:	468b      	mov	fp, r1
 801c4bc:	f7eb fae4 	bl	8007a88 <__aeabi_dcmpeq>
 801c4c0:	2800      	cmp	r0, #0
 801c4c2:	d0c1      	beq.n	801c448 <_strtod_l+0x8b8>
 801c4c4:	e619      	b.n	801c0fa <_strtod_l+0x56a>
 801c4c6:	4641      	mov	r1, r8
 801c4c8:	4620      	mov	r0, r4
 801c4ca:	f7ff facd 	bl	801ba68 <__ratio>
 801c4ce:	ec57 6b10 	vmov	r6, r7, d0
 801c4d2:	2200      	movs	r2, #0
 801c4d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801c4d8:	4630      	mov	r0, r6
 801c4da:	4639      	mov	r1, r7
 801c4dc:	f7eb fae8 	bl	8007ab0 <__aeabi_dcmple>
 801c4e0:	2800      	cmp	r0, #0
 801c4e2:	d06f      	beq.n	801c5c4 <_strtod_l+0xa34>
 801c4e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c4e6:	2b00      	cmp	r3, #0
 801c4e8:	d17a      	bne.n	801c5e0 <_strtod_l+0xa50>
 801c4ea:	f1ba 0f00 	cmp.w	sl, #0
 801c4ee:	d158      	bne.n	801c5a2 <_strtod_l+0xa12>
 801c4f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c4f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c4f6:	2b00      	cmp	r3, #0
 801c4f8:	d15a      	bne.n	801c5b0 <_strtod_l+0xa20>
 801c4fa:	4b64      	ldr	r3, [pc, #400]	@ (801c68c <_strtod_l+0xafc>)
 801c4fc:	2200      	movs	r2, #0
 801c4fe:	4630      	mov	r0, r6
 801c500:	4639      	mov	r1, r7
 801c502:	f7eb facb 	bl	8007a9c <__aeabi_dcmplt>
 801c506:	2800      	cmp	r0, #0
 801c508:	d159      	bne.n	801c5be <_strtod_l+0xa2e>
 801c50a:	4630      	mov	r0, r6
 801c50c:	4639      	mov	r1, r7
 801c50e:	4b60      	ldr	r3, [pc, #384]	@ (801c690 <_strtod_l+0xb00>)
 801c510:	2200      	movs	r2, #0
 801c512:	f7eb f851 	bl	80075b8 <__aeabi_dmul>
 801c516:	4606      	mov	r6, r0
 801c518:	460f      	mov	r7, r1
 801c51a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801c51e:	9606      	str	r6, [sp, #24]
 801c520:	9307      	str	r3, [sp, #28]
 801c522:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c526:	4d57      	ldr	r5, [pc, #348]	@ (801c684 <_strtod_l+0xaf4>)
 801c528:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801c52c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c52e:	401d      	ands	r5, r3
 801c530:	4b58      	ldr	r3, [pc, #352]	@ (801c694 <_strtod_l+0xb04>)
 801c532:	429d      	cmp	r5, r3
 801c534:	f040 80b2 	bne.w	801c69c <_strtod_l+0xb0c>
 801c538:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c53a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801c53e:	ec4b ab10 	vmov	d0, sl, fp
 801c542:	f7ff f9c9 	bl	801b8d8 <__ulp>
 801c546:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c54a:	ec51 0b10 	vmov	r0, r1, d0
 801c54e:	f7eb f833 	bl	80075b8 <__aeabi_dmul>
 801c552:	4652      	mov	r2, sl
 801c554:	465b      	mov	r3, fp
 801c556:	f7ea fe79 	bl	800724c <__adddf3>
 801c55a:	460b      	mov	r3, r1
 801c55c:	4949      	ldr	r1, [pc, #292]	@ (801c684 <_strtod_l+0xaf4>)
 801c55e:	4a4e      	ldr	r2, [pc, #312]	@ (801c698 <_strtod_l+0xb08>)
 801c560:	4019      	ands	r1, r3
 801c562:	4291      	cmp	r1, r2
 801c564:	4682      	mov	sl, r0
 801c566:	d942      	bls.n	801c5ee <_strtod_l+0xa5e>
 801c568:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c56a:	4b47      	ldr	r3, [pc, #284]	@ (801c688 <_strtod_l+0xaf8>)
 801c56c:	429a      	cmp	r2, r3
 801c56e:	d103      	bne.n	801c578 <_strtod_l+0x9e8>
 801c570:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c572:	3301      	adds	r3, #1
 801c574:	f43f ad2b 	beq.w	801bfce <_strtod_l+0x43e>
 801c578:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 801c688 <_strtod_l+0xaf8>
 801c57c:	f04f 3aff 	mov.w	sl, #4294967295
 801c580:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801c582:	9805      	ldr	r0, [sp, #20]
 801c584:	f7fe fe74 	bl	801b270 <_Bfree>
 801c588:	9805      	ldr	r0, [sp, #20]
 801c58a:	4649      	mov	r1, r9
 801c58c:	f7fe fe70 	bl	801b270 <_Bfree>
 801c590:	9805      	ldr	r0, [sp, #20]
 801c592:	4641      	mov	r1, r8
 801c594:	f7fe fe6c 	bl	801b270 <_Bfree>
 801c598:	9805      	ldr	r0, [sp, #20]
 801c59a:	4621      	mov	r1, r4
 801c59c:	f7fe fe68 	bl	801b270 <_Bfree>
 801c5a0:	e618      	b.n	801c1d4 <_strtod_l+0x644>
 801c5a2:	f1ba 0f01 	cmp.w	sl, #1
 801c5a6:	d103      	bne.n	801c5b0 <_strtod_l+0xa20>
 801c5a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c5aa:	2b00      	cmp	r3, #0
 801c5ac:	f43f ada5 	beq.w	801c0fa <_strtod_l+0x56a>
 801c5b0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 801c660 <_strtod_l+0xad0>
 801c5b4:	4f35      	ldr	r7, [pc, #212]	@ (801c68c <_strtod_l+0xafc>)
 801c5b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 801c5ba:	2600      	movs	r6, #0
 801c5bc:	e7b1      	b.n	801c522 <_strtod_l+0x992>
 801c5be:	4f34      	ldr	r7, [pc, #208]	@ (801c690 <_strtod_l+0xb00>)
 801c5c0:	2600      	movs	r6, #0
 801c5c2:	e7aa      	b.n	801c51a <_strtod_l+0x98a>
 801c5c4:	4b32      	ldr	r3, [pc, #200]	@ (801c690 <_strtod_l+0xb00>)
 801c5c6:	4630      	mov	r0, r6
 801c5c8:	4639      	mov	r1, r7
 801c5ca:	2200      	movs	r2, #0
 801c5cc:	f7ea fff4 	bl	80075b8 <__aeabi_dmul>
 801c5d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c5d2:	4606      	mov	r6, r0
 801c5d4:	460f      	mov	r7, r1
 801c5d6:	2b00      	cmp	r3, #0
 801c5d8:	d09f      	beq.n	801c51a <_strtod_l+0x98a>
 801c5da:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801c5de:	e7a0      	b.n	801c522 <_strtod_l+0x992>
 801c5e0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801c668 <_strtod_l+0xad8>
 801c5e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 801c5e8:	ec57 6b17 	vmov	r6, r7, d7
 801c5ec:	e799      	b.n	801c522 <_strtod_l+0x992>
 801c5ee:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801c5f2:	9b08      	ldr	r3, [sp, #32]
 801c5f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801c5f8:	2b00      	cmp	r3, #0
 801c5fa:	d1c1      	bne.n	801c580 <_strtod_l+0x9f0>
 801c5fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801c600:	0d1b      	lsrs	r3, r3, #20
 801c602:	051b      	lsls	r3, r3, #20
 801c604:	429d      	cmp	r5, r3
 801c606:	d1bb      	bne.n	801c580 <_strtod_l+0x9f0>
 801c608:	4630      	mov	r0, r6
 801c60a:	4639      	mov	r1, r7
 801c60c:	f7eb fb34 	bl	8007c78 <__aeabi_d2lz>
 801c610:	f7ea ffa4 	bl	800755c <__aeabi_l2d>
 801c614:	4602      	mov	r2, r0
 801c616:	460b      	mov	r3, r1
 801c618:	4630      	mov	r0, r6
 801c61a:	4639      	mov	r1, r7
 801c61c:	f7ea fe14 	bl	8007248 <__aeabi_dsub>
 801c620:	460b      	mov	r3, r1
 801c622:	4602      	mov	r2, r0
 801c624:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801c628:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801c62c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c62e:	ea46 060a 	orr.w	r6, r6, sl
 801c632:	431e      	orrs	r6, r3
 801c634:	d06f      	beq.n	801c716 <_strtod_l+0xb86>
 801c636:	a30e      	add	r3, pc, #56	@ (adr r3, 801c670 <_strtod_l+0xae0>)
 801c638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c63c:	f7eb fa2e 	bl	8007a9c <__aeabi_dcmplt>
 801c640:	2800      	cmp	r0, #0
 801c642:	f47f accf 	bne.w	801bfe4 <_strtod_l+0x454>
 801c646:	a30c      	add	r3, pc, #48	@ (adr r3, 801c678 <_strtod_l+0xae8>)
 801c648:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c64c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801c650:	f7eb fa42 	bl	8007ad8 <__aeabi_dcmpgt>
 801c654:	2800      	cmp	r0, #0
 801c656:	d093      	beq.n	801c580 <_strtod_l+0x9f0>
 801c658:	e4c4      	b.n	801bfe4 <_strtod_l+0x454>
 801c65a:	bf00      	nop
 801c65c:	f3af 8000 	nop.w
 801c660:	00000000 	.word	0x00000000
 801c664:	bff00000 	.word	0xbff00000
 801c668:	00000000 	.word	0x00000000
 801c66c:	3ff00000 	.word	0x3ff00000
 801c670:	94a03595 	.word	0x94a03595
 801c674:	3fdfffff 	.word	0x3fdfffff
 801c678:	35afe535 	.word	0x35afe535
 801c67c:	3fe00000 	.word	0x3fe00000
 801c680:	000fffff 	.word	0x000fffff
 801c684:	7ff00000 	.word	0x7ff00000
 801c688:	7fefffff 	.word	0x7fefffff
 801c68c:	3ff00000 	.word	0x3ff00000
 801c690:	3fe00000 	.word	0x3fe00000
 801c694:	7fe00000 	.word	0x7fe00000
 801c698:	7c9fffff 	.word	0x7c9fffff
 801c69c:	9b08      	ldr	r3, [sp, #32]
 801c69e:	b323      	cbz	r3, 801c6ea <_strtod_l+0xb5a>
 801c6a0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801c6a4:	d821      	bhi.n	801c6ea <_strtod_l+0xb5a>
 801c6a6:	a328      	add	r3, pc, #160	@ (adr r3, 801c748 <_strtod_l+0xbb8>)
 801c6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c6ac:	4630      	mov	r0, r6
 801c6ae:	4639      	mov	r1, r7
 801c6b0:	f7eb f9fe 	bl	8007ab0 <__aeabi_dcmple>
 801c6b4:	b1a0      	cbz	r0, 801c6e0 <_strtod_l+0xb50>
 801c6b6:	4639      	mov	r1, r7
 801c6b8:	4630      	mov	r0, r6
 801c6ba:	f7eb fa55 	bl	8007b68 <__aeabi_d2uiz>
 801c6be:	2801      	cmp	r0, #1
 801c6c0:	bf38      	it	cc
 801c6c2:	2001      	movcc	r0, #1
 801c6c4:	f7ea fefe 	bl	80074c4 <__aeabi_ui2d>
 801c6c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c6ca:	4606      	mov	r6, r0
 801c6cc:	460f      	mov	r7, r1
 801c6ce:	b9fb      	cbnz	r3, 801c710 <_strtod_l+0xb80>
 801c6d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801c6d4:	9014      	str	r0, [sp, #80]	@ 0x50
 801c6d6:	9315      	str	r3, [sp, #84]	@ 0x54
 801c6d8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801c6dc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801c6e0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c6e2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801c6e6:	1b5b      	subs	r3, r3, r5
 801c6e8:	9311      	str	r3, [sp, #68]	@ 0x44
 801c6ea:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801c6ee:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801c6f2:	f7ff f8f1 	bl	801b8d8 <__ulp>
 801c6f6:	4650      	mov	r0, sl
 801c6f8:	ec53 2b10 	vmov	r2, r3, d0
 801c6fc:	4659      	mov	r1, fp
 801c6fe:	f7ea ff5b 	bl	80075b8 <__aeabi_dmul>
 801c702:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801c706:	f7ea fda1 	bl	800724c <__adddf3>
 801c70a:	4682      	mov	sl, r0
 801c70c:	468b      	mov	fp, r1
 801c70e:	e770      	b.n	801c5f2 <_strtod_l+0xa62>
 801c710:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801c714:	e7e0      	b.n	801c6d8 <_strtod_l+0xb48>
 801c716:	a30e      	add	r3, pc, #56	@ (adr r3, 801c750 <_strtod_l+0xbc0>)
 801c718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c71c:	f7eb f9be 	bl	8007a9c <__aeabi_dcmplt>
 801c720:	e798      	b.n	801c654 <_strtod_l+0xac4>
 801c722:	2300      	movs	r3, #0
 801c724:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c726:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801c728:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c72a:	6013      	str	r3, [r2, #0]
 801c72c:	f7ff ba6d 	b.w	801bc0a <_strtod_l+0x7a>
 801c730:	2a65      	cmp	r2, #101	@ 0x65
 801c732:	f43f ab66 	beq.w	801be02 <_strtod_l+0x272>
 801c736:	2a45      	cmp	r2, #69	@ 0x45
 801c738:	f43f ab63 	beq.w	801be02 <_strtod_l+0x272>
 801c73c:	2301      	movs	r3, #1
 801c73e:	f7ff bb9e 	b.w	801be7e <_strtod_l+0x2ee>
 801c742:	bf00      	nop
 801c744:	f3af 8000 	nop.w
 801c748:	ffc00000 	.word	0xffc00000
 801c74c:	41dfffff 	.word	0x41dfffff
 801c750:	94a03595 	.word	0x94a03595
 801c754:	3fcfffff 	.word	0x3fcfffff

0801c758 <_strtod_r>:
 801c758:	4b01      	ldr	r3, [pc, #4]	@ (801c760 <_strtod_r+0x8>)
 801c75a:	f7ff ba19 	b.w	801bb90 <_strtod_l>
 801c75e:	bf00      	nop
 801c760:	200000ec 	.word	0x200000ec

0801c764 <_strtol_l.constprop.0>:
 801c764:	2b24      	cmp	r3, #36	@ 0x24
 801c766:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c76a:	4686      	mov	lr, r0
 801c76c:	4690      	mov	r8, r2
 801c76e:	d801      	bhi.n	801c774 <_strtol_l.constprop.0+0x10>
 801c770:	2b01      	cmp	r3, #1
 801c772:	d106      	bne.n	801c782 <_strtol_l.constprop.0+0x1e>
 801c774:	f7fd fdae 	bl	801a2d4 <__errno>
 801c778:	2316      	movs	r3, #22
 801c77a:	6003      	str	r3, [r0, #0]
 801c77c:	2000      	movs	r0, #0
 801c77e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c782:	4834      	ldr	r0, [pc, #208]	@ (801c854 <_strtol_l.constprop.0+0xf0>)
 801c784:	460d      	mov	r5, r1
 801c786:	462a      	mov	r2, r5
 801c788:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c78c:	5d06      	ldrb	r6, [r0, r4]
 801c78e:	f016 0608 	ands.w	r6, r6, #8
 801c792:	d1f8      	bne.n	801c786 <_strtol_l.constprop.0+0x22>
 801c794:	2c2d      	cmp	r4, #45	@ 0x2d
 801c796:	d12d      	bne.n	801c7f4 <_strtol_l.constprop.0+0x90>
 801c798:	782c      	ldrb	r4, [r5, #0]
 801c79a:	2601      	movs	r6, #1
 801c79c:	1c95      	adds	r5, r2, #2
 801c79e:	f033 0210 	bics.w	r2, r3, #16
 801c7a2:	d109      	bne.n	801c7b8 <_strtol_l.constprop.0+0x54>
 801c7a4:	2c30      	cmp	r4, #48	@ 0x30
 801c7a6:	d12a      	bne.n	801c7fe <_strtol_l.constprop.0+0x9a>
 801c7a8:	782a      	ldrb	r2, [r5, #0]
 801c7aa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801c7ae:	2a58      	cmp	r2, #88	@ 0x58
 801c7b0:	d125      	bne.n	801c7fe <_strtol_l.constprop.0+0x9a>
 801c7b2:	786c      	ldrb	r4, [r5, #1]
 801c7b4:	2310      	movs	r3, #16
 801c7b6:	3502      	adds	r5, #2
 801c7b8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801c7bc:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c7c0:	2200      	movs	r2, #0
 801c7c2:	fbbc f9f3 	udiv	r9, ip, r3
 801c7c6:	4610      	mov	r0, r2
 801c7c8:	fb03 ca19 	mls	sl, r3, r9, ip
 801c7cc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801c7d0:	2f09      	cmp	r7, #9
 801c7d2:	d81b      	bhi.n	801c80c <_strtol_l.constprop.0+0xa8>
 801c7d4:	463c      	mov	r4, r7
 801c7d6:	42a3      	cmp	r3, r4
 801c7d8:	dd27      	ble.n	801c82a <_strtol_l.constprop.0+0xc6>
 801c7da:	1c57      	adds	r7, r2, #1
 801c7dc:	d007      	beq.n	801c7ee <_strtol_l.constprop.0+0x8a>
 801c7de:	4581      	cmp	r9, r0
 801c7e0:	d320      	bcc.n	801c824 <_strtol_l.constprop.0+0xc0>
 801c7e2:	d101      	bne.n	801c7e8 <_strtol_l.constprop.0+0x84>
 801c7e4:	45a2      	cmp	sl, r4
 801c7e6:	db1d      	blt.n	801c824 <_strtol_l.constprop.0+0xc0>
 801c7e8:	fb00 4003 	mla	r0, r0, r3, r4
 801c7ec:	2201      	movs	r2, #1
 801c7ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c7f2:	e7eb      	b.n	801c7cc <_strtol_l.constprop.0+0x68>
 801c7f4:	2c2b      	cmp	r4, #43	@ 0x2b
 801c7f6:	bf04      	itt	eq
 801c7f8:	782c      	ldrbeq	r4, [r5, #0]
 801c7fa:	1c95      	addeq	r5, r2, #2
 801c7fc:	e7cf      	b.n	801c79e <_strtol_l.constprop.0+0x3a>
 801c7fe:	2b00      	cmp	r3, #0
 801c800:	d1da      	bne.n	801c7b8 <_strtol_l.constprop.0+0x54>
 801c802:	2c30      	cmp	r4, #48	@ 0x30
 801c804:	bf0c      	ite	eq
 801c806:	2308      	moveq	r3, #8
 801c808:	230a      	movne	r3, #10
 801c80a:	e7d5      	b.n	801c7b8 <_strtol_l.constprop.0+0x54>
 801c80c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801c810:	2f19      	cmp	r7, #25
 801c812:	d801      	bhi.n	801c818 <_strtol_l.constprop.0+0xb4>
 801c814:	3c37      	subs	r4, #55	@ 0x37
 801c816:	e7de      	b.n	801c7d6 <_strtol_l.constprop.0+0x72>
 801c818:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801c81c:	2f19      	cmp	r7, #25
 801c81e:	d804      	bhi.n	801c82a <_strtol_l.constprop.0+0xc6>
 801c820:	3c57      	subs	r4, #87	@ 0x57
 801c822:	e7d8      	b.n	801c7d6 <_strtol_l.constprop.0+0x72>
 801c824:	f04f 32ff 	mov.w	r2, #4294967295
 801c828:	e7e1      	b.n	801c7ee <_strtol_l.constprop.0+0x8a>
 801c82a:	1c53      	adds	r3, r2, #1
 801c82c:	d108      	bne.n	801c840 <_strtol_l.constprop.0+0xdc>
 801c82e:	2322      	movs	r3, #34	@ 0x22
 801c830:	f8ce 3000 	str.w	r3, [lr]
 801c834:	4660      	mov	r0, ip
 801c836:	f1b8 0f00 	cmp.w	r8, #0
 801c83a:	d0a0      	beq.n	801c77e <_strtol_l.constprop.0+0x1a>
 801c83c:	1e69      	subs	r1, r5, #1
 801c83e:	e006      	b.n	801c84e <_strtol_l.constprop.0+0xea>
 801c840:	b106      	cbz	r6, 801c844 <_strtol_l.constprop.0+0xe0>
 801c842:	4240      	negs	r0, r0
 801c844:	f1b8 0f00 	cmp.w	r8, #0
 801c848:	d099      	beq.n	801c77e <_strtol_l.constprop.0+0x1a>
 801c84a:	2a00      	cmp	r2, #0
 801c84c:	d1f6      	bne.n	801c83c <_strtol_l.constprop.0+0xd8>
 801c84e:	f8c8 1000 	str.w	r1, [r8]
 801c852:	e794      	b.n	801c77e <_strtol_l.constprop.0+0x1a>
 801c854:	0801e4b9 	.word	0x0801e4b9

0801c858 <_strtol_r>:
 801c858:	f7ff bf84 	b.w	801c764 <_strtol_l.constprop.0>

0801c85c <__ssputs_r>:
 801c85c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c860:	688e      	ldr	r6, [r1, #8]
 801c862:	461f      	mov	r7, r3
 801c864:	42be      	cmp	r6, r7
 801c866:	680b      	ldr	r3, [r1, #0]
 801c868:	4682      	mov	sl, r0
 801c86a:	460c      	mov	r4, r1
 801c86c:	4690      	mov	r8, r2
 801c86e:	d82d      	bhi.n	801c8cc <__ssputs_r+0x70>
 801c870:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c874:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801c878:	d026      	beq.n	801c8c8 <__ssputs_r+0x6c>
 801c87a:	6965      	ldr	r5, [r4, #20]
 801c87c:	6909      	ldr	r1, [r1, #16]
 801c87e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c882:	eba3 0901 	sub.w	r9, r3, r1
 801c886:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c88a:	1c7b      	adds	r3, r7, #1
 801c88c:	444b      	add	r3, r9
 801c88e:	106d      	asrs	r5, r5, #1
 801c890:	429d      	cmp	r5, r3
 801c892:	bf38      	it	cc
 801c894:	461d      	movcc	r5, r3
 801c896:	0553      	lsls	r3, r2, #21
 801c898:	d527      	bpl.n	801c8ea <__ssputs_r+0x8e>
 801c89a:	4629      	mov	r1, r5
 801c89c:	f7fe fc1c 	bl	801b0d8 <_malloc_r>
 801c8a0:	4606      	mov	r6, r0
 801c8a2:	b360      	cbz	r0, 801c8fe <__ssputs_r+0xa2>
 801c8a4:	6921      	ldr	r1, [r4, #16]
 801c8a6:	464a      	mov	r2, r9
 801c8a8:	f7fd fd41 	bl	801a32e <memcpy>
 801c8ac:	89a3      	ldrh	r3, [r4, #12]
 801c8ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801c8b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c8b6:	81a3      	strh	r3, [r4, #12]
 801c8b8:	6126      	str	r6, [r4, #16]
 801c8ba:	6165      	str	r5, [r4, #20]
 801c8bc:	444e      	add	r6, r9
 801c8be:	eba5 0509 	sub.w	r5, r5, r9
 801c8c2:	6026      	str	r6, [r4, #0]
 801c8c4:	60a5      	str	r5, [r4, #8]
 801c8c6:	463e      	mov	r6, r7
 801c8c8:	42be      	cmp	r6, r7
 801c8ca:	d900      	bls.n	801c8ce <__ssputs_r+0x72>
 801c8cc:	463e      	mov	r6, r7
 801c8ce:	6820      	ldr	r0, [r4, #0]
 801c8d0:	4632      	mov	r2, r6
 801c8d2:	4641      	mov	r1, r8
 801c8d4:	f000 fb6a 	bl	801cfac <memmove>
 801c8d8:	68a3      	ldr	r3, [r4, #8]
 801c8da:	1b9b      	subs	r3, r3, r6
 801c8dc:	60a3      	str	r3, [r4, #8]
 801c8de:	6823      	ldr	r3, [r4, #0]
 801c8e0:	4433      	add	r3, r6
 801c8e2:	6023      	str	r3, [r4, #0]
 801c8e4:	2000      	movs	r0, #0
 801c8e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c8ea:	462a      	mov	r2, r5
 801c8ec:	f000 ff41 	bl	801d772 <_realloc_r>
 801c8f0:	4606      	mov	r6, r0
 801c8f2:	2800      	cmp	r0, #0
 801c8f4:	d1e0      	bne.n	801c8b8 <__ssputs_r+0x5c>
 801c8f6:	6921      	ldr	r1, [r4, #16]
 801c8f8:	4650      	mov	r0, sl
 801c8fa:	f7fe fb79 	bl	801aff0 <_free_r>
 801c8fe:	230c      	movs	r3, #12
 801c900:	f8ca 3000 	str.w	r3, [sl]
 801c904:	89a3      	ldrh	r3, [r4, #12]
 801c906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c90a:	81a3      	strh	r3, [r4, #12]
 801c90c:	f04f 30ff 	mov.w	r0, #4294967295
 801c910:	e7e9      	b.n	801c8e6 <__ssputs_r+0x8a>
	...

0801c914 <_svfiprintf_r>:
 801c914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c918:	4698      	mov	r8, r3
 801c91a:	898b      	ldrh	r3, [r1, #12]
 801c91c:	061b      	lsls	r3, r3, #24
 801c91e:	b09d      	sub	sp, #116	@ 0x74
 801c920:	4607      	mov	r7, r0
 801c922:	460d      	mov	r5, r1
 801c924:	4614      	mov	r4, r2
 801c926:	d510      	bpl.n	801c94a <_svfiprintf_r+0x36>
 801c928:	690b      	ldr	r3, [r1, #16]
 801c92a:	b973      	cbnz	r3, 801c94a <_svfiprintf_r+0x36>
 801c92c:	2140      	movs	r1, #64	@ 0x40
 801c92e:	f7fe fbd3 	bl	801b0d8 <_malloc_r>
 801c932:	6028      	str	r0, [r5, #0]
 801c934:	6128      	str	r0, [r5, #16]
 801c936:	b930      	cbnz	r0, 801c946 <_svfiprintf_r+0x32>
 801c938:	230c      	movs	r3, #12
 801c93a:	603b      	str	r3, [r7, #0]
 801c93c:	f04f 30ff 	mov.w	r0, #4294967295
 801c940:	b01d      	add	sp, #116	@ 0x74
 801c942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c946:	2340      	movs	r3, #64	@ 0x40
 801c948:	616b      	str	r3, [r5, #20]
 801c94a:	2300      	movs	r3, #0
 801c94c:	9309      	str	r3, [sp, #36]	@ 0x24
 801c94e:	2320      	movs	r3, #32
 801c950:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c954:	f8cd 800c 	str.w	r8, [sp, #12]
 801c958:	2330      	movs	r3, #48	@ 0x30
 801c95a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801caf8 <_svfiprintf_r+0x1e4>
 801c95e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c962:	f04f 0901 	mov.w	r9, #1
 801c966:	4623      	mov	r3, r4
 801c968:	469a      	mov	sl, r3
 801c96a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c96e:	b10a      	cbz	r2, 801c974 <_svfiprintf_r+0x60>
 801c970:	2a25      	cmp	r2, #37	@ 0x25
 801c972:	d1f9      	bne.n	801c968 <_svfiprintf_r+0x54>
 801c974:	ebba 0b04 	subs.w	fp, sl, r4
 801c978:	d00b      	beq.n	801c992 <_svfiprintf_r+0x7e>
 801c97a:	465b      	mov	r3, fp
 801c97c:	4622      	mov	r2, r4
 801c97e:	4629      	mov	r1, r5
 801c980:	4638      	mov	r0, r7
 801c982:	f7ff ff6b 	bl	801c85c <__ssputs_r>
 801c986:	3001      	adds	r0, #1
 801c988:	f000 80a7 	beq.w	801cada <_svfiprintf_r+0x1c6>
 801c98c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c98e:	445a      	add	r2, fp
 801c990:	9209      	str	r2, [sp, #36]	@ 0x24
 801c992:	f89a 3000 	ldrb.w	r3, [sl]
 801c996:	2b00      	cmp	r3, #0
 801c998:	f000 809f 	beq.w	801cada <_svfiprintf_r+0x1c6>
 801c99c:	2300      	movs	r3, #0
 801c99e:	f04f 32ff 	mov.w	r2, #4294967295
 801c9a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c9a6:	f10a 0a01 	add.w	sl, sl, #1
 801c9aa:	9304      	str	r3, [sp, #16]
 801c9ac:	9307      	str	r3, [sp, #28]
 801c9ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c9b2:	931a      	str	r3, [sp, #104]	@ 0x68
 801c9b4:	4654      	mov	r4, sl
 801c9b6:	2205      	movs	r2, #5
 801c9b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c9bc:	484e      	ldr	r0, [pc, #312]	@ (801caf8 <_svfiprintf_r+0x1e4>)
 801c9be:	f7ea fbe7 	bl	8007190 <memchr>
 801c9c2:	9a04      	ldr	r2, [sp, #16]
 801c9c4:	b9d8      	cbnz	r0, 801c9fe <_svfiprintf_r+0xea>
 801c9c6:	06d0      	lsls	r0, r2, #27
 801c9c8:	bf44      	itt	mi
 801c9ca:	2320      	movmi	r3, #32
 801c9cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c9d0:	0711      	lsls	r1, r2, #28
 801c9d2:	bf44      	itt	mi
 801c9d4:	232b      	movmi	r3, #43	@ 0x2b
 801c9d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c9da:	f89a 3000 	ldrb.w	r3, [sl]
 801c9de:	2b2a      	cmp	r3, #42	@ 0x2a
 801c9e0:	d015      	beq.n	801ca0e <_svfiprintf_r+0xfa>
 801c9e2:	9a07      	ldr	r2, [sp, #28]
 801c9e4:	4654      	mov	r4, sl
 801c9e6:	2000      	movs	r0, #0
 801c9e8:	f04f 0c0a 	mov.w	ip, #10
 801c9ec:	4621      	mov	r1, r4
 801c9ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c9f2:	3b30      	subs	r3, #48	@ 0x30
 801c9f4:	2b09      	cmp	r3, #9
 801c9f6:	d94b      	bls.n	801ca90 <_svfiprintf_r+0x17c>
 801c9f8:	b1b0      	cbz	r0, 801ca28 <_svfiprintf_r+0x114>
 801c9fa:	9207      	str	r2, [sp, #28]
 801c9fc:	e014      	b.n	801ca28 <_svfiprintf_r+0x114>
 801c9fe:	eba0 0308 	sub.w	r3, r0, r8
 801ca02:	fa09 f303 	lsl.w	r3, r9, r3
 801ca06:	4313      	orrs	r3, r2
 801ca08:	9304      	str	r3, [sp, #16]
 801ca0a:	46a2      	mov	sl, r4
 801ca0c:	e7d2      	b.n	801c9b4 <_svfiprintf_r+0xa0>
 801ca0e:	9b03      	ldr	r3, [sp, #12]
 801ca10:	1d19      	adds	r1, r3, #4
 801ca12:	681b      	ldr	r3, [r3, #0]
 801ca14:	9103      	str	r1, [sp, #12]
 801ca16:	2b00      	cmp	r3, #0
 801ca18:	bfbb      	ittet	lt
 801ca1a:	425b      	neglt	r3, r3
 801ca1c:	f042 0202 	orrlt.w	r2, r2, #2
 801ca20:	9307      	strge	r3, [sp, #28]
 801ca22:	9307      	strlt	r3, [sp, #28]
 801ca24:	bfb8      	it	lt
 801ca26:	9204      	strlt	r2, [sp, #16]
 801ca28:	7823      	ldrb	r3, [r4, #0]
 801ca2a:	2b2e      	cmp	r3, #46	@ 0x2e
 801ca2c:	d10a      	bne.n	801ca44 <_svfiprintf_r+0x130>
 801ca2e:	7863      	ldrb	r3, [r4, #1]
 801ca30:	2b2a      	cmp	r3, #42	@ 0x2a
 801ca32:	d132      	bne.n	801ca9a <_svfiprintf_r+0x186>
 801ca34:	9b03      	ldr	r3, [sp, #12]
 801ca36:	1d1a      	adds	r2, r3, #4
 801ca38:	681b      	ldr	r3, [r3, #0]
 801ca3a:	9203      	str	r2, [sp, #12]
 801ca3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ca40:	3402      	adds	r4, #2
 801ca42:	9305      	str	r3, [sp, #20]
 801ca44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801cb08 <_svfiprintf_r+0x1f4>
 801ca48:	7821      	ldrb	r1, [r4, #0]
 801ca4a:	2203      	movs	r2, #3
 801ca4c:	4650      	mov	r0, sl
 801ca4e:	f7ea fb9f 	bl	8007190 <memchr>
 801ca52:	b138      	cbz	r0, 801ca64 <_svfiprintf_r+0x150>
 801ca54:	9b04      	ldr	r3, [sp, #16]
 801ca56:	eba0 000a 	sub.w	r0, r0, sl
 801ca5a:	2240      	movs	r2, #64	@ 0x40
 801ca5c:	4082      	lsls	r2, r0
 801ca5e:	4313      	orrs	r3, r2
 801ca60:	3401      	adds	r4, #1
 801ca62:	9304      	str	r3, [sp, #16]
 801ca64:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ca68:	4824      	ldr	r0, [pc, #144]	@ (801cafc <_svfiprintf_r+0x1e8>)
 801ca6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ca6e:	2206      	movs	r2, #6
 801ca70:	f7ea fb8e 	bl	8007190 <memchr>
 801ca74:	2800      	cmp	r0, #0
 801ca76:	d036      	beq.n	801cae6 <_svfiprintf_r+0x1d2>
 801ca78:	4b21      	ldr	r3, [pc, #132]	@ (801cb00 <_svfiprintf_r+0x1ec>)
 801ca7a:	bb1b      	cbnz	r3, 801cac4 <_svfiprintf_r+0x1b0>
 801ca7c:	9b03      	ldr	r3, [sp, #12]
 801ca7e:	3307      	adds	r3, #7
 801ca80:	f023 0307 	bic.w	r3, r3, #7
 801ca84:	3308      	adds	r3, #8
 801ca86:	9303      	str	r3, [sp, #12]
 801ca88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ca8a:	4433      	add	r3, r6
 801ca8c:	9309      	str	r3, [sp, #36]	@ 0x24
 801ca8e:	e76a      	b.n	801c966 <_svfiprintf_r+0x52>
 801ca90:	fb0c 3202 	mla	r2, ip, r2, r3
 801ca94:	460c      	mov	r4, r1
 801ca96:	2001      	movs	r0, #1
 801ca98:	e7a8      	b.n	801c9ec <_svfiprintf_r+0xd8>
 801ca9a:	2300      	movs	r3, #0
 801ca9c:	3401      	adds	r4, #1
 801ca9e:	9305      	str	r3, [sp, #20]
 801caa0:	4619      	mov	r1, r3
 801caa2:	f04f 0c0a 	mov.w	ip, #10
 801caa6:	4620      	mov	r0, r4
 801caa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801caac:	3a30      	subs	r2, #48	@ 0x30
 801caae:	2a09      	cmp	r2, #9
 801cab0:	d903      	bls.n	801caba <_svfiprintf_r+0x1a6>
 801cab2:	2b00      	cmp	r3, #0
 801cab4:	d0c6      	beq.n	801ca44 <_svfiprintf_r+0x130>
 801cab6:	9105      	str	r1, [sp, #20]
 801cab8:	e7c4      	b.n	801ca44 <_svfiprintf_r+0x130>
 801caba:	fb0c 2101 	mla	r1, ip, r1, r2
 801cabe:	4604      	mov	r4, r0
 801cac0:	2301      	movs	r3, #1
 801cac2:	e7f0      	b.n	801caa6 <_svfiprintf_r+0x192>
 801cac4:	ab03      	add	r3, sp, #12
 801cac6:	9300      	str	r3, [sp, #0]
 801cac8:	462a      	mov	r2, r5
 801caca:	4b0e      	ldr	r3, [pc, #56]	@ (801cb04 <_svfiprintf_r+0x1f0>)
 801cacc:	a904      	add	r1, sp, #16
 801cace:	4638      	mov	r0, r7
 801cad0:	f7fc fbb8 	bl	8019244 <_printf_float>
 801cad4:	1c42      	adds	r2, r0, #1
 801cad6:	4606      	mov	r6, r0
 801cad8:	d1d6      	bne.n	801ca88 <_svfiprintf_r+0x174>
 801cada:	89ab      	ldrh	r3, [r5, #12]
 801cadc:	065b      	lsls	r3, r3, #25
 801cade:	f53f af2d 	bmi.w	801c93c <_svfiprintf_r+0x28>
 801cae2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801cae4:	e72c      	b.n	801c940 <_svfiprintf_r+0x2c>
 801cae6:	ab03      	add	r3, sp, #12
 801cae8:	9300      	str	r3, [sp, #0]
 801caea:	462a      	mov	r2, r5
 801caec:	4b05      	ldr	r3, [pc, #20]	@ (801cb04 <_svfiprintf_r+0x1f0>)
 801caee:	a904      	add	r1, sp, #16
 801caf0:	4638      	mov	r0, r7
 801caf2:	f7fc fe3f 	bl	8019774 <_printf_i>
 801caf6:	e7ed      	b.n	801cad4 <_svfiprintf_r+0x1c0>
 801caf8:	0801e5b9 	.word	0x0801e5b9
 801cafc:	0801e5c3 	.word	0x0801e5c3
 801cb00:	08019245 	.word	0x08019245
 801cb04:	0801c85d 	.word	0x0801c85d
 801cb08:	0801e5bf 	.word	0x0801e5bf

0801cb0c <__sfputc_r>:
 801cb0c:	6893      	ldr	r3, [r2, #8]
 801cb0e:	3b01      	subs	r3, #1
 801cb10:	2b00      	cmp	r3, #0
 801cb12:	b410      	push	{r4}
 801cb14:	6093      	str	r3, [r2, #8]
 801cb16:	da08      	bge.n	801cb2a <__sfputc_r+0x1e>
 801cb18:	6994      	ldr	r4, [r2, #24]
 801cb1a:	42a3      	cmp	r3, r4
 801cb1c:	db01      	blt.n	801cb22 <__sfputc_r+0x16>
 801cb1e:	290a      	cmp	r1, #10
 801cb20:	d103      	bne.n	801cb2a <__sfputc_r+0x1e>
 801cb22:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cb26:	f7fd baee 	b.w	801a106 <__swbuf_r>
 801cb2a:	6813      	ldr	r3, [r2, #0]
 801cb2c:	1c58      	adds	r0, r3, #1
 801cb2e:	6010      	str	r0, [r2, #0]
 801cb30:	7019      	strb	r1, [r3, #0]
 801cb32:	4608      	mov	r0, r1
 801cb34:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cb38:	4770      	bx	lr

0801cb3a <__sfputs_r>:
 801cb3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cb3c:	4606      	mov	r6, r0
 801cb3e:	460f      	mov	r7, r1
 801cb40:	4614      	mov	r4, r2
 801cb42:	18d5      	adds	r5, r2, r3
 801cb44:	42ac      	cmp	r4, r5
 801cb46:	d101      	bne.n	801cb4c <__sfputs_r+0x12>
 801cb48:	2000      	movs	r0, #0
 801cb4a:	e007      	b.n	801cb5c <__sfputs_r+0x22>
 801cb4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cb50:	463a      	mov	r2, r7
 801cb52:	4630      	mov	r0, r6
 801cb54:	f7ff ffda 	bl	801cb0c <__sfputc_r>
 801cb58:	1c43      	adds	r3, r0, #1
 801cb5a:	d1f3      	bne.n	801cb44 <__sfputs_r+0xa>
 801cb5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801cb60 <_vfiprintf_r>:
 801cb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb64:	460d      	mov	r5, r1
 801cb66:	b09d      	sub	sp, #116	@ 0x74
 801cb68:	4614      	mov	r4, r2
 801cb6a:	4698      	mov	r8, r3
 801cb6c:	4606      	mov	r6, r0
 801cb6e:	b118      	cbz	r0, 801cb78 <_vfiprintf_r+0x18>
 801cb70:	6a03      	ldr	r3, [r0, #32]
 801cb72:	b90b      	cbnz	r3, 801cb78 <_vfiprintf_r+0x18>
 801cb74:	f7fd f9be 	bl	8019ef4 <__sinit>
 801cb78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801cb7a:	07d9      	lsls	r1, r3, #31
 801cb7c:	d405      	bmi.n	801cb8a <_vfiprintf_r+0x2a>
 801cb7e:	89ab      	ldrh	r3, [r5, #12]
 801cb80:	059a      	lsls	r2, r3, #22
 801cb82:	d402      	bmi.n	801cb8a <_vfiprintf_r+0x2a>
 801cb84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801cb86:	f7fd fbd0 	bl	801a32a <__retarget_lock_acquire_recursive>
 801cb8a:	89ab      	ldrh	r3, [r5, #12]
 801cb8c:	071b      	lsls	r3, r3, #28
 801cb8e:	d501      	bpl.n	801cb94 <_vfiprintf_r+0x34>
 801cb90:	692b      	ldr	r3, [r5, #16]
 801cb92:	b99b      	cbnz	r3, 801cbbc <_vfiprintf_r+0x5c>
 801cb94:	4629      	mov	r1, r5
 801cb96:	4630      	mov	r0, r6
 801cb98:	f7fd faf4 	bl	801a184 <__swsetup_r>
 801cb9c:	b170      	cbz	r0, 801cbbc <_vfiprintf_r+0x5c>
 801cb9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801cba0:	07dc      	lsls	r4, r3, #31
 801cba2:	d504      	bpl.n	801cbae <_vfiprintf_r+0x4e>
 801cba4:	f04f 30ff 	mov.w	r0, #4294967295
 801cba8:	b01d      	add	sp, #116	@ 0x74
 801cbaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbae:	89ab      	ldrh	r3, [r5, #12]
 801cbb0:	0598      	lsls	r0, r3, #22
 801cbb2:	d4f7      	bmi.n	801cba4 <_vfiprintf_r+0x44>
 801cbb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801cbb6:	f7fd fbb9 	bl	801a32c <__retarget_lock_release_recursive>
 801cbba:	e7f3      	b.n	801cba4 <_vfiprintf_r+0x44>
 801cbbc:	2300      	movs	r3, #0
 801cbbe:	9309      	str	r3, [sp, #36]	@ 0x24
 801cbc0:	2320      	movs	r3, #32
 801cbc2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801cbc6:	f8cd 800c 	str.w	r8, [sp, #12]
 801cbca:	2330      	movs	r3, #48	@ 0x30
 801cbcc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801cd7c <_vfiprintf_r+0x21c>
 801cbd0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801cbd4:	f04f 0901 	mov.w	r9, #1
 801cbd8:	4623      	mov	r3, r4
 801cbda:	469a      	mov	sl, r3
 801cbdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cbe0:	b10a      	cbz	r2, 801cbe6 <_vfiprintf_r+0x86>
 801cbe2:	2a25      	cmp	r2, #37	@ 0x25
 801cbe4:	d1f9      	bne.n	801cbda <_vfiprintf_r+0x7a>
 801cbe6:	ebba 0b04 	subs.w	fp, sl, r4
 801cbea:	d00b      	beq.n	801cc04 <_vfiprintf_r+0xa4>
 801cbec:	465b      	mov	r3, fp
 801cbee:	4622      	mov	r2, r4
 801cbf0:	4629      	mov	r1, r5
 801cbf2:	4630      	mov	r0, r6
 801cbf4:	f7ff ffa1 	bl	801cb3a <__sfputs_r>
 801cbf8:	3001      	adds	r0, #1
 801cbfa:	f000 80a7 	beq.w	801cd4c <_vfiprintf_r+0x1ec>
 801cbfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cc00:	445a      	add	r2, fp
 801cc02:	9209      	str	r2, [sp, #36]	@ 0x24
 801cc04:	f89a 3000 	ldrb.w	r3, [sl]
 801cc08:	2b00      	cmp	r3, #0
 801cc0a:	f000 809f 	beq.w	801cd4c <_vfiprintf_r+0x1ec>
 801cc0e:	2300      	movs	r3, #0
 801cc10:	f04f 32ff 	mov.w	r2, #4294967295
 801cc14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cc18:	f10a 0a01 	add.w	sl, sl, #1
 801cc1c:	9304      	str	r3, [sp, #16]
 801cc1e:	9307      	str	r3, [sp, #28]
 801cc20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801cc24:	931a      	str	r3, [sp, #104]	@ 0x68
 801cc26:	4654      	mov	r4, sl
 801cc28:	2205      	movs	r2, #5
 801cc2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cc2e:	4853      	ldr	r0, [pc, #332]	@ (801cd7c <_vfiprintf_r+0x21c>)
 801cc30:	f7ea faae 	bl	8007190 <memchr>
 801cc34:	9a04      	ldr	r2, [sp, #16]
 801cc36:	b9d8      	cbnz	r0, 801cc70 <_vfiprintf_r+0x110>
 801cc38:	06d1      	lsls	r1, r2, #27
 801cc3a:	bf44      	itt	mi
 801cc3c:	2320      	movmi	r3, #32
 801cc3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cc42:	0713      	lsls	r3, r2, #28
 801cc44:	bf44      	itt	mi
 801cc46:	232b      	movmi	r3, #43	@ 0x2b
 801cc48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cc4c:	f89a 3000 	ldrb.w	r3, [sl]
 801cc50:	2b2a      	cmp	r3, #42	@ 0x2a
 801cc52:	d015      	beq.n	801cc80 <_vfiprintf_r+0x120>
 801cc54:	9a07      	ldr	r2, [sp, #28]
 801cc56:	4654      	mov	r4, sl
 801cc58:	2000      	movs	r0, #0
 801cc5a:	f04f 0c0a 	mov.w	ip, #10
 801cc5e:	4621      	mov	r1, r4
 801cc60:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cc64:	3b30      	subs	r3, #48	@ 0x30
 801cc66:	2b09      	cmp	r3, #9
 801cc68:	d94b      	bls.n	801cd02 <_vfiprintf_r+0x1a2>
 801cc6a:	b1b0      	cbz	r0, 801cc9a <_vfiprintf_r+0x13a>
 801cc6c:	9207      	str	r2, [sp, #28]
 801cc6e:	e014      	b.n	801cc9a <_vfiprintf_r+0x13a>
 801cc70:	eba0 0308 	sub.w	r3, r0, r8
 801cc74:	fa09 f303 	lsl.w	r3, r9, r3
 801cc78:	4313      	orrs	r3, r2
 801cc7a:	9304      	str	r3, [sp, #16]
 801cc7c:	46a2      	mov	sl, r4
 801cc7e:	e7d2      	b.n	801cc26 <_vfiprintf_r+0xc6>
 801cc80:	9b03      	ldr	r3, [sp, #12]
 801cc82:	1d19      	adds	r1, r3, #4
 801cc84:	681b      	ldr	r3, [r3, #0]
 801cc86:	9103      	str	r1, [sp, #12]
 801cc88:	2b00      	cmp	r3, #0
 801cc8a:	bfbb      	ittet	lt
 801cc8c:	425b      	neglt	r3, r3
 801cc8e:	f042 0202 	orrlt.w	r2, r2, #2
 801cc92:	9307      	strge	r3, [sp, #28]
 801cc94:	9307      	strlt	r3, [sp, #28]
 801cc96:	bfb8      	it	lt
 801cc98:	9204      	strlt	r2, [sp, #16]
 801cc9a:	7823      	ldrb	r3, [r4, #0]
 801cc9c:	2b2e      	cmp	r3, #46	@ 0x2e
 801cc9e:	d10a      	bne.n	801ccb6 <_vfiprintf_r+0x156>
 801cca0:	7863      	ldrb	r3, [r4, #1]
 801cca2:	2b2a      	cmp	r3, #42	@ 0x2a
 801cca4:	d132      	bne.n	801cd0c <_vfiprintf_r+0x1ac>
 801cca6:	9b03      	ldr	r3, [sp, #12]
 801cca8:	1d1a      	adds	r2, r3, #4
 801ccaa:	681b      	ldr	r3, [r3, #0]
 801ccac:	9203      	str	r2, [sp, #12]
 801ccae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ccb2:	3402      	adds	r4, #2
 801ccb4:	9305      	str	r3, [sp, #20]
 801ccb6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801cd8c <_vfiprintf_r+0x22c>
 801ccba:	7821      	ldrb	r1, [r4, #0]
 801ccbc:	2203      	movs	r2, #3
 801ccbe:	4650      	mov	r0, sl
 801ccc0:	f7ea fa66 	bl	8007190 <memchr>
 801ccc4:	b138      	cbz	r0, 801ccd6 <_vfiprintf_r+0x176>
 801ccc6:	9b04      	ldr	r3, [sp, #16]
 801ccc8:	eba0 000a 	sub.w	r0, r0, sl
 801cccc:	2240      	movs	r2, #64	@ 0x40
 801ccce:	4082      	lsls	r2, r0
 801ccd0:	4313      	orrs	r3, r2
 801ccd2:	3401      	adds	r4, #1
 801ccd4:	9304      	str	r3, [sp, #16]
 801ccd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ccda:	4829      	ldr	r0, [pc, #164]	@ (801cd80 <_vfiprintf_r+0x220>)
 801ccdc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801cce0:	2206      	movs	r2, #6
 801cce2:	f7ea fa55 	bl	8007190 <memchr>
 801cce6:	2800      	cmp	r0, #0
 801cce8:	d03f      	beq.n	801cd6a <_vfiprintf_r+0x20a>
 801ccea:	4b26      	ldr	r3, [pc, #152]	@ (801cd84 <_vfiprintf_r+0x224>)
 801ccec:	bb1b      	cbnz	r3, 801cd36 <_vfiprintf_r+0x1d6>
 801ccee:	9b03      	ldr	r3, [sp, #12]
 801ccf0:	3307      	adds	r3, #7
 801ccf2:	f023 0307 	bic.w	r3, r3, #7
 801ccf6:	3308      	adds	r3, #8
 801ccf8:	9303      	str	r3, [sp, #12]
 801ccfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ccfc:	443b      	add	r3, r7
 801ccfe:	9309      	str	r3, [sp, #36]	@ 0x24
 801cd00:	e76a      	b.n	801cbd8 <_vfiprintf_r+0x78>
 801cd02:	fb0c 3202 	mla	r2, ip, r2, r3
 801cd06:	460c      	mov	r4, r1
 801cd08:	2001      	movs	r0, #1
 801cd0a:	e7a8      	b.n	801cc5e <_vfiprintf_r+0xfe>
 801cd0c:	2300      	movs	r3, #0
 801cd0e:	3401      	adds	r4, #1
 801cd10:	9305      	str	r3, [sp, #20]
 801cd12:	4619      	mov	r1, r3
 801cd14:	f04f 0c0a 	mov.w	ip, #10
 801cd18:	4620      	mov	r0, r4
 801cd1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cd1e:	3a30      	subs	r2, #48	@ 0x30
 801cd20:	2a09      	cmp	r2, #9
 801cd22:	d903      	bls.n	801cd2c <_vfiprintf_r+0x1cc>
 801cd24:	2b00      	cmp	r3, #0
 801cd26:	d0c6      	beq.n	801ccb6 <_vfiprintf_r+0x156>
 801cd28:	9105      	str	r1, [sp, #20]
 801cd2a:	e7c4      	b.n	801ccb6 <_vfiprintf_r+0x156>
 801cd2c:	fb0c 2101 	mla	r1, ip, r1, r2
 801cd30:	4604      	mov	r4, r0
 801cd32:	2301      	movs	r3, #1
 801cd34:	e7f0      	b.n	801cd18 <_vfiprintf_r+0x1b8>
 801cd36:	ab03      	add	r3, sp, #12
 801cd38:	9300      	str	r3, [sp, #0]
 801cd3a:	462a      	mov	r2, r5
 801cd3c:	4b12      	ldr	r3, [pc, #72]	@ (801cd88 <_vfiprintf_r+0x228>)
 801cd3e:	a904      	add	r1, sp, #16
 801cd40:	4630      	mov	r0, r6
 801cd42:	f7fc fa7f 	bl	8019244 <_printf_float>
 801cd46:	4607      	mov	r7, r0
 801cd48:	1c78      	adds	r0, r7, #1
 801cd4a:	d1d6      	bne.n	801ccfa <_vfiprintf_r+0x19a>
 801cd4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801cd4e:	07d9      	lsls	r1, r3, #31
 801cd50:	d405      	bmi.n	801cd5e <_vfiprintf_r+0x1fe>
 801cd52:	89ab      	ldrh	r3, [r5, #12]
 801cd54:	059a      	lsls	r2, r3, #22
 801cd56:	d402      	bmi.n	801cd5e <_vfiprintf_r+0x1fe>
 801cd58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801cd5a:	f7fd fae7 	bl	801a32c <__retarget_lock_release_recursive>
 801cd5e:	89ab      	ldrh	r3, [r5, #12]
 801cd60:	065b      	lsls	r3, r3, #25
 801cd62:	f53f af1f 	bmi.w	801cba4 <_vfiprintf_r+0x44>
 801cd66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801cd68:	e71e      	b.n	801cba8 <_vfiprintf_r+0x48>
 801cd6a:	ab03      	add	r3, sp, #12
 801cd6c:	9300      	str	r3, [sp, #0]
 801cd6e:	462a      	mov	r2, r5
 801cd70:	4b05      	ldr	r3, [pc, #20]	@ (801cd88 <_vfiprintf_r+0x228>)
 801cd72:	a904      	add	r1, sp, #16
 801cd74:	4630      	mov	r0, r6
 801cd76:	f7fc fcfd 	bl	8019774 <_printf_i>
 801cd7a:	e7e4      	b.n	801cd46 <_vfiprintf_r+0x1e6>
 801cd7c:	0801e5b9 	.word	0x0801e5b9
 801cd80:	0801e5c3 	.word	0x0801e5c3
 801cd84:	08019245 	.word	0x08019245
 801cd88:	0801cb3b 	.word	0x0801cb3b
 801cd8c:	0801e5bf 	.word	0x0801e5bf

0801cd90 <__sflush_r>:
 801cd90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801cd94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd98:	0716      	lsls	r6, r2, #28
 801cd9a:	4605      	mov	r5, r0
 801cd9c:	460c      	mov	r4, r1
 801cd9e:	d454      	bmi.n	801ce4a <__sflush_r+0xba>
 801cda0:	684b      	ldr	r3, [r1, #4]
 801cda2:	2b00      	cmp	r3, #0
 801cda4:	dc02      	bgt.n	801cdac <__sflush_r+0x1c>
 801cda6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801cda8:	2b00      	cmp	r3, #0
 801cdaa:	dd48      	ble.n	801ce3e <__sflush_r+0xae>
 801cdac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801cdae:	2e00      	cmp	r6, #0
 801cdb0:	d045      	beq.n	801ce3e <__sflush_r+0xae>
 801cdb2:	2300      	movs	r3, #0
 801cdb4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801cdb8:	682f      	ldr	r7, [r5, #0]
 801cdba:	6a21      	ldr	r1, [r4, #32]
 801cdbc:	602b      	str	r3, [r5, #0]
 801cdbe:	d030      	beq.n	801ce22 <__sflush_r+0x92>
 801cdc0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801cdc2:	89a3      	ldrh	r3, [r4, #12]
 801cdc4:	0759      	lsls	r1, r3, #29
 801cdc6:	d505      	bpl.n	801cdd4 <__sflush_r+0x44>
 801cdc8:	6863      	ldr	r3, [r4, #4]
 801cdca:	1ad2      	subs	r2, r2, r3
 801cdcc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801cdce:	b10b      	cbz	r3, 801cdd4 <__sflush_r+0x44>
 801cdd0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801cdd2:	1ad2      	subs	r2, r2, r3
 801cdd4:	2300      	movs	r3, #0
 801cdd6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801cdd8:	6a21      	ldr	r1, [r4, #32]
 801cdda:	4628      	mov	r0, r5
 801cddc:	47b0      	blx	r6
 801cdde:	1c43      	adds	r3, r0, #1
 801cde0:	89a3      	ldrh	r3, [r4, #12]
 801cde2:	d106      	bne.n	801cdf2 <__sflush_r+0x62>
 801cde4:	6829      	ldr	r1, [r5, #0]
 801cde6:	291d      	cmp	r1, #29
 801cde8:	d82b      	bhi.n	801ce42 <__sflush_r+0xb2>
 801cdea:	4a2a      	ldr	r2, [pc, #168]	@ (801ce94 <__sflush_r+0x104>)
 801cdec:	410a      	asrs	r2, r1
 801cdee:	07d6      	lsls	r6, r2, #31
 801cdf0:	d427      	bmi.n	801ce42 <__sflush_r+0xb2>
 801cdf2:	2200      	movs	r2, #0
 801cdf4:	6062      	str	r2, [r4, #4]
 801cdf6:	04d9      	lsls	r1, r3, #19
 801cdf8:	6922      	ldr	r2, [r4, #16]
 801cdfa:	6022      	str	r2, [r4, #0]
 801cdfc:	d504      	bpl.n	801ce08 <__sflush_r+0x78>
 801cdfe:	1c42      	adds	r2, r0, #1
 801ce00:	d101      	bne.n	801ce06 <__sflush_r+0x76>
 801ce02:	682b      	ldr	r3, [r5, #0]
 801ce04:	b903      	cbnz	r3, 801ce08 <__sflush_r+0x78>
 801ce06:	6560      	str	r0, [r4, #84]	@ 0x54
 801ce08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ce0a:	602f      	str	r7, [r5, #0]
 801ce0c:	b1b9      	cbz	r1, 801ce3e <__sflush_r+0xae>
 801ce0e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ce12:	4299      	cmp	r1, r3
 801ce14:	d002      	beq.n	801ce1c <__sflush_r+0x8c>
 801ce16:	4628      	mov	r0, r5
 801ce18:	f7fe f8ea 	bl	801aff0 <_free_r>
 801ce1c:	2300      	movs	r3, #0
 801ce1e:	6363      	str	r3, [r4, #52]	@ 0x34
 801ce20:	e00d      	b.n	801ce3e <__sflush_r+0xae>
 801ce22:	2301      	movs	r3, #1
 801ce24:	4628      	mov	r0, r5
 801ce26:	47b0      	blx	r6
 801ce28:	4602      	mov	r2, r0
 801ce2a:	1c50      	adds	r0, r2, #1
 801ce2c:	d1c9      	bne.n	801cdc2 <__sflush_r+0x32>
 801ce2e:	682b      	ldr	r3, [r5, #0]
 801ce30:	2b00      	cmp	r3, #0
 801ce32:	d0c6      	beq.n	801cdc2 <__sflush_r+0x32>
 801ce34:	2b1d      	cmp	r3, #29
 801ce36:	d001      	beq.n	801ce3c <__sflush_r+0xac>
 801ce38:	2b16      	cmp	r3, #22
 801ce3a:	d11e      	bne.n	801ce7a <__sflush_r+0xea>
 801ce3c:	602f      	str	r7, [r5, #0]
 801ce3e:	2000      	movs	r0, #0
 801ce40:	e022      	b.n	801ce88 <__sflush_r+0xf8>
 801ce42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ce46:	b21b      	sxth	r3, r3
 801ce48:	e01b      	b.n	801ce82 <__sflush_r+0xf2>
 801ce4a:	690f      	ldr	r7, [r1, #16]
 801ce4c:	2f00      	cmp	r7, #0
 801ce4e:	d0f6      	beq.n	801ce3e <__sflush_r+0xae>
 801ce50:	0793      	lsls	r3, r2, #30
 801ce52:	680e      	ldr	r6, [r1, #0]
 801ce54:	bf08      	it	eq
 801ce56:	694b      	ldreq	r3, [r1, #20]
 801ce58:	600f      	str	r7, [r1, #0]
 801ce5a:	bf18      	it	ne
 801ce5c:	2300      	movne	r3, #0
 801ce5e:	eba6 0807 	sub.w	r8, r6, r7
 801ce62:	608b      	str	r3, [r1, #8]
 801ce64:	f1b8 0f00 	cmp.w	r8, #0
 801ce68:	dde9      	ble.n	801ce3e <__sflush_r+0xae>
 801ce6a:	6a21      	ldr	r1, [r4, #32]
 801ce6c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801ce6e:	4643      	mov	r3, r8
 801ce70:	463a      	mov	r2, r7
 801ce72:	4628      	mov	r0, r5
 801ce74:	47b0      	blx	r6
 801ce76:	2800      	cmp	r0, #0
 801ce78:	dc08      	bgt.n	801ce8c <__sflush_r+0xfc>
 801ce7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ce7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ce82:	81a3      	strh	r3, [r4, #12]
 801ce84:	f04f 30ff 	mov.w	r0, #4294967295
 801ce88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ce8c:	4407      	add	r7, r0
 801ce8e:	eba8 0800 	sub.w	r8, r8, r0
 801ce92:	e7e7      	b.n	801ce64 <__sflush_r+0xd4>
 801ce94:	dfbffffe 	.word	0xdfbffffe

0801ce98 <_fflush_r>:
 801ce98:	b538      	push	{r3, r4, r5, lr}
 801ce9a:	690b      	ldr	r3, [r1, #16]
 801ce9c:	4605      	mov	r5, r0
 801ce9e:	460c      	mov	r4, r1
 801cea0:	b913      	cbnz	r3, 801cea8 <_fflush_r+0x10>
 801cea2:	2500      	movs	r5, #0
 801cea4:	4628      	mov	r0, r5
 801cea6:	bd38      	pop	{r3, r4, r5, pc}
 801cea8:	b118      	cbz	r0, 801ceb2 <_fflush_r+0x1a>
 801ceaa:	6a03      	ldr	r3, [r0, #32]
 801ceac:	b90b      	cbnz	r3, 801ceb2 <_fflush_r+0x1a>
 801ceae:	f7fd f821 	bl	8019ef4 <__sinit>
 801ceb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ceb6:	2b00      	cmp	r3, #0
 801ceb8:	d0f3      	beq.n	801cea2 <_fflush_r+0xa>
 801ceba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801cebc:	07d0      	lsls	r0, r2, #31
 801cebe:	d404      	bmi.n	801ceca <_fflush_r+0x32>
 801cec0:	0599      	lsls	r1, r3, #22
 801cec2:	d402      	bmi.n	801ceca <_fflush_r+0x32>
 801cec4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cec6:	f7fd fa30 	bl	801a32a <__retarget_lock_acquire_recursive>
 801ceca:	4628      	mov	r0, r5
 801cecc:	4621      	mov	r1, r4
 801cece:	f7ff ff5f 	bl	801cd90 <__sflush_r>
 801ced2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ced4:	07da      	lsls	r2, r3, #31
 801ced6:	4605      	mov	r5, r0
 801ced8:	d4e4      	bmi.n	801cea4 <_fflush_r+0xc>
 801ceda:	89a3      	ldrh	r3, [r4, #12]
 801cedc:	059b      	lsls	r3, r3, #22
 801cede:	d4e1      	bmi.n	801cea4 <_fflush_r+0xc>
 801cee0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cee2:	f7fd fa23 	bl	801a32c <__retarget_lock_release_recursive>
 801cee6:	e7dd      	b.n	801cea4 <_fflush_r+0xc>

0801cee8 <__swhatbuf_r>:
 801cee8:	b570      	push	{r4, r5, r6, lr}
 801ceea:	460c      	mov	r4, r1
 801ceec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cef0:	2900      	cmp	r1, #0
 801cef2:	b096      	sub	sp, #88	@ 0x58
 801cef4:	4615      	mov	r5, r2
 801cef6:	461e      	mov	r6, r3
 801cef8:	da0d      	bge.n	801cf16 <__swhatbuf_r+0x2e>
 801cefa:	89a3      	ldrh	r3, [r4, #12]
 801cefc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801cf00:	f04f 0100 	mov.w	r1, #0
 801cf04:	bf14      	ite	ne
 801cf06:	2340      	movne	r3, #64	@ 0x40
 801cf08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801cf0c:	2000      	movs	r0, #0
 801cf0e:	6031      	str	r1, [r6, #0]
 801cf10:	602b      	str	r3, [r5, #0]
 801cf12:	b016      	add	sp, #88	@ 0x58
 801cf14:	bd70      	pop	{r4, r5, r6, pc}
 801cf16:	466a      	mov	r2, sp
 801cf18:	f000 f874 	bl	801d004 <_fstat_r>
 801cf1c:	2800      	cmp	r0, #0
 801cf1e:	dbec      	blt.n	801cefa <__swhatbuf_r+0x12>
 801cf20:	9901      	ldr	r1, [sp, #4]
 801cf22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801cf26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801cf2a:	4259      	negs	r1, r3
 801cf2c:	4159      	adcs	r1, r3
 801cf2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801cf32:	e7eb      	b.n	801cf0c <__swhatbuf_r+0x24>

0801cf34 <__smakebuf_r>:
 801cf34:	898b      	ldrh	r3, [r1, #12]
 801cf36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801cf38:	079d      	lsls	r5, r3, #30
 801cf3a:	4606      	mov	r6, r0
 801cf3c:	460c      	mov	r4, r1
 801cf3e:	d507      	bpl.n	801cf50 <__smakebuf_r+0x1c>
 801cf40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801cf44:	6023      	str	r3, [r4, #0]
 801cf46:	6123      	str	r3, [r4, #16]
 801cf48:	2301      	movs	r3, #1
 801cf4a:	6163      	str	r3, [r4, #20]
 801cf4c:	b003      	add	sp, #12
 801cf4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cf50:	ab01      	add	r3, sp, #4
 801cf52:	466a      	mov	r2, sp
 801cf54:	f7ff ffc8 	bl	801cee8 <__swhatbuf_r>
 801cf58:	9f00      	ldr	r7, [sp, #0]
 801cf5a:	4605      	mov	r5, r0
 801cf5c:	4639      	mov	r1, r7
 801cf5e:	4630      	mov	r0, r6
 801cf60:	f7fe f8ba 	bl	801b0d8 <_malloc_r>
 801cf64:	b948      	cbnz	r0, 801cf7a <__smakebuf_r+0x46>
 801cf66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cf6a:	059a      	lsls	r2, r3, #22
 801cf6c:	d4ee      	bmi.n	801cf4c <__smakebuf_r+0x18>
 801cf6e:	f023 0303 	bic.w	r3, r3, #3
 801cf72:	f043 0302 	orr.w	r3, r3, #2
 801cf76:	81a3      	strh	r3, [r4, #12]
 801cf78:	e7e2      	b.n	801cf40 <__smakebuf_r+0xc>
 801cf7a:	89a3      	ldrh	r3, [r4, #12]
 801cf7c:	6020      	str	r0, [r4, #0]
 801cf7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801cf82:	81a3      	strh	r3, [r4, #12]
 801cf84:	9b01      	ldr	r3, [sp, #4]
 801cf86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801cf8a:	b15b      	cbz	r3, 801cfa4 <__smakebuf_r+0x70>
 801cf8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cf90:	4630      	mov	r0, r6
 801cf92:	f000 f849 	bl	801d028 <_isatty_r>
 801cf96:	b128      	cbz	r0, 801cfa4 <__smakebuf_r+0x70>
 801cf98:	89a3      	ldrh	r3, [r4, #12]
 801cf9a:	f023 0303 	bic.w	r3, r3, #3
 801cf9e:	f043 0301 	orr.w	r3, r3, #1
 801cfa2:	81a3      	strh	r3, [r4, #12]
 801cfa4:	89a3      	ldrh	r3, [r4, #12]
 801cfa6:	431d      	orrs	r5, r3
 801cfa8:	81a5      	strh	r5, [r4, #12]
 801cfaa:	e7cf      	b.n	801cf4c <__smakebuf_r+0x18>

0801cfac <memmove>:
 801cfac:	4288      	cmp	r0, r1
 801cfae:	b510      	push	{r4, lr}
 801cfb0:	eb01 0402 	add.w	r4, r1, r2
 801cfb4:	d902      	bls.n	801cfbc <memmove+0x10>
 801cfb6:	4284      	cmp	r4, r0
 801cfb8:	4623      	mov	r3, r4
 801cfba:	d807      	bhi.n	801cfcc <memmove+0x20>
 801cfbc:	1e43      	subs	r3, r0, #1
 801cfbe:	42a1      	cmp	r1, r4
 801cfc0:	d008      	beq.n	801cfd4 <memmove+0x28>
 801cfc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801cfc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801cfca:	e7f8      	b.n	801cfbe <memmove+0x12>
 801cfcc:	4402      	add	r2, r0
 801cfce:	4601      	mov	r1, r0
 801cfd0:	428a      	cmp	r2, r1
 801cfd2:	d100      	bne.n	801cfd6 <memmove+0x2a>
 801cfd4:	bd10      	pop	{r4, pc}
 801cfd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801cfda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801cfde:	e7f7      	b.n	801cfd0 <memmove+0x24>

0801cfe0 <strncmp>:
 801cfe0:	b510      	push	{r4, lr}
 801cfe2:	b16a      	cbz	r2, 801d000 <strncmp+0x20>
 801cfe4:	3901      	subs	r1, #1
 801cfe6:	1884      	adds	r4, r0, r2
 801cfe8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cfec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801cff0:	429a      	cmp	r2, r3
 801cff2:	d103      	bne.n	801cffc <strncmp+0x1c>
 801cff4:	42a0      	cmp	r0, r4
 801cff6:	d001      	beq.n	801cffc <strncmp+0x1c>
 801cff8:	2a00      	cmp	r2, #0
 801cffa:	d1f5      	bne.n	801cfe8 <strncmp+0x8>
 801cffc:	1ad0      	subs	r0, r2, r3
 801cffe:	bd10      	pop	{r4, pc}
 801d000:	4610      	mov	r0, r2
 801d002:	e7fc      	b.n	801cffe <strncmp+0x1e>

0801d004 <_fstat_r>:
 801d004:	b538      	push	{r3, r4, r5, lr}
 801d006:	4d07      	ldr	r5, [pc, #28]	@ (801d024 <_fstat_r+0x20>)
 801d008:	2300      	movs	r3, #0
 801d00a:	4604      	mov	r4, r0
 801d00c:	4608      	mov	r0, r1
 801d00e:	4611      	mov	r1, r2
 801d010:	602b      	str	r3, [r5, #0]
 801d012:	f7ef f997 	bl	800c344 <_fstat>
 801d016:	1c43      	adds	r3, r0, #1
 801d018:	d102      	bne.n	801d020 <_fstat_r+0x1c>
 801d01a:	682b      	ldr	r3, [r5, #0]
 801d01c:	b103      	cbz	r3, 801d020 <_fstat_r+0x1c>
 801d01e:	6023      	str	r3, [r4, #0]
 801d020:	bd38      	pop	{r3, r4, r5, pc}
 801d022:	bf00      	nop
 801d024:	20000b7c 	.word	0x20000b7c

0801d028 <_isatty_r>:
 801d028:	b538      	push	{r3, r4, r5, lr}
 801d02a:	4d06      	ldr	r5, [pc, #24]	@ (801d044 <_isatty_r+0x1c>)
 801d02c:	2300      	movs	r3, #0
 801d02e:	4604      	mov	r4, r0
 801d030:	4608      	mov	r0, r1
 801d032:	602b      	str	r3, [r5, #0]
 801d034:	f7ef f996 	bl	800c364 <_isatty>
 801d038:	1c43      	adds	r3, r0, #1
 801d03a:	d102      	bne.n	801d042 <_isatty_r+0x1a>
 801d03c:	682b      	ldr	r3, [r5, #0]
 801d03e:	b103      	cbz	r3, 801d042 <_isatty_r+0x1a>
 801d040:	6023      	str	r3, [r4, #0]
 801d042:	bd38      	pop	{r3, r4, r5, pc}
 801d044:	20000b7c 	.word	0x20000b7c

0801d048 <_sbrk_r>:
 801d048:	b538      	push	{r3, r4, r5, lr}
 801d04a:	4d06      	ldr	r5, [pc, #24]	@ (801d064 <_sbrk_r+0x1c>)
 801d04c:	2300      	movs	r3, #0
 801d04e:	4604      	mov	r4, r0
 801d050:	4608      	mov	r0, r1
 801d052:	602b      	str	r3, [r5, #0]
 801d054:	f7ef f99e 	bl	800c394 <_sbrk>
 801d058:	1c43      	adds	r3, r0, #1
 801d05a:	d102      	bne.n	801d062 <_sbrk_r+0x1a>
 801d05c:	682b      	ldr	r3, [r5, #0]
 801d05e:	b103      	cbz	r3, 801d062 <_sbrk_r+0x1a>
 801d060:	6023      	str	r3, [r4, #0]
 801d062:	bd38      	pop	{r3, r4, r5, pc}
 801d064:	20000b7c 	.word	0x20000b7c

0801d068 <nan>:
 801d068:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801d070 <nan+0x8>
 801d06c:	4770      	bx	lr
 801d06e:	bf00      	nop
 801d070:	00000000 	.word	0x00000000
 801d074:	7ff80000 	.word	0x7ff80000

0801d078 <__assert_func>:
 801d078:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d07a:	4614      	mov	r4, r2
 801d07c:	461a      	mov	r2, r3
 801d07e:	4b09      	ldr	r3, [pc, #36]	@ (801d0a4 <__assert_func+0x2c>)
 801d080:	681b      	ldr	r3, [r3, #0]
 801d082:	4605      	mov	r5, r0
 801d084:	68d8      	ldr	r0, [r3, #12]
 801d086:	b954      	cbnz	r4, 801d09e <__assert_func+0x26>
 801d088:	4b07      	ldr	r3, [pc, #28]	@ (801d0a8 <__assert_func+0x30>)
 801d08a:	461c      	mov	r4, r3
 801d08c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d090:	9100      	str	r1, [sp, #0]
 801d092:	462b      	mov	r3, r5
 801d094:	4905      	ldr	r1, [pc, #20]	@ (801d0ac <__assert_func+0x34>)
 801d096:	f000 fba7 	bl	801d7e8 <fiprintf>
 801d09a:	f000 fbb7 	bl	801d80c <abort>
 801d09e:	4b04      	ldr	r3, [pc, #16]	@ (801d0b0 <__assert_func+0x38>)
 801d0a0:	e7f4      	b.n	801d08c <__assert_func+0x14>
 801d0a2:	bf00      	nop
 801d0a4:	2000009c 	.word	0x2000009c
 801d0a8:	0801e60d 	.word	0x0801e60d
 801d0ac:	0801e5df 	.word	0x0801e5df
 801d0b0:	0801e5d2 	.word	0x0801e5d2

0801d0b4 <_calloc_r>:
 801d0b4:	b570      	push	{r4, r5, r6, lr}
 801d0b6:	fba1 5402 	umull	r5, r4, r1, r2
 801d0ba:	b93c      	cbnz	r4, 801d0cc <_calloc_r+0x18>
 801d0bc:	4629      	mov	r1, r5
 801d0be:	f7fe f80b 	bl	801b0d8 <_malloc_r>
 801d0c2:	4606      	mov	r6, r0
 801d0c4:	b928      	cbnz	r0, 801d0d2 <_calloc_r+0x1e>
 801d0c6:	2600      	movs	r6, #0
 801d0c8:	4630      	mov	r0, r6
 801d0ca:	bd70      	pop	{r4, r5, r6, pc}
 801d0cc:	220c      	movs	r2, #12
 801d0ce:	6002      	str	r2, [r0, #0]
 801d0d0:	e7f9      	b.n	801d0c6 <_calloc_r+0x12>
 801d0d2:	462a      	mov	r2, r5
 801d0d4:	4621      	mov	r1, r4
 801d0d6:	f7fd f8ab 	bl	801a230 <memset>
 801d0da:	e7f5      	b.n	801d0c8 <_calloc_r+0x14>

0801d0dc <rshift>:
 801d0dc:	6903      	ldr	r3, [r0, #16]
 801d0de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801d0e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d0e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 801d0ea:	f100 0414 	add.w	r4, r0, #20
 801d0ee:	dd45      	ble.n	801d17c <rshift+0xa0>
 801d0f0:	f011 011f 	ands.w	r1, r1, #31
 801d0f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801d0f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801d0fc:	d10c      	bne.n	801d118 <rshift+0x3c>
 801d0fe:	f100 0710 	add.w	r7, r0, #16
 801d102:	4629      	mov	r1, r5
 801d104:	42b1      	cmp	r1, r6
 801d106:	d334      	bcc.n	801d172 <rshift+0x96>
 801d108:	1a9b      	subs	r3, r3, r2
 801d10a:	009b      	lsls	r3, r3, #2
 801d10c:	1eea      	subs	r2, r5, #3
 801d10e:	4296      	cmp	r6, r2
 801d110:	bf38      	it	cc
 801d112:	2300      	movcc	r3, #0
 801d114:	4423      	add	r3, r4
 801d116:	e015      	b.n	801d144 <rshift+0x68>
 801d118:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801d11c:	f1c1 0820 	rsb	r8, r1, #32
 801d120:	40cf      	lsrs	r7, r1
 801d122:	f105 0e04 	add.w	lr, r5, #4
 801d126:	46a1      	mov	r9, r4
 801d128:	4576      	cmp	r6, lr
 801d12a:	46f4      	mov	ip, lr
 801d12c:	d815      	bhi.n	801d15a <rshift+0x7e>
 801d12e:	1a9a      	subs	r2, r3, r2
 801d130:	0092      	lsls	r2, r2, #2
 801d132:	3a04      	subs	r2, #4
 801d134:	3501      	adds	r5, #1
 801d136:	42ae      	cmp	r6, r5
 801d138:	bf38      	it	cc
 801d13a:	2200      	movcc	r2, #0
 801d13c:	18a3      	adds	r3, r4, r2
 801d13e:	50a7      	str	r7, [r4, r2]
 801d140:	b107      	cbz	r7, 801d144 <rshift+0x68>
 801d142:	3304      	adds	r3, #4
 801d144:	1b1a      	subs	r2, r3, r4
 801d146:	42a3      	cmp	r3, r4
 801d148:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801d14c:	bf08      	it	eq
 801d14e:	2300      	moveq	r3, #0
 801d150:	6102      	str	r2, [r0, #16]
 801d152:	bf08      	it	eq
 801d154:	6143      	streq	r3, [r0, #20]
 801d156:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d15a:	f8dc c000 	ldr.w	ip, [ip]
 801d15e:	fa0c fc08 	lsl.w	ip, ip, r8
 801d162:	ea4c 0707 	orr.w	r7, ip, r7
 801d166:	f849 7b04 	str.w	r7, [r9], #4
 801d16a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801d16e:	40cf      	lsrs	r7, r1
 801d170:	e7da      	b.n	801d128 <rshift+0x4c>
 801d172:	f851 cb04 	ldr.w	ip, [r1], #4
 801d176:	f847 cf04 	str.w	ip, [r7, #4]!
 801d17a:	e7c3      	b.n	801d104 <rshift+0x28>
 801d17c:	4623      	mov	r3, r4
 801d17e:	e7e1      	b.n	801d144 <rshift+0x68>

0801d180 <__hexdig_fun>:
 801d180:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801d184:	2b09      	cmp	r3, #9
 801d186:	d802      	bhi.n	801d18e <__hexdig_fun+0xe>
 801d188:	3820      	subs	r0, #32
 801d18a:	b2c0      	uxtb	r0, r0
 801d18c:	4770      	bx	lr
 801d18e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801d192:	2b05      	cmp	r3, #5
 801d194:	d801      	bhi.n	801d19a <__hexdig_fun+0x1a>
 801d196:	3847      	subs	r0, #71	@ 0x47
 801d198:	e7f7      	b.n	801d18a <__hexdig_fun+0xa>
 801d19a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801d19e:	2b05      	cmp	r3, #5
 801d1a0:	d801      	bhi.n	801d1a6 <__hexdig_fun+0x26>
 801d1a2:	3827      	subs	r0, #39	@ 0x27
 801d1a4:	e7f1      	b.n	801d18a <__hexdig_fun+0xa>
 801d1a6:	2000      	movs	r0, #0
 801d1a8:	4770      	bx	lr
	...

0801d1ac <__gethex>:
 801d1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1b0:	b085      	sub	sp, #20
 801d1b2:	468a      	mov	sl, r1
 801d1b4:	9302      	str	r3, [sp, #8]
 801d1b6:	680b      	ldr	r3, [r1, #0]
 801d1b8:	9001      	str	r0, [sp, #4]
 801d1ba:	4690      	mov	r8, r2
 801d1bc:	1c9c      	adds	r4, r3, #2
 801d1be:	46a1      	mov	r9, r4
 801d1c0:	f814 0b01 	ldrb.w	r0, [r4], #1
 801d1c4:	2830      	cmp	r0, #48	@ 0x30
 801d1c6:	d0fa      	beq.n	801d1be <__gethex+0x12>
 801d1c8:	eba9 0303 	sub.w	r3, r9, r3
 801d1cc:	f1a3 0b02 	sub.w	fp, r3, #2
 801d1d0:	f7ff ffd6 	bl	801d180 <__hexdig_fun>
 801d1d4:	4605      	mov	r5, r0
 801d1d6:	2800      	cmp	r0, #0
 801d1d8:	d168      	bne.n	801d2ac <__gethex+0x100>
 801d1da:	49a0      	ldr	r1, [pc, #640]	@ (801d45c <__gethex+0x2b0>)
 801d1dc:	2201      	movs	r2, #1
 801d1de:	4648      	mov	r0, r9
 801d1e0:	f7ff fefe 	bl	801cfe0 <strncmp>
 801d1e4:	4607      	mov	r7, r0
 801d1e6:	2800      	cmp	r0, #0
 801d1e8:	d167      	bne.n	801d2ba <__gethex+0x10e>
 801d1ea:	f899 0001 	ldrb.w	r0, [r9, #1]
 801d1ee:	4626      	mov	r6, r4
 801d1f0:	f7ff ffc6 	bl	801d180 <__hexdig_fun>
 801d1f4:	2800      	cmp	r0, #0
 801d1f6:	d062      	beq.n	801d2be <__gethex+0x112>
 801d1f8:	4623      	mov	r3, r4
 801d1fa:	7818      	ldrb	r0, [r3, #0]
 801d1fc:	2830      	cmp	r0, #48	@ 0x30
 801d1fe:	4699      	mov	r9, r3
 801d200:	f103 0301 	add.w	r3, r3, #1
 801d204:	d0f9      	beq.n	801d1fa <__gethex+0x4e>
 801d206:	f7ff ffbb 	bl	801d180 <__hexdig_fun>
 801d20a:	fab0 f580 	clz	r5, r0
 801d20e:	096d      	lsrs	r5, r5, #5
 801d210:	f04f 0b01 	mov.w	fp, #1
 801d214:	464a      	mov	r2, r9
 801d216:	4616      	mov	r6, r2
 801d218:	3201      	adds	r2, #1
 801d21a:	7830      	ldrb	r0, [r6, #0]
 801d21c:	f7ff ffb0 	bl	801d180 <__hexdig_fun>
 801d220:	2800      	cmp	r0, #0
 801d222:	d1f8      	bne.n	801d216 <__gethex+0x6a>
 801d224:	498d      	ldr	r1, [pc, #564]	@ (801d45c <__gethex+0x2b0>)
 801d226:	2201      	movs	r2, #1
 801d228:	4630      	mov	r0, r6
 801d22a:	f7ff fed9 	bl	801cfe0 <strncmp>
 801d22e:	2800      	cmp	r0, #0
 801d230:	d13f      	bne.n	801d2b2 <__gethex+0x106>
 801d232:	b944      	cbnz	r4, 801d246 <__gethex+0x9a>
 801d234:	1c74      	adds	r4, r6, #1
 801d236:	4622      	mov	r2, r4
 801d238:	4616      	mov	r6, r2
 801d23a:	3201      	adds	r2, #1
 801d23c:	7830      	ldrb	r0, [r6, #0]
 801d23e:	f7ff ff9f 	bl	801d180 <__hexdig_fun>
 801d242:	2800      	cmp	r0, #0
 801d244:	d1f8      	bne.n	801d238 <__gethex+0x8c>
 801d246:	1ba4      	subs	r4, r4, r6
 801d248:	00a7      	lsls	r7, r4, #2
 801d24a:	7833      	ldrb	r3, [r6, #0]
 801d24c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801d250:	2b50      	cmp	r3, #80	@ 0x50
 801d252:	d13e      	bne.n	801d2d2 <__gethex+0x126>
 801d254:	7873      	ldrb	r3, [r6, #1]
 801d256:	2b2b      	cmp	r3, #43	@ 0x2b
 801d258:	d033      	beq.n	801d2c2 <__gethex+0x116>
 801d25a:	2b2d      	cmp	r3, #45	@ 0x2d
 801d25c:	d034      	beq.n	801d2c8 <__gethex+0x11c>
 801d25e:	1c71      	adds	r1, r6, #1
 801d260:	2400      	movs	r4, #0
 801d262:	7808      	ldrb	r0, [r1, #0]
 801d264:	f7ff ff8c 	bl	801d180 <__hexdig_fun>
 801d268:	1e43      	subs	r3, r0, #1
 801d26a:	b2db      	uxtb	r3, r3
 801d26c:	2b18      	cmp	r3, #24
 801d26e:	d830      	bhi.n	801d2d2 <__gethex+0x126>
 801d270:	f1a0 0210 	sub.w	r2, r0, #16
 801d274:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801d278:	f7ff ff82 	bl	801d180 <__hexdig_fun>
 801d27c:	f100 3cff 	add.w	ip, r0, #4294967295
 801d280:	fa5f fc8c 	uxtb.w	ip, ip
 801d284:	f1bc 0f18 	cmp.w	ip, #24
 801d288:	f04f 030a 	mov.w	r3, #10
 801d28c:	d91e      	bls.n	801d2cc <__gethex+0x120>
 801d28e:	b104      	cbz	r4, 801d292 <__gethex+0xe6>
 801d290:	4252      	negs	r2, r2
 801d292:	4417      	add	r7, r2
 801d294:	f8ca 1000 	str.w	r1, [sl]
 801d298:	b1ed      	cbz	r5, 801d2d6 <__gethex+0x12a>
 801d29a:	f1bb 0f00 	cmp.w	fp, #0
 801d29e:	bf0c      	ite	eq
 801d2a0:	2506      	moveq	r5, #6
 801d2a2:	2500      	movne	r5, #0
 801d2a4:	4628      	mov	r0, r5
 801d2a6:	b005      	add	sp, #20
 801d2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2ac:	2500      	movs	r5, #0
 801d2ae:	462c      	mov	r4, r5
 801d2b0:	e7b0      	b.n	801d214 <__gethex+0x68>
 801d2b2:	2c00      	cmp	r4, #0
 801d2b4:	d1c7      	bne.n	801d246 <__gethex+0x9a>
 801d2b6:	4627      	mov	r7, r4
 801d2b8:	e7c7      	b.n	801d24a <__gethex+0x9e>
 801d2ba:	464e      	mov	r6, r9
 801d2bc:	462f      	mov	r7, r5
 801d2be:	2501      	movs	r5, #1
 801d2c0:	e7c3      	b.n	801d24a <__gethex+0x9e>
 801d2c2:	2400      	movs	r4, #0
 801d2c4:	1cb1      	adds	r1, r6, #2
 801d2c6:	e7cc      	b.n	801d262 <__gethex+0xb6>
 801d2c8:	2401      	movs	r4, #1
 801d2ca:	e7fb      	b.n	801d2c4 <__gethex+0x118>
 801d2cc:	fb03 0002 	mla	r0, r3, r2, r0
 801d2d0:	e7ce      	b.n	801d270 <__gethex+0xc4>
 801d2d2:	4631      	mov	r1, r6
 801d2d4:	e7de      	b.n	801d294 <__gethex+0xe8>
 801d2d6:	eba6 0309 	sub.w	r3, r6, r9
 801d2da:	3b01      	subs	r3, #1
 801d2dc:	4629      	mov	r1, r5
 801d2de:	2b07      	cmp	r3, #7
 801d2e0:	dc0a      	bgt.n	801d2f8 <__gethex+0x14c>
 801d2e2:	9801      	ldr	r0, [sp, #4]
 801d2e4:	f7fd ff84 	bl	801b1f0 <_Balloc>
 801d2e8:	4604      	mov	r4, r0
 801d2ea:	b940      	cbnz	r0, 801d2fe <__gethex+0x152>
 801d2ec:	4b5c      	ldr	r3, [pc, #368]	@ (801d460 <__gethex+0x2b4>)
 801d2ee:	4602      	mov	r2, r0
 801d2f0:	21e4      	movs	r1, #228	@ 0xe4
 801d2f2:	485c      	ldr	r0, [pc, #368]	@ (801d464 <__gethex+0x2b8>)
 801d2f4:	f7ff fec0 	bl	801d078 <__assert_func>
 801d2f8:	3101      	adds	r1, #1
 801d2fa:	105b      	asrs	r3, r3, #1
 801d2fc:	e7ef      	b.n	801d2de <__gethex+0x132>
 801d2fe:	f100 0a14 	add.w	sl, r0, #20
 801d302:	2300      	movs	r3, #0
 801d304:	4655      	mov	r5, sl
 801d306:	469b      	mov	fp, r3
 801d308:	45b1      	cmp	r9, r6
 801d30a:	d337      	bcc.n	801d37c <__gethex+0x1d0>
 801d30c:	f845 bb04 	str.w	fp, [r5], #4
 801d310:	eba5 050a 	sub.w	r5, r5, sl
 801d314:	10ad      	asrs	r5, r5, #2
 801d316:	6125      	str	r5, [r4, #16]
 801d318:	4658      	mov	r0, fp
 801d31a:	f7fe f85b 	bl	801b3d4 <__hi0bits>
 801d31e:	016d      	lsls	r5, r5, #5
 801d320:	f8d8 6000 	ldr.w	r6, [r8]
 801d324:	1a2d      	subs	r5, r5, r0
 801d326:	42b5      	cmp	r5, r6
 801d328:	dd54      	ble.n	801d3d4 <__gethex+0x228>
 801d32a:	1bad      	subs	r5, r5, r6
 801d32c:	4629      	mov	r1, r5
 801d32e:	4620      	mov	r0, r4
 801d330:	f7fe fbef 	bl	801bb12 <__any_on>
 801d334:	4681      	mov	r9, r0
 801d336:	b178      	cbz	r0, 801d358 <__gethex+0x1ac>
 801d338:	1e6b      	subs	r3, r5, #1
 801d33a:	1159      	asrs	r1, r3, #5
 801d33c:	f003 021f 	and.w	r2, r3, #31
 801d340:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801d344:	f04f 0901 	mov.w	r9, #1
 801d348:	fa09 f202 	lsl.w	r2, r9, r2
 801d34c:	420a      	tst	r2, r1
 801d34e:	d003      	beq.n	801d358 <__gethex+0x1ac>
 801d350:	454b      	cmp	r3, r9
 801d352:	dc36      	bgt.n	801d3c2 <__gethex+0x216>
 801d354:	f04f 0902 	mov.w	r9, #2
 801d358:	4629      	mov	r1, r5
 801d35a:	4620      	mov	r0, r4
 801d35c:	f7ff febe 	bl	801d0dc <rshift>
 801d360:	442f      	add	r7, r5
 801d362:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d366:	42bb      	cmp	r3, r7
 801d368:	da42      	bge.n	801d3f0 <__gethex+0x244>
 801d36a:	9801      	ldr	r0, [sp, #4]
 801d36c:	4621      	mov	r1, r4
 801d36e:	f7fd ff7f 	bl	801b270 <_Bfree>
 801d372:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d374:	2300      	movs	r3, #0
 801d376:	6013      	str	r3, [r2, #0]
 801d378:	25a3      	movs	r5, #163	@ 0xa3
 801d37a:	e793      	b.n	801d2a4 <__gethex+0xf8>
 801d37c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801d380:	2a2e      	cmp	r2, #46	@ 0x2e
 801d382:	d012      	beq.n	801d3aa <__gethex+0x1fe>
 801d384:	2b20      	cmp	r3, #32
 801d386:	d104      	bne.n	801d392 <__gethex+0x1e6>
 801d388:	f845 bb04 	str.w	fp, [r5], #4
 801d38c:	f04f 0b00 	mov.w	fp, #0
 801d390:	465b      	mov	r3, fp
 801d392:	7830      	ldrb	r0, [r6, #0]
 801d394:	9303      	str	r3, [sp, #12]
 801d396:	f7ff fef3 	bl	801d180 <__hexdig_fun>
 801d39a:	9b03      	ldr	r3, [sp, #12]
 801d39c:	f000 000f 	and.w	r0, r0, #15
 801d3a0:	4098      	lsls	r0, r3
 801d3a2:	ea4b 0b00 	orr.w	fp, fp, r0
 801d3a6:	3304      	adds	r3, #4
 801d3a8:	e7ae      	b.n	801d308 <__gethex+0x15c>
 801d3aa:	45b1      	cmp	r9, r6
 801d3ac:	d8ea      	bhi.n	801d384 <__gethex+0x1d8>
 801d3ae:	492b      	ldr	r1, [pc, #172]	@ (801d45c <__gethex+0x2b0>)
 801d3b0:	9303      	str	r3, [sp, #12]
 801d3b2:	2201      	movs	r2, #1
 801d3b4:	4630      	mov	r0, r6
 801d3b6:	f7ff fe13 	bl	801cfe0 <strncmp>
 801d3ba:	9b03      	ldr	r3, [sp, #12]
 801d3bc:	2800      	cmp	r0, #0
 801d3be:	d1e1      	bne.n	801d384 <__gethex+0x1d8>
 801d3c0:	e7a2      	b.n	801d308 <__gethex+0x15c>
 801d3c2:	1ea9      	subs	r1, r5, #2
 801d3c4:	4620      	mov	r0, r4
 801d3c6:	f7fe fba4 	bl	801bb12 <__any_on>
 801d3ca:	2800      	cmp	r0, #0
 801d3cc:	d0c2      	beq.n	801d354 <__gethex+0x1a8>
 801d3ce:	f04f 0903 	mov.w	r9, #3
 801d3d2:	e7c1      	b.n	801d358 <__gethex+0x1ac>
 801d3d4:	da09      	bge.n	801d3ea <__gethex+0x23e>
 801d3d6:	1b75      	subs	r5, r6, r5
 801d3d8:	4621      	mov	r1, r4
 801d3da:	9801      	ldr	r0, [sp, #4]
 801d3dc:	462a      	mov	r2, r5
 801d3de:	f7fe f95f 	bl	801b6a0 <__lshift>
 801d3e2:	1b7f      	subs	r7, r7, r5
 801d3e4:	4604      	mov	r4, r0
 801d3e6:	f100 0a14 	add.w	sl, r0, #20
 801d3ea:	f04f 0900 	mov.w	r9, #0
 801d3ee:	e7b8      	b.n	801d362 <__gethex+0x1b6>
 801d3f0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801d3f4:	42bd      	cmp	r5, r7
 801d3f6:	dd6f      	ble.n	801d4d8 <__gethex+0x32c>
 801d3f8:	1bed      	subs	r5, r5, r7
 801d3fa:	42ae      	cmp	r6, r5
 801d3fc:	dc34      	bgt.n	801d468 <__gethex+0x2bc>
 801d3fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d402:	2b02      	cmp	r3, #2
 801d404:	d022      	beq.n	801d44c <__gethex+0x2a0>
 801d406:	2b03      	cmp	r3, #3
 801d408:	d024      	beq.n	801d454 <__gethex+0x2a8>
 801d40a:	2b01      	cmp	r3, #1
 801d40c:	d115      	bne.n	801d43a <__gethex+0x28e>
 801d40e:	42ae      	cmp	r6, r5
 801d410:	d113      	bne.n	801d43a <__gethex+0x28e>
 801d412:	2e01      	cmp	r6, #1
 801d414:	d10b      	bne.n	801d42e <__gethex+0x282>
 801d416:	9a02      	ldr	r2, [sp, #8]
 801d418:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d41c:	6013      	str	r3, [r2, #0]
 801d41e:	2301      	movs	r3, #1
 801d420:	6123      	str	r3, [r4, #16]
 801d422:	f8ca 3000 	str.w	r3, [sl]
 801d426:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d428:	2562      	movs	r5, #98	@ 0x62
 801d42a:	601c      	str	r4, [r3, #0]
 801d42c:	e73a      	b.n	801d2a4 <__gethex+0xf8>
 801d42e:	1e71      	subs	r1, r6, #1
 801d430:	4620      	mov	r0, r4
 801d432:	f7fe fb6e 	bl	801bb12 <__any_on>
 801d436:	2800      	cmp	r0, #0
 801d438:	d1ed      	bne.n	801d416 <__gethex+0x26a>
 801d43a:	9801      	ldr	r0, [sp, #4]
 801d43c:	4621      	mov	r1, r4
 801d43e:	f7fd ff17 	bl	801b270 <_Bfree>
 801d442:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d444:	2300      	movs	r3, #0
 801d446:	6013      	str	r3, [r2, #0]
 801d448:	2550      	movs	r5, #80	@ 0x50
 801d44a:	e72b      	b.n	801d2a4 <__gethex+0xf8>
 801d44c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d44e:	2b00      	cmp	r3, #0
 801d450:	d1f3      	bne.n	801d43a <__gethex+0x28e>
 801d452:	e7e0      	b.n	801d416 <__gethex+0x26a>
 801d454:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d456:	2b00      	cmp	r3, #0
 801d458:	d1dd      	bne.n	801d416 <__gethex+0x26a>
 801d45a:	e7ee      	b.n	801d43a <__gethex+0x28e>
 801d45c:	0801e460 	.word	0x0801e460
 801d460:	0801e2f5 	.word	0x0801e2f5
 801d464:	0801e60e 	.word	0x0801e60e
 801d468:	1e6f      	subs	r7, r5, #1
 801d46a:	f1b9 0f00 	cmp.w	r9, #0
 801d46e:	d130      	bne.n	801d4d2 <__gethex+0x326>
 801d470:	b127      	cbz	r7, 801d47c <__gethex+0x2d0>
 801d472:	4639      	mov	r1, r7
 801d474:	4620      	mov	r0, r4
 801d476:	f7fe fb4c 	bl	801bb12 <__any_on>
 801d47a:	4681      	mov	r9, r0
 801d47c:	117a      	asrs	r2, r7, #5
 801d47e:	2301      	movs	r3, #1
 801d480:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801d484:	f007 071f 	and.w	r7, r7, #31
 801d488:	40bb      	lsls	r3, r7
 801d48a:	4213      	tst	r3, r2
 801d48c:	4629      	mov	r1, r5
 801d48e:	4620      	mov	r0, r4
 801d490:	bf18      	it	ne
 801d492:	f049 0902 	orrne.w	r9, r9, #2
 801d496:	f7ff fe21 	bl	801d0dc <rshift>
 801d49a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801d49e:	1b76      	subs	r6, r6, r5
 801d4a0:	2502      	movs	r5, #2
 801d4a2:	f1b9 0f00 	cmp.w	r9, #0
 801d4a6:	d047      	beq.n	801d538 <__gethex+0x38c>
 801d4a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d4ac:	2b02      	cmp	r3, #2
 801d4ae:	d015      	beq.n	801d4dc <__gethex+0x330>
 801d4b0:	2b03      	cmp	r3, #3
 801d4b2:	d017      	beq.n	801d4e4 <__gethex+0x338>
 801d4b4:	2b01      	cmp	r3, #1
 801d4b6:	d109      	bne.n	801d4cc <__gethex+0x320>
 801d4b8:	f019 0f02 	tst.w	r9, #2
 801d4bc:	d006      	beq.n	801d4cc <__gethex+0x320>
 801d4be:	f8da 3000 	ldr.w	r3, [sl]
 801d4c2:	ea49 0903 	orr.w	r9, r9, r3
 801d4c6:	f019 0f01 	tst.w	r9, #1
 801d4ca:	d10e      	bne.n	801d4ea <__gethex+0x33e>
 801d4cc:	f045 0510 	orr.w	r5, r5, #16
 801d4d0:	e032      	b.n	801d538 <__gethex+0x38c>
 801d4d2:	f04f 0901 	mov.w	r9, #1
 801d4d6:	e7d1      	b.n	801d47c <__gethex+0x2d0>
 801d4d8:	2501      	movs	r5, #1
 801d4da:	e7e2      	b.n	801d4a2 <__gethex+0x2f6>
 801d4dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d4de:	f1c3 0301 	rsb	r3, r3, #1
 801d4e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d4e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d4e6:	2b00      	cmp	r3, #0
 801d4e8:	d0f0      	beq.n	801d4cc <__gethex+0x320>
 801d4ea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801d4ee:	f104 0314 	add.w	r3, r4, #20
 801d4f2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801d4f6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801d4fa:	f04f 0c00 	mov.w	ip, #0
 801d4fe:	4618      	mov	r0, r3
 801d500:	f853 2b04 	ldr.w	r2, [r3], #4
 801d504:	f1b2 3fff 	cmp.w	r2, #4294967295
 801d508:	d01b      	beq.n	801d542 <__gethex+0x396>
 801d50a:	3201      	adds	r2, #1
 801d50c:	6002      	str	r2, [r0, #0]
 801d50e:	2d02      	cmp	r5, #2
 801d510:	f104 0314 	add.w	r3, r4, #20
 801d514:	d13c      	bne.n	801d590 <__gethex+0x3e4>
 801d516:	f8d8 2000 	ldr.w	r2, [r8]
 801d51a:	3a01      	subs	r2, #1
 801d51c:	42b2      	cmp	r2, r6
 801d51e:	d109      	bne.n	801d534 <__gethex+0x388>
 801d520:	1171      	asrs	r1, r6, #5
 801d522:	2201      	movs	r2, #1
 801d524:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801d528:	f006 061f 	and.w	r6, r6, #31
 801d52c:	fa02 f606 	lsl.w	r6, r2, r6
 801d530:	421e      	tst	r6, r3
 801d532:	d13a      	bne.n	801d5aa <__gethex+0x3fe>
 801d534:	f045 0520 	orr.w	r5, r5, #32
 801d538:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d53a:	601c      	str	r4, [r3, #0]
 801d53c:	9b02      	ldr	r3, [sp, #8]
 801d53e:	601f      	str	r7, [r3, #0]
 801d540:	e6b0      	b.n	801d2a4 <__gethex+0xf8>
 801d542:	4299      	cmp	r1, r3
 801d544:	f843 cc04 	str.w	ip, [r3, #-4]
 801d548:	d8d9      	bhi.n	801d4fe <__gethex+0x352>
 801d54a:	68a3      	ldr	r3, [r4, #8]
 801d54c:	459b      	cmp	fp, r3
 801d54e:	db17      	blt.n	801d580 <__gethex+0x3d4>
 801d550:	6861      	ldr	r1, [r4, #4]
 801d552:	9801      	ldr	r0, [sp, #4]
 801d554:	3101      	adds	r1, #1
 801d556:	f7fd fe4b 	bl	801b1f0 <_Balloc>
 801d55a:	4681      	mov	r9, r0
 801d55c:	b918      	cbnz	r0, 801d566 <__gethex+0x3ba>
 801d55e:	4b1a      	ldr	r3, [pc, #104]	@ (801d5c8 <__gethex+0x41c>)
 801d560:	4602      	mov	r2, r0
 801d562:	2184      	movs	r1, #132	@ 0x84
 801d564:	e6c5      	b.n	801d2f2 <__gethex+0x146>
 801d566:	6922      	ldr	r2, [r4, #16]
 801d568:	3202      	adds	r2, #2
 801d56a:	f104 010c 	add.w	r1, r4, #12
 801d56e:	0092      	lsls	r2, r2, #2
 801d570:	300c      	adds	r0, #12
 801d572:	f7fc fedc 	bl	801a32e <memcpy>
 801d576:	4621      	mov	r1, r4
 801d578:	9801      	ldr	r0, [sp, #4]
 801d57a:	f7fd fe79 	bl	801b270 <_Bfree>
 801d57e:	464c      	mov	r4, r9
 801d580:	6923      	ldr	r3, [r4, #16]
 801d582:	1c5a      	adds	r2, r3, #1
 801d584:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801d588:	6122      	str	r2, [r4, #16]
 801d58a:	2201      	movs	r2, #1
 801d58c:	615a      	str	r2, [r3, #20]
 801d58e:	e7be      	b.n	801d50e <__gethex+0x362>
 801d590:	6922      	ldr	r2, [r4, #16]
 801d592:	455a      	cmp	r2, fp
 801d594:	dd0b      	ble.n	801d5ae <__gethex+0x402>
 801d596:	2101      	movs	r1, #1
 801d598:	4620      	mov	r0, r4
 801d59a:	f7ff fd9f 	bl	801d0dc <rshift>
 801d59e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d5a2:	3701      	adds	r7, #1
 801d5a4:	42bb      	cmp	r3, r7
 801d5a6:	f6ff aee0 	blt.w	801d36a <__gethex+0x1be>
 801d5aa:	2501      	movs	r5, #1
 801d5ac:	e7c2      	b.n	801d534 <__gethex+0x388>
 801d5ae:	f016 061f 	ands.w	r6, r6, #31
 801d5b2:	d0fa      	beq.n	801d5aa <__gethex+0x3fe>
 801d5b4:	4453      	add	r3, sl
 801d5b6:	f1c6 0620 	rsb	r6, r6, #32
 801d5ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801d5be:	f7fd ff09 	bl	801b3d4 <__hi0bits>
 801d5c2:	42b0      	cmp	r0, r6
 801d5c4:	dbe7      	blt.n	801d596 <__gethex+0x3ea>
 801d5c6:	e7f0      	b.n	801d5aa <__gethex+0x3fe>
 801d5c8:	0801e2f5 	.word	0x0801e2f5

0801d5cc <L_shift>:
 801d5cc:	f1c2 0208 	rsb	r2, r2, #8
 801d5d0:	0092      	lsls	r2, r2, #2
 801d5d2:	b570      	push	{r4, r5, r6, lr}
 801d5d4:	f1c2 0620 	rsb	r6, r2, #32
 801d5d8:	6843      	ldr	r3, [r0, #4]
 801d5da:	6804      	ldr	r4, [r0, #0]
 801d5dc:	fa03 f506 	lsl.w	r5, r3, r6
 801d5e0:	432c      	orrs	r4, r5
 801d5e2:	40d3      	lsrs	r3, r2
 801d5e4:	6004      	str	r4, [r0, #0]
 801d5e6:	f840 3f04 	str.w	r3, [r0, #4]!
 801d5ea:	4288      	cmp	r0, r1
 801d5ec:	d3f4      	bcc.n	801d5d8 <L_shift+0xc>
 801d5ee:	bd70      	pop	{r4, r5, r6, pc}

0801d5f0 <__match>:
 801d5f0:	b530      	push	{r4, r5, lr}
 801d5f2:	6803      	ldr	r3, [r0, #0]
 801d5f4:	3301      	adds	r3, #1
 801d5f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d5fa:	b914      	cbnz	r4, 801d602 <__match+0x12>
 801d5fc:	6003      	str	r3, [r0, #0]
 801d5fe:	2001      	movs	r0, #1
 801d600:	bd30      	pop	{r4, r5, pc}
 801d602:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d606:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801d60a:	2d19      	cmp	r5, #25
 801d60c:	bf98      	it	ls
 801d60e:	3220      	addls	r2, #32
 801d610:	42a2      	cmp	r2, r4
 801d612:	d0f0      	beq.n	801d5f6 <__match+0x6>
 801d614:	2000      	movs	r0, #0
 801d616:	e7f3      	b.n	801d600 <__match+0x10>

0801d618 <__hexnan>:
 801d618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d61c:	680b      	ldr	r3, [r1, #0]
 801d61e:	6801      	ldr	r1, [r0, #0]
 801d620:	115e      	asrs	r6, r3, #5
 801d622:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801d626:	f013 031f 	ands.w	r3, r3, #31
 801d62a:	b087      	sub	sp, #28
 801d62c:	bf18      	it	ne
 801d62e:	3604      	addne	r6, #4
 801d630:	2500      	movs	r5, #0
 801d632:	1f37      	subs	r7, r6, #4
 801d634:	4682      	mov	sl, r0
 801d636:	4690      	mov	r8, r2
 801d638:	9301      	str	r3, [sp, #4]
 801d63a:	f846 5c04 	str.w	r5, [r6, #-4]
 801d63e:	46b9      	mov	r9, r7
 801d640:	463c      	mov	r4, r7
 801d642:	9502      	str	r5, [sp, #8]
 801d644:	46ab      	mov	fp, r5
 801d646:	784a      	ldrb	r2, [r1, #1]
 801d648:	1c4b      	adds	r3, r1, #1
 801d64a:	9303      	str	r3, [sp, #12]
 801d64c:	b342      	cbz	r2, 801d6a0 <__hexnan+0x88>
 801d64e:	4610      	mov	r0, r2
 801d650:	9105      	str	r1, [sp, #20]
 801d652:	9204      	str	r2, [sp, #16]
 801d654:	f7ff fd94 	bl	801d180 <__hexdig_fun>
 801d658:	2800      	cmp	r0, #0
 801d65a:	d151      	bne.n	801d700 <__hexnan+0xe8>
 801d65c:	9a04      	ldr	r2, [sp, #16]
 801d65e:	9905      	ldr	r1, [sp, #20]
 801d660:	2a20      	cmp	r2, #32
 801d662:	d818      	bhi.n	801d696 <__hexnan+0x7e>
 801d664:	9b02      	ldr	r3, [sp, #8]
 801d666:	459b      	cmp	fp, r3
 801d668:	dd13      	ble.n	801d692 <__hexnan+0x7a>
 801d66a:	454c      	cmp	r4, r9
 801d66c:	d206      	bcs.n	801d67c <__hexnan+0x64>
 801d66e:	2d07      	cmp	r5, #7
 801d670:	dc04      	bgt.n	801d67c <__hexnan+0x64>
 801d672:	462a      	mov	r2, r5
 801d674:	4649      	mov	r1, r9
 801d676:	4620      	mov	r0, r4
 801d678:	f7ff ffa8 	bl	801d5cc <L_shift>
 801d67c:	4544      	cmp	r4, r8
 801d67e:	d952      	bls.n	801d726 <__hexnan+0x10e>
 801d680:	2300      	movs	r3, #0
 801d682:	f1a4 0904 	sub.w	r9, r4, #4
 801d686:	f844 3c04 	str.w	r3, [r4, #-4]
 801d68a:	f8cd b008 	str.w	fp, [sp, #8]
 801d68e:	464c      	mov	r4, r9
 801d690:	461d      	mov	r5, r3
 801d692:	9903      	ldr	r1, [sp, #12]
 801d694:	e7d7      	b.n	801d646 <__hexnan+0x2e>
 801d696:	2a29      	cmp	r2, #41	@ 0x29
 801d698:	d157      	bne.n	801d74a <__hexnan+0x132>
 801d69a:	3102      	adds	r1, #2
 801d69c:	f8ca 1000 	str.w	r1, [sl]
 801d6a0:	f1bb 0f00 	cmp.w	fp, #0
 801d6a4:	d051      	beq.n	801d74a <__hexnan+0x132>
 801d6a6:	454c      	cmp	r4, r9
 801d6a8:	d206      	bcs.n	801d6b8 <__hexnan+0xa0>
 801d6aa:	2d07      	cmp	r5, #7
 801d6ac:	dc04      	bgt.n	801d6b8 <__hexnan+0xa0>
 801d6ae:	462a      	mov	r2, r5
 801d6b0:	4649      	mov	r1, r9
 801d6b2:	4620      	mov	r0, r4
 801d6b4:	f7ff ff8a 	bl	801d5cc <L_shift>
 801d6b8:	4544      	cmp	r4, r8
 801d6ba:	d936      	bls.n	801d72a <__hexnan+0x112>
 801d6bc:	f1a8 0204 	sub.w	r2, r8, #4
 801d6c0:	4623      	mov	r3, r4
 801d6c2:	f853 1b04 	ldr.w	r1, [r3], #4
 801d6c6:	f842 1f04 	str.w	r1, [r2, #4]!
 801d6ca:	429f      	cmp	r7, r3
 801d6cc:	d2f9      	bcs.n	801d6c2 <__hexnan+0xaa>
 801d6ce:	1b3b      	subs	r3, r7, r4
 801d6d0:	f023 0303 	bic.w	r3, r3, #3
 801d6d4:	3304      	adds	r3, #4
 801d6d6:	3401      	adds	r4, #1
 801d6d8:	3e03      	subs	r6, #3
 801d6da:	42b4      	cmp	r4, r6
 801d6dc:	bf88      	it	hi
 801d6de:	2304      	movhi	r3, #4
 801d6e0:	4443      	add	r3, r8
 801d6e2:	2200      	movs	r2, #0
 801d6e4:	f843 2b04 	str.w	r2, [r3], #4
 801d6e8:	429f      	cmp	r7, r3
 801d6ea:	d2fb      	bcs.n	801d6e4 <__hexnan+0xcc>
 801d6ec:	683b      	ldr	r3, [r7, #0]
 801d6ee:	b91b      	cbnz	r3, 801d6f8 <__hexnan+0xe0>
 801d6f0:	4547      	cmp	r7, r8
 801d6f2:	d128      	bne.n	801d746 <__hexnan+0x12e>
 801d6f4:	2301      	movs	r3, #1
 801d6f6:	603b      	str	r3, [r7, #0]
 801d6f8:	2005      	movs	r0, #5
 801d6fa:	b007      	add	sp, #28
 801d6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d700:	3501      	adds	r5, #1
 801d702:	2d08      	cmp	r5, #8
 801d704:	f10b 0b01 	add.w	fp, fp, #1
 801d708:	dd06      	ble.n	801d718 <__hexnan+0x100>
 801d70a:	4544      	cmp	r4, r8
 801d70c:	d9c1      	bls.n	801d692 <__hexnan+0x7a>
 801d70e:	2300      	movs	r3, #0
 801d710:	f844 3c04 	str.w	r3, [r4, #-4]
 801d714:	2501      	movs	r5, #1
 801d716:	3c04      	subs	r4, #4
 801d718:	6822      	ldr	r2, [r4, #0]
 801d71a:	f000 000f 	and.w	r0, r0, #15
 801d71e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801d722:	6020      	str	r0, [r4, #0]
 801d724:	e7b5      	b.n	801d692 <__hexnan+0x7a>
 801d726:	2508      	movs	r5, #8
 801d728:	e7b3      	b.n	801d692 <__hexnan+0x7a>
 801d72a:	9b01      	ldr	r3, [sp, #4]
 801d72c:	2b00      	cmp	r3, #0
 801d72e:	d0dd      	beq.n	801d6ec <__hexnan+0xd4>
 801d730:	f1c3 0320 	rsb	r3, r3, #32
 801d734:	f04f 32ff 	mov.w	r2, #4294967295
 801d738:	40da      	lsrs	r2, r3
 801d73a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801d73e:	4013      	ands	r3, r2
 801d740:	f846 3c04 	str.w	r3, [r6, #-4]
 801d744:	e7d2      	b.n	801d6ec <__hexnan+0xd4>
 801d746:	3f04      	subs	r7, #4
 801d748:	e7d0      	b.n	801d6ec <__hexnan+0xd4>
 801d74a:	2004      	movs	r0, #4
 801d74c:	e7d5      	b.n	801d6fa <__hexnan+0xe2>

0801d74e <__ascii_mbtowc>:
 801d74e:	b082      	sub	sp, #8
 801d750:	b901      	cbnz	r1, 801d754 <__ascii_mbtowc+0x6>
 801d752:	a901      	add	r1, sp, #4
 801d754:	b142      	cbz	r2, 801d768 <__ascii_mbtowc+0x1a>
 801d756:	b14b      	cbz	r3, 801d76c <__ascii_mbtowc+0x1e>
 801d758:	7813      	ldrb	r3, [r2, #0]
 801d75a:	600b      	str	r3, [r1, #0]
 801d75c:	7812      	ldrb	r2, [r2, #0]
 801d75e:	1e10      	subs	r0, r2, #0
 801d760:	bf18      	it	ne
 801d762:	2001      	movne	r0, #1
 801d764:	b002      	add	sp, #8
 801d766:	4770      	bx	lr
 801d768:	4610      	mov	r0, r2
 801d76a:	e7fb      	b.n	801d764 <__ascii_mbtowc+0x16>
 801d76c:	f06f 0001 	mvn.w	r0, #1
 801d770:	e7f8      	b.n	801d764 <__ascii_mbtowc+0x16>

0801d772 <_realloc_r>:
 801d772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d776:	4680      	mov	r8, r0
 801d778:	4615      	mov	r5, r2
 801d77a:	460c      	mov	r4, r1
 801d77c:	b921      	cbnz	r1, 801d788 <_realloc_r+0x16>
 801d77e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d782:	4611      	mov	r1, r2
 801d784:	f7fd bca8 	b.w	801b0d8 <_malloc_r>
 801d788:	b92a      	cbnz	r2, 801d796 <_realloc_r+0x24>
 801d78a:	f7fd fc31 	bl	801aff0 <_free_r>
 801d78e:	2400      	movs	r4, #0
 801d790:	4620      	mov	r0, r4
 801d792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d796:	f000 f840 	bl	801d81a <_malloc_usable_size_r>
 801d79a:	4285      	cmp	r5, r0
 801d79c:	4606      	mov	r6, r0
 801d79e:	d802      	bhi.n	801d7a6 <_realloc_r+0x34>
 801d7a0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801d7a4:	d8f4      	bhi.n	801d790 <_realloc_r+0x1e>
 801d7a6:	4629      	mov	r1, r5
 801d7a8:	4640      	mov	r0, r8
 801d7aa:	f7fd fc95 	bl	801b0d8 <_malloc_r>
 801d7ae:	4607      	mov	r7, r0
 801d7b0:	2800      	cmp	r0, #0
 801d7b2:	d0ec      	beq.n	801d78e <_realloc_r+0x1c>
 801d7b4:	42b5      	cmp	r5, r6
 801d7b6:	462a      	mov	r2, r5
 801d7b8:	4621      	mov	r1, r4
 801d7ba:	bf28      	it	cs
 801d7bc:	4632      	movcs	r2, r6
 801d7be:	f7fc fdb6 	bl	801a32e <memcpy>
 801d7c2:	4621      	mov	r1, r4
 801d7c4:	4640      	mov	r0, r8
 801d7c6:	f7fd fc13 	bl	801aff0 <_free_r>
 801d7ca:	463c      	mov	r4, r7
 801d7cc:	e7e0      	b.n	801d790 <_realloc_r+0x1e>

0801d7ce <__ascii_wctomb>:
 801d7ce:	4603      	mov	r3, r0
 801d7d0:	4608      	mov	r0, r1
 801d7d2:	b141      	cbz	r1, 801d7e6 <__ascii_wctomb+0x18>
 801d7d4:	2aff      	cmp	r2, #255	@ 0xff
 801d7d6:	d904      	bls.n	801d7e2 <__ascii_wctomb+0x14>
 801d7d8:	228a      	movs	r2, #138	@ 0x8a
 801d7da:	601a      	str	r2, [r3, #0]
 801d7dc:	f04f 30ff 	mov.w	r0, #4294967295
 801d7e0:	4770      	bx	lr
 801d7e2:	700a      	strb	r2, [r1, #0]
 801d7e4:	2001      	movs	r0, #1
 801d7e6:	4770      	bx	lr

0801d7e8 <fiprintf>:
 801d7e8:	b40e      	push	{r1, r2, r3}
 801d7ea:	b503      	push	{r0, r1, lr}
 801d7ec:	4601      	mov	r1, r0
 801d7ee:	ab03      	add	r3, sp, #12
 801d7f0:	4805      	ldr	r0, [pc, #20]	@ (801d808 <fiprintf+0x20>)
 801d7f2:	f853 2b04 	ldr.w	r2, [r3], #4
 801d7f6:	6800      	ldr	r0, [r0, #0]
 801d7f8:	9301      	str	r3, [sp, #4]
 801d7fa:	f7ff f9b1 	bl	801cb60 <_vfiprintf_r>
 801d7fe:	b002      	add	sp, #8
 801d800:	f85d eb04 	ldr.w	lr, [sp], #4
 801d804:	b003      	add	sp, #12
 801d806:	4770      	bx	lr
 801d808:	2000009c 	.word	0x2000009c

0801d80c <abort>:
 801d80c:	b508      	push	{r3, lr}
 801d80e:	2006      	movs	r0, #6
 801d810:	f000 f834 	bl	801d87c <raise>
 801d814:	2001      	movs	r0, #1
 801d816:	f7ee fd45 	bl	800c2a4 <_exit>

0801d81a <_malloc_usable_size_r>:
 801d81a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d81e:	1f18      	subs	r0, r3, #4
 801d820:	2b00      	cmp	r3, #0
 801d822:	bfbc      	itt	lt
 801d824:	580b      	ldrlt	r3, [r1, r0]
 801d826:	18c0      	addlt	r0, r0, r3
 801d828:	4770      	bx	lr

0801d82a <_raise_r>:
 801d82a:	291f      	cmp	r1, #31
 801d82c:	b538      	push	{r3, r4, r5, lr}
 801d82e:	4605      	mov	r5, r0
 801d830:	460c      	mov	r4, r1
 801d832:	d904      	bls.n	801d83e <_raise_r+0x14>
 801d834:	2316      	movs	r3, #22
 801d836:	6003      	str	r3, [r0, #0]
 801d838:	f04f 30ff 	mov.w	r0, #4294967295
 801d83c:	bd38      	pop	{r3, r4, r5, pc}
 801d83e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801d840:	b112      	cbz	r2, 801d848 <_raise_r+0x1e>
 801d842:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d846:	b94b      	cbnz	r3, 801d85c <_raise_r+0x32>
 801d848:	4628      	mov	r0, r5
 801d84a:	f000 f831 	bl	801d8b0 <_getpid_r>
 801d84e:	4622      	mov	r2, r4
 801d850:	4601      	mov	r1, r0
 801d852:	4628      	mov	r0, r5
 801d854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d858:	f000 b818 	b.w	801d88c <_kill_r>
 801d85c:	2b01      	cmp	r3, #1
 801d85e:	d00a      	beq.n	801d876 <_raise_r+0x4c>
 801d860:	1c59      	adds	r1, r3, #1
 801d862:	d103      	bne.n	801d86c <_raise_r+0x42>
 801d864:	2316      	movs	r3, #22
 801d866:	6003      	str	r3, [r0, #0]
 801d868:	2001      	movs	r0, #1
 801d86a:	e7e7      	b.n	801d83c <_raise_r+0x12>
 801d86c:	2100      	movs	r1, #0
 801d86e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801d872:	4620      	mov	r0, r4
 801d874:	4798      	blx	r3
 801d876:	2000      	movs	r0, #0
 801d878:	e7e0      	b.n	801d83c <_raise_r+0x12>
	...

0801d87c <raise>:
 801d87c:	4b02      	ldr	r3, [pc, #8]	@ (801d888 <raise+0xc>)
 801d87e:	4601      	mov	r1, r0
 801d880:	6818      	ldr	r0, [r3, #0]
 801d882:	f7ff bfd2 	b.w	801d82a <_raise_r>
 801d886:	bf00      	nop
 801d888:	2000009c 	.word	0x2000009c

0801d88c <_kill_r>:
 801d88c:	b538      	push	{r3, r4, r5, lr}
 801d88e:	4d07      	ldr	r5, [pc, #28]	@ (801d8ac <_kill_r+0x20>)
 801d890:	2300      	movs	r3, #0
 801d892:	4604      	mov	r4, r0
 801d894:	4608      	mov	r0, r1
 801d896:	4611      	mov	r1, r2
 801d898:	602b      	str	r3, [r5, #0]
 801d89a:	f7ee fcf3 	bl	800c284 <_kill>
 801d89e:	1c43      	adds	r3, r0, #1
 801d8a0:	d102      	bne.n	801d8a8 <_kill_r+0x1c>
 801d8a2:	682b      	ldr	r3, [r5, #0]
 801d8a4:	b103      	cbz	r3, 801d8a8 <_kill_r+0x1c>
 801d8a6:	6023      	str	r3, [r4, #0]
 801d8a8:	bd38      	pop	{r3, r4, r5, pc}
 801d8aa:	bf00      	nop
 801d8ac:	20000b7c 	.word	0x20000b7c

0801d8b0 <_getpid_r>:
 801d8b0:	f7ee bce0 	b.w	800c274 <_getpid>

0801d8b4 <sqrt>:
 801d8b4:	b538      	push	{r3, r4, r5, lr}
 801d8b6:	ed2d 8b02 	vpush	{d8}
 801d8ba:	ec55 4b10 	vmov	r4, r5, d0
 801d8be:	f000 f825 	bl	801d90c <__ieee754_sqrt>
 801d8c2:	4622      	mov	r2, r4
 801d8c4:	462b      	mov	r3, r5
 801d8c6:	4620      	mov	r0, r4
 801d8c8:	4629      	mov	r1, r5
 801d8ca:	eeb0 8a40 	vmov.f32	s16, s0
 801d8ce:	eef0 8a60 	vmov.f32	s17, s1
 801d8d2:	f7ea f90b 	bl	8007aec <__aeabi_dcmpun>
 801d8d6:	b990      	cbnz	r0, 801d8fe <sqrt+0x4a>
 801d8d8:	2200      	movs	r2, #0
 801d8da:	2300      	movs	r3, #0
 801d8dc:	4620      	mov	r0, r4
 801d8de:	4629      	mov	r1, r5
 801d8e0:	f7ea f8dc 	bl	8007a9c <__aeabi_dcmplt>
 801d8e4:	b158      	cbz	r0, 801d8fe <sqrt+0x4a>
 801d8e6:	f7fc fcf5 	bl	801a2d4 <__errno>
 801d8ea:	2321      	movs	r3, #33	@ 0x21
 801d8ec:	6003      	str	r3, [r0, #0]
 801d8ee:	2200      	movs	r2, #0
 801d8f0:	2300      	movs	r3, #0
 801d8f2:	4610      	mov	r0, r2
 801d8f4:	4619      	mov	r1, r3
 801d8f6:	f7e9 ff89 	bl	800780c <__aeabi_ddiv>
 801d8fa:	ec41 0b18 	vmov	d8, r0, r1
 801d8fe:	eeb0 0a48 	vmov.f32	s0, s16
 801d902:	eef0 0a68 	vmov.f32	s1, s17
 801d906:	ecbd 8b02 	vpop	{d8}
 801d90a:	bd38      	pop	{r3, r4, r5, pc}

0801d90c <__ieee754_sqrt>:
 801d90c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d910:	4a68      	ldr	r2, [pc, #416]	@ (801dab4 <__ieee754_sqrt+0x1a8>)
 801d912:	ec55 4b10 	vmov	r4, r5, d0
 801d916:	43aa      	bics	r2, r5
 801d918:	462b      	mov	r3, r5
 801d91a:	4621      	mov	r1, r4
 801d91c:	d110      	bne.n	801d940 <__ieee754_sqrt+0x34>
 801d91e:	4622      	mov	r2, r4
 801d920:	4620      	mov	r0, r4
 801d922:	4629      	mov	r1, r5
 801d924:	f7e9 fe48 	bl	80075b8 <__aeabi_dmul>
 801d928:	4602      	mov	r2, r0
 801d92a:	460b      	mov	r3, r1
 801d92c:	4620      	mov	r0, r4
 801d92e:	4629      	mov	r1, r5
 801d930:	f7e9 fc8c 	bl	800724c <__adddf3>
 801d934:	4604      	mov	r4, r0
 801d936:	460d      	mov	r5, r1
 801d938:	ec45 4b10 	vmov	d0, r4, r5
 801d93c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d940:	2d00      	cmp	r5, #0
 801d942:	dc0e      	bgt.n	801d962 <__ieee754_sqrt+0x56>
 801d944:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801d948:	4322      	orrs	r2, r4
 801d94a:	d0f5      	beq.n	801d938 <__ieee754_sqrt+0x2c>
 801d94c:	b19d      	cbz	r5, 801d976 <__ieee754_sqrt+0x6a>
 801d94e:	4622      	mov	r2, r4
 801d950:	4620      	mov	r0, r4
 801d952:	4629      	mov	r1, r5
 801d954:	f7e9 fc78 	bl	8007248 <__aeabi_dsub>
 801d958:	4602      	mov	r2, r0
 801d95a:	460b      	mov	r3, r1
 801d95c:	f7e9 ff56 	bl	800780c <__aeabi_ddiv>
 801d960:	e7e8      	b.n	801d934 <__ieee754_sqrt+0x28>
 801d962:	152a      	asrs	r2, r5, #20
 801d964:	d115      	bne.n	801d992 <__ieee754_sqrt+0x86>
 801d966:	2000      	movs	r0, #0
 801d968:	e009      	b.n	801d97e <__ieee754_sqrt+0x72>
 801d96a:	0acb      	lsrs	r3, r1, #11
 801d96c:	3a15      	subs	r2, #21
 801d96e:	0549      	lsls	r1, r1, #21
 801d970:	2b00      	cmp	r3, #0
 801d972:	d0fa      	beq.n	801d96a <__ieee754_sqrt+0x5e>
 801d974:	e7f7      	b.n	801d966 <__ieee754_sqrt+0x5a>
 801d976:	462a      	mov	r2, r5
 801d978:	e7fa      	b.n	801d970 <__ieee754_sqrt+0x64>
 801d97a:	005b      	lsls	r3, r3, #1
 801d97c:	3001      	adds	r0, #1
 801d97e:	02dc      	lsls	r4, r3, #11
 801d980:	d5fb      	bpl.n	801d97a <__ieee754_sqrt+0x6e>
 801d982:	1e44      	subs	r4, r0, #1
 801d984:	1b12      	subs	r2, r2, r4
 801d986:	f1c0 0420 	rsb	r4, r0, #32
 801d98a:	fa21 f404 	lsr.w	r4, r1, r4
 801d98e:	4323      	orrs	r3, r4
 801d990:	4081      	lsls	r1, r0
 801d992:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d996:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801d99a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801d99e:	07d2      	lsls	r2, r2, #31
 801d9a0:	bf5c      	itt	pl
 801d9a2:	005b      	lslpl	r3, r3, #1
 801d9a4:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801d9a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801d9ac:	bf58      	it	pl
 801d9ae:	0049      	lslpl	r1, r1, #1
 801d9b0:	2600      	movs	r6, #0
 801d9b2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801d9b6:	106d      	asrs	r5, r5, #1
 801d9b8:	0049      	lsls	r1, r1, #1
 801d9ba:	2016      	movs	r0, #22
 801d9bc:	4632      	mov	r2, r6
 801d9be:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801d9c2:	1917      	adds	r7, r2, r4
 801d9c4:	429f      	cmp	r7, r3
 801d9c6:	bfde      	ittt	le
 801d9c8:	193a      	addle	r2, r7, r4
 801d9ca:	1bdb      	suble	r3, r3, r7
 801d9cc:	1936      	addle	r6, r6, r4
 801d9ce:	0fcf      	lsrs	r7, r1, #31
 801d9d0:	3801      	subs	r0, #1
 801d9d2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801d9d6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801d9da:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801d9de:	d1f0      	bne.n	801d9c2 <__ieee754_sqrt+0xb6>
 801d9e0:	4604      	mov	r4, r0
 801d9e2:	2720      	movs	r7, #32
 801d9e4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801d9e8:	429a      	cmp	r2, r3
 801d9ea:	eb00 0e0c 	add.w	lr, r0, ip
 801d9ee:	db02      	blt.n	801d9f6 <__ieee754_sqrt+0xea>
 801d9f0:	d113      	bne.n	801da1a <__ieee754_sqrt+0x10e>
 801d9f2:	458e      	cmp	lr, r1
 801d9f4:	d811      	bhi.n	801da1a <__ieee754_sqrt+0x10e>
 801d9f6:	f1be 0f00 	cmp.w	lr, #0
 801d9fa:	eb0e 000c 	add.w	r0, lr, ip
 801d9fe:	da42      	bge.n	801da86 <__ieee754_sqrt+0x17a>
 801da00:	2800      	cmp	r0, #0
 801da02:	db40      	blt.n	801da86 <__ieee754_sqrt+0x17a>
 801da04:	f102 0801 	add.w	r8, r2, #1
 801da08:	1a9b      	subs	r3, r3, r2
 801da0a:	458e      	cmp	lr, r1
 801da0c:	bf88      	it	hi
 801da0e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801da12:	eba1 010e 	sub.w	r1, r1, lr
 801da16:	4464      	add	r4, ip
 801da18:	4642      	mov	r2, r8
 801da1a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801da1e:	3f01      	subs	r7, #1
 801da20:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801da24:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801da28:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801da2c:	d1dc      	bne.n	801d9e8 <__ieee754_sqrt+0xdc>
 801da2e:	4319      	orrs	r1, r3
 801da30:	d01b      	beq.n	801da6a <__ieee754_sqrt+0x15e>
 801da32:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801dab8 <__ieee754_sqrt+0x1ac>
 801da36:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801dabc <__ieee754_sqrt+0x1b0>
 801da3a:	e9da 0100 	ldrd	r0, r1, [sl]
 801da3e:	e9db 2300 	ldrd	r2, r3, [fp]
 801da42:	f7e9 fc01 	bl	8007248 <__aeabi_dsub>
 801da46:	e9da 8900 	ldrd	r8, r9, [sl]
 801da4a:	4602      	mov	r2, r0
 801da4c:	460b      	mov	r3, r1
 801da4e:	4640      	mov	r0, r8
 801da50:	4649      	mov	r1, r9
 801da52:	f7ea f82d 	bl	8007ab0 <__aeabi_dcmple>
 801da56:	b140      	cbz	r0, 801da6a <__ieee754_sqrt+0x15e>
 801da58:	f1b4 3fff 	cmp.w	r4, #4294967295
 801da5c:	e9da 0100 	ldrd	r0, r1, [sl]
 801da60:	e9db 2300 	ldrd	r2, r3, [fp]
 801da64:	d111      	bne.n	801da8a <__ieee754_sqrt+0x17e>
 801da66:	3601      	adds	r6, #1
 801da68:	463c      	mov	r4, r7
 801da6a:	1072      	asrs	r2, r6, #1
 801da6c:	0863      	lsrs	r3, r4, #1
 801da6e:	07f1      	lsls	r1, r6, #31
 801da70:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801da74:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801da78:	bf48      	it	mi
 801da7a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801da7e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801da82:	4618      	mov	r0, r3
 801da84:	e756      	b.n	801d934 <__ieee754_sqrt+0x28>
 801da86:	4690      	mov	r8, r2
 801da88:	e7be      	b.n	801da08 <__ieee754_sqrt+0xfc>
 801da8a:	f7e9 fbdf 	bl	800724c <__adddf3>
 801da8e:	e9da 8900 	ldrd	r8, r9, [sl]
 801da92:	4602      	mov	r2, r0
 801da94:	460b      	mov	r3, r1
 801da96:	4640      	mov	r0, r8
 801da98:	4649      	mov	r1, r9
 801da9a:	f7e9 ffff 	bl	8007a9c <__aeabi_dcmplt>
 801da9e:	b120      	cbz	r0, 801daaa <__ieee754_sqrt+0x19e>
 801daa0:	1ca0      	adds	r0, r4, #2
 801daa2:	bf08      	it	eq
 801daa4:	3601      	addeq	r6, #1
 801daa6:	3402      	adds	r4, #2
 801daa8:	e7df      	b.n	801da6a <__ieee754_sqrt+0x15e>
 801daaa:	1c63      	adds	r3, r4, #1
 801daac:	f023 0401 	bic.w	r4, r3, #1
 801dab0:	e7db      	b.n	801da6a <__ieee754_sqrt+0x15e>
 801dab2:	bf00      	nop
 801dab4:	7ff00000 	.word	0x7ff00000
 801dab8:	20000260 	.word	0x20000260
 801dabc:	20000258 	.word	0x20000258

0801dac0 <_init>:
 801dac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dac2:	bf00      	nop
 801dac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dac6:	bc08      	pop	{r3}
 801dac8:	469e      	mov	lr, r3
 801daca:	4770      	bx	lr

0801dacc <_fini>:
 801dacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dace:	bf00      	nop
 801dad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dad2:	bc08      	pop	{r3}
 801dad4:	469e      	mov	lr, r3
 801dad6:	4770      	bx	lr
