
WINE_TEMP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08007000  08007000  00007000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .ota_region   00000004  08007140  08007140  00007140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00016540  08007150  08007150  00007150  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000bfc  0801d690  0801d690  0001d690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  0801e28c  0801e28c  0001e28c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  0801e294  0801e294  0001e294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0801e298  0801e298  0001e298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ota_region_end 00000004  0801e29c  0801e29c  0001e29c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000025c  20000008  0801e2a0  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_DRIVER_CONTEXT 00000035  20000264  0801e4fc  00020264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 SYSTEM_DRIVER_CONTEXT 00000011  2000029c  0801e531  0002029c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000798  200002b0  0801e542  000202b0  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  20000a48  0801e542  00020a48  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000202ad  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       000001bc  20030028  20030028  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000883  200301e4  200301e4  00030000  2**2
                  ALLOC
 17 .debug_info   00040314  00000000  00000000  000202dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 000085bb  00000000  00000000  000605f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003458  00000000  00000000  00068bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00003090  00000000  00000000  0006c008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00034be0  00000000  00000000  0006f098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   000429ef  00000000  00000000  000a3c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    00110c42  00000000  00000000  000e6667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000050  00000000  00000000  001f72a9  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000f0d4  00000000  00000000  001f72fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08007150 <__do_global_dtors_aux>:
 8007150:	b510      	push	{r4, lr}
 8007152:	4c05      	ldr	r4, [pc, #20]	; (8007168 <__do_global_dtors_aux+0x18>)
 8007154:	7823      	ldrb	r3, [r4, #0]
 8007156:	b933      	cbnz	r3, 8007166 <__do_global_dtors_aux+0x16>
 8007158:	4b04      	ldr	r3, [pc, #16]	; (800716c <__do_global_dtors_aux+0x1c>)
 800715a:	b113      	cbz	r3, 8007162 <__do_global_dtors_aux+0x12>
 800715c:	4804      	ldr	r0, [pc, #16]	; (8007170 <__do_global_dtors_aux+0x20>)
 800715e:	f3af 8000 	nop.w
 8007162:	2301      	movs	r3, #1
 8007164:	7023      	strb	r3, [r4, #0]
 8007166:	bd10      	pop	{r4, pc}
 8007168:	200002b0 	.word	0x200002b0
 800716c:	00000000 	.word	0x00000000
 8007170:	0801d678 	.word	0x0801d678

08007174 <frame_dummy>:
 8007174:	b508      	push	{r3, lr}
 8007176:	4b03      	ldr	r3, [pc, #12]	; (8007184 <frame_dummy+0x10>)
 8007178:	b11b      	cbz	r3, 8007182 <frame_dummy+0xe>
 800717a:	4903      	ldr	r1, [pc, #12]	; (8007188 <frame_dummy+0x14>)
 800717c:	4803      	ldr	r0, [pc, #12]	; (800718c <frame_dummy+0x18>)
 800717e:	f3af 8000 	nop.w
 8007182:	bd08      	pop	{r3, pc}
 8007184:	00000000 	.word	0x00000000
 8007188:	200002b4 	.word	0x200002b4
 800718c:	0801d678 	.word	0x0801d678

08007190 <strlen>:
 8007190:	4603      	mov	r3, r0
 8007192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007196:	2a00      	cmp	r2, #0
 8007198:	d1fb      	bne.n	8007192 <strlen+0x2>
 800719a:	1a18      	subs	r0, r3, r0
 800719c:	3801      	subs	r0, #1
 800719e:	4770      	bx	lr

080071a0 <memchr>:
 80071a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80071a4:	2a10      	cmp	r2, #16
 80071a6:	db2b      	blt.n	8007200 <memchr+0x60>
 80071a8:	f010 0f07 	tst.w	r0, #7
 80071ac:	d008      	beq.n	80071c0 <memchr+0x20>
 80071ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80071b2:	3a01      	subs	r2, #1
 80071b4:	428b      	cmp	r3, r1
 80071b6:	d02d      	beq.n	8007214 <memchr+0x74>
 80071b8:	f010 0f07 	tst.w	r0, #7
 80071bc:	b342      	cbz	r2, 8007210 <memchr+0x70>
 80071be:	d1f6      	bne.n	80071ae <memchr+0xe>
 80071c0:	b4f0      	push	{r4, r5, r6, r7}
 80071c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80071c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80071ca:	f022 0407 	bic.w	r4, r2, #7
 80071ce:	f07f 0700 	mvns.w	r7, #0
 80071d2:	2300      	movs	r3, #0
 80071d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80071d8:	3c08      	subs	r4, #8
 80071da:	ea85 0501 	eor.w	r5, r5, r1
 80071de:	ea86 0601 	eor.w	r6, r6, r1
 80071e2:	fa85 f547 	uadd8	r5, r5, r7
 80071e6:	faa3 f587 	sel	r5, r3, r7
 80071ea:	fa86 f647 	uadd8	r6, r6, r7
 80071ee:	faa5 f687 	sel	r6, r5, r7
 80071f2:	b98e      	cbnz	r6, 8007218 <memchr+0x78>
 80071f4:	d1ee      	bne.n	80071d4 <memchr+0x34>
 80071f6:	bcf0      	pop	{r4, r5, r6, r7}
 80071f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80071fc:	f002 0207 	and.w	r2, r2, #7
 8007200:	b132      	cbz	r2, 8007210 <memchr+0x70>
 8007202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007206:	3a01      	subs	r2, #1
 8007208:	ea83 0301 	eor.w	r3, r3, r1
 800720c:	b113      	cbz	r3, 8007214 <memchr+0x74>
 800720e:	d1f8      	bne.n	8007202 <memchr+0x62>
 8007210:	2000      	movs	r0, #0
 8007212:	4770      	bx	lr
 8007214:	3801      	subs	r0, #1
 8007216:	4770      	bx	lr
 8007218:	2d00      	cmp	r5, #0
 800721a:	bf06      	itte	eq
 800721c:	4635      	moveq	r5, r6
 800721e:	3803      	subeq	r0, #3
 8007220:	3807      	subne	r0, #7
 8007222:	f015 0f01 	tst.w	r5, #1
 8007226:	d107      	bne.n	8007238 <memchr+0x98>
 8007228:	3001      	adds	r0, #1
 800722a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800722e:	bf02      	ittt	eq
 8007230:	3001      	addeq	r0, #1
 8007232:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8007236:	3001      	addeq	r0, #1
 8007238:	bcf0      	pop	{r4, r5, r6, r7}
 800723a:	3801      	subs	r0, #1
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop

08007240 <__aeabi_drsub>:
 8007240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8007244:	e002      	b.n	800724c <__adddf3>
 8007246:	bf00      	nop

08007248 <__aeabi_dsub>:
 8007248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800724c <__adddf3>:
 800724c:	b530      	push	{r4, r5, lr}
 800724e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8007252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8007256:	ea94 0f05 	teq	r4, r5
 800725a:	bf08      	it	eq
 800725c:	ea90 0f02 	teqeq	r0, r2
 8007260:	bf1f      	itttt	ne
 8007262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8007266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800726a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800726e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007272:	f000 80e2 	beq.w	800743a <__adddf3+0x1ee>
 8007276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800727a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800727e:	bfb8      	it	lt
 8007280:	426d      	neglt	r5, r5
 8007282:	dd0c      	ble.n	800729e <__adddf3+0x52>
 8007284:	442c      	add	r4, r5
 8007286:	ea80 0202 	eor.w	r2, r0, r2
 800728a:	ea81 0303 	eor.w	r3, r1, r3
 800728e:	ea82 0000 	eor.w	r0, r2, r0
 8007292:	ea83 0101 	eor.w	r1, r3, r1
 8007296:	ea80 0202 	eor.w	r2, r0, r2
 800729a:	ea81 0303 	eor.w	r3, r1, r3
 800729e:	2d36      	cmp	r5, #54	; 0x36
 80072a0:	bf88      	it	hi
 80072a2:	bd30      	pophi	{r4, r5, pc}
 80072a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80072a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80072ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80072b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80072b4:	d002      	beq.n	80072bc <__adddf3+0x70>
 80072b6:	4240      	negs	r0, r0
 80072b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80072bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80072c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80072c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80072c8:	d002      	beq.n	80072d0 <__adddf3+0x84>
 80072ca:	4252      	negs	r2, r2
 80072cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80072d0:	ea94 0f05 	teq	r4, r5
 80072d4:	f000 80a7 	beq.w	8007426 <__adddf3+0x1da>
 80072d8:	f1a4 0401 	sub.w	r4, r4, #1
 80072dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80072e0:	db0d      	blt.n	80072fe <__adddf3+0xb2>
 80072e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80072e6:	fa22 f205 	lsr.w	r2, r2, r5
 80072ea:	1880      	adds	r0, r0, r2
 80072ec:	f141 0100 	adc.w	r1, r1, #0
 80072f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80072f4:	1880      	adds	r0, r0, r2
 80072f6:	fa43 f305 	asr.w	r3, r3, r5
 80072fa:	4159      	adcs	r1, r3
 80072fc:	e00e      	b.n	800731c <__adddf3+0xd0>
 80072fe:	f1a5 0520 	sub.w	r5, r5, #32
 8007302:	f10e 0e20 	add.w	lr, lr, #32
 8007306:	2a01      	cmp	r2, #1
 8007308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800730c:	bf28      	it	cs
 800730e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8007312:	fa43 f305 	asr.w	r3, r3, r5
 8007316:	18c0      	adds	r0, r0, r3
 8007318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800731c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007320:	d507      	bpl.n	8007332 <__adddf3+0xe6>
 8007322:	f04f 0e00 	mov.w	lr, #0
 8007326:	f1dc 0c00 	rsbs	ip, ip, #0
 800732a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800732e:	eb6e 0101 	sbc.w	r1, lr, r1
 8007332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007336:	d31b      	bcc.n	8007370 <__adddf3+0x124>
 8007338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800733c:	d30c      	bcc.n	8007358 <__adddf3+0x10c>
 800733e:	0849      	lsrs	r1, r1, #1
 8007340:	ea5f 0030 	movs.w	r0, r0, rrx
 8007344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8007348:	f104 0401 	add.w	r4, r4, #1
 800734c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8007350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8007354:	f080 809a 	bcs.w	800748c <__adddf3+0x240>
 8007358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800735c:	bf08      	it	eq
 800735e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8007362:	f150 0000 	adcs.w	r0, r0, #0
 8007366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800736a:	ea41 0105 	orr.w	r1, r1, r5
 800736e:	bd30      	pop	{r4, r5, pc}
 8007370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8007374:	4140      	adcs	r0, r0
 8007376:	eb41 0101 	adc.w	r1, r1, r1
 800737a:	3c01      	subs	r4, #1
 800737c:	bf28      	it	cs
 800737e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8007382:	d2e9      	bcs.n	8007358 <__adddf3+0x10c>
 8007384:	f091 0f00 	teq	r1, #0
 8007388:	bf04      	itt	eq
 800738a:	4601      	moveq	r1, r0
 800738c:	2000      	moveq	r0, #0
 800738e:	fab1 f381 	clz	r3, r1
 8007392:	bf08      	it	eq
 8007394:	3320      	addeq	r3, #32
 8007396:	f1a3 030b 	sub.w	r3, r3, #11
 800739a:	f1b3 0220 	subs.w	r2, r3, #32
 800739e:	da0c      	bge.n	80073ba <__adddf3+0x16e>
 80073a0:	320c      	adds	r2, #12
 80073a2:	dd08      	ble.n	80073b6 <__adddf3+0x16a>
 80073a4:	f102 0c14 	add.w	ip, r2, #20
 80073a8:	f1c2 020c 	rsb	r2, r2, #12
 80073ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80073b0:	fa21 f102 	lsr.w	r1, r1, r2
 80073b4:	e00c      	b.n	80073d0 <__adddf3+0x184>
 80073b6:	f102 0214 	add.w	r2, r2, #20
 80073ba:	bfd8      	it	le
 80073bc:	f1c2 0c20 	rsble	ip, r2, #32
 80073c0:	fa01 f102 	lsl.w	r1, r1, r2
 80073c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80073c8:	bfdc      	itt	le
 80073ca:	ea41 010c 	orrle.w	r1, r1, ip
 80073ce:	4090      	lslle	r0, r2
 80073d0:	1ae4      	subs	r4, r4, r3
 80073d2:	bfa2      	ittt	ge
 80073d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80073d8:	4329      	orrge	r1, r5
 80073da:	bd30      	popge	{r4, r5, pc}
 80073dc:	ea6f 0404 	mvn.w	r4, r4
 80073e0:	3c1f      	subs	r4, #31
 80073e2:	da1c      	bge.n	800741e <__adddf3+0x1d2>
 80073e4:	340c      	adds	r4, #12
 80073e6:	dc0e      	bgt.n	8007406 <__adddf3+0x1ba>
 80073e8:	f104 0414 	add.w	r4, r4, #20
 80073ec:	f1c4 0220 	rsb	r2, r4, #32
 80073f0:	fa20 f004 	lsr.w	r0, r0, r4
 80073f4:	fa01 f302 	lsl.w	r3, r1, r2
 80073f8:	ea40 0003 	orr.w	r0, r0, r3
 80073fc:	fa21 f304 	lsr.w	r3, r1, r4
 8007400:	ea45 0103 	orr.w	r1, r5, r3
 8007404:	bd30      	pop	{r4, r5, pc}
 8007406:	f1c4 040c 	rsb	r4, r4, #12
 800740a:	f1c4 0220 	rsb	r2, r4, #32
 800740e:	fa20 f002 	lsr.w	r0, r0, r2
 8007412:	fa01 f304 	lsl.w	r3, r1, r4
 8007416:	ea40 0003 	orr.w	r0, r0, r3
 800741a:	4629      	mov	r1, r5
 800741c:	bd30      	pop	{r4, r5, pc}
 800741e:	fa21 f004 	lsr.w	r0, r1, r4
 8007422:	4629      	mov	r1, r5
 8007424:	bd30      	pop	{r4, r5, pc}
 8007426:	f094 0f00 	teq	r4, #0
 800742a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800742e:	bf06      	itte	eq
 8007430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8007434:	3401      	addeq	r4, #1
 8007436:	3d01      	subne	r5, #1
 8007438:	e74e      	b.n	80072d8 <__adddf3+0x8c>
 800743a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800743e:	bf18      	it	ne
 8007440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007444:	d029      	beq.n	800749a <__adddf3+0x24e>
 8007446:	ea94 0f05 	teq	r4, r5
 800744a:	bf08      	it	eq
 800744c:	ea90 0f02 	teqeq	r0, r2
 8007450:	d005      	beq.n	800745e <__adddf3+0x212>
 8007452:	ea54 0c00 	orrs.w	ip, r4, r0
 8007456:	bf04      	itt	eq
 8007458:	4619      	moveq	r1, r3
 800745a:	4610      	moveq	r0, r2
 800745c:	bd30      	pop	{r4, r5, pc}
 800745e:	ea91 0f03 	teq	r1, r3
 8007462:	bf1e      	ittt	ne
 8007464:	2100      	movne	r1, #0
 8007466:	2000      	movne	r0, #0
 8007468:	bd30      	popne	{r4, r5, pc}
 800746a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800746e:	d105      	bne.n	800747c <__adddf3+0x230>
 8007470:	0040      	lsls	r0, r0, #1
 8007472:	4149      	adcs	r1, r1
 8007474:	bf28      	it	cs
 8007476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800747a:	bd30      	pop	{r4, r5, pc}
 800747c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8007480:	bf3c      	itt	cc
 8007482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8007486:	bd30      	popcc	{r4, r5, pc}
 8007488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800748c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8007490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007494:	f04f 0000 	mov.w	r0, #0
 8007498:	bd30      	pop	{r4, r5, pc}
 800749a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800749e:	bf1a      	itte	ne
 80074a0:	4619      	movne	r1, r3
 80074a2:	4610      	movne	r0, r2
 80074a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80074a8:	bf1c      	itt	ne
 80074aa:	460b      	movne	r3, r1
 80074ac:	4602      	movne	r2, r0
 80074ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80074b2:	bf06      	itte	eq
 80074b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80074b8:	ea91 0f03 	teqeq	r1, r3
 80074bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80074c0:	bd30      	pop	{r4, r5, pc}
 80074c2:	bf00      	nop

080074c4 <__aeabi_ui2d>:
 80074c4:	f090 0f00 	teq	r0, #0
 80074c8:	bf04      	itt	eq
 80074ca:	2100      	moveq	r1, #0
 80074cc:	4770      	bxeq	lr
 80074ce:	b530      	push	{r4, r5, lr}
 80074d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80074d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80074d8:	f04f 0500 	mov.w	r5, #0
 80074dc:	f04f 0100 	mov.w	r1, #0
 80074e0:	e750      	b.n	8007384 <__adddf3+0x138>
 80074e2:	bf00      	nop

080074e4 <__aeabi_i2d>:
 80074e4:	f090 0f00 	teq	r0, #0
 80074e8:	bf04      	itt	eq
 80074ea:	2100      	moveq	r1, #0
 80074ec:	4770      	bxeq	lr
 80074ee:	b530      	push	{r4, r5, lr}
 80074f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80074f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80074f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80074fc:	bf48      	it	mi
 80074fe:	4240      	negmi	r0, r0
 8007500:	f04f 0100 	mov.w	r1, #0
 8007504:	e73e      	b.n	8007384 <__adddf3+0x138>
 8007506:	bf00      	nop

08007508 <__aeabi_f2d>:
 8007508:	0042      	lsls	r2, r0, #1
 800750a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800750e:	ea4f 0131 	mov.w	r1, r1, rrx
 8007512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8007516:	bf1f      	itttt	ne
 8007518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800751c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8007520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8007524:	4770      	bxne	lr
 8007526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800752a:	bf08      	it	eq
 800752c:	4770      	bxeq	lr
 800752e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8007532:	bf04      	itt	eq
 8007534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8007538:	4770      	bxeq	lr
 800753a:	b530      	push	{r4, r5, lr}
 800753c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8007540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007548:	e71c      	b.n	8007384 <__adddf3+0x138>
 800754a:	bf00      	nop

0800754c <__aeabi_ul2d>:
 800754c:	ea50 0201 	orrs.w	r2, r0, r1
 8007550:	bf08      	it	eq
 8007552:	4770      	bxeq	lr
 8007554:	b530      	push	{r4, r5, lr}
 8007556:	f04f 0500 	mov.w	r5, #0
 800755a:	e00a      	b.n	8007572 <__aeabi_l2d+0x16>

0800755c <__aeabi_l2d>:
 800755c:	ea50 0201 	orrs.w	r2, r0, r1
 8007560:	bf08      	it	eq
 8007562:	4770      	bxeq	lr
 8007564:	b530      	push	{r4, r5, lr}
 8007566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800756a:	d502      	bpl.n	8007572 <__aeabi_l2d+0x16>
 800756c:	4240      	negs	r0, r0
 800756e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800757a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800757e:	f43f aed8 	beq.w	8007332 <__adddf3+0xe6>
 8007582:	f04f 0203 	mov.w	r2, #3
 8007586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800758a:	bf18      	it	ne
 800758c:	3203      	addne	r2, #3
 800758e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007592:	bf18      	it	ne
 8007594:	3203      	addne	r2, #3
 8007596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800759a:	f1c2 0320 	rsb	r3, r2, #32
 800759e:	fa00 fc03 	lsl.w	ip, r0, r3
 80075a2:	fa20 f002 	lsr.w	r0, r0, r2
 80075a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80075aa:	ea40 000e 	orr.w	r0, r0, lr
 80075ae:	fa21 f102 	lsr.w	r1, r1, r2
 80075b2:	4414      	add	r4, r2
 80075b4:	e6bd      	b.n	8007332 <__adddf3+0xe6>
 80075b6:	bf00      	nop

080075b8 <__aeabi_dmul>:
 80075b8:	b570      	push	{r4, r5, r6, lr}
 80075ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80075be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80075c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80075c6:	bf1d      	ittte	ne
 80075c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80075cc:	ea94 0f0c 	teqne	r4, ip
 80075d0:	ea95 0f0c 	teqne	r5, ip
 80075d4:	f000 f8de 	bleq	8007794 <__aeabi_dmul+0x1dc>
 80075d8:	442c      	add	r4, r5
 80075da:	ea81 0603 	eor.w	r6, r1, r3
 80075de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80075e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80075e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80075ea:	bf18      	it	ne
 80075ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80075f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80075f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075f8:	d038      	beq.n	800766c <__aeabi_dmul+0xb4>
 80075fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80075fe:	f04f 0500 	mov.w	r5, #0
 8007602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8007606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800760a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800760e:	f04f 0600 	mov.w	r6, #0
 8007612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8007616:	f09c 0f00 	teq	ip, #0
 800761a:	bf18      	it	ne
 800761c:	f04e 0e01 	orrne.w	lr, lr, #1
 8007620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8007624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8007628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800762c:	d204      	bcs.n	8007638 <__aeabi_dmul+0x80>
 800762e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8007632:	416d      	adcs	r5, r5
 8007634:	eb46 0606 	adc.w	r6, r6, r6
 8007638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800763c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8007640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8007644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8007648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800764c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8007650:	bf88      	it	hi
 8007652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8007656:	d81e      	bhi.n	8007696 <__aeabi_dmul+0xde>
 8007658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800765c:	bf08      	it	eq
 800765e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8007662:	f150 0000 	adcs.w	r0, r0, #0
 8007666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800766a:	bd70      	pop	{r4, r5, r6, pc}
 800766c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8007670:	ea46 0101 	orr.w	r1, r6, r1
 8007674:	ea40 0002 	orr.w	r0, r0, r2
 8007678:	ea81 0103 	eor.w	r1, r1, r3
 800767c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8007680:	bfc2      	ittt	gt
 8007682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8007686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800768a:	bd70      	popgt	{r4, r5, r6, pc}
 800768c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007690:	f04f 0e00 	mov.w	lr, #0
 8007694:	3c01      	subs	r4, #1
 8007696:	f300 80ab 	bgt.w	80077f0 <__aeabi_dmul+0x238>
 800769a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800769e:	bfde      	ittt	le
 80076a0:	2000      	movle	r0, #0
 80076a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80076a6:	bd70      	pople	{r4, r5, r6, pc}
 80076a8:	f1c4 0400 	rsb	r4, r4, #0
 80076ac:	3c20      	subs	r4, #32
 80076ae:	da35      	bge.n	800771c <__aeabi_dmul+0x164>
 80076b0:	340c      	adds	r4, #12
 80076b2:	dc1b      	bgt.n	80076ec <__aeabi_dmul+0x134>
 80076b4:	f104 0414 	add.w	r4, r4, #20
 80076b8:	f1c4 0520 	rsb	r5, r4, #32
 80076bc:	fa00 f305 	lsl.w	r3, r0, r5
 80076c0:	fa20 f004 	lsr.w	r0, r0, r4
 80076c4:	fa01 f205 	lsl.w	r2, r1, r5
 80076c8:	ea40 0002 	orr.w	r0, r0, r2
 80076cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80076d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80076d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80076d8:	fa21 f604 	lsr.w	r6, r1, r4
 80076dc:	eb42 0106 	adc.w	r1, r2, r6
 80076e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80076e4:	bf08      	it	eq
 80076e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80076ea:	bd70      	pop	{r4, r5, r6, pc}
 80076ec:	f1c4 040c 	rsb	r4, r4, #12
 80076f0:	f1c4 0520 	rsb	r5, r4, #32
 80076f4:	fa00 f304 	lsl.w	r3, r0, r4
 80076f8:	fa20 f005 	lsr.w	r0, r0, r5
 80076fc:	fa01 f204 	lsl.w	r2, r1, r4
 8007700:	ea40 0002 	orr.w	r0, r0, r2
 8007704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800770c:	f141 0100 	adc.w	r1, r1, #0
 8007710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007714:	bf08      	it	eq
 8007716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800771a:	bd70      	pop	{r4, r5, r6, pc}
 800771c:	f1c4 0520 	rsb	r5, r4, #32
 8007720:	fa00 f205 	lsl.w	r2, r0, r5
 8007724:	ea4e 0e02 	orr.w	lr, lr, r2
 8007728:	fa20 f304 	lsr.w	r3, r0, r4
 800772c:	fa01 f205 	lsl.w	r2, r1, r5
 8007730:	ea43 0302 	orr.w	r3, r3, r2
 8007734:	fa21 f004 	lsr.w	r0, r1, r4
 8007738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800773c:	fa21 f204 	lsr.w	r2, r1, r4
 8007740:	ea20 0002 	bic.w	r0, r0, r2
 8007744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8007748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800774c:	bf08      	it	eq
 800774e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8007752:	bd70      	pop	{r4, r5, r6, pc}
 8007754:	f094 0f00 	teq	r4, #0
 8007758:	d10f      	bne.n	800777a <__aeabi_dmul+0x1c2>
 800775a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800775e:	0040      	lsls	r0, r0, #1
 8007760:	eb41 0101 	adc.w	r1, r1, r1
 8007764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007768:	bf08      	it	eq
 800776a:	3c01      	subeq	r4, #1
 800776c:	d0f7      	beq.n	800775e <__aeabi_dmul+0x1a6>
 800776e:	ea41 0106 	orr.w	r1, r1, r6
 8007772:	f095 0f00 	teq	r5, #0
 8007776:	bf18      	it	ne
 8007778:	4770      	bxne	lr
 800777a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800777e:	0052      	lsls	r2, r2, #1
 8007780:	eb43 0303 	adc.w	r3, r3, r3
 8007784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8007788:	bf08      	it	eq
 800778a:	3d01      	subeq	r5, #1
 800778c:	d0f7      	beq.n	800777e <__aeabi_dmul+0x1c6>
 800778e:	ea43 0306 	orr.w	r3, r3, r6
 8007792:	4770      	bx	lr
 8007794:	ea94 0f0c 	teq	r4, ip
 8007798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800779c:	bf18      	it	ne
 800779e:	ea95 0f0c 	teqne	r5, ip
 80077a2:	d00c      	beq.n	80077be <__aeabi_dmul+0x206>
 80077a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80077a8:	bf18      	it	ne
 80077aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80077ae:	d1d1      	bne.n	8007754 <__aeabi_dmul+0x19c>
 80077b0:	ea81 0103 	eor.w	r1, r1, r3
 80077b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80077b8:	f04f 0000 	mov.w	r0, #0
 80077bc:	bd70      	pop	{r4, r5, r6, pc}
 80077be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80077c2:	bf06      	itte	eq
 80077c4:	4610      	moveq	r0, r2
 80077c6:	4619      	moveq	r1, r3
 80077c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80077cc:	d019      	beq.n	8007802 <__aeabi_dmul+0x24a>
 80077ce:	ea94 0f0c 	teq	r4, ip
 80077d2:	d102      	bne.n	80077da <__aeabi_dmul+0x222>
 80077d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80077d8:	d113      	bne.n	8007802 <__aeabi_dmul+0x24a>
 80077da:	ea95 0f0c 	teq	r5, ip
 80077de:	d105      	bne.n	80077ec <__aeabi_dmul+0x234>
 80077e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80077e4:	bf1c      	itt	ne
 80077e6:	4610      	movne	r0, r2
 80077e8:	4619      	movne	r1, r3
 80077ea:	d10a      	bne.n	8007802 <__aeabi_dmul+0x24a>
 80077ec:	ea81 0103 	eor.w	r1, r1, r3
 80077f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80077f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80077f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80077fc:	f04f 0000 	mov.w	r0, #0
 8007800:	bd70      	pop	{r4, r5, r6, pc}
 8007802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8007806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800780a:	bd70      	pop	{r4, r5, r6, pc}

0800780c <__aeabi_ddiv>:
 800780c:	b570      	push	{r4, r5, r6, lr}
 800780e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8007812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8007816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800781a:	bf1d      	ittte	ne
 800781c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8007820:	ea94 0f0c 	teqne	r4, ip
 8007824:	ea95 0f0c 	teqne	r5, ip
 8007828:	f000 f8a7 	bleq	800797a <__aeabi_ddiv+0x16e>
 800782c:	eba4 0405 	sub.w	r4, r4, r5
 8007830:	ea81 0e03 	eor.w	lr, r1, r3
 8007834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8007838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800783c:	f000 8088 	beq.w	8007950 <__aeabi_ddiv+0x144>
 8007840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8007844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8007848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800784c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8007850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8007854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8007858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800785c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8007860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8007864:	429d      	cmp	r5, r3
 8007866:	bf08      	it	eq
 8007868:	4296      	cmpeq	r6, r2
 800786a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800786e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8007872:	d202      	bcs.n	800787a <__aeabi_ddiv+0x6e>
 8007874:	085b      	lsrs	r3, r3, #1
 8007876:	ea4f 0232 	mov.w	r2, r2, rrx
 800787a:	1ab6      	subs	r6, r6, r2
 800787c:	eb65 0503 	sbc.w	r5, r5, r3
 8007880:	085b      	lsrs	r3, r3, #1
 8007882:	ea4f 0232 	mov.w	r2, r2, rrx
 8007886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800788a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800788e:	ebb6 0e02 	subs.w	lr, r6, r2
 8007892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007896:	bf22      	ittt	cs
 8007898:	1ab6      	subcs	r6, r6, r2
 800789a:	4675      	movcs	r5, lr
 800789c:	ea40 000c 	orrcs.w	r0, r0, ip
 80078a0:	085b      	lsrs	r3, r3, #1
 80078a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80078a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80078aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80078ae:	bf22      	ittt	cs
 80078b0:	1ab6      	subcs	r6, r6, r2
 80078b2:	4675      	movcs	r5, lr
 80078b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80078b8:	085b      	lsrs	r3, r3, #1
 80078ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80078be:	ebb6 0e02 	subs.w	lr, r6, r2
 80078c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80078c6:	bf22      	ittt	cs
 80078c8:	1ab6      	subcs	r6, r6, r2
 80078ca:	4675      	movcs	r5, lr
 80078cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80078d0:	085b      	lsrs	r3, r3, #1
 80078d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80078d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80078da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80078de:	bf22      	ittt	cs
 80078e0:	1ab6      	subcs	r6, r6, r2
 80078e2:	4675      	movcs	r5, lr
 80078e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80078e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80078ec:	d018      	beq.n	8007920 <__aeabi_ddiv+0x114>
 80078ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80078f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80078f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80078fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80078fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8007902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8007906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800790a:	d1c0      	bne.n	800788e <__aeabi_ddiv+0x82>
 800790c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007910:	d10b      	bne.n	800792a <__aeabi_ddiv+0x11e>
 8007912:	ea41 0100 	orr.w	r1, r1, r0
 8007916:	f04f 0000 	mov.w	r0, #0
 800791a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800791e:	e7b6      	b.n	800788e <__aeabi_ddiv+0x82>
 8007920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007924:	bf04      	itt	eq
 8007926:	4301      	orreq	r1, r0
 8007928:	2000      	moveq	r0, #0
 800792a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800792e:	bf88      	it	hi
 8007930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8007934:	f63f aeaf 	bhi.w	8007696 <__aeabi_dmul+0xde>
 8007938:	ebb5 0c03 	subs.w	ip, r5, r3
 800793c:	bf04      	itt	eq
 800793e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8007942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8007946:	f150 0000 	adcs.w	r0, r0, #0
 800794a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800794e:	bd70      	pop	{r4, r5, r6, pc}
 8007950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8007954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8007958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800795c:	bfc2      	ittt	gt
 800795e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8007962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8007966:	bd70      	popgt	{r4, r5, r6, pc}
 8007968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800796c:	f04f 0e00 	mov.w	lr, #0
 8007970:	3c01      	subs	r4, #1
 8007972:	e690      	b.n	8007696 <__aeabi_dmul+0xde>
 8007974:	ea45 0e06 	orr.w	lr, r5, r6
 8007978:	e68d      	b.n	8007696 <__aeabi_dmul+0xde>
 800797a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800797e:	ea94 0f0c 	teq	r4, ip
 8007982:	bf08      	it	eq
 8007984:	ea95 0f0c 	teqeq	r5, ip
 8007988:	f43f af3b 	beq.w	8007802 <__aeabi_dmul+0x24a>
 800798c:	ea94 0f0c 	teq	r4, ip
 8007990:	d10a      	bne.n	80079a8 <__aeabi_ddiv+0x19c>
 8007992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007996:	f47f af34 	bne.w	8007802 <__aeabi_dmul+0x24a>
 800799a:	ea95 0f0c 	teq	r5, ip
 800799e:	f47f af25 	bne.w	80077ec <__aeabi_dmul+0x234>
 80079a2:	4610      	mov	r0, r2
 80079a4:	4619      	mov	r1, r3
 80079a6:	e72c      	b.n	8007802 <__aeabi_dmul+0x24a>
 80079a8:	ea95 0f0c 	teq	r5, ip
 80079ac:	d106      	bne.n	80079bc <__aeabi_ddiv+0x1b0>
 80079ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80079b2:	f43f aefd 	beq.w	80077b0 <__aeabi_dmul+0x1f8>
 80079b6:	4610      	mov	r0, r2
 80079b8:	4619      	mov	r1, r3
 80079ba:	e722      	b.n	8007802 <__aeabi_dmul+0x24a>
 80079bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80079c0:	bf18      	it	ne
 80079c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80079c6:	f47f aec5 	bne.w	8007754 <__aeabi_dmul+0x19c>
 80079ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80079ce:	f47f af0d 	bne.w	80077ec <__aeabi_dmul+0x234>
 80079d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80079d6:	f47f aeeb 	bne.w	80077b0 <__aeabi_dmul+0x1f8>
 80079da:	e712      	b.n	8007802 <__aeabi_dmul+0x24a>

080079dc <__gedf2>:
 80079dc:	f04f 3cff 	mov.w	ip, #4294967295
 80079e0:	e006      	b.n	80079f0 <__cmpdf2+0x4>
 80079e2:	bf00      	nop

080079e4 <__ledf2>:
 80079e4:	f04f 0c01 	mov.w	ip, #1
 80079e8:	e002      	b.n	80079f0 <__cmpdf2+0x4>
 80079ea:	bf00      	nop

080079ec <__cmpdf2>:
 80079ec:	f04f 0c01 	mov.w	ip, #1
 80079f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80079f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80079f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80079fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007a00:	bf18      	it	ne
 8007a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8007a06:	d01b      	beq.n	8007a40 <__cmpdf2+0x54>
 8007a08:	b001      	add	sp, #4
 8007a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8007a0e:	bf0c      	ite	eq
 8007a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8007a14:	ea91 0f03 	teqne	r1, r3
 8007a18:	bf02      	ittt	eq
 8007a1a:	ea90 0f02 	teqeq	r0, r2
 8007a1e:	2000      	moveq	r0, #0
 8007a20:	4770      	bxeq	lr
 8007a22:	f110 0f00 	cmn.w	r0, #0
 8007a26:	ea91 0f03 	teq	r1, r3
 8007a2a:	bf58      	it	pl
 8007a2c:	4299      	cmppl	r1, r3
 8007a2e:	bf08      	it	eq
 8007a30:	4290      	cmpeq	r0, r2
 8007a32:	bf2c      	ite	cs
 8007a34:	17d8      	asrcs	r0, r3, #31
 8007a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8007a3a:	f040 0001 	orr.w	r0, r0, #1
 8007a3e:	4770      	bx	lr
 8007a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8007a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007a48:	d102      	bne.n	8007a50 <__cmpdf2+0x64>
 8007a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8007a4e:	d107      	bne.n	8007a60 <__cmpdf2+0x74>
 8007a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007a58:	d1d6      	bne.n	8007a08 <__cmpdf2+0x1c>
 8007a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8007a5e:	d0d3      	beq.n	8007a08 <__cmpdf2+0x1c>
 8007a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop

08007a68 <__aeabi_cdrcmple>:
 8007a68:	4684      	mov	ip, r0
 8007a6a:	4610      	mov	r0, r2
 8007a6c:	4662      	mov	r2, ip
 8007a6e:	468c      	mov	ip, r1
 8007a70:	4619      	mov	r1, r3
 8007a72:	4663      	mov	r3, ip
 8007a74:	e000      	b.n	8007a78 <__aeabi_cdcmpeq>
 8007a76:	bf00      	nop

08007a78 <__aeabi_cdcmpeq>:
 8007a78:	b501      	push	{r0, lr}
 8007a7a:	f7ff ffb7 	bl	80079ec <__cmpdf2>
 8007a7e:	2800      	cmp	r0, #0
 8007a80:	bf48      	it	mi
 8007a82:	f110 0f00 	cmnmi.w	r0, #0
 8007a86:	bd01      	pop	{r0, pc}

08007a88 <__aeabi_dcmpeq>:
 8007a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007a8c:	f7ff fff4 	bl	8007a78 <__aeabi_cdcmpeq>
 8007a90:	bf0c      	ite	eq
 8007a92:	2001      	moveq	r0, #1
 8007a94:	2000      	movne	r0, #0
 8007a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8007a9a:	bf00      	nop

08007a9c <__aeabi_dcmplt>:
 8007a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007aa0:	f7ff ffea 	bl	8007a78 <__aeabi_cdcmpeq>
 8007aa4:	bf34      	ite	cc
 8007aa6:	2001      	movcc	r0, #1
 8007aa8:	2000      	movcs	r0, #0
 8007aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8007aae:	bf00      	nop

08007ab0 <__aeabi_dcmple>:
 8007ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007ab4:	f7ff ffe0 	bl	8007a78 <__aeabi_cdcmpeq>
 8007ab8:	bf94      	ite	ls
 8007aba:	2001      	movls	r0, #1
 8007abc:	2000      	movhi	r0, #0
 8007abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8007ac2:	bf00      	nop

08007ac4 <__aeabi_dcmpge>:
 8007ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007ac8:	f7ff ffce 	bl	8007a68 <__aeabi_cdrcmple>
 8007acc:	bf94      	ite	ls
 8007ace:	2001      	movls	r0, #1
 8007ad0:	2000      	movhi	r0, #0
 8007ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8007ad6:	bf00      	nop

08007ad8 <__aeabi_dcmpgt>:
 8007ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007adc:	f7ff ffc4 	bl	8007a68 <__aeabi_cdrcmple>
 8007ae0:	bf34      	ite	cc
 8007ae2:	2001      	movcc	r0, #1
 8007ae4:	2000      	movcs	r0, #0
 8007ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8007aea:	bf00      	nop

08007aec <__aeabi_dcmpun>:
 8007aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8007af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007af4:	d102      	bne.n	8007afc <__aeabi_dcmpun+0x10>
 8007af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8007afa:	d10a      	bne.n	8007b12 <__aeabi_dcmpun+0x26>
 8007afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007b04:	d102      	bne.n	8007b0c <__aeabi_dcmpun+0x20>
 8007b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8007b0a:	d102      	bne.n	8007b12 <__aeabi_dcmpun+0x26>
 8007b0c:	f04f 0000 	mov.w	r0, #0
 8007b10:	4770      	bx	lr
 8007b12:	f04f 0001 	mov.w	r0, #1
 8007b16:	4770      	bx	lr

08007b18 <__aeabi_d2iz>:
 8007b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8007b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8007b20:	d215      	bcs.n	8007b4e <__aeabi_d2iz+0x36>
 8007b22:	d511      	bpl.n	8007b48 <__aeabi_d2iz+0x30>
 8007b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8007b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8007b2c:	d912      	bls.n	8007b54 <__aeabi_d2iz+0x3c>
 8007b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8007b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8007b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8007b42:	bf18      	it	ne
 8007b44:	4240      	negne	r0, r0
 8007b46:	4770      	bx	lr
 8007b48:	f04f 0000 	mov.w	r0, #0
 8007b4c:	4770      	bx	lr
 8007b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8007b52:	d105      	bne.n	8007b60 <__aeabi_d2iz+0x48>
 8007b54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8007b58:	bf08      	it	eq
 8007b5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8007b5e:	4770      	bx	lr
 8007b60:	f04f 0000 	mov.w	r0, #0
 8007b64:	4770      	bx	lr
 8007b66:	bf00      	nop

08007b68 <__aeabi_d2uiz>:
 8007b68:	004a      	lsls	r2, r1, #1
 8007b6a:	d211      	bcs.n	8007b90 <__aeabi_d2uiz+0x28>
 8007b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8007b70:	d211      	bcs.n	8007b96 <__aeabi_d2uiz+0x2e>
 8007b72:	d50d      	bpl.n	8007b90 <__aeabi_d2uiz+0x28>
 8007b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8007b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8007b7c:	d40e      	bmi.n	8007b9c <__aeabi_d2uiz+0x34>
 8007b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8007b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8007b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8007b8e:	4770      	bx	lr
 8007b90:	f04f 0000 	mov.w	r0, #0
 8007b94:	4770      	bx	lr
 8007b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8007b9a:	d102      	bne.n	8007ba2 <__aeabi_d2uiz+0x3a>
 8007b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba0:	4770      	bx	lr
 8007ba2:	f04f 0000 	mov.w	r0, #0
 8007ba6:	4770      	bx	lr

08007ba8 <__aeabi_d2f>:
 8007ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8007bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8007bb0:	bf24      	itt	cs
 8007bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8007bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8007bba:	d90d      	bls.n	8007bd8 <__aeabi_d2f+0x30>
 8007bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8007bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8007bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8007bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8007bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8007bd0:	bf08      	it	eq
 8007bd2:	f020 0001 	biceq.w	r0, r0, #1
 8007bd6:	4770      	bx	lr
 8007bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8007bdc:	d121      	bne.n	8007c22 <__aeabi_d2f+0x7a>
 8007bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8007be2:	bfbc      	itt	lt
 8007be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8007be8:	4770      	bxlt	lr
 8007bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8007bf2:	f1c2 0218 	rsb	r2, r2, #24
 8007bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8007bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8007bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8007c02:	bf18      	it	ne
 8007c04:	f040 0001 	orrne.w	r0, r0, #1
 8007c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8007c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8007c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8007c14:	ea40 000c 	orr.w	r0, r0, ip
 8007c18:	fa23 f302 	lsr.w	r3, r3, r2
 8007c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007c20:	e7cc      	b.n	8007bbc <__aeabi_d2f+0x14>
 8007c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8007c26:	d107      	bne.n	8007c38 <__aeabi_d2f+0x90>
 8007c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8007c2c:	bf1e      	ittt	ne
 8007c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8007c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8007c36:	4770      	bxne	lr
 8007c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8007c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8007c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop

08007c48 <__aeabi_uldivmod>:
 8007c48:	b953      	cbnz	r3, 8007c60 <__aeabi_uldivmod+0x18>
 8007c4a:	b94a      	cbnz	r2, 8007c60 <__aeabi_uldivmod+0x18>
 8007c4c:	2900      	cmp	r1, #0
 8007c4e:	bf08      	it	eq
 8007c50:	2800      	cmpeq	r0, #0
 8007c52:	bf1c      	itt	ne
 8007c54:	f04f 31ff 	movne.w	r1, #4294967295
 8007c58:	f04f 30ff 	movne.w	r0, #4294967295
 8007c5c:	f000 b9aa 	b.w	8007fb4 <__aeabi_idiv0>
 8007c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8007c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8007c68:	f000 f83c 	bl	8007ce4 <__udivmoddi4>
 8007c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c74:	b004      	add	sp, #16
 8007c76:	4770      	bx	lr

08007c78 <__aeabi_d2lz>:
 8007c78:	b538      	push	{r3, r4, r5, lr}
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	4604      	mov	r4, r0
 8007c80:	460d      	mov	r5, r1
 8007c82:	f7ff ff0b 	bl	8007a9c <__aeabi_dcmplt>
 8007c86:	b928      	cbnz	r0, 8007c94 <__aeabi_d2lz+0x1c>
 8007c88:	4620      	mov	r0, r4
 8007c8a:	4629      	mov	r1, r5
 8007c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c90:	f000 b80a 	b.w	8007ca8 <__aeabi_d2ulz>
 8007c94:	4620      	mov	r0, r4
 8007c96:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8007c9a:	f000 f805 	bl	8007ca8 <__aeabi_d2ulz>
 8007c9e:	4240      	negs	r0, r0
 8007ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007ca4:	bd38      	pop	{r3, r4, r5, pc}
 8007ca6:	bf00      	nop

08007ca8 <__aeabi_d2ulz>:
 8007ca8:	b5d0      	push	{r4, r6, r7, lr}
 8007caa:	4b0c      	ldr	r3, [pc, #48]	; (8007cdc <__aeabi_d2ulz+0x34>)
 8007cac:	2200      	movs	r2, #0
 8007cae:	4606      	mov	r6, r0
 8007cb0:	460f      	mov	r7, r1
 8007cb2:	f7ff fc81 	bl	80075b8 <__aeabi_dmul>
 8007cb6:	f7ff ff57 	bl	8007b68 <__aeabi_d2uiz>
 8007cba:	4604      	mov	r4, r0
 8007cbc:	f7ff fc02 	bl	80074c4 <__aeabi_ui2d>
 8007cc0:	4b07      	ldr	r3, [pc, #28]	; (8007ce0 <__aeabi_d2ulz+0x38>)
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f7ff fc78 	bl	80075b8 <__aeabi_dmul>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	460b      	mov	r3, r1
 8007ccc:	4630      	mov	r0, r6
 8007cce:	4639      	mov	r1, r7
 8007cd0:	f7ff faba 	bl	8007248 <__aeabi_dsub>
 8007cd4:	f7ff ff48 	bl	8007b68 <__aeabi_d2uiz>
 8007cd8:	4621      	mov	r1, r4
 8007cda:	bdd0      	pop	{r4, r6, r7, pc}
 8007cdc:	3df00000 	.word	0x3df00000
 8007ce0:	41f00000 	.word	0x41f00000

08007ce4 <__udivmoddi4>:
 8007ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ce8:	9d08      	ldr	r5, [sp, #32]
 8007cea:	4604      	mov	r4, r0
 8007cec:	468e      	mov	lr, r1
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d14d      	bne.n	8007d8e <__udivmoddi4+0xaa>
 8007cf2:	428a      	cmp	r2, r1
 8007cf4:	4694      	mov	ip, r2
 8007cf6:	d969      	bls.n	8007dcc <__udivmoddi4+0xe8>
 8007cf8:	fab2 f282 	clz	r2, r2
 8007cfc:	b152      	cbz	r2, 8007d14 <__udivmoddi4+0x30>
 8007cfe:	fa01 f302 	lsl.w	r3, r1, r2
 8007d02:	f1c2 0120 	rsb	r1, r2, #32
 8007d06:	fa20 f101 	lsr.w	r1, r0, r1
 8007d0a:	fa0c fc02 	lsl.w	ip, ip, r2
 8007d0e:	ea41 0e03 	orr.w	lr, r1, r3
 8007d12:	4094      	lsls	r4, r2
 8007d14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8007d18:	0c21      	lsrs	r1, r4, #16
 8007d1a:	fbbe f6f8 	udiv	r6, lr, r8
 8007d1e:	fa1f f78c 	uxth.w	r7, ip
 8007d22:	fb08 e316 	mls	r3, r8, r6, lr
 8007d26:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007d2a:	fb06 f107 	mul.w	r1, r6, r7
 8007d2e:	4299      	cmp	r1, r3
 8007d30:	d90a      	bls.n	8007d48 <__udivmoddi4+0x64>
 8007d32:	eb1c 0303 	adds.w	r3, ip, r3
 8007d36:	f106 30ff 	add.w	r0, r6, #4294967295
 8007d3a:	f080 811f 	bcs.w	8007f7c <__udivmoddi4+0x298>
 8007d3e:	4299      	cmp	r1, r3
 8007d40:	f240 811c 	bls.w	8007f7c <__udivmoddi4+0x298>
 8007d44:	3e02      	subs	r6, #2
 8007d46:	4463      	add	r3, ip
 8007d48:	1a5b      	subs	r3, r3, r1
 8007d4a:	b2a4      	uxth	r4, r4
 8007d4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8007d50:	fb08 3310 	mls	r3, r8, r0, r3
 8007d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8007d58:	fb00 f707 	mul.w	r7, r0, r7
 8007d5c:	42a7      	cmp	r7, r4
 8007d5e:	d90a      	bls.n	8007d76 <__udivmoddi4+0x92>
 8007d60:	eb1c 0404 	adds.w	r4, ip, r4
 8007d64:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d68:	f080 810a 	bcs.w	8007f80 <__udivmoddi4+0x29c>
 8007d6c:	42a7      	cmp	r7, r4
 8007d6e:	f240 8107 	bls.w	8007f80 <__udivmoddi4+0x29c>
 8007d72:	4464      	add	r4, ip
 8007d74:	3802      	subs	r0, #2
 8007d76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8007d7a:	1be4      	subs	r4, r4, r7
 8007d7c:	2600      	movs	r6, #0
 8007d7e:	b11d      	cbz	r5, 8007d88 <__udivmoddi4+0xa4>
 8007d80:	40d4      	lsrs	r4, r2
 8007d82:	2300      	movs	r3, #0
 8007d84:	e9c5 4300 	strd	r4, r3, [r5]
 8007d88:	4631      	mov	r1, r6
 8007d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d8e:	428b      	cmp	r3, r1
 8007d90:	d909      	bls.n	8007da6 <__udivmoddi4+0xc2>
 8007d92:	2d00      	cmp	r5, #0
 8007d94:	f000 80ef 	beq.w	8007f76 <__udivmoddi4+0x292>
 8007d98:	2600      	movs	r6, #0
 8007d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8007d9e:	4630      	mov	r0, r6
 8007da0:	4631      	mov	r1, r6
 8007da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007da6:	fab3 f683 	clz	r6, r3
 8007daa:	2e00      	cmp	r6, #0
 8007dac:	d14a      	bne.n	8007e44 <__udivmoddi4+0x160>
 8007dae:	428b      	cmp	r3, r1
 8007db0:	d302      	bcc.n	8007db8 <__udivmoddi4+0xd4>
 8007db2:	4282      	cmp	r2, r0
 8007db4:	f200 80f9 	bhi.w	8007faa <__udivmoddi4+0x2c6>
 8007db8:	1a84      	subs	r4, r0, r2
 8007dba:	eb61 0303 	sbc.w	r3, r1, r3
 8007dbe:	2001      	movs	r0, #1
 8007dc0:	469e      	mov	lr, r3
 8007dc2:	2d00      	cmp	r5, #0
 8007dc4:	d0e0      	beq.n	8007d88 <__udivmoddi4+0xa4>
 8007dc6:	e9c5 4e00 	strd	r4, lr, [r5]
 8007dca:	e7dd      	b.n	8007d88 <__udivmoddi4+0xa4>
 8007dcc:	b902      	cbnz	r2, 8007dd0 <__udivmoddi4+0xec>
 8007dce:	deff      	udf	#255	; 0xff
 8007dd0:	fab2 f282 	clz	r2, r2
 8007dd4:	2a00      	cmp	r2, #0
 8007dd6:	f040 8092 	bne.w	8007efe <__udivmoddi4+0x21a>
 8007dda:	eba1 010c 	sub.w	r1, r1, ip
 8007dde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8007de2:	fa1f fe8c 	uxth.w	lr, ip
 8007de6:	2601      	movs	r6, #1
 8007de8:	0c20      	lsrs	r0, r4, #16
 8007dea:	fbb1 f3f7 	udiv	r3, r1, r7
 8007dee:	fb07 1113 	mls	r1, r7, r3, r1
 8007df2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8007df6:	fb0e f003 	mul.w	r0, lr, r3
 8007dfa:	4288      	cmp	r0, r1
 8007dfc:	d908      	bls.n	8007e10 <__udivmoddi4+0x12c>
 8007dfe:	eb1c 0101 	adds.w	r1, ip, r1
 8007e02:	f103 38ff 	add.w	r8, r3, #4294967295
 8007e06:	d202      	bcs.n	8007e0e <__udivmoddi4+0x12a>
 8007e08:	4288      	cmp	r0, r1
 8007e0a:	f200 80cb 	bhi.w	8007fa4 <__udivmoddi4+0x2c0>
 8007e0e:	4643      	mov	r3, r8
 8007e10:	1a09      	subs	r1, r1, r0
 8007e12:	b2a4      	uxth	r4, r4
 8007e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8007e18:	fb07 1110 	mls	r1, r7, r0, r1
 8007e1c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8007e20:	fb0e fe00 	mul.w	lr, lr, r0
 8007e24:	45a6      	cmp	lr, r4
 8007e26:	d908      	bls.n	8007e3a <__udivmoddi4+0x156>
 8007e28:	eb1c 0404 	adds.w	r4, ip, r4
 8007e2c:	f100 31ff 	add.w	r1, r0, #4294967295
 8007e30:	d202      	bcs.n	8007e38 <__udivmoddi4+0x154>
 8007e32:	45a6      	cmp	lr, r4
 8007e34:	f200 80bb 	bhi.w	8007fae <__udivmoddi4+0x2ca>
 8007e38:	4608      	mov	r0, r1
 8007e3a:	eba4 040e 	sub.w	r4, r4, lr
 8007e3e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8007e42:	e79c      	b.n	8007d7e <__udivmoddi4+0x9a>
 8007e44:	f1c6 0720 	rsb	r7, r6, #32
 8007e48:	40b3      	lsls	r3, r6
 8007e4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8007e4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8007e52:	fa20 f407 	lsr.w	r4, r0, r7
 8007e56:	fa01 f306 	lsl.w	r3, r1, r6
 8007e5a:	431c      	orrs	r4, r3
 8007e5c:	40f9      	lsrs	r1, r7
 8007e5e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8007e62:	fa00 f306 	lsl.w	r3, r0, r6
 8007e66:	fbb1 f8f9 	udiv	r8, r1, r9
 8007e6a:	0c20      	lsrs	r0, r4, #16
 8007e6c:	fa1f fe8c 	uxth.w	lr, ip
 8007e70:	fb09 1118 	mls	r1, r9, r8, r1
 8007e74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8007e78:	fb08 f00e 	mul.w	r0, r8, lr
 8007e7c:	4288      	cmp	r0, r1
 8007e7e:	fa02 f206 	lsl.w	r2, r2, r6
 8007e82:	d90b      	bls.n	8007e9c <__udivmoddi4+0x1b8>
 8007e84:	eb1c 0101 	adds.w	r1, ip, r1
 8007e88:	f108 3aff 	add.w	sl, r8, #4294967295
 8007e8c:	f080 8088 	bcs.w	8007fa0 <__udivmoddi4+0x2bc>
 8007e90:	4288      	cmp	r0, r1
 8007e92:	f240 8085 	bls.w	8007fa0 <__udivmoddi4+0x2bc>
 8007e96:	f1a8 0802 	sub.w	r8, r8, #2
 8007e9a:	4461      	add	r1, ip
 8007e9c:	1a09      	subs	r1, r1, r0
 8007e9e:	b2a4      	uxth	r4, r4
 8007ea0:	fbb1 f0f9 	udiv	r0, r1, r9
 8007ea4:	fb09 1110 	mls	r1, r9, r0, r1
 8007ea8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8007eac:	fb00 fe0e 	mul.w	lr, r0, lr
 8007eb0:	458e      	cmp	lr, r1
 8007eb2:	d908      	bls.n	8007ec6 <__udivmoddi4+0x1e2>
 8007eb4:	eb1c 0101 	adds.w	r1, ip, r1
 8007eb8:	f100 34ff 	add.w	r4, r0, #4294967295
 8007ebc:	d26c      	bcs.n	8007f98 <__udivmoddi4+0x2b4>
 8007ebe:	458e      	cmp	lr, r1
 8007ec0:	d96a      	bls.n	8007f98 <__udivmoddi4+0x2b4>
 8007ec2:	3802      	subs	r0, #2
 8007ec4:	4461      	add	r1, ip
 8007ec6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8007eca:	fba0 9402 	umull	r9, r4, r0, r2
 8007ece:	eba1 010e 	sub.w	r1, r1, lr
 8007ed2:	42a1      	cmp	r1, r4
 8007ed4:	46c8      	mov	r8, r9
 8007ed6:	46a6      	mov	lr, r4
 8007ed8:	d356      	bcc.n	8007f88 <__udivmoddi4+0x2a4>
 8007eda:	d053      	beq.n	8007f84 <__udivmoddi4+0x2a0>
 8007edc:	b15d      	cbz	r5, 8007ef6 <__udivmoddi4+0x212>
 8007ede:	ebb3 0208 	subs.w	r2, r3, r8
 8007ee2:	eb61 010e 	sbc.w	r1, r1, lr
 8007ee6:	fa01 f707 	lsl.w	r7, r1, r7
 8007eea:	fa22 f306 	lsr.w	r3, r2, r6
 8007eee:	40f1      	lsrs	r1, r6
 8007ef0:	431f      	orrs	r7, r3
 8007ef2:	e9c5 7100 	strd	r7, r1, [r5]
 8007ef6:	2600      	movs	r6, #0
 8007ef8:	4631      	mov	r1, r6
 8007efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007efe:	f1c2 0320 	rsb	r3, r2, #32
 8007f02:	40d8      	lsrs	r0, r3
 8007f04:	fa0c fc02 	lsl.w	ip, ip, r2
 8007f08:	fa21 f303 	lsr.w	r3, r1, r3
 8007f0c:	4091      	lsls	r1, r2
 8007f0e:	4301      	orrs	r1, r0
 8007f10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8007f14:	fa1f fe8c 	uxth.w	lr, ip
 8007f18:	fbb3 f0f7 	udiv	r0, r3, r7
 8007f1c:	fb07 3610 	mls	r6, r7, r0, r3
 8007f20:	0c0b      	lsrs	r3, r1, #16
 8007f22:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8007f26:	fb00 f60e 	mul.w	r6, r0, lr
 8007f2a:	429e      	cmp	r6, r3
 8007f2c:	fa04 f402 	lsl.w	r4, r4, r2
 8007f30:	d908      	bls.n	8007f44 <__udivmoddi4+0x260>
 8007f32:	eb1c 0303 	adds.w	r3, ip, r3
 8007f36:	f100 38ff 	add.w	r8, r0, #4294967295
 8007f3a:	d22f      	bcs.n	8007f9c <__udivmoddi4+0x2b8>
 8007f3c:	429e      	cmp	r6, r3
 8007f3e:	d92d      	bls.n	8007f9c <__udivmoddi4+0x2b8>
 8007f40:	3802      	subs	r0, #2
 8007f42:	4463      	add	r3, ip
 8007f44:	1b9b      	subs	r3, r3, r6
 8007f46:	b289      	uxth	r1, r1
 8007f48:	fbb3 f6f7 	udiv	r6, r3, r7
 8007f4c:	fb07 3316 	mls	r3, r7, r6, r3
 8007f50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007f54:	fb06 f30e 	mul.w	r3, r6, lr
 8007f58:	428b      	cmp	r3, r1
 8007f5a:	d908      	bls.n	8007f6e <__udivmoddi4+0x28a>
 8007f5c:	eb1c 0101 	adds.w	r1, ip, r1
 8007f60:	f106 38ff 	add.w	r8, r6, #4294967295
 8007f64:	d216      	bcs.n	8007f94 <__udivmoddi4+0x2b0>
 8007f66:	428b      	cmp	r3, r1
 8007f68:	d914      	bls.n	8007f94 <__udivmoddi4+0x2b0>
 8007f6a:	3e02      	subs	r6, #2
 8007f6c:	4461      	add	r1, ip
 8007f6e:	1ac9      	subs	r1, r1, r3
 8007f70:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8007f74:	e738      	b.n	8007de8 <__udivmoddi4+0x104>
 8007f76:	462e      	mov	r6, r5
 8007f78:	4628      	mov	r0, r5
 8007f7a:	e705      	b.n	8007d88 <__udivmoddi4+0xa4>
 8007f7c:	4606      	mov	r6, r0
 8007f7e:	e6e3      	b.n	8007d48 <__udivmoddi4+0x64>
 8007f80:	4618      	mov	r0, r3
 8007f82:	e6f8      	b.n	8007d76 <__udivmoddi4+0x92>
 8007f84:	454b      	cmp	r3, r9
 8007f86:	d2a9      	bcs.n	8007edc <__udivmoddi4+0x1f8>
 8007f88:	ebb9 0802 	subs.w	r8, r9, r2
 8007f8c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8007f90:	3801      	subs	r0, #1
 8007f92:	e7a3      	b.n	8007edc <__udivmoddi4+0x1f8>
 8007f94:	4646      	mov	r6, r8
 8007f96:	e7ea      	b.n	8007f6e <__udivmoddi4+0x28a>
 8007f98:	4620      	mov	r0, r4
 8007f9a:	e794      	b.n	8007ec6 <__udivmoddi4+0x1e2>
 8007f9c:	4640      	mov	r0, r8
 8007f9e:	e7d1      	b.n	8007f44 <__udivmoddi4+0x260>
 8007fa0:	46d0      	mov	r8, sl
 8007fa2:	e77b      	b.n	8007e9c <__udivmoddi4+0x1b8>
 8007fa4:	3b02      	subs	r3, #2
 8007fa6:	4461      	add	r1, ip
 8007fa8:	e732      	b.n	8007e10 <__udivmoddi4+0x12c>
 8007faa:	4630      	mov	r0, r6
 8007fac:	e709      	b.n	8007dc2 <__udivmoddi4+0xde>
 8007fae:	4464      	add	r4, ip
 8007fb0:	3802      	subs	r0, #2
 8007fb2:	e742      	b.n	8007e3a <__udivmoddi4+0x156>

08007fb4 <__aeabi_idiv0>:
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop

08007fb8 <AccelInit>:
//               return 1;
//               }
//}

void AccelInit(void)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b086      	sub	sp, #24
 8007fbc:	af04      	add	r7, sp, #16
	uint8_t cmd[1];
	cmd[0]=0x00;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c3,ACCEL_ADDRESS,ACCEL_TEMP_CFG_REG,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 8007fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8007fc6:	9302      	str	r3, [sp, #8]
 8007fc8:	2301      	movs	r3, #1
 8007fca:	9301      	str	r3, [sp, #4]
 8007fcc:	1d3b      	adds	r3, r7, #4
 8007fce:	9300      	str	r3, [sp, #0]
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	221f      	movs	r2, #31
 8007fd4:	2130      	movs	r1, #48	; 0x30
 8007fd6:	484b      	ldr	r0, [pc, #300]	; (8008104 <AccelInit+0x14c>)
 8007fd8:	f009 fbb4 	bl	8011744 <HAL_I2C_Mem_Write>
	cmd[0]=0x77;
 8007fdc:	2377      	movs	r3, #119	; 0x77
 8007fde:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c3,ACCEL_ADDRESS,ACCEL_CTRL_REG1,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 8007fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8007fe4:	9302      	str	r3, [sp, #8]
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	9301      	str	r3, [sp, #4]
 8007fea:	1d3b      	adds	r3, r7, #4
 8007fec:	9300      	str	r3, [sp, #0]
 8007fee:	2301      	movs	r3, #1
 8007ff0:	2220      	movs	r2, #32
 8007ff2:	2130      	movs	r1, #48	; 0x30
 8007ff4:	4843      	ldr	r0, [pc, #268]	; (8008104 <AccelInit+0x14c>)
 8007ff6:	f009 fba5 	bl	8011744 <HAL_I2C_Mem_Write>
	cmd[0]=0x00;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c3,ACCEL_ADDRESS,ACCEL_CTRL_REG2,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 8007ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8008002:	9302      	str	r3, [sp, #8]
 8008004:	2301      	movs	r3, #1
 8008006:	9301      	str	r3, [sp, #4]
 8008008:	1d3b      	adds	r3, r7, #4
 800800a:	9300      	str	r3, [sp, #0]
 800800c:	2301      	movs	r3, #1
 800800e:	2221      	movs	r2, #33	; 0x21
 8008010:	2130      	movs	r1, #48	; 0x30
 8008012:	483c      	ldr	r0, [pc, #240]	; (8008104 <AccelInit+0x14c>)
 8008014:	f009 fb96 	bl	8011744 <HAL_I2C_Mem_Write>
	cmd[0]=0x18;
 8008018:	2318      	movs	r3, #24
 800801a:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c3,ACCEL_ADDRESS,ACCEL_CTRL_REG3,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 800801c:	f04f 33ff 	mov.w	r3, #4294967295
 8008020:	9302      	str	r3, [sp, #8]
 8008022:	2301      	movs	r3, #1
 8008024:	9301      	str	r3, [sp, #4]
 8008026:	1d3b      	adds	r3, r7, #4
 8008028:	9300      	str	r3, [sp, #0]
 800802a:	2301      	movs	r3, #1
 800802c:	2222      	movs	r2, #34	; 0x22
 800802e:	2130      	movs	r1, #48	; 0x30
 8008030:	4834      	ldr	r0, [pc, #208]	; (8008104 <AccelInit+0x14c>)
 8008032:	f009 fb87 	bl	8011744 <HAL_I2C_Mem_Write>
	cmd[0]=0x00;
 8008036:	2300      	movs	r3, #0
 8008038:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c3,ACCEL_ADDRESS,ACCEL_CTRL_REG4,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 800803a:	f04f 33ff 	mov.w	r3, #4294967295
 800803e:	9302      	str	r3, [sp, #8]
 8008040:	2301      	movs	r3, #1
 8008042:	9301      	str	r3, [sp, #4]
 8008044:	1d3b      	adds	r3, r7, #4
 8008046:	9300      	str	r3, [sp, #0]
 8008048:	2301      	movs	r3, #1
 800804a:	2223      	movs	r2, #35	; 0x23
 800804c:	2130      	movs	r1, #48	; 0x30
 800804e:	482d      	ldr	r0, [pc, #180]	; (8008104 <AccelInit+0x14c>)
 8008050:	f009 fb78 	bl	8011744 <HAL_I2C_Mem_Write>
	cmd[0]=0x0A;
 8008054:	230a      	movs	r3, #10
 8008056:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c3,ACCEL_ADDRESS,ACCEL_CTRL_REG5,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 8008058:	f04f 33ff 	mov.w	r3, #4294967295
 800805c:	9302      	str	r3, [sp, #8]
 800805e:	2301      	movs	r3, #1
 8008060:	9301      	str	r3, [sp, #4]
 8008062:	1d3b      	adds	r3, r7, #4
 8008064:	9300      	str	r3, [sp, #0]
 8008066:	2301      	movs	r3, #1
 8008068:	2224      	movs	r2, #36	; 0x24
 800806a:	2130      	movs	r1, #48	; 0x30
 800806c:	4825      	ldr	r0, [pc, #148]	; (8008104 <AccelInit+0x14c>)
 800806e:	f009 fb69 	bl	8011744 <HAL_I2C_Mem_Write>
	cmd[0]=0x20;
 8008072:	2320      	movs	r3, #32
 8008074:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c3,ACCEL_ADDRESS,ACCEL_CTRL_REG6,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 8008076:	f04f 33ff 	mov.w	r3, #4294967295
 800807a:	9302      	str	r3, [sp, #8]
 800807c:	2301      	movs	r3, #1
 800807e:	9301      	str	r3, [sp, #4]
 8008080:	1d3b      	adds	r3, r7, #4
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	2301      	movs	r3, #1
 8008086:	2225      	movs	r2, #37	; 0x25
 8008088:	2130      	movs	r1, #48	; 0x30
 800808a:	481e      	ldr	r0, [pc, #120]	; (8008104 <AccelInit+0x14c>)
 800808c:	f009 fb5a 	bl	8011744 <HAL_I2C_Mem_Write>
	cmd[0]=0x00;
 8008090:	2300      	movs	r3, #0
 8008092:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c3,ACCEL_ADDRESS,ACCEL_REFERENCE_DATACAPTURE,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 8008094:	f04f 33ff 	mov.w	r3, #4294967295
 8008098:	9302      	str	r3, [sp, #8]
 800809a:	2301      	movs	r3, #1
 800809c:	9301      	str	r3, [sp, #4]
 800809e:	1d3b      	adds	r3, r7, #4
 80080a0:	9300      	str	r3, [sp, #0]
 80080a2:	2301      	movs	r3, #1
 80080a4:	2226      	movs	r2, #38	; 0x26
 80080a6:	2130      	movs	r1, #48	; 0x30
 80080a8:	4816      	ldr	r0, [pc, #88]	; (8008104 <AccelInit+0x14c>)
 80080aa:	f009 fb4b 	bl	8011744 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c3,ACCEL_ADDRESS,ACCEL_FIFO_CTRL_REG,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 80080ae:	f04f 33ff 	mov.w	r3, #4294967295
 80080b2:	9302      	str	r3, [sp, #8]
 80080b4:	2301      	movs	r3, #1
 80080b6:	9301      	str	r3, [sp, #4]
 80080b8:	1d3b      	adds	r3, r7, #4
 80080ba:	9300      	str	r3, [sp, #0]
 80080bc:	2301      	movs	r3, #1
 80080be:	222e      	movs	r2, #46	; 0x2e
 80080c0:	2130      	movs	r1, #48	; 0x30
 80080c2:	4810      	ldr	r0, [pc, #64]	; (8008104 <AccelInit+0x14c>)
 80080c4:	f009 fb3e 	bl	8011744 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c3,ACCEL_ADDRESS,ACCEL_INT1_CFG,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 80080c8:	f04f 33ff 	mov.w	r3, #4294967295
 80080cc:	9302      	str	r3, [sp, #8]
 80080ce:	2301      	movs	r3, #1
 80080d0:	9301      	str	r3, [sp, #4]
 80080d2:	1d3b      	adds	r3, r7, #4
 80080d4:	9300      	str	r3, [sp, #0]
 80080d6:	2301      	movs	r3, #1
 80080d8:	2230      	movs	r2, #48	; 0x30
 80080da:	2130      	movs	r1, #48	; 0x30
 80080dc:	4809      	ldr	r0, [pc, #36]	; (8008104 <AccelInit+0x14c>)
 80080de:	f009 fb31 	bl	8011744 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c3,ACCEL_ADDRESS,ACCEL_INT2_CFG,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 80080e2:	f04f 33ff 	mov.w	r3, #4294967295
 80080e6:	9302      	str	r3, [sp, #8]
 80080e8:	2301      	movs	r3, #1
 80080ea:	9301      	str	r3, [sp, #4]
 80080ec:	1d3b      	adds	r3, r7, #4
 80080ee:	9300      	str	r3, [sp, #0]
 80080f0:	2301      	movs	r3, #1
 80080f2:	2234      	movs	r2, #52	; 0x34
 80080f4:	2130      	movs	r1, #48	; 0x30
 80080f6:	4803      	ldr	r0, [pc, #12]	; (8008104 <AccelInit+0x14c>)
 80080f8:	f009 fb24 	bl	8011744 <HAL_I2C_Mem_Write>
}
 80080fc:	bf00      	nop
 80080fe:	3708      	adds	r7, #8
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	20000458 	.word	0x20000458

08008108 <AccelRead>:
	cmd[0]=0x7F;
	HAL_I2C_Mem_Write(&hi2c3,ACCEL_ADDRESS,ACCEL_INT1_CFG,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
	// write 0x00 CTRL 5
}
void AccelRead(void)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b086      	sub	sp, #24
 800810c:	af04      	add	r7, sp, #16
//  MY_CONV dataconver;
  uint8_t data[1];
  //Acclx_read(ACCEL_OUT_X_L,data,1);
  HAL_I2C_Mem_Read(&hi2c3,ACCEL_ADDRESS,ACCEL_OUT_X_L,I2C_MEMADD_SIZE_8BIT,data,1,HAL_MAX_DELAY);
 800810e:	f04f 33ff 	mov.w	r3, #4294967295
 8008112:	9302      	str	r3, [sp, #8]
 8008114:	2301      	movs	r3, #1
 8008116:	9301      	str	r3, [sp, #4]
 8008118:	1d3b      	adds	r3, r7, #4
 800811a:	9300      	str	r3, [sp, #0]
 800811c:	2301      	movs	r3, #1
 800811e:	2228      	movs	r2, #40	; 0x28
 8008120:	2130      	movs	r1, #48	; 0x30
 8008122:	486d      	ldr	r0, [pc, #436]	; (80082d8 <AccelRead+0x1d0>)
 8008124:	f009 fc22 	bl	801196c <HAL_I2C_Mem_Read>
  dataconver.data[0]=data[0];
 8008128:	793a      	ldrb	r2, [r7, #4]
 800812a:	4b6c      	ldr	r3, [pc, #432]	; (80082dc <AccelRead+0x1d4>)
 800812c:	701a      	strb	r2, [r3, #0]
  //Acclx_read(ACCEL_OUT_X_H,data,1);
  HAL_I2C_Mem_Read(&hi2c3,ACCEL_ADDRESS,ACCEL_OUT_X_H,I2C_MEMADD_SIZE_8BIT,data,1,HAL_MAX_DELAY);
 800812e:	f04f 33ff 	mov.w	r3, #4294967295
 8008132:	9302      	str	r3, [sp, #8]
 8008134:	2301      	movs	r3, #1
 8008136:	9301      	str	r3, [sp, #4]
 8008138:	1d3b      	adds	r3, r7, #4
 800813a:	9300      	str	r3, [sp, #0]
 800813c:	2301      	movs	r3, #1
 800813e:	2229      	movs	r2, #41	; 0x29
 8008140:	2130      	movs	r1, #48	; 0x30
 8008142:	4865      	ldr	r0, [pc, #404]	; (80082d8 <AccelRead+0x1d0>)
 8008144:	f009 fc12 	bl	801196c <HAL_I2C_Mem_Read>
  dataconver.data[1]=data[0];
 8008148:	793a      	ldrb	r2, [r7, #4]
 800814a:	4b64      	ldr	r3, [pc, #400]	; (80082dc <AccelRead+0x1d4>)
 800814c:	705a      	strb	r2, [r3, #1]
  output.RawAccelX=dataconver.word;
 800814e:	4b63      	ldr	r3, [pc, #396]	; (80082dc <AccelRead+0x1d4>)
 8008150:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008154:	4b62      	ldr	r3, [pc, #392]	; (80082e0 <AccelRead+0x1d8>)
 8008156:	80da      	strh	r2, [r3, #6]

  //Acclx_read(ACCEL_OUT_Y_L,data,1);
  HAL_I2C_Mem_Read(&hi2c3,ACCEL_ADDRESS,ACCEL_OUT_Y_L,I2C_MEMADD_SIZE_8BIT,data,1,HAL_MAX_DELAY);
 8008158:	f04f 33ff 	mov.w	r3, #4294967295
 800815c:	9302      	str	r3, [sp, #8]
 800815e:	2301      	movs	r3, #1
 8008160:	9301      	str	r3, [sp, #4]
 8008162:	1d3b      	adds	r3, r7, #4
 8008164:	9300      	str	r3, [sp, #0]
 8008166:	2301      	movs	r3, #1
 8008168:	222a      	movs	r2, #42	; 0x2a
 800816a:	2130      	movs	r1, #48	; 0x30
 800816c:	485a      	ldr	r0, [pc, #360]	; (80082d8 <AccelRead+0x1d0>)
 800816e:	f009 fbfd 	bl	801196c <HAL_I2C_Mem_Read>
  dataconver.data[0]=data[0];
 8008172:	793a      	ldrb	r2, [r7, #4]
 8008174:	4b59      	ldr	r3, [pc, #356]	; (80082dc <AccelRead+0x1d4>)
 8008176:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Read(&hi2c3,ACCEL_ADDRESS,ACCEL_OUT_Y_H,I2C_MEMADD_SIZE_8BIT,data,1,HAL_MAX_DELAY);
 8008178:	f04f 33ff 	mov.w	r3, #4294967295
 800817c:	9302      	str	r3, [sp, #8]
 800817e:	2301      	movs	r3, #1
 8008180:	9301      	str	r3, [sp, #4]
 8008182:	1d3b      	adds	r3, r7, #4
 8008184:	9300      	str	r3, [sp, #0]
 8008186:	2301      	movs	r3, #1
 8008188:	222b      	movs	r2, #43	; 0x2b
 800818a:	2130      	movs	r1, #48	; 0x30
 800818c:	4852      	ldr	r0, [pc, #328]	; (80082d8 <AccelRead+0x1d0>)
 800818e:	f009 fbed 	bl	801196c <HAL_I2C_Mem_Read>
  //Acclx_read(ACCEL_OUT_Y_H,data,1);
  dataconver.data[1]=data[0];
 8008192:	793a      	ldrb	r2, [r7, #4]
 8008194:	4b51      	ldr	r3, [pc, #324]	; (80082dc <AccelRead+0x1d4>)
 8008196:	705a      	strb	r2, [r3, #1]
  output.RawAccelY=dataconver.word;
 8008198:	4b50      	ldr	r3, [pc, #320]	; (80082dc <AccelRead+0x1d4>)
 800819a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800819e:	4b50      	ldr	r3, [pc, #320]	; (80082e0 <AccelRead+0x1d8>)
 80081a0:	811a      	strh	r2, [r3, #8]

  //Acclx_read(ACCEL_OUT_Z_L,data,1);
  HAL_I2C_Mem_Read(&hi2c3,ACCEL_ADDRESS,ACCEL_OUT_Z_L,I2C_MEMADD_SIZE_8BIT,data,1,HAL_MAX_DELAY);
 80081a2:	f04f 33ff 	mov.w	r3, #4294967295
 80081a6:	9302      	str	r3, [sp, #8]
 80081a8:	2301      	movs	r3, #1
 80081aa:	9301      	str	r3, [sp, #4]
 80081ac:	1d3b      	adds	r3, r7, #4
 80081ae:	9300      	str	r3, [sp, #0]
 80081b0:	2301      	movs	r3, #1
 80081b2:	222c      	movs	r2, #44	; 0x2c
 80081b4:	2130      	movs	r1, #48	; 0x30
 80081b6:	4848      	ldr	r0, [pc, #288]	; (80082d8 <AccelRead+0x1d0>)
 80081b8:	f009 fbd8 	bl	801196c <HAL_I2C_Mem_Read>
  dataconver.data[0]=data[0];
 80081bc:	793a      	ldrb	r2, [r7, #4]
 80081be:	4b47      	ldr	r3, [pc, #284]	; (80082dc <AccelRead+0x1d4>)
 80081c0:	701a      	strb	r2, [r3, #0]
  //Acclx_read(ACCEL_OUT_Z_H,data,1);
  HAL_I2C_Mem_Read(&hi2c3,ACCEL_ADDRESS,ACCEL_OUT_Z_H,I2C_MEMADD_SIZE_8BIT,data,1,HAL_MAX_DELAY);
 80081c2:	f04f 33ff 	mov.w	r3, #4294967295
 80081c6:	9302      	str	r3, [sp, #8]
 80081c8:	2301      	movs	r3, #1
 80081ca:	9301      	str	r3, [sp, #4]
 80081cc:	1d3b      	adds	r3, r7, #4
 80081ce:	9300      	str	r3, [sp, #0]
 80081d0:	2301      	movs	r3, #1
 80081d2:	222d      	movs	r2, #45	; 0x2d
 80081d4:	2130      	movs	r1, #48	; 0x30
 80081d6:	4840      	ldr	r0, [pc, #256]	; (80082d8 <AccelRead+0x1d0>)
 80081d8:	f009 fbc8 	bl	801196c <HAL_I2C_Mem_Read>
  dataconver.data[1]=data[0];
 80081dc:	793a      	ldrb	r2, [r7, #4]
 80081de:	4b3f      	ldr	r3, [pc, #252]	; (80082dc <AccelRead+0x1d4>)
 80081e0:	705a      	strb	r2, [r3, #1]
  output.RawAccelZ=dataconver.word;
 80081e2:	4b3e      	ldr	r3, [pc, #248]	; (80082dc <AccelRead+0x1d4>)
 80081e4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80081e8:	4b3d      	ldr	r3, [pc, #244]	; (80082e0 <AccelRead+0x1d8>)
 80081ea:	815a      	strh	r2, [r3, #10]

  output.AccelXScratch = ((float)(output.RawAccelX/64))*0.004f *100;
 80081ec:	4b3c      	ldr	r3, [pc, #240]	; (80082e0 <AccelRead+0x1d8>)
 80081ee:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	da00      	bge.n	80081f8 <AccelRead+0xf0>
 80081f6:	333f      	adds	r3, #63	; 0x3f
 80081f8:	119b      	asrs	r3, r3, #6
 80081fa:	b21b      	sxth	r3, r3
 80081fc:	ee07 3a90 	vmov	s15, r3
 8008200:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008204:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80082e4 <AccelRead+0x1dc>
 8008208:	ee67 7a87 	vmul.f32	s15, s15, s14
 800820c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80082e8 <AccelRead+0x1e0>
 8008210:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008214:	4b32      	ldr	r3, [pc, #200]	; (80082e0 <AccelRead+0x1d8>)
 8008216:	edc3 7a03 	vstr	s15, [r3, #12]
  output.AccelYScratch = ((float)(output.RawAccelY/64))*0.004f *100;
 800821a:	4b31      	ldr	r3, [pc, #196]	; (80082e0 <AccelRead+0x1d8>)
 800821c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008220:	2b00      	cmp	r3, #0
 8008222:	da00      	bge.n	8008226 <AccelRead+0x11e>
 8008224:	333f      	adds	r3, #63	; 0x3f
 8008226:	119b      	asrs	r3, r3, #6
 8008228:	b21b      	sxth	r3, r3
 800822a:	ee07 3a90 	vmov	s15, r3
 800822e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008232:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80082e4 <AccelRead+0x1dc>
 8008236:	ee67 7a87 	vmul.f32	s15, s15, s14
 800823a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80082e8 <AccelRead+0x1e0>
 800823e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008242:	4b27      	ldr	r3, [pc, #156]	; (80082e0 <AccelRead+0x1d8>)
 8008244:	edc3 7a04 	vstr	s15, [r3, #16]
  output.AccelZScratch = ((float)(output.RawAccelZ/64))*0.004f *100;
 8008248:	4b25      	ldr	r3, [pc, #148]	; (80082e0 <AccelRead+0x1d8>)
 800824a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800824e:	2b00      	cmp	r3, #0
 8008250:	da00      	bge.n	8008254 <AccelRead+0x14c>
 8008252:	333f      	adds	r3, #63	; 0x3f
 8008254:	119b      	asrs	r3, r3, #6
 8008256:	b21b      	sxth	r3, r3
 8008258:	ee07 3a90 	vmov	s15, r3
 800825c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008260:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80082e4 <AccelRead+0x1dc>
 8008264:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008268:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80082e8 <AccelRead+0x1e0>
 800826c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008270:	4b1b      	ldr	r3, [pc, #108]	; (80082e0 <AccelRead+0x1d8>)
 8008272:	edc3 7a05 	vstr	s15, [r3, #20]


    output.AccelX = (int16_t)output.AccelXScratch;
 8008276:	4b1a      	ldr	r3, [pc, #104]	; (80082e0 <AccelRead+0x1d8>)
 8008278:	edd3 7a03 	vldr	s15, [r3, #12]
 800827c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008280:	ee17 3a90 	vmov	r3, s15
 8008284:	b21a      	sxth	r2, r3
 8008286:	4b16      	ldr	r3, [pc, #88]	; (80082e0 <AccelRead+0x1d8>)
 8008288:	801a      	strh	r2, [r3, #0]
    output.AccelY = (int16_t)output.AccelYScratch;
 800828a:	4b15      	ldr	r3, [pc, #84]	; (80082e0 <AccelRead+0x1d8>)
 800828c:	edd3 7a04 	vldr	s15, [r3, #16]
 8008290:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008294:	ee17 3a90 	vmov	r3, s15
 8008298:	b21a      	sxth	r2, r3
 800829a:	4b11      	ldr	r3, [pc, #68]	; (80082e0 <AccelRead+0x1d8>)
 800829c:	805a      	strh	r2, [r3, #2]
    output.AccelZ = (int16_t)output.AccelZScratch;
 800829e:	4b10      	ldr	r3, [pc, #64]	; (80082e0 <AccelRead+0x1d8>)
 80082a0:	edd3 7a05 	vldr	s15, [r3, #20]
 80082a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80082a8:	ee17 3a90 	vmov	r3, s15
 80082ac:	b21a      	sxth	r2, r3
 80082ae:	4b0c      	ldr	r3, [pc, #48]	; (80082e0 <AccelRead+0x1d8>)
 80082b0:	809a      	strh	r2, [r3, #4]

    printf("Accelerometer X:%d Y:%d Z:%d \n",output.AccelX,output.AccelY,output.AccelZ);
 80082b2:	4b0b      	ldr	r3, [pc, #44]	; (80082e0 <AccelRead+0x1d8>)
 80082b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80082b8:	4619      	mov	r1, r3
 80082ba:	4b09      	ldr	r3, [pc, #36]	; (80082e0 <AccelRead+0x1d8>)
 80082bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80082c0:	461a      	mov	r2, r3
 80082c2:	4b07      	ldr	r3, [pc, #28]	; (80082e0 <AccelRead+0x1d8>)
 80082c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80082c8:	4808      	ldr	r0, [pc, #32]	; (80082ec <AccelRead+0x1e4>)
 80082ca:	f011 fa83 	bl	80197d4 <iprintf>

}
 80082ce:	bf00      	nop
 80082d0:	3708      	adds	r7, #8
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	20000458 	.word	0x20000458
 80082dc:	200002cc 	.word	0x200002cc
 80082e0:	200002d0 	.word	0x200002d0
 80082e4:	3b83126f 	.word	0x3b83126f
 80082e8:	42c80000 	.word	0x42c80000
 80082ec:	0801d690 	.word	0x0801d690

080082f0 <UV_init>:
	HAL_I2C_Mem_Write(&hi2c3,LTR390_WR,LTR390_INT_PST,I2C_MEMADD_SIZE_8BIT,&cmd[1],1,HAL_MAX_DELAY);
}
// low throsold =100 //0x64 low byte:0x64,mid byte:0x00,high byte:00
// High_throsold=1000//0x3E8 low_byte:0x08,mid_byte=0x3E,High_byte:00
void UV_init(void)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af04      	add	r7, sp, #16
	uint8_t cmd[1]={0};
 80082f6:	2300      	movs	r3, #0
 80082f8:	713b      	strb	r3, [r7, #4]
	 //cmd[0]=0x10;//0x0A;//0x02;
	 //HAL_I2C_Mem_Write(&hi2c3,LTR390_WR,LTR390_MAIN_CTRL,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
	 cmd[0]=0x0A;//0x02;
 80082fa:	230a      	movs	r3, #10
 80082fc:	713b      	strb	r3, [r7, #4]
	 HAL_I2C_Mem_Write(&hi2c3,LTR390_WR,LTR390_MAIN_CTRL,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 80082fe:	f04f 33ff 	mov.w	r3, #4294967295
 8008302:	9302      	str	r3, [sp, #8]
 8008304:	2301      	movs	r3, #1
 8008306:	9301      	str	r3, [sp, #4]
 8008308:	1d3b      	adds	r3, r7, #4
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	2301      	movs	r3, #1
 800830e:	2200      	movs	r2, #0
 8008310:	21a6      	movs	r1, #166	; 0xa6
 8008312:	4814      	ldr	r0, [pc, #80]	; (8008364 <UV_init+0x74>)
 8008314:	f009 fa16 	bl	8011744 <HAL_I2C_Mem_Write>
	 cmd[0]=0x22;
 8008318:	2322      	movs	r3, #34	; 0x22
 800831a:	713b      	strb	r3, [r7, #4]
	 HAL_I2C_Mem_Write(&hi2c3,LTR390_WR,LTR390_MEAS_RATE,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 800831c:	f04f 33ff 	mov.w	r3, #4294967295
 8008320:	9302      	str	r3, [sp, #8]
 8008322:	2301      	movs	r3, #1
 8008324:	9301      	str	r3, [sp, #4]
 8008326:	1d3b      	adds	r3, r7, #4
 8008328:	9300      	str	r3, [sp, #0]
 800832a:	2301      	movs	r3, #1
 800832c:	2204      	movs	r2, #4
 800832e:	21a6      	movs	r1, #166	; 0xa6
 8008330:	480c      	ldr	r0, [pc, #48]	; (8008364 <UV_init+0x74>)
 8008332:	f009 fa07 	bl	8011744 <HAL_I2C_Mem_Write>
	 cmd[0]=0x04;//0x01;
 8008336:	2304      	movs	r3, #4
 8008338:	713b      	strb	r3, [r7, #4]
	 HAL_I2C_Mem_Write(&hi2c3,LTR390_WR,LTR390_GAIN,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 800833a:	f04f 33ff 	mov.w	r3, #4294967295
 800833e:	9302      	str	r3, [sp, #8]
 8008340:	2301      	movs	r3, #1
 8008342:	9301      	str	r3, [sp, #4]
 8008344:	1d3b      	adds	r3, r7, #4
 8008346:	9300      	str	r3, [sp, #0]
 8008348:	2301      	movs	r3, #1
 800834a:	2205      	movs	r2, #5
 800834c:	21a6      	movs	r1, #166	; 0xa6
 800834e:	4805      	ldr	r0, [pc, #20]	; (8008364 <UV_init+0x74>)
 8008350:	f009 f9f8 	bl	8011744 <HAL_I2C_Mem_Write>
	 HAL_Delay(10);
 8008354:	200a      	movs	r0, #10
 8008356:	f000 fb7e 	bl	8008a56 <HAL_Delay>
 //Set_thresold(100,1000);
 //config_interrupt();

}
 800835a:	bf00      	nop
 800835c:	3708      	adds	r7, #8
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	20000458 	.word	0x20000458

08008368 <f_UV>:


void f_UV(void)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b086      	sub	sp, #24
 800836c:	af04      	add	r7, sp, #16

  uint8_t Status=0;
 800836e:	2300      	movs	r3, #0
 8008370:	70fb      	strb	r3, [r7, #3]
  while(Status!=0x08){
 8008372:	e011      	b.n	8008398 <f_UV+0x30>
  HAL_I2C_Mem_Read(&hi2c3,LTR390_RD,LTR390_MAIN_STATUS,I2C_MEMADD_SIZE_8BIT,&Status,1,HAL_MAX_DELAY);
 8008374:	f04f 33ff 	mov.w	r3, #4294967295
 8008378:	9302      	str	r3, [sp, #8]
 800837a:	2301      	movs	r3, #1
 800837c:	9301      	str	r3, [sp, #4]
 800837e:	1cfb      	adds	r3, r7, #3
 8008380:	9300      	str	r3, [sp, #0]
 8008382:	2301      	movs	r3, #1
 8008384:	2207      	movs	r2, #7
 8008386:	21a7      	movs	r1, #167	; 0xa7
 8008388:	481e      	ldr	r0, [pc, #120]	; (8008404 <f_UV+0x9c>)
 800838a:	f009 faef 	bl	801196c <HAL_I2C_Mem_Read>
  printf("Inside status %d:\n",Status);
 800838e:	78fb      	ldrb	r3, [r7, #3]
 8008390:	4619      	mov	r1, r3
 8008392:	481d      	ldr	r0, [pc, #116]	; (8008408 <f_UV+0xa0>)
 8008394:	f011 fa1e 	bl	80197d4 <iprintf>
  while(Status!=0x08){
 8008398:	78fb      	ldrb	r3, [r7, #3]
 800839a:	2b08      	cmp	r3, #8
 800839c:	d1ea      	bne.n	8008374 <f_UV+0xc>
  }
//  uint8_t data_Big_Endian[3];//  data= bus_read(LTR390_RD, LTR390_UVSDATA ,3);
  HAL_I2C_Mem_Read(&hi2c3,LTR390_RD,LTR390_UVSDATA,I2C_MEMADD_SIZE_8BIT,data_Big_Endian,3,HAL_MAX_DELAY);
 800839e:	f04f 33ff 	mov.w	r3, #4294967295
 80083a2:	9302      	str	r3, [sp, #8]
 80083a4:	2303      	movs	r3, #3
 80083a6:	9301      	str	r3, [sp, #4]
 80083a8:	4b18      	ldr	r3, [pc, #96]	; (800840c <f_UV+0xa4>)
 80083aa:	9300      	str	r3, [sp, #0]
 80083ac:	2301      	movs	r3, #1
 80083ae:	2210      	movs	r2, #16
 80083b0:	21a7      	movs	r1, #167	; 0xa7
 80083b2:	4814      	ldr	r0, [pc, #80]	; (8008404 <f_UV+0x9c>)
 80083b4:	f009 fada 	bl	801196c <HAL_I2C_Mem_Read>
// I2cread(LTR390_RD,LTR390_UVSDATA,data_Big_Endian,3);
  //printf("uv_raw %d %d %d \n",data_Big_Endian[0],data_Big_Endian[1],data_Big_Endian[2]);
//  data_little_Endian[0]=data_Big_Endian[2];
//  data_little_Endian[1]=data_Big_Endian[1];
//  data_little_Endian[2]=data_Big_Endian[0];
  uint32_t UV_count = ((data_Big_Endian[2]*65536) + (data_Big_Endian[1]*256) +data_Big_Endian[0]);
 80083b8:	4b14      	ldr	r3, [pc, #80]	; (800840c <f_UV+0xa4>)
 80083ba:	789b      	ldrb	r3, [r3, #2]
 80083bc:	021b      	lsls	r3, r3, #8
 80083be:	4a13      	ldr	r2, [pc, #76]	; (800840c <f_UV+0xa4>)
 80083c0:	7852      	ldrb	r2, [r2, #1]
 80083c2:	4413      	add	r3, r2
 80083c4:	021b      	lsls	r3, r3, #8
 80083c6:	4a11      	ldr	r2, [pc, #68]	; (800840c <f_UV+0xa4>)
 80083c8:	7812      	ldrb	r2, [r2, #0]
 80083ca:	4413      	add	r3, r2
 80083cc:	607b      	str	r3, [r7, #4]
  f_UVI=((float)UV_count/2300)*1;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	ee07 3a90 	vmov	s15, r3
 80083d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80083d8:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8008410 <f_UV+0xa8>
 80083dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80083e0:	4b0c      	ldr	r3, [pc, #48]	; (8008414 <f_UV+0xac>)
 80083e2:	edc3 7a00 	vstr	s15, [r3]
  printf("uv_raw :[%d] UVI: [%f] \n",UV_count,f_UVI);
 80083e6:	4b0b      	ldr	r3, [pc, #44]	; (8008414 <f_UV+0xac>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7ff f88c 	bl	8007508 <__aeabi_f2d>
 80083f0:	4602      	mov	r2, r0
 80083f2:	460b      	mov	r3, r1
 80083f4:	6879      	ldr	r1, [r7, #4]
 80083f6:	4808      	ldr	r0, [pc, #32]	; (8008418 <f_UV+0xb0>)
 80083f8:	f011 f9ec 	bl	80197d4 <iprintf>
  //return (float)f_UVI;

}
 80083fc:	bf00      	nop
 80083fe:	3708      	adds	r7, #8
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}
 8008404:	20000458 	.word	0x20000458
 8008408:	0801d6c0 	.word	0x0801d6c0
 800840c:	200002e8 	.word	0x200002e8
 8008410:	450fc000 	.word	0x450fc000
 8008414:	200002ec 	.word	0x200002ec
 8008418:	0801d6d4 	.word	0x0801d6d4

0800841c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8008424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008428:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800842a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4313      	orrs	r3, r2
 8008432:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8008434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008438:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4013      	ands	r3, r2
 800843e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008440:	68fb      	ldr	r3, [r7, #12]
}
 8008442:	bf00      	nop
 8008444:	3714      	adds	r7, #20
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
	...

08008450 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b086      	sub	sp, #24
 8008454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8008456:	463b      	mov	r3, r7
 8008458:	2200      	movs	r2, #0
 800845a:	601a      	str	r2, [r3, #0]
 800845c:	605a      	str	r2, [r3, #4]
 800845e:	609a      	str	r2, [r3, #8]
 8008460:	60da      	str	r2, [r3, #12]
 8008462:	611a      	str	r2, [r3, #16]
 8008464:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8008466:	4b30      	ldr	r3, [pc, #192]	; (8008528 <MX_ADC1_Init+0xd8>)
 8008468:	4a30      	ldr	r2, [pc, #192]	; (800852c <MX_ADC1_Init+0xdc>)
 800846a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800846c:	4b2e      	ldr	r3, [pc, #184]	; (8008528 <MX_ADC1_Init+0xd8>)
 800846e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008472:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008474:	4b2c      	ldr	r3, [pc, #176]	; (8008528 <MX_ADC1_Init+0xd8>)
 8008476:	2200      	movs	r2, #0
 8008478:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800847a:	4b2b      	ldr	r3, [pc, #172]	; (8008528 <MX_ADC1_Init+0xd8>)
 800847c:	2200      	movs	r2, #0
 800847e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8008480:	4b29      	ldr	r3, [pc, #164]	; (8008528 <MX_ADC1_Init+0xd8>)
 8008482:	2201      	movs	r2, #1
 8008484:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8008486:	4b28      	ldr	r3, [pc, #160]	; (8008528 <MX_ADC1_Init+0xd8>)
 8008488:	2208      	movs	r2, #8
 800848a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 800848c:	4b26      	ldr	r3, [pc, #152]	; (8008528 <MX_ADC1_Init+0xd8>)
 800848e:	2201      	movs	r2, #1
 8008490:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8008492:	4b25      	ldr	r3, [pc, #148]	; (8008528 <MX_ADC1_Init+0xd8>)
 8008494:	2201      	movs	r2, #1
 8008496:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8008498:	4b23      	ldr	r3, [pc, #140]	; (8008528 <MX_ADC1_Init+0xd8>)
 800849a:	2202      	movs	r2, #2
 800849c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800849e:	4b22      	ldr	r3, [pc, #136]	; (8008528 <MX_ADC1_Init+0xd8>)
 80084a0:	2200      	movs	r2, #0
 80084a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80084a6:	4b20      	ldr	r3, [pc, #128]	; (8008528 <MX_ADC1_Init+0xd8>)
 80084a8:	2200      	movs	r2, #0
 80084aa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80084ac:	4b1e      	ldr	r3, [pc, #120]	; (8008528 <MX_ADC1_Init+0xd8>)
 80084ae:	2200      	movs	r2, #0
 80084b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80084b2:	4b1d      	ldr	r3, [pc, #116]	; (8008528 <MX_ADC1_Init+0xd8>)
 80084b4:	2200      	movs	r2, #0
 80084b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80084ba:	4b1b      	ldr	r3, [pc, #108]	; (8008528 <MX_ADC1_Init+0xd8>)
 80084bc:	2200      	movs	r2, #0
 80084be:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80084c0:	4b19      	ldr	r3, [pc, #100]	; (8008528 <MX_ADC1_Init+0xd8>)
 80084c2:	2200      	movs	r2, #0
 80084c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80084c8:	4817      	ldr	r0, [pc, #92]	; (8008528 <MX_ADC1_Init+0xd8>)
 80084ca:	f007 f84b 	bl	800f564 <HAL_ADC_Init>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d001      	beq.n	80084d8 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80084d4:	f002 f96a 	bl	800a7ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80084d8:	4b15      	ldr	r3, [pc, #84]	; (8008530 <MX_ADC1_Init+0xe0>)
 80084da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80084dc:	2306      	movs	r3, #6
 80084de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80084e0:	2305      	movs	r3, #5
 80084e2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80084e4:	237f      	movs	r3, #127	; 0x7f
 80084e6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80084e8:	2304      	movs	r3, #4
 80084ea:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80084ec:	2300      	movs	r3, #0
 80084ee:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80084f0:	463b      	mov	r3, r7
 80084f2:	4619      	mov	r1, r3
 80084f4:	480c      	ldr	r0, [pc, #48]	; (8008528 <MX_ADC1_Init+0xd8>)
 80084f6:	f007 fa85 	bl	800fa04 <HAL_ADC_ConfigChannel>
 80084fa:	4603      	mov	r3, r0
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d001      	beq.n	8008504 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8008500:	f002 f954 	bl	800a7ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8008504:	4b0b      	ldr	r3, [pc, #44]	; (8008534 <MX_ADC1_Init+0xe4>)
 8008506:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8008508:	230c      	movs	r3, #12
 800850a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800850c:	463b      	mov	r3, r7
 800850e:	4619      	mov	r1, r3
 8008510:	4805      	ldr	r0, [pc, #20]	; (8008528 <MX_ADC1_Init+0xd8>)
 8008512:	f007 fa77 	bl	800fa04 <HAL_ADC_ConfigChannel>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d001      	beq.n	8008520 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 800851c:	f002 f946 	bl	800a7ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8008520:	bf00      	nop
 8008522:	3718      	adds	r7, #24
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	200002f0 	.word	0x200002f0
 800852c:	50040000 	.word	0x50040000
 8008530:	10c00010 	.word	0x10c00010
 8008534:	36902000 	.word	0x36902000

08008538 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b09c      	sub	sp, #112	; 0x70
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008540:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008544:	2200      	movs	r2, #0
 8008546:	601a      	str	r2, [r3, #0]
 8008548:	605a      	str	r2, [r3, #4]
 800854a:	609a      	str	r2, [r3, #8]
 800854c:	60da      	str	r2, [r3, #12]
 800854e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008550:	f107 030c 	add.w	r3, r7, #12
 8008554:	2250      	movs	r2, #80	; 0x50
 8008556:	2100      	movs	r1, #0
 8008558:	4618      	mov	r0, r3
 800855a:	f010 fab9 	bl	8018ad0 <memset>
  if(adcHandle->Instance==ADC1)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a31      	ldr	r2, [pc, #196]	; (8008628 <HAL_ADC_MspInit+0xf0>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d15b      	bne.n	8008620 <HAL_ADC_MspInit+0xe8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8008568:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800856c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800856e:	2318      	movs	r3, #24
 8008570:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8008572:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008576:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8008578:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800857c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800857e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8008582:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 8008584:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008588:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800858a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800858e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008590:	f107 030c 	add.w	r3, r7, #12
 8008594:	4618      	mov	r0, r3
 8008596:	f00c f8b6 	bl	8014706 <HAL_RCCEx_PeriphCLKConfig>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d001      	beq.n	80085a4 <HAL_ADC_MspInit+0x6c>
    {
      Error_Handler();
 80085a0:	f002 f904 	bl	800a7ac <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80085a4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80085a8:	f7ff ff38 	bl	800841c <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80085ac:	2004      	movs	r0, #4
 80085ae:	f7ff ff35 	bl	800841c <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80085b2:	2318      	movs	r3, #24
 80085b4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80085b6:	2303      	movs	r3, #3
 80085b8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085ba:	2300      	movs	r3, #0
 80085bc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80085be:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80085c2:	4619      	mov	r1, r3
 80085c4:	4819      	ldr	r0, [pc, #100]	; (800862c <HAL_ADC_MspInit+0xf4>)
 80085c6:	f008 fd67 	bl	8011098 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80085ca:	4b19      	ldr	r3, [pc, #100]	; (8008630 <HAL_ADC_MspInit+0xf8>)
 80085cc:	4a19      	ldr	r2, [pc, #100]	; (8008634 <HAL_ADC_MspInit+0xfc>)
 80085ce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80085d0:	4b17      	ldr	r3, [pc, #92]	; (8008630 <HAL_ADC_MspInit+0xf8>)
 80085d2:	2205      	movs	r2, #5
 80085d4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80085d6:	4b16      	ldr	r3, [pc, #88]	; (8008630 <HAL_ADC_MspInit+0xf8>)
 80085d8:	2200      	movs	r2, #0
 80085da:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80085dc:	4b14      	ldr	r3, [pc, #80]	; (8008630 <HAL_ADC_MspInit+0xf8>)
 80085de:	2200      	movs	r2, #0
 80085e0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80085e2:	4b13      	ldr	r3, [pc, #76]	; (8008630 <HAL_ADC_MspInit+0xf8>)
 80085e4:	2280      	movs	r2, #128	; 0x80
 80085e6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80085e8:	4b11      	ldr	r3, [pc, #68]	; (8008630 <HAL_ADC_MspInit+0xf8>)
 80085ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80085ee:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80085f0:	4b0f      	ldr	r3, [pc, #60]	; (8008630 <HAL_ADC_MspInit+0xf8>)
 80085f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80085f6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80085f8:	4b0d      	ldr	r3, [pc, #52]	; (8008630 <HAL_ADC_MspInit+0xf8>)
 80085fa:	2220      	movs	r2, #32
 80085fc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80085fe:	4b0c      	ldr	r3, [pc, #48]	; (8008630 <HAL_ADC_MspInit+0xf8>)
 8008600:	2200      	movs	r2, #0
 8008602:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8008604:	480a      	ldr	r0, [pc, #40]	; (8008630 <HAL_ADC_MspInit+0xf8>)
 8008606:	f008 fa15 	bl	8010a34 <HAL_DMA_Init>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d001      	beq.n	8008614 <HAL_ADC_MspInit+0xdc>
    {
      Error_Handler();
 8008610:	f002 f8cc 	bl	800a7ac <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	4a06      	ldr	r2, [pc, #24]	; (8008630 <HAL_ADC_MspInit+0xf8>)
 8008618:	64da      	str	r2, [r3, #76]	; 0x4c
 800861a:	4a05      	ldr	r2, [pc, #20]	; (8008630 <HAL_ADC_MspInit+0xf8>)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8008620:	bf00      	nop
 8008622:	3770      	adds	r7, #112	; 0x70
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}
 8008628:	50040000 	.word	0x50040000
 800862c:	48000800 	.word	0x48000800
 8008630:	20000354 	.word	0x20000354
 8008634:	40020008 	.word	0x40020008

08008638 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8008638:	b5b0      	push	{r4, r5, r7, lr}
 800863a:	b088      	sub	sp, #32
 800863c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800863e:	4b0b      	ldr	r3, [pc, #44]	; (800866c <APPD_EnableCPU2+0x34>)
 8008640:	1d3c      	adds	r4, r7, #4
 8008642:	461d      	mov	r5, r3
 8008644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008648:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800864c:	c403      	stmia	r4!, {r0, r1}
 800864e:	8022      	strh	r2, [r4, #0]
 8008650:	3402      	adds	r4, #2
 8008652:	0c13      	lsrs	r3, r2, #16
 8008654:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8008656:	f00f fed1 	bl	80183fc <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800865a:	1d3b      	adds	r3, r7, #4
 800865c:	4618      	mov	r0, r3
 800865e:	f00f f922 	bl	80178a6 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8008662:	bf00      	nop
}
 8008664:	3720      	adds	r7, #32
 8008666:	46bd      	mov	sp, r7
 8008668:	bdb0      	pop	{r4, r5, r7, pc}
 800866a:	bf00      	nop
 800866c:	0801d714 	.word	0x0801d714

08008670 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8008678:	4b07      	ldr	r3, [pc, #28]	; (8008698 <LL_C2_PWR_SetPowerMode+0x28>)
 800867a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800867e:	f023 0207 	bic.w	r2, r3, #7
 8008682:	4905      	ldr	r1, [pc, #20]	; (8008698 <LL_C2_PWR_SetPowerMode+0x28>)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	4313      	orrs	r3, r2
 8008688:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800868c:	bf00      	nop
 800868e:	370c      	adds	r7, #12
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr
 8008698:	58000400 	.word	0x58000400

0800869c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80086a4:	4b06      	ldr	r3, [pc, #24]	; (80086c0 <LL_EXTI_EnableIT_32_63+0x24>)
 80086a6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80086aa:	4905      	ldr	r1, [pc, #20]	; (80086c0 <LL_EXTI_EnableIT_32_63+0x24>)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	4313      	orrs	r3, r2
 80086b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80086b4:	bf00      	nop
 80086b6:	370c      	adds	r7, #12
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr
 80086c0:	58000800 	.word	0x58000800

080086c4 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80086cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086d0:	4a0a      	ldr	r2, [pc, #40]	; (80086fc <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80086d2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80086d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80086de:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	021b      	lsls	r3, r3, #8
 80086e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80086ea:	4313      	orrs	r3, r2
 80086ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80086f0:	bf00      	nop
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr
 80086fc:	cafecafe 	.word	0xcafecafe

08008700 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8008708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8008712:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4313      	orrs	r3, r2
 800871a:	608b      	str	r3, [r1, #8]
}
 800871c:	bf00      	nop
 800871e:	370c      	adds	r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8008728:	b480      	push	{r7}
 800872a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 800872c:	4b04      	ldr	r3, [pc, #16]	; (8008740 <LL_DBGMCU_GetDeviceID+0x18>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8008734:	4618      	mov	r0, r3
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr
 800873e:	bf00      	nop
 8008740:	e0042000 	.word	0xe0042000

08008744 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8008744:	b480      	push	{r7}
 8008746:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8008748:	4b04      	ldr	r3, [pc, #16]	; (800875c <LL_DBGMCU_GetRevisionID+0x18>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	0c1b      	lsrs	r3, r3, #16
 800874e:	b29b      	uxth	r3, r3
}
 8008750:	4618      	mov	r0, r3
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr
 800875a:	bf00      	nop
 800875c:	e0042000 	.word	0xe0042000

08008760 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8008760:	b480      	push	{r7}
 8008762:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8008764:	4b05      	ldr	r3, [pc, #20]	; (800877c <LL_LPM_EnableSleep+0x1c>)
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	4a04      	ldr	r2, [pc, #16]	; (800877c <LL_LPM_EnableSleep+0x1c>)
 800876a:	f023 0304 	bic.w	r3, r3, #4
 800876e:	6113      	str	r3, [r2, #16]
}
 8008770:	bf00      	nop
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop
 800877c:	e000ed00 	.word	0xe000ed00

08008780 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	22ff      	movs	r2, #255	; 0xff
 800878c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800878e:	bf00      	nop
 8008790:	370c      	adds	r7, #12
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr

0800879a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800879a:	b480      	push	{r7}
 800879c:	b083      	sub	sp, #12
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	22ca      	movs	r2, #202	; 0xca
 80087a6:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2253      	movs	r2, #83	; 0x53
 80087ac:	625a      	str	r2, [r3, #36]	; 0x24
}
 80087ae:	bf00      	nop
 80087b0:	370c      	adds	r7, #12
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr

080087ba <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80087ba:	b480      	push	{r7}
 80087bc:	b083      	sub	sp, #12
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
 80087c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	f023 0207 	bic.w	r2, r3, #7
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	431a      	orrs	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	609a      	str	r2, [r3, #8]
}
 80087d4:	bf00      	nop
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80087e4:	4b04      	ldr	r3, [pc, #16]	; (80087f8 <MX_APPE_Config+0x18>)
 80087e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80087ea:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80087ec:	f000 f824 	bl	8008838 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80087f0:	f000 f829 	bl	8008846 <Config_HSE>

  return;
 80087f4:	bf00      	nop
}
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	58004000 	.word	0x58004000

080087fc <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8008800:	f000 f835 	bl	800886e <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8008804:	f000 f84e 	bl	80088a4 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8008808:	4903      	ldr	r1, [pc, #12]	; (8008818 <MX_APPE_Init+0x1c>)
 800880a:	2000      	movs	r0, #0
 800880c:	f001 faec 	bl	8009de8 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8008810:	f000 f856 	bl	80088c0 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8008814:	bf00      	nop
}
 8008816:	bd80      	pop	{r7, pc}
 8008818:	2000055c 	.word	0x2000055c

0800881c <Init_Smps>:

void Init_Smps(void)
{
 800881c:	b480      	push	{r7}
 800881e:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8008820:	bf00      	nop
}
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr

0800882a <Init_Exti>:

void Init_Exti(void)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800882e:	2050      	movs	r0, #80	; 0x50
 8008830:	f7ff ff34 	bl	800869c <LL_EXTI_EnableIT_32_63>

  return;
 8008834:	bf00      	nop
}
 8008836:	bd80      	pop	{r7, pc}

08008838 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8008838:	b480      	push	{r7}
 800883a:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 800883c:	bf00      	nop
}
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr

08008846 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8008846:	b580      	push	{r7, lr}
 8008848:	b082      	sub	sp, #8
 800884a:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800884c:	2000      	movs	r0, #0
 800884e:	f00e ffeb 	bl	8017828 <OTP_Read>
 8008852:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d005      	beq.n	8008866 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	799b      	ldrb	r3, [r3, #6]
 800885e:	4618      	mov	r0, r3
 8008860:	f7ff ff30 	bl	80086c4 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8008864:	bf00      	nop
 8008866:	bf00      	nop
}
 8008868:	3708      	adds	r7, #8
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <System_Init>:

static void System_Init(void)
{
 800886e:	b580      	push	{r7, lr}
 8008870:	af00      	add	r7, sp, #0
  Init_Smps();
 8008872:	f7ff ffd3 	bl	800881c <Init_Smps>

  Init_Exti();
 8008876:	f7ff ffd8 	bl	800882a <Init_Exti>

  Init_Rtc();
 800887a:	f000 f803 	bl	8008884 <Init_Rtc>

  return;
 800887e:	bf00      	nop
}
 8008880:	bd80      	pop	{r7, pc}
	...

08008884 <Init_Rtc>:

static void Init_Rtc(void)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8008888:	4805      	ldr	r0, [pc, #20]	; (80088a0 <Init_Rtc+0x1c>)
 800888a:	f7ff ff86 	bl	800879a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800888e:	2100      	movs	r1, #0
 8008890:	4803      	ldr	r0, [pc, #12]	; (80088a0 <Init_Rtc+0x1c>)
 8008892:	f7ff ff92 	bl	80087ba <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8008896:	4802      	ldr	r0, [pc, #8]	; (80088a0 <Init_Rtc+0x1c>)
 8008898:	f7ff ff72 	bl	8008780 <LL_RTC_EnableWriteProtection>

  return;
 800889c:	bf00      	nop
}
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	40002800 	.word	0x40002800

080088a4 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80088a8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80088ac:	f7ff ff28 	bl	8008700 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80088b0:	f00f fe30 	bl	8018514 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80088b4:	2004      	movs	r0, #4
 80088b6:	f7ff fedb 	bl	8008670 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80088ba:	bf00      	nop
}
 80088bc:	bd80      	pop	{r7, pc}
	...

080088c0 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b088      	sub	sp, #32
 80088c4:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 80088c6:	f00f fbe3 	bl	8018090 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80088ca:	4a11      	ldr	r2, [pc, #68]	; (8008910 <appe_Tl_Init+0x50>)
 80088cc:	2100      	movs	r1, #0
 80088ce:	2080      	movs	r0, #128	; 0x80
 80088d0:	f00f ff5e 	bl	8018790 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80088d4:	4b0f      	ldr	r3, [pc, #60]	; (8008914 <appe_Tl_Init+0x54>)
 80088d6:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80088d8:	4b0f      	ldr	r3, [pc, #60]	; (8008918 <appe_Tl_Init+0x58>)
 80088da:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80088dc:	463b      	mov	r3, r7
 80088de:	4619      	mov	r1, r3
 80088e0:	480e      	ldr	r0, [pc, #56]	; (800891c <appe_Tl_Init+0x5c>)
 80088e2:	f00f f8bb 	bl	8017a5c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80088e6:	4b0e      	ldr	r3, [pc, #56]	; (8008920 <appe_Tl_Init+0x60>)
 80088e8:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80088ea:	4b0e      	ldr	r3, [pc, #56]	; (8008924 <appe_Tl_Init+0x64>)
 80088ec:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80088ee:	4b0e      	ldr	r3, [pc, #56]	; (8008928 <appe_Tl_Init+0x68>)
 80088f0:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80088f2:	f240 533c 	movw	r3, #1340	; 0x53c
 80088f6:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80088f8:	f107 0308 	add.w	r3, r7, #8
 80088fc:	4618      	mov	r0, r3
 80088fe:	f00f fd09 	bl	8018314 <TL_MM_Init>

  TL_Enable();
 8008902:	f00f fbbf 	bl	8018084 <TL_Enable>

  return;
 8008906:	bf00      	nop
}
 8008908:	3720      	adds	r7, #32
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	08017a95 	.word	0x08017a95
 8008914:	20030734 	.word	0x20030734
 8008918:	0800892d 	.word	0x0800892d
 800891c:	08008945 	.word	0x08008945
 8008920:	2003094c 	.word	0x2003094c
 8008924:	20030840 	.word	0x20030840
 8008928:	200301f8 	.word	0x200301f8

0800892c <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 800892c:	b480      	push	{r7}
 800892e:	b083      	sub	sp, #12
 8008930:	af00      	add	r7, sp, #0
 8008932:	4603      	mov	r3, r0
 8008934:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8008936:	bf00      	nop
}
 8008938:	370c      	adds	r7, #12
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr
	...

08008944 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b088      	sub	sp, #32
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	330b      	adds	r3, #11
 8008952:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8008954:	69fb      	ldr	r3, [r7, #28]
 8008956:	881b      	ldrh	r3, [r3, #0]
 8008958:	b29b      	uxth	r3, r3
 800895a:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800895e:	2b07      	cmp	r3, #7
 8008960:	d81f      	bhi.n	80089a2 <APPE_SysUserEvtRx+0x5e>
 8008962:	a201      	add	r2, pc, #4	; (adr r2, 8008968 <APPE_SysUserEvtRx+0x24>)
 8008964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008968:	08008989 	.word	0x08008989
 800896c:	0800899b 	.word	0x0800899b
 8008970:	080089a3 	.word	0x080089a3
 8008974:	080089a3 	.word	0x080089a3
 8008978:	080089a3 	.word	0x080089a3
 800897c:	080089a3 	.word	0x080089a3
 8008980:	080089a3 	.word	0x080089a3
 8008984:	080089a3 	.word	0x080089a3
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8008988:	f107 030c 	add.w	r3, r7, #12
 800898c:	4618      	mov	r0, r3
 800898e:	f00e ffb7 	bl	8017900 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 f81b 	bl	80089ce <APPE_SysEvtReadyProcessing>
    break;
 8008998:	e004      	b.n	80089a4 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 f806 	bl	80089ac <APPE_SysEvtError>
    break;
 80089a0:	e000      	b.n	80089a4 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 80089a2:	bf00      	nop
  }

  return;
 80089a4:	bf00      	nop
}
 80089a6:	3720      	adds	r7, #32
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b085      	sub	sp, #20
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	330b      	adds	r3, #11
 80089ba:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	3302      	adds	r3, #2
 80089c0:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80089c2:	bf00      	nop
}
 80089c4:	3714      	adds	r7, #20
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr

080089ce <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b08a      	sub	sp, #40	; 0x28
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80089d6:	f107 0308 	add.w	r3, r7, #8
 80089da:	2200      	movs	r2, #0
 80089dc:	601a      	str	r2, [r3, #0]
 80089de:	605a      	str	r2, [r3, #4]
 80089e0:	609a      	str	r2, [r3, #8]
 80089e2:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80089e4:	2300      	movs	r3, #0
 80089e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 80089e8:	2300      	movs	r3, #0
 80089ea:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	330b      	adds	r3, #11
 80089f2:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80089f4:	69fb      	ldr	r3, [r7, #28]
 80089f6:	3302      	adds	r3, #2
 80089f8:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d11d      	bne.n	8008a3e <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8008a02:	f7ff fe19 	bl	8008638 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8008a06:	230f      	movs	r3, #15
 8008a08:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8008a0a:	237f      	movs	r3, #127	; 0x7f
 8008a0c:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8008a0e:	f7ff fe99 	bl	8008744 <LL_DBGMCU_GetRevisionID>
 8008a12:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8008a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8008a1a:	f7ff fe85 	bl	8008728 <LL_DBGMCU_GetDeviceID>
 8008a1e:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8008a20:	6a3b      	ldr	r3, [r7, #32]
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8008a26:	f107 0308 	add.w	r3, r7, #8
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f00e ff52 	bl	80178d4 <SHCI_C2_Config>

    APP_BLE_Init();
 8008a30:	f003 fb22 	bl	800c078 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8008a34:	2100      	movs	r1, #0
 8008a36:	2001      	movs	r0, #1
 8008a38:	f00f fd7e 	bl	8018538 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8008a3c:	e007      	b.n	8008a4e <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8008a3e:	69bb      	ldr	r3, [r7, #24]
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d103      	bne.n	8008a4e <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	701a      	strb	r2, [r3, #0]
  return;
 8008a4c:	bf00      	nop
 8008a4e:	bf00      	nop
}
 8008a50:	3728      	adds	r7, #40	; 0x28
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b084      	sub	sp, #16
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008a5e:	f006 fb47 	bl	800f0f0 <HAL_GetTick>
 8008a62:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a6e:	d00a      	beq.n	8008a86 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8008a70:	f006 fb56 	bl	800f120 <HAL_GetTickFreq>
 8008a74:	4603      	mov	r3, r0
 8008a76:	461a      	mov	r2, r3
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008a7e:	e002      	b.n	8008a86 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8008a80:	f7ff fe6e 	bl	8008760 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 8008a84:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8008a86:	f006 fb33 	bl	800f0f0 <HAL_GetTick>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	1ad3      	subs	r3, r2, r3
 8008a90:	68fa      	ldr	r2, [r7, #12]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d8f4      	bhi.n	8008a80 <HAL_Delay+0x2a>
  }
}
 8008a96:	bf00      	nop
 8008a98:	bf00      	nop
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8008aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa8:	f00f fd76 	bl	8018598 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8008aac:	bf00      	nop
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8008ab4:	bf00      	nop
}
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr

08008abe <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b082      	sub	sp, #8
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
 8008ac6:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8008ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8008acc:	f00f fd64 	bl	8018598 <UTIL_SEQ_Run>
  return;
 8008ad0:	bf00      	nop
}
 8008ad2:	3708      	adds	r7, #8
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8008ae0:	2100      	movs	r1, #0
 8008ae2:	2080      	movs	r0, #128	; 0x80
 8008ae4:	f00f fe76 	bl	80187d4 <UTIL_SEQ_SetTask>
  return;
 8008ae8:	bf00      	nop
}
 8008aea:	3708      	adds	r7, #8
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8008af8:	2002      	movs	r0, #2
 8008afa:	f00f fefd 	bl	80188f8 <UTIL_SEQ_SetEvt>
  return;
 8008afe:	bf00      	nop
}
 8008b00:	3708      	adds	r7, #8
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b082      	sub	sp, #8
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8008b0e:	2002      	movs	r0, #2
 8008b10:	f00f ff12 	bl	8018938 <UTIL_SEQ_WaitEvt>
  return;
 8008b14:	bf00      	nop
}
 8008b16:	3708      	adds	r7, #8
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <LL_AHB1_GRP1_EnableClock>:
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b085      	sub	sp, #20
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8008b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	4313      	orrs	r3, r2
 8008b32:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8008b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	4013      	ands	r3, r2
 8008b3e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008b40:	68fb      	ldr	r3, [r7, #12]
}
 8008b42:	bf00      	nop
 8008b44:	3714      	adds	r7, #20
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr

08008b4e <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8008b52:	2004      	movs	r0, #4
 8008b54:	f7ff ffe2 	bl	8008b1c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008b58:	2001      	movs	r0, #1
 8008b5a:	f7ff ffdf 	bl	8008b1c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8008b5e:	2200      	movs	r2, #0
 8008b60:	2100      	movs	r1, #0
 8008b62:	200b      	movs	r0, #11
 8008b64:	f007 ff07 	bl	8010976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8008b68:	200b      	movs	r0, #11
 8008b6a:	f007 ff1e 	bl	80109aa <HAL_NVIC_EnableIRQ>

}
 8008b6e:	bf00      	nop
 8008b70:	bd80      	pop	{r7, pc}
	...

08008b74 <Write_Enable>:
	  	  			return ret;
	  	  			}
	  	  		return HAL_OK;
}
uint8_t Write_Enable(void)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b094      	sub	sp, #80	; 0x50
 8008b78:	af00      	add	r7, sp, #0
	uint8_t ret;
	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;
	/* Enable write operations */
	  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8008b7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b7e:	633b      	str	r3, [r7, #48]	; 0x30
	  sCommand.Instruction       = WRITE_ENABLE_CMD;
 8008b80:	2306      	movs	r3, #6
 8008b82:	61bb      	str	r3, [r7, #24]
	  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8008b84:	2300      	movs	r3, #0
 8008b86:	637b      	str	r3, [r7, #52]	; 0x34
	  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	63bb      	str	r3, [r7, #56]	; 0x38
	  sCommand.DataMode          = QSPI_DATA_NONE;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
	  sCommand.DummyCycles       = 0;
 8008b90:	2300      	movs	r3, #0
 8008b92:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8008b94:	2300      	movs	r3, #0
 8008b96:	647b      	str	r3, [r7, #68]	; 0x44
	  //sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
	  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	64bb      	str	r3, [r7, #72]	; 0x48
	  ret=HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8008b9c:	f107 0318 	add.w	r3, r7, #24
 8008ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	481b      	ldr	r0, [pc, #108]	; (8008c14 <Write_Enable+0xa0>)
 8008ba8:	f009 fe4c 	bl	8012844 <HAL_QSPI_Command>
 8008bac:	4603      	mov	r3, r0
 8008bae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	  if (ret != HAL_OK) {
 8008bb2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d002      	beq.n	8008bc0 <Write_Enable+0x4c>
	    return ret;
 8008bba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008bbe:	e024      	b.n	8008c0a <Write_Enable+0x96>
	  }

	  /* Configure automatic polling mode to wait for write enabling */
	  sConfig.Match           = MX25R6435F_SR_WEL;
 8008bc0:	2302      	movs	r3, #2
 8008bc2:	603b      	str	r3, [r7, #0]
	  sConfig.Mask            = MX25R6435F_SR_WEL;
 8008bc4:	2302      	movs	r3, #2
 8008bc6:	607b      	str	r3, [r7, #4]
	  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	613b      	str	r3, [r7, #16]
	  sConfig.StatusBytesSize = 1;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	60fb      	str	r3, [r7, #12]
	  sConfig.Interval        = 0x10;
 8008bd0:	2310      	movs	r3, #16
 8008bd2:	60bb      	str	r3, [r7, #8]
	  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8008bd4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008bd8:	617b      	str	r3, [r7, #20]

	  sCommand.Instruction    = READ_STATUS_REG_CMD;
 8008bda:	2305      	movs	r3, #5
 8008bdc:	61bb      	str	r3, [r7, #24]
	  sCommand.DataMode       = QSPI_DATA_1_LINE;
 8008bde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008be2:	63fb      	str	r3, [r7, #60]	; 0x3c
	  ret=HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8008be4:	463a      	mov	r2, r7
 8008be6:	f107 0118 	add.w	r1, r7, #24
 8008bea:	f241 3388 	movw	r3, #5000	; 0x1388
 8008bee:	4809      	ldr	r0, [pc, #36]	; (8008c14 <Write_Enable+0xa0>)
 8008bf0:	f009 ffb5 	bl	8012b5e <HAL_QSPI_AutoPolling>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	  if (ret != HAL_OK) {
 8008bfa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d002      	beq.n	8008c08 <Write_Enable+0x94>
	    return ret;
 8008c02:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008c06:	e000      	b.n	8008c0a <Write_Enable+0x96>
	  }


	  return HAL_OK;
 8008c08:	2300      	movs	r3, #0
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3750      	adds	r7, #80	; 0x50
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	20000518 	.word	0x20000518

08008c18 <FL_QUADSPI_Init>:
uint8_t FL_QUADSPI_Init(void) {
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	af00      	add	r7, sp, #0
	//prepare QSPI peripheral for ST-Link Utility operations
	hqspi.Instance = QUADSPI;
 8008c1c:	4b17      	ldr	r3, [pc, #92]	; (8008c7c <FL_QUADSPI_Init+0x64>)
 8008c1e:	4a18      	ldr	r2, [pc, #96]	; (8008c80 <FL_QUADSPI_Init+0x68>)
 8008c20:	601a      	str	r2, [r3, #0]
	if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 8008c22:	4816      	ldr	r0, [pc, #88]	; (8008c7c <FL_QUADSPI_Init+0x64>)
 8008c24:	f009 fc30 	bl	8012488 <HAL_QSPI_DeInit>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d001      	beq.n	8008c32 <FL_QUADSPI_Init+0x1a>
		return HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e021      	b.n	8008c76 <FL_QUADSPI_Init+0x5e>
	}

	MX_QUADSPI_Init();
 8008c32:	f002 fe85 	bl	800b940 <MX_QUADSPI_Init>

	if (QSPI_ResetChip() != HAL_OK) {
 8008c36:	f000 f825 	bl	8008c84 <QSPI_ResetChip>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d001      	beq.n	8008c44 <FL_QUADSPI_Init+0x2c>
		return HAL_ERROR;
 8008c40:	2301      	movs	r3, #1
 8008c42:	e018      	b.n	8008c76 <FL_QUADSPI_Init+0x5e>
	}

	HAL_Delay(1);
 8008c44:	2001      	movs	r0, #1
 8008c46:	f7ff ff06 	bl	8008a56 <HAL_Delay>

	if (QSPI_AutoPollingMemReady() != HAL_OK) {
 8008c4a:	f000 fa63 	bl	8009114 <QSPI_AutoPollingMemReady>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d001      	beq.n	8008c58 <FL_QUADSPI_Init+0x40>
		return HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	e00e      	b.n	8008c76 <FL_QUADSPI_Init+0x5e>
	}

	if (Write_Enable() != HAL_OK) {
 8008c58:	f7ff ff8c 	bl	8008b74 <Write_Enable>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d001      	beq.n	8008c66 <FL_QUADSPI_Init+0x4e>

		return HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	e007      	b.n	8008c76 <FL_QUADSPI_Init+0x5e>
	}

	if (QSPI_Configuration() != HAL_OK) {
 8008c66:	f000 f903 	bl	8008e70 <QSPI_Configuration>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d001      	beq.n	8008c74 <FL_QUADSPI_Init+0x5c>
		return HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	e000      	b.n	8008c76 <FL_QUADSPI_Init+0x5e>
	}

	return HAL_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	20000518 	.word	0x20000518
 8008c80:	a0001000 	.word	0xa0001000

08008c84 <QSPI_ResetChip>:
uint8_t QSPI_ResetChip(void) {
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b08e      	sub	sp, #56	; 0x38
 8008c88:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	uint32_t temp = 0;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	637b      	str	r3, [r7, #52]	; 0x34
	/* Erasing Sequence -------------------------------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8008c8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c92:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8008c94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008c98:	60fb      	str	r3, [r7, #12]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	623b      	str	r3, [r7, #32]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
	////sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Instruction = RESET_ENABLE_CMD;
 8008ca6:	2366      	movs	r3, #102	; 0x66
 8008ca8:	603b      	str	r3, [r7, #0]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8008caa:	2300      	movs	r3, #0
 8008cac:	61fb      	str	r3, [r7, #28]
	sCommand.Address = 0;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	607b      	str	r3, [r7, #4]
	sCommand.DataMode = QSPI_DATA_NONE;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DummyCycles = 0;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	617b      	str	r3, [r7, #20]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE)!= HAL_OK) {
 8008cba:	463b      	mov	r3, r7
 8008cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	486a      	ldr	r0, [pc, #424]	; (8008e6c <QSPI_ResetChip+0x1e8>)
 8008cc4:	f009 fdbe 	bl	8012844 <HAL_QSPI_Command>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d001      	beq.n	8008cd2 <QSPI_ResetChip+0x4e>
		return HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e0c8      	b.n	8008e64 <QSPI_ResetChip+0x1e0>
	}
	for (temp = 0; temp < 0x2f; temp++) {
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	637b      	str	r3, [r7, #52]	; 0x34
 8008cd6:	e003      	b.n	8008ce0 <QSPI_ResetChip+0x5c>
		__NOP();
 8008cd8:	bf00      	nop
	for (temp = 0; temp < 0x2f; temp++) {
 8008cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cdc:	3301      	adds	r3, #1
 8008cde:	637b      	str	r3, [r7, #52]	; 0x34
 8008ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ce2:	2b2e      	cmp	r3, #46	; 0x2e
 8008ce4:	d9f8      	bls.n	8008cd8 <QSPI_ResetChip+0x54>
	}

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8008ce6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cea:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8008cec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008cf0:	60fb      	str	r3, [r7, #12]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	623b      	str	r3, [r7, #32]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
	//sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Instruction = RESET_EXECUTE_CMD;
 8008cfe:	2399      	movs	r3, #153	; 0x99
 8008d00:	603b      	str	r3, [r7, #0]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8008d02:	2300      	movs	r3, #0
 8008d04:	61fb      	str	r3, [r7, #28]
	sCommand.Address = 0;
 8008d06:	2300      	movs	r3, #0
 8008d08:	607b      	str	r3, [r7, #4]
	sCommand.DataMode = QSPI_DATA_NONE;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DummyCycles = 0;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	617b      	str	r3, [r7, #20]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE)
 8008d12:	463b      	mov	r3, r7
 8008d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d18:	4619      	mov	r1, r3
 8008d1a:	4854      	ldr	r0, [pc, #336]	; (8008e6c <QSPI_ResetChip+0x1e8>)
 8008d1c:	f009 fd92 	bl	8012844 <HAL_QSPI_Command>
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d001      	beq.n	8008d2a <QSPI_ResetChip+0xa6>
			!= HAL_OK) {
		return HAL_ERROR;
 8008d26:	2301      	movs	r3, #1
 8008d28:	e09c      	b.n	8008e64 <QSPI_ResetChip+0x1e0>
	}

	/* Erasing Sequence -------------------------------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_2_LINES;
 8008d2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d2e:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8008d30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008d34:	60fb      	str	r3, [r7, #12]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008d36:	2300      	movs	r3, #0
 8008d38:	623b      	str	r3, [r7, #32]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	//sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Instruction = RESET_ENABLE_CMD;
 8008d42:	2366      	movs	r3, #102	; 0x66
 8008d44:	603b      	str	r3, [r7, #0]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8008d46:	2300      	movs	r3, #0
 8008d48:	61fb      	str	r3, [r7, #28]
	sCommand.Address = 0;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	607b      	str	r3, [r7, #4]
	sCommand.DataMode = QSPI_DATA_NONE;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DummyCycles = 0;
 8008d52:	2300      	movs	r3, #0
 8008d54:	617b      	str	r3, [r7, #20]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE)
 8008d56:	463b      	mov	r3, r7
 8008d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	4843      	ldr	r0, [pc, #268]	; (8008e6c <QSPI_ResetChip+0x1e8>)
 8008d60:	f009 fd70 	bl	8012844 <HAL_QSPI_Command>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d001      	beq.n	8008d6e <QSPI_ResetChip+0xea>
			!= HAL_OK) {
		return HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e07a      	b.n	8008e64 <QSPI_ResetChip+0x1e0>
	}
	for (temp = 0; temp < 0x2f; temp++) {
 8008d6e:	2300      	movs	r3, #0
 8008d70:	637b      	str	r3, [r7, #52]	; 0x34
 8008d72:	e003      	b.n	8008d7c <QSPI_ResetChip+0xf8>
		__NOP();
 8008d74:	bf00      	nop
	for (temp = 0; temp < 0x2f; temp++) {
 8008d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d78:	3301      	adds	r3, #1
 8008d7a:	637b      	str	r3, [r7, #52]	; 0x34
 8008d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d7e:	2b2e      	cmp	r3, #46	; 0x2e
 8008d80:	d9f8      	bls.n	8008d74 <QSPI_ResetChip+0xf0>
	}

	sCommand.InstructionMode = QSPI_INSTRUCTION_2_LINES;
 8008d82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d86:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8008d88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008d8c:	60fb      	str	r3, [r7, #12]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	623b      	str	r3, [r7, #32]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8008d92:	2300      	movs	r3, #0
 8008d94:	62fb      	str	r3, [r7, #44]	; 0x2c
	//sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8008d96:	2300      	movs	r3, #0
 8008d98:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Instruction = RESET_EXECUTE_CMD;
 8008d9a:	2399      	movs	r3, #153	; 0x99
 8008d9c:	603b      	str	r3, [r7, #0]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	61fb      	str	r3, [r7, #28]
	sCommand.Address = 0;
 8008da2:	2300      	movs	r3, #0
 8008da4:	607b      	str	r3, [r7, #4]
	sCommand.DataMode = QSPI_DATA_NONE;
 8008da6:	2300      	movs	r3, #0
 8008da8:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DummyCycles = 0;
 8008daa:	2300      	movs	r3, #0
 8008dac:	617b      	str	r3, [r7, #20]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE)
 8008dae:	463b      	mov	r3, r7
 8008db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008db4:	4619      	mov	r1, r3
 8008db6:	482d      	ldr	r0, [pc, #180]	; (8008e6c <QSPI_ResetChip+0x1e8>)
 8008db8:	f009 fd44 	bl	8012844 <HAL_QSPI_Command>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d001      	beq.n	8008dc6 <QSPI_ResetChip+0x142>
			!= HAL_OK) {
		return HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e04e      	b.n	8008e64 <QSPI_ResetChip+0x1e0>
	}

	/* Erasing Sequence -------------------------------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8008dc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008dca:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8008dcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008dd0:	60fb      	str	r3, [r7, #12]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	623b      	str	r3, [r7, #32]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	//sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Instruction = RESET_ENABLE_CMD;
 8008dde:	2366      	movs	r3, #102	; 0x66
 8008de0:	603b      	str	r3, [r7, #0]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8008de2:	2300      	movs	r3, #0
 8008de4:	61fb      	str	r3, [r7, #28]
	sCommand.Address = 0;
 8008de6:	2300      	movs	r3, #0
 8008de8:	607b      	str	r3, [r7, #4]
	sCommand.DataMode = QSPI_DATA_NONE;
 8008dea:	2300      	movs	r3, #0
 8008dec:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DummyCycles = 0;
 8008dee:	2300      	movs	r3, #0
 8008df0:	617b      	str	r3, [r7, #20]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE)
 8008df2:	463b      	mov	r3, r7
 8008df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008df8:	4619      	mov	r1, r3
 8008dfa:	481c      	ldr	r0, [pc, #112]	; (8008e6c <QSPI_ResetChip+0x1e8>)
 8008dfc:	f009 fd22 	bl	8012844 <HAL_QSPI_Command>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d001      	beq.n	8008e0a <QSPI_ResetChip+0x186>
			!= HAL_OK) {
		return HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
 8008e08:	e02c      	b.n	8008e64 <QSPI_ResetChip+0x1e0>
	}
	for (temp = 0; temp < 0x2f; temp++) {
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8008e0e:	e003      	b.n	8008e18 <QSPI_ResetChip+0x194>
		__NOP();
 8008e10:	bf00      	nop
	for (temp = 0; temp < 0x2f; temp++) {
 8008e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e14:	3301      	adds	r3, #1
 8008e16:	637b      	str	r3, [r7, #52]	; 0x34
 8008e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e1a:	2b2e      	cmp	r3, #46	; 0x2e
 8008e1c:	d9f8      	bls.n	8008e10 <QSPI_ResetChip+0x18c>
	}

	sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8008e1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008e22:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8008e24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008e28:	60fb      	str	r3, [r7, #12]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	623b      	str	r3, [r7, #32]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	62fb      	str	r3, [r7, #44]	; 0x2c
	//sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8008e32:	2300      	movs	r3, #0
 8008e34:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Instruction = RESET_EXECUTE_CMD;
 8008e36:	2399      	movs	r3, #153	; 0x99
 8008e38:	603b      	str	r3, [r7, #0]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	61fb      	str	r3, [r7, #28]
	sCommand.Address = 0;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	607b      	str	r3, [r7, #4]
	sCommand.DataMode = QSPI_DATA_NONE;
 8008e42:	2300      	movs	r3, #0
 8008e44:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DummyCycles = 0;
 8008e46:	2300      	movs	r3, #0
 8008e48:	617b      	str	r3, [r7, #20]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE)
 8008e4a:	463b      	mov	r3, r7
 8008e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e50:	4619      	mov	r1, r3
 8008e52:	4806      	ldr	r0, [pc, #24]	; (8008e6c <QSPI_ResetChip+0x1e8>)
 8008e54:	f009 fcf6 	bl	8012844 <HAL_QSPI_Command>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d001      	beq.n	8008e62 <QSPI_ResetChip+0x1de>
			!= HAL_OK) {
		return HAL_ERROR;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e000      	b.n	8008e64 <QSPI_ResetChip+0x1e0>
	}

	return HAL_OK;
 8008e62:	2300      	movs	r3, #0
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3738      	adds	r7, #56	; 0x38
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	20000518 	.word	0x20000518

08008e70 <QSPI_Configuration>:
uint8_t QSPI_Configuration(void) {
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b08e      	sub	sp, #56	; 0x38
 8008e74:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	uint8_t test_buffer[4] = { 0 };
 8008e76:	2300      	movs	r3, #0
 8008e78:	603b      	str	r3, [r7, #0]
	/*read status register*/
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8008e7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e7e:	61fb      	str	r3, [r7, #28]
	sCommand.Instruction = READ_STATUS_REG_CMD;
 8008e80:	2305      	movs	r3, #5
 8008e82:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8008e84:	2300      	movs	r3, #0
 8008e86:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8008e8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e90:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8008e92:	2300      	movs	r3, #0
 8008e94:	61bb      	str	r3, [r7, #24]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8008e96:	2300      	movs	r3, #0
 8008e98:	633b      	str	r3, [r7, #48]	; 0x30
	//sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.NbData = 1;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE)
 8008ea2:	1d3b      	adds	r3, r7, #4
 8008ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	4840      	ldr	r0, [pc, #256]	; (8008fac <QSPI_Configuration+0x13c>)
 8008eac:	f009 fcca 	bl	8012844 <HAL_QSPI_Command>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d001      	beq.n	8008eba <QSPI_Configuration+0x4a>
			!= HAL_OK) {
		return HAL_ERROR;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	e074      	b.n	8008fa4 <QSPI_Configuration+0x134>
	}
	if (HAL_QSPI_Receive(&hqspi, test_buffer,
 8008eba:	463b      	mov	r3, r7
 8008ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	483a      	ldr	r0, [pc, #232]	; (8008fac <QSPI_Configuration+0x13c>)
 8008ec4:	f009 fdae 	bl	8012a24 <HAL_QSPI_Receive>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d001      	beq.n	8008ed2 <QSPI_Configuration+0x62>
	HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e068      	b.n	8008fa4 <QSPI_Configuration+0x134>
	}
	/*read configuration register*/
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8008ed2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ed6:	61fb      	str	r3, [r7, #28]
	sCommand.Instruction = READ_CFG_REG_CMD ;
 8008ed8:	2315      	movs	r3, #21
 8008eda:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8008edc:	2300      	movs	r3, #0
 8008ede:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8008ee4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ee8:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8008eea:	2300      	movs	r3, #0
 8008eec:	61bb      	str	r3, [r7, #24]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	633b      	str	r3, [r7, #48]	; 0x30
	//sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.NbData = 1;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE)
 8008efa:	1d3b      	adds	r3, r7, #4
 8008efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f00:	4619      	mov	r1, r3
 8008f02:	482a      	ldr	r0, [pc, #168]	; (8008fac <QSPI_Configuration+0x13c>)
 8008f04:	f009 fc9e 	bl	8012844 <HAL_QSPI_Command>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d001      	beq.n	8008f12 <QSPI_Configuration+0xa2>
			!= HAL_OK) {
		return HAL_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e048      	b.n	8008fa4 <QSPI_Configuration+0x134>
	}
	if (HAL_QSPI_Receive(&hqspi, &(test_buffer[1]),
 8008f12:	463b      	mov	r3, r7
 8008f14:	3301      	adds	r3, #1
 8008f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	4823      	ldr	r0, [pc, #140]	; (8008fac <QSPI_Configuration+0x13c>)
 8008f1e:	f009 fd81 	bl	8012a24 <HAL_QSPI_Receive>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d001      	beq.n	8008f2c <QSPI_Configuration+0xbc>
	HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	e03b      	b.n	8008fa4 <QSPI_Configuration+0x134>
	}
	/*modify buffer to enable quad mode*/
	test_buffer[0] |= 0x40;
 8008f2c:	783b      	ldrb	r3, [r7, #0]
 8008f2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	703b      	strb	r3, [r7, #0]

	/*set dummy cycles*/
	test_buffer[1] |= 0xC0;
 8008f36:	787b      	ldrb	r3, [r7, #1]
 8008f38:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	707b      	strb	r3, [r7, #1]

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8008f40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f44:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8008f46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008f4a:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8008f50:	2300      	movs	r3, #0
 8008f52:	633b      	str	r3, [r7, #48]	; 0x30
	//sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8008f54:	2300      	movs	r3, #0
 8008f56:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	623b      	str	r3, [r7, #32]
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8008f60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008f64:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8008f66:	2300      	movs	r3, #0
 8008f68:	61bb      	str	r3, [r7, #24]
	sCommand.NbData = 2;
 8008f6a:	2302      	movs	r3, #2
 8008f6c:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE)
 8008f6e:	1d3b      	adds	r3, r7, #4
 8008f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f74:	4619      	mov	r1, r3
 8008f76:	480d      	ldr	r0, [pc, #52]	; (8008fac <QSPI_Configuration+0x13c>)
 8008f78:	f009 fc64 	bl	8012844 <HAL_QSPI_Command>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d001      	beq.n	8008f86 <QSPI_Configuration+0x116>
			!= HAL_OK) {
		return HAL_ERROR;
 8008f82:	2301      	movs	r3, #1
 8008f84:	e00e      	b.n	8008fa4 <QSPI_Configuration+0x134>
	}

	if (HAL_QSPI_Transmit(&hqspi, test_buffer,
 8008f86:	463b      	mov	r3, r7
 8008f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	4807      	ldr	r0, [pc, #28]	; (8008fac <QSPI_Configuration+0x13c>)
 8008f90:	f009 fcb6 	bl	8012900 <HAL_QSPI_Transmit>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d003      	beq.n	8008fa2 <QSPI_Configuration+0x132>
	HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		Error_Handler();
 8008f9a:	f001 fc07 	bl	800a7ac <Error_Handler>
		return HAL_ERROR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	e000      	b.n	8008fa4 <QSPI_Configuration+0x134>
	}
	return HAL_OK;
 8008fa2:	2300      	movs	r3, #0
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3738      	adds	r7, #56	; 0x38
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	20000518 	.word	0x20000518

08008fb0 <Quad_Enable>:

uint8_t Quad_Enable(void)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b08e      	sub	sp, #56	; 0x38
 8008fb4:	af00      	add	r7, sp, #0
	uint8_t ret,reg;
	QSPI_CommandTypeDef sCommand;
	  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8008fb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fba:	61bb      	str	r3, [r7, #24]
	  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8008fbc:	2305      	movs	r3, #5
 8008fbe:	603b      	str	r3, [r7, #0]
	  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	61fb      	str	r3, [r7, #28]
	  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	623b      	str	r3, [r7, #32]
	  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8008fc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008fcc:	627b      	str	r3, [r7, #36]	; 0x24
	  sCommand.DummyCycles       = 0;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	617b      	str	r3, [r7, #20]
	  sCommand.NbData            = 1;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	62bb      	str	r3, [r7, #40]	; 0x28
	  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	  //sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
	  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	633b      	str	r3, [r7, #48]	; 0x30
	  ret=HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8008fde:	463b      	mov	r3, r7
 8008fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	4849      	ldr	r0, [pc, #292]	; (800910c <Quad_Enable+0x15c>)
 8008fe8:	f009 fc2c 	bl	8012844 <HAL_QSPI_Command>
 8008fec:	4603      	mov	r3, r0
 8008fee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  if (ret != HAL_OK) {
 8008ff2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d002      	beq.n	8009000 <Quad_Enable+0x50>
	    return ret;
 8008ffa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008ffe:	e081      	b.n	8009104 <Quad_Enable+0x154>
	  }
	  ret=HAL_QSPI_Receive(&hqspi, &reg, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8009000:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8009004:	f241 3288 	movw	r2, #5000	; 0x1388
 8009008:	4619      	mov	r1, r3
 800900a:	4840      	ldr	r0, [pc, #256]	; (800910c <Quad_Enable+0x15c>)
 800900c:	f009 fd0a 	bl	8012a24 <HAL_QSPI_Receive>
 8009010:	4603      	mov	r3, r0
 8009012:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  if (ret != HAL_OK) {
 8009016:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800901a:	2b00      	cmp	r3, #0
 800901c:	d002      	beq.n	8009024 <Quad_Enable+0x74>
	  	    return ret;
 800901e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009022:	e06f      	b.n	8009104 <Quad_Enable+0x154>
	  	  }
	  if(Write_Enable()!=HAL_OK)
 8009024:	f7ff fda6 	bl	8008b74 <Write_Enable>
 8009028:	4603      	mov	r3, r0
 800902a:	2b00      	cmp	r3, #0
 800902c:	d002      	beq.n	8009034 <Quad_Enable+0x84>
		  {
		  return ret;
 800902e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009032:	e067      	b.n	8009104 <Quad_Enable+0x154>
		  }
	  SET_BIT(reg, MX25R6435F_SR_QE);
 8009034:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800903c:	b2db      	uxtb	r3, r3
 800903e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8009042:	2301      	movs	r3, #1
 8009044:	603b      	str	r3, [r7, #0]
	  ret=HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8009046:	463b      	mov	r3, r7
 8009048:	f241 3288 	movw	r2, #5000	; 0x1388
 800904c:	4619      	mov	r1, r3
 800904e:	482f      	ldr	r0, [pc, #188]	; (800910c <Quad_Enable+0x15c>)
 8009050:	f009 fbf8 	bl	8012844 <HAL_QSPI_Command>
 8009054:	4603      	mov	r3, r0
 8009056:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  if (ret != HAL_OK) {
 800905a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800905e:	2b00      	cmp	r3, #0
 8009060:	d002      	beq.n	8009068 <Quad_Enable+0xb8>
	  	    return ret;
 8009062:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009066:	e04d      	b.n	8009104 <Quad_Enable+0x154>
	  	  }
	  ret=HAL_QSPI_Transmit(&hqspi, &reg, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8009068:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800906c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009070:	4619      	mov	r1, r3
 8009072:	4826      	ldr	r0, [pc, #152]	; (800910c <Quad_Enable+0x15c>)
 8009074:	f009 fc44 	bl	8012900 <HAL_QSPI_Transmit>
 8009078:	4603      	mov	r3, r0
 800907a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  if (ret != HAL_OK) {
 800907e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009082:	2b00      	cmp	r3, #0
 8009084:	d002      	beq.n	800908c <Quad_Enable+0xdc>
	 	  	    return ret;
 8009086:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800908a:	e03b      	b.n	8009104 <Quad_Enable+0x154>
	 	  	  }
	  ret=QSPI_AutoPollingMemReady();
 800908c:	f000 f842 	bl	8009114 <QSPI_AutoPollingMemReady>
 8009090:	4603      	mov	r3, r0
 8009092:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  if (ret != HAL_OK) {
 8009096:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800909a:	2b00      	cmp	r3, #0
 800909c:	d002      	beq.n	80090a4 <Quad_Enable+0xf4>
	 	 	  	    return ret;
 800909e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80090a2:	e02f      	b.n	8009104 <Quad_Enable+0x154>
	 	 	  	  }
	  sCommand.Instruction = READ_STATUS_REG_CMD;
 80090a4:	2305      	movs	r3, #5
 80090a6:	603b      	str	r3, [r7, #0]
	  ret=HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80090a8:	463b      	mov	r3, r7
 80090aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80090ae:	4619      	mov	r1, r3
 80090b0:	4816      	ldr	r0, [pc, #88]	; (800910c <Quad_Enable+0x15c>)
 80090b2:	f009 fbc7 	bl	8012844 <HAL_QSPI_Command>
 80090b6:	4603      	mov	r3, r0
 80090b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  	  if (ret != HAL_OK) {
 80090bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d002      	beq.n	80090ca <Quad_Enable+0x11a>
	  	  	    return ret;
 80090c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80090c8:	e01c      	b.n	8009104 <Quad_Enable+0x154>
	  	  	  }
	 ret=HAL_QSPI_Receive(&hqspi, &reg, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80090ca:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80090ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80090d2:	4619      	mov	r1, r3
 80090d4:	480d      	ldr	r0, [pc, #52]	; (800910c <Quad_Enable+0x15c>)
 80090d6:	f009 fca5 	bl	8012a24 <HAL_QSPI_Receive>
 80090da:	4603      	mov	r3, r0
 80090dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  		  if (ret != HAL_OK) {
 80090e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d002      	beq.n	80090ee <Quad_Enable+0x13e>
	  		  	    return ret;
 80090e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80090ec:	e00a      	b.n	8009104 <Quad_Enable+0x154>
	  		  	  }
	  		if((reg & MX25R6435F_SR_QE) == 0){
 80090ee:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80090f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d102      	bne.n	8009100 <Quad_Enable+0x150>
	  		     printf("QUAD enable\n");
 80090fa:	4805      	ldr	r0, [pc, #20]	; (8009110 <Quad_Enable+0x160>)
 80090fc:	f010 fbf0 	bl	80198e0 <puts>
	  		  }
	  		return ret;
 8009100:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8009104:	4618      	mov	r0, r3
 8009106:	3738      	adds	r7, #56	; 0x38
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}
 800910c:	20000518 	.word	0x20000518
 8009110:	0801d744 	.word	0x0801d744

08009114 <QSPI_AutoPollingMemReady>:

uint8_t QSPI_AutoPollingMemReady(void)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b094      	sub	sp, #80	; 0x50
 8009118:	af00      	add	r7, sp, #0
	uint8_t ret;
	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;
	sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800911a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800911e:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Instruction       = READ_STATUS_REG_CMD;
 8009120:	2305      	movs	r3, #5
 8009122:	61bb      	str	r3, [r7, #24]
	sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8009124:	2300      	movs	r3, #0
 8009126:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009128:	2300      	movs	r3, #0
 800912a:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode          = QSPI_DATA_1_LINE;
 800912c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009130:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles       = 0;
 8009132:	2300      	movs	r3, #0
 8009134:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8009136:	2300      	movs	r3, #0
 8009138:	647b      	str	r3, [r7, #68]	; 0x44

	//sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800913a:	2300      	movs	r3, #0
 800913c:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfig.Match           = 0;
 800913e:	2300      	movs	r3, #0
 8009140:	603b      	str	r3, [r7, #0]
	sConfig.Mask            = MX25R6435F_SR_WIP;
 8009142:	2301      	movs	r3, #1
 8009144:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8009146:	2300      	movs	r3, #0
 8009148:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 800914a:	2301      	movs	r3, #1
 800914c:	60fb      	str	r3, [r7, #12]
	sConfig.Interval        = 0x10;
 800914e:	2310      	movs	r3, #16
 8009150:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8009152:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009156:	617b      	str	r3, [r7, #20]
	ret=HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8009158:	463a      	mov	r2, r7
 800915a:	f107 0118 	add.w	r1, r7, #24
 800915e:	f241 3388 	movw	r3, #5000	; 0x1388
 8009162:	4809      	ldr	r0, [pc, #36]	; (8009188 <QSPI_AutoPollingMemReady+0x74>)
 8009164:	f009 fcfb 	bl	8012b5e <HAL_QSPI_AutoPolling>
 8009168:	4603      	mov	r3, r0
 800916a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if(ret != HAL_OK)
 800916e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009172:	2b00      	cmp	r3, #0
 8009174:	d002      	beq.n	800917c <QSPI_AutoPollingMemReady+0x68>
	{
		return ret;
 8009176:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800917a:	e000      	b.n	800917e <QSPI_AutoPollingMemReady+0x6a>

	}
	return HAL_OK;
 800917c:	2300      	movs	r3, #0
}
 800917e:	4618      	mov	r0, r3
 8009180:	3750      	adds	r7, #80	; 0x50
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	20000518 	.word	0x20000518

0800918c <Quad_Read>:
uint8_t Quad_Read(uint8_t *pData,uint32_t Read_ADDr,uint32_t Size)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b092      	sub	sp, #72	; 0x48
 8009190:	af00      	add	r7, sp, #0
 8009192:	60f8      	str	r0, [r7, #12]
 8009194:	60b9      	str	r1, [r7, #8]
 8009196:	607a      	str	r2, [r7, #4]
	uint8_t ret;
	ret=Quad_Enable();
 8009198:	f7ff ff0a 	bl	8008fb0 <Quad_Enable>
 800919c:	4603      	mov	r3, r0
 800919e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if(ret==HAL_OK)
 80091a2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d102      	bne.n	80091b0 <Quad_Read+0x24>
	{
		printf("Quad_enable");
 80091aa:	4828      	ldr	r0, [pc, #160]	; (800924c <Quad_Read+0xc0>)
 80091ac:	f010 fb12 	bl	80197d4 <iprintf>

	}
	QSPI_CommandTypeDef sCommand;
	sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80091b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091b4:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.Instruction       = 0x6B;//QUAD_READ;
 80091b6:	236b      	movs	r3, #107	; 0x6b
 80091b8:	613b      	str	r3, [r7, #16]
	sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
 80091ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091be:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80091c0:	2300      	movs	r3, #0
 80091c2:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Address           = Read_ADDr;
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	617b      	str	r3, [r7, #20]
	sCommand.AddressSize 	   = QSPI_ADDRESS_24_BITS;
 80091c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80091cc:	61fb      	str	r3, [r7, #28]
	//sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
	sCommand.DataMode          = QSPI_DATA_4_LINES;
 80091ce:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80091d2:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DummyCycles       = 8;//8
 80091d4:	2308      	movs	r3, #8
 80091d6:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.NbData            = Size;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80091dc:	2300      	movs	r3, #0
 80091de:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80091e0:	2300      	movs	r3, #0
 80091e2:	643b      	str	r3, [r7, #64]	; 0x40
//		if(ret==HAL_OK)
//		{
//			printf("Quad_enable");
//
//		}
	ret=HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80091e4:	f107 0310 	add.w	r3, r7, #16
 80091e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80091ec:	4619      	mov	r1, r3
 80091ee:	4818      	ldr	r0, [pc, #96]	; (8009250 <Quad_Read+0xc4>)
 80091f0:	f009 fb28 	bl	8012844 <HAL_QSPI_Command>
 80091f4:	4603      	mov	r3, r0
 80091f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (ret != HAL_OK) {
 80091fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d002      	beq.n	8009208 <Quad_Read+0x7c>
		  	return ret;
 8009202:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009206:	e01c      	b.n	8009242 <Quad_Read+0xb6>
		  	}
	ret=HAL_QSPI_Receive(&hqspi,pData, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8009208:	f241 3288 	movw	r2, #5000	; 0x1388
 800920c:	68f9      	ldr	r1, [r7, #12]
 800920e:	4810      	ldr	r0, [pc, #64]	; (8009250 <Quad_Read+0xc4>)
 8009210:	f009 fc08 	bl	8012a24 <HAL_QSPI_Receive>
 8009214:	4603      	mov	r3, r0
 8009216:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (ret != HAL_OK) {
 800921a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800921e:	2b00      	cmp	r3, #0
 8009220:	d002      	beq.n	8009228 <Quad_Read+0x9c>
		  	return ret;
 8009222:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009226:	e00c      	b.n	8009242 <Quad_Read+0xb6>
		  	}
		ret=QSPI_AutoPollingMemReady();
 8009228:	f7ff ff74 	bl	8009114 <QSPI_AutoPollingMemReady>
 800922c:	4603      	mov	r3, r0
 800922e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					  if (ret != HAL_OK)
 8009232:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009236:	2b00      	cmp	r3, #0
 8009238:	d002      	beq.n	8009240 <Quad_Read+0xb4>
					  {
					 	return ret;
 800923a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800923e:	e000      	b.n	8009242 <Quad_Read+0xb6>
					 	}
				return HAL_OK;
 8009240:	2300      	movs	r3, #0
		return HAL_OK;
}
 8009242:	4618      	mov	r0, r3
 8009244:	3748      	adds	r7, #72	; 0x48
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	0801d750 	.word	0x0801d750
 8009250:	20000518 	.word	0x20000518

08009254 <Quad_Write>:
uint8_t Quad_Write(uint8_t *pData,uint32_t Write_ADDr,uint32_t Size)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b092      	sub	sp, #72	; 0x48
 8009258:	af00      	add	r7, sp, #0
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	607a      	str	r2, [r7, #4]
//	if(ret==HAL_OK)
//		{
//		printf("Quad_enable");
//		}
	//uint8_t aT[] = " ****QSPI communication based on IT****  ****QSPI communication based on IT****  ****QSPI communication based on IT****  ****QSPI communication based on IT****  ****QSPI communication based on IT****  ****QSPI communication based on IT**** ";
	sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009260:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009264:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.Instruction       = QUAD_PAGE_PROG_CMD;
 8009266:	2338      	movs	r3, #56	; 0x38
 8009268:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800926a:	2300      	movs	r3, #0
 800926c:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Address           = Write_ADDr;
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	617b      	str	r3, [r7, #20]
	sCommand.AddressSize 	   = QSPI_ADDRESS_24_BITS;
 8009272:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009276:	61fb      	str	r3, [r7, #28]
	sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 8009278:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800927c:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DataMode          = QSPI_DATA_4_LINES;
 800927e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8009282:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DummyCycles       = 0;
 8009284:	2300      	movs	r3, #0
 8009286:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.NbData            = Size;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800928c:	2300      	movs	r3, #0
 800928e:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009290:	2300      	movs	r3, #0
 8009292:	643b      	str	r3, [r7, #64]	; 0x40
//	ret=Quad_Enable();
//			if(ret==HAL_OK)
//				{
//				printf("Quad_enable");
//				}
			if (Write_Enable() != HAL_OK) {
 8009294:	f7ff fc6e 	bl	8008b74 <Write_Enable>
 8009298:	4603      	mov	r3, r0
 800929a:	2b00      	cmp	r3, #0
 800929c:	d001      	beq.n	80092a2 <Quad_Write+0x4e>
							return HAL_ERROR;
 800929e:	2301      	movs	r3, #1
 80092a0:	e02e      	b.n	8009300 <Quad_Write+0xac>
						}
	ret=HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80092a2:	f107 0310 	add.w	r3, r7, #16
 80092a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80092aa:	4619      	mov	r1, r3
 80092ac:	4816      	ldr	r0, [pc, #88]	; (8009308 <Quad_Write+0xb4>)
 80092ae:	f009 fac9 	bl	8012844 <HAL_QSPI_Command>
 80092b2:	4603      	mov	r3, r0
 80092b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (ret != HAL_OK) {
 80092b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d002      	beq.n	80092c6 <Quad_Write+0x72>
		  	return ret;
 80092c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80092c4:	e01c      	b.n	8009300 <Quad_Write+0xac>
		  	}
	ret=HAL_QSPI_Transmit(&hqspi, pData, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80092c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80092ca:	68f9      	ldr	r1, [r7, #12]
 80092cc:	480e      	ldr	r0, [pc, #56]	; (8009308 <Quad_Write+0xb4>)
 80092ce:	f009 fb17 	bl	8012900 <HAL_QSPI_Transmit>
 80092d2:	4603      	mov	r3, r0
 80092d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (ret != HAL_OK) {
 80092d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d002      	beq.n	80092e6 <Quad_Write+0x92>
			return ret;
 80092e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80092e4:	e00c      	b.n	8009300 <Quad_Write+0xac>
			 }
	ret=QSPI_AutoPollingMemReady();
 80092e6:	f7ff ff15 	bl	8009114 <QSPI_AutoPollingMemReady>
 80092ea:	4603      	mov	r3, r0
 80092ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			  if (ret != HAL_OK)
 80092f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d002      	beq.n	80092fe <Quad_Write+0xaa>
			  {
			 	return ret;
 80092f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80092fc:	e000      	b.n	8009300 <Quad_Write+0xac>
			 	}
		return HAL_OK;
 80092fe:	2300      	movs	r3, #0
}
 8009300:	4618      	mov	r0, r3
 8009302:	3748      	adds	r7, #72	; 0x48
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}
 8009308:	20000518 	.word	0x20000518

0800930c <QSPI_Sector_Erase>:
uint8_t QSPI_Sector_Erase(uint32_t Address)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b090      	sub	sp, #64	; 0x40
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
	uint8_t ret;

		if(Write_Enable()!=HAL_OK)
 8009314:	f7ff fc2e 	bl	8008b74 <Write_Enable>
 8009318:	4603      	mov	r3, r0
 800931a:	2b00      	cmp	r3, #0
 800931c:	d002      	beq.n	8009324 <QSPI_Sector_Erase+0x18>
				  {
			printf("Write_enable");
 800931e:	4827      	ldr	r0, [pc, #156]	; (80093bc <QSPI_Sector_Erase+0xb0>)
 8009320:	f010 fa58 	bl	80197d4 <iprintf>
				  }

		QSPI_CommandTypeDef sCommand;
	sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009324:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009328:	623b      	str	r3, [r7, #32]
	  sCommand.Instruction       = SECTOR_ERASE_CMD;
 800932a:	2320      	movs	r3, #32
 800932c:	60bb      	str	r3, [r7, #8]
	  sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
 800932e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009332:	627b      	str	r3, [r7, #36]	; 0x24
	  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8009334:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009338:	617b      	str	r3, [r7, #20]
	  sCommand.Address           = Address;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	60fb      	str	r3, [r7, #12]
	  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800933e:	2300      	movs	r3, #0
 8009340:	62bb      	str	r3, [r7, #40]	; 0x28
	    sCommand.DataMode          = QSPI_DATA_NONE;
 8009342:	2300      	movs	r3, #0
 8009344:	62fb      	str	r3, [r7, #44]	; 0x2c
	    sCommand.DummyCycles       = 0;
 8009346:	2300      	movs	r3, #0
 8009348:	61fb      	str	r3, [r7, #28]
	    sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800934a:	2300      	movs	r3, #0
 800934c:	637b      	str	r3, [r7, #52]	; 0x34

	    sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800934e:	2300      	movs	r3, #0
 8009350:	63bb      	str	r3, [r7, #56]	; 0x38
//	  sCommand.DataMode          = QSPI_DATA_NONE;
//	  sCommand.DummyCycles       = 0;
//	  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
//	  //sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
//	  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
	  if(Write_Enable()!=HAL_OK)
 8009352:	f7ff fc0f 	bl	8008b74 <Write_Enable>
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d005      	beq.n	8009368 <QSPI_Sector_Erase+0x5c>
	  		{
	  		printf("Write_enable_fail");
 800935c:	4818      	ldr	r0, [pc, #96]	; (80093c0 <QSPI_Sector_Erase+0xb4>)
 800935e:	f010 fa39 	bl	80197d4 <iprintf>
	  		return ret;
 8009362:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009366:	e024      	b.n	80093b2 <QSPI_Sector_Erase+0xa6>
	  		}
	  ret=HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8009368:	f107 0308 	add.w	r3, r7, #8
 800936c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009370:	4619      	mov	r1, r3
 8009372:	4814      	ldr	r0, [pc, #80]	; (80093c4 <QSPI_Sector_Erase+0xb8>)
 8009374:	f009 fa66 	bl	8012844 <HAL_QSPI_Command>
 8009378:	4603      	mov	r3, r0
 800937a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  		if (ret != HAL_OK) {
 800937e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009382:	2b00      	cmp	r3, #0
 8009384:	d005      	beq.n	8009392 <QSPI_Sector_Erase+0x86>
	  			printf("Write_enable_fail");
 8009386:	480e      	ldr	r0, [pc, #56]	; (80093c0 <QSPI_Sector_Erase+0xb4>)
 8009388:	f010 fa24 	bl	80197d4 <iprintf>
	  		  	return ret;
 800938c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009390:	e00f      	b.n	80093b2 <QSPI_Sector_Erase+0xa6>
	  		  	}
	  ret=QSPI_AutoPollingMemReady();
 8009392:	f7ff febf 	bl	8009114 <QSPI_AutoPollingMemReady>
 8009396:	4603      	mov	r3, r0
 8009398:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  		if (ret != HAL_OK)
 800939c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d005      	beq.n	80093b0 <QSPI_Sector_Erase+0xa4>
	  			{
	  			printf("Write_enable_fail");
 80093a4:	4806      	ldr	r0, [pc, #24]	; (80093c0 <QSPI_Sector_Erase+0xb4>)
 80093a6:	f010 fa15 	bl	80197d4 <iprintf>
	  			return ret;
 80093aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80093ae:	e000      	b.n	80093b2 <QSPI_Sector_Erase+0xa6>
	  			}
	  		return HAL_OK;
 80093b0:	2300      	movs	r3, #0

}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3740      	adds	r7, #64	; 0x40
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	0801d75c 	.word	0x0801d75c
 80093c0:	0801d730 	.word	0x0801d730
 80093c4:	20000518 	.word	0x20000518

080093c8 <Read_flash_address>:
	printf("CHANGED_Address  %d %d %d %d %d %d \n",current_address[0],current_address[1],current_address[2],current_address[3],current_address[4],current_address[5]);


}
uint32_t Read_flash_address(uint8_t select)
{
 80093c8:	b5b0      	push	{r4, r5, r7, lr}
 80093ca:	b08a      	sub	sp, #40	; 0x28
 80093cc:	af04      	add	r7, sp, #16
 80093ce:	4603      	mov	r3, r0
 80093d0:	71fb      	strb	r3, [r7, #7]
  uint8_t current_address[6];

  uint32_t add;
  Quad_Read(current_address,flash_address_map,6);
 80093d2:	f107 030c 	add.w	r3, r7, #12
 80093d6:	2206      	movs	r2, #6
 80093d8:	4933      	ldr	r1, [pc, #204]	; (80094a8 <Read_flash_address+0xe0>)
 80093da:	4618      	mov	r0, r3
 80093dc:	f7ff fed6 	bl	800918c <Quad_Read>
 printf("current_add %d %d %d %d %d %d \n",current_address[0],current_address[1],current_address[2],current_address[3],current_address[4],current_address[5]);
 80093e0:	7b3b      	ldrb	r3, [r7, #12]
 80093e2:	4618      	mov	r0, r3
 80093e4:	7b7b      	ldrb	r3, [r7, #13]
 80093e6:	461c      	mov	r4, r3
 80093e8:	7bbb      	ldrb	r3, [r7, #14]
 80093ea:	461d      	mov	r5, r3
 80093ec:	7bfb      	ldrb	r3, [r7, #15]
 80093ee:	7c3a      	ldrb	r2, [r7, #16]
 80093f0:	7c79      	ldrb	r1, [r7, #17]
 80093f2:	9102      	str	r1, [sp, #8]
 80093f4:	9201      	str	r2, [sp, #4]
 80093f6:	9300      	str	r3, [sp, #0]
 80093f8:	462b      	mov	r3, r5
 80093fa:	4622      	mov	r2, r4
 80093fc:	4601      	mov	r1, r0
 80093fe:	482b      	ldr	r0, [pc, #172]	; (80094ac <Read_flash_address+0xe4>)
 8009400:	f010 f9e8 	bl	80197d4 <iprintf>
// printf("select %d \n",select);
  if(select==1)
 8009404:	79fb      	ldrb	r3, [r7, #7]
 8009406:	2b01      	cmp	r3, #1
 8009408:	d124      	bne.n	8009454 <Read_flash_address+0x8c>
    {
	  Byte_4_conv.Byte_8[0]=current_address[2];
 800940a:	7bba      	ldrb	r2, [r7, #14]
 800940c:	4b28      	ldr	r3, [pc, #160]	; (80094b0 <Read_flash_address+0xe8>)
 800940e:	701a      	strb	r2, [r3, #0]
	  Byte_4_conv.Byte_8[1]=current_address[1];
 8009410:	7b7a      	ldrb	r2, [r7, #13]
 8009412:	4b27      	ldr	r3, [pc, #156]	; (80094b0 <Read_flash_address+0xe8>)
 8009414:	705a      	strb	r2, [r3, #1]
	  Byte_4_conv.Byte_8[2]=current_address[0];
 8009416:	7b3a      	ldrb	r2, [r7, #12]
 8009418:	4b25      	ldr	r3, [pc, #148]	; (80094b0 <Read_flash_address+0xe8>)
 800941a:	709a      	strb	r2, [r3, #2]
	  Byte_4_conv.Byte_8[3]=0;
 800941c:	4b24      	ldr	r3, [pc, #144]	; (80094b0 <Read_flash_address+0xe8>)
 800941e:	2200      	movs	r2, #0
 8009420:	70da      	strb	r2, [r3, #3]
      add=Byte_4_conv.Byte_32;
 8009422:	4b23      	ldr	r3, [pc, #140]	; (80094b0 <Read_flash_address+0xe8>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	617b      	str	r3, [r7, #20]
     printf("address_1: %ld \n\n",add);
 8009428:	6979      	ldr	r1, [r7, #20]
 800942a:	4822      	ldr	r0, [pc, #136]	; (80094b4 <Read_flash_address+0xec>)
 800942c:	f010 f9d2 	bl	80197d4 <iprintf>
      if(add==0xffffff || add>=end_address_Temp||add<=start_address_Temp)
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8009436:	4293      	cmp	r3, r2
 8009438:	d007      	beq.n	800944a <Read_flash_address+0x82>
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	4a1e      	ldr	r2, [pc, #120]	; (80094b8 <Read_flash_address+0xf0>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d803      	bhi.n	800944a <Read_flash_address+0x82>
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009448:	d802      	bhi.n	8009450 <Read_flash_address+0x88>
        {
          //update_address(start_address_Temp,1);
          add=start_address_Temp;
 800944a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800944e:	617b      	str	r3, [r7, #20]
         }
      return add;
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	e025      	b.n	80094a0 <Read_flash_address+0xd8>
    }
  else if(select==0)
 8009454:	79fb      	ldrb	r3, [r7, #7]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d120      	bne.n	800949c <Read_flash_address+0xd4>
    {
	  Byte_4_conv.Byte_8[0]=current_address[5];
 800945a:	7c7a      	ldrb	r2, [r7, #17]
 800945c:	4b14      	ldr	r3, [pc, #80]	; (80094b0 <Read_flash_address+0xe8>)
 800945e:	701a      	strb	r2, [r3, #0]
	  Byte_4_conv.Byte_8[1]=current_address[4];
 8009460:	7c3a      	ldrb	r2, [r7, #16]
 8009462:	4b13      	ldr	r3, [pc, #76]	; (80094b0 <Read_flash_address+0xe8>)
 8009464:	705a      	strb	r2, [r3, #1]
	  Byte_4_conv.Byte_8[2]=current_address[3];
 8009466:	7bfa      	ldrb	r2, [r7, #15]
 8009468:	4b11      	ldr	r3, [pc, #68]	; (80094b0 <Read_flash_address+0xe8>)
 800946a:	709a      	strb	r2, [r3, #2]
	  Byte_4_conv.Byte_8[3]=0;
 800946c:	4b10      	ldr	r3, [pc, #64]	; (80094b0 <Read_flash_address+0xe8>)
 800946e:	2200      	movs	r2, #0
 8009470:	70da      	strb	r2, [r3, #3]
	  add=Byte_4_conv.Byte_32;
 8009472:	4b0f      	ldr	r3, [pc, #60]	; (80094b0 <Read_flash_address+0xe8>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	617b      	str	r3, [r7, #20]

      if(add==0xffffff || add>=end_address_UV || add<=start_address_UV)
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800947e:	4293      	cmp	r3, r2
 8009480:	d007      	beq.n	8009492 <Read_flash_address+0xca>
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	4a0d      	ldr	r2, [pc, #52]	; (80094bc <Read_flash_address+0xf4>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d803      	bhi.n	8009492 <Read_flash_address+0xca>
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	f5b3 2f7f 	cmp.w	r3, #1044480	; 0xff000
 8009490:	d802      	bhi.n	8009498 <Read_flash_address+0xd0>
              {
                //update_address(start_address_Temp,2);
                 add=start_address_UV;
 8009492:	f44f 237f 	mov.w	r3, #1044480	; 0xff000
 8009496:	617b      	str	r3, [r7, #20]
               }
            return add;
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	e001      	b.n	80094a0 <Read_flash_address+0xd8>
    }
  else
    {
      return(0xffffff);
 800949c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    }
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3718      	adds	r7, #24
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bdb0      	pop	{r4, r5, r7, pc}
 80094a8:	001ff000 	.word	0x001ff000
 80094ac:	0801d7e4 	.word	0x0801d7e4
 80094b0:	200003b4 	.word	0x200003b4
 80094b4:	0801d804 	.word	0x0801d804
 80094b8:	000feffe 	.word	0x000feffe
 80094bc:	001feffe 	.word	0x001feffe

080094c0 <LL_AHB2_GRP1_EnableClock>:
{
 80094c0:	b480      	push	{r7}
 80094c2:	b085      	sub	sp, #20
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80094c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80094ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4313      	orrs	r3, r2
 80094d6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80094d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	4013      	ands	r3, r2
 80094e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80094e4:	68fb      	ldr	r3, [r7, #12]
}
 80094e6:	bf00      	nop
 80094e8:	3714      	adds	r7, #20
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr
	...

080094f4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b086      	sub	sp, #24
 80094f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094fa:	1d3b      	adds	r3, r7, #4
 80094fc:	2200      	movs	r2, #0
 80094fe:	601a      	str	r2, [r3, #0]
 8009500:	605a      	str	r2, [r3, #4]
 8009502:	609a      	str	r2, [r3, #8]
 8009504:	60da      	str	r2, [r3, #12]
 8009506:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009508:	2004      	movs	r0, #4
 800950a:	f7ff ffd9 	bl	80094c0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800950e:	2002      	movs	r0, #2
 8009510:	f7ff ffd6 	bl	80094c0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009514:	2001      	movs	r0, #1
 8009516:	f7ff ffd3 	bl	80094c0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800951a:	2008      	movs	r0, #8
 800951c:	f7ff ffd0 	bl	80094c0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TS_GPIO_Port, TS_Pin, GPIO_PIN_SET);
 8009520:	2201      	movs	r2, #1
 8009522:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009526:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800952a:	f008 f81b 	bl	8011564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Green_Led_Pin|Yellow_Led_Pin|Red_Led_Pin, GPIO_PIN_SET);
 800952e:	2201      	movs	r2, #1
 8009530:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8009534:	4820      	ldr	r0, [pc, #128]	; (80095b8 <MX_GPIO_Init+0xc4>)
 8009536:	f008 f815 	bl	8011564 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = PWR_Pin|EOC_Pin;
 800953a:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 800953e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8009540:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8009544:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009546:	2300      	movs	r3, #0
 8009548:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800954a:	1d3b      	adds	r3, r7, #4
 800954c:	4619      	mov	r1, r3
 800954e:	481b      	ldr	r0, [pc, #108]	; (80095bc <MX_GPIO_Init+0xc8>)
 8009550:	f007 fda2 	bl	8011098 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TS_Pin;
 8009554:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009558:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800955a:	2311      	movs	r3, #17
 800955c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800955e:	2300      	movs	r3, #0
 8009560:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009562:	2303      	movs	r3, #3
 8009564:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(TS_GPIO_Port, &GPIO_InitStruct);
 8009566:	1d3b      	adds	r3, r7, #4
 8009568:	4619      	mov	r1, r3
 800956a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800956e:	f007 fd93 	bl	8011098 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = Green_Led_Pin|Yellow_Led_Pin|Red_Led_Pin;
 8009572:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8009576:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009578:	2301      	movs	r3, #1
 800957a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800957c:	2300      	movs	r3, #0
 800957e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009580:	2300      	movs	r3, #0
 8009582:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009584:	1d3b      	adds	r3, r7, #4
 8009586:	4619      	mov	r1, r3
 8009588:	480b      	ldr	r0, [pc, #44]	; (80095b8 <MX_GPIO_Init+0xc4>)
 800958a:	f007 fd85 	bl	8011098 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800958e:	2200      	movs	r2, #0
 8009590:	2100      	movs	r1, #0
 8009592:	2017      	movs	r0, #23
 8009594:	f007 f9ef 	bl	8010976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8009598:	2017      	movs	r0, #23
 800959a:	f007 fa06 	bl	80109aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800959e:	2200      	movs	r2, #0
 80095a0:	2100      	movs	r1, #0
 80095a2:	2028      	movs	r0, #40	; 0x28
 80095a4:	f007 f9e7 	bl	8010976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80095a8:	2028      	movs	r0, #40	; 0x28
 80095aa:	f007 f9fe 	bl	80109aa <HAL_NVIC_EnableIRQ>

}
 80095ae:	bf00      	nop
 80095b0:	3718      	adds	r7, #24
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	48000c00 	.word	0x48000c00
 80095bc:	48000800 	.word	0x48000800

080095c0 <LL_EXTI_EnableIT_0_31>:
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80095c8:	4b06      	ldr	r3, [pc, #24]	; (80095e4 <LL_EXTI_EnableIT_0_31+0x24>)
 80095ca:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80095ce:	4905      	ldr	r1, [pc, #20]	; (80095e4 <LL_EXTI_EnableIT_0_31+0x24>)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	4313      	orrs	r3, r2
 80095d4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80095d8:	bf00      	nop
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr
 80095e4:	58000800 	.word	0x58000800

080095e8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80095f0:	4b05      	ldr	r3, [pc, #20]	; (8009608 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	4904      	ldr	r1, [pc, #16]	; (8009608 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	4313      	orrs	r3, r2
 80095fa:	600b      	str	r3, [r1, #0]

}
 80095fc:	bf00      	nop
 80095fe:	370c      	adds	r7, #12
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr
 8009608:	58000800 	.word	0x58000800

0800960c <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 800960c:	b480      	push	{r7}
 800960e:	b083      	sub	sp, #12
 8009610:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8009612:	4b0d      	ldr	r3, [pc, #52]	; (8009648 <ReadRtcSsrValue+0x3c>)
 8009614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009616:	b29b      	uxth	r3, r3
 8009618:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800961a:	4b0b      	ldr	r3, [pc, #44]	; (8009648 <ReadRtcSsrValue+0x3c>)
 800961c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800961e:	b29b      	uxth	r3, r3
 8009620:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8009622:	e005      	b.n	8009630 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8009628:	4b07      	ldr	r3, [pc, #28]	; (8009648 <ReadRtcSsrValue+0x3c>)
 800962a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800962c:	b29b      	uxth	r3, r3
 800962e:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	429a      	cmp	r2, r3
 8009636:	d1f5      	bne.n	8009624 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8009638:	683b      	ldr	r3, [r7, #0]
}
 800963a:	4618      	mov	r0, r3
 800963c:	370c      	adds	r7, #12
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr
 8009646:	bf00      	nop
 8009648:	40002800 	.word	0x40002800

0800964c <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 800964c:	b480      	push	{r7}
 800964e:	b085      	sub	sp, #20
 8009650:	af00      	add	r7, sp, #0
 8009652:	4603      	mov	r3, r0
 8009654:	460a      	mov	r2, r1
 8009656:	71fb      	strb	r3, [r7, #7]
 8009658:	4613      	mov	r3, r2
 800965a:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 800965c:	79ba      	ldrb	r2, [r7, #6]
 800965e:	491d      	ldr	r1, [pc, #116]	; (80096d4 <LinkTimerAfter+0x88>)
 8009660:	4613      	mov	r3, r2
 8009662:	005b      	lsls	r3, r3, #1
 8009664:	4413      	add	r3, r2
 8009666:	00db      	lsls	r3, r3, #3
 8009668:	440b      	add	r3, r1
 800966a:	3315      	adds	r3, #21
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8009670:	7bfb      	ldrb	r3, [r7, #15]
 8009672:	2b06      	cmp	r3, #6
 8009674:	d009      	beq.n	800968a <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8009676:	7bfa      	ldrb	r2, [r7, #15]
 8009678:	4916      	ldr	r1, [pc, #88]	; (80096d4 <LinkTimerAfter+0x88>)
 800967a:	4613      	mov	r3, r2
 800967c:	005b      	lsls	r3, r3, #1
 800967e:	4413      	add	r3, r2
 8009680:	00db      	lsls	r3, r3, #3
 8009682:	440b      	add	r3, r1
 8009684:	3314      	adds	r3, #20
 8009686:	79fa      	ldrb	r2, [r7, #7]
 8009688:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800968a:	79fa      	ldrb	r2, [r7, #7]
 800968c:	4911      	ldr	r1, [pc, #68]	; (80096d4 <LinkTimerAfter+0x88>)
 800968e:	4613      	mov	r3, r2
 8009690:	005b      	lsls	r3, r3, #1
 8009692:	4413      	add	r3, r2
 8009694:	00db      	lsls	r3, r3, #3
 8009696:	440b      	add	r3, r1
 8009698:	3315      	adds	r3, #21
 800969a:	7bfa      	ldrb	r2, [r7, #15]
 800969c:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800969e:	79fa      	ldrb	r2, [r7, #7]
 80096a0:	490c      	ldr	r1, [pc, #48]	; (80096d4 <LinkTimerAfter+0x88>)
 80096a2:	4613      	mov	r3, r2
 80096a4:	005b      	lsls	r3, r3, #1
 80096a6:	4413      	add	r3, r2
 80096a8:	00db      	lsls	r3, r3, #3
 80096aa:	440b      	add	r3, r1
 80096ac:	3314      	adds	r3, #20
 80096ae:	79ba      	ldrb	r2, [r7, #6]
 80096b0:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80096b2:	79ba      	ldrb	r2, [r7, #6]
 80096b4:	4907      	ldr	r1, [pc, #28]	; (80096d4 <LinkTimerAfter+0x88>)
 80096b6:	4613      	mov	r3, r2
 80096b8:	005b      	lsls	r3, r3, #1
 80096ba:	4413      	add	r3, r2
 80096bc:	00db      	lsls	r3, r3, #3
 80096be:	440b      	add	r3, r1
 80096c0:	3315      	adds	r3, #21
 80096c2:	79fa      	ldrb	r2, [r7, #7]
 80096c4:	701a      	strb	r2, [r3, #0]

  return;
 80096c6:	bf00      	nop
}
 80096c8:	3714      	adds	r7, #20
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop
 80096d4:	200003b8 	.word	0x200003b8

080096d8 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80096d8:	b480      	push	{r7}
 80096da:	b085      	sub	sp, #20
 80096dc:	af00      	add	r7, sp, #0
 80096de:	4603      	mov	r3, r0
 80096e0:	460a      	mov	r2, r1
 80096e2:	71fb      	strb	r3, [r7, #7]
 80096e4:	4613      	mov	r3, r2
 80096e6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80096e8:	4b29      	ldr	r3, [pc, #164]	; (8009790 <LinkTimerBefore+0xb8>)
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	79ba      	ldrb	r2, [r7, #6]
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d032      	beq.n	800975a <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80096f4:	79ba      	ldrb	r2, [r7, #6]
 80096f6:	4927      	ldr	r1, [pc, #156]	; (8009794 <LinkTimerBefore+0xbc>)
 80096f8:	4613      	mov	r3, r2
 80096fa:	005b      	lsls	r3, r3, #1
 80096fc:	4413      	add	r3, r2
 80096fe:	00db      	lsls	r3, r3, #3
 8009700:	440b      	add	r3, r1
 8009702:	3314      	adds	r3, #20
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8009708:	7bfa      	ldrb	r2, [r7, #15]
 800970a:	4922      	ldr	r1, [pc, #136]	; (8009794 <LinkTimerBefore+0xbc>)
 800970c:	4613      	mov	r3, r2
 800970e:	005b      	lsls	r3, r3, #1
 8009710:	4413      	add	r3, r2
 8009712:	00db      	lsls	r3, r3, #3
 8009714:	440b      	add	r3, r1
 8009716:	3315      	adds	r3, #21
 8009718:	79fa      	ldrb	r2, [r7, #7]
 800971a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 800971c:	79fa      	ldrb	r2, [r7, #7]
 800971e:	491d      	ldr	r1, [pc, #116]	; (8009794 <LinkTimerBefore+0xbc>)
 8009720:	4613      	mov	r3, r2
 8009722:	005b      	lsls	r3, r3, #1
 8009724:	4413      	add	r3, r2
 8009726:	00db      	lsls	r3, r3, #3
 8009728:	440b      	add	r3, r1
 800972a:	3315      	adds	r3, #21
 800972c:	79ba      	ldrb	r2, [r7, #6]
 800972e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8009730:	79fa      	ldrb	r2, [r7, #7]
 8009732:	4918      	ldr	r1, [pc, #96]	; (8009794 <LinkTimerBefore+0xbc>)
 8009734:	4613      	mov	r3, r2
 8009736:	005b      	lsls	r3, r3, #1
 8009738:	4413      	add	r3, r2
 800973a:	00db      	lsls	r3, r3, #3
 800973c:	440b      	add	r3, r1
 800973e:	3314      	adds	r3, #20
 8009740:	7bfa      	ldrb	r2, [r7, #15]
 8009742:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8009744:	79ba      	ldrb	r2, [r7, #6]
 8009746:	4913      	ldr	r1, [pc, #76]	; (8009794 <LinkTimerBefore+0xbc>)
 8009748:	4613      	mov	r3, r2
 800974a:	005b      	lsls	r3, r3, #1
 800974c:	4413      	add	r3, r2
 800974e:	00db      	lsls	r3, r3, #3
 8009750:	440b      	add	r3, r1
 8009752:	3314      	adds	r3, #20
 8009754:	79fa      	ldrb	r2, [r7, #7]
 8009756:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8009758:	e014      	b.n	8009784 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800975a:	79fa      	ldrb	r2, [r7, #7]
 800975c:	490d      	ldr	r1, [pc, #52]	; (8009794 <LinkTimerBefore+0xbc>)
 800975e:	4613      	mov	r3, r2
 8009760:	005b      	lsls	r3, r3, #1
 8009762:	4413      	add	r3, r2
 8009764:	00db      	lsls	r3, r3, #3
 8009766:	440b      	add	r3, r1
 8009768:	3315      	adds	r3, #21
 800976a:	79ba      	ldrb	r2, [r7, #6]
 800976c:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800976e:	79ba      	ldrb	r2, [r7, #6]
 8009770:	4908      	ldr	r1, [pc, #32]	; (8009794 <LinkTimerBefore+0xbc>)
 8009772:	4613      	mov	r3, r2
 8009774:	005b      	lsls	r3, r3, #1
 8009776:	4413      	add	r3, r2
 8009778:	00db      	lsls	r3, r3, #3
 800977a:	440b      	add	r3, r1
 800977c:	3314      	adds	r3, #20
 800977e:	79fa      	ldrb	r2, [r7, #7]
 8009780:	701a      	strb	r2, [r3, #0]
  return;
 8009782:	bf00      	nop
}
 8009784:	3714      	adds	r7, #20
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr
 800978e:	bf00      	nop
 8009790:	20000448 	.word	0x20000448
 8009794:	200003b8 	.word	0x200003b8

08009798 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	4603      	mov	r3, r0
 80097a0:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80097a2:	4b4e      	ldr	r3, [pc, #312]	; (80098dc <linkTimer+0x144>)
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	2b06      	cmp	r3, #6
 80097aa:	d118      	bne.n	80097de <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80097ac:	4b4b      	ldr	r3, [pc, #300]	; (80098dc <linkTimer+0x144>)
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	b2da      	uxtb	r2, r3
 80097b2:	4b4b      	ldr	r3, [pc, #300]	; (80098e0 <linkTimer+0x148>)
 80097b4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80097b6:	4a49      	ldr	r2, [pc, #292]	; (80098dc <linkTimer+0x144>)
 80097b8:	79fb      	ldrb	r3, [r7, #7]
 80097ba:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80097bc:	79fa      	ldrb	r2, [r7, #7]
 80097be:	4949      	ldr	r1, [pc, #292]	; (80098e4 <linkTimer+0x14c>)
 80097c0:	4613      	mov	r3, r2
 80097c2:	005b      	lsls	r3, r3, #1
 80097c4:	4413      	add	r3, r2
 80097c6:	00db      	lsls	r3, r3, #3
 80097c8:	440b      	add	r3, r1
 80097ca:	3315      	adds	r3, #21
 80097cc:	2206      	movs	r2, #6
 80097ce:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80097d0:	4b45      	ldr	r3, [pc, #276]	; (80098e8 <linkTimer+0x150>)
 80097d2:	f04f 32ff 	mov.w	r2, #4294967295
 80097d6:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80097d8:	2300      	movs	r3, #0
 80097da:	81fb      	strh	r3, [r7, #14]
 80097dc:	e078      	b.n	80098d0 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80097de:	f000 f909 	bl	80099f4 <ReturnTimeElapsed>
 80097e2:	4603      	mov	r3, r0
 80097e4:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80097e6:	79fa      	ldrb	r2, [r7, #7]
 80097e8:	493e      	ldr	r1, [pc, #248]	; (80098e4 <linkTimer+0x14c>)
 80097ea:	4613      	mov	r3, r2
 80097ec:	005b      	lsls	r3, r3, #1
 80097ee:	4413      	add	r3, r2
 80097f0:	00db      	lsls	r3, r3, #3
 80097f2:	440b      	add	r3, r1
 80097f4:	3308      	adds	r3, #8
 80097f6:	6819      	ldr	r1, [r3, #0]
 80097f8:	89fb      	ldrh	r3, [r7, #14]
 80097fa:	79fa      	ldrb	r2, [r7, #7]
 80097fc:	4419      	add	r1, r3
 80097fe:	4839      	ldr	r0, [pc, #228]	; (80098e4 <linkTimer+0x14c>)
 8009800:	4613      	mov	r3, r2
 8009802:	005b      	lsls	r3, r3, #1
 8009804:	4413      	add	r3, r2
 8009806:	00db      	lsls	r3, r3, #3
 8009808:	4403      	add	r3, r0
 800980a:	3308      	adds	r3, #8
 800980c:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800980e:	79fa      	ldrb	r2, [r7, #7]
 8009810:	4934      	ldr	r1, [pc, #208]	; (80098e4 <linkTimer+0x14c>)
 8009812:	4613      	mov	r3, r2
 8009814:	005b      	lsls	r3, r3, #1
 8009816:	4413      	add	r3, r2
 8009818:	00db      	lsls	r3, r3, #3
 800981a:	440b      	add	r3, r1
 800981c:	3308      	adds	r3, #8
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8009822:	4b2e      	ldr	r3, [pc, #184]	; (80098dc <linkTimer+0x144>)
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	b2db      	uxtb	r3, r3
 8009828:	4619      	mov	r1, r3
 800982a:	4a2e      	ldr	r2, [pc, #184]	; (80098e4 <linkTimer+0x14c>)
 800982c:	460b      	mov	r3, r1
 800982e:	005b      	lsls	r3, r3, #1
 8009830:	440b      	add	r3, r1
 8009832:	00db      	lsls	r3, r3, #3
 8009834:	4413      	add	r3, r2
 8009836:	3308      	adds	r3, #8
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	68ba      	ldr	r2, [r7, #8]
 800983c:	429a      	cmp	r2, r3
 800983e:	d337      	bcc.n	80098b0 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8009840:	4b26      	ldr	r3, [pc, #152]	; (80098dc <linkTimer+0x144>)
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8009846:	7b7a      	ldrb	r2, [r7, #13]
 8009848:	4926      	ldr	r1, [pc, #152]	; (80098e4 <linkTimer+0x14c>)
 800984a:	4613      	mov	r3, r2
 800984c:	005b      	lsls	r3, r3, #1
 800984e:	4413      	add	r3, r2
 8009850:	00db      	lsls	r3, r3, #3
 8009852:	440b      	add	r3, r1
 8009854:	3315      	adds	r3, #21
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800985a:	e013      	b.n	8009884 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 800985c:	7b7a      	ldrb	r2, [r7, #13]
 800985e:	4921      	ldr	r1, [pc, #132]	; (80098e4 <linkTimer+0x14c>)
 8009860:	4613      	mov	r3, r2
 8009862:	005b      	lsls	r3, r3, #1
 8009864:	4413      	add	r3, r2
 8009866:	00db      	lsls	r3, r3, #3
 8009868:	440b      	add	r3, r1
 800986a:	3315      	adds	r3, #21
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8009870:	7b7a      	ldrb	r2, [r7, #13]
 8009872:	491c      	ldr	r1, [pc, #112]	; (80098e4 <linkTimer+0x14c>)
 8009874:	4613      	mov	r3, r2
 8009876:	005b      	lsls	r3, r3, #1
 8009878:	4413      	add	r3, r2
 800987a:	00db      	lsls	r3, r3, #3
 800987c:	440b      	add	r3, r1
 800987e:	3315      	adds	r3, #21
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8009884:	7b3b      	ldrb	r3, [r7, #12]
 8009886:	2b06      	cmp	r3, #6
 8009888:	d00b      	beq.n	80098a2 <linkTimer+0x10a>
 800988a:	7b3a      	ldrb	r2, [r7, #12]
 800988c:	4915      	ldr	r1, [pc, #84]	; (80098e4 <linkTimer+0x14c>)
 800988e:	4613      	mov	r3, r2
 8009890:	005b      	lsls	r3, r3, #1
 8009892:	4413      	add	r3, r2
 8009894:	00db      	lsls	r3, r3, #3
 8009896:	440b      	add	r3, r1
 8009898:	3308      	adds	r3, #8
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	68ba      	ldr	r2, [r7, #8]
 800989e:	429a      	cmp	r2, r3
 80098a0:	d2dc      	bcs.n	800985c <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80098a2:	7b7a      	ldrb	r2, [r7, #13]
 80098a4:	79fb      	ldrb	r3, [r7, #7]
 80098a6:	4611      	mov	r1, r2
 80098a8:	4618      	mov	r0, r3
 80098aa:	f7ff fecf 	bl	800964c <LinkTimerAfter>
 80098ae:	e00f      	b.n	80098d0 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80098b0:	4b0a      	ldr	r3, [pc, #40]	; (80098dc <linkTimer+0x144>)
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	b2da      	uxtb	r2, r3
 80098b6:	79fb      	ldrb	r3, [r7, #7]
 80098b8:	4611      	mov	r1, r2
 80098ba:	4618      	mov	r0, r3
 80098bc:	f7ff ff0c 	bl	80096d8 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80098c0:	4b06      	ldr	r3, [pc, #24]	; (80098dc <linkTimer+0x144>)
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	b2da      	uxtb	r2, r3
 80098c6:	4b06      	ldr	r3, [pc, #24]	; (80098e0 <linkTimer+0x148>)
 80098c8:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80098ca:	4a04      	ldr	r2, [pc, #16]	; (80098dc <linkTimer+0x144>)
 80098cc:	79fb      	ldrb	r3, [r7, #7]
 80098ce:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80098d0:	89fb      	ldrh	r3, [r7, #14]
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3710      	adds	r7, #16
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	20000448 	.word	0x20000448
 80098e0:	20000449 	.word	0x20000449
 80098e4:	200003b8 	.word	0x200003b8
 80098e8:	2000044c 	.word	0x2000044c

080098ec <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b085      	sub	sp, #20
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	4603      	mov	r3, r0
 80098f4:	460a      	mov	r2, r1
 80098f6:	71fb      	strb	r3, [r7, #7]
 80098f8:	4613      	mov	r3, r2
 80098fa:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80098fc:	4b39      	ldr	r3, [pc, #228]	; (80099e4 <UnlinkTimer+0xf8>)
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	b2db      	uxtb	r3, r3
 8009902:	79fa      	ldrb	r2, [r7, #7]
 8009904:	429a      	cmp	r2, r3
 8009906:	d111      	bne.n	800992c <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8009908:	4b36      	ldr	r3, [pc, #216]	; (80099e4 <UnlinkTimer+0xf8>)
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	b2da      	uxtb	r2, r3
 800990e:	4b36      	ldr	r3, [pc, #216]	; (80099e8 <UnlinkTimer+0xfc>)
 8009910:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8009912:	79fa      	ldrb	r2, [r7, #7]
 8009914:	4935      	ldr	r1, [pc, #212]	; (80099ec <UnlinkTimer+0x100>)
 8009916:	4613      	mov	r3, r2
 8009918:	005b      	lsls	r3, r3, #1
 800991a:	4413      	add	r3, r2
 800991c:	00db      	lsls	r3, r3, #3
 800991e:	440b      	add	r3, r1
 8009920:	3315      	adds	r3, #21
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	b2da      	uxtb	r2, r3
 8009926:	4b2f      	ldr	r3, [pc, #188]	; (80099e4 <UnlinkTimer+0xf8>)
 8009928:	701a      	strb	r2, [r3, #0]
 800992a:	e03e      	b.n	80099aa <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 800992c:	79fa      	ldrb	r2, [r7, #7]
 800992e:	492f      	ldr	r1, [pc, #188]	; (80099ec <UnlinkTimer+0x100>)
 8009930:	4613      	mov	r3, r2
 8009932:	005b      	lsls	r3, r3, #1
 8009934:	4413      	add	r3, r2
 8009936:	00db      	lsls	r3, r3, #3
 8009938:	440b      	add	r3, r1
 800993a:	3314      	adds	r3, #20
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8009940:	79fa      	ldrb	r2, [r7, #7]
 8009942:	492a      	ldr	r1, [pc, #168]	; (80099ec <UnlinkTimer+0x100>)
 8009944:	4613      	mov	r3, r2
 8009946:	005b      	lsls	r3, r3, #1
 8009948:	4413      	add	r3, r2
 800994a:	00db      	lsls	r3, r3, #3
 800994c:	440b      	add	r3, r1
 800994e:	3315      	adds	r3, #21
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8009954:	79f9      	ldrb	r1, [r7, #7]
 8009956:	7bfa      	ldrb	r2, [r7, #15]
 8009958:	4824      	ldr	r0, [pc, #144]	; (80099ec <UnlinkTimer+0x100>)
 800995a:	460b      	mov	r3, r1
 800995c:	005b      	lsls	r3, r3, #1
 800995e:	440b      	add	r3, r1
 8009960:	00db      	lsls	r3, r3, #3
 8009962:	4403      	add	r3, r0
 8009964:	3315      	adds	r3, #21
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	b2d8      	uxtb	r0, r3
 800996a:	4920      	ldr	r1, [pc, #128]	; (80099ec <UnlinkTimer+0x100>)
 800996c:	4613      	mov	r3, r2
 800996e:	005b      	lsls	r3, r3, #1
 8009970:	4413      	add	r3, r2
 8009972:	00db      	lsls	r3, r3, #3
 8009974:	440b      	add	r3, r1
 8009976:	3315      	adds	r3, #21
 8009978:	4602      	mov	r2, r0
 800997a:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800997c:	7bbb      	ldrb	r3, [r7, #14]
 800997e:	2b06      	cmp	r3, #6
 8009980:	d013      	beq.n	80099aa <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8009982:	79f9      	ldrb	r1, [r7, #7]
 8009984:	7bba      	ldrb	r2, [r7, #14]
 8009986:	4819      	ldr	r0, [pc, #100]	; (80099ec <UnlinkTimer+0x100>)
 8009988:	460b      	mov	r3, r1
 800998a:	005b      	lsls	r3, r3, #1
 800998c:	440b      	add	r3, r1
 800998e:	00db      	lsls	r3, r3, #3
 8009990:	4403      	add	r3, r0
 8009992:	3314      	adds	r3, #20
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	b2d8      	uxtb	r0, r3
 8009998:	4914      	ldr	r1, [pc, #80]	; (80099ec <UnlinkTimer+0x100>)
 800999a:	4613      	mov	r3, r2
 800999c:	005b      	lsls	r3, r3, #1
 800999e:	4413      	add	r3, r2
 80099a0:	00db      	lsls	r3, r3, #3
 80099a2:	440b      	add	r3, r1
 80099a4:	3314      	adds	r3, #20
 80099a6:	4602      	mov	r2, r0
 80099a8:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80099aa:	79fa      	ldrb	r2, [r7, #7]
 80099ac:	490f      	ldr	r1, [pc, #60]	; (80099ec <UnlinkTimer+0x100>)
 80099ae:	4613      	mov	r3, r2
 80099b0:	005b      	lsls	r3, r3, #1
 80099b2:	4413      	add	r3, r2
 80099b4:	00db      	lsls	r3, r3, #3
 80099b6:	440b      	add	r3, r1
 80099b8:	330c      	adds	r3, #12
 80099ba:	2201      	movs	r2, #1
 80099bc:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80099be:	4b09      	ldr	r3, [pc, #36]	; (80099e4 <UnlinkTimer+0xf8>)
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	b2db      	uxtb	r3, r3
 80099c4:	2b06      	cmp	r3, #6
 80099c6:	d107      	bne.n	80099d8 <UnlinkTimer+0xec>
 80099c8:	79bb      	ldrb	r3, [r7, #6]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d104      	bne.n	80099d8 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80099ce:	4b08      	ldr	r3, [pc, #32]	; (80099f0 <UnlinkTimer+0x104>)
 80099d0:	f04f 32ff 	mov.w	r2, #4294967295
 80099d4:	601a      	str	r2, [r3, #0]
  }

  return;
 80099d6:	bf00      	nop
 80099d8:	bf00      	nop
}
 80099da:	3714      	adds	r7, #20
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr
 80099e4:	20000448 	.word	0x20000448
 80099e8:	20000449 	.word	0x20000449
 80099ec:	200003b8 	.word	0x200003b8
 80099f0:	2000044c 	.word	0x2000044c

080099f4 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b082      	sub	sp, #8
 80099f8:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80099fa:	4b1a      	ldr	r3, [pc, #104]	; (8009a64 <ReturnTimeElapsed+0x70>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a02:	d026      	beq.n	8009a52 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8009a04:	f7ff fe02 	bl	800960c <ReadRtcSsrValue>
 8009a08:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8009a0a:	4b16      	ldr	r3, [pc, #88]	; (8009a64 <ReturnTimeElapsed+0x70>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d805      	bhi.n	8009a20 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8009a14:	4b13      	ldr	r3, [pc, #76]	; (8009a64 <ReturnTimeElapsed+0x70>)
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	1ad3      	subs	r3, r2, r3
 8009a1c:	607b      	str	r3, [r7, #4]
 8009a1e:	e00a      	b.n	8009a36 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8009a20:	4b11      	ldr	r3, [pc, #68]	; (8009a68 <ReturnTimeElapsed+0x74>)
 8009a22:	881b      	ldrh	r3, [r3, #0]
 8009a24:	461a      	mov	r2, r3
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	1ad3      	subs	r3, r2, r3
 8009a2a:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8009a2c:	4b0d      	ldr	r3, [pc, #52]	; (8009a64 <ReturnTimeElapsed+0x70>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	683a      	ldr	r2, [r7, #0]
 8009a32:	4413      	add	r3, r2
 8009a34:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8009a36:	4b0d      	ldr	r3, [pc, #52]	; (8009a6c <ReturnTimeElapsed+0x78>)
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	fb02 f303 	mul.w	r3, r2, r3
 8009a42:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8009a44:	4b0a      	ldr	r3, [pc, #40]	; (8009a70 <ReturnTimeElapsed+0x7c>)
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	461a      	mov	r2, r3
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	40d3      	lsrs	r3, r2
 8009a4e:	607b      	str	r3, [r7, #4]
 8009a50:	e001      	b.n	8009a56 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8009a52:	2300      	movs	r3, #0
 8009a54:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	b29b      	uxth	r3, r3
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3708      	adds	r7, #8
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	2000044c 	.word	0x2000044c
 8009a68:	20000454 	.word	0x20000454
 8009a6c:	20000452 	.word	0x20000452
 8009a70:	20000451 	.word	0x20000451

08009a74 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8009a7e:	88fb      	ldrh	r3, [r7, #6]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d108      	bne.n	8009a96 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8009a84:	f7ff fdc2 	bl	800960c <ReadRtcSsrValue>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	4a21      	ldr	r2, [pc, #132]	; (8009b10 <RestartWakeupCounter+0x9c>)
 8009a8c:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8009a8e:	2003      	movs	r0, #3
 8009a90:	f006 ffb3 	bl	80109fa <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8009a94:	e039      	b.n	8009b0a <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8009a96:	88fb      	ldrh	r3, [r7, #6]
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	d803      	bhi.n	8009aa4 <RestartWakeupCounter+0x30>
 8009a9c:	4b1d      	ldr	r3, [pc, #116]	; (8009b14 <RestartWakeupCounter+0xa0>)
 8009a9e:	781b      	ldrb	r3, [r3, #0]
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d002      	beq.n	8009aaa <RestartWakeupCounter+0x36>
      Value -= 1;
 8009aa4:	88fb      	ldrh	r3, [r7, #6]
 8009aa6:	3b01      	subs	r3, #1
 8009aa8:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8009aaa:	bf00      	nop
 8009aac:	4b1a      	ldr	r3, [pc, #104]	; (8009b18 <RestartWakeupCounter+0xa4>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	f003 0304 	and.w	r3, r3, #4
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d0f8      	beq.n	8009aac <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8009aba:	4b17      	ldr	r3, [pc, #92]	; (8009b18 <RestartWakeupCounter+0xa4>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	b2da      	uxtb	r2, r3
 8009ac2:	4b15      	ldr	r3, [pc, #84]	; (8009b18 <RestartWakeupCounter+0xa4>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8009aca:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8009acc:	4b13      	ldr	r3, [pc, #76]	; (8009b1c <RestartWakeupCounter+0xa8>)
 8009ace:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009ad2:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8009ad4:	2003      	movs	r0, #3
 8009ad6:	f006 ff9e 	bl	8010a16 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8009ada:	4b11      	ldr	r3, [pc, #68]	; (8009b20 <RestartWakeupCounter+0xac>)
 8009adc:	695b      	ldr	r3, [r3, #20]
 8009ade:	0c1b      	lsrs	r3, r3, #16
 8009ae0:	041b      	lsls	r3, r3, #16
 8009ae2:	88fa      	ldrh	r2, [r7, #6]
 8009ae4:	490e      	ldr	r1, [pc, #56]	; (8009b20 <RestartWakeupCounter+0xac>)
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8009aea:	f7ff fd8f 	bl	800960c <ReadRtcSsrValue>
 8009aee:	4603      	mov	r3, r0
 8009af0:	4a07      	ldr	r2, [pc, #28]	; (8009b10 <RestartWakeupCounter+0x9c>)
 8009af2:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8009af4:	4b08      	ldr	r3, [pc, #32]	; (8009b18 <RestartWakeupCounter+0xa4>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	689a      	ldr	r2, [r3, #8]
 8009afa:	4b07      	ldr	r3, [pc, #28]	; (8009b18 <RestartWakeupCounter+0xa4>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009b02:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8009b04:	f3af 8000 	nop.w
  return ;
 8009b08:	bf00      	nop
}
 8009b0a:	3708      	adds	r7, #8
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	2000044c 	.word	0x2000044c
 8009b14:	20000451 	.word	0x20000451
 8009b18:	2000055c 	.word	0x2000055c
 8009b1c:	58000800 	.word	0x58000800
 8009b20:	40002800 	.word	0x40002800

08009b24 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8009b2a:	4b45      	ldr	r3, [pc, #276]	; (8009c40 <RescheduleTimerList+0x11c>)
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b36:	d107      	bne.n	8009b48 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8009b38:	bf00      	nop
 8009b3a:	4b42      	ldr	r3, [pc, #264]	; (8009c44 <RescheduleTimerList+0x120>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	f003 0304 	and.w	r3, r3, #4
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d1f8      	bne.n	8009b3a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8009b48:	4b3e      	ldr	r3, [pc, #248]	; (8009c44 <RescheduleTimerList+0x120>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	689a      	ldr	r2, [r3, #8]
 8009b4e:	4b3d      	ldr	r3, [pc, #244]	; (8009c44 <RescheduleTimerList+0x120>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b56:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8009b58:	4b3b      	ldr	r3, [pc, #236]	; (8009c48 <RescheduleTimerList+0x124>)
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8009b5e:	7bfa      	ldrb	r2, [r7, #15]
 8009b60:	493a      	ldr	r1, [pc, #232]	; (8009c4c <RescheduleTimerList+0x128>)
 8009b62:	4613      	mov	r3, r2
 8009b64:	005b      	lsls	r3, r3, #1
 8009b66:	4413      	add	r3, r2
 8009b68:	00db      	lsls	r3, r3, #3
 8009b6a:	440b      	add	r3, r1
 8009b6c:	3308      	adds	r3, #8
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8009b72:	f7ff ff3f 	bl	80099f4 <ReturnTimeElapsed>
 8009b76:	4603      	mov	r3, r0
 8009b78:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8009b7a:	88fb      	ldrh	r3, [r7, #6]
 8009b7c:	68ba      	ldr	r2, [r7, #8]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d205      	bcs.n	8009b8e <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8009b82:	2300      	movs	r3, #0
 8009b84:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8009b86:	4b32      	ldr	r3, [pc, #200]	; (8009c50 <RescheduleTimerList+0x12c>)
 8009b88:	2201      	movs	r2, #1
 8009b8a:	701a      	strb	r2, [r3, #0]
 8009b8c:	e04d      	b.n	8009c2a <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8009b8e:	88fb      	ldrh	r3, [r7, #6]
 8009b90:	4a30      	ldr	r2, [pc, #192]	; (8009c54 <RescheduleTimerList+0x130>)
 8009b92:	8812      	ldrh	r2, [r2, #0]
 8009b94:	b292      	uxth	r2, r2
 8009b96:	4413      	add	r3, r2
 8009b98:	461a      	mov	r2, r3
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d906      	bls.n	8009bae <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8009ba0:	4b2c      	ldr	r3, [pc, #176]	; (8009c54 <RescheduleTimerList+0x130>)
 8009ba2:	881b      	ldrh	r3, [r3, #0]
 8009ba4:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8009ba6:	4b2a      	ldr	r3, [pc, #168]	; (8009c50 <RescheduleTimerList+0x12c>)
 8009ba8:	2200      	movs	r2, #0
 8009baa:	701a      	strb	r2, [r3, #0]
 8009bac:	e03d      	b.n	8009c2a <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	b29a      	uxth	r2, r3
 8009bb2:	88fb      	ldrh	r3, [r7, #6]
 8009bb4:	1ad3      	subs	r3, r2, r3
 8009bb6:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8009bb8:	4b25      	ldr	r3, [pc, #148]	; (8009c50 <RescheduleTimerList+0x12c>)
 8009bba:	2201      	movs	r2, #1
 8009bbc:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8009bbe:	e034      	b.n	8009c2a <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8009bc0:	7bfa      	ldrb	r2, [r7, #15]
 8009bc2:	4922      	ldr	r1, [pc, #136]	; (8009c4c <RescheduleTimerList+0x128>)
 8009bc4:	4613      	mov	r3, r2
 8009bc6:	005b      	lsls	r3, r3, #1
 8009bc8:	4413      	add	r3, r2
 8009bca:	00db      	lsls	r3, r3, #3
 8009bcc:	440b      	add	r3, r1
 8009bce:	3308      	adds	r3, #8
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	88fb      	ldrh	r3, [r7, #6]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d20a      	bcs.n	8009bee <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8009bd8:	7bfa      	ldrb	r2, [r7, #15]
 8009bda:	491c      	ldr	r1, [pc, #112]	; (8009c4c <RescheduleTimerList+0x128>)
 8009bdc:	4613      	mov	r3, r2
 8009bde:	005b      	lsls	r3, r3, #1
 8009be0:	4413      	add	r3, r2
 8009be2:	00db      	lsls	r3, r3, #3
 8009be4:	440b      	add	r3, r1
 8009be6:	3308      	adds	r3, #8
 8009be8:	2200      	movs	r2, #0
 8009bea:	601a      	str	r2, [r3, #0]
 8009bec:	e013      	b.n	8009c16 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8009bee:	7bfa      	ldrb	r2, [r7, #15]
 8009bf0:	4916      	ldr	r1, [pc, #88]	; (8009c4c <RescheduleTimerList+0x128>)
 8009bf2:	4613      	mov	r3, r2
 8009bf4:	005b      	lsls	r3, r3, #1
 8009bf6:	4413      	add	r3, r2
 8009bf8:	00db      	lsls	r3, r3, #3
 8009bfa:	440b      	add	r3, r1
 8009bfc:	3308      	adds	r3, #8
 8009bfe:	6819      	ldr	r1, [r3, #0]
 8009c00:	88fb      	ldrh	r3, [r7, #6]
 8009c02:	7bfa      	ldrb	r2, [r7, #15]
 8009c04:	1ac9      	subs	r1, r1, r3
 8009c06:	4811      	ldr	r0, [pc, #68]	; (8009c4c <RescheduleTimerList+0x128>)
 8009c08:	4613      	mov	r3, r2
 8009c0a:	005b      	lsls	r3, r3, #1
 8009c0c:	4413      	add	r3, r2
 8009c0e:	00db      	lsls	r3, r3, #3
 8009c10:	4403      	add	r3, r0
 8009c12:	3308      	adds	r3, #8
 8009c14:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8009c16:	7bfa      	ldrb	r2, [r7, #15]
 8009c18:	490c      	ldr	r1, [pc, #48]	; (8009c4c <RescheduleTimerList+0x128>)
 8009c1a:	4613      	mov	r3, r2
 8009c1c:	005b      	lsls	r3, r3, #1
 8009c1e:	4413      	add	r3, r2
 8009c20:	00db      	lsls	r3, r3, #3
 8009c22:	440b      	add	r3, r1
 8009c24:	3315      	adds	r3, #21
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8009c2a:	7bfb      	ldrb	r3, [r7, #15]
 8009c2c:	2b06      	cmp	r3, #6
 8009c2e:	d1c7      	bne.n	8009bc0 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8009c30:	89bb      	ldrh	r3, [r7, #12]
 8009c32:	4618      	mov	r0, r3
 8009c34:	f7ff ff1e 	bl	8009a74 <RestartWakeupCounter>

  return ;
 8009c38:	bf00      	nop
}
 8009c3a:	3710      	adds	r7, #16
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}
 8009c40:	40002800 	.word	0x40002800
 8009c44:	2000055c 	.word	0x2000055c
 8009c48:	20000448 	.word	0x20000448
 8009c4c:	200003b8 	.word	0x200003b8
 8009c50:	20000450 	.word	0x20000450
 8009c54:	20000456 	.word	0x20000456

08009c58 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b08a      	sub	sp, #40	; 0x28
 8009c5c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c5e:	f3ef 8310 	mrs	r3, PRIMASK
 8009c62:	617b      	str	r3, [r7, #20]
  return(result);
 8009c64:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009c66:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8009c68:	b672      	cpsid	i
}
 8009c6a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8009c6c:	4b59      	ldr	r3, [pc, #356]	; (8009dd4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	22ca      	movs	r2, #202	; 0xca
 8009c72:	625a      	str	r2, [r3, #36]	; 0x24
 8009c74:	4b57      	ldr	r3, [pc, #348]	; (8009dd4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	2253      	movs	r2, #83	; 0x53
 8009c7a:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8009c7c:	4b55      	ldr	r3, [pc, #340]	; (8009dd4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	689a      	ldr	r2, [r3, #8]
 8009c82:	4b54      	ldr	r3, [pc, #336]	; (8009dd4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c8a:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8009c8c:	4b52      	ldr	r3, [pc, #328]	; (8009dd8 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8009c94:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8009c98:	4950      	ldr	r1, [pc, #320]	; (8009ddc <HW_TS_RTC_Wakeup_Handler+0x184>)
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	005b      	lsls	r3, r3, #1
 8009c9e:	4413      	add	r3, r2
 8009ca0:	00db      	lsls	r3, r3, #3
 8009ca2:	440b      	add	r3, r1
 8009ca4:	330c      	adds	r3, #12
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	b2db      	uxtb	r3, r3
 8009caa:	2b02      	cmp	r3, #2
 8009cac:	d16e      	bne.n	8009d8c <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8009cae:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8009cb2:	494a      	ldr	r1, [pc, #296]	; (8009ddc <HW_TS_RTC_Wakeup_Handler+0x184>)
 8009cb4:	4613      	mov	r3, r2
 8009cb6:	005b      	lsls	r3, r3, #1
 8009cb8:	4413      	add	r3, r2
 8009cba:	00db      	lsls	r3, r3, #3
 8009cbc:	440b      	add	r3, r1
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8009cc2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8009cc6:	4945      	ldr	r1, [pc, #276]	; (8009ddc <HW_TS_RTC_Wakeup_Handler+0x184>)
 8009cc8:	4613      	mov	r3, r2
 8009cca:	005b      	lsls	r3, r3, #1
 8009ccc:	4413      	add	r3, r2
 8009cce:	00db      	lsls	r3, r3, #3
 8009cd0:	440b      	add	r3, r1
 8009cd2:	3310      	adds	r3, #16
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8009cd8:	4b41      	ldr	r3, [pc, #260]	; (8009de0 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d04c      	beq.n	8009d7c <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8009ce2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8009ce6:	493d      	ldr	r1, [pc, #244]	; (8009ddc <HW_TS_RTC_Wakeup_Handler+0x184>)
 8009ce8:	4613      	mov	r3, r2
 8009cea:	005b      	lsls	r3, r3, #1
 8009cec:	4413      	add	r3, r2
 8009cee:	00db      	lsls	r3, r3, #3
 8009cf0:	440b      	add	r3, r1
 8009cf2:	330d      	adds	r3, #13
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d124      	bne.n	8009d46 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8009cfc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d00:	2101      	movs	r1, #1
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7ff fdf2 	bl	80098ec <UnlinkTimer>
 8009d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0a:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	f383 8810 	msr	PRIMASK, r3
}
 8009d12:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8009d14:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8009d18:	4930      	ldr	r1, [pc, #192]	; (8009ddc <HW_TS_RTC_Wakeup_Handler+0x184>)
 8009d1a:	4613      	mov	r3, r2
 8009d1c:	005b      	lsls	r3, r3, #1
 8009d1e:	4413      	add	r3, r2
 8009d20:	00db      	lsls	r3, r3, #3
 8009d22:	440b      	add	r3, r1
 8009d24:	3304      	adds	r3, #4
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d2c:	4611      	mov	r1, r2
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f000 fa32 	bl	800a198 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8009d34:	4b27      	ldr	r3, [pc, #156]	; (8009dd4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	22ca      	movs	r2, #202	; 0xca
 8009d3a:	625a      	str	r2, [r3, #36]	; 0x24
 8009d3c:	4b25      	ldr	r3, [pc, #148]	; (8009dd4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	2253      	movs	r2, #83	; 0x53
 8009d42:	625a      	str	r2, [r3, #36]	; 0x24
 8009d44:	e012      	b.n	8009d6c <HW_TS_RTC_Wakeup_Handler+0x114>
 8009d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d48:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f383 8810 	msr	PRIMASK, r3
}
 8009d50:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8009d52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d56:	4618      	mov	r0, r3
 8009d58:	f000 f99a 	bl	800a090 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8009d5c:	4b1d      	ldr	r3, [pc, #116]	; (8009dd4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	22ca      	movs	r2, #202	; 0xca
 8009d62:	625a      	str	r2, [r3, #36]	; 0x24
 8009d64:	4b1b      	ldr	r3, [pc, #108]	; (8009dd4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	2253      	movs	r2, #83	; 0x53
 8009d6a:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8009d6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d70:	69fa      	ldr	r2, [r7, #28]
 8009d72:	4619      	mov	r1, r3
 8009d74:	69b8      	ldr	r0, [r7, #24]
 8009d76:	f000 fa95 	bl	800a2a4 <HW_TS_RTC_Int_AppNot>
 8009d7a:	e022      	b.n	8009dc2 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8009d7c:	f7ff fed2 	bl	8009b24 <RescheduleTimerList>
 8009d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d82:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	f383 8810 	msr	PRIMASK, r3
}
 8009d8a:	e01a      	b.n	8009dc2 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8009d8c:	bf00      	nop
 8009d8e:	4b11      	ldr	r3, [pc, #68]	; (8009dd4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	68db      	ldr	r3, [r3, #12]
 8009d94:	f003 0304 	and.w	r3, r3, #4
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d0f8      	beq.n	8009d8e <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8009d9c:	4b0d      	ldr	r3, [pc, #52]	; (8009dd4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	68db      	ldr	r3, [r3, #12]
 8009da2:	b2da      	uxtb	r2, r3
 8009da4:	4b0b      	ldr	r3, [pc, #44]	; (8009dd4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8009dac:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8009dae:	4b0d      	ldr	r3, [pc, #52]	; (8009de4 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8009db0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009db4:	60da      	str	r2, [r3, #12]
 8009db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f383 8810 	msr	PRIMASK, r3
}
 8009dc0:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8009dc2:	4b04      	ldr	r3, [pc, #16]	; (8009dd4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	22ff      	movs	r2, #255	; 0xff
 8009dc8:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8009dca:	bf00      	nop
}
 8009dcc:	3728      	adds	r7, #40	; 0x28
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	2000055c 	.word	0x2000055c
 8009dd8:	20000448 	.word	0x20000448
 8009ddc:	200003b8 	.word	0x200003b8
 8009de0:	20000450 	.word	0x20000450
 8009de4:	58000800 	.word	0x58000800

08009de8 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b088      	sub	sp, #32
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	4603      	mov	r3, r0
 8009df0:	6039      	str	r1, [r7, #0]
 8009df2:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8009df4:	4b5e      	ldr	r3, [pc, #376]	; (8009f70 <HW_TS_Init+0x188>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	22ca      	movs	r2, #202	; 0xca
 8009dfa:	625a      	str	r2, [r3, #36]	; 0x24
 8009dfc:	4b5c      	ldr	r3, [pc, #368]	; (8009f70 <HW_TS_Init+0x188>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2253      	movs	r2, #83	; 0x53
 8009e02:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009e04:	4b5b      	ldr	r3, [pc, #364]	; (8009f74 <HW_TS_Init+0x18c>)
 8009e06:	689b      	ldr	r3, [r3, #8]
 8009e08:	4a5a      	ldr	r2, [pc, #360]	; (8009f74 <HW_TS_Init+0x18c>)
 8009e0a:	f043 0320 	orr.w	r3, r3, #32
 8009e0e:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8009e10:	4b58      	ldr	r3, [pc, #352]	; (8009f74 <HW_TS_Init+0x18c>)
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	b2db      	uxtb	r3, r3
 8009e16:	f003 0307 	and.w	r3, r3, #7
 8009e1a:	b2db      	uxtb	r3, r3
 8009e1c:	f1c3 0304 	rsb	r3, r3, #4
 8009e20:	b2da      	uxtb	r2, r3
 8009e22:	4b55      	ldr	r3, [pc, #340]	; (8009f78 <HW_TS_Init+0x190>)
 8009e24:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8009e26:	4b53      	ldr	r3, [pc, #332]	; (8009f74 <HW_TS_Init+0x18c>)
 8009e28:	691b      	ldr	r3, [r3, #16]
 8009e2a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009e2e:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8009e32:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e34:	693a      	ldr	r2, [r7, #16]
 8009e36:	fa92 f2a2 	rbit	r2, r2
 8009e3a:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8009e3c:	68fa      	ldr	r2, [r7, #12]
 8009e3e:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8009e40:	697a      	ldr	r2, [r7, #20]
 8009e42:	2a00      	cmp	r2, #0
 8009e44:	d101      	bne.n	8009e4a <HW_TS_Init+0x62>
  {
    return 32U;
 8009e46:	2220      	movs	r2, #32
 8009e48:	e003      	b.n	8009e52 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8009e4a:	697a      	ldr	r2, [r7, #20]
 8009e4c:	fab2 f282 	clz	r2, r2
 8009e50:	b2d2      	uxtb	r2, r2
 8009e52:	40d3      	lsrs	r3, r2
 8009e54:	b2db      	uxtb	r3, r3
 8009e56:	3301      	adds	r3, #1
 8009e58:	b2da      	uxtb	r2, r3
 8009e5a:	4b48      	ldr	r3, [pc, #288]	; (8009f7c <HW_TS_Init+0x194>)
 8009e5c:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8009e5e:	4b45      	ldr	r3, [pc, #276]	; (8009f74 <HW_TS_Init+0x18c>)
 8009e60:	691b      	ldr	r3, [r3, #16]
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	b29a      	uxth	r2, r3
 8009e6e:	4b44      	ldr	r3, [pc, #272]	; (8009f80 <HW_TS_Init+0x198>)
 8009e70:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8009e72:	4b43      	ldr	r3, [pc, #268]	; (8009f80 <HW_TS_Init+0x198>)
 8009e74:	881b      	ldrh	r3, [r3, #0]
 8009e76:	3b01      	subs	r3, #1
 8009e78:	4a40      	ldr	r2, [pc, #256]	; (8009f7c <HW_TS_Init+0x194>)
 8009e7a:	7812      	ldrb	r2, [r2, #0]
 8009e7c:	fb02 f303 	mul.w	r3, r2, r3
 8009e80:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8009e84:	4a3c      	ldr	r2, [pc, #240]	; (8009f78 <HW_TS_Init+0x190>)
 8009e86:	7812      	ldrb	r2, [r2, #0]
 8009e88:	40d3      	lsrs	r3, r2
 8009e8a:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8009e8c:	69bb      	ldr	r3, [r7, #24]
 8009e8e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d904      	bls.n	8009ea0 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8009e96:	4b3b      	ldr	r3, [pc, #236]	; (8009f84 <HW_TS_Init+0x19c>)
 8009e98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e9c:	801a      	strh	r2, [r3, #0]
 8009e9e:	e003      	b.n	8009ea8 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8009ea0:	69bb      	ldr	r3, [r7, #24]
 8009ea2:	b29a      	uxth	r2, r3
 8009ea4:	4b37      	ldr	r3, [pc, #220]	; (8009f84 <HW_TS_Init+0x19c>)
 8009ea6:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8009ea8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009eac:	f7ff fb9c 	bl	80095e8 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8009eb0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009eb4:	f7ff fb84 	bl	80095c0 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8009eb8:	79fb      	ldrb	r3, [r7, #7]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d13d      	bne.n	8009f3a <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8009ebe:	4b32      	ldr	r3, [pc, #200]	; (8009f88 <HW_TS_Init+0x1a0>)
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8009ec4:	4b31      	ldr	r3, [pc, #196]	; (8009f8c <HW_TS_Init+0x1a4>)
 8009ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8009eca:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8009ecc:	2300      	movs	r3, #0
 8009ece:	77fb      	strb	r3, [r7, #31]
 8009ed0:	e00c      	b.n	8009eec <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8009ed2:	7ffa      	ldrb	r2, [r7, #31]
 8009ed4:	492e      	ldr	r1, [pc, #184]	; (8009f90 <HW_TS_Init+0x1a8>)
 8009ed6:	4613      	mov	r3, r2
 8009ed8:	005b      	lsls	r3, r3, #1
 8009eda:	4413      	add	r3, r2
 8009edc:	00db      	lsls	r3, r3, #3
 8009ede:	440b      	add	r3, r1
 8009ee0:	330c      	adds	r3, #12
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8009ee6:	7ffb      	ldrb	r3, [r7, #31]
 8009ee8:	3301      	adds	r3, #1
 8009eea:	77fb      	strb	r3, [r7, #31]
 8009eec:	7ffb      	ldrb	r3, [r7, #31]
 8009eee:	2b05      	cmp	r3, #5
 8009ef0:	d9ef      	bls.n	8009ed2 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8009ef2:	4b28      	ldr	r3, [pc, #160]	; (8009f94 <HW_TS_Init+0x1ac>)
 8009ef4:	2206      	movs	r2, #6
 8009ef6:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8009ef8:	4b1d      	ldr	r3, [pc, #116]	; (8009f70 <HW_TS_Init+0x188>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	689a      	ldr	r2, [r3, #8]
 8009efe:	4b1c      	ldr	r3, [pc, #112]	; (8009f70 <HW_TS_Init+0x188>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f06:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8009f08:	4b19      	ldr	r3, [pc, #100]	; (8009f70 <HW_TS_Init+0x188>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	68db      	ldr	r3, [r3, #12]
 8009f0e:	b2da      	uxtb	r2, r3
 8009f10:	4b17      	ldr	r3, [pc, #92]	; (8009f70 <HW_TS_Init+0x188>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8009f18:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8009f1a:	4b1f      	ldr	r3, [pc, #124]	; (8009f98 <HW_TS_Init+0x1b0>)
 8009f1c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009f20:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8009f22:	2003      	movs	r0, #3
 8009f24:	f006 fd77 	bl	8010a16 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8009f28:	4b11      	ldr	r3, [pc, #68]	; (8009f70 <HW_TS_Init+0x188>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	689a      	ldr	r2, [r3, #8]
 8009f2e:	4b10      	ldr	r3, [pc, #64]	; (8009f70 <HW_TS_Init+0x188>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009f36:	609a      	str	r2, [r3, #8]
 8009f38:	e009      	b.n	8009f4e <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8009f3a:	4b0d      	ldr	r3, [pc, #52]	; (8009f70 <HW_TS_Init+0x188>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	68db      	ldr	r3, [r3, #12]
 8009f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d002      	beq.n	8009f4e <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8009f48:	2003      	movs	r0, #3
 8009f4a:	f006 fd56 	bl	80109fa <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8009f4e:	4b08      	ldr	r3, [pc, #32]	; (8009f70 <HW_TS_Init+0x188>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	22ff      	movs	r2, #255	; 0xff
 8009f54:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8009f56:	2200      	movs	r2, #0
 8009f58:	2103      	movs	r1, #3
 8009f5a:	2003      	movs	r0, #3
 8009f5c:	f006 fd0b 	bl	8010976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8009f60:	2003      	movs	r0, #3
 8009f62:	f006 fd22 	bl	80109aa <HAL_NVIC_EnableIRQ>

  return;
 8009f66:	bf00      	nop
}
 8009f68:	3720      	adds	r7, #32
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
 8009f6e:	bf00      	nop
 8009f70:	2000055c 	.word	0x2000055c
 8009f74:	40002800 	.word	0x40002800
 8009f78:	20000451 	.word	0x20000451
 8009f7c:	20000452 	.word	0x20000452
 8009f80:	20000454 	.word	0x20000454
 8009f84:	20000456 	.word	0x20000456
 8009f88:	20000450 	.word	0x20000450
 8009f8c:	2000044c 	.word	0x2000044c
 8009f90:	200003b8 	.word	0x200003b8
 8009f94:	20000448 	.word	0x20000448
 8009f98:	58000800 	.word	0x58000800

08009f9c <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b08b      	sub	sp, #44	; 0x2c
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	60b9      	str	r1, [r7, #8]
 8009fa6:	603b      	str	r3, [r7, #0]
 8009fa8:	4613      	mov	r3, r2
 8009faa:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8009fac:	2300      	movs	r3, #0
 8009fae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fb2:	f3ef 8310 	mrs	r3, PRIMASK
 8009fb6:	61fb      	str	r3, [r7, #28]
  return(result);
 8009fb8:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009fba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8009fbc:	b672      	cpsid	i
}
 8009fbe:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8009fc0:	e004      	b.n	8009fcc <HW_TS_Create+0x30>
  {
    loop++;
 8009fc2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8009fcc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009fd0:	2b05      	cmp	r3, #5
 8009fd2:	d80c      	bhi.n	8009fee <HW_TS_Create+0x52>
 8009fd4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009fd8:	492c      	ldr	r1, [pc, #176]	; (800a08c <HW_TS_Create+0xf0>)
 8009fda:	4613      	mov	r3, r2
 8009fdc:	005b      	lsls	r3, r3, #1
 8009fde:	4413      	add	r3, r2
 8009fe0:	00db      	lsls	r3, r3, #3
 8009fe2:	440b      	add	r3, r1
 8009fe4:	330c      	adds	r3, #12
 8009fe6:	781b      	ldrb	r3, [r3, #0]
 8009fe8:	b2db      	uxtb	r3, r3
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d1e9      	bne.n	8009fc2 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8009fee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009ff2:	2b06      	cmp	r3, #6
 8009ff4:	d038      	beq.n	800a068 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8009ff6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009ffa:	4924      	ldr	r1, [pc, #144]	; (800a08c <HW_TS_Create+0xf0>)
 8009ffc:	4613      	mov	r3, r2
 8009ffe:	005b      	lsls	r3, r3, #1
 800a000:	4413      	add	r3, r2
 800a002:	00db      	lsls	r3, r3, #3
 800a004:	440b      	add	r3, r1
 800a006:	330c      	adds	r3, #12
 800a008:	2201      	movs	r2, #1
 800a00a:	701a      	strb	r2, [r3, #0]
 800a00c:	6a3b      	ldr	r3, [r7, #32]
 800a00e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a010:	69bb      	ldr	r3, [r7, #24]
 800a012:	f383 8810 	msr	PRIMASK, r3
}
 800a016:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 800a018:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a01c:	491b      	ldr	r1, [pc, #108]	; (800a08c <HW_TS_Create+0xf0>)
 800a01e:	4613      	mov	r3, r2
 800a020:	005b      	lsls	r3, r3, #1
 800a022:	4413      	add	r3, r2
 800a024:	00db      	lsls	r3, r3, #3
 800a026:	440b      	add	r3, r1
 800a028:	3310      	adds	r3, #16
 800a02a:	68fa      	ldr	r2, [r7, #12]
 800a02c:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800a02e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a032:	4916      	ldr	r1, [pc, #88]	; (800a08c <HW_TS_Create+0xf0>)
 800a034:	4613      	mov	r3, r2
 800a036:	005b      	lsls	r3, r3, #1
 800a038:	4413      	add	r3, r2
 800a03a:	00db      	lsls	r3, r3, #3
 800a03c:	440b      	add	r3, r1
 800a03e:	330d      	adds	r3, #13
 800a040:	79fa      	ldrb	r2, [r7, #7]
 800a042:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 800a044:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a048:	4910      	ldr	r1, [pc, #64]	; (800a08c <HW_TS_Create+0xf0>)
 800a04a:	4613      	mov	r3, r2
 800a04c:	005b      	lsls	r3, r3, #1
 800a04e:	4413      	add	r3, r2
 800a050:	00db      	lsls	r3, r3, #3
 800a052:	440b      	add	r3, r1
 800a054:	683a      	ldr	r2, [r7, #0]
 800a056:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a05e:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 800a060:	2300      	movs	r3, #0
 800a062:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a066:	e008      	b.n	800a07a <HW_TS_Create+0xde>
 800a068:	6a3b      	ldr	r3, [r7, #32]
 800a06a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	f383 8810 	msr	PRIMASK, r3
}
 800a072:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 800a074:	2301      	movs	r3, #1
 800a076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 800a07a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a07e:	4618      	mov	r0, r3
 800a080:	372c      	adds	r7, #44	; 0x2c
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr
 800a08a:	bf00      	nop
 800a08c:	200003b8 	.word	0x200003b8

0800a090 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b086      	sub	sp, #24
 800a094:	af00      	add	r7, sp, #0
 800a096:	4603      	mov	r3, r0
 800a098:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a09a:	f3ef 8310 	mrs	r3, PRIMASK
 800a09e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a0a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a0a4:	b672      	cpsid	i
}
 800a0a6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800a0a8:	2003      	movs	r0, #3
 800a0aa:	f006 fc8c 	bl	80109c6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800a0ae:	4b34      	ldr	r3, [pc, #208]	; (800a180 <HW_TS_Stop+0xf0>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	22ca      	movs	r2, #202	; 0xca
 800a0b4:	625a      	str	r2, [r3, #36]	; 0x24
 800a0b6:	4b32      	ldr	r3, [pc, #200]	; (800a180 <HW_TS_Stop+0xf0>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	2253      	movs	r2, #83	; 0x53
 800a0bc:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800a0be:	79fa      	ldrb	r2, [r7, #7]
 800a0c0:	4930      	ldr	r1, [pc, #192]	; (800a184 <HW_TS_Stop+0xf4>)
 800a0c2:	4613      	mov	r3, r2
 800a0c4:	005b      	lsls	r3, r3, #1
 800a0c6:	4413      	add	r3, r2
 800a0c8:	00db      	lsls	r3, r3, #3
 800a0ca:	440b      	add	r3, r1
 800a0cc:	330c      	adds	r3, #12
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	2b02      	cmp	r3, #2
 800a0d4:	d142      	bne.n	800a15c <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800a0d6:	79fb      	ldrb	r3, [r7, #7]
 800a0d8:	2100      	movs	r1, #0
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7ff fc06 	bl	80098ec <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800a0e0:	4b29      	ldr	r3, [pc, #164]	; (800a188 <HW_TS_Stop+0xf8>)
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800a0e6:	7cfb      	ldrb	r3, [r7, #19]
 800a0e8:	2b06      	cmp	r3, #6
 800a0ea:	d12f      	bne.n	800a14c <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800a0ec:	4b27      	ldr	r3, [pc, #156]	; (800a18c <HW_TS_Stop+0xfc>)
 800a0ee:	689b      	ldr	r3, [r3, #8]
 800a0f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0f8:	d107      	bne.n	800a10a <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800a0fa:	bf00      	nop
 800a0fc:	4b20      	ldr	r3, [pc, #128]	; (800a180 <HW_TS_Stop+0xf0>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	68db      	ldr	r3, [r3, #12]
 800a102:	f003 0304 	and.w	r3, r3, #4
 800a106:	2b00      	cmp	r3, #0
 800a108:	d1f8      	bne.n	800a0fc <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800a10a:	4b1d      	ldr	r3, [pc, #116]	; (800a180 <HW_TS_Stop+0xf0>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	689a      	ldr	r2, [r3, #8]
 800a110:	4b1b      	ldr	r3, [pc, #108]	; (800a180 <HW_TS_Stop+0xf0>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a118:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800a11a:	bf00      	nop
 800a11c:	4b18      	ldr	r3, [pc, #96]	; (800a180 <HW_TS_Stop+0xf0>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	68db      	ldr	r3, [r3, #12]
 800a122:	f003 0304 	and.w	r3, r3, #4
 800a126:	2b00      	cmp	r3, #0
 800a128:	d0f8      	beq.n	800a11c <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800a12a:	4b15      	ldr	r3, [pc, #84]	; (800a180 <HW_TS_Stop+0xf0>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	68db      	ldr	r3, [r3, #12]
 800a130:	b2da      	uxtb	r2, r3
 800a132:	4b13      	ldr	r3, [pc, #76]	; (800a180 <HW_TS_Stop+0xf0>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800a13a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800a13c:	4b14      	ldr	r3, [pc, #80]	; (800a190 <HW_TS_Stop+0x100>)
 800a13e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a142:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800a144:	2003      	movs	r0, #3
 800a146:	f006 fc66 	bl	8010a16 <HAL_NVIC_ClearPendingIRQ>
 800a14a:	e007      	b.n	800a15c <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800a14c:	4b11      	ldr	r3, [pc, #68]	; (800a194 <HW_TS_Stop+0x104>)
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	b2db      	uxtb	r3, r3
 800a152:	7cfa      	ldrb	r2, [r7, #19]
 800a154:	429a      	cmp	r2, r3
 800a156:	d001      	beq.n	800a15c <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 800a158:	f7ff fce4 	bl	8009b24 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800a15c:	4b08      	ldr	r3, [pc, #32]	; (800a180 <HW_TS_Stop+0xf0>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	22ff      	movs	r2, #255	; 0xff
 800a162:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800a164:	2003      	movs	r0, #3
 800a166:	f006 fc20 	bl	80109aa <HAL_NVIC_EnableIRQ>
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	f383 8810 	msr	PRIMASK, r3
}
 800a174:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800a176:	bf00      	nop
}
 800a178:	3718      	adds	r7, #24
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
 800a17e:	bf00      	nop
 800a180:	2000055c 	.word	0x2000055c
 800a184:	200003b8 	.word	0x200003b8
 800a188:	20000448 	.word	0x20000448
 800a18c:	40002800 	.word	0x40002800
 800a190:	58000800 	.word	0x58000800
 800a194:	20000449 	.word	0x20000449

0800a198 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b086      	sub	sp, #24
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	4603      	mov	r3, r0
 800a1a0:	6039      	str	r1, [r7, #0]
 800a1a2:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800a1a4:	79fa      	ldrb	r2, [r7, #7]
 800a1a6:	493b      	ldr	r1, [pc, #236]	; (800a294 <HW_TS_Start+0xfc>)
 800a1a8:	4613      	mov	r3, r2
 800a1aa:	005b      	lsls	r3, r3, #1
 800a1ac:	4413      	add	r3, r2
 800a1ae:	00db      	lsls	r3, r3, #3
 800a1b0:	440b      	add	r3, r1
 800a1b2:	330c      	adds	r3, #12
 800a1b4:	781b      	ldrb	r3, [r3, #0]
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	2b02      	cmp	r3, #2
 800a1ba:	d103      	bne.n	800a1c4 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 800a1bc:	79fb      	ldrb	r3, [r7, #7]
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f7ff ff66 	bl	800a090 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1c4:	f3ef 8310 	mrs	r3, PRIMASK
 800a1c8:	60fb      	str	r3, [r7, #12]
  return(result);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a1cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1ce:	b672      	cpsid	i
}
 800a1d0:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800a1d2:	2003      	movs	r0, #3
 800a1d4:	f006 fbf7 	bl	80109c6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800a1d8:	4b2f      	ldr	r3, [pc, #188]	; (800a298 <HW_TS_Start+0x100>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	22ca      	movs	r2, #202	; 0xca
 800a1de:	625a      	str	r2, [r3, #36]	; 0x24
 800a1e0:	4b2d      	ldr	r3, [pc, #180]	; (800a298 <HW_TS_Start+0x100>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	2253      	movs	r2, #83	; 0x53
 800a1e6:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800a1e8:	79fa      	ldrb	r2, [r7, #7]
 800a1ea:	492a      	ldr	r1, [pc, #168]	; (800a294 <HW_TS_Start+0xfc>)
 800a1ec:	4613      	mov	r3, r2
 800a1ee:	005b      	lsls	r3, r3, #1
 800a1f0:	4413      	add	r3, r2
 800a1f2:	00db      	lsls	r3, r3, #3
 800a1f4:	440b      	add	r3, r1
 800a1f6:	330c      	adds	r3, #12
 800a1f8:	2202      	movs	r2, #2
 800a1fa:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800a1fc:	79fa      	ldrb	r2, [r7, #7]
 800a1fe:	4925      	ldr	r1, [pc, #148]	; (800a294 <HW_TS_Start+0xfc>)
 800a200:	4613      	mov	r3, r2
 800a202:	005b      	lsls	r3, r3, #1
 800a204:	4413      	add	r3, r2
 800a206:	00db      	lsls	r3, r3, #3
 800a208:	440b      	add	r3, r1
 800a20a:	3308      	adds	r3, #8
 800a20c:	683a      	ldr	r2, [r7, #0]
 800a20e:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800a210:	79fa      	ldrb	r2, [r7, #7]
 800a212:	4920      	ldr	r1, [pc, #128]	; (800a294 <HW_TS_Start+0xfc>)
 800a214:	4613      	mov	r3, r2
 800a216:	005b      	lsls	r3, r3, #1
 800a218:	4413      	add	r3, r2
 800a21a:	00db      	lsls	r3, r3, #3
 800a21c:	440b      	add	r3, r1
 800a21e:	3304      	adds	r3, #4
 800a220:	683a      	ldr	r2, [r7, #0]
 800a222:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800a224:	79fb      	ldrb	r3, [r7, #7]
 800a226:	4618      	mov	r0, r3
 800a228:	f7ff fab6 	bl	8009798 <linkTimer>
 800a22c:	4603      	mov	r3, r0
 800a22e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800a230:	4b1a      	ldr	r3, [pc, #104]	; (800a29c <HW_TS_Start+0x104>)
 800a232:	781b      	ldrb	r3, [r3, #0]
 800a234:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800a236:	4b1a      	ldr	r3, [pc, #104]	; (800a2a0 <HW_TS_Start+0x108>)
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	7c7a      	ldrb	r2, [r7, #17]
 800a23e:	429a      	cmp	r2, r3
 800a240:	d002      	beq.n	800a248 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800a242:	f7ff fc6f 	bl	8009b24 <RescheduleTimerList>
 800a246:	e013      	b.n	800a270 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800a248:	79fa      	ldrb	r2, [r7, #7]
 800a24a:	4912      	ldr	r1, [pc, #72]	; (800a294 <HW_TS_Start+0xfc>)
 800a24c:	4613      	mov	r3, r2
 800a24e:	005b      	lsls	r3, r3, #1
 800a250:	4413      	add	r3, r2
 800a252:	00db      	lsls	r3, r3, #3
 800a254:	440b      	add	r3, r1
 800a256:	3308      	adds	r3, #8
 800a258:	6819      	ldr	r1, [r3, #0]
 800a25a:	8a7b      	ldrh	r3, [r7, #18]
 800a25c:	79fa      	ldrb	r2, [r7, #7]
 800a25e:	1ac9      	subs	r1, r1, r3
 800a260:	480c      	ldr	r0, [pc, #48]	; (800a294 <HW_TS_Start+0xfc>)
 800a262:	4613      	mov	r3, r2
 800a264:	005b      	lsls	r3, r3, #1
 800a266:	4413      	add	r3, r2
 800a268:	00db      	lsls	r3, r3, #3
 800a26a:	4403      	add	r3, r0
 800a26c:	3308      	adds	r3, #8
 800a26e:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800a270:	4b09      	ldr	r3, [pc, #36]	; (800a298 <HW_TS_Start+0x100>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	22ff      	movs	r2, #255	; 0xff
 800a276:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800a278:	2003      	movs	r0, #3
 800a27a:	f006 fb96 	bl	80109aa <HAL_NVIC_EnableIRQ>
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	f383 8810 	msr	PRIMASK, r3
}
 800a288:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800a28a:	bf00      	nop
}
 800a28c:	3718      	adds	r7, #24
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
 800a292:	bf00      	nop
 800a294:	200003b8 	.word	0x200003b8
 800a298:	2000055c 	.word	0x2000055c
 800a29c:	20000448 	.word	0x20000448
 800a2a0:	20000449 	.word	0x20000449

0800a2a4 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b084      	sub	sp, #16
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	60f8      	str	r0, [r7, #12]
 800a2ac:	460b      	mov	r3, r1
 800a2ae:	607a      	str	r2, [r7, #4]
 800a2b0:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	4798      	blx	r3

  return;
 800a2b6:	bf00      	nop
}
 800a2b8:	3710      	adds	r7, #16
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}

0800a2be <LL_AHB2_GRP1_EnableClock>:
{
 800a2be:	b480      	push	{r7}
 800a2c0:	b085      	sub	sp, #20
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800a2c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a2ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a2cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800a2d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a2da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	4013      	ands	r3, r2
 800a2e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
}
 800a2e4:	bf00      	nop
 800a2e6:	3714      	adds	r7, #20
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr

0800a2f0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b085      	sub	sp, #20
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800a2f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a2fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a2fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	4313      	orrs	r3, r2
 800a306:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800a308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a30c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	4013      	ands	r3, r2
 800a312:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a314:	68fb      	ldr	r3, [r7, #12]
}
 800a316:	bf00      	nop
 800a318:	3714      	adds	r7, #20
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr
	...

0800a324 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800a328:	4b1b      	ldr	r3, [pc, #108]	; (800a398 <MX_I2C3_Init+0x74>)
 800a32a:	4a1c      	ldr	r2, [pc, #112]	; (800a39c <MX_I2C3_Init+0x78>)
 800a32c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10707DBC;
 800a32e:	4b1a      	ldr	r3, [pc, #104]	; (800a398 <MX_I2C3_Init+0x74>)
 800a330:	4a1b      	ldr	r2, [pc, #108]	; (800a3a0 <MX_I2C3_Init+0x7c>)
 800a332:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800a334:	4b18      	ldr	r3, [pc, #96]	; (800a398 <MX_I2C3_Init+0x74>)
 800a336:	2200      	movs	r2, #0
 800a338:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a33a:	4b17      	ldr	r3, [pc, #92]	; (800a398 <MX_I2C3_Init+0x74>)
 800a33c:	2201      	movs	r2, #1
 800a33e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a340:	4b15      	ldr	r3, [pc, #84]	; (800a398 <MX_I2C3_Init+0x74>)
 800a342:	2200      	movs	r2, #0
 800a344:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800a346:	4b14      	ldr	r3, [pc, #80]	; (800a398 <MX_I2C3_Init+0x74>)
 800a348:	2200      	movs	r2, #0
 800a34a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a34c:	4b12      	ldr	r3, [pc, #72]	; (800a398 <MX_I2C3_Init+0x74>)
 800a34e:	2200      	movs	r2, #0
 800a350:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a352:	4b11      	ldr	r3, [pc, #68]	; (800a398 <MX_I2C3_Init+0x74>)
 800a354:	2200      	movs	r2, #0
 800a356:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a358:	4b0f      	ldr	r3, [pc, #60]	; (800a398 <MX_I2C3_Init+0x74>)
 800a35a:	2200      	movs	r2, #0
 800a35c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800a35e:	480e      	ldr	r0, [pc, #56]	; (800a398 <MX_I2C3_Init+0x74>)
 800a360:	f007 f954 	bl	801160c <HAL_I2C_Init>
 800a364:	4603      	mov	r3, r0
 800a366:	2b00      	cmp	r3, #0
 800a368:	d001      	beq.n	800a36e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800a36a:	f000 fa1f 	bl	800a7ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a36e:	2100      	movs	r1, #0
 800a370:	4809      	ldr	r0, [pc, #36]	; (800a398 <MX_I2C3_Init+0x74>)
 800a372:	f007 fed7 	bl	8012124 <HAL_I2CEx_ConfigAnalogFilter>
 800a376:	4603      	mov	r3, r0
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d001      	beq.n	800a380 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800a37c:	f000 fa16 	bl	800a7ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800a380:	2100      	movs	r1, #0
 800a382:	4805      	ldr	r0, [pc, #20]	; (800a398 <MX_I2C3_Init+0x74>)
 800a384:	f007 ff19 	bl	80121ba <HAL_I2CEx_ConfigDigitalFilter>
 800a388:	4603      	mov	r3, r0
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d001      	beq.n	800a392 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800a38e:	f000 fa0d 	bl	800a7ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800a392:	bf00      	nop
 800a394:	bd80      	pop	{r7, pc}
 800a396:	bf00      	nop
 800a398:	20000458 	.word	0x20000458
 800a39c:	40005c00 	.word	0x40005c00
 800a3a0:	10707dbc 	.word	0x10707dbc

0800a3a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b09c      	sub	sp, #112	; 0x70
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a3ac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	601a      	str	r2, [r3, #0]
 800a3b4:	605a      	str	r2, [r3, #4]
 800a3b6:	609a      	str	r2, [r3, #8]
 800a3b8:	60da      	str	r2, [r3, #12]
 800a3ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a3bc:	f107 030c 	add.w	r3, r7, #12
 800a3c0:	2250      	movs	r2, #80	; 0x50
 800a3c2:	2100      	movs	r1, #0
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f00e fb83 	bl	8018ad0 <memset>
  if(i2cHandle->Instance==I2C3)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4a16      	ldr	r2, [pc, #88]	; (800a428 <HAL_I2C_MspInit+0x84>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d125      	bne.n	800a420 <HAL_I2C_MspInit+0x7c>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800a3d4:	2308      	movs	r3, #8
 800a3d6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_SYSCLK;
 800a3d8:	4b14      	ldr	r3, [pc, #80]	; (800a42c <HAL_I2C_MspInit+0x88>)
 800a3da:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a3dc:	f107 030c 	add.w	r3, r7, #12
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f00a f990 	bl	8014706 <HAL_RCCEx_PeriphCLKConfig>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d001      	beq.n	800a3f0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800a3ec:	f000 f9de 	bl	800a7ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a3f0:	2002      	movs	r0, #2
 800a3f2:	f7ff ff64 	bl	800a2be <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration
    PB13     ------> I2C3_SCL
    PB14     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800a3f6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800a3fa:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a3fc:	2312      	movs	r3, #18
 800a3fe:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a400:	2300      	movs	r3, #0
 800a402:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a404:	2300      	movs	r3, #0
 800a406:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800a408:	2304      	movs	r3, #4
 800a40a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a40c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a410:	4619      	mov	r1, r3
 800a412:	4807      	ldr	r0, [pc, #28]	; (800a430 <HAL_I2C_MspInit+0x8c>)
 800a414:	f006 fe40 	bl	8011098 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800a418:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800a41c:	f7ff ff68 	bl	800a2f0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800a420:	bf00      	nop
 800a422:	3770      	adds	r7, #112	; 0x70
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}
 800a428:	40005c00 	.word	0x40005c00
 800a42c:	00301000 	.word	0x00301000
 800a430:	48000400 	.word	0x48000400

0800a434 <LL_AHB3_GRP1_EnableClock>:
{
 800a434:	b480      	push	{r7}
 800a436:	b085      	sub	sp, #20
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800a43c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a440:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a442:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	4313      	orrs	r3, r2
 800a44a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800a44c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a450:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	4013      	ands	r3, r2
 800a456:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a458:	68fb      	ldr	r3, [r7, #12]
}
 800a45a:	bf00      	nop
 800a45c:	3714      	adds	r7, #20
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr
	...

0800a468 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 800a46c:	4b06      	ldr	r3, [pc, #24]	; (800a488 <MX_IPCC_Init+0x20>)
 800a46e:	4a07      	ldr	r2, [pc, #28]	; (800a48c <MX_IPCC_Init+0x24>)
 800a470:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800a472:	4805      	ldr	r0, [pc, #20]	; (800a488 <MX_IPCC_Init+0x20>)
 800a474:	f007 feee 	bl	8012254 <HAL_IPCC_Init>
 800a478:	4603      	mov	r3, r0
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d001      	beq.n	800a482 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800a47e:	f000 f995 	bl	800a7ac <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800a482:	bf00      	nop
 800a484:	bd80      	pop	{r7, pc}
 800a486:	bf00      	nop
 800a488:	200004ac 	.word	0x200004ac
 800a48c:	58000c00 	.word	0x58000c00

0800a490 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b082      	sub	sp, #8
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a0d      	ldr	r2, [pc, #52]	; (800a4d4 <HAL_IPCC_MspInit+0x44>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d113      	bne.n	800a4ca <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800a4a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a4a6:	f7ff ffc5 	bl	800a434 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	2100      	movs	r1, #0
 800a4ae:	202c      	movs	r0, #44	; 0x2c
 800a4b0:	f006 fa61 	bl	8010976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800a4b4:	202c      	movs	r0, #44	; 0x2c
 800a4b6:	f006 fa78 	bl	80109aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	2100      	movs	r1, #0
 800a4be:	202d      	movs	r0, #45	; 0x2d
 800a4c0:	f006 fa59 	bl	8010976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800a4c4:	202d      	movs	r0, #45	; 0x2d
 800a4c6:	f006 fa70 	bl	80109aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 800a4ca:	bf00      	nop
 800a4cc:	3708      	adds	r7, #8
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	58000c00 	.word	0x58000c00

0800a4d8 <LL_RCC_LSE_SetDriveCapability>:
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800a4e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a4e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4e8:	f023 0218 	bic.w	r2, r3, #24
 800a4ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800a4f8:	bf00      	nop
 800a4fa:	370c      	adds	r7, #12
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr
 800a504:	0000      	movs	r0, r0
	...

0800a508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b08c      	sub	sp, #48	; 0x30
 800a50c:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a50e:	f004 fd81 	bl	800f014 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 800a512:	f7fe f965 	bl	80087e0 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a516:	f000 f887 	bl	800a628 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800a51a:	f000 f8f7 	bl	800a70c <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 800a51e:	f7ff ffa3 	bl	800a468 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a522:	f7fe ffe7 	bl	80094f4 <MX_GPIO_Init>
  MX_DMA_Init();
 800a526:	f7fe fb12 	bl	8008b4e <MX_DMA_Init>
  MX_ADC1_Init();
 800a52a:	f7fd ff91 	bl	8008450 <MX_ADC1_Init>
  MX_I2C3_Init();
 800a52e:	f7ff fef9 	bl	800a324 <MX_I2C3_Init>
  MX_QUADSPI_Init();
 800a532:	f001 fa05 	bl	800b940 <MX_QUADSPI_Init>
  MX_RTC_Init();
 800a536:	f001 fae5 	bl	800bb04 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 800a53a:	f001 fcd3 	bl	800bee4 <MX_LPUART1_UART_Init>
  MX_RF_Init();
 800a53e:	f001 faaf 	bl	800baa0 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  UV_init();
 800a542:	f7fd fed5 	bl	80082f0 <UV_init>
  FL_QUADSPI_Init();
 800a546:	f7fe fb67 	bl	8008c18 <FL_QUADSPI_Init>
  mlx90632_init();
 800a54a:	f000 fd8d 	bl	800b068 <mlx90632_init>
  mlx90632_read_eeprom(&PR, &PG, &PO, &PT, &Ea, &Eb, &Fa, &Fb, &Ga, &Gb, &Ha, &Hb, &Ka);
 800a54e:	4b26      	ldr	r3, [pc, #152]	; (800a5e8 <main+0xe0>)
 800a550:	9308      	str	r3, [sp, #32]
 800a552:	4b26      	ldr	r3, [pc, #152]	; (800a5ec <main+0xe4>)
 800a554:	9307      	str	r3, [sp, #28]
 800a556:	4b26      	ldr	r3, [pc, #152]	; (800a5f0 <main+0xe8>)
 800a558:	9306      	str	r3, [sp, #24]
 800a55a:	4b26      	ldr	r3, [pc, #152]	; (800a5f4 <main+0xec>)
 800a55c:	9305      	str	r3, [sp, #20]
 800a55e:	4b26      	ldr	r3, [pc, #152]	; (800a5f8 <main+0xf0>)
 800a560:	9304      	str	r3, [sp, #16]
 800a562:	4b26      	ldr	r3, [pc, #152]	; (800a5fc <main+0xf4>)
 800a564:	9303      	str	r3, [sp, #12]
 800a566:	4b26      	ldr	r3, [pc, #152]	; (800a600 <main+0xf8>)
 800a568:	9302      	str	r3, [sp, #8]
 800a56a:	4b26      	ldr	r3, [pc, #152]	; (800a604 <main+0xfc>)
 800a56c:	9301      	str	r3, [sp, #4]
 800a56e:	4b26      	ldr	r3, [pc, #152]	; (800a608 <main+0x100>)
 800a570:	9300      	str	r3, [sp, #0]
 800a572:	4b26      	ldr	r3, [pc, #152]	; (800a60c <main+0x104>)
 800a574:	4a26      	ldr	r2, [pc, #152]	; (800a610 <main+0x108>)
 800a576:	4927      	ldr	r1, [pc, #156]	; (800a614 <main+0x10c>)
 800a578:	4827      	ldr	r0, [pc, #156]	; (800a618 <main+0x110>)
 800a57a:	f000 fecc 	bl	800b316 <mlx90632_read_eeprom>

  mlx90632_set_meas_type(MLX90632_MTYP_MEDICAL_BURST);
 800a57e:	2080      	movs	r0, #128	; 0x80
 800a580:	f001 f8d4 	bl	800b72c <mlx90632_set_meas_type>
  mlx90632_set_emissivity(1.00);
 800a584:	ed9f 0b16 	vldr	d0, [pc, #88]	; 800a5e0 <main+0xd8>
 800a588:	f000 fcc4 	bl	800af14 <mlx90632_set_emissivity>

  if (mlx90632_get_meas_type() != MLX90632_MTYP_MEDICAL_BURST){
 800a58c:	f001 f954 	bl	800b838 <mlx90632_get_meas_type>
 800a590:	4603      	mov	r3, r0
 800a592:	2b80      	cmp	r3, #128	; 0x80
 800a594:	d002      	beq.n	800a59c <main+0x94>
	  mlx90632_set_meas_type(MLX90632_MTYP_MEDICAL_BURST);}
 800a596:	2080      	movs	r0, #128	; 0x80
 800a598:	f001 f8c8 	bl	800b72c <mlx90632_set_meas_type>

  HAL_Delay(10);
 800a59c:	200a      	movs	r0, #10
 800a59e:	f7fe fa5a 	bl	8008a56 <HAL_Delay>

  AccelInit();
 800a5a2:	f7fd fd09 	bl	8007fb8 <AccelInit>

  EOC_v=HAL_GPIO_ReadPin(GPIOC,EOC_Pin);
 800a5a6:	2140      	movs	r1, #64	; 0x40
 800a5a8:	481c      	ldr	r0, [pc, #112]	; (800a61c <main+0x114>)
 800a5aa:	f006 ffc3 	bl	8011534 <HAL_GPIO_ReadPin>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	4b1b      	ldr	r3, [pc, #108]	; (800a620 <main+0x118>)
 800a5b4:	701a      	strb	r2, [r3, #0]
  PWR_GD=HAL_GPIO_ReadPin(GPIOC,PWR_Pin);
 800a5b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a5ba:	4818      	ldr	r0, [pc, #96]	; (800a61c <main+0x114>)
 800a5bc:	f006 ffba 	bl	8011534 <HAL_GPIO_ReadPin>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	461a      	mov	r2, r3
 800a5c4:	4b17      	ldr	r3, [pc, #92]	; (800a624 <main+0x11c>)
 800a5c6:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOA,TS_Pin,GPIO_PIN_SET);
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a5ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a5d2:	f006 ffc7 	bl	8011564 <HAL_GPIO_WritePin>
//	printf("data2 %d %d %d %d \n",opmod[0],opmod[1],opmod[2],opmod[3]);
//  }
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 800a5d6:	f7fe f911 	bl	80087fc <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 800a5da:	f7fe fa61 	bl	8008aa0 <MX_APPE_Process>
 800a5de:	e7fc      	b.n	800a5da <main+0xd2>
 800a5e0:	00000000 	.word	0x00000000
 800a5e4:	3ff00000 	.word	0x3ff00000
 800a5e8:	20000030 	.word	0x20000030
 800a5ec:	200004ea 	.word	0x200004ea
 800a5f0:	2000002c 	.word	0x2000002c
 800a5f4:	2000002e 	.word	0x2000002e
 800a5f8:	20000028 	.word	0x20000028
 800a5fc:	20000024 	.word	0x20000024
 800a600:	20000020 	.word	0x20000020
 800a604:	2000001c 	.word	0x2000001c
 800a608:	20000018 	.word	0x20000018
 800a60c:	20000010 	.word	0x20000010
 800a610:	20000014 	.word	0x20000014
 800a614:	2000000c 	.word	0x2000000c
 800a618:	20000008 	.word	0x20000008
 800a61c:	48000800 	.word	0x48000800
 800a620:	200004e9 	.word	0x200004e9
 800a624:	200004e8 	.word	0x200004e8

0800a628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b09a      	sub	sp, #104	; 0x68
 800a62c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a62e:	f107 0320 	add.w	r3, r7, #32
 800a632:	2248      	movs	r2, #72	; 0x48
 800a634:	2100      	movs	r1, #0
 800a636:	4618      	mov	r0, r3
 800a638:	f00e fa4a 	bl	8018ad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a63c:	1d3b      	adds	r3, r7, #4
 800a63e:	2200      	movs	r2, #0
 800a640:	601a      	str	r2, [r3, #0]
 800a642:	605a      	str	r2, [r3, #4]
 800a644:	609a      	str	r2, [r3, #8]
 800a646:	60da      	str	r2, [r3, #12]
 800a648:	611a      	str	r2, [r3, #16]
 800a64a:	615a      	str	r2, [r3, #20]
 800a64c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800a64e:	f007 fe87 	bl	8012360 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800a652:	2010      	movs	r0, #16
 800a654:	f7ff ff40 	bl	800a4d8 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a658:	4b2b      	ldr	r3, [pc, #172]	; (800a708 <SystemClock_Config+0xe0>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a660:	4a29      	ldr	r2, [pc, #164]	; (800a708 <SystemClock_Config+0xe0>)
 800a662:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a666:	6013      	str	r3, [r2, #0]
 800a668:	4b27      	ldr	r3, [pc, #156]	; (800a708 <SystemClock_Config+0xe0>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a670:	603b      	str	r3, [r7, #0]
 800a672:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800a674:	2327      	movs	r3, #39	; 0x27
 800a676:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a678:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a67c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800a67e:	2301      	movs	r3, #1
 800a680:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a682:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a686:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800a688:	2301      	movs	r3, #1
 800a68a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800a68c:	2340      	movs	r3, #64	; 0x40
 800a68e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800a690:	2300      	movs	r3, #0
 800a692:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800a694:	2360      	movs	r3, #96	; 0x60
 800a696:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a698:	2302      	movs	r3, #2
 800a69a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800a69c:	2301      	movs	r3, #1
 800a69e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 800a6a4:	2320      	movs	r3, #32
 800a6a6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a6a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a6ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800a6ae:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800a6b2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800a6b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a6b8:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a6ba:	f107 0320 	add.w	r3, r7, #32
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f009 f870 	bl	80137a4 <HAL_RCC_OscConfig>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d001      	beq.n	800a6ce <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800a6ca:	f000 f86f 	bl	800a7ac <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800a6ce:	236f      	movs	r3, #111	; 0x6f
 800a6d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a6d2:	2303      	movs	r3, #3
 800a6d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800a6d6:	2380      	movs	r3, #128	; 0x80
 800a6d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800a6e2:	2380      	movs	r3, #128	; 0x80
 800a6e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800a6ea:	1d3b      	adds	r3, r7, #4
 800a6ec:	2103      	movs	r1, #3
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f009 fbcc 	bl	8013e8c <HAL_RCC_ClockConfig>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d001      	beq.n	800a6fe <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800a6fa:	f000 f857 	bl	800a7ac <Error_Handler>
  }
}
 800a6fe:	bf00      	nop
 800a700:	3768      	adds	r7, #104	; 0x68
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	58000400 	.word	0x58000400

0800a70c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b094      	sub	sp, #80	; 0x50
 800a710:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a712:	463b      	mov	r3, r7
 800a714:	2250      	movs	r2, #80	; 0x50
 800a716:	2100      	movs	r1, #0
 800a718:	4618      	mov	r0, r3
 800a71a:	f00e f9d9 	bl	8018ad0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800a71e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800a722:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 800a724:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a728:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800a72a:	2300      	movs	r3, #0
 800a72c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800a72e:	2310      	movs	r3, #16
 800a730:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a732:	463b      	mov	r3, r7
 800a734:	4618      	mov	r0, r3
 800a736:	f009 ffe6 	bl	8014706 <HAL_RCCEx_PeriphCLKConfig>
 800a73a:	4603      	mov	r3, r0
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d001      	beq.n	800a744 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800a740:	f000 f834 	bl	800a7ac <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800a744:	bf00      	nop
 800a746:	3750      	adds	r7, #80	; 0x50
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b082      	sub	sp, #8
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 800a754:	1d39      	adds	r1, r7, #4
 800a756:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a75a:	2201      	movs	r2, #1
 800a75c:	4803      	ldr	r0, [pc, #12]	; (800a76c <__io_putchar+0x20>)
 800a75e:	f00a fedd 	bl	801551c <HAL_UART_Transmit>

  return ch;
 800a762:	687b      	ldr	r3, [r7, #4]
}
 800a764:	4618      	mov	r0, r3
 800a766:	3708      	adds	r7, #8
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}
 800a76c:	20000584 	.word	0x20000584

0800a770 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b082      	sub	sp, #8
 800a774:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 800a776:	2300      	movs	r3, #0
 800a778:	71fb      	strb	r3, [r7, #7]
  /* Place your implementation of fgetc here */

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&hlpuart1);
 800a77a:	4b0b      	ldr	r3, [pc, #44]	; (800a7a8 <__io_getchar+0x38>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	2208      	movs	r2, #8
 800a780:	621a      	str	r2, [r3, #32]

  /* Wait for reception of a character on the USART1 RX line
     and echo this character on console */
  HAL_UART_Receive(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 800a782:	1df9      	adds	r1, r7, #7
 800a784:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a788:	2201      	movs	r2, #1
 800a78a:	4807      	ldr	r0, [pc, #28]	; (800a7a8 <__io_getchar+0x38>)
 800a78c:	f00a ff54 	bl	8015638 <HAL_UART_Receive>
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 800a790:	1df9      	adds	r1, r7, #7
 800a792:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a796:	2201      	movs	r2, #1
 800a798:	4803      	ldr	r0, [pc, #12]	; (800a7a8 <__io_getchar+0x38>)
 800a79a:	f00a febf 	bl	801551c <HAL_UART_Transmit>
  return ch;
 800a79e:	79fb      	ldrb	r3, [r7, #7]
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3708      	adds	r7, #8
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}
 800a7a8:	20000584 	.word	0x20000584

0800a7ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800a7b0:	b672      	cpsid	i
}
 800a7b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a7b4:	e7fe      	b.n	800a7b4 <Error_Handler+0x8>

0800a7b6 <mlx90632_channel_new_select>:
 *
 * @retval 0 When both memory locations are updated as per ret
 * @retval -EINVAL channel_new and channel_old were not updated
 */
STATIC int32_t mlx90632_channel_new_select(int32_t ret, uint8_t *channel_new, uint8_t *channel_old)
{
 800a7b6:	b480      	push	{r7}
 800a7b8:	b085      	sub	sp, #20
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	60f8      	str	r0, [r7, #12]
 800a7be:	60b9      	str	r1, [r7, #8]
 800a7c0:	607a      	str	r2, [r7, #4]
    switch (ret)
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	d003      	beq.n	800a7d0 <mlx90632_channel_new_select+0x1a>
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2b02      	cmp	r3, #2
 800a7cc:	d007      	beq.n	800a7de <mlx90632_channel_new_select+0x28>
 800a7ce:	e00d      	b.n	800a7ec <mlx90632_channel_new_select+0x36>
    {
        case 1:
            *channel_new = 1;
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	701a      	strb	r2, [r3, #0]
            *channel_old = 2;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2202      	movs	r2, #2
 800a7da:	701a      	strb	r2, [r3, #0]
            break;
 800a7dc:	e009      	b.n	800a7f2 <mlx90632_channel_new_select+0x3c>

        case 2:
            *channel_new = 2;
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	2202      	movs	r2, #2
 800a7e2:	701a      	strb	r2, [r3, #0]
            *channel_old = 1;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	701a      	strb	r2, [r3, #0]
            break;
 800a7ea:	e002      	b.n	800a7f2 <mlx90632_channel_new_select+0x3c>

        default:
            return -EINVAL;
 800a7ec:	f06f 0315 	mvn.w	r3, #21
 800a7f0:	e000      	b.n	800a7f4 <mlx90632_channel_new_select+0x3e>
    }
    return 0;
 800a7f2:	2300      	movs	r3, #0
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3714      	adds	r7, #20
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr

0800a800 <mlx90632_read_temp_ambient_raw>:
 *
 * @retval 0 Successfully read both values
 * @retval <0 Something went wrong. Check errno.h for more details.
 */
STATIC int32_t mlx90632_read_temp_ambient_raw(int16_t *ambient_new_raw, int16_t *ambient_old_raw)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b084      	sub	sp, #16
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	6039      	str	r1, [r7, #0]
    int32_t ret;
    uint16_t read_tmp;

    ret = mlx90632_i2c_read(MLX90632_RAM_3(1), &read_tmp);
 800a80a:	f107 030a 	add.w	r3, r7, #10
 800a80e:	4619      	mov	r1, r3
 800a810:	f244 0005 	movw	r0, #16389	; 0x4005
 800a814:	f000 feec 	bl	800b5f0 <mlx90632_i2c_read>
 800a818:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	da01      	bge.n	800a824 <mlx90632_read_temp_ambient_raw+0x24>
        return ret;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	e015      	b.n	800a850 <mlx90632_read_temp_ambient_raw+0x50>
    *ambient_new_raw = (int16_t)read_tmp;
 800a824:	897b      	ldrh	r3, [r7, #10]
 800a826:	b21a      	sxth	r2, r3
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	801a      	strh	r2, [r3, #0]

    ret = mlx90632_i2c_read(MLX90632_RAM_3(2), &read_tmp);
 800a82c:	f107 030a 	add.w	r3, r7, #10
 800a830:	4619      	mov	r1, r3
 800a832:	f244 0008 	movw	r0, #16392	; 0x4008
 800a836:	f000 fedb 	bl	800b5f0 <mlx90632_i2c_read>
 800a83a:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	da01      	bge.n	800a846 <mlx90632_read_temp_ambient_raw+0x46>
        return ret;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	e004      	b.n	800a850 <mlx90632_read_temp_ambient_raw+0x50>
    *ambient_old_raw = (int16_t)read_tmp;
 800a846:	897b      	ldrh	r3, [r7, #10]
 800a848:	b21a      	sxth	r2, r3
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	801a      	strh	r2, [r3, #0]

    return ret;
 800a84e:	68fb      	ldr	r3, [r7, #12]
}
 800a850:	4618      	mov	r0, r3
 800a852:	3710      	adds	r7, #16
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <mlx90632_read_temp_object_raw>:
 * @retval 0 Successfully read both values
 * @retval <0 Something went wrong. Check errno.h for more details.
 */
STATIC int32_t mlx90632_read_temp_object_raw(int32_t start_measurement_ret,
                                             int16_t *object_new_raw, int16_t *object_old_raw)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b088      	sub	sp, #32
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	60f8      	str	r0, [r7, #12]
 800a860:	60b9      	str	r1, [r7, #8]
 800a862:	607a      	str	r2, [r7, #4]
    int32_t ret;
    uint16_t read_tmp;
    int16_t read;
    uint8_t channel, channel_old;

    ret = mlx90632_channel_new_select(start_measurement_ret, &channel, &channel_old);
 800a864:	f107 0216 	add.w	r2, r7, #22
 800a868:	f107 0317 	add.w	r3, r7, #23
 800a86c:	4619      	mov	r1, r3
 800a86e:	68f8      	ldr	r0, [r7, #12]
 800a870:	f7ff ffa1 	bl	800a7b6 <mlx90632_channel_new_select>
 800a874:	61f8      	str	r0, [r7, #28]
    if (ret != 0)
 800a876:	69fb      	ldr	r3, [r7, #28]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d002      	beq.n	800a882 <mlx90632_read_temp_object_raw+0x2a>
        return -EINVAL;
 800a87c:	f06f 0315 	mvn.w	r3, #21
 800a880:	e074      	b.n	800a96c <mlx90632_read_temp_object_raw+0x114>

    ret = mlx90632_i2c_read(MLX90632_RAM_2(channel), &read_tmp);
 800a882:	7dfb      	ldrb	r3, [r7, #23]
 800a884:	b29b      	uxth	r3, r3
 800a886:	461a      	mov	r2, r3
 800a888:	0052      	lsls	r2, r2, #1
 800a88a:	4413      	add	r3, r2
 800a88c:	b29b      	uxth	r3, r3
 800a88e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800a892:	3301      	adds	r3, #1
 800a894:	b29b      	uxth	r3, r3
 800a896:	b21b      	sxth	r3, r3
 800a898:	f107 0218 	add.w	r2, r7, #24
 800a89c:	4611      	mov	r1, r2
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f000 fea6 	bl	800b5f0 <mlx90632_i2c_read>
 800a8a4:	61f8      	str	r0, [r7, #28]
    if (ret < 0)
 800a8a6:	69fb      	ldr	r3, [r7, #28]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	da01      	bge.n	800a8b0 <mlx90632_read_temp_object_raw+0x58>
        return ret;
 800a8ac:	69fb      	ldr	r3, [r7, #28]
 800a8ae:	e05d      	b.n	800a96c <mlx90632_read_temp_object_raw+0x114>

    read = (int16_t)read_tmp;
 800a8b0:	8b3b      	ldrh	r3, [r7, #24]
 800a8b2:	837b      	strh	r3, [r7, #26]

    ret = mlx90632_i2c_read(MLX90632_RAM_1(channel), &read_tmp);
 800a8b4:	7dfb      	ldrb	r3, [r7, #23]
 800a8b6:	b29b      	uxth	r3, r3
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	0052      	lsls	r2, r2, #1
 800a8bc:	4413      	add	r3, r2
 800a8be:	b29b      	uxth	r3, r3
 800a8c0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800a8c4:	b29b      	uxth	r3, r3
 800a8c6:	b21b      	sxth	r3, r3
 800a8c8:	f107 0218 	add.w	r2, r7, #24
 800a8cc:	4611      	mov	r1, r2
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f000 fe8e 	bl	800b5f0 <mlx90632_i2c_read>
 800a8d4:	61f8      	str	r0, [r7, #28]
    if (ret < 0)
 800a8d6:	69fb      	ldr	r3, [r7, #28]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	da01      	bge.n	800a8e0 <mlx90632_read_temp_object_raw+0x88>
        return ret;
 800a8dc:	69fb      	ldr	r3, [r7, #28]
 800a8de:	e045      	b.n	800a96c <mlx90632_read_temp_object_raw+0x114>
    *object_new_raw = (read + (int16_t)read_tmp) / 2;
 800a8e0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800a8e4:	8b3a      	ldrh	r2, [r7, #24]
 800a8e6:	b212      	sxth	r2, r2
 800a8e8:	4413      	add	r3, r2
 800a8ea:	0fda      	lsrs	r2, r3, #31
 800a8ec:	4413      	add	r3, r2
 800a8ee:	105b      	asrs	r3, r3, #1
 800a8f0:	b21a      	sxth	r2, r3
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	801a      	strh	r2, [r3, #0]

    ret = mlx90632_i2c_read(MLX90632_RAM_2(channel_old), &read_tmp);
 800a8f6:	7dbb      	ldrb	r3, [r7, #22]
 800a8f8:	b29b      	uxth	r3, r3
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	0052      	lsls	r2, r2, #1
 800a8fe:	4413      	add	r3, r2
 800a900:	b29b      	uxth	r3, r3
 800a902:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800a906:	3301      	adds	r3, #1
 800a908:	b29b      	uxth	r3, r3
 800a90a:	b21b      	sxth	r3, r3
 800a90c:	f107 0218 	add.w	r2, r7, #24
 800a910:	4611      	mov	r1, r2
 800a912:	4618      	mov	r0, r3
 800a914:	f000 fe6c 	bl	800b5f0 <mlx90632_i2c_read>
 800a918:	61f8      	str	r0, [r7, #28]
    if (ret < 0)
 800a91a:	69fb      	ldr	r3, [r7, #28]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	da01      	bge.n	800a924 <mlx90632_read_temp_object_raw+0xcc>
        return ret;
 800a920:	69fb      	ldr	r3, [r7, #28]
 800a922:	e023      	b.n	800a96c <mlx90632_read_temp_object_raw+0x114>
    read = (int16_t)read_tmp;
 800a924:	8b3b      	ldrh	r3, [r7, #24]
 800a926:	837b      	strh	r3, [r7, #26]

    ret = mlx90632_i2c_read(MLX90632_RAM_1(channel_old), &read_tmp);
 800a928:	7dbb      	ldrb	r3, [r7, #22]
 800a92a:	b29b      	uxth	r3, r3
 800a92c:	461a      	mov	r2, r3
 800a92e:	0052      	lsls	r2, r2, #1
 800a930:	4413      	add	r3, r2
 800a932:	b29b      	uxth	r3, r3
 800a934:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800a938:	b29b      	uxth	r3, r3
 800a93a:	b21b      	sxth	r3, r3
 800a93c:	f107 0218 	add.w	r2, r7, #24
 800a940:	4611      	mov	r1, r2
 800a942:	4618      	mov	r0, r3
 800a944:	f000 fe54 	bl	800b5f0 <mlx90632_i2c_read>
 800a948:	61f8      	str	r0, [r7, #28]
    if (ret < 0)
 800a94a:	69fb      	ldr	r3, [r7, #28]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	da01      	bge.n	800a954 <mlx90632_read_temp_object_raw+0xfc>
        return ret;
 800a950:	69fb      	ldr	r3, [r7, #28]
 800a952:	e00b      	b.n	800a96c <mlx90632_read_temp_object_raw+0x114>
    *object_old_raw = (read + (int16_t)read_tmp) / 2;
 800a954:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800a958:	8b3a      	ldrh	r2, [r7, #24]
 800a95a:	b212      	sxth	r2, r2
 800a95c:	4413      	add	r3, r2
 800a95e:	0fda      	lsrs	r2, r3, #31
 800a960:	4413      	add	r3, r2
 800a962:	105b      	asrs	r3, r3, #1
 800a964:	b21a      	sxth	r2, r3
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	801a      	strh	r2, [r3, #0]

    return ret;
 800a96a:	69fb      	ldr	r3, [r7, #28]
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3720      	adds	r7, #32
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}

0800a974 <mlx90632_read_temp_raw_burst>:
    return ret;
}

int32_t mlx90632_read_temp_raw_burst(int16_t *ambient_new_raw, int16_t *ambient_old_raw,
                                     int16_t *object_new_raw, int16_t *object_old_raw)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b086      	sub	sp, #24
 800a978:	af00      	add	r7, sp, #0
 800a97a:	60f8      	str	r0, [r7, #12]
 800a97c:	60b9      	str	r1, [r7, #8]
 800a97e:	607a      	str	r2, [r7, #4]
 800a980:	603b      	str	r3, [r7, #0]
    int32_t ret, start_measurement_ret;

    // trigger and wait for measurement to complete
    start_measurement_ret = mlx90632_start_measurement_burst();
 800a982:	f000 fc71 	bl	800b268 <mlx90632_start_measurement_burst>
 800a986:	6178      	str	r0, [r7, #20]
    if (start_measurement_ret < 0)
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	da01      	bge.n	800a992 <mlx90632_read_temp_raw_burst+0x1e>
        return start_measurement_ret;
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	e010      	b.n	800a9b4 <mlx90632_read_temp_raw_burst+0x40>

    /** Read new and old **ambient** values from sensor */
    ret = mlx90632_read_temp_ambient_raw(ambient_new_raw, ambient_old_raw);
 800a992:	68b9      	ldr	r1, [r7, #8]
 800a994:	68f8      	ldr	r0, [r7, #12]
 800a996:	f7ff ff33 	bl	800a800 <mlx90632_read_temp_ambient_raw>
 800a99a:	6138      	str	r0, [r7, #16]
    if (ret < 0)
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	da01      	bge.n	800a9a6 <mlx90632_read_temp_raw_burst+0x32>
        return ret;
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	e006      	b.n	800a9b4 <mlx90632_read_temp_raw_burst+0x40>

    /** Read new and old **object** values from sensor */
    ret = mlx90632_read_temp_object_raw(2, object_new_raw, object_old_raw);
 800a9a6:	683a      	ldr	r2, [r7, #0]
 800a9a8:	6879      	ldr	r1, [r7, #4]
 800a9aa:	2002      	movs	r0, #2
 800a9ac:	f7ff ff54 	bl	800a858 <mlx90632_read_temp_object_raw>
 800a9b0:	6138      	str	r0, [r7, #16]

    return ret;
 800a9b2:	693b      	ldr	r3, [r7, #16]
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3718      	adds	r7, #24
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <mlx90632_preprocess_temp_ambient>:


/* DSPv5 */
double mlx90632_preprocess_temp_ambient(int16_t ambient_new_raw, int16_t ambient_old_raw, int16_t Gb)
{
 800a9bc:	b5b0      	push	{r4, r5, r7, lr}
 800a9be:	b086      	sub	sp, #24
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	80fb      	strh	r3, [r7, #6]
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	80bb      	strh	r3, [r7, #4]
 800a9ca:	4613      	mov	r3, r2
 800a9cc:	807b      	strh	r3, [r7, #2]
    double VR_Ta, kGb;

    kGb = ((double)Gb) / 1024.0;
 800a9ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f7fc fd86 	bl	80074e4 <__aeabi_i2d>
 800a9d8:	f04f 0200 	mov.w	r2, #0
 800a9dc:	4b27      	ldr	r3, [pc, #156]	; (800aa7c <mlx90632_preprocess_temp_ambient+0xc0>)
 800a9de:	f7fc ff15 	bl	800780c <__aeabi_ddiv>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	e9c7 2304 	strd	r2, r3, [r7, #16]

    VR_Ta = ambient_old_raw + kGb * (ambient_new_raw / (MLX90632_REF_3));
 800a9ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f7fc fd78 	bl	80074e4 <__aeabi_i2d>
 800a9f4:	4604      	mov	r4, r0
 800a9f6:	460d      	mov	r5, r1
 800a9f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f7fc fd71 	bl	80074e4 <__aeabi_i2d>
 800aa02:	f04f 0200 	mov.w	r2, #0
 800aa06:	4b1e      	ldr	r3, [pc, #120]	; (800aa80 <mlx90632_preprocess_temp_ambient+0xc4>)
 800aa08:	f7fc ff00 	bl	800780c <__aeabi_ddiv>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	460b      	mov	r3, r1
 800aa10:	4610      	mov	r0, r2
 800aa12:	4619      	mov	r1, r3
 800aa14:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800aa18:	f7fc fdce 	bl	80075b8 <__aeabi_dmul>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	460b      	mov	r3, r1
 800aa20:	4620      	mov	r0, r4
 800aa22:	4629      	mov	r1, r5
 800aa24:	f7fc fc12 	bl	800724c <__adddf3>
 800aa28:	4602      	mov	r2, r0
 800aa2a:	460b      	mov	r3, r1
 800aa2c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return ((ambient_new_raw / (MLX90632_REF_3)) / VR_Ta) * 524288.0;
 800aa30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7fc fd55 	bl	80074e4 <__aeabi_i2d>
 800aa3a:	f04f 0200 	mov.w	r2, #0
 800aa3e:	4b10      	ldr	r3, [pc, #64]	; (800aa80 <mlx90632_preprocess_temp_ambient+0xc4>)
 800aa40:	f7fc fee4 	bl	800780c <__aeabi_ddiv>
 800aa44:	4602      	mov	r2, r0
 800aa46:	460b      	mov	r3, r1
 800aa48:	4610      	mov	r0, r2
 800aa4a:	4619      	mov	r1, r3
 800aa4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aa50:	f7fc fedc 	bl	800780c <__aeabi_ddiv>
 800aa54:	4602      	mov	r2, r0
 800aa56:	460b      	mov	r3, r1
 800aa58:	4610      	mov	r0, r2
 800aa5a:	4619      	mov	r1, r3
 800aa5c:	f04f 0200 	mov.w	r2, #0
 800aa60:	4b08      	ldr	r3, [pc, #32]	; (800aa84 <mlx90632_preprocess_temp_ambient+0xc8>)
 800aa62:	f7fc fda9 	bl	80075b8 <__aeabi_dmul>
 800aa66:	4602      	mov	r2, r0
 800aa68:	460b      	mov	r3, r1
 800aa6a:	ec43 2b17 	vmov	d7, r2, r3
}
 800aa6e:	eeb0 0a47 	vmov.f32	s0, s14
 800aa72:	eef0 0a67 	vmov.f32	s1, s15
 800aa76:	3718      	adds	r7, #24
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bdb0      	pop	{r4, r5, r7, pc}
 800aa7c:	40900000 	.word	0x40900000
 800aa80:	40280000 	.word	0x40280000
 800aa84:	41200000 	.word	0x41200000

0800aa88 <mlx90632_preprocess_temp_object>:

double mlx90632_preprocess_temp_object(int16_t object_new_raw, int16_t object_old_raw,
                                       int16_t ambient_new_raw, int16_t ambient_old_raw,
                                       int16_t Ka)
{
 800aa88:	b5b0      	push	{r4, r5, r7, lr}
 800aa8a:	b086      	sub	sp, #24
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	4604      	mov	r4, r0
 800aa90:	4608      	mov	r0, r1
 800aa92:	4611      	mov	r1, r2
 800aa94:	461a      	mov	r2, r3
 800aa96:	4623      	mov	r3, r4
 800aa98:	80fb      	strh	r3, [r7, #6]
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	80bb      	strh	r3, [r7, #4]
 800aa9e:	460b      	mov	r3, r1
 800aaa0:	807b      	strh	r3, [r7, #2]
 800aaa2:	4613      	mov	r3, r2
 800aaa4:	803b      	strh	r3, [r7, #0]
    double VR_IR, kKa;

    kKa = ((double)Ka) / 1024.0;
 800aaa6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f7fc fd1a 	bl	80074e4 <__aeabi_i2d>
 800aab0:	f04f 0200 	mov.w	r2, #0
 800aab4:	4b2a      	ldr	r3, [pc, #168]	; (800ab60 <mlx90632_preprocess_temp_object+0xd8>)
 800aab6:	f7fc fea9 	bl	800780c <__aeabi_ddiv>
 800aaba:	4602      	mov	r2, r0
 800aabc:	460b      	mov	r3, r1
 800aabe:	e9c7 2304 	strd	r2, r3, [r7, #16]

    VR_IR = ambient_old_raw + kKa * (ambient_new_raw / (MLX90632_REF_3));
 800aac2:	f9b7 3000 	ldrsh.w	r3, [r7]
 800aac6:	4618      	mov	r0, r3
 800aac8:	f7fc fd0c 	bl	80074e4 <__aeabi_i2d>
 800aacc:	4604      	mov	r4, r0
 800aace:	460d      	mov	r5, r1
 800aad0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800aad4:	4618      	mov	r0, r3
 800aad6:	f7fc fd05 	bl	80074e4 <__aeabi_i2d>
 800aada:	f04f 0200 	mov.w	r2, #0
 800aade:	4b21      	ldr	r3, [pc, #132]	; (800ab64 <mlx90632_preprocess_temp_object+0xdc>)
 800aae0:	f7fc fe94 	bl	800780c <__aeabi_ddiv>
 800aae4:	4602      	mov	r2, r0
 800aae6:	460b      	mov	r3, r1
 800aae8:	4610      	mov	r0, r2
 800aaea:	4619      	mov	r1, r3
 800aaec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800aaf0:	f7fc fd62 	bl	80075b8 <__aeabi_dmul>
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	4620      	mov	r0, r4
 800aafa:	4629      	mov	r1, r5
 800aafc:	f7fc fba6 	bl	800724c <__adddf3>
 800ab00:	4602      	mov	r2, r0
 800ab02:	460b      	mov	r3, r1
 800ab04:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return ((((object_new_raw + object_old_raw) / 2) / (MLX90632_REF_12)) / VR_IR) * 524288.0;
 800ab08:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ab0c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800ab10:	4413      	add	r3, r2
 800ab12:	0fda      	lsrs	r2, r3, #31
 800ab14:	4413      	add	r3, r2
 800ab16:	105b      	asrs	r3, r3, #1
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f7fc fce3 	bl	80074e4 <__aeabi_i2d>
 800ab1e:	f04f 0200 	mov.w	r2, #0
 800ab22:	4b10      	ldr	r3, [pc, #64]	; (800ab64 <mlx90632_preprocess_temp_object+0xdc>)
 800ab24:	f7fc fe72 	bl	800780c <__aeabi_ddiv>
 800ab28:	4602      	mov	r2, r0
 800ab2a:	460b      	mov	r3, r1
 800ab2c:	4610      	mov	r0, r2
 800ab2e:	4619      	mov	r1, r3
 800ab30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ab34:	f7fc fe6a 	bl	800780c <__aeabi_ddiv>
 800ab38:	4602      	mov	r2, r0
 800ab3a:	460b      	mov	r3, r1
 800ab3c:	4610      	mov	r0, r2
 800ab3e:	4619      	mov	r1, r3
 800ab40:	f04f 0200 	mov.w	r2, #0
 800ab44:	4b08      	ldr	r3, [pc, #32]	; (800ab68 <mlx90632_preprocess_temp_object+0xe0>)
 800ab46:	f7fc fd37 	bl	80075b8 <__aeabi_dmul>
 800ab4a:	4602      	mov	r2, r0
 800ab4c:	460b      	mov	r3, r1
 800ab4e:	ec43 2b17 	vmov	d7, r2, r3
}
 800ab52:	eeb0 0a47 	vmov.f32	s0, s14
 800ab56:	eef0 0a67 	vmov.f32	s1, s15
 800ab5a:	3718      	adds	r7, #24
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bdb0      	pop	{r4, r5, r7, pc}
 800ab60:	40900000 	.word	0x40900000
 800ab64:	40280000 	.word	0x40280000
 800ab68:	41200000 	.word	0x41200000

0800ab6c <mlx90632_calc_temp_ambient>:

double mlx90632_calc_temp_ambient(int16_t ambient_new_raw, int16_t ambient_old_raw, int32_t P_T,
                                  int32_t P_R, int32_t P_G, int32_t P_O, int16_t Gb)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b090      	sub	sp, #64	; 0x40
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	60ba      	str	r2, [r7, #8]
 800ab74:	607b      	str	r3, [r7, #4]
 800ab76:	4603      	mov	r3, r0
 800ab78:	81fb      	strh	r3, [r7, #14]
 800ab7a:	460b      	mov	r3, r1
 800ab7c:	81bb      	strh	r3, [r7, #12]
    double Asub, Bsub, Ablock, Bblock, Cblock, AMB;

    AMB = mlx90632_preprocess_temp_ambient(ambient_new_raw, ambient_old_raw, Gb);
 800ab7e:	f9b7 2050 	ldrsh.w	r2, [r7, #80]	; 0x50
 800ab82:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800ab86:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7ff ff16 	bl	800a9bc <mlx90632_preprocess_temp_ambient>
 800ab90:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38

    Asub = ((double)P_T) / (double)17592186044416.0;
 800ab94:	68b8      	ldr	r0, [r7, #8]
 800ab96:	f7fc fca5 	bl	80074e4 <__aeabi_i2d>
 800ab9a:	f04f 0200 	mov.w	r2, #0
 800ab9e:	4b32      	ldr	r3, [pc, #200]	; (800ac68 <mlx90632_calc_temp_ambient+0xfc>)
 800aba0:	f7fc fe34 	bl	800780c <__aeabi_ddiv>
 800aba4:	4602      	mov	r2, r0
 800aba6:	460b      	mov	r3, r1
 800aba8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Bsub = (double)AMB - ((double)P_R / (double)256.0);
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f7fc fc99 	bl	80074e4 <__aeabi_i2d>
 800abb2:	f04f 0200 	mov.w	r2, #0
 800abb6:	4b2d      	ldr	r3, [pc, #180]	; (800ac6c <mlx90632_calc_temp_ambient+0x100>)
 800abb8:	f7fc fe28 	bl	800780c <__aeabi_ddiv>
 800abbc:	4602      	mov	r2, r0
 800abbe:	460b      	mov	r3, r1
 800abc0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800abc4:	f7fc fb40 	bl	8007248 <__aeabi_dsub>
 800abc8:	4602      	mov	r2, r0
 800abca:	460b      	mov	r3, r1
 800abcc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    Ablock = Asub * (Bsub * Bsub);
 800abd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800abd4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800abd8:	f7fc fcee 	bl	80075b8 <__aeabi_dmul>
 800abdc:	4602      	mov	r2, r0
 800abde:	460b      	mov	r3, r1
 800abe0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800abe4:	f7fc fce8 	bl	80075b8 <__aeabi_dmul>
 800abe8:	4602      	mov	r2, r0
 800abea:	460b      	mov	r3, r1
 800abec:	e9c7 2308 	strd	r2, r3, [r7, #32]
    Bblock = (Bsub / (double)P_G) * (double)1048576.0;
 800abf0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800abf2:	f7fc fc77 	bl	80074e4 <__aeabi_i2d>
 800abf6:	4602      	mov	r2, r0
 800abf8:	460b      	mov	r3, r1
 800abfa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800abfe:	f7fc fe05 	bl	800780c <__aeabi_ddiv>
 800ac02:	4602      	mov	r2, r0
 800ac04:	460b      	mov	r3, r1
 800ac06:	4610      	mov	r0, r2
 800ac08:	4619      	mov	r1, r3
 800ac0a:	f04f 0200 	mov.w	r2, #0
 800ac0e:	4b18      	ldr	r3, [pc, #96]	; (800ac70 <mlx90632_calc_temp_ambient+0x104>)
 800ac10:	f7fc fcd2 	bl	80075b8 <__aeabi_dmul>
 800ac14:	4602      	mov	r2, r0
 800ac16:	460b      	mov	r3, r1
 800ac18:	e9c7 2306 	strd	r2, r3, [r7, #24]
    Cblock = (double)P_O / (double)256.0;
 800ac1c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ac1e:	f7fc fc61 	bl	80074e4 <__aeabi_i2d>
 800ac22:	f04f 0200 	mov.w	r2, #0
 800ac26:	4b11      	ldr	r3, [pc, #68]	; (800ac6c <mlx90632_calc_temp_ambient+0x100>)
 800ac28:	f7fc fdf0 	bl	800780c <__aeabi_ddiv>
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	460b      	mov	r3, r1
 800ac30:	e9c7 2304 	strd	r2, r3, [r7, #16]

    return Bblock + Ablock + Cblock;
 800ac34:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ac38:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ac3c:	f7fc fb06 	bl	800724c <__adddf3>
 800ac40:	4602      	mov	r2, r0
 800ac42:	460b      	mov	r3, r1
 800ac44:	4610      	mov	r0, r2
 800ac46:	4619      	mov	r1, r3
 800ac48:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ac4c:	f7fc fafe 	bl	800724c <__adddf3>
 800ac50:	4602      	mov	r2, r0
 800ac52:	460b      	mov	r3, r1
 800ac54:	ec43 2b17 	vmov	d7, r2, r3
}
 800ac58:	eeb0 0a47 	vmov.f32	s0, s14
 800ac5c:	eef0 0a67 	vmov.f32	s1, s15
 800ac60:	3740      	adds	r7, #64	; 0x40
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}
 800ac66:	bf00      	nop
 800ac68:	42b00000 	.word	0x42b00000
 800ac6c:	40700000 	.word	0x40700000
 800ac70:	41300000 	.word	0x41300000
 800ac74:	00000000 	.word	0x00000000

0800ac78 <mlx90632_calc_temp_object_iteration>:
 * @return Calculated object temperature for current iteration in milliCelsius
 */
STATIC double mlx90632_calc_temp_object_iteration(double prev_object_temp, int32_t object, double TAdut,
                                                  int32_t Ga, int32_t Fa, int32_t Fb, int16_t Ha, int16_t Hb,
                                                  double emissivity)
{
 800ac78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ac7c:	b09c      	sub	sp, #112	; 0x70
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	ed87 0b08 	vstr	d0, [r7, #32]
 800ac84:	61f8      	str	r0, [r7, #28]
 800ac86:	ed87 1b04 	vstr	d1, [r7, #16]
 800ac8a:	61b9      	str	r1, [r7, #24]
 800ac8c:	60fa      	str	r2, [r7, #12]
 800ac8e:	60bb      	str	r3, [r7, #8]
 800ac90:	ed87 2b00 	vstr	d2, [r7]
    // temp variables
    double KsTAtmp, Alpha_corr;
    double Ha_customer, Hb_customer;


    Ha_customer = Ha / ((double)16384.0);
 800ac94:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f7fc fc23 	bl	80074e4 <__aeabi_i2d>
 800ac9e:	f04f 0200 	mov.w	r2, #0
 800aca2:	4b95      	ldr	r3, [pc, #596]	; (800aef8 <mlx90632_calc_temp_object_iteration+0x280>)
 800aca4:	f7fc fdb2 	bl	800780c <__aeabi_ddiv>
 800aca8:	4602      	mov	r2, r0
 800acaa:	460b      	mov	r3, r1
 800acac:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    Hb_customer = Hb / ((double)1024.0);
 800acb0:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 800acb4:	4618      	mov	r0, r3
 800acb6:	f7fc fc15 	bl	80074e4 <__aeabi_i2d>
 800acba:	f04f 0200 	mov.w	r2, #0
 800acbe:	4b8f      	ldr	r3, [pc, #572]	; (800aefc <mlx90632_calc_temp_object_iteration+0x284>)
 800acc0:	f7fc fda4 	bl	800780c <__aeabi_ddiv>
 800acc4:	4602      	mov	r2, r0
 800acc6:	460b      	mov	r3, r1
 800acc8:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    calcedGa = ((double)Ga * (prev_object_temp - 25)) / ((double)68719476736.0);
 800accc:	69b8      	ldr	r0, [r7, #24]
 800acce:	f7fc fc09 	bl	80074e4 <__aeabi_i2d>
 800acd2:	4682      	mov	sl, r0
 800acd4:	468b      	mov	fp, r1
 800acd6:	f04f 0200 	mov.w	r2, #0
 800acda:	4b89      	ldr	r3, [pc, #548]	; (800af00 <mlx90632_calc_temp_object_iteration+0x288>)
 800acdc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ace0:	f7fc fab2 	bl	8007248 <__aeabi_dsub>
 800ace4:	4602      	mov	r2, r0
 800ace6:	460b      	mov	r3, r1
 800ace8:	4650      	mov	r0, sl
 800acea:	4659      	mov	r1, fp
 800acec:	f7fc fc64 	bl	80075b8 <__aeabi_dmul>
 800acf0:	4602      	mov	r2, r0
 800acf2:	460b      	mov	r3, r1
 800acf4:	4610      	mov	r0, r2
 800acf6:	4619      	mov	r1, r3
 800acf8:	f04f 0200 	mov.w	r2, #0
 800acfc:	4b81      	ldr	r3, [pc, #516]	; (800af04 <mlx90632_calc_temp_object_iteration+0x28c>)
 800acfe:	f7fc fd85 	bl	800780c <__aeabi_ddiv>
 800ad02:	4602      	mov	r2, r0
 800ad04:	460b      	mov	r3, r1
 800ad06:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    KsTAtmp = (double)Fb * (TAdut - 25);
 800ad0a:	68b8      	ldr	r0, [r7, #8]
 800ad0c:	f7fc fbea 	bl	80074e4 <__aeabi_i2d>
 800ad10:	4682      	mov	sl, r0
 800ad12:	468b      	mov	fp, r1
 800ad14:	f04f 0200 	mov.w	r2, #0
 800ad18:	4b79      	ldr	r3, [pc, #484]	; (800af00 <mlx90632_calc_temp_object_iteration+0x288>)
 800ad1a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ad1e:	f7fc fa93 	bl	8007248 <__aeabi_dsub>
 800ad22:	4602      	mov	r2, r0
 800ad24:	460b      	mov	r3, r1
 800ad26:	4650      	mov	r0, sl
 800ad28:	4659      	mov	r1, fp
 800ad2a:	f7fc fc45 	bl	80075b8 <__aeabi_dmul>
 800ad2e:	4602      	mov	r2, r0
 800ad30:	460b      	mov	r3, r1
 800ad32:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    calcedGb = KsTAtmp / ((double)68719476736.0);
 800ad36:	f04f 0200 	mov.w	r2, #0
 800ad3a:	4b72      	ldr	r3, [pc, #456]	; (800af04 <mlx90632_calc_temp_object_iteration+0x28c>)
 800ad3c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800ad40:	f7fc fd64 	bl	800780c <__aeabi_ddiv>
 800ad44:	4602      	mov	r2, r0
 800ad46:	460b      	mov	r3, r1
 800ad48:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    Alpha_corr = (((double)(Fa * POW10)) * Ha_customer * (double)(1 + calcedGa + calcedGb)) /
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	17da      	asrs	r2, r3, #31
 800ad50:	4698      	mov	r8, r3
 800ad52:	4691      	mov	r9, r2
 800ad54:	4b6c      	ldr	r3, [pc, #432]	; (800af08 <mlx90632_calc_temp_object_iteration+0x290>)
 800ad56:	fb03 f209 	mul.w	r2, r3, r9
 800ad5a:	2302      	movs	r3, #2
 800ad5c:	fb03 f308 	mul.w	r3, r3, r8
 800ad60:	4413      	add	r3, r2
 800ad62:	4a69      	ldr	r2, [pc, #420]	; (800af08 <mlx90632_calc_temp_object_iteration+0x290>)
 800ad64:	fba8 4502 	umull	r4, r5, r8, r2
 800ad68:	442b      	add	r3, r5
 800ad6a:	461d      	mov	r5, r3
 800ad6c:	4620      	mov	r0, r4
 800ad6e:	4629      	mov	r1, r5
 800ad70:	f7fc fbf4 	bl	800755c <__aeabi_l2d>
 800ad74:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800ad78:	f7fc fc1e 	bl	80075b8 <__aeabi_dmul>
 800ad7c:	4602      	mov	r2, r0
 800ad7e:	460b      	mov	r3, r1
 800ad80:	4614      	mov	r4, r2
 800ad82:	461d      	mov	r5, r3
 800ad84:	f04f 0200 	mov.w	r2, #0
 800ad88:	4b60      	ldr	r3, [pc, #384]	; (800af0c <mlx90632_calc_temp_object_iteration+0x294>)
 800ad8a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800ad8e:	f7fc fa5d 	bl	800724c <__adddf3>
 800ad92:	4602      	mov	r2, r0
 800ad94:	460b      	mov	r3, r1
 800ad96:	4610      	mov	r0, r2
 800ad98:	4619      	mov	r1, r3
 800ad9a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ad9e:	f7fc fa55 	bl	800724c <__adddf3>
 800ada2:	4602      	mov	r2, r0
 800ada4:	460b      	mov	r3, r1
 800ada6:	4620      	mov	r0, r4
 800ada8:	4629      	mov	r1, r5
 800adaa:	f7fc fc05 	bl	80075b8 <__aeabi_dmul>
 800adae:	4602      	mov	r2, r0
 800adb0:	460b      	mov	r3, r1
 800adb2:	4610      	mov	r0, r2
 800adb4:	4619      	mov	r1, r3
 800adb6:	f04f 0200 	mov.w	r2, #0
 800adba:	4b55      	ldr	r3, [pc, #340]	; (800af10 <mlx90632_calc_temp_object_iteration+0x298>)
 800adbc:	f7fc fd26 	bl	800780c <__aeabi_ddiv>
 800adc0:	4602      	mov	r2, r0
 800adc2:	460b      	mov	r3, r1
 800adc4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
                 ((double)70368744177664.0);
    calcedFa = object / (emissivity * (Alpha_corr / POW10));
 800adc8:	69f8      	ldr	r0, [r7, #28]
 800adca:	f7fc fb8b 	bl	80074e4 <__aeabi_i2d>
 800adce:	4604      	mov	r4, r0
 800add0:	460d      	mov	r5, r1
 800add2:	a345      	add	r3, pc, #276	; (adr r3, 800aee8 <mlx90632_calc_temp_object_iteration+0x270>)
 800add4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800addc:	f7fc fd16 	bl	800780c <__aeabi_ddiv>
 800ade0:	4602      	mov	r2, r0
 800ade2:	460b      	mov	r3, r1
 800ade4:	4610      	mov	r0, r2
 800ade6:	4619      	mov	r1, r3
 800ade8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adec:	f7fc fbe4 	bl	80075b8 <__aeabi_dmul>
 800adf0:	4602      	mov	r2, r0
 800adf2:	460b      	mov	r3, r1
 800adf4:	4620      	mov	r0, r4
 800adf6:	4629      	mov	r1, r5
 800adf8:	f7fc fd08 	bl	800780c <__aeabi_ddiv>
 800adfc:	4602      	mov	r2, r0
 800adfe:	460b      	mov	r3, r1
 800ae00:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    TAdut4 = (TAdut + 273.15) * (TAdut + 273.15) * (TAdut + 273.15) * (TAdut + 273.15);
 800ae04:	a33a      	add	r3, pc, #232	; (adr r3, 800aef0 <mlx90632_calc_temp_object_iteration+0x278>)
 800ae06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ae0e:	f7fc fa1d 	bl	800724c <__adddf3>
 800ae12:	4602      	mov	r2, r0
 800ae14:	460b      	mov	r3, r1
 800ae16:	4614      	mov	r4, r2
 800ae18:	461d      	mov	r5, r3
 800ae1a:	a335      	add	r3, pc, #212	; (adr r3, 800aef0 <mlx90632_calc_temp_object_iteration+0x278>)
 800ae1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae20:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ae24:	f7fc fa12 	bl	800724c <__adddf3>
 800ae28:	4602      	mov	r2, r0
 800ae2a:	460b      	mov	r3, r1
 800ae2c:	4620      	mov	r0, r4
 800ae2e:	4629      	mov	r1, r5
 800ae30:	f7fc fbc2 	bl	80075b8 <__aeabi_dmul>
 800ae34:	4602      	mov	r2, r0
 800ae36:	460b      	mov	r3, r1
 800ae38:	4614      	mov	r4, r2
 800ae3a:	461d      	mov	r5, r3
 800ae3c:	a32c      	add	r3, pc, #176	; (adr r3, 800aef0 <mlx90632_calc_temp_object_iteration+0x278>)
 800ae3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae42:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ae46:	f7fc fa01 	bl	800724c <__adddf3>
 800ae4a:	4602      	mov	r2, r0
 800ae4c:	460b      	mov	r3, r1
 800ae4e:	4620      	mov	r0, r4
 800ae50:	4629      	mov	r1, r5
 800ae52:	f7fc fbb1 	bl	80075b8 <__aeabi_dmul>
 800ae56:	4602      	mov	r2, r0
 800ae58:	460b      	mov	r3, r1
 800ae5a:	4614      	mov	r4, r2
 800ae5c:	461d      	mov	r5, r3
 800ae5e:	a324      	add	r3, pc, #144	; (adr r3, 800aef0 <mlx90632_calc_temp_object_iteration+0x278>)
 800ae60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae64:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ae68:	f7fc f9f0 	bl	800724c <__adddf3>
 800ae6c:	4602      	mov	r2, r0
 800ae6e:	460b      	mov	r3, r1
 800ae70:	4620      	mov	r0, r4
 800ae72:	4629      	mov	r1, r5
 800ae74:	f7fc fba0 	bl	80075b8 <__aeabi_dmul>
 800ae78:	4602      	mov	r2, r0
 800ae7a:	460b      	mov	r3, r1
 800ae7c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    first_sqrt = sqrt(calcedFa + TAdut4);
 800ae80:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ae84:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800ae88:	f7fc f9e0 	bl	800724c <__adddf3>
 800ae8c:	4602      	mov	r2, r0
 800ae8e:	460b      	mov	r3, r1
 800ae90:	ec43 2b17 	vmov	d7, r2, r3
 800ae94:	eeb0 0a47 	vmov.f32	s0, s14
 800ae98:	eef0 0a67 	vmov.f32	s1, s15
 800ae9c:	f012 fb0e 	bl	801d4bc <sqrt>
 800aea0:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28

    return sqrt(first_sqrt) - 273.15 - Hb_customer;
 800aea4:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 800aea8:	f012 fb08 	bl	801d4bc <sqrt>
 800aeac:	ec51 0b10 	vmov	r0, r1, d0
 800aeb0:	a30f      	add	r3, pc, #60	; (adr r3, 800aef0 <mlx90632_calc_temp_object_iteration+0x278>)
 800aeb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb6:	f7fc f9c7 	bl	8007248 <__aeabi_dsub>
 800aeba:	4602      	mov	r2, r0
 800aebc:	460b      	mov	r3, r1
 800aebe:	4610      	mov	r0, r2
 800aec0:	4619      	mov	r1, r3
 800aec2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800aec6:	f7fc f9bf 	bl	8007248 <__aeabi_dsub>
 800aeca:	4602      	mov	r2, r0
 800aecc:	460b      	mov	r3, r1
 800aece:	ec43 2b17 	vmov	d7, r2, r3
}
 800aed2:	eeb0 0a47 	vmov.f32	s0, s14
 800aed6:	eef0 0a67 	vmov.f32	s1, s15
 800aeda:	3770      	adds	r7, #112	; 0x70
 800aedc:	46bd      	mov	sp, r7
 800aede:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aee2:	bf00      	nop
 800aee4:	f3af 8000 	nop.w
 800aee8:	20000000 	.word	0x20000000
 800aeec:	4202a05f 	.word	0x4202a05f
 800aef0:	66666666 	.word	0x66666666
 800aef4:	40711266 	.word	0x40711266
 800aef8:	40d00000 	.word	0x40d00000
 800aefc:	40900000 	.word	0x40900000
 800af00:	40390000 	.word	0x40390000
 800af04:	42300000 	.word	0x42300000
 800af08:	540be400 	.word	0x540be400
 800af0c:	3ff00000 	.word	0x3ff00000
 800af10:	42d00000 	.word	0x42d00000

0800af14 <mlx90632_set_emissivity>:
    return sqrt(first_sqrt) - 273.15 - Hb_customer;
}

static double emissivity = 0.0;
void mlx90632_set_emissivity(double value)
{
 800af14:	b480      	push	{r7}
 800af16:	b083      	sub	sp, #12
 800af18:	af00      	add	r7, sp, #0
 800af1a:	ed87 0b00 	vstr	d0, [r7]
    emissivity = value;
 800af1e:	4905      	ldr	r1, [pc, #20]	; (800af34 <mlx90632_set_emissivity+0x20>)
 800af20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af24:	e9c1 2300 	strd	r2, r3, [r1]
}
 800af28:	bf00      	nop
 800af2a:	370c      	adds	r7, #12
 800af2c:	46bd      	mov	sp, r7
 800af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af32:	4770      	bx	lr
 800af34:	20000508 	.word	0x20000508

0800af38 <mlx90632_get_emissivity>:

double mlx90632_get_emissivity(void)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	af00      	add	r7, sp, #0
    if (emissivity == 0.0)
 800af3c:	4b0c      	ldr	r3, [pc, #48]	; (800af70 <mlx90632_get_emissivity+0x38>)
 800af3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800af42:	f04f 0200 	mov.w	r2, #0
 800af46:	f04f 0300 	mov.w	r3, #0
 800af4a:	f7fc fd9d 	bl	8007a88 <__aeabi_dcmpeq>
 800af4e:	4603      	mov	r3, r0
 800af50:	2b00      	cmp	r3, #0
 800af52:	d003      	beq.n	800af5c <mlx90632_get_emissivity+0x24>
    {
        return 1.0;
 800af54:	f04f 0200 	mov.w	r2, #0
 800af58:	4b06      	ldr	r3, [pc, #24]	; (800af74 <mlx90632_get_emissivity+0x3c>)
 800af5a:	e002      	b.n	800af62 <mlx90632_get_emissivity+0x2a>
    }
    else
    {
        return emissivity;
 800af5c:	4b04      	ldr	r3, [pc, #16]	; (800af70 <mlx90632_get_emissivity+0x38>)
 800af5e:	e9d3 2300 	ldrd	r2, r3, [r3]
    }
}
 800af62:	ec43 2b17 	vmov	d7, r2, r3
 800af66:	eeb0 0a47 	vmov.f32	s0, s14
 800af6a:	eef0 0a67 	vmov.f32	s1, s15
 800af6e:	bd80      	pop	{r7, pc}
 800af70:	20000508 	.word	0x20000508
 800af74:	3ff00000 	.word	0x3ff00000

0800af78 <mlx90632_calc_temp_object>:

double mlx90632_calc_temp_object(int32_t object, int32_t ambient,
                                 int32_t Ea, int32_t Eb, int32_t Ga, int32_t Fa, int32_t Fb,
                                 int16_t Ha, int16_t Hb)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b092      	sub	sp, #72	; 0x48
 800af7c:	af02      	add	r7, sp, #8
 800af7e:	60f8      	str	r0, [r7, #12]
 800af80:	60b9      	str	r1, [r7, #8]
 800af82:	607a      	str	r2, [r7, #4]
 800af84:	603b      	str	r3, [r7, #0]
    double kEa, kEb, TAdut;
    double temp = 25.0;
 800af86:	f04f 0200 	mov.w	r2, #0
 800af8a:	4b34      	ldr	r3, [pc, #208]	; (800b05c <mlx90632_calc_temp_object+0xe4>)
 800af8c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double tmp_emi = mlx90632_get_emissivity();
 800af90:	f7ff ffd2 	bl	800af38 <mlx90632_get_emissivity>
 800af94:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
    int8_t i;

    kEa = ((double)Ea) / ((double)65536.0);
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f7fc faa3 	bl	80074e4 <__aeabi_i2d>
 800af9e:	f04f 0200 	mov.w	r2, #0
 800afa2:	4b2f      	ldr	r3, [pc, #188]	; (800b060 <mlx90632_calc_temp_object+0xe8>)
 800afa4:	f7fc fc32 	bl	800780c <__aeabi_ddiv>
 800afa8:	4602      	mov	r2, r0
 800afaa:	460b      	mov	r3, r1
 800afac:	e9c7 2308 	strd	r2, r3, [r7, #32]
    kEb = ((double)Eb) / ((double)256.0);
 800afb0:	6838      	ldr	r0, [r7, #0]
 800afb2:	f7fc fa97 	bl	80074e4 <__aeabi_i2d>
 800afb6:	f04f 0200 	mov.w	r2, #0
 800afba:	4b2a      	ldr	r3, [pc, #168]	; (800b064 <mlx90632_calc_temp_object+0xec>)
 800afbc:	f7fc fc26 	bl	800780c <__aeabi_ddiv>
 800afc0:	4602      	mov	r2, r0
 800afc2:	460b      	mov	r3, r1
 800afc4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    TAdut = (((double)ambient) - kEb) / kEa + 25;
 800afc8:	68b8      	ldr	r0, [r7, #8]
 800afca:	f7fc fa8b 	bl	80074e4 <__aeabi_i2d>
 800afce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800afd2:	f7fc f939 	bl	8007248 <__aeabi_dsub>
 800afd6:	4602      	mov	r2, r0
 800afd8:	460b      	mov	r3, r1
 800afda:	4610      	mov	r0, r2
 800afdc:	4619      	mov	r1, r3
 800afde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800afe2:	f7fc fc13 	bl	800780c <__aeabi_ddiv>
 800afe6:	4602      	mov	r2, r0
 800afe8:	460b      	mov	r3, r1
 800afea:	4610      	mov	r0, r2
 800afec:	4619      	mov	r1, r3
 800afee:	f04f 0200 	mov.w	r2, #0
 800aff2:	4b1a      	ldr	r3, [pc, #104]	; (800b05c <mlx90632_calc_temp_object+0xe4>)
 800aff4:	f7fc f92a 	bl	800724c <__adddf3>
 800aff8:	4602      	mov	r2, r0
 800affa:	460b      	mov	r3, r1
 800affc:	e9c7 2304 	strd	r2, r3, [r7, #16]

    //iterate through calculations
    for (i = 0; i < 5; ++i)
 800b000:	2300      	movs	r3, #0
 800b002:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800b006:	e019      	b.n	800b03c <mlx90632_calc_temp_object+0xc4>
    {
        temp = mlx90632_calc_temp_object_iteration(temp, object, TAdut, Ga, Fa, Fb, Ha, Hb, tmp_emi);
 800b008:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 800b00c:	9301      	str	r3, [sp, #4]
 800b00e:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800b012:	9300      	str	r3, [sp, #0]
 800b014:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800b018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b01a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b01c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b01e:	ed97 1b04 	vldr	d1, [r7, #16]
 800b022:	68f8      	ldr	r0, [r7, #12]
 800b024:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800b028:	f7ff fe26 	bl	800ac78 <mlx90632_calc_temp_object_iteration>
 800b02c:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
    for (i = 0; i < 5; ++i)
 800b030:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b034:	3301      	adds	r3, #1
 800b036:	b2db      	uxtb	r3, r3
 800b038:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800b03c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800b040:	2b04      	cmp	r3, #4
 800b042:	dde1      	ble.n	800b008 <mlx90632_calc_temp_object+0x90>
    }
    return temp;
 800b044:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b048:	ec43 2b17 	vmov	d7, r2, r3
}
 800b04c:	eeb0 0a47 	vmov.f32	s0, s14
 800b050:	eef0 0a67 	vmov.f32	s1, s15
 800b054:	3740      	adds	r7, #64	; 0x40
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
 800b05a:	bf00      	nop
 800b05c:	40390000 	.word	0x40390000
 800b060:	40f00000 	.word	0x40f00000
 800b064:	40700000 	.word	0x40700000

0800b068 <mlx90632_init>:
    }
    return temp;
}

int32_t mlx90632_init(void)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b082      	sub	sp, #8
 800b06c:	af00      	add	r7, sp, #0
    int32_t ret;
    uint16_t eeprom_version, reg_status;

    ret = mlx90632_i2c_read(MLX90632_EE_VERSION, &eeprom_version);
 800b06e:	1cbb      	adds	r3, r7, #2
 800b070:	4619      	mov	r1, r3
 800b072:	f242 400b 	movw	r0, #9227	; 0x240b
 800b076:	f000 fabb 	bl	800b5f0 <mlx90632_i2c_read>
 800b07a:	6078      	str	r0, [r7, #4]
    if (ret < 0)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	da01      	bge.n	800b086 <mlx90632_init+0x1e>
    {
        return ret;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	e02a      	b.n	800b0dc <mlx90632_init+0x74>
    }

    if ((eeprom_version & 0x00FF) != MLX90632_DSPv5)
 800b086:	887b      	ldrh	r3, [r7, #2]
 800b088:	b2db      	uxtb	r3, r3
 800b08a:	2b05      	cmp	r3, #5
 800b08c:	d002      	beq.n	800b094 <mlx90632_init+0x2c>
    {
        // this here can fail because of big/little endian of cpu/i2c
        return -EPROTONOSUPPORT;
 800b08e:	f06f 037a 	mvn.w	r3, #122	; 0x7a
 800b092:	e023      	b.n	800b0dc <mlx90632_init+0x74>
    }

    ret = mlx90632_i2c_read(MLX90632_REG_STATUS, &reg_status);
 800b094:	463b      	mov	r3, r7
 800b096:	4619      	mov	r1, r3
 800b098:	f643 70ff 	movw	r0, #16383	; 0x3fff
 800b09c:	f000 faa8 	bl	800b5f0 <mlx90632_i2c_read>
 800b0a0:	6078      	str	r0, [r7, #4]
    if (ret < 0)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	da01      	bge.n	800b0ac <mlx90632_init+0x44>
        return ret;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	e017      	b.n	800b0dc <mlx90632_init+0x74>

    // Prepare a clean start with setting NEW_DATA to 0
    ret = mlx90632_i2c_write(MLX90632_REG_STATUS, reg_status & ~(MLX90632_STAT_DATA_RDY));
 800b0ac:	883b      	ldrh	r3, [r7, #0]
 800b0ae:	f023 0301 	bic.w	r3, r3, #1
 800b0b2:	b29b      	uxth	r3, r3
 800b0b4:	4619      	mov	r1, r3
 800b0b6:	f643 70ff 	movw	r0, #16383	; 0x3fff
 800b0ba:	f000 faeb 	bl	800b694 <mlx90632_i2c_write>
 800b0be:	6078      	str	r0, [r7, #4]
    if (ret < 0)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	da01      	bge.n	800b0ca <mlx90632_init+0x62>
        return ret;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	e008      	b.n	800b0dc <mlx90632_init+0x74>

    if ((eeprom_version & 0x7F00) == MLX90632_XTD_RNG_KEY)
 800b0ca:	887b      	ldrh	r3, [r7, #2]
 800b0cc:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800b0d0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800b0d4:	d101      	bne.n	800b0da <mlx90632_init+0x72>
    {
        return ERANGE;
 800b0d6:	2322      	movs	r3, #34	; 0x22
 800b0d8:	e000      	b.n	800b0dc <mlx90632_init+0x74>
    }

    return 0;
 800b0da:	2300      	movs	r3, #0
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3708      	adds	r7, #8
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <mlx90632_addressed_reset>:

int32_t mlx90632_addressed_reset(void)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b082      	sub	sp, #8
 800b0e8:	af00      	add	r7, sp, #0
    int32_t ret;
    uint16_t reg_ctrl;
    uint16_t reg_value;

    ret = mlx90632_i2c_read(MLX90632_REG_CTRL, &reg_value);
 800b0ea:	463b      	mov	r3, r7
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	f243 0001 	movw	r0, #12289	; 0x3001
 800b0f2:	f000 fa7d 	bl	800b5f0 <mlx90632_i2c_read>
 800b0f6:	6078      	str	r0, [r7, #4]
    if (ret < 0)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	da01      	bge.n	800b102 <mlx90632_addressed_reset+0x1e>
        return ret;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	e02a      	b.n	800b158 <mlx90632_addressed_reset+0x74>

    reg_ctrl = reg_value & ~MLX90632_CFG_PWR_MASK;
 800b102:	883b      	ldrh	r3, [r7, #0]
 800b104:	f023 0306 	bic.w	r3, r3, #6
 800b108:	807b      	strh	r3, [r7, #2]
    reg_ctrl |= MLX90632_PWR_STATUS_STEP;
 800b10a:	887b      	ldrh	r3, [r7, #2]
 800b10c:	f043 0304 	orr.w	r3, r3, #4
 800b110:	807b      	strh	r3, [r7, #2]
    ret = mlx90632_i2c_write(MLX90632_REG_CTRL, reg_ctrl);
 800b112:	887b      	ldrh	r3, [r7, #2]
 800b114:	4619      	mov	r1, r3
 800b116:	f243 0001 	movw	r0, #12289	; 0x3001
 800b11a:	f000 fabb 	bl	800b694 <mlx90632_i2c_write>
 800b11e:	6078      	str	r0, [r7, #4]
    if (ret < 0)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2b00      	cmp	r3, #0
 800b124:	da01      	bge.n	800b12a <mlx90632_addressed_reset+0x46>
        return ret;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	e016      	b.n	800b158 <mlx90632_addressed_reset+0x74>

    ret = mlx90632_i2c_write(0x3005, MLX90632_RESET_CMD);
 800b12a:	2106      	movs	r1, #6
 800b12c:	f243 0005 	movw	r0, #12293	; 0x3005
 800b130:	f000 fab0 	bl	800b694 <mlx90632_i2c_write>
 800b134:	6078      	str	r0, [r7, #4]
    if (ret < 0)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	da01      	bge.n	800b140 <mlx90632_addressed_reset+0x5c>
        return ret;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	e00b      	b.n	800b158 <mlx90632_addressed_reset+0x74>

    usleep(150, 200);
 800b140:	21c8      	movs	r1, #200	; 0xc8
 800b142:	2096      	movs	r0, #150	; 0x96
 800b144:	f000 face 	bl	800b6e4 <usleep>

    ret = mlx90632_i2c_write(MLX90632_REG_CTRL, reg_value);
 800b148:	883b      	ldrh	r3, [r7, #0]
 800b14a:	4619      	mov	r1, r3
 800b14c:	f243 0001 	movw	r0, #12289	; 0x3001
 800b150:	f000 faa0 	bl	800b694 <mlx90632_i2c_write>
 800b154:	6078      	str	r0, [r7, #4]

    return ret;
 800b156:	687b      	ldr	r3, [r7, #4]
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3708      	adds	r7, #8
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <mlx90632_get_measurement_time>:

int32_t mlx90632_get_measurement_time(uint16_t meas)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b084      	sub	sp, #16
 800b164:	af00      	add	r7, sp, #0
 800b166:	4603      	mov	r3, r0
 800b168:	80fb      	strh	r3, [r7, #6]
    int32_t ret;
    uint16_t reg;

    ret = mlx90632_i2c_read(meas, &reg);
 800b16a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b16e:	f107 020a 	add.w	r2, r7, #10
 800b172:	4611      	mov	r1, r2
 800b174:	4618      	mov	r0, r3
 800b176:	f000 fa3b 	bl	800b5f0 <mlx90632_i2c_read>
 800b17a:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	da01      	bge.n	800b186 <mlx90632_get_measurement_time+0x26>
        return ret;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	e00d      	b.n	800b1a2 <mlx90632_get_measurement_time+0x42>

    reg &= MLX90632_EE_REFRESH_RATE_MASK;
 800b186:	897b      	ldrh	r3, [r7, #10]
 800b188:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b18c:	b29b      	uxth	r3, r3
 800b18e:	817b      	strh	r3, [r7, #10]
    reg = reg >> 8;
 800b190:	897b      	ldrh	r3, [r7, #10]
 800b192:	0a1b      	lsrs	r3, r3, #8
 800b194:	b29b      	uxth	r3, r3
 800b196:	817b      	strh	r3, [r7, #10]

    return MLX90632_MEAS_MAX_TIME >> reg;
 800b198:	897b      	ldrh	r3, [r7, #10]
 800b19a:	461a      	mov	r2, r3
 800b19c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b1a0:	4113      	asrs	r3, r2
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3710      	adds	r7, #16
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}

0800b1aa <mlx90632_calculate_dataset_ready_time>:

int32_t mlx90632_calculate_dataset_ready_time(void)
{
 800b1aa:	b580      	push	{r7, lr}
 800b1ac:	b082      	sub	sp, #8
 800b1ae:	af00      	add	r7, sp, #0
    int32_t ret;
    int32_t refresh_time;

    ret = mlx90632_get_meas_type();
 800b1b0:	f000 fb42 	bl	800b838 <mlx90632_get_meas_type>
 800b1b4:	6038      	str	r0, [r7, #0]
    if (ret < 0)
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	da01      	bge.n	800b1c0 <mlx90632_calculate_dataset_ready_time+0x16>
        return ret;
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	e04f      	b.n	800b260 <mlx90632_calculate_dataset_ready_time+0xb6>

    if ((ret != MLX90632_MTYP_MEDICAL_BURST) && (ret != MLX90632_MTYP_EXTENDED_BURST))
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	2b80      	cmp	r3, #128	; 0x80
 800b1c4:	d005      	beq.n	800b1d2 <mlx90632_calculate_dataset_ready_time+0x28>
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	2b91      	cmp	r3, #145	; 0x91
 800b1ca:	d002      	beq.n	800b1d2 <mlx90632_calculate_dataset_ready_time+0x28>
        return -EINVAL;
 800b1cc:	f06f 0315 	mvn.w	r3, #21
 800b1d0:	e046      	b.n	800b260 <mlx90632_calculate_dataset_ready_time+0xb6>

    if (ret == MLX90632_MTYP_MEDICAL_BURST)
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	2b80      	cmp	r3, #128	; 0x80
 800b1d6:	d11a      	bne.n	800b20e <mlx90632_calculate_dataset_ready_time+0x64>
    {
        ret = mlx90632_get_measurement_time(MLX90632_EE_MEDICAL_MEAS1);
 800b1d8:	f242 40e1 	movw	r0, #9441	; 0x24e1
 800b1dc:	f7ff ffc0 	bl	800b160 <mlx90632_get_measurement_time>
 800b1e0:	6038      	str	r0, [r7, #0]
        if (ret < 0)
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	da01      	bge.n	800b1ec <mlx90632_calculate_dataset_ready_time+0x42>
            return ret;
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	e039      	b.n	800b260 <mlx90632_calculate_dataset_ready_time+0xb6>

        refresh_time = ret;
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	607b      	str	r3, [r7, #4]

        ret = mlx90632_get_measurement_time(MLX90632_EE_MEDICAL_MEAS2);
 800b1f0:	f242 40e2 	movw	r0, #9442	; 0x24e2
 800b1f4:	f7ff ffb4 	bl	800b160 <mlx90632_get_measurement_time>
 800b1f8:	6038      	str	r0, [r7, #0]
        if (ret < 0)
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	da01      	bge.n	800b204 <mlx90632_calculate_dataset_ready_time+0x5a>
            return ret;
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	e02d      	b.n	800b260 <mlx90632_calculate_dataset_ready_time+0xb6>

        refresh_time = refresh_time + ret;
 800b204:	687a      	ldr	r2, [r7, #4]
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	4413      	add	r3, r2
 800b20a:	607b      	str	r3, [r7, #4]
 800b20c:	e027      	b.n	800b25e <mlx90632_calculate_dataset_ready_time+0xb4>
    }
    else
    {
        ret = mlx90632_get_measurement_time(MLX90632_EE_EXTENDED_MEAS1);
 800b20e:	f242 40f1 	movw	r0, #9457	; 0x24f1
 800b212:	f7ff ffa5 	bl	800b160 <mlx90632_get_measurement_time>
 800b216:	6038      	str	r0, [r7, #0]
        if (ret < 0)
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	da01      	bge.n	800b222 <mlx90632_calculate_dataset_ready_time+0x78>
            return ret;
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	e01e      	b.n	800b260 <mlx90632_calculate_dataset_ready_time+0xb6>

        refresh_time = ret;
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	607b      	str	r3, [r7, #4]

        ret = mlx90632_get_measurement_time(MLX90632_EE_EXTENDED_MEAS2);
 800b226:	f242 40f2 	movw	r0, #9458	; 0x24f2
 800b22a:	f7ff ff99 	bl	800b160 <mlx90632_get_measurement_time>
 800b22e:	6038      	str	r0, [r7, #0]
        if (ret < 0)
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	2b00      	cmp	r3, #0
 800b234:	da01      	bge.n	800b23a <mlx90632_calculate_dataset_ready_time+0x90>
            return ret;
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	e012      	b.n	800b260 <mlx90632_calculate_dataset_ready_time+0xb6>

        refresh_time = refresh_time + ret;
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	4413      	add	r3, r2
 800b240:	607b      	str	r3, [r7, #4]

        ret = mlx90632_get_measurement_time(MLX90632_EE_EXTENDED_MEAS3);
 800b242:	f242 40f3 	movw	r0, #9459	; 0x24f3
 800b246:	f7ff ff8b 	bl	800b160 <mlx90632_get_measurement_time>
 800b24a:	6038      	str	r0, [r7, #0]
        if (ret < 0)
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	da01      	bge.n	800b256 <mlx90632_calculate_dataset_ready_time+0xac>
            return ret;
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	e004      	b.n	800b260 <mlx90632_calculate_dataset_ready_time+0xb6>

        refresh_time = refresh_time + ret;
 800b256:	687a      	ldr	r2, [r7, #4]
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	4413      	add	r3, r2
 800b25c:	607b      	str	r3, [r7, #4]
    }

    return refresh_time;
 800b25e:	687b      	ldr	r3, [r7, #4]
}
 800b260:	4618      	mov	r0, r3
 800b262:	3708      	adds	r7, #8
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <mlx90632_start_measurement_burst>:

int32_t mlx90632_start_measurement_burst(void)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b084      	sub	sp, #16
 800b26c:	af00      	add	r7, sp, #0
    int32_t ret;
    int tries = MLX90632_MAX_NUMBER_MESUREMENT_READ_TRIES;
 800b26e:	2364      	movs	r3, #100	; 0x64
 800b270:	60fb      	str	r3, [r7, #12]
    uint16_t reg;

    ret = mlx90632_i2c_read(MLX90632_REG_CTRL, &reg);
 800b272:	1dbb      	adds	r3, r7, #6
 800b274:	4619      	mov	r1, r3
 800b276:	f243 0001 	movw	r0, #12289	; 0x3001
 800b27a:	f000 f9b9 	bl	800b5f0 <mlx90632_i2c_read>
 800b27e:	60b8      	str	r0, [r7, #8]
    if (ret < 0)
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	2b00      	cmp	r3, #0
 800b284:	da01      	bge.n	800b28a <mlx90632_start_measurement_burst+0x22>
        return ret;
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	e041      	b.n	800b30e <mlx90632_start_measurement_burst+0xa6>

    reg |= MLX90632_START_BURST_MEAS;
 800b28a:	88fb      	ldrh	r3, [r7, #6]
 800b28c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b290:	b29b      	uxth	r3, r3
 800b292:	80fb      	strh	r3, [r7, #6]

    ret = mlx90632_i2c_write(MLX90632_REG_CTRL, reg);
 800b294:	88fb      	ldrh	r3, [r7, #6]
 800b296:	4619      	mov	r1, r3
 800b298:	f243 0001 	movw	r0, #12289	; 0x3001
 800b29c:	f000 f9fa 	bl	800b694 <mlx90632_i2c_write>
 800b2a0:	60b8      	str	r0, [r7, #8]
    if (ret < 0)
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	da01      	bge.n	800b2ac <mlx90632_start_measurement_burst+0x44>
        return ret;
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	e030      	b.n	800b30e <mlx90632_start_measurement_burst+0xa6>

    ret = mlx90632_calculate_dataset_ready_time();
 800b2ac:	f7ff ff7d 	bl	800b1aa <mlx90632_calculate_dataset_ready_time>
 800b2b0:	60b8      	str	r0, [r7, #8]
    if (ret < 0)
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	da01      	bge.n	800b2bc <mlx90632_start_measurement_burst+0x54>
        return ret;
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	e028      	b.n	800b30e <mlx90632_start_measurement_burst+0xa6>
    msleep(ret); /* Waiting for refresh of all the measurement tables */
 800b2bc:	68b8      	ldr	r0, [r7, #8]
 800b2be:	f000 fa29 	bl	800b714 <msleep>

    while (tries-- > 0)
 800b2c2:	e016      	b.n	800b2f2 <mlx90632_start_measurement_burst+0x8a>
    {
        ret = mlx90632_i2c_read(MLX90632_REG_STATUS, &reg);
 800b2c4:	1dbb      	adds	r3, r7, #6
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	f643 70ff 	movw	r0, #16383	; 0x3fff
 800b2cc:	f000 f990 	bl	800b5f0 <mlx90632_i2c_read>
 800b2d0:	60b8      	str	r0, [r7, #8]
        if (ret < 0)
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	da01      	bge.n	800b2dc <mlx90632_start_measurement_burst+0x74>
            return ret;
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	e018      	b.n	800b30e <mlx90632_start_measurement_burst+0xa6>
        if ((reg & MLX90632_STAT_BUSY) == 0)
 800b2dc:	88fb      	ldrh	r3, [r7, #6]
 800b2de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d00b      	beq.n	800b2fe <mlx90632_start_measurement_burst+0x96>
            break;
        /* minimum wait time to complete measurement
         * should be calculated according to refresh rate
         * atm 10ms - 11ms
         */
        usleep(10000, 11000);
 800b2e6:	f642 21f8 	movw	r1, #11000	; 0x2af8
 800b2ea:	f242 7010 	movw	r0, #10000	; 0x2710
 800b2ee:	f000 f9f9 	bl	800b6e4 <usleep>
    while (tries-- > 0)
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	1e5a      	subs	r2, r3, #1
 800b2f6:	60fa      	str	r2, [r7, #12]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	dce3      	bgt.n	800b2c4 <mlx90632_start_measurement_burst+0x5c>
 800b2fc:	e000      	b.n	800b300 <mlx90632_start_measurement_burst+0x98>
            break;
 800b2fe:	bf00      	nop
    }

    if (tries < 0)
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	2b00      	cmp	r3, #0
 800b304:	da02      	bge.n	800b30c <mlx90632_start_measurement_burst+0xa4>
    {
        // data not ready
        return -ETIMEDOUT;
 800b306:	f06f 0373 	mvn.w	r3, #115	; 0x73
 800b30a:	e000      	b.n	800b30e <mlx90632_start_measurement_burst+0xa6>
    }

    return 0;
 800b30c:	2300      	movs	r3, #0
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3710      	adds	r7, #16
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}

0800b316 <mlx90632_read_eeprom>:
        return MLX90632_MEAS_HZ_ERROR;

    return (mlx90632_meas_t)MLX90632_REFRESH_RATE(meas1);
}
int mlx90632_read_eeprom(int32_t *PR, int32_t *PG, int32_t *PO, int32_t *PT, int32_t *Ea, int32_t *Eb, int32_t *Fa, int32_t *Fb, int32_t *Ga, int16_t *Gb, int16_t *Ha, int16_t *Hb, int16_t *Ka)
  {
 800b316:	b580      	push	{r7, lr}
 800b318:	b086      	sub	sp, #24
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	60f8      	str	r0, [r7, #12]
 800b31e:	60b9      	str	r1, [r7, #8]
 800b320:	607a      	str	r2, [r7, #4]
 800b322:	603b      	str	r3, [r7, #0]
    int32_t ret;
    ret = mlx90632_i2c_read32(MLX90632_EE_P_R, (uint32_t *) PR);
 800b324:	68f9      	ldr	r1, [r7, #12]
 800b326:	f242 400c 	movw	r0, #9228	; 0x240c
 800b32a:	f000 f989 	bl	800b640 <mlx90632_i2c_read32>
 800b32e:	6178      	str	r0, [r7, #20]
   // printf("P_R %ld\n",PR);
    if(ret < 0)
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	2b00      	cmp	r3, #0
 800b334:	da01      	bge.n	800b33a <mlx90632_read_eeprom+0x24>
      return ret;
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	e084      	b.n	800b444 <mlx90632_read_eeprom+0x12e>
    ret = mlx90632_i2c_read32(MLX90632_EE_P_G, (uint32_t *) PG);
 800b33a:	68b9      	ldr	r1, [r7, #8]
 800b33c:	f242 400e 	movw	r0, #9230	; 0x240e
 800b340:	f000 f97e 	bl	800b640 <mlx90632_i2c_read32>
 800b344:	6178      	str	r0, [r7, #20]
   // printf("P_G %d\n",PG);
    if(ret < 0)
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	da01      	bge.n	800b350 <mlx90632_read_eeprom+0x3a>
      return ret;
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	e079      	b.n	800b444 <mlx90632_read_eeprom+0x12e>
    ret = mlx90632_i2c_read32(MLX90632_EE_P_O, (uint32_t *) PO);
 800b350:	6879      	ldr	r1, [r7, #4]
 800b352:	f242 4012 	movw	r0, #9234	; 0x2412
 800b356:	f000 f973 	bl	800b640 <mlx90632_i2c_read32>
 800b35a:	6178      	str	r0, [r7, #20]
   // printf("P_o %d\n",PO);
    if(ret < 0)
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	da01      	bge.n	800b366 <mlx90632_read_eeprom+0x50>
      return ret;
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	e06e      	b.n	800b444 <mlx90632_read_eeprom+0x12e>
    ret = mlx90632_i2c_read32(MLX90632_EE_P_T, (uint32_t *) PT);
 800b366:	6839      	ldr	r1, [r7, #0]
 800b368:	f242 4010 	movw	r0, #9232	; 0x2410
 800b36c:	f000 f968 	bl	800b640 <mlx90632_i2c_read32>
 800b370:	6178      	str	r0, [r7, #20]
   // printf("P_T %d\n",PT);
    if(ret < 0)
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	2b00      	cmp	r3, #0
 800b376:	da01      	bge.n	800b37c <mlx90632_read_eeprom+0x66>
      return ret;
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	e063      	b.n	800b444 <mlx90632_read_eeprom+0x12e>
    ret = mlx90632_i2c_read32(MLX90632_EE_Ea, (uint32_t *) Ea);
 800b37c:	6a39      	ldr	r1, [r7, #32]
 800b37e:	f242 4024 	movw	r0, #9252	; 0x2424
 800b382:	f000 f95d 	bl	800b640 <mlx90632_i2c_read32>
 800b386:	6178      	str	r0, [r7, #20]
   // printf("E_A %d\n",Ea);
    if(ret < 0)
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	da01      	bge.n	800b392 <mlx90632_read_eeprom+0x7c>
      return ret;
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	e058      	b.n	800b444 <mlx90632_read_eeprom+0x12e>
    ret = mlx90632_i2c_read32(MLX90632_EE_Eb, (uint32_t *) Eb);
 800b392:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b394:	f242 4026 	movw	r0, #9254	; 0x2426
 800b398:	f000 f952 	bl	800b640 <mlx90632_i2c_read32>
 800b39c:	6178      	str	r0, [r7, #20]
   // printf("E_b %d\n",Eb);
    if(ret < 0)
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	da01      	bge.n	800b3a8 <mlx90632_read_eeprom+0x92>
      return ret;
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	e04d      	b.n	800b444 <mlx90632_read_eeprom+0x12e>
    ret = mlx90632_i2c_read32(MLX90632_EE_Fa, (uint32_t *) Fa);
 800b3a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b3aa:	f242 4028 	movw	r0, #9256	; 0x2428
 800b3ae:	f000 f947 	bl	800b640 <mlx90632_i2c_read32>
 800b3b2:	6178      	str	r0, [r7, #20]
   // printf("F_A %d\n",Fa);
    if(ret < 0)
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	da01      	bge.n	800b3be <mlx90632_read_eeprom+0xa8>
      return ret;
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	e042      	b.n	800b444 <mlx90632_read_eeprom+0x12e>
    ret = mlx90632_i2c_read32(MLX90632_EE_Fb, (uint32_t *) Fb);
 800b3be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b3c0:	f242 402a 	movw	r0, #9258	; 0x242a
 800b3c4:	f000 f93c 	bl	800b640 <mlx90632_i2c_read32>
 800b3c8:	6178      	str	r0, [r7, #20]
   // printf("F_b %d\n",Fb);
    if(ret < 0)
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	da01      	bge.n	800b3d4 <mlx90632_read_eeprom+0xbe>
      return ret;
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	e037      	b.n	800b444 <mlx90632_read_eeprom+0x12e>
    ret = mlx90632_i2c_read32(MLX90632_EE_Ga, (uint32_t *) Ga);
 800b3d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b3d6:	f242 402c 	movw	r0, #9260	; 0x242c
 800b3da:	f000 f931 	bl	800b640 <mlx90632_i2c_read32>
 800b3de:	6178      	str	r0, [r7, #20]
   // printf("G_A %d\n",Ga);
    if(ret < 0)
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	da01      	bge.n	800b3ea <mlx90632_read_eeprom+0xd4>
      return ret;
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	e02c      	b.n	800b444 <mlx90632_read_eeprom+0x12e>
    ret = mlx90632_i2c_read(MLX90632_EE_Gb, (uint16_t *) Gb);
 800b3ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b3ec:	f242 402e 	movw	r0, #9262	; 0x242e
 800b3f0:	f000 f8fe 	bl	800b5f0 <mlx90632_i2c_read>
 800b3f4:	6178      	str	r0, [r7, #20]
   // printf("G_b %d\n",Gb);
    if(ret < 0)
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	da01      	bge.n	800b400 <mlx90632_read_eeprom+0xea>
      return ret;
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	e021      	b.n	800b444 <mlx90632_read_eeprom+0x12e>
    ret = mlx90632_i2c_read(MLX90632_EE_Ha, (uint16_t *) Ha);
 800b400:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b402:	f242 4081 	movw	r0, #9345	; 0x2481
 800b406:	f000 f8f3 	bl	800b5f0 <mlx90632_i2c_read>
 800b40a:	6178      	str	r0, [r7, #20]
   // printf("H_A %d\n",Ha);
    if(ret < 0)
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	da01      	bge.n	800b416 <mlx90632_read_eeprom+0x100>
      return ret;
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	e016      	b.n	800b444 <mlx90632_read_eeprom+0x12e>
    ret = mlx90632_i2c_read(MLX90632_EE_Hb, (uint16_t *) Hb);
 800b416:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b418:	f242 4082 	movw	r0, #9346	; 0x2482
 800b41c:	f000 f8e8 	bl	800b5f0 <mlx90632_i2c_read>
 800b420:	6178      	str	r0, [r7, #20]
   // printf("H_b %d\n",Hb);
    if(ret < 0)
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	2b00      	cmp	r3, #0
 800b426:	da01      	bge.n	800b42c <mlx90632_read_eeprom+0x116>
      return ret;
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	e00b      	b.n	800b444 <mlx90632_read_eeprom+0x12e>
    ret = mlx90632_i2c_read(MLX90632_EE_Ka, (uint16_t *) Ka);
 800b42c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b42e:	f242 402f 	movw	r0, #9263	; 0x242f
 800b432:	f000 f8dd 	bl	800b5f0 <mlx90632_i2c_read>
 800b436:	6178      	str	r0, [r7, #20]
   // printf("K_A %d\n",Ka);
    if(ret < 0)
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	da01      	bge.n	800b442 <mlx90632_read_eeprom+0x12c>
      return ret;
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	e000      	b.n	800b444 <mlx90632_read_eeprom+0x12e>
    return 0;
 800b442:	2300      	movs	r3, #0
  }
 800b444:	4618      	mov	r0, r3
 800b446:	3718      	adds	r7, #24
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <Temp>:
float * Temp(void)
{
 800b44c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b450:	b086      	sub	sp, #24
 800b452:	af06      	add	r7, sp, #24
	static float o[2];
	mlx90632_read_temp_raw_burst(&ambient_new_raw, &ambient_old_raw,&object_new_raw, &object_old_raw);
 800b454:	4b51      	ldr	r3, [pc, #324]	; (800b59c <Temp+0x150>)
 800b456:	4a52      	ldr	r2, [pc, #328]	; (800b5a0 <Temp+0x154>)
 800b458:	4952      	ldr	r1, [pc, #328]	; (800b5a4 <Temp+0x158>)
 800b45a:	4853      	ldr	r0, [pc, #332]	; (800b5a8 <Temp+0x15c>)
 800b45c:	f7ff fa8a 	bl	800a974 <mlx90632_read_temp_raw_burst>
	//uint16_t d;
	//mlx90632_i2c_read(MLX90632_REG_CTRL, &d);
	//printf("CT %x \n",d);
	o[1] = mlx90632_calc_temp_ambient(ambient_new_raw, ambient_old_raw,PT, PR, PG, PO, Gb);
 800b460:	4b51      	ldr	r3, [pc, #324]	; (800b5a8 <Temp+0x15c>)
 800b462:	f9b3 0000 	ldrsh.w	r0, [r3]
 800b466:	4b4f      	ldr	r3, [pc, #316]	; (800b5a4 <Temp+0x158>)
 800b468:	f9b3 4000 	ldrsh.w	r4, [r3]
 800b46c:	4b4f      	ldr	r3, [pc, #316]	; (800b5ac <Temp+0x160>)
 800b46e:	681d      	ldr	r5, [r3, #0]
 800b470:	4b4f      	ldr	r3, [pc, #316]	; (800b5b0 <Temp+0x164>)
 800b472:	681e      	ldr	r6, [r3, #0]
 800b474:	4b4f      	ldr	r3, [pc, #316]	; (800b5b4 <Temp+0x168>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	4a4f      	ldr	r2, [pc, #316]	; (800b5b8 <Temp+0x16c>)
 800b47a:	6812      	ldr	r2, [r2, #0]
 800b47c:	494f      	ldr	r1, [pc, #316]	; (800b5bc <Temp+0x170>)
 800b47e:	f9b1 1000 	ldrsh.w	r1, [r1]
 800b482:	9102      	str	r1, [sp, #8]
 800b484:	9201      	str	r2, [sp, #4]
 800b486:	9300      	str	r3, [sp, #0]
 800b488:	4633      	mov	r3, r6
 800b48a:	462a      	mov	r2, r5
 800b48c:	4621      	mov	r1, r4
 800b48e:	f7ff fb6d 	bl	800ab6c <mlx90632_calc_temp_ambient>
 800b492:	ec53 2b10 	vmov	r2, r3, d0
 800b496:	4610      	mov	r0, r2
 800b498:	4619      	mov	r1, r3
 800b49a:	f7fc fb85 	bl	8007ba8 <__aeabi_d2f>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	4a47      	ldr	r2, [pc, #284]	; (800b5c0 <Temp+0x174>)
 800b4a2:	6053      	str	r3, [r2, #4]

	 pre_ambient = mlx90632_preprocess_temp_ambient(ambient_new_raw, ambient_old_raw, Gb);
 800b4a4:	4b40      	ldr	r3, [pc, #256]	; (800b5a8 <Temp+0x15c>)
 800b4a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b4aa:	4a3e      	ldr	r2, [pc, #248]	; (800b5a4 <Temp+0x158>)
 800b4ac:	f9b2 1000 	ldrsh.w	r1, [r2]
 800b4b0:	4a42      	ldr	r2, [pc, #264]	; (800b5bc <Temp+0x170>)
 800b4b2:	f9b2 2000 	ldrsh.w	r2, [r2]
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f7ff fa80 	bl	800a9bc <mlx90632_preprocess_temp_ambient>
 800b4bc:	eeb0 7a40 	vmov.f32	s14, s0
 800b4c0:	eef0 7a60 	vmov.f32	s15, s1
 800b4c4:	4b3f      	ldr	r3, [pc, #252]	; (800b5c4 <Temp+0x178>)
 800b4c6:	ed83 7b00 	vstr	d7, [r3]
	 pre_object = mlx90632_preprocess_temp_object(object_new_raw, object_old_raw, ambient_new_raw, ambient_old_raw,Ka);
 800b4ca:	4b35      	ldr	r3, [pc, #212]	; (800b5a0 <Temp+0x154>)
 800b4cc:	f9b3 0000 	ldrsh.w	r0, [r3]
 800b4d0:	4b32      	ldr	r3, [pc, #200]	; (800b59c <Temp+0x150>)
 800b4d2:	f9b3 1000 	ldrsh.w	r1, [r3]
 800b4d6:	4b34      	ldr	r3, [pc, #208]	; (800b5a8 <Temp+0x15c>)
 800b4d8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b4dc:	4b31      	ldr	r3, [pc, #196]	; (800b5a4 <Temp+0x158>)
 800b4de:	f9b3 4000 	ldrsh.w	r4, [r3]
 800b4e2:	4b39      	ldr	r3, [pc, #228]	; (800b5c8 <Temp+0x17c>)
 800b4e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b4e8:	9300      	str	r3, [sp, #0]
 800b4ea:	4623      	mov	r3, r4
 800b4ec:	f7ff facc 	bl	800aa88 <mlx90632_preprocess_temp_object>
 800b4f0:	eeb0 7a40 	vmov.f32	s14, s0
 800b4f4:	eef0 7a60 	vmov.f32	s15, s1
 800b4f8:	4b34      	ldr	r3, [pc, #208]	; (800b5cc <Temp+0x180>)
 800b4fa:	ed83 7b00 	vstr	d7, [r3]
	 /* Calculate object temperature */
	 o[0] = mlx90632_calc_temp_object(pre_object, pre_ambient, Ea, Eb, Ga, Fa, Fb, Ha, Hb);
 800b4fe:	4b33      	ldr	r3, [pc, #204]	; (800b5cc <Temp+0x180>)
 800b500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b504:	4610      	mov	r0, r2
 800b506:	4619      	mov	r1, r3
 800b508:	f7fc fb06 	bl	8007b18 <__aeabi_d2iz>
 800b50c:	4680      	mov	r8, r0
 800b50e:	4b2d      	ldr	r3, [pc, #180]	; (800b5c4 <Temp+0x178>)
 800b510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b514:	4610      	mov	r0, r2
 800b516:	4619      	mov	r1, r3
 800b518:	f7fc fafe 	bl	8007b18 <__aeabi_d2iz>
 800b51c:	4684      	mov	ip, r0
 800b51e:	4b2c      	ldr	r3, [pc, #176]	; (800b5d0 <Temp+0x184>)
 800b520:	681d      	ldr	r5, [r3, #0]
 800b522:	4b2c      	ldr	r3, [pc, #176]	; (800b5d4 <Temp+0x188>)
 800b524:	681e      	ldr	r6, [r3, #0]
 800b526:	4b2c      	ldr	r3, [pc, #176]	; (800b5d8 <Temp+0x18c>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	4a2c      	ldr	r2, [pc, #176]	; (800b5dc <Temp+0x190>)
 800b52c:	6812      	ldr	r2, [r2, #0]
 800b52e:	492c      	ldr	r1, [pc, #176]	; (800b5e0 <Temp+0x194>)
 800b530:	6809      	ldr	r1, [r1, #0]
 800b532:	482c      	ldr	r0, [pc, #176]	; (800b5e4 <Temp+0x198>)
 800b534:	f9b0 0000 	ldrsh.w	r0, [r0]
 800b538:	4c2b      	ldr	r4, [pc, #172]	; (800b5e8 <Temp+0x19c>)
 800b53a:	f9b4 4000 	ldrsh.w	r4, [r4]
 800b53e:	9404      	str	r4, [sp, #16]
 800b540:	9003      	str	r0, [sp, #12]
 800b542:	9102      	str	r1, [sp, #8]
 800b544:	9201      	str	r2, [sp, #4]
 800b546:	9300      	str	r3, [sp, #0]
 800b548:	4633      	mov	r3, r6
 800b54a:	462a      	mov	r2, r5
 800b54c:	4661      	mov	r1, ip
 800b54e:	4640      	mov	r0, r8
 800b550:	f7ff fd12 	bl	800af78 <mlx90632_calc_temp_object>
 800b554:	ec53 2b10 	vmov	r2, r3, d0
 800b558:	4610      	mov	r0, r2
 800b55a:	4619      	mov	r1, r3
 800b55c:	f7fc fb24 	bl	8007ba8 <__aeabi_d2f>
 800b560:	4603      	mov	r3, r0
 800b562:	4a17      	ldr	r2, [pc, #92]	; (800b5c0 <Temp+0x174>)
 800b564:	6013      	str	r3, [r2, #0]

	 printf("\n OBject_Temperature: %f & Ambient: %f \t \r\n",o[0],o[1]);
 800b566:	4b16      	ldr	r3, [pc, #88]	; (800b5c0 <Temp+0x174>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7fb ffcc 	bl	8007508 <__aeabi_f2d>
 800b570:	4604      	mov	r4, r0
 800b572:	460d      	mov	r5, r1
 800b574:	4b12      	ldr	r3, [pc, #72]	; (800b5c0 <Temp+0x174>)
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	4618      	mov	r0, r3
 800b57a:	f7fb ffc5 	bl	8007508 <__aeabi_f2d>
 800b57e:	4602      	mov	r2, r0
 800b580:	460b      	mov	r3, r1
 800b582:	e9cd 2300 	strd	r2, r3, [sp]
 800b586:	4622      	mov	r2, r4
 800b588:	462b      	mov	r3, r5
 800b58a:	4818      	ldr	r0, [pc, #96]	; (800b5ec <Temp+0x1a0>)
 800b58c:	f00e f922 	bl	80197d4 <iprintf>
	 return o;
 800b590:	4b0b      	ldr	r3, [pc, #44]	; (800b5c0 <Temp+0x174>)
}
 800b592:	4618      	mov	r0, r3
 800b594:	46bd      	mov	sp, r7
 800b596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b59a:	bf00      	nop
 800b59c:	200004f2 	.word	0x200004f2
 800b5a0:	200004f0 	.word	0x200004f0
 800b5a4:	200004ee 	.word	0x200004ee
 800b5a8:	200004ec 	.word	0x200004ec
 800b5ac:	20000010 	.word	0x20000010
 800b5b0:	20000008 	.word	0x20000008
 800b5b4:	2000000c 	.word	0x2000000c
 800b5b8:	20000014 	.word	0x20000014
 800b5bc:	2000002e 	.word	0x2000002e
 800b5c0:	20000510 	.word	0x20000510
 800b5c4:	200004f8 	.word	0x200004f8
 800b5c8:	20000030 	.word	0x20000030
 800b5cc:	20000500 	.word	0x20000500
 800b5d0:	20000018 	.word	0x20000018
 800b5d4:	2000001c 	.word	0x2000001c
 800b5d8:	20000028 	.word	0x20000028
 800b5dc:	20000020 	.word	0x20000020
 800b5e0:	20000024 	.word	0x20000024
 800b5e4:	2000002c 	.word	0x2000002c
 800b5e8:	200004ea 	.word	0x200004ea
 800b5ec:	0801d818 	.word	0x0801d818

0800b5f0 <mlx90632_i2c_read>:




int32_t mlx90632_i2c_read(int16_t register_address, uint16_t *value)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b088      	sub	sp, #32
 800b5f4:	af04      	add	r7, sp, #16
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	6039      	str	r1, [r7, #0]
 800b5fa:	80fb      	strh	r3, [r7, #6]
  uint8_t data[2];
  int32_t ret;
  ret =  HAL_I2C_Mem_Read(&hi2c3,Mlx90632_address,register_address,I2C_MEMADD_SIZE_16BIT,data,2,HAL_MAX_DELAY); //i2c_read(register_address,data,2);
 800b5fc:	88fa      	ldrh	r2, [r7, #6]
 800b5fe:	f04f 33ff 	mov.w	r3, #4294967295
 800b602:	9302      	str	r3, [sp, #8]
 800b604:	2302      	movs	r3, #2
 800b606:	9301      	str	r3, [sp, #4]
 800b608:	f107 0308 	add.w	r3, r7, #8
 800b60c:	9300      	str	r3, [sp, #0]
 800b60e:	2302      	movs	r3, #2
 800b610:	2174      	movs	r1, #116	; 0x74
 800b612:	480a      	ldr	r0, [pc, #40]	; (800b63c <mlx90632_i2c_read+0x4c>)
 800b614:	f006 f9aa 	bl	801196c <HAL_I2C_Mem_Read>
 800b618:	4603      	mov	r3, r0
 800b61a:	60fb      	str	r3, [r7, #12]
    //Endianness
  *value = data[1]|(data[0]<<8);
 800b61c:	7a7b      	ldrb	r3, [r7, #9]
 800b61e:	b21a      	sxth	r2, r3
 800b620:	7a3b      	ldrb	r3, [r7, #8]
 800b622:	021b      	lsls	r3, r3, #8
 800b624:	b21b      	sxth	r3, r3
 800b626:	4313      	orrs	r3, r2
 800b628:	b21b      	sxth	r3, r3
 800b62a:	b29a      	uxth	r2, r3
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	801a      	strh	r2, [r3, #0]
//  //printf("%dread: %x %x=%x \n", ret,data[0],data[1],*value);
  return ret;
 800b630:	68fb      	ldr	r3, [r7, #12]

}
 800b632:	4618      	mov	r0, r3
 800b634:	3710      	adds	r7, #16
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop
 800b63c:	20000458 	.word	0x20000458

0800b640 <mlx90632_i2c_read32>:

/* Implementation of I2C read for 32-bit values */
int32_t mlx90632_i2c_read32(int16_t register_address,uint32_t *value)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b088      	sub	sp, #32
 800b644:	af04      	add	r7, sp, #16
 800b646:	4603      	mov	r3, r0
 800b648:	6039      	str	r1, [r7, #0]
 800b64a:	80fb      	strh	r3, [r7, #6]
  uint8_t data[4];
  int32_t ret;
  ret =  HAL_I2C_Mem_Read(&hi2c3,Mlx90632_address,register_address,I2C_MEMADD_SIZE_16BIT,data,4,HAL_MAX_DELAY); //i2c_read(register_address,data,2);
 800b64c:	88fa      	ldrh	r2, [r7, #6]
 800b64e:	f04f 33ff 	mov.w	r3, #4294967295
 800b652:	9302      	str	r3, [sp, #8]
 800b654:	2304      	movs	r3, #4
 800b656:	9301      	str	r3, [sp, #4]
 800b658:	f107 0308 	add.w	r3, r7, #8
 800b65c:	9300      	str	r3, [sp, #0]
 800b65e:	2302      	movs	r3, #2
 800b660:	2174      	movs	r1, #116	; 0x74
 800b662:	480b      	ldr	r0, [pc, #44]	; (800b690 <mlx90632_i2c_read32+0x50>)
 800b664:	f006 f982 	bl	801196c <HAL_I2C_Mem_Read>
 800b668:	4603      	mov	r3, r0
 800b66a:	60fb      	str	r3, [r7, #12]
  //Endianness
  *value = data[2]<<24|data[3]<<16|data[0]<<8|data[1];
 800b66c:	7abb      	ldrb	r3, [r7, #10]
 800b66e:	061a      	lsls	r2, r3, #24
 800b670:	7afb      	ldrb	r3, [r7, #11]
 800b672:	041b      	lsls	r3, r3, #16
 800b674:	431a      	orrs	r2, r3
 800b676:	7a3b      	ldrb	r3, [r7, #8]
 800b678:	021b      	lsls	r3, r3, #8
 800b67a:	4313      	orrs	r3, r2
 800b67c:	7a7a      	ldrb	r2, [r7, #9]
 800b67e:	4313      	orrs	r3, r2
 800b680:	461a      	mov	r2, r3
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	601a      	str	r2, [r3, #0]
//  *value= data[0]<<24|data[1]<<16|data[2]<<8|data[3];
  //printf("val32 %x %x %x %x %x\n",data[0],data[1],data[2],data[3],*value);
  return ret;
 800b686:	68fb      	ldr	r3, [r7, #12]
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3710      	adds	r7, #16
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}
 800b690:	20000458 	.word	0x20000458

0800b694 <mlx90632_i2c_write>:

int32_t mlx90632_i2c_write(int16_t register_address, uint16_t value) {
 800b694:	b580      	push	{r7, lr}
 800b696:	b088      	sub	sp, #32
 800b698:	af04      	add	r7, sp, #16
 800b69a:	4603      	mov	r3, r0
 800b69c:	460a      	mov	r2, r1
 800b69e:	80fb      	strh	r3, [r7, #6]
 800b6a0:	4613      	mov	r3, r2
 800b6a2:	80bb      	strh	r3, [r7, #4]
  int32_t ret;
  uint8_t data[2];
  data[0] = value >> 8;
 800b6a4:	88bb      	ldrh	r3, [r7, #4]
 800b6a6:	0a1b      	lsrs	r3, r3, #8
 800b6a8:	b29b      	uxth	r3, r3
 800b6aa:	b2db      	uxtb	r3, r3
 800b6ac:	723b      	strb	r3, [r7, #8]
  data[1] = value;
 800b6ae:	88bb      	ldrh	r3, [r7, #4]
 800b6b0:	b2db      	uxtb	r3, r3
 800b6b2:	727b      	strb	r3, [r7, #9]
  return ret =  HAL_I2C_Mem_Write(&hi2c3,Mlx90632_address,register_address,I2C_MEMADD_SIZE_16BIT,data,2,HAL_MAX_DELAY); //i2c_read(register_address,data,2);
 800b6b4:	88fa      	ldrh	r2, [r7, #6]
 800b6b6:	f04f 33ff 	mov.w	r3, #4294967295
 800b6ba:	9302      	str	r3, [sp, #8]
 800b6bc:	2302      	movs	r3, #2
 800b6be:	9301      	str	r3, [sp, #4]
 800b6c0:	f107 0308 	add.w	r3, r7, #8
 800b6c4:	9300      	str	r3, [sp, #0]
 800b6c6:	2302      	movs	r3, #2
 800b6c8:	2174      	movs	r1, #116	; 0x74
 800b6ca:	4805      	ldr	r0, [pc, #20]	; (800b6e0 <mlx90632_i2c_write+0x4c>)
 800b6cc:	f006 f83a 	bl	8011744 <HAL_I2C_Mem_Write>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	60fb      	str	r3, [r7, #12]
 800b6d4:	68fb      	ldr	r3, [r7, #12]
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3710      	adds	r7, #16
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}
 800b6de:	bf00      	nop
 800b6e0:	20000458 	.word	0x20000458

0800b6e4 <usleep>:

void usleep(int min_range, int max_range)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b084      	sub	sp, #16
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	6039      	str	r1, [r7, #0]
 int a= min_range/1000;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	4a07      	ldr	r2, [pc, #28]	; (800b710 <usleep+0x2c>)
 800b6f2:	fb82 1203 	smull	r1, r2, r2, r3
 800b6f6:	1192      	asrs	r2, r2, #6
 800b6f8:	17db      	asrs	r3, r3, #31
 800b6fa:	1ad3      	subs	r3, r2, r3
 800b6fc:	60fb      	str	r3, [r7, #12]
	HAL_Delay(a);
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	4618      	mov	r0, r3
 800b702:	f7fd f9a8 	bl	8008a56 <HAL_Delay>
//	 __HAL_TIM_SET_COUNTER(&htim, 0);
//	    while (__HAL_TIM_GET_COUNTER(&htim2) < min_range);
}
 800b706:	bf00      	nop
 800b708:	3710      	adds	r7, #16
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}
 800b70e:	bf00      	nop
 800b710:	10624dd3 	.word	0x10624dd3

0800b714 <msleep>:

void msleep(int msecs)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b082      	sub	sp, #8
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
	HAL_Delay(msecs);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	4618      	mov	r0, r3
 800b720:	f7fd f999 	bl	8008a56 <HAL_Delay>
}
 800b724:	bf00      	nop
 800b726:	3708      	adds	r7, #8
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <mlx90632_set_meas_type>:

    return temp;
}

int32_t mlx90632_set_meas_type(uint8_t type)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b084      	sub	sp, #16
 800b730:	af00      	add	r7, sp, #0
 800b732:	4603      	mov	r3, r0
 800b734:	71fb      	strb	r3, [r7, #7]
    int32_t ret;
    uint16_t reg_ctrl;

    if ((type != MLX90632_MTYP_MEDICAL) & (type != MLX90632_MTYP_EXTENDED) & (type != MLX90632_MTYP_MEDICAL_BURST) & (type != MLX90632_MTYP_EXTENDED_BURST))
 800b736:	79fb      	ldrb	r3, [r7, #7]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	bf14      	ite	ne
 800b73c:	2301      	movne	r3, #1
 800b73e:	2300      	moveq	r3, #0
 800b740:	b2da      	uxtb	r2, r3
 800b742:	79fb      	ldrb	r3, [r7, #7]
 800b744:	2b11      	cmp	r3, #17
 800b746:	bf14      	ite	ne
 800b748:	2301      	movne	r3, #1
 800b74a:	2300      	moveq	r3, #0
 800b74c:	b2db      	uxtb	r3, r3
 800b74e:	4013      	ands	r3, r2
 800b750:	b2db      	uxtb	r3, r3
 800b752:	461a      	mov	r2, r3
 800b754:	79fb      	ldrb	r3, [r7, #7]
 800b756:	2b80      	cmp	r3, #128	; 0x80
 800b758:	bf14      	ite	ne
 800b75a:	2301      	movne	r3, #1
 800b75c:	2300      	moveq	r3, #0
 800b75e:	b2db      	uxtb	r3, r3
 800b760:	4013      	ands	r3, r2
 800b762:	79fa      	ldrb	r2, [r7, #7]
 800b764:	2a91      	cmp	r2, #145	; 0x91
 800b766:	bf14      	ite	ne
 800b768:	2201      	movne	r2, #1
 800b76a:	2200      	moveq	r2, #0
 800b76c:	b2d2      	uxtb	r2, r2
 800b76e:	4013      	ands	r3, r2
 800b770:	2b00      	cmp	r3, #0
 800b772:	d002      	beq.n	800b77a <mlx90632_set_meas_type+0x4e>
        return -EINVAL;
 800b774:	f06f 0315 	mvn.w	r3, #21
 800b778:	e05a      	b.n	800b830 <mlx90632_set_meas_type+0x104>

    ret = mlx90632_addressed_reset();
 800b77a:	f7ff fcb3 	bl	800b0e4 <mlx90632_addressed_reset>
 800b77e:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	2b00      	cmp	r3, #0
 800b784:	da01      	bge.n	800b78a <mlx90632_set_meas_type+0x5e>
        return ret;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	e052      	b.n	800b830 <mlx90632_set_meas_type+0x104>

    ret = mlx90632_i2c_read(MLX90632_REG_CTRL, &reg_ctrl);
 800b78a:	f107 030a 	add.w	r3, r7, #10
 800b78e:	4619      	mov	r1, r3
 800b790:	f243 0001 	movw	r0, #12289	; 0x3001
 800b794:	f7ff ff2c 	bl	800b5f0 <mlx90632_i2c_read>
 800b798:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	da01      	bge.n	800b7a4 <mlx90632_set_meas_type+0x78>
        return ret;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	e045      	b.n	800b830 <mlx90632_set_meas_type+0x104>

    reg_ctrl = reg_ctrl & (~MLX90632_CFG_MTYP_MASK & ~MLX90632_CFG_PWR_MASK);
 800b7a4:	897b      	ldrh	r3, [r7, #10]
 800b7a6:	f423 73fb 	bic.w	r3, r3, #502	; 0x1f6
 800b7aa:	b29b      	uxth	r3, r3
 800b7ac:	817b      	strh	r3, [r7, #10]
    reg_ctrl |= (MLX90632_MTYP_STATUS(MLX90632_MEASUREMENT_TYPE_STATUS(type)) | MLX90632_PWR_STATUS_HALT);
 800b7ae:	79fb      	ldrb	r3, [r7, #7]
 800b7b0:	011b      	lsls	r3, r3, #4
 800b7b2:	b21b      	sxth	r3, r3
 800b7b4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b7b8:	b21a      	sxth	r2, r3
 800b7ba:	897b      	ldrh	r3, [r7, #10]
 800b7bc:	b21b      	sxth	r3, r3
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	b21b      	sxth	r3, r3
 800b7c2:	b29b      	uxth	r3, r3
 800b7c4:	817b      	strh	r3, [r7, #10]

    ret = mlx90632_i2c_write(MLX90632_REG_CTRL, reg_ctrl);
 800b7c6:	897b      	ldrh	r3, [r7, #10]
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	f243 0001 	movw	r0, #12289	; 0x3001
 800b7ce:	f7ff ff61 	bl	800b694 <mlx90632_i2c_write>
 800b7d2:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	da01      	bge.n	800b7de <mlx90632_set_meas_type+0xb2>
        return ret;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	e028      	b.n	800b830 <mlx90632_set_meas_type+0x104>

    ret = mlx90632_i2c_read(MLX90632_REG_CTRL, &reg_ctrl);
 800b7de:	f107 030a 	add.w	r3, r7, #10
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	f243 0001 	movw	r0, #12289	; 0x3001
 800b7e8:	f7ff ff02 	bl	800b5f0 <mlx90632_i2c_read>
 800b7ec:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	da01      	bge.n	800b7f8 <mlx90632_set_meas_type+0xcc>
        return ret;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	e01b      	b.n	800b830 <mlx90632_set_meas_type+0x104>

    reg_ctrl = reg_ctrl & ~MLX90632_CFG_PWR_MASK;
 800b7f8:	897b      	ldrh	r3, [r7, #10]
 800b7fa:	f023 0306 	bic.w	r3, r3, #6
 800b7fe:	b29b      	uxth	r3, r3
 800b800:	817b      	strh	r3, [r7, #10]
    if (MLX90632_MEASUREMENT_BURST_STATUS(type))
 800b802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b806:	2b00      	cmp	r3, #0
 800b808:	da05      	bge.n	800b816 <mlx90632_set_meas_type+0xea>
    {
        reg_ctrl |= MLX90632_PWR_STATUS_SLEEP_STEP;
 800b80a:	897b      	ldrh	r3, [r7, #10]
 800b80c:	f043 0302 	orr.w	r3, r3, #2
 800b810:	b29b      	uxth	r3, r3
 800b812:	817b      	strh	r3, [r7, #10]
 800b814:	e004      	b.n	800b820 <mlx90632_set_meas_type+0xf4>
    }
    else
    {
        reg_ctrl |= MLX90632_PWR_STATUS_CONTINUOUS;
 800b816:	897b      	ldrh	r3, [r7, #10]
 800b818:	f043 0306 	orr.w	r3, r3, #6
 800b81c:	b29b      	uxth	r3, r3
 800b81e:	817b      	strh	r3, [r7, #10]
    }

    ret = mlx90632_i2c_write(MLX90632_REG_CTRL, reg_ctrl);
 800b820:	897b      	ldrh	r3, [r7, #10]
 800b822:	4619      	mov	r1, r3
 800b824:	f243 0001 	movw	r0, #12289	; 0x3001
 800b828:	f7ff ff34 	bl	800b694 <mlx90632_i2c_write>
 800b82c:	60f8      	str	r0, [r7, #12]

    return ret;
 800b82e:	68fb      	ldr	r3, [r7, #12]
}
 800b830:	4618      	mov	r0, r3
 800b832:	3710      	adds	r7, #16
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}

0800b838 <mlx90632_get_meas_type>:

int32_t mlx90632_get_meas_type(void)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b082      	sub	sp, #8
 800b83c:	af00      	add	r7, sp, #0
    int32_t ret;
    uint16_t reg_ctrl;
    uint16_t reg_temp;

    ret = mlx90632_i2c_read(MLX90632_REG_CTRL, &reg_temp);
 800b83e:	463b      	mov	r3, r7
 800b840:	4619      	mov	r1, r3
 800b842:	f243 0001 	movw	r0, #12289	; 0x3001
 800b846:	f7ff fed3 	bl	800b5f0 <mlx90632_i2c_read>
 800b84a:	6078      	str	r0, [r7, #4]
    if (ret < 0)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	da01      	bge.n	800b856 <mlx90632_get_meas_type+0x1e>
        return ret;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	e02a      	b.n	800b8ac <mlx90632_get_meas_type+0x74>

    reg_ctrl = MLX90632_MTYP(reg_temp);
 800b856:	883b      	ldrh	r3, [r7, #0]
 800b858:	091b      	lsrs	r3, r3, #4
 800b85a:	b29b      	uxth	r3, r3
 800b85c:	f003 031f 	and.w	r3, r3, #31
 800b860:	807b      	strh	r3, [r7, #2]

    if ((reg_ctrl != MLX90632_MTYP_MEDICAL) & (reg_ctrl != MLX90632_MTYP_EXTENDED))
 800b862:	887b      	ldrh	r3, [r7, #2]
 800b864:	2b00      	cmp	r3, #0
 800b866:	bf14      	ite	ne
 800b868:	2301      	movne	r3, #1
 800b86a:	2300      	moveq	r3, #0
 800b86c:	b2da      	uxtb	r2, r3
 800b86e:	887b      	ldrh	r3, [r7, #2]
 800b870:	2b11      	cmp	r3, #17
 800b872:	bf14      	ite	ne
 800b874:	2301      	movne	r3, #1
 800b876:	2300      	moveq	r3, #0
 800b878:	b2db      	uxtb	r3, r3
 800b87a:	4013      	ands	r3, r2
 800b87c:	b2db      	uxtb	r3, r3
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d002      	beq.n	800b888 <mlx90632_get_meas_type+0x50>
        return -EINVAL;
 800b882:	f06f 0315 	mvn.w	r3, #21
 800b886:	e011      	b.n	800b8ac <mlx90632_get_meas_type+0x74>

    reg_temp = MLX90632_CFG_PWR(reg_temp);
 800b888:	883b      	ldrh	r3, [r7, #0]
 800b88a:	f003 0306 	and.w	r3, r3, #6
 800b88e:	b29b      	uxth	r3, r3
 800b890:	803b      	strh	r3, [r7, #0]

    if (reg_temp == MLX90632_PWR_STATUS_SLEEP_STEP)
 800b892:	883b      	ldrh	r3, [r7, #0]
 800b894:	2b02      	cmp	r3, #2
 800b896:	d102      	bne.n	800b89e <mlx90632_get_meas_type+0x66>
        return MLX90632_BURST_MEASUREMENT_TYPE(reg_ctrl);
 800b898:	887b      	ldrh	r3, [r7, #2]
 800b89a:	3380      	adds	r3, #128	; 0x80
 800b89c:	e006      	b.n	800b8ac <mlx90632_get_meas_type+0x74>

    if (reg_temp != MLX90632_PWR_STATUS_CONTINUOUS)
 800b89e:	883b      	ldrh	r3, [r7, #0]
 800b8a0:	2b06      	cmp	r3, #6
 800b8a2:	d002      	beq.n	800b8aa <mlx90632_get_meas_type+0x72>
        return -EINVAL;
 800b8a4:	f06f 0315 	mvn.w	r3, #21
 800b8a8:	e000      	b.n	800b8ac <mlx90632_get_meas_type+0x74>

    return reg_ctrl;
 800b8aa:	887b      	ldrh	r3, [r7, #2]
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3708      	adds	r7, #8
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}

0800b8b4 <LL_AHB2_GRP1_EnableClock>:
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b085      	sub	sp, #20
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800b8bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b8c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b8c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	4313      	orrs	r3, r2
 800b8ca:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800b8cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b8d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	4013      	ands	r3, r2
 800b8d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
}
 800b8da:	bf00      	nop
 800b8dc:	3714      	adds	r7, #20
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr

0800b8e6 <LL_AHB3_GRP1_EnableClock>:
{
 800b8e6:	b480      	push	{r7}
 800b8e8:	b085      	sub	sp, #20
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800b8ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b8f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b8f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	4313      	orrs	r3, r2
 800b8fc:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800b8fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b902:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	4013      	ands	r3, r2
 800b908:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b90a:	68fb      	ldr	r3, [r7, #12]
}
 800b90c:	bf00      	nop
 800b90e:	3714      	adds	r7, #20
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <LL_AHB3_GRP1_DisableClock>:
{
 800b918:	b480      	push	{r7}
 800b91a:	b083      	sub	sp, #12
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB3ENR, Periphs);
 800b920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b924:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	43db      	mvns	r3, r3
 800b92a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b92e:	4013      	ands	r3, r2
 800b930:	650b      	str	r3, [r1, #80]	; 0x50
}
 800b932:	bf00      	nop
 800b934:	370c      	adds	r7, #12
 800b936:	46bd      	mov	sp, r7
 800b938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93c:	4770      	bx	lr
	...

0800b940 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 800b944:	4b0f      	ldr	r3, [pc, #60]	; (800b984 <MX_QUADSPI_Init+0x44>)
 800b946:	4a10      	ldr	r2, [pc, #64]	; (800b988 <MX_QUADSPI_Init+0x48>)
 800b948:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 800b94a:	4b0e      	ldr	r3, [pc, #56]	; (800b984 <MX_QUADSPI_Init+0x44>)
 800b94c:	2201      	movs	r2, #1
 800b94e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800b950:	4b0c      	ldr	r3, [pc, #48]	; (800b984 <MX_QUADSPI_Init+0x44>)
 800b952:	2204      	movs	r2, #4
 800b954:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800b956:	4b0b      	ldr	r3, [pc, #44]	; (800b984 <MX_QUADSPI_Init+0x44>)
 800b958:	2210      	movs	r2, #16
 800b95a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 20;
 800b95c:	4b09      	ldr	r3, [pc, #36]	; (800b984 <MX_QUADSPI_Init+0x44>)
 800b95e:	2214      	movs	r2, #20
 800b960:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_2_CYCLE;
 800b962:	4b08      	ldr	r3, [pc, #32]	; (800b984 <MX_QUADSPI_Init+0x44>)
 800b964:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b968:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800b96a:	4b06      	ldr	r3, [pc, #24]	; (800b984 <MX_QUADSPI_Init+0x44>)
 800b96c:	2200      	movs	r2, #0
 800b96e:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800b970:	4804      	ldr	r0, [pc, #16]	; (800b984 <MX_QUADSPI_Init+0x44>)
 800b972:	f006 fd13 	bl	801239c <HAL_QSPI_Init>
 800b976:	4603      	mov	r3, r0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d001      	beq.n	800b980 <MX_QUADSPI_Init+0x40>
  {
    Error_Handler();
 800b97c:	f7fe ff16 	bl	800a7ac <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800b980:	bf00      	nop
 800b982:	bd80      	pop	{r7, pc}
 800b984:	20000518 	.word	0x20000518
 800b988:	a0001000 	.word	0xa0001000

0800b98c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b088      	sub	sp, #32
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b994:	f107 030c 	add.w	r3, r7, #12
 800b998:	2200      	movs	r2, #0
 800b99a:	601a      	str	r2, [r3, #0]
 800b99c:	605a      	str	r2, [r3, #4]
 800b99e:	609a      	str	r2, [r3, #8]
 800b9a0:	60da      	str	r2, [r3, #12]
 800b9a2:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	4a26      	ldr	r2, [pc, #152]	; (800ba44 <HAL_QSPI_MspInit+0xb8>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d146      	bne.n	800ba3c <HAL_QSPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800b9ae:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b9b2:	f7ff ff98 	bl	800b8e6 <LL_AHB3_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b9b6:	2002      	movs	r0, #2
 800b9b8:	f7ff ff7c 	bl	800b8b4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b9bc:	2001      	movs	r0, #1
 800b9be:	f7ff ff79 	bl	800b8b4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b9c2:	2008      	movs	r0, #8
 800b9c4:	f7ff ff76 	bl	800b8b4 <LL_AHB2_GRP1_EnableClock>
    PD7     ------> QUADSPI_BK1_IO3
    PD3     ------> QUADSPI_BK1_NCS
    PD5     ------> QUADSPI_BK1_IO1
    PD6     ------> QUADSPI_BK1_IO2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800b9c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b9cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b9ce:	2302      	movs	r3, #2
 800b9d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800b9da:	230a      	movs	r3, #10
 800b9dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b9de:	f107 030c 	add.w	r3, r7, #12
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	4818      	ldr	r0, [pc, #96]	; (800ba48 <HAL_QSPI_MspInit+0xbc>)
 800b9e6:	f005 fb57 	bl	8011098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800b9ea:	2308      	movs	r3, #8
 800b9ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b9ee:	2302      	movs	r3, #2
 800b9f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800b9fa:	230a      	movs	r3, #10
 800b9fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b9fe:	f107 030c 	add.w	r3, r7, #12
 800ba02:	4619      	mov	r1, r3
 800ba04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ba08:	f005 fb46 	bl	8011098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 800ba0c:	23e8      	movs	r3, #232	; 0xe8
 800ba0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba10:	2302      	movs	r3, #2
 800ba12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba14:	2300      	movs	r3, #0
 800ba16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800ba1c:	230a      	movs	r3, #10
 800ba1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ba20:	f107 030c 	add.w	r3, r7, #12
 800ba24:	4619      	mov	r1, r3
 800ba26:	4809      	ldr	r0, [pc, #36]	; (800ba4c <HAL_QSPI_MspInit+0xc0>)
 800ba28:	f005 fb36 	bl	8011098 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 0, 0);
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	2100      	movs	r1, #0
 800ba30:	2032      	movs	r0, #50	; 0x32
 800ba32:	f004 ffa0 	bl	8010976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800ba36:	2032      	movs	r0, #50	; 0x32
 800ba38:	f004 ffb7 	bl	80109aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 800ba3c:	bf00      	nop
 800ba3e:	3720      	adds	r7, #32
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}
 800ba44:	a0001000 	.word	0xa0001000
 800ba48:	48000400 	.word	0x48000400
 800ba4c:	48000c00 	.word	0x48000c00

0800ba50 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b082      	sub	sp, #8
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	4a0d      	ldr	r2, [pc, #52]	; (800ba94 <HAL_QSPI_MspDeInit+0x44>)
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d114      	bne.n	800ba8c <HAL_QSPI_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 800ba62:	f44f 7080 	mov.w	r0, #256	; 0x100
 800ba66:	f7ff ff57 	bl	800b918 <LL_AHB3_GRP1_DisableClock>
    PD7     ------> QUADSPI_BK1_IO3
    PD3     ------> QUADSPI_BK1_NCS
    PD5     ------> QUADSPI_BK1_IO1
    PD6     ------> QUADSPI_BK1_IO2
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 800ba6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ba6e:	480a      	ldr	r0, [pc, #40]	; (800ba98 <HAL_QSPI_MspDeInit+0x48>)
 800ba70:	f005 fc82 	bl	8011378 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3);
 800ba74:	2108      	movs	r1, #8
 800ba76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ba7a:	f005 fc7d 	bl	8011378 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_7|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6);
 800ba7e:	21e8      	movs	r1, #232	; 0xe8
 800ba80:	4806      	ldr	r0, [pc, #24]	; (800ba9c <HAL_QSPI_MspDeInit+0x4c>)
 800ba82:	f005 fc79 	bl	8011378 <HAL_GPIO_DeInit>

    /* QUADSPI interrupt Deinit */
    HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 800ba86:	2032      	movs	r0, #50	; 0x32
 800ba88:	f004 ff9d 	bl	80109c6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 800ba8c:	bf00      	nop
 800ba8e:	3708      	adds	r7, #8
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}
 800ba94:	a0001000 	.word	0xa0001000
 800ba98:	48000400 	.word	0x48000400
 800ba9c:	48000c00 	.word	0x48000c00

0800baa0 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 800baa0:	b480      	push	{r7}
 800baa2:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 800baa4:	bf00      	nop
 800baa6:	46bd      	mov	sp, r7
 800baa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baac:	4770      	bx	lr

0800baae <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800baae:	b480      	push	{r7}
 800bab0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800bab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800baba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800babe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bac2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800bac6:	bf00      	nop
 800bac8:	46bd      	mov	sp, r7
 800baca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bace:	4770      	bx	lr

0800bad0 <LL_APB1_GRP1_EnableClock>:
{
 800bad0:	b480      	push	{r7}
 800bad2:	b085      	sub	sp, #20
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800bad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800badc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bade:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	4313      	orrs	r3, r2
 800bae6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800bae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800baec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	4013      	ands	r3, r2
 800baf2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800baf4:	68fb      	ldr	r3, [r7, #12]
}
 800baf6:	bf00      	nop
 800baf8:	3714      	adds	r7, #20
 800bafa:	46bd      	mov	sp, r7
 800bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb00:	4770      	bx	lr
	...

0800bb04 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800bb08:	4b16      	ldr	r3, [pc, #88]	; (800bb64 <MX_RTC_Init+0x60>)
 800bb0a:	4a17      	ldr	r2, [pc, #92]	; (800bb68 <MX_RTC_Init+0x64>)
 800bb0c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800bb0e:	4b15      	ldr	r3, [pc, #84]	; (800bb64 <MX_RTC_Init+0x60>)
 800bb10:	2200      	movs	r2, #0
 800bb12:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 800bb14:	4b13      	ldr	r3, [pc, #76]	; (800bb64 <MX_RTC_Init+0x60>)
 800bb16:	220f      	movs	r2, #15
 800bb18:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800bb1a:	4b12      	ldr	r3, [pc, #72]	; (800bb64 <MX_RTC_Init+0x60>)
 800bb1c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800bb20:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800bb22:	4b10      	ldr	r3, [pc, #64]	; (800bb64 <MX_RTC_Init+0x60>)
 800bb24:	2200      	movs	r2, #0
 800bb26:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800bb28:	4b0e      	ldr	r3, [pc, #56]	; (800bb64 <MX_RTC_Init+0x60>)
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800bb2e:	4b0d      	ldr	r3, [pc, #52]	; (800bb64 <MX_RTC_Init+0x60>)
 800bb30:	2200      	movs	r2, #0
 800bb32:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800bb34:	4b0b      	ldr	r3, [pc, #44]	; (800bb64 <MX_RTC_Init+0x60>)
 800bb36:	2200      	movs	r2, #0
 800bb38:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800bb3a:	480a      	ldr	r0, [pc, #40]	; (800bb64 <MX_RTC_Init+0x60>)
 800bb3c:	f009 f86a 	bl	8014c14 <HAL_RTC_Init>
 800bb40:	4603      	mov	r3, r0
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d001      	beq.n	800bb4a <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800bb46:	f7fe fe31 	bl	800a7ac <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	2100      	movs	r1, #0
 800bb4e:	4805      	ldr	r0, [pc, #20]	; (800bb64 <MX_RTC_Init+0x60>)
 800bb50:	f009 fbb8 	bl	80152c4 <HAL_RTCEx_SetWakeUpTimer_IT>
 800bb54:	4603      	mov	r3, r0
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d001      	beq.n	800bb5e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800bb5a:	f7fe fe27 	bl	800a7ac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800bb5e:	bf00      	nop
 800bb60:	bd80      	pop	{r7, pc}
 800bb62:	bf00      	nop
 800bb64:	2000055c 	.word	0x2000055c
 800bb68:	40002800 	.word	0x40002800

0800bb6c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b096      	sub	sp, #88	; 0x58
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800bb74:	f107 0308 	add.w	r3, r7, #8
 800bb78:	2250      	movs	r2, #80	; 0x50
 800bb7a:	2100      	movs	r1, #0
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f00c ffa7 	bl	8018ad0 <memset>
  if(rtcHandle->Instance==RTC)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	4a12      	ldr	r2, [pc, #72]	; (800bbd0 <HAL_RTC_MspInit+0x64>)
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d11d      	bne.n	800bbc8 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800bb8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bb90:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800bb92:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb96:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bb98:	f107 0308 	add.w	r3, r7, #8
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f008 fdb2 	bl	8014706 <HAL_RCCEx_PeriphCLKConfig>
 800bba2:	4603      	mov	r3, r0
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d001      	beq.n	800bbac <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800bba8:	f7fe fe00 	bl	800a7ac <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800bbac:	f7ff ff7f 	bl	800baae <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800bbb0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800bbb4:	f7ff ff8c 	bl	800bad0 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800bbb8:	2200      	movs	r2, #0
 800bbba:	2100      	movs	r1, #0
 800bbbc:	2003      	movs	r0, #3
 800bbbe:	f004 feda 	bl	8010976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800bbc2:	2003      	movs	r0, #3
 800bbc4:	f004 fef1 	bl	80109aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800bbc8:	bf00      	nop
 800bbca:	3758      	adds	r7, #88	; 0x58
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}
 800bbd0:	40002800 	.word	0x40002800

0800bbd4 <LL_AHB3_GRP1_EnableClock>:
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b085      	sub	sp, #20
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800bbdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bbe0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bbe2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800bbec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bbf0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	4013      	ands	r3, r2
 800bbf6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
}
 800bbfa:	bf00      	nop
 800bbfc:	3714      	adds	r7, #20
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc04:	4770      	bx	lr

0800bc06 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800bc06:	b580      	push	{r7, lr}
 800bc08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800bc0a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800bc0e:	f7ff ffe1 	bl	800bbd4 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800bc12:	2200      	movs	r2, #0
 800bc14:	2100      	movs	r1, #0
 800bc16:	202e      	movs	r0, #46	; 0x2e
 800bc18:	f004 fead 	bl	8010976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800bc1c:	202e      	movs	r0, #46	; 0x2e
 800bc1e:	f004 fec4 	bl	80109aa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800bc22:	bf00      	nop
 800bc24:	bd80      	pop	{r7, pc}

0800bc26 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800bc26:	b480      	push	{r7}
 800bc28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800bc2a:	e7fe      	b.n	800bc2a <NMI_Handler+0x4>

0800bc2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800bc30:	e7fe      	b.n	800bc30 <HardFault_Handler+0x4>

0800bc32 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800bc32:	b480      	push	{r7}
 800bc34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800bc36:	e7fe      	b.n	800bc36 <MemManage_Handler+0x4>

0800bc38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800bc3c:	e7fe      	b.n	800bc3c <BusFault_Handler+0x4>

0800bc3e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800bc3e:	b480      	push	{r7}
 800bc40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800bc42:	e7fe      	b.n	800bc42 <UsageFault_Handler+0x4>

0800bc44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800bc44:	b480      	push	{r7}
 800bc46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800bc48:	bf00      	nop
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr

0800bc52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800bc52:	b480      	push	{r7}
 800bc54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800bc56:	bf00      	nop
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5e:	4770      	bx	lr

0800bc60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800bc60:	b480      	push	{r7}
 800bc62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800bc64:	bf00      	nop
 800bc66:	46bd      	mov	sp, r7
 800bc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6c:	4770      	bx	lr

0800bc6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800bc6e:	b580      	push	{r7, lr}
 800bc70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800bc72:	f003 fa29 	bl	800f0c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800bc76:	bf00      	nop
 800bc78:	bd80      	pop	{r7, pc}

0800bc7a <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 800bc7a:	b580      	push	{r7, lr}
 800bc7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800bc7e:	f7fd ffeb 	bl	8009c58 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800bc82:	bf00      	nop
 800bc84:	bd80      	pop	{r7, pc}
	...

0800bc88 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800bc8c:	4802      	ldr	r0, [pc, #8]	; (800bc98 <DMA1_Channel1_IRQHandler+0x10>)
 800bc8e:	f005 f8b2 	bl	8010df6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800bc92:	bf00      	nop
 800bc94:	bd80      	pop	{r7, pc}
 800bc96:	bf00      	nop
 800bc98:	20000354 	.word	0x20000354

0800bc9c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EOC_Pin);
 800bca0:	2040      	movs	r0, #64	; 0x40
 800bca2:	f005 fc77 	bl	8011594 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800bca6:	bf00      	nop
 800bca8:	bd80      	pop	{r7, pc}

0800bcaa <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800bcaa:	b580      	push	{r7, lr}
 800bcac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PWR_Pin);
 800bcae:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800bcb2:	f005 fc6f 	bl	8011594 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800bcb6:	bf00      	nop
 800bcb8:	bd80      	pop	{r7, pc}

0800bcba <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 800bcba:	b580      	push	{r7, lr}
 800bcbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 800bcbe:	f002 ffdb 	bl	800ec78 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800bcc2:	bf00      	nop
 800bcc4:	bd80      	pop	{r7, pc}

0800bcc6 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800bcc6:	b580      	push	{r7, lr}
 800bcc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800bcca:	f003 f80d 	bl	800ece8 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 800bcce:	bf00      	nop
 800bcd0:	bd80      	pop	{r7, pc}

0800bcd2 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800bcd2:	b580      	push	{r7, lr}
 800bcd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800bcd6:	f005 fc75 	bl	80115c4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800bcda:	bf00      	nop
 800bcdc:	bd80      	pop	{r7, pc}
	...

0800bce0 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 800bce4:	4802      	ldr	r0, [pc, #8]	; (800bcf0 <QUADSPI_IRQHandler+0x10>)
 800bce6:	f006 fbf3 	bl	80124d0 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 800bcea:	bf00      	nop
 800bcec:	bd80      	pop	{r7, pc}
 800bcee:	bf00      	nop
 800bcf0:	20000518 	.word	0x20000518

0800bcf4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	af00      	add	r7, sp, #0
  return 1;
 800bcf8:	2301      	movs	r3, #1
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr

0800bd04 <_kill>:

int _kill(int pid, int sig)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b082      	sub	sp, #8
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800bd0e:	f00c fea7 	bl	8018a60 <__errno>
 800bd12:	4603      	mov	r3, r0
 800bd14:	2216      	movs	r2, #22
 800bd16:	601a      	str	r2, [r3, #0]
  return -1;
 800bd18:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3708      	adds	r7, #8
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <_exit>:

void _exit (int status)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b082      	sub	sp, #8
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800bd2c:	f04f 31ff 	mov.w	r1, #4294967295
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f7ff ffe7 	bl	800bd04 <_kill>
  while (1) {}    /* Make sure we hang here */
 800bd36:	e7fe      	b.n	800bd36 <_exit+0x12>

0800bd38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b086      	sub	sp, #24
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	60f8      	str	r0, [r7, #12]
 800bd40:	60b9      	str	r1, [r7, #8]
 800bd42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bd44:	2300      	movs	r3, #0
 800bd46:	617b      	str	r3, [r7, #20]
 800bd48:	e00a      	b.n	800bd60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800bd4a:	f7fe fd11 	bl	800a770 <__io_getchar>
 800bd4e:	4601      	mov	r1, r0
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	1c5a      	adds	r2, r3, #1
 800bd54:	60ba      	str	r2, [r7, #8]
 800bd56:	b2ca      	uxtb	r2, r1
 800bd58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	3301      	adds	r3, #1
 800bd5e:	617b      	str	r3, [r7, #20]
 800bd60:	697a      	ldr	r2, [r7, #20]
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	429a      	cmp	r2, r3
 800bd66:	dbf0      	blt.n	800bd4a <_read+0x12>
  }

  return len;
 800bd68:	687b      	ldr	r3, [r7, #4]
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3718      	adds	r7, #24
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}

0800bd72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800bd72:	b580      	push	{r7, lr}
 800bd74:	b086      	sub	sp, #24
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	60f8      	str	r0, [r7, #12]
 800bd7a:	60b9      	str	r1, [r7, #8]
 800bd7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bd7e:	2300      	movs	r3, #0
 800bd80:	617b      	str	r3, [r7, #20]
 800bd82:	e009      	b.n	800bd98 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	1c5a      	adds	r2, r3, #1
 800bd88:	60ba      	str	r2, [r7, #8]
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f7fe fcdd 	bl	800a74c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	3301      	adds	r3, #1
 800bd96:	617b      	str	r3, [r7, #20]
 800bd98:	697a      	ldr	r2, [r7, #20]
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	dbf1      	blt.n	800bd84 <_write+0x12>
  }
  return len;
 800bda0:	687b      	ldr	r3, [r7, #4]
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	3718      	adds	r7, #24
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}

0800bdaa <_close>:

int _close(int file)
{
 800bdaa:	b480      	push	{r7}
 800bdac:	b083      	sub	sp, #12
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800bdb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	370c      	adds	r7, #12
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc0:	4770      	bx	lr

0800bdc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800bdc2:	b480      	push	{r7}
 800bdc4:	b083      	sub	sp, #12
 800bdc6:	af00      	add	r7, sp, #0
 800bdc8:	6078      	str	r0, [r7, #4]
 800bdca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800bdd2:	605a      	str	r2, [r3, #4]
  return 0;
 800bdd4:	2300      	movs	r3, #0
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	370c      	adds	r7, #12
 800bdda:	46bd      	mov	sp, r7
 800bddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde0:	4770      	bx	lr

0800bde2 <_isatty>:

int _isatty(int file)
{
 800bde2:	b480      	push	{r7}
 800bde4:	b083      	sub	sp, #12
 800bde6:	af00      	add	r7, sp, #0
 800bde8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800bdea:	2301      	movs	r3, #1
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	370c      	adds	r7, #12
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf6:	4770      	bx	lr

0800bdf8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b085      	sub	sp, #20
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	60f8      	str	r0, [r7, #12]
 800be00:	60b9      	str	r1, [r7, #8]
 800be02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800be04:	2300      	movs	r3, #0
}
 800be06:	4618      	mov	r0, r3
 800be08:	3714      	adds	r7, #20
 800be0a:	46bd      	mov	sp, r7
 800be0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be10:	4770      	bx	lr
	...

0800be14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b086      	sub	sp, #24
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800be1c:	4a14      	ldr	r2, [pc, #80]	; (800be70 <_sbrk+0x5c>)
 800be1e:	4b15      	ldr	r3, [pc, #84]	; (800be74 <_sbrk+0x60>)
 800be20:	1ad3      	subs	r3, r2, r3
 800be22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800be28:	4b13      	ldr	r3, [pc, #76]	; (800be78 <_sbrk+0x64>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d102      	bne.n	800be36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800be30:	4b11      	ldr	r3, [pc, #68]	; (800be78 <_sbrk+0x64>)
 800be32:	4a12      	ldr	r2, [pc, #72]	; (800be7c <_sbrk+0x68>)
 800be34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800be36:	4b10      	ldr	r3, [pc, #64]	; (800be78 <_sbrk+0x64>)
 800be38:	681a      	ldr	r2, [r3, #0]
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	4413      	add	r3, r2
 800be3e:	693a      	ldr	r2, [r7, #16]
 800be40:	429a      	cmp	r2, r3
 800be42:	d207      	bcs.n	800be54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800be44:	f00c fe0c 	bl	8018a60 <__errno>
 800be48:	4603      	mov	r3, r0
 800be4a:	220c      	movs	r2, #12
 800be4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800be4e:	f04f 33ff 	mov.w	r3, #4294967295
 800be52:	e009      	b.n	800be68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800be54:	4b08      	ldr	r3, [pc, #32]	; (800be78 <_sbrk+0x64>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800be5a:	4b07      	ldr	r3, [pc, #28]	; (800be78 <_sbrk+0x64>)
 800be5c:	681a      	ldr	r2, [r3, #0]
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	4413      	add	r3, r2
 800be62:	4a05      	ldr	r2, [pc, #20]	; (800be78 <_sbrk+0x64>)
 800be64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800be66:	68fb      	ldr	r3, [r7, #12]
}
 800be68:	4618      	mov	r0, r3
 800be6a:	3718      	adds	r7, #24
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}
 800be70:	20030000 	.word	0x20030000
 800be74:	00000400 	.word	0x00000400
 800be78:	20000580 	.word	0x20000580
 800be7c:	20000a48 	.word	0x20000a48

0800be80 <LL_AHB2_GRP1_EnableClock>:
{
 800be80:	b480      	push	{r7}
 800be82:	b085      	sub	sp, #20
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800be88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800be8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800be8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	4313      	orrs	r3, r2
 800be96:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800be98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800be9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	4013      	ands	r3, r2
 800bea2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800bea4:	68fb      	ldr	r3, [r7, #12]
}
 800bea6:	bf00      	nop
 800bea8:	3714      	adds	r7, #20
 800beaa:	46bd      	mov	sp, r7
 800beac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb0:	4770      	bx	lr

0800beb2 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800beb2:	b480      	push	{r7}
 800beb4:	b085      	sub	sp, #20
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800beba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bebe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bec0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	4313      	orrs	r3, r2
 800bec8:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800beca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bece:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	4013      	ands	r3, r2
 800bed4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800bed6:	68fb      	ldr	r3, [r7, #12]
}
 800bed8:	bf00      	nop
 800beda:	3714      	adds	r7, #20
 800bedc:	46bd      	mov	sp, r7
 800bede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee2:	4770      	bx	lr

0800bee4 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800bee8:	4b22      	ldr	r3, [pc, #136]	; (800bf74 <MX_LPUART1_UART_Init+0x90>)
 800beea:	4a23      	ldr	r2, [pc, #140]	; (800bf78 <MX_LPUART1_UART_Init+0x94>)
 800beec:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 800beee:	4b21      	ldr	r3, [pc, #132]	; (800bf74 <MX_LPUART1_UART_Init+0x90>)
 800bef0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800bef4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800bef6:	4b1f      	ldr	r3, [pc, #124]	; (800bf74 <MX_LPUART1_UART_Init+0x90>)
 800bef8:	2200      	movs	r2, #0
 800befa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800befc:	4b1d      	ldr	r3, [pc, #116]	; (800bf74 <MX_LPUART1_UART_Init+0x90>)
 800befe:	2200      	movs	r2, #0
 800bf00:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800bf02:	4b1c      	ldr	r3, [pc, #112]	; (800bf74 <MX_LPUART1_UART_Init+0x90>)
 800bf04:	2200      	movs	r2, #0
 800bf06:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800bf08:	4b1a      	ldr	r3, [pc, #104]	; (800bf74 <MX_LPUART1_UART_Init+0x90>)
 800bf0a:	220c      	movs	r2, #12
 800bf0c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800bf0e:	4b19      	ldr	r3, [pc, #100]	; (800bf74 <MX_LPUART1_UART_Init+0x90>)
 800bf10:	2200      	movs	r2, #0
 800bf12:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800bf14:	4b17      	ldr	r3, [pc, #92]	; (800bf74 <MX_LPUART1_UART_Init+0x90>)
 800bf16:	2200      	movs	r2, #0
 800bf18:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800bf1a:	4b16      	ldr	r3, [pc, #88]	; (800bf74 <MX_LPUART1_UART_Init+0x90>)
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800bf20:	4b14      	ldr	r3, [pc, #80]	; (800bf74 <MX_LPUART1_UART_Init+0x90>)
 800bf22:	2200      	movs	r2, #0
 800bf24:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800bf26:	4b13      	ldr	r3, [pc, #76]	; (800bf74 <MX_LPUART1_UART_Init+0x90>)
 800bf28:	2200      	movs	r2, #0
 800bf2a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800bf2c:	4811      	ldr	r0, [pc, #68]	; (800bf74 <MX_LPUART1_UART_Init+0x90>)
 800bf2e:	f009 faa5 	bl	801547c <HAL_UART_Init>
 800bf32:	4603      	mov	r3, r0
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d001      	beq.n	800bf3c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800bf38:	f7fe fc38 	bl	800a7ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800bf3c:	2100      	movs	r1, #0
 800bf3e:	480d      	ldr	r0, [pc, #52]	; (800bf74 <MX_LPUART1_UART_Init+0x90>)
 800bf40:	f00a f8c2 	bl	80160c8 <HAL_UARTEx_SetTxFifoThreshold>
 800bf44:	4603      	mov	r3, r0
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d001      	beq.n	800bf4e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800bf4a:	f7fe fc2f 	bl	800a7ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800bf4e:	2100      	movs	r1, #0
 800bf50:	4808      	ldr	r0, [pc, #32]	; (800bf74 <MX_LPUART1_UART_Init+0x90>)
 800bf52:	f00a f8f7 	bl	8016144 <HAL_UARTEx_SetRxFifoThreshold>
 800bf56:	4603      	mov	r3, r0
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d001      	beq.n	800bf60 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800bf5c:	f7fe fc26 	bl	800a7ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800bf60:	4804      	ldr	r0, [pc, #16]	; (800bf74 <MX_LPUART1_UART_Init+0x90>)
 800bf62:	f00a f878 	bl	8016056 <HAL_UARTEx_DisableFifoMode>
 800bf66:	4603      	mov	r3, r0
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d001      	beq.n	800bf70 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800bf6c:	f7fe fc1e 	bl	800a7ac <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800bf70:	bf00      	nop
 800bf72:	bd80      	pop	{r7, pc}
 800bf74:	20000584 	.word	0x20000584
 800bf78:	40008000 	.word	0x40008000

0800bf7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b09c      	sub	sp, #112	; 0x70
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf84:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800bf88:	2200      	movs	r2, #0
 800bf8a:	601a      	str	r2, [r3, #0]
 800bf8c:	605a      	str	r2, [r3, #4]
 800bf8e:	609a      	str	r2, [r3, #8]
 800bf90:	60da      	str	r2, [r3, #12]
 800bf92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800bf94:	f107 030c 	add.w	r3, r7, #12
 800bf98:	2250      	movs	r2, #80	; 0x50
 800bf9a:	2100      	movs	r1, #0
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f00c fd97 	bl	8018ad0 <memset>
  if(uartHandle->Instance==LPUART1)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	4a1f      	ldr	r2, [pc, #124]	; (800c024 <HAL_UART_MspInit+0xa8>)
 800bfa8:	4293      	cmp	r3, r2
 800bfaa:	d136      	bne.n	800c01a <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800bfac:	2302      	movs	r3, #2
 800bfae:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bfb4:	f107 030c 	add.w	r3, r7, #12
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f008 fba4 	bl	8014706 <HAL_RCCEx_PeriphCLKConfig>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d001      	beq.n	800bfc8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800bfc4:	f7fe fbf2 	bl	800a7ac <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800bfc8:	2001      	movs	r0, #1
 800bfca:	f7ff ff72 	bl	800beb2 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800bfce:	2004      	movs	r0, #4
 800bfd0:	f7ff ff56 	bl	800be80 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bfd4:	2002      	movs	r0, #2
 800bfd6:	f7ff ff53 	bl	800be80 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PB5     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800bfda:	2301      	movs	r3, #1
 800bfdc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bfde:	2302      	movs	r3, #2
 800bfe0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800bfea:	2308      	movs	r3, #8
 800bfec:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bfee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800bff2:	4619      	mov	r1, r3
 800bff4:	480c      	ldr	r0, [pc, #48]	; (800c028 <HAL_UART_MspInit+0xac>)
 800bff6:	f005 f84f 	bl	8011098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800bffa:	2320      	movs	r3, #32
 800bffc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bffe:	2302      	movs	r3, #2
 800c000:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c002:	2300      	movs	r3, #0
 800c004:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c006:	2300      	movs	r3, #0
 800c008:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800c00a:	2308      	movs	r3, #8
 800c00c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c00e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800c012:	4619      	mov	r1, r3
 800c014:	4805      	ldr	r0, [pc, #20]	; (800c02c <HAL_UART_MspInit+0xb0>)
 800c016:	f005 f83f 	bl	8011098 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800c01a:	bf00      	nop
 800c01c:	3770      	adds	r7, #112	; 0x70
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}
 800c022:	bf00      	nop
 800c024:	40008000 	.word	0x40008000
 800c028:	48000800 	.word	0x48000800
 800c02c:	48000400 	.word	0x48000400

0800c030 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800c030:	b480      	push	{r7}
 800c032:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800c034:	4b03      	ldr	r3, [pc, #12]	; (800c044 <LL_FLASH_GetUDN+0x14>)
 800c036:	681b      	ldr	r3, [r3, #0]
}
 800c038:	4618      	mov	r0, r3
 800c03a:	46bd      	mov	sp, r7
 800c03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c040:	4770      	bx	lr
 800c042:	bf00      	nop
 800c044:	1fff7580 	.word	0x1fff7580

0800c048 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800c048:	b480      	push	{r7}
 800c04a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800c04c:	4b03      	ldr	r3, [pc, #12]	; (800c05c <LL_FLASH_GetDeviceID+0x14>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	b2db      	uxtb	r3, r3
}
 800c052:	4618      	mov	r0, r3
 800c054:	46bd      	mov	sp, r7
 800c056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05a:	4770      	bx	lr
 800c05c:	1fff7584 	.word	0x1fff7584

0800c060 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800c060:	b480      	push	{r7}
 800c062:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800c064:	4b03      	ldr	r3, [pc, #12]	; (800c074 <LL_FLASH_GetSTCompanyID+0x14>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	0a1b      	lsrs	r3, r3, #8
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	46bd      	mov	sp, r7
 800c06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c072:	4770      	bx	lr
 800c074:	1fff7584 	.word	0x1fff7584

0800c078 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800c078:	b5b0      	push	{r4, r5, r7, lr}
 800c07a:	b092      	sub	sp, #72	; 0x48
 800c07c:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c07e:	2392      	movs	r3, #146	; 0x92
 800c080:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
  uint8_t* BD_A = BleGetBdAddress();
 800c084:	f000 fa28 	bl	800c4d8 <BleGetBdAddress>
 800c088:	6438      	str	r0, [r7, #64]	; 0x40
  a_AdvData[11]=BD_A[5];
 800c08a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c08c:	795a      	ldrb	r2, [r3, #5]
 800c08e:	4b30      	ldr	r3, [pc, #192]	; (800c150 <APP_BLE_Init+0xd8>)
 800c090:	72da      	strb	r2, [r3, #11]
  a_AdvData[12]=BD_A[4];
 800c092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c094:	791a      	ldrb	r2, [r3, #4]
 800c096:	4b2e      	ldr	r3, [pc, #184]	; (800c150 <APP_BLE_Init+0xd8>)
 800c098:	731a      	strb	r2, [r3, #12]
  a_AdvData[13]=BD_A[3];
 800c09a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c09c:	78da      	ldrb	r2, [r3, #3]
 800c09e:	4b2c      	ldr	r3, [pc, #176]	; (800c150 <APP_BLE_Init+0xd8>)
 800c0a0:	735a      	strb	r2, [r3, #13]
  a_AdvData[14]=BD_A[2];
 800c0a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0a4:	789a      	ldrb	r2, [r3, #2]
 800c0a6:	4b2a      	ldr	r3, [pc, #168]	; (800c150 <APP_BLE_Init+0xd8>)
 800c0a8:	739a      	strb	r2, [r3, #14]
  a_AdvData[15]=BD_A[1];
 800c0aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0ac:	785a      	ldrb	r2, [r3, #1]
 800c0ae:	4b28      	ldr	r3, [pc, #160]	; (800c150 <APP_BLE_Init+0xd8>)
 800c0b0:	73da      	strb	r2, [r3, #15]
  a_AdvData[16]=BD_A[0];
 800c0b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0b4:	781a      	ldrb	r2, [r3, #0]
 800c0b6:	4b26      	ldr	r3, [pc, #152]	; (800c150 <APP_BLE_Init+0xd8>)
 800c0b8:	741a      	strb	r2, [r3, #16]
  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800c0ba:	4b26      	ldr	r3, [pc, #152]	; (800c154 <APP_BLE_Init+0xdc>)
 800c0bc:	1d3c      	adds	r4, r7, #4
 800c0be:	461d      	mov	r5, r3
 800c0c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c0c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c0c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c0c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c0c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c0ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c0cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c0d0:	c403      	stmia	r4!, {r0, r1}
 800c0d2:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800c0d4:	f000 f906 	bl	800c2e4 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800c0d8:	2101      	movs	r1, #1
 800c0da:	2002      	movs	r0, #2
 800c0dc:	f00c fa2c 	bl	8018538 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800c0e0:	4a1d      	ldr	r2, [pc, #116]	; (800c158 <APP_BLE_Init+0xe0>)
 800c0e2:	2100      	movs	r1, #0
 800c0e4:	2002      	movs	r0, #2
 800c0e6:	f00c fb53 	bl	8018790 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800c0ea:	1d3b      	adds	r3, r7, #4
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f00b fbc3 	bl	8017878 <SHCI_C2_BLE_Init>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (status != SHCI_Success)
 800c0f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d001      	beq.n	800c104 <APP_BLE_Init+0x8c>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800c100:	f7fe fb54 	bl	800a7ac <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800c104:	f000 f904 	bl	800c310 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800c108:	f00b ff16 	bl	8017f38 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c10c:	4b13      	ldr	r3, [pc, #76]	; (800c15c <APP_BLE_Init+0xe4>)
 800c10e:	2200      	movs	r2, #0
 800c110:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800c114:	4b11      	ldr	r3, [pc, #68]	; (800c15c <APP_BLE_Init+0xe4>)
 800c116:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c11a:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800c11c:	4a10      	ldr	r2, [pc, #64]	; (800c160 <APP_BLE_Init+0xe8>)
 800c11e:	2100      	movs	r1, #0
 800c120:	2001      	movs	r0, #1
 800c122:	f00c fb35 	bl	8018790 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800c126:	2006      	movs	r0, #6
 800c128:	f00b f8cc 	bl	80172c4 <aci_hal_set_radio_activity_mask>
 800c12c:	4603      	mov	r3, r0
 800c12e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800c132:	f000 fd91 	bl	800cc58 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800c136:	4b09      	ldr	r3, [pc, #36]	; (800c15c <APP_BLE_Init+0xe4>)
 800c138:	2200      	movs	r2, #0
 800c13a:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800c13c:	4b07      	ldr	r3, [pc, #28]	; (800c15c <APP_BLE_Init+0xe4>)
 800c13e:	2200      	movs	r2, #0
 800c140:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800c142:	2001      	movs	r0, #1
 800c144:	f000 f998 	bl	800c478 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800c148:	bf00      	nop
}
 800c14a:	3748      	adds	r7, #72	; 0x48
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bdb0      	pop	{r4, r5, r7, pc}
 800c150:	20000034 	.word	0x20000034
 800c154:	0801d844 	.word	0x0801d844
 800c158:	080174e9 	.word	0x080174e9
 800c15c:	20000620 	.word	0x20000620
 800c160:	0800c561 	.word	0x0800c561

0800c164 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b08a      	sub	sp, #40	; 0x28
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800c16c:	2392      	movs	r3, #146	; 0x92
 800c16e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	3301      	adds	r3, #1
 800c176:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800c178:	6a3b      	ldr	r3, [r7, #32]
 800c17a:	781b      	ldrb	r3, [r3, #0]
 800c17c:	2bff      	cmp	r3, #255	; 0xff
 800c17e:	d053      	beq.n	800c228 <SVCCTL_App_Notification+0xc4>
 800c180:	2bff      	cmp	r3, #255	; 0xff
 800c182:	f300 80a1 	bgt.w	800c2c8 <SVCCTL_App_Notification+0x164>
 800c186:	2b05      	cmp	r3, #5
 800c188:	d002      	beq.n	800c190 <SVCCTL_App_Notification+0x2c>
 800c18a:	2b3e      	cmp	r3, #62	; 0x3e
 800c18c:	d020      	beq.n	800c1d0 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800c18e:	e09b      	b.n	800c2c8 <SVCCTL_App_Notification+0x164>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800c190:	6a3b      	ldr	r3, [r7, #32]
 800c192:	3302      	adds	r3, #2
 800c194:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c19c:	b29a      	uxth	r2, r3
 800c19e:	4b4e      	ldr	r3, [pc, #312]	; (800c2d8 <SVCCTL_App_Notification+0x174>)
 800c1a0:	8adb      	ldrh	r3, [r3, #22]
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	d106      	bne.n	800c1b4 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800c1a6:	4b4c      	ldr	r3, [pc, #304]	; (800c2d8 <SVCCTL_App_Notification+0x174>)
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c1ac:	4b4a      	ldr	r3, [pc, #296]	; (800c2d8 <SVCCTL_App_Notification+0x174>)
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 800c1b4:	2001      	movs	r0, #1
 800c1b6:	f000 f95f 	bl	800c478 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800c1ba:	4b48      	ldr	r3, [pc, #288]	; (800c2dc <SVCCTL_App_Notification+0x178>)
 800c1bc:	2201      	movs	r2, #1
 800c1be:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800c1c0:	4b45      	ldr	r3, [pc, #276]	; (800c2d8 <SVCCTL_App_Notification+0x174>)
 800c1c2:	8ada      	ldrh	r2, [r3, #22]
 800c1c4:	4b45      	ldr	r3, [pc, #276]	; (800c2dc <SVCCTL_App_Notification+0x178>)
 800c1c6:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800c1c8:	4844      	ldr	r0, [pc, #272]	; (800c2dc <SVCCTL_App_Notification+0x178>)
 800c1ca:	f000 fd17 	bl	800cbfc <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800c1ce:	e07e      	b.n	800c2ce <SVCCTL_App_Notification+0x16a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800c1d0:	6a3b      	ldr	r3, [r7, #32]
 800c1d2:	3302      	adds	r3, #2
 800c1d4:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800c1d6:	697b      	ldr	r3, [r7, #20]
 800c1d8:	781b      	ldrb	r3, [r3, #0]
 800c1da:	2b01      	cmp	r3, #1
 800c1dc:	d001      	beq.n	800c1e2 <SVCCTL_App_Notification+0x7e>
 800c1de:	2b03      	cmp	r3, #3
          break;
 800c1e0:	e021      	b.n	800c226 <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	3301      	adds	r3, #1
 800c1e6:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800c1e8:	4b3b      	ldr	r3, [pc, #236]	; (800c2d8 <SVCCTL_App_Notification+0x174>)
 800c1ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c1ee:	2b04      	cmp	r3, #4
 800c1f0:	d104      	bne.n	800c1fc <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800c1f2:	4b39      	ldr	r3, [pc, #228]	; (800c2d8 <SVCCTL_App_Notification+0x174>)
 800c1f4:	2206      	movs	r2, #6
 800c1f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800c1fa:	e003      	b.n	800c204 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800c1fc:	4b36      	ldr	r3, [pc, #216]	; (800c2d8 <SVCCTL_App_Notification+0x174>)
 800c1fe:	2205      	movs	r2, #5
 800c200:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c20a:	b29a      	uxth	r2, r3
 800c20c:	4b32      	ldr	r3, [pc, #200]	; (800c2d8 <SVCCTL_App_Notification+0x174>)
 800c20e:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800c210:	4b32      	ldr	r3, [pc, #200]	; (800c2dc <SVCCTL_App_Notification+0x178>)
 800c212:	2200      	movs	r2, #0
 800c214:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800c216:	4b30      	ldr	r3, [pc, #192]	; (800c2d8 <SVCCTL_App_Notification+0x174>)
 800c218:	8ada      	ldrh	r2, [r3, #22]
 800c21a:	4b30      	ldr	r3, [pc, #192]	; (800c2dc <SVCCTL_App_Notification+0x178>)
 800c21c:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800c21e:	482f      	ldr	r0, [pc, #188]	; (800c2dc <SVCCTL_App_Notification+0x178>)
 800c220:	f000 fcec 	bl	800cbfc <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800c224:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800c226:	e052      	b.n	800c2ce <SVCCTL_App_Notification+0x16a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800c228:	6a3b      	ldr	r3, [r7, #32]
 800c22a:	3302      	adds	r3, #2
 800c22c:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800c22e:	69fb      	ldr	r3, [r7, #28]
 800c230:	881b      	ldrh	r3, [r3, #0]
 800c232:	b29b      	uxth	r3, r3
 800c234:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c238:	d040      	beq.n	800c2bc <SVCCTL_App_Notification+0x158>
 800c23a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c23e:	dc45      	bgt.n	800c2cc <SVCCTL_App_Notification+0x168>
 800c240:	2b04      	cmp	r3, #4
 800c242:	d03d      	beq.n	800c2c0 <SVCCTL_App_Notification+0x15c>
 800c244:	2b04      	cmp	r3, #4
 800c246:	db41      	blt.n	800c2cc <SVCCTL_App_Notification+0x168>
 800c248:	f240 420a 	movw	r2, #1034	; 0x40a
 800c24c:	4293      	cmp	r3, r2
 800c24e:	dc3d      	bgt.n	800c2cc <SVCCTL_App_Notification+0x168>
 800c250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c254:	dd3a      	ble.n	800c2cc <SVCCTL_App_Notification+0x168>
 800c256:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 800c25a:	2b09      	cmp	r3, #9
 800c25c:	d836      	bhi.n	800c2cc <SVCCTL_App_Notification+0x168>
 800c25e:	a201      	add	r2, pc, #4	; (adr r2, 800c264 <SVCCTL_App_Notification+0x100>)
 800c260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c264:	0800c2b5 	.word	0x0800c2b5
 800c268:	0800c28d 	.word	0x0800c28d
 800c26c:	0800c2cd 	.word	0x0800c2cd
 800c270:	0800c2cd 	.word	0x0800c2cd
 800c274:	0800c2cd 	.word	0x0800c2cd
 800c278:	0800c2cd 	.word	0x0800c2cd
 800c27c:	0800c2c5 	.word	0x0800c2c5
 800c280:	0800c2cd 	.word	0x0800c2cd
 800c284:	0800c2a1 	.word	0x0800c2a1
 800c288:	0800c2c5 	.word	0x0800c2c5
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800c28c:	4b12      	ldr	r3, [pc, #72]	; (800c2d8 <SVCCTL_App_Notification+0x174>)
 800c28e:	8adb      	ldrh	r3, [r3, #22]
 800c290:	4913      	ldr	r1, [pc, #76]	; (800c2e0 <SVCCTL_App_Notification+0x17c>)
 800c292:	4618      	mov	r0, r3
 800c294:	f00a fa18 	bl	80166c8 <aci_gap_pass_key_resp>
 800c298:	4603      	mov	r3, r0
 800c29a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 800c29e:	e012      	b.n	800c2c6 <SVCCTL_App_Notification+0x162>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800c2a0:	4b0d      	ldr	r3, [pc, #52]	; (800c2d8 <SVCCTL_App_Notification+0x174>)
 800c2a2:	8adb      	ldrh	r3, [r3, #22]
 800c2a4:	2101      	movs	r1, #1
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f00a fbb8 	bl	8016a1c <aci_gap_numeric_comparison_value_confirm_yesno>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 800c2b2:	e008      	b.n	800c2c6 <SVCCTL_App_Notification+0x162>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800c2b4:	69fb      	ldr	r3, [r7, #28]
 800c2b6:	3302      	adds	r3, #2
 800c2b8:	61bb      	str	r3, [r7, #24]
          break;
 800c2ba:	e004      	b.n	800c2c6 <SVCCTL_App_Notification+0x162>
          break;
 800c2bc:	bf00      	nop
 800c2be:	e005      	b.n	800c2cc <SVCCTL_App_Notification+0x168>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800c2c0:	bf00      	nop
 800c2c2:	e003      	b.n	800c2cc <SVCCTL_App_Notification+0x168>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800c2c4:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800c2c6:	e001      	b.n	800c2cc <SVCCTL_App_Notification+0x168>
      break;
 800c2c8:	bf00      	nop
 800c2ca:	e000      	b.n	800c2ce <SVCCTL_App_Notification+0x16a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800c2cc:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800c2ce:	2301      	movs	r3, #1
}
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	3728      	adds	r7, #40	; 0x28
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}
 800c2d8:	20000620 	.word	0x20000620
 800c2dc:	200006a4 	.word	0x200006a4
 800c2e0:	0001b207 	.word	0x0001b207

0800c2e4 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b082      	sub	sp, #8
 800c2e8:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800c2ea:	4b06      	ldr	r3, [pc, #24]	; (800c304 <Ble_Tl_Init+0x20>)
 800c2ec:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800c2ee:	4b06      	ldr	r3, [pc, #24]	; (800c308 <Ble_Tl_Init+0x24>)
 800c2f0:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800c2f2:	463b      	mov	r3, r7
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	4805      	ldr	r0, [pc, #20]	; (800c30c <Ble_Tl_Init+0x28>)
 800c2f8:	f00b f8da 	bl	80174b0 <hci_init>

  return;
 800c2fc:	bf00      	nop
}
 800c2fe:	3708      	adds	r7, #8
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}
 800c304:	20030028 	.word	0x20030028
 800c308:	0800c611 	.word	0x0800c611
 800c30c:	0800c5d9 	.word	0x0800c5d9

0800c310 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800c310:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c312:	b08d      	sub	sp, #52	; 0x34
 800c314:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800c316:	2300      	movs	r3, #0
 800c318:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c31a:	2392      	movs	r3, #146	; 0x92
 800c31c:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800c31e:	f00b f825 	bl	801736c <hci_reset>
 800c322:	4603      	mov	r3, r0
 800c324:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800c326:	f000 f8d7 	bl	800c4d8 <BleGetBdAddress>
 800c32a:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800c32c:	693a      	ldr	r2, [r7, #16]
 800c32e:	2106      	movs	r1, #6
 800c330:	2000      	movs	r0, #0
 800c332:	f00a fedb 	bl	80170ec <aci_hal_write_config_data>
 800c336:	4603      	mov	r3, r0
 800c338:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800c33a:	4a4a      	ldr	r2, [pc, #296]	; (800c464 <Ble_Hci_Gap_Gatt_Init+0x154>)
 800c33c:	2110      	movs	r1, #16
 800c33e:	2018      	movs	r0, #24
 800c340:	f00a fed4 	bl	80170ec <aci_hal_write_config_data>
 800c344:	4603      	mov	r3, r0
 800c346:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800c348:	4a47      	ldr	r2, [pc, #284]	; (800c468 <Ble_Hci_Gap_Gatt_Init+0x158>)
 800c34a:	2110      	movs	r1, #16
 800c34c:	2008      	movs	r0, #8
 800c34e:	f00a fecd 	bl	80170ec <aci_hal_write_config_data>
 800c352:	4603      	mov	r3, r0
 800c354:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800c356:	211f      	movs	r1, #31
 800c358:	2001      	movs	r0, #1
 800c35a:	f00a ff4c 	bl	80171f6 <aci_hal_set_tx_power_level>
 800c35e:	4603      	mov	r3, r0
 800c360:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800c362:	f00a fbc2 	bl	8016aea <aci_gatt_init>
 800c366:	4603      	mov	r3, r0
 800c368:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800c36a:	2300      	movs	r3, #0
 800c36c:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800c36e:	7bfb      	ldrb	r3, [r7, #15]
 800c370:	f043 0301 	orr.w	r3, r3, #1
 800c374:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800c376:	7bfb      	ldrb	r3, [r7, #15]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d01f      	beq.n	800c3bc <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800c37c:	4b3b      	ldr	r3, [pc, #236]	; (800c46c <Ble_Hci_Gap_Gatt_Init+0x15c>)
 800c37e:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800c380:	1dba      	adds	r2, r7, #6
 800c382:	7bf8      	ldrb	r0, [r7, #15]
 800c384:	1cbb      	adds	r3, r7, #2
 800c386:	9301      	str	r3, [sp, #4]
 800c388:	1d3b      	adds	r3, r7, #4
 800c38a:	9300      	str	r3, [sp, #0]
 800c38c:	4613      	mov	r3, r2
 800c38e:	2205      	movs	r2, #5
 800c390:	2100      	movs	r1, #0
 800c392:	f00a fa00 	bl	8016796 <aci_gap_init>
 800c396:	4603      	mov	r3, r0
 800c398:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800c39a:	88fc      	ldrh	r4, [r7, #6]
 800c39c:	88bd      	ldrh	r5, [r7, #4]
 800c39e:	68b8      	ldr	r0, [r7, #8]
 800c3a0:	f7fa fef6 	bl	8007190 <strlen>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	b2da      	uxtb	r2, r3
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	9300      	str	r3, [sp, #0]
 800c3ac:	4613      	mov	r3, r2
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	4629      	mov	r1, r5
 800c3b2:	4620      	mov	r0, r4
 800c3b4:	f00a fd9c 	bl	8016ef0 <aci_gatt_update_char_value>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800c3bc:	88f8      	ldrh	r0, [r7, #6]
 800c3be:	8879      	ldrh	r1, [r7, #2]
 800c3c0:	463b      	mov	r3, r7
 800c3c2:	9300      	str	r3, [sp, #0]
 800c3c4:	2302      	movs	r3, #2
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	f00a fd92 	bl	8016ef0 <aci_gatt_update_char_value>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800c3d0:	2202      	movs	r2, #2
 800c3d2:	2102      	movs	r1, #2
 800c3d4:	2000      	movs	r0, #0
 800c3d6:	f00a ffed 	bl	80173b4 <hci_le_set_default_phy>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800c3de:	4b24      	ldr	r3, [pc, #144]	; (800c470 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800c3e4:	4b22      	ldr	r3, [pc, #136]	; (800c470 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f00a f855 	bl	8016498 <aci_gap_set_io_capability>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800c3f2:	4b1f      	ldr	r3, [pc, #124]	; (800c470 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800c3f4:	2201      	movs	r2, #1
 800c3f6:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800c3f8:	4b1d      	ldr	r3, [pc, #116]	; (800c470 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800c3fa:	2208      	movs	r2, #8
 800c3fc:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800c3fe:	4b1c      	ldr	r3, [pc, #112]	; (800c470 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800c400:	2210      	movs	r2, #16
 800c402:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800c404:	4b1a      	ldr	r3, [pc, #104]	; (800c470 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800c406:	2200      	movs	r2, #0
 800c408:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800c40a:	4b19      	ldr	r3, [pc, #100]	; (800c470 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800c40c:	4a19      	ldr	r2, [pc, #100]	; (800c474 <Ble_Hci_Gap_Gatt_Init+0x164>)
 800c40e:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800c410:	4b17      	ldr	r3, [pc, #92]	; (800c470 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800c412:	2201      	movs	r2, #1
 800c414:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800c416:	4b16      	ldr	r3, [pc, #88]	; (800c470 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800c418:	789c      	ldrb	r4, [r3, #2]
 800c41a:	4b15      	ldr	r3, [pc, #84]	; (800c470 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800c41c:	785d      	ldrb	r5, [r3, #1]
 800c41e:	4b14      	ldr	r3, [pc, #80]	; (800c470 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800c420:	791b      	ldrb	r3, [r3, #4]
 800c422:	4a13      	ldr	r2, [pc, #76]	; (800c470 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800c424:	7952      	ldrb	r2, [r2, #5]
 800c426:	4912      	ldr	r1, [pc, #72]	; (800c470 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800c428:	78c9      	ldrb	r1, [r1, #3]
 800c42a:	4811      	ldr	r0, [pc, #68]	; (800c470 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800c42c:	6880      	ldr	r0, [r0, #8]
 800c42e:	2600      	movs	r6, #0
 800c430:	9604      	str	r6, [sp, #16]
 800c432:	9003      	str	r0, [sp, #12]
 800c434:	9102      	str	r1, [sp, #8]
 800c436:	9201      	str	r2, [sp, #4]
 800c438:	9300      	str	r3, [sp, #0]
 800c43a:	2301      	movs	r3, #1
 800c43c:	2202      	movs	r2, #2
 800c43e:	4629      	mov	r1, r5
 800c440:	4620      	mov	r0, r4
 800c442:	f00a f87d 	bl	8016540 <aci_gap_set_authentication_requirement>
 800c446:	4603      	mov	r3, r0
 800c448:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800c44a:	4b09      	ldr	r3, [pc, #36]	; (800c470 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800c44c:	789b      	ldrb	r3, [r3, #2]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d003      	beq.n	800c45a <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 800c452:	f00a fabf 	bl	80169d4 <aci_gap_configure_filter_accept_list>
 800c456:	4603      	mov	r3, r0
 800c458:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 800c45a:	bf00      	nop
 800c45c:	371c      	adds	r7, #28
 800c45e:	46bd      	mov	sp, r7
 800c460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c462:	bf00      	nop
 800c464:	0801dce8 	.word	0x0801dce8
 800c468:	0801dcf8 	.word	0x0801dcf8
 800c46c:	0801d880 	.word	0x0801d880
 800c470:	20000620 	.word	0x20000620
 800c474:	0001b207 	.word	0x0001b207

0800c478 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b08c      	sub	sp, #48	; 0x30
 800c47c:	af08      	add	r7, sp, #32
 800c47e:	4603      	mov	r3, r0
 800c480:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c482:	2392      	movs	r3, #146	; 0x92
 800c484:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800c486:	4a12      	ldr	r2, [pc, #72]	; (800c4d0 <Adv_Request+0x58>)
 800c488:	79fb      	ldrb	r3, [r7, #7]
 800c48a:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800c48e:	2300      	movs	r3, #0
 800c490:	9306      	str	r3, [sp, #24]
 800c492:	2300      	movs	r3, #0
 800c494:	9305      	str	r3, [sp, #20]
 800c496:	2300      	movs	r3, #0
 800c498:	9304      	str	r3, [sp, #16]
 800c49a:	2300      	movs	r3, #0
 800c49c:	9303      	str	r3, [sp, #12]
 800c49e:	2300      	movs	r3, #0
 800c4a0:	9302      	str	r3, [sp, #8]
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	9301      	str	r3, [sp, #4]
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	9300      	str	r3, [sp, #0]
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	22a0      	movs	r2, #160	; 0xa0
 800c4ae:	2180      	movs	r1, #128	; 0x80
 800c4b0:	2000      	movs	r0, #0
 800c4b2:	f009 fef7 	bl	80162a4 <aci_gap_set_discoverable>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800c4ba:	4906      	ldr	r1, [pc, #24]	; (800c4d4 <Adv_Request+0x5c>)
 800c4bc:	2011      	movs	r0, #17
 800c4be:	f00a fa17 	bl	80168f0 <aci_gap_update_adv_data>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800c4c6:	bf00      	nop
}
 800c4c8:	3710      	adds	r7, #16
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}
 800c4ce:	bf00      	nop
 800c4d0:	20000620 	.word	0x20000620
 800c4d4:	20000034 	.word	0x20000034

0800c4d8 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b086      	sub	sp, #24
 800c4dc:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800c4de:	f7ff fda7 	bl	800c030 <LL_FLASH_GetUDN>
 800c4e2:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4ea:	d023      	beq.n	800c534 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800c4ec:	f7ff fdb8 	bl	800c060 <LL_FLASH_GetSTCompanyID>
 800c4f0:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800c4f2:	f7ff fda9 	bl	800c048 <LL_FLASH_GetDeviceID>
 800c4f6:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800c4f8:	693b      	ldr	r3, [r7, #16]
 800c4fa:	b2da      	uxtb	r2, r3
 800c4fc:	4b16      	ldr	r3, [pc, #88]	; (800c558 <BleGetBdAddress+0x80>)
 800c4fe:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800c500:	693b      	ldr	r3, [r7, #16]
 800c502:	0a1b      	lsrs	r3, r3, #8
 800c504:	b2da      	uxtb	r2, r3
 800c506:	4b14      	ldr	r3, [pc, #80]	; (800c558 <BleGetBdAddress+0x80>)
 800c508:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	b2da      	uxtb	r2, r3
 800c50e:	4b12      	ldr	r3, [pc, #72]	; (800c558 <BleGetBdAddress+0x80>)
 800c510:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	b2da      	uxtb	r2, r3
 800c516:	4b10      	ldr	r3, [pc, #64]	; (800c558 <BleGetBdAddress+0x80>)
 800c518:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	0a1b      	lsrs	r3, r3, #8
 800c51e:	b2da      	uxtb	r2, r3
 800c520:	4b0d      	ldr	r3, [pc, #52]	; (800c558 <BleGetBdAddress+0x80>)
 800c522:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	0c1b      	lsrs	r3, r3, #16
 800c528:	b2da      	uxtb	r2, r3
 800c52a:	4b0b      	ldr	r3, [pc, #44]	; (800c558 <BleGetBdAddress+0x80>)
 800c52c:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800c52e:	4b0a      	ldr	r3, [pc, #40]	; (800c558 <BleGetBdAddress+0x80>)
 800c530:	617b      	str	r3, [r7, #20]
 800c532:	e00b      	b.n	800c54c <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800c534:	2000      	movs	r0, #0
 800c536:	f00b f977 	bl	8017828 <OTP_Read>
 800c53a:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d002      	beq.n	800c548 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	617b      	str	r3, [r7, #20]
 800c546:	e001      	b.n	800c54c <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800c548:	4b04      	ldr	r3, [pc, #16]	; (800c55c <BleGetBdAddress+0x84>)
 800c54a:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800c54c:	697b      	ldr	r3, [r7, #20]
}
 800c54e:	4618      	mov	r0, r3
 800c550:	3718      	adds	r7, #24
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}
 800c556:	bf00      	nop
 800c558:	20000618 	.word	0x20000618
 800c55c:	0801dce0 	.word	0x0801dce0

0800c560 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b082      	sub	sp, #8
 800c564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800c566:	4b0a      	ldr	r3, [pc, #40]	; (800c590 <Adv_Cancel+0x30>)
 800c568:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c56c:	2b05      	cmp	r3, #5
 800c56e:	d00a      	beq.n	800c586 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c570:	2392      	movs	r3, #146	; 0x92
 800c572:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800c574:	f009 fe72 	bl	801625c <aci_gap_set_non_discoverable>
 800c578:	4603      	mov	r3, r0
 800c57a:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c57c:	4b04      	ldr	r3, [pc, #16]	; (800c590 <Adv_Cancel+0x30>)
 800c57e:	2200      	movs	r2, #0
 800c580:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800c584:	bf00      	nop
 800c586:	bf00      	nop
}
 800c588:	3708      	adds	r7, #8
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}
 800c58e:	bf00      	nop
 800c590:	20000620 	.word	0x20000620

0800c594 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b082      	sub	sp, #8
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800c59c:	2100      	movs	r1, #0
 800c59e:	2002      	movs	r0, #2
 800c5a0:	f00c f918 	bl	80187d4 <UTIL_SEQ_SetTask>

  return;
 800c5a4:	bf00      	nop
}
 800c5a6:	3708      	adds	r7, #8
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}

0800c5ac <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b082      	sub	sp, #8
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800c5b4:	2001      	movs	r0, #1
 800c5b6:	f00c f99f 	bl	80188f8 <UTIL_SEQ_SetEvt>

  return;
 800c5ba:	bf00      	nop
}
 800c5bc:	3708      	adds	r7, #8
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}

0800c5c2 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800c5c2:	b580      	push	{r7, lr}
 800c5c4:	b082      	sub	sp, #8
 800c5c6:	af00      	add	r7, sp, #0
 800c5c8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800c5ca:	2001      	movs	r0, #1
 800c5cc:	f00c f9b4 	bl	8018938 <UTIL_SEQ_WaitEvt>

  return;
 800c5d0:	bf00      	nop
}
 800c5d2:	3708      	adds	r7, #8
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}

0800c5d8 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b084      	sub	sp, #16
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	685b      	ldr	r3, [r3, #4]
 800c5e8:	3308      	adds	r3, #8
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f00b fcf6 	bl	8017fdc <SVCCTL_UserEvtRx>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800c5f4:	7afb      	ldrb	r3, [r7, #11]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d003      	beq.n	800c602 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	2201      	movs	r2, #1
 800c5fe:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800c600:	e003      	b.n	800c60a <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	2200      	movs	r2, #0
 800c606:	701a      	strb	r2, [r3, #0]
  return;
 800c608:	bf00      	nop
}
 800c60a:	3710      	adds	r7, #16
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b084      	sub	sp, #16
 800c614:	af00      	add	r7, sp, #0
 800c616:	4603      	mov	r3, r0
 800c618:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800c61a:	79fb      	ldrb	r3, [r7, #7]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d002      	beq.n	800c626 <BLE_StatusNot+0x16>
 800c620:	2b01      	cmp	r3, #1
 800c622:	d006      	beq.n	800c632 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800c624:	e00b      	b.n	800c63e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800c626:	237f      	movs	r3, #127	; 0x7f
 800c628:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800c62a:	68f8      	ldr	r0, [r7, #12]
 800c62c:	f00c f8fe 	bl	801882c <UTIL_SEQ_PauseTask>
      break;
 800c630:	e005      	b.n	800c63e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800c632:	237f      	movs	r3, #127	; 0x7f
 800c634:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800c636:	68f8      	ldr	r0, [r7, #12]
 800c638:	f00c f93e 	bl	80188b8 <UTIL_SEQ_ResumeTask>
      break;
 800c63c:	bf00      	nop
  }

  return;
 800c63e:	bf00      	nop
}
 800c640:	3710      	adds	r7, #16
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}
	...

0800c648 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800c648:	b480      	push	{r7}
 800c64a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800c64c:	f3bf 8f4f 	dsb	sy
}
 800c650:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800c652:	4b06      	ldr	r3, [pc, #24]	; (800c66c <__NVIC_SystemReset+0x24>)
 800c654:	68db      	ldr	r3, [r3, #12]
 800c656:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800c65a:	4904      	ldr	r1, [pc, #16]	; (800c66c <__NVIC_SystemReset+0x24>)
 800c65c:	4b04      	ldr	r3, [pc, #16]	; (800c670 <__NVIC_SystemReset+0x28>)
 800c65e:	4313      	orrs	r3, r2
 800c660:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800c662:	f3bf 8f4f 	dsb	sy
}
 800c666:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800c668:	bf00      	nop
 800c66a:	e7fd      	b.n	800c668 <__NVIC_SystemReset+0x20>
 800c66c:	e000ed00 	.word	0xe000ed00
 800c670:	05fa0004 	.word	0x05fa0004

0800c674 <Custom_STM_App_Notification>:
void Update_mode(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800c674:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c676:	b089      	sub	sp, #36	; 0x24
 800c678:	af04      	add	r7, sp, #16
 800c67a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	781b      	ldrb	r3, [r3, #0]
 800c680:	2b1c      	cmp	r3, #28
 800c682:	f200 8296 	bhi.w	800cbb2 <Custom_STM_App_Notification+0x53e>
 800c686:	a201      	add	r2, pc, #4	; (adr r2, 800c68c <Custom_STM_App_Notification+0x18>)
 800c688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c68c:	0800c701 	.word	0x0800c701
 800c690:	0800c71d 	.word	0x0800c71d
 800c694:	0800c723 	.word	0x0800c723
 800c698:	0800c761 	.word	0x0800c761
 800c69c:	0800c78d 	.word	0x0800c78d
 800c6a0:	0800c7a9 	.word	0x0800c7a9
 800c6a4:	0800c815 	.word	0x0800c815
 800c6a8:	0800c84b 	.word	0x0800c84b
 800c6ac:	0800cbb3 	.word	0x0800cbb3
 800c6b0:	0800cbb3 	.word	0x0800cbb3
 800c6b4:	0800c871 	.word	0x0800c871
 800c6b8:	0800c8ab 	.word	0x0800c8ab
 800c6bc:	0800c8c7 	.word	0x0800c8c7
 800c6c0:	0800c8fd 	.word	0x0800c8fd
 800c6c4:	0800c923 	.word	0x0800c923
 800c6c8:	0800c939 	.word	0x0800c939
 800c6cc:	0800cbb3 	.word	0x0800cbb3
 800c6d0:	0800c947 	.word	0x0800c947
 800c6d4:	0800c955 	.word	0x0800c955
 800c6d8:	0800c9e9 	.word	0x0800c9e9
 800c6dc:	0800ca95 	.word	0x0800ca95
 800c6e0:	0800caa3 	.word	0x0800caa3
 800c6e4:	0800cb55 	.word	0x0800cb55
 800c6e8:	0800cbb3 	.word	0x0800cbb3
 800c6ec:	0800cb5f 	.word	0x0800cb5f
 800c6f0:	0800cbb3 	.word	0x0800cbb3
 800c6f4:	0800cb69 	.word	0x0800cb69
 800c6f8:	0800cb79 	.word	0x0800cb79
 800c6fc:	0800cb83 	.word	0x0800cb83
    /* USER CODE END CUSTOM_STM_App_Notification_Custom_Evt_Opcode */

    /* Battery_Service */
    case CUSTOM_STM_LEVEL_READ_EVT:
      /* USER CODE BEGIN CUSTOM_STM_LEVEL_READ_EVT */
		printf("\rBattery_level\n");
 800c700:	48a1      	ldr	r0, [pc, #644]	; (800c988 <Custom_STM_App_Notification+0x314>)
 800c702:	f00d f8ed 	bl	80198e0 <puts>
		Battery();
 800c706:	f000 fd3b 	bl	800d180 <Battery>
		UpdateCharData[0]=Battery_Percentage;
 800c70a:	4ba0      	ldr	r3, [pc, #640]	; (800c98c <Custom_STM_App_Notification+0x318>)
 800c70c:	781a      	ldrb	r2, [r3, #0]
 800c70e:	4ba0      	ldr	r3, [pc, #640]	; (800c990 <Custom_STM_App_Notification+0x31c>)
 800c710:	701a      	strb	r2, [r3, #0]
		Custom_STM_App_Update_Char(CUSTOM_STM_LEVEL, (uint8_t *)UpdateCharData);
 800c712:	499f      	ldr	r1, [pc, #636]	; (800c990 <Custom_STM_App_Notification+0x31c>)
 800c714:	2000      	movs	r0, #0
 800c716:	f002 f849 	bl	800e7ac <Custom_STM_App_Update_Char>
      /* USER CODE END CUSTOM_STM_LEVEL_READ_EVT */
      break;
 800c71a:	e24f      	b.n	800cbbc <Custom_STM_App_Notification+0x548>

    /* Temperature */
    case CUSTOM_STM_IR_T_READ_EVT:
      /* USER CODE BEGIN CUSTOM_STM_IR_T_READ_EVT */
    	Send_Temp_Notification();
 800c71c:	f000 faf2 	bl	800cd04 <Send_Temp_Notification>
      /* USER CODE END CUSTOM_STM_IR_T_READ_EVT */
      break;
 800c720:	e24c      	b.n	800cbbc <Custom_STM_App_Notification+0x548>

    case CUSTOM_STM_IR_T_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_IR_T_NOTIFY_ENABLED_EVT */
		printf("Temp_NOTIFY_ENABLED\n");
 800c722:	489c      	ldr	r0, [pc, #624]	; (800c994 <Custom_STM_App_Notification+0x320>)
 800c724:	f00d f8dc 	bl	80198e0 <puts>
		UTIL_SEQ_PauseTask(1<<CFG_UV_ID);
 800c728:	2008      	movs	r0, #8
 800c72a:	f00c f87f 	bl	801882c <UTIL_SEQ_PauseTask>
		UTIL_SEQ_PauseTask(1<<CFG_UV_ID);
 800c72e:	2008      	movs	r0, #8
 800c730:	f00c f87c 	bl	801882c <UTIL_SEQ_PauseTask>
		UTIL_SEQ_PauseTask(1<<CFG_LOG_TEMP_ID);
 800c734:	2010      	movs	r0, #16
 800c736:	f00c f879 	bl	801882c <UTIL_SEQ_PauseTask>
		UTIL_SEQ_PauseTask(1<<CFG_LOG_UV_ID);
 800c73a:	2020      	movs	r0, #32
 800c73c:	f00c f876 	bl	801882c <UTIL_SEQ_PauseTask>
		HW_TS_Stop(UV_TIMER_ID);
 800c740:	4b95      	ldr	r3, [pc, #596]	; (800c998 <Custom_STM_App_Notification+0x324>)
 800c742:	781b      	ldrb	r3, [r3, #0]
 800c744:	4618      	mov	r0, r3
 800c746:	f7fd fca3 	bl	800a090 <HW_TS_Stop>
		HW_TS_Start(TEMP_TIMER_ID,TEMP_UPDATE_PERIOD);
 800c74a:	4b94      	ldr	r3, [pc, #592]	; (800c99c <Custom_STM_App_Notification+0x328>)
 800c74c:	781b      	ldrb	r3, [r3, #0]
 800c74e:	4a94      	ldr	r2, [pc, #592]	; (800c9a0 <Custom_STM_App_Notification+0x32c>)
 800c750:	6812      	ldr	r2, [r2, #0]
 800c752:	4611      	mov	r1, r2
 800c754:	4618      	mov	r0, r3
 800c756:	f7fd fd1f 	bl	800a198 <HW_TS_Start>
		Send_Temp_Notification();
 800c75a:	f000 fad3 	bl	800cd04 <Send_Temp_Notification>
      /* USER CODE END CUSTOM_STM_IR_T_NOTIFY_ENABLED_EVT */
      break;
 800c75e:	e22d      	b.n	800cbbc <Custom_STM_App_Notification+0x548>

    case CUSTOM_STM_IR_T_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_IR_T_NOTIFY_DISABLED_EVT */
		HW_TS_Stop(TEMP_TIMER_ID);
 800c760:	4b8e      	ldr	r3, [pc, #568]	; (800c99c <Custom_STM_App_Notification+0x328>)
 800c762:	781b      	ldrb	r3, [r3, #0]
 800c764:	4618      	mov	r0, r3
 800c766:	f7fd fc93 	bl	800a090 <HW_TS_Stop>
		UTIL_SEQ_PauseTask(1<<CFG_TEMP_ID);
 800c76a:	2004      	movs	r0, #4
 800c76c:	f00c f85e 	bl	801882c <UTIL_SEQ_PauseTask>

		Temp_lower_limit=-21;
 800c770:	4b8c      	ldr	r3, [pc, #560]	; (800c9a4 <Custom_STM_App_Notification+0x330>)
 800c772:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800c776:	801a      	strh	r2, [r3, #0]
		Temp_upper_limit=86;
 800c778:	4b8b      	ldr	r3, [pc, #556]	; (800c9a8 <Custom_STM_App_Notification+0x334>)
 800c77a:	2256      	movs	r2, #86	; 0x56
 800c77c:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, Yellow_Led_Pin|Green_Led_Pin|Red_Led_Pin, GPIO_PIN_SET);
 800c77e:	2201      	movs	r2, #1
 800c780:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800c784:	4889      	ldr	r0, [pc, #548]	; (800c9ac <Custom_STM_App_Notification+0x338>)
 800c786:	f004 feed 	bl	8011564 <HAL_GPIO_WritePin>
		//HW_TS_Stop(TEMP_TIMER_ID);
      /* USER CODE END CUSTOM_STM_IR_T_NOTIFY_DISABLED_EVT */
      break;
 800c78a:	e217      	b.n	800cbbc <Custom_STM_App_Notification+0x548>

    case CUSTOM_STM_A_T_READ_EVT:
      /* USER CODE BEGIN CUSTOM_STM_A_T_READ_EVT */
		printf("\rAnalog_temp\n");
 800c78c:	4888      	ldr	r0, [pc, #544]	; (800c9b0 <Custom_STM_App_Notification+0x33c>)
 800c78e:	f00d f8a7 	bl	80198e0 <puts>
		Analog_Temp();
 800c792:	f000 fd5b 	bl	800d24c <Analog_Temp>
		UpdateCharData[0]=Dev_Temperature;
 800c796:	4b87      	ldr	r3, [pc, #540]	; (800c9b4 <Custom_STM_App_Notification+0x340>)
 800c798:	781a      	ldrb	r2, [r3, #0]
 800c79a:	4b7d      	ldr	r3, [pc, #500]	; (800c990 <Custom_STM_App_Notification+0x31c>)
 800c79c:	701a      	strb	r2, [r3, #0]
		Custom_STM_App_Update_Char(CUSTOM_STM_A_T, (uint8_t *)UpdateCharData);
 800c79e:	497c      	ldr	r1, [pc, #496]	; (800c990 <Custom_STM_App_Notification+0x31c>)
 800c7a0:	2002      	movs	r0, #2
 800c7a2:	f002 f803 	bl	800e7ac <Custom_STM_App_Update_Char>
      /* USER CODE END CUSTOM_STM_A_T_READ_EVT */
      break;
 800c7a6:	e209      	b.n	800cbbc <Custom_STM_App_Notification+0x548>
		//int8_t rx_data[2];
		//;
		//rx_data[1]=pNotification->DataTransfered.pPayload[0];
		//rx_data[0]=pNotification->DataTransfered.pPayload[1];
		//Desire_temp = rx_data[1]<<8 |rx_data[0];
		Desire_temp = pNotification->DataTransfered.pPayload[0]<<8 |pNotification->DataTransfered.pPayload[1];
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	685b      	ldr	r3, [r3, #4]
 800c7ac:	781b      	ldrb	r3, [r3, #0]
 800c7ae:	021b      	lsls	r3, r3, #8
 800c7b0:	b21a      	sxth	r2, r3
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	685b      	ldr	r3, [r3, #4]
 800c7b6:	3301      	adds	r3, #1
 800c7b8:	781b      	ldrb	r3, [r3, #0]
 800c7ba:	b21b      	sxth	r3, r3
 800c7bc:	4313      	orrs	r3, r2
 800c7be:	b21a      	sxth	r2, r3
 800c7c0:	4b7d      	ldr	r3, [pc, #500]	; (800c9b8 <Custom_STM_App_Notification+0x344>)
 800c7c2:	801a      	strh	r2, [r3, #0]
		Temp_upper_limit=Desire_temp+1;
 800c7c4:	4b7c      	ldr	r3, [pc, #496]	; (800c9b8 <Custom_STM_App_Notification+0x344>)
 800c7c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c7ca:	b29b      	uxth	r3, r3
 800c7cc:	3301      	adds	r3, #1
 800c7ce:	b29b      	uxth	r3, r3
 800c7d0:	b21a      	sxth	r2, r3
 800c7d2:	4b75      	ldr	r3, [pc, #468]	; (800c9a8 <Custom_STM_App_Notification+0x334>)
 800c7d4:	801a      	strh	r2, [r3, #0]
		Temp_lower_limit=Desire_temp-1;
 800c7d6:	4b78      	ldr	r3, [pc, #480]	; (800c9b8 <Custom_STM_App_Notification+0x344>)
 800c7d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c7dc:	b29b      	uxth	r3, r3
 800c7de:	3b01      	subs	r3, #1
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	b21a      	sxth	r2, r3
 800c7e4:	4b6f      	ldr	r3, [pc, #444]	; (800c9a4 <Custom_STM_App_Notification+0x330>)
 800c7e6:	801a      	strh	r2, [r3, #0]
//		rx_data[1]=pNotification->DataTransfered.pPayload[2];
//		rx_data[0]=pNotification->DataTransfered.pPayload[3];
//		STORE_16_BE(Temp_upper_limit,rx_data);
		printf("Desire_ temp %d, Temp_up:%d, Temp_low:%d\n",Desire_temp,Temp_upper_limit,Temp_lower_limit);
 800c7e8:	4b73      	ldr	r3, [pc, #460]	; (800c9b8 <Custom_STM_App_Notification+0x344>)
 800c7ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c7ee:	4619      	mov	r1, r3
 800c7f0:	4b6d      	ldr	r3, [pc, #436]	; (800c9a8 <Custom_STM_App_Notification+0x334>)
 800c7f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c7f6:	461a      	mov	r2, r3
 800c7f8:	4b6a      	ldr	r3, [pc, #424]	; (800c9a4 <Custom_STM_App_Notification+0x330>)
 800c7fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c7fe:	486f      	ldr	r0, [pc, #444]	; (800c9bc <Custom_STM_App_Notification+0x348>)
 800c800:	f00c ffe8 	bl	80197d4 <iprintf>
		if(mode==0x01)
 800c804:	4b6e      	ldr	r3, [pc, #440]	; (800c9c0 <Custom_STM_App_Notification+0x34c>)
 800c806:	781b      	ldrb	r3, [r3, #0]
 800c808:	2b01      	cmp	r3, #1
 800c80a:	f040 81d4 	bne.w	800cbb6 <Custom_STM_App_Notification+0x542>
			{
			Update_mode();
 800c80e:	f000 fff9 	bl	800d804 <Update_mode>
	    	  // HW_TS_Start(MODE_TIMER_ID,Ts_UPDATE_PERIOD);
	    	}
      /* USER CODE END CUSTOM_STM_S_T_WRITE_NO_RESP_EVT */
      break;
 800c812:	e1d0      	b.n	800cbb6 <Custom_STM_App_Notification+0x542>

    case CUSTOM_STM_L_T_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_L_T_NOTIFY_ENABLED_EVT */
		UTIL_SEQ_PauseTask(1<<CFG_TEMP_ID);
 800c814:	2004      	movs	r0, #4
 800c816:	f00c f809 	bl	801882c <UTIL_SEQ_PauseTask>
		UTIL_SEQ_PauseTask(1<<CFG_UV_ID);
 800c81a:	2008      	movs	r0, #8
 800c81c:	f00c f806 	bl	801882c <UTIL_SEQ_PauseTask>
		UTIL_SEQ_PauseTask(1<<CFG_LOG_UV_ID);
 800c820:	2020      	movs	r0, #32
 800c822:	f00c f803 	bl	801882c <UTIL_SEQ_PauseTask>
		HW_TS_Stop(UV_TIMER_ID);
 800c826:	4b5c      	ldr	r3, [pc, #368]	; (800c998 <Custom_STM_App_Notification+0x324>)
 800c828:	781b      	ldrb	r3, [r3, #0]
 800c82a:	4618      	mov	r0, r3
 800c82c:	f7fd fc30 	bl	800a090 <HW_TS_Stop>
		HW_TS_Stop(TEMP_TIMER_ID);
 800c830:	4b5a      	ldr	r3, [pc, #360]	; (800c99c <Custom_STM_App_Notification+0x328>)
 800c832:	781b      	ldrb	r3, [r3, #0]
 800c834:	4618      	mov	r0, r3
 800c836:	f7fd fc2b 	bl	800a090 <HW_TS_Stop>
		HW_TS_Start(TEMP_LOG_ID,LOG_UPDATE_PERIOD);
 800c83a:	4b62      	ldr	r3, [pc, #392]	; (800c9c4 <Custom_STM_App_Notification+0x350>)
 800c83c:	781b      	ldrb	r3, [r3, #0]
 800c83e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c842:	4618      	mov	r0, r3
 800c844:	f7fd fca8 	bl	800a198 <HW_TS_Start>
      /* USER CODE END CUSTOM_STM_L_T_NOTIFY_ENABLED_EVT */
      break;
 800c848:	e1b8      	b.n	800cbbc <Custom_STM_App_Notification+0x548>

    case CUSTOM_STM_L_T_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_L_T_NOTIFY_DISABLED_EVT */
		HW_TS_Stop(UV_TIMER_ID);
 800c84a:	4b53      	ldr	r3, [pc, #332]	; (800c998 <Custom_STM_App_Notification+0x324>)
 800c84c:	781b      	ldrb	r3, [r3, #0]
 800c84e:	4618      	mov	r0, r3
 800c850:	f7fd fc1e 	bl	800a090 <HW_TS_Stop>
		HW_TS_Stop(TEMP_TIMER_ID);
 800c854:	4b51      	ldr	r3, [pc, #324]	; (800c99c <Custom_STM_App_Notification+0x328>)
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	4618      	mov	r0, r3
 800c85a:	f7fd fc19 	bl	800a090 <HW_TS_Stop>
		HW_TS_Stop(TEMP_LOG_ID);
 800c85e:	4b59      	ldr	r3, [pc, #356]	; (800c9c4 <Custom_STM_App_Notification+0x350>)
 800c860:	781b      	ldrb	r3, [r3, #0]
 800c862:	4618      	mov	r0, r3
 800c864:	f7fd fc14 	bl	800a090 <HW_TS_Stop>
		UTIL_SEQ_PauseTask(1<<CFG_LOG_TEMP_ID);
 800c868:	2010      	movs	r0, #16
 800c86a:	f00b ffdf 	bl	801882c <UTIL_SEQ_PauseTask>
      /* USER CODE END CUSTOM_STM_L_T_NOTIFY_DISABLED_EVT */
      break;
 800c86e:	e1a5      	b.n	800cbbc <Custom_STM_App_Notification+0x548>
      break;

    /* UV_Sensor */
    case CUSTOM_STM_UV_V_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_UV_V_NOTIFY_ENABLED_EVT */
		UV_init();
 800c870:	f7fb fd3e 	bl	80082f0 <UV_init>
		printf("UV_NOTIFY_ENABLED\n");
 800c874:	4854      	ldr	r0, [pc, #336]	; (800c9c8 <Custom_STM_App_Notification+0x354>)
 800c876:	f00d f833 	bl	80198e0 <puts>
		UTIL_SEQ_PauseTask(1<<CFG_TEMP_ID);
 800c87a:	2004      	movs	r0, #4
 800c87c:	f00b ffd6 	bl	801882c <UTIL_SEQ_PauseTask>
		UTIL_SEQ_PauseTask(1<<CFG_LOG_TEMP_ID);
 800c880:	2010      	movs	r0, #16
 800c882:	f00b ffd3 	bl	801882c <UTIL_SEQ_PauseTask>
		UTIL_SEQ_PauseTask(1<<CFG_LOG_UV_ID);
 800c886:	2020      	movs	r0, #32
 800c888:	f00b ffd0 	bl	801882c <UTIL_SEQ_PauseTask>
		HW_TS_Stop(TEMP_TIMER_ID);
 800c88c:	4b43      	ldr	r3, [pc, #268]	; (800c99c <Custom_STM_App_Notification+0x328>)
 800c88e:	781b      	ldrb	r3, [r3, #0]
 800c890:	4618      	mov	r0, r3
 800c892:	f7fd fbfd 	bl	800a090 <HW_TS_Stop>

		HW_TS_Start(UV_TIMER_ID,UV_UPDATE_PERIOD);
 800c896:	4b40      	ldr	r3, [pc, #256]	; (800c998 <Custom_STM_App_Notification+0x324>)
 800c898:	781b      	ldrb	r3, [r3, #0]
 800c89a:	f641 0103 	movw	r1, #6147	; 0x1803
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f7fd fc7a 	bl	800a198 <HW_TS_Start>
		Send_UV_Notification();
 800c8a4:	f000 fc08 	bl	800d0b8 <Send_UV_Notification>
      /* USER CODE END CUSTOM_STM_UV_V_NOTIFY_ENABLED_EVT */
      break;
 800c8a8:	e188      	b.n	800cbbc <Custom_STM_App_Notification+0x548>

    case CUSTOM_STM_UV_V_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_UV_V_NOTIFY_DISABLED_EVT */
		printf("UV_NOTIFY_DISABLED\n");
 800c8aa:	4848      	ldr	r0, [pc, #288]	; (800c9cc <Custom_STM_App_Notification+0x358>)
 800c8ac:	f00d f818 	bl	80198e0 <puts>
		//HW_TS_Stop(TEMP_TIMER_ID);
		UTIL_SEQ_PauseTask(1<<CFG_UV_ID);
 800c8b0:	2008      	movs	r0, #8
 800c8b2:	f00b ffbb 	bl	801882c <UTIL_SEQ_PauseTask>
		HW_TS_Stop(UV_TIMER_ID);
 800c8b6:	4b38      	ldr	r3, [pc, #224]	; (800c998 <Custom_STM_App_Notification+0x324>)
 800c8b8:	781b      	ldrb	r3, [r3, #0]
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f7fd fbe8 	bl	800a090 <HW_TS_Stop>
		UV_init();
 800c8c0:	f7fb fd16 	bl	80082f0 <UV_init>
      /* USER CODE END CUSTOM_STM_UV_V_NOTIFY_DISABLED_EVT */
      break;
 800c8c4:	e17a      	b.n	800cbbc <Custom_STM_App_Notification+0x548>

    case CUSTOM_STM_UV_L_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_UV_L_NOTIFY_ENABLED_EVT */
		UTIL_SEQ_PauseTask(1<<CFG_TEMP_ID);
 800c8c6:	2004      	movs	r0, #4
 800c8c8:	f00b ffb0 	bl	801882c <UTIL_SEQ_PauseTask>
		UTIL_SEQ_PauseTask(1<<CFG_UV_ID);
 800c8cc:	2008      	movs	r0, #8
 800c8ce:	f00b ffad 	bl	801882c <UTIL_SEQ_PauseTask>
		UTIL_SEQ_PauseTask(1<<CFG_LOG_TEMP_ID);
 800c8d2:	2010      	movs	r0, #16
 800c8d4:	f00b ffaa 	bl	801882c <UTIL_SEQ_PauseTask>
		HW_TS_Stop(UV_TIMER_ID);
 800c8d8:	4b2f      	ldr	r3, [pc, #188]	; (800c998 <Custom_STM_App_Notification+0x324>)
 800c8da:	781b      	ldrb	r3, [r3, #0]
 800c8dc:	4618      	mov	r0, r3
 800c8de:	f7fd fbd7 	bl	800a090 <HW_TS_Stop>
		HW_TS_Stop(TEMP_TIMER_ID);
 800c8e2:	4b2e      	ldr	r3, [pc, #184]	; (800c99c <Custom_STM_App_Notification+0x328>)
 800c8e4:	781b      	ldrb	r3, [r3, #0]
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f7fd fbd2 	bl	800a090 <HW_TS_Stop>
		HW_TS_Start(UV_LOG_ID,LOG_UPDATE_PERIOD);
 800c8ec:	4b38      	ldr	r3, [pc, #224]	; (800c9d0 <Custom_STM_App_Notification+0x35c>)
 800c8ee:	781b      	ldrb	r3, [r3, #0]
 800c8f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f7fd fc4f 	bl	800a198 <HW_TS_Start>
      /* USER CODE END CUSTOM_STM_UV_L_NOTIFY_ENABLED_EVT */
      break;
 800c8fa:	e15f      	b.n	800cbbc <Custom_STM_App_Notification+0x548>

    case CUSTOM_STM_UV_L_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_UV_L_NOTIFY_DISABLED_EVT */

		UTIL_SEQ_PauseTask(1<<CFG_LOG_UV_ID);
 800c8fc:	2020      	movs	r0, #32
 800c8fe:	f00b ff95 	bl	801882c <UTIL_SEQ_PauseTask>
		HW_TS_Stop(UV_TIMER_ID);
 800c902:	4b25      	ldr	r3, [pc, #148]	; (800c998 <Custom_STM_App_Notification+0x324>)
 800c904:	781b      	ldrb	r3, [r3, #0]
 800c906:	4618      	mov	r0, r3
 800c908:	f7fd fbc2 	bl	800a090 <HW_TS_Stop>
		HW_TS_Stop(TEMP_TIMER_ID);
 800c90c:	4b23      	ldr	r3, [pc, #140]	; (800c99c <Custom_STM_App_Notification+0x328>)
 800c90e:	781b      	ldrb	r3, [r3, #0]
 800c910:	4618      	mov	r0, r3
 800c912:	f7fd fbbd 	bl	800a090 <HW_TS_Stop>
		HW_TS_Stop(UV_LOG_ID);
 800c916:	4b2e      	ldr	r3, [pc, #184]	; (800c9d0 <Custom_STM_App_Notification+0x35c>)
 800c918:	781b      	ldrb	r3, [r3, #0]
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7fd fbb8 	bl	800a090 <HW_TS_Stop>
      /* USER CODE END CUSTOM_STM_UV_L_NOTIFY_DISABLED_EVT */
      break;
 800c920:	e14c      	b.n	800cbbc <Custom_STM_App_Notification+0x548>

    case CUSTOM_STM_OTA_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_OTA_WRITE_NO_RESP_EVT */
		*(uint32_t*)SRAM1_BASE = *(uint32_t*)pNotification->DataTransfered.pPayload;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	685b      	ldr	r3, [r3, #4]
 800c926:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	6013      	str	r3, [r2, #0]
		printf("Reset\n");
 800c92e:	4829      	ldr	r0, [pc, #164]	; (800c9d4 <Custom_STM_App_Notification+0x360>)
 800c930:	f00c ffd6 	bl	80198e0 <puts>
		NVIC_SystemReset();
 800c934:	f7ff fe88 	bl	800c648 <__NVIC_SystemReset>
      /* USER CODE END CUSTOM_STM_OTA_WRITE_NO_RESP_EVT */
      break;

    case CUSTOM_STM_AMBI_TEMP_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_AMBI_TEMP_NOTIFY_ENABLED_EVT */
		Send_Temp_Notification();
 800c938:	f000 f9e4 	bl	800cd04 <Send_Temp_Notification>
		Custom_STM_App_Update_Char(CUSTOM_STM_AMBI_TEMP, (uint8_t *)AT);
 800c93c:	4926      	ldr	r1, [pc, #152]	; (800c9d8 <Custom_STM_App_Notification+0x364>)
 800c93e:	2009      	movs	r0, #9
 800c940:	f001 ff34 	bl	800e7ac <Custom_STM_App_Update_Char>
      /* USER CODE END CUSTOM_STM_AMBI_TEMP_NOTIFY_ENABLED_EVT */
      break;
 800c944:	e13a      	b.n	800cbbc <Custom_STM_App_Notification+0x548>
      /* USER CODE END CUSTOM_STM_AMBI_TEMP_NOTIFY_DISABLED_EVT */
      break;

    case CUSTOM_STM_T_INT_READ_EVT:
      /* USER CODE BEGIN CUSTOM_STM_T_INT_READ_EVT */
    	Custom_STM_App_Update_Char(CUSTOM_STM_IR_T, (uint8_t *)Interval);
 800c946:	4b25      	ldr	r3, [pc, #148]	; (800c9dc <Custom_STM_App_Notification+0x368>)
 800c948:	781b      	ldrb	r3, [r3, #0]
 800c94a:	4619      	mov	r1, r3
 800c94c:	2001      	movs	r0, #1
 800c94e:	f001 ff2d 	bl	800e7ac <Custom_STM_App_Update_Char>
      /* USER CODE END CUSTOM_STM_T_INT_READ_EVT */
      break;
 800c952:	e133      	b.n	800cbbc <Custom_STM_App_Notification+0x548>

    case CUSTOM_STM_T_INT_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_T_INT_WRITE_NO_RESP_EVT */
    	Interval=pNotification->DataTransfered.pPayload[0];
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	685b      	ldr	r3, [r3, #4]
 800c958:	781a      	ldrb	r2, [r3, #0]
 800c95a:	4b20      	ldr	r3, [pc, #128]	; (800c9dc <Custom_STM_App_Notification+0x368>)
 800c95c:	701a      	strb	r2, [r3, #0]
    	if(mode==0x01)
 800c95e:	4b18      	ldr	r3, [pc, #96]	; (800c9c0 <Custom_STM_App_Notification+0x34c>)
 800c960:	781b      	ldrb	r3, [r3, #0]
 800c962:	2b01      	cmp	r3, #1
 800c964:	d101      	bne.n	800c96a <Custom_STM_App_Notification+0x2f6>
    	    	{
    				Update_mode();
 800c966:	f000 ff4d 	bl	800d804 <Update_mode>

    	    	}
    	TEMP_UPDATE_PERIOD = (uint32_t)(Interval*1000*1000/CFG_TS_TICK_VAL);
 800c96a:	4b1c      	ldr	r3, [pc, #112]	; (800c9dc <Custom_STM_App_Notification+0x368>)
 800c96c:	781b      	ldrb	r3, [r3, #0]
 800c96e:	461a      	mov	r2, r3
 800c970:	4b1b      	ldr	r3, [pc, #108]	; (800c9e0 <Custom_STM_App_Notification+0x36c>)
 800c972:	fb02 f303 	mul.w	r3, r2, r3
 800c976:	461a      	mov	r2, r3
 800c978:	4b1a      	ldr	r3, [pc, #104]	; (800c9e4 <Custom_STM_App_Notification+0x370>)
 800c97a:	fba3 2302 	umull	r2, r3, r3, r2
 800c97e:	09db      	lsrs	r3, r3, #7
 800c980:	4a07      	ldr	r2, [pc, #28]	; (800c9a0 <Custom_STM_App_Notification+0x32c>)
 800c982:	6013      	str	r3, [r2, #0]

      /* USER CODE END CUSTOM_STM_T_INT_WRITE_NO_RESP_EVT */
      break;
 800c984:	e11a      	b.n	800cbbc <Custom_STM_App_Notification+0x548>
 800c986:	bf00      	nop
 800c988:	0801d888 	.word	0x0801d888
 800c98c:	200008d4 	.word	0x200008d4
 800c990:	200006a8 	.word	0x200006a8
 800c994:	0801d898 	.word	0x0801d898
 800c998:	200008d7 	.word	0x200008d7
 800c99c:	200008d6 	.word	0x200008d6
 800c9a0:	20000898 	.word	0x20000898
 800c9a4:	20000046 	.word	0x20000046
 800c9a8:	20000048 	.word	0x20000048
 800c9ac:	48000c00 	.word	0x48000c00
 800c9b0:	0801d8ac 	.word	0x0801d8ac
 800c9b4:	200008d5 	.word	0x200008d5
 800c9b8:	2000004a 	.word	0x2000004a
 800c9bc:	0801d8bc 	.word	0x0801d8bc
 800c9c0:	200008a8 	.word	0x200008a8
 800c9c4:	200008d8 	.word	0x200008d8
 800c9c8:	0801d8e8 	.word	0x0801d8e8
 800c9cc:	0801d8fc 	.word	0x0801d8fc
 800c9d0:	200008d9 	.word	0x200008d9
 800c9d4:	0801d910 	.word	0x0801d910
 800c9d8:	200008a4 	.word	0x200008a4
 800c9dc:	20000045 	.word	0x20000045
 800c9e0:	000f4240 	.word	0x000f4240
 800c9e4:	4325c53f 	.word	0x4325c53f

    /* Utility */
    case CUSTOM_STM_ACCLX_READ_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ACCLX_READ_EVT */
		AccelRead();
 800c9e8:	f7fb fb8e 	bl	8008108 <AccelRead>
		STORE_BE_16(UpdateCharData,output.AccelX);
 800c9ec:	4b75      	ldr	r3, [pc, #468]	; (800cbc4 <Custom_STM_App_Notification+0x550>)
 800c9ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c9f2:	b2da      	uxtb	r2, r3
 800c9f4:	4b74      	ldr	r3, [pc, #464]	; (800cbc8 <Custom_STM_App_Notification+0x554>)
 800c9f6:	705a      	strb	r2, [r3, #1]
 800c9f8:	4b72      	ldr	r3, [pc, #456]	; (800cbc4 <Custom_STM_App_Notification+0x550>)
 800c9fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c9fe:	121b      	asrs	r3, r3, #8
 800ca00:	b21b      	sxth	r3, r3
 800ca02:	b2da      	uxtb	r2, r3
 800ca04:	4b70      	ldr	r3, [pc, #448]	; (800cbc8 <Custom_STM_App_Notification+0x554>)
 800ca06:	701a      	strb	r2, [r3, #0]
		STORE_BE_16(UpdateCharData+2,output.AccelY);
 800ca08:	4b6e      	ldr	r3, [pc, #440]	; (800cbc4 <Custom_STM_App_Notification+0x550>)
 800ca0a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ca0e:	b2da      	uxtb	r2, r3
 800ca10:	4b6d      	ldr	r3, [pc, #436]	; (800cbc8 <Custom_STM_App_Notification+0x554>)
 800ca12:	70da      	strb	r2, [r3, #3]
 800ca14:	4b6b      	ldr	r3, [pc, #428]	; (800cbc4 <Custom_STM_App_Notification+0x550>)
 800ca16:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ca1a:	121b      	asrs	r3, r3, #8
 800ca1c:	b21b      	sxth	r3, r3
 800ca1e:	b2da      	uxtb	r2, r3
 800ca20:	4b69      	ldr	r3, [pc, #420]	; (800cbc8 <Custom_STM_App_Notification+0x554>)
 800ca22:	709a      	strb	r2, [r3, #2]
		STORE_BE_16(UpdateCharData+4,output.AccelZ);
 800ca24:	4b67      	ldr	r3, [pc, #412]	; (800cbc4 <Custom_STM_App_Notification+0x550>)
 800ca26:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ca2a:	b2da      	uxtb	r2, r3
 800ca2c:	4b66      	ldr	r3, [pc, #408]	; (800cbc8 <Custom_STM_App_Notification+0x554>)
 800ca2e:	715a      	strb	r2, [r3, #5]
 800ca30:	4b64      	ldr	r3, [pc, #400]	; (800cbc4 <Custom_STM_App_Notification+0x550>)
 800ca32:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ca36:	121b      	asrs	r3, r3, #8
 800ca38:	b21b      	sxth	r3, r3
 800ca3a:	b2da      	uxtb	r2, r3
 800ca3c:	4b62      	ldr	r3, [pc, #392]	; (800cbc8 <Custom_STM_App_Notification+0x554>)
 800ca3e:	711a      	strb	r2, [r3, #4]
		printf("ACClex %d %d %d %d %d %d\n",UpdateCharData[0],UpdateCharData[1],UpdateCharData[2],UpdateCharData[3],UpdateCharData[4],UpdateCharData[5],UpdateCharData[6]);
 800ca40:	4b61      	ldr	r3, [pc, #388]	; (800cbc8 <Custom_STM_App_Notification+0x554>)
 800ca42:	781b      	ldrb	r3, [r3, #0]
 800ca44:	461c      	mov	r4, r3
 800ca46:	4b60      	ldr	r3, [pc, #384]	; (800cbc8 <Custom_STM_App_Notification+0x554>)
 800ca48:	785b      	ldrb	r3, [r3, #1]
 800ca4a:	461d      	mov	r5, r3
 800ca4c:	4b5e      	ldr	r3, [pc, #376]	; (800cbc8 <Custom_STM_App_Notification+0x554>)
 800ca4e:	789b      	ldrb	r3, [r3, #2]
 800ca50:	461e      	mov	r6, r3
 800ca52:	4b5d      	ldr	r3, [pc, #372]	; (800cbc8 <Custom_STM_App_Notification+0x554>)
 800ca54:	78db      	ldrb	r3, [r3, #3]
 800ca56:	461a      	mov	r2, r3
 800ca58:	4b5b      	ldr	r3, [pc, #364]	; (800cbc8 <Custom_STM_App_Notification+0x554>)
 800ca5a:	791b      	ldrb	r3, [r3, #4]
 800ca5c:	4619      	mov	r1, r3
 800ca5e:	4b5a      	ldr	r3, [pc, #360]	; (800cbc8 <Custom_STM_App_Notification+0x554>)
 800ca60:	795b      	ldrb	r3, [r3, #5]
 800ca62:	4618      	mov	r0, r3
 800ca64:	4b58      	ldr	r3, [pc, #352]	; (800cbc8 <Custom_STM_App_Notification+0x554>)
 800ca66:	799b      	ldrb	r3, [r3, #6]
 800ca68:	9303      	str	r3, [sp, #12]
 800ca6a:	9002      	str	r0, [sp, #8]
 800ca6c:	9101      	str	r1, [sp, #4]
 800ca6e:	9200      	str	r2, [sp, #0]
 800ca70:	4633      	mov	r3, r6
 800ca72:	462a      	mov	r2, r5
 800ca74:	4621      	mov	r1, r4
 800ca76:	4855      	ldr	r0, [pc, #340]	; (800cbcc <Custom_STM_App_Notification+0x558>)
 800ca78:	f00c feac 	bl	80197d4 <iprintf>
		uint8_t status=Custom_STM_App_Update_Char(CUSTOM_STM_ACCLX, (uint8_t *)UpdateCharData);
 800ca7c:	4952      	ldr	r1, [pc, #328]	; (800cbc8 <Custom_STM_App_Notification+0x554>)
 800ca7e:	200b      	movs	r0, #11
 800ca80:	f001 fe94 	bl	800e7ac <Custom_STM_App_Update_Char>
 800ca84:	4603      	mov	r3, r0
 800ca86:	73bb      	strb	r3, [r7, #14]
		printf("status %d \n",status);
 800ca88:	7bbb      	ldrb	r3, [r7, #14]
 800ca8a:	4619      	mov	r1, r3
 800ca8c:	4850      	ldr	r0, [pc, #320]	; (800cbd0 <Custom_STM_App_Notification+0x55c>)
 800ca8e:	f00c fea1 	bl	80197d4 <iprintf>
      /* USER CODE END CUSTOM_STM_ACCLX_READ_EVT */
      break;
 800ca92:	e093      	b.n	800cbbc <Custom_STM_App_Notification+0x548>

    case CUSTOM_STM_TD_READ_EVT:
      /* USER CODE BEGIN CUSTOM_STM_TD_READ_EVT */
		Date_Time();
 800ca94:	f000 fa3a 	bl	800cf0c <Date_Time>
		Custom_STM_App_Update_Char(CUSTOM_STM_TD, (uint8_t *)Time);
 800ca98:	494e      	ldr	r1, [pc, #312]	; (800cbd4 <Custom_STM_App_Notification+0x560>)
 800ca9a:	200c      	movs	r0, #12
 800ca9c:	f001 fe86 	bl	800e7ac <Custom_STM_App_Update_Char>
      /* USER CODE END CUSTOM_STM_TD_READ_EVT */
      break;
 800caa0:	e08c      	b.n	800cbbc <Custom_STM_App_Notification+0x548>

    case CUSTOM_STM_TD_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_TD_WRITE_NO_RESP_EVT */
		sTime.Hours=pNotification->DataTransfered.pPayload[0];
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	685b      	ldr	r3, [r3, #4]
 800caa6:	781a      	ldrb	r2, [r3, #0]
 800caa8:	4b4b      	ldr	r3, [pc, #300]	; (800cbd8 <Custom_STM_App_Notification+0x564>)
 800caaa:	701a      	strb	r2, [r3, #0]
		sTime.Minutes=pNotification->DataTransfered.pPayload[1];
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	685b      	ldr	r3, [r3, #4]
 800cab0:	785a      	ldrb	r2, [r3, #1]
 800cab2:	4b49      	ldr	r3, [pc, #292]	; (800cbd8 <Custom_STM_App_Notification+0x564>)
 800cab4:	705a      	strb	r2, [r3, #1]
		sTime.Seconds=pNotification->DataTransfered.pPayload[2];
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	685b      	ldr	r3, [r3, #4]
 800caba:	789a      	ldrb	r2, [r3, #2]
 800cabc:	4b46      	ldr	r3, [pc, #280]	; (800cbd8 <Custom_STM_App_Notification+0x564>)
 800cabe:	709a      	strb	r2, [r3, #2]
		sTime.SecondFraction=0;
 800cac0:	4b45      	ldr	r3, [pc, #276]	; (800cbd8 <Custom_STM_App_Notification+0x564>)
 800cac2:	2200      	movs	r2, #0
 800cac4:	609a      	str	r2, [r3, #8]
		sTime.SubSeconds = 0x0;
 800cac6:	4b44      	ldr	r3, [pc, #272]	; (800cbd8 <Custom_STM_App_Notification+0x564>)
 800cac8:	2200      	movs	r2, #0
 800caca:	605a      	str	r2, [r3, #4]
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800cacc:	4b42      	ldr	r3, [pc, #264]	; (800cbd8 <Custom_STM_App_Notification+0x564>)
 800cace:	2200      	movs	r2, #0
 800cad0:	60da      	str	r2, [r3, #12]
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800cad2:	4b41      	ldr	r3, [pc, #260]	; (800cbd8 <Custom_STM_App_Notification+0x564>)
 800cad4:	2200      	movs	r2, #0
 800cad6:	611a      	str	r2, [r3, #16]
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800cad8:	2200      	movs	r2, #0
 800cada:	493f      	ldr	r1, [pc, #252]	; (800cbd8 <Custom_STM_App_Notification+0x564>)
 800cadc:	483f      	ldr	r0, [pc, #252]	; (800cbdc <Custom_STM_App_Notification+0x568>)
 800cade:	f008 f949 	bl	8014d74 <HAL_RTC_SetTime>
 800cae2:	4603      	mov	r3, r0
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d001      	beq.n	800caec <Custom_STM_App_Notification+0x478>
		{
			Error_Handler();
 800cae8:	f7fd fe60 	bl	800a7ac <Error_Handler>
		}
		sDate.WeekDay = pNotification->DataTransfered.pPayload[3];
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	78da      	ldrb	r2, [r3, #3]
 800caf2:	4b3b      	ldr	r3, [pc, #236]	; (800cbe0 <Custom_STM_App_Notification+0x56c>)
 800caf4:	701a      	strb	r2, [r3, #0]
		sDate.Month = pNotification->DataTransfered.pPayload[4];
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	685b      	ldr	r3, [r3, #4]
 800cafa:	791a      	ldrb	r2, [r3, #4]
 800cafc:	4b38      	ldr	r3, [pc, #224]	; (800cbe0 <Custom_STM_App_Notification+0x56c>)
 800cafe:	705a      	strb	r2, [r3, #1]
		sDate.Date = pNotification->DataTransfered.pPayload[5];
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	685b      	ldr	r3, [r3, #4]
 800cb04:	795a      	ldrb	r2, [r3, #5]
 800cb06:	4b36      	ldr	r3, [pc, #216]	; (800cbe0 <Custom_STM_App_Notification+0x56c>)
 800cb08:	709a      	strb	r2, [r3, #2]
		sDate.Year = pNotification->DataTransfered.pPayload[6];  //(1980+20) + value(0-79)
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	799a      	ldrb	r2, [r3, #6]
 800cb10:	4b33      	ldr	r3, [pc, #204]	; (800cbe0 <Custom_STM_App_Notification+0x56c>)
 800cb12:	70da      	strb	r2, [r3, #3]
		for(uint8_t i=0;i<pNotification->DataTransfered.Length;i++){
 800cb14:	2300      	movs	r3, #0
 800cb16:	73fb      	strb	r3, [r7, #15]
 800cb18:	e00c      	b.n	800cb34 <Custom_STM_App_Notification+0x4c0>
			printf("Input_time[%d]:%d\n",i,pNotification->DataTransfered.pPayload[i]);
 800cb1a:	7bf9      	ldrb	r1, [r7, #15]
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	685a      	ldr	r2, [r3, #4]
 800cb20:	7bfb      	ldrb	r3, [r7, #15]
 800cb22:	4413      	add	r3, r2
 800cb24:	781b      	ldrb	r3, [r3, #0]
 800cb26:	461a      	mov	r2, r3
 800cb28:	482e      	ldr	r0, [pc, #184]	; (800cbe4 <Custom_STM_App_Notification+0x570>)
 800cb2a:	f00c fe53 	bl	80197d4 <iprintf>
		for(uint8_t i=0;i<pNotification->DataTransfered.Length;i++){
 800cb2e:	7bfb      	ldrb	r3, [r7, #15]
 800cb30:	3301      	adds	r3, #1
 800cb32:	73fb      	strb	r3, [r7, #15]
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	7a1b      	ldrb	r3, [r3, #8]
 800cb38:	7bfa      	ldrb	r2, [r7, #15]
 800cb3a:	429a      	cmp	r2, r3
 800cb3c:	d3ed      	bcc.n	800cb1a <Custom_STM_App_Notification+0x4a6>
		}
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800cb3e:	2200      	movs	r2, #0
 800cb40:	4927      	ldr	r1, [pc, #156]	; (800cbe0 <Custom_STM_App_Notification+0x56c>)
 800cb42:	4826      	ldr	r0, [pc, #152]	; (800cbdc <Custom_STM_App_Notification+0x568>)
 800cb44:	f008 fa36 	bl	8014fb4 <HAL_RTC_SetDate>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d035      	beq.n	800cbba <Custom_STM_App_Notification+0x546>
		{
			Error_Handler();
 800cb4e:	f7fd fe2d 	bl	800a7ac <Error_Handler>
		}
      /* USER CODE END CUSTOM_STM_TD_WRITE_NO_RESP_EVT */
      break;
 800cb52:	e032      	b.n	800cbba <Custom_STM_App_Notification+0x546>

    case CUSTOM_STM_EC_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_EC_NOTIFY_ENABLED_EVT */
		Custom_STM_App_Update_Char(CUSTOM_STM_EC,&EOC_v);
 800cb54:	4924      	ldr	r1, [pc, #144]	; (800cbe8 <Custom_STM_App_Notification+0x574>)
 800cb56:	200d      	movs	r0, #13
 800cb58:	f001 fe28 	bl	800e7ac <Custom_STM_App_Update_Char>
      /* USER CODE END CUSTOM_STM_EC_NOTIFY_ENABLED_EVT */
      break;
 800cb5c:	e02e      	b.n	800cbbc <Custom_STM_App_Notification+0x548>
      /* USER CODE END CUSTOM_STM_EC_NOTIFY_DISABLED_EVT */
      break;

    case CUSTOM_STM_PWR_GD_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_PWR_GD_NOTIFY_ENABLED_EVT */
		Custom_STM_App_Update_Char(CUSTOM_STM_PWR_GD,&PWR_GD);
 800cb5e:	4923      	ldr	r1, [pc, #140]	; (800cbec <Custom_STM_App_Notification+0x578>)
 800cb60:	200e      	movs	r0, #14
 800cb62:	f001 fe23 	bl	800e7ac <Custom_STM_App_Update_Char>
      /* USER CODE END CUSTOM_STM_PWR_GD_NOTIFY_ENABLED_EVT */
      break;
 800cb66:	e029      	b.n	800cbbc <Custom_STM_App_Notification+0x548>
      /* USER CODE END CUSTOM_STM_PWR_GD_NOTIFY_DISABLED_EVT */
      break;

    case CUSTOM_STM_SOFTWARE_REVISION_STRING_READ_EVT:
      /* USER CODE BEGIN CUSTOM_STM_SOFTWARE_REVISION_STRING_READ_EVT */
		puts(Firmware);
 800cb68:	4821      	ldr	r0, [pc, #132]	; (800cbf0 <Custom_STM_App_Notification+0x57c>)
 800cb6a:	f00c feb9 	bl	80198e0 <puts>
		Custom_STM_App_Update_Char(CUSTOM_STM_SOFTWARE_REVISION_STRING,(uint8_t*)&Firmware);
 800cb6e:	4920      	ldr	r1, [pc, #128]	; (800cbf0 <Custom_STM_App_Notification+0x57c>)
 800cb70:	200f      	movs	r0, #15
 800cb72:	f001 fe1b 	bl	800e7ac <Custom_STM_App_Update_Char>
      /* USER CODE END CUSTOM_STM_SOFTWARE_REVISION_STRING_READ_EVT */
      break;
 800cb76:	e021      	b.n	800cbbc <Custom_STM_App_Notification+0x548>

    /* OperationMode */
    case CUSTOM_STM_MD_READ_EVT:
      /* USER CODE BEGIN CUSTOM_STM_MD_READ_EVT */

    	Custom_STM_App_Update_Char(CUSTOM_STM_MD, &mode);
 800cb78:	491e      	ldr	r1, [pc, #120]	; (800cbf4 <Custom_STM_App_Notification+0x580>)
 800cb7a:	2010      	movs	r0, #16
 800cb7c:	f001 fe16 	bl	800e7ac <Custom_STM_App_Update_Char>

      /* USER CODE END CUSTOM_STM_MD_READ_EVT */
      break;
 800cb80:	e01c      	b.n	800cbbc <Custom_STM_App_Notification+0x548>

    case CUSTOM_STM_MD_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_MD_WRITE_NO_RESP_EVT */
    	mode=pNotification->DataTransfered.pPayload[0];
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	685b      	ldr	r3, [r3, #4]
 800cb86:	781a      	ldrb	r2, [r3, #0]
 800cb88:	4b1a      	ldr	r3, [pc, #104]	; (800cbf4 <Custom_STM_App_Notification+0x580>)
 800cb8a:	701a      	strb	r2, [r3, #0]
    	if(mode==0x01)
 800cb8c:	4b19      	ldr	r3, [pc, #100]	; (800cbf4 <Custom_STM_App_Notification+0x580>)
 800cb8e:	781b      	ldrb	r3, [r3, #0]
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d108      	bne.n	800cba6 <Custom_STM_App_Notification+0x532>
    	{
    		Update_mode();
 800cb94:	f000 fe36 	bl	800d804 <Update_mode>
    		printf("mode %d\n",mode);
 800cb98:	4b16      	ldr	r3, [pc, #88]	; (800cbf4 <Custom_STM_App_Notification+0x580>)
 800cb9a:	781b      	ldrb	r3, [r3, #0]
 800cb9c:	4619      	mov	r1, r3
 800cb9e:	4816      	ldr	r0, [pc, #88]	; (800cbf8 <Custom_STM_App_Notification+0x584>)
 800cba0:	f00c fe18 	bl	80197d4 <iprintf>
    		Update_mode();
//    		HW_TS_Stop(TEMP_TIMER_ID);
//    		HW_TS_Start(MODE_TIMER_ID,Ts_UPDATE_PERIOD);
    	}
      /* USER CODE END CUSTOM_STM_MD_WRITE_NO_RESP_EVT */
      break;
 800cba4:	e00a      	b.n	800cbbc <Custom_STM_App_Notification+0x548>
    		mode=0;
 800cba6:	4b13      	ldr	r3, [pc, #76]	; (800cbf4 <Custom_STM_App_Notification+0x580>)
 800cba8:	2200      	movs	r2, #0
 800cbaa:	701a      	strb	r2, [r3, #0]
    		Update_mode();
 800cbac:	f000 fe2a 	bl	800d804 <Update_mode>
      break;
 800cbb0:	e004      	b.n	800cbbc <Custom_STM_App_Notification+0x548>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800cbb2:	bf00      	nop
 800cbb4:	e002      	b.n	800cbbc <Custom_STM_App_Notification+0x548>
      break;
 800cbb6:	bf00      	nop
 800cbb8:	e000      	b.n	800cbbc <Custom_STM_App_Notification+0x548>
      break;
 800cbba:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800cbbc:	bf00      	nop
}
 800cbbe:	3714      	adds	r7, #20
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbc4:	200002d0 	.word	0x200002d0
 800cbc8:	200006a8 	.word	0x200006a8
 800cbcc:	0801d918 	.word	0x0801d918
 800cbd0:	0801d934 	.word	0x0801d934
 800cbd4:	200008b4 	.word	0x200008b4
 800cbd8:	200008bc 	.word	0x200008bc
 800cbdc:	2000055c 	.word	0x2000055c
 800cbe0:	200008d0 	.word	0x200008d0
 800cbe4:	0801d940 	.word	0x0801d940
 800cbe8:	200004e9 	.word	0x200004e9
 800cbec:	200004e8 	.word	0x200004e8
 800cbf0:	20000054 	.word	0x20000054
 800cbf4:	200008a8 	.word	0x200008a8
 800cbf8:	0801d954 	.word	0x0801d954

0800cbfc <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b082      	sub	sp, #8
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	781b      	ldrb	r3, [r3, #0]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d017      	beq.n	800cc3c <Custom_APP_Notification+0x40>
 800cc0c:	2b01      	cmp	r3, #1
 800cc0e:	d000      	beq.n	800cc12 <Custom_APP_Notification+0x16>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800cc10:	e015      	b.n	800cc3e <Custom_APP_Notification+0x42>
		HW_TS_Stop(UV_TIMER_ID);
 800cc12:	4b0d      	ldr	r3, [pc, #52]	; (800cc48 <Custom_APP_Notification+0x4c>)
 800cc14:	781b      	ldrb	r3, [r3, #0]
 800cc16:	4618      	mov	r0, r3
 800cc18:	f7fd fa3a 	bl	800a090 <HW_TS_Stop>
		HW_TS_Stop(TEMP_TIMER_ID);
 800cc1c:	4b0b      	ldr	r3, [pc, #44]	; (800cc4c <Custom_APP_Notification+0x50>)
 800cc1e:	781b      	ldrb	r3, [r3, #0]
 800cc20:	4618      	mov	r0, r3
 800cc22:	f7fd fa35 	bl	800a090 <HW_TS_Stop>
		HW_TS_Stop(UV_LOG_ID);
 800cc26:	4b0a      	ldr	r3, [pc, #40]	; (800cc50 <Custom_APP_Notification+0x54>)
 800cc28:	781b      	ldrb	r3, [r3, #0]
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f7fd fa30 	bl	800a090 <HW_TS_Stop>
		HW_TS_Stop(TEMP_LOG_ID);
 800cc30:	4b08      	ldr	r3, [pc, #32]	; (800cc54 <Custom_APP_Notification+0x58>)
 800cc32:	781b      	ldrb	r3, [r3, #0]
 800cc34:	4618      	mov	r0, r3
 800cc36:	f7fd fa2b 	bl	800a090 <HW_TS_Stop>
      break;
 800cc3a:	e000      	b.n	800cc3e <Custom_APP_Notification+0x42>
      break;
 800cc3c:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800cc3e:	bf00      	nop
}
 800cc40:	3708      	adds	r7, #8
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}
 800cc46:	bf00      	nop
 800cc48:	200008d7 	.word	0x200008d7
 800cc4c:	200008d6 	.word	0x200008d6
 800cc50:	200008d9 	.word	0x200008d9
 800cc54:	200008d8 	.word	0x200008d8

0800cc58 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	//HAL_GPIO_WritePin(GPIOD, Red_Led_Pin, GPIO_PIN_RESET);
	//printf("Wine_temp_board\n");
	TEMP_UPDATE_PERIOD = (uint32_t)(Interval*1000*1000/CFG_TS_TICK_VAL);
 800cc5c:	4b20      	ldr	r3, [pc, #128]	; (800cce0 <Custom_APP_Init+0x88>)
 800cc5e:	781b      	ldrb	r3, [r3, #0]
 800cc60:	461a      	mov	r2, r3
 800cc62:	4b20      	ldr	r3, [pc, #128]	; (800cce4 <Custom_APP_Init+0x8c>)
 800cc64:	fb02 f303 	mul.w	r3, r2, r3
 800cc68:	461a      	mov	r2, r3
 800cc6a:	4b1f      	ldr	r3, [pc, #124]	; (800cce8 <Custom_APP_Init+0x90>)
 800cc6c:	fba3 2302 	umull	r2, r3, r3, r2
 800cc70:	09db      	lsrs	r3, r3, #7
 800cc72:	4a1e      	ldr	r2, [pc, #120]	; (800ccec <Custom_APP_Init+0x94>)
 800cc74:	6013      	str	r3, [r2, #0]
	Init_mode();
 800cc76:	f000 fd71 	bl	800d75c <Init_mode>
	TEMP_UPDATE_PERIOD = (uint32_t)(Interval*1000*1000/CFG_TS_TICK_VAL);
 800cc7a:	4b19      	ldr	r3, [pc, #100]	; (800cce0 <Custom_APP_Init+0x88>)
 800cc7c:	781b      	ldrb	r3, [r3, #0]
 800cc7e:	461a      	mov	r2, r3
 800cc80:	4b18      	ldr	r3, [pc, #96]	; (800cce4 <Custom_APP_Init+0x8c>)
 800cc82:	fb02 f303 	mul.w	r3, r2, r3
 800cc86:	461a      	mov	r2, r3
 800cc88:	4b17      	ldr	r3, [pc, #92]	; (800cce8 <Custom_APP_Init+0x90>)
 800cc8a:	fba3 2302 	umull	r2, r3, r3, r2
 800cc8e:	09db      	lsrs	r3, r3, #7
 800cc90:	4a16      	ldr	r2, [pc, #88]	; (800ccec <Custom_APP_Init+0x94>)
 800cc92:	6013      	str	r3, [r2, #0]
	//Update_mode_task();
	UV_init();
 800cc94:	f7fb fb2c 	bl	80082f0 <UV_init>
	TEMP_APP_Init();
 800cc98:	f000 f996 	bl	800cfc8 <TEMP_APP_Init>
	UV_APP_Init();
 800cc9c:	f000 fa4e 	bl	800d13c <UV_APP_Init>
	Log_Tx_Init();
 800cca0:	f000 fc36 	bl	800d510 <Log_Tx_Init>
	PWR_EOC();
 800cca4:	f000 fd3c 	bl	800d720 <PWR_EOC>
	TS_Toggle();
 800cca8:	f000 fcf0 	bl	800d68c <TS_Toggle>
	puts(Firmware);
 800ccac:	4810      	ldr	r0, [pc, #64]	; (800ccf0 <Custom_APP_Init+0x98>)
 800ccae:	f00c fe17 	bl	80198e0 <puts>
	printf("\r\n");
 800ccb2:	4810      	ldr	r0, [pc, #64]	; (800ccf4 <Custom_APP_Init+0x9c>)
 800ccb4:	f00c fe14 	bl	80198e0 <puts>
	Analog_Temp();
 800ccb8:	f000 fac8 	bl	800d24c <Analog_Temp>
	if(mode==0x01)
 800ccbc:	4b0e      	ldr	r3, [pc, #56]	; (800ccf8 <Custom_APP_Init+0xa0>)
 800ccbe:	781b      	ldrb	r3, [r3, #0]
 800ccc0:	2b01      	cmp	r3, #1
 800ccc2:	d10a      	bne.n	800ccda <Custom_APP_Init+0x82>
		{
			HW_TS_Start(TEMP_TIMER_ID,TEMP_UPDATE_PERIOD);
 800ccc4:	4b0d      	ldr	r3, [pc, #52]	; (800ccfc <Custom_APP_Init+0xa4>)
 800ccc6:	781b      	ldrb	r3, [r3, #0]
 800ccc8:	4a08      	ldr	r2, [pc, #32]	; (800ccec <Custom_APP_Init+0x94>)
 800ccca:	6812      	ldr	r2, [r2, #0]
 800cccc:	4611      	mov	r1, r2
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f7fd fa62 	bl	800a198 <HW_TS_Start>
			printf("\Auto reload\n");
 800ccd4:	480a      	ldr	r0, [pc, #40]	; (800cd00 <Custom_APP_Init+0xa8>)
 800ccd6:	f00c fe03 	bl	80198e0 <puts>
		}
	//TEMP_APP_Init();
	//HW_TS_Start(UV_TIMER_ID,UV_UPDATE_PERIOD);
  /* USER CODE END CUSTOM_APP_Init */

}
 800ccda:	bf00      	nop
 800ccdc:	bd80      	pop	{r7, pc}
 800ccde:	bf00      	nop
 800cce0:	20000045 	.word	0x20000045
 800cce4:	000f4240 	.word	0x000f4240
 800cce8:	4325c53f 	.word	0x4325c53f
 800ccec:	20000898 	.word	0x20000898
 800ccf0:	20000054 	.word	0x20000054
 800ccf4:	0801d960 	.word	0x0801d960
 800ccf8:	200008a8 	.word	0x200008a8
 800ccfc:	200008d6 	.word	0x200008d6
 800cd00:	0801d964 	.word	0x0801d964

0800cd04 <Send_Temp_Notification>:

/* OperationMode */

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void Send_Temp_Notification(void)
{
 800cd04:	b5b0      	push	{r4, r5, r7, lr}
 800cd06:	b086      	sub	sp, #24
 800cd08:	af04      	add	r7, sp, #16

	Temperature=Temp();
 800cd0a:	f7fe fb9f 	bl	800b44c <Temp>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	461a      	mov	r2, r3
 800cd12:	4b72      	ldr	r3, [pc, #456]	; (800cedc <Send_Temp_Notification+0x1d8>)
 800cd14:	601a      	str	r2, [r3, #0]
	printf("T %f %d %d %d %d\n",Temperature[0],T[0],T[1],T[2],T[3]);
 800cd16:	4b71      	ldr	r3, [pc, #452]	; (800cedc <Send_Temp_Notification+0x1d8>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f7fa fbf3 	bl	8007508 <__aeabi_f2d>
 800cd22:	4602      	mov	r2, r0
 800cd24:	460b      	mov	r3, r1
 800cd26:	496e      	ldr	r1, [pc, #440]	; (800cee0 <Send_Temp_Notification+0x1dc>)
 800cd28:	7809      	ldrb	r1, [r1, #0]
 800cd2a:	4608      	mov	r0, r1
 800cd2c:	496c      	ldr	r1, [pc, #432]	; (800cee0 <Send_Temp_Notification+0x1dc>)
 800cd2e:	7849      	ldrb	r1, [r1, #1]
 800cd30:	460c      	mov	r4, r1
 800cd32:	496b      	ldr	r1, [pc, #428]	; (800cee0 <Send_Temp_Notification+0x1dc>)
 800cd34:	7889      	ldrb	r1, [r1, #2]
 800cd36:	460d      	mov	r5, r1
 800cd38:	4969      	ldr	r1, [pc, #420]	; (800cee0 <Send_Temp_Notification+0x1dc>)
 800cd3a:	78c9      	ldrb	r1, [r1, #3]
 800cd3c:	9103      	str	r1, [sp, #12]
 800cd3e:	9502      	str	r5, [sp, #8]
 800cd40:	9401      	str	r4, [sp, #4]
 800cd42:	9000      	str	r0, [sp, #0]
 800cd44:	4867      	ldr	r0, [pc, #412]	; (800cee4 <Send_Temp_Notification+0x1e0>)
 800cd46:	f00c fd45 	bl	80197d4 <iprintf>

	uint8_t light_noti[1];
	memcpy(T,&Temperature[0],4);
 800cd4a:	4b64      	ldr	r3, [pc, #400]	; (800cedc <Send_Temp_Notification+0x1d8>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	461a      	mov	r2, r3
 800cd52:	4b63      	ldr	r3, [pc, #396]	; (800cee0 <Send_Temp_Notification+0x1dc>)
 800cd54:	601a      	str	r2, [r3, #0]
	memcpy(AT,&Temperature[1],4);
 800cd56:	4b61      	ldr	r3, [pc, #388]	; (800cedc <Send_Temp_Notification+0x1d8>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	3304      	adds	r3, #4
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	461a      	mov	r2, r3
 800cd60:	4b61      	ldr	r3, [pc, #388]	; (800cee8 <Send_Temp_Notification+0x1e4>)
 800cd62:	601a      	str	r2, [r3, #0]
	//printf("T %d %d %d %d\n",T[0],T[1],T[2],T[3]);
	Custom_STM_App_Update_Char(CUSTOM_STM_IR_T,T);
 800cd64:	495e      	ldr	r1, [pc, #376]	; (800cee0 <Send_Temp_Notification+0x1dc>)
 800cd66:	2001      	movs	r0, #1
 800cd68:	f001 fd20 	bl	800e7ac <Custom_STM_App_Update_Char>
	Custom_STM_App_Update_Char(CUSTOM_STM_AMBI_TEMP,T);
 800cd6c:	495c      	ldr	r1, [pc, #368]	; (800cee0 <Send_Temp_Notification+0x1dc>)
 800cd6e:	2009      	movs	r0, #9
 800cd70:	f001 fd1c 	bl	800e7ac <Custom_STM_App_Update_Char>

	}
	else
	{

		global_storage_count+=1;
 800cd74:	4b5d      	ldr	r3, [pc, #372]	; (800ceec <Send_Temp_Notification+0x1e8>)
 800cd76:	781b      	ldrb	r3, [r3, #0]
 800cd78:	3301      	adds	r3, #1
 800cd7a:	b2da      	uxtb	r2, r3
 800cd7c:	4b5b      	ldr	r3, [pc, #364]	; (800ceec <Send_Temp_Notification+0x1e8>)
 800cd7e:	701a      	strb	r2, [r3, #0]
	}

	if(Temp_lower_limit >-21 && Temp_upper_limit <86)
 800cd80:	4b5b      	ldr	r3, [pc, #364]	; (800cef0 <Send_Temp_Notification+0x1ec>)
 800cd82:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cd86:	f113 0f14 	cmn.w	r3, #20
 800cd8a:	f2c0 80a2 	blt.w	800ced2 <Send_Temp_Notification+0x1ce>
 800cd8e:	4b59      	ldr	r3, [pc, #356]	; (800cef4 <Send_Temp_Notification+0x1f0>)
 800cd90:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cd94:	2b55      	cmp	r3, #85	; 0x55
 800cd96:	f300 809c 	bgt.w	800ced2 <Send_Temp_Notification+0x1ce>
	{
		if(Temperature[0]>=Temp_lower_limit && Temperature[0]<=Temp_upper_limit)
 800cd9a:	4b50      	ldr	r3, [pc, #320]	; (800cedc <Send_Temp_Notification+0x1d8>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	ed93 7a00 	vldr	s14, [r3]
 800cda2:	4b53      	ldr	r3, [pc, #332]	; (800cef0 <Send_Temp_Notification+0x1ec>)
 800cda4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cda8:	ee07 3a90 	vmov	s15, r3
 800cdac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cdb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cdb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdb8:	db26      	blt.n	800ce08 <Send_Temp_Notification+0x104>
 800cdba:	4b48      	ldr	r3, [pc, #288]	; (800cedc <Send_Temp_Notification+0x1d8>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	ed93 7a00 	vldr	s14, [r3]
 800cdc2:	4b4c      	ldr	r3, [pc, #304]	; (800cef4 <Send_Temp_Notification+0x1f0>)
 800cdc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cdc8:	ee07 3a90 	vmov	s15, r3
 800cdcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cdd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cdd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdd8:	d816      	bhi.n	800ce08 <Send_Temp_Notification+0x104>
		{
			////Green_led //send notification
			printf("In range\n");
 800cdda:	4847      	ldr	r0, [pc, #284]	; (800cef8 <Send_Temp_Notification+0x1f4>)
 800cddc:	f00c fd80 	bl	80198e0 <puts>
			light_noti[1]=1;
 800cde0:	2301      	movs	r3, #1
 800cde2:	717b      	strb	r3, [r7, #5]

			HAL_GPIO_WritePin(GPIOD, Green_Led_Pin, GPIO_PIN_RESET);
 800cde4:	2200      	movs	r2, #0
 800cde6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800cdea:	4844      	ldr	r0, [pc, #272]	; (800cefc <Send_Temp_Notification+0x1f8>)
 800cdec:	f004 fbba 	bl	8011564 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, Yellow_Led_Pin|Red_Led_Pin, GPIO_PIN_SET);
 800cdf0:	2201      	movs	r2, #1
 800cdf2:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 800cdf6:	4841      	ldr	r0, [pc, #260]	; (800cefc <Send_Temp_Notification+0x1f8>)
 800cdf8:	f004 fbb4 	bl	8011564 <HAL_GPIO_WritePin>
			Custom_STM_App_Update_Char(CUSTOM_STM_R_N,light_noti);
 800cdfc:	1d3b      	adds	r3, r7, #4
 800cdfe:	4619      	mov	r1, r3
 800ce00:	2005      	movs	r0, #5
 800ce02:	f001 fcd3 	bl	800e7ac <Custom_STM_App_Update_Char>
			Custom_STM_App_Update_Char(CUSTOM_STM_R_N,light_noti);

		}
	}

}
 800ce06:	e064      	b.n	800ced2 <Send_Temp_Notification+0x1ce>
		else if(Temperature[0]<Temp_lower_limit)
 800ce08:	4b34      	ldr	r3, [pc, #208]	; (800cedc <Send_Temp_Notification+0x1d8>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	ed93 7a00 	vldr	s14, [r3]
 800ce10:	4b37      	ldr	r3, [pc, #220]	; (800cef0 <Send_Temp_Notification+0x1ec>)
 800ce12:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ce16:	ee07 3a90 	vmov	s15, r3
 800ce1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ce1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ce22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce26:	d516      	bpl.n	800ce56 <Send_Temp_Notification+0x152>
			light_noti[1]=2;
 800ce28:	2302      	movs	r3, #2
 800ce2a:	717b      	strb	r3, [r7, #5]
			printf("lower range\n");
 800ce2c:	4834      	ldr	r0, [pc, #208]	; (800cf00 <Send_Temp_Notification+0x1fc>)
 800ce2e:	f00c fd57 	bl	80198e0 <puts>
			HAL_GPIO_WritePin(GPIOD, Yellow_Led_Pin, GPIO_PIN_RESET);
 800ce32:	2200      	movs	r2, #0
 800ce34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ce38:	4830      	ldr	r0, [pc, #192]	; (800cefc <Send_Temp_Notification+0x1f8>)
 800ce3a:	f004 fb93 	bl	8011564 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, Green_Led_Pin|Red_Led_Pin, GPIO_PIN_SET);
 800ce3e:	2201      	movs	r2, #1
 800ce40:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800ce44:	482d      	ldr	r0, [pc, #180]	; (800cefc <Send_Temp_Notification+0x1f8>)
 800ce46:	f004 fb8d 	bl	8011564 <HAL_GPIO_WritePin>
			Custom_STM_App_Update_Char(CUSTOM_STM_R_N,light_noti);
 800ce4a:	1d3b      	adds	r3, r7, #4
 800ce4c:	4619      	mov	r1, r3
 800ce4e:	2005      	movs	r0, #5
 800ce50:	f001 fcac 	bl	800e7ac <Custom_STM_App_Update_Char>
}
 800ce54:	e03d      	b.n	800ced2 <Send_Temp_Notification+0x1ce>
		else if(Temperature[0]>Temp_upper_limit)
 800ce56:	4b21      	ldr	r3, [pc, #132]	; (800cedc <Send_Temp_Notification+0x1d8>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	ed93 7a00 	vldr	s14, [r3]
 800ce5e:	4b25      	ldr	r3, [pc, #148]	; (800cef4 <Send_Temp_Notification+0x1f0>)
 800ce60:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ce64:	ee07 3a90 	vmov	s15, r3
 800ce68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ce6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ce70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce74:	dd16      	ble.n	800cea4 <Send_Temp_Notification+0x1a0>
			printf("Upper range\n");
 800ce76:	4823      	ldr	r0, [pc, #140]	; (800cf04 <Send_Temp_Notification+0x200>)
 800ce78:	f00c fd32 	bl	80198e0 <puts>
			light_noti[1]=3;
 800ce7c:	2303      	movs	r3, #3
 800ce7e:	717b      	strb	r3, [r7, #5]
			HAL_GPIO_WritePin(GPIOD, Red_Led_Pin, GPIO_PIN_RESET);
 800ce80:	2200      	movs	r2, #0
 800ce82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ce86:	481d      	ldr	r0, [pc, #116]	; (800cefc <Send_Temp_Notification+0x1f8>)
 800ce88:	f004 fb6c 	bl	8011564 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, Yellow_Led_Pin|Green_Led_Pin, GPIO_PIN_SET);
 800ce8c:	2201      	movs	r2, #1
 800ce8e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800ce92:	481a      	ldr	r0, [pc, #104]	; (800cefc <Send_Temp_Notification+0x1f8>)
 800ce94:	f004 fb66 	bl	8011564 <HAL_GPIO_WritePin>
			Custom_STM_App_Update_Char(CUSTOM_STM_R_N,light_noti);
 800ce98:	1d3b      	adds	r3, r7, #4
 800ce9a:	4619      	mov	r1, r3
 800ce9c:	2005      	movs	r0, #5
 800ce9e:	f001 fc85 	bl	800e7ac <Custom_STM_App_Update_Char>
}
 800cea2:	e016      	b.n	800ced2 <Send_Temp_Notification+0x1ce>
			light_noti[1]=0;
 800cea4:	2300      	movs	r3, #0
 800cea6:	717b      	strb	r3, [r7, #5]
			printf("outoff range\n");
 800cea8:	4817      	ldr	r0, [pc, #92]	; (800cf08 <Send_Temp_Notification+0x204>)
 800ceaa:	f00c fd19 	bl	80198e0 <puts>
			Temp_lower_limit=-21;
 800ceae:	4b10      	ldr	r3, [pc, #64]	; (800cef0 <Send_Temp_Notification+0x1ec>)
 800ceb0:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800ceb4:	801a      	strh	r2, [r3, #0]
			Temp_upper_limit=86;
 800ceb6:	4b0f      	ldr	r3, [pc, #60]	; (800cef4 <Send_Temp_Notification+0x1f0>)
 800ceb8:	2256      	movs	r2, #86	; 0x56
 800ceba:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, Yellow_Led_Pin|Green_Led_Pin|Red_Led_Pin, GPIO_PIN_SET);
 800cebc:	2201      	movs	r2, #1
 800cebe:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800cec2:	480e      	ldr	r0, [pc, #56]	; (800cefc <Send_Temp_Notification+0x1f8>)
 800cec4:	f004 fb4e 	bl	8011564 <HAL_GPIO_WritePin>
			Custom_STM_App_Update_Char(CUSTOM_STM_R_N,light_noti);
 800cec8:	1d3b      	adds	r3, r7, #4
 800ceca:	4619      	mov	r1, r3
 800cecc:	2005      	movs	r0, #5
 800cece:	f001 fc6d 	bl	800e7ac <Custom_STM_App_Update_Char>
}
 800ced2:	bf00      	nop
 800ced4:	3708      	adds	r7, #8
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bdb0      	pop	{r4, r5, r7, pc}
 800ceda:	bf00      	nop
 800cedc:	2000089c 	.word	0x2000089c
 800cee0:	200008a0 	.word	0x200008a0
 800cee4:	0801d970 	.word	0x0801d970
 800cee8:	200008a4 	.word	0x200008a4
 800ceec:	200008b0 	.word	0x200008b0
 800cef0:	20000046 	.word	0x20000046
 800cef4:	20000048 	.word	0x20000048
 800cef8:	0801d984 	.word	0x0801d984
 800cefc:	48000c00 	.word	0x48000c00
 800cf00:	0801d990 	.word	0x0801d990
 800cf04:	0801d99c 	.word	0x0801d99c
 800cf08:	0801d9a8 	.word	0x0801d9a8

0800cf0c <Date_Time>:

	}
}

void Date_Time(void)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b082      	sub	sp, #8
 800cf10:	af00      	add	r7, sp, #0
	if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800cf12:	2200      	movs	r2, #0
 800cf14:	4925      	ldr	r1, [pc, #148]	; (800cfac <Date_Time+0xa0>)
 800cf16:	4826      	ldr	r0, [pc, #152]	; (800cfb0 <Date_Time+0xa4>)
 800cf18:	f007 fff0 	bl	8014efc <HAL_RTC_GetTime>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d004      	beq.n	800cf2c <Date_Time+0x20>
	{
		Error_Handler();
 800cf22:	f7fd fc43 	bl	800a7ac <Error_Handler>
		printf("Time_fail\n");
 800cf26:	4823      	ldr	r0, [pc, #140]	; (800cfb4 <Date_Time+0xa8>)
 800cf28:	f00c fcda 	bl	80198e0 <puts>
	}
	if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	4922      	ldr	r1, [pc, #136]	; (800cfb8 <Date_Time+0xac>)
 800cf30:	481f      	ldr	r0, [pc, #124]	; (800cfb0 <Date_Time+0xa4>)
 800cf32:	f008 f8ed 	bl	8015110 <HAL_RTC_GetDate>
 800cf36:	4603      	mov	r3, r0
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d004      	beq.n	800cf46 <Date_Time+0x3a>
	{

		printf("Date_fail\n");
 800cf3c:	481f      	ldr	r0, [pc, #124]	; (800cfbc <Date_Time+0xb0>)
 800cf3e:	f00c fccf 	bl	80198e0 <puts>
		Error_Handler();
 800cf42:	f7fd fc33 	bl	800a7ac <Error_Handler>
	}
	Time[0]=sTime.Hours;
 800cf46:	4b19      	ldr	r3, [pc, #100]	; (800cfac <Date_Time+0xa0>)
 800cf48:	781a      	ldrb	r2, [r3, #0]
 800cf4a:	4b1d      	ldr	r3, [pc, #116]	; (800cfc0 <Date_Time+0xb4>)
 800cf4c:	701a      	strb	r2, [r3, #0]
	Time[1]=sTime.Minutes;
 800cf4e:	4b17      	ldr	r3, [pc, #92]	; (800cfac <Date_Time+0xa0>)
 800cf50:	785a      	ldrb	r2, [r3, #1]
 800cf52:	4b1b      	ldr	r3, [pc, #108]	; (800cfc0 <Date_Time+0xb4>)
 800cf54:	705a      	strb	r2, [r3, #1]
	Time[2]=sTime.Seconds;
 800cf56:	4b15      	ldr	r3, [pc, #84]	; (800cfac <Date_Time+0xa0>)
 800cf58:	789a      	ldrb	r2, [r3, #2]
 800cf5a:	4b19      	ldr	r3, [pc, #100]	; (800cfc0 <Date_Time+0xb4>)
 800cf5c:	709a      	strb	r2, [r3, #2]
	Time[3]=sDate.WeekDay;
 800cf5e:	4b16      	ldr	r3, [pc, #88]	; (800cfb8 <Date_Time+0xac>)
 800cf60:	781a      	ldrb	r2, [r3, #0]
 800cf62:	4b17      	ldr	r3, [pc, #92]	; (800cfc0 <Date_Time+0xb4>)
 800cf64:	70da      	strb	r2, [r3, #3]
	Time[4]=sDate.Date;
 800cf66:	4b14      	ldr	r3, [pc, #80]	; (800cfb8 <Date_Time+0xac>)
 800cf68:	789a      	ldrb	r2, [r3, #2]
 800cf6a:	4b15      	ldr	r3, [pc, #84]	; (800cfc0 <Date_Time+0xb4>)
 800cf6c:	711a      	strb	r2, [r3, #4]
	Time[5]=sDate.Month;
 800cf6e:	4b12      	ldr	r3, [pc, #72]	; (800cfb8 <Date_Time+0xac>)
 800cf70:	785a      	ldrb	r2, [r3, #1]
 800cf72:	4b13      	ldr	r3, [pc, #76]	; (800cfc0 <Date_Time+0xb4>)
 800cf74:	715a      	strb	r2, [r3, #5]
	Time[6]=sDate.Year;
 800cf76:	4b10      	ldr	r3, [pc, #64]	; (800cfb8 <Date_Time+0xac>)
 800cf78:	78da      	ldrb	r2, [r3, #3]
 800cf7a:	4b11      	ldr	r3, [pc, #68]	; (800cfc0 <Date_Time+0xb4>)
 800cf7c:	719a      	strb	r2, [r3, #6]
	for(uint8_t i=0;i<7;i++){
 800cf7e:	2300      	movs	r3, #0
 800cf80:	71fb      	strb	r3, [r7, #7]
 800cf82:	e00a      	b.n	800cf9a <Date_Time+0x8e>
		printf("T[%d]:%d\n",i,Time[i]);
 800cf84:	79f9      	ldrb	r1, [r7, #7]
 800cf86:	79fb      	ldrb	r3, [r7, #7]
 800cf88:	4a0d      	ldr	r2, [pc, #52]	; (800cfc0 <Date_Time+0xb4>)
 800cf8a:	5cd3      	ldrb	r3, [r2, r3]
 800cf8c:	461a      	mov	r2, r3
 800cf8e:	480d      	ldr	r0, [pc, #52]	; (800cfc4 <Date_Time+0xb8>)
 800cf90:	f00c fc20 	bl	80197d4 <iprintf>
	for(uint8_t i=0;i<7;i++){
 800cf94:	79fb      	ldrb	r3, [r7, #7]
 800cf96:	3301      	adds	r3, #1
 800cf98:	71fb      	strb	r3, [r7, #7]
 800cf9a:	79fb      	ldrb	r3, [r7, #7]
 800cf9c:	2b06      	cmp	r3, #6
 800cf9e:	d9f1      	bls.n	800cf84 <Date_Time+0x78>
	}
}
 800cfa0:	bf00      	nop
 800cfa2:	bf00      	nop
 800cfa4:	3708      	adds	r7, #8
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}
 800cfaa:	bf00      	nop
 800cfac:	200008bc 	.word	0x200008bc
 800cfb0:	2000055c 	.word	0x2000055c
 800cfb4:	0801d9cc 	.word	0x0801d9cc
 800cfb8:	200008d0 	.word	0x200008d0
 800cfbc:	0801d9d8 	.word	0x0801d9d8
 800cfc0:	200008b4 	.word	0x200008b4
 800cfc4:	0801d9e4 	.word	0x0801d9e4

0800cfc8 <TEMP_APP_Init>:

static void TEMP_APP_Init(void)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b082      	sub	sp, #8
 800cfcc:	af00      	add	r7, sp, #0

	UTIL_SEQ_RegTask( 1<<CFG_TEMP_ID, UTIL_SEQ_RFU, Send_Temp_Notification);
 800cfce:	4a11      	ldr	r2, [pc, #68]	; (800d014 <TEMP_APP_Init+0x4c>)
 800cfd0:	2100      	movs	r1, #0
 800cfd2:	2004      	movs	r0, #4
 800cfd4:	f00b fbdc 	bl	8018790 <UTIL_SEQ_RegTask>
	/* Create timer to get the AccGyroMag params and update charecteristic */
	HW_TS_ReturnStatus_t r=HW_TS_Create(CFG_TIM_PROC_ID_ISR, &TEMP_TIMER_ID,hw_ts_Repeated,TEMP_Timer_Callback);
 800cfd8:	4b0f      	ldr	r3, [pc, #60]	; (800d018 <TEMP_APP_Init+0x50>)
 800cfda:	2201      	movs	r2, #1
 800cfdc:	490f      	ldr	r1, [pc, #60]	; (800d01c <TEMP_APP_Init+0x54>)
 800cfde:	2000      	movs	r0, #0
 800cfe0:	f7fc ffdc 	bl	8009f9c <HW_TS_Create>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	71fb      	strb	r3, [r7, #7]
	TEMP_UPDATE_PERIOD = (uint32_t)(Interval*1000*1000/CFG_TS_TICK_VAL);
 800cfe8:	4b0d      	ldr	r3, [pc, #52]	; (800d020 <TEMP_APP_Init+0x58>)
 800cfea:	781b      	ldrb	r3, [r3, #0]
 800cfec:	461a      	mov	r2, r3
 800cfee:	4b0d      	ldr	r3, [pc, #52]	; (800d024 <TEMP_APP_Init+0x5c>)
 800cff0:	fb02 f303 	mul.w	r3, r2, r3
 800cff4:	461a      	mov	r2, r3
 800cff6:	4b0c      	ldr	r3, [pc, #48]	; (800d028 <TEMP_APP_Init+0x60>)
 800cff8:	fba3 2302 	umull	r2, r3, r3, r2
 800cffc:	09db      	lsrs	r3, r3, #7
 800cffe:	4a0b      	ldr	r2, [pc, #44]	; (800d02c <TEMP_APP_Init+0x64>)
 800d000:	6013      	str	r3, [r2, #0]

	printf("\r TEMP_APP_INIT %d\n",r);
 800d002:	79fb      	ldrb	r3, [r7, #7]
 800d004:	4619      	mov	r1, r3
 800d006:	480a      	ldr	r0, [pc, #40]	; (800d030 <TEMP_APP_Init+0x68>)
 800d008:	f00c fbe4 	bl	80197d4 <iprintf>
	return;
 800d00c:	bf00      	nop
}
 800d00e:	3708      	adds	r7, #8
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}
 800d014:	0800cd05 	.word	0x0800cd05
 800d018:	0800d035 	.word	0x0800d035
 800d01c:	200008d6 	.word	0x200008d6
 800d020:	20000045 	.word	0x20000045
 800d024:	000f4240 	.word	0x000f4240
 800d028:	4325c53f 	.word	0x4325c53f
 800d02c:	20000898 	.word	0x20000898
 800d030:	0801d9f0 	.word	0x0801d9f0

0800d034 <TEMP_Timer_Callback>:
static void TEMP_Timer_Callback(void)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b082      	sub	sp, #8
 800d038:	af00      	add	r7, sp, #0
	UTIL_SEQ_PauseTask(1<<CFG_UV_ID);
 800d03a:	2008      	movs	r0, #8
 800d03c:	f00b fbf6 	bl	801882c <UTIL_SEQ_PauseTask>
	UTIL_SEQ_PauseTask(1<<CFG_LOG_UV_ID);
 800d040:	2020      	movs	r0, #32
 800d042:	f00b fbf3 	bl	801882c <UTIL_SEQ_PauseTask>
	UTIL_SEQ_PauseTask(1<<CFG_LOG_TEMP_ID);
 800d046:	2010      	movs	r0, #16
 800d048:	f00b fbf0 	bl	801882c <UTIL_SEQ_PauseTask>
	uint32_t status = UTIL_SEQ_IsPauseTask(1<<CFG_TEMP_ID);
 800d04c:	2004      	movs	r0, #4
 800d04e:	f00b fc0d 	bl	801886c <UTIL_SEQ_IsPauseTask>
 800d052:	6078      	str	r0, [r7, #4]
	//printf("status %d \n",status);
	if(status==1)
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2b01      	cmp	r3, #1
 800d058:	d102      	bne.n	800d060 <TEMP_Timer_Callback+0x2c>
	{
		UTIL_SEQ_ResumeTask(1<<CFG_TEMP_ID);
 800d05a:	2004      	movs	r0, #4
 800d05c:	f00b fc2c 	bl	80188b8 <UTIL_SEQ_ResumeTask>
	}
	UTIL_SEQ_SetTask(1<<CFG_TEMP_ID, CFG_SCH_PRIO_2);
 800d060:	2102      	movs	r1, #2
 800d062:	2004      	movs	r0, #4
 800d064:	f00b fbb6 	bl	80187d4 <UTIL_SEQ_SetTask>
	// printf("\r TEMP_APP_CALLBACK\n");
}
 800d068:	bf00      	nop
 800d06a:	3708      	adds	r7, #8
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}

0800d070 <UV_Timer_Callback>:


static void UV_Timer_Callback(void)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b082      	sub	sp, #8
 800d074:	af00      	add	r7, sp, #0
	UTIL_SEQ_PauseTask(1<<CFG_TEMP_ID);
 800d076:	2004      	movs	r0, #4
 800d078:	f00b fbd8 	bl	801882c <UTIL_SEQ_PauseTask>
	UTIL_SEQ_PauseTask(1<<CFG_LOG_UV_ID);
 800d07c:	2020      	movs	r0, #32
 800d07e:	f00b fbd5 	bl	801882c <UTIL_SEQ_PauseTask>
	UTIL_SEQ_PauseTask(1<<CFG_LOG_TEMP_ID);
 800d082:	2010      	movs	r0, #16
 800d084:	f00b fbd2 	bl	801882c <UTIL_SEQ_PauseTask>
	uint32_t status = UTIL_SEQ_IsPauseTask(1<<CFG_UV_ID);
 800d088:	2008      	movs	r0, #8
 800d08a:	f00b fbef 	bl	801886c <UTIL_SEQ_IsPauseTask>
 800d08e:	6078      	str	r0, [r7, #4]
	if(status==1)
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2b01      	cmp	r3, #1
 800d094:	d102      	bne.n	800d09c <UV_Timer_Callback+0x2c>
	{
		UTIL_SEQ_ResumeTask(1<<CFG_UV_ID);
 800d096:	2008      	movs	r0, #8
 800d098:	f00b fc0e 	bl	80188b8 <UTIL_SEQ_ResumeTask>
	}
	UTIL_SEQ_SetTask(1<<CFG_UV_ID, CFG_SCH_PRIO_2);
 800d09c:	2102      	movs	r1, #2
 800d09e:	2008      	movs	r0, #8
 800d0a0:	f00b fb98 	bl	80187d4 <UTIL_SEQ_SetTask>
	printf("\r UV_APP_CALLBACK\n");
 800d0a4:	4803      	ldr	r0, [pc, #12]	; (800d0b4 <UV_Timer_Callback+0x44>)
 800d0a6:	f00c fc1b 	bl	80198e0 <puts>
}
 800d0aa:	bf00      	nop
 800d0ac:	3708      	adds	r7, #8
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}
 800d0b2:	bf00      	nop
 800d0b4:	0801da04 	.word	0x0801da04

0800d0b8 <Send_UV_Notification>:
void Send_UV_Notification(void)
{
 800d0b8:	b5b0      	push	{r4, r5, r7, lr}
 800d0ba:	b088      	sub	sp, #32
 800d0bc:	af04      	add	r7, sp, #16
	f_UV();
 800d0be:	f7fb f953 	bl	8008368 <f_UV>
	//UV();//printf("F_UV %f \n",f_UV_Data);
	UV_Data = (uint8_t)f_UVI;
 800d0c2:	4b19      	ldr	r3, [pc, #100]	; (800d128 <Send_UV_Notification+0x70>)
 800d0c4:	edd3 7a00 	vldr	s15, [r3]
 800d0c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0cc:	edc7 7a01 	vstr	s15, [r7, #4]
 800d0d0:	793b      	ldrb	r3, [r7, #4]
 800d0d2:	b2da      	uxtb	r2, r3
 800d0d4:	4b15      	ldr	r3, [pc, #84]	; (800d12c <Send_UV_Notification+0x74>)
 800d0d6:	701a      	strb	r2, [r3, #0]
 800d0d8:	4b13      	ldr	r3, [pc, #76]	; (800d128 <Send_UV_Notification+0x70>)
 800d0da:	681b      	ldr	r3, [r3, #0]
	uint8_t UV_TX[sizeof(f_UVI)];
	memcpy(UV_TX,&f_UVI,sizeof(f_UVI));
 800d0dc:	60fb      	str	r3, [r7, #12]
 800d0de:	68fb      	ldr	r3, [r7, #12]
	memcpy(&f_UV_Data,UV_TX,sizeof(f_UV_Data));
 800d0e0:	4a13      	ldr	r2, [pc, #76]	; (800d130 <Send_UV_Notification+0x78>)
 800d0e2:	6013      	str	r3, [r2, #0]
	printf("\r UV_sense_call[%f]= %x %x %x %x\n",f_UV_Data, UV_TX[0],UV_TX[1],UV_TX[2],UV_TX[3]);
 800d0e4:	4b12      	ldr	r3, [pc, #72]	; (800d130 <Send_UV_Notification+0x78>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f7fa fa0d 	bl	8007508 <__aeabi_f2d>
 800d0ee:	4602      	mov	r2, r0
 800d0f0:	460b      	mov	r3, r1
 800d0f2:	7b39      	ldrb	r1, [r7, #12]
 800d0f4:	7b78      	ldrb	r0, [r7, #13]
 800d0f6:	7bbc      	ldrb	r4, [r7, #14]
 800d0f8:	7bfd      	ldrb	r5, [r7, #15]
 800d0fa:	9503      	str	r5, [sp, #12]
 800d0fc:	9402      	str	r4, [sp, #8]
 800d0fe:	9001      	str	r0, [sp, #4]
 800d100:	9100      	str	r1, [sp, #0]
 800d102:	480c      	ldr	r0, [pc, #48]	; (800d134 <Send_UV_Notification+0x7c>)
 800d104:	f00c fb66 	bl	80197d4 <iprintf>

	Custom_STM_App_Update_Char(CUSTOM_STM_UV_V,UV_TX);
 800d108:	f107 030c 	add.w	r3, r7, #12
 800d10c:	4619      	mov	r1, r3
 800d10e:	2006      	movs	r0, #6
 800d110:	f001 fb4c 	bl	800e7ac <Custom_STM_App_Update_Char>
		log_data(14);

	}
	else
	{
		global_storage_count+=1;
 800d114:	4b08      	ldr	r3, [pc, #32]	; (800d138 <Send_UV_Notification+0x80>)
 800d116:	781b      	ldrb	r3, [r3, #0]
 800d118:	3301      	adds	r3, #1
 800d11a:	b2da      	uxtb	r2, r3
 800d11c:	4b06      	ldr	r3, [pc, #24]	; (800d138 <Send_UV_Notification+0x80>)
 800d11e:	701a      	strb	r2, [r3, #0]
	}
}
 800d120:	bf00      	nop
 800d122:	3710      	adds	r7, #16
 800d124:	46bd      	mov	sp, r7
 800d126:	bdb0      	pop	{r4, r5, r7, pc}
 800d128:	200002ec 	.word	0x200002ec
 800d12c:	200008dc 	.word	0x200008dc
 800d130:	200008e0 	.word	0x200008e0
 800d134:	0801da18 	.word	0x0801da18
 800d138:	200008b0 	.word	0x200008b0

0800d13c <UV_APP_Init>:
static void UV_APP_Init(void)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b082      	sub	sp, #8
 800d140:	af00      	add	r7, sp, #0

	UTIL_SEQ_RegTask( 1<<CFG_UV_ID, UTIL_SEQ_RFU, Send_UV_Notification);
 800d142:	4a0b      	ldr	r2, [pc, #44]	; (800d170 <UV_APP_Init+0x34>)
 800d144:	2100      	movs	r1, #0
 800d146:	2008      	movs	r0, #8
 800d148:	f00b fb22 	bl	8018790 <UTIL_SEQ_RegTask>
	/* Create timer to get the AccGyroMag params and update charecteristic */
	HW_TS_ReturnStatus_t r=HW_TS_Create(CFG_TIM_PROC_ID_ISR, &UV_TIMER_ID,hw_ts_Repeated,UV_Timer_Callback);
 800d14c:	4b09      	ldr	r3, [pc, #36]	; (800d174 <UV_APP_Init+0x38>)
 800d14e:	2201      	movs	r2, #1
 800d150:	4909      	ldr	r1, [pc, #36]	; (800d178 <UV_APP_Init+0x3c>)
 800d152:	2000      	movs	r0, #0
 800d154:	f7fc ff22 	bl	8009f9c <HW_TS_Create>
 800d158:	4603      	mov	r3, r0
 800d15a:	71fb      	strb	r3, [r7, #7]
	printf("\r UV_APP_Init %d \n",r);
 800d15c:	79fb      	ldrb	r3, [r7, #7]
 800d15e:	4619      	mov	r1, r3
 800d160:	4806      	ldr	r0, [pc, #24]	; (800d17c <UV_APP_Init+0x40>)
 800d162:	f00c fb37 	bl	80197d4 <iprintf>
	return;
 800d166:	bf00      	nop
}
 800d168:	3708      	adds	r7, #8
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}
 800d16e:	bf00      	nop
 800d170:	0800d0b9 	.word	0x0800d0b9
 800d174:	0800d071 	.word	0x0800d071
 800d178:	200008d7 	.word	0x200008d7
 800d17c:	0801da3c 	.word	0x0801da3c

0800d180 <Battery>:

void Battery(void)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b082      	sub	sp, #8
 800d184:	af00      	add	r7, sp, #0


	//ADC_Select_Battery();
	uint16_t Voltage,Battery;
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800d186:	217f      	movs	r1, #127	; 0x7f
 800d188:	4829      	ldr	r0, [pc, #164]	; (800d230 <Battery+0xb0>)
 800d18a:	f003 fa57 	bl	801063c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC_Data ,2);
 800d18e:	2202      	movs	r2, #2
 800d190:	4928      	ldr	r1, [pc, #160]	; (800d234 <Battery+0xb4>)
 800d192:	4827      	ldr	r0, [pc, #156]	; (800d230 <Battery+0xb0>)
 800d194:	f002 fb32 	bl	800f7fc <HAL_ADC_Start_DMA>
	//HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&Battery,1);
	Voltage = ((ADC_Data[0] *3300)/4096)*4;
 800d198:	4b26      	ldr	r3, [pc, #152]	; (800d234 <Battery+0xb4>)
 800d19a:	881b      	ldrh	r3, [r3, #0]
 800d19c:	461a      	mov	r2, r3
 800d19e:	f640 43e4 	movw	r3, #3300	; 0xce4
 800d1a2:	fb02 f303 	mul.w	r3, r2, r3
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	da01      	bge.n	800d1ae <Battery+0x2e>
 800d1aa:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800d1ae:	131b      	asrs	r3, r3, #12
 800d1b0:	b29b      	uxth	r3, r3
 800d1b2:	009b      	lsls	r3, r3, #2
 800d1b4:	80fb      	strh	r3, [r7, #6]
	printf("voltage %d \n",Voltage);
 800d1b6:	88fb      	ldrh	r3, [r7, #6]
 800d1b8:	4619      	mov	r1, r3
 800d1ba:	481f      	ldr	r0, [pc, #124]	; (800d238 <Battery+0xb8>)
 800d1bc:	f00c fb0a 	bl	80197d4 <iprintf>
	Battery =(Voltage-3000)/12;
 800d1c0:	88fb      	ldrh	r3, [r7, #6]
 800d1c2:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 800d1c6:	4a1d      	ldr	r2, [pc, #116]	; (800d23c <Battery+0xbc>)
 800d1c8:	fb82 1203 	smull	r1, r2, r2, r3
 800d1cc:	1052      	asrs	r2, r2, #1
 800d1ce:	17db      	asrs	r3, r3, #31
 800d1d0:	1ad3      	subs	r3, r2, r3
 800d1d2:	80bb      	strh	r3, [r7, #4]
	//voltag(ADC_Data*0.80586080586080586080586080586081)*4;// adcx(3300/4096);
	Battery_Percentage=(uint8_t)(Battery);
 800d1d4:	88bb      	ldrh	r3, [r7, #4]
 800d1d6:	b2da      	uxtb	r2, r3
 800d1d8:	4b19      	ldr	r3, [pc, #100]	; (800d240 <Battery+0xc0>)
 800d1da:	701a      	strb	r2, [r3, #0]
	printf("Battery_Percentage %d %d\n",Battery_Percentage,Battery);
 800d1dc:	4b18      	ldr	r3, [pc, #96]	; (800d240 <Battery+0xc0>)
 800d1de:	781b      	ldrb	r3, [r3, #0]
 800d1e0:	4619      	mov	r1, r3
 800d1e2:	88bb      	ldrh	r3, [r7, #4]
 800d1e4:	461a      	mov	r2, r3
 800d1e6:	4817      	ldr	r0, [pc, #92]	; (800d244 <Battery+0xc4>)
 800d1e8:	f00c faf4 	bl	80197d4 <iprintf>
	HAL_ADC_Stop_DMA(&hadc1);
 800d1ec:	4810      	ldr	r0, [pc, #64]	; (800d230 <Battery+0xb0>)
 800d1ee:	f002 fb89 	bl	800f904 <HAL_ADC_Stop_DMA>
	if(EOC_v ==1 && Voltage <3500)
 800d1f2:	4b15      	ldr	r3, [pc, #84]	; (800d248 <Battery+0xc8>)
 800d1f4:	781b      	ldrb	r3, [r3, #0]
 800d1f6:	2b01      	cmp	r3, #1
 800d1f8:	d115      	bne.n	800d226 <Battery+0xa6>
 800d1fa:	88fb      	ldrh	r3, [r7, #6]
 800d1fc:	f640 52ab 	movw	r2, #3499	; 0xdab
 800d200:	4293      	cmp	r3, r2
 800d202:	d810      	bhi.n	800d226 <Battery+0xa6>
	{
		HAL_GPIO_WritePin(GPIOA,TS_Pin,GPIO_PIN_RESET);
 800d204:	2200      	movs	r2, #0
 800d206:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d20a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d20e:	f004 f9a9 	bl	8011564 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800d212:	2001      	movs	r0, #1
 800d214:	f7fb fc1f 	bl	8008a56 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA,TS_Pin,GPIO_PIN_SET);
 800d218:	2201      	movs	r2, #1
 800d21a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d21e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d222:	f004 f99f 	bl	8011564 <HAL_GPIO_WritePin>
	}

}
 800d226:	bf00      	nop
 800d228:	3708      	adds	r7, #8
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bd80      	pop	{r7, pc}
 800d22e:	bf00      	nop
 800d230:	200002f0 	.word	0x200002f0
 800d234:	200008e4 	.word	0x200008e4
 800d238:	0801da50 	.word	0x0801da50
 800d23c:	2aaaaaab 	.word	0x2aaaaaab
 800d240:	200008d4 	.word	0x200008d4
 800d244:	0801da60 	.word	0x0801da60
 800d248:	200004e9 	.word	0x200004e9

0800d24c <Analog_Temp>:
void Analog_Temp(void)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b082      	sub	sp, #8
 800d250:	af00      	add	r7, sp, #0
	//	  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
	//	  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_Temp,1);
	//ADC_Select_Temp();
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800d252:	217f      	movs	r1, #127	; 0x7f
 800d254:	4829      	ldr	r0, [pc, #164]	; (800d2fc <Analog_Temp+0xb0>)
 800d256:	f003 f9f1 	bl	801063c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC_Data ,2);
 800d25a:	2202      	movs	r2, #2
 800d25c:	4928      	ldr	r1, [pc, #160]	; (800d300 <Analog_Temp+0xb4>)
 800d25e:	4827      	ldr	r0, [pc, #156]	; (800d2fc <Analog_Temp+0xb0>)
 800d260:	f002 facc 	bl	800f7fc <HAL_ADC_Start_DMA>
	printf("ADC_Temp:%d :%d\n",ADC_Data[0],ADC_Data[1]);
 800d264:	4b26      	ldr	r3, [pc, #152]	; (800d300 <Analog_Temp+0xb4>)
 800d266:	881b      	ldrh	r3, [r3, #0]
 800d268:	4619      	mov	r1, r3
 800d26a:	4b25      	ldr	r3, [pc, #148]	; (800d300 <Analog_Temp+0xb4>)
 800d26c:	885b      	ldrh	r3, [r3, #2]
 800d26e:	461a      	mov	r2, r3
 800d270:	4824      	ldr	r0, [pc, #144]	; (800d304 <Analog_Temp+0xb8>)
 800d272:	f00c faaf 	bl	80197d4 <iprintf>
	float sample =((((ADC_Data[1] *3300)/4096)*122)/100);
 800d276:	4b22      	ldr	r3, [pc, #136]	; (800d300 <Analog_Temp+0xb4>)
 800d278:	885b      	ldrh	r3, [r3, #2]
 800d27a:	461a      	mov	r2, r3
 800d27c:	f640 43e4 	movw	r3, #3300	; 0xce4
 800d280:	fb02 f303 	mul.w	r3, r2, r3
 800d284:	2b00      	cmp	r3, #0
 800d286:	da01      	bge.n	800d28c <Analog_Temp+0x40>
 800d288:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800d28c:	131b      	asrs	r3, r3, #12
 800d28e:	461a      	mov	r2, r3
 800d290:	237a      	movs	r3, #122	; 0x7a
 800d292:	fb02 f303 	mul.w	r3, r2, r3
 800d296:	4a1c      	ldr	r2, [pc, #112]	; (800d308 <Analog_Temp+0xbc>)
 800d298:	fb82 1203 	smull	r1, r2, r2, r3
 800d29c:	1152      	asrs	r2, r2, #5
 800d29e:	17db      	asrs	r3, r3, #31
 800d2a0:	1ad3      	subs	r3, r2, r3
 800d2a2:	ee07 3a90 	vmov	s15, r3
 800d2a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d2aa:	edc7 7a01 	vstr	s15, [r7, #4]
	Dev_Temperature=(sample-400)/19.5;
 800d2ae:	edd7 7a01 	vldr	s15, [r7, #4]
 800d2b2:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800d30c <Analog_Temp+0xc0>
 800d2b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d2ba:	ee17 0a90 	vmov	r0, s15
 800d2be:	f7fa f923 	bl	8007508 <__aeabi_f2d>
 800d2c2:	f04f 0200 	mov.w	r2, #0
 800d2c6:	4b12      	ldr	r3, [pc, #72]	; (800d310 <Analog_Temp+0xc4>)
 800d2c8:	f7fa faa0 	bl	800780c <__aeabi_ddiv>
 800d2cc:	4602      	mov	r2, r0
 800d2ce:	460b      	mov	r3, r1
 800d2d0:	4610      	mov	r0, r2
 800d2d2:	4619      	mov	r1, r3
 800d2d4:	f7fa fc48 	bl	8007b68 <__aeabi_d2uiz>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	b2da      	uxtb	r2, r3
 800d2dc:	4b0d      	ldr	r3, [pc, #52]	; (800d314 <Analog_Temp+0xc8>)
 800d2de:	701a      	strb	r2, [r3, #0]
	printf("AnalogTemp %d \n",Dev_Temperature);
 800d2e0:	4b0c      	ldr	r3, [pc, #48]	; (800d314 <Analog_Temp+0xc8>)
 800d2e2:	781b      	ldrb	r3, [r3, #0]
 800d2e4:	4619      	mov	r1, r3
 800d2e6:	480c      	ldr	r0, [pc, #48]	; (800d318 <Analog_Temp+0xcc>)
 800d2e8:	f00c fa74 	bl	80197d4 <iprintf>
	HAL_ADC_Stop_DMA(&hadc1);
 800d2ec:	4803      	ldr	r0, [pc, #12]	; (800d2fc <Analog_Temp+0xb0>)
 800d2ee:	f002 fb09 	bl	800f904 <HAL_ADC_Stop_DMA>
}
 800d2f2:	bf00      	nop
 800d2f4:	3708      	adds	r7, #8
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}
 800d2fa:	bf00      	nop
 800d2fc:	200002f0 	.word	0x200002f0
 800d300:	200008e4 	.word	0x200008e4
 800d304:	0801da7c 	.word	0x0801da7c
 800d308:	51eb851f 	.word	0x51eb851f
 800d30c:	43c80000 	.word	0x43c80000
 800d310:	40338000 	.word	0x40338000
 800d314:	200008d5 	.word	0x200008d5
 800d318:	0801da90 	.word	0x0801da90

0800d31c <Tx_log_Temp>:
void Tx_log_Temp(void)
{
 800d31c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d320:	b085      	sub	sp, #20
 800d322:	af00      	add	r7, sp, #0

	// uint8_t sim= *(uint8_t*) select;
	uint32_t add=Read_flash_address(1);
 800d324:	2001      	movs	r0, #1
 800d326:	f7fc f84f 	bl	80093c8 <Read_flash_address>
 800d32a:	60f8      	str	r0, [r7, #12]
	printf("current_add %d \n",add);
 800d32c:	68f9      	ldr	r1, [r7, #12]
 800d32e:	4836      	ldr	r0, [pc, #216]	; (800d408 <Tx_log_Temp+0xec>)
 800d330:	f00c fa50 	bl	80197d4 <iprintf>


	uint32_t data=add-iteration_address1;
 800d334:	4b35      	ldr	r3, [pc, #212]	; (800d40c <Tx_log_Temp+0xf0>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	68fa      	ldr	r2, [r7, #12]
 800d33a:	1ad3      	subs	r3, r2, r3
 800d33c:	60bb      	str	r3, [r7, #8]
	printf("Trasmiting Wine Temperature Log Data \n");
 800d33e:	4834      	ldr	r0, [pc, #208]	; (800d410 <Tx_log_Temp+0xf4>)
 800d340:	f00c face 	bl	80198e0 <puts>
	if(data>247)
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	2bf7      	cmp	r3, #247	; 0xf7
 800d348:	d90f      	bls.n	800d36a <Tx_log_Temp+0x4e>
	{
		// uint8_t read_buffer[247];
		Quad_Read(NotifyCharData,iteration_address1,247);
 800d34a:	4b30      	ldr	r3, [pc, #192]	; (800d40c <Tx_log_Temp+0xf0>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	22f7      	movs	r2, #247	; 0xf7
 800d350:	4619      	mov	r1, r3
 800d352:	4830      	ldr	r0, [pc, #192]	; (800d414 <Tx_log_Temp+0xf8>)
 800d354:	f7fb ff1a 	bl	800918c <Quad_Read>
		Custom_STM_App_Update_Char(CUSTOM_STM_L_T, (uint8_t *)NotifyCharData);
 800d358:	492e      	ldr	r1, [pc, #184]	; (800d414 <Tx_log_Temp+0xf8>)
 800d35a:	2004      	movs	r0, #4
 800d35c:	f001 fa26 	bl	800e7ac <Custom_STM_App_Update_Char>
		// sl_bt_gatt_server_notify_all(gattdb_Log,247,read_buffer);
		iteration_address1+=247;
 800d360:	4b2a      	ldr	r3, [pc, #168]	; (800d40c <Tx_log_Temp+0xf0>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	33f7      	adds	r3, #247	; 0xf7
 800d366:	4a29      	ldr	r2, [pc, #164]	; (800d40c <Tx_log_Temp+0xf0>)
 800d368:	6013      	str	r3, [r2, #0]
	}
	if(data<=247 && data!=0)
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	2bf7      	cmp	r3, #247	; 0xf7
 800d36e:	d83a      	bhi.n	800d3e6 <Tx_log_Temp+0xca>
 800d370:	68bb      	ldr	r3, [r7, #8]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d037      	beq.n	800d3e6 <Tx_log_Temp+0xca>
	{
 800d376:	466b      	mov	r3, sp
 800d378:	461e      	mov	r6, r3
		uint8_t read_buffer[data];
 800d37a:	68b9      	ldr	r1, [r7, #8]
 800d37c:	460b      	mov	r3, r1
 800d37e:	3b01      	subs	r3, #1
 800d380:	607b      	str	r3, [r7, #4]
 800d382:	2300      	movs	r3, #0
 800d384:	4688      	mov	r8, r1
 800d386:	4699      	mov	r9, r3
 800d388:	f04f 0200 	mov.w	r2, #0
 800d38c:	f04f 0300 	mov.w	r3, #0
 800d390:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d394:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d398:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d39c:	2300      	movs	r3, #0
 800d39e:	460c      	mov	r4, r1
 800d3a0:	461d      	mov	r5, r3
 800d3a2:	f04f 0200 	mov.w	r2, #0
 800d3a6:	f04f 0300 	mov.w	r3, #0
 800d3aa:	00eb      	lsls	r3, r5, #3
 800d3ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d3b0:	00e2      	lsls	r2, r4, #3
 800d3b2:	1dcb      	adds	r3, r1, #7
 800d3b4:	08db      	lsrs	r3, r3, #3
 800d3b6:	00db      	lsls	r3, r3, #3
 800d3b8:	ebad 0d03 	sub.w	sp, sp, r3
 800d3bc:	466b      	mov	r3, sp
 800d3be:	3300      	adds	r3, #0
 800d3c0:	603b      	str	r3, [r7, #0]
		Quad_Read(read_buffer,iteration_address1,data);
 800d3c2:	4b12      	ldr	r3, [pc, #72]	; (800d40c <Tx_log_Temp+0xf0>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	68ba      	ldr	r2, [r7, #8]
 800d3c8:	4619      	mov	r1, r3
 800d3ca:	6838      	ldr	r0, [r7, #0]
 800d3cc:	f7fb fede 	bl	800918c <Quad_Read>
		Custom_STM_App_Update_Char(  CUSTOM_STM_UV_L, (uint8_t *)NotifyCharData);
 800d3d0:	4910      	ldr	r1, [pc, #64]	; (800d414 <Tx_log_Temp+0xf8>)
 800d3d2:	2007      	movs	r0, #7
 800d3d4:	f001 f9ea 	bl	800e7ac <Custom_STM_App_Update_Char>
		//sl_bt_gatt_server_notify_all(gattdb_Log,data,read_buffer);
		iteration_address1+=data;
 800d3d8:	4b0c      	ldr	r3, [pc, #48]	; (800d40c <Tx_log_Temp+0xf0>)
 800d3da:	681a      	ldr	r2, [r3, #0]
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	4413      	add	r3, r2
 800d3e0:	4a0a      	ldr	r2, [pc, #40]	; (800d40c <Tx_log_Temp+0xf0>)
 800d3e2:	6013      	str	r3, [r2, #0]
 800d3e4:	46b5      	mov	sp, r6
	}
	if(data==0)
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d108      	bne.n	800d3fe <Tx_log_Temp+0xe2>
	{
		iteration_address1=start_address_Temp;    // reset initial address
 800d3ec:	4b07      	ldr	r3, [pc, #28]	; (800d40c <Tx_log_Temp+0xf0>)
 800d3ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d3f2:	601a      	str	r2, [r3, #0]
		HW_TS_Stop(TEMP_LOG_ID);
 800d3f4:	4b08      	ldr	r3, [pc, #32]	; (800d418 <Tx_log_Temp+0xfc>)
 800d3f6:	781b      	ldrb	r3, [r3, #0]
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f7fc fe49 	bl	800a090 <HW_TS_Stop>
		// sl_simple_timer_stop(&Log_tx);
	}

}
 800d3fe:	bf00      	nop
 800d400:	3714      	adds	r7, #20
 800d402:	46bd      	mov	sp, r7
 800d404:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d408:	0801daa0 	.word	0x0801daa0
 800d40c:	2000004c 	.word	0x2000004c
 800d410:	0801dab4 	.word	0x0801dab4
 800d414:	200007a0 	.word	0x200007a0
 800d418:	200008d8 	.word	0x200008d8

0800d41c <Tx_log_UV>:
void Tx_log_UV(void)
{
 800d41c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d420:	b085      	sub	sp, #20
 800d422:	af00      	add	r7, sp, #0
	uint32_t add=Read_flash_address(0);
 800d424:	2000      	movs	r0, #0
 800d426:	f7fb ffcf 	bl	80093c8 <Read_flash_address>
 800d42a:	60f8      	str	r0, [r7, #12]
	uint32_t data=add-iteration_address2;
 800d42c:	4b34      	ldr	r3, [pc, #208]	; (800d500 <Tx_log_UV+0xe4>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	68fa      	ldr	r2, [r7, #12]
 800d432:	1ad3      	subs	r3, r2, r3
 800d434:	60bb      	str	r3, [r7, #8]
	printf("Trasmiting UV Sensor Log Data \n");
 800d436:	4833      	ldr	r0, [pc, #204]	; (800d504 <Tx_log_UV+0xe8>)
 800d438:	f00c fa52 	bl	80198e0 <puts>
	if(data>247)
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	2bf7      	cmp	r3, #247	; 0xf7
 800d440:	d90f      	bls.n	800d462 <Tx_log_UV+0x46>
	{
		//uint8_t read_buffer[247];
		Quad_Read(NotifyCharData,iteration_address2,247);
 800d442:	4b2f      	ldr	r3, [pc, #188]	; (800d500 <Tx_log_UV+0xe4>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	22f7      	movs	r2, #247	; 0xf7
 800d448:	4619      	mov	r1, r3
 800d44a:	482f      	ldr	r0, [pc, #188]	; (800d508 <Tx_log_UV+0xec>)
 800d44c:	f7fb fe9e 	bl	800918c <Quad_Read>
		Custom_STM_App_Update_Char(CUSTOM_STM_UV_L, (uint8_t *)NotifyCharData);
 800d450:	492d      	ldr	r1, [pc, #180]	; (800d508 <Tx_log_UV+0xec>)
 800d452:	2007      	movs	r0, #7
 800d454:	f001 f9aa 	bl	800e7ac <Custom_STM_App_Update_Char>
		iteration_address2 +=247;
 800d458:	4b29      	ldr	r3, [pc, #164]	; (800d500 <Tx_log_UV+0xe4>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	33f7      	adds	r3, #247	; 0xf7
 800d45e:	4a28      	ldr	r2, [pc, #160]	; (800d500 <Tx_log_UV+0xe4>)
 800d460:	6013      	str	r3, [r2, #0]
	}
	if(data<=247 && data!=0)
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	2bf7      	cmp	r3, #247	; 0xf7
 800d466:	d83a      	bhi.n	800d4de <Tx_log_UV+0xc2>
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d037      	beq.n	800d4de <Tx_log_UV+0xc2>
	{
 800d46e:	466b      	mov	r3, sp
 800d470:	461e      	mov	r6, r3
		uint8_t read_buffer[data];
 800d472:	68b9      	ldr	r1, [r7, #8]
 800d474:	460b      	mov	r3, r1
 800d476:	3b01      	subs	r3, #1
 800d478:	607b      	str	r3, [r7, #4]
 800d47a:	2300      	movs	r3, #0
 800d47c:	4688      	mov	r8, r1
 800d47e:	4699      	mov	r9, r3
 800d480:	f04f 0200 	mov.w	r2, #0
 800d484:	f04f 0300 	mov.w	r3, #0
 800d488:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d48c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d490:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d494:	2300      	movs	r3, #0
 800d496:	460c      	mov	r4, r1
 800d498:	461d      	mov	r5, r3
 800d49a:	f04f 0200 	mov.w	r2, #0
 800d49e:	f04f 0300 	mov.w	r3, #0
 800d4a2:	00eb      	lsls	r3, r5, #3
 800d4a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d4a8:	00e2      	lsls	r2, r4, #3
 800d4aa:	1dcb      	adds	r3, r1, #7
 800d4ac:	08db      	lsrs	r3, r3, #3
 800d4ae:	00db      	lsls	r3, r3, #3
 800d4b0:	ebad 0d03 	sub.w	sp, sp, r3
 800d4b4:	466b      	mov	r3, sp
 800d4b6:	3300      	adds	r3, #0
 800d4b8:	603b      	str	r3, [r7, #0]
		Quad_Read(read_buffer,iteration_address2,data);
 800d4ba:	4b11      	ldr	r3, [pc, #68]	; (800d500 <Tx_log_UV+0xe4>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	68ba      	ldr	r2, [r7, #8]
 800d4c0:	4619      	mov	r1, r3
 800d4c2:	6838      	ldr	r0, [r7, #0]
 800d4c4:	f7fb fe62 	bl	800918c <Quad_Read>
		Custom_STM_App_Update_Char(CUSTOM_STM_UV_L, (uint8_t *)NotifyCharData);
 800d4c8:	490f      	ldr	r1, [pc, #60]	; (800d508 <Tx_log_UV+0xec>)
 800d4ca:	2007      	movs	r0, #7
 800d4cc:	f001 f96e 	bl	800e7ac <Custom_STM_App_Update_Char>
		iteration_address2+=data;
 800d4d0:	4b0b      	ldr	r3, [pc, #44]	; (800d500 <Tx_log_UV+0xe4>)
 800d4d2:	681a      	ldr	r2, [r3, #0]
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	4413      	add	r3, r2
 800d4d8:	4a09      	ldr	r2, [pc, #36]	; (800d500 <Tx_log_UV+0xe4>)
 800d4da:	6013      	str	r3, [r2, #0]
 800d4dc:	46b5      	mov	sp, r6

	}
	if(data==0)
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d108      	bne.n	800d4f6 <Tx_log_UV+0xda>
	{
		iteration_address2=start_address_UV;    // reset initial address
 800d4e4:	4b06      	ldr	r3, [pc, #24]	; (800d500 <Tx_log_UV+0xe4>)
 800d4e6:	f44f 227f 	mov.w	r2, #1044480	; 0xff000
 800d4ea:	601a      	str	r2, [r3, #0]
		HW_TS_Stop(UV_LOG_ID);
 800d4ec:	4b07      	ldr	r3, [pc, #28]	; (800d50c <Tx_log_UV+0xf0>)
 800d4ee:	781b      	ldrb	r3, [r3, #0]
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	f7fc fdcd 	bl	800a090 <HW_TS_Stop>
	}
}
 800d4f6:	bf00      	nop
 800d4f8:	3714      	adds	r7, #20
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d500:	20000050 	.word	0x20000050
 800d504:	0801dadc 	.word	0x0801dadc
 800d508:	200007a0 	.word	0x200007a0
 800d50c:	200008d9 	.word	0x200008d9

0800d510 <Log_Tx_Init>:
static void Log_Tx_Init(void)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	af00      	add	r7, sp, #0
	UTIL_SEQ_RegTask(1 << CFG_LOG_TEMP_ID, UTIL_SEQ_RFU,Tx_log_Temp);
 800d514:	4a0b      	ldr	r2, [pc, #44]	; (800d544 <Log_Tx_Init+0x34>)
 800d516:	2100      	movs	r1, #0
 800d518:	2010      	movs	r0, #16
 800d51a:	f00b f939 	bl	8018790 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask(1 << CFG_LOG_UV_ID, UTIL_SEQ_RFU,Tx_log_UV);
 800d51e:	4a0a      	ldr	r2, [pc, #40]	; (800d548 <Log_Tx_Init+0x38>)
 800d520:	2100      	movs	r1, #0
 800d522:	2020      	movs	r0, #32
 800d524:	f00b f934 	bl	8018790 <UTIL_SEQ_RegTask>
	HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(TEMP_LOG_ID), hw_ts_Repeated,
 800d528:	4b08      	ldr	r3, [pc, #32]	; (800d54c <Log_Tx_Init+0x3c>)
 800d52a:	2201      	movs	r2, #1
 800d52c:	4908      	ldr	r1, [pc, #32]	; (800d550 <Log_Tx_Init+0x40>)
 800d52e:	2000      	movs	r0, #0
 800d530:	f7fc fd34 	bl	8009f9c <HW_TS_Create>
			Log_Temp_Callback); //CALL BACK
	HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(UV_LOG_ID), hw_ts_Repeated,
 800d534:	4b07      	ldr	r3, [pc, #28]	; (800d554 <Log_Tx_Init+0x44>)
 800d536:	2201      	movs	r2, #1
 800d538:	4907      	ldr	r1, [pc, #28]	; (800d558 <Log_Tx_Init+0x48>)
 800d53a:	2000      	movs	r0, #0
 800d53c:	f7fc fd2e 	bl	8009f9c <HW_TS_Create>
			Log_UV_Callback);
}
 800d540:	bf00      	nop
 800d542:	bd80      	pop	{r7, pc}
 800d544:	0800d31d 	.word	0x0800d31d
 800d548:	0800d41d 	.word	0x0800d41d
 800d54c:	0800d55d 	.word	0x0800d55d
 800d550:	200008d8 	.word	0x200008d8
 800d554:	0800d599 	.word	0x0800d599
 800d558:	200008d9 	.word	0x200008d9

0800d55c <Log_Temp_Callback>:
static void Log_Temp_Callback(void)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b082      	sub	sp, #8
 800d560:	af00      	add	r7, sp, #0
	UTIL_SEQ_PauseTask(1<<CFG_TEMP_ID);
 800d562:	2004      	movs	r0, #4
 800d564:	f00b f962 	bl	801882c <UTIL_SEQ_PauseTask>
	UTIL_SEQ_PauseTask(1<<CFG_UV_ID);
 800d568:	2008      	movs	r0, #8
 800d56a:	f00b f95f 	bl	801882c <UTIL_SEQ_PauseTask>
	UTIL_SEQ_PauseTask(1<<CFG_LOG_UV_ID);
 800d56e:	2020      	movs	r0, #32
 800d570:	f00b f95c 	bl	801882c <UTIL_SEQ_PauseTask>
	uint32_t status = UTIL_SEQ_IsPauseTask( 1<<CFG_LOG_TEMP_ID);
 800d574:	2010      	movs	r0, #16
 800d576:	f00b f979 	bl	801886c <UTIL_SEQ_IsPauseTask>
 800d57a:	6078      	str	r0, [r7, #4]
	if(status==1)
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2b01      	cmp	r3, #1
 800d580:	d102      	bne.n	800d588 <Log_Temp_Callback+0x2c>
	{
		UTIL_SEQ_ResumeTask(1<<CFG_LOG_TEMP_ID);
 800d582:	2010      	movs	r0, #16
 800d584:	f00b f998 	bl	80188b8 <UTIL_SEQ_ResumeTask>
	}
	UTIL_SEQ_SetTask(1<<CFG_LOG_TEMP_ID,CFG_SCH_PRIO_2);
 800d588:	2102      	movs	r1, #2
 800d58a:	2010      	movs	r0, #16
 800d58c:	f00b f922 	bl	80187d4 <UTIL_SEQ_SetTask>
}
 800d590:	bf00      	nop
 800d592:	3708      	adds	r7, #8
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}

0800d598 <Log_UV_Callback>:
static void Log_UV_Callback(void)
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b082      	sub	sp, #8
 800d59c:	af00      	add	r7, sp, #0
	UTIL_SEQ_PauseTask(1<<CFG_TEMP_ID);
 800d59e:	2004      	movs	r0, #4
 800d5a0:	f00b f944 	bl	801882c <UTIL_SEQ_PauseTask>
	UTIL_SEQ_PauseTask(1<<CFG_UV_ID);
 800d5a4:	2008      	movs	r0, #8
 800d5a6:	f00b f941 	bl	801882c <UTIL_SEQ_PauseTask>
	UTIL_SEQ_PauseTask(1<<CFG_LOG_TEMP_ID);
 800d5aa:	2010      	movs	r0, #16
 800d5ac:	f00b f93e 	bl	801882c <UTIL_SEQ_PauseTask>
	uint32_t status = UTIL_SEQ_IsPauseTask( 1<<CFG_LOG_UV_ID);
 800d5b0:	2020      	movs	r0, #32
 800d5b2:	f00b f95b 	bl	801886c <UTIL_SEQ_IsPauseTask>
 800d5b6:	6078      	str	r0, [r7, #4]
	if(status==1)
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2b01      	cmp	r3, #1
 800d5bc:	d102      	bne.n	800d5c4 <Log_UV_Callback+0x2c>
	{
		UTIL_SEQ_ResumeTask(1<<CFG_LOG_UV_ID);
 800d5be:	2020      	movs	r0, #32
 800d5c0:	f00b f97a 	bl	80188b8 <UTIL_SEQ_ResumeTask>
	}
	UTIL_SEQ_SetTask(1<<CFG_LOG_UV_ID,CFG_SCH_PRIO_2);
 800d5c4:	2102      	movs	r1, #2
 800d5c6:	2020      	movs	r0, #32
 800d5c8:	f00b f904 	bl	80187d4 <UTIL_SEQ_SetTask>
}
 800d5cc:	bf00      	nop
 800d5ce:	3708      	adds	r7, #8
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}

0800d5d4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b082      	sub	sp, #8
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	4603      	mov	r3, r0
 800d5dc:	80fb      	strh	r3, [r7, #6]
	printf("interrupt \n");
 800d5de:	4823      	ldr	r0, [pc, #140]	; (800d66c <HAL_GPIO_EXTI_Callback+0x98>)
 800d5e0:	f00c f97e 	bl	80198e0 <puts>
	if(GPIO_Pin == PWR_Pin)
 800d5e4:	88fb      	ldrh	r3, [r7, #6]
 800d5e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5ea:	d10e      	bne.n	800d60a <HAL_GPIO_EXTI_Callback+0x36>
	{
		//printf("interrupt 1\n");
		//uint8_t PWR_GooD[1];
		PWR_GD=HAL_GPIO_ReadPin(GPIOC,PWR_Pin);
 800d5ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d5f0:	481f      	ldr	r0, [pc, #124]	; (800d670 <HAL_GPIO_EXTI_Callback+0x9c>)
 800d5f2:	f003 ff9f 	bl	8011534 <HAL_GPIO_ReadPin>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	461a      	mov	r2, r3
 800d5fa:	4b1e      	ldr	r3, [pc, #120]	; (800d674 <HAL_GPIO_EXTI_Callback+0xa0>)
 800d5fc:	701a      	strb	r2, [r3, #0]
		printf("PWR_GD_interrupt %d \r\n",PWR_GD);
 800d5fe:	4b1d      	ldr	r3, [pc, #116]	; (800d674 <HAL_GPIO_EXTI_Callback+0xa0>)
 800d600:	781b      	ldrb	r3, [r3, #0]
 800d602:	4619      	mov	r1, r3
 800d604:	481c      	ldr	r0, [pc, #112]	; (800d678 <HAL_GPIO_EXTI_Callback+0xa4>)
 800d606:	f00c f8e5 	bl	80197d4 <iprintf>

	}
	if(GPIO_Pin == EOC_Pin)
 800d60a:	88fb      	ldrh	r3, [r7, #6]
 800d60c:	2b40      	cmp	r3, #64	; 0x40
 800d60e:	d121      	bne.n	800d654 <HAL_GPIO_EXTI_Callback+0x80>
	{
		//printf("interrupt 2\n");
		//uint8_t EOC_v[1];
		EOC_v=HAL_GPIO_ReadPin(GPIOC,EOC_Pin);
 800d610:	2140      	movs	r1, #64	; 0x40
 800d612:	4817      	ldr	r0, [pc, #92]	; (800d670 <HAL_GPIO_EXTI_Callback+0x9c>)
 800d614:	f003 ff8e 	bl	8011534 <HAL_GPIO_ReadPin>
 800d618:	4603      	mov	r3, r0
 800d61a:	461a      	mov	r2, r3
 800d61c:	4b17      	ldr	r3, [pc, #92]	; (800d67c <HAL_GPIO_EXTI_Callback+0xa8>)
 800d61e:	701a      	strb	r2, [r3, #0]
		PWR_GD=HAL_GPIO_ReadPin(GPIOC,PWR_Pin);
 800d620:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d624:	4812      	ldr	r0, [pc, #72]	; (800d670 <HAL_GPIO_EXTI_Callback+0x9c>)
 800d626:	f003 ff85 	bl	8011534 <HAL_GPIO_ReadPin>
 800d62a:	4603      	mov	r3, r0
 800d62c:	461a      	mov	r2, r3
 800d62e:	4b11      	ldr	r3, [pc, #68]	; (800d674 <HAL_GPIO_EXTI_Callback+0xa0>)
 800d630:	701a      	strb	r2, [r3, #0]


		printf("EOC_interrupt %d \r\n",EOC_v);
 800d632:	4b12      	ldr	r3, [pc, #72]	; (800d67c <HAL_GPIO_EXTI_Callback+0xa8>)
 800d634:	781b      	ldrb	r3, [r3, #0]
 800d636:	4619      	mov	r1, r3
 800d638:	4811      	ldr	r0, [pc, #68]	; (800d680 <HAL_GPIO_EXTI_Callback+0xac>)
 800d63a:	f00c f8cb 	bl	80197d4 <iprintf>
		if(EOC_v==1)
 800d63e:	4b0f      	ldr	r3, [pc, #60]	; (800d67c <HAL_GPIO_EXTI_Callback+0xa8>)
 800d640:	781b      	ldrb	r3, [r3, #0]
 800d642:	2b01      	cmp	r3, #1
 800d644:	d106      	bne.n	800d654 <HAL_GPIO_EXTI_Callback+0x80>
		{
			HW_TS_Start(Ts_TIMER_ID,Ts_UPDATE_PERIOD);
 800d646:	4b0f      	ldr	r3, [pc, #60]	; (800d684 <HAL_GPIO_EXTI_Callback+0xb0>)
 800d648:	781b      	ldrb	r3, [r3, #0]
 800d64a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d64e:	4618      	mov	r0, r3
 800d650:	f7fc fda2 	bl	800a198 <HW_TS_Start>
		}}
	HW_TS_Start(PWR_TIMER_ID,PWR_UPDATE_PERIOD);
 800d654:	4b0c      	ldr	r3, [pc, #48]	; (800d688 <HAL_GPIO_EXTI_Callback+0xb4>)
 800d656:	781b      	ldrb	r3, [r3, #0]
 800d658:	f640 0101 	movw	r1, #2049	; 0x801
 800d65c:	4618      	mov	r0, r3
 800d65e:	f7fc fd9b 	bl	800a198 <HW_TS_Start>
	//	Custom_STM_App_Update_Char(CUSTOM_STM_PWR_GD,(uint8_t*)&PWR_GD);
	//	Custom_STM_App_Update_Char(CUSTOM_STM_EC,(uint8_t*)&EOC_v);


}
 800d662:	bf00      	nop
 800d664:	3708      	adds	r7, #8
 800d666:	46bd      	mov	sp, r7
 800d668:	bd80      	pop	{r7, pc}
 800d66a:	bf00      	nop
 800d66c:	0801dafc 	.word	0x0801dafc
 800d670:	48000800 	.word	0x48000800
 800d674:	200004e8 	.word	0x200004e8
 800d678:	0801db08 	.word	0x0801db08
 800d67c:	200004e9 	.word	0x200004e9
 800d680:	0801db20 	.word	0x0801db20
 800d684:	200008da 	.word	0x200008da
 800d688:	200008db 	.word	0x200008db

0800d68c <TS_Toggle>:


void TS_Toggle(void)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	af00      	add	r7, sp, #0
	UTIL_SEQ_RegTask( 1<< CFG_TASK_TS_ID, UTIL_SEQ_RFU,TS); //Get_Zmod4410); //register task
 800d690:	4a06      	ldr	r2, [pc, #24]	; (800d6ac <TS_Toggle+0x20>)
 800d692:	2100      	movs	r1, #0
 800d694:	f44f 7080 	mov.w	r0, #256	; 0x100
 800d698:	f00b f87a 	bl	8018790 <UTIL_SEQ_RegTask>
	HW_TS_Create(CFG_TIM_PROC_ID_ISR,&(Ts_TIMER_ID), hw_ts_SingleShot, TS_CALL_BACK);
 800d69c:	4b04      	ldr	r3, [pc, #16]	; (800d6b0 <TS_Toggle+0x24>)
 800d69e:	2200      	movs	r2, #0
 800d6a0:	4904      	ldr	r1, [pc, #16]	; (800d6b4 <TS_Toggle+0x28>)
 800d6a2:	2000      	movs	r0, #0
 800d6a4:	f7fc fc7a 	bl	8009f9c <HW_TS_Create>
}
 800d6a8:	bf00      	nop
 800d6aa:	bd80      	pop	{r7, pc}
 800d6ac:	0800d6cd 	.word	0x0800d6cd
 800d6b0:	0800d6b9 	.word	0x0800d6b9
 800d6b4:	200008da 	.word	0x200008da

0800d6b8 <TS_CALL_BACK>:
void TS_CALL_BACK(void)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask(1<<CFG_TASK_TS_ID,CFG_SCH_PRIO_0);
 800d6bc:	2100      	movs	r1, #0
 800d6be:	f44f 7080 	mov.w	r0, #256	; 0x100
 800d6c2:	f00b f887 	bl	80187d4 <UTIL_SEQ_SetTask>
}
 800d6c6:	bf00      	nop
 800d6c8:	bd80      	pop	{r7, pc}
	...

0800d6cc <TS>:
void TS(void)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,TS_Pin,GPIO_PIN_RESET);
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d6d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d6da:	f003 ff43 	bl	8011564 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800d6de:	2001      	movs	r0, #1
 800d6e0:	f7fb f9b9 	bl	8008a56 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA,TS_Pin,GPIO_PIN_SET);
 800d6e4:	2201      	movs	r2, #1
 800d6e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d6ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d6ee:	f003 ff39 	bl	8011564 <HAL_GPIO_WritePin>
	Custom_STM_App_Update_Char(CUSTOM_STM_PWR_GD,(uint8_t*)&PWR_GD);
 800d6f2:	4908      	ldr	r1, [pc, #32]	; (800d714 <TS+0x48>)
 800d6f4:	200e      	movs	r0, #14
 800d6f6:	f001 f859 	bl	800e7ac <Custom_STM_App_Update_Char>
	Custom_STM_App_Update_Char(CUSTOM_STM_EC,(uint8_t*)&EOC_v);
 800d6fa:	4907      	ldr	r1, [pc, #28]	; (800d718 <TS+0x4c>)
 800d6fc:	200d      	movs	r0, #13
 800d6fe:	f001 f855 	bl	800e7ac <Custom_STM_App_Update_Char>
	printf("EO_v_interrupt %d \r\n",EOC_v);
 800d702:	4b05      	ldr	r3, [pc, #20]	; (800d718 <TS+0x4c>)
 800d704:	781b      	ldrb	r3, [r3, #0]
 800d706:	4619      	mov	r1, r3
 800d708:	4804      	ldr	r0, [pc, #16]	; (800d71c <TS+0x50>)
 800d70a:	f00c f863 	bl	80197d4 <iprintf>
}
 800d70e:	bf00      	nop
 800d710:	bd80      	pop	{r7, pc}
 800d712:	bf00      	nop
 800d714:	200004e8 	.word	0x200004e8
 800d718:	200004e9 	.word	0x200004e9
 800d71c:	0801db34 	.word	0x0801db34

0800d720 <PWR_EOC>:
void PWR_EOC(void)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	af00      	add	r7, sp, #0
	UTIL_SEQ_RegTask( 1<<CFG_PWR_EC_ID, UTIL_SEQ_RFU,TS); //Get_Zmod4410); //register task
 800d724:	4a06      	ldr	r2, [pc, #24]	; (800d740 <PWR_EOC+0x20>)
 800d726:	2100      	movs	r1, #0
 800d728:	2040      	movs	r0, #64	; 0x40
 800d72a:	f00b f831 	bl	8018790 <UTIL_SEQ_RegTask>
	HW_TS_Create(CFG_TIM_PROC_ID_ISR,&(PWR_TIMER_ID), hw_ts_SingleShot, PWR_EOC_CALLBACK);
 800d72e:	4b05      	ldr	r3, [pc, #20]	; (800d744 <PWR_EOC+0x24>)
 800d730:	2200      	movs	r2, #0
 800d732:	4905      	ldr	r1, [pc, #20]	; (800d748 <PWR_EOC+0x28>)
 800d734:	2000      	movs	r0, #0
 800d736:	f7fc fc31 	bl	8009f9c <HW_TS_Create>
}
 800d73a:	bf00      	nop
 800d73c:	bd80      	pop	{r7, pc}
 800d73e:	bf00      	nop
 800d740:	0800d6cd 	.word	0x0800d6cd
 800d744:	0800d74d 	.word	0x0800d74d
 800d748:	200008db 	.word	0x200008db

0800d74c <PWR_EOC_CALLBACK>:
void PWR_EOC_CALLBACK(void)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask(1<<CFG_PWR_EC_ID,CFG_SCH_PRIO_0);
 800d750:	2100      	movs	r1, #0
 800d752:	2040      	movs	r0, #64	; 0x40
 800d754:	f00b f83e 	bl	80187d4 <UTIL_SEQ_SetTask>
}
 800d758:	bf00      	nop
 800d75a:	bd80      	pop	{r7, pc}

0800d75c <Init_mode>:
	Custom_STM_App_Update_Char(CUSTOM_STM_PWR_GD,(uint8_t*)&PWR_GD);
	Custom_STM_App_Update_Char(CUSTOM_STM_EC,(uint8_t*)&EOC_v);
}

void Init_mode(void)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b082      	sub	sp, #8
 800d760:	af00      	add	r7, sp, #0
	int16_t temp_value;
	Quad_Read(opmode,mode_address_map,4);
 800d762:	2204      	movs	r2, #4
 800d764:	2100      	movs	r1, #0
 800d766:	4822      	ldr	r0, [pc, #136]	; (800d7f0 <Init_mode+0x94>)
 800d768:	f7fb fd10 	bl	800918c <Quad_Read>
	temp_value = opmode[3]<<8 | opmode[2];
 800d76c:	4b20      	ldr	r3, [pc, #128]	; (800d7f0 <Init_mode+0x94>)
 800d76e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800d772:	021b      	lsls	r3, r3, #8
 800d774:	b21a      	sxth	r2, r3
 800d776:	4b1e      	ldr	r3, [pc, #120]	; (800d7f0 <Init_mode+0x94>)
 800d778:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d77c:	b21b      	sxth	r3, r3
 800d77e:	4313      	orrs	r3, r2
 800d780:	80fb      	strh	r3, [r7, #6]
	if(opmode[0]==0x01)
 800d782:	4b1b      	ldr	r3, [pc, #108]	; (800d7f0 <Init_mode+0x94>)
 800d784:	f993 3000 	ldrsb.w	r3, [r3]
 800d788:	2b01      	cmp	r3, #1
 800d78a:	d11d      	bne.n	800d7c8 <Init_mode+0x6c>
	{
		mode=opmode[0];
 800d78c:	4b18      	ldr	r3, [pc, #96]	; (800d7f0 <Init_mode+0x94>)
 800d78e:	f993 3000 	ldrsb.w	r3, [r3]
 800d792:	b2da      	uxtb	r2, r3
 800d794:	4b17      	ldr	r3, [pc, #92]	; (800d7f4 <Init_mode+0x98>)
 800d796:	701a      	strb	r2, [r3, #0]
		Interval = (opmode[1]==0xff) ? Interval:opmode[1];
 800d798:	4b15      	ldr	r3, [pc, #84]	; (800d7f0 <Init_mode+0x94>)
 800d79a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800d79e:	b2da      	uxtb	r2, r3
 800d7a0:	4b15      	ldr	r3, [pc, #84]	; (800d7f8 <Init_mode+0x9c>)
 800d7a2:	701a      	strb	r2, [r3, #0]
		Desire_temp = (temp_value < -20 || temp_value > 85) ? Desire_temp : temp_value;
 800d7a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d7a8:	f113 0f14 	cmn.w	r3, #20
 800d7ac:	db03      	blt.n	800d7b6 <Init_mode+0x5a>
 800d7ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d7b2:	2b55      	cmp	r3, #85	; 0x55
 800d7b4:	dd03      	ble.n	800d7be <Init_mode+0x62>
 800d7b6:	4b11      	ldr	r3, [pc, #68]	; (800d7fc <Init_mode+0xa0>)
 800d7b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d7bc:	e001      	b.n	800d7c2 <Init_mode+0x66>
 800d7be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d7c2:	4a0e      	ldr	r2, [pc, #56]	; (800d7fc <Init_mode+0xa0>)
 800d7c4:	8013      	strh	r3, [r2, #0]
 800d7c6:	e002      	b.n	800d7ce <Init_mode+0x72>
	}
	else
	{
		mode=0;
 800d7c8:	4b0a      	ldr	r3, [pc, #40]	; (800d7f4 <Init_mode+0x98>)
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	701a      	strb	r2, [r3, #0]
	}
printf(" mode:%d, int:%d,Desire_temp:%d \n",mode,Interval,Desire_temp);
 800d7ce:	4b09      	ldr	r3, [pc, #36]	; (800d7f4 <Init_mode+0x98>)
 800d7d0:	781b      	ldrb	r3, [r3, #0]
 800d7d2:	4619      	mov	r1, r3
 800d7d4:	4b08      	ldr	r3, [pc, #32]	; (800d7f8 <Init_mode+0x9c>)
 800d7d6:	781b      	ldrb	r3, [r3, #0]
 800d7d8:	461a      	mov	r2, r3
 800d7da:	4b08      	ldr	r3, [pc, #32]	; (800d7fc <Init_mode+0xa0>)
 800d7dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d7e0:	4807      	ldr	r0, [pc, #28]	; (800d800 <Init_mode+0xa4>)
 800d7e2:	f00b fff7 	bl	80197d4 <iprintf>
}
 800d7e6:	bf00      	nop
 800d7e8:	3708      	adds	r7, #8
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}
 800d7ee:	bf00      	nop
 800d7f0:	200008ac 	.word	0x200008ac
 800d7f4:	200008a8 	.word	0x200008a8
 800d7f8:	20000045 	.word	0x20000045
 800d7fc:	2000004a 	.word	0x2000004a
 800d800:	0801db4c 	.word	0x0801db4c

0800d804 <Update_mode>:

void Update_mode(void)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b082      	sub	sp, #8
 800d808:	af02      	add	r7, sp, #8
	opmode[0]=mode;
 800d80a:	4b23      	ldr	r3, [pc, #140]	; (800d898 <Update_mode+0x94>)
 800d80c:	781b      	ldrb	r3, [r3, #0]
 800d80e:	b25a      	sxtb	r2, r3
 800d810:	4b22      	ldr	r3, [pc, #136]	; (800d89c <Update_mode+0x98>)
 800d812:	701a      	strb	r2, [r3, #0]
	opmode[1]=Interval;
 800d814:	4b22      	ldr	r3, [pc, #136]	; (800d8a0 <Update_mode+0x9c>)
 800d816:	781b      	ldrb	r3, [r3, #0]
 800d818:	b25a      	sxtb	r2, r3
 800d81a:	4b20      	ldr	r3, [pc, #128]	; (800d89c <Update_mode+0x98>)
 800d81c:	705a      	strb	r2, [r3, #1]
	memcpy(opmode+2,&Desire_temp,2);
 800d81e:	4a21      	ldr	r2, [pc, #132]	; (800d8a4 <Update_mode+0xa0>)
 800d820:	4b21      	ldr	r3, [pc, #132]	; (800d8a8 <Update_mode+0xa4>)
 800d822:	881b      	ldrh	r3, [r3, #0]
 800d824:	8013      	strh	r3, [r2, #0]
	QSPI_Sector_Erase(mode_address_map);
 800d826:	2000      	movs	r0, #0
 800d828:	f7fb fd70 	bl	800930c <QSPI_Sector_Erase>
	Quad_Write(opmode,mode_address_map,4);
 800d82c:	2204      	movs	r2, #4
 800d82e:	2100      	movs	r1, #0
 800d830:	481a      	ldr	r0, [pc, #104]	; (800d89c <Update_mode+0x98>)
 800d832:	f7fb fd0f 	bl	8009254 <Quad_Write>
	printf("data %d %d %d %d \n",opmode[0],opmode[1],opmode[2],opmode[3]);
 800d836:	4b19      	ldr	r3, [pc, #100]	; (800d89c <Update_mode+0x98>)
 800d838:	f993 3000 	ldrsb.w	r3, [r3]
 800d83c:	4619      	mov	r1, r3
 800d83e:	4b17      	ldr	r3, [pc, #92]	; (800d89c <Update_mode+0x98>)
 800d840:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800d844:	461a      	mov	r2, r3
 800d846:	4b15      	ldr	r3, [pc, #84]	; (800d89c <Update_mode+0x98>)
 800d848:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d84c:	4618      	mov	r0, r3
 800d84e:	4b13      	ldr	r3, [pc, #76]	; (800d89c <Update_mode+0x98>)
 800d850:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800d854:	9300      	str	r3, [sp, #0]
 800d856:	4603      	mov	r3, r0
 800d858:	4814      	ldr	r0, [pc, #80]	; (800d8ac <Update_mode+0xa8>)
 800d85a:	f00b ffbb 	bl	80197d4 <iprintf>
	Quad_Read(opmode,mode_address_map,4);
 800d85e:	2204      	movs	r2, #4
 800d860:	2100      	movs	r1, #0
 800d862:	480e      	ldr	r0, [pc, #56]	; (800d89c <Update_mode+0x98>)
 800d864:	f7fb fc92 	bl	800918c <Quad_Read>
	printf("data %d %d %d %d \n",opmode[0],opmode[1],opmode[2],opmode[3]);
 800d868:	4b0c      	ldr	r3, [pc, #48]	; (800d89c <Update_mode+0x98>)
 800d86a:	f993 3000 	ldrsb.w	r3, [r3]
 800d86e:	4619      	mov	r1, r3
 800d870:	4b0a      	ldr	r3, [pc, #40]	; (800d89c <Update_mode+0x98>)
 800d872:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800d876:	461a      	mov	r2, r3
 800d878:	4b08      	ldr	r3, [pc, #32]	; (800d89c <Update_mode+0x98>)
 800d87a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d87e:	4618      	mov	r0, r3
 800d880:	4b06      	ldr	r3, [pc, #24]	; (800d89c <Update_mode+0x98>)
 800d882:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800d886:	9300      	str	r3, [sp, #0]
 800d888:	4603      	mov	r3, r0
 800d88a:	4808      	ldr	r0, [pc, #32]	; (800d8ac <Update_mode+0xa8>)
 800d88c:	f00b ffa2 	bl	80197d4 <iprintf>

}
 800d890:	bf00      	nop
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}
 800d896:	bf00      	nop
 800d898:	200008a8 	.word	0x200008a8
 800d89c:	200008ac 	.word	0x200008ac
 800d8a0:	20000045 	.word	0x20000045
 800d8a4:	200008ae 	.word	0x200008ae
 800d8a8:	2000004a 	.word	0x2000004a
 800d8ac:	0801db70 	.word	0x0801db70

0800d8b0 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b08c      	sub	sp, #48	; 0x30
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	3301      	adds	r3, #1
 800d8c2:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (event_pckt->evt)
 800d8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8c6:	781b      	ldrb	r3, [r3, #0]
 800d8c8:	2bff      	cmp	r3, #255	; 0xff
 800d8ca:	f040 829c 	bne.w	800de06 <Custom_STM_Event_Handler+0x556>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800d8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d0:	3302      	adds	r3, #2
 800d8d2:	627b      	str	r3, [r7, #36]	; 0x24
      switch (blecore_evt->ecode)
 800d8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d6:	881b      	ldrh	r3, [r3, #0]
 800d8d8:	b29b      	uxth	r3, r3
 800d8da:	f640 4214 	movw	r2, #3092	; 0xc14
 800d8de:	4293      	cmp	r3, r2
 800d8e0:	f000 81b8 	beq.w	800dc54 <Custom_STM_Event_Handler+0x3a4>
 800d8e4:	f640 4214 	movw	r2, #3092	; 0xc14
 800d8e8:	4293      	cmp	r3, r2
 800d8ea:	f300 8286 	bgt.w	800ddfa <Custom_STM_Event_Handler+0x54a>
 800d8ee:	f640 4201 	movw	r2, #3073	; 0xc01
 800d8f2:	4293      	cmp	r3, r2
 800d8f4:	d003      	beq.n	800d8fe <Custom_STM_Event_Handler+0x4e>
 800d8f6:	f640 4213 	movw	r2, #3091	; 0xc13
 800d8fa:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 800d8fc:	e282      	b.n	800de04 <Custom_STM_Event_Handler+0x554>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800d8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d900:	3302      	adds	r3, #2
 800d902:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomIr_THdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800d904:	69fb      	ldr	r3, [r7, #28]
 800d906:	885b      	ldrh	r3, [r3, #2]
 800d908:	b29b      	uxth	r3, r3
 800d90a:	461a      	mov	r2, r3
 800d90c:	4ba5      	ldr	r3, [pc, #660]	; (800dba4 <Custom_STM_Event_Handler+0x2f4>)
 800d90e:	88db      	ldrh	r3, [r3, #6]
 800d910:	3302      	adds	r3, #2
 800d912:	429a      	cmp	r2, r3
 800d914:	d119      	bne.n	800d94a <Custom_STM_Event_Handler+0x9a>
            return_value = SVCCTL_EvtAckFlowEnable;
 800d916:	2301      	movs	r3, #1
 800d918:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch (attribute_modified->Attr_Data[0])
 800d91c:	69fb      	ldr	r3, [r7, #28]
 800d91e:	7a1b      	ldrb	r3, [r3, #8]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d002      	beq.n	800d92a <Custom_STM_Event_Handler+0x7a>
 800d924:	2b01      	cmp	r3, #1
 800d926:	d008      	beq.n	800d93a <Custom_STM_Event_Handler+0x8a>
              break;
 800d928:	e193      	b.n	800dc52 <Custom_STM_Event_Handler+0x3a2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_IR_T_NOTIFY_DISABLED_EVT;
 800d92a:	2303      	movs	r3, #3
 800d92c:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800d92e:	f107 030c 	add.w	r3, r7, #12
 800d932:	4618      	mov	r0, r3
 800d934:	f7fe fe9e 	bl	800c674 <Custom_STM_App_Notification>
                break;
 800d938:	e18b      	b.n	800dc52 <Custom_STM_Event_Handler+0x3a2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_IR_T_NOTIFY_ENABLED_EVT;
 800d93a:	2302      	movs	r3, #2
 800d93c:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800d93e:	f107 030c 	add.w	r3, r7, #12
 800d942:	4618      	mov	r0, r3
 800d944:	f7fe fe96 	bl	800c674 <Custom_STM_App_Notification>
                break;
 800d948:	e183      	b.n	800dc52 <Custom_STM_Event_Handler+0x3a2>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomL_THdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800d94a:	69fb      	ldr	r3, [r7, #28]
 800d94c:	885b      	ldrh	r3, [r3, #2]
 800d94e:	b29b      	uxth	r3, r3
 800d950:	461a      	mov	r2, r3
 800d952:	4b94      	ldr	r3, [pc, #592]	; (800dba4 <Custom_STM_Event_Handler+0x2f4>)
 800d954:	899b      	ldrh	r3, [r3, #12]
 800d956:	3302      	adds	r3, #2
 800d958:	429a      	cmp	r2, r3
 800d95a:	d119      	bne.n	800d990 <Custom_STM_Event_Handler+0xe0>
            return_value = SVCCTL_EvtAckFlowEnable;
 800d95c:	2301      	movs	r3, #1
 800d95e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch (attribute_modified->Attr_Data[0])
 800d962:	69fb      	ldr	r3, [r7, #28]
 800d964:	7a1b      	ldrb	r3, [r3, #8]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d002      	beq.n	800d970 <Custom_STM_Event_Handler+0xc0>
 800d96a:	2b01      	cmp	r3, #1
 800d96c:	d008      	beq.n	800d980 <Custom_STM_Event_Handler+0xd0>
              break;
 800d96e:	e170      	b.n	800dc52 <Custom_STM_Event_Handler+0x3a2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_L_T_NOTIFY_DISABLED_EVT;
 800d970:	2307      	movs	r3, #7
 800d972:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800d974:	f107 030c 	add.w	r3, r7, #12
 800d978:	4618      	mov	r0, r3
 800d97a:	f7fe fe7b 	bl	800c674 <Custom_STM_App_Notification>
                break;
 800d97e:	e168      	b.n	800dc52 <Custom_STM_Event_Handler+0x3a2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_L_T_NOTIFY_ENABLED_EVT;
 800d980:	2306      	movs	r3, #6
 800d982:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800d984:	f107 030c 	add.w	r3, r7, #12
 800d988:	4618      	mov	r0, r3
 800d98a:	f7fe fe73 	bl	800c674 <Custom_STM_App_Notification>
                break;
 800d98e:	e160      	b.n	800dc52 <Custom_STM_Event_Handler+0x3a2>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomR_NHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800d990:	69fb      	ldr	r3, [r7, #28]
 800d992:	885b      	ldrh	r3, [r3, #2]
 800d994:	b29b      	uxth	r3, r3
 800d996:	461a      	mov	r2, r3
 800d998:	4b82      	ldr	r3, [pc, #520]	; (800dba4 <Custom_STM_Event_Handler+0x2f4>)
 800d99a:	89db      	ldrh	r3, [r3, #14]
 800d99c:	3302      	adds	r3, #2
 800d99e:	429a      	cmp	r2, r3
 800d9a0:	d119      	bne.n	800d9d6 <Custom_STM_Event_Handler+0x126>
            return_value = SVCCTL_EvtAckFlowEnable;
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch (attribute_modified->Attr_Data[0])
 800d9a8:	69fb      	ldr	r3, [r7, #28]
 800d9aa:	7a1b      	ldrb	r3, [r3, #8]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d002      	beq.n	800d9b6 <Custom_STM_Event_Handler+0x106>
 800d9b0:	2b01      	cmp	r3, #1
 800d9b2:	d008      	beq.n	800d9c6 <Custom_STM_Event_Handler+0x116>
              break;
 800d9b4:	e14d      	b.n	800dc52 <Custom_STM_Event_Handler+0x3a2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_R_N_NOTIFY_DISABLED_EVT;
 800d9b6:	2309      	movs	r3, #9
 800d9b8:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800d9ba:	f107 030c 	add.w	r3, r7, #12
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f7fe fe58 	bl	800c674 <Custom_STM_App_Notification>
                break;
 800d9c4:	e145      	b.n	800dc52 <Custom_STM_Event_Handler+0x3a2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_R_N_NOTIFY_ENABLED_EVT;
 800d9c6:	2308      	movs	r3, #8
 800d9c8:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800d9ca:	f107 030c 	add.w	r3, r7, #12
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f7fe fe50 	bl	800c674 <Custom_STM_App_Notification>
                break;
 800d9d4:	e13d      	b.n	800dc52 <Custom_STM_Event_Handler+0x3a2>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomUv_VHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800d9d6:	69fb      	ldr	r3, [r7, #28]
 800d9d8:	885b      	ldrh	r3, [r3, #2]
 800d9da:	b29b      	uxth	r3, r3
 800d9dc:	461a      	mov	r2, r3
 800d9de:	4b71      	ldr	r3, [pc, #452]	; (800dba4 <Custom_STM_Event_Handler+0x2f4>)
 800d9e0:	8a5b      	ldrh	r3, [r3, #18]
 800d9e2:	3302      	adds	r3, #2
 800d9e4:	429a      	cmp	r2, r3
 800d9e6:	d119      	bne.n	800da1c <Custom_STM_Event_Handler+0x16c>
            return_value = SVCCTL_EvtAckFlowEnable;
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch (attribute_modified->Attr_Data[0])
 800d9ee:	69fb      	ldr	r3, [r7, #28]
 800d9f0:	7a1b      	ldrb	r3, [r3, #8]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d002      	beq.n	800d9fc <Custom_STM_Event_Handler+0x14c>
 800d9f6:	2b01      	cmp	r3, #1
 800d9f8:	d008      	beq.n	800da0c <Custom_STM_Event_Handler+0x15c>
              break;
 800d9fa:	e12a      	b.n	800dc52 <Custom_STM_Event_Handler+0x3a2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_UV_V_NOTIFY_DISABLED_EVT;
 800d9fc:	230b      	movs	r3, #11
 800d9fe:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800da00:	f107 030c 	add.w	r3, r7, #12
 800da04:	4618      	mov	r0, r3
 800da06:	f7fe fe35 	bl	800c674 <Custom_STM_App_Notification>
                break;
 800da0a:	e122      	b.n	800dc52 <Custom_STM_Event_Handler+0x3a2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_UV_V_NOTIFY_ENABLED_EVT;
 800da0c:	230a      	movs	r3, #10
 800da0e:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800da10:	f107 030c 	add.w	r3, r7, #12
 800da14:	4618      	mov	r0, r3
 800da16:	f7fe fe2d 	bl	800c674 <Custom_STM_App_Notification>
                break;
 800da1a:	e11a      	b.n	800dc52 <Custom_STM_Event_Handler+0x3a2>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomUv_LHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800da1c:	69fb      	ldr	r3, [r7, #28]
 800da1e:	885b      	ldrh	r3, [r3, #2]
 800da20:	b29b      	uxth	r3, r3
 800da22:	461a      	mov	r2, r3
 800da24:	4b5f      	ldr	r3, [pc, #380]	; (800dba4 <Custom_STM_Event_Handler+0x2f4>)
 800da26:	8a9b      	ldrh	r3, [r3, #20]
 800da28:	3302      	adds	r3, #2
 800da2a:	429a      	cmp	r2, r3
 800da2c:	d119      	bne.n	800da62 <Custom_STM_Event_Handler+0x1b2>
            return_value = SVCCTL_EvtAckFlowEnable;
 800da2e:	2301      	movs	r3, #1
 800da30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch (attribute_modified->Attr_Data[0])
 800da34:	69fb      	ldr	r3, [r7, #28]
 800da36:	7a1b      	ldrb	r3, [r3, #8]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d002      	beq.n	800da42 <Custom_STM_Event_Handler+0x192>
 800da3c:	2b01      	cmp	r3, #1
 800da3e:	d008      	beq.n	800da52 <Custom_STM_Event_Handler+0x1a2>
              break;
 800da40:	e107      	b.n	800dc52 <Custom_STM_Event_Handler+0x3a2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_UV_L_NOTIFY_DISABLED_EVT;
 800da42:	230d      	movs	r3, #13
 800da44:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800da46:	f107 030c 	add.w	r3, r7, #12
 800da4a:	4618      	mov	r0, r3
 800da4c:	f7fe fe12 	bl	800c674 <Custom_STM_App_Notification>
                break;
 800da50:	e0ff      	b.n	800dc52 <Custom_STM_Event_Handler+0x3a2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_UV_L_NOTIFY_ENABLED_EVT;
 800da52:	230c      	movs	r3, #12
 800da54:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800da56:	f107 030c 	add.w	r3, r7, #12
 800da5a:	4618      	mov	r0, r3
 800da5c:	f7fe fe0a 	bl	800c674 <Custom_STM_App_Notification>
                break;
 800da60:	e0f7      	b.n	800dc52 <Custom_STM_Event_Handler+0x3a2>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomAmbi_TempHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800da62:	69fb      	ldr	r3, [r7, #28]
 800da64:	885b      	ldrh	r3, [r3, #2]
 800da66:	b29b      	uxth	r3, r3
 800da68:	461a      	mov	r2, r3
 800da6a:	4b4e      	ldr	r3, [pc, #312]	; (800dba4 <Custom_STM_Event_Handler+0x2f4>)
 800da6c:	8b1b      	ldrh	r3, [r3, #24]
 800da6e:	3302      	adds	r3, #2
 800da70:	429a      	cmp	r2, r3
 800da72:	d119      	bne.n	800daa8 <Custom_STM_Event_Handler+0x1f8>
            return_value = SVCCTL_EvtAckFlowEnable;
 800da74:	2301      	movs	r3, #1
 800da76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch (attribute_modified->Attr_Data[0])
 800da7a:	69fb      	ldr	r3, [r7, #28]
 800da7c:	7a1b      	ldrb	r3, [r3, #8]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d002      	beq.n	800da88 <Custom_STM_Event_Handler+0x1d8>
 800da82:	2b01      	cmp	r3, #1
 800da84:	d008      	beq.n	800da98 <Custom_STM_Event_Handler+0x1e8>
              break;
 800da86:	e0e4      	b.n	800dc52 <Custom_STM_Event_Handler+0x3a2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_AMBI_TEMP_NOTIFY_DISABLED_EVT;
 800da88:	2310      	movs	r3, #16
 800da8a:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800da8c:	f107 030c 	add.w	r3, r7, #12
 800da90:	4618      	mov	r0, r3
 800da92:	f7fe fdef 	bl	800c674 <Custom_STM_App_Notification>
                break;
 800da96:	e0dc      	b.n	800dc52 <Custom_STM_Event_Handler+0x3a2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_AMBI_TEMP_NOTIFY_ENABLED_EVT;
 800da98:	230f      	movs	r3, #15
 800da9a:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800da9c:	f107 030c 	add.w	r3, r7, #12
 800daa0:	4618      	mov	r0, r3
 800daa2:	f7fe fde7 	bl	800c674 <Custom_STM_App_Notification>
                break;
 800daa6:	e0d4      	b.n	800dc52 <Custom_STM_Event_Handler+0x3a2>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomEcHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800daa8:	69fb      	ldr	r3, [r7, #28]
 800daaa:	885b      	ldrh	r3, [r3, #2]
 800daac:	b29b      	uxth	r3, r3
 800daae:	461a      	mov	r2, r3
 800dab0:	4b3c      	ldr	r3, [pc, #240]	; (800dba4 <Custom_STM_Event_Handler+0x2f4>)
 800dab2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800dab4:	3302      	adds	r3, #2
 800dab6:	429a      	cmp	r2, r3
 800dab8:	d119      	bne.n	800daee <Custom_STM_Event_Handler+0x23e>
            return_value = SVCCTL_EvtAckFlowEnable;
 800daba:	2301      	movs	r3, #1
 800dabc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch (attribute_modified->Attr_Data[0])
 800dac0:	69fb      	ldr	r3, [r7, #28]
 800dac2:	7a1b      	ldrb	r3, [r3, #8]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d002      	beq.n	800dace <Custom_STM_Event_Handler+0x21e>
 800dac8:	2b01      	cmp	r3, #1
 800daca:	d008      	beq.n	800dade <Custom_STM_Event_Handler+0x22e>
              break;
 800dacc:	e0c1      	b.n	800dc52 <Custom_STM_Event_Handler+0x3a2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_EC_NOTIFY_DISABLED_EVT;
 800dace:	2317      	movs	r3, #23
 800dad0:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800dad2:	f107 030c 	add.w	r3, r7, #12
 800dad6:	4618      	mov	r0, r3
 800dad8:	f7fe fdcc 	bl	800c674 <Custom_STM_App_Notification>
                break;
 800dadc:	e0b9      	b.n	800dc52 <Custom_STM_Event_Handler+0x3a2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_EC_NOTIFY_ENABLED_EVT;
 800dade:	2316      	movs	r3, #22
 800dae0:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800dae2:	f107 030c 	add.w	r3, r7, #12
 800dae6:	4618      	mov	r0, r3
 800dae8:	f7fe fdc4 	bl	800c674 <Custom_STM_App_Notification>
                break;
 800daec:	e0b1      	b.n	800dc52 <Custom_STM_Event_Handler+0x3a2>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomPwr_GdHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800daee:	69fb      	ldr	r3, [r7, #28]
 800daf0:	885b      	ldrh	r3, [r3, #2]
 800daf2:	b29b      	uxth	r3, r3
 800daf4:	461a      	mov	r2, r3
 800daf6:	4b2b      	ldr	r3, [pc, #172]	; (800dba4 <Custom_STM_Event_Handler+0x2f4>)
 800daf8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dafa:	3302      	adds	r3, #2
 800dafc:	429a      	cmp	r2, r3
 800dafe:	d119      	bne.n	800db34 <Custom_STM_Event_Handler+0x284>
            return_value = SVCCTL_EvtAckFlowEnable;
 800db00:	2301      	movs	r3, #1
 800db02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch (attribute_modified->Attr_Data[0])
 800db06:	69fb      	ldr	r3, [r7, #28]
 800db08:	7a1b      	ldrb	r3, [r3, #8]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d002      	beq.n	800db14 <Custom_STM_Event_Handler+0x264>
 800db0e:	2b01      	cmp	r3, #1
 800db10:	d008      	beq.n	800db24 <Custom_STM_Event_Handler+0x274>
              break;
 800db12:	e09e      	b.n	800dc52 <Custom_STM_Event_Handler+0x3a2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_PWR_GD_NOTIFY_DISABLED_EVT;
 800db14:	2319      	movs	r3, #25
 800db16:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800db18:	f107 030c 	add.w	r3, r7, #12
 800db1c:	4618      	mov	r0, r3
 800db1e:	f7fe fda9 	bl	800c674 <Custom_STM_App_Notification>
                break;
 800db22:	e096      	b.n	800dc52 <Custom_STM_Event_Handler+0x3a2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_PWR_GD_NOTIFY_ENABLED_EVT;
 800db24:	2318      	movs	r3, #24
 800db26:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800db28:	f107 030c 	add.w	r3, r7, #12
 800db2c:	4618      	mov	r0, r3
 800db2e:	f7fe fda1 	bl	800c674 <Custom_STM_App_Notification>
                break;
 800db32:	e08e      	b.n	800dc52 <Custom_STM_Event_Handler+0x3a2>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomS_THdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800db34:	69fb      	ldr	r3, [r7, #28]
 800db36:	885b      	ldrh	r3, [r3, #2]
 800db38:	b29b      	uxth	r3, r3
 800db3a:	461a      	mov	r2, r3
 800db3c:	4b19      	ldr	r3, [pc, #100]	; (800dba4 <Custom_STM_Event_Handler+0x2f4>)
 800db3e:	895b      	ldrh	r3, [r3, #10]
 800db40:	3301      	adds	r3, #1
 800db42:	429a      	cmp	r2, r3
 800db44:	d112      	bne.n	800db6c <Custom_STM_Event_Handler+0x2bc>
            return_value = SVCCTL_EvtAckFlowEnable;
 800db46:	2301      	movs	r3, #1
 800db48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Notification.Custom_Evt_Opcode = CUSTOM_STM_S_T_WRITE_NO_RESP_EVT;
 800db4c:	2305      	movs	r3, #5
 800db4e:	733b      	strb	r3, [r7, #12]
				Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800db50:	69fb      	ldr	r3, [r7, #28]
 800db52:	88db      	ldrh	r3, [r3, #6]
 800db54:	b29b      	uxth	r3, r3
 800db56:	b2db      	uxtb	r3, r3
 800db58:	753b      	strb	r3, [r7, #20]
				Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800db5a:	69fb      	ldr	r3, [r7, #28]
 800db5c:	3308      	adds	r3, #8
 800db5e:	613b      	str	r3, [r7, #16]
				Custom_STM_App_Notification(&Notification);
 800db60:	f107 030c 	add.w	r3, r7, #12
 800db64:	4618      	mov	r0, r3
 800db66:	f7fe fd85 	bl	800c674 <Custom_STM_App_Notification>
          break;
 800db6a:	e148      	b.n	800ddfe <Custom_STM_Event_Handler+0x54e>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomOtaHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800db6c:	69fb      	ldr	r3, [r7, #28]
 800db6e:	885b      	ldrh	r3, [r3, #2]
 800db70:	b29b      	uxth	r3, r3
 800db72:	461a      	mov	r2, r3
 800db74:	4b0b      	ldr	r3, [pc, #44]	; (800dba4 <Custom_STM_Event_Handler+0x2f4>)
 800db76:	8adb      	ldrh	r3, [r3, #22]
 800db78:	3301      	adds	r3, #1
 800db7a:	429a      	cmp	r2, r3
 800db7c:	d114      	bne.n	800dba8 <Custom_STM_Event_Handler+0x2f8>
            return_value = SVCCTL_EvtAckFlowEnable;
 800db7e:	2301      	movs	r3, #1
 800db80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Notification.Custom_Evt_Opcode = CUSTOM_STM_OTA_WRITE_NO_RESP_EVT;
 800db84:	230e      	movs	r3, #14
 800db86:	733b      	strb	r3, [r7, #12]
				Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800db88:	69fb      	ldr	r3, [r7, #28]
 800db8a:	88db      	ldrh	r3, [r3, #6]
 800db8c:	b29b      	uxth	r3, r3
 800db8e:	b2db      	uxtb	r3, r3
 800db90:	753b      	strb	r3, [r7, #20]
				Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800db92:	69fb      	ldr	r3, [r7, #28]
 800db94:	3308      	adds	r3, #8
 800db96:	613b      	str	r3, [r7, #16]
				Custom_STM_App_Notification(&Notification);
 800db98:	f107 030c 	add.w	r3, r7, #12
 800db9c:	4618      	mov	r0, r3
 800db9e:	f7fe fd69 	bl	800c674 <Custom_STM_App_Notification>
          break;
 800dba2:	e12c      	b.n	800ddfe <Custom_STM_Event_Handler+0x54e>
 800dba4:	200008e8 	.word	0x200008e8
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomT_IntHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800dba8:	69fb      	ldr	r3, [r7, #28]
 800dbaa:	885b      	ldrh	r3, [r3, #2]
 800dbac:	b29b      	uxth	r3, r3
 800dbae:	461a      	mov	r2, r3
 800dbb0:	4b98      	ldr	r3, [pc, #608]	; (800de14 <Custom_STM_Event_Handler+0x564>)
 800dbb2:	8b5b      	ldrh	r3, [r3, #26]
 800dbb4:	3301      	adds	r3, #1
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	d112      	bne.n	800dbe0 <Custom_STM_Event_Handler+0x330>
            return_value = SVCCTL_EvtAckFlowEnable;
 800dbba:	2301      	movs	r3, #1
 800dbbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            Notification.Custom_Evt_Opcode = CUSTOM_STM_T_INT_WRITE_NO_RESP_EVT;
 800dbc0:	2312      	movs	r3, #18
 800dbc2:	733b      	strb	r3, [r7, #12]
            Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800dbc4:	69fb      	ldr	r3, [r7, #28]
 800dbc6:	88db      	ldrh	r3, [r3, #6]
 800dbc8:	b29b      	uxth	r3, r3
 800dbca:	b2db      	uxtb	r3, r3
 800dbcc:	753b      	strb	r3, [r7, #20]
            Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800dbce:	69fb      	ldr	r3, [r7, #28]
 800dbd0:	3308      	adds	r3, #8
 800dbd2:	613b      	str	r3, [r7, #16]
            Custom_STM_App_Notification(&Notification);
 800dbd4:	f107 030c 	add.w	r3, r7, #12
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f7fe fd4b 	bl	800c674 <Custom_STM_App_Notification>
          break;
 800dbde:	e10e      	b.n	800ddfe <Custom_STM_Event_Handler+0x54e>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomTdHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800dbe0:	69fb      	ldr	r3, [r7, #28]
 800dbe2:	885b      	ldrh	r3, [r3, #2]
 800dbe4:	b29b      	uxth	r3, r3
 800dbe6:	461a      	mov	r2, r3
 800dbe8:	4b8a      	ldr	r3, [pc, #552]	; (800de14 <Custom_STM_Event_Handler+0x564>)
 800dbea:	8c1b      	ldrh	r3, [r3, #32]
 800dbec:	3301      	adds	r3, #1
 800dbee:	429a      	cmp	r2, r3
 800dbf0:	d112      	bne.n	800dc18 <Custom_STM_Event_Handler+0x368>
            return_value = SVCCTL_EvtAckFlowEnable;
 800dbf2:	2301      	movs	r3, #1
 800dbf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Notification.Custom_Evt_Opcode = CUSTOM_STM_TD_WRITE_NO_RESP_EVT;
 800dbf8:	2315      	movs	r3, #21
 800dbfa:	733b      	strb	r3, [r7, #12]
				Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800dbfc:	69fb      	ldr	r3, [r7, #28]
 800dbfe:	88db      	ldrh	r3, [r3, #6]
 800dc00:	b29b      	uxth	r3, r3
 800dc02:	b2db      	uxtb	r3, r3
 800dc04:	753b      	strb	r3, [r7, #20]
				Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800dc06:	69fb      	ldr	r3, [r7, #28]
 800dc08:	3308      	adds	r3, #8
 800dc0a:	613b      	str	r3, [r7, #16]
				Custom_STM_App_Notification(&Notification);
 800dc0c:	f107 030c 	add.w	r3, r7, #12
 800dc10:	4618      	mov	r0, r3
 800dc12:	f7fe fd2f 	bl	800c674 <Custom_STM_App_Notification>
          break;
 800dc16:	e0f2      	b.n	800ddfe <Custom_STM_Event_Handler+0x54e>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomMdHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800dc18:	69fb      	ldr	r3, [r7, #28]
 800dc1a:	885b      	ldrh	r3, [r3, #2]
 800dc1c:	b29b      	uxth	r3, r3
 800dc1e:	461a      	mov	r2, r3
 800dc20:	4b7c      	ldr	r3, [pc, #496]	; (800de14 <Custom_STM_Event_Handler+0x564>)
 800dc22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc24:	3301      	adds	r3, #1
 800dc26:	429a      	cmp	r2, r3
 800dc28:	f040 80e9 	bne.w	800ddfe <Custom_STM_Event_Handler+0x54e>
            return_value = SVCCTL_EvtAckFlowEnable;
 800dc2c:	2301      	movs	r3, #1
 800dc2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            Notification.Custom_Evt_Opcode = CUSTOM_STM_MD_WRITE_NO_RESP_EVT;
 800dc32:	231c      	movs	r3, #28
 800dc34:	733b      	strb	r3, [r7, #12]
            Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800dc36:	69fb      	ldr	r3, [r7, #28]
 800dc38:	88db      	ldrh	r3, [r3, #6]
 800dc3a:	b29b      	uxth	r3, r3
 800dc3c:	b2db      	uxtb	r3, r3
 800dc3e:	753b      	strb	r3, [r7, #20]
            Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800dc40:	69fb      	ldr	r3, [r7, #28]
 800dc42:	3308      	adds	r3, #8
 800dc44:	613b      	str	r3, [r7, #16]
            Custom_STM_App_Notification(&Notification);
 800dc46:	f107 030c 	add.w	r3, r7, #12
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f7fe fd12 	bl	800c674 <Custom_STM_App_Notification>
          break;
 800dc50:	e0d5      	b.n	800ddfe <Custom_STM_Event_Handler+0x54e>
 800dc52:	e0d4      	b.n	800ddfe <Custom_STM_Event_Handler+0x54e>
          read_req = (aci_gatt_read_permit_req_event_rp0*)blecore_evt->data;
 800dc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc56:	3302      	adds	r3, #2
 800dc58:	623b      	str	r3, [r7, #32]
          if (read_req->Attribute_Handle == (CustomContext.CustomLevelHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800dc5a:	6a3b      	ldr	r3, [r7, #32]
 800dc5c:	885b      	ldrh	r3, [r3, #2]
 800dc5e:	b29b      	uxth	r3, r3
 800dc60:	461a      	mov	r2, r3
 800dc62:	4b6c      	ldr	r3, [pc, #432]	; (800de14 <Custom_STM_Event_Handler+0x564>)
 800dc64:	885b      	ldrh	r3, [r3, #2]
 800dc66:	3301      	adds	r3, #1
 800dc68:	429a      	cmp	r2, r3
 800dc6a:	d110      	bne.n	800dc8e <Custom_STM_Event_Handler+0x3de>
            return_value = SVCCTL_EvtAckFlowEnable;
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Notification.Custom_Evt_Opcode=CUSTOM_STM_LEVEL_READ_EVT;
 800dc72:	2300      	movs	r3, #0
 800dc74:	733b      	strb	r3, [r7, #12]
				Custom_STM_App_Notification(&Notification);
 800dc76:	f107 030c 	add.w	r3, r7, #12
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f7fe fcfa 	bl	800c674 <Custom_STM_App_Notification>
            aci_gatt_allow_read(read_req->Connection_Handle);
 800dc80:	6a3b      	ldr	r3, [r7, #32]
 800dc82:	881b      	ldrh	r3, [r3, #0]
 800dc84:	b29b      	uxth	r3, r3
 800dc86:	4618      	mov	r0, r3
 800dc88:	f009 f9db 	bl	8017042 <aci_gatt_allow_read>
          break;
 800dc8c:	e0b9      	b.n	800de02 <Custom_STM_Event_Handler+0x552>
          else if (read_req->Attribute_Handle == (CustomContext.CustomIr_THdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800dc8e:	6a3b      	ldr	r3, [r7, #32]
 800dc90:	885b      	ldrh	r3, [r3, #2]
 800dc92:	b29b      	uxth	r3, r3
 800dc94:	461a      	mov	r2, r3
 800dc96:	4b5f      	ldr	r3, [pc, #380]	; (800de14 <Custom_STM_Event_Handler+0x564>)
 800dc98:	88db      	ldrh	r3, [r3, #6]
 800dc9a:	3301      	adds	r3, #1
 800dc9c:	429a      	cmp	r2, r3
 800dc9e:	d110      	bne.n	800dcc2 <Custom_STM_Event_Handler+0x412>
            return_value = SVCCTL_EvtAckFlowEnable;
 800dca0:	2301      	movs	r3, #1
 800dca2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            Notification.Custom_Evt_Opcode=CUSTOM_STM_IR_T_READ_EVT;
 800dca6:	2301      	movs	r3, #1
 800dca8:	733b      	strb	r3, [r7, #12]
            Custom_STM_App_Notification(&Notification);
 800dcaa:	f107 030c 	add.w	r3, r7, #12
 800dcae:	4618      	mov	r0, r3
 800dcb0:	f7fe fce0 	bl	800c674 <Custom_STM_App_Notification>
            aci_gatt_allow_read(read_req->Connection_Handle);
 800dcb4:	6a3b      	ldr	r3, [r7, #32]
 800dcb6:	881b      	ldrh	r3, [r3, #0]
 800dcb8:	b29b      	uxth	r3, r3
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f009 f9c1 	bl	8017042 <aci_gatt_allow_read>
          break;
 800dcc0:	e09f      	b.n	800de02 <Custom_STM_Event_Handler+0x552>
          else if (read_req->Attribute_Handle == (CustomContext.CustomA_THdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800dcc2:	6a3b      	ldr	r3, [r7, #32]
 800dcc4:	885b      	ldrh	r3, [r3, #2]
 800dcc6:	b29b      	uxth	r3, r3
 800dcc8:	461a      	mov	r2, r3
 800dcca:	4b52      	ldr	r3, [pc, #328]	; (800de14 <Custom_STM_Event_Handler+0x564>)
 800dccc:	891b      	ldrh	r3, [r3, #8]
 800dcce:	3301      	adds	r3, #1
 800dcd0:	429a      	cmp	r2, r3
 800dcd2:	d110      	bne.n	800dcf6 <Custom_STM_Event_Handler+0x446>
            return_value = SVCCTL_EvtAckFlowEnable;
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Notification.Custom_Evt_Opcode=CUSTOM_STM_A_T_READ_EVT;
 800dcda:	2304      	movs	r3, #4
 800dcdc:	733b      	strb	r3, [r7, #12]
				Custom_STM_App_Notification(&Notification);
 800dcde:	f107 030c 	add.w	r3, r7, #12
 800dce2:	4618      	mov	r0, r3
 800dce4:	f7fe fcc6 	bl	800c674 <Custom_STM_App_Notification>
            aci_gatt_allow_read(read_req->Connection_Handle);
 800dce8:	6a3b      	ldr	r3, [r7, #32]
 800dcea:	881b      	ldrh	r3, [r3, #0]
 800dcec:	b29b      	uxth	r3, r3
 800dcee:	4618      	mov	r0, r3
 800dcf0:	f009 f9a7 	bl	8017042 <aci_gatt_allow_read>
          break;
 800dcf4:	e085      	b.n	800de02 <Custom_STM_Event_Handler+0x552>
          else if (read_req->Attribute_Handle == (CustomContext.CustomT_IntHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800dcf6:	6a3b      	ldr	r3, [r7, #32]
 800dcf8:	885b      	ldrh	r3, [r3, #2]
 800dcfa:	b29b      	uxth	r3, r3
 800dcfc:	461a      	mov	r2, r3
 800dcfe:	4b45      	ldr	r3, [pc, #276]	; (800de14 <Custom_STM_Event_Handler+0x564>)
 800dd00:	8b5b      	ldrh	r3, [r3, #26]
 800dd02:	3301      	adds	r3, #1
 800dd04:	429a      	cmp	r2, r3
 800dd06:	d110      	bne.n	800dd2a <Custom_STM_Event_Handler+0x47a>
            return_value = SVCCTL_EvtAckFlowEnable;
 800dd08:	2301      	movs	r3, #1
 800dd0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            Notification.Custom_Evt_Opcode=CUSTOM_STM_T_INT_READ_EVT;
 800dd0e:	2311      	movs	r3, #17
 800dd10:	733b      	strb	r3, [r7, #12]
            Custom_STM_App_Notification(&Notification);
 800dd12:	f107 030c 	add.w	r3, r7, #12
 800dd16:	4618      	mov	r0, r3
 800dd18:	f7fe fcac 	bl	800c674 <Custom_STM_App_Notification>
            aci_gatt_allow_read(read_req->Connection_Handle);
 800dd1c:	6a3b      	ldr	r3, [r7, #32]
 800dd1e:	881b      	ldrh	r3, [r3, #0]
 800dd20:	b29b      	uxth	r3, r3
 800dd22:	4618      	mov	r0, r3
 800dd24:	f009 f98d 	bl	8017042 <aci_gatt_allow_read>
          break;
 800dd28:	e06b      	b.n	800de02 <Custom_STM_Event_Handler+0x552>
          else if (read_req->Attribute_Handle == (CustomContext.CustomAcclxHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800dd2a:	6a3b      	ldr	r3, [r7, #32]
 800dd2c:	885b      	ldrh	r3, [r3, #2]
 800dd2e:	b29b      	uxth	r3, r3
 800dd30:	461a      	mov	r2, r3
 800dd32:	4b38      	ldr	r3, [pc, #224]	; (800de14 <Custom_STM_Event_Handler+0x564>)
 800dd34:	8bdb      	ldrh	r3, [r3, #30]
 800dd36:	3301      	adds	r3, #1
 800dd38:	429a      	cmp	r2, r3
 800dd3a:	d110      	bne.n	800dd5e <Custom_STM_Event_Handler+0x4ae>
            return_value = SVCCTL_EvtAckFlowEnable;
 800dd3c:	2301      	movs	r3, #1
 800dd3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Notification.Custom_Evt_Opcode=CUSTOM_STM_ACCLX_READ_EVT;
 800dd42:	2313      	movs	r3, #19
 800dd44:	733b      	strb	r3, [r7, #12]
				Custom_STM_App_Notification(&Notification);
 800dd46:	f107 030c 	add.w	r3, r7, #12
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	f7fe fc92 	bl	800c674 <Custom_STM_App_Notification>
            aci_gatt_allow_read(read_req->Connection_Handle);
 800dd50:	6a3b      	ldr	r3, [r7, #32]
 800dd52:	881b      	ldrh	r3, [r3, #0]
 800dd54:	b29b      	uxth	r3, r3
 800dd56:	4618      	mov	r0, r3
 800dd58:	f009 f973 	bl	8017042 <aci_gatt_allow_read>
          break;
 800dd5c:	e051      	b.n	800de02 <Custom_STM_Event_Handler+0x552>
          else if (read_req->Attribute_Handle == (CustomContext.CustomTdHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800dd5e:	6a3b      	ldr	r3, [r7, #32]
 800dd60:	885b      	ldrh	r3, [r3, #2]
 800dd62:	b29b      	uxth	r3, r3
 800dd64:	461a      	mov	r2, r3
 800dd66:	4b2b      	ldr	r3, [pc, #172]	; (800de14 <Custom_STM_Event_Handler+0x564>)
 800dd68:	8c1b      	ldrh	r3, [r3, #32]
 800dd6a:	3301      	adds	r3, #1
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	d110      	bne.n	800dd92 <Custom_STM_Event_Handler+0x4e2>
            return_value = SVCCTL_EvtAckFlowEnable;
 800dd70:	2301      	movs	r3, #1
 800dd72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Notification.Custom_Evt_Opcode=CUSTOM_STM_TD_READ_EVT;
 800dd76:	2314      	movs	r3, #20
 800dd78:	733b      	strb	r3, [r7, #12]
				Custom_STM_App_Notification(&Notification);
 800dd7a:	f107 030c 	add.w	r3, r7, #12
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f7fe fc78 	bl	800c674 <Custom_STM_App_Notification>
            aci_gatt_allow_read(read_req->Connection_Handle);
 800dd84:	6a3b      	ldr	r3, [r7, #32]
 800dd86:	881b      	ldrh	r3, [r3, #0]
 800dd88:	b29b      	uxth	r3, r3
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f009 f959 	bl	8017042 <aci_gatt_allow_read>
          break;
 800dd90:	e037      	b.n	800de02 <Custom_STM_Event_Handler+0x552>
          else if (read_req->Attribute_Handle == (CustomContext.CustomSoftware_Revision_StringHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800dd92:	6a3b      	ldr	r3, [r7, #32]
 800dd94:	885b      	ldrh	r3, [r3, #2]
 800dd96:	b29b      	uxth	r3, r3
 800dd98:	461a      	mov	r2, r3
 800dd9a:	4b1e      	ldr	r3, [pc, #120]	; (800de14 <Custom_STM_Event_Handler+0x564>)
 800dd9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800dd9e:	3301      	adds	r3, #1
 800dda0:	429a      	cmp	r2, r3
 800dda2:	d110      	bne.n	800ddc6 <Custom_STM_Event_Handler+0x516>
            return_value = SVCCTL_EvtAckFlowEnable;
 800dda4:	2301      	movs	r3, #1
 800dda6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Notification.Custom_Evt_Opcode=CUSTOM_STM_SOFTWARE_REVISION_STRING_READ_EVT;
 800ddaa:	231a      	movs	r3, #26
 800ddac:	733b      	strb	r3, [r7, #12]
				Custom_STM_App_Notification(&Notification);
 800ddae:	f107 030c 	add.w	r3, r7, #12
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f7fe fc5e 	bl	800c674 <Custom_STM_App_Notification>
            aci_gatt_allow_read(read_req->Connection_Handle);
 800ddb8:	6a3b      	ldr	r3, [r7, #32]
 800ddba:	881b      	ldrh	r3, [r3, #0]
 800ddbc:	b29b      	uxth	r3, r3
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	f009 f93f 	bl	8017042 <aci_gatt_allow_read>
          break;
 800ddc4:	e01d      	b.n	800de02 <Custom_STM_Event_Handler+0x552>
          else if (read_req->Attribute_Handle == (CustomContext.CustomMdHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800ddc6:	6a3b      	ldr	r3, [r7, #32]
 800ddc8:	885b      	ldrh	r3, [r3, #2]
 800ddca:	b29b      	uxth	r3, r3
 800ddcc:	461a      	mov	r2, r3
 800ddce:	4b11      	ldr	r3, [pc, #68]	; (800de14 <Custom_STM_Event_Handler+0x564>)
 800ddd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ddd2:	3301      	adds	r3, #1
 800ddd4:	429a      	cmp	r2, r3
 800ddd6:	d114      	bne.n	800de02 <Custom_STM_Event_Handler+0x552>
            return_value = SVCCTL_EvtAckFlowEnable;
 800ddd8:	2301      	movs	r3, #1
 800ddda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            Notification.Custom_Evt_Opcode=CUSTOM_STM_MD_READ_EVT;
 800ddde:	231b      	movs	r3, #27
 800dde0:	733b      	strb	r3, [r7, #12]
            Custom_STM_App_Notification(&Notification);
 800dde2:	f107 030c 	add.w	r3, r7, #12
 800dde6:	4618      	mov	r0, r3
 800dde8:	f7fe fc44 	bl	800c674 <Custom_STM_App_Notification>
            aci_gatt_allow_read(read_req->Connection_Handle);
 800ddec:	6a3b      	ldr	r3, [r7, #32]
 800ddee:	881b      	ldrh	r3, [r3, #0]
 800ddf0:	b29b      	uxth	r3, r3
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f009 f925 	bl	8017042 <aci_gatt_allow_read>
          break;
 800ddf8:	e003      	b.n	800de02 <Custom_STM_Event_Handler+0x552>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800ddfa:	bf00      	nop
 800ddfc:	e004      	b.n	800de08 <Custom_STM_Event_Handler+0x558>
          break;
 800ddfe:	bf00      	nop
 800de00:	e002      	b.n	800de08 <Custom_STM_Event_Handler+0x558>
          break;
 800de02:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800de04:	e000      	b.n	800de08 <Custom_STM_Event_Handler+0x558>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800de06:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800de08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}/* end Custom_STM_Event_Handler */
 800de0c:	4618      	mov	r0, r3
 800de0e:	3730      	adds	r7, #48	; 0x30
 800de10:	46bd      	mov	sp, r7
 800de12:	bd80      	pop	{r7, pc}
 800de14:	200008e8 	.word	0x200008e8

0800de18 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b08c      	sub	sp, #48	; 0x30
 800de1c:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800de1e:	2392      	movs	r3, #146	; 0x92
 800de20:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800de22:	48d7      	ldr	r0, [pc, #860]	; (800e180 <SVCCTL_InitCustomSvc+0x368>)
 800de24:	f00a f8c0 	bl	8017fa8 <SVCCTL_RegisterSvcHandler>
   *                              = 3
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 3;
 800de28:	2303      	movs	r3, #3
 800de2a:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
	/* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_BATTERY_SERVICE_UUID(uuid.Char_UUID_128);
 800de2c:	238f      	movs	r3, #143	; 0x8f
 800de2e:	713b      	strb	r3, [r7, #4]
 800de30:	23e5      	movs	r3, #229	; 0xe5
 800de32:	717b      	strb	r3, [r7, #5]
 800de34:	23b3      	movs	r3, #179	; 0xb3
 800de36:	71bb      	strb	r3, [r7, #6]
 800de38:	23d5      	movs	r3, #213	; 0xd5
 800de3a:	71fb      	strb	r3, [r7, #7]
 800de3c:	232e      	movs	r3, #46	; 0x2e
 800de3e:	723b      	strb	r3, [r7, #8]
 800de40:	237f      	movs	r3, #127	; 0x7f
 800de42:	727b      	strb	r3, [r7, #9]
 800de44:	234a      	movs	r3, #74	; 0x4a
 800de46:	72bb      	strb	r3, [r7, #10]
 800de48:	2398      	movs	r3, #152	; 0x98
 800de4a:	72fb      	strb	r3, [r7, #11]
 800de4c:	232a      	movs	r3, #42	; 0x2a
 800de4e:	733b      	strb	r3, [r7, #12]
 800de50:	2348      	movs	r3, #72	; 0x48
 800de52:	737b      	strb	r3, [r7, #13]
 800de54:	237a      	movs	r3, #122	; 0x7a
 800de56:	73bb      	strb	r3, [r7, #14]
 800de58:	23cc      	movs	r3, #204	; 0xcc
 800de5a:	73fb      	strb	r3, [r7, #15]
 800de5c:	230f      	movs	r3, #15
 800de5e:	743b      	strb	r3, [r7, #16]
 800de60:	2318      	movs	r3, #24
 800de62:	747b      	strb	r3, [r7, #17]
 800de64:	2300      	movs	r3, #0
 800de66:	74bb      	strb	r3, [r7, #18]
 800de68:	2300      	movs	r3, #0
 800de6a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800de6c:	7dbb      	ldrb	r3, [r7, #22]
 800de6e:	1d39      	adds	r1, r7, #4
 800de70:	4ac4      	ldr	r2, [pc, #784]	; (800e184 <SVCCTL_InitCustomSvc+0x36c>)
 800de72:	9200      	str	r2, [sp, #0]
 800de74:	2201      	movs	r2, #1
 800de76:	2002      	movs	r0, #2
 800de78:	f008 fe5c 	bl	8016b34 <aci_gatt_add_service>
 800de7c:	4603      	mov	r3, r0
 800de7e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  level
   */
  COPY_LEVEL_UUID(uuid.Char_UUID_128);
 800de80:	2319      	movs	r3, #25
 800de82:	713b      	strb	r3, [r7, #4]
 800de84:	23ed      	movs	r3, #237	; 0xed
 800de86:	717b      	strb	r3, [r7, #5]
 800de88:	2382      	movs	r3, #130	; 0x82
 800de8a:	71bb      	strb	r3, [r7, #6]
 800de8c:	23ae      	movs	r3, #174	; 0xae
 800de8e:	71fb      	strb	r3, [r7, #7]
 800de90:	23ed      	movs	r3, #237	; 0xed
 800de92:	723b      	strb	r3, [r7, #8]
 800de94:	2321      	movs	r3, #33	; 0x21
 800de96:	727b      	strb	r3, [r7, #9]
 800de98:	234c      	movs	r3, #76	; 0x4c
 800de9a:	72bb      	strb	r3, [r7, #10]
 800de9c:	239d      	movs	r3, #157	; 0x9d
 800de9e:	72fb      	strb	r3, [r7, #11]
 800dea0:	2341      	movs	r3, #65	; 0x41
 800dea2:	733b      	strb	r3, [r7, #12]
 800dea4:	2345      	movs	r3, #69	; 0x45
 800dea6:	737b      	strb	r3, [r7, #13]
 800dea8:	2322      	movs	r3, #34	; 0x22
 800deaa:	73bb      	strb	r3, [r7, #14]
 800deac:	238e      	movs	r3, #142	; 0x8e
 800deae:	73fb      	strb	r3, [r7, #15]
 800deb0:	2319      	movs	r3, #25
 800deb2:	743b      	strb	r3, [r7, #16]
 800deb4:	232a      	movs	r3, #42	; 0x2a
 800deb6:	747b      	strb	r3, [r7, #17]
 800deb8:	2300      	movs	r3, #0
 800deba:	74bb      	strb	r3, [r7, #18]
 800debc:	2300      	movs	r3, #0
 800debe:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomBat_SerHdle,
 800dec0:	4bb0      	ldr	r3, [pc, #704]	; (800e184 <SVCCTL_InitCustomSvc+0x36c>)
 800dec2:	8818      	ldrh	r0, [r3, #0]
 800dec4:	4bb0      	ldr	r3, [pc, #704]	; (800e188 <SVCCTL_InitCustomSvc+0x370>)
 800dec6:	781b      	ldrb	r3, [r3, #0]
 800dec8:	b29b      	uxth	r3, r3
 800deca:	1d3a      	adds	r2, r7, #4
 800decc:	49af      	ldr	r1, [pc, #700]	; (800e18c <SVCCTL_InitCustomSvc+0x374>)
 800dece:	9105      	str	r1, [sp, #20]
 800ded0:	2100      	movs	r1, #0
 800ded2:	9104      	str	r1, [sp, #16]
 800ded4:	2110      	movs	r1, #16
 800ded6:	9103      	str	r1, [sp, #12]
 800ded8:	2104      	movs	r1, #4
 800deda:	9102      	str	r1, [sp, #8]
 800dedc:	2104      	movs	r1, #4
 800dede:	9101      	str	r1, [sp, #4]
 800dee0:	2102      	movs	r1, #2
 800dee2:	9100      	str	r1, [sp, #0]
 800dee4:	2102      	movs	r1, #2
 800dee6:	f008 fefb 	bl	8016ce0 <aci_gatt_add_char>
 800deea:	4603      	mov	r3, r0
 800deec:	75fb      	strb	r3, [r7, #23]
   *                              = 14
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 14;
 800deee:	230e      	movs	r3, #14
 800def0:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
	/* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_TEMPERATURE_UUID(uuid.Char_UUID_128);
 800def2:	233d      	movs	r3, #61	; 0x3d
 800def4:	713b      	strb	r3, [r7, #4]
 800def6:	2392      	movs	r3, #146	; 0x92
 800def8:	717b      	strb	r3, [r7, #5]
 800defa:	23b4      	movs	r3, #180	; 0xb4
 800defc:	71bb      	strb	r3, [r7, #6]
 800defe:	2399      	movs	r3, #153	; 0x99
 800df00:	71fb      	strb	r3, [r7, #7]
 800df02:	238b      	movs	r3, #139	; 0x8b
 800df04:	723b      	strb	r3, [r7, #8]
 800df06:	2330      	movs	r3, #48	; 0x30
 800df08:	727b      	strb	r3, [r7, #9]
 800df0a:	23d1      	movs	r3, #209	; 0xd1
 800df0c:	72bb      	strb	r3, [r7, #10]
 800df0e:	23a0      	movs	r3, #160	; 0xa0
 800df10:	72fb      	strb	r3, [r7, #11]
 800df12:	2357      	movs	r3, #87	; 0x57
 800df14:	733b      	strb	r3, [r7, #12]
 800df16:	2344      	movs	r3, #68	; 0x44
 800df18:	737b      	strb	r3, [r7, #13]
 800df1a:	23a2      	movs	r3, #162	; 0xa2
 800df1c:	73bb      	strb	r3, [r7, #14]
 800df1e:	2393      	movs	r3, #147	; 0x93
 800df20:	73fb      	strb	r3, [r7, #15]
 800df22:	2312      	movs	r3, #18
 800df24:	743b      	strb	r3, [r7, #16]
 800df26:	2332      	movs	r3, #50	; 0x32
 800df28:	747b      	strb	r3, [r7, #17]
 800df2a:	23c8      	movs	r3, #200	; 0xc8
 800df2c:	74bb      	strb	r3, [r7, #18]
 800df2e:	2361      	movs	r3, #97	; 0x61
 800df30:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800df32:	7dbb      	ldrb	r3, [r7, #22]
 800df34:	1d39      	adds	r1, r7, #4
 800df36:	4a96      	ldr	r2, [pc, #600]	; (800e190 <SVCCTL_InitCustomSvc+0x378>)
 800df38:	9200      	str	r2, [sp, #0]
 800df3a:	2201      	movs	r2, #1
 800df3c:	2002      	movs	r0, #2
 800df3e:	f008 fdf9 	bl	8016b34 <aci_gatt_add_service>
 800df42:	4603      	mov	r3, r0
 800df44:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  IR_temperature
   */
  COPY_IR_TEMPERATURE_UUID(uuid.Char_UUID_128);
 800df46:	2353      	movs	r3, #83	; 0x53
 800df48:	713b      	strb	r3, [r7, #4]
 800df4a:	23d5      	movs	r3, #213	; 0xd5
 800df4c:	717b      	strb	r3, [r7, #5]
 800df4e:	23da      	movs	r3, #218	; 0xda
 800df50:	71bb      	strb	r3, [r7, #6]
 800df52:	2348      	movs	r3, #72	; 0x48
 800df54:	71fb      	strb	r3, [r7, #7]
 800df56:	23f4      	movs	r3, #244	; 0xf4
 800df58:	723b      	strb	r3, [r7, #8]
 800df5a:	237c      	movs	r3, #124	; 0x7c
 800df5c:	727b      	strb	r3, [r7, #9]
 800df5e:	23d8      	movs	r3, #216	; 0xd8
 800df60:	72bb      	strb	r3, [r7, #10]
 800df62:	238f      	movs	r3, #143	; 0x8f
 800df64:	72fb      	strb	r3, [r7, #11]
 800df66:	2360      	movs	r3, #96	; 0x60
 800df68:	733b      	strb	r3, [r7, #12]
 800df6a:	2345      	movs	r3, #69	; 0x45
 800df6c:	737b      	strb	r3, [r7, #13]
 800df6e:	239b      	movs	r3, #155	; 0x9b
 800df70:	73bb      	strb	r3, [r7, #14]
 800df72:	2321      	movs	r3, #33	; 0x21
 800df74:	73fb      	strb	r3, [r7, #15]
 800df76:	2322      	movs	r3, #34	; 0x22
 800df78:	743b      	strb	r3, [r7, #16]
 800df7a:	23c3      	movs	r3, #195	; 0xc3
 800df7c:	747b      	strb	r3, [r7, #17]
 800df7e:	230a      	movs	r3, #10
 800df80:	74bb      	strb	r3, [r7, #18]
 800df82:	233a      	movs	r3, #58	; 0x3a
 800df84:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomTempHdle,
 800df86:	4b7f      	ldr	r3, [pc, #508]	; (800e184 <SVCCTL_InitCustomSvc+0x36c>)
 800df88:	8898      	ldrh	r0, [r3, #4]
 800df8a:	4b82      	ldr	r3, [pc, #520]	; (800e194 <SVCCTL_InitCustomSvc+0x37c>)
 800df8c:	781b      	ldrb	r3, [r3, #0]
 800df8e:	b29b      	uxth	r3, r3
 800df90:	1d3a      	adds	r2, r7, #4
 800df92:	4981      	ldr	r1, [pc, #516]	; (800e198 <SVCCTL_InitCustomSvc+0x380>)
 800df94:	9105      	str	r1, [sp, #20]
 800df96:	2100      	movs	r1, #0
 800df98:	9104      	str	r1, [sp, #16]
 800df9a:	2110      	movs	r1, #16
 800df9c:	9103      	str	r1, [sp, #12]
 800df9e:	2104      	movs	r1, #4
 800dfa0:	9102      	str	r1, [sp, #8]
 800dfa2:	2100      	movs	r1, #0
 800dfa4:	9101      	str	r1, [sp, #4]
 800dfa6:	2112      	movs	r1, #18
 800dfa8:	9100      	str	r1, [sp, #0]
 800dfaa:	2102      	movs	r1, #2
 800dfac:	f008 fe98 	bl	8016ce0 <aci_gatt_add_char>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service2_Char1 */
  /**
   *  Analog_Temperature
   */
  COPY_ANALOG_TEMPERATURE_UUID(uuid.Char_UUID_128);
 800dfb4:	23d0      	movs	r3, #208	; 0xd0
 800dfb6:	713b      	strb	r3, [r7, #4]
 800dfb8:	2346      	movs	r3, #70	; 0x46
 800dfba:	717b      	strb	r3, [r7, #5]
 800dfbc:	233a      	movs	r3, #58	; 0x3a
 800dfbe:	71bb      	strb	r3, [r7, #6]
 800dfc0:	239a      	movs	r3, #154	; 0x9a
 800dfc2:	71fb      	strb	r3, [r7, #7]
 800dfc4:	237a      	movs	r3, #122	; 0x7a
 800dfc6:	723b      	strb	r3, [r7, #8]
 800dfc8:	2382      	movs	r3, #130	; 0x82
 800dfca:	727b      	strb	r3, [r7, #9]
 800dfcc:	2303      	movs	r3, #3
 800dfce:	72bb      	strb	r3, [r7, #10]
 800dfd0:	238c      	movs	r3, #140	; 0x8c
 800dfd2:	72fb      	strb	r3, [r7, #11]
 800dfd4:	2304      	movs	r3, #4
 800dfd6:	733b      	strb	r3, [r7, #12]
 800dfd8:	234b      	movs	r3, #75	; 0x4b
 800dfda:	737b      	strb	r3, [r7, #13]
 800dfdc:	2373      	movs	r3, #115	; 0x73
 800dfde:	73bb      	strb	r3, [r7, #14]
 800dfe0:	236a      	movs	r3, #106	; 0x6a
 800dfe2:	73fb      	strb	r3, [r7, #15]
 800dfe4:	23e2      	movs	r3, #226	; 0xe2
 800dfe6:	743b      	strb	r3, [r7, #16]
 800dfe8:	238c      	movs	r3, #140	; 0x8c
 800dfea:	747b      	strb	r3, [r7, #17]
 800dfec:	23ba      	movs	r3, #186	; 0xba
 800dfee:	74bb      	strb	r3, [r7, #18]
 800dff0:	235a      	movs	r3, #90	; 0x5a
 800dff2:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomTempHdle,
 800dff4:	4b63      	ldr	r3, [pc, #396]	; (800e184 <SVCCTL_InitCustomSvc+0x36c>)
 800dff6:	8898      	ldrh	r0, [r3, #4]
 800dff8:	4b68      	ldr	r3, [pc, #416]	; (800e19c <SVCCTL_InitCustomSvc+0x384>)
 800dffa:	781b      	ldrb	r3, [r3, #0]
 800dffc:	b29b      	uxth	r3, r3
 800dffe:	1d3a      	adds	r2, r7, #4
 800e000:	4967      	ldr	r1, [pc, #412]	; (800e1a0 <SVCCTL_InitCustomSvc+0x388>)
 800e002:	9105      	str	r1, [sp, #20]
 800e004:	2100      	movs	r1, #0
 800e006:	9104      	str	r1, [sp, #16]
 800e008:	2110      	movs	r1, #16
 800e00a:	9103      	str	r1, [sp, #12]
 800e00c:	2104      	movs	r1, #4
 800e00e:	9102      	str	r1, [sp, #8]
 800e010:	2100      	movs	r1, #0
 800e012:	9101      	str	r1, [sp, #4]
 800e014:	2102      	movs	r1, #2
 800e016:	9100      	str	r1, [sp, #0]
 800e018:	2102      	movs	r1, #2
 800e01a:	f008 fe61 	bl	8016ce0 <aci_gatt_add_char>
 800e01e:	4603      	mov	r3, r0
 800e020:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service2_Char2 */
  /**
   *  Set_Temp
   */
  COPY_SET_TEMP_UUID(uuid.Char_UUID_128);
 800e022:	238c      	movs	r3, #140	; 0x8c
 800e024:	713b      	strb	r3, [r7, #4]
 800e026:	23df      	movs	r3, #223	; 0xdf
 800e028:	717b      	strb	r3, [r7, #5]
 800e02a:	23a8      	movs	r3, #168	; 0xa8
 800e02c:	71bb      	strb	r3, [r7, #6]
 800e02e:	23c4      	movs	r3, #196	; 0xc4
 800e030:	71fb      	strb	r3, [r7, #7]
 800e032:	2308      	movs	r3, #8
 800e034:	723b      	strb	r3, [r7, #8]
 800e036:	23b4      	movs	r3, #180	; 0xb4
 800e038:	727b      	strb	r3, [r7, #9]
 800e03a:	23df      	movs	r3, #223	; 0xdf
 800e03c:	72bb      	strb	r3, [r7, #10]
 800e03e:	23a9      	movs	r3, #169	; 0xa9
 800e040:	72fb      	strb	r3, [r7, #11]
 800e042:	23b8      	movs	r3, #184	; 0xb8
 800e044:	733b      	strb	r3, [r7, #12]
 800e046:	2343      	movs	r3, #67	; 0x43
 800e048:	737b      	strb	r3, [r7, #13]
 800e04a:	2345      	movs	r3, #69	; 0x45
 800e04c:	73bb      	strb	r3, [r7, #14]
 800e04e:	2307      	movs	r3, #7
 800e050:	73fb      	strb	r3, [r7, #15]
 800e052:	23c1      	movs	r3, #193	; 0xc1
 800e054:	743b      	strb	r3, [r7, #16]
 800e056:	234b      	movs	r3, #75	; 0x4b
 800e058:	747b      	strb	r3, [r7, #17]
 800e05a:	2324      	movs	r3, #36	; 0x24
 800e05c:	74bb      	strb	r3, [r7, #18]
 800e05e:	230a      	movs	r3, #10
 800e060:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomTempHdle,
 800e062:	4b48      	ldr	r3, [pc, #288]	; (800e184 <SVCCTL_InitCustomSvc+0x36c>)
 800e064:	8898      	ldrh	r0, [r3, #4]
 800e066:	4b4f      	ldr	r3, [pc, #316]	; (800e1a4 <SVCCTL_InitCustomSvc+0x38c>)
 800e068:	781b      	ldrb	r3, [r3, #0]
 800e06a:	b29b      	uxth	r3, r3
 800e06c:	1d3a      	adds	r2, r7, #4
 800e06e:	494e      	ldr	r1, [pc, #312]	; (800e1a8 <SVCCTL_InitCustomSvc+0x390>)
 800e070:	9105      	str	r1, [sp, #20]
 800e072:	2100      	movs	r1, #0
 800e074:	9104      	str	r1, [sp, #16]
 800e076:	2110      	movs	r1, #16
 800e078:	9103      	str	r1, [sp, #12]
 800e07a:	2101      	movs	r1, #1
 800e07c:	9102      	str	r1, [sp, #8]
 800e07e:	2100      	movs	r1, #0
 800e080:	9101      	str	r1, [sp, #4]
 800e082:	2104      	movs	r1, #4
 800e084:	9100      	str	r1, [sp, #0]
 800e086:	2102      	movs	r1, #2
 800e088:	f008 fe2a 	bl	8016ce0 <aci_gatt_add_char>
 800e08c:	4603      	mov	r3, r0
 800e08e:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service2_Char3 */
  /**
   *  Log_Temp
   */
  COPY_LOG_TEMP_UUID(uuid.Char_UUID_128);
 800e090:	2363      	movs	r3, #99	; 0x63
 800e092:	713b      	strb	r3, [r7, #4]
 800e094:	23bf      	movs	r3, #191	; 0xbf
 800e096:	717b      	strb	r3, [r7, #5]
 800e098:	23d4      	movs	r3, #212	; 0xd4
 800e09a:	71bb      	strb	r3, [r7, #6]
 800e09c:	2343      	movs	r3, #67	; 0x43
 800e09e:	71fb      	strb	r3, [r7, #7]
 800e0a0:	2305      	movs	r3, #5
 800e0a2:	723b      	strb	r3, [r7, #8]
 800e0a4:	238b      	movs	r3, #139	; 0x8b
 800e0a6:	727b      	strb	r3, [r7, #9]
 800e0a8:	231d      	movs	r3, #29
 800e0aa:	72bb      	strb	r3, [r7, #10]
 800e0ac:	238b      	movs	r3, #139	; 0x8b
 800e0ae:	72fb      	strb	r3, [r7, #11]
 800e0b0:	23a4      	movs	r3, #164	; 0xa4
 800e0b2:	733b      	strb	r3, [r7, #12]
 800e0b4:	2344      	movs	r3, #68	; 0x44
 800e0b6:	737b      	strb	r3, [r7, #13]
 800e0b8:	2316      	movs	r3, #22
 800e0ba:	73bb      	strb	r3, [r7, #14]
 800e0bc:	236a      	movs	r3, #106	; 0x6a
 800e0be:	73fb      	strb	r3, [r7, #15]
 800e0c0:	23c1      	movs	r3, #193	; 0xc1
 800e0c2:	743b      	strb	r3, [r7, #16]
 800e0c4:	23e7      	movs	r3, #231	; 0xe7
 800e0c6:	747b      	strb	r3, [r7, #17]
 800e0c8:	2372      	movs	r3, #114	; 0x72
 800e0ca:	74bb      	strb	r3, [r7, #18]
 800e0cc:	23d5      	movs	r3, #213	; 0xd5
 800e0ce:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomTempHdle,
 800e0d0:	4b2c      	ldr	r3, [pc, #176]	; (800e184 <SVCCTL_InitCustomSvc+0x36c>)
 800e0d2:	8898      	ldrh	r0, [r3, #4]
 800e0d4:	4b35      	ldr	r3, [pc, #212]	; (800e1ac <SVCCTL_InitCustomSvc+0x394>)
 800e0d6:	781b      	ldrb	r3, [r3, #0]
 800e0d8:	b29b      	uxth	r3, r3
 800e0da:	1d3a      	adds	r2, r7, #4
 800e0dc:	4934      	ldr	r1, [pc, #208]	; (800e1b0 <SVCCTL_InitCustomSvc+0x398>)
 800e0de:	9105      	str	r1, [sp, #20]
 800e0e0:	2101      	movs	r1, #1
 800e0e2:	9104      	str	r1, [sp, #16]
 800e0e4:	2110      	movs	r1, #16
 800e0e6:	9103      	str	r1, [sp, #12]
 800e0e8:	2104      	movs	r1, #4
 800e0ea:	9102      	str	r1, [sp, #8]
 800e0ec:	2100      	movs	r1, #0
 800e0ee:	9101      	str	r1, [sp, #4]
 800e0f0:	2110      	movs	r1, #16
 800e0f2:	9100      	str	r1, [sp, #0]
 800e0f4:	2102      	movs	r1, #2
 800e0f6:	f008 fdf3 	bl	8016ce0 <aci_gatt_add_char>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service2_Char4 */
  /**
   *  Range_Notification
   */
  COPY_RANGE_NOTIFICATION_UUID(uuid.Char_UUID_128);
 800e0fe:	23b3      	movs	r3, #179	; 0xb3
 800e100:	713b      	strb	r3, [r7, #4]
 800e102:	234d      	movs	r3, #77	; 0x4d
 800e104:	717b      	strb	r3, [r7, #5]
 800e106:	235b      	movs	r3, #91	; 0x5b
 800e108:	71bb      	strb	r3, [r7, #6]
 800e10a:	23fa      	movs	r3, #250	; 0xfa
 800e10c:	71fb      	strb	r3, [r7, #7]
 800e10e:	23b1      	movs	r3, #177	; 0xb1
 800e110:	723b      	strb	r3, [r7, #8]
 800e112:	235a      	movs	r3, #90	; 0x5a
 800e114:	727b      	strb	r3, [r7, #9]
 800e116:	2345      	movs	r3, #69	; 0x45
 800e118:	72bb      	strb	r3, [r7, #10]
 800e11a:	23b9      	movs	r3, #185	; 0xb9
 800e11c:	72fb      	strb	r3, [r7, #11]
 800e11e:	2313      	movs	r3, #19
 800e120:	733b      	strb	r3, [r7, #12]
 800e122:	234f      	movs	r3, #79	; 0x4f
 800e124:	737b      	strb	r3, [r7, #13]
 800e126:	236c      	movs	r3, #108	; 0x6c
 800e128:	73bb      	strb	r3, [r7, #14]
 800e12a:	23d9      	movs	r3, #217	; 0xd9
 800e12c:	73fb      	strb	r3, [r7, #15]
 800e12e:	2307      	movs	r3, #7
 800e130:	743b      	strb	r3, [r7, #16]
 800e132:	2348      	movs	r3, #72	; 0x48
 800e134:	747b      	strb	r3, [r7, #17]
 800e136:	231a      	movs	r3, #26
 800e138:	74bb      	strb	r3, [r7, #18]
 800e13a:	235a      	movs	r3, #90	; 0x5a
 800e13c:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomTempHdle,
 800e13e:	4b11      	ldr	r3, [pc, #68]	; (800e184 <SVCCTL_InitCustomSvc+0x36c>)
 800e140:	8898      	ldrh	r0, [r3, #4]
 800e142:	4b1c      	ldr	r3, [pc, #112]	; (800e1b4 <SVCCTL_InitCustomSvc+0x39c>)
 800e144:	781b      	ldrb	r3, [r3, #0]
 800e146:	b29b      	uxth	r3, r3
 800e148:	1d3a      	adds	r2, r7, #4
 800e14a:	491b      	ldr	r1, [pc, #108]	; (800e1b8 <SVCCTL_InitCustomSvc+0x3a0>)
 800e14c:	9105      	str	r1, [sp, #20]
 800e14e:	2100      	movs	r1, #0
 800e150:	9104      	str	r1, [sp, #16]
 800e152:	2110      	movs	r1, #16
 800e154:	9103      	str	r1, [sp, #12]
 800e156:	2100      	movs	r1, #0
 800e158:	9102      	str	r1, [sp, #8]
 800e15a:	2100      	movs	r1, #0
 800e15c:	9101      	str	r1, [sp, #4]
 800e15e:	2110      	movs	r1, #16
 800e160:	9100      	str	r1, [sp, #0]
 800e162:	2102      	movs	r1, #2
 800e164:	f008 fdbc 	bl	8016ce0 <aci_gatt_add_char>
 800e168:	4603      	mov	r3, r0
 800e16a:	75fb      	strb	r3, [r7, #23]
   *                              = 14
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 14;
 800e16c:	230e      	movs	r3, #14
 800e16e:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
	/* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_UV_SENSOR_UUID(uuid.Char_UUID_128);
 800e170:	2302      	movs	r3, #2
 800e172:	713b      	strb	r3, [r7, #4]
 800e174:	2300      	movs	r3, #0
 800e176:	717b      	strb	r3, [r7, #5]
 800e178:	2312      	movs	r3, #18
 800e17a:	71bb      	strb	r3, [r7, #6]
 800e17c:	e01e      	b.n	800e1bc <SVCCTL_InitCustomSvc+0x3a4>
 800e17e:	bf00      	nop
 800e180:	0800d8b1 	.word	0x0800d8b1
 800e184:	200008e8 	.word	0x200008e8
 800e188:	20000068 	.word	0x20000068
 800e18c:	200008ea 	.word	0x200008ea
 800e190:	200008ec 	.word	0x200008ec
 800e194:	20000069 	.word	0x20000069
 800e198:	200008ee 	.word	0x200008ee
 800e19c:	2000006a 	.word	0x2000006a
 800e1a0:	200008f0 	.word	0x200008f0
 800e1a4:	2000006b 	.word	0x2000006b
 800e1a8:	200008f2 	.word	0x200008f2
 800e1ac:	2000006c 	.word	0x2000006c
 800e1b0:	200008f4 	.word	0x200008f4
 800e1b4:	2000006d 	.word	0x2000006d
 800e1b8:	200008f6 	.word	0x200008f6
 800e1bc:	23ac      	movs	r3, #172	; 0xac
 800e1be:	71fb      	strb	r3, [r7, #7]
 800e1c0:	2342      	movs	r3, #66	; 0x42
 800e1c2:	723b      	strb	r3, [r7, #8]
 800e1c4:	2302      	movs	r3, #2
 800e1c6:	727b      	strb	r3, [r7, #9]
 800e1c8:	2356      	movs	r3, #86	; 0x56
 800e1ca:	72bb      	strb	r3, [r7, #10]
 800e1cc:	23be      	movs	r3, #190	; 0xbe
 800e1ce:	72fb      	strb	r3, [r7, #11]
 800e1d0:	23ee      	movs	r3, #238	; 0xee
 800e1d2:	733b      	strb	r3, [r7, #12]
 800e1d4:	2311      	movs	r3, #17
 800e1d6:	737b      	strb	r3, [r7, #13]
 800e1d8:	23b8      	movs	r3, #184	; 0xb8
 800e1da:	73bb      	strb	r3, [r7, #14]
 800e1dc:	232f      	movs	r3, #47	; 0x2f
 800e1de:	73fb      	strb	r3, [r7, #15]
 800e1e0:	2356      	movs	r3, #86	; 0x56
 800e1e2:	743b      	strb	r3, [r7, #16]
 800e1e4:	235b      	movs	r3, #91	; 0x5b
 800e1e6:	747b      	strb	r3, [r7, #17]
 800e1e8:	2359      	movs	r3, #89	; 0x59
 800e1ea:	74bb      	strb	r3, [r7, #18]
 800e1ec:	23fe      	movs	r3, #254	; 0xfe
 800e1ee:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800e1f0:	7dbb      	ldrb	r3, [r7, #22]
 800e1f2:	1d39      	adds	r1, r7, #4
 800e1f4:	4ad3      	ldr	r2, [pc, #844]	; (800e544 <SVCCTL_InitCustomSvc+0x72c>)
 800e1f6:	9200      	str	r2, [sp, #0]
 800e1f8:	2201      	movs	r2, #1
 800e1fa:	2002      	movs	r0, #2
 800e1fc:	f008 fc9a 	bl	8016b34 <aci_gatt_add_service>
 800e200:	4603      	mov	r3, r0
 800e202:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  UV_Value
   */
  COPY_UV_VALUE_UUID(uuid.Char_UUID_128);
 800e204:	2302      	movs	r3, #2
 800e206:	713b      	strb	r3, [r7, #4]
 800e208:	2300      	movs	r3, #0
 800e20a:	717b      	strb	r3, [r7, #5]
 800e20c:	2312      	movs	r3, #18
 800e20e:	71bb      	strb	r3, [r7, #6]
 800e210:	23ac      	movs	r3, #172	; 0xac
 800e212:	71fb      	strb	r3, [r7, #7]
 800e214:	2342      	movs	r3, #66	; 0x42
 800e216:	723b      	strb	r3, [r7, #8]
 800e218:	2302      	movs	r3, #2
 800e21a:	727b      	strb	r3, [r7, #9]
 800e21c:	2356      	movs	r3, #86	; 0x56
 800e21e:	72bb      	strb	r3, [r7, #10]
 800e220:	23be      	movs	r3, #190	; 0xbe
 800e222:	72fb      	strb	r3, [r7, #11]
 800e224:	23ee      	movs	r3, #238	; 0xee
 800e226:	733b      	strb	r3, [r7, #12]
 800e228:	2311      	movs	r3, #17
 800e22a:	737b      	strb	r3, [r7, #13]
 800e22c:	23b8      	movs	r3, #184	; 0xb8
 800e22e:	73bb      	strb	r3, [r7, #14]
 800e230:	232f      	movs	r3, #47	; 0x2f
 800e232:	73fb      	strb	r3, [r7, #15]
 800e234:	2330      	movs	r3, #48	; 0x30
 800e236:	743b      	strb	r3, [r7, #16]
 800e238:	235e      	movs	r3, #94	; 0x5e
 800e23a:	747b      	strb	r3, [r7, #17]
 800e23c:	2359      	movs	r3, #89	; 0x59
 800e23e:	74bb      	strb	r3, [r7, #18]
 800e240:	23fe      	movs	r3, #254	; 0xfe
 800e242:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomUv_SHdle,
 800e244:	4bc0      	ldr	r3, [pc, #768]	; (800e548 <SVCCTL_InitCustomSvc+0x730>)
 800e246:	8a18      	ldrh	r0, [r3, #16]
 800e248:	4bc0      	ldr	r3, [pc, #768]	; (800e54c <SVCCTL_InitCustomSvc+0x734>)
 800e24a:	781b      	ldrb	r3, [r3, #0]
 800e24c:	b29b      	uxth	r3, r3
 800e24e:	1d3a      	adds	r2, r7, #4
 800e250:	49bf      	ldr	r1, [pc, #764]	; (800e550 <SVCCTL_InitCustomSvc+0x738>)
 800e252:	9105      	str	r1, [sp, #20]
 800e254:	2100      	movs	r1, #0
 800e256:	9104      	str	r1, [sp, #16]
 800e258:	2110      	movs	r1, #16
 800e25a:	9103      	str	r1, [sp, #12]
 800e25c:	2100      	movs	r1, #0
 800e25e:	9102      	str	r1, [sp, #8]
 800e260:	2100      	movs	r1, #0
 800e262:	9101      	str	r1, [sp, #4]
 800e264:	2110      	movs	r1, #16
 800e266:	9100      	str	r1, [sp, #0]
 800e268:	2102      	movs	r1, #2
 800e26a:	f008 fd39 	bl	8016ce0 <aci_gatt_add_char>
 800e26e:	4603      	mov	r3, r0
 800e270:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service3_Char1 */
  /**
   *  UV_Log
   */
  COPY_UV_LOG_UUID(uuid.Char_UUID_128);
 800e272:	2302      	movs	r3, #2
 800e274:	713b      	strb	r3, [r7, #4]
 800e276:	2300      	movs	r3, #0
 800e278:	717b      	strb	r3, [r7, #5]
 800e27a:	2312      	movs	r3, #18
 800e27c:	71bb      	strb	r3, [r7, #6]
 800e27e:	23ac      	movs	r3, #172	; 0xac
 800e280:	71fb      	strb	r3, [r7, #7]
 800e282:	2342      	movs	r3, #66	; 0x42
 800e284:	723b      	strb	r3, [r7, #8]
 800e286:	2302      	movs	r3, #2
 800e288:	727b      	strb	r3, [r7, #9]
 800e28a:	2356      	movs	r3, #86	; 0x56
 800e28c:	72bb      	strb	r3, [r7, #10]
 800e28e:	23be      	movs	r3, #190	; 0xbe
 800e290:	72fb      	strb	r3, [r7, #11]
 800e292:	23ee      	movs	r3, #238	; 0xee
 800e294:	733b      	strb	r3, [r7, #12]
 800e296:	2311      	movs	r3, #17
 800e298:	737b      	strb	r3, [r7, #13]
 800e29a:	23b8      	movs	r3, #184	; 0xb8
 800e29c:	73bb      	strb	r3, [r7, #14]
 800e29e:	232f      	movs	r3, #47	; 0x2f
 800e2a0:	73fb      	strb	r3, [r7, #15]
 800e2a2:	2384      	movs	r3, #132	; 0x84
 800e2a4:	743b      	strb	r3, [r7, #16]
 800e2a6:	235f      	movs	r3, #95	; 0x5f
 800e2a8:	747b      	strb	r3, [r7, #17]
 800e2aa:	2359      	movs	r3, #89	; 0x59
 800e2ac:	74bb      	strb	r3, [r7, #18]
 800e2ae:	23fe      	movs	r3, #254	; 0xfe
 800e2b0:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomUv_SHdle,
 800e2b2:	4ba5      	ldr	r3, [pc, #660]	; (800e548 <SVCCTL_InitCustomSvc+0x730>)
 800e2b4:	8a18      	ldrh	r0, [r3, #16]
 800e2b6:	4ba7      	ldr	r3, [pc, #668]	; (800e554 <SVCCTL_InitCustomSvc+0x73c>)
 800e2b8:	781b      	ldrb	r3, [r3, #0]
 800e2ba:	b29b      	uxth	r3, r3
 800e2bc:	1d3a      	adds	r2, r7, #4
 800e2be:	49a6      	ldr	r1, [pc, #664]	; (800e558 <SVCCTL_InitCustomSvc+0x740>)
 800e2c0:	9105      	str	r1, [sp, #20]
 800e2c2:	2101      	movs	r1, #1
 800e2c4:	9104      	str	r1, [sp, #16]
 800e2c6:	2110      	movs	r1, #16
 800e2c8:	9103      	str	r1, [sp, #12]
 800e2ca:	2100      	movs	r1, #0
 800e2cc:	9102      	str	r1, [sp, #8]
 800e2ce:	2100      	movs	r1, #0
 800e2d0:	9101      	str	r1, [sp, #4]
 800e2d2:	2110      	movs	r1, #16
 800e2d4:	9100      	str	r1, [sp, #0]
 800e2d6:	2102      	movs	r1, #2
 800e2d8:	f008 fd02 	bl	8016ce0 <aci_gatt_add_char>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service3_Char2 */
  /**
   *  BLE_CFG_OTA_REBOOT_CHAR
   */
  COPY_BLE_CFG_OTA_REBOOT_CHAR_UUID(uuid.Char_UUID_128);
 800e2e0:	2319      	movs	r3, #25
 800e2e2:	713b      	strb	r3, [r7, #4]
 800e2e4:	23ed      	movs	r3, #237	; 0xed
 800e2e6:	717b      	strb	r3, [r7, #5]
 800e2e8:	2382      	movs	r3, #130	; 0x82
 800e2ea:	71bb      	strb	r3, [r7, #6]
 800e2ec:	23ae      	movs	r3, #174	; 0xae
 800e2ee:	71fb      	strb	r3, [r7, #7]
 800e2f0:	23ed      	movs	r3, #237	; 0xed
 800e2f2:	723b      	strb	r3, [r7, #8]
 800e2f4:	2321      	movs	r3, #33	; 0x21
 800e2f6:	727b      	strb	r3, [r7, #9]
 800e2f8:	234c      	movs	r3, #76	; 0x4c
 800e2fa:	72bb      	strb	r3, [r7, #10]
 800e2fc:	239d      	movs	r3, #157	; 0x9d
 800e2fe:	72fb      	strb	r3, [r7, #11]
 800e300:	2341      	movs	r3, #65	; 0x41
 800e302:	733b      	strb	r3, [r7, #12]
 800e304:	2345      	movs	r3, #69	; 0x45
 800e306:	737b      	strb	r3, [r7, #13]
 800e308:	2322      	movs	r3, #34	; 0x22
 800e30a:	73bb      	strb	r3, [r7, #14]
 800e30c:	238e      	movs	r3, #142	; 0x8e
 800e30e:	73fb      	strb	r3, [r7, #15]
 800e310:	2311      	movs	r3, #17
 800e312:	743b      	strb	r3, [r7, #16]
 800e314:	23fe      	movs	r3, #254	; 0xfe
 800e316:	747b      	strb	r3, [r7, #17]
 800e318:	2300      	movs	r3, #0
 800e31a:	74bb      	strb	r3, [r7, #18]
 800e31c:	2300      	movs	r3, #0
 800e31e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomUv_SHdle,
 800e320:	4b89      	ldr	r3, [pc, #548]	; (800e548 <SVCCTL_InitCustomSvc+0x730>)
 800e322:	8a18      	ldrh	r0, [r3, #16]
 800e324:	4b8d      	ldr	r3, [pc, #564]	; (800e55c <SVCCTL_InitCustomSvc+0x744>)
 800e326:	781b      	ldrb	r3, [r3, #0]
 800e328:	b29b      	uxth	r3, r3
 800e32a:	1d3a      	adds	r2, r7, #4
 800e32c:	498c      	ldr	r1, [pc, #560]	; (800e560 <SVCCTL_InitCustomSvc+0x748>)
 800e32e:	9105      	str	r1, [sp, #20]
 800e330:	2100      	movs	r1, #0
 800e332:	9104      	str	r1, [sp, #16]
 800e334:	2110      	movs	r1, #16
 800e336:	9103      	str	r1, [sp, #12]
 800e338:	2101      	movs	r1, #1
 800e33a:	9102      	str	r1, [sp, #8]
 800e33c:	2100      	movs	r1, #0
 800e33e:	9101      	str	r1, [sp, #4]
 800e340:	2104      	movs	r1, #4
 800e342:	9100      	str	r1, [sp, #0]
 800e344:	2102      	movs	r1, #2
 800e346:	f008 fccb 	bl	8016ce0 <aci_gatt_add_char>
 800e34a:	4603      	mov	r3, r0
 800e34c:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service3_Char3 */
  /**
   *  Ambient_Temperature
   */
  COPY_AMBIENT_TEMPERATURE_UUID(uuid.Char_UUID_128);
 800e34e:	2302      	movs	r3, #2
 800e350:	713b      	strb	r3, [r7, #4]
 800e352:	2300      	movs	r3, #0
 800e354:	717b      	strb	r3, [r7, #5]
 800e356:	2312      	movs	r3, #18
 800e358:	71bb      	strb	r3, [r7, #6]
 800e35a:	23ac      	movs	r3, #172	; 0xac
 800e35c:	71fb      	strb	r3, [r7, #7]
 800e35e:	2342      	movs	r3, #66	; 0x42
 800e360:	723b      	strb	r3, [r7, #8]
 800e362:	2302      	movs	r3, #2
 800e364:	727b      	strb	r3, [r7, #9]
 800e366:	2356      	movs	r3, #86	; 0x56
 800e368:	72bb      	strb	r3, [r7, #10]
 800e36a:	23be      	movs	r3, #190	; 0xbe
 800e36c:	72fb      	strb	r3, [r7, #11]
 800e36e:	23ee      	movs	r3, #238	; 0xee
 800e370:	733b      	strb	r3, [r7, #12]
 800e372:	2311      	movs	r3, #17
 800e374:	737b      	strb	r3, [r7, #13]
 800e376:	23b8      	movs	r3, #184	; 0xb8
 800e378:	73bb      	strb	r3, [r7, #14]
 800e37a:	232f      	movs	r3, #47	; 0x2f
 800e37c:	73fb      	strb	r3, [r7, #15]
 800e37e:	236a      	movs	r3, #106	; 0x6a
 800e380:	743b      	strb	r3, [r7, #16]
 800e382:	2388      	movs	r3, #136	; 0x88
 800e384:	747b      	strb	r3, [r7, #17]
 800e386:	2359      	movs	r3, #89	; 0x59
 800e388:	74bb      	strb	r3, [r7, #18]
 800e38a:	23fe      	movs	r3, #254	; 0xfe
 800e38c:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomUv_SHdle,
 800e38e:	4b6e      	ldr	r3, [pc, #440]	; (800e548 <SVCCTL_InitCustomSvc+0x730>)
 800e390:	8a18      	ldrh	r0, [r3, #16]
 800e392:	4b74      	ldr	r3, [pc, #464]	; (800e564 <SVCCTL_InitCustomSvc+0x74c>)
 800e394:	781b      	ldrb	r3, [r3, #0]
 800e396:	b29b      	uxth	r3, r3
 800e398:	1d3a      	adds	r2, r7, #4
 800e39a:	4973      	ldr	r1, [pc, #460]	; (800e568 <SVCCTL_InitCustomSvc+0x750>)
 800e39c:	9105      	str	r1, [sp, #20]
 800e39e:	2100      	movs	r1, #0
 800e3a0:	9104      	str	r1, [sp, #16]
 800e3a2:	2110      	movs	r1, #16
 800e3a4:	9103      	str	r1, [sp, #12]
 800e3a6:	2100      	movs	r1, #0
 800e3a8:	9102      	str	r1, [sp, #8]
 800e3aa:	2100      	movs	r1, #0
 800e3ac:	9101      	str	r1, [sp, #4]
 800e3ae:	2110      	movs	r1, #16
 800e3b0:	9100      	str	r1, [sp, #0]
 800e3b2:	2102      	movs	r1, #2
 800e3b4:	f008 fc94 	bl	8016ce0 <aci_gatt_add_char>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service3_Char4 */
  /**
   *  TIME_INTERVAL
   */
  COPY_TIME_INTERVAL_UUID(uuid.Char_UUID_128);
 800e3bc:	2302      	movs	r3, #2
 800e3be:	713b      	strb	r3, [r7, #4]
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	717b      	strb	r3, [r7, #5]
 800e3c4:	2312      	movs	r3, #18
 800e3c6:	71bb      	strb	r3, [r7, #6]
 800e3c8:	23ac      	movs	r3, #172	; 0xac
 800e3ca:	71fb      	strb	r3, [r7, #7]
 800e3cc:	2342      	movs	r3, #66	; 0x42
 800e3ce:	723b      	strb	r3, [r7, #8]
 800e3d0:	2302      	movs	r3, #2
 800e3d2:	727b      	strb	r3, [r7, #9]
 800e3d4:	2356      	movs	r3, #86	; 0x56
 800e3d6:	72bb      	strb	r3, [r7, #10]
 800e3d8:	23be      	movs	r3, #190	; 0xbe
 800e3da:	72fb      	strb	r3, [r7, #11]
 800e3dc:	23ee      	movs	r3, #238	; 0xee
 800e3de:	733b      	strb	r3, [r7, #12]
 800e3e0:	2311      	movs	r3, #17
 800e3e2:	737b      	strb	r3, [r7, #13]
 800e3e4:	23b8      	movs	r3, #184	; 0xb8
 800e3e6:	73bb      	strb	r3, [r7, #14]
 800e3e8:	232f      	movs	r3, #47	; 0x2f
 800e3ea:	73fb      	strb	r3, [r7, #15]
 800e3ec:	2384      	movs	r3, #132	; 0x84
 800e3ee:	743b      	strb	r3, [r7, #16]
 800e3f0:	239f      	movs	r3, #159	; 0x9f
 800e3f2:	747b      	strb	r3, [r7, #17]
 800e3f4:	2359      	movs	r3, #89	; 0x59
 800e3f6:	74bb      	strb	r3, [r7, #18]
 800e3f8:	23fe      	movs	r3, #254	; 0xfe
 800e3fa:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomUv_SHdle,
 800e3fc:	4b52      	ldr	r3, [pc, #328]	; (800e548 <SVCCTL_InitCustomSvc+0x730>)
 800e3fe:	8a18      	ldrh	r0, [r3, #16]
 800e400:	4b5a      	ldr	r3, [pc, #360]	; (800e56c <SVCCTL_InitCustomSvc+0x754>)
 800e402:	781b      	ldrb	r3, [r3, #0]
 800e404:	b29b      	uxth	r3, r3
 800e406:	1d3a      	adds	r2, r7, #4
 800e408:	4959      	ldr	r1, [pc, #356]	; (800e570 <SVCCTL_InitCustomSvc+0x758>)
 800e40a:	9105      	str	r1, [sp, #20]
 800e40c:	2100      	movs	r1, #0
 800e40e:	9104      	str	r1, [sp, #16]
 800e410:	2110      	movs	r1, #16
 800e412:	9103      	str	r1, [sp, #12]
 800e414:	2105      	movs	r1, #5
 800e416:	9102      	str	r1, [sp, #8]
 800e418:	2100      	movs	r1, #0
 800e41a:	9101      	str	r1, [sp, #4]
 800e41c:	2106      	movs	r1, #6
 800e41e:	9100      	str	r1, [sp, #0]
 800e420:	2102      	movs	r1, #2
 800e422:	f008 fc5d 	bl	8016ce0 <aci_gatt_add_char>
 800e426:	4603      	mov	r3, r0
 800e428:	75fb      	strb	r3, [r7, #23]
   *                              = 13
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 13;
 800e42a:	230d      	movs	r3, #13
 800e42c:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
	/* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_UTILITY_UUID(uuid.Char_UUID_128);
 800e42e:	2302      	movs	r3, #2
 800e430:	713b      	strb	r3, [r7, #4]
 800e432:	2300      	movs	r3, #0
 800e434:	717b      	strb	r3, [r7, #5]
 800e436:	2312      	movs	r3, #18
 800e438:	71bb      	strb	r3, [r7, #6]
 800e43a:	23ac      	movs	r3, #172	; 0xac
 800e43c:	71fb      	strb	r3, [r7, #7]
 800e43e:	2342      	movs	r3, #66	; 0x42
 800e440:	723b      	strb	r3, [r7, #8]
 800e442:	2302      	movs	r3, #2
 800e444:	727b      	strb	r3, [r7, #9]
 800e446:	2356      	movs	r3, #86	; 0x56
 800e448:	72bb      	strb	r3, [r7, #10]
 800e44a:	23be      	movs	r3, #190	; 0xbe
 800e44c:	72fb      	strb	r3, [r7, #11]
 800e44e:	23ee      	movs	r3, #238	; 0xee
 800e450:	733b      	strb	r3, [r7, #12]
 800e452:	2311      	movs	r3, #17
 800e454:	737b      	strb	r3, [r7, #13]
 800e456:	23b8      	movs	r3, #184	; 0xb8
 800e458:	73bb      	strb	r3, [r7, #14]
 800e45a:	232f      	movs	r3, #47	; 0x2f
 800e45c:	73fb      	strb	r3, [r7, #15]
 800e45e:	23c2      	movs	r3, #194	; 0xc2
 800e460:	743b      	strb	r3, [r7, #16]
 800e462:	2371      	movs	r3, #113	; 0x71
 800e464:	747b      	strb	r3, [r7, #17]
 800e466:	2359      	movs	r3, #89	; 0x59
 800e468:	74bb      	strb	r3, [r7, #18]
 800e46a:	23fe      	movs	r3, #254	; 0xfe
 800e46c:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800e46e:	7dbb      	ldrb	r3, [r7, #22]
 800e470:	1d39      	adds	r1, r7, #4
 800e472:	4a40      	ldr	r2, [pc, #256]	; (800e574 <SVCCTL_InitCustomSvc+0x75c>)
 800e474:	9200      	str	r2, [sp, #0]
 800e476:	2201      	movs	r2, #1
 800e478:	2002      	movs	r0, #2
 800e47a:	f008 fb5b 	bl	8016b34 <aci_gatt_add_service>
 800e47e:	4603      	mov	r3, r0
 800e480:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  Acclerometer
   */
  COPY_ACCLEROMETER_UUID(uuid.Char_UUID_128);
 800e482:	2302      	movs	r3, #2
 800e484:	713b      	strb	r3, [r7, #4]
 800e486:	2300      	movs	r3, #0
 800e488:	717b      	strb	r3, [r7, #5]
 800e48a:	2312      	movs	r3, #18
 800e48c:	71bb      	strb	r3, [r7, #6]
 800e48e:	23ac      	movs	r3, #172	; 0xac
 800e490:	71fb      	strb	r3, [r7, #7]
 800e492:	2342      	movs	r3, #66	; 0x42
 800e494:	723b      	strb	r3, [r7, #8]
 800e496:	2302      	movs	r3, #2
 800e498:	727b      	strb	r3, [r7, #9]
 800e49a:	2356      	movs	r3, #86	; 0x56
 800e49c:	72bb      	strb	r3, [r7, #10]
 800e49e:	23be      	movs	r3, #190	; 0xbe
 800e4a0:	72fb      	strb	r3, [r7, #11]
 800e4a2:	23ee      	movs	r3, #238	; 0xee
 800e4a4:	733b      	strb	r3, [r7, #12]
 800e4a6:	2311      	movs	r3, #17
 800e4a8:	737b      	strb	r3, [r7, #13]
 800e4aa:	23b8      	movs	r3, #184	; 0xb8
 800e4ac:	73bb      	strb	r3, [r7, #14]
 800e4ae:	232f      	movs	r3, #47	; 0x2f
 800e4b0:	73fb      	strb	r3, [r7, #15]
 800e4b2:	23c6      	movs	r3, #198	; 0xc6
 800e4b4:	743b      	strb	r3, [r7, #16]
 800e4b6:	2372      	movs	r3, #114	; 0x72
 800e4b8:	747b      	strb	r3, [r7, #17]
 800e4ba:	2359      	movs	r3, #89	; 0x59
 800e4bc:	74bb      	strb	r3, [r7, #18]
 800e4be:	23fe      	movs	r3, #254	; 0xfe
 800e4c0:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomUtHdle,
 800e4c2:	4b21      	ldr	r3, [pc, #132]	; (800e548 <SVCCTL_InitCustomSvc+0x730>)
 800e4c4:	8b98      	ldrh	r0, [r3, #28]
 800e4c6:	4b2c      	ldr	r3, [pc, #176]	; (800e578 <SVCCTL_InitCustomSvc+0x760>)
 800e4c8:	781b      	ldrb	r3, [r3, #0]
 800e4ca:	b29b      	uxth	r3, r3
 800e4cc:	1d3a      	adds	r2, r7, #4
 800e4ce:	492b      	ldr	r1, [pc, #172]	; (800e57c <SVCCTL_InitCustomSvc+0x764>)
 800e4d0:	9105      	str	r1, [sp, #20]
 800e4d2:	2100      	movs	r1, #0
 800e4d4:	9104      	str	r1, [sp, #16]
 800e4d6:	2110      	movs	r1, #16
 800e4d8:	9103      	str	r1, [sp, #12]
 800e4da:	2104      	movs	r1, #4
 800e4dc:	9102      	str	r1, [sp, #8]
 800e4de:	2100      	movs	r1, #0
 800e4e0:	9101      	str	r1, [sp, #4]
 800e4e2:	2102      	movs	r1, #2
 800e4e4:	9100      	str	r1, [sp, #0]
 800e4e6:	2102      	movs	r1, #2
 800e4e8:	f008 fbfa 	bl	8016ce0 <aci_gatt_add_char>
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service4_Char1 */
  /**
   *  Time_Date
   */
  COPY_TIME_DATE_UUID(uuid.Char_UUID_128);
 800e4f0:	2302      	movs	r3, #2
 800e4f2:	713b      	strb	r3, [r7, #4]
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	717b      	strb	r3, [r7, #5]
 800e4f8:	2312      	movs	r3, #18
 800e4fa:	71bb      	strb	r3, [r7, #6]
 800e4fc:	23ac      	movs	r3, #172	; 0xac
 800e4fe:	71fb      	strb	r3, [r7, #7]
 800e500:	2342      	movs	r3, #66	; 0x42
 800e502:	723b      	strb	r3, [r7, #8]
 800e504:	2302      	movs	r3, #2
 800e506:	727b      	strb	r3, [r7, #9]
 800e508:	2356      	movs	r3, #86	; 0x56
 800e50a:	72bb      	strb	r3, [r7, #10]
 800e50c:	23be      	movs	r3, #190	; 0xbe
 800e50e:	72fb      	strb	r3, [r7, #11]
 800e510:	23ee      	movs	r3, #238	; 0xee
 800e512:	733b      	strb	r3, [r7, #12]
 800e514:	2311      	movs	r3, #17
 800e516:	737b      	strb	r3, [r7, #13]
 800e518:	23b8      	movs	r3, #184	; 0xb8
 800e51a:	73bb      	strb	r3, [r7, #14]
 800e51c:	232f      	movs	r3, #47	; 0x2f
 800e51e:	73fb      	strb	r3, [r7, #15]
 800e520:	2324      	movs	r3, #36	; 0x24
 800e522:	743b      	strb	r3, [r7, #16]
 800e524:	2374      	movs	r3, #116	; 0x74
 800e526:	747b      	strb	r3, [r7, #17]
 800e528:	2359      	movs	r3, #89	; 0x59
 800e52a:	74bb      	strb	r3, [r7, #18]
 800e52c:	23fe      	movs	r3, #254	; 0xfe
 800e52e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomUtHdle,
 800e530:	4b05      	ldr	r3, [pc, #20]	; (800e548 <SVCCTL_InitCustomSvc+0x730>)
 800e532:	8b98      	ldrh	r0, [r3, #28]
 800e534:	4b12      	ldr	r3, [pc, #72]	; (800e580 <SVCCTL_InitCustomSvc+0x768>)
 800e536:	781b      	ldrb	r3, [r3, #0]
 800e538:	b29b      	uxth	r3, r3
 800e53a:	1d3a      	adds	r2, r7, #4
 800e53c:	4911      	ldr	r1, [pc, #68]	; (800e584 <SVCCTL_InitCustomSvc+0x76c>)
 800e53e:	9105      	str	r1, [sp, #20]
 800e540:	2100      	movs	r1, #0
 800e542:	e021      	b.n	800e588 <SVCCTL_InitCustomSvc+0x770>
 800e544:	200008f8 	.word	0x200008f8
 800e548:	200008e8 	.word	0x200008e8
 800e54c:	2000006e 	.word	0x2000006e
 800e550:	200008fa 	.word	0x200008fa
 800e554:	2000006f 	.word	0x2000006f
 800e558:	200008fc 	.word	0x200008fc
 800e55c:	20000070 	.word	0x20000070
 800e560:	200008fe 	.word	0x200008fe
 800e564:	20000071 	.word	0x20000071
 800e568:	20000900 	.word	0x20000900
 800e56c:	20000072 	.word	0x20000072
 800e570:	20000902 	.word	0x20000902
 800e574:	20000904 	.word	0x20000904
 800e578:	20000073 	.word	0x20000073
 800e57c:	20000906 	.word	0x20000906
 800e580:	20000074 	.word	0x20000074
 800e584:	20000908 	.word	0x20000908
 800e588:	9104      	str	r1, [sp, #16]
 800e58a:	2110      	movs	r1, #16
 800e58c:	9103      	str	r1, [sp, #12]
 800e58e:	2105      	movs	r1, #5
 800e590:	9102      	str	r1, [sp, #8]
 800e592:	2100      	movs	r1, #0
 800e594:	9101      	str	r1, [sp, #4]
 800e596:	2106      	movs	r1, #6
 800e598:	9100      	str	r1, [sp, #0]
 800e59a:	2102      	movs	r1, #2
 800e59c:	f008 fba0 	bl	8016ce0 <aci_gatt_add_char>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service4_Char2 */
  /**
   *  EOC
   */
  COPY_EOC_UUID(uuid.Char_UUID_128);
 800e5a4:	2302      	movs	r3, #2
 800e5a6:	713b      	strb	r3, [r7, #4]
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	717b      	strb	r3, [r7, #5]
 800e5ac:	2312      	movs	r3, #18
 800e5ae:	71bb      	strb	r3, [r7, #6]
 800e5b0:	23ac      	movs	r3, #172	; 0xac
 800e5b2:	71fb      	strb	r3, [r7, #7]
 800e5b4:	2342      	movs	r3, #66	; 0x42
 800e5b6:	723b      	strb	r3, [r7, #8]
 800e5b8:	2302      	movs	r3, #2
 800e5ba:	727b      	strb	r3, [r7, #9]
 800e5bc:	2356      	movs	r3, #86	; 0x56
 800e5be:	72bb      	strb	r3, [r7, #10]
 800e5c0:	23be      	movs	r3, #190	; 0xbe
 800e5c2:	72fb      	strb	r3, [r7, #11]
 800e5c4:	23ee      	movs	r3, #238	; 0xee
 800e5c6:	733b      	strb	r3, [r7, #12]
 800e5c8:	2311      	movs	r3, #17
 800e5ca:	737b      	strb	r3, [r7, #13]
 800e5cc:	23b8      	movs	r3, #184	; 0xb8
 800e5ce:	73bb      	strb	r3, [r7, #14]
 800e5d0:	232f      	movs	r3, #47	; 0x2f
 800e5d2:	73fb      	strb	r3, [r7, #15]
 800e5d4:	2332      	movs	r3, #50	; 0x32
 800e5d6:	743b      	strb	r3, [r7, #16]
 800e5d8:	2375      	movs	r3, #117	; 0x75
 800e5da:	747b      	strb	r3, [r7, #17]
 800e5dc:	2359      	movs	r3, #89	; 0x59
 800e5de:	74bb      	strb	r3, [r7, #18]
 800e5e0:	23fe      	movs	r3, #254	; 0xfe
 800e5e2:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomUtHdle,
 800e5e4:	4b67      	ldr	r3, [pc, #412]	; (800e784 <SVCCTL_InitCustomSvc+0x96c>)
 800e5e6:	8b98      	ldrh	r0, [r3, #28]
 800e5e8:	4b67      	ldr	r3, [pc, #412]	; (800e788 <SVCCTL_InitCustomSvc+0x970>)
 800e5ea:	781b      	ldrb	r3, [r3, #0]
 800e5ec:	b29b      	uxth	r3, r3
 800e5ee:	1d3a      	adds	r2, r7, #4
 800e5f0:	4966      	ldr	r1, [pc, #408]	; (800e78c <SVCCTL_InitCustomSvc+0x974>)
 800e5f2:	9105      	str	r1, [sp, #20]
 800e5f4:	2100      	movs	r1, #0
 800e5f6:	9104      	str	r1, [sp, #16]
 800e5f8:	2110      	movs	r1, #16
 800e5fa:	9103      	str	r1, [sp, #12]
 800e5fc:	2100      	movs	r1, #0
 800e5fe:	9102      	str	r1, [sp, #8]
 800e600:	2100      	movs	r1, #0
 800e602:	9101      	str	r1, [sp, #4]
 800e604:	2110      	movs	r1, #16
 800e606:	9100      	str	r1, [sp, #0]
 800e608:	2102      	movs	r1, #2
 800e60a:	f008 fb69 	bl	8016ce0 <aci_gatt_add_char>
 800e60e:	4603      	mov	r3, r0
 800e610:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service4_Char3 */
  /**
   *  PWR_GD
   */
  COPY_PWR_GD_UUID(uuid.Char_UUID_128);
 800e612:	2302      	movs	r3, #2
 800e614:	713b      	strb	r3, [r7, #4]
 800e616:	2300      	movs	r3, #0
 800e618:	717b      	strb	r3, [r7, #5]
 800e61a:	2312      	movs	r3, #18
 800e61c:	71bb      	strb	r3, [r7, #6]
 800e61e:	23ac      	movs	r3, #172	; 0xac
 800e620:	71fb      	strb	r3, [r7, #7]
 800e622:	2342      	movs	r3, #66	; 0x42
 800e624:	723b      	strb	r3, [r7, #8]
 800e626:	2302      	movs	r3, #2
 800e628:	727b      	strb	r3, [r7, #9]
 800e62a:	2356      	movs	r3, #86	; 0x56
 800e62c:	72bb      	strb	r3, [r7, #10]
 800e62e:	23be      	movs	r3, #190	; 0xbe
 800e630:	72fb      	strb	r3, [r7, #11]
 800e632:	23ee      	movs	r3, #238	; 0xee
 800e634:	733b      	strb	r3, [r7, #12]
 800e636:	2311      	movs	r3, #17
 800e638:	737b      	strb	r3, [r7, #13]
 800e63a:	23b8      	movs	r3, #184	; 0xb8
 800e63c:	73bb      	strb	r3, [r7, #14]
 800e63e:	232f      	movs	r3, #47	; 0x2f
 800e640:	73fb      	strb	r3, [r7, #15]
 800e642:	2384      	movs	r3, #132	; 0x84
 800e644:	743b      	strb	r3, [r7, #16]
 800e646:	2378      	movs	r3, #120	; 0x78
 800e648:	747b      	strb	r3, [r7, #17]
 800e64a:	2359      	movs	r3, #89	; 0x59
 800e64c:	74bb      	strb	r3, [r7, #18]
 800e64e:	23fe      	movs	r3, #254	; 0xfe
 800e650:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomUtHdle,
 800e652:	4b4c      	ldr	r3, [pc, #304]	; (800e784 <SVCCTL_InitCustomSvc+0x96c>)
 800e654:	8b98      	ldrh	r0, [r3, #28]
 800e656:	4b4e      	ldr	r3, [pc, #312]	; (800e790 <SVCCTL_InitCustomSvc+0x978>)
 800e658:	781b      	ldrb	r3, [r3, #0]
 800e65a:	b29b      	uxth	r3, r3
 800e65c:	1d3a      	adds	r2, r7, #4
 800e65e:	494d      	ldr	r1, [pc, #308]	; (800e794 <SVCCTL_InitCustomSvc+0x97c>)
 800e660:	9105      	str	r1, [sp, #20]
 800e662:	2100      	movs	r1, #0
 800e664:	9104      	str	r1, [sp, #16]
 800e666:	2110      	movs	r1, #16
 800e668:	9103      	str	r1, [sp, #12]
 800e66a:	2100      	movs	r1, #0
 800e66c:	9102      	str	r1, [sp, #8]
 800e66e:	2100      	movs	r1, #0
 800e670:	9101      	str	r1, [sp, #4]
 800e672:	2110      	movs	r1, #16
 800e674:	9100      	str	r1, [sp, #0]
 800e676:	2102      	movs	r1, #2
 800e678:	f008 fb32 	bl	8016ce0 <aci_gatt_add_char>
 800e67c:	4603      	mov	r3, r0
 800e67e:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service4_Char4 */
  /**
   *  Software_Revision_String
   */
  uuid.Char_UUID_16 = 0x2a28;
 800e680:	f642 2328 	movw	r3, #10792	; 0x2a28
 800e684:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_char(CustomContext.CustomUtHdle,
 800e686:	4b3f      	ldr	r3, [pc, #252]	; (800e784 <SVCCTL_InitCustomSvc+0x96c>)
 800e688:	8b98      	ldrh	r0, [r3, #28]
 800e68a:	4b43      	ldr	r3, [pc, #268]	; (800e798 <SVCCTL_InitCustomSvc+0x980>)
 800e68c:	781b      	ldrb	r3, [r3, #0]
 800e68e:	b29b      	uxth	r3, r3
 800e690:	1d3a      	adds	r2, r7, #4
 800e692:	4942      	ldr	r1, [pc, #264]	; (800e79c <SVCCTL_InitCustomSvc+0x984>)
 800e694:	9105      	str	r1, [sp, #20]
 800e696:	2100      	movs	r1, #0
 800e698:	9104      	str	r1, [sp, #16]
 800e69a:	2110      	movs	r1, #16
 800e69c:	9103      	str	r1, [sp, #12]
 800e69e:	2104      	movs	r1, #4
 800e6a0:	9102      	str	r1, [sp, #8]
 800e6a2:	2104      	movs	r1, #4
 800e6a4:	9101      	str	r1, [sp, #4]
 800e6a6:	2102      	movs	r1, #2
 800e6a8:	9100      	str	r1, [sp, #0]
 800e6aa:	2101      	movs	r1, #1
 800e6ac:	f008 fb18 	bl	8016ce0 <aci_gatt_add_char>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	75fb      	strb	r3, [r7, #23]
   *                              = 3
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 3;
 800e6b4:	2303      	movs	r3, #3
 800e6b6:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
	/* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_OPERATIONMODE_UUID(uuid.Char_UUID_128);
 800e6b8:	235f      	movs	r3, #95	; 0x5f
 800e6ba:	713b      	strb	r3, [r7, #4]
 800e6bc:	236f      	movs	r3, #111	; 0x6f
 800e6be:	717b      	strb	r3, [r7, #5]
 800e6c0:	2307      	movs	r3, #7
 800e6c2:	71bb      	strb	r3, [r7, #6]
 800e6c4:	23ff      	movs	r3, #255	; 0xff
 800e6c6:	71fb      	strb	r3, [r7, #7]
 800e6c8:	235b      	movs	r3, #91	; 0x5b
 800e6ca:	723b      	strb	r3, [r7, #8]
 800e6cc:	23fb      	movs	r3, #251	; 0xfb
 800e6ce:	727b      	strb	r3, [r7, #9]
 800e6d0:	232c      	movs	r3, #44	; 0x2c
 800e6d2:	72bb      	strb	r3, [r7, #10]
 800e6d4:	238c      	movs	r3, #140	; 0x8c
 800e6d6:	72fb      	strb	r3, [r7, #11]
 800e6d8:	23e9      	movs	r3, #233	; 0xe9
 800e6da:	733b      	strb	r3, [r7, #12]
 800e6dc:	2344      	movs	r3, #68	; 0x44
 800e6de:	737b      	strb	r3, [r7, #13]
 800e6e0:	235f      	movs	r3, #95	; 0x5f
 800e6e2:	73bb      	strb	r3, [r7, #14]
 800e6e4:	23e8      	movs	r3, #232	; 0xe8
 800e6e6:	73fb      	strb	r3, [r7, #15]
 800e6e8:	2369      	movs	r3, #105	; 0x69
 800e6ea:	743b      	strb	r3, [r7, #16]
 800e6ec:	23c3      	movs	r3, #195	; 0xc3
 800e6ee:	747b      	strb	r3, [r7, #17]
 800e6f0:	23d0      	movs	r3, #208	; 0xd0
 800e6f2:	74bb      	strb	r3, [r7, #18]
 800e6f4:	232b      	movs	r3, #43	; 0x2b
 800e6f6:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800e6f8:	7dbb      	ldrb	r3, [r7, #22]
 800e6fa:	1d39      	adds	r1, r7, #4
 800e6fc:	4a28      	ldr	r2, [pc, #160]	; (800e7a0 <SVCCTL_InitCustomSvc+0x988>)
 800e6fe:	9200      	str	r2, [sp, #0]
 800e700:	2201      	movs	r2, #1
 800e702:	2002      	movs	r0, #2
 800e704:	f008 fa16 	bl	8016b34 <aci_gatt_add_service>
 800e708:	4603      	mov	r3, r0
 800e70a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  MODE
   */
  COPY_MODE_UUID(uuid.Char_UUID_128);
 800e70c:	2359      	movs	r3, #89	; 0x59
 800e70e:	713b      	strb	r3, [r7, #4]
 800e710:	23ca      	movs	r3, #202	; 0xca
 800e712:	717b      	strb	r3, [r7, #5]
 800e714:	2337      	movs	r3, #55	; 0x37
 800e716:	71bb      	strb	r3, [r7, #6]
 800e718:	2381      	movs	r3, #129	; 0x81
 800e71a:	71fb      	strb	r3, [r7, #7]
 800e71c:	23f5      	movs	r3, #245	; 0xf5
 800e71e:	723b      	strb	r3, [r7, #8]
 800e720:	23ee      	movs	r3, #238	; 0xee
 800e722:	727b      	strb	r3, [r7, #9]
 800e724:	23be      	movs	r3, #190	; 0xbe
 800e726:	72bb      	strb	r3, [r7, #10]
 800e728:	23b8      	movs	r3, #184	; 0xb8
 800e72a:	72fb      	strb	r3, [r7, #11]
 800e72c:	2385      	movs	r3, #133	; 0x85
 800e72e:	733b      	strb	r3, [r7, #12]
 800e730:	2342      	movs	r3, #66	; 0x42
 800e732:	737b      	strb	r3, [r7, #13]
 800e734:	2354      	movs	r3, #84	; 0x54
 800e736:	73bb      	strb	r3, [r7, #14]
 800e738:	238a      	movs	r3, #138	; 0x8a
 800e73a:	73fb      	strb	r3, [r7, #15]
 800e73c:	2352      	movs	r3, #82	; 0x52
 800e73e:	743b      	strb	r3, [r7, #16]
 800e740:	2394      	movs	r3, #148	; 0x94
 800e742:	747b      	strb	r3, [r7, #17]
 800e744:	23f4      	movs	r3, #244	; 0xf4
 800e746:	74bb      	strb	r3, [r7, #18]
 800e748:	2325      	movs	r3, #37	; 0x25
 800e74a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomOp_MHdle,
 800e74c:	4b0d      	ldr	r3, [pc, #52]	; (800e784 <SVCCTL_InitCustomSvc+0x96c>)
 800e74e:	8d18      	ldrh	r0, [r3, #40]	; 0x28
 800e750:	4b14      	ldr	r3, [pc, #80]	; (800e7a4 <SVCCTL_InitCustomSvc+0x98c>)
 800e752:	781b      	ldrb	r3, [r3, #0]
 800e754:	b29b      	uxth	r3, r3
 800e756:	1d3a      	adds	r2, r7, #4
 800e758:	4913      	ldr	r1, [pc, #76]	; (800e7a8 <SVCCTL_InitCustomSvc+0x990>)
 800e75a:	9105      	str	r1, [sp, #20]
 800e75c:	2100      	movs	r1, #0
 800e75e:	9104      	str	r1, [sp, #16]
 800e760:	2110      	movs	r1, #16
 800e762:	9103      	str	r1, [sp, #12]
 800e764:	2105      	movs	r1, #5
 800e766:	9102      	str	r1, [sp, #8]
 800e768:	2100      	movs	r1, #0
 800e76a:	9101      	str	r1, [sp, #4]
 800e76c:	2106      	movs	r1, #6
 800e76e:	9100      	str	r1, [sp, #0]
 800e770:	2102      	movs	r1, #2
 800e772:	f008 fab5 	bl	8016ce0 <aci_gatt_add_char>
 800e776:	4603      	mov	r3, r0
 800e778:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800e77a:	bf00      	nop
}
 800e77c:	3718      	adds	r7, #24
 800e77e:	46bd      	mov	sp, r7
 800e780:	bd80      	pop	{r7, pc}
 800e782:	bf00      	nop
 800e784:	200008e8 	.word	0x200008e8
 800e788:	20000075 	.word	0x20000075
 800e78c:	2000090a 	.word	0x2000090a
 800e790:	20000076 	.word	0x20000076
 800e794:	2000090c 	.word	0x2000090c
 800e798:	20000077 	.word	0x20000077
 800e79c:	2000090e 	.word	0x2000090e
 800e7a0:	20000910 	.word	0x20000910
 800e7a4:	20000078 	.word	0x20000078
 800e7a8:	20000912 	.word	0x20000912

0800e7ac <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b086      	sub	sp, #24
 800e7b0:	af02      	add	r7, sp, #8
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	6039      	str	r1, [r7, #0]
 800e7b6:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800e7b8:	2392      	movs	r3, #146	; 0x92
 800e7ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 800e7bc:	79fb      	ldrb	r3, [r7, #7]
 800e7be:	2b10      	cmp	r3, #16
 800e7c0:	f200 8125 	bhi.w	800ea0e <Custom_STM_App_Update_Char+0x262>
 800e7c4:	a201      	add	r2, pc, #4	; (adr r2, 800e7cc <Custom_STM_App_Update_Char+0x20>)
 800e7c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7ca:	bf00      	nop
 800e7cc:	0800e811 	.word	0x0800e811
 800e7d0:	0800e82f 	.word	0x0800e82f
 800e7d4:	0800e84d 	.word	0x0800e84d
 800e7d8:	0800e86b 	.word	0x0800e86b
 800e7dc:	0800e889 	.word	0x0800e889
 800e7e0:	0800e8a7 	.word	0x0800e8a7
 800e7e4:	0800e8c5 	.word	0x0800e8c5
 800e7e8:	0800e8e3 	.word	0x0800e8e3
 800e7ec:	0800e901 	.word	0x0800e901
 800e7f0:	0800e91f 	.word	0x0800e91f
 800e7f4:	0800e93d 	.word	0x0800e93d
 800e7f8:	0800e95b 	.word	0x0800e95b
 800e7fc:	0800e979 	.word	0x0800e979
 800e800:	0800e997 	.word	0x0800e997
 800e804:	0800e9b5 	.word	0x0800e9b5
 800e808:	0800e9d3 	.word	0x0800e9d3
 800e80c:	0800e9f1 	.word	0x0800e9f1
  {

    case CUSTOM_STM_LEVEL:
      ret = aci_gatt_update_char_value(CustomContext.CustomBat_SerHdle,
 800e810:	4b82      	ldr	r3, [pc, #520]	; (800ea1c <Custom_STM_App_Update_Char+0x270>)
 800e812:	8818      	ldrh	r0, [r3, #0]
 800e814:	4b81      	ldr	r3, [pc, #516]	; (800ea1c <Custom_STM_App_Update_Char+0x270>)
 800e816:	8859      	ldrh	r1, [r3, #2]
 800e818:	4b81      	ldr	r3, [pc, #516]	; (800ea20 <Custom_STM_App_Update_Char+0x274>)
 800e81a:	781a      	ldrb	r2, [r3, #0]
 800e81c:	683b      	ldr	r3, [r7, #0]
 800e81e:	9300      	str	r3, [sp, #0]
 800e820:	4613      	mov	r3, r2
 800e822:	2200      	movs	r2, #0
 800e824:	f008 fb64 	bl	8016ef0 <aci_gatt_update_char_value>
 800e828:	4603      	mov	r3, r0
 800e82a:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value LEVEL command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_1*/
      break;
 800e82c:	e0f0      	b.n	800ea10 <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_IR_T:
      ret = aci_gatt_update_char_value(CustomContext.CustomTempHdle,
 800e82e:	4b7b      	ldr	r3, [pc, #492]	; (800ea1c <Custom_STM_App_Update_Char+0x270>)
 800e830:	8898      	ldrh	r0, [r3, #4]
 800e832:	4b7a      	ldr	r3, [pc, #488]	; (800ea1c <Custom_STM_App_Update_Char+0x270>)
 800e834:	88d9      	ldrh	r1, [r3, #6]
 800e836:	4b7b      	ldr	r3, [pc, #492]	; (800ea24 <Custom_STM_App_Update_Char+0x278>)
 800e838:	781a      	ldrb	r2, [r3, #0]
 800e83a:	683b      	ldr	r3, [r7, #0]
 800e83c:	9300      	str	r3, [sp, #0]
 800e83e:	4613      	mov	r3, r2
 800e840:	2200      	movs	r2, #0
 800e842:	f008 fb55 	bl	8016ef0 <aci_gatt_update_char_value>
 800e846:	4603      	mov	r3, r0
 800e848:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value IR_T command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_2_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_1*/
      break;
 800e84a:	e0e1      	b.n	800ea10 <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_A_T:
      ret = aci_gatt_update_char_value(CustomContext.CustomTempHdle,
 800e84c:	4b73      	ldr	r3, [pc, #460]	; (800ea1c <Custom_STM_App_Update_Char+0x270>)
 800e84e:	8898      	ldrh	r0, [r3, #4]
 800e850:	4b72      	ldr	r3, [pc, #456]	; (800ea1c <Custom_STM_App_Update_Char+0x270>)
 800e852:	8919      	ldrh	r1, [r3, #8]
 800e854:	4b74      	ldr	r3, [pc, #464]	; (800ea28 <Custom_STM_App_Update_Char+0x27c>)
 800e856:	781a      	ldrb	r2, [r3, #0]
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	9300      	str	r3, [sp, #0]
 800e85c:	4613      	mov	r3, r2
 800e85e:	2200      	movs	r2, #0
 800e860:	f008 fb46 	bl	8016ef0 <aci_gatt_update_char_value>
 800e864:	4603      	mov	r3, r0
 800e866:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value A_T command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_2_Char_2*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_2*/
      break;
 800e868:	e0d2      	b.n	800ea10 <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_S_T:
      ret = aci_gatt_update_char_value(CustomContext.CustomTempHdle,
 800e86a:	4b6c      	ldr	r3, [pc, #432]	; (800ea1c <Custom_STM_App_Update_Char+0x270>)
 800e86c:	8898      	ldrh	r0, [r3, #4]
 800e86e:	4b6b      	ldr	r3, [pc, #428]	; (800ea1c <Custom_STM_App_Update_Char+0x270>)
 800e870:	8959      	ldrh	r1, [r3, #10]
 800e872:	4b6e      	ldr	r3, [pc, #440]	; (800ea2c <Custom_STM_App_Update_Char+0x280>)
 800e874:	781a      	ldrb	r2, [r3, #0]
 800e876:	683b      	ldr	r3, [r7, #0]
 800e878:	9300      	str	r3, [sp, #0]
 800e87a:	4613      	mov	r3, r2
 800e87c:	2200      	movs	r2, #0
 800e87e:	f008 fb37 	bl	8016ef0 <aci_gatt_update_char_value>
 800e882:	4603      	mov	r3, r0
 800e884:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value S_T command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_2_Char_3*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_3*/
      break;
 800e886:	e0c3      	b.n	800ea10 <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_L_T:
      ret = aci_gatt_update_char_value(CustomContext.CustomTempHdle,
 800e888:	4b64      	ldr	r3, [pc, #400]	; (800ea1c <Custom_STM_App_Update_Char+0x270>)
 800e88a:	8898      	ldrh	r0, [r3, #4]
 800e88c:	4b63      	ldr	r3, [pc, #396]	; (800ea1c <Custom_STM_App_Update_Char+0x270>)
 800e88e:	8999      	ldrh	r1, [r3, #12]
 800e890:	4b67      	ldr	r3, [pc, #412]	; (800ea30 <Custom_STM_App_Update_Char+0x284>)
 800e892:	781a      	ldrb	r2, [r3, #0]
 800e894:	683b      	ldr	r3, [r7, #0]
 800e896:	9300      	str	r3, [sp, #0]
 800e898:	4613      	mov	r3, r2
 800e89a:	2200      	movs	r2, #0
 800e89c:	f008 fb28 	bl	8016ef0 <aci_gatt_update_char_value>
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value L_T command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_2_Char_4*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_4*/
      break;
 800e8a4:	e0b4      	b.n	800ea10 <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_R_N:
      ret = aci_gatt_update_char_value(CustomContext.CustomTempHdle,
 800e8a6:	4b5d      	ldr	r3, [pc, #372]	; (800ea1c <Custom_STM_App_Update_Char+0x270>)
 800e8a8:	8898      	ldrh	r0, [r3, #4]
 800e8aa:	4b5c      	ldr	r3, [pc, #368]	; (800ea1c <Custom_STM_App_Update_Char+0x270>)
 800e8ac:	89d9      	ldrh	r1, [r3, #14]
 800e8ae:	4b61      	ldr	r3, [pc, #388]	; (800ea34 <Custom_STM_App_Update_Char+0x288>)
 800e8b0:	781a      	ldrb	r2, [r3, #0]
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	9300      	str	r3, [sp, #0]
 800e8b6:	4613      	mov	r3, r2
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	f008 fb19 	bl	8016ef0 <aci_gatt_update_char_value>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value R_N command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_2_Char_5*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_5*/
      break;
 800e8c2:	e0a5      	b.n	800ea10 <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_UV_V:
      ret = aci_gatt_update_char_value(CustomContext.CustomUv_SHdle,
 800e8c4:	4b55      	ldr	r3, [pc, #340]	; (800ea1c <Custom_STM_App_Update_Char+0x270>)
 800e8c6:	8a18      	ldrh	r0, [r3, #16]
 800e8c8:	4b54      	ldr	r3, [pc, #336]	; (800ea1c <Custom_STM_App_Update_Char+0x270>)
 800e8ca:	8a59      	ldrh	r1, [r3, #18]
 800e8cc:	4b5a      	ldr	r3, [pc, #360]	; (800ea38 <Custom_STM_App_Update_Char+0x28c>)
 800e8ce:	781a      	ldrb	r2, [r3, #0]
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	9300      	str	r3, [sp, #0]
 800e8d4:	4613      	mov	r3, r2
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	f008 fb0a 	bl	8016ef0 <aci_gatt_update_char_value>
 800e8dc:	4603      	mov	r3, r0
 800e8de:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value UV_V command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_3_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_3_Char_1*/
      break;
 800e8e0:	e096      	b.n	800ea10 <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_UV_L:
      ret = aci_gatt_update_char_value(CustomContext.CustomUv_SHdle,
 800e8e2:	4b4e      	ldr	r3, [pc, #312]	; (800ea1c <Custom_STM_App_Update_Char+0x270>)
 800e8e4:	8a18      	ldrh	r0, [r3, #16]
 800e8e6:	4b4d      	ldr	r3, [pc, #308]	; (800ea1c <Custom_STM_App_Update_Char+0x270>)
 800e8e8:	8a99      	ldrh	r1, [r3, #20]
 800e8ea:	4b54      	ldr	r3, [pc, #336]	; (800ea3c <Custom_STM_App_Update_Char+0x290>)
 800e8ec:	781a      	ldrb	r2, [r3, #0]
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	9300      	str	r3, [sp, #0]
 800e8f2:	4613      	mov	r3, r2
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	f008 fafb 	bl	8016ef0 <aci_gatt_update_char_value>
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value UV_L command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_3_Char_2*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_3_Char_2*/
      break;
 800e8fe:	e087      	b.n	800ea10 <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_OTA:
      ret = aci_gatt_update_char_value(CustomContext.CustomUv_SHdle,
 800e900:	4b46      	ldr	r3, [pc, #280]	; (800ea1c <Custom_STM_App_Update_Char+0x270>)
 800e902:	8a18      	ldrh	r0, [r3, #16]
 800e904:	4b45      	ldr	r3, [pc, #276]	; (800ea1c <Custom_STM_App_Update_Char+0x270>)
 800e906:	8ad9      	ldrh	r1, [r3, #22]
 800e908:	4b4d      	ldr	r3, [pc, #308]	; (800ea40 <Custom_STM_App_Update_Char+0x294>)
 800e90a:	781a      	ldrb	r2, [r3, #0]
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	9300      	str	r3, [sp, #0]
 800e910:	4613      	mov	r3, r2
 800e912:	2200      	movs	r2, #0
 800e914:	f008 faec 	bl	8016ef0 <aci_gatt_update_char_value>
 800e918:	4603      	mov	r3, r0
 800e91a:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value OTA command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_3_Char_3*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_3_Char_3*/
      break;
 800e91c:	e078      	b.n	800ea10 <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_AMBI_TEMP:
      ret = aci_gatt_update_char_value(CustomContext.CustomUv_SHdle,
 800e91e:	4b3f      	ldr	r3, [pc, #252]	; (800ea1c <Custom_STM_App_Update_Char+0x270>)
 800e920:	8a18      	ldrh	r0, [r3, #16]
 800e922:	4b3e      	ldr	r3, [pc, #248]	; (800ea1c <Custom_STM_App_Update_Char+0x270>)
 800e924:	8b19      	ldrh	r1, [r3, #24]
 800e926:	4b47      	ldr	r3, [pc, #284]	; (800ea44 <Custom_STM_App_Update_Char+0x298>)
 800e928:	781a      	ldrb	r2, [r3, #0]
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	9300      	str	r3, [sp, #0]
 800e92e:	4613      	mov	r3, r2
 800e930:	2200      	movs	r2, #0
 800e932:	f008 fadd 	bl	8016ef0 <aci_gatt_update_char_value>
 800e936:	4603      	mov	r3, r0
 800e938:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value AMBI_TEMP command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_3_Char_4*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_3_Char_4*/
      break;
 800e93a:	e069      	b.n	800ea10 <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_T_INT:
      ret = aci_gatt_update_char_value(CustomContext.CustomUv_SHdle,
 800e93c:	4b37      	ldr	r3, [pc, #220]	; (800ea1c <Custom_STM_App_Update_Char+0x270>)
 800e93e:	8a18      	ldrh	r0, [r3, #16]
 800e940:	4b36      	ldr	r3, [pc, #216]	; (800ea1c <Custom_STM_App_Update_Char+0x270>)
 800e942:	8b59      	ldrh	r1, [r3, #26]
 800e944:	4b40      	ldr	r3, [pc, #256]	; (800ea48 <Custom_STM_App_Update_Char+0x29c>)
 800e946:	781a      	ldrb	r2, [r3, #0]
 800e948:	683b      	ldr	r3, [r7, #0]
 800e94a:	9300      	str	r3, [sp, #0]
 800e94c:	4613      	mov	r3, r2
 800e94e:	2200      	movs	r2, #0
 800e950:	f008 face 	bl	8016ef0 <aci_gatt_update_char_value>
 800e954:	4603      	mov	r3, r0
 800e956:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value T_INT command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_3_Char_5*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_3_Char_5*/
      break;
 800e958:	e05a      	b.n	800ea10 <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_ACCLX:
      ret = aci_gatt_update_char_value(CustomContext.CustomUtHdle,
 800e95a:	4b30      	ldr	r3, [pc, #192]	; (800ea1c <Custom_STM_App_Update_Char+0x270>)
 800e95c:	8b98      	ldrh	r0, [r3, #28]
 800e95e:	4b2f      	ldr	r3, [pc, #188]	; (800ea1c <Custom_STM_App_Update_Char+0x270>)
 800e960:	8bd9      	ldrh	r1, [r3, #30]
 800e962:	4b3a      	ldr	r3, [pc, #232]	; (800ea4c <Custom_STM_App_Update_Char+0x2a0>)
 800e964:	781a      	ldrb	r2, [r3, #0]
 800e966:	683b      	ldr	r3, [r7, #0]
 800e968:	9300      	str	r3, [sp, #0]
 800e96a:	4613      	mov	r3, r2
 800e96c:	2200      	movs	r2, #0
 800e96e:	f008 fabf 	bl	8016ef0 <aci_gatt_update_char_value>
 800e972:	4603      	mov	r3, r0
 800e974:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ACCLX command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_4_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_4_Char_1*/
      break;
 800e976:	e04b      	b.n	800ea10 <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_TD:
      ret = aci_gatt_update_char_value(CustomContext.CustomUtHdle,
 800e978:	4b28      	ldr	r3, [pc, #160]	; (800ea1c <Custom_STM_App_Update_Char+0x270>)
 800e97a:	8b98      	ldrh	r0, [r3, #28]
 800e97c:	4b27      	ldr	r3, [pc, #156]	; (800ea1c <Custom_STM_App_Update_Char+0x270>)
 800e97e:	8c19      	ldrh	r1, [r3, #32]
 800e980:	4b33      	ldr	r3, [pc, #204]	; (800ea50 <Custom_STM_App_Update_Char+0x2a4>)
 800e982:	781a      	ldrb	r2, [r3, #0]
 800e984:	683b      	ldr	r3, [r7, #0]
 800e986:	9300      	str	r3, [sp, #0]
 800e988:	4613      	mov	r3, r2
 800e98a:	2200      	movs	r2, #0
 800e98c:	f008 fab0 	bl	8016ef0 <aci_gatt_update_char_value>
 800e990:	4603      	mov	r3, r0
 800e992:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value TD command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_4_Char_2*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_4_Char_2*/
      break;
 800e994:	e03c      	b.n	800ea10 <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_EC:
      ret = aci_gatt_update_char_value(CustomContext.CustomUtHdle,
 800e996:	4b21      	ldr	r3, [pc, #132]	; (800ea1c <Custom_STM_App_Update_Char+0x270>)
 800e998:	8b98      	ldrh	r0, [r3, #28]
 800e99a:	4b20      	ldr	r3, [pc, #128]	; (800ea1c <Custom_STM_App_Update_Char+0x270>)
 800e99c:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800e99e:	4b2d      	ldr	r3, [pc, #180]	; (800ea54 <Custom_STM_App_Update_Char+0x2a8>)
 800e9a0:	781a      	ldrb	r2, [r3, #0]
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	9300      	str	r3, [sp, #0]
 800e9a6:	4613      	mov	r3, r2
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	f008 faa1 	bl	8016ef0 <aci_gatt_update_char_value>
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value EC command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_4_Char_3*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_4_Char_3*/
      break;
 800e9b2:	e02d      	b.n	800ea10 <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_PWR_GD:
      ret = aci_gatt_update_char_value(CustomContext.CustomUtHdle,
 800e9b4:	4b19      	ldr	r3, [pc, #100]	; (800ea1c <Custom_STM_App_Update_Char+0x270>)
 800e9b6:	8b98      	ldrh	r0, [r3, #28]
 800e9b8:	4b18      	ldr	r3, [pc, #96]	; (800ea1c <Custom_STM_App_Update_Char+0x270>)
 800e9ba:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800e9bc:	4b26      	ldr	r3, [pc, #152]	; (800ea58 <Custom_STM_App_Update_Char+0x2ac>)
 800e9be:	781a      	ldrb	r2, [r3, #0]
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	9300      	str	r3, [sp, #0]
 800e9c4:	4613      	mov	r3, r2
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	f008 fa92 	bl	8016ef0 <aci_gatt_update_char_value>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value PWR_GD command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_4_Char_4*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_4_Char_4*/
      break;
 800e9d0:	e01e      	b.n	800ea10 <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_SOFTWARE_REVISION_STRING:
      ret = aci_gatt_update_char_value(CustomContext.CustomUtHdle,
 800e9d2:	4b12      	ldr	r3, [pc, #72]	; (800ea1c <Custom_STM_App_Update_Char+0x270>)
 800e9d4:	8b98      	ldrh	r0, [r3, #28]
 800e9d6:	4b11      	ldr	r3, [pc, #68]	; (800ea1c <Custom_STM_App_Update_Char+0x270>)
 800e9d8:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
 800e9da:	4b20      	ldr	r3, [pc, #128]	; (800ea5c <Custom_STM_App_Update_Char+0x2b0>)
 800e9dc:	781a      	ldrb	r2, [r3, #0]
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	9300      	str	r3, [sp, #0]
 800e9e2:	4613      	mov	r3, r2
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	f008 fa83 	bl	8016ef0 <aci_gatt_update_char_value>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value SOFTWARE_REVISION_STRING command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_4_Char_5*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_4_Char_5*/
      break;
 800e9ee:	e00f      	b.n	800ea10 <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_MD:
      ret = aci_gatt_update_char_value(CustomContext.CustomOp_MHdle,
 800e9f0:	4b0a      	ldr	r3, [pc, #40]	; (800ea1c <Custom_STM_App_Update_Char+0x270>)
 800e9f2:	8d18      	ldrh	r0, [r3, #40]	; 0x28
 800e9f4:	4b09      	ldr	r3, [pc, #36]	; (800ea1c <Custom_STM_App_Update_Char+0x270>)
 800e9f6:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
 800e9f8:	4b19      	ldr	r3, [pc, #100]	; (800ea60 <Custom_STM_App_Update_Char+0x2b4>)
 800e9fa:	781a      	ldrb	r2, [r3, #0]
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	9300      	str	r3, [sp, #0]
 800ea00:	4613      	mov	r3, r2
 800ea02:	2200      	movs	r2, #0
 800ea04:	f008 fa74 	bl	8016ef0 <aci_gatt_update_char_value>
 800ea08:	4603      	mov	r3, r0
 800ea0a:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value MD command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_5_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_5_Char_1*/
      break;
 800ea0c:	e000      	b.n	800ea10 <Custom_STM_App_Update_Char+0x264>

    default:
      break;
 800ea0e:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 800ea10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea12:	4618      	mov	r0, r3
 800ea14:	3710      	adds	r7, #16
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bd80      	pop	{r7, pc}
 800ea1a:	bf00      	nop
 800ea1c:	200008e8 	.word	0x200008e8
 800ea20:	20000068 	.word	0x20000068
 800ea24:	20000069 	.word	0x20000069
 800ea28:	2000006a 	.word	0x2000006a
 800ea2c:	2000006b 	.word	0x2000006b
 800ea30:	2000006c 	.word	0x2000006c
 800ea34:	2000006d 	.word	0x2000006d
 800ea38:	2000006e 	.word	0x2000006e
 800ea3c:	2000006f 	.word	0x2000006f
 800ea40:	20000070 	.word	0x20000070
 800ea44:	20000071 	.word	0x20000071
 800ea48:	20000072 	.word	0x20000072
 800ea4c:	20000073 	.word	0x20000073
 800ea50:	20000074 	.word	0x20000074
 800ea54:	20000075 	.word	0x20000075
 800ea58:	20000076 	.word	0x20000076
 800ea5c:	20000077 	.word	0x20000077
 800ea60:	20000078 	.word	0x20000078

0800ea64 <LL_PWR_EnableBootC2>:
{
 800ea64:	b480      	push	{r7}
 800ea66:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800ea68:	4b05      	ldr	r3, [pc, #20]	; (800ea80 <LL_PWR_EnableBootC2+0x1c>)
 800ea6a:	68db      	ldr	r3, [r3, #12]
 800ea6c:	4a04      	ldr	r2, [pc, #16]	; (800ea80 <LL_PWR_EnableBootC2+0x1c>)
 800ea6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ea72:	60d3      	str	r3, [r2, #12]
}
 800ea74:	bf00      	nop
 800ea76:	46bd      	mov	sp, r7
 800ea78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7c:	4770      	bx	lr
 800ea7e:	bf00      	nop
 800ea80:	58000400 	.word	0x58000400

0800ea84 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800ea84:	b480      	push	{r7}
 800ea86:	b083      	sub	sp, #12
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800ea8c:	4b06      	ldr	r3, [pc, #24]	; (800eaa8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800ea8e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800ea92:	4905      	ldr	r1, [pc, #20]	; (800eaa8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	4313      	orrs	r3, r2
 800ea98:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800ea9c:	bf00      	nop
 800ea9e:	370c      	adds	r7, #12
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa6:	4770      	bx	lr
 800eaa8:	58000800 	.word	0x58000800

0800eaac <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800eaac:	b480      	push	{r7}
 800eaae:	b083      	sub	sp, #12
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800eab4:	4b05      	ldr	r3, [pc, #20]	; (800eacc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800eab6:	6a1a      	ldr	r2, [r3, #32]
 800eab8:	4904      	ldr	r1, [pc, #16]	; (800eacc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	4313      	orrs	r3, r2
 800eabe:	620b      	str	r3, [r1, #32]
}
 800eac0:	bf00      	nop
 800eac2:	370c      	adds	r7, #12
 800eac4:	46bd      	mov	sp, r7
 800eac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaca:	4770      	bx	lr
 800eacc:	58000800 	.word	0x58000800

0800ead0 <LL_AHB3_GRP1_EnableClock>:
{
 800ead0:	b480      	push	{r7}
 800ead2:	b085      	sub	sp, #20
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800ead8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800eadc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eade:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	4313      	orrs	r3, r2
 800eae6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800eae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800eaec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	4013      	ands	r3, r2
 800eaf2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800eaf4:	68fb      	ldr	r3, [r7, #12]
}
 800eaf6:	bf00      	nop
 800eaf8:	3714      	adds	r7, #20
 800eafa:	46bd      	mov	sp, r7
 800eafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb00:	4770      	bx	lr

0800eb02 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800eb02:	b480      	push	{r7}
 800eb04:	b085      	sub	sp, #20
 800eb06:	af00      	add	r7, sp, #0
 800eb08:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800eb0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800eb0e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800eb12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	4313      	orrs	r3, r2
 800eb1a:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800eb1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800eb22:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	4013      	ands	r3, r2
 800eb2a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800eb2c:	68fb      	ldr	r3, [r7, #12]
}
 800eb2e:	bf00      	nop
 800eb30:	3714      	adds	r7, #20
 800eb32:	46bd      	mov	sp, r7
 800eb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb38:	4770      	bx	lr

0800eb3a <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800eb3a:	b480      	push	{r7}
 800eb3c:	b083      	sub	sp, #12
 800eb3e:	af00      	add	r7, sp, #0
 800eb40:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	601a      	str	r2, [r3, #0]
}
 800eb4e:	bf00      	nop
 800eb50:	370c      	adds	r7, #12
 800eb52:	46bd      	mov	sp, r7
 800eb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb58:	4770      	bx	lr

0800eb5a <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800eb5a:	b480      	push	{r7}
 800eb5c:	b083      	sub	sp, #12
 800eb5e:	af00      	add	r7, sp, #0
 800eb60:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	f043 0201 	orr.w	r2, r3, #1
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	601a      	str	r2, [r3, #0]
}
 800eb6e:	bf00      	nop
 800eb70:	370c      	adds	r7, #12
 800eb72:	46bd      	mov	sp, r7
 800eb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb78:	4770      	bx	lr

0800eb7a <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800eb7a:	b480      	push	{r7}
 800eb7c:	b083      	sub	sp, #12
 800eb7e:	af00      	add	r7, sp, #0
 800eb80:	6078      	str	r0, [r7, #4]
 800eb82:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	685a      	ldr	r2, [r3, #4]
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	041b      	lsls	r3, r3, #16
 800eb8c:	43db      	mvns	r3, r3
 800eb8e:	401a      	ands	r2, r3
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	605a      	str	r2, [r3, #4]
}
 800eb94:	bf00      	nop
 800eb96:	370c      	adds	r7, #12
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9e:	4770      	bx	lr

0800eba0 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800eba0:	b480      	push	{r7}
 800eba2:	b083      	sub	sp, #12
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
 800eba8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	685a      	ldr	r2, [r3, #4]
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	041b      	lsls	r3, r3, #16
 800ebb2:	431a      	orrs	r2, r3
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	605a      	str	r2, [r3, #4]
}
 800ebb8:	bf00      	nop
 800ebba:	370c      	adds	r7, #12
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc2:	4770      	bx	lr

0800ebc4 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800ebc4:	b480      	push	{r7}
 800ebc6:	b083      	sub	sp, #12
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
 800ebcc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	685a      	ldr	r2, [r3, #4]
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	43db      	mvns	r3, r3
 800ebd6:	401a      	ands	r2, r3
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	605a      	str	r2, [r3, #4]
}
 800ebdc:	bf00      	nop
 800ebde:	370c      	adds	r7, #12
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe6:	4770      	bx	lr

0800ebe8 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800ebe8:	b480      	push	{r7}
 800ebea:	b083      	sub	sp, #12
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
 800ebf0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	683a      	ldr	r2, [r7, #0]
 800ebf6:	609a      	str	r2, [r3, #8]
}
 800ebf8:	bf00      	nop
 800ebfa:	370c      	adds	r7, #12
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec02:	4770      	bx	lr

0800ec04 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800ec04:	b480      	push	{r7}
 800ec06:	b083      	sub	sp, #12
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
 800ec0c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800ec0e:	683b      	ldr	r3, [r7, #0]
 800ec10:	041a      	lsls	r2, r3, #16
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	609a      	str	r2, [r3, #8]
}
 800ec16:	bf00      	nop
 800ec18:	370c      	adds	r7, #12
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec20:	4770      	bx	lr

0800ec22 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800ec22:	b480      	push	{r7}
 800ec24:	b083      	sub	sp, #12
 800ec26:	af00      	add	r7, sp, #0
 800ec28:	6078      	str	r0, [r7, #4]
 800ec2a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	68da      	ldr	r2, [r3, #12]
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	4013      	ands	r3, r2
 800ec34:	683a      	ldr	r2, [r7, #0]
 800ec36:	429a      	cmp	r2, r3
 800ec38:	d101      	bne.n	800ec3e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800ec3a:	2301      	movs	r3, #1
 800ec3c:	e000      	b.n	800ec40 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800ec3e:	2300      	movs	r3, #0
}
 800ec40:	4618      	mov	r0, r3
 800ec42:	370c      	adds	r7, #12
 800ec44:	46bd      	mov	sp, r7
 800ec46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4a:	4770      	bx	lr

0800ec4c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	b083      	sub	sp, #12
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
 800ec54:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	69da      	ldr	r2, [r3, #28]
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	4013      	ands	r3, r2
 800ec5e:	683a      	ldr	r2, [r7, #0]
 800ec60:	429a      	cmp	r2, r3
 800ec62:	d101      	bne.n	800ec68 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800ec64:	2301      	movs	r3, #1
 800ec66:	e000      	b.n	800ec6a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800ec68:	2300      	movs	r3, #0
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	370c      	adds	r7, #12
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec74:	4770      	bx	lr
	...

0800ec78 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800ec7c:	2102      	movs	r1, #2
 800ec7e:	4819      	ldr	r0, [pc, #100]	; (800ece4 <HW_IPCC_Rx_Handler+0x6c>)
 800ec80:	f7ff ffe4 	bl	800ec4c <LL_C2_IPCC_IsActiveFlag_CHx>
 800ec84:	4603      	mov	r3, r0
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d009      	beq.n	800ec9e <HW_IPCC_Rx_Handler+0x26>
 800ec8a:	4b16      	ldr	r3, [pc, #88]	; (800ece4 <HW_IPCC_Rx_Handler+0x6c>)
 800ec8c:	685b      	ldr	r3, [r3, #4]
 800ec8e:	43db      	mvns	r3, r3
 800ec90:	f003 0302 	and.w	r3, r3, #2
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d002      	beq.n	800ec9e <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800ec98:	f000 f8da 	bl	800ee50 <HW_IPCC_SYS_EvtHandler>
 800ec9c:	e01f      	b.n	800ecde <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800ec9e:	2101      	movs	r1, #1
 800eca0:	4810      	ldr	r0, [pc, #64]	; (800ece4 <HW_IPCC_Rx_Handler+0x6c>)
 800eca2:	f7ff ffd3 	bl	800ec4c <LL_C2_IPCC_IsActiveFlag_CHx>
 800eca6:	4603      	mov	r3, r0
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d008      	beq.n	800ecbe <HW_IPCC_Rx_Handler+0x46>
 800ecac:	4b0d      	ldr	r3, [pc, #52]	; (800ece4 <HW_IPCC_Rx_Handler+0x6c>)
 800ecae:	685b      	ldr	r3, [r3, #4]
 800ecb0:	f003 0301 	and.w	r3, r3, #1
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d102      	bne.n	800ecbe <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800ecb8:	f000 f88e 	bl	800edd8 <HW_IPCC_BLE_EvtHandler>
 800ecbc:	e00f      	b.n	800ecde <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800ecbe:	2108      	movs	r1, #8
 800ecc0:	4808      	ldr	r0, [pc, #32]	; (800ece4 <HW_IPCC_Rx_Handler+0x6c>)
 800ecc2:	f7ff ffc3 	bl	800ec4c <LL_C2_IPCC_IsActiveFlag_CHx>
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d009      	beq.n	800ece0 <HW_IPCC_Rx_Handler+0x68>
 800eccc:	4b05      	ldr	r3, [pc, #20]	; (800ece4 <HW_IPCC_Rx_Handler+0x6c>)
 800ecce:	685b      	ldr	r3, [r3, #4]
 800ecd0:	43db      	mvns	r3, r3
 800ecd2:	f003 0308 	and.w	r3, r3, #8
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d002      	beq.n	800ece0 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800ecda:	f000 f905 	bl	800eee8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800ecde:	bf00      	nop
 800ece0:	bf00      	nop
}
 800ece2:	bd80      	pop	{r7, pc}
 800ece4:	58000c00 	.word	0x58000c00

0800ece8 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800ecec:	2102      	movs	r1, #2
 800ecee:	481a      	ldr	r0, [pc, #104]	; (800ed58 <HW_IPCC_Tx_Handler+0x70>)
 800ecf0:	f7ff ff97 	bl	800ec22 <LL_C1_IPCC_IsActiveFlag_CHx>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d109      	bne.n	800ed0e <HW_IPCC_Tx_Handler+0x26>
 800ecfa:	4b17      	ldr	r3, [pc, #92]	; (800ed58 <HW_IPCC_Tx_Handler+0x70>)
 800ecfc:	685b      	ldr	r3, [r3, #4]
 800ecfe:	43db      	mvns	r3, r3
 800ed00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d002      	beq.n	800ed0e <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800ed08:	f000 f896 	bl	800ee38 <HW_IPCC_SYS_CmdEvtHandler>
 800ed0c:	e020      	b.n	800ed50 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800ed0e:	2108      	movs	r1, #8
 800ed10:	4811      	ldr	r0, [pc, #68]	; (800ed58 <HW_IPCC_Tx_Handler+0x70>)
 800ed12:	f7ff ff86 	bl	800ec22 <LL_C1_IPCC_IsActiveFlag_CHx>
 800ed16:	4603      	mov	r3, r0
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d109      	bne.n	800ed30 <HW_IPCC_Tx_Handler+0x48>
 800ed1c:	4b0e      	ldr	r3, [pc, #56]	; (800ed58 <HW_IPCC_Tx_Handler+0x70>)
 800ed1e:	685b      	ldr	r3, [r3, #4]
 800ed20:	43db      	mvns	r3, r3
 800ed22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d002      	beq.n	800ed30 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 800ed2a:	f000 f8bf 	bl	800eeac <HW_IPCC_MM_FreeBufHandler>
 800ed2e:	e00f      	b.n	800ed50 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800ed30:	2120      	movs	r1, #32
 800ed32:	4809      	ldr	r0, [pc, #36]	; (800ed58 <HW_IPCC_Tx_Handler+0x70>)
 800ed34:	f7ff ff75 	bl	800ec22 <LL_C1_IPCC_IsActiveFlag_CHx>
 800ed38:	4603      	mov	r3, r0
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d109      	bne.n	800ed52 <HW_IPCC_Tx_Handler+0x6a>
 800ed3e:	4b06      	ldr	r3, [pc, #24]	; (800ed58 <HW_IPCC_Tx_Handler+0x70>)
 800ed40:	685b      	ldr	r3, [r3, #4]
 800ed42:	43db      	mvns	r3, r3
 800ed44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d002      	beq.n	800ed52 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800ed4c:	f000 f850 	bl	800edf0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800ed50:	bf00      	nop
 800ed52:	bf00      	nop
}
 800ed54:	bd80      	pop	{r7, pc}
 800ed56:	bf00      	nop
 800ed58:	58000c00 	.word	0x58000c00

0800ed5c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800ed60:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800ed64:	f7ff fecd 	bl	800eb02 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800ed68:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ed6c:	f7ff fe9e 	bl	800eaac <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800ed70:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ed74:	f7ff fe86 	bl	800ea84 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800ed78:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800ed7a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800ed7c:	f7ff fe72 	bl	800ea64 <LL_PWR_EnableBootC2>

  return;
 800ed80:	bf00      	nop
}
 800ed82:	bd80      	pop	{r7, pc}

0800ed84 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800ed88:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800ed8c:	f7ff fea0 	bl	800ead0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800ed90:	4806      	ldr	r0, [pc, #24]	; (800edac <HW_IPCC_Init+0x28>)
 800ed92:	f7ff fee2 	bl	800eb5a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800ed96:	4805      	ldr	r0, [pc, #20]	; (800edac <HW_IPCC_Init+0x28>)
 800ed98:	f7ff fecf 	bl	800eb3a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800ed9c:	202c      	movs	r0, #44	; 0x2c
 800ed9e:	f001 fe04 	bl	80109aa <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800eda2:	202d      	movs	r0, #45	; 0x2d
 800eda4:	f001 fe01 	bl	80109aa <HAL_NVIC_EnableIRQ>

  return;
 800eda8:	bf00      	nop
}
 800edaa:	bd80      	pop	{r7, pc}
 800edac:	58000c00 	.word	0x58000c00

0800edb0 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800edb4:	2101      	movs	r1, #1
 800edb6:	4802      	ldr	r0, [pc, #8]	; (800edc0 <HW_IPCC_BLE_Init+0x10>)
 800edb8:	f7ff ff04 	bl	800ebc4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800edbc:	bf00      	nop
}
 800edbe:	bd80      	pop	{r7, pc}
 800edc0:	58000c00 	.word	0x58000c00

0800edc4 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800edc8:	2101      	movs	r1, #1
 800edca:	4802      	ldr	r0, [pc, #8]	; (800edd4 <HW_IPCC_BLE_SendCmd+0x10>)
 800edcc:	f7ff ff1a 	bl	800ec04 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800edd0:	bf00      	nop
}
 800edd2:	bd80      	pop	{r7, pc}
 800edd4:	58000c00 	.word	0x58000c00

0800edd8 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800eddc:	f009 f9e2 	bl	80181a4 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800ede0:	2101      	movs	r1, #1
 800ede2:	4802      	ldr	r0, [pc, #8]	; (800edec <HW_IPCC_BLE_EvtHandler+0x14>)
 800ede4:	f7ff ff00 	bl	800ebe8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800ede8:	bf00      	nop
}
 800edea:	bd80      	pop	{r7, pc}
 800edec:	58000c00 	.word	0x58000c00

0800edf0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800edf4:	2120      	movs	r1, #32
 800edf6:	4803      	ldr	r0, [pc, #12]	; (800ee04 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800edf8:	f7ff fed2 	bl	800eba0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800edfc:	f009 fa02 	bl	8018204 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800ee00:	bf00      	nop
}
 800ee02:	bd80      	pop	{r7, pc}
 800ee04:	58000c00 	.word	0x58000c00

0800ee08 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800ee0c:	2102      	movs	r1, #2
 800ee0e:	4802      	ldr	r0, [pc, #8]	; (800ee18 <HW_IPCC_SYS_Init+0x10>)
 800ee10:	f7ff fed8 	bl	800ebc4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800ee14:	bf00      	nop
}
 800ee16:	bd80      	pop	{r7, pc}
 800ee18:	58000c00 	.word	0x58000c00

0800ee1c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800ee20:	2102      	movs	r1, #2
 800ee22:	4804      	ldr	r0, [pc, #16]	; (800ee34 <HW_IPCC_SYS_SendCmd+0x18>)
 800ee24:	f7ff feee 	bl	800ec04 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800ee28:	2102      	movs	r1, #2
 800ee2a:	4802      	ldr	r0, [pc, #8]	; (800ee34 <HW_IPCC_SYS_SendCmd+0x18>)
 800ee2c:	f7ff fea5 	bl	800eb7a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800ee30:	bf00      	nop
}
 800ee32:	bd80      	pop	{r7, pc}
 800ee34:	58000c00 	.word	0x58000c00

0800ee38 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800ee3c:	2102      	movs	r1, #2
 800ee3e:	4803      	ldr	r0, [pc, #12]	; (800ee4c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800ee40:	f7ff feae 	bl	800eba0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800ee44:	f009 fa2e 	bl	80182a4 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800ee48:	bf00      	nop
}
 800ee4a:	bd80      	pop	{r7, pc}
 800ee4c:	58000c00 	.word	0x58000c00

0800ee50 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800ee54:	f009 fa3c 	bl	80182d0 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800ee58:	2102      	movs	r1, #2
 800ee5a:	4802      	ldr	r0, [pc, #8]	; (800ee64 <HW_IPCC_SYS_EvtHandler+0x14>)
 800ee5c:	f7ff fec4 	bl	800ebe8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800ee60:	bf00      	nop
}
 800ee62:	bd80      	pop	{r7, pc}
 800ee64:	58000c00 	.word	0x58000c00

0800ee68 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b082      	sub	sp, #8
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800ee70:	2108      	movs	r1, #8
 800ee72:	480c      	ldr	r0, [pc, #48]	; (800eea4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800ee74:	f7ff fed5 	bl	800ec22 <LL_C1_IPCC_IsActiveFlag_CHx>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d007      	beq.n	800ee8e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800ee7e:	4a0a      	ldr	r2, [pc, #40]	; (800eea8 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800ee84:	2108      	movs	r1, #8
 800ee86:	4807      	ldr	r0, [pc, #28]	; (800eea4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800ee88:	f7ff fe77 	bl	800eb7a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800ee8c:	e006      	b.n	800ee9c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800ee92:	2108      	movs	r1, #8
 800ee94:	4803      	ldr	r0, [pc, #12]	; (800eea4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800ee96:	f7ff feb5 	bl	800ec04 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800ee9a:	bf00      	nop
}
 800ee9c:	3708      	adds	r7, #8
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	bd80      	pop	{r7, pc}
 800eea2:	bf00      	nop
 800eea4:	58000c00 	.word	0x58000c00
 800eea8:	20000914 	.word	0x20000914

0800eeac <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800eeb0:	2108      	movs	r1, #8
 800eeb2:	4806      	ldr	r0, [pc, #24]	; (800eecc <HW_IPCC_MM_FreeBufHandler+0x20>)
 800eeb4:	f7ff fe74 	bl	800eba0 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800eeb8:	4b05      	ldr	r3, [pc, #20]	; (800eed0 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800eebe:	2108      	movs	r1, #8
 800eec0:	4802      	ldr	r0, [pc, #8]	; (800eecc <HW_IPCC_MM_FreeBufHandler+0x20>)
 800eec2:	f7ff fe9f 	bl	800ec04 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800eec6:	bf00      	nop
}
 800eec8:	bd80      	pop	{r7, pc}
 800eeca:	bf00      	nop
 800eecc:	58000c00 	.word	0x58000c00
 800eed0:	20000914 	.word	0x20000914

0800eed4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800eed8:	2108      	movs	r1, #8
 800eeda:	4802      	ldr	r0, [pc, #8]	; (800eee4 <HW_IPCC_TRACES_Init+0x10>)
 800eedc:	f7ff fe72 	bl	800ebc4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800eee0:	bf00      	nop
}
 800eee2:	bd80      	pop	{r7, pc}
 800eee4:	58000c00 	.word	0x58000c00

0800eee8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800eeec:	f009 fa98 	bl	8018420 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800eef0:	2108      	movs	r1, #8
 800eef2:	4802      	ldr	r0, [pc, #8]	; (800eefc <HW_IPCC_TRACES_EvtHandler+0x14>)
 800eef4:	f7ff fe78 	bl	800ebe8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800eef8:	bf00      	nop
}
 800eefa:	bd80      	pop	{r7, pc}
 800eefc:	58000c00 	.word	0x58000c00

0800ef00 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800ef00:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ef02:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ef04:	3304      	adds	r3, #4

0800ef06 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ef06:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ef08:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800ef0a:	d3f9      	bcc.n	800ef00 <CopyDataInit>
  bx lr
 800ef0c:	4770      	bx	lr

0800ef0e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800ef0e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800ef10:	3004      	adds	r0, #4

0800ef12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800ef12:	4288      	cmp	r0, r1
  bcc FillZerobss
 800ef14:	d3fb      	bcc.n	800ef0e <FillZerobss>
  bx lr
 800ef16:	4770      	bx	lr

0800ef18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800ef18:	480c      	ldr	r0, [pc, #48]	; (800ef4c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800ef1a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800ef1c:	f000 f828 	bl	800ef70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800ef20:	480b      	ldr	r0, [pc, #44]	; (800ef50 <LoopForever+0x8>)
 800ef22:	490c      	ldr	r1, [pc, #48]	; (800ef54 <LoopForever+0xc>)
 800ef24:	4a0c      	ldr	r2, [pc, #48]	; (800ef58 <LoopForever+0x10>)
 800ef26:	2300      	movs	r3, #0
 800ef28:	f7ff ffed 	bl	800ef06 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800ef2c:	480b      	ldr	r0, [pc, #44]	; (800ef5c <LoopForever+0x14>)
 800ef2e:	490c      	ldr	r1, [pc, #48]	; (800ef60 <LoopForever+0x18>)
 800ef30:	2300      	movs	r3, #0
 800ef32:	f7ff ffee 	bl	800ef12 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800ef36:	480b      	ldr	r0, [pc, #44]	; (800ef64 <LoopForever+0x1c>)
 800ef38:	490b      	ldr	r1, [pc, #44]	; (800ef68 <LoopForever+0x20>)
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	f7ff ffe9 	bl	800ef12 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800ef40:	f009 fd94 	bl	8018a6c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800ef44:	f7fb fae0 	bl	800a508 <main>

0800ef48 <LoopForever>:

LoopForever:
  b LoopForever
 800ef48:	e7fe      	b.n	800ef48 <LoopForever>
 800ef4a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800ef4c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800ef50:	20000008 	.word	0x20000008
 800ef54:	20000264 	.word	0x20000264
 800ef58:	0801e2a0 	.word	0x0801e2a0
  INIT_BSS _sbss, _ebss
 800ef5c:	200002b0 	.word	0x200002b0
 800ef60:	20000a48 	.word	0x20000a48
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800ef64:	200301e4 	.word	0x200301e4
 800ef68:	20030a67 	.word	0x20030a67

0800ef6c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800ef6c:	e7fe      	b.n	800ef6c <ADC1_IRQHandler>
	...

0800ef70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ef70:	b480      	push	{r7}
 800ef72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800ef74:	4b24      	ldr	r3, [pc, #144]	; (800f008 <SystemInit+0x98>)
 800ef76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ef7a:	4a23      	ldr	r2, [pc, #140]	; (800f008 <SystemInit+0x98>)
 800ef7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ef80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800ef84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ef8e:	f043 0301 	orr.w	r3, r3, #1
 800ef92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800ef94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ef98:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800ef9c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800ef9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800efa2:	681a      	ldr	r2, [r3, #0]
 800efa4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800efa8:	4b18      	ldr	r3, [pc, #96]	; (800f00c <SystemInit+0x9c>)
 800efaa:	4013      	ands	r3, r2
 800efac:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800efae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800efb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800efb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800efba:	f023 0305 	bic.w	r3, r3, #5
 800efbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800efc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800efc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800efca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800efce:	f023 0301 	bic.w	r3, r3, #1
 800efd2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800efd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800efda:	4a0d      	ldr	r2, [pc, #52]	; (800f010 <SystemInit+0xa0>)
 800efdc:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800efde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800efe2:	4a0b      	ldr	r2, [pc, #44]	; (800f010 <SystemInit+0xa0>)
 800efe4:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800efe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800eff0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800eff4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800eff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800effa:	2200      	movs	r2, #0
 800effc:	619a      	str	r2, [r3, #24]
}
 800effe:	bf00      	nop
 800f000:	46bd      	mov	sp, r7
 800f002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f006:	4770      	bx	lr
 800f008:	e000ed00 	.word	0xe000ed00
 800f00c:	faf6fefb 	.word	0xfaf6fefb
 800f010:	22041000 	.word	0x22041000

0800f014 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b082      	sub	sp, #8
 800f018:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800f01a:	2300      	movs	r3, #0
 800f01c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f01e:	4b0c      	ldr	r3, [pc, #48]	; (800f050 <HAL_Init+0x3c>)
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	4a0b      	ldr	r2, [pc, #44]	; (800f050 <HAL_Init+0x3c>)
 800f024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f028:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800f02a:	2003      	movs	r0, #3
 800f02c:	f001 fc98 	bl	8010960 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800f030:	2000      	movs	r0, #0
 800f032:	f000 f80f 	bl	800f054 <HAL_InitTick>
 800f036:	4603      	mov	r3, r0
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d002      	beq.n	800f042 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800f03c:	2301      	movs	r3, #1
 800f03e:	71fb      	strb	r3, [r7, #7]
 800f040:	e001      	b.n	800f046 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800f042:	f7fc fde0 	bl	800bc06 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800f046:	79fb      	ldrb	r3, [r7, #7]
}
 800f048:	4618      	mov	r0, r3
 800f04a:	3708      	adds	r7, #8
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd80      	pop	{r7, pc}
 800f050:	58004000 	.word	0x58004000

0800f054 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b084      	sub	sp, #16
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800f05c:	2300      	movs	r3, #0
 800f05e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800f060:	4b17      	ldr	r3, [pc, #92]	; (800f0c0 <HAL_InitTick+0x6c>)
 800f062:	781b      	ldrb	r3, [r3, #0]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d024      	beq.n	800f0b2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800f068:	f005 f8bc 	bl	80141e4 <HAL_RCC_GetHCLKFreq>
 800f06c:	4602      	mov	r2, r0
 800f06e:	4b14      	ldr	r3, [pc, #80]	; (800f0c0 <HAL_InitTick+0x6c>)
 800f070:	781b      	ldrb	r3, [r3, #0]
 800f072:	4619      	mov	r1, r3
 800f074:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f078:	fbb3 f3f1 	udiv	r3, r3, r1
 800f07c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f080:	4618      	mov	r0, r3
 800f082:	f001 fcae 	bl	80109e2 <HAL_SYSTICK_Config>
 800f086:	4603      	mov	r3, r0
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d10f      	bne.n	800f0ac <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	2b0f      	cmp	r3, #15
 800f090:	d809      	bhi.n	800f0a6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800f092:	2200      	movs	r2, #0
 800f094:	6879      	ldr	r1, [r7, #4]
 800f096:	f04f 30ff 	mov.w	r0, #4294967295
 800f09a:	f001 fc6c 	bl	8010976 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800f09e:	4a09      	ldr	r2, [pc, #36]	; (800f0c4 <HAL_InitTick+0x70>)
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	6013      	str	r3, [r2, #0]
 800f0a4:	e007      	b.n	800f0b6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800f0a6:	2301      	movs	r3, #1
 800f0a8:	73fb      	strb	r3, [r7, #15]
 800f0aa:	e004      	b.n	800f0b6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800f0ac:	2301      	movs	r3, #1
 800f0ae:	73fb      	strb	r3, [r7, #15]
 800f0b0:	e001      	b.n	800f0b6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800f0b2:	2301      	movs	r3, #1
 800f0b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800f0b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	3710      	adds	r7, #16
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	bd80      	pop	{r7, pc}
 800f0c0:	20000084 	.word	0x20000084
 800f0c4:	20000080 	.word	0x20000080

0800f0c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800f0c8:	b480      	push	{r7}
 800f0ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800f0cc:	4b06      	ldr	r3, [pc, #24]	; (800f0e8 <HAL_IncTick+0x20>)
 800f0ce:	781b      	ldrb	r3, [r3, #0]
 800f0d0:	461a      	mov	r2, r3
 800f0d2:	4b06      	ldr	r3, [pc, #24]	; (800f0ec <HAL_IncTick+0x24>)
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	4413      	add	r3, r2
 800f0d8:	4a04      	ldr	r2, [pc, #16]	; (800f0ec <HAL_IncTick+0x24>)
 800f0da:	6013      	str	r3, [r2, #0]
}
 800f0dc:	bf00      	nop
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e4:	4770      	bx	lr
 800f0e6:	bf00      	nop
 800f0e8:	20000084 	.word	0x20000084
 800f0ec:	20000918 	.word	0x20000918

0800f0f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800f0f0:	b480      	push	{r7}
 800f0f2:	af00      	add	r7, sp, #0
  return uwTick;
 800f0f4:	4b03      	ldr	r3, [pc, #12]	; (800f104 <HAL_GetTick+0x14>)
 800f0f6:	681b      	ldr	r3, [r3, #0]
}
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f100:	4770      	bx	lr
 800f102:	bf00      	nop
 800f104:	20000918 	.word	0x20000918

0800f108 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800f108:	b480      	push	{r7}
 800f10a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800f10c:	4b03      	ldr	r3, [pc, #12]	; (800f11c <HAL_GetTickPrio+0x14>)
 800f10e:	681b      	ldr	r3, [r3, #0]
}
 800f110:	4618      	mov	r0, r3
 800f112:	46bd      	mov	sp, r7
 800f114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f118:	4770      	bx	lr
 800f11a:	bf00      	nop
 800f11c:	20000080 	.word	0x20000080

0800f120 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 800f120:	b480      	push	{r7}
 800f122:	af00      	add	r7, sp, #0
  return uwTickFreq;
 800f124:	4b03      	ldr	r3, [pc, #12]	; (800f134 <HAL_GetTickFreq+0x14>)
 800f126:	781b      	ldrb	r3, [r3, #0]
}
 800f128:	4618      	mov	r0, r3
 800f12a:	46bd      	mov	sp, r7
 800f12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f130:	4770      	bx	lr
 800f132:	bf00      	nop
 800f134:	20000084 	.word	0x20000084

0800f138 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800f138:	b480      	push	{r7}
 800f13a:	b083      	sub	sp, #12
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
 800f140:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	689b      	ldr	r3, [r3, #8]
 800f146:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800f14a:	683b      	ldr	r3, [r7, #0]
 800f14c:	431a      	orrs	r2, r3
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800f152:	bf00      	nop
 800f154:	370c      	adds	r7, #12
 800f156:	46bd      	mov	sp, r7
 800f158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15c:	4770      	bx	lr

0800f15e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800f15e:	b480      	push	{r7}
 800f160:	b083      	sub	sp, #12
 800f162:	af00      	add	r7, sp, #0
 800f164:	6078      	str	r0, [r7, #4]
 800f166:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	689b      	ldr	r3, [r3, #8]
 800f16c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	431a      	orrs	r2, r3
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	609a      	str	r2, [r3, #8]
}
 800f178:	bf00      	nop
 800f17a:	370c      	adds	r7, #12
 800f17c:	46bd      	mov	sp, r7
 800f17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f182:	4770      	bx	lr

0800f184 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800f184:	b480      	push	{r7}
 800f186:	b083      	sub	sp, #12
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	689b      	ldr	r3, [r3, #8]
 800f190:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800f194:	4618      	mov	r0, r3
 800f196:	370c      	adds	r7, #12
 800f198:	46bd      	mov	sp, r7
 800f19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19e:	4770      	bx	lr

0800f1a0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800f1a0:	b480      	push	{r7}
 800f1a2:	b087      	sub	sp, #28
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	60f8      	str	r0, [r7, #12]
 800f1a8:	60b9      	str	r1, [r7, #8]
 800f1aa:	607a      	str	r2, [r7, #4]
 800f1ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	3360      	adds	r3, #96	; 0x60
 800f1b2:	461a      	mov	r2, r3
 800f1b4:	68bb      	ldr	r3, [r7, #8]
 800f1b6:	009b      	lsls	r3, r3, #2
 800f1b8:	4413      	add	r3, r2
 800f1ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800f1bc:	697b      	ldr	r3, [r7, #20]
 800f1be:	681a      	ldr	r2, [r3, #0]
 800f1c0:	4b08      	ldr	r3, [pc, #32]	; (800f1e4 <LL_ADC_SetOffset+0x44>)
 800f1c2:	4013      	ands	r3, r2
 800f1c4:	687a      	ldr	r2, [r7, #4]
 800f1c6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800f1ca:	683a      	ldr	r2, [r7, #0]
 800f1cc:	430a      	orrs	r2, r1
 800f1ce:	4313      	orrs	r3, r2
 800f1d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800f1d4:	697b      	ldr	r3, [r7, #20]
 800f1d6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800f1d8:	bf00      	nop
 800f1da:	371c      	adds	r7, #28
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e2:	4770      	bx	lr
 800f1e4:	03fff000 	.word	0x03fff000

0800f1e8 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800f1e8:	b480      	push	{r7}
 800f1ea:	b085      	sub	sp, #20
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
 800f1f0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	3360      	adds	r3, #96	; 0x60
 800f1f6:	461a      	mov	r2, r3
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	009b      	lsls	r3, r3, #2
 800f1fc:	4413      	add	r3, r2
 800f1fe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800f208:	4618      	mov	r0, r3
 800f20a:	3714      	adds	r7, #20
 800f20c:	46bd      	mov	sp, r7
 800f20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f212:	4770      	bx	lr

0800f214 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800f214:	b480      	push	{r7}
 800f216:	b087      	sub	sp, #28
 800f218:	af00      	add	r7, sp, #0
 800f21a:	60f8      	str	r0, [r7, #12]
 800f21c:	60b9      	str	r1, [r7, #8]
 800f21e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	3360      	adds	r3, #96	; 0x60
 800f224:	461a      	mov	r2, r3
 800f226:	68bb      	ldr	r3, [r7, #8]
 800f228:	009b      	lsls	r3, r3, #2
 800f22a:	4413      	add	r3, r2
 800f22c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800f22e:	697b      	ldr	r3, [r7, #20]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	431a      	orrs	r2, r3
 800f23a:	697b      	ldr	r3, [r7, #20]
 800f23c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800f23e:	bf00      	nop
 800f240:	371c      	adds	r7, #28
 800f242:	46bd      	mov	sp, r7
 800f244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f248:	4770      	bx	lr

0800f24a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800f24a:	b480      	push	{r7}
 800f24c:	b083      	sub	sp, #12
 800f24e:	af00      	add	r7, sp, #0
 800f250:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	68db      	ldr	r3, [r3, #12]
 800f256:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d101      	bne.n	800f262 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800f25e:	2301      	movs	r3, #1
 800f260:	e000      	b.n	800f264 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800f262:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800f264:	4618      	mov	r0, r3
 800f266:	370c      	adds	r7, #12
 800f268:	46bd      	mov	sp, r7
 800f26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26e:	4770      	bx	lr

0800f270 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800f270:	b480      	push	{r7}
 800f272:	b087      	sub	sp, #28
 800f274:	af00      	add	r7, sp, #0
 800f276:	60f8      	str	r0, [r7, #12]
 800f278:	60b9      	str	r1, [r7, #8]
 800f27a:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	3330      	adds	r3, #48	; 0x30
 800f280:	461a      	mov	r2, r3
 800f282:	68bb      	ldr	r3, [r7, #8]
 800f284:	0a1b      	lsrs	r3, r3, #8
 800f286:	009b      	lsls	r3, r3, #2
 800f288:	f003 030c 	and.w	r3, r3, #12
 800f28c:	4413      	add	r3, r2
 800f28e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800f290:	697b      	ldr	r3, [r7, #20]
 800f292:	681a      	ldr	r2, [r3, #0]
 800f294:	68bb      	ldr	r3, [r7, #8]
 800f296:	f003 031f 	and.w	r3, r3, #31
 800f29a:	211f      	movs	r1, #31
 800f29c:	fa01 f303 	lsl.w	r3, r1, r3
 800f2a0:	43db      	mvns	r3, r3
 800f2a2:	401a      	ands	r2, r3
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	0e9b      	lsrs	r3, r3, #26
 800f2a8:	f003 011f 	and.w	r1, r3, #31
 800f2ac:	68bb      	ldr	r3, [r7, #8]
 800f2ae:	f003 031f 	and.w	r3, r3, #31
 800f2b2:	fa01 f303 	lsl.w	r3, r1, r3
 800f2b6:	431a      	orrs	r2, r3
 800f2b8:	697b      	ldr	r3, [r7, #20]
 800f2ba:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800f2bc:	bf00      	nop
 800f2be:	371c      	adds	r7, #28
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c6:	4770      	bx	lr

0800f2c8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800f2c8:	b480      	push	{r7}
 800f2ca:	b087      	sub	sp, #28
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	60f8      	str	r0, [r7, #12]
 800f2d0:	60b9      	str	r1, [r7, #8]
 800f2d2:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	3314      	adds	r3, #20
 800f2d8:	461a      	mov	r2, r3
 800f2da:	68bb      	ldr	r3, [r7, #8]
 800f2dc:	0e5b      	lsrs	r3, r3, #25
 800f2de:	009b      	lsls	r3, r3, #2
 800f2e0:	f003 0304 	and.w	r3, r3, #4
 800f2e4:	4413      	add	r3, r2
 800f2e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800f2e8:	697b      	ldr	r3, [r7, #20]
 800f2ea:	681a      	ldr	r2, [r3, #0]
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	0d1b      	lsrs	r3, r3, #20
 800f2f0:	f003 031f 	and.w	r3, r3, #31
 800f2f4:	2107      	movs	r1, #7
 800f2f6:	fa01 f303 	lsl.w	r3, r1, r3
 800f2fa:	43db      	mvns	r3, r3
 800f2fc:	401a      	ands	r2, r3
 800f2fe:	68bb      	ldr	r3, [r7, #8]
 800f300:	0d1b      	lsrs	r3, r3, #20
 800f302:	f003 031f 	and.w	r3, r3, #31
 800f306:	6879      	ldr	r1, [r7, #4]
 800f308:	fa01 f303 	lsl.w	r3, r1, r3
 800f30c:	431a      	orrs	r2, r3
 800f30e:	697b      	ldr	r3, [r7, #20]
 800f310:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800f312:	bf00      	nop
 800f314:	371c      	adds	r7, #28
 800f316:	46bd      	mov	sp, r7
 800f318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31c:	4770      	bx	lr
	...

0800f320 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800f320:	b480      	push	{r7}
 800f322:	b085      	sub	sp, #20
 800f324:	af00      	add	r7, sp, #0
 800f326:	60f8      	str	r0, [r7, #12]
 800f328:	60b9      	str	r1, [r7, #8]
 800f32a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800f332:	68bb      	ldr	r3, [r7, #8]
 800f334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f338:	43db      	mvns	r3, r3
 800f33a:	401a      	ands	r2, r3
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f003 0318 	and.w	r3, r3, #24
 800f342:	4908      	ldr	r1, [pc, #32]	; (800f364 <LL_ADC_SetChannelSingleDiff+0x44>)
 800f344:	40d9      	lsrs	r1, r3
 800f346:	68bb      	ldr	r3, [r7, #8]
 800f348:	400b      	ands	r3, r1
 800f34a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f34e:	431a      	orrs	r2, r3
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800f356:	bf00      	nop
 800f358:	3714      	adds	r7, #20
 800f35a:	46bd      	mov	sp, r7
 800f35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f360:	4770      	bx	lr
 800f362:	bf00      	nop
 800f364:	0007ffff 	.word	0x0007ffff

0800f368 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800f368:	b480      	push	{r7}
 800f36a:	b083      	sub	sp, #12
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	689b      	ldr	r3, [r3, #8]
 800f374:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800f378:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800f37c:	687a      	ldr	r2, [r7, #4]
 800f37e:	6093      	str	r3, [r2, #8]
}
 800f380:	bf00      	nop
 800f382:	370c      	adds	r7, #12
 800f384:	46bd      	mov	sp, r7
 800f386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38a:	4770      	bx	lr

0800f38c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800f38c:	b480      	push	{r7}
 800f38e:	b083      	sub	sp, #12
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	689b      	ldr	r3, [r3, #8]
 800f398:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f39c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f3a0:	d101      	bne.n	800f3a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800f3a2:	2301      	movs	r3, #1
 800f3a4:	e000      	b.n	800f3a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800f3a6:	2300      	movs	r3, #0
}
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	370c      	adds	r7, #12
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b2:	4770      	bx	lr

0800f3b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800f3b4:	b480      	push	{r7}
 800f3b6:	b083      	sub	sp, #12
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	689b      	ldr	r3, [r3, #8]
 800f3c0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800f3c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800f3c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800f3d0:	bf00      	nop
 800f3d2:	370c      	adds	r7, #12
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3da:	4770      	bx	lr

0800f3dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800f3dc:	b480      	push	{r7}
 800f3de:	b083      	sub	sp, #12
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	689b      	ldr	r3, [r3, #8]
 800f3e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f3ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f3f0:	d101      	bne.n	800f3f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800f3f2:	2301      	movs	r3, #1
 800f3f4:	e000      	b.n	800f3f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800f3f6:	2300      	movs	r3, #0
}
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	370c      	adds	r7, #12
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f402:	4770      	bx	lr

0800f404 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800f404:	b480      	push	{r7}
 800f406:	b083      	sub	sp, #12
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	689b      	ldr	r3, [r3, #8]
 800f410:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f414:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800f418:	f043 0201 	orr.w	r2, r3, #1
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800f420:	bf00      	nop
 800f422:	370c      	adds	r7, #12
 800f424:	46bd      	mov	sp, r7
 800f426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42a:	4770      	bx	lr

0800f42c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800f42c:	b480      	push	{r7}
 800f42e:	b083      	sub	sp, #12
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	689b      	ldr	r3, [r3, #8]
 800f438:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f43c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800f440:	f043 0202 	orr.w	r2, r3, #2
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800f448:	bf00      	nop
 800f44a:	370c      	adds	r7, #12
 800f44c:	46bd      	mov	sp, r7
 800f44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f452:	4770      	bx	lr

0800f454 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800f454:	b480      	push	{r7}
 800f456:	b083      	sub	sp, #12
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	689b      	ldr	r3, [r3, #8]
 800f460:	f003 0301 	and.w	r3, r3, #1
 800f464:	2b01      	cmp	r3, #1
 800f466:	d101      	bne.n	800f46c <LL_ADC_IsEnabled+0x18>
 800f468:	2301      	movs	r3, #1
 800f46a:	e000      	b.n	800f46e <LL_ADC_IsEnabled+0x1a>
 800f46c:	2300      	movs	r3, #0
}
 800f46e:	4618      	mov	r0, r3
 800f470:	370c      	adds	r7, #12
 800f472:	46bd      	mov	sp, r7
 800f474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f478:	4770      	bx	lr

0800f47a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800f47a:	b480      	push	{r7}
 800f47c:	b083      	sub	sp, #12
 800f47e:	af00      	add	r7, sp, #0
 800f480:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	689b      	ldr	r3, [r3, #8]
 800f486:	f003 0302 	and.w	r3, r3, #2
 800f48a:	2b02      	cmp	r3, #2
 800f48c:	d101      	bne.n	800f492 <LL_ADC_IsDisableOngoing+0x18>
 800f48e:	2301      	movs	r3, #1
 800f490:	e000      	b.n	800f494 <LL_ADC_IsDisableOngoing+0x1a>
 800f492:	2300      	movs	r3, #0
}
 800f494:	4618      	mov	r0, r3
 800f496:	370c      	adds	r7, #12
 800f498:	46bd      	mov	sp, r7
 800f49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49e:	4770      	bx	lr

0800f4a0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800f4a0:	b480      	push	{r7}
 800f4a2:	b083      	sub	sp, #12
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	689b      	ldr	r3, [r3, #8]
 800f4ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f4b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800f4b4:	f043 0204 	orr.w	r2, r3, #4
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800f4bc:	bf00      	nop
 800f4be:	370c      	adds	r7, #12
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c6:	4770      	bx	lr

0800f4c8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800f4c8:	b480      	push	{r7}
 800f4ca:	b083      	sub	sp, #12
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	689b      	ldr	r3, [r3, #8]
 800f4d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f4d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800f4dc:	f043 0210 	orr.w	r2, r3, #16
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800f4e4:	bf00      	nop
 800f4e6:	370c      	adds	r7, #12
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ee:	4770      	bx	lr

0800f4f0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800f4f0:	b480      	push	{r7}
 800f4f2:	b083      	sub	sp, #12
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	689b      	ldr	r3, [r3, #8]
 800f4fc:	f003 0304 	and.w	r3, r3, #4
 800f500:	2b04      	cmp	r3, #4
 800f502:	d101      	bne.n	800f508 <LL_ADC_REG_IsConversionOngoing+0x18>
 800f504:	2301      	movs	r3, #1
 800f506:	e000      	b.n	800f50a <LL_ADC_REG_IsConversionOngoing+0x1a>
 800f508:	2300      	movs	r3, #0
}
 800f50a:	4618      	mov	r0, r3
 800f50c:	370c      	adds	r7, #12
 800f50e:	46bd      	mov	sp, r7
 800f510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f514:	4770      	bx	lr

0800f516 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800f516:	b480      	push	{r7}
 800f518:	b083      	sub	sp, #12
 800f51a:	af00      	add	r7, sp, #0
 800f51c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	689b      	ldr	r3, [r3, #8]
 800f522:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f526:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800f52a:	f043 0220 	orr.w	r2, r3, #32
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800f532:	bf00      	nop
 800f534:	370c      	adds	r7, #12
 800f536:	46bd      	mov	sp, r7
 800f538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53c:	4770      	bx	lr

0800f53e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800f53e:	b480      	push	{r7}
 800f540:	b083      	sub	sp, #12
 800f542:	af00      	add	r7, sp, #0
 800f544:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	689b      	ldr	r3, [r3, #8]
 800f54a:	f003 0308 	and.w	r3, r3, #8
 800f54e:	2b08      	cmp	r3, #8
 800f550:	d101      	bne.n	800f556 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800f552:	2301      	movs	r3, #1
 800f554:	e000      	b.n	800f558 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800f556:	2300      	movs	r3, #0
}
 800f558:	4618      	mov	r0, r3
 800f55a:	370c      	adds	r7, #12
 800f55c:	46bd      	mov	sp, r7
 800f55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f562:	4770      	bx	lr

0800f564 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b088      	sub	sp, #32
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f56c:	2300      	movs	r3, #0
 800f56e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 800f570:	2300      	movs	r3, #0
 800f572:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800f574:	2300      	movs	r3, #0
 800f576:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d101      	bne.n	800f582 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800f57e:	2301      	movs	r3, #1
 800f580:	e12e      	b.n	800f7e0 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	691b      	ldr	r3, [r3, #16]
 800f586:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d109      	bne.n	800f5a4 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800f590:	6878      	ldr	r0, [r7, #4]
 800f592:	f7f8 ffd1 	bl	8008538 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	2200      	movs	r2, #0
 800f59a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2200      	movs	r2, #0
 800f5a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	f7ff feef 	bl	800f38c <LL_ADC_IsDeepPowerDownEnabled>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d004      	beq.n	800f5be <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	f7ff fed5 	bl	800f368 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f7ff ff0a 	bl	800f3dc <LL_ADC_IsInternalRegulatorEnabled>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d115      	bne.n	800f5fa <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	f7ff feee 	bl	800f3b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800f5d8:	4b83      	ldr	r3, [pc, #524]	; (800f7e8 <HAL_ADC_Init+0x284>)
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	099b      	lsrs	r3, r3, #6
 800f5de:	4a83      	ldr	r2, [pc, #524]	; (800f7ec <HAL_ADC_Init+0x288>)
 800f5e0:	fba2 2303 	umull	r2, r3, r2, r3
 800f5e4:	099b      	lsrs	r3, r3, #6
 800f5e6:	3301      	adds	r3, #1
 800f5e8:	005b      	lsls	r3, r3, #1
 800f5ea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800f5ec:	e002      	b.n	800f5f4 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 800f5ee:	68bb      	ldr	r3, [r7, #8]
 800f5f0:	3b01      	subs	r3, #1
 800f5f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800f5f4:	68bb      	ldr	r3, [r7, #8]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d1f9      	bne.n	800f5ee <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	4618      	mov	r0, r3
 800f600:	f7ff feec 	bl	800f3dc <LL_ADC_IsInternalRegulatorEnabled>
 800f604:	4603      	mov	r3, r0
 800f606:	2b00      	cmp	r3, #0
 800f608:	d10d      	bne.n	800f626 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f60e:	f043 0210 	orr.w	r2, r3, #16
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f61a:	f043 0201 	orr.w	r2, r3, #1
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800f622:	2301      	movs	r3, #1
 800f624:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	4618      	mov	r0, r3
 800f62c:	f7ff ff60 	bl	800f4f0 <LL_ADC_REG_IsConversionOngoing>
 800f630:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f636:	f003 0310 	and.w	r3, r3, #16
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	f040 80c7 	bne.w	800f7ce <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800f640:	697b      	ldr	r3, [r7, #20]
 800f642:	2b00      	cmp	r3, #0
 800f644:	f040 80c3 	bne.w	800f7ce <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f64c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800f650:	f043 0202 	orr.w	r2, r3, #2
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	4618      	mov	r0, r3
 800f65e:	f7ff fef9 	bl	800f454 <LL_ADC_IsEnabled>
 800f662:	4603      	mov	r3, r0
 800f664:	2b00      	cmp	r3, #0
 800f666:	d10b      	bne.n	800f680 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800f668:	4861      	ldr	r0, [pc, #388]	; (800f7f0 <HAL_ADC_Init+0x28c>)
 800f66a:	f7ff fef3 	bl	800f454 <LL_ADC_IsEnabled>
 800f66e:	4603      	mov	r3, r0
 800f670:	2b00      	cmp	r3, #0
 800f672:	d105      	bne.n	800f680 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	685b      	ldr	r3, [r3, #4]
 800f678:	4619      	mov	r1, r3
 800f67a:	485e      	ldr	r0, [pc, #376]	; (800f7f4 <HAL_ADC_Init+0x290>)
 800f67c:	f7ff fd5c 	bl	800f138 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	7e5b      	ldrb	r3, [r3, #25]
 800f684:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800f68a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800f690:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800f696:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f69e:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 800f6a0:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800f6a2:	69ba      	ldr	r2, [r7, #24]
 800f6a4:	4313      	orrs	r3, r2
 800f6a6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f6ae:	2b01      	cmp	r3, #1
 800f6b0:	d106      	bne.n	800f6c0 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6b6:	3b01      	subs	r3, #1
 800f6b8:	045b      	lsls	r3, r3, #17
 800f6ba:	69ba      	ldr	r2, [r7, #24]
 800f6bc:	4313      	orrs	r3, r2
 800f6be:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d009      	beq.n	800f6dc <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6cc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6d4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800f6d6:	69ba      	ldr	r2, [r7, #24]
 800f6d8:	4313      	orrs	r3, r2
 800f6da:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	68da      	ldr	r2, [r3, #12]
 800f6e2:	4b45      	ldr	r3, [pc, #276]	; (800f7f8 <HAL_ADC_Init+0x294>)
 800f6e4:	4013      	ands	r3, r2
 800f6e6:	687a      	ldr	r2, [r7, #4]
 800f6e8:	6812      	ldr	r2, [r2, #0]
 800f6ea:	69b9      	ldr	r1, [r7, #24]
 800f6ec:	430b      	orrs	r3, r1
 800f6ee:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f7ff fefb 	bl	800f4f0 <LL_ADC_REG_IsConversionOngoing>
 800f6fa:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	4618      	mov	r0, r3
 800f702:	f7ff ff1c 	bl	800f53e <LL_ADC_INJ_IsConversionOngoing>
 800f706:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800f708:	693b      	ldr	r3, [r7, #16]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d13d      	bne.n	800f78a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d13a      	bne.n	800f78a <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800f718:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f720:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800f722:	4313      	orrs	r3, r2
 800f724:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	68db      	ldr	r3, [r3, #12]
 800f72c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f730:	f023 0302 	bic.w	r3, r3, #2
 800f734:	687a      	ldr	r2, [r7, #4]
 800f736:	6812      	ldr	r2, [r2, #0]
 800f738:	69b9      	ldr	r1, [r7, #24]
 800f73a:	430b      	orrs	r3, r1
 800f73c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f744:	2b01      	cmp	r3, #1
 800f746:	d118      	bne.n	800f77a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	691b      	ldr	r3, [r3, #16]
 800f74e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800f752:	f023 0304 	bic.w	r3, r3, #4
 800f756:	687a      	ldr	r2, [r7, #4]
 800f758:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800f75a:	687a      	ldr	r2, [r7, #4]
 800f75c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800f75e:	4311      	orrs	r1, r2
 800f760:	687a      	ldr	r2, [r7, #4]
 800f762:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800f764:	4311      	orrs	r1, r2
 800f766:	687a      	ldr	r2, [r7, #4]
 800f768:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800f76a:	430a      	orrs	r2, r1
 800f76c:	431a      	orrs	r2, r3
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	f042 0201 	orr.w	r2, r2, #1
 800f776:	611a      	str	r2, [r3, #16]
 800f778:	e007      	b.n	800f78a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	691a      	ldr	r2, [r3, #16]
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	f022 0201 	bic.w	r2, r2, #1
 800f788:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	691b      	ldr	r3, [r3, #16]
 800f78e:	2b01      	cmp	r3, #1
 800f790:	d10c      	bne.n	800f7ac <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f798:	f023 010f 	bic.w	r1, r3, #15
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	69db      	ldr	r3, [r3, #28]
 800f7a0:	1e5a      	subs	r2, r3, #1
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	430a      	orrs	r2, r1
 800f7a8:	631a      	str	r2, [r3, #48]	; 0x30
 800f7aa:	e007      	b.n	800f7bc <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	f022 020f 	bic.w	r2, r2, #15
 800f7ba:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7c0:	f023 0303 	bic.w	r3, r3, #3
 800f7c4:	f043 0201 	orr.w	r2, r3, #1
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	655a      	str	r2, [r3, #84]	; 0x54
 800f7cc:	e007      	b.n	800f7de <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7d2:	f043 0210 	orr.w	r2, r3, #16
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800f7da:	2301      	movs	r3, #1
 800f7dc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800f7de:	7ffb      	ldrb	r3, [r7, #31]
}
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	3720      	adds	r7, #32
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	bd80      	pop	{r7, pc}
 800f7e8:	2000007c 	.word	0x2000007c
 800f7ec:	053e2d63 	.word	0x053e2d63
 800f7f0:	50040000 	.word	0x50040000
 800f7f4:	50040300 	.word	0x50040300
 800f7f8:	fff0c007 	.word	0xfff0c007

0800f7fc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b086      	sub	sp, #24
 800f800:	af00      	add	r7, sp, #0
 800f802:	60f8      	str	r0, [r7, #12]
 800f804:	60b9      	str	r1, [r7, #8]
 800f806:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	4618      	mov	r0, r3
 800f80e:	f7ff fe6f 	bl	800f4f0 <LL_ADC_REG_IsConversionOngoing>
 800f812:	4603      	mov	r3, r0
 800f814:	2b00      	cmp	r3, #0
 800f816:	d167      	bne.n	800f8e8 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f81e:	2b01      	cmp	r3, #1
 800f820:	d101      	bne.n	800f826 <HAL_ADC_Start_DMA+0x2a>
 800f822:	2302      	movs	r3, #2
 800f824:	e063      	b.n	800f8ee <HAL_ADC_Start_DMA+0xf2>
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	2201      	movs	r2, #1
 800f82a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800f82e:	68f8      	ldr	r0, [r7, #12]
 800f830:	f000 fd6a 	bl	8010308 <ADC_Enable>
 800f834:	4603      	mov	r3, r0
 800f836:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800f838:	7dfb      	ldrb	r3, [r7, #23]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d14f      	bne.n	800f8de <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f842:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800f846:	f023 0301 	bic.w	r3, r3, #1
 800f84a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	655a      	str	r2, [r3, #84]	; 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f856:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d006      	beq.n	800f86c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f862:	f023 0206 	bic.w	r2, r3, #6
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	659a      	str	r2, [r3, #88]	; 0x58
 800f86a:	e002      	b.n	800f872 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	2200      	movs	r2, #0
 800f870:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f876:	4a20      	ldr	r2, [pc, #128]	; (800f8f8 <HAL_ADC_Start_DMA+0xfc>)
 800f878:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f87e:	4a1f      	ldr	r2, [pc, #124]	; (800f8fc <HAL_ADC_Start_DMA+0x100>)
 800f880:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f886:	4a1e      	ldr	r2, [pc, #120]	; (800f900 <HAL_ADC_Start_DMA+0x104>)
 800f888:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	221c      	movs	r2, #28
 800f890:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	2200      	movs	r2, #0
 800f896:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	685a      	ldr	r2, [r3, #4]
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	f042 0210 	orr.w	r2, r2, #16
 800f8a8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	68da      	ldr	r2, [r3, #12]
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	f042 0201 	orr.w	r2, r2, #1
 800f8b8:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	3340      	adds	r3, #64	; 0x40
 800f8c4:	4619      	mov	r1, r3
 800f8c6:	68ba      	ldr	r2, [r7, #8]
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	f001 f95b 	bl	8010b84 <HAL_DMA_Start_IT>
 800f8ce:	4603      	mov	r3, r0
 800f8d0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	f7ff fde2 	bl	800f4a0 <LL_ADC_REG_StartConversion>
 800f8dc:	e006      	b.n	800f8ec <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800f8e6:	e001      	b.n	800f8ec <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800f8e8:	2302      	movs	r3, #2
 800f8ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800f8ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	3718      	adds	r7, #24
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	bd80      	pop	{r7, pc}
 800f8f6:	bf00      	nop
 800f8f8:	080104bb 	.word	0x080104bb
 800f8fc:	08010593 	.word	0x08010593
 800f900:	080105af 	.word	0x080105af

0800f904 <HAL_ADC_Stop_DMA>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b084      	sub	sp, #16
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f912:	2b01      	cmp	r3, #1
 800f914:	d101      	bne.n	800f91a <HAL_ADC_Stop_DMA+0x16>
 800f916:	2302      	movs	r3, #2
 800f918:	e051      	b.n	800f9be <HAL_ADC_Stop_DMA+0xba>
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	2201      	movs	r2, #1
 800f91e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
#if defined(ADC_SUPPORT_2_5_MSPS)
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800f922:	2103      	movs	r1, #3
 800f924:	6878      	ldr	r0, [r7, #4]
 800f926:	f000 fc33 	bl	8010190 <ADC_ConversionStop>
 800f92a:	4603      	mov	r3, r0
 800f92c:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800f92e:	7bfb      	ldrb	r3, [r7, #15]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d13f      	bne.n	800f9b4 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	68da      	ldr	r2, [r3, #12]
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	f022 0201 	bic.w	r2, r2, #1
 800f942:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f948:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800f94c:	b2db      	uxtb	r3, r3
 800f94e:	2b02      	cmp	r3, #2
 800f950:	d10f      	bne.n	800f972 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f956:	4618      	mov	r0, r3
 800f958:	f001 f98f 	bl	8010c7a <HAL_DMA_Abort>
 800f95c:	4603      	mov	r3, r0
 800f95e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800f960:	7bfb      	ldrb	r3, [r7, #15]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d005      	beq.n	800f972 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f96a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	685a      	ldr	r2, [r3, #4]
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	f022 0210 	bic.w	r2, r2, #16
 800f980:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800f982:	7bfb      	ldrb	r3, [r7, #15]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d105      	bne.n	800f994 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800f988:	6878      	ldr	r0, [r7, #4]
 800f98a:	f000 fd37 	bl	80103fc <ADC_Disable>
 800f98e:	4603      	mov	r3, r0
 800f990:	73fb      	strb	r3, [r7, #15]
 800f992:	e002      	b.n	800f99a <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800f994:	6878      	ldr	r0, [r7, #4]
 800f996:	f000 fd31 	bl	80103fc <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800f99a:	7bfb      	ldrb	r3, [r7, #15]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d109      	bne.n	800f9b4 <HAL_ADC_Stop_DMA+0xb0>
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800f9a8:	f023 0301 	bic.w	r3, r3, #1
 800f9ac:	f043 0201 	orr.w	r2, r3, #1
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	2200      	movs	r2, #0
 800f9b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800f9bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9be:	4618      	mov	r0, r3
 800f9c0:	3710      	adds	r7, #16
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	bd80      	pop	{r7, pc}

0800f9c6 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800f9c6:	b480      	push	{r7}
 800f9c8:	b083      	sub	sp, #12
 800f9ca:	af00      	add	r7, sp, #0
 800f9cc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800f9ce:	bf00      	nop
 800f9d0:	370c      	adds	r7, #12
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d8:	4770      	bx	lr

0800f9da <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800f9da:	b480      	push	{r7}
 800f9dc:	b083      	sub	sp, #12
 800f9de:	af00      	add	r7, sp, #0
 800f9e0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800f9e2:	bf00      	nop
 800f9e4:	370c      	adds	r7, #12
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ec:	4770      	bx	lr

0800f9ee <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800f9ee:	b480      	push	{r7}
 800f9f0:	b083      	sub	sp, #12
 800f9f2:	af00      	add	r7, sp, #0
 800f9f4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800f9f6:	bf00      	nop
 800f9f8:	370c      	adds	r7, #12
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa00:	4770      	bx	lr
	...

0800fa04 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b0b6      	sub	sp, #216	; 0xd8
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
 800fa0c:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fa0e:	2300      	movs	r3, #0
 800fa10:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800fa14:	2300      	movs	r3, #0
 800fa16:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800fa1e:	2b01      	cmp	r3, #1
 800fa20:	d101      	bne.n	800fa26 <HAL_ADC_ConfigChannel+0x22>
 800fa22:	2302      	movs	r3, #2
 800fa24:	e39f      	b.n	8010166 <HAL_ADC_ConfigChannel+0x762>
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	2201      	movs	r2, #1
 800fa2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	4618      	mov	r0, r3
 800fa34:	f7ff fd5c 	bl	800f4f0 <LL_ADC_REG_IsConversionOngoing>
 800fa38:	4603      	mov	r3, r0
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	f040 8384 	bne.w	8010148 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	6818      	ldr	r0, [r3, #0]
 800fa44:	683b      	ldr	r3, [r7, #0]
 800fa46:	6859      	ldr	r1, [r3, #4]
 800fa48:	683b      	ldr	r3, [r7, #0]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	461a      	mov	r2, r3
 800fa4e:	f7ff fc0f 	bl	800f270 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	4618      	mov	r0, r3
 800fa58:	f7ff fd4a 	bl	800f4f0 <LL_ADC_REG_IsConversionOngoing>
 800fa5c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	4618      	mov	r0, r3
 800fa66:	f7ff fd6a 	bl	800f53e <LL_ADC_INJ_IsConversionOngoing>
 800fa6a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800fa6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	f040 81a6 	bne.w	800fdc4 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800fa78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	f040 81a1 	bne.w	800fdc4 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	6818      	ldr	r0, [r3, #0]
 800fa86:	683b      	ldr	r3, [r7, #0]
 800fa88:	6819      	ldr	r1, [r3, #0]
 800fa8a:	683b      	ldr	r3, [r7, #0]
 800fa8c:	689b      	ldr	r3, [r3, #8]
 800fa8e:	461a      	mov	r2, r3
 800fa90:	f7ff fc1a 	bl	800f2c8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800fa94:	683b      	ldr	r3, [r7, #0]
 800fa96:	695a      	ldr	r2, [r3, #20]
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	68db      	ldr	r3, [r3, #12]
 800fa9e:	08db      	lsrs	r3, r3, #3
 800faa0:	f003 0303 	and.w	r3, r3, #3
 800faa4:	005b      	lsls	r3, r3, #1
 800faa6:	fa02 f303 	lsl.w	r3, r2, r3
 800faaa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800faae:	683b      	ldr	r3, [r7, #0]
 800fab0:	691b      	ldr	r3, [r3, #16]
 800fab2:	2b04      	cmp	r3, #4
 800fab4:	d00a      	beq.n	800facc <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	6818      	ldr	r0, [r3, #0]
 800faba:	683b      	ldr	r3, [r7, #0]
 800fabc:	6919      	ldr	r1, [r3, #16]
 800fabe:	683b      	ldr	r3, [r7, #0]
 800fac0:	681a      	ldr	r2, [r3, #0]
 800fac2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fac6:	f7ff fb6b 	bl	800f1a0 <LL_ADC_SetOffset>
 800faca:	e17b      	b.n	800fdc4 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	2100      	movs	r1, #0
 800fad2:	4618      	mov	r0, r3
 800fad4:	f7ff fb88 	bl	800f1e8 <LL_ADC_GetOffsetChannel>
 800fad8:	4603      	mov	r3, r0
 800fada:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d10a      	bne.n	800faf8 <HAL_ADC_ConfigChannel+0xf4>
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	2100      	movs	r1, #0
 800fae8:	4618      	mov	r0, r3
 800faea:	f7ff fb7d 	bl	800f1e8 <LL_ADC_GetOffsetChannel>
 800faee:	4603      	mov	r3, r0
 800faf0:	0e9b      	lsrs	r3, r3, #26
 800faf2:	f003 021f 	and.w	r2, r3, #31
 800faf6:	e01e      	b.n	800fb36 <HAL_ADC_ConfigChannel+0x132>
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	2100      	movs	r1, #0
 800fafe:	4618      	mov	r0, r3
 800fb00:	f7ff fb72 	bl	800f1e8 <LL_ADC_GetOffsetChannel>
 800fb04:	4603      	mov	r3, r0
 800fb06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fb0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800fb0e:	fa93 f3a3 	rbit	r3, r3
 800fb12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 800fb16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fb1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 800fb1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d101      	bne.n	800fb2a <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 800fb26:	2320      	movs	r3, #32
 800fb28:	e004      	b.n	800fb34 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 800fb2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800fb2e:	fab3 f383 	clz	r3, r3
 800fb32:	b2db      	uxtb	r3, r3
 800fb34:	461a      	mov	r2, r3
 800fb36:	683b      	ldr	r3, [r7, #0]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d105      	bne.n	800fb4e <HAL_ADC_ConfigChannel+0x14a>
 800fb42:	683b      	ldr	r3, [r7, #0]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	0e9b      	lsrs	r3, r3, #26
 800fb48:	f003 031f 	and.w	r3, r3, #31
 800fb4c:	e018      	b.n	800fb80 <HAL_ADC_ConfigChannel+0x17c>
 800fb4e:	683b      	ldr	r3, [r7, #0]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fb56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800fb5a:	fa93 f3a3 	rbit	r3, r3
 800fb5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800fb62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fb66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800fb6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d101      	bne.n	800fb76 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 800fb72:	2320      	movs	r3, #32
 800fb74:	e004      	b.n	800fb80 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 800fb76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fb7a:	fab3 f383 	clz	r3, r3
 800fb7e:	b2db      	uxtb	r3, r3
 800fb80:	429a      	cmp	r2, r3
 800fb82:	d106      	bne.n	800fb92 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	2200      	movs	r2, #0
 800fb8a:	2100      	movs	r1, #0
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	f7ff fb41 	bl	800f214 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	2101      	movs	r1, #1
 800fb98:	4618      	mov	r0, r3
 800fb9a:	f7ff fb25 	bl	800f1e8 <LL_ADC_GetOffsetChannel>
 800fb9e:	4603      	mov	r3, r0
 800fba0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d10a      	bne.n	800fbbe <HAL_ADC_ConfigChannel+0x1ba>
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	2101      	movs	r1, #1
 800fbae:	4618      	mov	r0, r3
 800fbb0:	f7ff fb1a 	bl	800f1e8 <LL_ADC_GetOffsetChannel>
 800fbb4:	4603      	mov	r3, r0
 800fbb6:	0e9b      	lsrs	r3, r3, #26
 800fbb8:	f003 021f 	and.w	r2, r3, #31
 800fbbc:	e01e      	b.n	800fbfc <HAL_ADC_ConfigChannel+0x1f8>
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	2101      	movs	r1, #1
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	f7ff fb0f 	bl	800f1e8 <LL_ADC_GetOffsetChannel>
 800fbca:	4603      	mov	r3, r0
 800fbcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fbd0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fbd4:	fa93 f3a3 	rbit	r3, r3
 800fbd8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800fbdc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fbe0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800fbe4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d101      	bne.n	800fbf0 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 800fbec:	2320      	movs	r3, #32
 800fbee:	e004      	b.n	800fbfa <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 800fbf0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fbf4:	fab3 f383 	clz	r3, r3
 800fbf8:	b2db      	uxtb	r3, r3
 800fbfa:	461a      	mov	r2, r3
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d105      	bne.n	800fc14 <HAL_ADC_ConfigChannel+0x210>
 800fc08:	683b      	ldr	r3, [r7, #0]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	0e9b      	lsrs	r3, r3, #26
 800fc0e:	f003 031f 	and.w	r3, r3, #31
 800fc12:	e018      	b.n	800fc46 <HAL_ADC_ConfigChannel+0x242>
 800fc14:	683b      	ldr	r3, [r7, #0]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fc1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fc20:	fa93 f3a3 	rbit	r3, r3
 800fc24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800fc28:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fc2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800fc30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d101      	bne.n	800fc3c <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 800fc38:	2320      	movs	r3, #32
 800fc3a:	e004      	b.n	800fc46 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 800fc3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fc40:	fab3 f383 	clz	r3, r3
 800fc44:	b2db      	uxtb	r3, r3
 800fc46:	429a      	cmp	r2, r3
 800fc48:	d106      	bne.n	800fc58 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	2200      	movs	r2, #0
 800fc50:	2101      	movs	r1, #1
 800fc52:	4618      	mov	r0, r3
 800fc54:	f7ff fade 	bl	800f214 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	2102      	movs	r1, #2
 800fc5e:	4618      	mov	r0, r3
 800fc60:	f7ff fac2 	bl	800f1e8 <LL_ADC_GetOffsetChannel>
 800fc64:	4603      	mov	r3, r0
 800fc66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d10a      	bne.n	800fc84 <HAL_ADC_ConfigChannel+0x280>
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	2102      	movs	r1, #2
 800fc74:	4618      	mov	r0, r3
 800fc76:	f7ff fab7 	bl	800f1e8 <LL_ADC_GetOffsetChannel>
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	0e9b      	lsrs	r3, r3, #26
 800fc7e:	f003 021f 	and.w	r2, r3, #31
 800fc82:	e01e      	b.n	800fcc2 <HAL_ADC_ConfigChannel+0x2be>
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	2102      	movs	r1, #2
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	f7ff faac 	bl	800f1e8 <LL_ADC_GetOffsetChannel>
 800fc90:	4603      	mov	r3, r0
 800fc92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fc96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fc9a:	fa93 f3a3 	rbit	r3, r3
 800fc9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800fca2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fca6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800fcaa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d101      	bne.n	800fcb6 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 800fcb2:	2320      	movs	r3, #32
 800fcb4:	e004      	b.n	800fcc0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800fcb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fcba:	fab3 f383 	clz	r3, r3
 800fcbe:	b2db      	uxtb	r3, r3
 800fcc0:	461a      	mov	r2, r3
 800fcc2:	683b      	ldr	r3, [r7, #0]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d105      	bne.n	800fcda <HAL_ADC_ConfigChannel+0x2d6>
 800fcce:	683b      	ldr	r3, [r7, #0]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	0e9b      	lsrs	r3, r3, #26
 800fcd4:	f003 031f 	and.w	r3, r3, #31
 800fcd8:	e016      	b.n	800fd08 <HAL_ADC_ConfigChannel+0x304>
 800fcda:	683b      	ldr	r3, [r7, #0]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fce2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fce6:	fa93 f3a3 	rbit	r3, r3
 800fcea:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800fcec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fcee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800fcf2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d101      	bne.n	800fcfe <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 800fcfa:	2320      	movs	r3, #32
 800fcfc:	e004      	b.n	800fd08 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 800fcfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fd02:	fab3 f383 	clz	r3, r3
 800fd06:	b2db      	uxtb	r3, r3
 800fd08:	429a      	cmp	r2, r3
 800fd0a:	d106      	bne.n	800fd1a <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	2200      	movs	r2, #0
 800fd12:	2102      	movs	r1, #2
 800fd14:	4618      	mov	r0, r3
 800fd16:	f7ff fa7d 	bl	800f214 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	2103      	movs	r1, #3
 800fd20:	4618      	mov	r0, r3
 800fd22:	f7ff fa61 	bl	800f1e8 <LL_ADC_GetOffsetChannel>
 800fd26:	4603      	mov	r3, r0
 800fd28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d10a      	bne.n	800fd46 <HAL_ADC_ConfigChannel+0x342>
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	2103      	movs	r1, #3
 800fd36:	4618      	mov	r0, r3
 800fd38:	f7ff fa56 	bl	800f1e8 <LL_ADC_GetOffsetChannel>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	0e9b      	lsrs	r3, r3, #26
 800fd40:	f003 021f 	and.w	r2, r3, #31
 800fd44:	e017      	b.n	800fd76 <HAL_ADC_ConfigChannel+0x372>
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	2103      	movs	r1, #3
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	f7ff fa4b 	bl	800f1e8 <LL_ADC_GetOffsetChannel>
 800fd52:	4603      	mov	r3, r0
 800fd54:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fd56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fd58:	fa93 f3a3 	rbit	r3, r3
 800fd5c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800fd5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fd60:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800fd62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d101      	bne.n	800fd6c <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 800fd68:	2320      	movs	r3, #32
 800fd6a:	e003      	b.n	800fd74 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 800fd6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fd6e:	fab3 f383 	clz	r3, r3
 800fd72:	b2db      	uxtb	r3, r3
 800fd74:	461a      	mov	r2, r3
 800fd76:	683b      	ldr	r3, [r7, #0]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d105      	bne.n	800fd8e <HAL_ADC_ConfigChannel+0x38a>
 800fd82:	683b      	ldr	r3, [r7, #0]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	0e9b      	lsrs	r3, r3, #26
 800fd88:	f003 031f 	and.w	r3, r3, #31
 800fd8c:	e011      	b.n	800fdb2 <HAL_ADC_ConfigChannel+0x3ae>
 800fd8e:	683b      	ldr	r3, [r7, #0]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fd94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd96:	fa93 f3a3 	rbit	r3, r3
 800fd9a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800fd9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fd9e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800fda0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d101      	bne.n	800fdaa <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 800fda6:	2320      	movs	r3, #32
 800fda8:	e003      	b.n	800fdb2 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 800fdaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fdac:	fab3 f383 	clz	r3, r3
 800fdb0:	b2db      	uxtb	r3, r3
 800fdb2:	429a      	cmp	r2, r3
 800fdb4:	d106      	bne.n	800fdc4 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	2200      	movs	r2, #0
 800fdbc:	2103      	movs	r1, #3
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f7ff fa28 	bl	800f214 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	4618      	mov	r0, r3
 800fdca:	f7ff fb43 	bl	800f454 <LL_ADC_IsEnabled>
 800fdce:	4603      	mov	r3, r0
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	f040 81c2 	bne.w	801015a <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	6818      	ldr	r0, [r3, #0]
 800fdda:	683b      	ldr	r3, [r7, #0]
 800fddc:	6819      	ldr	r1, [r3, #0]
 800fdde:	683b      	ldr	r3, [r7, #0]
 800fde0:	68db      	ldr	r3, [r3, #12]
 800fde2:	461a      	mov	r2, r3
 800fde4:	f7ff fa9c 	bl	800f320 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800fde8:	683b      	ldr	r3, [r7, #0]
 800fdea:	68db      	ldr	r3, [r3, #12]
 800fdec:	4a8e      	ldr	r2, [pc, #568]	; (8010028 <HAL_ADC_ConfigChannel+0x624>)
 800fdee:	4293      	cmp	r3, r2
 800fdf0:	f040 8130 	bne.w	8010054 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800fdf8:	683b      	ldr	r3, [r7, #0]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d10b      	bne.n	800fe1c <HAL_ADC_ConfigChannel+0x418>
 800fe04:	683b      	ldr	r3, [r7, #0]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	0e9b      	lsrs	r3, r3, #26
 800fe0a:	3301      	adds	r3, #1
 800fe0c:	f003 031f 	and.w	r3, r3, #31
 800fe10:	2b09      	cmp	r3, #9
 800fe12:	bf94      	ite	ls
 800fe14:	2301      	movls	r3, #1
 800fe16:	2300      	movhi	r3, #0
 800fe18:	b2db      	uxtb	r3, r3
 800fe1a:	e019      	b.n	800fe50 <HAL_ADC_ConfigChannel+0x44c>
 800fe1c:	683b      	ldr	r3, [r7, #0]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fe22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe24:	fa93 f3a3 	rbit	r3, r3
 800fe28:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800fe2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fe2c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800fe2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d101      	bne.n	800fe38 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 800fe34:	2320      	movs	r3, #32
 800fe36:	e003      	b.n	800fe40 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 800fe38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fe3a:	fab3 f383 	clz	r3, r3
 800fe3e:	b2db      	uxtb	r3, r3
 800fe40:	3301      	adds	r3, #1
 800fe42:	f003 031f 	and.w	r3, r3, #31
 800fe46:	2b09      	cmp	r3, #9
 800fe48:	bf94      	ite	ls
 800fe4a:	2301      	movls	r3, #1
 800fe4c:	2300      	movhi	r3, #0
 800fe4e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d079      	beq.n	800ff48 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800fe54:	683b      	ldr	r3, [r7, #0]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d107      	bne.n	800fe70 <HAL_ADC_ConfigChannel+0x46c>
 800fe60:	683b      	ldr	r3, [r7, #0]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	0e9b      	lsrs	r3, r3, #26
 800fe66:	3301      	adds	r3, #1
 800fe68:	069b      	lsls	r3, r3, #26
 800fe6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800fe6e:	e015      	b.n	800fe9c <HAL_ADC_ConfigChannel+0x498>
 800fe70:	683b      	ldr	r3, [r7, #0]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fe76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe78:	fa93 f3a3 	rbit	r3, r3
 800fe7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800fe7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe80:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800fe82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d101      	bne.n	800fe8c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800fe88:	2320      	movs	r3, #32
 800fe8a:	e003      	b.n	800fe94 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800fe8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe8e:	fab3 f383 	clz	r3, r3
 800fe92:	b2db      	uxtb	r3, r3
 800fe94:	3301      	adds	r3, #1
 800fe96:	069b      	lsls	r3, r3, #26
 800fe98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800fe9c:	683b      	ldr	r3, [r7, #0]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d109      	bne.n	800febc <HAL_ADC_ConfigChannel+0x4b8>
 800fea8:	683b      	ldr	r3, [r7, #0]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	0e9b      	lsrs	r3, r3, #26
 800feae:	3301      	adds	r3, #1
 800feb0:	f003 031f 	and.w	r3, r3, #31
 800feb4:	2101      	movs	r1, #1
 800feb6:	fa01 f303 	lsl.w	r3, r1, r3
 800feba:	e017      	b.n	800feec <HAL_ADC_ConfigChannel+0x4e8>
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fec4:	fa93 f3a3 	rbit	r3, r3
 800fec8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800feca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fecc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800fece:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d101      	bne.n	800fed8 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 800fed4:	2320      	movs	r3, #32
 800fed6:	e003      	b.n	800fee0 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 800fed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800feda:	fab3 f383 	clz	r3, r3
 800fede:	b2db      	uxtb	r3, r3
 800fee0:	3301      	adds	r3, #1
 800fee2:	f003 031f 	and.w	r3, r3, #31
 800fee6:	2101      	movs	r1, #1
 800fee8:	fa01 f303 	lsl.w	r3, r1, r3
 800feec:	ea42 0103 	orr.w	r1, r2, r3
 800fef0:	683b      	ldr	r3, [r7, #0]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d10a      	bne.n	800ff12 <HAL_ADC_ConfigChannel+0x50e>
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	0e9b      	lsrs	r3, r3, #26
 800ff02:	3301      	adds	r3, #1
 800ff04:	f003 021f 	and.w	r2, r3, #31
 800ff08:	4613      	mov	r3, r2
 800ff0a:	005b      	lsls	r3, r3, #1
 800ff0c:	4413      	add	r3, r2
 800ff0e:	051b      	lsls	r3, r3, #20
 800ff10:	e018      	b.n	800ff44 <HAL_ADC_ConfigChannel+0x540>
 800ff12:	683b      	ldr	r3, [r7, #0]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ff18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff1a:	fa93 f3a3 	rbit	r3, r3
 800ff1e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800ff20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff22:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800ff24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d101      	bne.n	800ff2e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800ff2a:	2320      	movs	r3, #32
 800ff2c:	e003      	b.n	800ff36 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800ff2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff30:	fab3 f383 	clz	r3, r3
 800ff34:	b2db      	uxtb	r3, r3
 800ff36:	3301      	adds	r3, #1
 800ff38:	f003 021f 	and.w	r2, r3, #31
 800ff3c:	4613      	mov	r3, r2
 800ff3e:	005b      	lsls	r3, r3, #1
 800ff40:	4413      	add	r3, r2
 800ff42:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800ff44:	430b      	orrs	r3, r1
 800ff46:	e080      	b.n	801004a <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800ff48:	683b      	ldr	r3, [r7, #0]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d107      	bne.n	800ff64 <HAL_ADC_ConfigChannel+0x560>
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	0e9b      	lsrs	r3, r3, #26
 800ff5a:	3301      	adds	r3, #1
 800ff5c:	069b      	lsls	r3, r3, #26
 800ff5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800ff62:	e015      	b.n	800ff90 <HAL_ADC_ConfigChannel+0x58c>
 800ff64:	683b      	ldr	r3, [r7, #0]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ff6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff6c:	fa93 f3a3 	rbit	r3, r3
 800ff70:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800ff72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff74:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800ff76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d101      	bne.n	800ff80 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 800ff7c:	2320      	movs	r3, #32
 800ff7e:	e003      	b.n	800ff88 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 800ff80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff82:	fab3 f383 	clz	r3, r3
 800ff86:	b2db      	uxtb	r3, r3
 800ff88:	3301      	adds	r3, #1
 800ff8a:	069b      	lsls	r3, r3, #26
 800ff8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800ff90:	683b      	ldr	r3, [r7, #0]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d109      	bne.n	800ffb0 <HAL_ADC_ConfigChannel+0x5ac>
 800ff9c:	683b      	ldr	r3, [r7, #0]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	0e9b      	lsrs	r3, r3, #26
 800ffa2:	3301      	adds	r3, #1
 800ffa4:	f003 031f 	and.w	r3, r3, #31
 800ffa8:	2101      	movs	r1, #1
 800ffaa:	fa01 f303 	lsl.w	r3, r1, r3
 800ffae:	e017      	b.n	800ffe0 <HAL_ADC_ConfigChannel+0x5dc>
 800ffb0:	683b      	ldr	r3, [r7, #0]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ffb6:	6a3b      	ldr	r3, [r7, #32]
 800ffb8:	fa93 f3a3 	rbit	r3, r3
 800ffbc:	61fb      	str	r3, [r7, #28]
  return result;
 800ffbe:	69fb      	ldr	r3, [r7, #28]
 800ffc0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800ffc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d101      	bne.n	800ffcc <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 800ffc8:	2320      	movs	r3, #32
 800ffca:	e003      	b.n	800ffd4 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 800ffcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffce:	fab3 f383 	clz	r3, r3
 800ffd2:	b2db      	uxtb	r3, r3
 800ffd4:	3301      	adds	r3, #1
 800ffd6:	f003 031f 	and.w	r3, r3, #31
 800ffda:	2101      	movs	r1, #1
 800ffdc:	fa01 f303 	lsl.w	r3, r1, r3
 800ffe0:	ea42 0103 	orr.w	r1, r2, r3
 800ffe4:	683b      	ldr	r3, [r7, #0]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d10d      	bne.n	801000c <HAL_ADC_ConfigChannel+0x608>
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	0e9b      	lsrs	r3, r3, #26
 800fff6:	3301      	adds	r3, #1
 800fff8:	f003 021f 	and.w	r2, r3, #31
 800fffc:	4613      	mov	r3, r2
 800fffe:	005b      	lsls	r3, r3, #1
 8010000:	4413      	add	r3, r2
 8010002:	3b1e      	subs	r3, #30
 8010004:	051b      	lsls	r3, r3, #20
 8010006:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801000a:	e01d      	b.n	8010048 <HAL_ADC_ConfigChannel+0x644>
 801000c:	683b      	ldr	r3, [r7, #0]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010012:	697b      	ldr	r3, [r7, #20]
 8010014:	fa93 f3a3 	rbit	r3, r3
 8010018:	613b      	str	r3, [r7, #16]
  return result;
 801001a:	693b      	ldr	r3, [r7, #16]
 801001c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801001e:	69bb      	ldr	r3, [r7, #24]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d103      	bne.n	801002c <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8010024:	2320      	movs	r3, #32
 8010026:	e005      	b.n	8010034 <HAL_ADC_ConfigChannel+0x630>
 8010028:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 801002c:	69bb      	ldr	r3, [r7, #24]
 801002e:	fab3 f383 	clz	r3, r3
 8010032:	b2db      	uxtb	r3, r3
 8010034:	3301      	adds	r3, #1
 8010036:	f003 021f 	and.w	r2, r3, #31
 801003a:	4613      	mov	r3, r2
 801003c:	005b      	lsls	r3, r3, #1
 801003e:	4413      	add	r3, r2
 8010040:	3b1e      	subs	r3, #30
 8010042:	051b      	lsls	r3, r3, #20
 8010044:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8010048:	430b      	orrs	r3, r1
 801004a:	683a      	ldr	r2, [r7, #0]
 801004c:	6892      	ldr	r2, [r2, #8]
 801004e:	4619      	mov	r1, r3
 8010050:	f7ff f93a 	bl	800f2c8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010054:	683b      	ldr	r3, [r7, #0]
 8010056:	681a      	ldr	r2, [r3, #0]
 8010058:	4b45      	ldr	r3, [pc, #276]	; (8010170 <HAL_ADC_ConfigChannel+0x76c>)
 801005a:	4013      	ands	r3, r2
 801005c:	2b00      	cmp	r3, #0
 801005e:	d07c      	beq.n	801015a <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8010060:	4844      	ldr	r0, [pc, #272]	; (8010174 <HAL_ADC_ConfigChannel+0x770>)
 8010062:	f7ff f88f 	bl	800f184 <LL_ADC_GetCommonPathInternalCh>
 8010066:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801006a:	4843      	ldr	r0, [pc, #268]	; (8010178 <HAL_ADC_ConfigChannel+0x774>)
 801006c:	f7ff f9f2 	bl	800f454 <LL_ADC_IsEnabled>
 8010070:	4603      	mov	r3, r0
 8010072:	2b00      	cmp	r3, #0
 8010074:	d15e      	bne.n	8010134 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8010076:	683b      	ldr	r3, [r7, #0]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	4a40      	ldr	r2, [pc, #256]	; (801017c <HAL_ADC_ConfigChannel+0x778>)
 801007c:	4293      	cmp	r3, r2
 801007e:	d127      	bne.n	80100d0 <HAL_ADC_ConfigChannel+0x6cc>
 8010080:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010084:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010088:	2b00      	cmp	r3, #0
 801008a:	d121      	bne.n	80100d0 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	4a39      	ldr	r2, [pc, #228]	; (8010178 <HAL_ADC_ConfigChannel+0x774>)
 8010092:	4293      	cmp	r3, r2
 8010094:	d161      	bne.n	801015a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8010096:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801009a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801009e:	4619      	mov	r1, r3
 80100a0:	4834      	ldr	r0, [pc, #208]	; (8010174 <HAL_ADC_ConfigChannel+0x770>)
 80100a2:	f7ff f85c 	bl	800f15e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80100a6:	4b36      	ldr	r3, [pc, #216]	; (8010180 <HAL_ADC_ConfigChannel+0x77c>)
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	099b      	lsrs	r3, r3, #6
 80100ac:	4a35      	ldr	r2, [pc, #212]	; (8010184 <HAL_ADC_ConfigChannel+0x780>)
 80100ae:	fba2 2303 	umull	r2, r3, r2, r3
 80100b2:	099b      	lsrs	r3, r3, #6
 80100b4:	1c5a      	adds	r2, r3, #1
 80100b6:	4613      	mov	r3, r2
 80100b8:	005b      	lsls	r3, r3, #1
 80100ba:	4413      	add	r3, r2
 80100bc:	009b      	lsls	r3, r3, #2
 80100be:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80100c0:	e002      	b.n	80100c8 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	3b01      	subs	r3, #1
 80100c6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d1f9      	bne.n	80100c2 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80100ce:	e044      	b.n	801015a <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80100d0:	683b      	ldr	r3, [r7, #0]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	4a2c      	ldr	r2, [pc, #176]	; (8010188 <HAL_ADC_ConfigChannel+0x784>)
 80100d6:	4293      	cmp	r3, r2
 80100d8:	d113      	bne.n	8010102 <HAL_ADC_ConfigChannel+0x6fe>
 80100da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80100de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d10d      	bne.n	8010102 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	4a23      	ldr	r2, [pc, #140]	; (8010178 <HAL_ADC_ConfigChannel+0x774>)
 80100ec:	4293      	cmp	r3, r2
 80100ee:	d134      	bne.n	801015a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80100f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80100f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80100f8:	4619      	mov	r1, r3
 80100fa:	481e      	ldr	r0, [pc, #120]	; (8010174 <HAL_ADC_ConfigChannel+0x770>)
 80100fc:	f7ff f82f 	bl	800f15e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8010100:	e02b      	b.n	801015a <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8010102:	683b      	ldr	r3, [r7, #0]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	4a21      	ldr	r2, [pc, #132]	; (801018c <HAL_ADC_ConfigChannel+0x788>)
 8010108:	4293      	cmp	r3, r2
 801010a:	d126      	bne.n	801015a <HAL_ADC_ConfigChannel+0x756>
 801010c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010110:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010114:	2b00      	cmp	r3, #0
 8010116:	d120      	bne.n	801015a <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	4a16      	ldr	r2, [pc, #88]	; (8010178 <HAL_ADC_ConfigChannel+0x774>)
 801011e:	4293      	cmp	r3, r2
 8010120:	d11b      	bne.n	801015a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8010122:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010126:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801012a:	4619      	mov	r1, r3
 801012c:	4811      	ldr	r0, [pc, #68]	; (8010174 <HAL_ADC_ConfigChannel+0x770>)
 801012e:	f7ff f816 	bl	800f15e <LL_ADC_SetCommonPathInternalCh>
 8010132:	e012      	b.n	801015a <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010138:	f043 0220 	orr.w	r2, r3, #32
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8010140:	2301      	movs	r3, #1
 8010142:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8010146:	e008      	b.n	801015a <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801014c:	f043 0220 	orr.w	r2, r3, #32
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8010154:	2301      	movs	r3, #1
 8010156:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	2200      	movs	r2, #0
 801015e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8010162:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8010166:	4618      	mov	r0, r3
 8010168:	37d8      	adds	r7, #216	; 0xd8
 801016a:	46bd      	mov	sp, r7
 801016c:	bd80      	pop	{r7, pc}
 801016e:	bf00      	nop
 8010170:	80080000 	.word	0x80080000
 8010174:	50040300 	.word	0x50040300
 8010178:	50040000 	.word	0x50040000
 801017c:	c7520000 	.word	0xc7520000
 8010180:	2000007c 	.word	0x2000007c
 8010184:	053e2d63 	.word	0x053e2d63
 8010188:	cb840000 	.word	0xcb840000
 801018c:	80000001 	.word	0x80000001

08010190 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8010190:	b580      	push	{r7, lr}
 8010192:	b088      	sub	sp, #32
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
 8010198:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 801019a:	2300      	movs	r3, #0
 801019c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 801019e:	683b      	ldr	r3, [r7, #0]
 80101a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	4618      	mov	r0, r3
 80101a8:	f7ff f9a2 	bl	800f4f0 <LL_ADC_REG_IsConversionOngoing>
 80101ac:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	4618      	mov	r0, r3
 80101b4:	f7ff f9c3 	bl	800f53e <LL_ADC_INJ_IsConversionOngoing>
 80101b8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80101ba:	693b      	ldr	r3, [r7, #16]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d103      	bne.n	80101c8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	f000 8098 	beq.w	80102f8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	68db      	ldr	r3, [r3, #12]
 80101ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d02a      	beq.n	801022c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	7e5b      	ldrb	r3, [r3, #25]
 80101da:	2b01      	cmp	r3, #1
 80101dc:	d126      	bne.n	801022c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	7e1b      	ldrb	r3, [r3, #24]
 80101e2:	2b01      	cmp	r3, #1
 80101e4:	d122      	bne.n	801022c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80101e6:	2301      	movs	r3, #1
 80101e8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80101ea:	e014      	b.n	8010216 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80101ec:	69fb      	ldr	r3, [r7, #28]
 80101ee:	4a45      	ldr	r2, [pc, #276]	; (8010304 <ADC_ConversionStop+0x174>)
 80101f0:	4293      	cmp	r3, r2
 80101f2:	d90d      	bls.n	8010210 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80101f8:	f043 0210 	orr.w	r2, r3, #16
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010204:	f043 0201 	orr.w	r2, r3, #1
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 801020c:	2301      	movs	r3, #1
 801020e:	e074      	b.n	80102fa <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8010210:	69fb      	ldr	r3, [r7, #28]
 8010212:	3301      	adds	r3, #1
 8010214:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010220:	2b40      	cmp	r3, #64	; 0x40
 8010222:	d1e3      	bne.n	80101ec <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	2240      	movs	r2, #64	; 0x40
 801022a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 801022c:	69bb      	ldr	r3, [r7, #24]
 801022e:	2b02      	cmp	r3, #2
 8010230:	d014      	beq.n	801025c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	4618      	mov	r0, r3
 8010238:	f7ff f95a 	bl	800f4f0 <LL_ADC_REG_IsConversionOngoing>
 801023c:	4603      	mov	r3, r0
 801023e:	2b00      	cmp	r3, #0
 8010240:	d00c      	beq.n	801025c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	4618      	mov	r0, r3
 8010248:	f7ff f917 	bl	800f47a <LL_ADC_IsDisableOngoing>
 801024c:	4603      	mov	r3, r0
 801024e:	2b00      	cmp	r3, #0
 8010250:	d104      	bne.n	801025c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	4618      	mov	r0, r3
 8010258:	f7ff f936 	bl	800f4c8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 801025c:	69bb      	ldr	r3, [r7, #24]
 801025e:	2b01      	cmp	r3, #1
 8010260:	d014      	beq.n	801028c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	4618      	mov	r0, r3
 8010268:	f7ff f969 	bl	800f53e <LL_ADC_INJ_IsConversionOngoing>
 801026c:	4603      	mov	r3, r0
 801026e:	2b00      	cmp	r3, #0
 8010270:	d00c      	beq.n	801028c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	4618      	mov	r0, r3
 8010278:	f7ff f8ff 	bl	800f47a <LL_ADC_IsDisableOngoing>
 801027c:	4603      	mov	r3, r0
 801027e:	2b00      	cmp	r3, #0
 8010280:	d104      	bne.n	801028c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	4618      	mov	r0, r3
 8010288:	f7ff f945 	bl	800f516 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 801028c:	69bb      	ldr	r3, [r7, #24]
 801028e:	2b02      	cmp	r3, #2
 8010290:	d005      	beq.n	801029e <ADC_ConversionStop+0x10e>
 8010292:	69bb      	ldr	r3, [r7, #24]
 8010294:	2b03      	cmp	r3, #3
 8010296:	d105      	bne.n	80102a4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8010298:	230c      	movs	r3, #12
 801029a:	617b      	str	r3, [r7, #20]
        break;
 801029c:	e005      	b.n	80102aa <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 801029e:	2308      	movs	r3, #8
 80102a0:	617b      	str	r3, [r7, #20]
        break;
 80102a2:	e002      	b.n	80102aa <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80102a4:	2304      	movs	r3, #4
 80102a6:	617b      	str	r3, [r7, #20]
        break;
 80102a8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80102aa:	f7fe ff21 	bl	800f0f0 <HAL_GetTick>
 80102ae:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80102b0:	e01b      	b.n	80102ea <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80102b2:	f7fe ff1d 	bl	800f0f0 <HAL_GetTick>
 80102b6:	4602      	mov	r2, r0
 80102b8:	68bb      	ldr	r3, [r7, #8]
 80102ba:	1ad3      	subs	r3, r2, r3
 80102bc:	2b05      	cmp	r3, #5
 80102be:	d914      	bls.n	80102ea <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	689a      	ldr	r2, [r3, #8]
 80102c6:	697b      	ldr	r3, [r7, #20]
 80102c8:	4013      	ands	r3, r2
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d00d      	beq.n	80102ea <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80102d2:	f043 0210 	orr.w	r2, r3, #16
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80102de:	f043 0201 	orr.w	r2, r3, #1
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80102e6:	2301      	movs	r3, #1
 80102e8:	e007      	b.n	80102fa <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	689a      	ldr	r2, [r3, #8]
 80102f0:	697b      	ldr	r3, [r7, #20]
 80102f2:	4013      	ands	r3, r2
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d1dc      	bne.n	80102b2 <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 80102f8:	2300      	movs	r3, #0
}
 80102fa:	4618      	mov	r0, r3
 80102fc:	3720      	adds	r7, #32
 80102fe:	46bd      	mov	sp, r7
 8010300:	bd80      	pop	{r7, pc}
 8010302:	bf00      	nop
 8010304:	a33fffff 	.word	0xa33fffff

08010308 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8010308:	b580      	push	{r7, lr}
 801030a:	b084      	sub	sp, #16
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8010310:	2300      	movs	r3, #0
 8010312:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	4618      	mov	r0, r3
 801031a:	f7ff f89b 	bl	800f454 <LL_ADC_IsEnabled>
 801031e:	4603      	mov	r3, r0
 8010320:	2b00      	cmp	r3, #0
 8010322:	d15e      	bne.n	80103e2 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	689a      	ldr	r2, [r3, #8]
 801032a:	4b30      	ldr	r3, [pc, #192]	; (80103ec <ADC_Enable+0xe4>)
 801032c:	4013      	ands	r3, r2
 801032e:	2b00      	cmp	r3, #0
 8010330:	d00d      	beq.n	801034e <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010336:	f043 0210 	orr.w	r2, r3, #16
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010342:	f043 0201 	orr.w	r2, r3, #1
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 801034a:	2301      	movs	r3, #1
 801034c:	e04a      	b.n	80103e4 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	4618      	mov	r0, r3
 8010354:	f7ff f856 	bl	800f404 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8010358:	4825      	ldr	r0, [pc, #148]	; (80103f0 <ADC_Enable+0xe8>)
 801035a:	f7fe ff13 	bl	800f184 <LL_ADC_GetCommonPathInternalCh>
 801035e:	4603      	mov	r3, r0
 8010360:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010364:	2b00      	cmp	r3, #0
 8010366:	d00f      	beq.n	8010388 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8010368:	4b22      	ldr	r3, [pc, #136]	; (80103f4 <ADC_Enable+0xec>)
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	099b      	lsrs	r3, r3, #6
 801036e:	4a22      	ldr	r2, [pc, #136]	; (80103f8 <ADC_Enable+0xf0>)
 8010370:	fba2 2303 	umull	r2, r3, r2, r3
 8010374:	099b      	lsrs	r3, r3, #6
 8010376:	3301      	adds	r3, #1
 8010378:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 801037a:	e002      	b.n	8010382 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 801037c:	68bb      	ldr	r3, [r7, #8]
 801037e:	3b01      	subs	r3, #1
 8010380:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8010382:	68bb      	ldr	r3, [r7, #8]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d1f9      	bne.n	801037c <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8010388:	f7fe feb2 	bl	800f0f0 <HAL_GetTick>
 801038c:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801038e:	e021      	b.n	80103d4 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	4618      	mov	r0, r3
 8010396:	f7ff f85d 	bl	800f454 <LL_ADC_IsEnabled>
 801039a:	4603      	mov	r3, r0
 801039c:	2b00      	cmp	r3, #0
 801039e:	d104      	bne.n	80103aa <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	4618      	mov	r0, r3
 80103a6:	f7ff f82d 	bl	800f404 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80103aa:	f7fe fea1 	bl	800f0f0 <HAL_GetTick>
 80103ae:	4602      	mov	r2, r0
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	1ad3      	subs	r3, r2, r3
 80103b4:	2b02      	cmp	r3, #2
 80103b6:	d90d      	bls.n	80103d4 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80103bc:	f043 0210 	orr.w	r2, r3, #16
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103c8:	f043 0201 	orr.w	r2, r3, #1
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 80103d0:	2301      	movs	r3, #1
 80103d2:	e007      	b.n	80103e4 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	f003 0301 	and.w	r3, r3, #1
 80103de:	2b01      	cmp	r3, #1
 80103e0:	d1d6      	bne.n	8010390 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80103e2:	2300      	movs	r3, #0
}
 80103e4:	4618      	mov	r0, r3
 80103e6:	3710      	adds	r7, #16
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd80      	pop	{r7, pc}
 80103ec:	8000003f 	.word	0x8000003f
 80103f0:	50040300 	.word	0x50040300
 80103f4:	2000007c 	.word	0x2000007c
 80103f8:	053e2d63 	.word	0x053e2d63

080103fc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b084      	sub	sp, #16
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	4618      	mov	r0, r3
 801040a:	f7ff f836 	bl	800f47a <LL_ADC_IsDisableOngoing>
 801040e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	4618      	mov	r0, r3
 8010416:	f7ff f81d 	bl	800f454 <LL_ADC_IsEnabled>
 801041a:	4603      	mov	r3, r0
 801041c:	2b00      	cmp	r3, #0
 801041e:	d047      	beq.n	80104b0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d144      	bne.n	80104b0 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	689b      	ldr	r3, [r3, #8]
 801042c:	f003 030d 	and.w	r3, r3, #13
 8010430:	2b01      	cmp	r3, #1
 8010432:	d10c      	bne.n	801044e <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	4618      	mov	r0, r3
 801043a:	f7fe fff7 	bl	800f42c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	2203      	movs	r2, #3
 8010444:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8010446:	f7fe fe53 	bl	800f0f0 <HAL_GetTick>
 801044a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801044c:	e029      	b.n	80104a2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010452:	f043 0210 	orr.w	r2, r3, #16
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801045e:	f043 0201 	orr.w	r2, r3, #1
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8010466:	2301      	movs	r3, #1
 8010468:	e023      	b.n	80104b2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 801046a:	f7fe fe41 	bl	800f0f0 <HAL_GetTick>
 801046e:	4602      	mov	r2, r0
 8010470:	68bb      	ldr	r3, [r7, #8]
 8010472:	1ad3      	subs	r3, r2, r3
 8010474:	2b02      	cmp	r3, #2
 8010476:	d914      	bls.n	80104a2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	689b      	ldr	r3, [r3, #8]
 801047e:	f003 0301 	and.w	r3, r3, #1
 8010482:	2b00      	cmp	r3, #0
 8010484:	d00d      	beq.n	80104a2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801048a:	f043 0210 	orr.w	r2, r3, #16
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010496:	f043 0201 	orr.w	r2, r3, #1
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 801049e:	2301      	movs	r3, #1
 80104a0:	e007      	b.n	80104b2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	689b      	ldr	r3, [r3, #8]
 80104a8:	f003 0301 	and.w	r3, r3, #1
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d1dc      	bne.n	801046a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80104b0:	2300      	movs	r3, #0
}
 80104b2:	4618      	mov	r0, r3
 80104b4:	3710      	adds	r7, #16
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bd80      	pop	{r7, pc}

080104ba <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80104ba:	b580      	push	{r7, lr}
 80104bc:	b084      	sub	sp, #16
 80104be:	af00      	add	r7, sp, #0
 80104c0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104c6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80104cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d14b      	bne.n	801056c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80104d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	f003 0308 	and.w	r3, r3, #8
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d021      	beq.n	8010532 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	4618      	mov	r0, r3
 80104f4:	f7fe fea9 	bl	800f24a <LL_ADC_REG_IsTriggerSourceSWStart>
 80104f8:	4603      	mov	r3, r0
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d032      	beq.n	8010564 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	68db      	ldr	r3, [r3, #12]
 8010504:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010508:	2b00      	cmp	r3, #0
 801050a:	d12b      	bne.n	8010564 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010510:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801051c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010520:	2b00      	cmp	r3, #0
 8010522:	d11f      	bne.n	8010564 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010528:	f043 0201 	orr.w	r2, r3, #1
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	655a      	str	r2, [r3, #84]	; 0x54
 8010530:	e018      	b.n	8010564 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	68db      	ldr	r3, [r3, #12]
 8010538:	f003 0302 	and.w	r3, r3, #2
 801053c:	2b00      	cmp	r3, #0
 801053e:	d111      	bne.n	8010564 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010544:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010550:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010554:	2b00      	cmp	r3, #0
 8010556:	d105      	bne.n	8010564 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801055c:	f043 0201 	orr.w	r2, r3, #1
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8010564:	68f8      	ldr	r0, [r7, #12]
 8010566:	f7ff fa2e 	bl	800f9c6 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 801056a:	e00e      	b.n	801058a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010570:	f003 0310 	and.w	r3, r3, #16
 8010574:	2b00      	cmp	r3, #0
 8010576:	d003      	beq.n	8010580 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8010578:	68f8      	ldr	r0, [r7, #12]
 801057a:	f7ff fa38 	bl	800f9ee <HAL_ADC_ErrorCallback>
}
 801057e:	e004      	b.n	801058a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010586:	6878      	ldr	r0, [r7, #4]
 8010588:	4798      	blx	r3
}
 801058a:	bf00      	nop
 801058c:	3710      	adds	r7, #16
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}

08010592 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8010592:	b580      	push	{r7, lr}
 8010594:	b084      	sub	sp, #16
 8010596:	af00      	add	r7, sp, #0
 8010598:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801059e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80105a0:	68f8      	ldr	r0, [r7, #12]
 80105a2:	f7ff fa1a 	bl	800f9da <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80105a6:	bf00      	nop
 80105a8:	3710      	adds	r7, #16
 80105aa:	46bd      	mov	sp, r7
 80105ac:	bd80      	pop	{r7, pc}

080105ae <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80105ae:	b580      	push	{r7, lr}
 80105b0:	b084      	sub	sp, #16
 80105b2:	af00      	add	r7, sp, #0
 80105b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105ba:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80105c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80105cc:	f043 0204 	orr.w	r2, r3, #4
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80105d4:	68f8      	ldr	r0, [r7, #12]
 80105d6:	f7ff fa0a 	bl	800f9ee <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80105da:	bf00      	nop
 80105dc:	3710      	adds	r7, #16
 80105de:	46bd      	mov	sp, r7
 80105e0:	bd80      	pop	{r7, pc}

080105e2 <LL_ADC_StartCalibration>:
{
 80105e2:	b480      	push	{r7}
 80105e4:	b083      	sub	sp, #12
 80105e6:	af00      	add	r7, sp, #0
 80105e8:	6078      	str	r0, [r7, #4]
 80105ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	689b      	ldr	r3, [r3, #8]
 80105f0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80105f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80105f8:	683a      	ldr	r2, [r7, #0]
 80105fa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80105fe:	4313      	orrs	r3, r2
 8010600:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	609a      	str	r2, [r3, #8]
}
 8010608:	bf00      	nop
 801060a:	370c      	adds	r7, #12
 801060c:	46bd      	mov	sp, r7
 801060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010612:	4770      	bx	lr

08010614 <LL_ADC_IsCalibrationOnGoing>:
{
 8010614:	b480      	push	{r7}
 8010616:	b083      	sub	sp, #12
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	689b      	ldr	r3, [r3, #8]
 8010620:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010624:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010628:	d101      	bne.n	801062e <LL_ADC_IsCalibrationOnGoing+0x1a>
 801062a:	2301      	movs	r3, #1
 801062c:	e000      	b.n	8010630 <LL_ADC_IsCalibrationOnGoing+0x1c>
 801062e:	2300      	movs	r3, #0
}
 8010630:	4618      	mov	r0, r3
 8010632:	370c      	adds	r7, #12
 8010634:	46bd      	mov	sp, r7
 8010636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801063a:	4770      	bx	lr

0801063c <HAL_ADCEx_Calibration_Start>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b084      	sub	sp, #16
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
 8010644:	6039      	str	r1, [r7, #0]
  uint32_t adc_clk_async_presc;
  __IO uint32_t delay_cpu_cycles;
#endif /* ADC_SUPPORT_2_5_MSPS */

  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8010646:	2300      	movs	r3, #0
 8010648:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010650:	2b01      	cmp	r3, #1
 8010652:	d101      	bne.n	8010658 <HAL_ADCEx_Calibration_Start+0x1c>
 8010654:	2302      	movs	r3, #2
 8010656:	e04d      	b.n	80106f4 <HAL_ADCEx_Calibration_Start+0xb8>
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	2201      	movs	r2, #1
 801065c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8010660:	6878      	ldr	r0, [r7, #4]
 8010662:	f7ff fecb 	bl	80103fc <ADC_Disable>
 8010666:	4603      	mov	r3, r0
 8010668:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 801066a:	7bfb      	ldrb	r3, [r7, #15]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d136      	bne.n	80106de <HAL_ADCEx_Calibration_Start+0xa2>
#if defined(ADC_SUPPORT_2_5_MSPS)
    ADC_STATE_CLR_SET(hadc->State,
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
#else
    ADC_STATE_CLR_SET(hadc->State,
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010674:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8010678:	f023 0302 	bic.w	r3, r3, #2
 801067c:	f043 0202 	orr.w	r2, r3, #2
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	655a      	str	r2, [r3, #84]	; 0x54
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);

#else
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	6839      	ldr	r1, [r7, #0]
 801068a:	4618      	mov	r0, r3
 801068c:	f7ff ffa9 	bl	80105e2 <LL_ADC_StartCalibration>
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8010690:	e014      	b.n	80106bc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8010692:	68bb      	ldr	r3, [r7, #8]
 8010694:	3301      	adds	r3, #1
 8010696:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8010698:	68bb      	ldr	r3, [r7, #8]
 801069a:	4a18      	ldr	r2, [pc, #96]	; (80106fc <HAL_ADCEx_Calibration_Start+0xc0>)
 801069c:	4293      	cmp	r3, r2
 801069e:	d90d      	bls.n	80106bc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80106a4:	f023 0312 	bic.w	r3, r3, #18
 80106a8:	f043 0210 	orr.w	r2, r3, #16
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	2200      	movs	r2, #0
 80106b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80106b8:	2301      	movs	r3, #1
 80106ba:	e01b      	b.n	80106f4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	4618      	mov	r0, r3
 80106c2:	f7ff ffa7 	bl	8010614 <LL_ADC_IsCalibrationOnGoing>
 80106c6:	4603      	mov	r3, r0
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d1e2      	bne.n	8010692 <HAL_ADCEx_Calibration_Start+0x56>
    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80106d0:	f023 0303 	bic.w	r3, r3, #3
 80106d4:	f043 0201 	orr.w	r2, r3, #1
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	655a      	str	r2, [r3, #84]	; 0x54
 80106dc:	e005      	b.n	80106ea <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80106e2:	f043 0210 	orr.w	r2, r3, #16
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	2200      	movs	r2, #0
 80106ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80106f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80106f4:	4618      	mov	r0, r3
 80106f6:	3710      	adds	r7, #16
 80106f8:	46bd      	mov	sp, r7
 80106fa:	bd80      	pop	{r7, pc}
 80106fc:	00026aaa 	.word	0x00026aaa

08010700 <__NVIC_SetPriorityGrouping>:
{
 8010700:	b480      	push	{r7}
 8010702:	b085      	sub	sp, #20
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	f003 0307 	and.w	r3, r3, #7
 801070e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010710:	4b0c      	ldr	r3, [pc, #48]	; (8010744 <__NVIC_SetPriorityGrouping+0x44>)
 8010712:	68db      	ldr	r3, [r3, #12]
 8010714:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010716:	68ba      	ldr	r2, [r7, #8]
 8010718:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801071c:	4013      	ands	r3, r2
 801071e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010724:	68bb      	ldr	r3, [r7, #8]
 8010726:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8010728:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801072c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8010732:	4a04      	ldr	r2, [pc, #16]	; (8010744 <__NVIC_SetPriorityGrouping+0x44>)
 8010734:	68bb      	ldr	r3, [r7, #8]
 8010736:	60d3      	str	r3, [r2, #12]
}
 8010738:	bf00      	nop
 801073a:	3714      	adds	r7, #20
 801073c:	46bd      	mov	sp, r7
 801073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010742:	4770      	bx	lr
 8010744:	e000ed00 	.word	0xe000ed00

08010748 <__NVIC_GetPriorityGrouping>:
{
 8010748:	b480      	push	{r7}
 801074a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801074c:	4b04      	ldr	r3, [pc, #16]	; (8010760 <__NVIC_GetPriorityGrouping+0x18>)
 801074e:	68db      	ldr	r3, [r3, #12]
 8010750:	0a1b      	lsrs	r3, r3, #8
 8010752:	f003 0307 	and.w	r3, r3, #7
}
 8010756:	4618      	mov	r0, r3
 8010758:	46bd      	mov	sp, r7
 801075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075e:	4770      	bx	lr
 8010760:	e000ed00 	.word	0xe000ed00

08010764 <__NVIC_EnableIRQ>:
{
 8010764:	b480      	push	{r7}
 8010766:	b083      	sub	sp, #12
 8010768:	af00      	add	r7, sp, #0
 801076a:	4603      	mov	r3, r0
 801076c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801076e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010772:	2b00      	cmp	r3, #0
 8010774:	db0b      	blt.n	801078e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010776:	79fb      	ldrb	r3, [r7, #7]
 8010778:	f003 021f 	and.w	r2, r3, #31
 801077c:	4907      	ldr	r1, [pc, #28]	; (801079c <__NVIC_EnableIRQ+0x38>)
 801077e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010782:	095b      	lsrs	r3, r3, #5
 8010784:	2001      	movs	r0, #1
 8010786:	fa00 f202 	lsl.w	r2, r0, r2
 801078a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801078e:	bf00      	nop
 8010790:	370c      	adds	r7, #12
 8010792:	46bd      	mov	sp, r7
 8010794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010798:	4770      	bx	lr
 801079a:	bf00      	nop
 801079c:	e000e100 	.word	0xe000e100

080107a0 <__NVIC_DisableIRQ>:
{
 80107a0:	b480      	push	{r7}
 80107a2:	b083      	sub	sp, #12
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	4603      	mov	r3, r0
 80107a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80107aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	db12      	blt.n	80107d8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80107b2:	79fb      	ldrb	r3, [r7, #7]
 80107b4:	f003 021f 	and.w	r2, r3, #31
 80107b8:	490a      	ldr	r1, [pc, #40]	; (80107e4 <__NVIC_DisableIRQ+0x44>)
 80107ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80107be:	095b      	lsrs	r3, r3, #5
 80107c0:	2001      	movs	r0, #1
 80107c2:	fa00 f202 	lsl.w	r2, r0, r2
 80107c6:	3320      	adds	r3, #32
 80107c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80107cc:	f3bf 8f4f 	dsb	sy
}
 80107d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80107d2:	f3bf 8f6f 	isb	sy
}
 80107d6:	bf00      	nop
}
 80107d8:	bf00      	nop
 80107da:	370c      	adds	r7, #12
 80107dc:	46bd      	mov	sp, r7
 80107de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e2:	4770      	bx	lr
 80107e4:	e000e100 	.word	0xe000e100

080107e8 <__NVIC_SetPendingIRQ>:
{
 80107e8:	b480      	push	{r7}
 80107ea:	b083      	sub	sp, #12
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	4603      	mov	r3, r0
 80107f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80107f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	db0c      	blt.n	8010814 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80107fa:	79fb      	ldrb	r3, [r7, #7]
 80107fc:	f003 021f 	and.w	r2, r3, #31
 8010800:	4907      	ldr	r1, [pc, #28]	; (8010820 <__NVIC_SetPendingIRQ+0x38>)
 8010802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010806:	095b      	lsrs	r3, r3, #5
 8010808:	2001      	movs	r0, #1
 801080a:	fa00 f202 	lsl.w	r2, r0, r2
 801080e:	3340      	adds	r3, #64	; 0x40
 8010810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010814:	bf00      	nop
 8010816:	370c      	adds	r7, #12
 8010818:	46bd      	mov	sp, r7
 801081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081e:	4770      	bx	lr
 8010820:	e000e100 	.word	0xe000e100

08010824 <__NVIC_ClearPendingIRQ>:
{
 8010824:	b480      	push	{r7}
 8010826:	b083      	sub	sp, #12
 8010828:	af00      	add	r7, sp, #0
 801082a:	4603      	mov	r3, r0
 801082c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801082e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010832:	2b00      	cmp	r3, #0
 8010834:	db0c      	blt.n	8010850 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010836:	79fb      	ldrb	r3, [r7, #7]
 8010838:	f003 021f 	and.w	r2, r3, #31
 801083c:	4907      	ldr	r1, [pc, #28]	; (801085c <__NVIC_ClearPendingIRQ+0x38>)
 801083e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010842:	095b      	lsrs	r3, r3, #5
 8010844:	2001      	movs	r0, #1
 8010846:	fa00 f202 	lsl.w	r2, r0, r2
 801084a:	3360      	adds	r3, #96	; 0x60
 801084c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010850:	bf00      	nop
 8010852:	370c      	adds	r7, #12
 8010854:	46bd      	mov	sp, r7
 8010856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085a:	4770      	bx	lr
 801085c:	e000e100 	.word	0xe000e100

08010860 <__NVIC_SetPriority>:
{
 8010860:	b480      	push	{r7}
 8010862:	b083      	sub	sp, #12
 8010864:	af00      	add	r7, sp, #0
 8010866:	4603      	mov	r3, r0
 8010868:	6039      	str	r1, [r7, #0]
 801086a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801086c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010870:	2b00      	cmp	r3, #0
 8010872:	db0a      	blt.n	801088a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010874:	683b      	ldr	r3, [r7, #0]
 8010876:	b2da      	uxtb	r2, r3
 8010878:	490c      	ldr	r1, [pc, #48]	; (80108ac <__NVIC_SetPriority+0x4c>)
 801087a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801087e:	0112      	lsls	r2, r2, #4
 8010880:	b2d2      	uxtb	r2, r2
 8010882:	440b      	add	r3, r1
 8010884:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010888:	e00a      	b.n	80108a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801088a:	683b      	ldr	r3, [r7, #0]
 801088c:	b2da      	uxtb	r2, r3
 801088e:	4908      	ldr	r1, [pc, #32]	; (80108b0 <__NVIC_SetPriority+0x50>)
 8010890:	79fb      	ldrb	r3, [r7, #7]
 8010892:	f003 030f 	and.w	r3, r3, #15
 8010896:	3b04      	subs	r3, #4
 8010898:	0112      	lsls	r2, r2, #4
 801089a:	b2d2      	uxtb	r2, r2
 801089c:	440b      	add	r3, r1
 801089e:	761a      	strb	r2, [r3, #24]
}
 80108a0:	bf00      	nop
 80108a2:	370c      	adds	r7, #12
 80108a4:	46bd      	mov	sp, r7
 80108a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108aa:	4770      	bx	lr
 80108ac:	e000e100 	.word	0xe000e100
 80108b0:	e000ed00 	.word	0xe000ed00

080108b4 <NVIC_EncodePriority>:
{
 80108b4:	b480      	push	{r7}
 80108b6:	b089      	sub	sp, #36	; 0x24
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	60f8      	str	r0, [r7, #12]
 80108bc:	60b9      	str	r1, [r7, #8]
 80108be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	f003 0307 	and.w	r3, r3, #7
 80108c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80108c8:	69fb      	ldr	r3, [r7, #28]
 80108ca:	f1c3 0307 	rsb	r3, r3, #7
 80108ce:	2b04      	cmp	r3, #4
 80108d0:	bf28      	it	cs
 80108d2:	2304      	movcs	r3, #4
 80108d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80108d6:	69fb      	ldr	r3, [r7, #28]
 80108d8:	3304      	adds	r3, #4
 80108da:	2b06      	cmp	r3, #6
 80108dc:	d902      	bls.n	80108e4 <NVIC_EncodePriority+0x30>
 80108de:	69fb      	ldr	r3, [r7, #28]
 80108e0:	3b03      	subs	r3, #3
 80108e2:	e000      	b.n	80108e6 <NVIC_EncodePriority+0x32>
 80108e4:	2300      	movs	r3, #0
 80108e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80108e8:	f04f 32ff 	mov.w	r2, #4294967295
 80108ec:	69bb      	ldr	r3, [r7, #24]
 80108ee:	fa02 f303 	lsl.w	r3, r2, r3
 80108f2:	43da      	mvns	r2, r3
 80108f4:	68bb      	ldr	r3, [r7, #8]
 80108f6:	401a      	ands	r2, r3
 80108f8:	697b      	ldr	r3, [r7, #20]
 80108fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80108fc:	f04f 31ff 	mov.w	r1, #4294967295
 8010900:	697b      	ldr	r3, [r7, #20]
 8010902:	fa01 f303 	lsl.w	r3, r1, r3
 8010906:	43d9      	mvns	r1, r3
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801090c:	4313      	orrs	r3, r2
}
 801090e:	4618      	mov	r0, r3
 8010910:	3724      	adds	r7, #36	; 0x24
 8010912:	46bd      	mov	sp, r7
 8010914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010918:	4770      	bx	lr
	...

0801091c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801091c:	b580      	push	{r7, lr}
 801091e:	b082      	sub	sp, #8
 8010920:	af00      	add	r7, sp, #0
 8010922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	3b01      	subs	r3, #1
 8010928:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801092c:	d301      	bcc.n	8010932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801092e:	2301      	movs	r3, #1
 8010930:	e00f      	b.n	8010952 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010932:	4a0a      	ldr	r2, [pc, #40]	; (801095c <SysTick_Config+0x40>)
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	3b01      	subs	r3, #1
 8010938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801093a:	210f      	movs	r1, #15
 801093c:	f04f 30ff 	mov.w	r0, #4294967295
 8010940:	f7ff ff8e 	bl	8010860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010944:	4b05      	ldr	r3, [pc, #20]	; (801095c <SysTick_Config+0x40>)
 8010946:	2200      	movs	r2, #0
 8010948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801094a:	4b04      	ldr	r3, [pc, #16]	; (801095c <SysTick_Config+0x40>)
 801094c:	2207      	movs	r2, #7
 801094e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010950:	2300      	movs	r3, #0
}
 8010952:	4618      	mov	r0, r3
 8010954:	3708      	adds	r7, #8
 8010956:	46bd      	mov	sp, r7
 8010958:	bd80      	pop	{r7, pc}
 801095a:	bf00      	nop
 801095c:	e000e010 	.word	0xe000e010

08010960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b082      	sub	sp, #8
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010968:	6878      	ldr	r0, [r7, #4]
 801096a:	f7ff fec9 	bl	8010700 <__NVIC_SetPriorityGrouping>
}
 801096e:	bf00      	nop
 8010970:	3708      	adds	r7, #8
 8010972:	46bd      	mov	sp, r7
 8010974:	bd80      	pop	{r7, pc}

08010976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010976:	b580      	push	{r7, lr}
 8010978:	b086      	sub	sp, #24
 801097a:	af00      	add	r7, sp, #0
 801097c:	4603      	mov	r3, r0
 801097e:	60b9      	str	r1, [r7, #8]
 8010980:	607a      	str	r2, [r7, #4]
 8010982:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8010984:	f7ff fee0 	bl	8010748 <__NVIC_GetPriorityGrouping>
 8010988:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801098a:	687a      	ldr	r2, [r7, #4]
 801098c:	68b9      	ldr	r1, [r7, #8]
 801098e:	6978      	ldr	r0, [r7, #20]
 8010990:	f7ff ff90 	bl	80108b4 <NVIC_EncodePriority>
 8010994:	4602      	mov	r2, r0
 8010996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801099a:	4611      	mov	r1, r2
 801099c:	4618      	mov	r0, r3
 801099e:	f7ff ff5f 	bl	8010860 <__NVIC_SetPriority>
}
 80109a2:	bf00      	nop
 80109a4:	3718      	adds	r7, #24
 80109a6:	46bd      	mov	sp, r7
 80109a8:	bd80      	pop	{r7, pc}

080109aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80109aa:	b580      	push	{r7, lr}
 80109ac:	b082      	sub	sp, #8
 80109ae:	af00      	add	r7, sp, #0
 80109b0:	4603      	mov	r3, r0
 80109b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80109b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80109b8:	4618      	mov	r0, r3
 80109ba:	f7ff fed3 	bl	8010764 <__NVIC_EnableIRQ>
}
 80109be:	bf00      	nop
 80109c0:	3708      	adds	r7, #8
 80109c2:	46bd      	mov	sp, r7
 80109c4:	bd80      	pop	{r7, pc}

080109c6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80109c6:	b580      	push	{r7, lr}
 80109c8:	b082      	sub	sp, #8
 80109ca:	af00      	add	r7, sp, #0
 80109cc:	4603      	mov	r3, r0
 80109ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80109d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80109d4:	4618      	mov	r0, r3
 80109d6:	f7ff fee3 	bl	80107a0 <__NVIC_DisableIRQ>
}
 80109da:	bf00      	nop
 80109dc:	3708      	adds	r7, #8
 80109de:	46bd      	mov	sp, r7
 80109e0:	bd80      	pop	{r7, pc}

080109e2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80109e2:	b580      	push	{r7, lr}
 80109e4:	b082      	sub	sp, #8
 80109e6:	af00      	add	r7, sp, #0
 80109e8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80109ea:	6878      	ldr	r0, [r7, #4]
 80109ec:	f7ff ff96 	bl	801091c <SysTick_Config>
 80109f0:	4603      	mov	r3, r0
}
 80109f2:	4618      	mov	r0, r3
 80109f4:	3708      	adds	r7, #8
 80109f6:	46bd      	mov	sp, r7
 80109f8:	bd80      	pop	{r7, pc}

080109fa <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80109fa:	b580      	push	{r7, lr}
 80109fc:	b082      	sub	sp, #8
 80109fe:	af00      	add	r7, sp, #0
 8010a00:	4603      	mov	r3, r0
 8010a02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8010a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010a08:	4618      	mov	r0, r3
 8010a0a:	f7ff feed 	bl	80107e8 <__NVIC_SetPendingIRQ>
}
 8010a0e:	bf00      	nop
 8010a10:	3708      	adds	r7, #8
 8010a12:	46bd      	mov	sp, r7
 8010a14:	bd80      	pop	{r7, pc}

08010a16 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8010a16:	b580      	push	{r7, lr}
 8010a18:	b082      	sub	sp, #8
 8010a1a:	af00      	add	r7, sp, #0
 8010a1c:	4603      	mov	r3, r0
 8010a1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8010a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010a24:	4618      	mov	r0, r3
 8010a26:	f7ff fefd 	bl	8010824 <__NVIC_ClearPendingIRQ>
}
 8010a2a:	bf00      	nop
 8010a2c:	3708      	adds	r7, #8
 8010a2e:	46bd      	mov	sp, r7
 8010a30:	bd80      	pop	{r7, pc}
	...

08010a34 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b084      	sub	sp, #16
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d101      	bne.n	8010a46 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8010a42:	2301      	movs	r3, #1
 8010a44:	e08e      	b.n	8010b64 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	461a      	mov	r2, r3
 8010a4c:	4b47      	ldr	r3, [pc, #284]	; (8010b6c <HAL_DMA_Init+0x138>)
 8010a4e:	429a      	cmp	r2, r3
 8010a50:	d80f      	bhi.n	8010a72 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	461a      	mov	r2, r3
 8010a58:	4b45      	ldr	r3, [pc, #276]	; (8010b70 <HAL_DMA_Init+0x13c>)
 8010a5a:	4413      	add	r3, r2
 8010a5c:	4a45      	ldr	r2, [pc, #276]	; (8010b74 <HAL_DMA_Init+0x140>)
 8010a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8010a62:	091b      	lsrs	r3, r3, #4
 8010a64:	009a      	lsls	r2, r3, #2
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	4a42      	ldr	r2, [pc, #264]	; (8010b78 <HAL_DMA_Init+0x144>)
 8010a6e:	641a      	str	r2, [r3, #64]	; 0x40
 8010a70:	e00e      	b.n	8010a90 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	461a      	mov	r2, r3
 8010a78:	4b40      	ldr	r3, [pc, #256]	; (8010b7c <HAL_DMA_Init+0x148>)
 8010a7a:	4413      	add	r3, r2
 8010a7c:	4a3d      	ldr	r2, [pc, #244]	; (8010b74 <HAL_DMA_Init+0x140>)
 8010a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8010a82:	091b      	lsrs	r3, r3, #4
 8010a84:	009a      	lsls	r2, r3, #2
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	4a3c      	ldr	r2, [pc, #240]	; (8010b80 <HAL_DMA_Init+0x14c>)
 8010a8e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	2202      	movs	r2, #2
 8010a94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8010aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010aaa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8010ab4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	691b      	ldr	r3, [r3, #16]
 8010aba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010ac0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	699b      	ldr	r3, [r3, #24]
 8010ac6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010acc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	6a1b      	ldr	r3, [r3, #32]
 8010ad2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8010ad4:	68fa      	ldr	r2, [r7, #12]
 8010ad6:	4313      	orrs	r3, r2
 8010ad8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	68fa      	ldr	r2, [r7, #12]
 8010ae0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8010ae2:	6878      	ldr	r0, [r7, #4]
 8010ae4:	f000 fa74 	bl	8010fd0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	689b      	ldr	r3, [r3, #8]
 8010aec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010af0:	d102      	bne.n	8010af8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	2200      	movs	r2, #0
 8010af6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	685a      	ldr	r2, [r3, #4]
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010b00:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8010b04:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b0a:	687a      	ldr	r2, [r7, #4]
 8010b0c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8010b0e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	685b      	ldr	r3, [r3, #4]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d010      	beq.n	8010b3a <HAL_DMA_Init+0x106>
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	685b      	ldr	r3, [r3, #4]
 8010b1c:	2b04      	cmp	r3, #4
 8010b1e:	d80c      	bhi.n	8010b3a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8010b20:	6878      	ldr	r0, [r7, #4]
 8010b22:	f000 fa93 	bl	801104c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b32:	687a      	ldr	r2, [r7, #4]
 8010b34:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8010b36:	605a      	str	r2, [r3, #4]
 8010b38:	e008      	b.n	8010b4c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	2200      	movs	r2, #0
 8010b3e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	2200      	movs	r2, #0
 8010b44:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	2200      	movs	r2, #0
 8010b4a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	2200      	movs	r2, #0
 8010b50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	2201      	movs	r2, #1
 8010b56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	2200      	movs	r2, #0
 8010b5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8010b62:	2300      	movs	r3, #0
}
 8010b64:	4618      	mov	r0, r3
 8010b66:	3710      	adds	r7, #16
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	bd80      	pop	{r7, pc}
 8010b6c:	40020407 	.word	0x40020407
 8010b70:	bffdfff8 	.word	0xbffdfff8
 8010b74:	cccccccd 	.word	0xcccccccd
 8010b78:	40020000 	.word	0x40020000
 8010b7c:	bffdfbf8 	.word	0xbffdfbf8
 8010b80:	40020400 	.word	0x40020400

08010b84 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8010b84:	b580      	push	{r7, lr}
 8010b86:	b086      	sub	sp, #24
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	60f8      	str	r0, [r7, #12]
 8010b8c:	60b9      	str	r1, [r7, #8]
 8010b8e:	607a      	str	r2, [r7, #4]
 8010b90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010b92:	2300      	movs	r3, #0
 8010b94:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010b9c:	2b01      	cmp	r3, #1
 8010b9e:	d101      	bne.n	8010ba4 <HAL_DMA_Start_IT+0x20>
 8010ba0:	2302      	movs	r3, #2
 8010ba2:	e066      	b.n	8010c72 <HAL_DMA_Start_IT+0xee>
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	2201      	movs	r2, #1
 8010ba8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8010bb2:	b2db      	uxtb	r3, r3
 8010bb4:	2b01      	cmp	r3, #1
 8010bb6:	d155      	bne.n	8010c64 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	2202      	movs	r2, #2
 8010bbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	2200      	movs	r2, #0
 8010bc4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	681a      	ldr	r2, [r3, #0]
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	f022 0201 	bic.w	r2, r2, #1
 8010bd4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8010bd6:	683b      	ldr	r3, [r7, #0]
 8010bd8:	687a      	ldr	r2, [r7, #4]
 8010bda:	68b9      	ldr	r1, [r7, #8]
 8010bdc:	68f8      	ldr	r0, [r7, #12]
 8010bde:	f000 f9b9 	bl	8010f54 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d008      	beq.n	8010bfc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	681a      	ldr	r2, [r3, #0]
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	f042 020e 	orr.w	r2, r2, #14
 8010bf8:	601a      	str	r2, [r3, #0]
 8010bfa:	e00f      	b.n	8010c1c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	681a      	ldr	r2, [r3, #0]
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	f022 0204 	bic.w	r2, r2, #4
 8010c0a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	681a      	ldr	r2, [r3, #0]
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	f042 020a 	orr.w	r2, r2, #10
 8010c1a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d007      	beq.n	8010c3a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010c2e:	681a      	ldr	r2, [r3, #0]
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010c34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010c38:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d007      	beq.n	8010c52 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c46:	681a      	ldr	r2, [r3, #0]
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010c50:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	681a      	ldr	r2, [r3, #0]
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	f042 0201 	orr.w	r2, r2, #1
 8010c60:	601a      	str	r2, [r3, #0]
 8010c62:	e005      	b.n	8010c70 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	2200      	movs	r2, #0
 8010c68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8010c6c:	2302      	movs	r3, #2
 8010c6e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8010c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c72:	4618      	mov	r0, r3
 8010c74:	3718      	adds	r7, #24
 8010c76:	46bd      	mov	sp, r7
 8010c78:	bd80      	pop	{r7, pc}

08010c7a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8010c7a:	b480      	push	{r7}
 8010c7c:	b083      	sub	sp, #12
 8010c7e:	af00      	add	r7, sp, #0
 8010c80:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d101      	bne.n	8010c8c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8010c88:	2301      	movs	r3, #1
 8010c8a:	e04f      	b.n	8010d2c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8010c92:	b2db      	uxtb	r3, r3
 8010c94:	2b02      	cmp	r3, #2
 8010c96:	d008      	beq.n	8010caa <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	2204      	movs	r2, #4
 8010c9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	2200      	movs	r2, #0
 8010ca2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8010ca6:	2301      	movs	r3, #1
 8010ca8:	e040      	b.n	8010d2c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	681a      	ldr	r2, [r3, #0]
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	f022 020e 	bic.w	r2, r2, #14
 8010cb8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010cbe:	681a      	ldr	r2, [r3, #0]
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010cc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010cc8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	681a      	ldr	r2, [r3, #0]
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	f022 0201 	bic.w	r2, r2, #1
 8010cd8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010cde:	f003 021c 	and.w	r2, r3, #28
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ce6:	2101      	movs	r1, #1
 8010ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8010cec:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010cf2:	687a      	ldr	r2, [r7, #4]
 8010cf4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8010cf6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d00c      	beq.n	8010d1a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d04:	681a      	ldr	r2, [r3, #0]
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010d0e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d14:	687a      	ldr	r2, [r7, #4]
 8010d16:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8010d18:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	2201      	movs	r2, #1
 8010d1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	2200      	movs	r2, #0
 8010d26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8010d2a:	2300      	movs	r3, #0
}
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	370c      	adds	r7, #12
 8010d30:	46bd      	mov	sp, r7
 8010d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d36:	4770      	bx	lr

08010d38 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	b084      	sub	sp, #16
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010d40:	2300      	movs	r3, #0
 8010d42:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8010d4a:	b2db      	uxtb	r3, r3
 8010d4c:	2b02      	cmp	r3, #2
 8010d4e:	d005      	beq.n	8010d5c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	2204      	movs	r2, #4
 8010d54:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8010d56:	2301      	movs	r3, #1
 8010d58:	73fb      	strb	r3, [r7, #15]
 8010d5a:	e047      	b.n	8010dec <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	681a      	ldr	r2, [r3, #0]
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	f022 020e 	bic.w	r2, r2, #14
 8010d6a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	681a      	ldr	r2, [r3, #0]
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	f022 0201 	bic.w	r2, r2, #1
 8010d7a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010d80:	681a      	ldr	r2, [r3, #0]
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010d86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010d8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d90:	f003 021c 	and.w	r2, r3, #28
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d98:	2101      	movs	r1, #1
 8010d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8010d9e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010da4:	687a      	ldr	r2, [r7, #4]
 8010da6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8010da8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d00c      	beq.n	8010dcc <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010db6:	681a      	ldr	r2, [r3, #0]
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010dbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010dc0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010dc6:	687a      	ldr	r2, [r7, #4]
 8010dc8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8010dca:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	2201      	movs	r2, #1
 8010dd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	2200      	movs	r2, #0
 8010dd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d003      	beq.n	8010dec <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010de8:	6878      	ldr	r0, [r7, #4]
 8010dea:	4798      	blx	r3
    }
  }
  return status;
 8010dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8010dee:	4618      	mov	r0, r3
 8010df0:	3710      	adds	r7, #16
 8010df2:	46bd      	mov	sp, r7
 8010df4:	bd80      	pop	{r7, pc}

08010df6 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8010df6:	b580      	push	{r7, lr}
 8010df8:	b084      	sub	sp, #16
 8010dfa:	af00      	add	r7, sp, #0
 8010dfc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e12:	f003 031c 	and.w	r3, r3, #28
 8010e16:	2204      	movs	r2, #4
 8010e18:	409a      	lsls	r2, r3
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	4013      	ands	r3, r2
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d026      	beq.n	8010e70 <HAL_DMA_IRQHandler+0x7a>
 8010e22:	68bb      	ldr	r3, [r7, #8]
 8010e24:	f003 0304 	and.w	r3, r3, #4
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d021      	beq.n	8010e70 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	f003 0320 	and.w	r3, r3, #32
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d107      	bne.n	8010e4a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	681a      	ldr	r2, [r3, #0]
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	f022 0204 	bic.w	r2, r2, #4
 8010e48:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e4e:	f003 021c 	and.w	r2, r3, #28
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e56:	2104      	movs	r1, #4
 8010e58:	fa01 f202 	lsl.w	r2, r1, r2
 8010e5c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d071      	beq.n	8010f4a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e6a:	6878      	ldr	r0, [r7, #4]
 8010e6c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8010e6e:	e06c      	b.n	8010f4a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e74:	f003 031c 	and.w	r3, r3, #28
 8010e78:	2202      	movs	r2, #2
 8010e7a:	409a      	lsls	r2, r3
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	4013      	ands	r3, r2
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d02e      	beq.n	8010ee2 <HAL_DMA_IRQHandler+0xec>
 8010e84:	68bb      	ldr	r3, [r7, #8]
 8010e86:	f003 0302 	and.w	r3, r3, #2
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d029      	beq.n	8010ee2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	f003 0320 	and.w	r3, r3, #32
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d10b      	bne.n	8010eb4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	681a      	ldr	r2, [r3, #0]
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	f022 020a 	bic.w	r2, r2, #10
 8010eaa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	2201      	movs	r2, #1
 8010eb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010eb8:	f003 021c 	and.w	r2, r3, #28
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ec0:	2102      	movs	r1, #2
 8010ec2:	fa01 f202 	lsl.w	r2, r1, r2
 8010ec6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	2200      	movs	r2, #0
 8010ecc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d038      	beq.n	8010f4a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010edc:	6878      	ldr	r0, [r7, #4]
 8010ede:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8010ee0:	e033      	b.n	8010f4a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ee6:	f003 031c 	and.w	r3, r3, #28
 8010eea:	2208      	movs	r2, #8
 8010eec:	409a      	lsls	r2, r3
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	4013      	ands	r3, r2
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d02a      	beq.n	8010f4c <HAL_DMA_IRQHandler+0x156>
 8010ef6:	68bb      	ldr	r3, [r7, #8]
 8010ef8:	f003 0308 	and.w	r3, r3, #8
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d025      	beq.n	8010f4c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	681a      	ldr	r2, [r3, #0]
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	f022 020e 	bic.w	r2, r2, #14
 8010f0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f14:	f003 021c 	and.w	r2, r3, #28
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f1c:	2101      	movs	r1, #1
 8010f1e:	fa01 f202 	lsl.w	r2, r1, r2
 8010f22:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	2201      	movs	r2, #1
 8010f28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	2201      	movs	r2, #1
 8010f2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	2200      	movs	r2, #0
 8010f36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d004      	beq.n	8010f4c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f46:	6878      	ldr	r0, [r7, #4]
 8010f48:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8010f4a:	bf00      	nop
 8010f4c:	bf00      	nop
}
 8010f4e:	3710      	adds	r7, #16
 8010f50:	46bd      	mov	sp, r7
 8010f52:	bd80      	pop	{r7, pc}

08010f54 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010f54:	b480      	push	{r7}
 8010f56:	b085      	sub	sp, #20
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	60f8      	str	r0, [r7, #12]
 8010f5c:	60b9      	str	r1, [r7, #8]
 8010f5e:	607a      	str	r2, [r7, #4]
 8010f60:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010f66:	68fa      	ldr	r2, [r7, #12]
 8010f68:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8010f6a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d004      	beq.n	8010f7e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010f78:	68fa      	ldr	r2, [r7, #12]
 8010f7a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8010f7c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f82:	f003 021c 	and.w	r2, r3, #28
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f8a:	2101      	movs	r1, #1
 8010f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8010f90:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	683a      	ldr	r2, [r7, #0]
 8010f98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	689b      	ldr	r3, [r3, #8]
 8010f9e:	2b10      	cmp	r3, #16
 8010fa0:	d108      	bne.n	8010fb4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	687a      	ldr	r2, [r7, #4]
 8010fa8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	68ba      	ldr	r2, [r7, #8]
 8010fb0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8010fb2:	e007      	b.n	8010fc4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	68ba      	ldr	r2, [r7, #8]
 8010fba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	687a      	ldr	r2, [r7, #4]
 8010fc2:	60da      	str	r2, [r3, #12]
}
 8010fc4:	bf00      	nop
 8010fc6:	3714      	adds	r7, #20
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fce:	4770      	bx	lr

08010fd0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8010fd0:	b480      	push	{r7}
 8010fd2:	b085      	sub	sp, #20
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	461a      	mov	r2, r3
 8010fde:	4b17      	ldr	r3, [pc, #92]	; (801103c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8010fe0:	429a      	cmp	r2, r3
 8010fe2:	d80a      	bhi.n	8010ffa <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010fe8:	089b      	lsrs	r3, r3, #2
 8010fea:	009b      	lsls	r3, r3, #2
 8010fec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010ff0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8010ff4:	687a      	ldr	r2, [r7, #4]
 8010ff6:	6493      	str	r3, [r2, #72]	; 0x48
 8010ff8:	e007      	b.n	801100a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ffe:	089b      	lsrs	r3, r3, #2
 8011000:	009a      	lsls	r2, r3, #2
 8011002:	4b0f      	ldr	r3, [pc, #60]	; (8011040 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8011004:	4413      	add	r3, r2
 8011006:	687a      	ldr	r2, [r7, #4]
 8011008:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	b2db      	uxtb	r3, r3
 8011010:	3b08      	subs	r3, #8
 8011012:	4a0c      	ldr	r2, [pc, #48]	; (8011044 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8011014:	fba2 2303 	umull	r2, r3, r2, r3
 8011018:	091b      	lsrs	r3, r3, #4
 801101a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	4a0a      	ldr	r2, [pc, #40]	; (8011048 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8011020:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	f003 031f 	and.w	r3, r3, #31
 8011028:	2201      	movs	r2, #1
 801102a:	409a      	lsls	r2, r3
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8011030:	bf00      	nop
 8011032:	3714      	adds	r7, #20
 8011034:	46bd      	mov	sp, r7
 8011036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103a:	4770      	bx	lr
 801103c:	40020407 	.word	0x40020407
 8011040:	4002081c 	.word	0x4002081c
 8011044:	cccccccd 	.word	0xcccccccd
 8011048:	40020880 	.word	0x40020880

0801104c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801104c:	b480      	push	{r7}
 801104e:	b085      	sub	sp, #20
 8011050:	af00      	add	r7, sp, #0
 8011052:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	685b      	ldr	r3, [r3, #4]
 8011058:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801105c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801105e:	68fa      	ldr	r2, [r7, #12]
 8011060:	4b0b      	ldr	r3, [pc, #44]	; (8011090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8011062:	4413      	add	r3, r2
 8011064:	009b      	lsls	r3, r3, #2
 8011066:	461a      	mov	r2, r3
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	4a09      	ldr	r2, [pc, #36]	; (8011094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8011070:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	3b01      	subs	r3, #1
 8011076:	f003 0303 	and.w	r3, r3, #3
 801107a:	2201      	movs	r2, #1
 801107c:	409a      	lsls	r2, r3
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8011082:	bf00      	nop
 8011084:	3714      	adds	r7, #20
 8011086:	46bd      	mov	sp, r7
 8011088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801108c:	4770      	bx	lr
 801108e:	bf00      	nop
 8011090:	1000823f 	.word	0x1000823f
 8011094:	40020940 	.word	0x40020940

08011098 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8011098:	b480      	push	{r7}
 801109a:	b087      	sub	sp, #28
 801109c:	af00      	add	r7, sp, #0
 801109e:	6078      	str	r0, [r7, #4]
 80110a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80110a2:	2300      	movs	r3, #0
 80110a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80110a6:	e14c      	b.n	8011342 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80110a8:	683b      	ldr	r3, [r7, #0]
 80110aa:	681a      	ldr	r2, [r3, #0]
 80110ac:	2101      	movs	r1, #1
 80110ae:	697b      	ldr	r3, [r7, #20]
 80110b0:	fa01 f303 	lsl.w	r3, r1, r3
 80110b4:	4013      	ands	r3, r2
 80110b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	f000 813e 	beq.w	801133c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80110c0:	683b      	ldr	r3, [r7, #0]
 80110c2:	685b      	ldr	r3, [r3, #4]
 80110c4:	f003 0303 	and.w	r3, r3, #3
 80110c8:	2b01      	cmp	r3, #1
 80110ca:	d005      	beq.n	80110d8 <HAL_GPIO_Init+0x40>
 80110cc:	683b      	ldr	r3, [r7, #0]
 80110ce:	685b      	ldr	r3, [r3, #4]
 80110d0:	f003 0303 	and.w	r3, r3, #3
 80110d4:	2b02      	cmp	r3, #2
 80110d6:	d130      	bne.n	801113a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	689b      	ldr	r3, [r3, #8]
 80110dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80110de:	697b      	ldr	r3, [r7, #20]
 80110e0:	005b      	lsls	r3, r3, #1
 80110e2:	2203      	movs	r2, #3
 80110e4:	fa02 f303 	lsl.w	r3, r2, r3
 80110e8:	43db      	mvns	r3, r3
 80110ea:	693a      	ldr	r2, [r7, #16]
 80110ec:	4013      	ands	r3, r2
 80110ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80110f0:	683b      	ldr	r3, [r7, #0]
 80110f2:	68da      	ldr	r2, [r3, #12]
 80110f4:	697b      	ldr	r3, [r7, #20]
 80110f6:	005b      	lsls	r3, r3, #1
 80110f8:	fa02 f303 	lsl.w	r3, r2, r3
 80110fc:	693a      	ldr	r2, [r7, #16]
 80110fe:	4313      	orrs	r3, r2
 8011100:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	693a      	ldr	r2, [r7, #16]
 8011106:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	685b      	ldr	r3, [r3, #4]
 801110c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801110e:	2201      	movs	r2, #1
 8011110:	697b      	ldr	r3, [r7, #20]
 8011112:	fa02 f303 	lsl.w	r3, r2, r3
 8011116:	43db      	mvns	r3, r3
 8011118:	693a      	ldr	r2, [r7, #16]
 801111a:	4013      	ands	r3, r2
 801111c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801111e:	683b      	ldr	r3, [r7, #0]
 8011120:	685b      	ldr	r3, [r3, #4]
 8011122:	091b      	lsrs	r3, r3, #4
 8011124:	f003 0201 	and.w	r2, r3, #1
 8011128:	697b      	ldr	r3, [r7, #20]
 801112a:	fa02 f303 	lsl.w	r3, r2, r3
 801112e:	693a      	ldr	r2, [r7, #16]
 8011130:	4313      	orrs	r3, r2
 8011132:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	693a      	ldr	r2, [r7, #16]
 8011138:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801113a:	683b      	ldr	r3, [r7, #0]
 801113c:	685b      	ldr	r3, [r3, #4]
 801113e:	f003 0303 	and.w	r3, r3, #3
 8011142:	2b03      	cmp	r3, #3
 8011144:	d017      	beq.n	8011176 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	68db      	ldr	r3, [r3, #12]
 801114a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801114c:	697b      	ldr	r3, [r7, #20]
 801114e:	005b      	lsls	r3, r3, #1
 8011150:	2203      	movs	r2, #3
 8011152:	fa02 f303 	lsl.w	r3, r2, r3
 8011156:	43db      	mvns	r3, r3
 8011158:	693a      	ldr	r2, [r7, #16]
 801115a:	4013      	ands	r3, r2
 801115c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801115e:	683b      	ldr	r3, [r7, #0]
 8011160:	689a      	ldr	r2, [r3, #8]
 8011162:	697b      	ldr	r3, [r7, #20]
 8011164:	005b      	lsls	r3, r3, #1
 8011166:	fa02 f303 	lsl.w	r3, r2, r3
 801116a:	693a      	ldr	r2, [r7, #16]
 801116c:	4313      	orrs	r3, r2
 801116e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	693a      	ldr	r2, [r7, #16]
 8011174:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8011176:	683b      	ldr	r3, [r7, #0]
 8011178:	685b      	ldr	r3, [r3, #4]
 801117a:	f003 0303 	and.w	r3, r3, #3
 801117e:	2b02      	cmp	r3, #2
 8011180:	d123      	bne.n	80111ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8011182:	697b      	ldr	r3, [r7, #20]
 8011184:	08da      	lsrs	r2, r3, #3
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	3208      	adds	r2, #8
 801118a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801118e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8011190:	697b      	ldr	r3, [r7, #20]
 8011192:	f003 0307 	and.w	r3, r3, #7
 8011196:	009b      	lsls	r3, r3, #2
 8011198:	220f      	movs	r2, #15
 801119a:	fa02 f303 	lsl.w	r3, r2, r3
 801119e:	43db      	mvns	r3, r3
 80111a0:	693a      	ldr	r2, [r7, #16]
 80111a2:	4013      	ands	r3, r2
 80111a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80111a6:	683b      	ldr	r3, [r7, #0]
 80111a8:	691a      	ldr	r2, [r3, #16]
 80111aa:	697b      	ldr	r3, [r7, #20]
 80111ac:	f003 0307 	and.w	r3, r3, #7
 80111b0:	009b      	lsls	r3, r3, #2
 80111b2:	fa02 f303 	lsl.w	r3, r2, r3
 80111b6:	693a      	ldr	r2, [r7, #16]
 80111b8:	4313      	orrs	r3, r2
 80111ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80111bc:	697b      	ldr	r3, [r7, #20]
 80111be:	08da      	lsrs	r2, r3, #3
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	3208      	adds	r2, #8
 80111c4:	6939      	ldr	r1, [r7, #16]
 80111c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80111d0:	697b      	ldr	r3, [r7, #20]
 80111d2:	005b      	lsls	r3, r3, #1
 80111d4:	2203      	movs	r2, #3
 80111d6:	fa02 f303 	lsl.w	r3, r2, r3
 80111da:	43db      	mvns	r3, r3
 80111dc:	693a      	ldr	r2, [r7, #16]
 80111de:	4013      	ands	r3, r2
 80111e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80111e2:	683b      	ldr	r3, [r7, #0]
 80111e4:	685b      	ldr	r3, [r3, #4]
 80111e6:	f003 0203 	and.w	r2, r3, #3
 80111ea:	697b      	ldr	r3, [r7, #20]
 80111ec:	005b      	lsls	r3, r3, #1
 80111ee:	fa02 f303 	lsl.w	r3, r2, r3
 80111f2:	693a      	ldr	r2, [r7, #16]
 80111f4:	4313      	orrs	r3, r2
 80111f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	693a      	ldr	r2, [r7, #16]
 80111fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80111fe:	683b      	ldr	r3, [r7, #0]
 8011200:	685b      	ldr	r3, [r3, #4]
 8011202:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8011206:	2b00      	cmp	r3, #0
 8011208:	f000 8098 	beq.w	801133c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 801120c:	4a54      	ldr	r2, [pc, #336]	; (8011360 <HAL_GPIO_Init+0x2c8>)
 801120e:	697b      	ldr	r3, [r7, #20]
 8011210:	089b      	lsrs	r3, r3, #2
 8011212:	3302      	adds	r3, #2
 8011214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011218:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 801121a:	697b      	ldr	r3, [r7, #20]
 801121c:	f003 0303 	and.w	r3, r3, #3
 8011220:	009b      	lsls	r3, r3, #2
 8011222:	220f      	movs	r2, #15
 8011224:	fa02 f303 	lsl.w	r3, r2, r3
 8011228:	43db      	mvns	r3, r3
 801122a:	693a      	ldr	r2, [r7, #16]
 801122c:	4013      	ands	r3, r2
 801122e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8011236:	d019      	beq.n	801126c <HAL_GPIO_Init+0x1d4>
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	4a4a      	ldr	r2, [pc, #296]	; (8011364 <HAL_GPIO_Init+0x2cc>)
 801123c:	4293      	cmp	r3, r2
 801123e:	d013      	beq.n	8011268 <HAL_GPIO_Init+0x1d0>
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	4a49      	ldr	r2, [pc, #292]	; (8011368 <HAL_GPIO_Init+0x2d0>)
 8011244:	4293      	cmp	r3, r2
 8011246:	d00d      	beq.n	8011264 <HAL_GPIO_Init+0x1cc>
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	4a48      	ldr	r2, [pc, #288]	; (801136c <HAL_GPIO_Init+0x2d4>)
 801124c:	4293      	cmp	r3, r2
 801124e:	d007      	beq.n	8011260 <HAL_GPIO_Init+0x1c8>
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	4a47      	ldr	r2, [pc, #284]	; (8011370 <HAL_GPIO_Init+0x2d8>)
 8011254:	4293      	cmp	r3, r2
 8011256:	d101      	bne.n	801125c <HAL_GPIO_Init+0x1c4>
 8011258:	2304      	movs	r3, #4
 801125a:	e008      	b.n	801126e <HAL_GPIO_Init+0x1d6>
 801125c:	2307      	movs	r3, #7
 801125e:	e006      	b.n	801126e <HAL_GPIO_Init+0x1d6>
 8011260:	2303      	movs	r3, #3
 8011262:	e004      	b.n	801126e <HAL_GPIO_Init+0x1d6>
 8011264:	2302      	movs	r3, #2
 8011266:	e002      	b.n	801126e <HAL_GPIO_Init+0x1d6>
 8011268:	2301      	movs	r3, #1
 801126a:	e000      	b.n	801126e <HAL_GPIO_Init+0x1d6>
 801126c:	2300      	movs	r3, #0
 801126e:	697a      	ldr	r2, [r7, #20]
 8011270:	f002 0203 	and.w	r2, r2, #3
 8011274:	0092      	lsls	r2, r2, #2
 8011276:	4093      	lsls	r3, r2
 8011278:	693a      	ldr	r2, [r7, #16]
 801127a:	4313      	orrs	r3, r2
 801127c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 801127e:	4938      	ldr	r1, [pc, #224]	; (8011360 <HAL_GPIO_Init+0x2c8>)
 8011280:	697b      	ldr	r3, [r7, #20]
 8011282:	089b      	lsrs	r3, r3, #2
 8011284:	3302      	adds	r3, #2
 8011286:	693a      	ldr	r2, [r7, #16]
 8011288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801128c:	4b39      	ldr	r3, [pc, #228]	; (8011374 <HAL_GPIO_Init+0x2dc>)
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	43db      	mvns	r3, r3
 8011296:	693a      	ldr	r2, [r7, #16]
 8011298:	4013      	ands	r3, r2
 801129a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 801129c:	683b      	ldr	r3, [r7, #0]
 801129e:	685b      	ldr	r3, [r3, #4]
 80112a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d003      	beq.n	80112b0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80112a8:	693a      	ldr	r2, [r7, #16]
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	4313      	orrs	r3, r2
 80112ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80112b0:	4a30      	ldr	r2, [pc, #192]	; (8011374 <HAL_GPIO_Init+0x2dc>)
 80112b2:	693b      	ldr	r3, [r7, #16]
 80112b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80112b6:	4b2f      	ldr	r3, [pc, #188]	; (8011374 <HAL_GPIO_Init+0x2dc>)
 80112b8:	685b      	ldr	r3, [r3, #4]
 80112ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	43db      	mvns	r3, r3
 80112c0:	693a      	ldr	r2, [r7, #16]
 80112c2:	4013      	ands	r3, r2
 80112c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80112c6:	683b      	ldr	r3, [r7, #0]
 80112c8:	685b      	ldr	r3, [r3, #4]
 80112ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d003      	beq.n	80112da <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80112d2:	693a      	ldr	r2, [r7, #16]
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	4313      	orrs	r3, r2
 80112d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80112da:	4a26      	ldr	r2, [pc, #152]	; (8011374 <HAL_GPIO_Init+0x2dc>)
 80112dc:	693b      	ldr	r3, [r7, #16]
 80112de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80112e0:	4b24      	ldr	r3, [pc, #144]	; (8011374 <HAL_GPIO_Init+0x2dc>)
 80112e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80112e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	43db      	mvns	r3, r3
 80112ec:	693a      	ldr	r2, [r7, #16]
 80112ee:	4013      	ands	r3, r2
 80112f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80112f2:	683b      	ldr	r3, [r7, #0]
 80112f4:	685b      	ldr	r3, [r3, #4]
 80112f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d003      	beq.n	8011306 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80112fe:	693a      	ldr	r2, [r7, #16]
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	4313      	orrs	r3, r2
 8011304:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8011306:	4a1b      	ldr	r2, [pc, #108]	; (8011374 <HAL_GPIO_Init+0x2dc>)
 8011308:	693b      	ldr	r3, [r7, #16]
 801130a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 801130e:	4b19      	ldr	r3, [pc, #100]	; (8011374 <HAL_GPIO_Init+0x2dc>)
 8011310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011314:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	43db      	mvns	r3, r3
 801131a:	693a      	ldr	r2, [r7, #16]
 801131c:	4013      	ands	r3, r2
 801131e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8011320:	683b      	ldr	r3, [r7, #0]
 8011322:	685b      	ldr	r3, [r3, #4]
 8011324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011328:	2b00      	cmp	r3, #0
 801132a:	d003      	beq.n	8011334 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 801132c:	693a      	ldr	r2, [r7, #16]
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	4313      	orrs	r3, r2
 8011332:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8011334:	4a0f      	ldr	r2, [pc, #60]	; (8011374 <HAL_GPIO_Init+0x2dc>)
 8011336:	693b      	ldr	r3, [r7, #16]
 8011338:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 801133c:	697b      	ldr	r3, [r7, #20]
 801133e:	3301      	adds	r3, #1
 8011340:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8011342:	683b      	ldr	r3, [r7, #0]
 8011344:	681a      	ldr	r2, [r3, #0]
 8011346:	697b      	ldr	r3, [r7, #20]
 8011348:	fa22 f303 	lsr.w	r3, r2, r3
 801134c:	2b00      	cmp	r3, #0
 801134e:	f47f aeab 	bne.w	80110a8 <HAL_GPIO_Init+0x10>
  }
}
 8011352:	bf00      	nop
 8011354:	bf00      	nop
 8011356:	371c      	adds	r7, #28
 8011358:	46bd      	mov	sp, r7
 801135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801135e:	4770      	bx	lr
 8011360:	40010000 	.word	0x40010000
 8011364:	48000400 	.word	0x48000400
 8011368:	48000800 	.word	0x48000800
 801136c:	48000c00 	.word	0x48000c00
 8011370:	48001000 	.word	0x48001000
 8011374:	58000800 	.word	0x58000800

08011378 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8011378:	b480      	push	{r7}
 801137a:	b087      	sub	sp, #28
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
 8011380:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8011382:	2300      	movs	r3, #0
 8011384:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8011386:	e0bb      	b.n	8011500 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8011388:	2201      	movs	r2, #1
 801138a:	697b      	ldr	r3, [r7, #20]
 801138c:	fa02 f303 	lsl.w	r3, r2, r3
 8011390:	683a      	ldr	r2, [r7, #0]
 8011392:	4013      	ands	r3, r2
 8011394:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8011396:	693b      	ldr	r3, [r7, #16]
 8011398:	2b00      	cmp	r3, #0
 801139a:	f000 80ae 	beq.w	80114fa <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 801139e:	4a5f      	ldr	r2, [pc, #380]	; (801151c <HAL_GPIO_DeInit+0x1a4>)
 80113a0:	697b      	ldr	r3, [r7, #20]
 80113a2:	089b      	lsrs	r3, r3, #2
 80113a4:	3302      	adds	r3, #2
 80113a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80113aa:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 80113ac:	697b      	ldr	r3, [r7, #20]
 80113ae:	f003 0303 	and.w	r3, r3, #3
 80113b2:	009b      	lsls	r3, r3, #2
 80113b4:	220f      	movs	r2, #15
 80113b6:	fa02 f303 	lsl.w	r3, r2, r3
 80113ba:	68fa      	ldr	r2, [r7, #12]
 80113bc:	4013      	ands	r3, r2
 80113be:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80113c6:	d019      	beq.n	80113fc <HAL_GPIO_DeInit+0x84>
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	4a55      	ldr	r2, [pc, #340]	; (8011520 <HAL_GPIO_DeInit+0x1a8>)
 80113cc:	4293      	cmp	r3, r2
 80113ce:	d013      	beq.n	80113f8 <HAL_GPIO_DeInit+0x80>
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	4a54      	ldr	r2, [pc, #336]	; (8011524 <HAL_GPIO_DeInit+0x1ac>)
 80113d4:	4293      	cmp	r3, r2
 80113d6:	d00d      	beq.n	80113f4 <HAL_GPIO_DeInit+0x7c>
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	4a53      	ldr	r2, [pc, #332]	; (8011528 <HAL_GPIO_DeInit+0x1b0>)
 80113dc:	4293      	cmp	r3, r2
 80113de:	d007      	beq.n	80113f0 <HAL_GPIO_DeInit+0x78>
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	4a52      	ldr	r2, [pc, #328]	; (801152c <HAL_GPIO_DeInit+0x1b4>)
 80113e4:	4293      	cmp	r3, r2
 80113e6:	d101      	bne.n	80113ec <HAL_GPIO_DeInit+0x74>
 80113e8:	2304      	movs	r3, #4
 80113ea:	e008      	b.n	80113fe <HAL_GPIO_DeInit+0x86>
 80113ec:	2307      	movs	r3, #7
 80113ee:	e006      	b.n	80113fe <HAL_GPIO_DeInit+0x86>
 80113f0:	2303      	movs	r3, #3
 80113f2:	e004      	b.n	80113fe <HAL_GPIO_DeInit+0x86>
 80113f4:	2302      	movs	r3, #2
 80113f6:	e002      	b.n	80113fe <HAL_GPIO_DeInit+0x86>
 80113f8:	2301      	movs	r3, #1
 80113fa:	e000      	b.n	80113fe <HAL_GPIO_DeInit+0x86>
 80113fc:	2300      	movs	r3, #0
 80113fe:	697a      	ldr	r2, [r7, #20]
 8011400:	f002 0203 	and.w	r2, r2, #3
 8011404:	0092      	lsls	r2, r2, #2
 8011406:	4093      	lsls	r3, r2
 8011408:	68fa      	ldr	r2, [r7, #12]
 801140a:	429a      	cmp	r2, r3
 801140c:	d136      	bne.n	801147c <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 801140e:	4b48      	ldr	r3, [pc, #288]	; (8011530 <HAL_GPIO_DeInit+0x1b8>)
 8011410:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8011414:	693b      	ldr	r3, [r7, #16]
 8011416:	43db      	mvns	r3, r3
 8011418:	4945      	ldr	r1, [pc, #276]	; (8011530 <HAL_GPIO_DeInit+0x1b8>)
 801141a:	4013      	ands	r3, r2
 801141c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8011420:	4b43      	ldr	r3, [pc, #268]	; (8011530 <HAL_GPIO_DeInit+0x1b8>)
 8011422:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8011426:	693b      	ldr	r3, [r7, #16]
 8011428:	43db      	mvns	r3, r3
 801142a:	4941      	ldr	r1, [pc, #260]	; (8011530 <HAL_GPIO_DeInit+0x1b8>)
 801142c:	4013      	ands	r3, r2
 801142e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8011432:	4b3f      	ldr	r3, [pc, #252]	; (8011530 <HAL_GPIO_DeInit+0x1b8>)
 8011434:	681a      	ldr	r2, [r3, #0]
 8011436:	693b      	ldr	r3, [r7, #16]
 8011438:	43db      	mvns	r3, r3
 801143a:	493d      	ldr	r1, [pc, #244]	; (8011530 <HAL_GPIO_DeInit+0x1b8>)
 801143c:	4013      	ands	r3, r2
 801143e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8011440:	4b3b      	ldr	r3, [pc, #236]	; (8011530 <HAL_GPIO_DeInit+0x1b8>)
 8011442:	685a      	ldr	r2, [r3, #4]
 8011444:	693b      	ldr	r3, [r7, #16]
 8011446:	43db      	mvns	r3, r3
 8011448:	4939      	ldr	r1, [pc, #228]	; (8011530 <HAL_GPIO_DeInit+0x1b8>)
 801144a:	4013      	ands	r3, r2
 801144c:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 801144e:	697b      	ldr	r3, [r7, #20]
 8011450:	f003 0303 	and.w	r3, r3, #3
 8011454:	009b      	lsls	r3, r3, #2
 8011456:	220f      	movs	r2, #15
 8011458:	fa02 f303 	lsl.w	r3, r2, r3
 801145c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 801145e:	4a2f      	ldr	r2, [pc, #188]	; (801151c <HAL_GPIO_DeInit+0x1a4>)
 8011460:	697b      	ldr	r3, [r7, #20]
 8011462:	089b      	lsrs	r3, r3, #2
 8011464:	3302      	adds	r3, #2
 8011466:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	43da      	mvns	r2, r3
 801146e:	482b      	ldr	r0, [pc, #172]	; (801151c <HAL_GPIO_DeInit+0x1a4>)
 8011470:	697b      	ldr	r3, [r7, #20]
 8011472:	089b      	lsrs	r3, r3, #2
 8011474:	400a      	ands	r2, r1
 8011476:	3302      	adds	r3, #2
 8011478:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	681a      	ldr	r2, [r3, #0]
 8011480:	697b      	ldr	r3, [r7, #20]
 8011482:	005b      	lsls	r3, r3, #1
 8011484:	2103      	movs	r1, #3
 8011486:	fa01 f303 	lsl.w	r3, r1, r3
 801148a:	431a      	orrs	r2, r3
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8011490:	697b      	ldr	r3, [r7, #20]
 8011492:	08da      	lsrs	r2, r3, #3
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	3208      	adds	r2, #8
 8011498:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801149c:	697b      	ldr	r3, [r7, #20]
 801149e:	f003 0307 	and.w	r3, r3, #7
 80114a2:	009b      	lsls	r3, r3, #2
 80114a4:	220f      	movs	r2, #15
 80114a6:	fa02 f303 	lsl.w	r3, r2, r3
 80114aa:	43db      	mvns	r3, r3
 80114ac:	697a      	ldr	r2, [r7, #20]
 80114ae:	08d2      	lsrs	r2, r2, #3
 80114b0:	4019      	ands	r1, r3
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	3208      	adds	r2, #8
 80114b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	68da      	ldr	r2, [r3, #12]
 80114be:	697b      	ldr	r3, [r7, #20]
 80114c0:	005b      	lsls	r3, r3, #1
 80114c2:	2103      	movs	r1, #3
 80114c4:	fa01 f303 	lsl.w	r3, r1, r3
 80114c8:	43db      	mvns	r3, r3
 80114ca:	401a      	ands	r2, r3
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	685a      	ldr	r2, [r3, #4]
 80114d4:	2101      	movs	r1, #1
 80114d6:	697b      	ldr	r3, [r7, #20]
 80114d8:	fa01 f303 	lsl.w	r3, r1, r3
 80114dc:	43db      	mvns	r3, r3
 80114de:	401a      	ands	r2, r3
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	689a      	ldr	r2, [r3, #8]
 80114e8:	697b      	ldr	r3, [r7, #20]
 80114ea:	005b      	lsls	r3, r3, #1
 80114ec:	2103      	movs	r1, #3
 80114ee:	fa01 f303 	lsl.w	r3, r1, r3
 80114f2:	43db      	mvns	r3, r3
 80114f4:	401a      	ands	r2, r3
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	609a      	str	r2, [r3, #8]
    }

    position++;
 80114fa:	697b      	ldr	r3, [r7, #20]
 80114fc:	3301      	adds	r3, #1
 80114fe:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8011500:	683a      	ldr	r2, [r7, #0]
 8011502:	697b      	ldr	r3, [r7, #20]
 8011504:	fa22 f303 	lsr.w	r3, r2, r3
 8011508:	2b00      	cmp	r3, #0
 801150a:	f47f af3d 	bne.w	8011388 <HAL_GPIO_DeInit+0x10>
  }
}
 801150e:	bf00      	nop
 8011510:	bf00      	nop
 8011512:	371c      	adds	r7, #28
 8011514:	46bd      	mov	sp, r7
 8011516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151a:	4770      	bx	lr
 801151c:	40010000 	.word	0x40010000
 8011520:	48000400 	.word	0x48000400
 8011524:	48000800 	.word	0x48000800
 8011528:	48000c00 	.word	0x48000c00
 801152c:	48001000 	.word	0x48001000
 8011530:	58000800 	.word	0x58000800

08011534 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8011534:	b480      	push	{r7}
 8011536:	b085      	sub	sp, #20
 8011538:	af00      	add	r7, sp, #0
 801153a:	6078      	str	r0, [r7, #4]
 801153c:	460b      	mov	r3, r1
 801153e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	691a      	ldr	r2, [r3, #16]
 8011544:	887b      	ldrh	r3, [r7, #2]
 8011546:	4013      	ands	r3, r2
 8011548:	2b00      	cmp	r3, #0
 801154a:	d002      	beq.n	8011552 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801154c:	2301      	movs	r3, #1
 801154e:	73fb      	strb	r3, [r7, #15]
 8011550:	e001      	b.n	8011556 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8011552:	2300      	movs	r3, #0
 8011554:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8011556:	7bfb      	ldrb	r3, [r7, #15]
}
 8011558:	4618      	mov	r0, r3
 801155a:	3714      	adds	r7, #20
 801155c:	46bd      	mov	sp, r7
 801155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011562:	4770      	bx	lr

08011564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8011564:	b480      	push	{r7}
 8011566:	b083      	sub	sp, #12
 8011568:	af00      	add	r7, sp, #0
 801156a:	6078      	str	r0, [r7, #4]
 801156c:	460b      	mov	r3, r1
 801156e:	807b      	strh	r3, [r7, #2]
 8011570:	4613      	mov	r3, r2
 8011572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8011574:	787b      	ldrb	r3, [r7, #1]
 8011576:	2b00      	cmp	r3, #0
 8011578:	d003      	beq.n	8011582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801157a:	887a      	ldrh	r2, [r7, #2]
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8011580:	e002      	b.n	8011588 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8011582:	887a      	ldrh	r2, [r7, #2]
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	629a      	str	r2, [r3, #40]	; 0x28
}
 8011588:	bf00      	nop
 801158a:	370c      	adds	r7, #12
 801158c:	46bd      	mov	sp, r7
 801158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011592:	4770      	bx	lr

08011594 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8011594:	b580      	push	{r7, lr}
 8011596:	b082      	sub	sp, #8
 8011598:	af00      	add	r7, sp, #0
 801159a:	4603      	mov	r3, r0
 801159c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 801159e:	4b08      	ldr	r3, [pc, #32]	; (80115c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80115a0:	68da      	ldr	r2, [r3, #12]
 80115a2:	88fb      	ldrh	r3, [r7, #6]
 80115a4:	4013      	ands	r3, r2
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d006      	beq.n	80115b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80115aa:	4a05      	ldr	r2, [pc, #20]	; (80115c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80115ac:	88fb      	ldrh	r3, [r7, #6]
 80115ae:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80115b0:	88fb      	ldrh	r3, [r7, #6]
 80115b2:	4618      	mov	r0, r3
 80115b4:	f7fc f80e 	bl	800d5d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80115b8:	bf00      	nop
 80115ba:	3708      	adds	r7, #8
 80115bc:	46bd      	mov	sp, r7
 80115be:	bd80      	pop	{r7, pc}
 80115c0:	58000800 	.word	0x58000800

080115c4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80115c4:	b580      	push	{r7, lr}
 80115c6:	b082      	sub	sp, #8
 80115c8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80115ca:	4b0a      	ldr	r3, [pc, #40]	; (80115f4 <HAL_HSEM_IRQHandler+0x30>)
 80115cc:	68db      	ldr	r3, [r3, #12]
 80115ce:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80115d0:	4b08      	ldr	r3, [pc, #32]	; (80115f4 <HAL_HSEM_IRQHandler+0x30>)
 80115d2:	681a      	ldr	r2, [r3, #0]
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	43db      	mvns	r3, r3
 80115d8:	4906      	ldr	r1, [pc, #24]	; (80115f4 <HAL_HSEM_IRQHandler+0x30>)
 80115da:	4013      	ands	r3, r2
 80115dc:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80115de:	4a05      	ldr	r2, [pc, #20]	; (80115f4 <HAL_HSEM_IRQHandler+0x30>)
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80115e4:	6878      	ldr	r0, [r7, #4]
 80115e6:	f000 f807 	bl	80115f8 <HAL_HSEM_FreeCallback>
}
 80115ea:	bf00      	nop
 80115ec:	3708      	adds	r7, #8
 80115ee:	46bd      	mov	sp, r7
 80115f0:	bd80      	pop	{r7, pc}
 80115f2:	bf00      	nop
 80115f4:	58001500 	.word	0x58001500

080115f8 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80115f8:	b480      	push	{r7}
 80115fa:	b083      	sub	sp, #12
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8011600:	bf00      	nop
 8011602:	370c      	adds	r7, #12
 8011604:	46bd      	mov	sp, r7
 8011606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801160a:	4770      	bx	lr

0801160c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801160c:	b580      	push	{r7, lr}
 801160e:	b082      	sub	sp, #8
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d101      	bne.n	801161e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801161a:	2301      	movs	r3, #1
 801161c:	e08d      	b.n	801173a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011624:	b2db      	uxtb	r3, r3
 8011626:	2b00      	cmp	r3, #0
 8011628:	d106      	bne.n	8011638 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	2200      	movs	r2, #0
 801162e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8011632:	6878      	ldr	r0, [r7, #4]
 8011634:	f7f8 feb6 	bl	800a3a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	2224      	movs	r2, #36	; 0x24
 801163c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	681a      	ldr	r2, [r3, #0]
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	f022 0201 	bic.w	r2, r2, #1
 801164e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	685a      	ldr	r2, [r3, #4]
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801165c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	689a      	ldr	r2, [r3, #8]
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801166c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	68db      	ldr	r3, [r3, #12]
 8011672:	2b01      	cmp	r3, #1
 8011674:	d107      	bne.n	8011686 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	689a      	ldr	r2, [r3, #8]
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011682:	609a      	str	r2, [r3, #8]
 8011684:	e006      	b.n	8011694 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	689a      	ldr	r2, [r3, #8]
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8011692:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	68db      	ldr	r3, [r3, #12]
 8011698:	2b02      	cmp	r3, #2
 801169a:	d108      	bne.n	80116ae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	685a      	ldr	r2, [r3, #4]
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80116aa:	605a      	str	r2, [r3, #4]
 80116ac:	e007      	b.n	80116be <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	685a      	ldr	r2, [r3, #4]
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80116bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	685b      	ldr	r3, [r3, #4]
 80116c4:	687a      	ldr	r2, [r7, #4]
 80116c6:	6812      	ldr	r2, [r2, #0]
 80116c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80116cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80116d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	68da      	ldr	r2, [r3, #12]
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80116e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	691a      	ldr	r2, [r3, #16]
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	695b      	ldr	r3, [r3, #20]
 80116ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	699b      	ldr	r3, [r3, #24]
 80116f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	430a      	orrs	r2, r1
 80116fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	69d9      	ldr	r1, [r3, #28]
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	6a1a      	ldr	r2, [r3, #32]
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	430a      	orrs	r2, r1
 801170a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	681a      	ldr	r2, [r3, #0]
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	f042 0201 	orr.w	r2, r2, #1
 801171a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	2200      	movs	r2, #0
 8011720:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	2220      	movs	r2, #32
 8011726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	2200      	movs	r2, #0
 801172e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	2200      	movs	r2, #0
 8011734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8011738:	2300      	movs	r3, #0
}
 801173a:	4618      	mov	r0, r3
 801173c:	3708      	adds	r7, #8
 801173e:	46bd      	mov	sp, r7
 8011740:	bd80      	pop	{r7, pc}
	...

08011744 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011744:	b580      	push	{r7, lr}
 8011746:	b088      	sub	sp, #32
 8011748:	af02      	add	r7, sp, #8
 801174a:	60f8      	str	r0, [r7, #12]
 801174c:	4608      	mov	r0, r1
 801174e:	4611      	mov	r1, r2
 8011750:	461a      	mov	r2, r3
 8011752:	4603      	mov	r3, r0
 8011754:	817b      	strh	r3, [r7, #10]
 8011756:	460b      	mov	r3, r1
 8011758:	813b      	strh	r3, [r7, #8]
 801175a:	4613      	mov	r3, r2
 801175c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011764:	b2db      	uxtb	r3, r3
 8011766:	2b20      	cmp	r3, #32
 8011768:	f040 80f9 	bne.w	801195e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 801176c:	6a3b      	ldr	r3, [r7, #32]
 801176e:	2b00      	cmp	r3, #0
 8011770:	d002      	beq.n	8011778 <HAL_I2C_Mem_Write+0x34>
 8011772:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011774:	2b00      	cmp	r3, #0
 8011776:	d105      	bne.n	8011784 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801177e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8011780:	2301      	movs	r3, #1
 8011782:	e0ed      	b.n	8011960 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801178a:	2b01      	cmp	r3, #1
 801178c:	d101      	bne.n	8011792 <HAL_I2C_Mem_Write+0x4e>
 801178e:	2302      	movs	r3, #2
 8011790:	e0e6      	b.n	8011960 <HAL_I2C_Mem_Write+0x21c>
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	2201      	movs	r2, #1
 8011796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801179a:	f7fd fca9 	bl	800f0f0 <HAL_GetTick>
 801179e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80117a0:	697b      	ldr	r3, [r7, #20]
 80117a2:	9300      	str	r3, [sp, #0]
 80117a4:	2319      	movs	r3, #25
 80117a6:	2201      	movs	r2, #1
 80117a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80117ac:	68f8      	ldr	r0, [r7, #12]
 80117ae:	f000 fac3 	bl	8011d38 <I2C_WaitOnFlagUntilTimeout>
 80117b2:	4603      	mov	r3, r0
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d001      	beq.n	80117bc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80117b8:	2301      	movs	r3, #1
 80117ba:	e0d1      	b.n	8011960 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	2221      	movs	r2, #33	; 0x21
 80117c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	2240      	movs	r2, #64	; 0x40
 80117c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	2200      	movs	r2, #0
 80117d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	6a3a      	ldr	r2, [r7, #32]
 80117d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80117dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	2200      	movs	r2, #0
 80117e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80117e4:	88f8      	ldrh	r0, [r7, #6]
 80117e6:	893a      	ldrh	r2, [r7, #8]
 80117e8:	8979      	ldrh	r1, [r7, #10]
 80117ea:	697b      	ldr	r3, [r7, #20]
 80117ec:	9301      	str	r3, [sp, #4]
 80117ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117f0:	9300      	str	r3, [sp, #0]
 80117f2:	4603      	mov	r3, r0
 80117f4:	68f8      	ldr	r0, [r7, #12]
 80117f6:	f000 f9d3 	bl	8011ba0 <I2C_RequestMemoryWrite>
 80117fa:	4603      	mov	r3, r0
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d005      	beq.n	801180c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	2200      	movs	r2, #0
 8011804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8011808:	2301      	movs	r3, #1
 801180a:	e0a9      	b.n	8011960 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011810:	b29b      	uxth	r3, r3
 8011812:	2bff      	cmp	r3, #255	; 0xff
 8011814:	d90e      	bls.n	8011834 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	22ff      	movs	r2, #255	; 0xff
 801181a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011820:	b2da      	uxtb	r2, r3
 8011822:	8979      	ldrh	r1, [r7, #10]
 8011824:	2300      	movs	r3, #0
 8011826:	9300      	str	r3, [sp, #0]
 8011828:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801182c:	68f8      	ldr	r0, [r7, #12]
 801182e:	f000 fc47 	bl	80120c0 <I2C_TransferConfig>
 8011832:	e00f      	b.n	8011854 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011838:	b29a      	uxth	r2, r3
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011842:	b2da      	uxtb	r2, r3
 8011844:	8979      	ldrh	r1, [r7, #10]
 8011846:	2300      	movs	r3, #0
 8011848:	9300      	str	r3, [sp, #0]
 801184a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801184e:	68f8      	ldr	r0, [r7, #12]
 8011850:	f000 fc36 	bl	80120c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8011854:	697a      	ldr	r2, [r7, #20]
 8011856:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011858:	68f8      	ldr	r0, [r7, #12]
 801185a:	f000 fac6 	bl	8011dea <I2C_WaitOnTXISFlagUntilTimeout>
 801185e:	4603      	mov	r3, r0
 8011860:	2b00      	cmp	r3, #0
 8011862:	d001      	beq.n	8011868 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8011864:	2301      	movs	r3, #1
 8011866:	e07b      	b.n	8011960 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801186c:	781a      	ldrb	r2, [r3, #0]
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011878:	1c5a      	adds	r2, r3, #1
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011882:	b29b      	uxth	r3, r3
 8011884:	3b01      	subs	r3, #1
 8011886:	b29a      	uxth	r2, r3
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011890:	3b01      	subs	r3, #1
 8011892:	b29a      	uxth	r2, r3
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801189c:	b29b      	uxth	r3, r3
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d034      	beq.n	801190c <HAL_I2C_Mem_Write+0x1c8>
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d130      	bne.n	801190c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80118aa:	697b      	ldr	r3, [r7, #20]
 80118ac:	9300      	str	r3, [sp, #0]
 80118ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118b0:	2200      	movs	r2, #0
 80118b2:	2180      	movs	r1, #128	; 0x80
 80118b4:	68f8      	ldr	r0, [r7, #12]
 80118b6:	f000 fa3f 	bl	8011d38 <I2C_WaitOnFlagUntilTimeout>
 80118ba:	4603      	mov	r3, r0
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d001      	beq.n	80118c4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80118c0:	2301      	movs	r3, #1
 80118c2:	e04d      	b.n	8011960 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80118c8:	b29b      	uxth	r3, r3
 80118ca:	2bff      	cmp	r3, #255	; 0xff
 80118cc:	d90e      	bls.n	80118ec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	22ff      	movs	r2, #255	; 0xff
 80118d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80118d8:	b2da      	uxtb	r2, r3
 80118da:	8979      	ldrh	r1, [r7, #10]
 80118dc:	2300      	movs	r3, #0
 80118de:	9300      	str	r3, [sp, #0]
 80118e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80118e4:	68f8      	ldr	r0, [r7, #12]
 80118e6:	f000 fbeb 	bl	80120c0 <I2C_TransferConfig>
 80118ea:	e00f      	b.n	801190c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80118f0:	b29a      	uxth	r2, r3
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80118fa:	b2da      	uxtb	r2, r3
 80118fc:	8979      	ldrh	r1, [r7, #10]
 80118fe:	2300      	movs	r3, #0
 8011900:	9300      	str	r3, [sp, #0]
 8011902:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011906:	68f8      	ldr	r0, [r7, #12]
 8011908:	f000 fbda 	bl	80120c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011910:	b29b      	uxth	r3, r3
 8011912:	2b00      	cmp	r3, #0
 8011914:	d19e      	bne.n	8011854 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8011916:	697a      	ldr	r2, [r7, #20]
 8011918:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801191a:	68f8      	ldr	r0, [r7, #12]
 801191c:	f000 faac 	bl	8011e78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8011920:	4603      	mov	r3, r0
 8011922:	2b00      	cmp	r3, #0
 8011924:	d001      	beq.n	801192a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8011926:	2301      	movs	r3, #1
 8011928:	e01a      	b.n	8011960 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	2220      	movs	r2, #32
 8011930:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	6859      	ldr	r1, [r3, #4]
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	681a      	ldr	r2, [r3, #0]
 801193c:	4b0a      	ldr	r3, [pc, #40]	; (8011968 <HAL_I2C_Mem_Write+0x224>)
 801193e:	400b      	ands	r3, r1
 8011940:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	2220      	movs	r2, #32
 8011946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	2200      	movs	r2, #0
 801194e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	2200      	movs	r2, #0
 8011956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801195a:	2300      	movs	r3, #0
 801195c:	e000      	b.n	8011960 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 801195e:	2302      	movs	r3, #2
  }
}
 8011960:	4618      	mov	r0, r3
 8011962:	3718      	adds	r7, #24
 8011964:	46bd      	mov	sp, r7
 8011966:	bd80      	pop	{r7, pc}
 8011968:	fe00e800 	.word	0xfe00e800

0801196c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801196c:	b580      	push	{r7, lr}
 801196e:	b088      	sub	sp, #32
 8011970:	af02      	add	r7, sp, #8
 8011972:	60f8      	str	r0, [r7, #12]
 8011974:	4608      	mov	r0, r1
 8011976:	4611      	mov	r1, r2
 8011978:	461a      	mov	r2, r3
 801197a:	4603      	mov	r3, r0
 801197c:	817b      	strh	r3, [r7, #10]
 801197e:	460b      	mov	r3, r1
 8011980:	813b      	strh	r3, [r7, #8]
 8011982:	4613      	mov	r3, r2
 8011984:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801198c:	b2db      	uxtb	r3, r3
 801198e:	2b20      	cmp	r3, #32
 8011990:	f040 80fd 	bne.w	8011b8e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8011994:	6a3b      	ldr	r3, [r7, #32]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d002      	beq.n	80119a0 <HAL_I2C_Mem_Read+0x34>
 801199a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801199c:	2b00      	cmp	r3, #0
 801199e:	d105      	bne.n	80119ac <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80119a6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80119a8:	2301      	movs	r3, #1
 80119aa:	e0f1      	b.n	8011b90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80119b2:	2b01      	cmp	r3, #1
 80119b4:	d101      	bne.n	80119ba <HAL_I2C_Mem_Read+0x4e>
 80119b6:	2302      	movs	r3, #2
 80119b8:	e0ea      	b.n	8011b90 <HAL_I2C_Mem_Read+0x224>
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	2201      	movs	r2, #1
 80119be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80119c2:	f7fd fb95 	bl	800f0f0 <HAL_GetTick>
 80119c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80119c8:	697b      	ldr	r3, [r7, #20]
 80119ca:	9300      	str	r3, [sp, #0]
 80119cc:	2319      	movs	r3, #25
 80119ce:	2201      	movs	r2, #1
 80119d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80119d4:	68f8      	ldr	r0, [r7, #12]
 80119d6:	f000 f9af 	bl	8011d38 <I2C_WaitOnFlagUntilTimeout>
 80119da:	4603      	mov	r3, r0
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d001      	beq.n	80119e4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80119e0:	2301      	movs	r3, #1
 80119e2:	e0d5      	b.n	8011b90 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	2222      	movs	r2, #34	; 0x22
 80119e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	2240      	movs	r2, #64	; 0x40
 80119f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	2200      	movs	r2, #0
 80119f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	6a3a      	ldr	r2, [r7, #32]
 80119fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011a04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	2200      	movs	r2, #0
 8011a0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8011a0c:	88f8      	ldrh	r0, [r7, #6]
 8011a0e:	893a      	ldrh	r2, [r7, #8]
 8011a10:	8979      	ldrh	r1, [r7, #10]
 8011a12:	697b      	ldr	r3, [r7, #20]
 8011a14:	9301      	str	r3, [sp, #4]
 8011a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a18:	9300      	str	r3, [sp, #0]
 8011a1a:	4603      	mov	r3, r0
 8011a1c:	68f8      	ldr	r0, [r7, #12]
 8011a1e:	f000 f913 	bl	8011c48 <I2C_RequestMemoryRead>
 8011a22:	4603      	mov	r3, r0
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d005      	beq.n	8011a34 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8011a30:	2301      	movs	r3, #1
 8011a32:	e0ad      	b.n	8011b90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011a38:	b29b      	uxth	r3, r3
 8011a3a:	2bff      	cmp	r3, #255	; 0xff
 8011a3c:	d90e      	bls.n	8011a5c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	22ff      	movs	r2, #255	; 0xff
 8011a42:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011a48:	b2da      	uxtb	r2, r3
 8011a4a:	8979      	ldrh	r1, [r7, #10]
 8011a4c:	4b52      	ldr	r3, [pc, #328]	; (8011b98 <HAL_I2C_Mem_Read+0x22c>)
 8011a4e:	9300      	str	r3, [sp, #0]
 8011a50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8011a54:	68f8      	ldr	r0, [r7, #12]
 8011a56:	f000 fb33 	bl	80120c0 <I2C_TransferConfig>
 8011a5a:	e00f      	b.n	8011a7c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011a60:	b29a      	uxth	r2, r3
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011a6a:	b2da      	uxtb	r2, r3
 8011a6c:	8979      	ldrh	r1, [r7, #10]
 8011a6e:	4b4a      	ldr	r3, [pc, #296]	; (8011b98 <HAL_I2C_Mem_Read+0x22c>)
 8011a70:	9300      	str	r3, [sp, #0]
 8011a72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011a76:	68f8      	ldr	r0, [r7, #12]
 8011a78:	f000 fb22 	bl	80120c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8011a7c:	697b      	ldr	r3, [r7, #20]
 8011a7e:	9300      	str	r3, [sp, #0]
 8011a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a82:	2200      	movs	r2, #0
 8011a84:	2104      	movs	r1, #4
 8011a86:	68f8      	ldr	r0, [r7, #12]
 8011a88:	f000 f956 	bl	8011d38 <I2C_WaitOnFlagUntilTimeout>
 8011a8c:	4603      	mov	r3, r0
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d001      	beq.n	8011a96 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8011a92:	2301      	movs	r3, #1
 8011a94:	e07c      	b.n	8011b90 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011aa0:	b2d2      	uxtb	r2, r2
 8011aa2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011aa8:	1c5a      	adds	r2, r3, #1
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011ab2:	3b01      	subs	r3, #1
 8011ab4:	b29a      	uxth	r2, r3
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011abe:	b29b      	uxth	r3, r3
 8011ac0:	3b01      	subs	r3, #1
 8011ac2:	b29a      	uxth	r2, r3
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011acc:	b29b      	uxth	r3, r3
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d034      	beq.n	8011b3c <HAL_I2C_Mem_Read+0x1d0>
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d130      	bne.n	8011b3c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8011ada:	697b      	ldr	r3, [r7, #20]
 8011adc:	9300      	str	r3, [sp, #0]
 8011ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ae0:	2200      	movs	r2, #0
 8011ae2:	2180      	movs	r1, #128	; 0x80
 8011ae4:	68f8      	ldr	r0, [r7, #12]
 8011ae6:	f000 f927 	bl	8011d38 <I2C_WaitOnFlagUntilTimeout>
 8011aea:	4603      	mov	r3, r0
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d001      	beq.n	8011af4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8011af0:	2301      	movs	r3, #1
 8011af2:	e04d      	b.n	8011b90 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011af8:	b29b      	uxth	r3, r3
 8011afa:	2bff      	cmp	r3, #255	; 0xff
 8011afc:	d90e      	bls.n	8011b1c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	22ff      	movs	r2, #255	; 0xff
 8011b02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011b08:	b2da      	uxtb	r2, r3
 8011b0a:	8979      	ldrh	r1, [r7, #10]
 8011b0c:	2300      	movs	r3, #0
 8011b0e:	9300      	str	r3, [sp, #0]
 8011b10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8011b14:	68f8      	ldr	r0, [r7, #12]
 8011b16:	f000 fad3 	bl	80120c0 <I2C_TransferConfig>
 8011b1a:	e00f      	b.n	8011b3c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011b20:	b29a      	uxth	r2, r3
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011b2a:	b2da      	uxtb	r2, r3
 8011b2c:	8979      	ldrh	r1, [r7, #10]
 8011b2e:	2300      	movs	r3, #0
 8011b30:	9300      	str	r3, [sp, #0]
 8011b32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011b36:	68f8      	ldr	r0, [r7, #12]
 8011b38:	f000 fac2 	bl	80120c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011b40:	b29b      	uxth	r3, r3
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d19a      	bne.n	8011a7c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8011b46:	697a      	ldr	r2, [r7, #20]
 8011b48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011b4a:	68f8      	ldr	r0, [r7, #12]
 8011b4c:	f000 f994 	bl	8011e78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8011b50:	4603      	mov	r3, r0
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d001      	beq.n	8011b5a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8011b56:	2301      	movs	r3, #1
 8011b58:	e01a      	b.n	8011b90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	2220      	movs	r2, #32
 8011b60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	6859      	ldr	r1, [r3, #4]
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	681a      	ldr	r2, [r3, #0]
 8011b6c:	4b0b      	ldr	r3, [pc, #44]	; (8011b9c <HAL_I2C_Mem_Read+0x230>)
 8011b6e:	400b      	ands	r3, r1
 8011b70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	2220      	movs	r2, #32
 8011b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	2200      	movs	r2, #0
 8011b7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	2200      	movs	r2, #0
 8011b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	e000      	b.n	8011b90 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8011b8e:	2302      	movs	r3, #2
  }
}
 8011b90:	4618      	mov	r0, r3
 8011b92:	3718      	adds	r7, #24
 8011b94:	46bd      	mov	sp, r7
 8011b96:	bd80      	pop	{r7, pc}
 8011b98:	80002400 	.word	0x80002400
 8011b9c:	fe00e800 	.word	0xfe00e800

08011ba0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8011ba0:	b580      	push	{r7, lr}
 8011ba2:	b086      	sub	sp, #24
 8011ba4:	af02      	add	r7, sp, #8
 8011ba6:	60f8      	str	r0, [r7, #12]
 8011ba8:	4608      	mov	r0, r1
 8011baa:	4611      	mov	r1, r2
 8011bac:	461a      	mov	r2, r3
 8011bae:	4603      	mov	r3, r0
 8011bb0:	817b      	strh	r3, [r7, #10]
 8011bb2:	460b      	mov	r3, r1
 8011bb4:	813b      	strh	r3, [r7, #8]
 8011bb6:	4613      	mov	r3, r2
 8011bb8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8011bba:	88fb      	ldrh	r3, [r7, #6]
 8011bbc:	b2da      	uxtb	r2, r3
 8011bbe:	8979      	ldrh	r1, [r7, #10]
 8011bc0:	4b20      	ldr	r3, [pc, #128]	; (8011c44 <I2C_RequestMemoryWrite+0xa4>)
 8011bc2:	9300      	str	r3, [sp, #0]
 8011bc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8011bc8:	68f8      	ldr	r0, [r7, #12]
 8011bca:	f000 fa79 	bl	80120c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8011bce:	69fa      	ldr	r2, [r7, #28]
 8011bd0:	69b9      	ldr	r1, [r7, #24]
 8011bd2:	68f8      	ldr	r0, [r7, #12]
 8011bd4:	f000 f909 	bl	8011dea <I2C_WaitOnTXISFlagUntilTimeout>
 8011bd8:	4603      	mov	r3, r0
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d001      	beq.n	8011be2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8011bde:	2301      	movs	r3, #1
 8011be0:	e02c      	b.n	8011c3c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8011be2:	88fb      	ldrh	r3, [r7, #6]
 8011be4:	2b01      	cmp	r3, #1
 8011be6:	d105      	bne.n	8011bf4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8011be8:	893b      	ldrh	r3, [r7, #8]
 8011bea:	b2da      	uxtb	r2, r3
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	629a      	str	r2, [r3, #40]	; 0x28
 8011bf2:	e015      	b.n	8011c20 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8011bf4:	893b      	ldrh	r3, [r7, #8]
 8011bf6:	0a1b      	lsrs	r3, r3, #8
 8011bf8:	b29b      	uxth	r3, r3
 8011bfa:	b2da      	uxtb	r2, r3
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8011c02:	69fa      	ldr	r2, [r7, #28]
 8011c04:	69b9      	ldr	r1, [r7, #24]
 8011c06:	68f8      	ldr	r0, [r7, #12]
 8011c08:	f000 f8ef 	bl	8011dea <I2C_WaitOnTXISFlagUntilTimeout>
 8011c0c:	4603      	mov	r3, r0
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d001      	beq.n	8011c16 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8011c12:	2301      	movs	r3, #1
 8011c14:	e012      	b.n	8011c3c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8011c16:	893b      	ldrh	r3, [r7, #8]
 8011c18:	b2da      	uxtb	r2, r3
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8011c20:	69fb      	ldr	r3, [r7, #28]
 8011c22:	9300      	str	r3, [sp, #0]
 8011c24:	69bb      	ldr	r3, [r7, #24]
 8011c26:	2200      	movs	r2, #0
 8011c28:	2180      	movs	r1, #128	; 0x80
 8011c2a:	68f8      	ldr	r0, [r7, #12]
 8011c2c:	f000 f884 	bl	8011d38 <I2C_WaitOnFlagUntilTimeout>
 8011c30:	4603      	mov	r3, r0
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d001      	beq.n	8011c3a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8011c36:	2301      	movs	r3, #1
 8011c38:	e000      	b.n	8011c3c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8011c3a:	2300      	movs	r3, #0
}
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	3710      	adds	r7, #16
 8011c40:	46bd      	mov	sp, r7
 8011c42:	bd80      	pop	{r7, pc}
 8011c44:	80002000 	.word	0x80002000

08011c48 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8011c48:	b580      	push	{r7, lr}
 8011c4a:	b086      	sub	sp, #24
 8011c4c:	af02      	add	r7, sp, #8
 8011c4e:	60f8      	str	r0, [r7, #12]
 8011c50:	4608      	mov	r0, r1
 8011c52:	4611      	mov	r1, r2
 8011c54:	461a      	mov	r2, r3
 8011c56:	4603      	mov	r3, r0
 8011c58:	817b      	strh	r3, [r7, #10]
 8011c5a:	460b      	mov	r3, r1
 8011c5c:	813b      	strh	r3, [r7, #8]
 8011c5e:	4613      	mov	r3, r2
 8011c60:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8011c62:	88fb      	ldrh	r3, [r7, #6]
 8011c64:	b2da      	uxtb	r2, r3
 8011c66:	8979      	ldrh	r1, [r7, #10]
 8011c68:	4b20      	ldr	r3, [pc, #128]	; (8011cec <I2C_RequestMemoryRead+0xa4>)
 8011c6a:	9300      	str	r3, [sp, #0]
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	68f8      	ldr	r0, [r7, #12]
 8011c70:	f000 fa26 	bl	80120c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8011c74:	69fa      	ldr	r2, [r7, #28]
 8011c76:	69b9      	ldr	r1, [r7, #24]
 8011c78:	68f8      	ldr	r0, [r7, #12]
 8011c7a:	f000 f8b6 	bl	8011dea <I2C_WaitOnTXISFlagUntilTimeout>
 8011c7e:	4603      	mov	r3, r0
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d001      	beq.n	8011c88 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8011c84:	2301      	movs	r3, #1
 8011c86:	e02c      	b.n	8011ce2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8011c88:	88fb      	ldrh	r3, [r7, #6]
 8011c8a:	2b01      	cmp	r3, #1
 8011c8c:	d105      	bne.n	8011c9a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8011c8e:	893b      	ldrh	r3, [r7, #8]
 8011c90:	b2da      	uxtb	r2, r3
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	629a      	str	r2, [r3, #40]	; 0x28
 8011c98:	e015      	b.n	8011cc6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8011c9a:	893b      	ldrh	r3, [r7, #8]
 8011c9c:	0a1b      	lsrs	r3, r3, #8
 8011c9e:	b29b      	uxth	r3, r3
 8011ca0:	b2da      	uxtb	r2, r3
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8011ca8:	69fa      	ldr	r2, [r7, #28]
 8011caa:	69b9      	ldr	r1, [r7, #24]
 8011cac:	68f8      	ldr	r0, [r7, #12]
 8011cae:	f000 f89c 	bl	8011dea <I2C_WaitOnTXISFlagUntilTimeout>
 8011cb2:	4603      	mov	r3, r0
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d001      	beq.n	8011cbc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8011cb8:	2301      	movs	r3, #1
 8011cba:	e012      	b.n	8011ce2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8011cbc:	893b      	ldrh	r3, [r7, #8]
 8011cbe:	b2da      	uxtb	r2, r3
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8011cc6:	69fb      	ldr	r3, [r7, #28]
 8011cc8:	9300      	str	r3, [sp, #0]
 8011cca:	69bb      	ldr	r3, [r7, #24]
 8011ccc:	2200      	movs	r2, #0
 8011cce:	2140      	movs	r1, #64	; 0x40
 8011cd0:	68f8      	ldr	r0, [r7, #12]
 8011cd2:	f000 f831 	bl	8011d38 <I2C_WaitOnFlagUntilTimeout>
 8011cd6:	4603      	mov	r3, r0
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d001      	beq.n	8011ce0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8011cdc:	2301      	movs	r3, #1
 8011cde:	e000      	b.n	8011ce2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8011ce0:	2300      	movs	r3, #0
}
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	3710      	adds	r7, #16
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	bd80      	pop	{r7, pc}
 8011cea:	bf00      	nop
 8011cec:	80002000 	.word	0x80002000

08011cf0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8011cf0:	b480      	push	{r7}
 8011cf2:	b083      	sub	sp, #12
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	699b      	ldr	r3, [r3, #24]
 8011cfe:	f003 0302 	and.w	r3, r3, #2
 8011d02:	2b02      	cmp	r3, #2
 8011d04:	d103      	bne.n	8011d0e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	699b      	ldr	r3, [r3, #24]
 8011d14:	f003 0301 	and.w	r3, r3, #1
 8011d18:	2b01      	cmp	r3, #1
 8011d1a:	d007      	beq.n	8011d2c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	699a      	ldr	r2, [r3, #24]
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	f042 0201 	orr.w	r2, r2, #1
 8011d2a:	619a      	str	r2, [r3, #24]
  }
}
 8011d2c:	bf00      	nop
 8011d2e:	370c      	adds	r7, #12
 8011d30:	46bd      	mov	sp, r7
 8011d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d36:	4770      	bx	lr

08011d38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b084      	sub	sp, #16
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	60f8      	str	r0, [r7, #12]
 8011d40:	60b9      	str	r1, [r7, #8]
 8011d42:	603b      	str	r3, [r7, #0]
 8011d44:	4613      	mov	r3, r2
 8011d46:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8011d48:	e03b      	b.n	8011dc2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8011d4a:	69ba      	ldr	r2, [r7, #24]
 8011d4c:	6839      	ldr	r1, [r7, #0]
 8011d4e:	68f8      	ldr	r0, [r7, #12]
 8011d50:	f000 f8d6 	bl	8011f00 <I2C_IsErrorOccurred>
 8011d54:	4603      	mov	r3, r0
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d001      	beq.n	8011d5e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8011d5a:	2301      	movs	r3, #1
 8011d5c:	e041      	b.n	8011de2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011d5e:	683b      	ldr	r3, [r7, #0]
 8011d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d64:	d02d      	beq.n	8011dc2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011d66:	f7fd f9c3 	bl	800f0f0 <HAL_GetTick>
 8011d6a:	4602      	mov	r2, r0
 8011d6c:	69bb      	ldr	r3, [r7, #24]
 8011d6e:	1ad3      	subs	r3, r2, r3
 8011d70:	683a      	ldr	r2, [r7, #0]
 8011d72:	429a      	cmp	r2, r3
 8011d74:	d302      	bcc.n	8011d7c <I2C_WaitOnFlagUntilTimeout+0x44>
 8011d76:	683b      	ldr	r3, [r7, #0]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d122      	bne.n	8011dc2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	699a      	ldr	r2, [r3, #24]
 8011d82:	68bb      	ldr	r3, [r7, #8]
 8011d84:	4013      	ands	r3, r2
 8011d86:	68ba      	ldr	r2, [r7, #8]
 8011d88:	429a      	cmp	r2, r3
 8011d8a:	bf0c      	ite	eq
 8011d8c:	2301      	moveq	r3, #1
 8011d8e:	2300      	movne	r3, #0
 8011d90:	b2db      	uxtb	r3, r3
 8011d92:	461a      	mov	r2, r3
 8011d94:	79fb      	ldrb	r3, [r7, #7]
 8011d96:	429a      	cmp	r2, r3
 8011d98:	d113      	bne.n	8011dc2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d9e:	f043 0220 	orr.w	r2, r3, #32
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	2220      	movs	r2, #32
 8011daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	2200      	movs	r2, #0
 8011db2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	2200      	movs	r2, #0
 8011dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8011dbe:	2301      	movs	r3, #1
 8011dc0:	e00f      	b.n	8011de2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	699a      	ldr	r2, [r3, #24]
 8011dc8:	68bb      	ldr	r3, [r7, #8]
 8011dca:	4013      	ands	r3, r2
 8011dcc:	68ba      	ldr	r2, [r7, #8]
 8011dce:	429a      	cmp	r2, r3
 8011dd0:	bf0c      	ite	eq
 8011dd2:	2301      	moveq	r3, #1
 8011dd4:	2300      	movne	r3, #0
 8011dd6:	b2db      	uxtb	r3, r3
 8011dd8:	461a      	mov	r2, r3
 8011dda:	79fb      	ldrb	r3, [r7, #7]
 8011ddc:	429a      	cmp	r2, r3
 8011dde:	d0b4      	beq.n	8011d4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011de0:	2300      	movs	r3, #0
}
 8011de2:	4618      	mov	r0, r3
 8011de4:	3710      	adds	r7, #16
 8011de6:	46bd      	mov	sp, r7
 8011de8:	bd80      	pop	{r7, pc}

08011dea <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8011dea:	b580      	push	{r7, lr}
 8011dec:	b084      	sub	sp, #16
 8011dee:	af00      	add	r7, sp, #0
 8011df0:	60f8      	str	r0, [r7, #12]
 8011df2:	60b9      	str	r1, [r7, #8]
 8011df4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8011df6:	e033      	b.n	8011e60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8011df8:	687a      	ldr	r2, [r7, #4]
 8011dfa:	68b9      	ldr	r1, [r7, #8]
 8011dfc:	68f8      	ldr	r0, [r7, #12]
 8011dfe:	f000 f87f 	bl	8011f00 <I2C_IsErrorOccurred>
 8011e02:	4603      	mov	r3, r0
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d001      	beq.n	8011e0c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8011e08:	2301      	movs	r3, #1
 8011e0a:	e031      	b.n	8011e70 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011e0c:	68bb      	ldr	r3, [r7, #8]
 8011e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e12:	d025      	beq.n	8011e60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011e14:	f7fd f96c 	bl	800f0f0 <HAL_GetTick>
 8011e18:	4602      	mov	r2, r0
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	1ad3      	subs	r3, r2, r3
 8011e1e:	68ba      	ldr	r2, [r7, #8]
 8011e20:	429a      	cmp	r2, r3
 8011e22:	d302      	bcc.n	8011e2a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8011e24:	68bb      	ldr	r3, [r7, #8]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d11a      	bne.n	8011e60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	699b      	ldr	r3, [r3, #24]
 8011e30:	f003 0302 	and.w	r3, r3, #2
 8011e34:	2b02      	cmp	r3, #2
 8011e36:	d013      	beq.n	8011e60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e3c:	f043 0220 	orr.w	r2, r3, #32
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	2220      	movs	r2, #32
 8011e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	2200      	movs	r2, #0
 8011e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	2200      	movs	r2, #0
 8011e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8011e5c:	2301      	movs	r3, #1
 8011e5e:	e007      	b.n	8011e70 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	699b      	ldr	r3, [r3, #24]
 8011e66:	f003 0302 	and.w	r3, r3, #2
 8011e6a:	2b02      	cmp	r3, #2
 8011e6c:	d1c4      	bne.n	8011df8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8011e6e:	2300      	movs	r3, #0
}
 8011e70:	4618      	mov	r0, r3
 8011e72:	3710      	adds	r7, #16
 8011e74:	46bd      	mov	sp, r7
 8011e76:	bd80      	pop	{r7, pc}

08011e78 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8011e78:	b580      	push	{r7, lr}
 8011e7a:	b084      	sub	sp, #16
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	60f8      	str	r0, [r7, #12]
 8011e80:	60b9      	str	r1, [r7, #8]
 8011e82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011e84:	e02f      	b.n	8011ee6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8011e86:	687a      	ldr	r2, [r7, #4]
 8011e88:	68b9      	ldr	r1, [r7, #8]
 8011e8a:	68f8      	ldr	r0, [r7, #12]
 8011e8c:	f000 f838 	bl	8011f00 <I2C_IsErrorOccurred>
 8011e90:	4603      	mov	r3, r0
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d001      	beq.n	8011e9a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8011e96:	2301      	movs	r3, #1
 8011e98:	e02d      	b.n	8011ef6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011e9a:	f7fd f929 	bl	800f0f0 <HAL_GetTick>
 8011e9e:	4602      	mov	r2, r0
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	1ad3      	subs	r3, r2, r3
 8011ea4:	68ba      	ldr	r2, [r7, #8]
 8011ea6:	429a      	cmp	r2, r3
 8011ea8:	d302      	bcc.n	8011eb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8011eaa:	68bb      	ldr	r3, [r7, #8]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d11a      	bne.n	8011ee6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	699b      	ldr	r3, [r3, #24]
 8011eb6:	f003 0320 	and.w	r3, r3, #32
 8011eba:	2b20      	cmp	r3, #32
 8011ebc:	d013      	beq.n	8011ee6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011ec2:	f043 0220 	orr.w	r2, r3, #32
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	2220      	movs	r2, #32
 8011ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	2200      	movs	r2, #0
 8011ed6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	2200      	movs	r2, #0
 8011ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8011ee2:	2301      	movs	r3, #1
 8011ee4:	e007      	b.n	8011ef6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	699b      	ldr	r3, [r3, #24]
 8011eec:	f003 0320 	and.w	r3, r3, #32
 8011ef0:	2b20      	cmp	r3, #32
 8011ef2:	d1c8      	bne.n	8011e86 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8011ef4:	2300      	movs	r3, #0
}
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	3710      	adds	r7, #16
 8011efa:	46bd      	mov	sp, r7
 8011efc:	bd80      	pop	{r7, pc}
	...

08011f00 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b08a      	sub	sp, #40	; 0x28
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	60f8      	str	r0, [r7, #12]
 8011f08:	60b9      	str	r1, [r7, #8]
 8011f0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	699b      	ldr	r3, [r3, #24]
 8011f18:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8011f1a:	2300      	movs	r3, #0
 8011f1c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8011f22:	69bb      	ldr	r3, [r7, #24]
 8011f24:	f003 0310 	and.w	r3, r3, #16
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d068      	beq.n	8011ffe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	2210      	movs	r2, #16
 8011f32:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8011f34:	e049      	b.n	8011fca <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8011f36:	68bb      	ldr	r3, [r7, #8]
 8011f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f3c:	d045      	beq.n	8011fca <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8011f3e:	f7fd f8d7 	bl	800f0f0 <HAL_GetTick>
 8011f42:	4602      	mov	r2, r0
 8011f44:	69fb      	ldr	r3, [r7, #28]
 8011f46:	1ad3      	subs	r3, r2, r3
 8011f48:	68ba      	ldr	r2, [r7, #8]
 8011f4a:	429a      	cmp	r2, r3
 8011f4c:	d302      	bcc.n	8011f54 <I2C_IsErrorOccurred+0x54>
 8011f4e:	68bb      	ldr	r3, [r7, #8]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d13a      	bne.n	8011fca <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	685b      	ldr	r3, [r3, #4]
 8011f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011f5e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011f66:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	699b      	ldr	r3, [r3, #24]
 8011f6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011f72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011f76:	d121      	bne.n	8011fbc <I2C_IsErrorOccurred+0xbc>
 8011f78:	697b      	ldr	r3, [r7, #20]
 8011f7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011f7e:	d01d      	beq.n	8011fbc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8011f80:	7cfb      	ldrb	r3, [r7, #19]
 8011f82:	2b20      	cmp	r3, #32
 8011f84:	d01a      	beq.n	8011fbc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	685a      	ldr	r2, [r3, #4]
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011f94:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8011f96:	f7fd f8ab 	bl	800f0f0 <HAL_GetTick>
 8011f9a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011f9c:	e00e      	b.n	8011fbc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8011f9e:	f7fd f8a7 	bl	800f0f0 <HAL_GetTick>
 8011fa2:	4602      	mov	r2, r0
 8011fa4:	69fb      	ldr	r3, [r7, #28]
 8011fa6:	1ad3      	subs	r3, r2, r3
 8011fa8:	2b19      	cmp	r3, #25
 8011faa:	d907      	bls.n	8011fbc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8011fac:	6a3b      	ldr	r3, [r7, #32]
 8011fae:	f043 0320 	orr.w	r3, r3, #32
 8011fb2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8011fb4:	2301      	movs	r3, #1
 8011fb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8011fba:	e006      	b.n	8011fca <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	699b      	ldr	r3, [r3, #24]
 8011fc2:	f003 0320 	and.w	r3, r3, #32
 8011fc6:	2b20      	cmp	r3, #32
 8011fc8:	d1e9      	bne.n	8011f9e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	699b      	ldr	r3, [r3, #24]
 8011fd0:	f003 0320 	and.w	r3, r3, #32
 8011fd4:	2b20      	cmp	r3, #32
 8011fd6:	d003      	beq.n	8011fe0 <I2C_IsErrorOccurred+0xe0>
 8011fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d0aa      	beq.n	8011f36 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8011fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d103      	bne.n	8011ff0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	2220      	movs	r2, #32
 8011fee:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8011ff0:	6a3b      	ldr	r3, [r7, #32]
 8011ff2:	f043 0304 	orr.w	r3, r3, #4
 8011ff6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8011ff8:	2301      	movs	r3, #1
 8011ffa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	699b      	ldr	r3, [r3, #24]
 8012004:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8012006:	69bb      	ldr	r3, [r7, #24]
 8012008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801200c:	2b00      	cmp	r3, #0
 801200e:	d00b      	beq.n	8012028 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8012010:	6a3b      	ldr	r3, [r7, #32]
 8012012:	f043 0301 	orr.w	r3, r3, #1
 8012016:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012020:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8012022:	2301      	movs	r3, #1
 8012024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8012028:	69bb      	ldr	r3, [r7, #24]
 801202a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801202e:	2b00      	cmp	r3, #0
 8012030:	d00b      	beq.n	801204a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8012032:	6a3b      	ldr	r3, [r7, #32]
 8012034:	f043 0308 	orr.w	r3, r3, #8
 8012038:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012042:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8012044:	2301      	movs	r3, #1
 8012046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 801204a:	69bb      	ldr	r3, [r7, #24]
 801204c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012050:	2b00      	cmp	r3, #0
 8012052:	d00b      	beq.n	801206c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8012054:	6a3b      	ldr	r3, [r7, #32]
 8012056:	f043 0302 	orr.w	r3, r3, #2
 801205a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012064:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8012066:	2301      	movs	r3, #1
 8012068:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 801206c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012070:	2b00      	cmp	r3, #0
 8012072:	d01c      	beq.n	80120ae <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8012074:	68f8      	ldr	r0, [r7, #12]
 8012076:	f7ff fe3b 	bl	8011cf0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	6859      	ldr	r1, [r3, #4]
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	681a      	ldr	r2, [r3, #0]
 8012084:	4b0d      	ldr	r3, [pc, #52]	; (80120bc <I2C_IsErrorOccurred+0x1bc>)
 8012086:	400b      	ands	r3, r1
 8012088:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801208e:	6a3b      	ldr	r3, [r7, #32]
 8012090:	431a      	orrs	r2, r3
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	2220      	movs	r2, #32
 801209a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	2200      	movs	r2, #0
 80120a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	2200      	movs	r2, #0
 80120aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80120ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80120b2:	4618      	mov	r0, r3
 80120b4:	3728      	adds	r7, #40	; 0x28
 80120b6:	46bd      	mov	sp, r7
 80120b8:	bd80      	pop	{r7, pc}
 80120ba:	bf00      	nop
 80120bc:	fe00e800 	.word	0xfe00e800

080120c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80120c0:	b480      	push	{r7}
 80120c2:	b087      	sub	sp, #28
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	60f8      	str	r0, [r7, #12]
 80120c8:	607b      	str	r3, [r7, #4]
 80120ca:	460b      	mov	r3, r1
 80120cc:	817b      	strh	r3, [r7, #10]
 80120ce:	4613      	mov	r3, r2
 80120d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80120d2:	897b      	ldrh	r3, [r7, #10]
 80120d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80120d8:	7a7b      	ldrb	r3, [r7, #9]
 80120da:	041b      	lsls	r3, r3, #16
 80120dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80120e0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80120e6:	6a3b      	ldr	r3, [r7, #32]
 80120e8:	4313      	orrs	r3, r2
 80120ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80120ee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	685a      	ldr	r2, [r3, #4]
 80120f6:	6a3b      	ldr	r3, [r7, #32]
 80120f8:	0d5b      	lsrs	r3, r3, #21
 80120fa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80120fe:	4b08      	ldr	r3, [pc, #32]	; (8012120 <I2C_TransferConfig+0x60>)
 8012100:	430b      	orrs	r3, r1
 8012102:	43db      	mvns	r3, r3
 8012104:	ea02 0103 	and.w	r1, r2, r3
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	697a      	ldr	r2, [r7, #20]
 801210e:	430a      	orrs	r2, r1
 8012110:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8012112:	bf00      	nop
 8012114:	371c      	adds	r7, #28
 8012116:	46bd      	mov	sp, r7
 8012118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801211c:	4770      	bx	lr
 801211e:	bf00      	nop
 8012120:	03ff63ff 	.word	0x03ff63ff

08012124 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8012124:	b480      	push	{r7}
 8012126:	b083      	sub	sp, #12
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
 801212c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012134:	b2db      	uxtb	r3, r3
 8012136:	2b20      	cmp	r3, #32
 8012138:	d138      	bne.n	80121ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012140:	2b01      	cmp	r3, #1
 8012142:	d101      	bne.n	8012148 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8012144:	2302      	movs	r3, #2
 8012146:	e032      	b.n	80121ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	2201      	movs	r2, #1
 801214c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	2224      	movs	r2, #36	; 0x24
 8012154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	681a      	ldr	r2, [r3, #0]
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	f022 0201 	bic.w	r2, r2, #1
 8012166:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	681a      	ldr	r2, [r3, #0]
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8012176:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	6819      	ldr	r1, [r3, #0]
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	683a      	ldr	r2, [r7, #0]
 8012184:	430a      	orrs	r2, r1
 8012186:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	681a      	ldr	r2, [r3, #0]
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	f042 0201 	orr.w	r2, r2, #1
 8012196:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	2220      	movs	r2, #32
 801219c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	2200      	movs	r2, #0
 80121a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80121a8:	2300      	movs	r3, #0
 80121aa:	e000      	b.n	80121ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80121ac:	2302      	movs	r3, #2
  }
}
 80121ae:	4618      	mov	r0, r3
 80121b0:	370c      	adds	r7, #12
 80121b2:	46bd      	mov	sp, r7
 80121b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b8:	4770      	bx	lr

080121ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80121ba:	b480      	push	{r7}
 80121bc:	b085      	sub	sp, #20
 80121be:	af00      	add	r7, sp, #0
 80121c0:	6078      	str	r0, [r7, #4]
 80121c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80121ca:	b2db      	uxtb	r3, r3
 80121cc:	2b20      	cmp	r3, #32
 80121ce:	d139      	bne.n	8012244 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80121d6:	2b01      	cmp	r3, #1
 80121d8:	d101      	bne.n	80121de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80121da:	2302      	movs	r3, #2
 80121dc:	e033      	b.n	8012246 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	2201      	movs	r2, #1
 80121e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	2224      	movs	r2, #36	; 0x24
 80121ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	681a      	ldr	r2, [r3, #0]
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	f022 0201 	bic.w	r2, r2, #1
 80121fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801220c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801220e:	683b      	ldr	r3, [r7, #0]
 8012210:	021b      	lsls	r3, r3, #8
 8012212:	68fa      	ldr	r2, [r7, #12]
 8012214:	4313      	orrs	r3, r2
 8012216:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	68fa      	ldr	r2, [r7, #12]
 801221e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	681a      	ldr	r2, [r3, #0]
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	f042 0201 	orr.w	r2, r2, #1
 801222e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	2220      	movs	r2, #32
 8012234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	2200      	movs	r2, #0
 801223c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8012240:	2300      	movs	r3, #0
 8012242:	e000      	b.n	8012246 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8012244:	2302      	movs	r3, #2
  }
}
 8012246:	4618      	mov	r0, r3
 8012248:	3714      	adds	r7, #20
 801224a:	46bd      	mov	sp, r7
 801224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012250:	4770      	bx	lr
	...

08012254 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8012254:	b580      	push	{r7, lr}
 8012256:	b084      	sub	sp, #16
 8012258:	af00      	add	r7, sp, #0
 801225a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 801225c:	2300      	movs	r3, #0
 801225e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	2b00      	cmp	r3, #0
 8012264:	d01e      	beq.n	80122a4 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8012266:	4b13      	ldr	r3, [pc, #76]	; (80122b4 <HAL_IPCC_Init+0x60>)
 8012268:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012270:	b2db      	uxtb	r3, r3
 8012272:	2b00      	cmp	r3, #0
 8012274:	d102      	bne.n	801227c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8012276:	6878      	ldr	r0, [r7, #4]
 8012278:	f7f8 f90a 	bl	800a490 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 801227c:	68b8      	ldr	r0, [r7, #8]
 801227e:	f000 f85b 	bl	8012338 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8012282:	68bb      	ldr	r3, [r7, #8]
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 801228a:	68bb      	ldr	r3, [r7, #8]
 801228c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 801228e:	6878      	ldr	r0, [r7, #4]
 8012290:	f000 f82c 	bl	80122ec <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	2200      	movs	r2, #0
 8012298:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	2201      	movs	r2, #1
 801229e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80122a2:	e001      	b.n	80122a8 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80122a4:	2301      	movs	r3, #1
 80122a6:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80122a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80122aa:	4618      	mov	r0, r3
 80122ac:	3710      	adds	r7, #16
 80122ae:	46bd      	mov	sp, r7
 80122b0:	bd80      	pop	{r7, pc}
 80122b2:	bf00      	nop
 80122b4:	58000c00 	.word	0x58000c00

080122b8 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80122b8:	b480      	push	{r7}
 80122ba:	b085      	sub	sp, #20
 80122bc:	af00      	add	r7, sp, #0
 80122be:	60f8      	str	r0, [r7, #12]
 80122c0:	60b9      	str	r1, [r7, #8]
 80122c2:	4613      	mov	r3, r2
 80122c4:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80122c6:	bf00      	nop
 80122c8:	3714      	adds	r7, #20
 80122ca:	46bd      	mov	sp, r7
 80122cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d0:	4770      	bx	lr

080122d2 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80122d2:	b480      	push	{r7}
 80122d4:	b085      	sub	sp, #20
 80122d6:	af00      	add	r7, sp, #0
 80122d8:	60f8      	str	r0, [r7, #12]
 80122da:	60b9      	str	r1, [r7, #8]
 80122dc:	4613      	mov	r3, r2
 80122de:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80122e0:	bf00      	nop
 80122e2:	3714      	adds	r7, #20
 80122e4:	46bd      	mov	sp, r7
 80122e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ea:	4770      	bx	lr

080122ec <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80122ec:	b480      	push	{r7}
 80122ee:	b085      	sub	sp, #20
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80122f4:	2300      	movs	r3, #0
 80122f6:	60fb      	str	r3, [r7, #12]
 80122f8:	e00f      	b.n	801231a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80122fa:	687a      	ldr	r2, [r7, #4]
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	009b      	lsls	r3, r3, #2
 8012300:	4413      	add	r3, r2
 8012302:	4a0b      	ldr	r2, [pc, #44]	; (8012330 <IPCC_SetDefaultCallbacks+0x44>)
 8012304:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8012306:	687a      	ldr	r2, [r7, #4]
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	3306      	adds	r3, #6
 801230c:	009b      	lsls	r3, r3, #2
 801230e:	4413      	add	r3, r2
 8012310:	4a08      	ldr	r2, [pc, #32]	; (8012334 <IPCC_SetDefaultCallbacks+0x48>)
 8012312:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	3301      	adds	r3, #1
 8012318:	60fb      	str	r3, [r7, #12]
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	2b05      	cmp	r3, #5
 801231e:	d9ec      	bls.n	80122fa <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8012320:	bf00      	nop
 8012322:	bf00      	nop
 8012324:	3714      	adds	r7, #20
 8012326:	46bd      	mov	sp, r7
 8012328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801232c:	4770      	bx	lr
 801232e:	bf00      	nop
 8012330:	080122b9 	.word	0x080122b9
 8012334:	080122d3 	.word	0x080122d3

08012338 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8012338:	b480      	push	{r7}
 801233a:	b083      	sub	sp, #12
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	2200      	movs	r2, #0
 8012344:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 801234c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	223f      	movs	r2, #63	; 0x3f
 8012352:	609a      	str	r2, [r3, #8]
}
 8012354:	bf00      	nop
 8012356:	370c      	adds	r7, #12
 8012358:	46bd      	mov	sp, r7
 801235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801235e:	4770      	bx	lr

08012360 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8012360:	b480      	push	{r7}
 8012362:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8012364:	4b05      	ldr	r3, [pc, #20]	; (801237c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	4a04      	ldr	r2, [pc, #16]	; (801237c <HAL_PWR_EnableBkUpAccess+0x1c>)
 801236a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801236e:	6013      	str	r3, [r2, #0]
}
 8012370:	bf00      	nop
 8012372:	46bd      	mov	sp, r7
 8012374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012378:	4770      	bx	lr
 801237a:	bf00      	nop
 801237c:	58000400 	.word	0x58000400

08012380 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8012380:	b480      	push	{r7}
 8012382:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8012384:	4b04      	ldr	r3, [pc, #16]	; (8012398 <HAL_PWREx_GetVoltageRange+0x18>)
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 801238c:	4618      	mov	r0, r3
 801238e:	46bd      	mov	sp, r7
 8012390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012394:	4770      	bx	lr
 8012396:	bf00      	nop
 8012398:	58000400 	.word	0x58000400

0801239c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 801239c:	b580      	push	{r7, lr}
 801239e:	b086      	sub	sp, #24
 80123a0:	af02      	add	r7, sp, #8
 80123a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80123a4:	f7fc fea4 	bl	800f0f0 <HAL_GetTick>
 80123a8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d101      	bne.n	80123b4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80123b0:	2301      	movs	r3, #1
 80123b2:	e063      	b.n	801247c <HAL_QSPI_Init+0xe0>
  assert_param(IS_QSPI_SSHIFT(hqspi->Init.SampleShifting));
  assert_param(IS_QSPI_FLASH_SIZE(hqspi->Init.FlashSize));
  assert_param(IS_QSPI_CS_HIGH_TIME(hqspi->Init.ChipSelectHighTime));
  assert_param(IS_QSPI_CLOCK_MODE(hqspi->Init.ClockMode));

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80123ba:	b2db      	uxtb	r3, r3
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d10b      	bne.n	80123d8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	2200      	movs	r2, #0
 80123c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80123c8:	6878      	ldr	r0, [r7, #4]
 80123ca:	f7f9 fadf 	bl	800b98c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80123ce:	f241 3188 	movw	r1, #5000	; 0x1388
 80123d2:	6878      	ldr	r0, [r7, #4]
 80123d4:	f000 fc8a 	bl	8012cec <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	689b      	ldr	r3, [r3, #8]
 80123e6:	3b01      	subs	r3, #1
 80123e8:	021a      	lsls	r2, r3, #8
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	430a      	orrs	r2, r1
 80123f0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123f6:	9300      	str	r3, [sp, #0]
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	2200      	movs	r2, #0
 80123fc:	2120      	movs	r1, #32
 80123fe:	6878      	ldr	r0, [r7, #4]
 8012400:	f000 fcb5 	bl	8012d6e <QSPI_WaitFlagStateUntilTimeout>
 8012404:	4603      	mov	r3, r0
 8012406:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8012408:	7afb      	ldrb	r3, [r7, #11]
 801240a:	2b00      	cmp	r3, #0
 801240c:	d131      	bne.n	8012472 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012418:	f023 0310 	bic.w	r3, r3, #16
 801241c:	687a      	ldr	r2, [r7, #4]
 801241e:	6852      	ldr	r2, [r2, #4]
 8012420:	0611      	lsls	r1, r2, #24
 8012422:	687a      	ldr	r2, [r7, #4]
 8012424:	68d2      	ldr	r2, [r2, #12]
 8012426:	4311      	orrs	r1, r2
 8012428:	687a      	ldr	r2, [r7, #4]
 801242a:	6812      	ldr	r2, [r2, #0]
 801242c:	430b      	orrs	r3, r1
 801242e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	685a      	ldr	r2, [r3, #4]
 8012436:	4b13      	ldr	r3, [pc, #76]	; (8012484 <HAL_QSPI_Init+0xe8>)
 8012438:	4013      	ands	r3, r2
 801243a:	687a      	ldr	r2, [r7, #4]
 801243c:	6912      	ldr	r2, [r2, #16]
 801243e:	0411      	lsls	r1, r2, #16
 8012440:	687a      	ldr	r2, [r7, #4]
 8012442:	6952      	ldr	r2, [r2, #20]
 8012444:	4311      	orrs	r1, r2
 8012446:	687a      	ldr	r2, [r7, #4]
 8012448:	6992      	ldr	r2, [r2, #24]
 801244a:	4311      	orrs	r1, r2
 801244c:	687a      	ldr	r2, [r7, #4]
 801244e:	6812      	ldr	r2, [r2, #0]
 8012450:	430b      	orrs	r3, r1
 8012452:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	681a      	ldr	r2, [r3, #0]
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	f042 0201 	orr.w	r2, r2, #1
 8012462:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	2200      	movs	r2, #0
 8012468:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	2201      	movs	r2, #1
 801246e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	2200      	movs	r2, #0
 8012476:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 801247a:	7afb      	ldrb	r3, [r7, #11]
}
 801247c:	4618      	mov	r0, r3
 801247e:	3710      	adds	r7, #16
 8012480:	46bd      	mov	sp, r7
 8012482:	bd80      	pop	{r7, pc}
 8012484:	ffe0f8fe 	.word	0xffe0f8fe

08012488 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8012488:	b580      	push	{r7, lr}
 801248a:	b082      	sub	sp, #8
 801248c:	af00      	add	r7, sp, #0
 801248e:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d101      	bne.n	801249a <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8012496:	2301      	movs	r3, #1
 8012498:	e016      	b.n	80124c8 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	681a      	ldr	r2, [r3, #0]
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	f022 0201 	bic.w	r2, r2, #1
 80124a8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 80124aa:	6878      	ldr	r0, [r7, #4]
 80124ac:	f7f9 fad0 	bl	800ba50 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	2200      	movs	r2, #0
 80124b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	2200      	movs	r2, #0
 80124ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	2200      	movs	r2, #0
 80124c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80124c6:	2300      	movs	r3, #0
}
 80124c8:	4618      	mov	r0, r3
 80124ca:	3708      	adds	r7, #8
 80124cc:	46bd      	mov	sp, r7
 80124ce:	bd80      	pop	{r7, pc}

080124d0 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 80124d0:	b580      	push	{r7, lr}
 80124d2:	b086      	sub	sp, #24
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	689b      	ldr	r3, [r3, #8]
 80124de:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 80124e8:	697b      	ldr	r3, [r7, #20]
 80124ea:	f003 0304 	and.w	r3, r3, #4
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d064      	beq.n	80125bc <HAL_QSPI_IRQHandler+0xec>
 80124f2:	693b      	ldr	r3, [r7, #16]
 80124f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d05f      	beq.n	80125bc <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	3320      	adds	r3, #32
 8012502:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801250a:	b2db      	uxtb	r3, r3
 801250c:	2b12      	cmp	r3, #18
 801250e:	d125      	bne.n	801255c <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8012510:	e01c      	b.n	801254c <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012516:	2b00      	cmp	r3, #0
 8012518:	d00f      	beq.n	801253a <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	69db      	ldr	r3, [r3, #28]
 801251e:	781a      	ldrb	r2, [r3, #0]
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	69db      	ldr	r3, [r3, #28]
 8012528:	1c5a      	adds	r2, r3, #1
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	61da      	str	r2, [r3, #28]
          hqspi->TxXferCount--;
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012532:	1e5a      	subs	r2, r3, #1
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	625a      	str	r2, [r3, #36]	; 0x24
 8012538:	e008      	b.n	801254c <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	681a      	ldr	r2, [r3, #0]
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8012548:	601a      	str	r2, [r3, #0]
          break;
 801254a:	e033      	b.n	80125b4 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	689b      	ldr	r3, [r3, #8]
 8012552:	f003 0304 	and.w	r3, r3, #4
 8012556:	2b00      	cmp	r3, #0
 8012558:	d1db      	bne.n	8012512 <HAL_QSPI_IRQHandler+0x42>
 801255a:	e02b      	b.n	80125b4 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012562:	b2db      	uxtb	r3, r3
 8012564:	2b22      	cmp	r3, #34	; 0x22
 8012566:	d125      	bne.n	80125b4 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8012568:	e01d      	b.n	80125a6 <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801256e:	2b00      	cmp	r3, #0
 8012570:	d010      	beq.n	8012594 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012576:	68fa      	ldr	r2, [r7, #12]
 8012578:	7812      	ldrb	r2, [r2, #0]
 801257a:	b2d2      	uxtb	r2, r2
 801257c:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012582:	1c5a      	adds	r2, r3, #1
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	629a      	str	r2, [r3, #40]	; 0x28
          hqspi->RxXferCount--;
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801258c:	1e5a      	subs	r2, r3, #1
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	631a      	str	r2, [r3, #48]	; 0x30
 8012592:	e008      	b.n	80125a6 <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	681a      	ldr	r2, [r3, #0]
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80125a2:	601a      	str	r2, [r3, #0]
          break;
 80125a4:	e006      	b.n	80125b4 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	689b      	ldr	r3, [r3, #8]
 80125ac:	f003 0304 	and.w	r3, r3, #4
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d1da      	bne.n	801256a <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 80125b4:	6878      	ldr	r0, [r7, #4]
 80125b6:	f000 fb7b 	bl	8012cb0 <HAL_QSPI_FifoThresholdCallback>
 80125ba:	e13c      	b.n	8012836 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 80125bc:	697b      	ldr	r3, [r7, #20]
 80125be:	f003 0302 	and.w	r3, r3, #2
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	f000 80b0 	beq.w	8012728 <HAL_QSPI_IRQHandler+0x258>
 80125c8:	693b      	ldr	r3, [r7, #16]
 80125ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	f000 80aa 	beq.w	8012728 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	2202      	movs	r2, #2
 80125da:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	681a      	ldr	r2, [r3, #0]
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80125ea:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80125f2:	b2db      	uxtb	r3, r3
 80125f4:	2b12      	cmp	r3, #18
 80125f6:	d120      	bne.n	801263a <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	f003 0304 	and.w	r3, r3, #4
 8012602:	2b00      	cmp	r3, #0
 8012604:	d011      	beq.n	801262a <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	681a      	ldr	r2, [r3, #0]
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	f022 0204 	bic.w	r2, r2, #4
 8012614:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	681a      	ldr	r2, [r3, #0]
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	f022 0201 	bic.w	r2, r2, #1
 8012628:	601a      	str	r2, [r3, #0]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	2201      	movs	r2, #1
 801262e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 8012632:	6878      	ldr	r0, [r7, #4]
 8012634:	f000 fb32 	bl	8012c9c <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8012638:	e0fa      	b.n	8012830 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012640:	b2db      	uxtb	r3, r3
 8012642:	2b22      	cmp	r3, #34	; 0x22
 8012644:	d143      	bne.n	80126ce <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	f003 0304 	and.w	r3, r3, #4
 8012650:	2b00      	cmp	r3, #0
 8012652:	d012      	beq.n	801267a <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	681a      	ldr	r2, [r3, #0]
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	f022 0204 	bic.w	r2, r2, #4
 8012662:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	681a      	ldr	r2, [r3, #0]
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	f022 0201 	bic.w	r2, r2, #1
 8012676:	601a      	str	r2, [r3, #0]
 8012678:	e021      	b.n	80126be <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	3320      	adds	r3, #32
 8012680:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8012682:	e013      	b.n	80126ac <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012688:	2b00      	cmp	r3, #0
 801268a:	d017      	beq.n	80126bc <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012690:	68fa      	ldr	r2, [r7, #12]
 8012692:	7812      	ldrb	r2, [r2, #0]
 8012694:	b2d2      	uxtb	r2, r2
 8012696:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801269c:	1c5a      	adds	r2, r3, #1
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	629a      	str	r2, [r3, #40]	; 0x28
            hqspi->RxXferCount--;
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126a6:	1e5a      	subs	r2, r3, #1
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	631a      	str	r2, [r3, #48]	; 0x30
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	689b      	ldr	r3, [r3, #8]
 80126b2:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d1e4      	bne.n	8012684 <HAL_QSPI_IRQHandler+0x1b4>
 80126ba:	e000      	b.n	80126be <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 80126bc:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	2201      	movs	r2, #1
 80126c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 80126c6:	6878      	ldr	r0, [r7, #4]
 80126c8:	f000 fade 	bl	8012c88 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80126cc:	e0b0      	b.n	8012830 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80126d4:	b2db      	uxtb	r3, r3
 80126d6:	2b02      	cmp	r3, #2
 80126d8:	d107      	bne.n	80126ea <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	2201      	movs	r2, #1
 80126de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 80126e2:	6878      	ldr	r0, [r7, #4]
 80126e4:	f000 fac6 	bl	8012c74 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80126e8:	e0a2      	b.n	8012830 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80126f0:	b2db      	uxtb	r3, r3
 80126f2:	2b08      	cmp	r3, #8
 80126f4:	f040 809c 	bne.w	8012830 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	695a      	ldr	r2, [r3, #20]
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8012706:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	2201      	movs	r2, #1
 801270c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012714:	2b00      	cmp	r3, #0
 8012716:	d103      	bne.n	8012720 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8012718:	6878      	ldr	r0, [r7, #4]
 801271a:	f000 faa1 	bl	8012c60 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 801271e:	e087      	b.n	8012830 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8012720:	6878      	ldr	r0, [r7, #4]
 8012722:	f000 fa93 	bl	8012c4c <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8012726:	e083      	b.n	8012830 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8012728:	697b      	ldr	r3, [r7, #20]
 801272a:	f003 0308 	and.w	r3, r3, #8
 801272e:	2b00      	cmp	r3, #0
 8012730:	d01f      	beq.n	8012772 <HAL_QSPI_IRQHandler+0x2a2>
 8012732:	693b      	ldr	r3, [r7, #16]
 8012734:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8012738:	2b00      	cmp	r3, #0
 801273a:	d01a      	beq.n	8012772 <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	2208      	movs	r2, #8
 8012742:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801274e:	2b00      	cmp	r3, #0
 8012750:	d00b      	beq.n	801276a <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	681a      	ldr	r2, [r3, #0]
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8012760:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	2201      	movs	r2, #1
 8012766:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 801276a:	6878      	ldr	r0, [r7, #4]
 801276c:	f000 faaa 	bl	8012cc4 <HAL_QSPI_StatusMatchCallback>
 8012770:	e061      	b.n	8012836 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 8012772:	697b      	ldr	r3, [r7, #20]
 8012774:	f003 0301 	and.w	r3, r3, #1
 8012778:	2b00      	cmp	r3, #0
 801277a:	d047      	beq.n	801280c <HAL_QSPI_IRQHandler+0x33c>
 801277c:	693b      	ldr	r3, [r7, #16]
 801277e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012782:	2b00      	cmp	r3, #0
 8012784:	d042      	beq.n	801280c <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	2201      	movs	r2, #1
 801278c:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	681a      	ldr	r2, [r3, #0]
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 801279c:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80127a2:	f043 0202 	orr.w	r2, r3, #2
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	63da      	str	r2, [r3, #60]	; 0x3c

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	f003 0304 	and.w	r3, r3, #4
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d021      	beq.n	80127fc <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	681a      	ldr	r2, [r3, #0]
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	f022 0204 	bic.w	r2, r2, #4
 80127c6:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127cc:	4a1c      	ldr	r2, [pc, #112]	; (8012840 <HAL_QSPI_IRQHandler+0x370>)
 80127ce:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127d4:	4618      	mov	r0, r3
 80127d6:	f7fe faaf 	bl	8010d38 <HAL_DMA_Abort_IT>
 80127da:	4603      	mov	r3, r0
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d029      	beq.n	8012834 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80127e4:	f043 0204 	orr.w	r2, r3, #4
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	2201      	movs	r2, #1
 80127f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 80127f4:	6878      	ldr	r0, [r7, #4]
 80127f6:	f000 fa29 	bl	8012c4c <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80127fa:	e01b      	b.n	8012834 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	2201      	movs	r2, #1
 8012800:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 8012804:	6878      	ldr	r0, [r7, #4]
 8012806:	f000 fa21 	bl	8012c4c <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 801280a:	e013      	b.n	8012834 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 801280c:	697b      	ldr	r3, [r7, #20]
 801280e:	f003 0310 	and.w	r3, r3, #16
 8012812:	2b00      	cmp	r3, #0
 8012814:	d00f      	beq.n	8012836 <HAL_QSPI_IRQHandler+0x366>
 8012816:	693b      	ldr	r3, [r7, #16]
 8012818:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801281c:	2b00      	cmp	r3, #0
 801281e:	d00a      	beq.n	8012836 <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	2210      	movs	r2, #16
 8012826:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8012828:	6878      	ldr	r0, [r7, #4]
 801282a:	f000 fa55 	bl	8012cd8 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 801282e:	e002      	b.n	8012836 <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8012830:	bf00      	nop
 8012832:	e000      	b.n	8012836 <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8012834:	bf00      	nop
}
 8012836:	bf00      	nop
 8012838:	3718      	adds	r7, #24
 801283a:	46bd      	mov	sp, r7
 801283c:	bd80      	pop	{r7, pc}
 801283e:	bf00      	nop
 8012840:	08012d09 	.word	0x08012d09

08012844 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8012844:	b580      	push	{r7, lr}
 8012846:	b088      	sub	sp, #32
 8012848:	af02      	add	r7, sp, #8
 801284a:	60f8      	str	r0, [r7, #12]
 801284c:	60b9      	str	r1, [r7, #8]
 801284e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8012850:	f7fc fc4e 	bl	800f0f0 <HAL_GetTick>
 8012854:	6138      	str	r0, [r7, #16]

  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801285c:	b2db      	uxtb	r3, r3
 801285e:	2b01      	cmp	r3, #1
 8012860:	d101      	bne.n	8012866 <HAL_QSPI_Command+0x22>
 8012862:	2302      	movs	r3, #2
 8012864:	e048      	b.n	80128f8 <HAL_QSPI_Command+0xb4>
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	2201      	movs	r2, #1
 801286a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012874:	b2db      	uxtb	r3, r3
 8012876:	2b01      	cmp	r3, #1
 8012878:	d137      	bne.n	80128ea <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	2200      	movs	r2, #0
 801287e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	2202      	movs	r2, #2
 8012884:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	9300      	str	r3, [sp, #0]
 801288c:	693b      	ldr	r3, [r7, #16]
 801288e:	2200      	movs	r2, #0
 8012890:	2120      	movs	r1, #32
 8012892:	68f8      	ldr	r0, [r7, #12]
 8012894:	f000 fa6b 	bl	8012d6e <QSPI_WaitFlagStateUntilTimeout>
 8012898:	4603      	mov	r3, r0
 801289a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 801289c:	7dfb      	ldrb	r3, [r7, #23]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d125      	bne.n	80128ee <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80128a2:	2200      	movs	r2, #0
 80128a4:	68b9      	ldr	r1, [r7, #8]
 80128a6:	68f8      	ldr	r0, [r7, #12]
 80128a8:	f000 fa98 	bl	8012ddc <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 80128ac:	68bb      	ldr	r3, [r7, #8]
 80128ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d115      	bne.n	80128e0 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	9300      	str	r3, [sp, #0]
 80128b8:	693b      	ldr	r3, [r7, #16]
 80128ba:	2201      	movs	r2, #1
 80128bc:	2102      	movs	r1, #2
 80128be:	68f8      	ldr	r0, [r7, #12]
 80128c0:	f000 fa55 	bl	8012d6e <QSPI_WaitFlagStateUntilTimeout>
 80128c4:	4603      	mov	r3, r0
 80128c6:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80128c8:	7dfb      	ldrb	r3, [r7, #23]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d10f      	bne.n	80128ee <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	2202      	movs	r2, #2
 80128d4:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	2201      	movs	r2, #1
 80128da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80128de:	e006      	b.n	80128ee <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	2201      	movs	r2, #1
 80128e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80128e8:	e001      	b.n	80128ee <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80128ea:	2302      	movs	r3, #2
 80128ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	2200      	movs	r2, #0
 80128f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80128f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80128f8:	4618      	mov	r0, r3
 80128fa:	3718      	adds	r7, #24
 80128fc:	46bd      	mov	sp, r7
 80128fe:	bd80      	pop	{r7, pc}

08012900 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8012900:	b580      	push	{r7, lr}
 8012902:	b08a      	sub	sp, #40	; 0x28
 8012904:	af02      	add	r7, sp, #8
 8012906:	60f8      	str	r0, [r7, #12]
 8012908:	60b9      	str	r1, [r7, #8]
 801290a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801290c:	2300      	movs	r3, #0
 801290e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8012910:	f7fc fbee 	bl	800f0f0 <HAL_GetTick>
 8012914:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	3320      	adds	r3, #32
 801291c:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012924:	b2db      	uxtb	r3, r3
 8012926:	2b01      	cmp	r3, #1
 8012928:	d101      	bne.n	801292e <HAL_QSPI_Transmit+0x2e>
 801292a:	2302      	movs	r3, #2
 801292c:	e076      	b.n	8012a1c <HAL_QSPI_Transmit+0x11c>
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	2201      	movs	r2, #1
 8012932:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801293c:	b2db      	uxtb	r3, r3
 801293e:	2b01      	cmp	r3, #1
 8012940:	d165      	bne.n	8012a0e <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	2200      	movs	r2, #0
 8012946:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8012948:	68bb      	ldr	r3, [r7, #8]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d056      	beq.n	80129fc <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	2212      	movs	r2, #18
 8012952:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	691b      	ldr	r3, [r3, #16]
 801295c:	1c5a      	adds	r2, r3, #1
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	691b      	ldr	r3, [r3, #16]
 8012968:	1c5a      	adds	r2, r3, #1
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	68ba      	ldr	r2, [r7, #8]
 8012972:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	695a      	ldr	r2, [r3, #20]
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8012982:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8012984:	e01b      	b.n	80129be <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	9300      	str	r3, [sp, #0]
 801298a:	69bb      	ldr	r3, [r7, #24]
 801298c:	2201      	movs	r2, #1
 801298e:	2104      	movs	r1, #4
 8012990:	68f8      	ldr	r0, [r7, #12]
 8012992:	f000 f9ec 	bl	8012d6e <QSPI_WaitFlagStateUntilTimeout>
 8012996:	4603      	mov	r3, r0
 8012998:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 801299a:	7ffb      	ldrb	r3, [r7, #31]
 801299c:	2b00      	cmp	r3, #0
 801299e:	d113      	bne.n	80129c8 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	69db      	ldr	r3, [r3, #28]
 80129a4:	781a      	ldrb	r2, [r3, #0]
 80129a6:	697b      	ldr	r3, [r7, #20]
 80129a8:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	69db      	ldr	r3, [r3, #28]
 80129ae:	1c5a      	adds	r2, r3, #1
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129b8:	1e5a      	subs	r2, r3, #1
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d1df      	bne.n	8012986 <HAL_QSPI_Transmit+0x86>
 80129c6:	e000      	b.n	80129ca <HAL_QSPI_Transmit+0xca>
          break;
 80129c8:	bf00      	nop
      }

      if (status == HAL_OK)
 80129ca:	7ffb      	ldrb	r3, [r7, #31]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d110      	bne.n	80129f2 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	9300      	str	r3, [sp, #0]
 80129d4:	69bb      	ldr	r3, [r7, #24]
 80129d6:	2201      	movs	r2, #1
 80129d8:	2102      	movs	r1, #2
 80129da:	68f8      	ldr	r0, [r7, #12]
 80129dc:	f000 f9c7 	bl	8012d6e <QSPI_WaitFlagStateUntilTimeout>
 80129e0:	4603      	mov	r3, r0
 80129e2:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80129e4:	7ffb      	ldrb	r3, [r7, #31]
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d103      	bne.n	80129f2 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	2202      	movs	r2, #2
 80129f0:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	2201      	movs	r2, #1
 80129f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80129fa:	e00a      	b.n	8012a12 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a00:	f043 0208 	orr.w	r2, r3, #8
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8012a08:	2301      	movs	r3, #1
 8012a0a:	77fb      	strb	r3, [r7, #31]
 8012a0c:	e001      	b.n	8012a12 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8012a0e:	2302      	movs	r3, #2
 8012a10:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	2200      	movs	r2, #0
 8012a16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8012a1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	3720      	adds	r7, #32
 8012a20:	46bd      	mov	sp, r7
 8012a22:	bd80      	pop	{r7, pc}

08012a24 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8012a24:	b580      	push	{r7, lr}
 8012a26:	b08a      	sub	sp, #40	; 0x28
 8012a28:	af02      	add	r7, sp, #8
 8012a2a:	60f8      	str	r0, [r7, #12]
 8012a2c:	60b9      	str	r1, [r7, #8]
 8012a2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012a30:	2300      	movs	r3, #0
 8012a32:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8012a34:	f7fc fb5c 	bl	800f0f0 <HAL_GetTick>
 8012a38:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	699b      	ldr	r3, [r3, #24]
 8012a40:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	3320      	adds	r3, #32
 8012a48:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012a50:	b2db      	uxtb	r3, r3
 8012a52:	2b01      	cmp	r3, #1
 8012a54:	d101      	bne.n	8012a5a <HAL_QSPI_Receive+0x36>
 8012a56:	2302      	movs	r3, #2
 8012a58:	e07d      	b.n	8012b56 <HAL_QSPI_Receive+0x132>
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	2201      	movs	r2, #1
 8012a5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012a68:	b2db      	uxtb	r3, r3
 8012a6a:	2b01      	cmp	r3, #1
 8012a6c:	d16c      	bne.n	8012b48 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	2200      	movs	r2, #0
 8012a72:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8012a74:	68bb      	ldr	r3, [r7, #8]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d05d      	beq.n	8012b36 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	2222      	movs	r2, #34	; 0x22
 8012a7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	691b      	ldr	r3, [r3, #16]
 8012a88:	1c5a      	adds	r2, r3, #1
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	691b      	ldr	r3, [r3, #16]
 8012a94:	1c5a      	adds	r2, r3, #1
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	68ba      	ldr	r2, [r7, #8]
 8012a9e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	695b      	ldr	r3, [r3, #20]
 8012aa6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8012ab2:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	697a      	ldr	r2, [r7, #20]
 8012aba:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8012abc:	e01c      	b.n	8012af8 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	9300      	str	r3, [sp, #0]
 8012ac2:	69bb      	ldr	r3, [r7, #24]
 8012ac4:	2201      	movs	r2, #1
 8012ac6:	2106      	movs	r1, #6
 8012ac8:	68f8      	ldr	r0, [r7, #12]
 8012aca:	f000 f950 	bl	8012d6e <QSPI_WaitFlagStateUntilTimeout>
 8012ace:	4603      	mov	r3, r0
 8012ad0:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8012ad2:	7ffb      	ldrb	r3, [r7, #31]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d114      	bne.n	8012b02 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012adc:	693a      	ldr	r2, [r7, #16]
 8012ade:	7812      	ldrb	r2, [r2, #0]
 8012ae0:	b2d2      	uxtb	r2, r2
 8012ae2:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ae8:	1c5a      	adds	r2, r3, #1
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012af2:	1e5a      	subs	r2, r3, #1
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d1de      	bne.n	8012abe <HAL_QSPI_Receive+0x9a>
 8012b00:	e000      	b.n	8012b04 <HAL_QSPI_Receive+0xe0>
          break;
 8012b02:	bf00      	nop
      }

      if (status == HAL_OK)
 8012b04:	7ffb      	ldrb	r3, [r7, #31]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d110      	bne.n	8012b2c <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	9300      	str	r3, [sp, #0]
 8012b0e:	69bb      	ldr	r3, [r7, #24]
 8012b10:	2201      	movs	r2, #1
 8012b12:	2102      	movs	r1, #2
 8012b14:	68f8      	ldr	r0, [r7, #12]
 8012b16:	f000 f92a 	bl	8012d6e <QSPI_WaitFlagStateUntilTimeout>
 8012b1a:	4603      	mov	r3, r0
 8012b1c:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8012b1e:	7ffb      	ldrb	r3, [r7, #31]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d103      	bne.n	8012b2c <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	2202      	movs	r2, #2
 8012b2a:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	2201      	movs	r2, #1
 8012b30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8012b34:	e00a      	b.n	8012b4c <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b3a:	f043 0208 	orr.w	r2, r3, #8
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8012b42:	2301      	movs	r3, #1
 8012b44:	77fb      	strb	r3, [r7, #31]
 8012b46:	e001      	b.n	8012b4c <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8012b48:	2302      	movs	r3, #2
 8012b4a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	2200      	movs	r2, #0
 8012b50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8012b54:	7ffb      	ldrb	r3, [r7, #31]
}
 8012b56:	4618      	mov	r0, r3
 8012b58:	3720      	adds	r7, #32
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	bd80      	pop	{r7, pc}

08012b5e <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8012b5e:	b580      	push	{r7, lr}
 8012b60:	b088      	sub	sp, #32
 8012b62:	af02      	add	r7, sp, #8
 8012b64:	60f8      	str	r0, [r7, #12]
 8012b66:	60b9      	str	r1, [r7, #8]
 8012b68:	607a      	str	r2, [r7, #4]
 8012b6a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8012b6c:	f7fc fac0 	bl	800f0f0 <HAL_GetTick>
 8012b70:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012b78:	b2db      	uxtb	r3, r3
 8012b7a:	2b01      	cmp	r3, #1
 8012b7c:	d101      	bne.n	8012b82 <HAL_QSPI_AutoPolling+0x24>
 8012b7e:	2302      	movs	r3, #2
 8012b80:	e060      	b.n	8012c44 <HAL_QSPI_AutoPolling+0xe6>
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	2201      	movs	r2, #1
 8012b86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8012b8a:	68fb      	ldr	r3, [r7, #12]
 8012b8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012b90:	b2db      	uxtb	r3, r3
 8012b92:	2b01      	cmp	r3, #1
 8012b94:	d14f      	bne.n	8012c36 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	2200      	movs	r2, #0
 8012b9a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	2242      	movs	r2, #66	; 0x42
 8012ba0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8012ba4:	683b      	ldr	r3, [r7, #0]
 8012ba6:	9300      	str	r3, [sp, #0]
 8012ba8:	693b      	ldr	r3, [r7, #16]
 8012baa:	2200      	movs	r2, #0
 8012bac:	2120      	movs	r1, #32
 8012bae:	68f8      	ldr	r0, [r7, #12]
 8012bb0:	f000 f8dd 	bl	8012d6e <QSPI_WaitFlagStateUntilTimeout>
 8012bb4:	4603      	mov	r3, r0
 8012bb6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8012bb8:	7dfb      	ldrb	r3, [r7, #23]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d13d      	bne.n	8012c3a <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	687a      	ldr	r2, [r7, #4]
 8012bc4:	6812      	ldr	r2, [r2, #0]
 8012bc6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	687a      	ldr	r2, [r7, #4]
 8012bce:	6852      	ldr	r2, [r2, #4]
 8012bd0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	687a      	ldr	r2, [r7, #4]
 8012bd8:	6892      	ldr	r2, [r2, #8]
 8012bda:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	691b      	ldr	r3, [r3, #16]
 8012bea:	431a      	orrs	r2, r3
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8012bf4:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	68da      	ldr	r2, [r3, #12]
 8012bfa:	68bb      	ldr	r3, [r7, #8]
 8012bfc:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8012bfe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8012c02:	68b9      	ldr	r1, [r7, #8]
 8012c04:	68f8      	ldr	r0, [r7, #12]
 8012c06:	f000 f8e9 	bl	8012ddc <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8012c0a:	683b      	ldr	r3, [r7, #0]
 8012c0c:	9300      	str	r3, [sp, #0]
 8012c0e:	693b      	ldr	r3, [r7, #16]
 8012c10:	2201      	movs	r2, #1
 8012c12:	2108      	movs	r1, #8
 8012c14:	68f8      	ldr	r0, [r7, #12]
 8012c16:	f000 f8aa 	bl	8012d6e <QSPI_WaitFlagStateUntilTimeout>
 8012c1a:	4603      	mov	r3, r0
 8012c1c:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8012c1e:	7dfb      	ldrb	r3, [r7, #23]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d10a      	bne.n	8012c3a <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	2208      	movs	r2, #8
 8012c2a:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	2201      	movs	r2, #1
 8012c30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8012c34:	e001      	b.n	8012c3a <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8012c36:	2302      	movs	r3, #2
 8012c38:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	2200      	movs	r2, #0
 8012c3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8012c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c44:	4618      	mov	r0, r3
 8012c46:	3718      	adds	r7, #24
 8012c48:	46bd      	mov	sp, r7
 8012c4a:	bd80      	pop	{r7, pc}

08012c4c <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8012c4c:	b480      	push	{r7}
 8012c4e:	b083      	sub	sp, #12
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 8012c54:	bf00      	nop
 8012c56:	370c      	adds	r7, #12
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c5e:	4770      	bx	lr

08012c60 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8012c60:	b480      	push	{r7}
 8012c62:	b083      	sub	sp, #12
 8012c64:	af00      	add	r7, sp, #0
 8012c66:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8012c68:	bf00      	nop
 8012c6a:	370c      	adds	r7, #12
 8012c6c:	46bd      	mov	sp, r7
 8012c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c72:	4770      	bx	lr

08012c74 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8012c74:	b480      	push	{r7}
 8012c76:	b083      	sub	sp, #12
 8012c78:	af00      	add	r7, sp, #0
 8012c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8012c7c:	bf00      	nop
 8012c7e:	370c      	adds	r7, #12
 8012c80:	46bd      	mov	sp, r7
 8012c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c86:	4770      	bx	lr

08012c88 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8012c88:	b480      	push	{r7}
 8012c8a:	b083      	sub	sp, #12
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 8012c90:	bf00      	nop
 8012c92:	370c      	adds	r7, #12
 8012c94:	46bd      	mov	sp, r7
 8012c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c9a:	4770      	bx	lr

08012c9c <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8012c9c:	b480      	push	{r7}
 8012c9e:	b083      	sub	sp, #12
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 8012ca4:	bf00      	nop
 8012ca6:	370c      	adds	r7, #12
 8012ca8:	46bd      	mov	sp, r7
 8012caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cae:	4770      	bx	lr

08012cb0 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 8012cb0:	b480      	push	{r7}
 8012cb2:	b083      	sub	sp, #12
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8012cb8:	bf00      	nop
 8012cba:	370c      	adds	r7, #12
 8012cbc:	46bd      	mov	sp, r7
 8012cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc2:	4770      	bx	lr

08012cc4 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8012cc4:	b480      	push	{r7}
 8012cc6:	b083      	sub	sp, #12
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8012ccc:	bf00      	nop
 8012cce:	370c      	adds	r7, #12
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd6:	4770      	bx	lr

08012cd8 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8012cd8:	b480      	push	{r7}
 8012cda:	b083      	sub	sp, #12
 8012cdc:	af00      	add	r7, sp, #0
 8012cde:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 8012ce0:	bf00      	nop
 8012ce2:	370c      	adds	r7, #12
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cea:	4770      	bx	lr

08012cec <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8012cec:	b480      	push	{r7}
 8012cee:	b083      	sub	sp, #12
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]
 8012cf4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	683a      	ldr	r2, [r7, #0]
 8012cfa:	641a      	str	r2, [r3, #64]	; 0x40
}
 8012cfc:	bf00      	nop
 8012cfe:	370c      	adds	r7, #12
 8012d00:	46bd      	mov	sp, r7
 8012d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d06:	4770      	bx	lr

08012d08 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 8012d08:	b580      	push	{r7, lr}
 8012d0a:	b084      	sub	sp, #16
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d14:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	2200      	movs	r2, #0
 8012d1a:	631a      	str	r2, [r3, #48]	; 0x30
  hqspi->TxXferCount = 0U;
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	2200      	movs	r2, #0
 8012d20:	625a      	str	r2, [r3, #36]	; 0x24

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012d28:	b2db      	uxtb	r3, r3
 8012d2a:	2b08      	cmp	r3, #8
 8012d2c:	d114      	bne.n	8012d58 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	2202      	movs	r2, #2
 8012d34:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	681a      	ldr	r2, [r3, #0]
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8012d44:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	681a      	ldr	r2, [r3, #0]
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	f042 0202 	orr.w	r2, r2, #2
 8012d54:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 8012d56:	e006      	b.n	8012d66 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	2201      	movs	r2, #1
 8012d5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    HAL_QSPI_ErrorCallback(hqspi);
 8012d60:	68f8      	ldr	r0, [r7, #12]
 8012d62:	f7ff ff73 	bl	8012c4c <HAL_QSPI_ErrorCallback>
}
 8012d66:	bf00      	nop
 8012d68:	3710      	adds	r7, #16
 8012d6a:	46bd      	mov	sp, r7
 8012d6c:	bd80      	pop	{r7, pc}

08012d6e <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8012d6e:	b580      	push	{r7, lr}
 8012d70:	b084      	sub	sp, #16
 8012d72:	af00      	add	r7, sp, #0
 8012d74:	60f8      	str	r0, [r7, #12]
 8012d76:	60b9      	str	r1, [r7, #8]
 8012d78:	603b      	str	r3, [r7, #0]
 8012d7a:	4613      	mov	r3, r2
 8012d7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8012d7e:	e01a      	b.n	8012db6 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012d80:	69bb      	ldr	r3, [r7, #24]
 8012d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d86:	d016      	beq.n	8012db6 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012d88:	f7fc f9b2 	bl	800f0f0 <HAL_GetTick>
 8012d8c:	4602      	mov	r2, r0
 8012d8e:	683b      	ldr	r3, [r7, #0]
 8012d90:	1ad3      	subs	r3, r2, r3
 8012d92:	69ba      	ldr	r2, [r7, #24]
 8012d94:	429a      	cmp	r2, r3
 8012d96:	d302      	bcc.n	8012d9e <QSPI_WaitFlagStateUntilTimeout+0x30>
 8012d98:	69bb      	ldr	r3, [r7, #24]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d10b      	bne.n	8012db6 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	2204      	movs	r2, #4
 8012da2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012daa:	f043 0201 	orr.w	r2, r3, #1
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8012db2:	2301      	movs	r3, #1
 8012db4:	e00e      	b.n	8012dd4 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	689a      	ldr	r2, [r3, #8]
 8012dbc:	68bb      	ldr	r3, [r7, #8]
 8012dbe:	4013      	ands	r3, r2
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	bf14      	ite	ne
 8012dc4:	2301      	movne	r3, #1
 8012dc6:	2300      	moveq	r3, #0
 8012dc8:	b2db      	uxtb	r3, r3
 8012dca:	461a      	mov	r2, r3
 8012dcc:	79fb      	ldrb	r3, [r7, #7]
 8012dce:	429a      	cmp	r2, r3
 8012dd0:	d1d6      	bne.n	8012d80 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8012dd2:	2300      	movs	r3, #0
}
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	3710      	adds	r7, #16
 8012dd8:	46bd      	mov	sp, r7
 8012dda:	bd80      	pop	{r7, pc}

08012ddc <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8012ddc:	b480      	push	{r7}
 8012dde:	b085      	sub	sp, #20
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	60f8      	str	r0, [r7, #12]
 8012de4:	60b9      	str	r1, [r7, #8]
 8012de6:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8012de8:	68bb      	ldr	r3, [r7, #8]
 8012dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d009      	beq.n	8012e04 <QSPI_Config+0x28>
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8012df6:	d005      	beq.n	8012e04 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8012df8:	68bb      	ldr	r3, [r7, #8]
 8012dfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	3a01      	subs	r2, #1
 8012e02:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8012e04:	68bb      	ldr	r3, [r7, #8]
 8012e06:	699b      	ldr	r3, [r3, #24]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	f000 80ad 	beq.w	8012f68 <QSPI_Config+0x18c>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8012e0e:	68bb      	ldr	r3, [r7, #8]
 8012e10:	6a1b      	ldr	r3, [r3, #32]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d059      	beq.n	8012eca <QSPI_Config+0xee>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	68ba      	ldr	r2, [r7, #8]
 8012e1c:	6892      	ldr	r2, [r2, #8]
 8012e1e:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8012e20:	68bb      	ldr	r3, [r7, #8]
 8012e22:	69db      	ldr	r3, [r3, #28]
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d02e      	beq.n	8012e86 <QSPI_Config+0xaa>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 8012e28:	68bb      	ldr	r3, [r7, #8]
 8012e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e2c:	68bb      	ldr	r3, [r7, #8]
 8012e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e30:	431a      	orrs	r2, r3
 8012e32:	68bb      	ldr	r3, [r7, #8]
 8012e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e36:	431a      	orrs	r2, r3
 8012e38:	68bb      	ldr	r3, [r7, #8]
 8012e3a:	695b      	ldr	r3, [r3, #20]
 8012e3c:	049b      	lsls	r3, r3, #18
 8012e3e:	431a      	orrs	r2, r3
 8012e40:	68bb      	ldr	r3, [r7, #8]
 8012e42:	691b      	ldr	r3, [r3, #16]
 8012e44:	431a      	orrs	r2, r3
 8012e46:	68bb      	ldr	r3, [r7, #8]
 8012e48:	6a1b      	ldr	r3, [r3, #32]
 8012e4a:	431a      	orrs	r2, r3
 8012e4c:	68bb      	ldr	r3, [r7, #8]
 8012e4e:	68db      	ldr	r3, [r3, #12]
 8012e50:	431a      	orrs	r2, r3
 8012e52:	68bb      	ldr	r3, [r7, #8]
 8012e54:	69db      	ldr	r3, [r3, #28]
 8012e56:	431a      	orrs	r2, r3
 8012e58:	68bb      	ldr	r3, [r7, #8]
 8012e5a:	699b      	ldr	r3, [r3, #24]
 8012e5c:	431a      	orrs	r2, r3
 8012e5e:	68bb      	ldr	r3, [r7, #8]
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	ea42 0103 	orr.w	r1, r2, r3
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	687a      	ldr	r2, [r7, #4]
 8012e6c:	430a      	orrs	r2, r1
 8012e6e:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8012e76:	f000 8119 	beq.w	80130ac <QSPI_Config+0x2d0>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	68ba      	ldr	r2, [r7, #8]
 8012e80:	6852      	ldr	r2, [r2, #4]
 8012e82:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8012e84:	e112      	b.n	80130ac <QSPI_Config+0x2d0>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 8012e86:	68bb      	ldr	r3, [r7, #8]
 8012e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e8a:	68bb      	ldr	r3, [r7, #8]
 8012e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e8e:	431a      	orrs	r2, r3
 8012e90:	68bb      	ldr	r3, [r7, #8]
 8012e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e94:	431a      	orrs	r2, r3
 8012e96:	68bb      	ldr	r3, [r7, #8]
 8012e98:	695b      	ldr	r3, [r3, #20]
 8012e9a:	049b      	lsls	r3, r3, #18
 8012e9c:	431a      	orrs	r2, r3
 8012e9e:	68bb      	ldr	r3, [r7, #8]
 8012ea0:	691b      	ldr	r3, [r3, #16]
 8012ea2:	431a      	orrs	r2, r3
 8012ea4:	68bb      	ldr	r3, [r7, #8]
 8012ea6:	6a1b      	ldr	r3, [r3, #32]
 8012ea8:	431a      	orrs	r2, r3
 8012eaa:	68bb      	ldr	r3, [r7, #8]
 8012eac:	69db      	ldr	r3, [r3, #28]
 8012eae:	431a      	orrs	r2, r3
 8012eb0:	68bb      	ldr	r3, [r7, #8]
 8012eb2:	699b      	ldr	r3, [r3, #24]
 8012eb4:	431a      	orrs	r2, r3
 8012eb6:	68bb      	ldr	r3, [r7, #8]
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	ea42 0103 	orr.w	r1, r2, r3
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	687a      	ldr	r2, [r7, #4]
 8012ec4:	430a      	orrs	r2, r1
 8012ec6:	615a      	str	r2, [r3, #20]
}
 8012ec8:	e0f0      	b.n	80130ac <QSPI_Config+0x2d0>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8012eca:	68bb      	ldr	r3, [r7, #8]
 8012ecc:	69db      	ldr	r3, [r3, #28]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d02b      	beq.n	8012f2a <QSPI_Config+0x14e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 8012ed2:	68bb      	ldr	r3, [r7, #8]
 8012ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ed6:	68bb      	ldr	r3, [r7, #8]
 8012ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012eda:	431a      	orrs	r2, r3
 8012edc:	68bb      	ldr	r3, [r7, #8]
 8012ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ee0:	431a      	orrs	r2, r3
 8012ee2:	68bb      	ldr	r3, [r7, #8]
 8012ee4:	695b      	ldr	r3, [r3, #20]
 8012ee6:	049b      	lsls	r3, r3, #18
 8012ee8:	431a      	orrs	r2, r3
 8012eea:	68bb      	ldr	r3, [r7, #8]
 8012eec:	6a1b      	ldr	r3, [r3, #32]
 8012eee:	431a      	orrs	r2, r3
 8012ef0:	68bb      	ldr	r3, [r7, #8]
 8012ef2:	68db      	ldr	r3, [r3, #12]
 8012ef4:	431a      	orrs	r2, r3
 8012ef6:	68bb      	ldr	r3, [r7, #8]
 8012ef8:	69db      	ldr	r3, [r3, #28]
 8012efa:	431a      	orrs	r2, r3
 8012efc:	68bb      	ldr	r3, [r7, #8]
 8012efe:	699b      	ldr	r3, [r3, #24]
 8012f00:	431a      	orrs	r2, r3
 8012f02:	68bb      	ldr	r3, [r7, #8]
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	ea42 0103 	orr.w	r1, r2, r3
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	687a      	ldr	r2, [r7, #4]
 8012f10:	430a      	orrs	r2, r1
 8012f12:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8012f1a:	f000 80c7 	beq.w	80130ac <QSPI_Config+0x2d0>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	68ba      	ldr	r2, [r7, #8]
 8012f24:	6852      	ldr	r2, [r2, #4]
 8012f26:	619a      	str	r2, [r3, #24]
}
 8012f28:	e0c0      	b.n	80130ac <QSPI_Config+0x2d0>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 8012f2a:	68bb      	ldr	r3, [r7, #8]
 8012f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f2e:	68bb      	ldr	r3, [r7, #8]
 8012f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f32:	431a      	orrs	r2, r3
 8012f34:	68bb      	ldr	r3, [r7, #8]
 8012f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f38:	431a      	orrs	r2, r3
 8012f3a:	68bb      	ldr	r3, [r7, #8]
 8012f3c:	695b      	ldr	r3, [r3, #20]
 8012f3e:	049b      	lsls	r3, r3, #18
 8012f40:	431a      	orrs	r2, r3
 8012f42:	68bb      	ldr	r3, [r7, #8]
 8012f44:	6a1b      	ldr	r3, [r3, #32]
 8012f46:	431a      	orrs	r2, r3
 8012f48:	68bb      	ldr	r3, [r7, #8]
 8012f4a:	69db      	ldr	r3, [r3, #28]
 8012f4c:	431a      	orrs	r2, r3
 8012f4e:	68bb      	ldr	r3, [r7, #8]
 8012f50:	699b      	ldr	r3, [r3, #24]
 8012f52:	431a      	orrs	r2, r3
 8012f54:	68bb      	ldr	r3, [r7, #8]
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	ea42 0103 	orr.w	r1, r2, r3
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	687a      	ldr	r2, [r7, #4]
 8012f62:	430a      	orrs	r2, r1
 8012f64:	615a      	str	r2, [r3, #20]
}
 8012f66:	e0a1      	b.n	80130ac <QSPI_Config+0x2d0>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8012f68:	68bb      	ldr	r3, [r7, #8]
 8012f6a:	6a1b      	ldr	r3, [r3, #32]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d052      	beq.n	8013016 <QSPI_Config+0x23a>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	68ba      	ldr	r2, [r7, #8]
 8012f76:	6892      	ldr	r2, [r2, #8]
 8012f78:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8012f7a:	68bb      	ldr	r3, [r7, #8]
 8012f7c:	69db      	ldr	r3, [r3, #28]
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d02a      	beq.n	8012fd8 <QSPI_Config+0x1fc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 8012f82:	68bb      	ldr	r3, [r7, #8]
 8012f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f86:	68bb      	ldr	r3, [r7, #8]
 8012f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f8a:	431a      	orrs	r2, r3
 8012f8c:	68bb      	ldr	r3, [r7, #8]
 8012f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f90:	431a      	orrs	r2, r3
 8012f92:	68bb      	ldr	r3, [r7, #8]
 8012f94:	695b      	ldr	r3, [r3, #20]
 8012f96:	049b      	lsls	r3, r3, #18
 8012f98:	431a      	orrs	r2, r3
 8012f9a:	68bb      	ldr	r3, [r7, #8]
 8012f9c:	691b      	ldr	r3, [r3, #16]
 8012f9e:	431a      	orrs	r2, r3
 8012fa0:	68bb      	ldr	r3, [r7, #8]
 8012fa2:	6a1b      	ldr	r3, [r3, #32]
 8012fa4:	431a      	orrs	r2, r3
 8012fa6:	68bb      	ldr	r3, [r7, #8]
 8012fa8:	68db      	ldr	r3, [r3, #12]
 8012faa:	431a      	orrs	r2, r3
 8012fac:	68bb      	ldr	r3, [r7, #8]
 8012fae:	69db      	ldr	r3, [r3, #28]
 8012fb0:	431a      	orrs	r2, r3
 8012fb2:	68bb      	ldr	r3, [r7, #8]
 8012fb4:	699b      	ldr	r3, [r3, #24]
 8012fb6:	ea42 0103 	orr.w	r1, r2, r3
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	687a      	ldr	r2, [r7, #4]
 8012fc0:	430a      	orrs	r2, r1
 8012fc2:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8012fca:	d06f      	beq.n	80130ac <QSPI_Config+0x2d0>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	68ba      	ldr	r2, [r7, #8]
 8012fd2:	6852      	ldr	r2, [r2, #4]
 8012fd4:	619a      	str	r2, [r3, #24]
}
 8012fd6:	e069      	b.n	80130ac <QSPI_Config+0x2d0>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 8012fd8:	68bb      	ldr	r3, [r7, #8]
 8012fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012fdc:	68bb      	ldr	r3, [r7, #8]
 8012fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fe0:	431a      	orrs	r2, r3
 8012fe2:	68bb      	ldr	r3, [r7, #8]
 8012fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fe6:	431a      	orrs	r2, r3
 8012fe8:	68bb      	ldr	r3, [r7, #8]
 8012fea:	695b      	ldr	r3, [r3, #20]
 8012fec:	049b      	lsls	r3, r3, #18
 8012fee:	431a      	orrs	r2, r3
 8012ff0:	68bb      	ldr	r3, [r7, #8]
 8012ff2:	691b      	ldr	r3, [r3, #16]
 8012ff4:	431a      	orrs	r2, r3
 8012ff6:	68bb      	ldr	r3, [r7, #8]
 8012ff8:	6a1b      	ldr	r3, [r3, #32]
 8012ffa:	431a      	orrs	r2, r3
 8012ffc:	68bb      	ldr	r3, [r7, #8]
 8012ffe:	69db      	ldr	r3, [r3, #28]
 8013000:	431a      	orrs	r2, r3
 8013002:	68bb      	ldr	r3, [r7, #8]
 8013004:	699b      	ldr	r3, [r3, #24]
 8013006:	ea42 0103 	orr.w	r1, r2, r3
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	687a      	ldr	r2, [r7, #4]
 8013010:	430a      	orrs	r2, r1
 8013012:	615a      	str	r2, [r3, #20]
}
 8013014:	e04a      	b.n	80130ac <QSPI_Config+0x2d0>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8013016:	68bb      	ldr	r3, [r7, #8]
 8013018:	69db      	ldr	r3, [r3, #28]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d027      	beq.n	801306e <QSPI_Config+0x292>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 801301e:	68bb      	ldr	r3, [r7, #8]
 8013020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013022:	68bb      	ldr	r3, [r7, #8]
 8013024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013026:	431a      	orrs	r2, r3
 8013028:	68bb      	ldr	r3, [r7, #8]
 801302a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801302c:	431a      	orrs	r2, r3
 801302e:	68bb      	ldr	r3, [r7, #8]
 8013030:	695b      	ldr	r3, [r3, #20]
 8013032:	049b      	lsls	r3, r3, #18
 8013034:	431a      	orrs	r2, r3
 8013036:	68bb      	ldr	r3, [r7, #8]
 8013038:	6a1b      	ldr	r3, [r3, #32]
 801303a:	431a      	orrs	r2, r3
 801303c:	68bb      	ldr	r3, [r7, #8]
 801303e:	68db      	ldr	r3, [r3, #12]
 8013040:	431a      	orrs	r2, r3
 8013042:	68bb      	ldr	r3, [r7, #8]
 8013044:	69db      	ldr	r3, [r3, #28]
 8013046:	431a      	orrs	r2, r3
 8013048:	68bb      	ldr	r3, [r7, #8]
 801304a:	699b      	ldr	r3, [r3, #24]
 801304c:	ea42 0103 	orr.w	r1, r2, r3
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	687a      	ldr	r2, [r7, #4]
 8013056:	430a      	orrs	r2, r1
 8013058:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8013060:	d024      	beq.n	80130ac <QSPI_Config+0x2d0>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	68ba      	ldr	r2, [r7, #8]
 8013068:	6852      	ldr	r2, [r2, #4]
 801306a:	619a      	str	r2, [r3, #24]
}
 801306c:	e01e      	b.n	80130ac <QSPI_Config+0x2d0>
        if (cmd->DataMode != QSPI_DATA_NONE)
 801306e:	68bb      	ldr	r3, [r7, #8]
 8013070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013072:	2b00      	cmp	r3, #0
 8013074:	d01a      	beq.n	80130ac <QSPI_Config+0x2d0>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 8013076:	68bb      	ldr	r3, [r7, #8]
 8013078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801307a:	68bb      	ldr	r3, [r7, #8]
 801307c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801307e:	431a      	orrs	r2, r3
 8013080:	68bb      	ldr	r3, [r7, #8]
 8013082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013084:	431a      	orrs	r2, r3
 8013086:	68bb      	ldr	r3, [r7, #8]
 8013088:	695b      	ldr	r3, [r3, #20]
 801308a:	049b      	lsls	r3, r3, #18
 801308c:	431a      	orrs	r2, r3
 801308e:	68bb      	ldr	r3, [r7, #8]
 8013090:	6a1b      	ldr	r3, [r3, #32]
 8013092:	431a      	orrs	r2, r3
 8013094:	68bb      	ldr	r3, [r7, #8]
 8013096:	69db      	ldr	r3, [r3, #28]
 8013098:	431a      	orrs	r2, r3
 801309a:	68bb      	ldr	r3, [r7, #8]
 801309c:	699b      	ldr	r3, [r3, #24]
 801309e:	ea42 0103 	orr.w	r1, r2, r3
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	687a      	ldr	r2, [r7, #4]
 80130a8:	430a      	orrs	r2, r1
 80130aa:	615a      	str	r2, [r3, #20]
}
 80130ac:	bf00      	nop
 80130ae:	3714      	adds	r7, #20
 80130b0:	46bd      	mov	sp, r7
 80130b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130b6:	4770      	bx	lr

080130b8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80130b8:	b480      	push	{r7}
 80130ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80130bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80130c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80130ca:	d101      	bne.n	80130d0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80130cc:	2301      	movs	r3, #1
 80130ce:	e000      	b.n	80130d2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80130d0:	2300      	movs	r3, #0
}
 80130d2:	4618      	mov	r0, r3
 80130d4:	46bd      	mov	sp, r7
 80130d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130da:	4770      	bx	lr

080130dc <LL_RCC_HSE_Enable>:
{
 80130dc:	b480      	push	{r7}
 80130de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80130e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80130ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80130ee:	6013      	str	r3, [r2, #0]
}
 80130f0:	bf00      	nop
 80130f2:	46bd      	mov	sp, r7
 80130f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f8:	4770      	bx	lr

080130fa <LL_RCC_HSE_Disable>:
{
 80130fa:	b480      	push	{r7}
 80130fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80130fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8013108:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801310c:	6013      	str	r3, [r2, #0]
}
 801310e:	bf00      	nop
 8013110:	46bd      	mov	sp, r7
 8013112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013116:	4770      	bx	lr

08013118 <LL_RCC_HSE_IsReady>:
{
 8013118:	b480      	push	{r7}
 801311a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 801311c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013126:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801312a:	d101      	bne.n	8013130 <LL_RCC_HSE_IsReady+0x18>
 801312c:	2301      	movs	r3, #1
 801312e:	e000      	b.n	8013132 <LL_RCC_HSE_IsReady+0x1a>
 8013130:	2300      	movs	r3, #0
}
 8013132:	4618      	mov	r0, r3
 8013134:	46bd      	mov	sp, r7
 8013136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801313a:	4770      	bx	lr

0801313c <LL_RCC_HSI_Enable>:
{
 801313c:	b480      	push	{r7}
 801313e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8013140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801314a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801314e:	6013      	str	r3, [r2, #0]
}
 8013150:	bf00      	nop
 8013152:	46bd      	mov	sp, r7
 8013154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013158:	4770      	bx	lr

0801315a <LL_RCC_HSI_Disable>:
{
 801315a:	b480      	push	{r7}
 801315c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 801315e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8013168:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801316c:	6013      	str	r3, [r2, #0]
}
 801316e:	bf00      	nop
 8013170:	46bd      	mov	sp, r7
 8013172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013176:	4770      	bx	lr

08013178 <LL_RCC_HSI_IsReady>:
{
 8013178:	b480      	push	{r7}
 801317a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 801317c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801318a:	d101      	bne.n	8013190 <LL_RCC_HSI_IsReady+0x18>
 801318c:	2301      	movs	r3, #1
 801318e:	e000      	b.n	8013192 <LL_RCC_HSI_IsReady+0x1a>
 8013190:	2300      	movs	r3, #0
}
 8013192:	4618      	mov	r0, r3
 8013194:	46bd      	mov	sp, r7
 8013196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801319a:	4770      	bx	lr

0801319c <LL_RCC_HSI_SetCalibTrimming>:
{
 801319c:	b480      	push	{r7}
 801319e:	b083      	sub	sp, #12
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80131a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80131a8:	685b      	ldr	r3, [r3, #4]
 80131aa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	061b      	lsls	r3, r3, #24
 80131b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80131b6:	4313      	orrs	r3, r2
 80131b8:	604b      	str	r3, [r1, #4]
}
 80131ba:	bf00      	nop
 80131bc:	370c      	adds	r7, #12
 80131be:	46bd      	mov	sp, r7
 80131c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c4:	4770      	bx	lr

080131c6 <LL_RCC_HSI48_Enable>:
{
 80131c6:	b480      	push	{r7}
 80131c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80131ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80131ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80131d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80131d6:	f043 0301 	orr.w	r3, r3, #1
 80131da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80131de:	bf00      	nop
 80131e0:	46bd      	mov	sp, r7
 80131e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e6:	4770      	bx	lr

080131e8 <LL_RCC_HSI48_Disable>:
{
 80131e8:	b480      	push	{r7}
 80131ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80131ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80131f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80131f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80131f8:	f023 0301 	bic.w	r3, r3, #1
 80131fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8013200:	bf00      	nop
 8013202:	46bd      	mov	sp, r7
 8013204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013208:	4770      	bx	lr

0801320a <LL_RCC_HSI48_IsReady>:
{
 801320a:	b480      	push	{r7}
 801320c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 801320e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013212:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013216:	f003 0302 	and.w	r3, r3, #2
 801321a:	2b02      	cmp	r3, #2
 801321c:	d101      	bne.n	8013222 <LL_RCC_HSI48_IsReady+0x18>
 801321e:	2301      	movs	r3, #1
 8013220:	e000      	b.n	8013224 <LL_RCC_HSI48_IsReady+0x1a>
 8013222:	2300      	movs	r3, #0
}
 8013224:	4618      	mov	r0, r3
 8013226:	46bd      	mov	sp, r7
 8013228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801322c:	4770      	bx	lr

0801322e <LL_RCC_LSE_Enable>:
{
 801322e:	b480      	push	{r7}
 8013230:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8013232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801323a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801323e:	f043 0301 	orr.w	r3, r3, #1
 8013242:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8013246:	bf00      	nop
 8013248:	46bd      	mov	sp, r7
 801324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801324e:	4770      	bx	lr

08013250 <LL_RCC_LSE_Disable>:
{
 8013250:	b480      	push	{r7}
 8013252:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8013254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801325c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8013260:	f023 0301 	bic.w	r3, r3, #1
 8013264:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8013268:	bf00      	nop
 801326a:	46bd      	mov	sp, r7
 801326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013270:	4770      	bx	lr

08013272 <LL_RCC_LSE_EnableBypass>:
{
 8013272:	b480      	push	{r7}
 8013274:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8013276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801327a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801327e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8013282:	f043 0304 	orr.w	r3, r3, #4
 8013286:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801328a:	bf00      	nop
 801328c:	46bd      	mov	sp, r7
 801328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013292:	4770      	bx	lr

08013294 <LL_RCC_LSE_DisableBypass>:
{
 8013294:	b480      	push	{r7}
 8013296:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8013298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801329c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80132a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80132a4:	f023 0304 	bic.w	r3, r3, #4
 80132a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80132ac:	bf00      	nop
 80132ae:	46bd      	mov	sp, r7
 80132b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b4:	4770      	bx	lr

080132b6 <LL_RCC_LSE_IsReady>:
{
 80132b6:	b480      	push	{r7}
 80132b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80132ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80132be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80132c2:	f003 0302 	and.w	r3, r3, #2
 80132c6:	2b02      	cmp	r3, #2
 80132c8:	d101      	bne.n	80132ce <LL_RCC_LSE_IsReady+0x18>
 80132ca:	2301      	movs	r3, #1
 80132cc:	e000      	b.n	80132d0 <LL_RCC_LSE_IsReady+0x1a>
 80132ce:	2300      	movs	r3, #0
}
 80132d0:	4618      	mov	r0, r3
 80132d2:	46bd      	mov	sp, r7
 80132d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d8:	4770      	bx	lr

080132da <LL_RCC_LSI1_Enable>:
{
 80132da:	b480      	push	{r7}
 80132dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80132de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80132e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80132e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80132ea:	f043 0301 	orr.w	r3, r3, #1
 80132ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80132f2:	bf00      	nop
 80132f4:	46bd      	mov	sp, r7
 80132f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132fa:	4770      	bx	lr

080132fc <LL_RCC_LSI1_Disable>:
{
 80132fc:	b480      	push	{r7}
 80132fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8013300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013304:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013308:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801330c:	f023 0301 	bic.w	r3, r3, #1
 8013310:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8013314:	bf00      	nop
 8013316:	46bd      	mov	sp, r7
 8013318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801331c:	4770      	bx	lr

0801331e <LL_RCC_LSI1_IsReady>:
{
 801331e:	b480      	push	{r7}
 8013320:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8013322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801332a:	f003 0302 	and.w	r3, r3, #2
 801332e:	2b02      	cmp	r3, #2
 8013330:	d101      	bne.n	8013336 <LL_RCC_LSI1_IsReady+0x18>
 8013332:	2301      	movs	r3, #1
 8013334:	e000      	b.n	8013338 <LL_RCC_LSI1_IsReady+0x1a>
 8013336:	2300      	movs	r3, #0
}
 8013338:	4618      	mov	r0, r3
 801333a:	46bd      	mov	sp, r7
 801333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013340:	4770      	bx	lr

08013342 <LL_RCC_LSI2_Enable>:
{
 8013342:	b480      	push	{r7}
 8013344:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8013346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801334a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801334e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8013352:	f043 0304 	orr.w	r3, r3, #4
 8013356:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 801335a:	bf00      	nop
 801335c:	46bd      	mov	sp, r7
 801335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013362:	4770      	bx	lr

08013364 <LL_RCC_LSI2_Disable>:
{
 8013364:	b480      	push	{r7}
 8013366:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8013368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801336c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013370:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8013374:	f023 0304 	bic.w	r3, r3, #4
 8013378:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 801337c:	bf00      	nop
 801337e:	46bd      	mov	sp, r7
 8013380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013384:	4770      	bx	lr

08013386 <LL_RCC_LSI2_IsReady>:
{
 8013386:	b480      	push	{r7}
 8013388:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 801338a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801338e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013392:	f003 0308 	and.w	r3, r3, #8
 8013396:	2b08      	cmp	r3, #8
 8013398:	d101      	bne.n	801339e <LL_RCC_LSI2_IsReady+0x18>
 801339a:	2301      	movs	r3, #1
 801339c:	e000      	b.n	80133a0 <LL_RCC_LSI2_IsReady+0x1a>
 801339e:	2300      	movs	r3, #0
}
 80133a0:	4618      	mov	r0, r3
 80133a2:	46bd      	mov	sp, r7
 80133a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a8:	4770      	bx	lr

080133aa <LL_RCC_LSI2_SetTrimming>:
{
 80133aa:	b480      	push	{r7}
 80133ac:	b083      	sub	sp, #12
 80133ae:	af00      	add	r7, sp, #0
 80133b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80133b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80133b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80133ba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	021b      	lsls	r3, r3, #8
 80133c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80133c6:	4313      	orrs	r3, r2
 80133c8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80133cc:	bf00      	nop
 80133ce:	370c      	adds	r7, #12
 80133d0:	46bd      	mov	sp, r7
 80133d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d6:	4770      	bx	lr

080133d8 <LL_RCC_MSI_Enable>:
{
 80133d8:	b480      	push	{r7}
 80133da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80133dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80133e6:	f043 0301 	orr.w	r3, r3, #1
 80133ea:	6013      	str	r3, [r2, #0]
}
 80133ec:	bf00      	nop
 80133ee:	46bd      	mov	sp, r7
 80133f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f4:	4770      	bx	lr

080133f6 <LL_RCC_MSI_Disable>:
{
 80133f6:	b480      	push	{r7}
 80133f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80133fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8013404:	f023 0301 	bic.w	r3, r3, #1
 8013408:	6013      	str	r3, [r2, #0]
}
 801340a:	bf00      	nop
 801340c:	46bd      	mov	sp, r7
 801340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013412:	4770      	bx	lr

08013414 <LL_RCC_MSI_IsReady>:
{
 8013414:	b480      	push	{r7}
 8013416:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8013418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	f003 0302 	and.w	r3, r3, #2
 8013422:	2b02      	cmp	r3, #2
 8013424:	d101      	bne.n	801342a <LL_RCC_MSI_IsReady+0x16>
 8013426:	2301      	movs	r3, #1
 8013428:	e000      	b.n	801342c <LL_RCC_MSI_IsReady+0x18>
 801342a:	2300      	movs	r3, #0
}
 801342c:	4618      	mov	r0, r3
 801342e:	46bd      	mov	sp, r7
 8013430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013434:	4770      	bx	lr

08013436 <LL_RCC_MSI_SetRange>:
{
 8013436:	b480      	push	{r7}
 8013438:	b083      	sub	sp, #12
 801343a:	af00      	add	r7, sp, #0
 801343c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 801343e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8013448:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	4313      	orrs	r3, r2
 8013450:	600b      	str	r3, [r1, #0]
}
 8013452:	bf00      	nop
 8013454:	370c      	adds	r7, #12
 8013456:	46bd      	mov	sp, r7
 8013458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801345c:	4770      	bx	lr

0801345e <LL_RCC_MSI_GetRange>:
{
 801345e:	b480      	push	{r7}
 8013460:	b083      	sub	sp, #12
 8013462:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8013464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801346e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	2bb0      	cmp	r3, #176	; 0xb0
 8013474:	d901      	bls.n	801347a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8013476:	23b0      	movs	r3, #176	; 0xb0
 8013478:	607b      	str	r3, [r7, #4]
  return msiRange;
 801347a:	687b      	ldr	r3, [r7, #4]
}
 801347c:	4618      	mov	r0, r3
 801347e:	370c      	adds	r7, #12
 8013480:	46bd      	mov	sp, r7
 8013482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013486:	4770      	bx	lr

08013488 <LL_RCC_MSI_SetCalibTrimming>:
{
 8013488:	b480      	push	{r7}
 801348a:	b083      	sub	sp, #12
 801348c:	af00      	add	r7, sp, #0
 801348e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8013490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013494:	685b      	ldr	r3, [r3, #4]
 8013496:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	021b      	lsls	r3, r3, #8
 801349e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80134a2:	4313      	orrs	r3, r2
 80134a4:	604b      	str	r3, [r1, #4]
}
 80134a6:	bf00      	nop
 80134a8:	370c      	adds	r7, #12
 80134aa:	46bd      	mov	sp, r7
 80134ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b0:	4770      	bx	lr

080134b2 <LL_RCC_SetSysClkSource>:
{
 80134b2:	b480      	push	{r7}
 80134b4:	b083      	sub	sp, #12
 80134b6:	af00      	add	r7, sp, #0
 80134b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80134ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80134be:	689b      	ldr	r3, [r3, #8]
 80134c0:	f023 0203 	bic.w	r2, r3, #3
 80134c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	4313      	orrs	r3, r2
 80134cc:	608b      	str	r3, [r1, #8]
}
 80134ce:	bf00      	nop
 80134d0:	370c      	adds	r7, #12
 80134d2:	46bd      	mov	sp, r7
 80134d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d8:	4770      	bx	lr

080134da <LL_RCC_GetSysClkSource>:
{
 80134da:	b480      	push	{r7}
 80134dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80134de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80134e2:	689b      	ldr	r3, [r3, #8]
 80134e4:	f003 030c 	and.w	r3, r3, #12
}
 80134e8:	4618      	mov	r0, r3
 80134ea:	46bd      	mov	sp, r7
 80134ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f0:	4770      	bx	lr

080134f2 <LL_RCC_SetAHBPrescaler>:
{
 80134f2:	b480      	push	{r7}
 80134f4:	b083      	sub	sp, #12
 80134f6:	af00      	add	r7, sp, #0
 80134f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80134fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80134fe:	689b      	ldr	r3, [r3, #8]
 8013500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8013504:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	4313      	orrs	r3, r2
 801350c:	608b      	str	r3, [r1, #8]
}
 801350e:	bf00      	nop
 8013510:	370c      	adds	r7, #12
 8013512:	46bd      	mov	sp, r7
 8013514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013518:	4770      	bx	lr

0801351a <LL_C2_RCC_SetAHBPrescaler>:
{
 801351a:	b480      	push	{r7}
 801351c:	b083      	sub	sp, #12
 801351e:	af00      	add	r7, sp, #0
 8013520:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8013522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013526:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801352a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801352e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	4313      	orrs	r3, r2
 8013536:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 801353a:	bf00      	nop
 801353c:	370c      	adds	r7, #12
 801353e:	46bd      	mov	sp, r7
 8013540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013544:	4770      	bx	lr

08013546 <LL_RCC_SetAHB4Prescaler>:
{
 8013546:	b480      	push	{r7}
 8013548:	b083      	sub	sp, #12
 801354a:	af00      	add	r7, sp, #0
 801354c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 801354e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013552:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8013556:	f023 020f 	bic.w	r2, r3, #15
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	091b      	lsrs	r3, r3, #4
 801355e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8013562:	4313      	orrs	r3, r2
 8013564:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8013568:	bf00      	nop
 801356a:	370c      	adds	r7, #12
 801356c:	46bd      	mov	sp, r7
 801356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013572:	4770      	bx	lr

08013574 <LL_RCC_SetAPB1Prescaler>:
{
 8013574:	b480      	push	{r7}
 8013576:	b083      	sub	sp, #12
 8013578:	af00      	add	r7, sp, #0
 801357a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 801357c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013580:	689b      	ldr	r3, [r3, #8]
 8013582:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8013586:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	4313      	orrs	r3, r2
 801358e:	608b      	str	r3, [r1, #8]
}
 8013590:	bf00      	nop
 8013592:	370c      	adds	r7, #12
 8013594:	46bd      	mov	sp, r7
 8013596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801359a:	4770      	bx	lr

0801359c <LL_RCC_SetAPB2Prescaler>:
{
 801359c:	b480      	push	{r7}
 801359e:	b083      	sub	sp, #12
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80135a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80135a8:	689b      	ldr	r3, [r3, #8]
 80135aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80135ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	4313      	orrs	r3, r2
 80135b6:	608b      	str	r3, [r1, #8]
}
 80135b8:	bf00      	nop
 80135ba:	370c      	adds	r7, #12
 80135bc:	46bd      	mov	sp, r7
 80135be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135c2:	4770      	bx	lr

080135c4 <LL_RCC_GetAHBPrescaler>:
{
 80135c4:	b480      	push	{r7}
 80135c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80135c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80135cc:	689b      	ldr	r3, [r3, #8]
 80135ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80135d2:	4618      	mov	r0, r3
 80135d4:	46bd      	mov	sp, r7
 80135d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135da:	4770      	bx	lr

080135dc <LL_RCC_GetAHB4Prescaler>:
{
 80135dc:	b480      	push	{r7}
 80135de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80135e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80135e4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80135e8:	011b      	lsls	r3, r3, #4
 80135ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80135ee:	4618      	mov	r0, r3
 80135f0:	46bd      	mov	sp, r7
 80135f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f6:	4770      	bx	lr

080135f8 <LL_RCC_GetAPB1Prescaler>:
{
 80135f8:	b480      	push	{r7}
 80135fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80135fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013600:	689b      	ldr	r3, [r3, #8]
 8013602:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8013606:	4618      	mov	r0, r3
 8013608:	46bd      	mov	sp, r7
 801360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801360e:	4770      	bx	lr

08013610 <LL_RCC_GetAPB2Prescaler>:
{
 8013610:	b480      	push	{r7}
 8013612:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8013614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013618:	689b      	ldr	r3, [r3, #8]
 801361a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 801361e:	4618      	mov	r0, r3
 8013620:	46bd      	mov	sp, r7
 8013622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013626:	4770      	bx	lr

08013628 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8013628:	b480      	push	{r7}
 801362a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 801362c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8013636:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801363a:	6013      	str	r3, [r2, #0]
}
 801363c:	bf00      	nop
 801363e:	46bd      	mov	sp, r7
 8013640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013644:	4770      	bx	lr

08013646 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8013646:	b480      	push	{r7}
 8013648:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 801364a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8013654:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8013658:	6013      	str	r3, [r2, #0]
}
 801365a:	bf00      	nop
 801365c:	46bd      	mov	sp, r7
 801365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013662:	4770      	bx	lr

08013664 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8013664:	b480      	push	{r7}
 8013666:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8013668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013672:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8013676:	d101      	bne.n	801367c <LL_RCC_PLL_IsReady+0x18>
 8013678:	2301      	movs	r3, #1
 801367a:	e000      	b.n	801367e <LL_RCC_PLL_IsReady+0x1a>
 801367c:	2300      	movs	r3, #0
}
 801367e:	4618      	mov	r0, r3
 8013680:	46bd      	mov	sp, r7
 8013682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013686:	4770      	bx	lr

08013688 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8013688:	b480      	push	{r7}
 801368a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 801368c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013690:	68db      	ldr	r3, [r3, #12]
 8013692:	0a1b      	lsrs	r3, r3, #8
 8013694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8013698:	4618      	mov	r0, r3
 801369a:	46bd      	mov	sp, r7
 801369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136a0:	4770      	bx	lr

080136a2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80136a2:	b480      	push	{r7}
 80136a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80136a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80136aa:	68db      	ldr	r3, [r3, #12]
 80136ac:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80136b0:	4618      	mov	r0, r3
 80136b2:	46bd      	mov	sp, r7
 80136b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b8:	4770      	bx	lr

080136ba <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80136ba:	b480      	push	{r7}
 80136bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80136be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80136c2:	68db      	ldr	r3, [r3, #12]
 80136c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80136c8:	4618      	mov	r0, r3
 80136ca:	46bd      	mov	sp, r7
 80136cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d0:	4770      	bx	lr

080136d2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80136d2:	b480      	push	{r7}
 80136d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80136d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80136da:	68db      	ldr	r3, [r3, #12]
 80136dc:	f003 0303 	and.w	r3, r3, #3
}
 80136e0:	4618      	mov	r0, r3
 80136e2:	46bd      	mov	sp, r7
 80136e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136e8:	4770      	bx	lr

080136ea <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80136ea:	b480      	push	{r7}
 80136ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80136ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80136f2:	689b      	ldr	r3, [r3, #8]
 80136f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80136f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80136fc:	d101      	bne.n	8013702 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80136fe:	2301      	movs	r3, #1
 8013700:	e000      	b.n	8013704 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8013702:	2300      	movs	r3, #0
}
 8013704:	4618      	mov	r0, r3
 8013706:	46bd      	mov	sp, r7
 8013708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801370c:	4770      	bx	lr

0801370e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 801370e:	b480      	push	{r7}
 8013710:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8013712:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013716:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801371a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801371e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8013722:	d101      	bne.n	8013728 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8013724:	2301      	movs	r3, #1
 8013726:	e000      	b.n	801372a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8013728:	2300      	movs	r3, #0
}
 801372a:	4618      	mov	r0, r3
 801372c:	46bd      	mov	sp, r7
 801372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013732:	4770      	bx	lr

08013734 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8013734:	b480      	push	{r7}
 8013736:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8013738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801373c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8013740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013748:	d101      	bne.n	801374e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 801374a:	2301      	movs	r3, #1
 801374c:	e000      	b.n	8013750 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 801374e:	2300      	movs	r3, #0
}
 8013750:	4618      	mov	r0, r3
 8013752:	46bd      	mov	sp, r7
 8013754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013758:	4770      	bx	lr

0801375a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 801375a:	b480      	push	{r7}
 801375c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 801375e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013762:	689b      	ldr	r3, [r3, #8]
 8013764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013768:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801376c:	d101      	bne.n	8013772 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 801376e:	2301      	movs	r3, #1
 8013770:	e000      	b.n	8013774 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8013772:	2300      	movs	r3, #0
}
 8013774:	4618      	mov	r0, r3
 8013776:	46bd      	mov	sp, r7
 8013778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801377c:	4770      	bx	lr

0801377e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 801377e:	b480      	push	{r7}
 8013780:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8013782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013786:	689b      	ldr	r3, [r3, #8]
 8013788:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801378c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8013790:	d101      	bne.n	8013796 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8013792:	2301      	movs	r3, #1
 8013794:	e000      	b.n	8013798 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8013796:	2300      	movs	r3, #0
}
 8013798:	4618      	mov	r0, r3
 801379a:	46bd      	mov	sp, r7
 801379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a0:	4770      	bx	lr
	...

080137a4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80137a4:	b590      	push	{r4, r7, lr}
 80137a6:	b08d      	sub	sp, #52	; 0x34
 80137a8:	af00      	add	r7, sp, #0
 80137aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d101      	bne.n	80137b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80137b2:	2301      	movs	r3, #1
 80137b4:	e363      	b.n	8013e7e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	f003 0320 	and.w	r3, r3, #32
 80137be:	2b00      	cmp	r3, #0
 80137c0:	f000 808d 	beq.w	80138de <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80137c4:	f7ff fe89 	bl	80134da <LL_RCC_GetSysClkSource>
 80137c8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80137ca:	f7ff ff82 	bl	80136d2 <LL_RCC_PLL_GetMainSource>
 80137ce:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80137d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d005      	beq.n	80137e2 <HAL_RCC_OscConfig+0x3e>
 80137d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137d8:	2b0c      	cmp	r3, #12
 80137da:	d147      	bne.n	801386c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80137dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137de:	2b01      	cmp	r3, #1
 80137e0:	d144      	bne.n	801386c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	69db      	ldr	r3, [r3, #28]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d101      	bne.n	80137ee <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80137ea:	2301      	movs	r3, #1
 80137ec:	e347      	b.n	8013e7e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80137f2:	f7ff fe34 	bl	801345e <LL_RCC_MSI_GetRange>
 80137f6:	4603      	mov	r3, r0
 80137f8:	429c      	cmp	r4, r3
 80137fa:	d914      	bls.n	8013826 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013800:	4618      	mov	r0, r3
 8013802:	f000 fd2f 	bl	8014264 <RCC_SetFlashLatencyFromMSIRange>
 8013806:	4603      	mov	r3, r0
 8013808:	2b00      	cmp	r3, #0
 801380a:	d001      	beq.n	8013810 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 801380c:	2301      	movs	r3, #1
 801380e:	e336      	b.n	8013e7e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013814:	4618      	mov	r0, r3
 8013816:	f7ff fe0e 	bl	8013436 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	6a1b      	ldr	r3, [r3, #32]
 801381e:	4618      	mov	r0, r3
 8013820:	f7ff fe32 	bl	8013488 <LL_RCC_MSI_SetCalibTrimming>
 8013824:	e013      	b.n	801384e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801382a:	4618      	mov	r0, r3
 801382c:	f7ff fe03 	bl	8013436 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	6a1b      	ldr	r3, [r3, #32]
 8013834:	4618      	mov	r0, r3
 8013836:	f7ff fe27 	bl	8013488 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801383e:	4618      	mov	r0, r3
 8013840:	f000 fd10 	bl	8014264 <RCC_SetFlashLatencyFromMSIRange>
 8013844:	4603      	mov	r3, r0
 8013846:	2b00      	cmp	r3, #0
 8013848:	d001      	beq.n	801384e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 801384a:	2301      	movs	r3, #1
 801384c:	e317      	b.n	8013e7e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 801384e:	f000 fcc9 	bl	80141e4 <HAL_RCC_GetHCLKFreq>
 8013852:	4603      	mov	r3, r0
 8013854:	4aa4      	ldr	r2, [pc, #656]	; (8013ae8 <HAL_RCC_OscConfig+0x344>)
 8013856:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8013858:	4ba4      	ldr	r3, [pc, #656]	; (8013aec <HAL_RCC_OscConfig+0x348>)
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	4618      	mov	r0, r3
 801385e:	f7fb fbf9 	bl	800f054 <HAL_InitTick>
 8013862:	4603      	mov	r3, r0
 8013864:	2b00      	cmp	r3, #0
 8013866:	d039      	beq.n	80138dc <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8013868:	2301      	movs	r3, #1
 801386a:	e308      	b.n	8013e7e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	69db      	ldr	r3, [r3, #28]
 8013870:	2b00      	cmp	r3, #0
 8013872:	d01e      	beq.n	80138b2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8013874:	f7ff fdb0 	bl	80133d8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8013878:	f7fb fc3a 	bl	800f0f0 <HAL_GetTick>
 801387c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 801387e:	e008      	b.n	8013892 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8013880:	f7fb fc36 	bl	800f0f0 <HAL_GetTick>
 8013884:	4602      	mov	r2, r0
 8013886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013888:	1ad3      	subs	r3, r2, r3
 801388a:	2b02      	cmp	r3, #2
 801388c:	d901      	bls.n	8013892 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 801388e:	2303      	movs	r3, #3
 8013890:	e2f5      	b.n	8013e7e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8013892:	f7ff fdbf 	bl	8013414 <LL_RCC_MSI_IsReady>
 8013896:	4603      	mov	r3, r0
 8013898:	2b00      	cmp	r3, #0
 801389a:	d0f1      	beq.n	8013880 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138a0:	4618      	mov	r0, r3
 80138a2:	f7ff fdc8 	bl	8013436 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	6a1b      	ldr	r3, [r3, #32]
 80138aa:	4618      	mov	r0, r3
 80138ac:	f7ff fdec 	bl	8013488 <LL_RCC_MSI_SetCalibTrimming>
 80138b0:	e015      	b.n	80138de <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80138b2:	f7ff fda0 	bl	80133f6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80138b6:	f7fb fc1b 	bl	800f0f0 <HAL_GetTick>
 80138ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80138bc:	e008      	b.n	80138d0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80138be:	f7fb fc17 	bl	800f0f0 <HAL_GetTick>
 80138c2:	4602      	mov	r2, r0
 80138c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138c6:	1ad3      	subs	r3, r2, r3
 80138c8:	2b02      	cmp	r3, #2
 80138ca:	d901      	bls.n	80138d0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80138cc:	2303      	movs	r3, #3
 80138ce:	e2d6      	b.n	8013e7e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80138d0:	f7ff fda0 	bl	8013414 <LL_RCC_MSI_IsReady>
 80138d4:	4603      	mov	r3, r0
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d1f1      	bne.n	80138be <HAL_RCC_OscConfig+0x11a>
 80138da:	e000      	b.n	80138de <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80138dc:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	f003 0301 	and.w	r3, r3, #1
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d047      	beq.n	801397a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80138ea:	f7ff fdf6 	bl	80134da <LL_RCC_GetSysClkSource>
 80138ee:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80138f0:	f7ff feef 	bl	80136d2 <LL_RCC_PLL_GetMainSource>
 80138f4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80138f6:	6a3b      	ldr	r3, [r7, #32]
 80138f8:	2b08      	cmp	r3, #8
 80138fa:	d005      	beq.n	8013908 <HAL_RCC_OscConfig+0x164>
 80138fc:	6a3b      	ldr	r3, [r7, #32]
 80138fe:	2b0c      	cmp	r3, #12
 8013900:	d108      	bne.n	8013914 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8013902:	69fb      	ldr	r3, [r7, #28]
 8013904:	2b03      	cmp	r3, #3
 8013906:	d105      	bne.n	8013914 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	685b      	ldr	r3, [r3, #4]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d134      	bne.n	801397a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8013910:	2301      	movs	r3, #1
 8013912:	e2b4      	b.n	8013e7e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	685b      	ldr	r3, [r3, #4]
 8013918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801391c:	d102      	bne.n	8013924 <HAL_RCC_OscConfig+0x180>
 801391e:	f7ff fbdd 	bl	80130dc <LL_RCC_HSE_Enable>
 8013922:	e001      	b.n	8013928 <HAL_RCC_OscConfig+0x184>
 8013924:	f7ff fbe9 	bl	80130fa <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	685b      	ldr	r3, [r3, #4]
 801392c:	2b00      	cmp	r3, #0
 801392e:	d012      	beq.n	8013956 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013930:	f7fb fbde 	bl	800f0f0 <HAL_GetTick>
 8013934:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8013936:	e008      	b.n	801394a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8013938:	f7fb fbda 	bl	800f0f0 <HAL_GetTick>
 801393c:	4602      	mov	r2, r0
 801393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013940:	1ad3      	subs	r3, r2, r3
 8013942:	2b64      	cmp	r3, #100	; 0x64
 8013944:	d901      	bls.n	801394a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8013946:	2303      	movs	r3, #3
 8013948:	e299      	b.n	8013e7e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 801394a:	f7ff fbe5 	bl	8013118 <LL_RCC_HSE_IsReady>
 801394e:	4603      	mov	r3, r0
 8013950:	2b00      	cmp	r3, #0
 8013952:	d0f1      	beq.n	8013938 <HAL_RCC_OscConfig+0x194>
 8013954:	e011      	b.n	801397a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013956:	f7fb fbcb 	bl	800f0f0 <HAL_GetTick>
 801395a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 801395c:	e008      	b.n	8013970 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801395e:	f7fb fbc7 	bl	800f0f0 <HAL_GetTick>
 8013962:	4602      	mov	r2, r0
 8013964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013966:	1ad3      	subs	r3, r2, r3
 8013968:	2b64      	cmp	r3, #100	; 0x64
 801396a:	d901      	bls.n	8013970 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 801396c:	2303      	movs	r3, #3
 801396e:	e286      	b.n	8013e7e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8013970:	f7ff fbd2 	bl	8013118 <LL_RCC_HSE_IsReady>
 8013974:	4603      	mov	r3, r0
 8013976:	2b00      	cmp	r3, #0
 8013978:	d1f1      	bne.n	801395e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	f003 0302 	and.w	r3, r3, #2
 8013982:	2b00      	cmp	r3, #0
 8013984:	d04c      	beq.n	8013a20 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8013986:	f7ff fda8 	bl	80134da <LL_RCC_GetSysClkSource>
 801398a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 801398c:	f7ff fea1 	bl	80136d2 <LL_RCC_PLL_GetMainSource>
 8013990:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8013992:	69bb      	ldr	r3, [r7, #24]
 8013994:	2b04      	cmp	r3, #4
 8013996:	d005      	beq.n	80139a4 <HAL_RCC_OscConfig+0x200>
 8013998:	69bb      	ldr	r3, [r7, #24]
 801399a:	2b0c      	cmp	r3, #12
 801399c:	d10e      	bne.n	80139bc <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 801399e:	697b      	ldr	r3, [r7, #20]
 80139a0:	2b02      	cmp	r3, #2
 80139a2:	d10b      	bne.n	80139bc <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	68db      	ldr	r3, [r3, #12]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d101      	bne.n	80139b0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80139ac:	2301      	movs	r3, #1
 80139ae:	e266      	b.n	8013e7e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	691b      	ldr	r3, [r3, #16]
 80139b4:	4618      	mov	r0, r3
 80139b6:	f7ff fbf1 	bl	801319c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80139ba:	e031      	b.n	8013a20 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	68db      	ldr	r3, [r3, #12]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d019      	beq.n	80139f8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80139c4:	f7ff fbba 	bl	801313c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80139c8:	f7fb fb92 	bl	800f0f0 <HAL_GetTick>
 80139cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80139ce:	e008      	b.n	80139e2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80139d0:	f7fb fb8e 	bl	800f0f0 <HAL_GetTick>
 80139d4:	4602      	mov	r2, r0
 80139d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139d8:	1ad3      	subs	r3, r2, r3
 80139da:	2b02      	cmp	r3, #2
 80139dc:	d901      	bls.n	80139e2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80139de:	2303      	movs	r3, #3
 80139e0:	e24d      	b.n	8013e7e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80139e2:	f7ff fbc9 	bl	8013178 <LL_RCC_HSI_IsReady>
 80139e6:	4603      	mov	r3, r0
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d0f1      	beq.n	80139d0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	691b      	ldr	r3, [r3, #16]
 80139f0:	4618      	mov	r0, r3
 80139f2:	f7ff fbd3 	bl	801319c <LL_RCC_HSI_SetCalibTrimming>
 80139f6:	e013      	b.n	8013a20 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80139f8:	f7ff fbaf 	bl	801315a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80139fc:	f7fb fb78 	bl	800f0f0 <HAL_GetTick>
 8013a00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8013a02:	e008      	b.n	8013a16 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8013a04:	f7fb fb74 	bl	800f0f0 <HAL_GetTick>
 8013a08:	4602      	mov	r2, r0
 8013a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a0c:	1ad3      	subs	r3, r2, r3
 8013a0e:	2b02      	cmp	r3, #2
 8013a10:	d901      	bls.n	8013a16 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8013a12:	2303      	movs	r3, #3
 8013a14:	e233      	b.n	8013e7e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8013a16:	f7ff fbaf 	bl	8013178 <LL_RCC_HSI_IsReady>
 8013a1a:	4603      	mov	r3, r0
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d1f1      	bne.n	8013a04 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	f003 0308 	and.w	r3, r3, #8
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d106      	bne.n	8013a3a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	f000 80a3 	beq.w	8013b80 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	695b      	ldr	r3, [r3, #20]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d076      	beq.n	8013b30 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	f003 0310 	and.w	r3, r3, #16
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d046      	beq.n	8013adc <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8013a4e:	f7ff fc66 	bl	801331e <LL_RCC_LSI1_IsReady>
 8013a52:	4603      	mov	r3, r0
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d113      	bne.n	8013a80 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8013a58:	f7ff fc3f 	bl	80132da <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8013a5c:	f7fb fb48 	bl	800f0f0 <HAL_GetTick>
 8013a60:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8013a62:	e008      	b.n	8013a76 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8013a64:	f7fb fb44 	bl	800f0f0 <HAL_GetTick>
 8013a68:	4602      	mov	r2, r0
 8013a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a6c:	1ad3      	subs	r3, r2, r3
 8013a6e:	2b02      	cmp	r3, #2
 8013a70:	d901      	bls.n	8013a76 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8013a72:	2303      	movs	r3, #3
 8013a74:	e203      	b.n	8013e7e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8013a76:	f7ff fc52 	bl	801331e <LL_RCC_LSI1_IsReady>
 8013a7a:	4603      	mov	r3, r0
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d0f1      	beq.n	8013a64 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8013a80:	f7ff fc5f 	bl	8013342 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013a84:	f7fb fb34 	bl	800f0f0 <HAL_GetTick>
 8013a88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8013a8a:	e008      	b.n	8013a9e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8013a8c:	f7fb fb30 	bl	800f0f0 <HAL_GetTick>
 8013a90:	4602      	mov	r2, r0
 8013a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a94:	1ad3      	subs	r3, r2, r3
 8013a96:	2b03      	cmp	r3, #3
 8013a98:	d901      	bls.n	8013a9e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8013a9a:	2303      	movs	r3, #3
 8013a9c:	e1ef      	b.n	8013e7e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8013a9e:	f7ff fc72 	bl	8013386 <LL_RCC_LSI2_IsReady>
 8013aa2:	4603      	mov	r3, r0
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d0f1      	beq.n	8013a8c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	699b      	ldr	r3, [r3, #24]
 8013aac:	4618      	mov	r0, r3
 8013aae:	f7ff fc7c 	bl	80133aa <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8013ab2:	f7ff fc23 	bl	80132fc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013ab6:	f7fb fb1b 	bl	800f0f0 <HAL_GetTick>
 8013aba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8013abc:	e008      	b.n	8013ad0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8013abe:	f7fb fb17 	bl	800f0f0 <HAL_GetTick>
 8013ac2:	4602      	mov	r2, r0
 8013ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ac6:	1ad3      	subs	r3, r2, r3
 8013ac8:	2b02      	cmp	r3, #2
 8013aca:	d901      	bls.n	8013ad0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8013acc:	2303      	movs	r3, #3
 8013ace:	e1d6      	b.n	8013e7e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8013ad0:	f7ff fc25 	bl	801331e <LL_RCC_LSI1_IsReady>
 8013ad4:	4603      	mov	r3, r0
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d1f1      	bne.n	8013abe <HAL_RCC_OscConfig+0x31a>
 8013ada:	e051      	b.n	8013b80 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8013adc:	f7ff fbfd 	bl	80132da <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013ae0:	f7fb fb06 	bl	800f0f0 <HAL_GetTick>
 8013ae4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8013ae6:	e00c      	b.n	8013b02 <HAL_RCC_OscConfig+0x35e>
 8013ae8:	2000007c 	.word	0x2000007c
 8013aec:	20000080 	.word	0x20000080
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8013af0:	f7fb fafe 	bl	800f0f0 <HAL_GetTick>
 8013af4:	4602      	mov	r2, r0
 8013af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013af8:	1ad3      	subs	r3, r2, r3
 8013afa:	2b02      	cmp	r3, #2
 8013afc:	d901      	bls.n	8013b02 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8013afe:	2303      	movs	r3, #3
 8013b00:	e1bd      	b.n	8013e7e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8013b02:	f7ff fc0c 	bl	801331e <LL_RCC_LSI1_IsReady>
 8013b06:	4603      	mov	r3, r0
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d0f1      	beq.n	8013af0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8013b0c:	f7ff fc2a 	bl	8013364 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8013b10:	e008      	b.n	8013b24 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8013b12:	f7fb faed 	bl	800f0f0 <HAL_GetTick>
 8013b16:	4602      	mov	r2, r0
 8013b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b1a:	1ad3      	subs	r3, r2, r3
 8013b1c:	2b03      	cmp	r3, #3
 8013b1e:	d901      	bls.n	8013b24 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8013b20:	2303      	movs	r3, #3
 8013b22:	e1ac      	b.n	8013e7e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8013b24:	f7ff fc2f 	bl	8013386 <LL_RCC_LSI2_IsReady>
 8013b28:	4603      	mov	r3, r0
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d1f1      	bne.n	8013b12 <HAL_RCC_OscConfig+0x36e>
 8013b2e:	e027      	b.n	8013b80 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8013b30:	f7ff fc18 	bl	8013364 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013b34:	f7fb fadc 	bl	800f0f0 <HAL_GetTick>
 8013b38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8013b3a:	e008      	b.n	8013b4e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8013b3c:	f7fb fad8 	bl	800f0f0 <HAL_GetTick>
 8013b40:	4602      	mov	r2, r0
 8013b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b44:	1ad3      	subs	r3, r2, r3
 8013b46:	2b03      	cmp	r3, #3
 8013b48:	d901      	bls.n	8013b4e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8013b4a:	2303      	movs	r3, #3
 8013b4c:	e197      	b.n	8013e7e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8013b4e:	f7ff fc1a 	bl	8013386 <LL_RCC_LSI2_IsReady>
 8013b52:	4603      	mov	r3, r0
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d1f1      	bne.n	8013b3c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8013b58:	f7ff fbd0 	bl	80132fc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013b5c:	f7fb fac8 	bl	800f0f0 <HAL_GetTick>
 8013b60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8013b62:	e008      	b.n	8013b76 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8013b64:	f7fb fac4 	bl	800f0f0 <HAL_GetTick>
 8013b68:	4602      	mov	r2, r0
 8013b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b6c:	1ad3      	subs	r3, r2, r3
 8013b6e:	2b02      	cmp	r3, #2
 8013b70:	d901      	bls.n	8013b76 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8013b72:	2303      	movs	r3, #3
 8013b74:	e183      	b.n	8013e7e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8013b76:	f7ff fbd2 	bl	801331e <LL_RCC_LSI1_IsReady>
 8013b7a:	4603      	mov	r3, r0
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d1f1      	bne.n	8013b64 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	f003 0304 	and.w	r3, r3, #4
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d05b      	beq.n	8013c44 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8013b8c:	4ba7      	ldr	r3, [pc, #668]	; (8013e2c <HAL_RCC_OscConfig+0x688>)
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d114      	bne.n	8013bc2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8013b98:	f7fe fbe2 	bl	8012360 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8013b9c:	f7fb faa8 	bl	800f0f0 <HAL_GetTick>
 8013ba0:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8013ba2:	e008      	b.n	8013bb6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013ba4:	f7fb faa4 	bl	800f0f0 <HAL_GetTick>
 8013ba8:	4602      	mov	r2, r0
 8013baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bac:	1ad3      	subs	r3, r2, r3
 8013bae:	2b02      	cmp	r3, #2
 8013bb0:	d901      	bls.n	8013bb6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8013bb2:	2303      	movs	r3, #3
 8013bb4:	e163      	b.n	8013e7e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8013bb6:	4b9d      	ldr	r3, [pc, #628]	; (8013e2c <HAL_RCC_OscConfig+0x688>)
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d0f0      	beq.n	8013ba4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	689b      	ldr	r3, [r3, #8]
 8013bc6:	2b01      	cmp	r3, #1
 8013bc8:	d102      	bne.n	8013bd0 <HAL_RCC_OscConfig+0x42c>
 8013bca:	f7ff fb30 	bl	801322e <LL_RCC_LSE_Enable>
 8013bce:	e00c      	b.n	8013bea <HAL_RCC_OscConfig+0x446>
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	689b      	ldr	r3, [r3, #8]
 8013bd4:	2b05      	cmp	r3, #5
 8013bd6:	d104      	bne.n	8013be2 <HAL_RCC_OscConfig+0x43e>
 8013bd8:	f7ff fb4b 	bl	8013272 <LL_RCC_LSE_EnableBypass>
 8013bdc:	f7ff fb27 	bl	801322e <LL_RCC_LSE_Enable>
 8013be0:	e003      	b.n	8013bea <HAL_RCC_OscConfig+0x446>
 8013be2:	f7ff fb35 	bl	8013250 <LL_RCC_LSE_Disable>
 8013be6:	f7ff fb55 	bl	8013294 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	689b      	ldr	r3, [r3, #8]
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d014      	beq.n	8013c1c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013bf2:	f7fb fa7d 	bl	800f0f0 <HAL_GetTick>
 8013bf6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8013bf8:	e00a      	b.n	8013c10 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013bfa:	f7fb fa79 	bl	800f0f0 <HAL_GetTick>
 8013bfe:	4602      	mov	r2, r0
 8013c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c02:	1ad3      	subs	r3, r2, r3
 8013c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8013c08:	4293      	cmp	r3, r2
 8013c0a:	d901      	bls.n	8013c10 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8013c0c:	2303      	movs	r3, #3
 8013c0e:	e136      	b.n	8013e7e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8013c10:	f7ff fb51 	bl	80132b6 <LL_RCC_LSE_IsReady>
 8013c14:	4603      	mov	r3, r0
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d0ef      	beq.n	8013bfa <HAL_RCC_OscConfig+0x456>
 8013c1a:	e013      	b.n	8013c44 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013c1c:	f7fb fa68 	bl	800f0f0 <HAL_GetTick>
 8013c20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8013c22:	e00a      	b.n	8013c3a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013c24:	f7fb fa64 	bl	800f0f0 <HAL_GetTick>
 8013c28:	4602      	mov	r2, r0
 8013c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c2c:	1ad3      	subs	r3, r2, r3
 8013c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8013c32:	4293      	cmp	r3, r2
 8013c34:	d901      	bls.n	8013c3a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8013c36:	2303      	movs	r3, #3
 8013c38:	e121      	b.n	8013e7e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8013c3a:	f7ff fb3c 	bl	80132b6 <LL_RCC_LSE_IsReady>
 8013c3e:	4603      	mov	r3, r0
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d1ef      	bne.n	8013c24 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d02c      	beq.n	8013caa <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d014      	beq.n	8013c82 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8013c58:	f7ff fab5 	bl	80131c6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013c5c:	f7fb fa48 	bl	800f0f0 <HAL_GetTick>
 8013c60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8013c62:	e008      	b.n	8013c76 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8013c64:	f7fb fa44 	bl	800f0f0 <HAL_GetTick>
 8013c68:	4602      	mov	r2, r0
 8013c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c6c:	1ad3      	subs	r3, r2, r3
 8013c6e:	2b02      	cmp	r3, #2
 8013c70:	d901      	bls.n	8013c76 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8013c72:	2303      	movs	r3, #3
 8013c74:	e103      	b.n	8013e7e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8013c76:	f7ff fac8 	bl	801320a <LL_RCC_HSI48_IsReady>
 8013c7a:	4603      	mov	r3, r0
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d0f1      	beq.n	8013c64 <HAL_RCC_OscConfig+0x4c0>
 8013c80:	e013      	b.n	8013caa <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8013c82:	f7ff fab1 	bl	80131e8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013c86:	f7fb fa33 	bl	800f0f0 <HAL_GetTick>
 8013c8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8013c8c:	e008      	b.n	8013ca0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8013c8e:	f7fb fa2f 	bl	800f0f0 <HAL_GetTick>
 8013c92:	4602      	mov	r2, r0
 8013c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c96:	1ad3      	subs	r3, r2, r3
 8013c98:	2b02      	cmp	r3, #2
 8013c9a:	d901      	bls.n	8013ca0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8013c9c:	2303      	movs	r3, #3
 8013c9e:	e0ee      	b.n	8013e7e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8013ca0:	f7ff fab3 	bl	801320a <LL_RCC_HSI48_IsReady>
 8013ca4:	4603      	mov	r3, r0
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d1f1      	bne.n	8013c8e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	f000 80e4 	beq.w	8013e7c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8013cb4:	f7ff fc11 	bl	80134da <LL_RCC_GetSysClkSource>
 8013cb8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8013cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013cbe:	68db      	ldr	r3, [r3, #12]
 8013cc0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cc6:	2b02      	cmp	r3, #2
 8013cc8:	f040 80b4 	bne.w	8013e34 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	f003 0203 	and.w	r2, r3, #3
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013cd6:	429a      	cmp	r2, r3
 8013cd8:	d123      	bne.n	8013d22 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013ce4:	429a      	cmp	r2, r3
 8013ce6:	d11c      	bne.n	8013d22 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	0a1b      	lsrs	r3, r3, #8
 8013cec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8013cf4:	429a      	cmp	r2, r3
 8013cf6:	d114      	bne.n	8013d22 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8013d02:	429a      	cmp	r2, r3
 8013d04:	d10d      	bne.n	8013d22 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8013d10:	429a      	cmp	r2, r3
 8013d12:	d106      	bne.n	8013d22 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8013d1e:	429a      	cmp	r2, r3
 8013d20:	d05d      	beq.n	8013dde <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8013d22:	693b      	ldr	r3, [r7, #16]
 8013d24:	2b0c      	cmp	r3, #12
 8013d26:	d058      	beq.n	8013dda <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8013d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d001      	beq.n	8013d3a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8013d36:	2301      	movs	r3, #1
 8013d38:	e0a1      	b.n	8013e7e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8013d3a:	f7ff fc84 	bl	8013646 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8013d3e:	f7fb f9d7 	bl	800f0f0 <HAL_GetTick>
 8013d42:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8013d44:	e008      	b.n	8013d58 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013d46:	f7fb f9d3 	bl	800f0f0 <HAL_GetTick>
 8013d4a:	4602      	mov	r2, r0
 8013d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d4e:	1ad3      	subs	r3, r2, r3
 8013d50:	2b02      	cmp	r3, #2
 8013d52:	d901      	bls.n	8013d58 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8013d54:	2303      	movs	r3, #3
 8013d56:	e092      	b.n	8013e7e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8013d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d1ef      	bne.n	8013d46 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8013d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013d6a:	68da      	ldr	r2, [r3, #12]
 8013d6c:	4b30      	ldr	r3, [pc, #192]	; (8013e30 <HAL_RCC_OscConfig+0x68c>)
 8013d6e:	4013      	ands	r3, r2
 8013d70:	687a      	ldr	r2, [r7, #4]
 8013d72:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8013d74:	687a      	ldr	r2, [r7, #4]
 8013d76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8013d78:	4311      	orrs	r1, r2
 8013d7a:	687a      	ldr	r2, [r7, #4]
 8013d7c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8013d7e:	0212      	lsls	r2, r2, #8
 8013d80:	4311      	orrs	r1, r2
 8013d82:	687a      	ldr	r2, [r7, #4]
 8013d84:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8013d86:	4311      	orrs	r1, r2
 8013d88:	687a      	ldr	r2, [r7, #4]
 8013d8a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8013d8c:	4311      	orrs	r1, r2
 8013d8e:	687a      	ldr	r2, [r7, #4]
 8013d90:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8013d92:	430a      	orrs	r2, r1
 8013d94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8013d98:	4313      	orrs	r3, r2
 8013d9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8013d9c:	f7ff fc44 	bl	8013628 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8013da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013da4:	68db      	ldr	r3, [r3, #12]
 8013da6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8013daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013dae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8013db0:	f7fb f99e 	bl	800f0f0 <HAL_GetTick>
 8013db4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8013db6:	e008      	b.n	8013dca <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013db8:	f7fb f99a 	bl	800f0f0 <HAL_GetTick>
 8013dbc:	4602      	mov	r2, r0
 8013dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dc0:	1ad3      	subs	r3, r2, r3
 8013dc2:	2b02      	cmp	r3, #2
 8013dc4:	d901      	bls.n	8013dca <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8013dc6:	2303      	movs	r3, #3
 8013dc8:	e059      	b.n	8013e7e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8013dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d0ef      	beq.n	8013db8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8013dd8:	e050      	b.n	8013e7c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8013dda:	2301      	movs	r3, #1
 8013ddc:	e04f      	b.n	8013e7e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8013dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d147      	bne.n	8013e7c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8013dec:	f7ff fc1c 	bl	8013628 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8013df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013df4:	68db      	ldr	r3, [r3, #12]
 8013df6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8013dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013dfe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8013e00:	f7fb f976 	bl	800f0f0 <HAL_GetTick>
 8013e04:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8013e06:	e008      	b.n	8013e1a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013e08:	f7fb f972 	bl	800f0f0 <HAL_GetTick>
 8013e0c:	4602      	mov	r2, r0
 8013e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e10:	1ad3      	subs	r3, r2, r3
 8013e12:	2b02      	cmp	r3, #2
 8013e14:	d901      	bls.n	8013e1a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8013e16:	2303      	movs	r3, #3
 8013e18:	e031      	b.n	8013e7e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8013e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d0ef      	beq.n	8013e08 <HAL_RCC_OscConfig+0x664>
 8013e28:	e028      	b.n	8013e7c <HAL_RCC_OscConfig+0x6d8>
 8013e2a:	bf00      	nop
 8013e2c:	58000400 	.word	0x58000400
 8013e30:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8013e34:	693b      	ldr	r3, [r7, #16]
 8013e36:	2b0c      	cmp	r3, #12
 8013e38:	d01e      	beq.n	8013e78 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013e3a:	f7ff fc04 	bl	8013646 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013e3e:	f7fb f957 	bl	800f0f0 <HAL_GetTick>
 8013e42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8013e44:	e008      	b.n	8013e58 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013e46:	f7fb f953 	bl	800f0f0 <HAL_GetTick>
 8013e4a:	4602      	mov	r2, r0
 8013e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e4e:	1ad3      	subs	r3, r2, r3
 8013e50:	2b02      	cmp	r3, #2
 8013e52:	d901      	bls.n	8013e58 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8013e54:	2303      	movs	r3, #3
 8013e56:	e012      	b.n	8013e7e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8013e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013e5c:	681b      	ldr	r3, [r3, #0]
 8013e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d1ef      	bne.n	8013e46 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8013e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013e6a:	68da      	ldr	r2, [r3, #12]
 8013e6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8013e70:	4b05      	ldr	r3, [pc, #20]	; (8013e88 <HAL_RCC_OscConfig+0x6e4>)
 8013e72:	4013      	ands	r3, r2
 8013e74:	60cb      	str	r3, [r1, #12]
 8013e76:	e001      	b.n	8013e7c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8013e78:	2301      	movs	r3, #1
 8013e7a:	e000      	b.n	8013e7e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8013e7c:	2300      	movs	r3, #0
}
 8013e7e:	4618      	mov	r0, r3
 8013e80:	3734      	adds	r7, #52	; 0x34
 8013e82:	46bd      	mov	sp, r7
 8013e84:	bd90      	pop	{r4, r7, pc}
 8013e86:	bf00      	nop
 8013e88:	eefefffc 	.word	0xeefefffc

08013e8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8013e8c:	b580      	push	{r7, lr}
 8013e8e:	b084      	sub	sp, #16
 8013e90:	af00      	add	r7, sp, #0
 8013e92:	6078      	str	r0, [r7, #4]
 8013e94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d101      	bne.n	8013ea0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8013e9c:	2301      	movs	r3, #1
 8013e9e:	e12d      	b.n	80140fc <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8013ea0:	4b98      	ldr	r3, [pc, #608]	; (8014104 <HAL_RCC_ClockConfig+0x278>)
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	f003 0307 	and.w	r3, r3, #7
 8013ea8:	683a      	ldr	r2, [r7, #0]
 8013eaa:	429a      	cmp	r2, r3
 8013eac:	d91b      	bls.n	8013ee6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013eae:	4b95      	ldr	r3, [pc, #596]	; (8014104 <HAL_RCC_ClockConfig+0x278>)
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	f023 0207 	bic.w	r2, r3, #7
 8013eb6:	4993      	ldr	r1, [pc, #588]	; (8014104 <HAL_RCC_ClockConfig+0x278>)
 8013eb8:	683b      	ldr	r3, [r7, #0]
 8013eba:	4313      	orrs	r3, r2
 8013ebc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013ebe:	f7fb f917 	bl	800f0f0 <HAL_GetTick>
 8013ec2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8013ec4:	e008      	b.n	8013ed8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8013ec6:	f7fb f913 	bl	800f0f0 <HAL_GetTick>
 8013eca:	4602      	mov	r2, r0
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	1ad3      	subs	r3, r2, r3
 8013ed0:	2b02      	cmp	r3, #2
 8013ed2:	d901      	bls.n	8013ed8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8013ed4:	2303      	movs	r3, #3
 8013ed6:	e111      	b.n	80140fc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8013ed8:	4b8a      	ldr	r3, [pc, #552]	; (8014104 <HAL_RCC_ClockConfig+0x278>)
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	f003 0307 	and.w	r3, r3, #7
 8013ee0:	683a      	ldr	r2, [r7, #0]
 8013ee2:	429a      	cmp	r2, r3
 8013ee4:	d1ef      	bne.n	8013ec6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	f003 0302 	and.w	r3, r3, #2
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d016      	beq.n	8013f20 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	689b      	ldr	r3, [r3, #8]
 8013ef6:	4618      	mov	r0, r3
 8013ef8:	f7ff fafb 	bl	80134f2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8013efc:	f7fb f8f8 	bl	800f0f0 <HAL_GetTick>
 8013f00:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8013f02:	e008      	b.n	8013f16 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8013f04:	f7fb f8f4 	bl	800f0f0 <HAL_GetTick>
 8013f08:	4602      	mov	r2, r0
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	1ad3      	subs	r3, r2, r3
 8013f0e:	2b02      	cmp	r3, #2
 8013f10:	d901      	bls.n	8013f16 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8013f12:	2303      	movs	r3, #3
 8013f14:	e0f2      	b.n	80140fc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8013f16:	f7ff fbe8 	bl	80136ea <LL_RCC_IsActiveFlag_HPRE>
 8013f1a:	4603      	mov	r3, r0
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d0f1      	beq.n	8013f04 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	f003 0320 	and.w	r3, r3, #32
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d016      	beq.n	8013f5a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	695b      	ldr	r3, [r3, #20]
 8013f30:	4618      	mov	r0, r3
 8013f32:	f7ff faf2 	bl	801351a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8013f36:	f7fb f8db 	bl	800f0f0 <HAL_GetTick>
 8013f3a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8013f3c:	e008      	b.n	8013f50 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8013f3e:	f7fb f8d7 	bl	800f0f0 <HAL_GetTick>
 8013f42:	4602      	mov	r2, r0
 8013f44:	68fb      	ldr	r3, [r7, #12]
 8013f46:	1ad3      	subs	r3, r2, r3
 8013f48:	2b02      	cmp	r3, #2
 8013f4a:	d901      	bls.n	8013f50 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8013f4c:	2303      	movs	r3, #3
 8013f4e:	e0d5      	b.n	80140fc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8013f50:	f7ff fbdd 	bl	801370e <LL_RCC_IsActiveFlag_C2HPRE>
 8013f54:	4603      	mov	r3, r0
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d0f1      	beq.n	8013f3e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	681b      	ldr	r3, [r3, #0]
 8013f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d016      	beq.n	8013f94 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	699b      	ldr	r3, [r3, #24]
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	f7ff faeb 	bl	8013546 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8013f70:	f7fb f8be 	bl	800f0f0 <HAL_GetTick>
 8013f74:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8013f76:	e008      	b.n	8013f8a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8013f78:	f7fb f8ba 	bl	800f0f0 <HAL_GetTick>
 8013f7c:	4602      	mov	r2, r0
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	1ad3      	subs	r3, r2, r3
 8013f82:	2b02      	cmp	r3, #2
 8013f84:	d901      	bls.n	8013f8a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8013f86:	2303      	movs	r3, #3
 8013f88:	e0b8      	b.n	80140fc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8013f8a:	f7ff fbd3 	bl	8013734 <LL_RCC_IsActiveFlag_SHDHPRE>
 8013f8e:	4603      	mov	r3, r0
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d0f1      	beq.n	8013f78 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	f003 0304 	and.w	r3, r3, #4
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d016      	beq.n	8013fce <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	68db      	ldr	r3, [r3, #12]
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	f7ff fae5 	bl	8013574 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8013faa:	f7fb f8a1 	bl	800f0f0 <HAL_GetTick>
 8013fae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8013fb0:	e008      	b.n	8013fc4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8013fb2:	f7fb f89d 	bl	800f0f0 <HAL_GetTick>
 8013fb6:	4602      	mov	r2, r0
 8013fb8:	68fb      	ldr	r3, [r7, #12]
 8013fba:	1ad3      	subs	r3, r2, r3
 8013fbc:	2b02      	cmp	r3, #2
 8013fbe:	d901      	bls.n	8013fc4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8013fc0:	2303      	movs	r3, #3
 8013fc2:	e09b      	b.n	80140fc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8013fc4:	f7ff fbc9 	bl	801375a <LL_RCC_IsActiveFlag_PPRE1>
 8013fc8:	4603      	mov	r3, r0
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d0f1      	beq.n	8013fb2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	f003 0308 	and.w	r3, r3, #8
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d017      	beq.n	801400a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	691b      	ldr	r3, [r3, #16]
 8013fde:	00db      	lsls	r3, r3, #3
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	f7ff fadb 	bl	801359c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8013fe6:	f7fb f883 	bl	800f0f0 <HAL_GetTick>
 8013fea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8013fec:	e008      	b.n	8014000 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8013fee:	f7fb f87f 	bl	800f0f0 <HAL_GetTick>
 8013ff2:	4602      	mov	r2, r0
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	1ad3      	subs	r3, r2, r3
 8013ff8:	2b02      	cmp	r3, #2
 8013ffa:	d901      	bls.n	8014000 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8013ffc:	2303      	movs	r3, #3
 8013ffe:	e07d      	b.n	80140fc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8014000:	f7ff fbbd 	bl	801377e <LL_RCC_IsActiveFlag_PPRE2>
 8014004:	4603      	mov	r3, r0
 8014006:	2b00      	cmp	r3, #0
 8014008:	d0f1      	beq.n	8013fee <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	681b      	ldr	r3, [r3, #0]
 801400e:	f003 0301 	and.w	r3, r3, #1
 8014012:	2b00      	cmp	r3, #0
 8014014:	d043      	beq.n	801409e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	685b      	ldr	r3, [r3, #4]
 801401a:	2b02      	cmp	r3, #2
 801401c:	d106      	bne.n	801402c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 801401e:	f7ff f87b 	bl	8013118 <LL_RCC_HSE_IsReady>
 8014022:	4603      	mov	r3, r0
 8014024:	2b00      	cmp	r3, #0
 8014026:	d11e      	bne.n	8014066 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8014028:	2301      	movs	r3, #1
 801402a:	e067      	b.n	80140fc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	685b      	ldr	r3, [r3, #4]
 8014030:	2b03      	cmp	r3, #3
 8014032:	d106      	bne.n	8014042 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8014034:	f7ff fb16 	bl	8013664 <LL_RCC_PLL_IsReady>
 8014038:	4603      	mov	r3, r0
 801403a:	2b00      	cmp	r3, #0
 801403c:	d113      	bne.n	8014066 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 801403e:	2301      	movs	r3, #1
 8014040:	e05c      	b.n	80140fc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	685b      	ldr	r3, [r3, #4]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d106      	bne.n	8014058 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 801404a:	f7ff f9e3 	bl	8013414 <LL_RCC_MSI_IsReady>
 801404e:	4603      	mov	r3, r0
 8014050:	2b00      	cmp	r3, #0
 8014052:	d108      	bne.n	8014066 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8014054:	2301      	movs	r3, #1
 8014056:	e051      	b.n	80140fc <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8014058:	f7ff f88e 	bl	8013178 <LL_RCC_HSI_IsReady>
 801405c:	4603      	mov	r3, r0
 801405e:	2b00      	cmp	r3, #0
 8014060:	d101      	bne.n	8014066 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8014062:	2301      	movs	r3, #1
 8014064:	e04a      	b.n	80140fc <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	685b      	ldr	r3, [r3, #4]
 801406a:	4618      	mov	r0, r3
 801406c:	f7ff fa21 	bl	80134b2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014070:	f7fb f83e 	bl	800f0f0 <HAL_GetTick>
 8014074:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8014076:	e00a      	b.n	801408e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014078:	f7fb f83a 	bl	800f0f0 <HAL_GetTick>
 801407c:	4602      	mov	r2, r0
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	1ad3      	subs	r3, r2, r3
 8014082:	f241 3288 	movw	r2, #5000	; 0x1388
 8014086:	4293      	cmp	r3, r2
 8014088:	d901      	bls.n	801408e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 801408a:	2303      	movs	r3, #3
 801408c:	e036      	b.n	80140fc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801408e:	f7ff fa24 	bl	80134da <LL_RCC_GetSysClkSource>
 8014092:	4602      	mov	r2, r0
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	685b      	ldr	r3, [r3, #4]
 8014098:	009b      	lsls	r3, r3, #2
 801409a:	429a      	cmp	r2, r3
 801409c:	d1ec      	bne.n	8014078 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801409e:	4b19      	ldr	r3, [pc, #100]	; (8014104 <HAL_RCC_ClockConfig+0x278>)
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	f003 0307 	and.w	r3, r3, #7
 80140a6:	683a      	ldr	r2, [r7, #0]
 80140a8:	429a      	cmp	r2, r3
 80140aa:	d21b      	bcs.n	80140e4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80140ac:	4b15      	ldr	r3, [pc, #84]	; (8014104 <HAL_RCC_ClockConfig+0x278>)
 80140ae:	681b      	ldr	r3, [r3, #0]
 80140b0:	f023 0207 	bic.w	r2, r3, #7
 80140b4:	4913      	ldr	r1, [pc, #76]	; (8014104 <HAL_RCC_ClockConfig+0x278>)
 80140b6:	683b      	ldr	r3, [r7, #0]
 80140b8:	4313      	orrs	r3, r2
 80140ba:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80140bc:	f7fb f818 	bl	800f0f0 <HAL_GetTick>
 80140c0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80140c2:	e008      	b.n	80140d6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80140c4:	f7fb f814 	bl	800f0f0 <HAL_GetTick>
 80140c8:	4602      	mov	r2, r0
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	1ad3      	subs	r3, r2, r3
 80140ce:	2b02      	cmp	r3, #2
 80140d0:	d901      	bls.n	80140d6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80140d2:	2303      	movs	r3, #3
 80140d4:	e012      	b.n	80140fc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80140d6:	4b0b      	ldr	r3, [pc, #44]	; (8014104 <HAL_RCC_ClockConfig+0x278>)
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	f003 0307 	and.w	r3, r3, #7
 80140de:	683a      	ldr	r2, [r7, #0]
 80140e0:	429a      	cmp	r2, r3
 80140e2:	d1ef      	bne.n	80140c4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80140e4:	f000 f87e 	bl	80141e4 <HAL_RCC_GetHCLKFreq>
 80140e8:	4603      	mov	r3, r0
 80140ea:	4a07      	ldr	r2, [pc, #28]	; (8014108 <HAL_RCC_ClockConfig+0x27c>)
 80140ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80140ee:	f7fb f80b 	bl	800f108 <HAL_GetTickPrio>
 80140f2:	4603      	mov	r3, r0
 80140f4:	4618      	mov	r0, r3
 80140f6:	f7fa ffad 	bl	800f054 <HAL_InitTick>
 80140fa:	4603      	mov	r3, r0
}
 80140fc:	4618      	mov	r0, r3
 80140fe:	3710      	adds	r7, #16
 8014100:	46bd      	mov	sp, r7
 8014102:	bd80      	pop	{r7, pc}
 8014104:	58004000 	.word	0x58004000
 8014108:	2000007c 	.word	0x2000007c

0801410c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801410c:	b590      	push	{r4, r7, lr}
 801410e:	b085      	sub	sp, #20
 8014110:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014112:	f7ff f9e2 	bl	80134da <LL_RCC_GetSysClkSource>
 8014116:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	2b00      	cmp	r3, #0
 801411c:	d10a      	bne.n	8014134 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 801411e:	f7ff f99e 	bl	801345e <LL_RCC_MSI_GetRange>
 8014122:	4603      	mov	r3, r0
 8014124:	091b      	lsrs	r3, r3, #4
 8014126:	f003 030f 	and.w	r3, r3, #15
 801412a:	4a2b      	ldr	r2, [pc, #172]	; (80141d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 801412c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014130:	60fb      	str	r3, [r7, #12]
 8014132:	e04b      	b.n	80141cc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	2b04      	cmp	r3, #4
 8014138:	d102      	bne.n	8014140 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801413a:	4b28      	ldr	r3, [pc, #160]	; (80141dc <HAL_RCC_GetSysClockFreq+0xd0>)
 801413c:	60fb      	str	r3, [r7, #12]
 801413e:	e045      	b.n	80141cc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	2b08      	cmp	r3, #8
 8014144:	d10a      	bne.n	801415c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8014146:	f7fe ffb7 	bl	80130b8 <LL_RCC_HSE_IsEnabledDiv2>
 801414a:	4603      	mov	r3, r0
 801414c:	2b01      	cmp	r3, #1
 801414e:	d102      	bne.n	8014156 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8014150:	4b22      	ldr	r3, [pc, #136]	; (80141dc <HAL_RCC_GetSysClockFreq+0xd0>)
 8014152:	60fb      	str	r3, [r7, #12]
 8014154:	e03a      	b.n	80141cc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8014156:	4b22      	ldr	r3, [pc, #136]	; (80141e0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8014158:	60fb      	str	r3, [r7, #12]
 801415a:	e037      	b.n	80141cc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 801415c:	f7ff fab9 	bl	80136d2 <LL_RCC_PLL_GetMainSource>
 8014160:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8014162:	683b      	ldr	r3, [r7, #0]
 8014164:	2b02      	cmp	r3, #2
 8014166:	d003      	beq.n	8014170 <HAL_RCC_GetSysClockFreq+0x64>
 8014168:	683b      	ldr	r3, [r7, #0]
 801416a:	2b03      	cmp	r3, #3
 801416c:	d003      	beq.n	8014176 <HAL_RCC_GetSysClockFreq+0x6a>
 801416e:	e00d      	b.n	801418c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8014170:	4b1a      	ldr	r3, [pc, #104]	; (80141dc <HAL_RCC_GetSysClockFreq+0xd0>)
 8014172:	60bb      	str	r3, [r7, #8]
        break;
 8014174:	e015      	b.n	80141a2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8014176:	f7fe ff9f 	bl	80130b8 <LL_RCC_HSE_IsEnabledDiv2>
 801417a:	4603      	mov	r3, r0
 801417c:	2b01      	cmp	r3, #1
 801417e:	d102      	bne.n	8014186 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8014180:	4b16      	ldr	r3, [pc, #88]	; (80141dc <HAL_RCC_GetSysClockFreq+0xd0>)
 8014182:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8014184:	e00d      	b.n	80141a2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8014186:	4b16      	ldr	r3, [pc, #88]	; (80141e0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8014188:	60bb      	str	r3, [r7, #8]
        break;
 801418a:	e00a      	b.n	80141a2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 801418c:	f7ff f967 	bl	801345e <LL_RCC_MSI_GetRange>
 8014190:	4603      	mov	r3, r0
 8014192:	091b      	lsrs	r3, r3, #4
 8014194:	f003 030f 	and.w	r3, r3, #15
 8014198:	4a0f      	ldr	r2, [pc, #60]	; (80141d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 801419a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801419e:	60bb      	str	r3, [r7, #8]
        break;
 80141a0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80141a2:	f7ff fa71 	bl	8013688 <LL_RCC_PLL_GetN>
 80141a6:	4602      	mov	r2, r0
 80141a8:	68bb      	ldr	r3, [r7, #8]
 80141aa:	fb03 f402 	mul.w	r4, r3, r2
 80141ae:	f7ff fa84 	bl	80136ba <LL_RCC_PLL_GetDivider>
 80141b2:	4603      	mov	r3, r0
 80141b4:	091b      	lsrs	r3, r3, #4
 80141b6:	3301      	adds	r3, #1
 80141b8:	fbb4 f4f3 	udiv	r4, r4, r3
 80141bc:	f7ff fa71 	bl	80136a2 <LL_RCC_PLL_GetR>
 80141c0:	4603      	mov	r3, r0
 80141c2:	0f5b      	lsrs	r3, r3, #29
 80141c4:	3301      	adds	r3, #1
 80141c6:	fbb4 f3f3 	udiv	r3, r4, r3
 80141ca:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80141cc:	68fb      	ldr	r3, [r7, #12]
}
 80141ce:	4618      	mov	r0, r3
 80141d0:	3714      	adds	r7, #20
 80141d2:	46bd      	mov	sp, r7
 80141d4:	bd90      	pop	{r4, r7, pc}
 80141d6:	bf00      	nop
 80141d8:	0801dd68 	.word	0x0801dd68
 80141dc:	00f42400 	.word	0x00f42400
 80141e0:	01e84800 	.word	0x01e84800

080141e4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80141e4:	b598      	push	{r3, r4, r7, lr}
 80141e6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80141e8:	f7ff ff90 	bl	801410c <HAL_RCC_GetSysClockFreq>
 80141ec:	4604      	mov	r4, r0
 80141ee:	f7ff f9e9 	bl	80135c4 <LL_RCC_GetAHBPrescaler>
 80141f2:	4603      	mov	r3, r0
 80141f4:	091b      	lsrs	r3, r3, #4
 80141f6:	f003 030f 	and.w	r3, r3, #15
 80141fa:	4a03      	ldr	r2, [pc, #12]	; (8014208 <HAL_RCC_GetHCLKFreq+0x24>)
 80141fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014200:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8014204:	4618      	mov	r0, r3
 8014206:	bd98      	pop	{r3, r4, r7, pc}
 8014208:	0801dd08 	.word	0x0801dd08

0801420c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801420c:	b598      	push	{r3, r4, r7, lr}
 801420e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8014210:	f7ff ffe8 	bl	80141e4 <HAL_RCC_GetHCLKFreq>
 8014214:	4604      	mov	r4, r0
 8014216:	f7ff f9ef 	bl	80135f8 <LL_RCC_GetAPB1Prescaler>
 801421a:	4603      	mov	r3, r0
 801421c:	0a1b      	lsrs	r3, r3, #8
 801421e:	f003 0307 	and.w	r3, r3, #7
 8014222:	4a04      	ldr	r2, [pc, #16]	; (8014234 <HAL_RCC_GetPCLK1Freq+0x28>)
 8014224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014228:	f003 031f 	and.w	r3, r3, #31
 801422c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8014230:	4618      	mov	r0, r3
 8014232:	bd98      	pop	{r3, r4, r7, pc}
 8014234:	0801dd48 	.word	0x0801dd48

08014238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8014238:	b598      	push	{r3, r4, r7, lr}
 801423a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 801423c:	f7ff ffd2 	bl	80141e4 <HAL_RCC_GetHCLKFreq>
 8014240:	4604      	mov	r4, r0
 8014242:	f7ff f9e5 	bl	8013610 <LL_RCC_GetAPB2Prescaler>
 8014246:	4603      	mov	r3, r0
 8014248:	0adb      	lsrs	r3, r3, #11
 801424a:	f003 0307 	and.w	r3, r3, #7
 801424e:	4a04      	ldr	r2, [pc, #16]	; (8014260 <HAL_RCC_GetPCLK2Freq+0x28>)
 8014250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014254:	f003 031f 	and.w	r3, r3, #31
 8014258:	fa24 f303 	lsr.w	r3, r4, r3
}
 801425c:	4618      	mov	r0, r3
 801425e:	bd98      	pop	{r3, r4, r7, pc}
 8014260:	0801dd48 	.word	0x0801dd48

08014264 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8014264:	b590      	push	{r4, r7, lr}
 8014266:	b085      	sub	sp, #20
 8014268:	af00      	add	r7, sp, #0
 801426a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	2bb0      	cmp	r3, #176	; 0xb0
 8014270:	d903      	bls.n	801427a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8014272:	4b15      	ldr	r3, [pc, #84]	; (80142c8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8014274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014276:	60fb      	str	r3, [r7, #12]
 8014278:	e007      	b.n	801428a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	091b      	lsrs	r3, r3, #4
 801427e:	f003 030f 	and.w	r3, r3, #15
 8014282:	4a11      	ldr	r2, [pc, #68]	; (80142c8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8014284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014288:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 801428a:	f7ff f9a7 	bl	80135dc <LL_RCC_GetAHB4Prescaler>
 801428e:	4603      	mov	r3, r0
 8014290:	091b      	lsrs	r3, r3, #4
 8014292:	f003 030f 	and.w	r3, r3, #15
 8014296:	4a0d      	ldr	r2, [pc, #52]	; (80142cc <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8014298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801429c:	68fa      	ldr	r2, [r7, #12]
 801429e:	fbb2 f3f3 	udiv	r3, r2, r3
 80142a2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80142a4:	68bb      	ldr	r3, [r7, #8]
 80142a6:	4a0a      	ldr	r2, [pc, #40]	; (80142d0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80142a8:	fba2 2303 	umull	r2, r3, r2, r3
 80142ac:	0c9c      	lsrs	r4, r3, #18
 80142ae:	f7fe f867 	bl	8012380 <HAL_PWREx_GetVoltageRange>
 80142b2:	4603      	mov	r3, r0
 80142b4:	4619      	mov	r1, r3
 80142b6:	4620      	mov	r0, r4
 80142b8:	f000 f80c 	bl	80142d4 <RCC_SetFlashLatency>
 80142bc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80142be:	4618      	mov	r0, r3
 80142c0:	3714      	adds	r7, #20
 80142c2:	46bd      	mov	sp, r7
 80142c4:	bd90      	pop	{r4, r7, pc}
 80142c6:	bf00      	nop
 80142c8:	0801dd68 	.word	0x0801dd68
 80142cc:	0801dd08 	.word	0x0801dd08
 80142d0:	431bde83 	.word	0x431bde83

080142d4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80142d4:	b590      	push	{r4, r7, lr}
 80142d6:	b093      	sub	sp, #76	; 0x4c
 80142d8:	af00      	add	r7, sp, #0
 80142da:	6078      	str	r0, [r7, #4]
 80142dc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80142de:	4b37      	ldr	r3, [pc, #220]	; (80143bc <RCC_SetFlashLatency+0xe8>)
 80142e0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80142e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80142e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80142ea:	4a35      	ldr	r2, [pc, #212]	; (80143c0 <RCC_SetFlashLatency+0xec>)
 80142ec:	f107 031c 	add.w	r3, r7, #28
 80142f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80142f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80142f6:	4b33      	ldr	r3, [pc, #204]	; (80143c4 <RCC_SetFlashLatency+0xf0>)
 80142f8:	f107 040c 	add.w	r4, r7, #12
 80142fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80142fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8014302:	2300      	movs	r3, #0
 8014304:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8014306:	683b      	ldr	r3, [r7, #0]
 8014308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801430c:	d11a      	bne.n	8014344 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 801430e:	2300      	movs	r3, #0
 8014310:	643b      	str	r3, [r7, #64]	; 0x40
 8014312:	e013      	b.n	801433c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8014314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014316:	009b      	lsls	r3, r3, #2
 8014318:	3348      	adds	r3, #72	; 0x48
 801431a:	443b      	add	r3, r7
 801431c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8014320:	687a      	ldr	r2, [r7, #4]
 8014322:	429a      	cmp	r2, r3
 8014324:	d807      	bhi.n	8014336 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8014326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014328:	009b      	lsls	r3, r3, #2
 801432a:	3348      	adds	r3, #72	; 0x48
 801432c:	443b      	add	r3, r7
 801432e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8014332:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8014334:	e020      	b.n	8014378 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8014336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014338:	3301      	adds	r3, #1
 801433a:	643b      	str	r3, [r7, #64]	; 0x40
 801433c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801433e:	2b03      	cmp	r3, #3
 8014340:	d9e8      	bls.n	8014314 <RCC_SetFlashLatency+0x40>
 8014342:	e019      	b.n	8014378 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8014344:	2300      	movs	r3, #0
 8014346:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014348:	e013      	b.n	8014372 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 801434a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801434c:	009b      	lsls	r3, r3, #2
 801434e:	3348      	adds	r3, #72	; 0x48
 8014350:	443b      	add	r3, r7
 8014352:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8014356:	687a      	ldr	r2, [r7, #4]
 8014358:	429a      	cmp	r2, r3
 801435a:	d807      	bhi.n	801436c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 801435c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801435e:	009b      	lsls	r3, r3, #2
 8014360:	3348      	adds	r3, #72	; 0x48
 8014362:	443b      	add	r3, r7
 8014364:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8014368:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 801436a:	e005      	b.n	8014378 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 801436c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801436e:	3301      	adds	r3, #1
 8014370:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014374:	2b02      	cmp	r3, #2
 8014376:	d9e8      	bls.n	801434a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8014378:	4b13      	ldr	r3, [pc, #76]	; (80143c8 <RCC_SetFlashLatency+0xf4>)
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	f023 0207 	bic.w	r2, r3, #7
 8014380:	4911      	ldr	r1, [pc, #68]	; (80143c8 <RCC_SetFlashLatency+0xf4>)
 8014382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014384:	4313      	orrs	r3, r2
 8014386:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8014388:	f7fa feb2 	bl	800f0f0 <HAL_GetTick>
 801438c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 801438e:	e008      	b.n	80143a2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8014390:	f7fa feae 	bl	800f0f0 <HAL_GetTick>
 8014394:	4602      	mov	r2, r0
 8014396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014398:	1ad3      	subs	r3, r2, r3
 801439a:	2b02      	cmp	r3, #2
 801439c:	d901      	bls.n	80143a2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 801439e:	2303      	movs	r3, #3
 80143a0:	e007      	b.n	80143b2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80143a2:	4b09      	ldr	r3, [pc, #36]	; (80143c8 <RCC_SetFlashLatency+0xf4>)
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	f003 0307 	and.w	r3, r3, #7
 80143aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80143ac:	429a      	cmp	r2, r3
 80143ae:	d1ef      	bne.n	8014390 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80143b0:	2300      	movs	r3, #0
}
 80143b2:	4618      	mov	r0, r3
 80143b4:	374c      	adds	r7, #76	; 0x4c
 80143b6:	46bd      	mov	sp, r7
 80143b8:	bd90      	pop	{r4, r7, pc}
 80143ba:	bf00      	nop
 80143bc:	0801db84 	.word	0x0801db84
 80143c0:	0801db94 	.word	0x0801db94
 80143c4:	0801dba0 	.word	0x0801dba0
 80143c8:	58004000 	.word	0x58004000

080143cc <LL_RCC_LSE_IsEnabled>:
{
 80143cc:	b480      	push	{r7}
 80143ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80143d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80143d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80143d8:	f003 0301 	and.w	r3, r3, #1
 80143dc:	2b01      	cmp	r3, #1
 80143de:	d101      	bne.n	80143e4 <LL_RCC_LSE_IsEnabled+0x18>
 80143e0:	2301      	movs	r3, #1
 80143e2:	e000      	b.n	80143e6 <LL_RCC_LSE_IsEnabled+0x1a>
 80143e4:	2300      	movs	r3, #0
}
 80143e6:	4618      	mov	r0, r3
 80143e8:	46bd      	mov	sp, r7
 80143ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ee:	4770      	bx	lr

080143f0 <LL_RCC_LSE_IsReady>:
{
 80143f0:	b480      	push	{r7}
 80143f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80143f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80143f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80143fc:	f003 0302 	and.w	r3, r3, #2
 8014400:	2b02      	cmp	r3, #2
 8014402:	d101      	bne.n	8014408 <LL_RCC_LSE_IsReady+0x18>
 8014404:	2301      	movs	r3, #1
 8014406:	e000      	b.n	801440a <LL_RCC_LSE_IsReady+0x1a>
 8014408:	2300      	movs	r3, #0
}
 801440a:	4618      	mov	r0, r3
 801440c:	46bd      	mov	sp, r7
 801440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014412:	4770      	bx	lr

08014414 <LL_RCC_SetRFWKPClockSource>:
{
 8014414:	b480      	push	{r7}
 8014416:	b083      	sub	sp, #12
 8014418:	af00      	add	r7, sp, #0
 801441a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 801441c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014420:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014424:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8014428:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	4313      	orrs	r3, r2
 8014430:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8014434:	bf00      	nop
 8014436:	370c      	adds	r7, #12
 8014438:	46bd      	mov	sp, r7
 801443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801443e:	4770      	bx	lr

08014440 <LL_RCC_SetSMPSClockSource>:
{
 8014440:	b480      	push	{r7}
 8014442:	b083      	sub	sp, #12
 8014444:	af00      	add	r7, sp, #0
 8014446:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8014448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801444e:	f023 0203 	bic.w	r2, r3, #3
 8014452:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	4313      	orrs	r3, r2
 801445a:	624b      	str	r3, [r1, #36]	; 0x24
}
 801445c:	bf00      	nop
 801445e:	370c      	adds	r7, #12
 8014460:	46bd      	mov	sp, r7
 8014462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014466:	4770      	bx	lr

08014468 <LL_RCC_SetSMPSPrescaler>:
{
 8014468:	b480      	push	{r7}
 801446a:	b083      	sub	sp, #12
 801446c:	af00      	add	r7, sp, #0
 801446e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8014470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014476:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801447a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	4313      	orrs	r3, r2
 8014482:	624b      	str	r3, [r1, #36]	; 0x24
}
 8014484:	bf00      	nop
 8014486:	370c      	adds	r7, #12
 8014488:	46bd      	mov	sp, r7
 801448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801448e:	4770      	bx	lr

08014490 <LL_RCC_SetUSARTClockSource>:
{
 8014490:	b480      	push	{r7}
 8014492:	b083      	sub	sp, #12
 8014494:	af00      	add	r7, sp, #0
 8014496:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8014498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801449c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80144a0:	f023 0203 	bic.w	r2, r3, #3
 80144a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	4313      	orrs	r3, r2
 80144ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80144b0:	bf00      	nop
 80144b2:	370c      	adds	r7, #12
 80144b4:	46bd      	mov	sp, r7
 80144b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ba:	4770      	bx	lr

080144bc <LL_RCC_SetLPUARTClockSource>:
{
 80144bc:	b480      	push	{r7}
 80144be:	b083      	sub	sp, #12
 80144c0:	af00      	add	r7, sp, #0
 80144c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80144c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80144c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80144cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80144d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	4313      	orrs	r3, r2
 80144d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80144dc:	bf00      	nop
 80144de:	370c      	adds	r7, #12
 80144e0:	46bd      	mov	sp, r7
 80144e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144e6:	4770      	bx	lr

080144e8 <LL_RCC_SetI2CClockSource>:
{
 80144e8:	b480      	push	{r7}
 80144ea:	b083      	sub	sp, #12
 80144ec:	af00      	add	r7, sp, #0
 80144ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80144f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80144f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	091b      	lsrs	r3, r3, #4
 80144fc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8014500:	43db      	mvns	r3, r3
 8014502:	401a      	ands	r2, r3
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	011b      	lsls	r3, r3, #4
 8014508:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 801450c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8014510:	4313      	orrs	r3, r2
 8014512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8014516:	bf00      	nop
 8014518:	370c      	adds	r7, #12
 801451a:	46bd      	mov	sp, r7
 801451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014520:	4770      	bx	lr

08014522 <LL_RCC_SetLPTIMClockSource>:
{
 8014522:	b480      	push	{r7}
 8014524:	b083      	sub	sp, #12
 8014526:	af00      	add	r7, sp, #0
 8014528:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 801452a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801452e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	0c1b      	lsrs	r3, r3, #16
 8014536:	041b      	lsls	r3, r3, #16
 8014538:	43db      	mvns	r3, r3
 801453a:	401a      	ands	r2, r3
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	041b      	lsls	r3, r3, #16
 8014540:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8014544:	4313      	orrs	r3, r2
 8014546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801454a:	bf00      	nop
 801454c:	370c      	adds	r7, #12
 801454e:	46bd      	mov	sp, r7
 8014550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014554:	4770      	bx	lr

08014556 <LL_RCC_SetSAIClockSource>:
{
 8014556:	b480      	push	{r7}
 8014558:	b083      	sub	sp, #12
 801455a:	af00      	add	r7, sp, #0
 801455c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 801455e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014566:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801456a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	4313      	orrs	r3, r2
 8014572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8014576:	bf00      	nop
 8014578:	370c      	adds	r7, #12
 801457a:	46bd      	mov	sp, r7
 801457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014580:	4770      	bx	lr

08014582 <LL_RCC_SetRNGClockSource>:
{
 8014582:	b480      	push	{r7}
 8014584:	b083      	sub	sp, #12
 8014586:	af00      	add	r7, sp, #0
 8014588:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 801458a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801458e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014592:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8014596:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	4313      	orrs	r3, r2
 801459e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80145a2:	bf00      	nop
 80145a4:	370c      	adds	r7, #12
 80145a6:	46bd      	mov	sp, r7
 80145a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ac:	4770      	bx	lr

080145ae <LL_RCC_SetCLK48ClockSource>:
{
 80145ae:	b480      	push	{r7}
 80145b0:	b083      	sub	sp, #12
 80145b2:	af00      	add	r7, sp, #0
 80145b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80145b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80145ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80145be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80145c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	4313      	orrs	r3, r2
 80145ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80145ce:	bf00      	nop
 80145d0:	370c      	adds	r7, #12
 80145d2:	46bd      	mov	sp, r7
 80145d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d8:	4770      	bx	lr

080145da <LL_RCC_SetUSBClockSource>:
{
 80145da:	b580      	push	{r7, lr}
 80145dc:	b082      	sub	sp, #8
 80145de:	af00      	add	r7, sp, #0
 80145e0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80145e2:	6878      	ldr	r0, [r7, #4]
 80145e4:	f7ff ffe3 	bl	80145ae <LL_RCC_SetCLK48ClockSource>
}
 80145e8:	bf00      	nop
 80145ea:	3708      	adds	r7, #8
 80145ec:	46bd      	mov	sp, r7
 80145ee:	bd80      	pop	{r7, pc}

080145f0 <LL_RCC_SetADCClockSource>:
{
 80145f0:	b480      	push	{r7}
 80145f2:	b083      	sub	sp, #12
 80145f4:	af00      	add	r7, sp, #0
 80145f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80145f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80145fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014600:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8014604:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	4313      	orrs	r3, r2
 801460c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8014610:	bf00      	nop
 8014612:	370c      	adds	r7, #12
 8014614:	46bd      	mov	sp, r7
 8014616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801461a:	4770      	bx	lr

0801461c <LL_RCC_SetRTCClockSource>:
{
 801461c:	b480      	push	{r7}
 801461e:	b083      	sub	sp, #12
 8014620:	af00      	add	r7, sp, #0
 8014622:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8014624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801462c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8014630:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	4313      	orrs	r3, r2
 8014638:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 801463c:	bf00      	nop
 801463e:	370c      	adds	r7, #12
 8014640:	46bd      	mov	sp, r7
 8014642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014646:	4770      	bx	lr

08014648 <LL_RCC_GetRTCClockSource>:
{
 8014648:	b480      	push	{r7}
 801464a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 801464c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014654:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8014658:	4618      	mov	r0, r3
 801465a:	46bd      	mov	sp, r7
 801465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014660:	4770      	bx	lr

08014662 <LL_RCC_ForceBackupDomainReset>:
{
 8014662:	b480      	push	{r7}
 8014664:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8014666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801466a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801466e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8014672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014676:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801467a:	bf00      	nop
 801467c:	46bd      	mov	sp, r7
 801467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014682:	4770      	bx	lr

08014684 <LL_RCC_ReleaseBackupDomainReset>:
{
 8014684:	b480      	push	{r7}
 8014686:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8014688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801468c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014690:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8014694:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014698:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801469c:	bf00      	nop
 801469e:	46bd      	mov	sp, r7
 80146a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146a4:	4770      	bx	lr

080146a6 <LL_RCC_PLLSAI1_Enable>:
{
 80146a6:	b480      	push	{r7}
 80146a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80146aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80146ae:	681b      	ldr	r3, [r3, #0]
 80146b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80146b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80146b8:	6013      	str	r3, [r2, #0]
}
 80146ba:	bf00      	nop
 80146bc:	46bd      	mov	sp, r7
 80146be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146c2:	4770      	bx	lr

080146c4 <LL_RCC_PLLSAI1_Disable>:
{
 80146c4:	b480      	push	{r7}
 80146c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80146c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80146cc:	681b      	ldr	r3, [r3, #0]
 80146ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80146d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80146d6:	6013      	str	r3, [r2, #0]
}
 80146d8:	bf00      	nop
 80146da:	46bd      	mov	sp, r7
 80146dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e0:	4770      	bx	lr

080146e2 <LL_RCC_PLLSAI1_IsReady>:
{
 80146e2:	b480      	push	{r7}
 80146e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80146e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80146f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80146f4:	d101      	bne.n	80146fa <LL_RCC_PLLSAI1_IsReady+0x18>
 80146f6:	2301      	movs	r3, #1
 80146f8:	e000      	b.n	80146fc <LL_RCC_PLLSAI1_IsReady+0x1a>
 80146fa:	2300      	movs	r3, #0
}
 80146fc:	4618      	mov	r0, r3
 80146fe:	46bd      	mov	sp, r7
 8014700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014704:	4770      	bx	lr

08014706 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8014706:	b580      	push	{r7, lr}
 8014708:	b088      	sub	sp, #32
 801470a:	af00      	add	r7, sp, #0
 801470c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 801470e:	2300      	movs	r3, #0
 8014710:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8014712:	2300      	movs	r3, #0
 8014714:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801471e:	2b00      	cmp	r3, #0
 8014720:	d034      	beq.n	801478c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014726:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 801472a:	d021      	beq.n	8014770 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 801472c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8014730:	d81b      	bhi.n	801476a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8014732:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8014736:	d01d      	beq.n	8014774 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8014738:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801473c:	d815      	bhi.n	801476a <HAL_RCCEx_PeriphCLKConfig+0x64>
 801473e:	2b00      	cmp	r3, #0
 8014740:	d00b      	beq.n	801475a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8014742:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8014746:	d110      	bne.n	801476a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8014748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801474c:	68db      	ldr	r3, [r3, #12]
 801474e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8014752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014756:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8014758:	e00d      	b.n	8014776 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	3304      	adds	r3, #4
 801475e:	4618      	mov	r0, r3
 8014760:	f000 f947 	bl	80149f2 <RCCEx_PLLSAI1_ConfigNP>
 8014764:	4603      	mov	r3, r0
 8014766:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8014768:	e005      	b.n	8014776 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 801476a:	2301      	movs	r3, #1
 801476c:	77fb      	strb	r3, [r7, #31]
        break;
 801476e:	e002      	b.n	8014776 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8014770:	bf00      	nop
 8014772:	e000      	b.n	8014776 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8014774:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014776:	7ffb      	ldrb	r3, [r7, #31]
 8014778:	2b00      	cmp	r3, #0
 801477a:	d105      	bne.n	8014788 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014780:	4618      	mov	r0, r3
 8014782:	f7ff fee8 	bl	8014556 <LL_RCC_SetSAIClockSource>
 8014786:	e001      	b.n	801478c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014788:	7ffb      	ldrb	r3, [r7, #31]
 801478a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014794:	2b00      	cmp	r3, #0
 8014796:	d046      	beq.n	8014826 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8014798:	f7ff ff56 	bl	8014648 <LL_RCC_GetRTCClockSource>
 801479c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147a2:	69ba      	ldr	r2, [r7, #24]
 80147a4:	429a      	cmp	r2, r3
 80147a6:	d03c      	beq.n	8014822 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80147a8:	f7fd fdda 	bl	8012360 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80147ac:	69bb      	ldr	r3, [r7, #24]
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d105      	bne.n	80147be <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147b6:	4618      	mov	r0, r3
 80147b8:	f7ff ff30 	bl	801461c <LL_RCC_SetRTCClockSource>
 80147bc:	e02e      	b.n	801481c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80147be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80147c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80147c6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80147c8:	f7ff ff4b 	bl	8014662 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80147cc:	f7ff ff5a 	bl	8014684 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80147d0:	697b      	ldr	r3, [r7, #20]
 80147d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147da:	4313      	orrs	r3, r2
 80147dc:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80147de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80147e2:	697b      	ldr	r3, [r7, #20]
 80147e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80147e8:	f7ff fdf0 	bl	80143cc <LL_RCC_LSE_IsEnabled>
 80147ec:	4603      	mov	r3, r0
 80147ee:	2b01      	cmp	r3, #1
 80147f0:	d114      	bne.n	801481c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80147f2:	f7fa fc7d 	bl	800f0f0 <HAL_GetTick>
 80147f6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80147f8:	e00b      	b.n	8014812 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80147fa:	f7fa fc79 	bl	800f0f0 <HAL_GetTick>
 80147fe:	4602      	mov	r2, r0
 8014800:	693b      	ldr	r3, [r7, #16]
 8014802:	1ad3      	subs	r3, r2, r3
 8014804:	f241 3288 	movw	r2, #5000	; 0x1388
 8014808:	4293      	cmp	r3, r2
 801480a:	d902      	bls.n	8014812 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 801480c:	2303      	movs	r3, #3
 801480e:	77fb      	strb	r3, [r7, #31]
              break;
 8014810:	e004      	b.n	801481c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8014812:	f7ff fded 	bl	80143f0 <LL_RCC_LSE_IsReady>
 8014816:	4603      	mov	r3, r0
 8014818:	2b01      	cmp	r3, #1
 801481a:	d1ee      	bne.n	80147fa <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 801481c:	7ffb      	ldrb	r3, [r7, #31]
 801481e:	77bb      	strb	r3, [r7, #30]
 8014820:	e001      	b.n	8014826 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014822:	7ffb      	ldrb	r3, [r7, #31]
 8014824:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	f003 0301 	and.w	r3, r3, #1
 801482e:	2b00      	cmp	r3, #0
 8014830:	d004      	beq.n	801483c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	699b      	ldr	r3, [r3, #24]
 8014836:	4618      	mov	r0, r3
 8014838:	f7ff fe2a 	bl	8014490 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	f003 0302 	and.w	r3, r3, #2
 8014844:	2b00      	cmp	r3, #0
 8014846:	d004      	beq.n	8014852 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	69db      	ldr	r3, [r3, #28]
 801484c:	4618      	mov	r0, r3
 801484e:	f7ff fe35 	bl	80144bc <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	f003 0310 	and.w	r3, r3, #16
 801485a:	2b00      	cmp	r3, #0
 801485c:	d004      	beq.n	8014868 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014862:	4618      	mov	r0, r3
 8014864:	f7ff fe5d 	bl	8014522 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	f003 0320 	and.w	r3, r3, #32
 8014870:	2b00      	cmp	r3, #0
 8014872:	d004      	beq.n	801487e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014878:	4618      	mov	r0, r3
 801487a:	f7ff fe52 	bl	8014522 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	f003 0304 	and.w	r3, r3, #4
 8014886:	2b00      	cmp	r3, #0
 8014888:	d004      	beq.n	8014894 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	6a1b      	ldr	r3, [r3, #32]
 801488e:	4618      	mov	r0, r3
 8014890:	f7ff fe2a 	bl	80144e8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	f003 0308 	and.w	r3, r3, #8
 801489c:	2b00      	cmp	r3, #0
 801489e:	d004      	beq.n	80148aa <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148a4:	4618      	mov	r0, r3
 80148a6:	f7ff fe1f 	bl	80144e8 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	681b      	ldr	r3, [r3, #0]
 80148ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d022      	beq.n	80148fc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80148ba:	4618      	mov	r0, r3
 80148bc:	f7ff fe8d 	bl	80145da <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80148c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80148c8:	d107      	bne.n	80148da <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80148ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80148ce:	68db      	ldr	r3, [r3, #12]
 80148d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80148d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80148d8:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80148de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80148e2:	d10b      	bne.n	80148fc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	3304      	adds	r3, #4
 80148e8:	4618      	mov	r0, r3
 80148ea:	f000 f8dd 	bl	8014aa8 <RCCEx_PLLSAI1_ConfigNQ>
 80148ee:	4603      	mov	r3, r0
 80148f0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80148f2:	7ffb      	ldrb	r3, [r7, #31]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d001      	beq.n	80148fc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80148f8:	7ffb      	ldrb	r3, [r7, #31]
 80148fa:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014904:	2b00      	cmp	r3, #0
 8014906:	d02b      	beq.n	8014960 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801490c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014910:	d008      	beq.n	8014924 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014916:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801491a:	d003      	beq.n	8014924 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014920:	2b00      	cmp	r3, #0
 8014922:	d105      	bne.n	8014930 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014928:	4618      	mov	r0, r3
 801492a:	f7ff fe2a 	bl	8014582 <LL_RCC_SetRNGClockSource>
 801492e:	e00a      	b.n	8014946 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014934:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014938:	60fb      	str	r3, [r7, #12]
 801493a:	2000      	movs	r0, #0
 801493c:	f7ff fe21 	bl	8014582 <LL_RCC_SetRNGClockSource>
 8014940:	68f8      	ldr	r0, [r7, #12]
 8014942:	f7ff fe34 	bl	80145ae <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801494a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 801494e:	d107      	bne.n	8014960 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8014950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014954:	68db      	ldr	r3, [r3, #12]
 8014956:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801495a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801495e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014968:	2b00      	cmp	r3, #0
 801496a:	d022      	beq.n	80149b2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014970:	4618      	mov	r0, r3
 8014972:	f7ff fe3d 	bl	80145f0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801497a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801497e:	d107      	bne.n	8014990 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8014980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014984:	68db      	ldr	r3, [r3, #12]
 8014986:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801498a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801498e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014994:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8014998:	d10b      	bne.n	80149b2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	3304      	adds	r3, #4
 801499e:	4618      	mov	r0, r3
 80149a0:	f000 f8dd 	bl	8014b5e <RCCEx_PLLSAI1_ConfigNR>
 80149a4:	4603      	mov	r3, r0
 80149a6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80149a8:	7ffb      	ldrb	r3, [r7, #31]
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d001      	beq.n	80149b2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80149ae:	7ffb      	ldrb	r3, [r7, #31]
 80149b0:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d004      	beq.n	80149c8 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80149c2:	4618      	mov	r0, r3
 80149c4:	f7ff fd26 	bl	8014414 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d009      	beq.n	80149e8 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80149d8:	4618      	mov	r0, r3
 80149da:	f7ff fd45 	bl	8014468 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80149e2:	4618      	mov	r0, r3
 80149e4:	f7ff fd2c 	bl	8014440 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80149e8:	7fbb      	ldrb	r3, [r7, #30]
}
 80149ea:	4618      	mov	r0, r3
 80149ec:	3720      	adds	r7, #32
 80149ee:	46bd      	mov	sp, r7
 80149f0:	bd80      	pop	{r7, pc}

080149f2 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80149f2:	b580      	push	{r7, lr}
 80149f4:	b084      	sub	sp, #16
 80149f6:	af00      	add	r7, sp, #0
 80149f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80149fa:	2300      	movs	r3, #0
 80149fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80149fe:	f7ff fe61 	bl	80146c4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8014a02:	f7fa fb75 	bl	800f0f0 <HAL_GetTick>
 8014a06:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8014a08:	e009      	b.n	8014a1e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8014a0a:	f7fa fb71 	bl	800f0f0 <HAL_GetTick>
 8014a0e:	4602      	mov	r2, r0
 8014a10:	68bb      	ldr	r3, [r7, #8]
 8014a12:	1ad3      	subs	r3, r2, r3
 8014a14:	2b02      	cmp	r3, #2
 8014a16:	d902      	bls.n	8014a1e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8014a18:	2303      	movs	r3, #3
 8014a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8014a1c:	e004      	b.n	8014a28 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8014a1e:	f7ff fe60 	bl	80146e2 <LL_RCC_PLLSAI1_IsReady>
 8014a22:	4603      	mov	r3, r0
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d1f0      	bne.n	8014a0a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8014a28:	7bfb      	ldrb	r3, [r7, #15]
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d137      	bne.n	8014a9e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8014a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014a32:	691b      	ldr	r3, [r3, #16]
 8014a34:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	021b      	lsls	r3, r3, #8
 8014a3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8014a42:	4313      	orrs	r3, r2
 8014a44:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8014a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014a4a:	691b      	ldr	r3, [r3, #16]
 8014a4c:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	685b      	ldr	r3, [r3, #4]
 8014a54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8014a58:	4313      	orrs	r3, r2
 8014a5a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8014a5c:	f7ff fe23 	bl	80146a6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014a60:	f7fa fb46 	bl	800f0f0 <HAL_GetTick>
 8014a64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8014a66:	e009      	b.n	8014a7c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8014a68:	f7fa fb42 	bl	800f0f0 <HAL_GetTick>
 8014a6c:	4602      	mov	r2, r0
 8014a6e:	68bb      	ldr	r3, [r7, #8]
 8014a70:	1ad3      	subs	r3, r2, r3
 8014a72:	2b02      	cmp	r3, #2
 8014a74:	d902      	bls.n	8014a7c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8014a76:	2303      	movs	r3, #3
 8014a78:	73fb      	strb	r3, [r7, #15]
        break;
 8014a7a:	e004      	b.n	8014a86 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8014a7c:	f7ff fe31 	bl	80146e2 <LL_RCC_PLLSAI1_IsReady>
 8014a80:	4603      	mov	r3, r0
 8014a82:	2b01      	cmp	r3, #1
 8014a84:	d1f0      	bne.n	8014a68 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8014a86:	7bfb      	ldrb	r3, [r7, #15]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d108      	bne.n	8014a9e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8014a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014a90:	691a      	ldr	r2, [r3, #16]
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	691b      	ldr	r3, [r3, #16]
 8014a96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8014a9a:	4313      	orrs	r3, r2
 8014a9c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8014a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014aa0:	4618      	mov	r0, r3
 8014aa2:	3710      	adds	r7, #16
 8014aa4:	46bd      	mov	sp, r7
 8014aa6:	bd80      	pop	{r7, pc}

08014aa8 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8014aa8:	b580      	push	{r7, lr}
 8014aaa:	b084      	sub	sp, #16
 8014aac:	af00      	add	r7, sp, #0
 8014aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8014ab0:	2300      	movs	r3, #0
 8014ab2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8014ab4:	f7ff fe06 	bl	80146c4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8014ab8:	f7fa fb1a 	bl	800f0f0 <HAL_GetTick>
 8014abc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8014abe:	e009      	b.n	8014ad4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8014ac0:	f7fa fb16 	bl	800f0f0 <HAL_GetTick>
 8014ac4:	4602      	mov	r2, r0
 8014ac6:	68bb      	ldr	r3, [r7, #8]
 8014ac8:	1ad3      	subs	r3, r2, r3
 8014aca:	2b02      	cmp	r3, #2
 8014acc:	d902      	bls.n	8014ad4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8014ace:	2303      	movs	r3, #3
 8014ad0:	73fb      	strb	r3, [r7, #15]
      break;
 8014ad2:	e004      	b.n	8014ade <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8014ad4:	f7ff fe05 	bl	80146e2 <LL_RCC_PLLSAI1_IsReady>
 8014ad8:	4603      	mov	r3, r0
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d1f0      	bne.n	8014ac0 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8014ade:	7bfb      	ldrb	r3, [r7, #15]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d137      	bne.n	8014b54 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8014ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014ae8:	691b      	ldr	r3, [r3, #16]
 8014aea:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	021b      	lsls	r3, r3, #8
 8014af4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8014af8:	4313      	orrs	r3, r2
 8014afa:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8014afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014b00:	691b      	ldr	r3, [r3, #16]
 8014b02:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	689b      	ldr	r3, [r3, #8]
 8014b0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8014b0e:	4313      	orrs	r3, r2
 8014b10:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8014b12:	f7ff fdc8 	bl	80146a6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014b16:	f7fa faeb 	bl	800f0f0 <HAL_GetTick>
 8014b1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8014b1c:	e009      	b.n	8014b32 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8014b1e:	f7fa fae7 	bl	800f0f0 <HAL_GetTick>
 8014b22:	4602      	mov	r2, r0
 8014b24:	68bb      	ldr	r3, [r7, #8]
 8014b26:	1ad3      	subs	r3, r2, r3
 8014b28:	2b02      	cmp	r3, #2
 8014b2a:	d902      	bls.n	8014b32 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8014b2c:	2303      	movs	r3, #3
 8014b2e:	73fb      	strb	r3, [r7, #15]
        break;
 8014b30:	e004      	b.n	8014b3c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8014b32:	f7ff fdd6 	bl	80146e2 <LL_RCC_PLLSAI1_IsReady>
 8014b36:	4603      	mov	r3, r0
 8014b38:	2b01      	cmp	r3, #1
 8014b3a:	d1f0      	bne.n	8014b1e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8014b3c:	7bfb      	ldrb	r3, [r7, #15]
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d108      	bne.n	8014b54 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8014b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014b46:	691a      	ldr	r2, [r3, #16]
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	691b      	ldr	r3, [r3, #16]
 8014b4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8014b50:	4313      	orrs	r3, r2
 8014b52:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8014b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b56:	4618      	mov	r0, r3
 8014b58:	3710      	adds	r7, #16
 8014b5a:	46bd      	mov	sp, r7
 8014b5c:	bd80      	pop	{r7, pc}

08014b5e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8014b5e:	b580      	push	{r7, lr}
 8014b60:	b084      	sub	sp, #16
 8014b62:	af00      	add	r7, sp, #0
 8014b64:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8014b66:	2300      	movs	r3, #0
 8014b68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8014b6a:	f7ff fdab 	bl	80146c4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8014b6e:	f7fa fabf 	bl	800f0f0 <HAL_GetTick>
 8014b72:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8014b74:	e009      	b.n	8014b8a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8014b76:	f7fa fabb 	bl	800f0f0 <HAL_GetTick>
 8014b7a:	4602      	mov	r2, r0
 8014b7c:	68bb      	ldr	r3, [r7, #8]
 8014b7e:	1ad3      	subs	r3, r2, r3
 8014b80:	2b02      	cmp	r3, #2
 8014b82:	d902      	bls.n	8014b8a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8014b84:	2303      	movs	r3, #3
 8014b86:	73fb      	strb	r3, [r7, #15]
      break;
 8014b88:	e004      	b.n	8014b94 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8014b8a:	f7ff fdaa 	bl	80146e2 <LL_RCC_PLLSAI1_IsReady>
 8014b8e:	4603      	mov	r3, r0
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d1f0      	bne.n	8014b76 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8014b94:	7bfb      	ldrb	r3, [r7, #15]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d137      	bne.n	8014c0a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8014b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014b9e:	691b      	ldr	r3, [r3, #16]
 8014ba0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	021b      	lsls	r3, r3, #8
 8014baa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8014bae:	4313      	orrs	r3, r2
 8014bb0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8014bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014bb6:	691b      	ldr	r3, [r3, #16]
 8014bb8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	68db      	ldr	r3, [r3, #12]
 8014bc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8014bc4:	4313      	orrs	r3, r2
 8014bc6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8014bc8:	f7ff fd6d 	bl	80146a6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014bcc:	f7fa fa90 	bl	800f0f0 <HAL_GetTick>
 8014bd0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8014bd2:	e009      	b.n	8014be8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8014bd4:	f7fa fa8c 	bl	800f0f0 <HAL_GetTick>
 8014bd8:	4602      	mov	r2, r0
 8014bda:	68bb      	ldr	r3, [r7, #8]
 8014bdc:	1ad3      	subs	r3, r2, r3
 8014bde:	2b02      	cmp	r3, #2
 8014be0:	d902      	bls.n	8014be8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8014be2:	2303      	movs	r3, #3
 8014be4:	73fb      	strb	r3, [r7, #15]
        break;
 8014be6:	e004      	b.n	8014bf2 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8014be8:	f7ff fd7b 	bl	80146e2 <LL_RCC_PLLSAI1_IsReady>
 8014bec:	4603      	mov	r3, r0
 8014bee:	2b01      	cmp	r3, #1
 8014bf0:	d1f0      	bne.n	8014bd4 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8014bf2:	7bfb      	ldrb	r3, [r7, #15]
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d108      	bne.n	8014c0a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8014bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014bfc:	691a      	ldr	r2, [r3, #16]
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	691b      	ldr	r3, [r3, #16]
 8014c02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8014c06:	4313      	orrs	r3, r2
 8014c08:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8014c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c0c:	4618      	mov	r0, r3
 8014c0e:	3710      	adds	r7, #16
 8014c10:	46bd      	mov	sp, r7
 8014c12:	bd80      	pop	{r7, pc}

08014c14 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8014c14:	b580      	push	{r7, lr}
 8014c16:	b084      	sub	sp, #16
 8014c18:	af00      	add	r7, sp, #0
 8014c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d101      	bne.n	8014c26 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8014c22:	2301      	movs	r3, #1
 8014c24:	e09f      	b.n	8014d66 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8014c2c:	b2db      	uxtb	r3, r3
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d106      	bne.n	8014c40 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	2200      	movs	r2, #0
 8014c36:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8014c3a:	6878      	ldr	r0, [r7, #4]
 8014c3c:	f7f6 ff96 	bl	800bb6c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	2202      	movs	r2, #2
 8014c44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8014c48:	4b49      	ldr	r3, [pc, #292]	; (8014d70 <HAL_RTC_Init+0x15c>)
 8014c4a:	68db      	ldr	r3, [r3, #12]
 8014c4c:	f003 0310 	and.w	r3, r3, #16
 8014c50:	2b10      	cmp	r3, #16
 8014c52:	d07e      	beq.n	8014d52 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	22ca      	movs	r2, #202	; 0xca
 8014c5a:	625a      	str	r2, [r3, #36]	; 0x24
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	681b      	ldr	r3, [r3, #0]
 8014c60:	2253      	movs	r2, #83	; 0x53
 8014c62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8014c64:	6878      	ldr	r0, [r7, #4]
 8014c66:	f000 fac6 	bl	80151f6 <RTC_EnterInitMode>
 8014c6a:	4603      	mov	r3, r0
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d00a      	beq.n	8014c86 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	22ff      	movs	r2, #255	; 0xff
 8014c76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	2204      	movs	r2, #4
 8014c7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8014c80:	2301      	movs	r3, #1
 8014c82:	73fb      	strb	r3, [r7, #15]
 8014c84:	e067      	b.n	8014d56 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	689b      	ldr	r3, [r3, #8]
 8014c8c:	687a      	ldr	r2, [r7, #4]
 8014c8e:	6812      	ldr	r2, [r2, #0]
 8014c90:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014c94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014c98:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	6899      	ldr	r1, [r3, #8]
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	685a      	ldr	r2, [r3, #4]
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	691b      	ldr	r3, [r3, #16]
 8014ca8:	431a      	orrs	r2, r3
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	699b      	ldr	r3, [r3, #24]
 8014cae:	431a      	orrs	r2, r3
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	430a      	orrs	r2, r1
 8014cb6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	687a      	ldr	r2, [r7, #4]
 8014cbe:	68d2      	ldr	r2, [r2, #12]
 8014cc0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	6919      	ldr	r1, [r3, #16]
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	689b      	ldr	r3, [r3, #8]
 8014ccc:	041a      	lsls	r2, r3, #16
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	430a      	orrs	r2, r1
 8014cd4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	68da      	ldr	r2, [r3, #12]
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014ce4:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	f022 0203 	bic.w	r2, r2, #3
 8014cf4:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	69da      	ldr	r2, [r3, #28]
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	695b      	ldr	r3, [r3, #20]
 8014d04:	431a      	orrs	r2, r3
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	681b      	ldr	r3, [r3, #0]
 8014d0a:	430a      	orrs	r2, r1
 8014d0c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	689b      	ldr	r3, [r3, #8]
 8014d14:	f003 0320 	and.w	r3, r3, #32
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d113      	bne.n	8014d44 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8014d1c:	6878      	ldr	r0, [r7, #4]
 8014d1e:	f000 fa44 	bl	80151aa <HAL_RTC_WaitForSynchro>
 8014d22:	4603      	mov	r3, r0
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d00d      	beq.n	8014d44 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	681b      	ldr	r3, [r3, #0]
 8014d2c:	22ff      	movs	r2, #255	; 0xff
 8014d2e:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	2204      	movs	r2, #4
 8014d34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	2200      	movs	r2, #0
 8014d3c:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8014d40:	2301      	movs	r3, #1
 8014d42:	e010      	b.n	8014d66 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	22ff      	movs	r2, #255	; 0xff
 8014d4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8014d4c:	2300      	movs	r3, #0
 8014d4e:	73fb      	strb	r3, [r7, #15]
 8014d50:	e001      	b.n	8014d56 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8014d52:	2300      	movs	r3, #0
 8014d54:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8014d56:	7bfb      	ldrb	r3, [r7, #15]
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d103      	bne.n	8014d64 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	2201      	movs	r2, #1
 8014d60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8014d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d66:	4618      	mov	r0, r3
 8014d68:	3710      	adds	r7, #16
 8014d6a:	46bd      	mov	sp, r7
 8014d6c:	bd80      	pop	{r7, pc}
 8014d6e:	bf00      	nop
 8014d70:	40002800 	.word	0x40002800

08014d74 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8014d74:	b590      	push	{r4, r7, lr}
 8014d76:	b087      	sub	sp, #28
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	60f8      	str	r0, [r7, #12]
 8014d7c:	60b9      	str	r1, [r7, #8]
 8014d7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014d86:	2b01      	cmp	r3, #1
 8014d88:	d101      	bne.n	8014d8e <HAL_RTC_SetTime+0x1a>
 8014d8a:	2302      	movs	r3, #2
 8014d8c:	e0b2      	b.n	8014ef4 <HAL_RTC_SetTime+0x180>
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	2201      	movs	r2, #1
 8014d92:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	2202      	movs	r2, #2
 8014d9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d126      	bne.n	8014df2 <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	681b      	ldr	r3, [r3, #0]
 8014da8:	689b      	ldr	r3, [r3, #8]
 8014daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d102      	bne.n	8014db8 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8014db2:	68bb      	ldr	r3, [r7, #8]
 8014db4:	2200      	movs	r2, #0
 8014db6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8014db8:	68bb      	ldr	r3, [r7, #8]
 8014dba:	781b      	ldrb	r3, [r3, #0]
 8014dbc:	4618      	mov	r0, r3
 8014dbe:	f000 fa44 	bl	801524a <RTC_ByteToBcd2>
 8014dc2:	4603      	mov	r3, r0
 8014dc4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8014dc6:	68bb      	ldr	r3, [r7, #8]
 8014dc8:	785b      	ldrb	r3, [r3, #1]
 8014dca:	4618      	mov	r0, r3
 8014dcc:	f000 fa3d 	bl	801524a <RTC_ByteToBcd2>
 8014dd0:	4603      	mov	r3, r0
 8014dd2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8014dd4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8014dd6:	68bb      	ldr	r3, [r7, #8]
 8014dd8:	789b      	ldrb	r3, [r3, #2]
 8014dda:	4618      	mov	r0, r3
 8014ddc:	f000 fa35 	bl	801524a <RTC_ByteToBcd2>
 8014de0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8014de2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8014de6:	68bb      	ldr	r3, [r7, #8]
 8014de8:	78db      	ldrb	r3, [r3, #3]
 8014dea:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8014dec:	4313      	orrs	r3, r2
 8014dee:	617b      	str	r3, [r7, #20]
 8014df0:	e018      	b.n	8014e24 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8014df2:	68fb      	ldr	r3, [r7, #12]
 8014df4:	681b      	ldr	r3, [r3, #0]
 8014df6:	689b      	ldr	r3, [r3, #8]
 8014df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d102      	bne.n	8014e06 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8014e00:	68bb      	ldr	r3, [r7, #8]
 8014e02:	2200      	movs	r2, #0
 8014e04:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8014e06:	68bb      	ldr	r3, [r7, #8]
 8014e08:	781b      	ldrb	r3, [r3, #0]
 8014e0a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8014e0c:	68bb      	ldr	r3, [r7, #8]
 8014e0e:	785b      	ldrb	r3, [r3, #1]
 8014e10:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8014e12:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8014e14:	68ba      	ldr	r2, [r7, #8]
 8014e16:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8014e18:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8014e1a:	68bb      	ldr	r3, [r7, #8]
 8014e1c:	78db      	ldrb	r3, [r3, #3]
 8014e1e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8014e20:	4313      	orrs	r3, r2
 8014e22:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	22ca      	movs	r2, #202	; 0xca
 8014e2a:	625a      	str	r2, [r3, #36]	; 0x24
 8014e2c:	68fb      	ldr	r3, [r7, #12]
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	2253      	movs	r2, #83	; 0x53
 8014e32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8014e34:	68f8      	ldr	r0, [r7, #12]
 8014e36:	f000 f9de 	bl	80151f6 <RTC_EnterInitMode>
 8014e3a:	4603      	mov	r3, r0
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d00d      	beq.n	8014e5c <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	681b      	ldr	r3, [r3, #0]
 8014e44:	22ff      	movs	r2, #255	; 0xff
 8014e46:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	2204      	movs	r2, #4
 8014e4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	2200      	movs	r2, #0
 8014e54:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8014e58:	2301      	movs	r3, #1
 8014e5a:	e04b      	b.n	8014ef4 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8014e5c:	68fb      	ldr	r3, [r7, #12]
 8014e5e:	681a      	ldr	r2, [r3, #0]
 8014e60:	697b      	ldr	r3, [r7, #20]
 8014e62:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8014e66:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8014e6a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8014e6c:	68fb      	ldr	r3, [r7, #12]
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	689a      	ldr	r2, [r3, #8]
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8014e7a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	6899      	ldr	r1, [r3, #8]
 8014e82:	68bb      	ldr	r3, [r7, #8]
 8014e84:	68da      	ldr	r2, [r3, #12]
 8014e86:	68bb      	ldr	r3, [r7, #8]
 8014e88:	691b      	ldr	r3, [r3, #16]
 8014e8a:	431a      	orrs	r2, r3
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	681b      	ldr	r3, [r3, #0]
 8014e90:	430a      	orrs	r2, r1
 8014e92:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8014e94:	68fb      	ldr	r3, [r7, #12]
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	68da      	ldr	r2, [r3, #12]
 8014e9a:	68fb      	ldr	r3, [r7, #12]
 8014e9c:	681b      	ldr	r3, [r3, #0]
 8014e9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014ea2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8014ea4:	68fb      	ldr	r3, [r7, #12]
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	689b      	ldr	r3, [r3, #8]
 8014eaa:	f003 0320 	and.w	r3, r3, #32
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d113      	bne.n	8014eda <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8014eb2:	68f8      	ldr	r0, [r7, #12]
 8014eb4:	f000 f979 	bl	80151aa <HAL_RTC_WaitForSynchro>
 8014eb8:	4603      	mov	r3, r0
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d00d      	beq.n	8014eda <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	22ff      	movs	r2, #255	; 0xff
 8014ec4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8014ec6:	68fb      	ldr	r3, [r7, #12]
 8014ec8:	2204      	movs	r2, #4
 8014eca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8014ece:	68fb      	ldr	r3, [r7, #12]
 8014ed0:	2200      	movs	r2, #0
 8014ed2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8014ed6:	2301      	movs	r3, #1
 8014ed8:	e00c      	b.n	8014ef4 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8014eda:	68fb      	ldr	r3, [r7, #12]
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	22ff      	movs	r2, #255	; 0xff
 8014ee0:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	2201      	movs	r2, #1
 8014ee6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    __HAL_UNLOCK(hrtc);
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	2200      	movs	r2, #0
 8014eee:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8014ef2:	2300      	movs	r3, #0
  }
}
 8014ef4:	4618      	mov	r0, r3
 8014ef6:	371c      	adds	r7, #28
 8014ef8:	46bd      	mov	sp, r7
 8014efa:	bd90      	pop	{r4, r7, pc}

08014efc <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8014efc:	b580      	push	{r7, lr}
 8014efe:	b086      	sub	sp, #24
 8014f00:	af00      	add	r7, sp, #0
 8014f02:	60f8      	str	r0, [r7, #12]
 8014f04:	60b9      	str	r1, [r7, #8]
 8014f06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014f0e:	68bb      	ldr	r3, [r7, #8]
 8014f10:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	681b      	ldr	r3, [r3, #0]
 8014f16:	691b      	ldr	r3, [r3, #16]
 8014f18:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8014f1c:	68bb      	ldr	r3, [r7, #8]
 8014f1e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8014f2a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8014f2e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8014f30:	697b      	ldr	r3, [r7, #20]
 8014f32:	0c1b      	lsrs	r3, r3, #16
 8014f34:	b2db      	uxtb	r3, r3
 8014f36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014f3a:	b2da      	uxtb	r2, r3
 8014f3c:	68bb      	ldr	r3, [r7, #8]
 8014f3e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8014f40:	697b      	ldr	r3, [r7, #20]
 8014f42:	0a1b      	lsrs	r3, r3, #8
 8014f44:	b2db      	uxtb	r3, r3
 8014f46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014f4a:	b2da      	uxtb	r2, r3
 8014f4c:	68bb      	ldr	r3, [r7, #8]
 8014f4e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8014f50:	697b      	ldr	r3, [r7, #20]
 8014f52:	b2db      	uxtb	r3, r3
 8014f54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014f58:	b2da      	uxtb	r2, r3
 8014f5a:	68bb      	ldr	r3, [r7, #8]
 8014f5c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8014f5e:	697b      	ldr	r3, [r7, #20]
 8014f60:	0c1b      	lsrs	r3, r3, #16
 8014f62:	b2db      	uxtb	r3, r3
 8014f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014f68:	b2da      	uxtb	r2, r3
 8014f6a:	68bb      	ldr	r3, [r7, #8]
 8014f6c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d11a      	bne.n	8014faa <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8014f74:	68bb      	ldr	r3, [r7, #8]
 8014f76:	781b      	ldrb	r3, [r3, #0]
 8014f78:	4618      	mov	r0, r3
 8014f7a:	f000 f986 	bl	801528a <RTC_Bcd2ToByte>
 8014f7e:	4603      	mov	r3, r0
 8014f80:	461a      	mov	r2, r3
 8014f82:	68bb      	ldr	r3, [r7, #8]
 8014f84:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8014f86:	68bb      	ldr	r3, [r7, #8]
 8014f88:	785b      	ldrb	r3, [r3, #1]
 8014f8a:	4618      	mov	r0, r3
 8014f8c:	f000 f97d 	bl	801528a <RTC_Bcd2ToByte>
 8014f90:	4603      	mov	r3, r0
 8014f92:	461a      	mov	r2, r3
 8014f94:	68bb      	ldr	r3, [r7, #8]
 8014f96:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8014f98:	68bb      	ldr	r3, [r7, #8]
 8014f9a:	789b      	ldrb	r3, [r3, #2]
 8014f9c:	4618      	mov	r0, r3
 8014f9e:	f000 f974 	bl	801528a <RTC_Bcd2ToByte>
 8014fa2:	4603      	mov	r3, r0
 8014fa4:	461a      	mov	r2, r3
 8014fa6:	68bb      	ldr	r3, [r7, #8]
 8014fa8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8014faa:	2300      	movs	r3, #0
}
 8014fac:	4618      	mov	r0, r3
 8014fae:	3718      	adds	r7, #24
 8014fb0:	46bd      	mov	sp, r7
 8014fb2:	bd80      	pop	{r7, pc}

08014fb4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8014fb4:	b590      	push	{r4, r7, lr}
 8014fb6:	b087      	sub	sp, #28
 8014fb8:	af00      	add	r7, sp, #0
 8014fba:	60f8      	str	r0, [r7, #12]
 8014fbc:	60b9      	str	r1, [r7, #8]
 8014fbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014fc6:	2b01      	cmp	r3, #1
 8014fc8:	d101      	bne.n	8014fce <HAL_RTC_SetDate+0x1a>
 8014fca:	2302      	movs	r3, #2
 8014fcc:	e09c      	b.n	8015108 <HAL_RTC_SetDate+0x154>
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	2201      	movs	r2, #1
 8014fd2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	2202      	movs	r2, #2
 8014fda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d10e      	bne.n	8015002 <HAL_RTC_SetDate+0x4e>
 8014fe4:	68bb      	ldr	r3, [r7, #8]
 8014fe6:	785b      	ldrb	r3, [r3, #1]
 8014fe8:	f003 0310 	and.w	r3, r3, #16
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d008      	beq.n	8015002 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8014ff0:	68bb      	ldr	r3, [r7, #8]
 8014ff2:	785b      	ldrb	r3, [r3, #1]
 8014ff4:	f023 0310 	bic.w	r3, r3, #16
 8014ff8:	b2db      	uxtb	r3, r3
 8014ffa:	330a      	adds	r3, #10
 8014ffc:	b2da      	uxtb	r2, r3
 8014ffe:	68bb      	ldr	r3, [r7, #8]
 8015000:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	2b00      	cmp	r3, #0
 8015006:	d11c      	bne.n	8015042 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8015008:	68bb      	ldr	r3, [r7, #8]
 801500a:	78db      	ldrb	r3, [r3, #3]
 801500c:	4618      	mov	r0, r3
 801500e:	f000 f91c 	bl	801524a <RTC_ByteToBcd2>
 8015012:	4603      	mov	r3, r0
 8015014:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8015016:	68bb      	ldr	r3, [r7, #8]
 8015018:	785b      	ldrb	r3, [r3, #1]
 801501a:	4618      	mov	r0, r3
 801501c:	f000 f915 	bl	801524a <RTC_ByteToBcd2>
 8015020:	4603      	mov	r3, r0
 8015022:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8015024:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8015026:	68bb      	ldr	r3, [r7, #8]
 8015028:	789b      	ldrb	r3, [r3, #2]
 801502a:	4618      	mov	r0, r3
 801502c:	f000 f90d 	bl	801524a <RTC_ByteToBcd2>
 8015030:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8015032:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8015036:	68bb      	ldr	r3, [r7, #8]
 8015038:	781b      	ldrb	r3, [r3, #0]
 801503a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 801503c:	4313      	orrs	r3, r2
 801503e:	617b      	str	r3, [r7, #20]
 8015040:	e00e      	b.n	8015060 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8015042:	68bb      	ldr	r3, [r7, #8]
 8015044:	78db      	ldrb	r3, [r3, #3]
 8015046:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8015048:	68bb      	ldr	r3, [r7, #8]
 801504a:	785b      	ldrb	r3, [r3, #1]
 801504c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 801504e:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8015050:	68ba      	ldr	r2, [r7, #8]
 8015052:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8015054:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8015056:	68bb      	ldr	r3, [r7, #8]
 8015058:	781b      	ldrb	r3, [r3, #0]
 801505a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 801505c:	4313      	orrs	r3, r2
 801505e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	22ca      	movs	r2, #202	; 0xca
 8015066:	625a      	str	r2, [r3, #36]	; 0x24
 8015068:	68fb      	ldr	r3, [r7, #12]
 801506a:	681b      	ldr	r3, [r3, #0]
 801506c:	2253      	movs	r2, #83	; 0x53
 801506e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8015070:	68f8      	ldr	r0, [r7, #12]
 8015072:	f000 f8c0 	bl	80151f6 <RTC_EnterInitMode>
 8015076:	4603      	mov	r3, r0
 8015078:	2b00      	cmp	r3, #0
 801507a:	d00d      	beq.n	8015098 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	22ff      	movs	r2, #255	; 0xff
 8015082:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	2204      	movs	r2, #4
 8015088:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	2200      	movs	r2, #0
 8015090:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8015094:	2301      	movs	r3, #1
 8015096:	e037      	b.n	8015108 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	681a      	ldr	r2, [r3, #0]
 801509c:	697b      	ldr	r3, [r7, #20]
 801509e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80150a2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80150a6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	681b      	ldr	r3, [r3, #0]
 80150ac:	68da      	ldr	r2, [r3, #12]
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80150b6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	689b      	ldr	r3, [r3, #8]
 80150be:	f003 0320 	and.w	r3, r3, #32
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d113      	bne.n	80150ee <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80150c6:	68f8      	ldr	r0, [r7, #12]
 80150c8:	f000 f86f 	bl	80151aa <HAL_RTC_WaitForSynchro>
 80150cc:	4603      	mov	r3, r0
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d00d      	beq.n	80150ee <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	681b      	ldr	r3, [r3, #0]
 80150d6:	22ff      	movs	r2, #255	; 0xff
 80150d8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	2204      	movs	r2, #4
 80150de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80150e2:	68fb      	ldr	r3, [r7, #12]
 80150e4:	2200      	movs	r2, #0
 80150e6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80150ea:	2301      	movs	r3, #1
 80150ec:	e00c      	b.n	8015108 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80150ee:	68fb      	ldr	r3, [r7, #12]
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	22ff      	movs	r2, #255	; 0xff
 80150f4:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	2201      	movs	r2, #1
 80150fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	2200      	movs	r2, #0
 8015102:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8015106:	2300      	movs	r3, #0
  }
}
 8015108:	4618      	mov	r0, r3
 801510a:	371c      	adds	r7, #28
 801510c:	46bd      	mov	sp, r7
 801510e:	bd90      	pop	{r4, r7, pc}

08015110 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8015110:	b580      	push	{r7, lr}
 8015112:	b086      	sub	sp, #24
 8015114:	af00      	add	r7, sp, #0
 8015116:	60f8      	str	r0, [r7, #12]
 8015118:	60b9      	str	r1, [r7, #8]
 801511a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 801511c:	68fb      	ldr	r3, [r7, #12]
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	685b      	ldr	r3, [r3, #4]
 8015122:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8015126:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801512a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 801512c:	697b      	ldr	r3, [r7, #20]
 801512e:	0c1b      	lsrs	r3, r3, #16
 8015130:	b2da      	uxtb	r2, r3
 8015132:	68bb      	ldr	r3, [r7, #8]
 8015134:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8015136:	697b      	ldr	r3, [r7, #20]
 8015138:	0a1b      	lsrs	r3, r3, #8
 801513a:	b2db      	uxtb	r3, r3
 801513c:	f003 031f 	and.w	r3, r3, #31
 8015140:	b2da      	uxtb	r2, r3
 8015142:	68bb      	ldr	r3, [r7, #8]
 8015144:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8015146:	697b      	ldr	r3, [r7, #20]
 8015148:	b2db      	uxtb	r3, r3
 801514a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801514e:	b2da      	uxtb	r2, r3
 8015150:	68bb      	ldr	r3, [r7, #8]
 8015152:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8015154:	697b      	ldr	r3, [r7, #20]
 8015156:	0b5b      	lsrs	r3, r3, #13
 8015158:	b2db      	uxtb	r3, r3
 801515a:	f003 0307 	and.w	r3, r3, #7
 801515e:	b2da      	uxtb	r2, r3
 8015160:	68bb      	ldr	r3, [r7, #8]
 8015162:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d11a      	bne.n	80151a0 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801516a:	68bb      	ldr	r3, [r7, #8]
 801516c:	78db      	ldrb	r3, [r3, #3]
 801516e:	4618      	mov	r0, r3
 8015170:	f000 f88b 	bl	801528a <RTC_Bcd2ToByte>
 8015174:	4603      	mov	r3, r0
 8015176:	461a      	mov	r2, r3
 8015178:	68bb      	ldr	r3, [r7, #8]
 801517a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 801517c:	68bb      	ldr	r3, [r7, #8]
 801517e:	785b      	ldrb	r3, [r3, #1]
 8015180:	4618      	mov	r0, r3
 8015182:	f000 f882 	bl	801528a <RTC_Bcd2ToByte>
 8015186:	4603      	mov	r3, r0
 8015188:	461a      	mov	r2, r3
 801518a:	68bb      	ldr	r3, [r7, #8]
 801518c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 801518e:	68bb      	ldr	r3, [r7, #8]
 8015190:	789b      	ldrb	r3, [r3, #2]
 8015192:	4618      	mov	r0, r3
 8015194:	f000 f879 	bl	801528a <RTC_Bcd2ToByte>
 8015198:	4603      	mov	r3, r0
 801519a:	461a      	mov	r2, r3
 801519c:	68bb      	ldr	r3, [r7, #8]
 801519e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80151a0:	2300      	movs	r3, #0
}
 80151a2:	4618      	mov	r0, r3
 80151a4:	3718      	adds	r7, #24
 80151a6:	46bd      	mov	sp, r7
 80151a8:	bd80      	pop	{r7, pc}

080151aa <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80151aa:	b580      	push	{r7, lr}
 80151ac:	b084      	sub	sp, #16
 80151ae:	af00      	add	r7, sp, #0
 80151b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	681b      	ldr	r3, [r3, #0]
 80151b6:	68da      	ldr	r2, [r3, #12]
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	681b      	ldr	r3, [r3, #0]
 80151bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80151c0:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80151c2:	f7f9 ff95 	bl	800f0f0 <HAL_GetTick>
 80151c6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80151c8:	e009      	b.n	80151de <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80151ca:	f7f9 ff91 	bl	800f0f0 <HAL_GetTick>
 80151ce:	4602      	mov	r2, r0
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	1ad3      	subs	r3, r2, r3
 80151d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80151d8:	d901      	bls.n	80151de <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80151da:	2303      	movs	r3, #3
 80151dc:	e007      	b.n	80151ee <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	68db      	ldr	r3, [r3, #12]
 80151e4:	f003 0320 	and.w	r3, r3, #32
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d0ee      	beq.n	80151ca <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80151ec:	2300      	movs	r3, #0
}
 80151ee:	4618      	mov	r0, r3
 80151f0:	3710      	adds	r7, #16
 80151f2:	46bd      	mov	sp, r7
 80151f4:	bd80      	pop	{r7, pc}

080151f6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80151f6:	b580      	push	{r7, lr}
 80151f8:	b084      	sub	sp, #16
 80151fa:	af00      	add	r7, sp, #0
 80151fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	68db      	ldr	r3, [r3, #12]
 8015204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015208:	2b00      	cmp	r3, #0
 801520a:	d119      	bne.n	8015240 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	681b      	ldr	r3, [r3, #0]
 8015210:	f04f 32ff 	mov.w	r2, #4294967295
 8015214:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8015216:	f7f9 ff6b 	bl	800f0f0 <HAL_GetTick>
 801521a:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 801521c:	e009      	b.n	8015232 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 801521e:	f7f9 ff67 	bl	800f0f0 <HAL_GetTick>
 8015222:	4602      	mov	r2, r0
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	1ad3      	subs	r3, r2, r3
 8015228:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801522c:	d901      	bls.n	8015232 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 801522e:	2303      	movs	r3, #3
 8015230:	e007      	b.n	8015242 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	68db      	ldr	r3, [r3, #12]
 8015238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801523c:	2b00      	cmp	r3, #0
 801523e:	d0ee      	beq.n	801521e <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8015240:	2300      	movs	r3, #0
}
 8015242:	4618      	mov	r0, r3
 8015244:	3710      	adds	r7, #16
 8015246:	46bd      	mov	sp, r7
 8015248:	bd80      	pop	{r7, pc}

0801524a <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 801524a:	b480      	push	{r7}
 801524c:	b085      	sub	sp, #20
 801524e:	af00      	add	r7, sp, #0
 8015250:	4603      	mov	r3, r0
 8015252:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8015254:	2300      	movs	r3, #0
 8015256:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8015258:	79fb      	ldrb	r3, [r7, #7]
 801525a:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 801525c:	e005      	b.n	801526a <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	3301      	adds	r3, #1
 8015262:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8015264:	7afb      	ldrb	r3, [r7, #11]
 8015266:	3b0a      	subs	r3, #10
 8015268:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 801526a:	7afb      	ldrb	r3, [r7, #11]
 801526c:	2b09      	cmp	r3, #9
 801526e:	d8f6      	bhi.n	801525e <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	b2db      	uxtb	r3, r3
 8015274:	011b      	lsls	r3, r3, #4
 8015276:	b2da      	uxtb	r2, r3
 8015278:	7afb      	ldrb	r3, [r7, #11]
 801527a:	4313      	orrs	r3, r2
 801527c:	b2db      	uxtb	r3, r3
}
 801527e:	4618      	mov	r0, r3
 8015280:	3714      	adds	r7, #20
 8015282:	46bd      	mov	sp, r7
 8015284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015288:	4770      	bx	lr

0801528a <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 801528a:	b480      	push	{r7}
 801528c:	b085      	sub	sp, #20
 801528e:	af00      	add	r7, sp, #0
 8015290:	4603      	mov	r3, r0
 8015292:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8015294:	79fb      	ldrb	r3, [r7, #7]
 8015296:	091b      	lsrs	r3, r3, #4
 8015298:	b2db      	uxtb	r3, r3
 801529a:	461a      	mov	r2, r3
 801529c:	4613      	mov	r3, r2
 801529e:	009b      	lsls	r3, r3, #2
 80152a0:	4413      	add	r3, r2
 80152a2:	005b      	lsls	r3, r3, #1
 80152a4:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	b2da      	uxtb	r2, r3
 80152aa:	79fb      	ldrb	r3, [r7, #7]
 80152ac:	f003 030f 	and.w	r3, r3, #15
 80152b0:	b2db      	uxtb	r3, r3
 80152b2:	4413      	add	r3, r2
 80152b4:	b2db      	uxtb	r3, r3
}
 80152b6:	4618      	mov	r0, r3
 80152b8:	3714      	adds	r7, #20
 80152ba:	46bd      	mov	sp, r7
 80152bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c0:	4770      	bx	lr
	...

080152c4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80152c4:	b580      	push	{r7, lr}
 80152c6:	b086      	sub	sp, #24
 80152c8:	af00      	add	r7, sp, #0
 80152ca:	60f8      	str	r0, [r7, #12]
 80152cc:	60b9      	str	r1, [r7, #8]
 80152ce:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80152d6:	2b01      	cmp	r3, #1
 80152d8:	d101      	bne.n	80152de <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80152da:	2302      	movs	r3, #2
 80152dc:	e0a8      	b.n	8015430 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	2201      	movs	r2, #1
 80152e2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	2202      	movs	r2, #2
 80152ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80152ee:	68fb      	ldr	r3, [r7, #12]
 80152f0:	681b      	ldr	r3, [r3, #0]
 80152f2:	22ca      	movs	r2, #202	; 0xca
 80152f4:	625a      	str	r2, [r3, #36]	; 0x24
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	2253      	movs	r2, #83	; 0x53
 80152fc:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80152fe:	68fb      	ldr	r3, [r7, #12]
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	689b      	ldr	r3, [r3, #8]
 8015304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015308:	2b00      	cmp	r3, #0
 801530a:	d020      	beq.n	801534e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 801530c:	f7f9 fef0 	bl	800f0f0 <HAL_GetTick>
 8015310:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8015312:	e015      	b.n	8015340 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8015314:	f7f9 feec 	bl	800f0f0 <HAL_GetTick>
 8015318:	4602      	mov	r2, r0
 801531a:	697b      	ldr	r3, [r7, #20]
 801531c:	1ad3      	subs	r3, r2, r3
 801531e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015322:	d90d      	bls.n	8015340 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	681b      	ldr	r3, [r3, #0]
 8015328:	22ff      	movs	r2, #255	; 0xff
 801532a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	2203      	movs	r2, #3
 8015330:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	2200      	movs	r2, #0
 8015338:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 801533c:	2303      	movs	r3, #3
 801533e:	e077      	b.n	8015430 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	68db      	ldr	r3, [r3, #12]
 8015346:	f003 0304 	and.w	r3, r3, #4
 801534a:	2b00      	cmp	r3, #0
 801534c:	d1e2      	bne.n	8015314 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	689a      	ldr	r2, [r3, #8]
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801535c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	681b      	ldr	r3, [r3, #0]
 8015362:	68db      	ldr	r3, [r3, #12]
 8015364:	b2da      	uxtb	r2, r3
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	681b      	ldr	r3, [r3, #0]
 801536a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 801536e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8015370:	f7f9 febe 	bl	800f0f0 <HAL_GetTick>
 8015374:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8015376:	e015      	b.n	80153a4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8015378:	f7f9 feba 	bl	800f0f0 <HAL_GetTick>
 801537c:	4602      	mov	r2, r0
 801537e:	697b      	ldr	r3, [r7, #20]
 8015380:	1ad3      	subs	r3, r2, r3
 8015382:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015386:	d90d      	bls.n	80153a4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	681b      	ldr	r3, [r3, #0]
 801538c:	22ff      	movs	r2, #255	; 0xff
 801538e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	2203      	movs	r2, #3
 8015394:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	2200      	movs	r2, #0
 801539c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80153a0:	2303      	movs	r3, #3
 80153a2:	e045      	b.n	8015430 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	681b      	ldr	r3, [r3, #0]
 80153a8:	68db      	ldr	r3, [r3, #12]
 80153aa:	f003 0304 	and.w	r3, r3, #4
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d0e2      	beq.n	8015378 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	68ba      	ldr	r2, [r7, #8]
 80153b8:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	689a      	ldr	r2, [r3, #8]
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	681b      	ldr	r3, [r3, #0]
 80153c4:	f022 0207 	bic.w	r2, r2, #7
 80153c8:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	6899      	ldr	r1, [r3, #8]
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	687a      	ldr	r2, [r7, #4]
 80153d6:	430a      	orrs	r2, r1
 80153d8:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80153da:	4b17      	ldr	r3, [pc, #92]	; (8015438 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80153dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80153e0:	4a15      	ldr	r2, [pc, #84]	; (8015438 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80153e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80153e6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80153ea:	4b13      	ldr	r3, [pc, #76]	; (8015438 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	4a12      	ldr	r2, [pc, #72]	; (8015438 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80153f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80153f4:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80153f6:	68fb      	ldr	r3, [r7, #12]
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	689a      	ldr	r2, [r3, #8]
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8015404:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8015406:	68fb      	ldr	r3, [r7, #12]
 8015408:	681b      	ldr	r3, [r3, #0]
 801540a:	689a      	ldr	r2, [r3, #8]
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	681b      	ldr	r3, [r3, #0]
 8015410:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8015414:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	681b      	ldr	r3, [r3, #0]
 801541a:	22ff      	movs	r2, #255	; 0xff
 801541c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801541e:	68fb      	ldr	r3, [r7, #12]
 8015420:	2201      	movs	r2, #1
 8015422:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8015426:	68fb      	ldr	r3, [r7, #12]
 8015428:	2200      	movs	r2, #0
 801542a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 801542e:	2300      	movs	r3, #0
}
 8015430:	4618      	mov	r0, r3
 8015432:	3718      	adds	r7, #24
 8015434:	46bd      	mov	sp, r7
 8015436:	bd80      	pop	{r7, pc}
 8015438:	58000800 	.word	0x58000800

0801543c <LL_RCC_GetUSARTClockSource>:
{
 801543c:	b480      	push	{r7}
 801543e:	b083      	sub	sp, #12
 8015440:	af00      	add	r7, sp, #0
 8015442:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8015444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8015448:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	4013      	ands	r3, r2
}
 8015450:	4618      	mov	r0, r3
 8015452:	370c      	adds	r7, #12
 8015454:	46bd      	mov	sp, r7
 8015456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801545a:	4770      	bx	lr

0801545c <LL_RCC_GetLPUARTClockSource>:
{
 801545c:	b480      	push	{r7}
 801545e:	b083      	sub	sp, #12
 8015460:	af00      	add	r7, sp, #0
 8015462:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8015464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8015468:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	4013      	ands	r3, r2
}
 8015470:	4618      	mov	r0, r3
 8015472:	370c      	adds	r7, #12
 8015474:	46bd      	mov	sp, r7
 8015476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801547a:	4770      	bx	lr

0801547c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801547c:	b580      	push	{r7, lr}
 801547e:	b082      	sub	sp, #8
 8015480:	af00      	add	r7, sp, #0
 8015482:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	2b00      	cmp	r3, #0
 8015488:	d101      	bne.n	801548e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801548a:	2301      	movs	r3, #1
 801548c:	e042      	b.n	8015514 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015494:	2b00      	cmp	r3, #0
 8015496:	d106      	bne.n	80154a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	2200      	movs	r2, #0
 801549c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80154a0:	6878      	ldr	r0, [r7, #4]
 80154a2:	f7f6 fd6b 	bl	800bf7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	2224      	movs	r2, #36	; 0x24
 80154aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	681a      	ldr	r2, [r3, #0]
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	681b      	ldr	r3, [r3, #0]
 80154b8:	f022 0201 	bic.w	r2, r2, #1
 80154bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d002      	beq.n	80154cc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80154c6:	6878      	ldr	r0, [r7, #4]
 80154c8:	f000 fba6 	bl	8015c18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80154cc:	6878      	ldr	r0, [r7, #4]
 80154ce:	f000 f97b 	bl	80157c8 <UART_SetConfig>
 80154d2:	4603      	mov	r3, r0
 80154d4:	2b01      	cmp	r3, #1
 80154d6:	d101      	bne.n	80154dc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80154d8:	2301      	movs	r3, #1
 80154da:	e01b      	b.n	8015514 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	681b      	ldr	r3, [r3, #0]
 80154e0:	685a      	ldr	r2, [r3, #4]
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	681b      	ldr	r3, [r3, #0]
 80154e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80154ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	681b      	ldr	r3, [r3, #0]
 80154f0:	689a      	ldr	r2, [r3, #8]
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80154fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	681b      	ldr	r3, [r3, #0]
 8015500:	681a      	ldr	r2, [r3, #0]
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	681b      	ldr	r3, [r3, #0]
 8015506:	f042 0201 	orr.w	r2, r2, #1
 801550a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801550c:	6878      	ldr	r0, [r7, #4]
 801550e:	f000 fc25 	bl	8015d5c <UART_CheckIdleState>
 8015512:	4603      	mov	r3, r0
}
 8015514:	4618      	mov	r0, r3
 8015516:	3708      	adds	r7, #8
 8015518:	46bd      	mov	sp, r7
 801551a:	bd80      	pop	{r7, pc}

0801551c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801551c:	b580      	push	{r7, lr}
 801551e:	b08a      	sub	sp, #40	; 0x28
 8015520:	af02      	add	r7, sp, #8
 8015522:	60f8      	str	r0, [r7, #12]
 8015524:	60b9      	str	r1, [r7, #8]
 8015526:	603b      	str	r3, [r7, #0]
 8015528:	4613      	mov	r3, r2
 801552a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015532:	2b20      	cmp	r3, #32
 8015534:	d17b      	bne.n	801562e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8015536:	68bb      	ldr	r3, [r7, #8]
 8015538:	2b00      	cmp	r3, #0
 801553a:	d002      	beq.n	8015542 <HAL_UART_Transmit+0x26>
 801553c:	88fb      	ldrh	r3, [r7, #6]
 801553e:	2b00      	cmp	r3, #0
 8015540:	d101      	bne.n	8015546 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8015542:	2301      	movs	r3, #1
 8015544:	e074      	b.n	8015630 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015546:	68fb      	ldr	r3, [r7, #12]
 8015548:	2200      	movs	r2, #0
 801554a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801554e:	68fb      	ldr	r3, [r7, #12]
 8015550:	2221      	movs	r2, #33	; 0x21
 8015552:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8015556:	f7f9 fdcb 	bl	800f0f0 <HAL_GetTick>
 801555a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801555c:	68fb      	ldr	r3, [r7, #12]
 801555e:	88fa      	ldrh	r2, [r7, #6]
 8015560:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8015564:	68fb      	ldr	r3, [r7, #12]
 8015566:	88fa      	ldrh	r2, [r7, #6]
 8015568:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	689b      	ldr	r3, [r3, #8]
 8015570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015574:	d108      	bne.n	8015588 <HAL_UART_Transmit+0x6c>
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	691b      	ldr	r3, [r3, #16]
 801557a:	2b00      	cmp	r3, #0
 801557c:	d104      	bne.n	8015588 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801557e:	2300      	movs	r3, #0
 8015580:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8015582:	68bb      	ldr	r3, [r7, #8]
 8015584:	61bb      	str	r3, [r7, #24]
 8015586:	e003      	b.n	8015590 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8015588:	68bb      	ldr	r3, [r7, #8]
 801558a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801558c:	2300      	movs	r3, #0
 801558e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8015590:	e030      	b.n	80155f4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8015592:	683b      	ldr	r3, [r7, #0]
 8015594:	9300      	str	r3, [sp, #0]
 8015596:	697b      	ldr	r3, [r7, #20]
 8015598:	2200      	movs	r2, #0
 801559a:	2180      	movs	r1, #128	; 0x80
 801559c:	68f8      	ldr	r0, [r7, #12]
 801559e:	f000 fc87 	bl	8015eb0 <UART_WaitOnFlagUntilTimeout>
 80155a2:	4603      	mov	r3, r0
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d005      	beq.n	80155b4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	2220      	movs	r2, #32
 80155ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80155b0:	2303      	movs	r3, #3
 80155b2:	e03d      	b.n	8015630 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80155b4:	69fb      	ldr	r3, [r7, #28]
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d10b      	bne.n	80155d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80155ba:	69bb      	ldr	r3, [r7, #24]
 80155bc:	881b      	ldrh	r3, [r3, #0]
 80155be:	461a      	mov	r2, r3
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	681b      	ldr	r3, [r3, #0]
 80155c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80155c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80155ca:	69bb      	ldr	r3, [r7, #24]
 80155cc:	3302      	adds	r3, #2
 80155ce:	61bb      	str	r3, [r7, #24]
 80155d0:	e007      	b.n	80155e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80155d2:	69fb      	ldr	r3, [r7, #28]
 80155d4:	781a      	ldrb	r2, [r3, #0]
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	681b      	ldr	r3, [r3, #0]
 80155da:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80155dc:	69fb      	ldr	r3, [r7, #28]
 80155de:	3301      	adds	r3, #1
 80155e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80155e8:	b29b      	uxth	r3, r3
 80155ea:	3b01      	subs	r3, #1
 80155ec:	b29a      	uxth	r2, r3
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80155f4:	68fb      	ldr	r3, [r7, #12]
 80155f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80155fa:	b29b      	uxth	r3, r3
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d1c8      	bne.n	8015592 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8015600:	683b      	ldr	r3, [r7, #0]
 8015602:	9300      	str	r3, [sp, #0]
 8015604:	697b      	ldr	r3, [r7, #20]
 8015606:	2200      	movs	r2, #0
 8015608:	2140      	movs	r1, #64	; 0x40
 801560a:	68f8      	ldr	r0, [r7, #12]
 801560c:	f000 fc50 	bl	8015eb0 <UART_WaitOnFlagUntilTimeout>
 8015610:	4603      	mov	r3, r0
 8015612:	2b00      	cmp	r3, #0
 8015614:	d005      	beq.n	8015622 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	2220      	movs	r2, #32
 801561a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 801561e:	2303      	movs	r3, #3
 8015620:	e006      	b.n	8015630 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8015622:	68fb      	ldr	r3, [r7, #12]
 8015624:	2220      	movs	r2, #32
 8015626:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801562a:	2300      	movs	r3, #0
 801562c:	e000      	b.n	8015630 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801562e:	2302      	movs	r3, #2
  }
}
 8015630:	4618      	mov	r0, r3
 8015632:	3720      	adds	r7, #32
 8015634:	46bd      	mov	sp, r7
 8015636:	bd80      	pop	{r7, pc}

08015638 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015638:	b580      	push	{r7, lr}
 801563a:	b08a      	sub	sp, #40	; 0x28
 801563c:	af02      	add	r7, sp, #8
 801563e:	60f8      	str	r0, [r7, #12]
 8015640:	60b9      	str	r1, [r7, #8]
 8015642:	603b      	str	r3, [r7, #0]
 8015644:	4613      	mov	r3, r2
 8015646:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801564e:	2b20      	cmp	r3, #32
 8015650:	f040 80b5 	bne.w	80157be <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8015654:	68bb      	ldr	r3, [r7, #8]
 8015656:	2b00      	cmp	r3, #0
 8015658:	d002      	beq.n	8015660 <HAL_UART_Receive+0x28>
 801565a:	88fb      	ldrh	r3, [r7, #6]
 801565c:	2b00      	cmp	r3, #0
 801565e:	d101      	bne.n	8015664 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8015660:	2301      	movs	r3, #1
 8015662:	e0ad      	b.n	80157c0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015664:	68fb      	ldr	r3, [r7, #12]
 8015666:	2200      	movs	r2, #0
 8015668:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	2222      	movs	r2, #34	; 0x22
 8015670:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	2200      	movs	r2, #0
 8015678:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801567a:	f7f9 fd39 	bl	800f0f0 <HAL_GetTick>
 801567e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	88fa      	ldrh	r2, [r7, #6]
 8015684:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8015688:	68fb      	ldr	r3, [r7, #12]
 801568a:	88fa      	ldrh	r2, [r7, #6]
 801568c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	689b      	ldr	r3, [r3, #8]
 8015694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015698:	d10e      	bne.n	80156b8 <HAL_UART_Receive+0x80>
 801569a:	68fb      	ldr	r3, [r7, #12]
 801569c:	691b      	ldr	r3, [r3, #16]
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d105      	bne.n	80156ae <HAL_UART_Receive+0x76>
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80156a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80156ac:	e02d      	b.n	801570a <HAL_UART_Receive+0xd2>
 80156ae:	68fb      	ldr	r3, [r7, #12]
 80156b0:	22ff      	movs	r2, #255	; 0xff
 80156b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80156b6:	e028      	b.n	801570a <HAL_UART_Receive+0xd2>
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	689b      	ldr	r3, [r3, #8]
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d10d      	bne.n	80156dc <HAL_UART_Receive+0xa4>
 80156c0:	68fb      	ldr	r3, [r7, #12]
 80156c2:	691b      	ldr	r3, [r3, #16]
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d104      	bne.n	80156d2 <HAL_UART_Receive+0x9a>
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	22ff      	movs	r2, #255	; 0xff
 80156cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80156d0:	e01b      	b.n	801570a <HAL_UART_Receive+0xd2>
 80156d2:	68fb      	ldr	r3, [r7, #12]
 80156d4:	227f      	movs	r2, #127	; 0x7f
 80156d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80156da:	e016      	b.n	801570a <HAL_UART_Receive+0xd2>
 80156dc:	68fb      	ldr	r3, [r7, #12]
 80156de:	689b      	ldr	r3, [r3, #8]
 80156e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80156e4:	d10d      	bne.n	8015702 <HAL_UART_Receive+0xca>
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	691b      	ldr	r3, [r3, #16]
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d104      	bne.n	80156f8 <HAL_UART_Receive+0xc0>
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	227f      	movs	r2, #127	; 0x7f
 80156f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80156f6:	e008      	b.n	801570a <HAL_UART_Receive+0xd2>
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	223f      	movs	r2, #63	; 0x3f
 80156fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015700:	e003      	b.n	801570a <HAL_UART_Receive+0xd2>
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	2200      	movs	r2, #0
 8015706:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 801570a:	68fb      	ldr	r3, [r7, #12]
 801570c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015710:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015712:	68fb      	ldr	r3, [r7, #12]
 8015714:	689b      	ldr	r3, [r3, #8]
 8015716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801571a:	d108      	bne.n	801572e <HAL_UART_Receive+0xf6>
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	691b      	ldr	r3, [r3, #16]
 8015720:	2b00      	cmp	r3, #0
 8015722:	d104      	bne.n	801572e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8015724:	2300      	movs	r3, #0
 8015726:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8015728:	68bb      	ldr	r3, [r7, #8]
 801572a:	61bb      	str	r3, [r7, #24]
 801572c:	e003      	b.n	8015736 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 801572e:	68bb      	ldr	r3, [r7, #8]
 8015730:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8015732:	2300      	movs	r3, #0
 8015734:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8015736:	e036      	b.n	80157a6 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8015738:	683b      	ldr	r3, [r7, #0]
 801573a:	9300      	str	r3, [sp, #0]
 801573c:	697b      	ldr	r3, [r7, #20]
 801573e:	2200      	movs	r2, #0
 8015740:	2120      	movs	r1, #32
 8015742:	68f8      	ldr	r0, [r7, #12]
 8015744:	f000 fbb4 	bl	8015eb0 <UART_WaitOnFlagUntilTimeout>
 8015748:	4603      	mov	r3, r0
 801574a:	2b00      	cmp	r3, #0
 801574c:	d005      	beq.n	801575a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	2220      	movs	r2, #32
 8015752:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8015756:	2303      	movs	r3, #3
 8015758:	e032      	b.n	80157c0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 801575a:	69fb      	ldr	r3, [r7, #28]
 801575c:	2b00      	cmp	r3, #0
 801575e:	d10c      	bne.n	801577a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015766:	b29a      	uxth	r2, r3
 8015768:	8a7b      	ldrh	r3, [r7, #18]
 801576a:	4013      	ands	r3, r2
 801576c:	b29a      	uxth	r2, r3
 801576e:	69bb      	ldr	r3, [r7, #24]
 8015770:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8015772:	69bb      	ldr	r3, [r7, #24]
 8015774:	3302      	adds	r3, #2
 8015776:	61bb      	str	r3, [r7, #24]
 8015778:	e00c      	b.n	8015794 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801577a:	68fb      	ldr	r3, [r7, #12]
 801577c:	681b      	ldr	r3, [r3, #0]
 801577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015780:	b2da      	uxtb	r2, r3
 8015782:	8a7b      	ldrh	r3, [r7, #18]
 8015784:	b2db      	uxtb	r3, r3
 8015786:	4013      	ands	r3, r2
 8015788:	b2da      	uxtb	r2, r3
 801578a:	69fb      	ldr	r3, [r7, #28]
 801578c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 801578e:	69fb      	ldr	r3, [r7, #28]
 8015790:	3301      	adds	r3, #1
 8015792:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801579a:	b29b      	uxth	r3, r3
 801579c:	3b01      	subs	r3, #1
 801579e:	b29a      	uxth	r2, r3
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80157a6:	68fb      	ldr	r3, [r7, #12]
 80157a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80157ac:	b29b      	uxth	r3, r3
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d1c2      	bne.n	8015738 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	2220      	movs	r2, #32
 80157b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80157ba:	2300      	movs	r3, #0
 80157bc:	e000      	b.n	80157c0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80157be:	2302      	movs	r3, #2
  }
}
 80157c0:	4618      	mov	r0, r3
 80157c2:	3720      	adds	r7, #32
 80157c4:	46bd      	mov	sp, r7
 80157c6:	bd80      	pop	{r7, pc}

080157c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80157c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80157cc:	b08c      	sub	sp, #48	; 0x30
 80157ce:	af00      	add	r7, sp, #0
 80157d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80157d2:	2300      	movs	r3, #0
 80157d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80157d8:	697b      	ldr	r3, [r7, #20]
 80157da:	689a      	ldr	r2, [r3, #8]
 80157dc:	697b      	ldr	r3, [r7, #20]
 80157de:	691b      	ldr	r3, [r3, #16]
 80157e0:	431a      	orrs	r2, r3
 80157e2:	697b      	ldr	r3, [r7, #20]
 80157e4:	695b      	ldr	r3, [r3, #20]
 80157e6:	431a      	orrs	r2, r3
 80157e8:	697b      	ldr	r3, [r7, #20]
 80157ea:	69db      	ldr	r3, [r3, #28]
 80157ec:	4313      	orrs	r3, r2
 80157ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80157f0:	697b      	ldr	r3, [r7, #20]
 80157f2:	681b      	ldr	r3, [r3, #0]
 80157f4:	681a      	ldr	r2, [r3, #0]
 80157f6:	4baf      	ldr	r3, [pc, #700]	; (8015ab4 <UART_SetConfig+0x2ec>)
 80157f8:	4013      	ands	r3, r2
 80157fa:	697a      	ldr	r2, [r7, #20]
 80157fc:	6812      	ldr	r2, [r2, #0]
 80157fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015800:	430b      	orrs	r3, r1
 8015802:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8015804:	697b      	ldr	r3, [r7, #20]
 8015806:	681b      	ldr	r3, [r3, #0]
 8015808:	685b      	ldr	r3, [r3, #4]
 801580a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801580e:	697b      	ldr	r3, [r7, #20]
 8015810:	68da      	ldr	r2, [r3, #12]
 8015812:	697b      	ldr	r3, [r7, #20]
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	430a      	orrs	r2, r1
 8015818:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801581a:	697b      	ldr	r3, [r7, #20]
 801581c:	699b      	ldr	r3, [r3, #24]
 801581e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8015820:	697b      	ldr	r3, [r7, #20]
 8015822:	681b      	ldr	r3, [r3, #0]
 8015824:	4aa4      	ldr	r2, [pc, #656]	; (8015ab8 <UART_SetConfig+0x2f0>)
 8015826:	4293      	cmp	r3, r2
 8015828:	d004      	beq.n	8015834 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801582a:	697b      	ldr	r3, [r7, #20]
 801582c:	6a1b      	ldr	r3, [r3, #32]
 801582e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015830:	4313      	orrs	r3, r2
 8015832:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8015834:	697b      	ldr	r3, [r7, #20]
 8015836:	681b      	ldr	r3, [r3, #0]
 8015838:	689b      	ldr	r3, [r3, #8]
 801583a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 801583e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8015842:	697a      	ldr	r2, [r7, #20]
 8015844:	6812      	ldr	r2, [r2, #0]
 8015846:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015848:	430b      	orrs	r3, r1
 801584a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801584c:	697b      	ldr	r3, [r7, #20]
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015852:	f023 010f 	bic.w	r1, r3, #15
 8015856:	697b      	ldr	r3, [r7, #20]
 8015858:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801585a:	697b      	ldr	r3, [r7, #20]
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	430a      	orrs	r2, r1
 8015860:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8015862:	697b      	ldr	r3, [r7, #20]
 8015864:	681b      	ldr	r3, [r3, #0]
 8015866:	4a95      	ldr	r2, [pc, #596]	; (8015abc <UART_SetConfig+0x2f4>)
 8015868:	4293      	cmp	r3, r2
 801586a:	d125      	bne.n	80158b8 <UART_SetConfig+0xf0>
 801586c:	2003      	movs	r0, #3
 801586e:	f7ff fde5 	bl	801543c <LL_RCC_GetUSARTClockSource>
 8015872:	4603      	mov	r3, r0
 8015874:	2b03      	cmp	r3, #3
 8015876:	d81b      	bhi.n	80158b0 <UART_SetConfig+0xe8>
 8015878:	a201      	add	r2, pc, #4	; (adr r2, 8015880 <UART_SetConfig+0xb8>)
 801587a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801587e:	bf00      	nop
 8015880:	08015891 	.word	0x08015891
 8015884:	080158a1 	.word	0x080158a1
 8015888:	08015899 	.word	0x08015899
 801588c:	080158a9 	.word	0x080158a9
 8015890:	2301      	movs	r3, #1
 8015892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8015896:	e042      	b.n	801591e <UART_SetConfig+0x156>
 8015898:	2302      	movs	r3, #2
 801589a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801589e:	e03e      	b.n	801591e <UART_SetConfig+0x156>
 80158a0:	2304      	movs	r3, #4
 80158a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80158a6:	e03a      	b.n	801591e <UART_SetConfig+0x156>
 80158a8:	2308      	movs	r3, #8
 80158aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80158ae:	e036      	b.n	801591e <UART_SetConfig+0x156>
 80158b0:	2310      	movs	r3, #16
 80158b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80158b6:	e032      	b.n	801591e <UART_SetConfig+0x156>
 80158b8:	697b      	ldr	r3, [r7, #20]
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	4a7e      	ldr	r2, [pc, #504]	; (8015ab8 <UART_SetConfig+0x2f0>)
 80158be:	4293      	cmp	r3, r2
 80158c0:	d12a      	bne.n	8015918 <UART_SetConfig+0x150>
 80158c2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80158c6:	f7ff fdc9 	bl	801545c <LL_RCC_GetLPUARTClockSource>
 80158ca:	4603      	mov	r3, r0
 80158cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80158d0:	d01a      	beq.n	8015908 <UART_SetConfig+0x140>
 80158d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80158d6:	d81b      	bhi.n	8015910 <UART_SetConfig+0x148>
 80158d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80158dc:	d00c      	beq.n	80158f8 <UART_SetConfig+0x130>
 80158de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80158e2:	d815      	bhi.n	8015910 <UART_SetConfig+0x148>
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d003      	beq.n	80158f0 <UART_SetConfig+0x128>
 80158e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80158ec:	d008      	beq.n	8015900 <UART_SetConfig+0x138>
 80158ee:	e00f      	b.n	8015910 <UART_SetConfig+0x148>
 80158f0:	2300      	movs	r3, #0
 80158f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80158f6:	e012      	b.n	801591e <UART_SetConfig+0x156>
 80158f8:	2302      	movs	r3, #2
 80158fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80158fe:	e00e      	b.n	801591e <UART_SetConfig+0x156>
 8015900:	2304      	movs	r3, #4
 8015902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8015906:	e00a      	b.n	801591e <UART_SetConfig+0x156>
 8015908:	2308      	movs	r3, #8
 801590a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801590e:	e006      	b.n	801591e <UART_SetConfig+0x156>
 8015910:	2310      	movs	r3, #16
 8015912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8015916:	e002      	b.n	801591e <UART_SetConfig+0x156>
 8015918:	2310      	movs	r3, #16
 801591a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801591e:	697b      	ldr	r3, [r7, #20]
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	4a65      	ldr	r2, [pc, #404]	; (8015ab8 <UART_SetConfig+0x2f0>)
 8015924:	4293      	cmp	r3, r2
 8015926:	f040 8097 	bne.w	8015a58 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801592a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801592e:	2b08      	cmp	r3, #8
 8015930:	d823      	bhi.n	801597a <UART_SetConfig+0x1b2>
 8015932:	a201      	add	r2, pc, #4	; (adr r2, 8015938 <UART_SetConfig+0x170>)
 8015934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015938:	0801595d 	.word	0x0801595d
 801593c:	0801597b 	.word	0x0801597b
 8015940:	08015965 	.word	0x08015965
 8015944:	0801597b 	.word	0x0801597b
 8015948:	0801596b 	.word	0x0801596b
 801594c:	0801597b 	.word	0x0801597b
 8015950:	0801597b 	.word	0x0801597b
 8015954:	0801597b 	.word	0x0801597b
 8015958:	08015973 	.word	0x08015973
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801595c:	f7fe fc56 	bl	801420c <HAL_RCC_GetPCLK1Freq>
 8015960:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8015962:	e010      	b.n	8015986 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015964:	4b56      	ldr	r3, [pc, #344]	; (8015ac0 <UART_SetConfig+0x2f8>)
 8015966:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8015968:	e00d      	b.n	8015986 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801596a:	f7fe fbcf 	bl	801410c <HAL_RCC_GetSysClockFreq>
 801596e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8015970:	e009      	b.n	8015986 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015972:	f248 0306 	movw	r3, #32774	; 0x8006
 8015976:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8015978:	e005      	b.n	8015986 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 801597a:	2300      	movs	r3, #0
 801597c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801597e:	2301      	movs	r3, #1
 8015980:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8015984:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8015986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015988:	2b00      	cmp	r3, #0
 801598a:	f000 812b 	beq.w	8015be4 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801598e:	697b      	ldr	r3, [r7, #20]
 8015990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015992:	4a4c      	ldr	r2, [pc, #304]	; (8015ac4 <UART_SetConfig+0x2fc>)
 8015994:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015998:	461a      	mov	r2, r3
 801599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801599c:	fbb3 f3f2 	udiv	r3, r3, r2
 80159a0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80159a2:	697b      	ldr	r3, [r7, #20]
 80159a4:	685a      	ldr	r2, [r3, #4]
 80159a6:	4613      	mov	r3, r2
 80159a8:	005b      	lsls	r3, r3, #1
 80159aa:	4413      	add	r3, r2
 80159ac:	69ba      	ldr	r2, [r7, #24]
 80159ae:	429a      	cmp	r2, r3
 80159b0:	d305      	bcc.n	80159be <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80159b2:	697b      	ldr	r3, [r7, #20]
 80159b4:	685b      	ldr	r3, [r3, #4]
 80159b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80159b8:	69ba      	ldr	r2, [r7, #24]
 80159ba:	429a      	cmp	r2, r3
 80159bc:	d903      	bls.n	80159c6 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80159be:	2301      	movs	r3, #1
 80159c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80159c4:	e10e      	b.n	8015be4 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80159c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159c8:	2200      	movs	r2, #0
 80159ca:	60bb      	str	r3, [r7, #8]
 80159cc:	60fa      	str	r2, [r7, #12]
 80159ce:	697b      	ldr	r3, [r7, #20]
 80159d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159d2:	4a3c      	ldr	r2, [pc, #240]	; (8015ac4 <UART_SetConfig+0x2fc>)
 80159d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80159d8:	b29b      	uxth	r3, r3
 80159da:	2200      	movs	r2, #0
 80159dc:	603b      	str	r3, [r7, #0]
 80159de:	607a      	str	r2, [r7, #4]
 80159e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80159e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80159e8:	f7f2 f92e 	bl	8007c48 <__aeabi_uldivmod>
 80159ec:	4602      	mov	r2, r0
 80159ee:	460b      	mov	r3, r1
 80159f0:	4610      	mov	r0, r2
 80159f2:	4619      	mov	r1, r3
 80159f4:	f04f 0200 	mov.w	r2, #0
 80159f8:	f04f 0300 	mov.w	r3, #0
 80159fc:	020b      	lsls	r3, r1, #8
 80159fe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8015a02:	0202      	lsls	r2, r0, #8
 8015a04:	6979      	ldr	r1, [r7, #20]
 8015a06:	6849      	ldr	r1, [r1, #4]
 8015a08:	0849      	lsrs	r1, r1, #1
 8015a0a:	2000      	movs	r0, #0
 8015a0c:	460c      	mov	r4, r1
 8015a0e:	4605      	mov	r5, r0
 8015a10:	eb12 0804 	adds.w	r8, r2, r4
 8015a14:	eb43 0905 	adc.w	r9, r3, r5
 8015a18:	697b      	ldr	r3, [r7, #20]
 8015a1a:	685b      	ldr	r3, [r3, #4]
 8015a1c:	2200      	movs	r2, #0
 8015a1e:	469a      	mov	sl, r3
 8015a20:	4693      	mov	fp, r2
 8015a22:	4652      	mov	r2, sl
 8015a24:	465b      	mov	r3, fp
 8015a26:	4640      	mov	r0, r8
 8015a28:	4649      	mov	r1, r9
 8015a2a:	f7f2 f90d 	bl	8007c48 <__aeabi_uldivmod>
 8015a2e:	4602      	mov	r2, r0
 8015a30:	460b      	mov	r3, r1
 8015a32:	4613      	mov	r3, r2
 8015a34:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8015a36:	6a3b      	ldr	r3, [r7, #32]
 8015a38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015a3c:	d308      	bcc.n	8015a50 <UART_SetConfig+0x288>
 8015a3e:	6a3b      	ldr	r3, [r7, #32]
 8015a40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015a44:	d204      	bcs.n	8015a50 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8015a46:	697b      	ldr	r3, [r7, #20]
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	6a3a      	ldr	r2, [r7, #32]
 8015a4c:	60da      	str	r2, [r3, #12]
 8015a4e:	e0c9      	b.n	8015be4 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8015a50:	2301      	movs	r3, #1
 8015a52:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8015a56:	e0c5      	b.n	8015be4 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8015a58:	697b      	ldr	r3, [r7, #20]
 8015a5a:	69db      	ldr	r3, [r3, #28]
 8015a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015a60:	d16d      	bne.n	8015b3e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8015a62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015a66:	3b01      	subs	r3, #1
 8015a68:	2b07      	cmp	r3, #7
 8015a6a:	d82d      	bhi.n	8015ac8 <UART_SetConfig+0x300>
 8015a6c:	a201      	add	r2, pc, #4	; (adr r2, 8015a74 <UART_SetConfig+0x2ac>)
 8015a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a72:	bf00      	nop
 8015a74:	08015a95 	.word	0x08015a95
 8015a78:	08015a9d 	.word	0x08015a9d
 8015a7c:	08015ac9 	.word	0x08015ac9
 8015a80:	08015aa3 	.word	0x08015aa3
 8015a84:	08015ac9 	.word	0x08015ac9
 8015a88:	08015ac9 	.word	0x08015ac9
 8015a8c:	08015ac9 	.word	0x08015ac9
 8015a90:	08015aab 	.word	0x08015aab
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015a94:	f7fe fbd0 	bl	8014238 <HAL_RCC_GetPCLK2Freq>
 8015a98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8015a9a:	e01b      	b.n	8015ad4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015a9c:	4b08      	ldr	r3, [pc, #32]	; (8015ac0 <UART_SetConfig+0x2f8>)
 8015a9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8015aa0:	e018      	b.n	8015ad4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8015aa2:	f7fe fb33 	bl	801410c <HAL_RCC_GetSysClockFreq>
 8015aa6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8015aa8:	e014      	b.n	8015ad4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015aaa:	f248 0306 	movw	r3, #32774	; 0x8006
 8015aae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8015ab0:	e010      	b.n	8015ad4 <UART_SetConfig+0x30c>
 8015ab2:	bf00      	nop
 8015ab4:	cfff69f3 	.word	0xcfff69f3
 8015ab8:	40008000 	.word	0x40008000
 8015abc:	40013800 	.word	0x40013800
 8015ac0:	00f42400 	.word	0x00f42400
 8015ac4:	0801dda8 	.word	0x0801dda8
      default:
        pclk = 0U;
 8015ac8:	2300      	movs	r3, #0
 8015aca:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8015acc:	2301      	movs	r3, #1
 8015ace:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8015ad2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8015ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	f000 8084 	beq.w	8015be4 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015adc:	697b      	ldr	r3, [r7, #20]
 8015ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ae0:	4a4b      	ldr	r2, [pc, #300]	; (8015c10 <UART_SetConfig+0x448>)
 8015ae2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015ae6:	461a      	mov	r2, r3
 8015ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015aea:	fbb3 f3f2 	udiv	r3, r3, r2
 8015aee:	005a      	lsls	r2, r3, #1
 8015af0:	697b      	ldr	r3, [r7, #20]
 8015af2:	685b      	ldr	r3, [r3, #4]
 8015af4:	085b      	lsrs	r3, r3, #1
 8015af6:	441a      	add	r2, r3
 8015af8:	697b      	ldr	r3, [r7, #20]
 8015afa:	685b      	ldr	r3, [r3, #4]
 8015afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8015b00:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015b02:	6a3b      	ldr	r3, [r7, #32]
 8015b04:	2b0f      	cmp	r3, #15
 8015b06:	d916      	bls.n	8015b36 <UART_SetConfig+0x36e>
 8015b08:	6a3b      	ldr	r3, [r7, #32]
 8015b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015b0e:	d212      	bcs.n	8015b36 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8015b10:	6a3b      	ldr	r3, [r7, #32]
 8015b12:	b29b      	uxth	r3, r3
 8015b14:	f023 030f 	bic.w	r3, r3, #15
 8015b18:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8015b1a:	6a3b      	ldr	r3, [r7, #32]
 8015b1c:	085b      	lsrs	r3, r3, #1
 8015b1e:	b29b      	uxth	r3, r3
 8015b20:	f003 0307 	and.w	r3, r3, #7
 8015b24:	b29a      	uxth	r2, r3
 8015b26:	8bfb      	ldrh	r3, [r7, #30]
 8015b28:	4313      	orrs	r3, r2
 8015b2a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8015b2c:	697b      	ldr	r3, [r7, #20]
 8015b2e:	681b      	ldr	r3, [r3, #0]
 8015b30:	8bfa      	ldrh	r2, [r7, #30]
 8015b32:	60da      	str	r2, [r3, #12]
 8015b34:	e056      	b.n	8015be4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8015b36:	2301      	movs	r3, #1
 8015b38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8015b3c:	e052      	b.n	8015be4 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8015b3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015b42:	3b01      	subs	r3, #1
 8015b44:	2b07      	cmp	r3, #7
 8015b46:	d822      	bhi.n	8015b8e <UART_SetConfig+0x3c6>
 8015b48:	a201      	add	r2, pc, #4	; (adr r2, 8015b50 <UART_SetConfig+0x388>)
 8015b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b4e:	bf00      	nop
 8015b50:	08015b71 	.word	0x08015b71
 8015b54:	08015b79 	.word	0x08015b79
 8015b58:	08015b8f 	.word	0x08015b8f
 8015b5c:	08015b7f 	.word	0x08015b7f
 8015b60:	08015b8f 	.word	0x08015b8f
 8015b64:	08015b8f 	.word	0x08015b8f
 8015b68:	08015b8f 	.word	0x08015b8f
 8015b6c:	08015b87 	.word	0x08015b87
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015b70:	f7fe fb62 	bl	8014238 <HAL_RCC_GetPCLK2Freq>
 8015b74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8015b76:	e010      	b.n	8015b9a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015b78:	4b26      	ldr	r3, [pc, #152]	; (8015c14 <UART_SetConfig+0x44c>)
 8015b7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8015b7c:	e00d      	b.n	8015b9a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8015b7e:	f7fe fac5 	bl	801410c <HAL_RCC_GetSysClockFreq>
 8015b82:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8015b84:	e009      	b.n	8015b9a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015b86:	f248 0306 	movw	r3, #32774	; 0x8006
 8015b8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8015b8c:	e005      	b.n	8015b9a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8015b8e:	2300      	movs	r3, #0
 8015b90:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8015b92:	2301      	movs	r3, #1
 8015b94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8015b98:	bf00      	nop
    }

    if (pclk != 0U)
 8015b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d021      	beq.n	8015be4 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015ba0:	697b      	ldr	r3, [r7, #20]
 8015ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ba4:	4a1a      	ldr	r2, [pc, #104]	; (8015c10 <UART_SetConfig+0x448>)
 8015ba6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015baa:	461a      	mov	r2, r3
 8015bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bae:	fbb3 f2f2 	udiv	r2, r3, r2
 8015bb2:	697b      	ldr	r3, [r7, #20]
 8015bb4:	685b      	ldr	r3, [r3, #4]
 8015bb6:	085b      	lsrs	r3, r3, #1
 8015bb8:	441a      	add	r2, r3
 8015bba:	697b      	ldr	r3, [r7, #20]
 8015bbc:	685b      	ldr	r3, [r3, #4]
 8015bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8015bc2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015bc4:	6a3b      	ldr	r3, [r7, #32]
 8015bc6:	2b0f      	cmp	r3, #15
 8015bc8:	d909      	bls.n	8015bde <UART_SetConfig+0x416>
 8015bca:	6a3b      	ldr	r3, [r7, #32]
 8015bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015bd0:	d205      	bcs.n	8015bde <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8015bd2:	6a3b      	ldr	r3, [r7, #32]
 8015bd4:	b29a      	uxth	r2, r3
 8015bd6:	697b      	ldr	r3, [r7, #20]
 8015bd8:	681b      	ldr	r3, [r3, #0]
 8015bda:	60da      	str	r2, [r3, #12]
 8015bdc:	e002      	b.n	8015be4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8015bde:	2301      	movs	r3, #1
 8015be0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8015be4:	697b      	ldr	r3, [r7, #20]
 8015be6:	2201      	movs	r2, #1
 8015be8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8015bec:	697b      	ldr	r3, [r7, #20]
 8015bee:	2201      	movs	r2, #1
 8015bf0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8015bf4:	697b      	ldr	r3, [r7, #20]
 8015bf6:	2200      	movs	r2, #0
 8015bf8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8015bfa:	697b      	ldr	r3, [r7, #20]
 8015bfc:	2200      	movs	r2, #0
 8015bfe:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8015c00:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8015c04:	4618      	mov	r0, r3
 8015c06:	3730      	adds	r7, #48	; 0x30
 8015c08:	46bd      	mov	sp, r7
 8015c0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015c0e:	bf00      	nop
 8015c10:	0801dda8 	.word	0x0801dda8
 8015c14:	00f42400 	.word	0x00f42400

08015c18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8015c18:	b480      	push	{r7}
 8015c1a:	b083      	sub	sp, #12
 8015c1c:	af00      	add	r7, sp, #0
 8015c1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c24:	f003 0308 	and.w	r3, r3, #8
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d00a      	beq.n	8015c42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	685b      	ldr	r3, [r3, #4]
 8015c32:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	430a      	orrs	r2, r1
 8015c40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c46:	f003 0301 	and.w	r3, r3, #1
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d00a      	beq.n	8015c64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	681b      	ldr	r3, [r3, #0]
 8015c52:	685b      	ldr	r3, [r3, #4]
 8015c54:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	681b      	ldr	r3, [r3, #0]
 8015c60:	430a      	orrs	r2, r1
 8015c62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c68:	f003 0302 	and.w	r3, r3, #2
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d00a      	beq.n	8015c86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	681b      	ldr	r3, [r3, #0]
 8015c74:	685b      	ldr	r3, [r3, #4]
 8015c76:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	430a      	orrs	r2, r1
 8015c84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c8a:	f003 0304 	and.w	r3, r3, #4
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d00a      	beq.n	8015ca8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	681b      	ldr	r3, [r3, #0]
 8015c96:	685b      	ldr	r3, [r3, #4]
 8015c98:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	681b      	ldr	r3, [r3, #0]
 8015ca4:	430a      	orrs	r2, r1
 8015ca6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015cac:	f003 0310 	and.w	r3, r3, #16
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d00a      	beq.n	8015cca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	681b      	ldr	r3, [r3, #0]
 8015cb8:	689b      	ldr	r3, [r3, #8]
 8015cba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	681b      	ldr	r3, [r3, #0]
 8015cc6:	430a      	orrs	r2, r1
 8015cc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015cce:	f003 0320 	and.w	r3, r3, #32
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d00a      	beq.n	8015cec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	689b      	ldr	r3, [r3, #8]
 8015cdc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	681b      	ldr	r3, [r3, #0]
 8015ce8:	430a      	orrs	r2, r1
 8015cea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d01a      	beq.n	8015d2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	681b      	ldr	r3, [r3, #0]
 8015cfc:	685b      	ldr	r3, [r3, #4]
 8015cfe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	681b      	ldr	r3, [r3, #0]
 8015d0a:	430a      	orrs	r2, r1
 8015d0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015d12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015d16:	d10a      	bne.n	8015d2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	681b      	ldr	r3, [r3, #0]
 8015d1c:	685b      	ldr	r3, [r3, #4]
 8015d1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	430a      	orrs	r2, r1
 8015d2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d00a      	beq.n	8015d50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	681b      	ldr	r3, [r3, #0]
 8015d3e:	685b      	ldr	r3, [r3, #4]
 8015d40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	681b      	ldr	r3, [r3, #0]
 8015d4c:	430a      	orrs	r2, r1
 8015d4e:	605a      	str	r2, [r3, #4]
  }
}
 8015d50:	bf00      	nop
 8015d52:	370c      	adds	r7, #12
 8015d54:	46bd      	mov	sp, r7
 8015d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d5a:	4770      	bx	lr

08015d5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8015d5c:	b580      	push	{r7, lr}
 8015d5e:	b098      	sub	sp, #96	; 0x60
 8015d60:	af02      	add	r7, sp, #8
 8015d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	2200      	movs	r2, #0
 8015d68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8015d6c:	f7f9 f9c0 	bl	800f0f0 <HAL_GetTick>
 8015d70:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	681b      	ldr	r3, [r3, #0]
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	f003 0308 	and.w	r3, r3, #8
 8015d7c:	2b08      	cmp	r3, #8
 8015d7e:	d12f      	bne.n	8015de0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015d80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015d84:	9300      	str	r3, [sp, #0]
 8015d86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015d88:	2200      	movs	r2, #0
 8015d8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015d8e:	6878      	ldr	r0, [r7, #4]
 8015d90:	f000 f88e 	bl	8015eb0 <UART_WaitOnFlagUntilTimeout>
 8015d94:	4603      	mov	r3, r0
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d022      	beq.n	8015de0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015da2:	e853 3f00 	ldrex	r3, [r3]
 8015da6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015daa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015dae:	653b      	str	r3, [r7, #80]	; 0x50
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	681b      	ldr	r3, [r3, #0]
 8015db4:	461a      	mov	r2, r3
 8015db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015db8:	647b      	str	r3, [r7, #68]	; 0x44
 8015dba:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015dbc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015dbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015dc0:	e841 2300 	strex	r3, r2, [r1]
 8015dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d1e6      	bne.n	8015d9a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	2220      	movs	r2, #32
 8015dd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	2200      	movs	r2, #0
 8015dd8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015ddc:	2303      	movs	r3, #3
 8015dde:	e063      	b.n	8015ea8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	681b      	ldr	r3, [r3, #0]
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	f003 0304 	and.w	r3, r3, #4
 8015dea:	2b04      	cmp	r3, #4
 8015dec:	d149      	bne.n	8015e82 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015dee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015df2:	9300      	str	r3, [sp, #0]
 8015df4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015df6:	2200      	movs	r2, #0
 8015df8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8015dfc:	6878      	ldr	r0, [r7, #4]
 8015dfe:	f000 f857 	bl	8015eb0 <UART_WaitOnFlagUntilTimeout>
 8015e02:	4603      	mov	r3, r0
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d03c      	beq.n	8015e82 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	681b      	ldr	r3, [r3, #0]
 8015e0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e10:	e853 3f00 	ldrex	r3, [r3]
 8015e14:	623b      	str	r3, [r7, #32]
   return(result);
 8015e16:	6a3b      	ldr	r3, [r7, #32]
 8015e18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015e1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	681b      	ldr	r3, [r3, #0]
 8015e22:	461a      	mov	r2, r3
 8015e24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015e26:	633b      	str	r3, [r7, #48]	; 0x30
 8015e28:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015e2e:	e841 2300 	strex	r3, r2, [r1]
 8015e32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d1e6      	bne.n	8015e08 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	3308      	adds	r3, #8
 8015e40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e42:	693b      	ldr	r3, [r7, #16]
 8015e44:	e853 3f00 	ldrex	r3, [r3]
 8015e48:	60fb      	str	r3, [r7, #12]
   return(result);
 8015e4a:	68fb      	ldr	r3, [r7, #12]
 8015e4c:	f023 0301 	bic.w	r3, r3, #1
 8015e50:	64bb      	str	r3, [r7, #72]	; 0x48
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	3308      	adds	r3, #8
 8015e58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015e5a:	61fa      	str	r2, [r7, #28]
 8015e5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e5e:	69b9      	ldr	r1, [r7, #24]
 8015e60:	69fa      	ldr	r2, [r7, #28]
 8015e62:	e841 2300 	strex	r3, r2, [r1]
 8015e66:	617b      	str	r3, [r7, #20]
   return(result);
 8015e68:	697b      	ldr	r3, [r7, #20]
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d1e5      	bne.n	8015e3a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	2220      	movs	r2, #32
 8015e72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	2200      	movs	r2, #0
 8015e7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015e7e:	2303      	movs	r3, #3
 8015e80:	e012      	b.n	8015ea8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	2220      	movs	r2, #32
 8015e86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	2220      	movs	r2, #32
 8015e8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	2200      	movs	r2, #0
 8015e96:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	2200      	movs	r2, #0
 8015e9c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	2200      	movs	r2, #0
 8015ea2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8015ea6:	2300      	movs	r3, #0
}
 8015ea8:	4618      	mov	r0, r3
 8015eaa:	3758      	adds	r7, #88	; 0x58
 8015eac:	46bd      	mov	sp, r7
 8015eae:	bd80      	pop	{r7, pc}

08015eb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8015eb0:	b580      	push	{r7, lr}
 8015eb2:	b084      	sub	sp, #16
 8015eb4:	af00      	add	r7, sp, #0
 8015eb6:	60f8      	str	r0, [r7, #12]
 8015eb8:	60b9      	str	r1, [r7, #8]
 8015eba:	603b      	str	r3, [r7, #0]
 8015ebc:	4613      	mov	r3, r2
 8015ebe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015ec0:	e04f      	b.n	8015f62 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015ec2:	69bb      	ldr	r3, [r7, #24]
 8015ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ec8:	d04b      	beq.n	8015f62 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015eca:	f7f9 f911 	bl	800f0f0 <HAL_GetTick>
 8015ece:	4602      	mov	r2, r0
 8015ed0:	683b      	ldr	r3, [r7, #0]
 8015ed2:	1ad3      	subs	r3, r2, r3
 8015ed4:	69ba      	ldr	r2, [r7, #24]
 8015ed6:	429a      	cmp	r2, r3
 8015ed8:	d302      	bcc.n	8015ee0 <UART_WaitOnFlagUntilTimeout+0x30>
 8015eda:	69bb      	ldr	r3, [r7, #24]
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d101      	bne.n	8015ee4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8015ee0:	2303      	movs	r3, #3
 8015ee2:	e04e      	b.n	8015f82 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8015ee4:	68fb      	ldr	r3, [r7, #12]
 8015ee6:	681b      	ldr	r3, [r3, #0]
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	f003 0304 	and.w	r3, r3, #4
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d037      	beq.n	8015f62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8015ef2:	68bb      	ldr	r3, [r7, #8]
 8015ef4:	2b80      	cmp	r3, #128	; 0x80
 8015ef6:	d034      	beq.n	8015f62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8015ef8:	68bb      	ldr	r3, [r7, #8]
 8015efa:	2b40      	cmp	r3, #64	; 0x40
 8015efc:	d031      	beq.n	8015f62 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8015efe:	68fb      	ldr	r3, [r7, #12]
 8015f00:	681b      	ldr	r3, [r3, #0]
 8015f02:	69db      	ldr	r3, [r3, #28]
 8015f04:	f003 0308 	and.w	r3, r3, #8
 8015f08:	2b08      	cmp	r3, #8
 8015f0a:	d110      	bne.n	8015f2e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8015f0c:	68fb      	ldr	r3, [r7, #12]
 8015f0e:	681b      	ldr	r3, [r3, #0]
 8015f10:	2208      	movs	r2, #8
 8015f12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015f14:	68f8      	ldr	r0, [r7, #12]
 8015f16:	f000 f838 	bl	8015f8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8015f1a:	68fb      	ldr	r3, [r7, #12]
 8015f1c:	2208      	movs	r2, #8
 8015f1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015f22:	68fb      	ldr	r3, [r7, #12]
 8015f24:	2200      	movs	r2, #0
 8015f26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8015f2a:	2301      	movs	r3, #1
 8015f2c:	e029      	b.n	8015f82 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8015f2e:	68fb      	ldr	r3, [r7, #12]
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	69db      	ldr	r3, [r3, #28]
 8015f34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015f38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015f3c:	d111      	bne.n	8015f62 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8015f3e:	68fb      	ldr	r3, [r7, #12]
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015f46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015f48:	68f8      	ldr	r0, [r7, #12]
 8015f4a:	f000 f81e 	bl	8015f8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	2220      	movs	r2, #32
 8015f52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015f56:	68fb      	ldr	r3, [r7, #12]
 8015f58:	2200      	movs	r2, #0
 8015f5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8015f5e:	2303      	movs	r3, #3
 8015f60:	e00f      	b.n	8015f82 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015f62:	68fb      	ldr	r3, [r7, #12]
 8015f64:	681b      	ldr	r3, [r3, #0]
 8015f66:	69da      	ldr	r2, [r3, #28]
 8015f68:	68bb      	ldr	r3, [r7, #8]
 8015f6a:	4013      	ands	r3, r2
 8015f6c:	68ba      	ldr	r2, [r7, #8]
 8015f6e:	429a      	cmp	r2, r3
 8015f70:	bf0c      	ite	eq
 8015f72:	2301      	moveq	r3, #1
 8015f74:	2300      	movne	r3, #0
 8015f76:	b2db      	uxtb	r3, r3
 8015f78:	461a      	mov	r2, r3
 8015f7a:	79fb      	ldrb	r3, [r7, #7]
 8015f7c:	429a      	cmp	r2, r3
 8015f7e:	d0a0      	beq.n	8015ec2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8015f80:	2300      	movs	r3, #0
}
 8015f82:	4618      	mov	r0, r3
 8015f84:	3710      	adds	r7, #16
 8015f86:	46bd      	mov	sp, r7
 8015f88:	bd80      	pop	{r7, pc}

08015f8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8015f8a:	b480      	push	{r7}
 8015f8c:	b095      	sub	sp, #84	; 0x54
 8015f8e:	af00      	add	r7, sp, #0
 8015f90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	681b      	ldr	r3, [r3, #0]
 8015f96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f9a:	e853 3f00 	ldrex	r3, [r3]
 8015f9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8015fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fa2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	461a      	mov	r2, r3
 8015fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015fb0:	643b      	str	r3, [r7, #64]	; 0x40
 8015fb2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015fb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015fb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015fb8:	e841 2300 	strex	r3, r2, [r1]
 8015fbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d1e6      	bne.n	8015f92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	3308      	adds	r3, #8
 8015fca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015fcc:	6a3b      	ldr	r3, [r7, #32]
 8015fce:	e853 3f00 	ldrex	r3, [r3]
 8015fd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8015fd4:	69fb      	ldr	r3, [r7, #28]
 8015fd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8015fda:	f023 0301 	bic.w	r3, r3, #1
 8015fde:	64bb      	str	r3, [r7, #72]	; 0x48
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	3308      	adds	r3, #8
 8015fe6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015fe8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015fea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015fec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015fee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015ff0:	e841 2300 	strex	r3, r2, [r1]
 8015ff4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d1e3      	bne.n	8015fc4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016000:	2b01      	cmp	r3, #1
 8016002:	d118      	bne.n	8016036 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801600a:	68fb      	ldr	r3, [r7, #12]
 801600c:	e853 3f00 	ldrex	r3, [r3]
 8016010:	60bb      	str	r3, [r7, #8]
   return(result);
 8016012:	68bb      	ldr	r3, [r7, #8]
 8016014:	f023 0310 	bic.w	r3, r3, #16
 8016018:	647b      	str	r3, [r7, #68]	; 0x44
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	461a      	mov	r2, r3
 8016020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016022:	61bb      	str	r3, [r7, #24]
 8016024:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016026:	6979      	ldr	r1, [r7, #20]
 8016028:	69ba      	ldr	r2, [r7, #24]
 801602a:	e841 2300 	strex	r3, r2, [r1]
 801602e:	613b      	str	r3, [r7, #16]
   return(result);
 8016030:	693b      	ldr	r3, [r7, #16]
 8016032:	2b00      	cmp	r3, #0
 8016034:	d1e6      	bne.n	8016004 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	2220      	movs	r2, #32
 801603a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	2200      	movs	r2, #0
 8016042:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	2200      	movs	r2, #0
 8016048:	675a      	str	r2, [r3, #116]	; 0x74
}
 801604a:	bf00      	nop
 801604c:	3754      	adds	r7, #84	; 0x54
 801604e:	46bd      	mov	sp, r7
 8016050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016054:	4770      	bx	lr

08016056 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8016056:	b480      	push	{r7}
 8016058:	b085      	sub	sp, #20
 801605a:	af00      	add	r7, sp, #0
 801605c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016064:	2b01      	cmp	r3, #1
 8016066:	d101      	bne.n	801606c <HAL_UARTEx_DisableFifoMode+0x16>
 8016068:	2302      	movs	r3, #2
 801606a:	e027      	b.n	80160bc <HAL_UARTEx_DisableFifoMode+0x66>
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	2201      	movs	r2, #1
 8016070:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	2224      	movs	r2, #36	; 0x24
 8016078:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	681b      	ldr	r3, [r3, #0]
 8016080:	681b      	ldr	r3, [r3, #0]
 8016082:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	681b      	ldr	r3, [r3, #0]
 8016088:	681a      	ldr	r2, [r3, #0]
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	681b      	ldr	r3, [r3, #0]
 801608e:	f022 0201 	bic.w	r2, r2, #1
 8016092:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8016094:	68fb      	ldr	r3, [r7, #12]
 8016096:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801609a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	2200      	movs	r2, #0
 80160a0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	681b      	ldr	r3, [r3, #0]
 80160a6:	68fa      	ldr	r2, [r7, #12]
 80160a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	2220      	movs	r2, #32
 80160ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	2200      	movs	r2, #0
 80160b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80160ba:	2300      	movs	r3, #0
}
 80160bc:	4618      	mov	r0, r3
 80160be:	3714      	adds	r7, #20
 80160c0:	46bd      	mov	sp, r7
 80160c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160c6:	4770      	bx	lr

080160c8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80160c8:	b580      	push	{r7, lr}
 80160ca:	b084      	sub	sp, #16
 80160cc:	af00      	add	r7, sp, #0
 80160ce:	6078      	str	r0, [r7, #4]
 80160d0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80160d8:	2b01      	cmp	r3, #1
 80160da:	d101      	bne.n	80160e0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80160dc:	2302      	movs	r3, #2
 80160de:	e02d      	b.n	801613c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	2201      	movs	r2, #1
 80160e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	2224      	movs	r2, #36	; 0x24
 80160ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	681b      	ldr	r3, [r3, #0]
 80160f4:	681b      	ldr	r3, [r3, #0]
 80160f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	681b      	ldr	r3, [r3, #0]
 80160fc:	681a      	ldr	r2, [r3, #0]
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	681b      	ldr	r3, [r3, #0]
 8016102:	f022 0201 	bic.w	r2, r2, #1
 8016106:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	681b      	ldr	r3, [r3, #0]
 801610c:	689b      	ldr	r3, [r3, #8]
 801610e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	681b      	ldr	r3, [r3, #0]
 8016116:	683a      	ldr	r2, [r7, #0]
 8016118:	430a      	orrs	r2, r1
 801611a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801611c:	6878      	ldr	r0, [r7, #4]
 801611e:	f000 f84f 	bl	80161c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	68fa      	ldr	r2, [r7, #12]
 8016128:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	2220      	movs	r2, #32
 801612e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	2200      	movs	r2, #0
 8016136:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801613a:	2300      	movs	r3, #0
}
 801613c:	4618      	mov	r0, r3
 801613e:	3710      	adds	r7, #16
 8016140:	46bd      	mov	sp, r7
 8016142:	bd80      	pop	{r7, pc}

08016144 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8016144:	b580      	push	{r7, lr}
 8016146:	b084      	sub	sp, #16
 8016148:	af00      	add	r7, sp, #0
 801614a:	6078      	str	r0, [r7, #4]
 801614c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016154:	2b01      	cmp	r3, #1
 8016156:	d101      	bne.n	801615c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8016158:	2302      	movs	r3, #2
 801615a:	e02d      	b.n	80161b8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	2201      	movs	r2, #1
 8016160:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	2224      	movs	r2, #36	; 0x24
 8016168:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	681b      	ldr	r3, [r3, #0]
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	681a      	ldr	r2, [r3, #0]
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	f022 0201 	bic.w	r2, r2, #1
 8016182:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	681b      	ldr	r3, [r3, #0]
 8016188:	689b      	ldr	r3, [r3, #8]
 801618a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	683a      	ldr	r2, [r7, #0]
 8016194:	430a      	orrs	r2, r1
 8016196:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016198:	6878      	ldr	r0, [r7, #4]
 801619a:	f000 f811 	bl	80161c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	681b      	ldr	r3, [r3, #0]
 80161a2:	68fa      	ldr	r2, [r7, #12]
 80161a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	2220      	movs	r2, #32
 80161aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	2200      	movs	r2, #0
 80161b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80161b6:	2300      	movs	r3, #0
}
 80161b8:	4618      	mov	r0, r3
 80161ba:	3710      	adds	r7, #16
 80161bc:	46bd      	mov	sp, r7
 80161be:	bd80      	pop	{r7, pc}

080161c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80161c0:	b480      	push	{r7}
 80161c2:	b085      	sub	sp, #20
 80161c4:	af00      	add	r7, sp, #0
 80161c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d108      	bne.n	80161e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	2201      	movs	r2, #1
 80161d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	2201      	movs	r2, #1
 80161dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80161e0:	e031      	b.n	8016246 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80161e2:	2308      	movs	r3, #8
 80161e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80161e6:	2308      	movs	r3, #8
 80161e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	689b      	ldr	r3, [r3, #8]
 80161f0:	0e5b      	lsrs	r3, r3, #25
 80161f2:	b2db      	uxtb	r3, r3
 80161f4:	f003 0307 	and.w	r3, r3, #7
 80161f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	681b      	ldr	r3, [r3, #0]
 80161fe:	689b      	ldr	r3, [r3, #8]
 8016200:	0f5b      	lsrs	r3, r3, #29
 8016202:	b2db      	uxtb	r3, r3
 8016204:	f003 0307 	and.w	r3, r3, #7
 8016208:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801620a:	7bbb      	ldrb	r3, [r7, #14]
 801620c:	7b3a      	ldrb	r2, [r7, #12]
 801620e:	4911      	ldr	r1, [pc, #68]	; (8016254 <UARTEx_SetNbDataToProcess+0x94>)
 8016210:	5c8a      	ldrb	r2, [r1, r2]
 8016212:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8016216:	7b3a      	ldrb	r2, [r7, #12]
 8016218:	490f      	ldr	r1, [pc, #60]	; (8016258 <UARTEx_SetNbDataToProcess+0x98>)
 801621a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801621c:	fb93 f3f2 	sdiv	r3, r3, r2
 8016220:	b29a      	uxth	r2, r3
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8016228:	7bfb      	ldrb	r3, [r7, #15]
 801622a:	7b7a      	ldrb	r2, [r7, #13]
 801622c:	4909      	ldr	r1, [pc, #36]	; (8016254 <UARTEx_SetNbDataToProcess+0x94>)
 801622e:	5c8a      	ldrb	r2, [r1, r2]
 8016230:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8016234:	7b7a      	ldrb	r2, [r7, #13]
 8016236:	4908      	ldr	r1, [pc, #32]	; (8016258 <UARTEx_SetNbDataToProcess+0x98>)
 8016238:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801623a:	fb93 f3f2 	sdiv	r3, r3, r2
 801623e:	b29a      	uxth	r2, r3
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8016246:	bf00      	nop
 8016248:	3714      	adds	r7, #20
 801624a:	46bd      	mov	sp, r7
 801624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016250:	4770      	bx	lr
 8016252:	bf00      	nop
 8016254:	0801ddc0 	.word	0x0801ddc0
 8016258:	0801ddc8 	.word	0x0801ddc8

0801625c <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 801625c:	b580      	push	{r7, lr}
 801625e:	b088      	sub	sp, #32
 8016260:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8016262:	2300      	movs	r3, #0
 8016264:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8016266:	f107 0308 	add.w	r3, r7, #8
 801626a:	2218      	movs	r2, #24
 801626c:	2100      	movs	r1, #0
 801626e:	4618      	mov	r0, r3
 8016270:	f001 faca 	bl	8017808 <Osal_MemSet>
  rq.ogf = 0x3f;
 8016274:	233f      	movs	r3, #63	; 0x3f
 8016276:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8016278:	2381      	movs	r3, #129	; 0x81
 801627a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 801627c:	1dfb      	adds	r3, r7, #7
 801627e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8016280:	2301      	movs	r3, #1
 8016282:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8016284:	f107 0308 	add.w	r3, r7, #8
 8016288:	2100      	movs	r1, #0
 801628a:	4618      	mov	r0, r3
 801628c:	f001 f97a 	bl	8017584 <hci_send_req>
 8016290:	4603      	mov	r3, r0
 8016292:	2b00      	cmp	r3, #0
 8016294:	da01      	bge.n	801629a <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8016296:	23ff      	movs	r3, #255	; 0xff
 8016298:	e000      	b.n	801629c <aci_gap_set_non_discoverable+0x40>
  return status;
 801629a:	79fb      	ldrb	r3, [r7, #7]
}
 801629c:	4618      	mov	r0, r3
 801629e:	3720      	adds	r7, #32
 80162a0:	46bd      	mov	sp, r7
 80162a2:	bd80      	pop	{r7, pc}

080162a4 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 80162a4:	b5b0      	push	{r4, r5, r7, lr}
 80162a6:	b0ce      	sub	sp, #312	; 0x138
 80162a8:	af00      	add	r7, sp, #0
 80162aa:	4605      	mov	r5, r0
 80162ac:	460c      	mov	r4, r1
 80162ae:	4610      	mov	r0, r2
 80162b0:	4619      	mov	r1, r3
 80162b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80162b6:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80162ba:	462a      	mov	r2, r5
 80162bc:	701a      	strb	r2, [r3, #0]
 80162be:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80162c2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80162c6:	4622      	mov	r2, r4
 80162c8:	801a      	strh	r2, [r3, #0]
 80162ca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80162ce:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80162d2:	4602      	mov	r2, r0
 80162d4:	801a      	strh	r2, [r3, #0]
 80162d6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80162da:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80162de:	460a      	mov	r2, r1
 80162e0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80162e2:	f107 0310 	add.w	r3, r7, #16
 80162e6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80162ea:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80162ee:	3308      	adds	r3, #8
 80162f0:	f107 0210 	add.w	r2, r7, #16
 80162f4:	4413      	add	r3, r2
 80162f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80162fa:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80162fe:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8016302:	4413      	add	r3, r2
 8016304:	3309      	adds	r3, #9
 8016306:	f107 0210 	add.w	r2, r7, #16
 801630a:	4413      	add	r3, r2
 801630c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8016310:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8016314:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8016318:	2200      	movs	r2, #0
 801631a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801631c:	2300      	movs	r3, #0
 801631e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8016322:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8016326:	f507 729c 	add.w	r2, r7, #312	; 0x138
 801632a:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 801632e:	7812      	ldrb	r2, [r2, #0]
 8016330:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8016332:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016336:	3301      	adds	r3, #1
 8016338:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 801633c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8016340:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8016344:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8016348:	8812      	ldrh	r2, [r2, #0]
 801634a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 801634e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016352:	3302      	adds	r3, #2
 8016354:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8016358:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801635c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8016360:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8016364:	8812      	ldrh	r2, [r2, #0]
 8016366:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 801636a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801636e:	3302      	adds	r3, #2
 8016370:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8016374:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8016378:	f507 729c 	add.w	r2, r7, #312	; 0x138
 801637c:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8016380:	7812      	ldrb	r2, [r2, #0]
 8016382:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8016384:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016388:	3301      	adds	r3, #1
 801638a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 801638e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8016392:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8016396:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8016398:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801639c:	3301      	adds	r3, #1
 801639e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80163a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80163a6:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80163aa:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80163ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80163b0:	3301      	adds	r3, #1
 80163b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80163b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80163ba:	3308      	adds	r3, #8
 80163bc:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80163c0:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80163c4:	4618      	mov	r0, r3
 80163c6:	f001 fa0f 	bl	80177e8 <Osal_MemCpy>
    index_input += Local_Name_Length;
 80163ca:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80163ce:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80163d2:	4413      	add	r3, r2
 80163d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80163d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80163dc:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80163e0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80163e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80163e6:	3301      	adds	r3, #1
 80163e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80163ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80163f0:	3301      	adds	r3, #1
 80163f2:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80163f6:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80163fa:	4618      	mov	r0, r3
 80163fc:	f001 f9f4 	bl	80177e8 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8016400:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8016404:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8016408:	4413      	add	r3, r2
 801640a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 801640e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016412:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8016416:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8016418:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801641c:	3302      	adds	r3, #2
 801641e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8016422:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016426:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 801642a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 801642c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016430:	3302      	adds	r3, #2
 8016432:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8016436:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801643a:	2218      	movs	r2, #24
 801643c:	2100      	movs	r1, #0
 801643e:	4618      	mov	r0, r3
 8016440:	f001 f9e2 	bl	8017808 <Osal_MemSet>
  rq.ogf = 0x3f;
 8016444:	233f      	movs	r3, #63	; 0x3f
 8016446:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 801644a:	2383      	movs	r3, #131	; 0x83
 801644c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8016450:	f107 0310 	add.w	r3, r7, #16
 8016454:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8016458:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801645c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8016460:	f107 030f 	add.w	r3, r7, #15
 8016464:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8016468:	2301      	movs	r3, #1
 801646a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801646e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8016472:	2100      	movs	r1, #0
 8016474:	4618      	mov	r0, r3
 8016476:	f001 f885 	bl	8017584 <hci_send_req>
 801647a:	4603      	mov	r3, r0
 801647c:	2b00      	cmp	r3, #0
 801647e:	da01      	bge.n	8016484 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8016480:	23ff      	movs	r3, #255	; 0xff
 8016482:	e004      	b.n	801648e <aci_gap_set_discoverable+0x1ea>
  return status;
 8016484:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8016488:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 801648c:	781b      	ldrb	r3, [r3, #0]
}
 801648e:	4618      	mov	r0, r3
 8016490:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8016494:	46bd      	mov	sp, r7
 8016496:	bdb0      	pop	{r4, r5, r7, pc}

08016498 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8016498:	b580      	push	{r7, lr}
 801649a:	b0cc      	sub	sp, #304	; 0x130
 801649c:	af00      	add	r7, sp, #0
 801649e:	4602      	mov	r2, r0
 80164a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80164a4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80164a8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80164aa:	f107 0310 	add.w	r3, r7, #16
 80164ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80164b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80164b6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80164ba:	2200      	movs	r2, #0
 80164bc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80164be:	2300      	movs	r3, #0
 80164c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 80164c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80164c8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80164cc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80164d0:	7812      	ldrb	r2, [r2, #0]
 80164d2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80164d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80164d8:	3301      	adds	r3, #1
 80164da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80164de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80164e2:	2218      	movs	r2, #24
 80164e4:	2100      	movs	r1, #0
 80164e6:	4618      	mov	r0, r3
 80164e8:	f001 f98e 	bl	8017808 <Osal_MemSet>
  rq.ogf = 0x3f;
 80164ec:	233f      	movs	r3, #63	; 0x3f
 80164ee:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 80164f2:	2385      	movs	r3, #133	; 0x85
 80164f4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80164f8:	f107 0310 	add.w	r3, r7, #16
 80164fc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8016500:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016504:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8016508:	f107 030f 	add.w	r3, r7, #15
 801650c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8016510:	2301      	movs	r3, #1
 8016512:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8016516:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801651a:	2100      	movs	r1, #0
 801651c:	4618      	mov	r0, r3
 801651e:	f001 f831 	bl	8017584 <hci_send_req>
 8016522:	4603      	mov	r3, r0
 8016524:	2b00      	cmp	r3, #0
 8016526:	da01      	bge.n	801652c <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8016528:	23ff      	movs	r3, #255	; 0xff
 801652a:	e004      	b.n	8016536 <aci_gap_set_io_capability+0x9e>
  return status;
 801652c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016530:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8016534:	781b      	ldrb	r3, [r3, #0]
}
 8016536:	4618      	mov	r0, r3
 8016538:	f507 7798 	add.w	r7, r7, #304	; 0x130
 801653c:	46bd      	mov	sp, r7
 801653e:	bd80      	pop	{r7, pc}

08016540 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8016540:	b5b0      	push	{r4, r5, r7, lr}
 8016542:	b0cc      	sub	sp, #304	; 0x130
 8016544:	af00      	add	r7, sp, #0
 8016546:	4605      	mov	r5, r0
 8016548:	460c      	mov	r4, r1
 801654a:	4610      	mov	r0, r2
 801654c:	4619      	mov	r1, r3
 801654e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016552:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8016556:	462a      	mov	r2, r5
 8016558:	701a      	strb	r2, [r3, #0]
 801655a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801655e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8016562:	4622      	mov	r2, r4
 8016564:	701a      	strb	r2, [r3, #0]
 8016566:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801656a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 801656e:	4602      	mov	r2, r0
 8016570:	701a      	strb	r2, [r3, #0]
 8016572:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016576:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801657a:	460a      	mov	r2, r1
 801657c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 801657e:	f107 0310 	add.w	r3, r7, #16
 8016582:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8016586:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801658a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 801658e:	2200      	movs	r2, #0
 8016590:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8016592:	2300      	movs	r3, #0
 8016594:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8016598:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801659c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80165a0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80165a4:	7812      	ldrb	r2, [r2, #0]
 80165a6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80165a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80165ac:	3301      	adds	r3, #1
 80165ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 80165b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80165b6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80165ba:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80165be:	7812      	ldrb	r2, [r2, #0]
 80165c0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80165c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80165c6:	3301      	adds	r3, #1
 80165c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 80165cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80165d0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80165d4:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80165d8:	7812      	ldrb	r2, [r2, #0]
 80165da:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80165dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80165e0:	3301      	adds	r3, #1
 80165e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80165e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80165ea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80165ee:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80165f2:	7812      	ldrb	r2, [r2, #0]
 80165f4:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80165f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80165fa:	3301      	adds	r3, #1
 80165fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8016600:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016604:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8016608:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 801660a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801660e:	3301      	adds	r3, #1
 8016610:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8016614:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016618:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 801661c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 801661e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016622:	3301      	adds	r3, #1
 8016624:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8016628:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801662c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8016630:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8016632:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016636:	3301      	adds	r3, #1
 8016638:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 801663c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016640:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8016644:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8016648:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801664c:	3304      	adds	r3, #4
 801664e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8016652:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016656:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 801665a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 801665c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016660:	3301      	adds	r3, #1
 8016662:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8016666:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801666a:	2218      	movs	r2, #24
 801666c:	2100      	movs	r1, #0
 801666e:	4618      	mov	r0, r3
 8016670:	f001 f8ca 	bl	8017808 <Osal_MemSet>
  rq.ogf = 0x3f;
 8016674:	233f      	movs	r3, #63	; 0x3f
 8016676:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 801667a:	2386      	movs	r3, #134	; 0x86
 801667c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8016680:	f107 0310 	add.w	r3, r7, #16
 8016684:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8016688:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801668c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8016690:	f107 030f 	add.w	r3, r7, #15
 8016694:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8016698:	2301      	movs	r3, #1
 801669a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801669e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80166a2:	2100      	movs	r1, #0
 80166a4:	4618      	mov	r0, r3
 80166a6:	f000 ff6d 	bl	8017584 <hci_send_req>
 80166aa:	4603      	mov	r3, r0
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	da01      	bge.n	80166b4 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80166b0:	23ff      	movs	r3, #255	; 0xff
 80166b2:	e004      	b.n	80166be <aci_gap_set_authentication_requirement+0x17e>
  return status;
 80166b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80166b8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80166bc:	781b      	ldrb	r3, [r3, #0]
}
 80166be:	4618      	mov	r0, r3
 80166c0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80166c4:	46bd      	mov	sp, r7
 80166c6:	bdb0      	pop	{r4, r5, r7, pc}

080166c8 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 80166c8:	b580      	push	{r7, lr}
 80166ca:	b0cc      	sub	sp, #304	; 0x130
 80166cc:	af00      	add	r7, sp, #0
 80166ce:	4602      	mov	r2, r0
 80166d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80166d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80166d8:	6019      	str	r1, [r3, #0]
 80166da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80166de:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80166e2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80166e4:	f107 0310 	add.w	r3, r7, #16
 80166e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80166ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80166f0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80166f4:	2200      	movs	r2, #0
 80166f6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80166f8:	2300      	movs	r3, #0
 80166fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80166fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016702:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8016706:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 801670a:	8812      	ldrh	r2, [r2, #0]
 801670c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 801670e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016712:	3302      	adds	r3, #2
 8016714:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8016718:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801671c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8016720:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8016724:	6812      	ldr	r2, [r2, #0]
 8016726:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 801672a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801672e:	3304      	adds	r3, #4
 8016730:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8016734:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8016738:	2218      	movs	r2, #24
 801673a:	2100      	movs	r1, #0
 801673c:	4618      	mov	r0, r3
 801673e:	f001 f863 	bl	8017808 <Osal_MemSet>
  rq.ogf = 0x3f;
 8016742:	233f      	movs	r3, #63	; 0x3f
 8016744:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8016748:	2388      	movs	r3, #136	; 0x88
 801674a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 801674e:	f107 0310 	add.w	r3, r7, #16
 8016752:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8016756:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801675a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 801675e:	f107 030f 	add.w	r3, r7, #15
 8016762:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8016766:	2301      	movs	r3, #1
 8016768:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801676c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8016770:	2100      	movs	r1, #0
 8016772:	4618      	mov	r0, r3
 8016774:	f000 ff06 	bl	8017584 <hci_send_req>
 8016778:	4603      	mov	r3, r0
 801677a:	2b00      	cmp	r3, #0
 801677c:	da01      	bge.n	8016782 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 801677e:	23ff      	movs	r3, #255	; 0xff
 8016780:	e004      	b.n	801678c <aci_gap_pass_key_resp+0xc4>
  return status;
 8016782:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016786:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 801678a:	781b      	ldrb	r3, [r3, #0]
}
 801678c:	4618      	mov	r0, r3
 801678e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8016792:	46bd      	mov	sp, r7
 8016794:	bd80      	pop	{r7, pc}

08016796 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8016796:	b590      	push	{r4, r7, lr}
 8016798:	b0cd      	sub	sp, #308	; 0x134
 801679a:	af00      	add	r7, sp, #0
 801679c:	4604      	mov	r4, r0
 801679e:	4608      	mov	r0, r1
 80167a0:	4611      	mov	r1, r2
 80167a2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80167a6:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80167aa:	6013      	str	r3, [r2, #0]
 80167ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80167b0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80167b4:	4622      	mov	r2, r4
 80167b6:	701a      	strb	r2, [r3, #0]
 80167b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80167bc:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80167c0:	4602      	mov	r2, r0
 80167c2:	701a      	strb	r2, [r3, #0]
 80167c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80167c8:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80167cc:	460a      	mov	r2, r1
 80167ce:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80167d0:	f107 0310 	add.w	r3, r7, #16
 80167d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80167d8:	f107 0308 	add.w	r3, r7, #8
 80167dc:	2207      	movs	r2, #7
 80167de:	2100      	movs	r1, #0
 80167e0:	4618      	mov	r0, r3
 80167e2:	f001 f811 	bl	8017808 <Osal_MemSet>
  int index_input = 0;
 80167e6:	2300      	movs	r3, #0
 80167e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 80167ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80167f0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80167f4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80167f8:	7812      	ldrb	r2, [r2, #0]
 80167fa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80167fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016800:	3301      	adds	r3, #1
 8016802:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8016806:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801680a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801680e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8016812:	7812      	ldrb	r2, [r2, #0]
 8016814:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8016816:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801681a:	3301      	adds	r3, #1
 801681c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8016820:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016824:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8016828:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 801682c:	7812      	ldrb	r2, [r2, #0]
 801682e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8016830:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016834:	3301      	adds	r3, #1
 8016836:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801683a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801683e:	2218      	movs	r2, #24
 8016840:	2100      	movs	r1, #0
 8016842:	4618      	mov	r0, r3
 8016844:	f000 ffe0 	bl	8017808 <Osal_MemSet>
  rq.ogf = 0x3f;
 8016848:	233f      	movs	r3, #63	; 0x3f
 801684a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 801684e:	238a      	movs	r3, #138	; 0x8a
 8016850:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8016854:	f107 0310 	add.w	r3, r7, #16
 8016858:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 801685c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016860:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8016864:	f107 0308 	add.w	r3, r7, #8
 8016868:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 801686c:	2307      	movs	r3, #7
 801686e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8016872:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8016876:	2100      	movs	r1, #0
 8016878:	4618      	mov	r0, r3
 801687a:	f000 fe83 	bl	8017584 <hci_send_req>
 801687e:	4603      	mov	r3, r0
 8016880:	2b00      	cmp	r3, #0
 8016882:	da01      	bge.n	8016888 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8016884:	23ff      	movs	r3, #255	; 0xff
 8016886:	e02e      	b.n	80168e6 <aci_gap_init+0x150>
  if ( resp.Status )
 8016888:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801688c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8016890:	781b      	ldrb	r3, [r3, #0]
 8016892:	2b00      	cmp	r3, #0
 8016894:	d005      	beq.n	80168a2 <aci_gap_init+0x10c>
    return resp.Status;
 8016896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801689a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801689e:	781b      	ldrb	r3, [r3, #0]
 80168a0:	e021      	b.n	80168e6 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 80168a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80168a6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80168aa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80168ae:	b29a      	uxth	r2, r3
 80168b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80168b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80168b8:	681b      	ldr	r3, [r3, #0]
 80168ba:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80168bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80168c0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80168c4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80168c8:	b29a      	uxth	r2, r3
 80168ca:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80168ce:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80168d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80168d4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80168d8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80168dc:	b29a      	uxth	r2, r3
 80168de:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80168e2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80168e4:	2300      	movs	r3, #0
}
 80168e6:	4618      	mov	r0, r3
 80168e8:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80168ec:	46bd      	mov	sp, r7
 80168ee:	bd90      	pop	{r4, r7, pc}

080168f0 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80168f0:	b580      	push	{r7, lr}
 80168f2:	b0cc      	sub	sp, #304	; 0x130
 80168f4:	af00      	add	r7, sp, #0
 80168f6:	4602      	mov	r2, r0
 80168f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80168fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8016900:	6019      	str	r1, [r3, #0]
 8016902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016906:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 801690a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 801690c:	f107 0310 	add.w	r3, r7, #16
 8016910:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8016914:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016918:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 801691c:	2200      	movs	r2, #0
 801691e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8016920:	2300      	movs	r3, #0
 8016922:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8016926:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801692a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801692e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8016932:	7812      	ldrb	r2, [r2, #0]
 8016934:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8016936:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801693a:	3301      	adds	r3, #1
 801693c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8016940:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016944:	1c58      	adds	r0, r3, #1
 8016946:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801694a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 801694e:	781a      	ldrb	r2, [r3, #0]
 8016950:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016954:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8016958:	6819      	ldr	r1, [r3, #0]
 801695a:	f000 ff45 	bl	80177e8 <Osal_MemCpy>
  index_input += AdvDataLen;
 801695e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016962:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8016966:	781b      	ldrb	r3, [r3, #0]
 8016968:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801696c:	4413      	add	r3, r2
 801696e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8016972:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8016976:	2218      	movs	r2, #24
 8016978:	2100      	movs	r1, #0
 801697a:	4618      	mov	r0, r3
 801697c:	f000 ff44 	bl	8017808 <Osal_MemSet>
  rq.ogf = 0x3f;
 8016980:	233f      	movs	r3, #63	; 0x3f
 8016982:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8016986:	238e      	movs	r3, #142	; 0x8e
 8016988:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 801698c:	f107 0310 	add.w	r3, r7, #16
 8016990:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8016994:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016998:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 801699c:	f107 030f 	add.w	r3, r7, #15
 80169a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80169a4:	2301      	movs	r3, #1
 80169a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80169aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80169ae:	2100      	movs	r1, #0
 80169b0:	4618      	mov	r0, r3
 80169b2:	f000 fde7 	bl	8017584 <hci_send_req>
 80169b6:	4603      	mov	r3, r0
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	da01      	bge.n	80169c0 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80169bc:	23ff      	movs	r3, #255	; 0xff
 80169be:	e004      	b.n	80169ca <aci_gap_update_adv_data+0xda>
  return status;
 80169c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80169c4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80169c8:	781b      	ldrb	r3, [r3, #0]
}
 80169ca:	4618      	mov	r0, r3
 80169cc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80169d0:	46bd      	mov	sp, r7
 80169d2:	bd80      	pop	{r7, pc}

080169d4 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 80169d4:	b580      	push	{r7, lr}
 80169d6:	b088      	sub	sp, #32
 80169d8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80169da:	2300      	movs	r3, #0
 80169dc:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80169de:	f107 0308 	add.w	r3, r7, #8
 80169e2:	2218      	movs	r2, #24
 80169e4:	2100      	movs	r1, #0
 80169e6:	4618      	mov	r0, r3
 80169e8:	f000 ff0e 	bl	8017808 <Osal_MemSet>
  rq.ogf = 0x3f;
 80169ec:	233f      	movs	r3, #63	; 0x3f
 80169ee:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80169f0:	2392      	movs	r3, #146	; 0x92
 80169f2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80169f4:	1dfb      	adds	r3, r7, #7
 80169f6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80169f8:	2301      	movs	r3, #1
 80169fa:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80169fc:	f107 0308 	add.w	r3, r7, #8
 8016a00:	2100      	movs	r1, #0
 8016a02:	4618      	mov	r0, r3
 8016a04:	f000 fdbe 	bl	8017584 <hci_send_req>
 8016a08:	4603      	mov	r3, r0
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	da01      	bge.n	8016a12 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8016a0e:	23ff      	movs	r3, #255	; 0xff
 8016a10:	e000      	b.n	8016a14 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8016a12:	79fb      	ldrb	r3, [r7, #7]
}
 8016a14:	4618      	mov	r0, r3
 8016a16:	3720      	adds	r7, #32
 8016a18:	46bd      	mov	sp, r7
 8016a1a:	bd80      	pop	{r7, pc}

08016a1c <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8016a1c:	b580      	push	{r7, lr}
 8016a1e:	b0cc      	sub	sp, #304	; 0x130
 8016a20:	af00      	add	r7, sp, #0
 8016a22:	4602      	mov	r2, r0
 8016a24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016a28:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8016a2c:	801a      	strh	r2, [r3, #0]
 8016a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016a32:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8016a36:	460a      	mov	r2, r1
 8016a38:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8016a3a:	f107 0310 	add.w	r3, r7, #16
 8016a3e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8016a42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016a46:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8016a4a:	2200      	movs	r2, #0
 8016a4c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8016a4e:	2300      	movs	r3, #0
 8016a50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8016a54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016a58:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8016a5c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8016a60:	8812      	ldrh	r2, [r2, #0]
 8016a62:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8016a64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016a68:	3302      	adds	r3, #2
 8016a6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8016a6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016a72:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8016a76:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8016a7a:	7812      	ldrb	r2, [r2, #0]
 8016a7c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8016a7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016a82:	3301      	adds	r3, #1
 8016a84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8016a88:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8016a8c:	2218      	movs	r2, #24
 8016a8e:	2100      	movs	r1, #0
 8016a90:	4618      	mov	r0, r3
 8016a92:	f000 feb9 	bl	8017808 <Osal_MemSet>
  rq.ogf = 0x3f;
 8016a96:	233f      	movs	r3, #63	; 0x3f
 8016a98:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8016a9c:	23a5      	movs	r3, #165	; 0xa5
 8016a9e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8016aa2:	f107 0310 	add.w	r3, r7, #16
 8016aa6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8016aaa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016aae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8016ab2:	f107 030f 	add.w	r3, r7, #15
 8016ab6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8016aba:	2301      	movs	r3, #1
 8016abc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8016ac0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8016ac4:	2100      	movs	r1, #0
 8016ac6:	4618      	mov	r0, r3
 8016ac8:	f000 fd5c 	bl	8017584 <hci_send_req>
 8016acc:	4603      	mov	r3, r0
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	da01      	bge.n	8016ad6 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8016ad2:	23ff      	movs	r3, #255	; 0xff
 8016ad4:	e004      	b.n	8016ae0 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8016ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016ada:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8016ade:	781b      	ldrb	r3, [r3, #0]
}
 8016ae0:	4618      	mov	r0, r3
 8016ae2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8016ae6:	46bd      	mov	sp, r7
 8016ae8:	bd80      	pop	{r7, pc}

08016aea <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8016aea:	b580      	push	{r7, lr}
 8016aec:	b088      	sub	sp, #32
 8016aee:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8016af0:	2300      	movs	r3, #0
 8016af2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8016af4:	f107 0308 	add.w	r3, r7, #8
 8016af8:	2218      	movs	r2, #24
 8016afa:	2100      	movs	r1, #0
 8016afc:	4618      	mov	r0, r3
 8016afe:	f000 fe83 	bl	8017808 <Osal_MemSet>
  rq.ogf = 0x3f;
 8016b02:	233f      	movs	r3, #63	; 0x3f
 8016b04:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8016b06:	f240 1301 	movw	r3, #257	; 0x101
 8016b0a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8016b0c:	1dfb      	adds	r3, r7, #7
 8016b0e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8016b10:	2301      	movs	r3, #1
 8016b12:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8016b14:	f107 0308 	add.w	r3, r7, #8
 8016b18:	2100      	movs	r1, #0
 8016b1a:	4618      	mov	r0, r3
 8016b1c:	f000 fd32 	bl	8017584 <hci_send_req>
 8016b20:	4603      	mov	r3, r0
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	da01      	bge.n	8016b2a <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8016b26:	23ff      	movs	r3, #255	; 0xff
 8016b28:	e000      	b.n	8016b2c <aci_gatt_init+0x42>
  return status;
 8016b2a:	79fb      	ldrb	r3, [r7, #7]
}
 8016b2c:	4618      	mov	r0, r3
 8016b2e:	3720      	adds	r7, #32
 8016b30:	46bd      	mov	sp, r7
 8016b32:	bd80      	pop	{r7, pc}

08016b34 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8016b34:	b590      	push	{r4, r7, lr}
 8016b36:	b0cf      	sub	sp, #316	; 0x13c
 8016b38:	af00      	add	r7, sp, #0
 8016b3a:	4604      	mov	r4, r0
 8016b3c:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8016b40:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8016b44:	6001      	str	r1, [r0, #0]
 8016b46:	4610      	mov	r0, r2
 8016b48:	4619      	mov	r1, r3
 8016b4a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8016b4e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8016b52:	4622      	mov	r2, r4
 8016b54:	701a      	strb	r2, [r3, #0]
 8016b56:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8016b5a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8016b5e:	4602      	mov	r2, r0
 8016b60:	701a      	strb	r2, [r3, #0]
 8016b62:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8016b66:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8016b6a:	460a      	mov	r2, r1
 8016b6c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8016b6e:	f107 0310 	add.w	r3, r7, #16
 8016b72:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8016b76:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8016b7a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8016b7e:	781b      	ldrb	r3, [r3, #0]
 8016b80:	2b01      	cmp	r3, #1
 8016b82:	d00a      	beq.n	8016b9a <aci_gatt_add_service+0x66>
 8016b84:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8016b88:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8016b8c:	781b      	ldrb	r3, [r3, #0]
 8016b8e:	2b02      	cmp	r3, #2
 8016b90:	d101      	bne.n	8016b96 <aci_gatt_add_service+0x62>
 8016b92:	2311      	movs	r3, #17
 8016b94:	e002      	b.n	8016b9c <aci_gatt_add_service+0x68>
 8016b96:	2301      	movs	r3, #1
 8016b98:	e000      	b.n	8016b9c <aci_gatt_add_service+0x68>
 8016b9a:	2303      	movs	r3, #3
 8016b9c:	f107 0210 	add.w	r2, r7, #16
 8016ba0:	4413      	add	r3, r2
 8016ba2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8016ba6:	f107 030c 	add.w	r3, r7, #12
 8016baa:	2203      	movs	r2, #3
 8016bac:	2100      	movs	r1, #0
 8016bae:	4618      	mov	r0, r3
 8016bb0:	f000 fe2a 	bl	8017808 <Osal_MemSet>
  int index_input = 0;
 8016bb4:	2300      	movs	r3, #0
 8016bb6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8016bba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8016bbe:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8016bc2:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8016bc6:	7812      	ldrb	r2, [r2, #0]
 8016bc8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8016bca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016bce:	3301      	adds	r3, #1
 8016bd0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8016bd4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8016bd8:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8016bdc:	781b      	ldrb	r3, [r3, #0]
 8016bde:	2b01      	cmp	r3, #1
 8016be0:	d002      	beq.n	8016be8 <aci_gatt_add_service+0xb4>
 8016be2:	2b02      	cmp	r3, #2
 8016be4:	d004      	beq.n	8016bf0 <aci_gatt_add_service+0xbc>
 8016be6:	e007      	b.n	8016bf8 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8016be8:	2302      	movs	r3, #2
 8016bea:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8016bee:	e005      	b.n	8016bfc <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8016bf0:	2310      	movs	r3, #16
 8016bf2:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8016bf6:	e001      	b.n	8016bfc <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8016bf8:	2397      	movs	r3, #151	; 0x97
 8016bfa:	e06c      	b.n	8016cd6 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8016bfc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8016c00:	1c58      	adds	r0, r3, #1
 8016c02:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8016c06:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8016c0a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8016c0e:	6819      	ldr	r1, [r3, #0]
 8016c10:	f000 fdea 	bl	80177e8 <Osal_MemCpy>
    index_input += size;
 8016c14:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8016c18:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8016c1c:	4413      	add	r3, r2
 8016c1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8016c22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016c26:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8016c2a:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8016c2e:	7812      	ldrb	r2, [r2, #0]
 8016c30:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8016c32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016c36:	3301      	adds	r3, #1
 8016c38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8016c3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016c40:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8016c44:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8016c48:	7812      	ldrb	r2, [r2, #0]
 8016c4a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8016c4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016c50:	3301      	adds	r3, #1
 8016c52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8016c56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8016c5a:	2218      	movs	r2, #24
 8016c5c:	2100      	movs	r1, #0
 8016c5e:	4618      	mov	r0, r3
 8016c60:	f000 fdd2 	bl	8017808 <Osal_MemSet>
  rq.ogf = 0x3f;
 8016c64:	233f      	movs	r3, #63	; 0x3f
 8016c66:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8016c6a:	f44f 7381 	mov.w	r3, #258	; 0x102
 8016c6e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8016c72:	f107 0310 	add.w	r3, r7, #16
 8016c76:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8016c7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016c7e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8016c82:	f107 030c 	add.w	r3, r7, #12
 8016c86:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8016c8a:	2303      	movs	r3, #3
 8016c8c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8016c90:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8016c94:	2100      	movs	r1, #0
 8016c96:	4618      	mov	r0, r3
 8016c98:	f000 fc74 	bl	8017584 <hci_send_req>
 8016c9c:	4603      	mov	r3, r0
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	da01      	bge.n	8016ca6 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8016ca2:	23ff      	movs	r3, #255	; 0xff
 8016ca4:	e017      	b.n	8016cd6 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8016ca6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8016caa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8016cae:	781b      	ldrb	r3, [r3, #0]
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d005      	beq.n	8016cc0 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8016cb4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8016cb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8016cbc:	781b      	ldrb	r3, [r3, #0]
 8016cbe:	e00a      	b.n	8016cd6 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8016cc0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8016cc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8016cc8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8016ccc:	b29a      	uxth	r2, r3
 8016cce:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8016cd2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8016cd4:	2300      	movs	r3, #0
}
 8016cd6:	4618      	mov	r0, r3
 8016cd8:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8016cdc:	46bd      	mov	sp, r7
 8016cde:	bd90      	pop	{r4, r7, pc}

08016ce0 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8016ce0:	b590      	push	{r4, r7, lr}
 8016ce2:	b0d1      	sub	sp, #324	; 0x144
 8016ce4:	af00      	add	r7, sp, #0
 8016ce6:	4604      	mov	r4, r0
 8016ce8:	4608      	mov	r0, r1
 8016cea:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8016cee:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8016cf2:	600a      	str	r2, [r1, #0]
 8016cf4:	4619      	mov	r1, r3
 8016cf6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8016cfa:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8016cfe:	4622      	mov	r2, r4
 8016d00:	801a      	strh	r2, [r3, #0]
 8016d02:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8016d06:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8016d0a:	4602      	mov	r2, r0
 8016d0c:	701a      	strb	r2, [r3, #0]
 8016d0e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8016d12:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8016d16:	460a      	mov	r2, r1
 8016d18:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8016d1a:	f107 0318 	add.w	r3, r7, #24
 8016d1e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8016d22:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8016d26:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8016d2a:	781b      	ldrb	r3, [r3, #0]
 8016d2c:	2b01      	cmp	r3, #1
 8016d2e:	d00a      	beq.n	8016d46 <aci_gatt_add_char+0x66>
 8016d30:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8016d34:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8016d38:	781b      	ldrb	r3, [r3, #0]
 8016d3a:	2b02      	cmp	r3, #2
 8016d3c:	d101      	bne.n	8016d42 <aci_gatt_add_char+0x62>
 8016d3e:	2313      	movs	r3, #19
 8016d40:	e002      	b.n	8016d48 <aci_gatt_add_char+0x68>
 8016d42:	2303      	movs	r3, #3
 8016d44:	e000      	b.n	8016d48 <aci_gatt_add_char+0x68>
 8016d46:	2305      	movs	r3, #5
 8016d48:	f107 0218 	add.w	r2, r7, #24
 8016d4c:	4413      	add	r3, r2
 8016d4e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8016d52:	f107 0314 	add.w	r3, r7, #20
 8016d56:	2203      	movs	r2, #3
 8016d58:	2100      	movs	r1, #0
 8016d5a:	4618      	mov	r0, r3
 8016d5c:	f000 fd54 	bl	8017808 <Osal_MemSet>
  int index_input = 0;
 8016d60:	2300      	movs	r3, #0
 8016d62:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8016d66:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8016d6a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8016d6e:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8016d72:	8812      	ldrh	r2, [r2, #0]
 8016d74:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8016d76:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8016d7a:	3302      	adds	r3, #2
 8016d7c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8016d80:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8016d84:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8016d88:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8016d8c:	7812      	ldrb	r2, [r2, #0]
 8016d8e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8016d90:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8016d94:	3301      	adds	r3, #1
 8016d96:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8016d9a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8016d9e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8016da2:	781b      	ldrb	r3, [r3, #0]
 8016da4:	2b01      	cmp	r3, #1
 8016da6:	d002      	beq.n	8016dae <aci_gatt_add_char+0xce>
 8016da8:	2b02      	cmp	r3, #2
 8016daa:	d004      	beq.n	8016db6 <aci_gatt_add_char+0xd6>
 8016dac:	e007      	b.n	8016dbe <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8016dae:	2302      	movs	r3, #2
 8016db0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8016db4:	e005      	b.n	8016dc2 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8016db6:	2310      	movs	r3, #16
 8016db8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8016dbc:	e001      	b.n	8016dc2 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8016dbe:	2397      	movs	r3, #151	; 0x97
 8016dc0:	e091      	b.n	8016ee6 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8016dc2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8016dc6:	1cd8      	adds	r0, r3, #3
 8016dc8:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8016dcc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8016dd0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8016dd4:	6819      	ldr	r1, [r3, #0]
 8016dd6:	f000 fd07 	bl	80177e8 <Osal_MemCpy>
    index_input += size;
 8016dda:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8016dde:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8016de2:	4413      	add	r3, r2
 8016de4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8016de8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8016dec:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8016df0:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8016df4:	8812      	ldrh	r2, [r2, #0]
 8016df6:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8016df8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8016dfc:	3302      	adds	r3, #2
 8016dfe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8016e02:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8016e06:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8016e0a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8016e0c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8016e10:	3301      	adds	r3, #1
 8016e12:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8016e16:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8016e1a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8016e1e:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8016e20:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8016e24:	3301      	adds	r3, #1
 8016e26:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8016e2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8016e2e:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8016e32:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8016e34:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8016e38:	3301      	adds	r3, #1
 8016e3a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8016e3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8016e42:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8016e46:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8016e48:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8016e4c:	3301      	adds	r3, #1
 8016e4e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8016e52:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8016e56:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8016e5a:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8016e5c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8016e60:	3301      	adds	r3, #1
 8016e62:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8016e66:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8016e6a:	2218      	movs	r2, #24
 8016e6c:	2100      	movs	r1, #0
 8016e6e:	4618      	mov	r0, r3
 8016e70:	f000 fcca 	bl	8017808 <Osal_MemSet>
  rq.ogf = 0x3f;
 8016e74:	233f      	movs	r3, #63	; 0x3f
 8016e76:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8016e7a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8016e7e:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8016e82:	f107 0318 	add.w	r3, r7, #24
 8016e86:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8016e8a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8016e8e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8016e92:	f107 0314 	add.w	r3, r7, #20
 8016e96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8016e9a:	2303      	movs	r3, #3
 8016e9c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8016ea0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8016ea4:	2100      	movs	r1, #0
 8016ea6:	4618      	mov	r0, r3
 8016ea8:	f000 fb6c 	bl	8017584 <hci_send_req>
 8016eac:	4603      	mov	r3, r0
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	da01      	bge.n	8016eb6 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8016eb2:	23ff      	movs	r3, #255	; 0xff
 8016eb4:	e017      	b.n	8016ee6 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8016eb6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8016eba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8016ebe:	781b      	ldrb	r3, [r3, #0]
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	d005      	beq.n	8016ed0 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8016ec4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8016ec8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8016ecc:	781b      	ldrb	r3, [r3, #0]
 8016ece:	e00a      	b.n	8016ee6 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8016ed0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8016ed4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8016ed8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8016edc:	b29a      	uxth	r2, r3
 8016ede:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8016ee2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8016ee4:	2300      	movs	r3, #0
}
 8016ee6:	4618      	mov	r0, r3
 8016ee8:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8016eec:	46bd      	mov	sp, r7
 8016eee:	bd90      	pop	{r4, r7, pc}

08016ef0 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8016ef0:	b5b0      	push	{r4, r5, r7, lr}
 8016ef2:	b0cc      	sub	sp, #304	; 0x130
 8016ef4:	af00      	add	r7, sp, #0
 8016ef6:	4605      	mov	r5, r0
 8016ef8:	460c      	mov	r4, r1
 8016efa:	4610      	mov	r0, r2
 8016efc:	4619      	mov	r1, r3
 8016efe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016f02:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8016f06:	462a      	mov	r2, r5
 8016f08:	801a      	strh	r2, [r3, #0]
 8016f0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016f0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8016f12:	4622      	mov	r2, r4
 8016f14:	801a      	strh	r2, [r3, #0]
 8016f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016f1a:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8016f1e:	4602      	mov	r2, r0
 8016f20:	701a      	strb	r2, [r3, #0]
 8016f22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016f26:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8016f2a:	460a      	mov	r2, r1
 8016f2c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8016f2e:	f107 0310 	add.w	r3, r7, #16
 8016f32:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8016f36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016f3a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8016f3e:	2200      	movs	r2, #0
 8016f40:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8016f42:	2300      	movs	r3, #0
 8016f44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8016f48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016f4c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8016f50:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8016f54:	8812      	ldrh	r2, [r2, #0]
 8016f56:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8016f58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016f5c:	3302      	adds	r3, #2
 8016f5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8016f62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016f66:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8016f6a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8016f6e:	8812      	ldrh	r2, [r2, #0]
 8016f70:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8016f72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016f76:	3302      	adds	r3, #2
 8016f78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8016f7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016f80:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8016f84:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8016f88:	7812      	ldrb	r2, [r2, #0]
 8016f8a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8016f8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016f90:	3301      	adds	r3, #1
 8016f92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8016f96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016f9a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8016f9e:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8016fa2:	7812      	ldrb	r2, [r2, #0]
 8016fa4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8016fa6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016faa:	3301      	adds	r3, #1
 8016fac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8016fb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016fb4:	1d98      	adds	r0, r3, #6
 8016fb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016fba:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8016fbe:	781b      	ldrb	r3, [r3, #0]
 8016fc0:	461a      	mov	r2, r3
 8016fc2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8016fc6:	f000 fc0f 	bl	80177e8 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8016fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016fce:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8016fd2:	781b      	ldrb	r3, [r3, #0]
 8016fd4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8016fd8:	4413      	add	r3, r2
 8016fda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8016fde:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8016fe2:	2218      	movs	r2, #24
 8016fe4:	2100      	movs	r1, #0
 8016fe6:	4618      	mov	r0, r3
 8016fe8:	f000 fc0e 	bl	8017808 <Osal_MemSet>
  rq.ogf = 0x3f;
 8016fec:	233f      	movs	r3, #63	; 0x3f
 8016fee:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8016ff2:	f44f 7383 	mov.w	r3, #262	; 0x106
 8016ff6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8016ffa:	f107 0310 	add.w	r3, r7, #16
 8016ffe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8017002:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8017006:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 801700a:	f107 030f 	add.w	r3, r7, #15
 801700e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8017012:	2301      	movs	r3, #1
 8017014:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8017018:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801701c:	2100      	movs	r1, #0
 801701e:	4618      	mov	r0, r3
 8017020:	f000 fab0 	bl	8017584 <hci_send_req>
 8017024:	4603      	mov	r3, r0
 8017026:	2b00      	cmp	r3, #0
 8017028:	da01      	bge.n	801702e <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 801702a:	23ff      	movs	r3, #255	; 0xff
 801702c:	e004      	b.n	8017038 <aci_gatt_update_char_value+0x148>
  return status;
 801702e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8017032:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8017036:	781b      	ldrb	r3, [r3, #0]
}
 8017038:	4618      	mov	r0, r3
 801703a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 801703e:	46bd      	mov	sp, r7
 8017040:	bdb0      	pop	{r4, r5, r7, pc}

08017042 <aci_gatt_allow_read>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_allow_read( uint16_t Connection_Handle )
{
 8017042:	b580      	push	{r7, lr}
 8017044:	b0cc      	sub	sp, #304	; 0x130
 8017046:	af00      	add	r7, sp, #0
 8017048:	4602      	mov	r2, r0
 801704a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801704e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8017052:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 8017054:	f107 0310 	add.w	r3, r7, #16
 8017058:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 801705c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8017060:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8017064:	2200      	movs	r2, #0
 8017066:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8017068:	2300      	movs	r3, #0
 801706a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 801706e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8017072:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8017076:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 801707a:	8812      	ldrh	r2, [r2, #0]
 801707c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 801707e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8017082:	3302      	adds	r3, #2
 8017084:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8017088:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801708c:	2218      	movs	r2, #24
 801708e:	2100      	movs	r1, #0
 8017090:	4618      	mov	r0, r3
 8017092:	f000 fbb9 	bl	8017808 <Osal_MemSet>
  rq.ogf = 0x3f;
 8017096:	233f      	movs	r3, #63	; 0x3f
 8017098:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x127;
 801709c:	f240 1327 	movw	r3, #295	; 0x127
 80170a0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80170a4:	f107 0310 	add.w	r3, r7, #16
 80170a8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80170ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80170b0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80170b4:	f107 030f 	add.w	r3, r7, #15
 80170b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80170bc:	2301      	movs	r3, #1
 80170be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80170c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80170c6:	2100      	movs	r1, #0
 80170c8:	4618      	mov	r0, r3
 80170ca:	f000 fa5b 	bl	8017584 <hci_send_req>
 80170ce:	4603      	mov	r3, r0
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	da01      	bge.n	80170d8 <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 80170d4:	23ff      	movs	r3, #255	; 0xff
 80170d6:	e004      	b.n	80170e2 <aci_gatt_allow_read+0xa0>
  return status;
 80170d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80170dc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80170e0:	781b      	ldrb	r3, [r3, #0]
}
 80170e2:	4618      	mov	r0, r3
 80170e4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80170e8:	46bd      	mov	sp, r7
 80170ea:	bd80      	pop	{r7, pc}

080170ec <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80170ec:	b580      	push	{r7, lr}
 80170ee:	b0cc      	sub	sp, #304	; 0x130
 80170f0:	af00      	add	r7, sp, #0
 80170f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80170f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80170fa:	601a      	str	r2, [r3, #0]
 80170fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8017100:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8017104:	4602      	mov	r2, r0
 8017106:	701a      	strb	r2, [r3, #0]
 8017108:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801710c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8017110:	460a      	mov	r2, r1
 8017112:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8017114:	f107 0310 	add.w	r3, r7, #16
 8017118:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 801711c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8017120:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8017124:	2200      	movs	r2, #0
 8017126:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8017128:	2300      	movs	r3, #0
 801712a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 801712e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8017132:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8017136:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 801713a:	7812      	ldrb	r2, [r2, #0]
 801713c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801713e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8017142:	3301      	adds	r3, #1
 8017144:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8017148:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801714c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8017150:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8017154:	7812      	ldrb	r2, [r2, #0]
 8017156:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8017158:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801715c:	3301      	adds	r3, #1
 801715e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8017162:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8017166:	1c98      	adds	r0, r3, #2
 8017168:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801716c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8017170:	781a      	ldrb	r2, [r3, #0]
 8017172:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8017176:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801717a:	6819      	ldr	r1, [r3, #0]
 801717c:	f000 fb34 	bl	80177e8 <Osal_MemCpy>
  index_input += Length;
 8017180:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8017184:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8017188:	781b      	ldrb	r3, [r3, #0]
 801718a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801718e:	4413      	add	r3, r2
 8017190:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8017194:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8017198:	2218      	movs	r2, #24
 801719a:	2100      	movs	r1, #0
 801719c:	4618      	mov	r0, r3
 801719e:	f000 fb33 	bl	8017808 <Osal_MemSet>
  rq.ogf = 0x3f;
 80171a2:	233f      	movs	r3, #63	; 0x3f
 80171a4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 80171a8:	230c      	movs	r3, #12
 80171aa:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80171ae:	f107 0310 	add.w	r3, r7, #16
 80171b2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80171b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80171ba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80171be:	f107 030f 	add.w	r3, r7, #15
 80171c2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80171c6:	2301      	movs	r3, #1
 80171c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80171cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80171d0:	2100      	movs	r1, #0
 80171d2:	4618      	mov	r0, r3
 80171d4:	f000 f9d6 	bl	8017584 <hci_send_req>
 80171d8:	4603      	mov	r3, r0
 80171da:	2b00      	cmp	r3, #0
 80171dc:	da01      	bge.n	80171e2 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 80171de:	23ff      	movs	r3, #255	; 0xff
 80171e0:	e004      	b.n	80171ec <aci_hal_write_config_data+0x100>
  return status;
 80171e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80171e6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80171ea:	781b      	ldrb	r3, [r3, #0]
}
 80171ec:	4618      	mov	r0, r3
 80171ee:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80171f2:	46bd      	mov	sp, r7
 80171f4:	bd80      	pop	{r7, pc}

080171f6 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80171f6:	b580      	push	{r7, lr}
 80171f8:	b0cc      	sub	sp, #304	; 0x130
 80171fa:	af00      	add	r7, sp, #0
 80171fc:	4602      	mov	r2, r0
 80171fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8017202:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8017206:	701a      	strb	r2, [r3, #0]
 8017208:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801720c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8017210:	460a      	mov	r2, r1
 8017212:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8017214:	f107 0310 	add.w	r3, r7, #16
 8017218:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 801721c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8017220:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8017224:	2200      	movs	r2, #0
 8017226:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8017228:	2300      	movs	r3, #0
 801722a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 801722e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8017232:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8017236:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 801723a:	7812      	ldrb	r2, [r2, #0]
 801723c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801723e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8017242:	3301      	adds	r3, #1
 8017244:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8017248:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801724c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8017250:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8017254:	7812      	ldrb	r2, [r2, #0]
 8017256:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8017258:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801725c:	3301      	adds	r3, #1
 801725e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8017262:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8017266:	2218      	movs	r2, #24
 8017268:	2100      	movs	r1, #0
 801726a:	4618      	mov	r0, r3
 801726c:	f000 facc 	bl	8017808 <Osal_MemSet>
  rq.ogf = 0x3f;
 8017270:	233f      	movs	r3, #63	; 0x3f
 8017272:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8017276:	230f      	movs	r3, #15
 8017278:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 801727c:	f107 0310 	add.w	r3, r7, #16
 8017280:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8017284:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8017288:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 801728c:	f107 030f 	add.w	r3, r7, #15
 8017290:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8017294:	2301      	movs	r3, #1
 8017296:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801729a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801729e:	2100      	movs	r1, #0
 80172a0:	4618      	mov	r0, r3
 80172a2:	f000 f96f 	bl	8017584 <hci_send_req>
 80172a6:	4603      	mov	r3, r0
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	da01      	bge.n	80172b0 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80172ac:	23ff      	movs	r3, #255	; 0xff
 80172ae:	e004      	b.n	80172ba <aci_hal_set_tx_power_level+0xc4>
  return status;
 80172b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80172b4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80172b8:	781b      	ldrb	r3, [r3, #0]
}
 80172ba:	4618      	mov	r0, r3
 80172bc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80172c0:	46bd      	mov	sp, r7
 80172c2:	bd80      	pop	{r7, pc}

080172c4 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80172c4:	b580      	push	{r7, lr}
 80172c6:	b0cc      	sub	sp, #304	; 0x130
 80172c8:	af00      	add	r7, sp, #0
 80172ca:	4602      	mov	r2, r0
 80172cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80172d0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80172d4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 80172d6:	f107 0310 	add.w	r3, r7, #16
 80172da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80172de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80172e2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80172e6:	2200      	movs	r2, #0
 80172e8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80172ea:	2300      	movs	r3, #0
 80172ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 80172f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80172f4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80172f8:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80172fc:	8812      	ldrh	r2, [r2, #0]
 80172fe:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8017300:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8017304:	3302      	adds	r3, #2
 8017306:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801730a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801730e:	2218      	movs	r2, #24
 8017310:	2100      	movs	r1, #0
 8017312:	4618      	mov	r0, r3
 8017314:	f000 fa78 	bl	8017808 <Osal_MemSet>
  rq.ogf = 0x3f;
 8017318:	233f      	movs	r3, #63	; 0x3f
 801731a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 801731e:	2318      	movs	r3, #24
 8017320:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8017324:	f107 0310 	add.w	r3, r7, #16
 8017328:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 801732c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8017330:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8017334:	f107 030f 	add.w	r3, r7, #15
 8017338:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 801733c:	2301      	movs	r3, #1
 801733e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8017342:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8017346:	2100      	movs	r1, #0
 8017348:	4618      	mov	r0, r3
 801734a:	f000 f91b 	bl	8017584 <hci_send_req>
 801734e:	4603      	mov	r3, r0
 8017350:	2b00      	cmp	r3, #0
 8017352:	da01      	bge.n	8017358 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8017354:	23ff      	movs	r3, #255	; 0xff
 8017356:	e004      	b.n	8017362 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8017358:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801735c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8017360:	781b      	ldrb	r3, [r3, #0]
}
 8017362:	4618      	mov	r0, r3
 8017364:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8017368:	46bd      	mov	sp, r7
 801736a:	bd80      	pop	{r7, pc}

0801736c <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 801736c:	b580      	push	{r7, lr}
 801736e:	b088      	sub	sp, #32
 8017370:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8017372:	2300      	movs	r3, #0
 8017374:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8017376:	f107 0308 	add.w	r3, r7, #8
 801737a:	2218      	movs	r2, #24
 801737c:	2100      	movs	r1, #0
 801737e:	4618      	mov	r0, r3
 8017380:	f000 fa42 	bl	8017808 <Osal_MemSet>
  rq.ogf = 0x03;
 8017384:	2303      	movs	r3, #3
 8017386:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8017388:	2303      	movs	r3, #3
 801738a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 801738c:	1dfb      	adds	r3, r7, #7
 801738e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8017390:	2301      	movs	r3, #1
 8017392:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8017394:	f107 0308 	add.w	r3, r7, #8
 8017398:	2100      	movs	r1, #0
 801739a:	4618      	mov	r0, r3
 801739c:	f000 f8f2 	bl	8017584 <hci_send_req>
 80173a0:	4603      	mov	r3, r0
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	da01      	bge.n	80173aa <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80173a6:	23ff      	movs	r3, #255	; 0xff
 80173a8:	e000      	b.n	80173ac <hci_reset+0x40>
  return status;
 80173aa:	79fb      	ldrb	r3, [r7, #7]
}
 80173ac:	4618      	mov	r0, r3
 80173ae:	3720      	adds	r7, #32
 80173b0:	46bd      	mov	sp, r7
 80173b2:	bd80      	pop	{r7, pc}

080173b4 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 80173b4:	b590      	push	{r4, r7, lr}
 80173b6:	b0cd      	sub	sp, #308	; 0x134
 80173b8:	af00      	add	r7, sp, #0
 80173ba:	4604      	mov	r4, r0
 80173bc:	4608      	mov	r0, r1
 80173be:	4611      	mov	r1, r2
 80173c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80173c4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80173c8:	4622      	mov	r2, r4
 80173ca:	701a      	strb	r2, [r3, #0]
 80173cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80173d0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80173d4:	4602      	mov	r2, r0
 80173d6:	701a      	strb	r2, [r3, #0]
 80173d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80173dc:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80173e0:	460a      	mov	r2, r1
 80173e2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 80173e4:	f107 0310 	add.w	r3, r7, #16
 80173e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80173ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80173f0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80173f4:	2200      	movs	r2, #0
 80173f6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80173f8:	2300      	movs	r3, #0
 80173fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 80173fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8017402:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8017406:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 801740a:	7812      	ldrb	r2, [r2, #0]
 801740c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801740e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8017412:	3301      	adds	r3, #1
 8017414:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8017418:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801741c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8017420:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8017424:	7812      	ldrb	r2, [r2, #0]
 8017426:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8017428:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801742c:	3301      	adds	r3, #1
 801742e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8017432:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8017436:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801743a:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 801743e:	7812      	ldrb	r2, [r2, #0]
 8017440:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8017442:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8017446:	3301      	adds	r3, #1
 8017448:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801744c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8017450:	2218      	movs	r2, #24
 8017452:	2100      	movs	r1, #0
 8017454:	4618      	mov	r0, r3
 8017456:	f000 f9d7 	bl	8017808 <Osal_MemSet>
  rq.ogf = 0x08;
 801745a:	2308      	movs	r3, #8
 801745c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8017460:	2331      	movs	r3, #49	; 0x31
 8017462:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8017466:	f107 0310 	add.w	r3, r7, #16
 801746a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 801746e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8017472:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8017476:	f107 030f 	add.w	r3, r7, #15
 801747a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 801747e:	2301      	movs	r3, #1
 8017480:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8017484:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8017488:	2100      	movs	r1, #0
 801748a:	4618      	mov	r0, r3
 801748c:	f000 f87a 	bl	8017584 <hci_send_req>
 8017490:	4603      	mov	r3, r0
 8017492:	2b00      	cmp	r3, #0
 8017494:	da01      	bge.n	801749a <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8017496:	23ff      	movs	r3, #255	; 0xff
 8017498:	e004      	b.n	80174a4 <hci_le_set_default_phy+0xf0>
  return status;
 801749a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801749e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80174a2:	781b      	ldrb	r3, [r3, #0]
}
 80174a4:	4618      	mov	r0, r3
 80174a6:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80174aa:	46bd      	mov	sp, r7
 80174ac:	bd90      	pop	{r4, r7, pc}
	...

080174b0 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80174b0:	b580      	push	{r7, lr}
 80174b2:	b082      	sub	sp, #8
 80174b4:	af00      	add	r7, sp, #0
 80174b6:	6078      	str	r0, [r7, #4]
 80174b8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80174ba:	683b      	ldr	r3, [r7, #0]
 80174bc:	685b      	ldr	r3, [r3, #4]
 80174be:	4a08      	ldr	r2, [pc, #32]	; (80174e0 <hci_init+0x30>)
 80174c0:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80174c2:	4a08      	ldr	r2, [pc, #32]	; (80174e4 <hci_init+0x34>)
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80174c8:	4806      	ldr	r0, [pc, #24]	; (80174e4 <hci_init+0x34>)
 80174ca:	f000 f979 	bl	80177c0 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80174ce:	683b      	ldr	r3, [r7, #0]
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	4618      	mov	r0, r3
 80174d4:	f000 f8da 	bl	801768c <TlInit>

  return;
 80174d8:	bf00      	nop
}
 80174da:	3708      	adds	r7, #8
 80174dc:	46bd      	mov	sp, r7
 80174de:	bd80      	pop	{r7, pc}
 80174e0:	20000944 	.word	0x20000944
 80174e4:	2000091c 	.word	0x2000091c

080174e8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80174e8:	b580      	push	{r7, lr}
 80174ea:	b084      	sub	sp, #16
 80174ec:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80174ee:	4822      	ldr	r0, [pc, #136]	; (8017578 <hci_user_evt_proc+0x90>)
 80174f0:	f000 fbfc 	bl	8017cec <LST_is_empty>
 80174f4:	4603      	mov	r3, r0
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d12b      	bne.n	8017552 <hci_user_evt_proc+0x6a>
 80174fa:	4b20      	ldr	r3, [pc, #128]	; (801757c <hci_user_evt_proc+0x94>)
 80174fc:	781b      	ldrb	r3, [r3, #0]
 80174fe:	2b00      	cmp	r3, #0
 8017500:	d027      	beq.n	8017552 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8017502:	f107 030c 	add.w	r3, r7, #12
 8017506:	4619      	mov	r1, r3
 8017508:	481b      	ldr	r0, [pc, #108]	; (8017578 <hci_user_evt_proc+0x90>)
 801750a:	f000 fc7e 	bl	8017e0a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 801750e:	4b1c      	ldr	r3, [pc, #112]	; (8017580 <hci_user_evt_proc+0x98>)
 8017510:	69db      	ldr	r3, [r3, #28]
 8017512:	2b00      	cmp	r3, #0
 8017514:	d00c      	beq.n	8017530 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8017516:	68fb      	ldr	r3, [r7, #12]
 8017518:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 801751a:	2301      	movs	r3, #1
 801751c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 801751e:	4b18      	ldr	r3, [pc, #96]	; (8017580 <hci_user_evt_proc+0x98>)
 8017520:	69db      	ldr	r3, [r3, #28]
 8017522:	1d3a      	adds	r2, r7, #4
 8017524:	4610      	mov	r0, r2
 8017526:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8017528:	793a      	ldrb	r2, [r7, #4]
 801752a:	4b14      	ldr	r3, [pc, #80]	; (801757c <hci_user_evt_proc+0x94>)
 801752c:	701a      	strb	r2, [r3, #0]
 801752e:	e002      	b.n	8017536 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8017530:	4b12      	ldr	r3, [pc, #72]	; (801757c <hci_user_evt_proc+0x94>)
 8017532:	2201      	movs	r2, #1
 8017534:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8017536:	4b11      	ldr	r3, [pc, #68]	; (801757c <hci_user_evt_proc+0x94>)
 8017538:	781b      	ldrb	r3, [r3, #0]
 801753a:	2b00      	cmp	r3, #0
 801753c:	d004      	beq.n	8017548 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 801753e:	68fb      	ldr	r3, [r7, #12]
 8017540:	4618      	mov	r0, r3
 8017542:	f000 ff23 	bl	801838c <TL_MM_EvtDone>
 8017546:	e004      	b.n	8017552 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8017548:	68fb      	ldr	r3, [r7, #12]
 801754a:	4619      	mov	r1, r3
 801754c:	480a      	ldr	r0, [pc, #40]	; (8017578 <hci_user_evt_proc+0x90>)
 801754e:	f000 fbef 	bl	8017d30 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8017552:	4809      	ldr	r0, [pc, #36]	; (8017578 <hci_user_evt_proc+0x90>)
 8017554:	f000 fbca 	bl	8017cec <LST_is_empty>
 8017558:	4603      	mov	r3, r0
 801755a:	2b00      	cmp	r3, #0
 801755c:	d107      	bne.n	801756e <hci_user_evt_proc+0x86>
 801755e:	4b07      	ldr	r3, [pc, #28]	; (801757c <hci_user_evt_proc+0x94>)
 8017560:	781b      	ldrb	r3, [r3, #0]
 8017562:	2b00      	cmp	r3, #0
 8017564:	d003      	beq.n	801756e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8017566:	4804      	ldr	r0, [pc, #16]	; (8017578 <hci_user_evt_proc+0x90>)
 8017568:	f7f5 f814 	bl	800c594 <hci_notify_asynch_evt>
  }


  return;
 801756c:	bf00      	nop
 801756e:	bf00      	nop
}
 8017570:	3710      	adds	r7, #16
 8017572:	46bd      	mov	sp, r7
 8017574:	bd80      	pop	{r7, pc}
 8017576:	bf00      	nop
 8017578:	20000268 	.word	0x20000268
 801757c:	20000274 	.word	0x20000274
 8017580:	2000091c 	.word	0x2000091c

08017584 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8017584:	b580      	push	{r7, lr}
 8017586:	b088      	sub	sp, #32
 8017588:	af00      	add	r7, sp, #0
 801758a:	6078      	str	r0, [r7, #4]
 801758c:	460b      	mov	r3, r1
 801758e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8017590:	2000      	movs	r0, #0
 8017592:	f000 f8d1 	bl	8017738 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8017596:	2300      	movs	r3, #0
 8017598:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	885b      	ldrh	r3, [r3, #2]
 801759e:	b21b      	sxth	r3, r3
 80175a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80175a4:	b21a      	sxth	r2, r3
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	881b      	ldrh	r3, [r3, #0]
 80175aa:	029b      	lsls	r3, r3, #10
 80175ac:	b21b      	sxth	r3, r3
 80175ae:	4313      	orrs	r3, r2
 80175b0:	b21b      	sxth	r3, r3
 80175b2:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 80175b4:	4b33      	ldr	r3, [pc, #204]	; (8017684 <hci_send_req+0x100>)
 80175b6:	2201      	movs	r2, #1
 80175b8:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	68db      	ldr	r3, [r3, #12]
 80175be:	b2d9      	uxtb	r1, r3
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	689a      	ldr	r2, [r3, #8]
 80175c4:	8bbb      	ldrh	r3, [r7, #28]
 80175c6:	4618      	mov	r0, r3
 80175c8:	f000 f890 	bl	80176ec <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80175cc:	e04e      	b.n	801766c <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80175ce:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80175d2:	f7f4 fff6 	bl	800c5c2 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80175d6:	e043      	b.n	8017660 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80175d8:	f107 030c 	add.w	r3, r7, #12
 80175dc:	4619      	mov	r1, r3
 80175de:	482a      	ldr	r0, [pc, #168]	; (8017688 <hci_send_req+0x104>)
 80175e0:	f000 fc13 	bl	8017e0a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80175e4:	68fb      	ldr	r3, [r7, #12]
 80175e6:	7a5b      	ldrb	r3, [r3, #9]
 80175e8:	2b0f      	cmp	r3, #15
 80175ea:	d114      	bne.n	8017616 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80175ec:	68fb      	ldr	r3, [r7, #12]
 80175ee:	330b      	adds	r3, #11
 80175f0:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80175f2:	693b      	ldr	r3, [r7, #16]
 80175f4:	885b      	ldrh	r3, [r3, #2]
 80175f6:	b29b      	uxth	r3, r3
 80175f8:	8bba      	ldrh	r2, [r7, #28]
 80175fa:	429a      	cmp	r2, r3
 80175fc:	d104      	bne.n	8017608 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	691b      	ldr	r3, [r3, #16]
 8017602:	693a      	ldr	r2, [r7, #16]
 8017604:	7812      	ldrb	r2, [r2, #0]
 8017606:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8017608:	693b      	ldr	r3, [r7, #16]
 801760a:	785b      	ldrb	r3, [r3, #1]
 801760c:	2b00      	cmp	r3, #0
 801760e:	d027      	beq.n	8017660 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8017610:	2301      	movs	r3, #1
 8017612:	77fb      	strb	r3, [r7, #31]
 8017614:	e024      	b.n	8017660 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8017616:	68fb      	ldr	r3, [r7, #12]
 8017618:	330b      	adds	r3, #11
 801761a:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 801761c:	69bb      	ldr	r3, [r7, #24]
 801761e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8017622:	b29b      	uxth	r3, r3
 8017624:	8bba      	ldrh	r2, [r7, #28]
 8017626:	429a      	cmp	r2, r3
 8017628:	d114      	bne.n	8017654 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 801762a:	68fb      	ldr	r3, [r7, #12]
 801762c:	7a9b      	ldrb	r3, [r3, #10]
 801762e:	3b03      	subs	r3, #3
 8017630:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	695a      	ldr	r2, [r3, #20]
 8017636:	7dfb      	ldrb	r3, [r7, #23]
 8017638:	429a      	cmp	r2, r3
 801763a:	bfa8      	it	ge
 801763c:	461a      	movge	r2, r3
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	6918      	ldr	r0, [r3, #16]
 8017646:	69bb      	ldr	r3, [r7, #24]
 8017648:	1cd9      	adds	r1, r3, #3
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	695b      	ldr	r3, [r3, #20]
 801764e:	461a      	mov	r2, r3
 8017650:	f001 fa30 	bl	8018ab4 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8017654:	69bb      	ldr	r3, [r7, #24]
 8017656:	781b      	ldrb	r3, [r3, #0]
 8017658:	2b00      	cmp	r3, #0
 801765a:	d001      	beq.n	8017660 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 801765c:	2301      	movs	r3, #1
 801765e:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8017660:	4809      	ldr	r0, [pc, #36]	; (8017688 <hci_send_req+0x104>)
 8017662:	f000 fb43 	bl	8017cec <LST_is_empty>
 8017666:	4603      	mov	r3, r0
 8017668:	2b00      	cmp	r3, #0
 801766a:	d0b5      	beq.n	80175d8 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 801766c:	7ffb      	ldrb	r3, [r7, #31]
 801766e:	2b00      	cmp	r3, #0
 8017670:	d0ad      	beq.n	80175ce <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8017672:	2001      	movs	r0, #1
 8017674:	f000 f860 	bl	8017738 <NotifyCmdStatus>

  return 0;
 8017678:	2300      	movs	r3, #0
}
 801767a:	4618      	mov	r0, r3
 801767c:	3720      	adds	r7, #32
 801767e:	46bd      	mov	sp, r7
 8017680:	bd80      	pop	{r7, pc}
 8017682:	bf00      	nop
 8017684:	20000948 	.word	0x20000948
 8017688:	2000093c 	.word	0x2000093c

0801768c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 801768c:	b580      	push	{r7, lr}
 801768e:	b086      	sub	sp, #24
 8017690:	af00      	add	r7, sp, #0
 8017692:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8017694:	480f      	ldr	r0, [pc, #60]	; (80176d4 <TlInit+0x48>)
 8017696:	f000 fb19 	bl	8017ccc <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 801769a:	4a0f      	ldr	r2, [pc, #60]	; (80176d8 <TlInit+0x4c>)
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80176a0:	480e      	ldr	r0, [pc, #56]	; (80176dc <TlInit+0x50>)
 80176a2:	f000 fb13 	bl	8017ccc <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80176a6:	4b0e      	ldr	r3, [pc, #56]	; (80176e0 <TlInit+0x54>)
 80176a8:	2201      	movs	r2, #1
 80176aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80176ac:	4b0d      	ldr	r3, [pc, #52]	; (80176e4 <TlInit+0x58>)
 80176ae:	681b      	ldr	r3, [r3, #0]
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d00a      	beq.n	80176ca <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80176b8:	4b0b      	ldr	r3, [pc, #44]	; (80176e8 <TlInit+0x5c>)
 80176ba:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80176bc:	4b09      	ldr	r3, [pc, #36]	; (80176e4 <TlInit+0x58>)
 80176be:	681b      	ldr	r3, [r3, #0]
 80176c0:	f107 0208 	add.w	r2, r7, #8
 80176c4:	4610      	mov	r0, r2
 80176c6:	4798      	blx	r3
  }

  return;
 80176c8:	bf00      	nop
 80176ca:	bf00      	nop
}
 80176cc:	3718      	adds	r7, #24
 80176ce:	46bd      	mov	sp, r7
 80176d0:	bd80      	pop	{r7, pc}
 80176d2:	bf00      	nop
 80176d4:	2000093c 	.word	0x2000093c
 80176d8:	20000270 	.word	0x20000270
 80176dc:	20000268 	.word	0x20000268
 80176e0:	20000274 	.word	0x20000274
 80176e4:	2000091c 	.word	0x2000091c
 80176e8:	08017779 	.word	0x08017779

080176ec <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80176ec:	b580      	push	{r7, lr}
 80176ee:	b082      	sub	sp, #8
 80176f0:	af00      	add	r7, sp, #0
 80176f2:	4603      	mov	r3, r0
 80176f4:	603a      	str	r2, [r7, #0]
 80176f6:	80fb      	strh	r3, [r7, #6]
 80176f8:	460b      	mov	r3, r1
 80176fa:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80176fc:	4b0c      	ldr	r3, [pc, #48]	; (8017730 <SendCmd+0x44>)
 80176fe:	681b      	ldr	r3, [r3, #0]
 8017700:	88fa      	ldrh	r2, [r7, #6]
 8017702:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8017706:	4b0a      	ldr	r3, [pc, #40]	; (8017730 <SendCmd+0x44>)
 8017708:	681b      	ldr	r3, [r3, #0]
 801770a:	797a      	ldrb	r2, [r7, #5]
 801770c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 801770e:	4b08      	ldr	r3, [pc, #32]	; (8017730 <SendCmd+0x44>)
 8017710:	681b      	ldr	r3, [r3, #0]
 8017712:	330c      	adds	r3, #12
 8017714:	797a      	ldrb	r2, [r7, #5]
 8017716:	6839      	ldr	r1, [r7, #0]
 8017718:	4618      	mov	r0, r3
 801771a:	f001 f9cb 	bl	8018ab4 <memcpy>

  hciContext.io.Send(0,0);
 801771e:	4b05      	ldr	r3, [pc, #20]	; (8017734 <SendCmd+0x48>)
 8017720:	691b      	ldr	r3, [r3, #16]
 8017722:	2100      	movs	r1, #0
 8017724:	2000      	movs	r0, #0
 8017726:	4798      	blx	r3

  return;
 8017728:	bf00      	nop
}
 801772a:	3708      	adds	r7, #8
 801772c:	46bd      	mov	sp, r7
 801772e:	bd80      	pop	{r7, pc}
 8017730:	20000270 	.word	0x20000270
 8017734:	2000091c 	.word	0x2000091c

08017738 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8017738:	b580      	push	{r7, lr}
 801773a:	b082      	sub	sp, #8
 801773c:	af00      	add	r7, sp, #0
 801773e:	4603      	mov	r3, r0
 8017740:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8017742:	79fb      	ldrb	r3, [r7, #7]
 8017744:	2b00      	cmp	r3, #0
 8017746:	d108      	bne.n	801775a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8017748:	4b0a      	ldr	r3, [pc, #40]	; (8017774 <NotifyCmdStatus+0x3c>)
 801774a:	681b      	ldr	r3, [r3, #0]
 801774c:	2b00      	cmp	r3, #0
 801774e:	d00d      	beq.n	801776c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8017750:	4b08      	ldr	r3, [pc, #32]	; (8017774 <NotifyCmdStatus+0x3c>)
 8017752:	681b      	ldr	r3, [r3, #0]
 8017754:	2000      	movs	r0, #0
 8017756:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8017758:	e008      	b.n	801776c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 801775a:	4b06      	ldr	r3, [pc, #24]	; (8017774 <NotifyCmdStatus+0x3c>)
 801775c:	681b      	ldr	r3, [r3, #0]
 801775e:	2b00      	cmp	r3, #0
 8017760:	d004      	beq.n	801776c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8017762:	4b04      	ldr	r3, [pc, #16]	; (8017774 <NotifyCmdStatus+0x3c>)
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	2001      	movs	r0, #1
 8017768:	4798      	blx	r3
  return;
 801776a:	bf00      	nop
 801776c:	bf00      	nop
}
 801776e:	3708      	adds	r7, #8
 8017770:	46bd      	mov	sp, r7
 8017772:	bd80      	pop	{r7, pc}
 8017774:	20000944 	.word	0x20000944

08017778 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8017778:	b580      	push	{r7, lr}
 801777a:	b082      	sub	sp, #8
 801777c:	af00      	add	r7, sp, #0
 801777e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	7a5b      	ldrb	r3, [r3, #9]
 8017784:	2b0f      	cmp	r3, #15
 8017786:	d003      	beq.n	8017790 <TlEvtReceived+0x18>
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	7a5b      	ldrb	r3, [r3, #9]
 801778c:	2b0e      	cmp	r3, #14
 801778e:	d107      	bne.n	80177a0 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8017790:	6879      	ldr	r1, [r7, #4]
 8017792:	4809      	ldr	r0, [pc, #36]	; (80177b8 <TlEvtReceived+0x40>)
 8017794:	f000 faf2 	bl	8017d7c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8017798:	2000      	movs	r0, #0
 801779a:	f7f4 ff07 	bl	800c5ac <hci_cmd_resp_release>
 801779e:	e006      	b.n	80177ae <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80177a0:	6879      	ldr	r1, [r7, #4]
 80177a2:	4806      	ldr	r0, [pc, #24]	; (80177bc <TlEvtReceived+0x44>)
 80177a4:	f000 faea 	bl	8017d7c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80177a8:	4804      	ldr	r0, [pc, #16]	; (80177bc <TlEvtReceived+0x44>)
 80177aa:	f7f4 fef3 	bl	800c594 <hci_notify_asynch_evt>
  }

  return;
 80177ae:	bf00      	nop
}
 80177b0:	3708      	adds	r7, #8
 80177b2:	46bd      	mov	sp, r7
 80177b4:	bd80      	pop	{r7, pc}
 80177b6:	bf00      	nop
 80177b8:	2000093c 	.word	0x2000093c
 80177bc:	20000268 	.word	0x20000268

080177c0 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80177c0:	b480      	push	{r7}
 80177c2:	b083      	sub	sp, #12
 80177c4:	af00      	add	r7, sp, #0
 80177c6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	4a05      	ldr	r2, [pc, #20]	; (80177e0 <hci_register_io_bus+0x20>)
 80177cc:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	4a04      	ldr	r2, [pc, #16]	; (80177e4 <hci_register_io_bus+0x24>)
 80177d2:	611a      	str	r2, [r3, #16]

  return;
 80177d4:	bf00      	nop
}
 80177d6:	370c      	adds	r7, #12
 80177d8:	46bd      	mov	sp, r7
 80177da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177de:	4770      	bx	lr
 80177e0:	08018105 	.word	0x08018105
 80177e4:	0801816d 	.word	0x0801816d

080177e8 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80177e8:	b580      	push	{r7, lr}
 80177ea:	b084      	sub	sp, #16
 80177ec:	af00      	add	r7, sp, #0
 80177ee:	60f8      	str	r0, [r7, #12]
 80177f0:	60b9      	str	r1, [r7, #8]
 80177f2:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 80177f4:	687a      	ldr	r2, [r7, #4]
 80177f6:	68b9      	ldr	r1, [r7, #8]
 80177f8:	68f8      	ldr	r0, [r7, #12]
 80177fa:	f001 f95b 	bl	8018ab4 <memcpy>
 80177fe:	4603      	mov	r3, r0
}
 8017800:	4618      	mov	r0, r3
 8017802:	3710      	adds	r7, #16
 8017804:	46bd      	mov	sp, r7
 8017806:	bd80      	pop	{r7, pc}

08017808 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8017808:	b580      	push	{r7, lr}
 801780a:	b084      	sub	sp, #16
 801780c:	af00      	add	r7, sp, #0
 801780e:	60f8      	str	r0, [r7, #12]
 8017810:	60b9      	str	r1, [r7, #8]
 8017812:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8017814:	687a      	ldr	r2, [r7, #4]
 8017816:	68b9      	ldr	r1, [r7, #8]
 8017818:	68f8      	ldr	r0, [r7, #12]
 801781a:	f001 f959 	bl	8018ad0 <memset>
 801781e:	4603      	mov	r3, r0
}
 8017820:	4618      	mov	r0, r3
 8017822:	3710      	adds	r7, #16
 8017824:	46bd      	mov	sp, r7
 8017826:	bd80      	pop	{r7, pc}

08017828 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8017828:	b480      	push	{r7}
 801782a:	b085      	sub	sp, #20
 801782c:	af00      	add	r7, sp, #0
 801782e:	4603      	mov	r3, r0
 8017830:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8017832:	4b0f      	ldr	r3, [pc, #60]	; (8017870 <OTP_Read+0x48>)
 8017834:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8017836:	e002      	b.n	801783e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8017838:	68fb      	ldr	r3, [r7, #12]
 801783a:	3b08      	subs	r3, #8
 801783c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 801783e:	68fb      	ldr	r3, [r7, #12]
 8017840:	3307      	adds	r3, #7
 8017842:	781b      	ldrb	r3, [r3, #0]
 8017844:	79fa      	ldrb	r2, [r7, #7]
 8017846:	429a      	cmp	r2, r3
 8017848:	d003      	beq.n	8017852 <OTP_Read+0x2a>
 801784a:	68fb      	ldr	r3, [r7, #12]
 801784c:	4a09      	ldr	r2, [pc, #36]	; (8017874 <OTP_Read+0x4c>)
 801784e:	4293      	cmp	r3, r2
 8017850:	d1f2      	bne.n	8017838 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8017852:	68fb      	ldr	r3, [r7, #12]
 8017854:	3307      	adds	r3, #7
 8017856:	781b      	ldrb	r3, [r3, #0]
 8017858:	79fa      	ldrb	r2, [r7, #7]
 801785a:	429a      	cmp	r2, r3
 801785c:	d001      	beq.n	8017862 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 801785e:	2300      	movs	r3, #0
 8017860:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8017862:	68fb      	ldr	r3, [r7, #12]
}
 8017864:	4618      	mov	r0, r3
 8017866:	3714      	adds	r7, #20
 8017868:	46bd      	mov	sp, r7
 801786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801786e:	4770      	bx	lr
 8017870:	1fff73f8 	.word	0x1fff73f8
 8017874:	1fff7000 	.word	0x1fff7000

08017878 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8017878:	b580      	push	{r7, lr}
 801787a:	b088      	sub	sp, #32
 801787c:	af00      	add	r7, sp, #0
 801787e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8017880:	f107 030c 	add.w	r3, r7, #12
 8017884:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 801788c:	69fb      	ldr	r3, [r7, #28]
 801788e:	212e      	movs	r1, #46	; 0x2e
 8017890:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8017894:	f000 f94c 	bl	8017b30 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8017898:	69fb      	ldr	r3, [r7, #28]
 801789a:	330b      	adds	r3, #11
 801789c:	78db      	ldrb	r3, [r3, #3]
}
 801789e:	4618      	mov	r0, r3
 80178a0:	3720      	adds	r7, #32
 80178a2:	46bd      	mov	sp, r7
 80178a4:	bd80      	pop	{r7, pc}

080178a6 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80178a6:	b580      	push	{r7, lr}
 80178a8:	b088      	sub	sp, #32
 80178aa:	af00      	add	r7, sp, #0
 80178ac:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80178ae:	f107 030c 	add.w	r3, r7, #12
 80178b2:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80178ba:	69fb      	ldr	r3, [r7, #28]
 80178bc:	210f      	movs	r1, #15
 80178be:	f64f 4068 	movw	r0, #64616	; 0xfc68
 80178c2:	f000 f935 	bl	8017b30 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80178c6:	69fb      	ldr	r3, [r7, #28]
 80178c8:	330b      	adds	r3, #11
 80178ca:	78db      	ldrb	r3, [r3, #3]
}
 80178cc:	4618      	mov	r0, r3
 80178ce:	3720      	adds	r7, #32
 80178d0:	46bd      	mov	sp, r7
 80178d2:	bd80      	pop	{r7, pc}

080178d4 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 80178d4:	b580      	push	{r7, lr}
 80178d6:	b088      	sub	sp, #32
 80178d8:	af00      	add	r7, sp, #0
 80178da:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80178dc:	f107 030c 	add.w	r3, r7, #12
 80178e0:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 80178e2:	69fb      	ldr	r3, [r7, #28]
 80178e4:	687a      	ldr	r2, [r7, #4]
 80178e6:	2110      	movs	r1, #16
 80178e8:	f64f 4075 	movw	r0, #64629	; 0xfc75
 80178ec:	f000 f920 	bl	8017b30 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80178f0:	69fb      	ldr	r3, [r7, #28]
 80178f2:	330b      	adds	r3, #11
 80178f4:	78db      	ldrb	r3, [r3, #3]
}
 80178f6:	4618      	mov	r0, r3
 80178f8:	3720      	adds	r7, #32
 80178fa:	46bd      	mov	sp, r7
 80178fc:	bd80      	pop	{r7, pc}
	...

08017900 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8017900:	b480      	push	{r7}
 8017902:	b08b      	sub	sp, #44	; 0x2c
 8017904:	af00      	add	r7, sp, #0
 8017906:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8017908:	2300      	movs	r3, #0
 801790a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 801790c:	2300      	movs	r3, #0
 801790e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8017910:	2300      	movs	r3, #0
 8017912:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8017914:	2300      	movs	r3, #0
 8017916:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8017918:	2300      	movs	r3, #0
 801791a:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 801791c:	2300      	movs	r3, #0
 801791e:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8017920:	2300      	movs	r3, #0
 8017922:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8017924:	2300      	movs	r3, #0
 8017926:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8017928:	4b4a      	ldr	r3, [pc, #296]	; (8017a54 <SHCI_GetWirelessFwInfo+0x154>)
 801792a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801792c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8017930:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8017932:	693b      	ldr	r3, [r7, #16]
 8017934:	009b      	lsls	r3, r3, #2
 8017936:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801793a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 801793e:	681b      	ldr	r3, [r3, #0]
 8017940:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8017942:	68bb      	ldr	r3, [r7, #8]
 8017944:	681b      	ldr	r3, [r3, #0]
 8017946:	4a44      	ldr	r2, [pc, #272]	; (8017a58 <SHCI_GetWirelessFwInfo+0x158>)
 8017948:	4293      	cmp	r3, r2
 801794a:	d10f      	bne.n	801796c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 801794c:	68bb      	ldr	r3, [r7, #8]
 801794e:	695b      	ldr	r3, [r3, #20]
 8017950:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8017952:	68bb      	ldr	r3, [r7, #8]
 8017954:	699b      	ldr	r3, [r3, #24]
 8017956:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8017958:	68bb      	ldr	r3, [r7, #8]
 801795a:	69db      	ldr	r3, [r3, #28]
 801795c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 801795e:	68bb      	ldr	r3, [r7, #8]
 8017960:	68db      	ldr	r3, [r3, #12]
 8017962:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8017964:	68bb      	ldr	r3, [r7, #8]
 8017966:	691b      	ldr	r3, [r3, #16]
 8017968:	617b      	str	r3, [r7, #20]
 801796a:	e01a      	b.n	80179a2 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 801796c:	693b      	ldr	r3, [r7, #16]
 801796e:	009b      	lsls	r3, r3, #2
 8017970:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8017974:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8017978:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 801797a:	68fb      	ldr	r3, [r7, #12]
 801797c:	681b      	ldr	r3, [r3, #0]
 801797e:	691b      	ldr	r3, [r3, #16]
 8017980:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	681b      	ldr	r3, [r3, #0]
 8017986:	695b      	ldr	r3, [r3, #20]
 8017988:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 801798a:	68fb      	ldr	r3, [r7, #12]
 801798c:	681b      	ldr	r3, [r3, #0]
 801798e:	699b      	ldr	r3, [r3, #24]
 8017990:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8017992:	68fb      	ldr	r3, [r7, #12]
 8017994:	681b      	ldr	r3, [r3, #0]
 8017996:	685b      	ldr	r3, [r3, #4]
 8017998:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 801799a:	68fb      	ldr	r3, [r7, #12]
 801799c:	681b      	ldr	r3, [r3, #0]
 801799e:	689b      	ldr	r3, [r3, #8]
 80179a0:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80179a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179a4:	0e1b      	lsrs	r3, r3, #24
 80179a6:	b2da      	uxtb	r2, r3
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80179ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179ae:	0c1b      	lsrs	r3, r3, #16
 80179b0:	b2da      	uxtb	r2, r3
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80179b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179b8:	0a1b      	lsrs	r3, r3, #8
 80179ba:	b2da      	uxtb	r2, r3
 80179bc:	687b      	ldr	r3, [r7, #4]
 80179be:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80179c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179c2:	091b      	lsrs	r3, r3, #4
 80179c4:	b2db      	uxtb	r3, r3
 80179c6:	f003 030f 	and.w	r3, r3, #15
 80179ca:	b2da      	uxtb	r2, r3
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80179d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179d2:	b2db      	uxtb	r3, r3
 80179d4:	f003 030f 	and.w	r3, r3, #15
 80179d8:	b2da      	uxtb	r2, r3
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80179de:	6a3b      	ldr	r3, [r7, #32]
 80179e0:	0e1b      	lsrs	r3, r3, #24
 80179e2:	b2da      	uxtb	r2, r3
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80179e8:	6a3b      	ldr	r3, [r7, #32]
 80179ea:	0c1b      	lsrs	r3, r3, #16
 80179ec:	b2da      	uxtb	r2, r3
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80179f2:	6a3b      	ldr	r3, [r7, #32]
 80179f4:	0a1b      	lsrs	r3, r3, #8
 80179f6:	b2da      	uxtb	r2, r3
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80179fc:	6a3b      	ldr	r3, [r7, #32]
 80179fe:	b2da      	uxtb	r2, r3
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8017a04:	69fb      	ldr	r3, [r7, #28]
 8017a06:	b2da      	uxtb	r2, r3
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8017a0c:	69bb      	ldr	r3, [r7, #24]
 8017a0e:	0e1b      	lsrs	r3, r3, #24
 8017a10:	b2da      	uxtb	r2, r3
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8017a16:	69bb      	ldr	r3, [r7, #24]
 8017a18:	0c1b      	lsrs	r3, r3, #16
 8017a1a:	b2da      	uxtb	r2, r3
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8017a20:	69bb      	ldr	r3, [r7, #24]
 8017a22:	0a1b      	lsrs	r3, r3, #8
 8017a24:	b2da      	uxtb	r2, r3
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8017a2a:	697b      	ldr	r3, [r7, #20]
 8017a2c:	0e1b      	lsrs	r3, r3, #24
 8017a2e:	b2da      	uxtb	r2, r3
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8017a34:	697b      	ldr	r3, [r7, #20]
 8017a36:	0c1b      	lsrs	r3, r3, #16
 8017a38:	b2da      	uxtb	r2, r3
 8017a3a:	687b      	ldr	r3, [r7, #4]
 8017a3c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8017a3e:	697b      	ldr	r3, [r7, #20]
 8017a40:	b2da      	uxtb	r2, r3
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8017a46:	2300      	movs	r3, #0
}
 8017a48:	4618      	mov	r0, r3
 8017a4a:	372c      	adds	r7, #44	; 0x2c
 8017a4c:	46bd      	mov	sp, r7
 8017a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a52:	4770      	bx	lr
 8017a54:	58004000 	.word	0x58004000
 8017a58:	a94656b9 	.word	0xa94656b9

08017a5c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8017a5c:	b580      	push	{r7, lr}
 8017a5e:	b082      	sub	sp, #8
 8017a60:	af00      	add	r7, sp, #0
 8017a62:	6078      	str	r0, [r7, #4]
 8017a64:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8017a66:	683b      	ldr	r3, [r7, #0]
 8017a68:	685b      	ldr	r3, [r3, #4]
 8017a6a:	4a08      	ldr	r2, [pc, #32]	; (8017a8c <shci_init+0x30>)
 8017a6c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8017a6e:	4a08      	ldr	r2, [pc, #32]	; (8017a90 <shci_init+0x34>)
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8017a74:	4806      	ldr	r0, [pc, #24]	; (8017a90 <shci_init+0x34>)
 8017a76:	f000 f915 	bl	8017ca4 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8017a7a:	683b      	ldr	r3, [r7, #0]
 8017a7c:	681b      	ldr	r3, [r3, #0]
 8017a7e:	4618      	mov	r0, r3
 8017a80:	f000 f898 	bl	8017bb4 <TlInit>

  return;
 8017a84:	bf00      	nop
}
 8017a86:	3708      	adds	r7, #8
 8017a88:	46bd      	mov	sp, r7
 8017a8a:	bd80      	pop	{r7, pc}
 8017a8c:	2000096c 	.word	0x2000096c
 8017a90:	2000094c 	.word	0x2000094c

08017a94 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8017a94:	b580      	push	{r7, lr}
 8017a96:	b084      	sub	sp, #16
 8017a98:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8017a9a:	4822      	ldr	r0, [pc, #136]	; (8017b24 <shci_user_evt_proc+0x90>)
 8017a9c:	f000 f926 	bl	8017cec <LST_is_empty>
 8017aa0:	4603      	mov	r3, r0
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	d12b      	bne.n	8017afe <shci_user_evt_proc+0x6a>
 8017aa6:	4b20      	ldr	r3, [pc, #128]	; (8017b28 <shci_user_evt_proc+0x94>)
 8017aa8:	781b      	ldrb	r3, [r3, #0]
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	d027      	beq.n	8017afe <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8017aae:	f107 030c 	add.w	r3, r7, #12
 8017ab2:	4619      	mov	r1, r3
 8017ab4:	481b      	ldr	r0, [pc, #108]	; (8017b24 <shci_user_evt_proc+0x90>)
 8017ab6:	f000 f9a8 	bl	8017e0a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8017aba:	4b1c      	ldr	r3, [pc, #112]	; (8017b2c <shci_user_evt_proc+0x98>)
 8017abc:	69db      	ldr	r3, [r3, #28]
 8017abe:	2b00      	cmp	r3, #0
 8017ac0:	d00c      	beq.n	8017adc <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8017ac2:	68fb      	ldr	r3, [r7, #12]
 8017ac4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8017ac6:	2301      	movs	r3, #1
 8017ac8:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8017aca:	4b18      	ldr	r3, [pc, #96]	; (8017b2c <shci_user_evt_proc+0x98>)
 8017acc:	69db      	ldr	r3, [r3, #28]
 8017ace:	1d3a      	adds	r2, r7, #4
 8017ad0:	4610      	mov	r0, r2
 8017ad2:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8017ad4:	793a      	ldrb	r2, [r7, #4]
 8017ad6:	4b14      	ldr	r3, [pc, #80]	; (8017b28 <shci_user_evt_proc+0x94>)
 8017ad8:	701a      	strb	r2, [r3, #0]
 8017ada:	e002      	b.n	8017ae2 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8017adc:	4b12      	ldr	r3, [pc, #72]	; (8017b28 <shci_user_evt_proc+0x94>)
 8017ade:	2201      	movs	r2, #1
 8017ae0:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8017ae2:	4b11      	ldr	r3, [pc, #68]	; (8017b28 <shci_user_evt_proc+0x94>)
 8017ae4:	781b      	ldrb	r3, [r3, #0]
 8017ae6:	2b00      	cmp	r3, #0
 8017ae8:	d004      	beq.n	8017af4 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8017aea:	68fb      	ldr	r3, [r7, #12]
 8017aec:	4618      	mov	r0, r3
 8017aee:	f000 fc4d 	bl	801838c <TL_MM_EvtDone>
 8017af2:	e004      	b.n	8017afe <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8017af4:	68fb      	ldr	r3, [r7, #12]
 8017af6:	4619      	mov	r1, r3
 8017af8:	480a      	ldr	r0, [pc, #40]	; (8017b24 <shci_user_evt_proc+0x90>)
 8017afa:	f000 f919 	bl	8017d30 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8017afe:	4809      	ldr	r0, [pc, #36]	; (8017b24 <shci_user_evt_proc+0x90>)
 8017b00:	f000 f8f4 	bl	8017cec <LST_is_empty>
 8017b04:	4603      	mov	r3, r0
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	d107      	bne.n	8017b1a <shci_user_evt_proc+0x86>
 8017b0a:	4b07      	ldr	r3, [pc, #28]	; (8017b28 <shci_user_evt_proc+0x94>)
 8017b0c:	781b      	ldrb	r3, [r3, #0]
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	d003      	beq.n	8017b1a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8017b12:	4804      	ldr	r0, [pc, #16]	; (8017b24 <shci_user_evt_proc+0x90>)
 8017b14:	f7f0 ffe0 	bl	8008ad8 <shci_notify_asynch_evt>
  }


  return;
 8017b18:	bf00      	nop
 8017b1a:	bf00      	nop
}
 8017b1c:	3710      	adds	r7, #16
 8017b1e:	46bd      	mov	sp, r7
 8017b20:	bd80      	pop	{r7, pc}
 8017b22:	bf00      	nop
 8017b24:	2000029c 	.word	0x2000029c
 8017b28:	200002ac 	.word	0x200002ac
 8017b2c:	2000094c 	.word	0x2000094c

08017b30 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8017b30:	b580      	push	{r7, lr}
 8017b32:	b084      	sub	sp, #16
 8017b34:	af00      	add	r7, sp, #0
 8017b36:	60ba      	str	r2, [r7, #8]
 8017b38:	607b      	str	r3, [r7, #4]
 8017b3a:	4603      	mov	r3, r0
 8017b3c:	81fb      	strh	r3, [r7, #14]
 8017b3e:	460b      	mov	r3, r1
 8017b40:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8017b42:	2000      	movs	r0, #0
 8017b44:	f000 f868 	bl	8017c18 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8017b48:	4b17      	ldr	r3, [pc, #92]	; (8017ba8 <shci_send+0x78>)
 8017b4a:	681b      	ldr	r3, [r3, #0]
 8017b4c:	89fa      	ldrh	r2, [r7, #14]
 8017b4e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8017b52:	4b15      	ldr	r3, [pc, #84]	; (8017ba8 <shci_send+0x78>)
 8017b54:	681b      	ldr	r3, [r3, #0]
 8017b56:	7b7a      	ldrb	r2, [r7, #13]
 8017b58:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8017b5a:	4b13      	ldr	r3, [pc, #76]	; (8017ba8 <shci_send+0x78>)
 8017b5c:	681b      	ldr	r3, [r3, #0]
 8017b5e:	330c      	adds	r3, #12
 8017b60:	7b7a      	ldrb	r2, [r7, #13]
 8017b62:	68b9      	ldr	r1, [r7, #8]
 8017b64:	4618      	mov	r0, r3
 8017b66:	f000 ffa5 	bl	8018ab4 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8017b6a:	4b10      	ldr	r3, [pc, #64]	; (8017bac <shci_send+0x7c>)
 8017b6c:	2201      	movs	r2, #1
 8017b6e:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8017b70:	4b0f      	ldr	r3, [pc, #60]	; (8017bb0 <shci_send+0x80>)
 8017b72:	691b      	ldr	r3, [r3, #16]
 8017b74:	2100      	movs	r1, #0
 8017b76:	2000      	movs	r0, #0
 8017b78:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8017b7a:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8017b7e:	f7f0 ffc2 	bl	8008b06 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	f103 0008 	add.w	r0, r3, #8
 8017b88:	4b07      	ldr	r3, [pc, #28]	; (8017ba8 <shci_send+0x78>)
 8017b8a:	6819      	ldr	r1, [r3, #0]
 8017b8c:	4b06      	ldr	r3, [pc, #24]	; (8017ba8 <shci_send+0x78>)
 8017b8e:	681b      	ldr	r3, [r3, #0]
 8017b90:	789b      	ldrb	r3, [r3, #2]
 8017b92:	3303      	adds	r3, #3
 8017b94:	461a      	mov	r2, r3
 8017b96:	f000 ff8d 	bl	8018ab4 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8017b9a:	2001      	movs	r0, #1
 8017b9c:	f000 f83c 	bl	8017c18 <Cmd_SetStatus>

  return;
 8017ba0:	bf00      	nop
}
 8017ba2:	3710      	adds	r7, #16
 8017ba4:	46bd      	mov	sp, r7
 8017ba6:	bd80      	pop	{r7, pc}
 8017ba8:	200002a8 	.word	0x200002a8
 8017bac:	20000970 	.word	0x20000970
 8017bb0:	2000094c 	.word	0x2000094c

08017bb4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8017bb4:	b580      	push	{r7, lr}
 8017bb6:	b086      	sub	sp, #24
 8017bb8:	af00      	add	r7, sp, #0
 8017bba:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8017bbc:	4a10      	ldr	r2, [pc, #64]	; (8017c00 <TlInit+0x4c>)
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8017bc2:	4810      	ldr	r0, [pc, #64]	; (8017c04 <TlInit+0x50>)
 8017bc4:	f000 f882 	bl	8017ccc <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8017bc8:	2001      	movs	r0, #1
 8017bca:	f000 f825 	bl	8017c18 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8017bce:	4b0e      	ldr	r3, [pc, #56]	; (8017c08 <TlInit+0x54>)
 8017bd0:	2201      	movs	r2, #1
 8017bd2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8017bd4:	4b0d      	ldr	r3, [pc, #52]	; (8017c0c <TlInit+0x58>)
 8017bd6:	681b      	ldr	r3, [r3, #0]
 8017bd8:	2b00      	cmp	r3, #0
 8017bda:	d00c      	beq.n	8017bf6 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8017be0:	4b0b      	ldr	r3, [pc, #44]	; (8017c10 <TlInit+0x5c>)
 8017be2:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8017be4:	4b0b      	ldr	r3, [pc, #44]	; (8017c14 <TlInit+0x60>)
 8017be6:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8017be8:	4b08      	ldr	r3, [pc, #32]	; (8017c0c <TlInit+0x58>)
 8017bea:	681b      	ldr	r3, [r3, #0]
 8017bec:	f107 020c 	add.w	r2, r7, #12
 8017bf0:	4610      	mov	r0, r2
 8017bf2:	4798      	blx	r3
  }

  return;
 8017bf4:	bf00      	nop
 8017bf6:	bf00      	nop
}
 8017bf8:	3718      	adds	r7, #24
 8017bfa:	46bd      	mov	sp, r7
 8017bfc:	bd80      	pop	{r7, pc}
 8017bfe:	bf00      	nop
 8017c00:	200002a8 	.word	0x200002a8
 8017c04:	2000029c 	.word	0x2000029c
 8017c08:	200002ac 	.word	0x200002ac
 8017c0c:	2000094c 	.word	0x2000094c
 8017c10:	08017c69 	.word	0x08017c69
 8017c14:	08017c81 	.word	0x08017c81

08017c18 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8017c18:	b580      	push	{r7, lr}
 8017c1a:	b082      	sub	sp, #8
 8017c1c:	af00      	add	r7, sp, #0
 8017c1e:	4603      	mov	r3, r0
 8017c20:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8017c22:	79fb      	ldrb	r3, [r7, #7]
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	d10b      	bne.n	8017c40 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8017c28:	4b0d      	ldr	r3, [pc, #52]	; (8017c60 <Cmd_SetStatus+0x48>)
 8017c2a:	681b      	ldr	r3, [r3, #0]
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d003      	beq.n	8017c38 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8017c30:	4b0b      	ldr	r3, [pc, #44]	; (8017c60 <Cmd_SetStatus+0x48>)
 8017c32:	681b      	ldr	r3, [r3, #0]
 8017c34:	2000      	movs	r0, #0
 8017c36:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8017c38:	4b0a      	ldr	r3, [pc, #40]	; (8017c64 <Cmd_SetStatus+0x4c>)
 8017c3a:	2200      	movs	r2, #0
 8017c3c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8017c3e:	e00b      	b.n	8017c58 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8017c40:	4b08      	ldr	r3, [pc, #32]	; (8017c64 <Cmd_SetStatus+0x4c>)
 8017c42:	2201      	movs	r2, #1
 8017c44:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8017c46:	4b06      	ldr	r3, [pc, #24]	; (8017c60 <Cmd_SetStatus+0x48>)
 8017c48:	681b      	ldr	r3, [r3, #0]
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	d004      	beq.n	8017c58 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8017c4e:	4b04      	ldr	r3, [pc, #16]	; (8017c60 <Cmd_SetStatus+0x48>)
 8017c50:	681b      	ldr	r3, [r3, #0]
 8017c52:	2001      	movs	r0, #1
 8017c54:	4798      	blx	r3
  return;
 8017c56:	bf00      	nop
 8017c58:	bf00      	nop
}
 8017c5a:	3708      	adds	r7, #8
 8017c5c:	46bd      	mov	sp, r7
 8017c5e:	bd80      	pop	{r7, pc}
 8017c60:	2000096c 	.word	0x2000096c
 8017c64:	200002a4 	.word	0x200002a4

08017c68 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8017c68:	b580      	push	{r7, lr}
 8017c6a:	b082      	sub	sp, #8
 8017c6c:	af00      	add	r7, sp, #0
 8017c6e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8017c70:	2000      	movs	r0, #0
 8017c72:	f7f0 ff3d 	bl	8008af0 <shci_cmd_resp_release>

  return;
 8017c76:	bf00      	nop
}
 8017c78:	3708      	adds	r7, #8
 8017c7a:	46bd      	mov	sp, r7
 8017c7c:	bd80      	pop	{r7, pc}
	...

08017c80 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8017c80:	b580      	push	{r7, lr}
 8017c82:	b082      	sub	sp, #8
 8017c84:	af00      	add	r7, sp, #0
 8017c86:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8017c88:	6879      	ldr	r1, [r7, #4]
 8017c8a:	4805      	ldr	r0, [pc, #20]	; (8017ca0 <TlUserEvtReceived+0x20>)
 8017c8c:	f000 f876 	bl	8017d7c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8017c90:	4803      	ldr	r0, [pc, #12]	; (8017ca0 <TlUserEvtReceived+0x20>)
 8017c92:	f7f0 ff21 	bl	8008ad8 <shci_notify_asynch_evt>

  return;
 8017c96:	bf00      	nop
}
 8017c98:	3708      	adds	r7, #8
 8017c9a:	46bd      	mov	sp, r7
 8017c9c:	bd80      	pop	{r7, pc}
 8017c9e:	bf00      	nop
 8017ca0:	2000029c 	.word	0x2000029c

08017ca4 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8017ca4:	b480      	push	{r7}
 8017ca6:	b083      	sub	sp, #12
 8017ca8:	af00      	add	r7, sp, #0
 8017caa:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	4a05      	ldr	r2, [pc, #20]	; (8017cc4 <shci_register_io_bus+0x20>)
 8017cb0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	4a04      	ldr	r2, [pc, #16]	; (8017cc8 <shci_register_io_bus+0x24>)
 8017cb6:	611a      	str	r2, [r3, #16]

  return;
 8017cb8:	bf00      	nop
}
 8017cba:	370c      	adds	r7, #12
 8017cbc:	46bd      	mov	sp, r7
 8017cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cc2:	4770      	bx	lr
 8017cc4:	08018219 	.word	0x08018219
 8017cc8:	0801826d 	.word	0x0801826d

08017ccc <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8017ccc:	b480      	push	{r7}
 8017cce:	b083      	sub	sp, #12
 8017cd0:	af00      	add	r7, sp, #0
 8017cd2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	687a      	ldr	r2, [r7, #4]
 8017cd8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8017cda:	687b      	ldr	r3, [r7, #4]
 8017cdc:	687a      	ldr	r2, [r7, #4]
 8017cde:	605a      	str	r2, [r3, #4]
}
 8017ce0:	bf00      	nop
 8017ce2:	370c      	adds	r7, #12
 8017ce4:	46bd      	mov	sp, r7
 8017ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cea:	4770      	bx	lr

08017cec <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8017cec:	b480      	push	{r7}
 8017cee:	b087      	sub	sp, #28
 8017cf0:	af00      	add	r7, sp, #0
 8017cf2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017cf4:	f3ef 8310 	mrs	r3, PRIMASK
 8017cf8:	60fb      	str	r3, [r7, #12]
  return(result);
 8017cfa:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8017cfc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8017cfe:	b672      	cpsid	i
}
 8017d00:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	681b      	ldr	r3, [r3, #0]
 8017d06:	687a      	ldr	r2, [r7, #4]
 8017d08:	429a      	cmp	r2, r3
 8017d0a:	d102      	bne.n	8017d12 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8017d0c:	2301      	movs	r3, #1
 8017d0e:	75fb      	strb	r3, [r7, #23]
 8017d10:	e001      	b.n	8017d16 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8017d12:	2300      	movs	r3, #0
 8017d14:	75fb      	strb	r3, [r7, #23]
 8017d16:	693b      	ldr	r3, [r7, #16]
 8017d18:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d1a:	68bb      	ldr	r3, [r7, #8]
 8017d1c:	f383 8810 	msr	PRIMASK, r3
}
 8017d20:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8017d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8017d24:	4618      	mov	r0, r3
 8017d26:	371c      	adds	r7, #28
 8017d28:	46bd      	mov	sp, r7
 8017d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d2e:	4770      	bx	lr

08017d30 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8017d30:	b480      	push	{r7}
 8017d32:	b087      	sub	sp, #28
 8017d34:	af00      	add	r7, sp, #0
 8017d36:	6078      	str	r0, [r7, #4]
 8017d38:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017d3a:	f3ef 8310 	mrs	r3, PRIMASK
 8017d3e:	60fb      	str	r3, [r7, #12]
  return(result);
 8017d40:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8017d42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8017d44:	b672      	cpsid	i
}
 8017d46:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	681a      	ldr	r2, [r3, #0]
 8017d4c:	683b      	ldr	r3, [r7, #0]
 8017d4e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8017d50:	683b      	ldr	r3, [r7, #0]
 8017d52:	687a      	ldr	r2, [r7, #4]
 8017d54:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	683a      	ldr	r2, [r7, #0]
 8017d5a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8017d5c:	683b      	ldr	r3, [r7, #0]
 8017d5e:	681b      	ldr	r3, [r3, #0]
 8017d60:	683a      	ldr	r2, [r7, #0]
 8017d62:	605a      	str	r2, [r3, #4]
 8017d64:	697b      	ldr	r3, [r7, #20]
 8017d66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d68:	693b      	ldr	r3, [r7, #16]
 8017d6a:	f383 8810 	msr	PRIMASK, r3
}
 8017d6e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8017d70:	bf00      	nop
 8017d72:	371c      	adds	r7, #28
 8017d74:	46bd      	mov	sp, r7
 8017d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d7a:	4770      	bx	lr

08017d7c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8017d7c:	b480      	push	{r7}
 8017d7e:	b087      	sub	sp, #28
 8017d80:	af00      	add	r7, sp, #0
 8017d82:	6078      	str	r0, [r7, #4]
 8017d84:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017d86:	f3ef 8310 	mrs	r3, PRIMASK
 8017d8a:	60fb      	str	r3, [r7, #12]
  return(result);
 8017d8c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8017d8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8017d90:	b672      	cpsid	i
}
 8017d92:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8017d94:	683b      	ldr	r3, [r7, #0]
 8017d96:	687a      	ldr	r2, [r7, #4]
 8017d98:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	685a      	ldr	r2, [r3, #4]
 8017d9e:	683b      	ldr	r3, [r7, #0]
 8017da0:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	683a      	ldr	r2, [r7, #0]
 8017da6:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8017da8:	683b      	ldr	r3, [r7, #0]
 8017daa:	685b      	ldr	r3, [r3, #4]
 8017dac:	683a      	ldr	r2, [r7, #0]
 8017dae:	601a      	str	r2, [r3, #0]
 8017db0:	697b      	ldr	r3, [r7, #20]
 8017db2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017db4:	693b      	ldr	r3, [r7, #16]
 8017db6:	f383 8810 	msr	PRIMASK, r3
}
 8017dba:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8017dbc:	bf00      	nop
 8017dbe:	371c      	adds	r7, #28
 8017dc0:	46bd      	mov	sp, r7
 8017dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dc6:	4770      	bx	lr

08017dc8 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8017dc8:	b480      	push	{r7}
 8017dca:	b087      	sub	sp, #28
 8017dcc:	af00      	add	r7, sp, #0
 8017dce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017dd0:	f3ef 8310 	mrs	r3, PRIMASK
 8017dd4:	60fb      	str	r3, [r7, #12]
  return(result);
 8017dd6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8017dd8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8017dda:	b672      	cpsid	i
}
 8017ddc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	685b      	ldr	r3, [r3, #4]
 8017de2:	687a      	ldr	r2, [r7, #4]
 8017de4:	6812      	ldr	r2, [r2, #0]
 8017de6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	681b      	ldr	r3, [r3, #0]
 8017dec:	687a      	ldr	r2, [r7, #4]
 8017dee:	6852      	ldr	r2, [r2, #4]
 8017df0:	605a      	str	r2, [r3, #4]
 8017df2:	697b      	ldr	r3, [r7, #20]
 8017df4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017df6:	693b      	ldr	r3, [r7, #16]
 8017df8:	f383 8810 	msr	PRIMASK, r3
}
 8017dfc:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8017dfe:	bf00      	nop
 8017e00:	371c      	adds	r7, #28
 8017e02:	46bd      	mov	sp, r7
 8017e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e08:	4770      	bx	lr

08017e0a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8017e0a:	b580      	push	{r7, lr}
 8017e0c:	b086      	sub	sp, #24
 8017e0e:	af00      	add	r7, sp, #0
 8017e10:	6078      	str	r0, [r7, #4]
 8017e12:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017e14:	f3ef 8310 	mrs	r3, PRIMASK
 8017e18:	60fb      	str	r3, [r7, #12]
  return(result);
 8017e1a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8017e1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8017e1e:	b672      	cpsid	i
}
 8017e20:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	681a      	ldr	r2, [r3, #0]
 8017e26:	683b      	ldr	r3, [r7, #0]
 8017e28:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8017e2a:	687b      	ldr	r3, [r7, #4]
 8017e2c:	681b      	ldr	r3, [r3, #0]
 8017e2e:	4618      	mov	r0, r3
 8017e30:	f7ff ffca 	bl	8017dc8 <LST_remove_node>
 8017e34:	697b      	ldr	r3, [r7, #20]
 8017e36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e38:	693b      	ldr	r3, [r7, #16]
 8017e3a:	f383 8810 	msr	PRIMASK, r3
}
 8017e3e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8017e40:	bf00      	nop
 8017e42:	3718      	adds	r7, #24
 8017e44:	46bd      	mov	sp, r7
 8017e46:	bd80      	pop	{r7, pc}

08017e48 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8017e48:	b480      	push	{r7}
 8017e4a:	af00      	add	r7, sp, #0
  return;
 8017e4c:	bf00      	nop
}
 8017e4e:	46bd      	mov	sp, r7
 8017e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e54:	4770      	bx	lr

08017e56 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8017e56:	b480      	push	{r7}
 8017e58:	af00      	add	r7, sp, #0
  return;
 8017e5a:	bf00      	nop
}
 8017e5c:	46bd      	mov	sp, r7
 8017e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e62:	4770      	bx	lr

08017e64 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8017e64:	b480      	push	{r7}
 8017e66:	af00      	add	r7, sp, #0
  return;
 8017e68:	bf00      	nop
}
 8017e6a:	46bd      	mov	sp, r7
 8017e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e70:	4770      	bx	lr

08017e72 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8017e72:	b480      	push	{r7}
 8017e74:	af00      	add	r7, sp, #0
  return;
 8017e76:	bf00      	nop
}
 8017e78:	46bd      	mov	sp, r7
 8017e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e7e:	4770      	bx	lr

08017e80 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8017e80:	b480      	push	{r7}
 8017e82:	af00      	add	r7, sp, #0
  return;
 8017e84:	bf00      	nop
}
 8017e86:	46bd      	mov	sp, r7
 8017e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e8c:	4770      	bx	lr

08017e8e <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8017e8e:	b480      	push	{r7}
 8017e90:	af00      	add	r7, sp, #0
  return;
 8017e92:	bf00      	nop
}
 8017e94:	46bd      	mov	sp, r7
 8017e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e9a:	4770      	bx	lr

08017e9c <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8017e9c:	b480      	push	{r7}
 8017e9e:	af00      	add	r7, sp, #0
  return;
 8017ea0:	bf00      	nop
}
 8017ea2:	46bd      	mov	sp, r7
 8017ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ea8:	4770      	bx	lr

08017eaa <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8017eaa:	b480      	push	{r7}
 8017eac:	af00      	add	r7, sp, #0
  return;
 8017eae:	bf00      	nop
}
 8017eb0:	46bd      	mov	sp, r7
 8017eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eb6:	4770      	bx	lr

08017eb8 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8017eb8:	b480      	push	{r7}
 8017eba:	af00      	add	r7, sp, #0
  return;
 8017ebc:	bf00      	nop
}
 8017ebe:	46bd      	mov	sp, r7
 8017ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ec4:	4770      	bx	lr

08017ec6 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8017ec6:	b480      	push	{r7}
 8017ec8:	af00      	add	r7, sp, #0
  return;
 8017eca:	bf00      	nop
}
 8017ecc:	46bd      	mov	sp, r7
 8017ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ed2:	4770      	bx	lr

08017ed4 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8017ed4:	b480      	push	{r7}
 8017ed6:	af00      	add	r7, sp, #0
  return;
 8017ed8:	bf00      	nop
}
 8017eda:	46bd      	mov	sp, r7
 8017edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ee0:	4770      	bx	lr

08017ee2 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8017ee2:	b480      	push	{r7}
 8017ee4:	af00      	add	r7, sp, #0
  return;
 8017ee6:	bf00      	nop
}
 8017ee8:	46bd      	mov	sp, r7
 8017eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eee:	4770      	bx	lr

08017ef0 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8017ef0:	b480      	push	{r7}
 8017ef2:	af00      	add	r7, sp, #0
  return;
 8017ef4:	bf00      	nop
}
 8017ef6:	46bd      	mov	sp, r7
 8017ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017efc:	4770      	bx	lr

08017efe <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8017efe:	b480      	push	{r7}
 8017f00:	af00      	add	r7, sp, #0
  return;
 8017f02:	bf00      	nop
}
 8017f04:	46bd      	mov	sp, r7
 8017f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f0a:	4770      	bx	lr

08017f0c <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8017f0c:	b480      	push	{r7}
 8017f0e:	af00      	add	r7, sp, #0
  return;
 8017f10:	bf00      	nop
}
 8017f12:	46bd      	mov	sp, r7
 8017f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f18:	4770      	bx	lr

08017f1a <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8017f1a:	b480      	push	{r7}
 8017f1c:	af00      	add	r7, sp, #0
  return;
 8017f1e:	bf00      	nop
}
 8017f20:	46bd      	mov	sp, r7
 8017f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f26:	4770      	bx	lr

08017f28 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8017f28:	b480      	push	{r7}
 8017f2a:	af00      	add	r7, sp, #0
  return;
 8017f2c:	bf00      	nop
}
 8017f2e:	46bd      	mov	sp, r7
 8017f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f34:	4770      	bx	lr
	...

08017f38 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8017f38:	b580      	push	{r7, lr}
 8017f3a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8017f3c:	4b04      	ldr	r3, [pc, #16]	; (8017f50 <SVCCTL_Init+0x18>)
 8017f3e:	2200      	movs	r2, #0
 8017f40:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8017f42:	4b04      	ldr	r3, [pc, #16]	; (8017f54 <SVCCTL_Init+0x1c>)
 8017f44:	2200      	movs	r2, #0
 8017f46:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8017f48:	f000 f806 	bl	8017f58 <SVCCTL_SvcInit>

  return;
 8017f4c:	bf00      	nop
}
 8017f4e:	bd80      	pop	{r7, pc}
 8017f50:	20000278 	.word	0x20000278
 8017f54:	20000298 	.word	0x20000298

08017f58 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8017f58:	b580      	push	{r7, lr}
 8017f5a:	af00      	add	r7, sp, #0
  BAS_Init();
 8017f5c:	f7ff ff74 	bl	8017e48 <BAS_Init>

  BLS_Init();
 8017f60:	f7ff ff79 	bl	8017e56 <BLS_Init>

  CRS_STM_Init();
 8017f64:	f7ff ff7e 	bl	8017e64 <CRS_STM_Init>

  DIS_Init();
 8017f68:	f7ff ff83 	bl	8017e72 <DIS_Init>

  EDS_STM_Init();
 8017f6c:	f7ff ff88 	bl	8017e80 <EDS_STM_Init>

  HIDS_Init();
 8017f70:	f7ff ff8d 	bl	8017e8e <HIDS_Init>

  HRS_Init();
 8017f74:	f7ff ff92 	bl	8017e9c <HRS_Init>

  HTS_Init();
 8017f78:	f7ff ff97 	bl	8017eaa <HTS_Init>

  IAS_Init();
 8017f7c:	f7ff ff9c 	bl	8017eb8 <IAS_Init>

  LLS_Init();
 8017f80:	f7ff ffa1 	bl	8017ec6 <LLS_Init>

  TPS_Init();
 8017f84:	f7ff ffa6 	bl	8017ed4 <TPS_Init>

  MOTENV_STM_Init();
 8017f88:	f7ff ffab 	bl	8017ee2 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8017f8c:	f7ff ffb0 	bl	8017ef0 <P2PS_STM_Init>

  ZDD_STM_Init();
 8017f90:	f7ff ffb5 	bl	8017efe <ZDD_STM_Init>

  OTAS_STM_Init();
 8017f94:	f7ff ffba 	bl	8017f0c <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8017f98:	f7ff ffc6 	bl	8017f28 <BVOPUS_STM_Init>

  MESH_Init();
 8017f9c:	f7ff ffbd 	bl	8017f1a <MESH_Init>

  SVCCTL_InitCustomSvc();
 8017fa0:	f7f5 ff3a 	bl	800de18 <SVCCTL_InitCustomSvc>
  
  return;
 8017fa4:	bf00      	nop
}
 8017fa6:	bd80      	pop	{r7, pc}

08017fa8 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8017fa8:	b480      	push	{r7}
 8017faa:	b083      	sub	sp, #12
 8017fac:	af00      	add	r7, sp, #0
 8017fae:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8017fb0:	4b09      	ldr	r3, [pc, #36]	; (8017fd8 <SVCCTL_RegisterSvcHandler+0x30>)
 8017fb2:	7f1b      	ldrb	r3, [r3, #28]
 8017fb4:	4619      	mov	r1, r3
 8017fb6:	4a08      	ldr	r2, [pc, #32]	; (8017fd8 <SVCCTL_RegisterSvcHandler+0x30>)
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8017fbe:	4b06      	ldr	r3, [pc, #24]	; (8017fd8 <SVCCTL_RegisterSvcHandler+0x30>)
 8017fc0:	7f1b      	ldrb	r3, [r3, #28]
 8017fc2:	3301      	adds	r3, #1
 8017fc4:	b2da      	uxtb	r2, r3
 8017fc6:	4b04      	ldr	r3, [pc, #16]	; (8017fd8 <SVCCTL_RegisterSvcHandler+0x30>)
 8017fc8:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8017fca:	bf00      	nop
}
 8017fcc:	370c      	adds	r7, #12
 8017fce:	46bd      	mov	sp, r7
 8017fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fd4:	4770      	bx	lr
 8017fd6:	bf00      	nop
 8017fd8:	20000278 	.word	0x20000278

08017fdc <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8017fdc:	b580      	push	{r7, lr}
 8017fde:	b086      	sub	sp, #24
 8017fe0:	af00      	add	r7, sp, #0
 8017fe2:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	3301      	adds	r3, #1
 8017fe8:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8017fea:	2300      	movs	r3, #0
 8017fec:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8017fee:	693b      	ldr	r3, [r7, #16]
 8017ff0:	781b      	ldrb	r3, [r3, #0]
 8017ff2:	2bff      	cmp	r3, #255	; 0xff
 8017ff4:	d125      	bne.n	8018042 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8017ff6:	693b      	ldr	r3, [r7, #16]
 8017ff8:	3302      	adds	r3, #2
 8017ffa:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8017ffc:	68fb      	ldr	r3, [r7, #12]
 8017ffe:	881b      	ldrh	r3, [r3, #0]
 8018000:	b29b      	uxth	r3, r3
 8018002:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018006:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801800a:	d118      	bne.n	801803e <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 801800c:	2300      	movs	r3, #0
 801800e:	757b      	strb	r3, [r7, #21]
 8018010:	e00d      	b.n	801802e <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8018012:	7d7b      	ldrb	r3, [r7, #21]
 8018014:	4a1a      	ldr	r2, [pc, #104]	; (8018080 <SVCCTL_UserEvtRx+0xa4>)
 8018016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801801a:	6878      	ldr	r0, [r7, #4]
 801801c:	4798      	blx	r3
 801801e:	4603      	mov	r3, r0
 8018020:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8018022:	7dfb      	ldrb	r3, [r7, #23]
 8018024:	2b00      	cmp	r3, #0
 8018026:	d108      	bne.n	801803a <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8018028:	7d7b      	ldrb	r3, [r7, #21]
 801802a:	3301      	adds	r3, #1
 801802c:	757b      	strb	r3, [r7, #21]
 801802e:	4b14      	ldr	r3, [pc, #80]	; (8018080 <SVCCTL_UserEvtRx+0xa4>)
 8018030:	7f1b      	ldrb	r3, [r3, #28]
 8018032:	7d7a      	ldrb	r2, [r7, #21]
 8018034:	429a      	cmp	r2, r3
 8018036:	d3ec      	bcc.n	8018012 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8018038:	e002      	b.n	8018040 <SVCCTL_UserEvtRx+0x64>
              break;
 801803a:	bf00      	nop
          break;
 801803c:	e000      	b.n	8018040 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 801803e:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8018040:	e000      	b.n	8018044 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8018042:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8018044:	7dfb      	ldrb	r3, [r7, #23]
 8018046:	2b02      	cmp	r3, #2
 8018048:	d00f      	beq.n	801806a <SVCCTL_UserEvtRx+0x8e>
 801804a:	2b02      	cmp	r3, #2
 801804c:	dc10      	bgt.n	8018070 <SVCCTL_UserEvtRx+0x94>
 801804e:	2b00      	cmp	r3, #0
 8018050:	d002      	beq.n	8018058 <SVCCTL_UserEvtRx+0x7c>
 8018052:	2b01      	cmp	r3, #1
 8018054:	d006      	beq.n	8018064 <SVCCTL_UserEvtRx+0x88>
 8018056:	e00b      	b.n	8018070 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8018058:	6878      	ldr	r0, [r7, #4]
 801805a:	f7f4 f883 	bl	800c164 <SVCCTL_App_Notification>
 801805e:	4603      	mov	r3, r0
 8018060:	75bb      	strb	r3, [r7, #22]
      break;
 8018062:	e008      	b.n	8018076 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8018064:	2301      	movs	r3, #1
 8018066:	75bb      	strb	r3, [r7, #22]
      break;
 8018068:	e005      	b.n	8018076 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 801806a:	2300      	movs	r3, #0
 801806c:	75bb      	strb	r3, [r7, #22]
      break;
 801806e:	e002      	b.n	8018076 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8018070:	2301      	movs	r3, #1
 8018072:	75bb      	strb	r3, [r7, #22]
      break;
 8018074:	bf00      	nop
  }

  return (return_status);
 8018076:	7dbb      	ldrb	r3, [r7, #22]
}
 8018078:	4618      	mov	r0, r3
 801807a:	3718      	adds	r7, #24
 801807c:	46bd      	mov	sp, r7
 801807e:	bd80      	pop	{r7, pc}
 8018080:	20000278 	.word	0x20000278

08018084 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8018084:	b580      	push	{r7, lr}
 8018086:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8018088:	f7f6 fe68 	bl	800ed5c <HW_IPCC_Enable>

  return;
 801808c:	bf00      	nop
}
 801808e:	bd80      	pop	{r7, pc}

08018090 <TL_Init>:


void TL_Init( void )
{
 8018090:	b580      	push	{r7, lr}
 8018092:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8018094:	4b10      	ldr	r3, [pc, #64]	; (80180d8 <TL_Init+0x48>)
 8018096:	4a11      	ldr	r2, [pc, #68]	; (80180dc <TL_Init+0x4c>)
 8018098:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 801809a:	4b0f      	ldr	r3, [pc, #60]	; (80180d8 <TL_Init+0x48>)
 801809c:	4a10      	ldr	r2, [pc, #64]	; (80180e0 <TL_Init+0x50>)
 801809e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80180a0:	4b0d      	ldr	r3, [pc, #52]	; (80180d8 <TL_Init+0x48>)
 80180a2:	4a10      	ldr	r2, [pc, #64]	; (80180e4 <TL_Init+0x54>)
 80180a4:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80180a6:	4b0c      	ldr	r3, [pc, #48]	; (80180d8 <TL_Init+0x48>)
 80180a8:	4a0f      	ldr	r2, [pc, #60]	; (80180e8 <TL_Init+0x58>)
 80180aa:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80180ac:	4b0a      	ldr	r3, [pc, #40]	; (80180d8 <TL_Init+0x48>)
 80180ae:	4a0f      	ldr	r2, [pc, #60]	; (80180ec <TL_Init+0x5c>)
 80180b0:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80180b2:	4b09      	ldr	r3, [pc, #36]	; (80180d8 <TL_Init+0x48>)
 80180b4:	4a0e      	ldr	r2, [pc, #56]	; (80180f0 <TL_Init+0x60>)
 80180b6:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80180b8:	4b07      	ldr	r3, [pc, #28]	; (80180d8 <TL_Init+0x48>)
 80180ba:	4a0e      	ldr	r2, [pc, #56]	; (80180f4 <TL_Init+0x64>)
 80180bc:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80180be:	4b06      	ldr	r3, [pc, #24]	; (80180d8 <TL_Init+0x48>)
 80180c0:	4a0d      	ldr	r2, [pc, #52]	; (80180f8 <TL_Init+0x68>)
 80180c2:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80180c4:	4b04      	ldr	r3, [pc, #16]	; (80180d8 <TL_Init+0x48>)
 80180c6:	4a0d      	ldr	r2, [pc, #52]	; (80180fc <TL_Init+0x6c>)
 80180c8:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80180ca:	4b03      	ldr	r3, [pc, #12]	; (80180d8 <TL_Init+0x48>)
 80180cc:	4a0c      	ldr	r2, [pc, #48]	; (8018100 <TL_Init+0x70>)
 80180ce:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80180d0:	f7f6 fe58 	bl	800ed84 <HW_IPCC_Init>

  return;
 80180d4:	bf00      	nop
}
 80180d6:	bd80      	pop	{r7, pc}
 80180d8:	20030000 	.word	0x20030000
 80180dc:	20030134 	.word	0x20030134
 80180e0:	20030154 	.word	0x20030154
 80180e4:	20030164 	.word	0x20030164
 80180e8:	20030174 	.word	0x20030174
 80180ec:	2003017c 	.word	0x2003017c
 80180f0:	20030184 	.word	0x20030184
 80180f4:	2003018c 	.word	0x2003018c
 80180f8:	200301a8 	.word	0x200301a8
 80180fc:	200301ac 	.word	0x200301ac
 8018100:	200301b8 	.word	0x200301b8

08018104 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8018104:	b580      	push	{r7, lr}
 8018106:	b084      	sub	sp, #16
 8018108:	af00      	add	r7, sp, #0
 801810a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8018110:	4811      	ldr	r0, [pc, #68]	; (8018158 <TL_BLE_Init+0x54>)
 8018112:	f7ff fddb 	bl	8017ccc <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8018116:	4b11      	ldr	r3, [pc, #68]	; (801815c <TL_BLE_Init+0x58>)
 8018118:	685b      	ldr	r3, [r3, #4]
 801811a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 801811c:	68fb      	ldr	r3, [r7, #12]
 801811e:	689a      	ldr	r2, [r3, #8]
 8018120:	68bb      	ldr	r3, [r7, #8]
 8018122:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8018124:	68fb      	ldr	r3, [r7, #12]
 8018126:	68da      	ldr	r2, [r3, #12]
 8018128:	68bb      	ldr	r3, [r7, #8]
 801812a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 801812c:	68bb      	ldr	r3, [r7, #8]
 801812e:	4a0c      	ldr	r2, [pc, #48]	; (8018160 <TL_BLE_Init+0x5c>)
 8018130:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8018132:	68bb      	ldr	r3, [r7, #8]
 8018134:	4a08      	ldr	r2, [pc, #32]	; (8018158 <TL_BLE_Init+0x54>)
 8018136:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8018138:	f7f6 fe3a 	bl	800edb0 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 801813c:	68fb      	ldr	r3, [r7, #12]
 801813e:	681b      	ldr	r3, [r3, #0]
 8018140:	4a08      	ldr	r2, [pc, #32]	; (8018164 <TL_BLE_Init+0x60>)
 8018142:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8018144:	68fb      	ldr	r3, [r7, #12]
 8018146:	685b      	ldr	r3, [r3, #4]
 8018148:	4a07      	ldr	r2, [pc, #28]	; (8018168 <TL_BLE_Init+0x64>)
 801814a:	6013      	str	r3, [r2, #0]

  return 0;
 801814c:	2300      	movs	r3, #0
}
 801814e:	4618      	mov	r0, r3
 8018150:	3710      	adds	r7, #16
 8018152:	46bd      	mov	sp, r7
 8018154:	bd80      	pop	{r7, pc}
 8018156:	bf00      	nop
 8018158:	200301d4 	.word	0x200301d4
 801815c:	20030000 	.word	0x20030000
 8018160:	20030a58 	.word	0x20030a58
 8018164:	2000097c 	.word	0x2000097c
 8018168:	20000980 	.word	0x20000980

0801816c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 801816c:	b580      	push	{r7, lr}
 801816e:	b082      	sub	sp, #8
 8018170:	af00      	add	r7, sp, #0
 8018172:	6078      	str	r0, [r7, #4]
 8018174:	460b      	mov	r3, r1
 8018176:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8018178:	4b09      	ldr	r3, [pc, #36]	; (80181a0 <TL_BLE_SendCmd+0x34>)
 801817a:	685b      	ldr	r3, [r3, #4]
 801817c:	681b      	ldr	r3, [r3, #0]
 801817e:	2201      	movs	r2, #1
 8018180:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8018182:	4b07      	ldr	r3, [pc, #28]	; (80181a0 <TL_BLE_SendCmd+0x34>)
 8018184:	685b      	ldr	r3, [r3, #4]
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	4619      	mov	r1, r3
 801818a:	2001      	movs	r0, #1
 801818c:	f000 f96c 	bl	8018468 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8018190:	f7f6 fe18 	bl	800edc4 <HW_IPCC_BLE_SendCmd>

  return 0;
 8018194:	2300      	movs	r3, #0
}
 8018196:	4618      	mov	r0, r3
 8018198:	3708      	adds	r7, #8
 801819a:	46bd      	mov	sp, r7
 801819c:	bd80      	pop	{r7, pc}
 801819e:	bf00      	nop
 80181a0:	20030000 	.word	0x20030000

080181a4 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80181a4:	b580      	push	{r7, lr}
 80181a6:	b082      	sub	sp, #8
 80181a8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80181aa:	e01c      	b.n	80181e6 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80181ac:	1d3b      	adds	r3, r7, #4
 80181ae:	4619      	mov	r1, r3
 80181b0:	4812      	ldr	r0, [pc, #72]	; (80181fc <HW_IPCC_BLE_RxEvtNot+0x58>)
 80181b2:	f7ff fe2a 	bl	8017e0a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	7a5b      	ldrb	r3, [r3, #9]
 80181ba:	2b0f      	cmp	r3, #15
 80181bc:	d003      	beq.n	80181c6 <HW_IPCC_BLE_RxEvtNot+0x22>
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	7a5b      	ldrb	r3, [r3, #9]
 80181c2:	2b0e      	cmp	r3, #14
 80181c4:	d105      	bne.n	80181d2 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	4619      	mov	r1, r3
 80181ca:	2002      	movs	r0, #2
 80181cc:	f000 f94c 	bl	8018468 <OutputDbgTrace>
 80181d0:	e004      	b.n	80181dc <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 80181d2:	687b      	ldr	r3, [r7, #4]
 80181d4:	4619      	mov	r1, r3
 80181d6:	2003      	movs	r0, #3
 80181d8:	f000 f946 	bl	8018468 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80181dc:	4b08      	ldr	r3, [pc, #32]	; (8018200 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80181de:	681b      	ldr	r3, [r3, #0]
 80181e0:	687a      	ldr	r2, [r7, #4]
 80181e2:	4610      	mov	r0, r2
 80181e4:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80181e6:	4805      	ldr	r0, [pc, #20]	; (80181fc <HW_IPCC_BLE_RxEvtNot+0x58>)
 80181e8:	f7ff fd80 	bl	8017cec <LST_is_empty>
 80181ec:	4603      	mov	r3, r0
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	d0dc      	beq.n	80181ac <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80181f2:	bf00      	nop
}
 80181f4:	3708      	adds	r7, #8
 80181f6:	46bd      	mov	sp, r7
 80181f8:	bd80      	pop	{r7, pc}
 80181fa:	bf00      	nop
 80181fc:	200301d4 	.word	0x200301d4
 8018200:	2000097c 	.word	0x2000097c

08018204 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8018204:	b580      	push	{r7, lr}
 8018206:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8018208:	4b02      	ldr	r3, [pc, #8]	; (8018214 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 801820a:	681b      	ldr	r3, [r3, #0]
 801820c:	4798      	blx	r3

  return;
 801820e:	bf00      	nop
}
 8018210:	bd80      	pop	{r7, pc}
 8018212:	bf00      	nop
 8018214:	20000980 	.word	0x20000980

08018218 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8018218:	b580      	push	{r7, lr}
 801821a:	b084      	sub	sp, #16
 801821c:	af00      	add	r7, sp, #0
 801821e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8018224:	480d      	ldr	r0, [pc, #52]	; (801825c <TL_SYS_Init+0x44>)
 8018226:	f7ff fd51 	bl	8017ccc <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 801822a:	4b0d      	ldr	r3, [pc, #52]	; (8018260 <TL_SYS_Init+0x48>)
 801822c:	68db      	ldr	r3, [r3, #12]
 801822e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8018230:	68fb      	ldr	r3, [r7, #12]
 8018232:	689a      	ldr	r2, [r3, #8]
 8018234:	68bb      	ldr	r3, [r7, #8]
 8018236:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8018238:	68bb      	ldr	r3, [r7, #8]
 801823a:	4a08      	ldr	r2, [pc, #32]	; (801825c <TL_SYS_Init+0x44>)
 801823c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 801823e:	f7f6 fde3 	bl	800ee08 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8018242:	68fb      	ldr	r3, [r7, #12]
 8018244:	681b      	ldr	r3, [r3, #0]
 8018246:	4a07      	ldr	r2, [pc, #28]	; (8018264 <TL_SYS_Init+0x4c>)
 8018248:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 801824a:	68fb      	ldr	r3, [r7, #12]
 801824c:	685b      	ldr	r3, [r3, #4]
 801824e:	4a06      	ldr	r2, [pc, #24]	; (8018268 <TL_SYS_Init+0x50>)
 8018250:	6013      	str	r3, [r2, #0]

  return 0;
 8018252:	2300      	movs	r3, #0
}
 8018254:	4618      	mov	r0, r3
 8018256:	3710      	adds	r7, #16
 8018258:	46bd      	mov	sp, r7
 801825a:	bd80      	pop	{r7, pc}
 801825c:	200301dc 	.word	0x200301dc
 8018260:	20030000 	.word	0x20030000
 8018264:	20000984 	.word	0x20000984
 8018268:	20000988 	.word	0x20000988

0801826c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 801826c:	b580      	push	{r7, lr}
 801826e:	b082      	sub	sp, #8
 8018270:	af00      	add	r7, sp, #0
 8018272:	6078      	str	r0, [r7, #4]
 8018274:	460b      	mov	r3, r1
 8018276:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8018278:	4b09      	ldr	r3, [pc, #36]	; (80182a0 <TL_SYS_SendCmd+0x34>)
 801827a:	68db      	ldr	r3, [r3, #12]
 801827c:	681b      	ldr	r3, [r3, #0]
 801827e:	2210      	movs	r2, #16
 8018280:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8018282:	4b07      	ldr	r3, [pc, #28]	; (80182a0 <TL_SYS_SendCmd+0x34>)
 8018284:	68db      	ldr	r3, [r3, #12]
 8018286:	681b      	ldr	r3, [r3, #0]
 8018288:	4619      	mov	r1, r3
 801828a:	2004      	movs	r0, #4
 801828c:	f000 f8ec 	bl	8018468 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8018290:	f7f6 fdc4 	bl	800ee1c <HW_IPCC_SYS_SendCmd>

  return 0;
 8018294:	2300      	movs	r3, #0
}
 8018296:	4618      	mov	r0, r3
 8018298:	3708      	adds	r7, #8
 801829a:	46bd      	mov	sp, r7
 801829c:	bd80      	pop	{r7, pc}
 801829e:	bf00      	nop
 80182a0:	20030000 	.word	0x20030000

080182a4 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80182a4:	b580      	push	{r7, lr}
 80182a6:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80182a8:	4b07      	ldr	r3, [pc, #28]	; (80182c8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80182aa:	68db      	ldr	r3, [r3, #12]
 80182ac:	681b      	ldr	r3, [r3, #0]
 80182ae:	4619      	mov	r1, r3
 80182b0:	2005      	movs	r0, #5
 80182b2:	f000 f8d9 	bl	8018468 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80182b6:	4b05      	ldr	r3, [pc, #20]	; (80182cc <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80182b8:	681b      	ldr	r3, [r3, #0]
 80182ba:	4a03      	ldr	r2, [pc, #12]	; (80182c8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80182bc:	68d2      	ldr	r2, [r2, #12]
 80182be:	6812      	ldr	r2, [r2, #0]
 80182c0:	4610      	mov	r0, r2
 80182c2:	4798      	blx	r3

  return;
 80182c4:	bf00      	nop
}
 80182c6:	bd80      	pop	{r7, pc}
 80182c8:	20030000 	.word	0x20030000
 80182cc:	20000984 	.word	0x20000984

080182d0 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 80182d0:	b580      	push	{r7, lr}
 80182d2:	b082      	sub	sp, #8
 80182d4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80182d6:	e00e      	b.n	80182f6 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80182d8:	1d3b      	adds	r3, r7, #4
 80182da:	4619      	mov	r1, r3
 80182dc:	480b      	ldr	r0, [pc, #44]	; (801830c <HW_IPCC_SYS_EvtNot+0x3c>)
 80182de:	f7ff fd94 	bl	8017e0a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 80182e2:	687b      	ldr	r3, [r7, #4]
 80182e4:	4619      	mov	r1, r3
 80182e6:	2006      	movs	r0, #6
 80182e8:	f000 f8be 	bl	8018468 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 80182ec:	4b08      	ldr	r3, [pc, #32]	; (8018310 <HW_IPCC_SYS_EvtNot+0x40>)
 80182ee:	681b      	ldr	r3, [r3, #0]
 80182f0:	687a      	ldr	r2, [r7, #4]
 80182f2:	4610      	mov	r0, r2
 80182f4:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80182f6:	4805      	ldr	r0, [pc, #20]	; (801830c <HW_IPCC_SYS_EvtNot+0x3c>)
 80182f8:	f7ff fcf8 	bl	8017cec <LST_is_empty>
 80182fc:	4603      	mov	r3, r0
 80182fe:	2b00      	cmp	r3, #0
 8018300:	d0ea      	beq.n	80182d8 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8018302:	bf00      	nop
}
 8018304:	3708      	adds	r7, #8
 8018306:	46bd      	mov	sp, r7
 8018308:	bd80      	pop	{r7, pc}
 801830a:	bf00      	nop
 801830c:	200301dc 	.word	0x200301dc
 8018310:	20000988 	.word	0x20000988

08018314 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8018314:	b580      	push	{r7, lr}
 8018316:	b082      	sub	sp, #8
 8018318:	af00      	add	r7, sp, #0
 801831a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 801831c:	4817      	ldr	r0, [pc, #92]	; (801837c <TL_MM_Init+0x68>)
 801831e:	f7ff fcd5 	bl	8017ccc <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8018322:	4817      	ldr	r0, [pc, #92]	; (8018380 <TL_MM_Init+0x6c>)
 8018324:	f7ff fcd2 	bl	8017ccc <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8018328:	4b16      	ldr	r3, [pc, #88]	; (8018384 <TL_MM_Init+0x70>)
 801832a:	691b      	ldr	r3, [r3, #16]
 801832c:	4a16      	ldr	r2, [pc, #88]	; (8018388 <TL_MM_Init+0x74>)
 801832e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8018330:	4b15      	ldr	r3, [pc, #84]	; (8018388 <TL_MM_Init+0x74>)
 8018332:	681b      	ldr	r3, [r3, #0]
 8018334:	687a      	ldr	r2, [r7, #4]
 8018336:	6892      	ldr	r2, [r2, #8]
 8018338:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 801833a:	4b13      	ldr	r3, [pc, #76]	; (8018388 <TL_MM_Init+0x74>)
 801833c:	681b      	ldr	r3, [r3, #0]
 801833e:	687a      	ldr	r2, [r7, #4]
 8018340:	68d2      	ldr	r2, [r2, #12]
 8018342:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8018344:	4b10      	ldr	r3, [pc, #64]	; (8018388 <TL_MM_Init+0x74>)
 8018346:	681b      	ldr	r3, [r3, #0]
 8018348:	4a0c      	ldr	r2, [pc, #48]	; (801837c <TL_MM_Init+0x68>)
 801834a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 801834c:	4b0e      	ldr	r3, [pc, #56]	; (8018388 <TL_MM_Init+0x74>)
 801834e:	681b      	ldr	r3, [r3, #0]
 8018350:	687a      	ldr	r2, [r7, #4]
 8018352:	6812      	ldr	r2, [r2, #0]
 8018354:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8018356:	4b0c      	ldr	r3, [pc, #48]	; (8018388 <TL_MM_Init+0x74>)
 8018358:	681b      	ldr	r3, [r3, #0]
 801835a:	687a      	ldr	r2, [r7, #4]
 801835c:	6852      	ldr	r2, [r2, #4]
 801835e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8018360:	4b09      	ldr	r3, [pc, #36]	; (8018388 <TL_MM_Init+0x74>)
 8018362:	681b      	ldr	r3, [r3, #0]
 8018364:	687a      	ldr	r2, [r7, #4]
 8018366:	6912      	ldr	r2, [r2, #16]
 8018368:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 801836a:	4b07      	ldr	r3, [pc, #28]	; (8018388 <TL_MM_Init+0x74>)
 801836c:	681b      	ldr	r3, [r3, #0]
 801836e:	687a      	ldr	r2, [r7, #4]
 8018370:	6952      	ldr	r2, [r2, #20]
 8018372:	619a      	str	r2, [r3, #24]

  return;
 8018374:	bf00      	nop
}
 8018376:	3708      	adds	r7, #8
 8018378:	46bd      	mov	sp, r7
 801837a:	bd80      	pop	{r7, pc}
 801837c:	200301c4 	.word	0x200301c4
 8018380:	20000974 	.word	0x20000974
 8018384:	20030000 	.word	0x20030000
 8018388:	2000098c 	.word	0x2000098c

0801838c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 801838c:	b580      	push	{r7, lr}
 801838e:	b082      	sub	sp, #8
 8018390:	af00      	add	r7, sp, #0
 8018392:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8018394:	6879      	ldr	r1, [r7, #4]
 8018396:	4807      	ldr	r0, [pc, #28]	; (80183b4 <TL_MM_EvtDone+0x28>)
 8018398:	f7ff fcf0 	bl	8017d7c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 801839c:	6879      	ldr	r1, [r7, #4]
 801839e:	2000      	movs	r0, #0
 80183a0:	f000 f862 	bl	8018468 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80183a4:	4804      	ldr	r0, [pc, #16]	; (80183b8 <TL_MM_EvtDone+0x2c>)
 80183a6:	f7f6 fd5f 	bl	800ee68 <HW_IPCC_MM_SendFreeBuf>

  return;
 80183aa:	bf00      	nop
}
 80183ac:	3708      	adds	r7, #8
 80183ae:	46bd      	mov	sp, r7
 80183b0:	bd80      	pop	{r7, pc}
 80183b2:	bf00      	nop
 80183b4:	20000974 	.word	0x20000974
 80183b8:	080183bd 	.word	0x080183bd

080183bc <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80183bc:	b580      	push	{r7, lr}
 80183be:	b082      	sub	sp, #8
 80183c0:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80183c2:	e00c      	b.n	80183de <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80183c4:	1d3b      	adds	r3, r7, #4
 80183c6:	4619      	mov	r1, r3
 80183c8:	480a      	ldr	r0, [pc, #40]	; (80183f4 <SendFreeBuf+0x38>)
 80183ca:	f7ff fd1e 	bl	8017e0a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80183ce:	4b0a      	ldr	r3, [pc, #40]	; (80183f8 <SendFreeBuf+0x3c>)
 80183d0:	691b      	ldr	r3, [r3, #16]
 80183d2:	691b      	ldr	r3, [r3, #16]
 80183d4:	687a      	ldr	r2, [r7, #4]
 80183d6:	4611      	mov	r1, r2
 80183d8:	4618      	mov	r0, r3
 80183da:	f7ff fccf 	bl	8017d7c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80183de:	4805      	ldr	r0, [pc, #20]	; (80183f4 <SendFreeBuf+0x38>)
 80183e0:	f7ff fc84 	bl	8017cec <LST_is_empty>
 80183e4:	4603      	mov	r3, r0
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d0ec      	beq.n	80183c4 <SendFreeBuf+0x8>
  }

  return;
 80183ea:	bf00      	nop
}
 80183ec:	3708      	adds	r7, #8
 80183ee:	46bd      	mov	sp, r7
 80183f0:	bd80      	pop	{r7, pc}
 80183f2:	bf00      	nop
 80183f4:	20000974 	.word	0x20000974
 80183f8:	20030000 	.word	0x20030000

080183fc <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80183fc:	b580      	push	{r7, lr}
 80183fe:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8018400:	4805      	ldr	r0, [pc, #20]	; (8018418 <TL_TRACES_Init+0x1c>)
 8018402:	f7ff fc63 	bl	8017ccc <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8018406:	4b05      	ldr	r3, [pc, #20]	; (801841c <TL_TRACES_Init+0x20>)
 8018408:	695b      	ldr	r3, [r3, #20]
 801840a:	4a03      	ldr	r2, [pc, #12]	; (8018418 <TL_TRACES_Init+0x1c>)
 801840c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 801840e:	f7f6 fd61 	bl	800eed4 <HW_IPCC_TRACES_Init>

  return;
 8018412:	bf00      	nop
}
 8018414:	bd80      	pop	{r7, pc}
 8018416:	bf00      	nop
 8018418:	200301cc 	.word	0x200301cc
 801841c:	20030000 	.word	0x20030000

08018420 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8018420:	b580      	push	{r7, lr}
 8018422:	b082      	sub	sp, #8
 8018424:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8018426:	e008      	b.n	801843a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8018428:	1d3b      	adds	r3, r7, #4
 801842a:	4619      	mov	r1, r3
 801842c:	4808      	ldr	r0, [pc, #32]	; (8018450 <HW_IPCC_TRACES_EvtNot+0x30>)
 801842e:	f7ff fcec 	bl	8017e0a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	4618      	mov	r0, r3
 8018436:	f000 f80d 	bl	8018454 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 801843a:	4805      	ldr	r0, [pc, #20]	; (8018450 <HW_IPCC_TRACES_EvtNot+0x30>)
 801843c:	f7ff fc56 	bl	8017cec <LST_is_empty>
 8018440:	4603      	mov	r3, r0
 8018442:	2b00      	cmp	r3, #0
 8018444:	d0f0      	beq.n	8018428 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8018446:	bf00      	nop
}
 8018448:	3708      	adds	r7, #8
 801844a:	46bd      	mov	sp, r7
 801844c:	bd80      	pop	{r7, pc}
 801844e:	bf00      	nop
 8018450:	200301cc 	.word	0x200301cc

08018454 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8018454:	b480      	push	{r7}
 8018456:	b083      	sub	sp, #12
 8018458:	af00      	add	r7, sp, #0
 801845a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 801845c:	bf00      	nop
 801845e:	370c      	adds	r7, #12
 8018460:	46bd      	mov	sp, r7
 8018462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018466:	4770      	bx	lr

08018468 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8018468:	b480      	push	{r7}
 801846a:	b085      	sub	sp, #20
 801846c:	af00      	add	r7, sp, #0
 801846e:	4603      	mov	r3, r0
 8018470:	6039      	str	r1, [r7, #0]
 8018472:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8018474:	79fb      	ldrb	r3, [r7, #7]
 8018476:	2b06      	cmp	r3, #6
 8018478:	d845      	bhi.n	8018506 <OutputDbgTrace+0x9e>
 801847a:	a201      	add	r2, pc, #4	; (adr r2, 8018480 <OutputDbgTrace+0x18>)
 801847c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018480:	0801849d 	.word	0x0801849d
 8018484:	080184c1 	.word	0x080184c1
 8018488:	080184c7 	.word	0x080184c7
 801848c:	080184db 	.word	0x080184db
 8018490:	080184e7 	.word	0x080184e7
 8018494:	080184ed 	.word	0x080184ed
 8018498:	080184fb 	.word	0x080184fb
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801849c:	683b      	ldr	r3, [r7, #0]
 801849e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80184a0:	68fb      	ldr	r3, [r7, #12]
 80184a2:	7a5b      	ldrb	r3, [r3, #9]
 80184a4:	2bff      	cmp	r3, #255	; 0xff
 80184a6:	d005      	beq.n	80184b4 <OutputDbgTrace+0x4c>
 80184a8:	2bff      	cmp	r3, #255	; 0xff
 80184aa:	dc05      	bgt.n	80184b8 <OutputDbgTrace+0x50>
 80184ac:	2b0e      	cmp	r3, #14
 80184ae:	d005      	beq.n	80184bc <OutputDbgTrace+0x54>
 80184b0:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80184b2:	e001      	b.n	80184b8 <OutputDbgTrace+0x50>
          break;
 80184b4:	bf00      	nop
 80184b6:	e027      	b.n	8018508 <OutputDbgTrace+0xa0>
          break;
 80184b8:	bf00      	nop
 80184ba:	e025      	b.n	8018508 <OutputDbgTrace+0xa0>
          break;
 80184bc:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 80184be:	e023      	b.n	8018508 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80184c0:	683b      	ldr	r3, [r7, #0]
 80184c2:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80184c4:	e020      	b.n	8018508 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80184c6:	683b      	ldr	r3, [r7, #0]
 80184c8:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80184ca:	68fb      	ldr	r3, [r7, #12]
 80184cc:	7a5b      	ldrb	r3, [r3, #9]
 80184ce:	2b0e      	cmp	r3, #14
 80184d0:	d001      	beq.n	80184d6 <OutputDbgTrace+0x6e>
 80184d2:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80184d4:	e000      	b.n	80184d8 <OutputDbgTrace+0x70>
          break;
 80184d6:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80184d8:	e016      	b.n	8018508 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80184da:	683b      	ldr	r3, [r7, #0]
 80184dc:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80184de:	68fb      	ldr	r3, [r7, #12]
 80184e0:	7a5b      	ldrb	r3, [r3, #9]
 80184e2:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80184e4:	e010      	b.n	8018508 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80184e6:	683b      	ldr	r3, [r7, #0]
 80184e8:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80184ea:	e00d      	b.n	8018508 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80184ec:	683b      	ldr	r3, [r7, #0]
 80184ee:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80184f0:	68fb      	ldr	r3, [r7, #12]
 80184f2:	7a5b      	ldrb	r3, [r3, #9]
 80184f4:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80184f6:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80184f8:	e006      	b.n	8018508 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80184fa:	683b      	ldr	r3, [r7, #0]
 80184fc:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80184fe:	68fb      	ldr	r3, [r7, #12]
 8018500:	7a5b      	ldrb	r3, [r3, #9]
 8018502:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8018504:	e000      	b.n	8018508 <OutputDbgTrace+0xa0>

    default:
      break;
 8018506:	bf00      	nop
  }

  return;
 8018508:	bf00      	nop
}
 801850a:	3714      	adds	r7, #20
 801850c:	46bd      	mov	sp, r7
 801850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018512:	4770      	bx	lr

08018514 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8018514:	b480      	push	{r7}
 8018516:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8018518:	4b05      	ldr	r3, [pc, #20]	; (8018530 <UTIL_LPM_Init+0x1c>)
 801851a:	2200      	movs	r2, #0
 801851c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801851e:	4b05      	ldr	r3, [pc, #20]	; (8018534 <UTIL_LPM_Init+0x20>)
 8018520:	2200      	movs	r2, #0
 8018522:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8018524:	bf00      	nop
 8018526:	46bd      	mov	sp, r7
 8018528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801852c:	4770      	bx	lr
 801852e:	bf00      	nop
 8018530:	20000990 	.word	0x20000990
 8018534:	20000994 	.word	0x20000994

08018538 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8018538:	b480      	push	{r7}
 801853a:	b087      	sub	sp, #28
 801853c:	af00      	add	r7, sp, #0
 801853e:	6078      	str	r0, [r7, #4]
 8018540:	460b      	mov	r3, r1
 8018542:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018544:	f3ef 8310 	mrs	r3, PRIMASK
 8018548:	613b      	str	r3, [r7, #16]
  return(result);
 801854a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801854c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801854e:	b672      	cpsid	i
}
 8018550:	bf00      	nop
  
  switch(state)
 8018552:	78fb      	ldrb	r3, [r7, #3]
 8018554:	2b00      	cmp	r3, #0
 8018556:	d008      	beq.n	801856a <UTIL_LPM_SetOffMode+0x32>
 8018558:	2b01      	cmp	r3, #1
 801855a:	d10e      	bne.n	801857a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801855c:	4b0d      	ldr	r3, [pc, #52]	; (8018594 <UTIL_LPM_SetOffMode+0x5c>)
 801855e:	681a      	ldr	r2, [r3, #0]
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	4313      	orrs	r3, r2
 8018564:	4a0b      	ldr	r2, [pc, #44]	; (8018594 <UTIL_LPM_SetOffMode+0x5c>)
 8018566:	6013      	str	r3, [r2, #0]
      break;
 8018568:	e008      	b.n	801857c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	43da      	mvns	r2, r3
 801856e:	4b09      	ldr	r3, [pc, #36]	; (8018594 <UTIL_LPM_SetOffMode+0x5c>)
 8018570:	681b      	ldr	r3, [r3, #0]
 8018572:	4013      	ands	r3, r2
 8018574:	4a07      	ldr	r2, [pc, #28]	; (8018594 <UTIL_LPM_SetOffMode+0x5c>)
 8018576:	6013      	str	r3, [r2, #0]
      break;
 8018578:	e000      	b.n	801857c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801857a:	bf00      	nop
 801857c:	697b      	ldr	r3, [r7, #20]
 801857e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018580:	68fb      	ldr	r3, [r7, #12]
 8018582:	f383 8810 	msr	PRIMASK, r3
}
 8018586:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8018588:	bf00      	nop
 801858a:	371c      	adds	r7, #28
 801858c:	46bd      	mov	sp, r7
 801858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018592:	4770      	bx	lr
 8018594:	20000994 	.word	0x20000994

08018598 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8018598:	b580      	push	{r7, lr}
 801859a:	b090      	sub	sp, #64	; 0x40
 801859c:	af00      	add	r7, sp, #0
 801859e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80185a0:	4b73      	ldr	r3, [pc, #460]	; (8018770 <UTIL_SEQ_Run+0x1d8>)
 80185a2:	681b      	ldr	r3, [r3, #0]
 80185a4:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 80185a6:	4b72      	ldr	r3, [pc, #456]	; (8018770 <UTIL_SEQ_Run+0x1d8>)
 80185a8:	681a      	ldr	r2, [r3, #0]
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	4013      	ands	r3, r2
 80185ae:	4a70      	ldr	r2, [pc, #448]	; (8018770 <UTIL_SEQ_Run+0x1d8>)
 80185b0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 80185b2:	4b70      	ldr	r3, [pc, #448]	; (8018774 <UTIL_SEQ_Run+0x1dc>)
 80185b4:	681b      	ldr	r3, [r3, #0]
 80185b6:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 80185b8:	4b6f      	ldr	r3, [pc, #444]	; (8018778 <UTIL_SEQ_Run+0x1e0>)
 80185ba:	681b      	ldr	r3, [r3, #0]
 80185bc:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 80185be:	4b6f      	ldr	r3, [pc, #444]	; (801877c <UTIL_SEQ_Run+0x1e4>)
 80185c0:	681b      	ldr	r3, [r3, #0]
 80185c2:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 80185c4:	4b6e      	ldr	r3, [pc, #440]	; (8018780 <UTIL_SEQ_Run+0x1e8>)
 80185c6:	681b      	ldr	r3, [r3, #0]
 80185c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80185ca:	e08d      	b.n	80186e8 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 80185cc:	2300      	movs	r3, #0
 80185ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80185d0:	e002      	b.n	80185d8 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 80185d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80185d4:	3301      	adds	r3, #1
 80185d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80185d8:	4a6a      	ldr	r2, [pc, #424]	; (8018784 <UTIL_SEQ_Run+0x1ec>)
 80185da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80185dc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80185e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185e2:	401a      	ands	r2, r3
 80185e4:	4b62      	ldr	r3, [pc, #392]	; (8018770 <UTIL_SEQ_Run+0x1d8>)
 80185e6:	681b      	ldr	r3, [r3, #0]
 80185e8:	4013      	ands	r3, r2
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	d0f1      	beq.n	80185d2 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80185ee:	4a65      	ldr	r2, [pc, #404]	; (8018784 <UTIL_SEQ_Run+0x1ec>)
 80185f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80185f2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80185f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185f8:	401a      	ands	r2, r3
 80185fa:	4b5d      	ldr	r3, [pc, #372]	; (8018770 <UTIL_SEQ_Run+0x1d8>)
 80185fc:	681b      	ldr	r3, [r3, #0]
 80185fe:	4013      	ands	r3, r2
 8018600:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8018602:	4a60      	ldr	r2, [pc, #384]	; (8018784 <UTIL_SEQ_Run+0x1ec>)
 8018604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018606:	00db      	lsls	r3, r3, #3
 8018608:	4413      	add	r3, r2
 801860a:	685a      	ldr	r2, [r3, #4]
 801860c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801860e:	4013      	ands	r3, r2
 8018610:	2b00      	cmp	r3, #0
 8018612:	d106      	bne.n	8018622 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8018614:	4a5b      	ldr	r2, [pc, #364]	; (8018784 <UTIL_SEQ_Run+0x1ec>)
 8018616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018618:	00db      	lsls	r3, r3, #3
 801861a:	4413      	add	r3, r2
 801861c:	f04f 32ff 	mov.w	r2, #4294967295
 8018620:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8018622:	4a58      	ldr	r2, [pc, #352]	; (8018784 <UTIL_SEQ_Run+0x1ec>)
 8018624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018626:	00db      	lsls	r3, r3, #3
 8018628:	4413      	add	r3, r2
 801862a:	685a      	ldr	r2, [r3, #4]
 801862c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801862e:	4013      	ands	r3, r2
 8018630:	4618      	mov	r0, r3
 8018632:	f000 f9d9 	bl	80189e8 <SEQ_BitPosition>
 8018636:	4603      	mov	r3, r0
 8018638:	461a      	mov	r2, r3
 801863a:	4b53      	ldr	r3, [pc, #332]	; (8018788 <UTIL_SEQ_Run+0x1f0>)
 801863c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801863e:	4a51      	ldr	r2, [pc, #324]	; (8018784 <UTIL_SEQ_Run+0x1ec>)
 8018640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018642:	00db      	lsls	r3, r3, #3
 8018644:	4413      	add	r3, r2
 8018646:	685a      	ldr	r2, [r3, #4]
 8018648:	4b4f      	ldr	r3, [pc, #316]	; (8018788 <UTIL_SEQ_Run+0x1f0>)
 801864a:	681b      	ldr	r3, [r3, #0]
 801864c:	2101      	movs	r1, #1
 801864e:	fa01 f303 	lsl.w	r3, r1, r3
 8018652:	43db      	mvns	r3, r3
 8018654:	401a      	ands	r2, r3
 8018656:	494b      	ldr	r1, [pc, #300]	; (8018784 <UTIL_SEQ_Run+0x1ec>)
 8018658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801865a:	00db      	lsls	r3, r3, #3
 801865c:	440b      	add	r3, r1
 801865e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018660:	f3ef 8310 	mrs	r3, PRIMASK
 8018664:	61bb      	str	r3, [r7, #24]
  return(result);
 8018666:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8018668:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801866a:	b672      	cpsid	i
}
 801866c:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801866e:	4b46      	ldr	r3, [pc, #280]	; (8018788 <UTIL_SEQ_Run+0x1f0>)
 8018670:	681b      	ldr	r3, [r3, #0]
 8018672:	2201      	movs	r2, #1
 8018674:	fa02 f303 	lsl.w	r3, r2, r3
 8018678:	43da      	mvns	r2, r3
 801867a:	4b3e      	ldr	r3, [pc, #248]	; (8018774 <UTIL_SEQ_Run+0x1dc>)
 801867c:	681b      	ldr	r3, [r3, #0]
 801867e:	4013      	ands	r3, r2
 8018680:	4a3c      	ldr	r2, [pc, #240]	; (8018774 <UTIL_SEQ_Run+0x1dc>)
 8018682:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8018684:	2302      	movs	r3, #2
 8018686:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018688:	e013      	b.n	80186b2 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801868a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801868c:	3b01      	subs	r3, #1
 801868e:	4a3d      	ldr	r2, [pc, #244]	; (8018784 <UTIL_SEQ_Run+0x1ec>)
 8018690:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8018694:	4b3c      	ldr	r3, [pc, #240]	; (8018788 <UTIL_SEQ_Run+0x1f0>)
 8018696:	681b      	ldr	r3, [r3, #0]
 8018698:	2201      	movs	r2, #1
 801869a:	fa02 f303 	lsl.w	r3, r2, r3
 801869e:	43da      	mvns	r2, r3
 80186a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80186a2:	3b01      	subs	r3, #1
 80186a4:	400a      	ands	r2, r1
 80186a6:	4937      	ldr	r1, [pc, #220]	; (8018784 <UTIL_SEQ_Run+0x1ec>)
 80186a8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80186ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80186ae:	3b01      	subs	r3, #1
 80186b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80186b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80186b4:	2b00      	cmp	r3, #0
 80186b6:	d1e8      	bne.n	801868a <UTIL_SEQ_Run+0xf2>
 80186b8:	6a3b      	ldr	r3, [r7, #32]
 80186ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80186bc:	697b      	ldr	r3, [r7, #20]
 80186be:	f383 8810 	msr	PRIMASK, r3
}
 80186c2:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80186c4:	4b30      	ldr	r3, [pc, #192]	; (8018788 <UTIL_SEQ_Run+0x1f0>)
 80186c6:	681b      	ldr	r3, [r3, #0]
 80186c8:	4a30      	ldr	r2, [pc, #192]	; (801878c <UTIL_SEQ_Run+0x1f4>)
 80186ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80186ce:	4798      	blx	r3

    local_taskset = TaskSet;
 80186d0:	4b28      	ldr	r3, [pc, #160]	; (8018774 <UTIL_SEQ_Run+0x1dc>)
 80186d2:	681b      	ldr	r3, [r3, #0]
 80186d4:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 80186d6:	4b28      	ldr	r3, [pc, #160]	; (8018778 <UTIL_SEQ_Run+0x1e0>)
 80186d8:	681b      	ldr	r3, [r3, #0]
 80186da:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 80186dc:	4b27      	ldr	r3, [pc, #156]	; (801877c <UTIL_SEQ_Run+0x1e4>)
 80186de:	681b      	ldr	r3, [r3, #0]
 80186e0:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 80186e2:	4b27      	ldr	r3, [pc, #156]	; (8018780 <UTIL_SEQ_Run+0x1e8>)
 80186e4:	681b      	ldr	r3, [r3, #0]
 80186e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80186e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80186ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186ec:	401a      	ands	r2, r3
 80186ee:	4b20      	ldr	r3, [pc, #128]	; (8018770 <UTIL_SEQ_Run+0x1d8>)
 80186f0:	681b      	ldr	r3, [r3, #0]
 80186f2:	4013      	ands	r3, r2
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	d005      	beq.n	8018704 <UTIL_SEQ_Run+0x16c>
 80186f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80186fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186fc:	4013      	ands	r3, r2
 80186fe:	2b00      	cmp	r3, #0
 8018700:	f43f af64 	beq.w	80185cc <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8018704:	4b20      	ldr	r3, [pc, #128]	; (8018788 <UTIL_SEQ_Run+0x1f0>)
 8018706:	f04f 32ff 	mov.w	r2, #4294967295
 801870a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801870c:	f000 f95e 	bl	80189cc <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018710:	f3ef 8310 	mrs	r3, PRIMASK
 8018714:	613b      	str	r3, [r7, #16]
  return(result);
 8018716:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8018718:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801871a:	b672      	cpsid	i
}
 801871c:	bf00      	nop
  local_taskset = TaskSet;
 801871e:	4b15      	ldr	r3, [pc, #84]	; (8018774 <UTIL_SEQ_Run+0x1dc>)
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8018724:	4b14      	ldr	r3, [pc, #80]	; (8018778 <UTIL_SEQ_Run+0x1e0>)
 8018726:	681b      	ldr	r3, [r3, #0]
 8018728:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801872a:	4b14      	ldr	r3, [pc, #80]	; (801877c <UTIL_SEQ_Run+0x1e4>)
 801872c:	681b      	ldr	r3, [r3, #0]
 801872e:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8018730:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018734:	401a      	ands	r2, r3
 8018736:	4b0e      	ldr	r3, [pc, #56]	; (8018770 <UTIL_SEQ_Run+0x1d8>)
 8018738:	681b      	ldr	r3, [r3, #0]
 801873a:	4013      	ands	r3, r2
 801873c:	2b00      	cmp	r3, #0
 801873e:	d107      	bne.n	8018750 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8018740:	4b0f      	ldr	r3, [pc, #60]	; (8018780 <UTIL_SEQ_Run+0x1e8>)
 8018742:	681a      	ldr	r2, [r3, #0]
 8018744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018746:	4013      	ands	r3, r2
 8018748:	2b00      	cmp	r3, #0
 801874a:	d101      	bne.n	8018750 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801874c:	f7f0 f9b0 	bl	8008ab0 <UTIL_SEQ_Idle>
 8018750:	69fb      	ldr	r3, [r7, #28]
 8018752:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018754:	68fb      	ldr	r3, [r7, #12]
 8018756:	f383 8810 	msr	PRIMASK, r3
}
 801875a:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801875c:	f000 f93d 	bl	80189da <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8018760:	4a03      	ldr	r2, [pc, #12]	; (8018770 <UTIL_SEQ_Run+0x1d8>)
 8018762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018764:	6013      	str	r3, [r2, #0]

  return;
 8018766:	bf00      	nop
}
 8018768:	3740      	adds	r7, #64	; 0x40
 801876a:	46bd      	mov	sp, r7
 801876c:	bd80      	pop	{r7, pc}
 801876e:	bf00      	nop
 8018770:	2000008c 	.word	0x2000008c
 8018774:	20000998 	.word	0x20000998
 8018778:	2000099c 	.word	0x2000099c
 801877c:	20000088 	.word	0x20000088
 8018780:	200009a0 	.word	0x200009a0
 8018784:	20000a28 	.word	0x20000a28
 8018788:	200009a4 	.word	0x200009a4
 801878c:	200009a8 	.word	0x200009a8

08018790 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8018790:	b580      	push	{r7, lr}
 8018792:	b088      	sub	sp, #32
 8018794:	af00      	add	r7, sp, #0
 8018796:	60f8      	str	r0, [r7, #12]
 8018798:	60b9      	str	r1, [r7, #8]
 801879a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801879c:	f3ef 8310 	mrs	r3, PRIMASK
 80187a0:	617b      	str	r3, [r7, #20]
  return(result);
 80187a2:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80187a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80187a6:	b672      	cpsid	i
}
 80187a8:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80187aa:	68f8      	ldr	r0, [r7, #12]
 80187ac:	f000 f91c 	bl	80189e8 <SEQ_BitPosition>
 80187b0:	4603      	mov	r3, r0
 80187b2:	4619      	mov	r1, r3
 80187b4:	4a06      	ldr	r2, [pc, #24]	; (80187d0 <UTIL_SEQ_RegTask+0x40>)
 80187b6:	687b      	ldr	r3, [r7, #4]
 80187b8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80187bc:	69fb      	ldr	r3, [r7, #28]
 80187be:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80187c0:	69bb      	ldr	r3, [r7, #24]
 80187c2:	f383 8810 	msr	PRIMASK, r3
}
 80187c6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80187c8:	bf00      	nop
}
 80187ca:	3720      	adds	r7, #32
 80187cc:	46bd      	mov	sp, r7
 80187ce:	bd80      	pop	{r7, pc}
 80187d0:	200009a8 	.word	0x200009a8

080187d4 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80187d4:	b480      	push	{r7}
 80187d6:	b087      	sub	sp, #28
 80187d8:	af00      	add	r7, sp, #0
 80187da:	6078      	str	r0, [r7, #4]
 80187dc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80187de:	f3ef 8310 	mrs	r3, PRIMASK
 80187e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80187e4:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80187e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80187e8:	b672      	cpsid	i
}
 80187ea:	bf00      	nop

  TaskSet |= TaskId_bm;
 80187ec:	4b0d      	ldr	r3, [pc, #52]	; (8018824 <UTIL_SEQ_SetTask+0x50>)
 80187ee:	681a      	ldr	r2, [r3, #0]
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	4313      	orrs	r3, r2
 80187f4:	4a0b      	ldr	r2, [pc, #44]	; (8018824 <UTIL_SEQ_SetTask+0x50>)
 80187f6:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80187f8:	4a0b      	ldr	r2, [pc, #44]	; (8018828 <UTIL_SEQ_SetTask+0x54>)
 80187fa:	683b      	ldr	r3, [r7, #0]
 80187fc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8018800:	687b      	ldr	r3, [r7, #4]
 8018802:	431a      	orrs	r2, r3
 8018804:	4908      	ldr	r1, [pc, #32]	; (8018828 <UTIL_SEQ_SetTask+0x54>)
 8018806:	683b      	ldr	r3, [r7, #0]
 8018808:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801880c:	697b      	ldr	r3, [r7, #20]
 801880e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018810:	693b      	ldr	r3, [r7, #16]
 8018812:	f383 8810 	msr	PRIMASK, r3
}
 8018816:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8018818:	bf00      	nop
}
 801881a:	371c      	adds	r7, #28
 801881c:	46bd      	mov	sp, r7
 801881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018822:	4770      	bx	lr
 8018824:	20000998 	.word	0x20000998
 8018828:	20000a28 	.word	0x20000a28

0801882c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 801882c:	b480      	push	{r7}
 801882e:	b087      	sub	sp, #28
 8018830:	af00      	add	r7, sp, #0
 8018832:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018834:	f3ef 8310 	mrs	r3, PRIMASK
 8018838:	60fb      	str	r3, [r7, #12]
  return(result);
 801883a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801883c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801883e:	b672      	cpsid	i
}
 8018840:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	43da      	mvns	r2, r3
 8018846:	4b08      	ldr	r3, [pc, #32]	; (8018868 <UTIL_SEQ_PauseTask+0x3c>)
 8018848:	681b      	ldr	r3, [r3, #0]
 801884a:	4013      	ands	r3, r2
 801884c:	4a06      	ldr	r2, [pc, #24]	; (8018868 <UTIL_SEQ_PauseTask+0x3c>)
 801884e:	6013      	str	r3, [r2, #0]
 8018850:	697b      	ldr	r3, [r7, #20]
 8018852:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018854:	693b      	ldr	r3, [r7, #16]
 8018856:	f383 8810 	msr	PRIMASK, r3
}
 801885a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801885c:	bf00      	nop
}
 801885e:	371c      	adds	r7, #28
 8018860:	46bd      	mov	sp, r7
 8018862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018866:	4770      	bx	lr
 8018868:	20000088 	.word	0x20000088

0801886c <UTIL_SEQ_IsPauseTask>:

uint32_t UTIL_SEQ_IsPauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 801886c:	b480      	push	{r7}
 801886e:	b087      	sub	sp, #28
 8018870:	af00      	add	r7, sp, #0
 8018872:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018874:	f3ef 8310 	mrs	r3, PRIMASK
 8018878:	60bb      	str	r3, [r7, #8]
  return(result);
 801887a:	68bb      	ldr	r3, [r7, #8]
  uint32_t _status;
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801887c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801887e:	b672      	cpsid	i
}
 8018880:	bf00      	nop

  _status = ((TaskMask & TaskId_bm) == TaskId_bm) ? 0u:1u;
 8018882:	4b0c      	ldr	r3, [pc, #48]	; (80188b4 <UTIL_SEQ_IsPauseTask+0x48>)
 8018884:	681a      	ldr	r2, [r3, #0]
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	4013      	ands	r3, r2
 801888a:	687a      	ldr	r2, [r7, #4]
 801888c:	429a      	cmp	r2, r3
 801888e:	bf14      	ite	ne
 8018890:	2301      	movne	r3, #1
 8018892:	2300      	moveq	r3, #0
 8018894:	b2db      	uxtb	r3, r3
 8018896:	613b      	str	r3, [r7, #16]
 8018898:	697b      	ldr	r3, [r7, #20]
 801889a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801889c:	68fb      	ldr	r3, [r7, #12]
 801889e:	f383 8810 	msr	PRIMASK, r3
}
 80188a2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
 80188a4:	693b      	ldr	r3, [r7, #16]
}
 80188a6:	4618      	mov	r0, r3
 80188a8:	371c      	adds	r7, #28
 80188aa:	46bd      	mov	sp, r7
 80188ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188b0:	4770      	bx	lr
 80188b2:	bf00      	nop
 80188b4:	20000088 	.word	0x20000088

080188b8 <UTIL_SEQ_ResumeTask>:

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80188b8:	b480      	push	{r7}
 80188ba:	b087      	sub	sp, #28
 80188bc:	af00      	add	r7, sp, #0
 80188be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80188c0:	f3ef 8310 	mrs	r3, PRIMASK
 80188c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80188c6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80188c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80188ca:	b672      	cpsid	i
}
 80188cc:	bf00      	nop

  TaskMask |= TaskId_bm;
 80188ce:	4b09      	ldr	r3, [pc, #36]	; (80188f4 <UTIL_SEQ_ResumeTask+0x3c>)
 80188d0:	681a      	ldr	r2, [r3, #0]
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	4313      	orrs	r3, r2
 80188d6:	4a07      	ldr	r2, [pc, #28]	; (80188f4 <UTIL_SEQ_ResumeTask+0x3c>)
 80188d8:	6013      	str	r3, [r2, #0]
 80188da:	697b      	ldr	r3, [r7, #20]
 80188dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80188de:	693b      	ldr	r3, [r7, #16]
 80188e0:	f383 8810 	msr	PRIMASK, r3
}
 80188e4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80188e6:	bf00      	nop
}
 80188e8:	371c      	adds	r7, #28
 80188ea:	46bd      	mov	sp, r7
 80188ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188f0:	4770      	bx	lr
 80188f2:	bf00      	nop
 80188f4:	20000088 	.word	0x20000088

080188f8 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80188f8:	b480      	push	{r7}
 80188fa:	b087      	sub	sp, #28
 80188fc:	af00      	add	r7, sp, #0
 80188fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018900:	f3ef 8310 	mrs	r3, PRIMASK
 8018904:	60fb      	str	r3, [r7, #12]
  return(result);
 8018906:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8018908:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801890a:	b672      	cpsid	i
}
 801890c:	bf00      	nop

  EvtSet |= EvtId_bm;
 801890e:	4b09      	ldr	r3, [pc, #36]	; (8018934 <UTIL_SEQ_SetEvt+0x3c>)
 8018910:	681a      	ldr	r2, [r3, #0]
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	4313      	orrs	r3, r2
 8018916:	4a07      	ldr	r2, [pc, #28]	; (8018934 <UTIL_SEQ_SetEvt+0x3c>)
 8018918:	6013      	str	r3, [r2, #0]
 801891a:	697b      	ldr	r3, [r7, #20]
 801891c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801891e:	693b      	ldr	r3, [r7, #16]
 8018920:	f383 8810 	msr	PRIMASK, r3
}
 8018924:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8018926:	bf00      	nop
}
 8018928:	371c      	adds	r7, #28
 801892a:	46bd      	mov	sp, r7
 801892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018930:	4770      	bx	lr
 8018932:	bf00      	nop
 8018934:	2000099c 	.word	0x2000099c

08018938 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8018938:	b580      	push	{r7, lr}
 801893a:	b088      	sub	sp, #32
 801893c:	af00      	add	r7, sp, #0
 801893e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8018940:	4b1f      	ldr	r3, [pc, #124]	; (80189c0 <UTIL_SEQ_WaitEvt+0x88>)
 8018942:	681b      	ldr	r3, [r3, #0]
 8018944:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8018946:	4b1e      	ldr	r3, [pc, #120]	; (80189c0 <UTIL_SEQ_WaitEvt+0x88>)
 8018948:	681b      	ldr	r3, [r3, #0]
 801894a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801894e:	d102      	bne.n	8018956 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8018950:	2300      	movs	r3, #0
 8018952:	61fb      	str	r3, [r7, #28]
 8018954:	e005      	b.n	8018962 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8018956:	4b1a      	ldr	r3, [pc, #104]	; (80189c0 <UTIL_SEQ_WaitEvt+0x88>)
 8018958:	681b      	ldr	r3, [r3, #0]
 801895a:	2201      	movs	r2, #1
 801895c:	fa02 f303 	lsl.w	r3, r2, r3
 8018960:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8018962:	4b18      	ldr	r3, [pc, #96]	; (80189c4 <UTIL_SEQ_WaitEvt+0x8c>)
 8018964:	681b      	ldr	r3, [r3, #0]
 8018966:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8018968:	4a16      	ldr	r2, [pc, #88]	; (80189c4 <UTIL_SEQ_WaitEvt+0x8c>)
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 801896e:	e003      	b.n	8018978 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8018970:	6879      	ldr	r1, [r7, #4]
 8018972:	69f8      	ldr	r0, [r7, #28]
 8018974:	f7f0 f8a3 	bl	8008abe <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8018978:	4b13      	ldr	r3, [pc, #76]	; (80189c8 <UTIL_SEQ_WaitEvt+0x90>)
 801897a:	681a      	ldr	r2, [r3, #0]
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	4013      	ands	r3, r2
 8018980:	2b00      	cmp	r3, #0
 8018982:	d0f5      	beq.n	8018970 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8018984:	4a0e      	ldr	r2, [pc, #56]	; (80189c0 <UTIL_SEQ_WaitEvt+0x88>)
 8018986:	69bb      	ldr	r3, [r7, #24]
 8018988:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801898a:	f3ef 8310 	mrs	r3, PRIMASK
 801898e:	60bb      	str	r3, [r7, #8]
  return(result);
 8018990:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8018992:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8018994:	b672      	cpsid	i
}
 8018996:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8018998:	687b      	ldr	r3, [r7, #4]
 801899a:	43da      	mvns	r2, r3
 801899c:	4b0a      	ldr	r3, [pc, #40]	; (80189c8 <UTIL_SEQ_WaitEvt+0x90>)
 801899e:	681b      	ldr	r3, [r3, #0]
 80189a0:	4013      	ands	r3, r2
 80189a2:	4a09      	ldr	r2, [pc, #36]	; (80189c8 <UTIL_SEQ_WaitEvt+0x90>)
 80189a4:	6013      	str	r3, [r2, #0]
 80189a6:	693b      	ldr	r3, [r7, #16]
 80189a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80189aa:	68fb      	ldr	r3, [r7, #12]
 80189ac:	f383 8810 	msr	PRIMASK, r3
}
 80189b0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 80189b2:	4a04      	ldr	r2, [pc, #16]	; (80189c4 <UTIL_SEQ_WaitEvt+0x8c>)
 80189b4:	697b      	ldr	r3, [r7, #20]
 80189b6:	6013      	str	r3, [r2, #0]
  return;
 80189b8:	bf00      	nop
}
 80189ba:	3720      	adds	r7, #32
 80189bc:	46bd      	mov	sp, r7
 80189be:	bd80      	pop	{r7, pc}
 80189c0:	200009a4 	.word	0x200009a4
 80189c4:	200009a0 	.word	0x200009a0
 80189c8:	2000099c 	.word	0x2000099c

080189cc <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80189cc:	b480      	push	{r7}
 80189ce:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80189d0:	bf00      	nop
}
 80189d2:	46bd      	mov	sp, r7
 80189d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189d8:	4770      	bx	lr

080189da <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80189da:	b480      	push	{r7}
 80189dc:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80189de:	bf00      	nop
}
 80189e0:	46bd      	mov	sp, r7
 80189e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189e6:	4770      	bx	lr

080189e8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80189e8:	b480      	push	{r7}
 80189ea:	b085      	sub	sp, #20
 80189ec:	af00      	add	r7, sp, #0
 80189ee:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 80189f0:	2300      	movs	r3, #0
 80189f2:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80189f8:	68bb      	ldr	r3, [r7, #8]
 80189fa:	0c1b      	lsrs	r3, r3, #16
 80189fc:	041b      	lsls	r3, r3, #16
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	d104      	bne.n	8018a0c <SEQ_BitPosition+0x24>
 8018a02:	2310      	movs	r3, #16
 8018a04:	73fb      	strb	r3, [r7, #15]
 8018a06:	68bb      	ldr	r3, [r7, #8]
 8018a08:	041b      	lsls	r3, r3, #16
 8018a0a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8018a0c:	68bb      	ldr	r3, [r7, #8]
 8018a0e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8018a12:	2b00      	cmp	r3, #0
 8018a14:	d105      	bne.n	8018a22 <SEQ_BitPosition+0x3a>
 8018a16:	7bfb      	ldrb	r3, [r7, #15]
 8018a18:	3308      	adds	r3, #8
 8018a1a:	73fb      	strb	r3, [r7, #15]
 8018a1c:	68bb      	ldr	r3, [r7, #8]
 8018a1e:	021b      	lsls	r3, r3, #8
 8018a20:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8018a22:	68bb      	ldr	r3, [r7, #8]
 8018a24:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	d105      	bne.n	8018a38 <SEQ_BitPosition+0x50>
 8018a2c:	7bfb      	ldrb	r3, [r7, #15]
 8018a2e:	3304      	adds	r3, #4
 8018a30:	73fb      	strb	r3, [r7, #15]
 8018a32:	68bb      	ldr	r3, [r7, #8]
 8018a34:	011b      	lsls	r3, r3, #4
 8018a36:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8018a38:	68bb      	ldr	r3, [r7, #8]
 8018a3a:	0f1b      	lsrs	r3, r3, #28
 8018a3c:	4a07      	ldr	r2, [pc, #28]	; (8018a5c <SEQ_BitPosition+0x74>)
 8018a3e:	5cd2      	ldrb	r2, [r2, r3]
 8018a40:	7bfb      	ldrb	r3, [r7, #15]
 8018a42:	4413      	add	r3, r2
 8018a44:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8018a46:	7bfb      	ldrb	r3, [r7, #15]
 8018a48:	f1c3 031f 	rsb	r3, r3, #31
 8018a4c:	b2db      	uxtb	r3, r3
}
 8018a4e:	4618      	mov	r0, r3
 8018a50:	3714      	adds	r7, #20
 8018a52:	46bd      	mov	sp, r7
 8018a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a58:	4770      	bx	lr
 8018a5a:	bf00      	nop
 8018a5c:	0801ddd0 	.word	0x0801ddd0

08018a60 <__errno>:
 8018a60:	4b01      	ldr	r3, [pc, #4]	; (8018a68 <__errno+0x8>)
 8018a62:	6818      	ldr	r0, [r3, #0]
 8018a64:	4770      	bx	lr
 8018a66:	bf00      	nop
 8018a68:	20000090 	.word	0x20000090

08018a6c <__libc_init_array>:
 8018a6c:	b570      	push	{r4, r5, r6, lr}
 8018a6e:	4d0d      	ldr	r5, [pc, #52]	; (8018aa4 <__libc_init_array+0x38>)
 8018a70:	4c0d      	ldr	r4, [pc, #52]	; (8018aa8 <__libc_init_array+0x3c>)
 8018a72:	1b64      	subs	r4, r4, r5
 8018a74:	10a4      	asrs	r4, r4, #2
 8018a76:	2600      	movs	r6, #0
 8018a78:	42a6      	cmp	r6, r4
 8018a7a:	d109      	bne.n	8018a90 <__libc_init_array+0x24>
 8018a7c:	4d0b      	ldr	r5, [pc, #44]	; (8018aac <__libc_init_array+0x40>)
 8018a7e:	4c0c      	ldr	r4, [pc, #48]	; (8018ab0 <__libc_init_array+0x44>)
 8018a80:	f004 fdfa 	bl	801d678 <_init>
 8018a84:	1b64      	subs	r4, r4, r5
 8018a86:	10a4      	asrs	r4, r4, #2
 8018a88:	2600      	movs	r6, #0
 8018a8a:	42a6      	cmp	r6, r4
 8018a8c:	d105      	bne.n	8018a9a <__libc_init_array+0x2e>
 8018a8e:	bd70      	pop	{r4, r5, r6, pc}
 8018a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8018a94:	4798      	blx	r3
 8018a96:	3601      	adds	r6, #1
 8018a98:	e7ee      	b.n	8018a78 <__libc_init_array+0xc>
 8018a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8018a9e:	4798      	blx	r3
 8018aa0:	3601      	adds	r6, #1
 8018aa2:	e7f2      	b.n	8018a8a <__libc_init_array+0x1e>
 8018aa4:	0801e294 	.word	0x0801e294
 8018aa8:	0801e294 	.word	0x0801e294
 8018aac:	0801e294 	.word	0x0801e294
 8018ab0:	0801e298 	.word	0x0801e298

08018ab4 <memcpy>:
 8018ab4:	440a      	add	r2, r1
 8018ab6:	4291      	cmp	r1, r2
 8018ab8:	f100 33ff 	add.w	r3, r0, #4294967295
 8018abc:	d100      	bne.n	8018ac0 <memcpy+0xc>
 8018abe:	4770      	bx	lr
 8018ac0:	b510      	push	{r4, lr}
 8018ac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018ac6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018aca:	4291      	cmp	r1, r2
 8018acc:	d1f9      	bne.n	8018ac2 <memcpy+0xe>
 8018ace:	bd10      	pop	{r4, pc}

08018ad0 <memset>:
 8018ad0:	4402      	add	r2, r0
 8018ad2:	4603      	mov	r3, r0
 8018ad4:	4293      	cmp	r3, r2
 8018ad6:	d100      	bne.n	8018ada <memset+0xa>
 8018ad8:	4770      	bx	lr
 8018ada:	f803 1b01 	strb.w	r1, [r3], #1
 8018ade:	e7f9      	b.n	8018ad4 <memset+0x4>

08018ae0 <__cvt>:
 8018ae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018ae4:	ec55 4b10 	vmov	r4, r5, d0
 8018ae8:	2d00      	cmp	r5, #0
 8018aea:	460e      	mov	r6, r1
 8018aec:	4619      	mov	r1, r3
 8018aee:	462b      	mov	r3, r5
 8018af0:	bfbb      	ittet	lt
 8018af2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8018af6:	461d      	movlt	r5, r3
 8018af8:	2300      	movge	r3, #0
 8018afa:	232d      	movlt	r3, #45	; 0x2d
 8018afc:	700b      	strb	r3, [r1, #0]
 8018afe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018b00:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8018b04:	4691      	mov	r9, r2
 8018b06:	f023 0820 	bic.w	r8, r3, #32
 8018b0a:	bfbc      	itt	lt
 8018b0c:	4622      	movlt	r2, r4
 8018b0e:	4614      	movlt	r4, r2
 8018b10:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8018b14:	d005      	beq.n	8018b22 <__cvt+0x42>
 8018b16:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8018b1a:	d100      	bne.n	8018b1e <__cvt+0x3e>
 8018b1c:	3601      	adds	r6, #1
 8018b1e:	2102      	movs	r1, #2
 8018b20:	e000      	b.n	8018b24 <__cvt+0x44>
 8018b22:	2103      	movs	r1, #3
 8018b24:	ab03      	add	r3, sp, #12
 8018b26:	9301      	str	r3, [sp, #4]
 8018b28:	ab02      	add	r3, sp, #8
 8018b2a:	9300      	str	r3, [sp, #0]
 8018b2c:	ec45 4b10 	vmov	d0, r4, r5
 8018b30:	4653      	mov	r3, sl
 8018b32:	4632      	mov	r2, r6
 8018b34:	f001 fefc 	bl	801a930 <_dtoa_r>
 8018b38:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8018b3c:	4607      	mov	r7, r0
 8018b3e:	d102      	bne.n	8018b46 <__cvt+0x66>
 8018b40:	f019 0f01 	tst.w	r9, #1
 8018b44:	d022      	beq.n	8018b8c <__cvt+0xac>
 8018b46:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8018b4a:	eb07 0906 	add.w	r9, r7, r6
 8018b4e:	d110      	bne.n	8018b72 <__cvt+0x92>
 8018b50:	783b      	ldrb	r3, [r7, #0]
 8018b52:	2b30      	cmp	r3, #48	; 0x30
 8018b54:	d10a      	bne.n	8018b6c <__cvt+0x8c>
 8018b56:	2200      	movs	r2, #0
 8018b58:	2300      	movs	r3, #0
 8018b5a:	4620      	mov	r0, r4
 8018b5c:	4629      	mov	r1, r5
 8018b5e:	f7ee ff93 	bl	8007a88 <__aeabi_dcmpeq>
 8018b62:	b918      	cbnz	r0, 8018b6c <__cvt+0x8c>
 8018b64:	f1c6 0601 	rsb	r6, r6, #1
 8018b68:	f8ca 6000 	str.w	r6, [sl]
 8018b6c:	f8da 3000 	ldr.w	r3, [sl]
 8018b70:	4499      	add	r9, r3
 8018b72:	2200      	movs	r2, #0
 8018b74:	2300      	movs	r3, #0
 8018b76:	4620      	mov	r0, r4
 8018b78:	4629      	mov	r1, r5
 8018b7a:	f7ee ff85 	bl	8007a88 <__aeabi_dcmpeq>
 8018b7e:	b108      	cbz	r0, 8018b84 <__cvt+0xa4>
 8018b80:	f8cd 900c 	str.w	r9, [sp, #12]
 8018b84:	2230      	movs	r2, #48	; 0x30
 8018b86:	9b03      	ldr	r3, [sp, #12]
 8018b88:	454b      	cmp	r3, r9
 8018b8a:	d307      	bcc.n	8018b9c <__cvt+0xbc>
 8018b8c:	9b03      	ldr	r3, [sp, #12]
 8018b8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018b90:	1bdb      	subs	r3, r3, r7
 8018b92:	4638      	mov	r0, r7
 8018b94:	6013      	str	r3, [r2, #0]
 8018b96:	b004      	add	sp, #16
 8018b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b9c:	1c59      	adds	r1, r3, #1
 8018b9e:	9103      	str	r1, [sp, #12]
 8018ba0:	701a      	strb	r2, [r3, #0]
 8018ba2:	e7f0      	b.n	8018b86 <__cvt+0xa6>

08018ba4 <__exponent>:
 8018ba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018ba6:	4603      	mov	r3, r0
 8018ba8:	2900      	cmp	r1, #0
 8018baa:	bfb8      	it	lt
 8018bac:	4249      	neglt	r1, r1
 8018bae:	f803 2b02 	strb.w	r2, [r3], #2
 8018bb2:	bfb4      	ite	lt
 8018bb4:	222d      	movlt	r2, #45	; 0x2d
 8018bb6:	222b      	movge	r2, #43	; 0x2b
 8018bb8:	2909      	cmp	r1, #9
 8018bba:	7042      	strb	r2, [r0, #1]
 8018bbc:	dd2a      	ble.n	8018c14 <__exponent+0x70>
 8018bbe:	f10d 0407 	add.w	r4, sp, #7
 8018bc2:	46a4      	mov	ip, r4
 8018bc4:	270a      	movs	r7, #10
 8018bc6:	46a6      	mov	lr, r4
 8018bc8:	460a      	mov	r2, r1
 8018bca:	fb91 f6f7 	sdiv	r6, r1, r7
 8018bce:	fb07 1516 	mls	r5, r7, r6, r1
 8018bd2:	3530      	adds	r5, #48	; 0x30
 8018bd4:	2a63      	cmp	r2, #99	; 0x63
 8018bd6:	f104 34ff 	add.w	r4, r4, #4294967295
 8018bda:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8018bde:	4631      	mov	r1, r6
 8018be0:	dcf1      	bgt.n	8018bc6 <__exponent+0x22>
 8018be2:	3130      	adds	r1, #48	; 0x30
 8018be4:	f1ae 0502 	sub.w	r5, lr, #2
 8018be8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8018bec:	1c44      	adds	r4, r0, #1
 8018bee:	4629      	mov	r1, r5
 8018bf0:	4561      	cmp	r1, ip
 8018bf2:	d30a      	bcc.n	8018c0a <__exponent+0x66>
 8018bf4:	f10d 0209 	add.w	r2, sp, #9
 8018bf8:	eba2 020e 	sub.w	r2, r2, lr
 8018bfc:	4565      	cmp	r5, ip
 8018bfe:	bf88      	it	hi
 8018c00:	2200      	movhi	r2, #0
 8018c02:	4413      	add	r3, r2
 8018c04:	1a18      	subs	r0, r3, r0
 8018c06:	b003      	add	sp, #12
 8018c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018c0e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8018c12:	e7ed      	b.n	8018bf0 <__exponent+0x4c>
 8018c14:	2330      	movs	r3, #48	; 0x30
 8018c16:	3130      	adds	r1, #48	; 0x30
 8018c18:	7083      	strb	r3, [r0, #2]
 8018c1a:	70c1      	strb	r1, [r0, #3]
 8018c1c:	1d03      	adds	r3, r0, #4
 8018c1e:	e7f1      	b.n	8018c04 <__exponent+0x60>

08018c20 <_printf_float>:
 8018c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c24:	ed2d 8b02 	vpush	{d8}
 8018c28:	b08d      	sub	sp, #52	; 0x34
 8018c2a:	460c      	mov	r4, r1
 8018c2c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8018c30:	4616      	mov	r6, r2
 8018c32:	461f      	mov	r7, r3
 8018c34:	4605      	mov	r5, r0
 8018c36:	f003 f98f 	bl	801bf58 <_localeconv_r>
 8018c3a:	f8d0 a000 	ldr.w	sl, [r0]
 8018c3e:	4650      	mov	r0, sl
 8018c40:	f7ee faa6 	bl	8007190 <strlen>
 8018c44:	2300      	movs	r3, #0
 8018c46:	930a      	str	r3, [sp, #40]	; 0x28
 8018c48:	6823      	ldr	r3, [r4, #0]
 8018c4a:	9305      	str	r3, [sp, #20]
 8018c4c:	f8d8 3000 	ldr.w	r3, [r8]
 8018c50:	f894 b018 	ldrb.w	fp, [r4, #24]
 8018c54:	3307      	adds	r3, #7
 8018c56:	f023 0307 	bic.w	r3, r3, #7
 8018c5a:	f103 0208 	add.w	r2, r3, #8
 8018c5e:	f8c8 2000 	str.w	r2, [r8]
 8018c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c66:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8018c6a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8018c6e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8018c72:	9307      	str	r3, [sp, #28]
 8018c74:	f8cd 8018 	str.w	r8, [sp, #24]
 8018c78:	ee08 0a10 	vmov	s16, r0
 8018c7c:	4b9f      	ldr	r3, [pc, #636]	; (8018efc <_printf_float+0x2dc>)
 8018c7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018c82:	f04f 32ff 	mov.w	r2, #4294967295
 8018c86:	f7ee ff31 	bl	8007aec <__aeabi_dcmpun>
 8018c8a:	bb88      	cbnz	r0, 8018cf0 <_printf_float+0xd0>
 8018c8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018c90:	4b9a      	ldr	r3, [pc, #616]	; (8018efc <_printf_float+0x2dc>)
 8018c92:	f04f 32ff 	mov.w	r2, #4294967295
 8018c96:	f7ee ff0b 	bl	8007ab0 <__aeabi_dcmple>
 8018c9a:	bb48      	cbnz	r0, 8018cf0 <_printf_float+0xd0>
 8018c9c:	2200      	movs	r2, #0
 8018c9e:	2300      	movs	r3, #0
 8018ca0:	4640      	mov	r0, r8
 8018ca2:	4649      	mov	r1, r9
 8018ca4:	f7ee fefa 	bl	8007a9c <__aeabi_dcmplt>
 8018ca8:	b110      	cbz	r0, 8018cb0 <_printf_float+0x90>
 8018caa:	232d      	movs	r3, #45	; 0x2d
 8018cac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018cb0:	4b93      	ldr	r3, [pc, #588]	; (8018f00 <_printf_float+0x2e0>)
 8018cb2:	4894      	ldr	r0, [pc, #592]	; (8018f04 <_printf_float+0x2e4>)
 8018cb4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8018cb8:	bf94      	ite	ls
 8018cba:	4698      	movls	r8, r3
 8018cbc:	4680      	movhi	r8, r0
 8018cbe:	2303      	movs	r3, #3
 8018cc0:	6123      	str	r3, [r4, #16]
 8018cc2:	9b05      	ldr	r3, [sp, #20]
 8018cc4:	f023 0204 	bic.w	r2, r3, #4
 8018cc8:	6022      	str	r2, [r4, #0]
 8018cca:	f04f 0900 	mov.w	r9, #0
 8018cce:	9700      	str	r7, [sp, #0]
 8018cd0:	4633      	mov	r3, r6
 8018cd2:	aa0b      	add	r2, sp, #44	; 0x2c
 8018cd4:	4621      	mov	r1, r4
 8018cd6:	4628      	mov	r0, r5
 8018cd8:	f000 f9d8 	bl	801908c <_printf_common>
 8018cdc:	3001      	adds	r0, #1
 8018cde:	f040 8090 	bne.w	8018e02 <_printf_float+0x1e2>
 8018ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8018ce6:	b00d      	add	sp, #52	; 0x34
 8018ce8:	ecbd 8b02 	vpop	{d8}
 8018cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cf0:	4642      	mov	r2, r8
 8018cf2:	464b      	mov	r3, r9
 8018cf4:	4640      	mov	r0, r8
 8018cf6:	4649      	mov	r1, r9
 8018cf8:	f7ee fef8 	bl	8007aec <__aeabi_dcmpun>
 8018cfc:	b140      	cbz	r0, 8018d10 <_printf_float+0xf0>
 8018cfe:	464b      	mov	r3, r9
 8018d00:	2b00      	cmp	r3, #0
 8018d02:	bfbc      	itt	lt
 8018d04:	232d      	movlt	r3, #45	; 0x2d
 8018d06:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8018d0a:	487f      	ldr	r0, [pc, #508]	; (8018f08 <_printf_float+0x2e8>)
 8018d0c:	4b7f      	ldr	r3, [pc, #508]	; (8018f0c <_printf_float+0x2ec>)
 8018d0e:	e7d1      	b.n	8018cb4 <_printf_float+0x94>
 8018d10:	6863      	ldr	r3, [r4, #4]
 8018d12:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8018d16:	9206      	str	r2, [sp, #24]
 8018d18:	1c5a      	adds	r2, r3, #1
 8018d1a:	d13f      	bne.n	8018d9c <_printf_float+0x17c>
 8018d1c:	2306      	movs	r3, #6
 8018d1e:	6063      	str	r3, [r4, #4]
 8018d20:	9b05      	ldr	r3, [sp, #20]
 8018d22:	6861      	ldr	r1, [r4, #4]
 8018d24:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8018d28:	2300      	movs	r3, #0
 8018d2a:	9303      	str	r3, [sp, #12]
 8018d2c:	ab0a      	add	r3, sp, #40	; 0x28
 8018d2e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8018d32:	ab09      	add	r3, sp, #36	; 0x24
 8018d34:	ec49 8b10 	vmov	d0, r8, r9
 8018d38:	9300      	str	r3, [sp, #0]
 8018d3a:	6022      	str	r2, [r4, #0]
 8018d3c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8018d40:	4628      	mov	r0, r5
 8018d42:	f7ff fecd 	bl	8018ae0 <__cvt>
 8018d46:	9b06      	ldr	r3, [sp, #24]
 8018d48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018d4a:	2b47      	cmp	r3, #71	; 0x47
 8018d4c:	4680      	mov	r8, r0
 8018d4e:	d108      	bne.n	8018d62 <_printf_float+0x142>
 8018d50:	1cc8      	adds	r0, r1, #3
 8018d52:	db02      	blt.n	8018d5a <_printf_float+0x13a>
 8018d54:	6863      	ldr	r3, [r4, #4]
 8018d56:	4299      	cmp	r1, r3
 8018d58:	dd41      	ble.n	8018dde <_printf_float+0x1be>
 8018d5a:	f1ab 0b02 	sub.w	fp, fp, #2
 8018d5e:	fa5f fb8b 	uxtb.w	fp, fp
 8018d62:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8018d66:	d820      	bhi.n	8018daa <_printf_float+0x18a>
 8018d68:	3901      	subs	r1, #1
 8018d6a:	465a      	mov	r2, fp
 8018d6c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8018d70:	9109      	str	r1, [sp, #36]	; 0x24
 8018d72:	f7ff ff17 	bl	8018ba4 <__exponent>
 8018d76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018d78:	1813      	adds	r3, r2, r0
 8018d7a:	2a01      	cmp	r2, #1
 8018d7c:	4681      	mov	r9, r0
 8018d7e:	6123      	str	r3, [r4, #16]
 8018d80:	dc02      	bgt.n	8018d88 <_printf_float+0x168>
 8018d82:	6822      	ldr	r2, [r4, #0]
 8018d84:	07d2      	lsls	r2, r2, #31
 8018d86:	d501      	bpl.n	8018d8c <_printf_float+0x16c>
 8018d88:	3301      	adds	r3, #1
 8018d8a:	6123      	str	r3, [r4, #16]
 8018d8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8018d90:	2b00      	cmp	r3, #0
 8018d92:	d09c      	beq.n	8018cce <_printf_float+0xae>
 8018d94:	232d      	movs	r3, #45	; 0x2d
 8018d96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018d9a:	e798      	b.n	8018cce <_printf_float+0xae>
 8018d9c:	9a06      	ldr	r2, [sp, #24]
 8018d9e:	2a47      	cmp	r2, #71	; 0x47
 8018da0:	d1be      	bne.n	8018d20 <_printf_float+0x100>
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	d1bc      	bne.n	8018d20 <_printf_float+0x100>
 8018da6:	2301      	movs	r3, #1
 8018da8:	e7b9      	b.n	8018d1e <_printf_float+0xfe>
 8018daa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8018dae:	d118      	bne.n	8018de2 <_printf_float+0x1c2>
 8018db0:	2900      	cmp	r1, #0
 8018db2:	6863      	ldr	r3, [r4, #4]
 8018db4:	dd0b      	ble.n	8018dce <_printf_float+0x1ae>
 8018db6:	6121      	str	r1, [r4, #16]
 8018db8:	b913      	cbnz	r3, 8018dc0 <_printf_float+0x1a0>
 8018dba:	6822      	ldr	r2, [r4, #0]
 8018dbc:	07d0      	lsls	r0, r2, #31
 8018dbe:	d502      	bpl.n	8018dc6 <_printf_float+0x1a6>
 8018dc0:	3301      	adds	r3, #1
 8018dc2:	440b      	add	r3, r1
 8018dc4:	6123      	str	r3, [r4, #16]
 8018dc6:	65a1      	str	r1, [r4, #88]	; 0x58
 8018dc8:	f04f 0900 	mov.w	r9, #0
 8018dcc:	e7de      	b.n	8018d8c <_printf_float+0x16c>
 8018dce:	b913      	cbnz	r3, 8018dd6 <_printf_float+0x1b6>
 8018dd0:	6822      	ldr	r2, [r4, #0]
 8018dd2:	07d2      	lsls	r2, r2, #31
 8018dd4:	d501      	bpl.n	8018dda <_printf_float+0x1ba>
 8018dd6:	3302      	adds	r3, #2
 8018dd8:	e7f4      	b.n	8018dc4 <_printf_float+0x1a4>
 8018dda:	2301      	movs	r3, #1
 8018ddc:	e7f2      	b.n	8018dc4 <_printf_float+0x1a4>
 8018dde:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8018de2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018de4:	4299      	cmp	r1, r3
 8018de6:	db05      	blt.n	8018df4 <_printf_float+0x1d4>
 8018de8:	6823      	ldr	r3, [r4, #0]
 8018dea:	6121      	str	r1, [r4, #16]
 8018dec:	07d8      	lsls	r0, r3, #31
 8018dee:	d5ea      	bpl.n	8018dc6 <_printf_float+0x1a6>
 8018df0:	1c4b      	adds	r3, r1, #1
 8018df2:	e7e7      	b.n	8018dc4 <_printf_float+0x1a4>
 8018df4:	2900      	cmp	r1, #0
 8018df6:	bfd4      	ite	le
 8018df8:	f1c1 0202 	rsble	r2, r1, #2
 8018dfc:	2201      	movgt	r2, #1
 8018dfe:	4413      	add	r3, r2
 8018e00:	e7e0      	b.n	8018dc4 <_printf_float+0x1a4>
 8018e02:	6823      	ldr	r3, [r4, #0]
 8018e04:	055a      	lsls	r2, r3, #21
 8018e06:	d407      	bmi.n	8018e18 <_printf_float+0x1f8>
 8018e08:	6923      	ldr	r3, [r4, #16]
 8018e0a:	4642      	mov	r2, r8
 8018e0c:	4631      	mov	r1, r6
 8018e0e:	4628      	mov	r0, r5
 8018e10:	47b8      	blx	r7
 8018e12:	3001      	adds	r0, #1
 8018e14:	d12c      	bne.n	8018e70 <_printf_float+0x250>
 8018e16:	e764      	b.n	8018ce2 <_printf_float+0xc2>
 8018e18:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8018e1c:	f240 80e0 	bls.w	8018fe0 <_printf_float+0x3c0>
 8018e20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8018e24:	2200      	movs	r2, #0
 8018e26:	2300      	movs	r3, #0
 8018e28:	f7ee fe2e 	bl	8007a88 <__aeabi_dcmpeq>
 8018e2c:	2800      	cmp	r0, #0
 8018e2e:	d034      	beq.n	8018e9a <_printf_float+0x27a>
 8018e30:	4a37      	ldr	r2, [pc, #220]	; (8018f10 <_printf_float+0x2f0>)
 8018e32:	2301      	movs	r3, #1
 8018e34:	4631      	mov	r1, r6
 8018e36:	4628      	mov	r0, r5
 8018e38:	47b8      	blx	r7
 8018e3a:	3001      	adds	r0, #1
 8018e3c:	f43f af51 	beq.w	8018ce2 <_printf_float+0xc2>
 8018e40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8018e44:	429a      	cmp	r2, r3
 8018e46:	db02      	blt.n	8018e4e <_printf_float+0x22e>
 8018e48:	6823      	ldr	r3, [r4, #0]
 8018e4a:	07d8      	lsls	r0, r3, #31
 8018e4c:	d510      	bpl.n	8018e70 <_printf_float+0x250>
 8018e4e:	ee18 3a10 	vmov	r3, s16
 8018e52:	4652      	mov	r2, sl
 8018e54:	4631      	mov	r1, r6
 8018e56:	4628      	mov	r0, r5
 8018e58:	47b8      	blx	r7
 8018e5a:	3001      	adds	r0, #1
 8018e5c:	f43f af41 	beq.w	8018ce2 <_printf_float+0xc2>
 8018e60:	f04f 0800 	mov.w	r8, #0
 8018e64:	f104 091a 	add.w	r9, r4, #26
 8018e68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018e6a:	3b01      	subs	r3, #1
 8018e6c:	4543      	cmp	r3, r8
 8018e6e:	dc09      	bgt.n	8018e84 <_printf_float+0x264>
 8018e70:	6823      	ldr	r3, [r4, #0]
 8018e72:	079b      	lsls	r3, r3, #30
 8018e74:	f100 8105 	bmi.w	8019082 <_printf_float+0x462>
 8018e78:	68e0      	ldr	r0, [r4, #12]
 8018e7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018e7c:	4298      	cmp	r0, r3
 8018e7e:	bfb8      	it	lt
 8018e80:	4618      	movlt	r0, r3
 8018e82:	e730      	b.n	8018ce6 <_printf_float+0xc6>
 8018e84:	2301      	movs	r3, #1
 8018e86:	464a      	mov	r2, r9
 8018e88:	4631      	mov	r1, r6
 8018e8a:	4628      	mov	r0, r5
 8018e8c:	47b8      	blx	r7
 8018e8e:	3001      	adds	r0, #1
 8018e90:	f43f af27 	beq.w	8018ce2 <_printf_float+0xc2>
 8018e94:	f108 0801 	add.w	r8, r8, #1
 8018e98:	e7e6      	b.n	8018e68 <_printf_float+0x248>
 8018e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018e9c:	2b00      	cmp	r3, #0
 8018e9e:	dc39      	bgt.n	8018f14 <_printf_float+0x2f4>
 8018ea0:	4a1b      	ldr	r2, [pc, #108]	; (8018f10 <_printf_float+0x2f0>)
 8018ea2:	2301      	movs	r3, #1
 8018ea4:	4631      	mov	r1, r6
 8018ea6:	4628      	mov	r0, r5
 8018ea8:	47b8      	blx	r7
 8018eaa:	3001      	adds	r0, #1
 8018eac:	f43f af19 	beq.w	8018ce2 <_printf_float+0xc2>
 8018eb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8018eb4:	4313      	orrs	r3, r2
 8018eb6:	d102      	bne.n	8018ebe <_printf_float+0x29e>
 8018eb8:	6823      	ldr	r3, [r4, #0]
 8018eba:	07d9      	lsls	r1, r3, #31
 8018ebc:	d5d8      	bpl.n	8018e70 <_printf_float+0x250>
 8018ebe:	ee18 3a10 	vmov	r3, s16
 8018ec2:	4652      	mov	r2, sl
 8018ec4:	4631      	mov	r1, r6
 8018ec6:	4628      	mov	r0, r5
 8018ec8:	47b8      	blx	r7
 8018eca:	3001      	adds	r0, #1
 8018ecc:	f43f af09 	beq.w	8018ce2 <_printf_float+0xc2>
 8018ed0:	f04f 0900 	mov.w	r9, #0
 8018ed4:	f104 0a1a 	add.w	sl, r4, #26
 8018ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018eda:	425b      	negs	r3, r3
 8018edc:	454b      	cmp	r3, r9
 8018ede:	dc01      	bgt.n	8018ee4 <_printf_float+0x2c4>
 8018ee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018ee2:	e792      	b.n	8018e0a <_printf_float+0x1ea>
 8018ee4:	2301      	movs	r3, #1
 8018ee6:	4652      	mov	r2, sl
 8018ee8:	4631      	mov	r1, r6
 8018eea:	4628      	mov	r0, r5
 8018eec:	47b8      	blx	r7
 8018eee:	3001      	adds	r0, #1
 8018ef0:	f43f aef7 	beq.w	8018ce2 <_printf_float+0xc2>
 8018ef4:	f109 0901 	add.w	r9, r9, #1
 8018ef8:	e7ee      	b.n	8018ed8 <_printf_float+0x2b8>
 8018efa:	bf00      	nop
 8018efc:	7fefffff 	.word	0x7fefffff
 8018f00:	0801dde4 	.word	0x0801dde4
 8018f04:	0801dde8 	.word	0x0801dde8
 8018f08:	0801ddf0 	.word	0x0801ddf0
 8018f0c:	0801ddec 	.word	0x0801ddec
 8018f10:	0801ddf4 	.word	0x0801ddf4
 8018f14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018f16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8018f18:	429a      	cmp	r2, r3
 8018f1a:	bfa8      	it	ge
 8018f1c:	461a      	movge	r2, r3
 8018f1e:	2a00      	cmp	r2, #0
 8018f20:	4691      	mov	r9, r2
 8018f22:	dc37      	bgt.n	8018f94 <_printf_float+0x374>
 8018f24:	f04f 0b00 	mov.w	fp, #0
 8018f28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018f2c:	f104 021a 	add.w	r2, r4, #26
 8018f30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8018f32:	9305      	str	r3, [sp, #20]
 8018f34:	eba3 0309 	sub.w	r3, r3, r9
 8018f38:	455b      	cmp	r3, fp
 8018f3a:	dc33      	bgt.n	8018fa4 <_printf_float+0x384>
 8018f3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8018f40:	429a      	cmp	r2, r3
 8018f42:	db3b      	blt.n	8018fbc <_printf_float+0x39c>
 8018f44:	6823      	ldr	r3, [r4, #0]
 8018f46:	07da      	lsls	r2, r3, #31
 8018f48:	d438      	bmi.n	8018fbc <_printf_float+0x39c>
 8018f4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018f4c:	9a05      	ldr	r2, [sp, #20]
 8018f4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018f50:	1a9a      	subs	r2, r3, r2
 8018f52:	eba3 0901 	sub.w	r9, r3, r1
 8018f56:	4591      	cmp	r9, r2
 8018f58:	bfa8      	it	ge
 8018f5a:	4691      	movge	r9, r2
 8018f5c:	f1b9 0f00 	cmp.w	r9, #0
 8018f60:	dc35      	bgt.n	8018fce <_printf_float+0x3ae>
 8018f62:	f04f 0800 	mov.w	r8, #0
 8018f66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018f6a:	f104 0a1a 	add.w	sl, r4, #26
 8018f6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8018f72:	1a9b      	subs	r3, r3, r2
 8018f74:	eba3 0309 	sub.w	r3, r3, r9
 8018f78:	4543      	cmp	r3, r8
 8018f7a:	f77f af79 	ble.w	8018e70 <_printf_float+0x250>
 8018f7e:	2301      	movs	r3, #1
 8018f80:	4652      	mov	r2, sl
 8018f82:	4631      	mov	r1, r6
 8018f84:	4628      	mov	r0, r5
 8018f86:	47b8      	blx	r7
 8018f88:	3001      	adds	r0, #1
 8018f8a:	f43f aeaa 	beq.w	8018ce2 <_printf_float+0xc2>
 8018f8e:	f108 0801 	add.w	r8, r8, #1
 8018f92:	e7ec      	b.n	8018f6e <_printf_float+0x34e>
 8018f94:	4613      	mov	r3, r2
 8018f96:	4631      	mov	r1, r6
 8018f98:	4642      	mov	r2, r8
 8018f9a:	4628      	mov	r0, r5
 8018f9c:	47b8      	blx	r7
 8018f9e:	3001      	adds	r0, #1
 8018fa0:	d1c0      	bne.n	8018f24 <_printf_float+0x304>
 8018fa2:	e69e      	b.n	8018ce2 <_printf_float+0xc2>
 8018fa4:	2301      	movs	r3, #1
 8018fa6:	4631      	mov	r1, r6
 8018fa8:	4628      	mov	r0, r5
 8018faa:	9205      	str	r2, [sp, #20]
 8018fac:	47b8      	blx	r7
 8018fae:	3001      	adds	r0, #1
 8018fb0:	f43f ae97 	beq.w	8018ce2 <_printf_float+0xc2>
 8018fb4:	9a05      	ldr	r2, [sp, #20]
 8018fb6:	f10b 0b01 	add.w	fp, fp, #1
 8018fba:	e7b9      	b.n	8018f30 <_printf_float+0x310>
 8018fbc:	ee18 3a10 	vmov	r3, s16
 8018fc0:	4652      	mov	r2, sl
 8018fc2:	4631      	mov	r1, r6
 8018fc4:	4628      	mov	r0, r5
 8018fc6:	47b8      	blx	r7
 8018fc8:	3001      	adds	r0, #1
 8018fca:	d1be      	bne.n	8018f4a <_printf_float+0x32a>
 8018fcc:	e689      	b.n	8018ce2 <_printf_float+0xc2>
 8018fce:	9a05      	ldr	r2, [sp, #20]
 8018fd0:	464b      	mov	r3, r9
 8018fd2:	4442      	add	r2, r8
 8018fd4:	4631      	mov	r1, r6
 8018fd6:	4628      	mov	r0, r5
 8018fd8:	47b8      	blx	r7
 8018fda:	3001      	adds	r0, #1
 8018fdc:	d1c1      	bne.n	8018f62 <_printf_float+0x342>
 8018fde:	e680      	b.n	8018ce2 <_printf_float+0xc2>
 8018fe0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018fe2:	2a01      	cmp	r2, #1
 8018fe4:	dc01      	bgt.n	8018fea <_printf_float+0x3ca>
 8018fe6:	07db      	lsls	r3, r3, #31
 8018fe8:	d538      	bpl.n	801905c <_printf_float+0x43c>
 8018fea:	2301      	movs	r3, #1
 8018fec:	4642      	mov	r2, r8
 8018fee:	4631      	mov	r1, r6
 8018ff0:	4628      	mov	r0, r5
 8018ff2:	47b8      	blx	r7
 8018ff4:	3001      	adds	r0, #1
 8018ff6:	f43f ae74 	beq.w	8018ce2 <_printf_float+0xc2>
 8018ffa:	ee18 3a10 	vmov	r3, s16
 8018ffe:	4652      	mov	r2, sl
 8019000:	4631      	mov	r1, r6
 8019002:	4628      	mov	r0, r5
 8019004:	47b8      	blx	r7
 8019006:	3001      	adds	r0, #1
 8019008:	f43f ae6b 	beq.w	8018ce2 <_printf_float+0xc2>
 801900c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019010:	2200      	movs	r2, #0
 8019012:	2300      	movs	r3, #0
 8019014:	f7ee fd38 	bl	8007a88 <__aeabi_dcmpeq>
 8019018:	b9d8      	cbnz	r0, 8019052 <_printf_float+0x432>
 801901a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801901c:	f108 0201 	add.w	r2, r8, #1
 8019020:	3b01      	subs	r3, #1
 8019022:	4631      	mov	r1, r6
 8019024:	4628      	mov	r0, r5
 8019026:	47b8      	blx	r7
 8019028:	3001      	adds	r0, #1
 801902a:	d10e      	bne.n	801904a <_printf_float+0x42a>
 801902c:	e659      	b.n	8018ce2 <_printf_float+0xc2>
 801902e:	2301      	movs	r3, #1
 8019030:	4652      	mov	r2, sl
 8019032:	4631      	mov	r1, r6
 8019034:	4628      	mov	r0, r5
 8019036:	47b8      	blx	r7
 8019038:	3001      	adds	r0, #1
 801903a:	f43f ae52 	beq.w	8018ce2 <_printf_float+0xc2>
 801903e:	f108 0801 	add.w	r8, r8, #1
 8019042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019044:	3b01      	subs	r3, #1
 8019046:	4543      	cmp	r3, r8
 8019048:	dcf1      	bgt.n	801902e <_printf_float+0x40e>
 801904a:	464b      	mov	r3, r9
 801904c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8019050:	e6dc      	b.n	8018e0c <_printf_float+0x1ec>
 8019052:	f04f 0800 	mov.w	r8, #0
 8019056:	f104 0a1a 	add.w	sl, r4, #26
 801905a:	e7f2      	b.n	8019042 <_printf_float+0x422>
 801905c:	2301      	movs	r3, #1
 801905e:	4642      	mov	r2, r8
 8019060:	e7df      	b.n	8019022 <_printf_float+0x402>
 8019062:	2301      	movs	r3, #1
 8019064:	464a      	mov	r2, r9
 8019066:	4631      	mov	r1, r6
 8019068:	4628      	mov	r0, r5
 801906a:	47b8      	blx	r7
 801906c:	3001      	adds	r0, #1
 801906e:	f43f ae38 	beq.w	8018ce2 <_printf_float+0xc2>
 8019072:	f108 0801 	add.w	r8, r8, #1
 8019076:	68e3      	ldr	r3, [r4, #12]
 8019078:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801907a:	1a5b      	subs	r3, r3, r1
 801907c:	4543      	cmp	r3, r8
 801907e:	dcf0      	bgt.n	8019062 <_printf_float+0x442>
 8019080:	e6fa      	b.n	8018e78 <_printf_float+0x258>
 8019082:	f04f 0800 	mov.w	r8, #0
 8019086:	f104 0919 	add.w	r9, r4, #25
 801908a:	e7f4      	b.n	8019076 <_printf_float+0x456>

0801908c <_printf_common>:
 801908c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019090:	4616      	mov	r6, r2
 8019092:	4699      	mov	r9, r3
 8019094:	688a      	ldr	r2, [r1, #8]
 8019096:	690b      	ldr	r3, [r1, #16]
 8019098:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801909c:	4293      	cmp	r3, r2
 801909e:	bfb8      	it	lt
 80190a0:	4613      	movlt	r3, r2
 80190a2:	6033      	str	r3, [r6, #0]
 80190a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80190a8:	4607      	mov	r7, r0
 80190aa:	460c      	mov	r4, r1
 80190ac:	b10a      	cbz	r2, 80190b2 <_printf_common+0x26>
 80190ae:	3301      	adds	r3, #1
 80190b0:	6033      	str	r3, [r6, #0]
 80190b2:	6823      	ldr	r3, [r4, #0]
 80190b4:	0699      	lsls	r1, r3, #26
 80190b6:	bf42      	ittt	mi
 80190b8:	6833      	ldrmi	r3, [r6, #0]
 80190ba:	3302      	addmi	r3, #2
 80190bc:	6033      	strmi	r3, [r6, #0]
 80190be:	6825      	ldr	r5, [r4, #0]
 80190c0:	f015 0506 	ands.w	r5, r5, #6
 80190c4:	d106      	bne.n	80190d4 <_printf_common+0x48>
 80190c6:	f104 0a19 	add.w	sl, r4, #25
 80190ca:	68e3      	ldr	r3, [r4, #12]
 80190cc:	6832      	ldr	r2, [r6, #0]
 80190ce:	1a9b      	subs	r3, r3, r2
 80190d0:	42ab      	cmp	r3, r5
 80190d2:	dc26      	bgt.n	8019122 <_printf_common+0x96>
 80190d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80190d8:	1e13      	subs	r3, r2, #0
 80190da:	6822      	ldr	r2, [r4, #0]
 80190dc:	bf18      	it	ne
 80190de:	2301      	movne	r3, #1
 80190e0:	0692      	lsls	r2, r2, #26
 80190e2:	d42b      	bmi.n	801913c <_printf_common+0xb0>
 80190e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80190e8:	4649      	mov	r1, r9
 80190ea:	4638      	mov	r0, r7
 80190ec:	47c0      	blx	r8
 80190ee:	3001      	adds	r0, #1
 80190f0:	d01e      	beq.n	8019130 <_printf_common+0xa4>
 80190f2:	6823      	ldr	r3, [r4, #0]
 80190f4:	68e5      	ldr	r5, [r4, #12]
 80190f6:	6832      	ldr	r2, [r6, #0]
 80190f8:	f003 0306 	and.w	r3, r3, #6
 80190fc:	2b04      	cmp	r3, #4
 80190fe:	bf08      	it	eq
 8019100:	1aad      	subeq	r5, r5, r2
 8019102:	68a3      	ldr	r3, [r4, #8]
 8019104:	6922      	ldr	r2, [r4, #16]
 8019106:	bf0c      	ite	eq
 8019108:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801910c:	2500      	movne	r5, #0
 801910e:	4293      	cmp	r3, r2
 8019110:	bfc4      	itt	gt
 8019112:	1a9b      	subgt	r3, r3, r2
 8019114:	18ed      	addgt	r5, r5, r3
 8019116:	2600      	movs	r6, #0
 8019118:	341a      	adds	r4, #26
 801911a:	42b5      	cmp	r5, r6
 801911c:	d11a      	bne.n	8019154 <_printf_common+0xc8>
 801911e:	2000      	movs	r0, #0
 8019120:	e008      	b.n	8019134 <_printf_common+0xa8>
 8019122:	2301      	movs	r3, #1
 8019124:	4652      	mov	r2, sl
 8019126:	4649      	mov	r1, r9
 8019128:	4638      	mov	r0, r7
 801912a:	47c0      	blx	r8
 801912c:	3001      	adds	r0, #1
 801912e:	d103      	bne.n	8019138 <_printf_common+0xac>
 8019130:	f04f 30ff 	mov.w	r0, #4294967295
 8019134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019138:	3501      	adds	r5, #1
 801913a:	e7c6      	b.n	80190ca <_printf_common+0x3e>
 801913c:	18e1      	adds	r1, r4, r3
 801913e:	1c5a      	adds	r2, r3, #1
 8019140:	2030      	movs	r0, #48	; 0x30
 8019142:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019146:	4422      	add	r2, r4
 8019148:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801914c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019150:	3302      	adds	r3, #2
 8019152:	e7c7      	b.n	80190e4 <_printf_common+0x58>
 8019154:	2301      	movs	r3, #1
 8019156:	4622      	mov	r2, r4
 8019158:	4649      	mov	r1, r9
 801915a:	4638      	mov	r0, r7
 801915c:	47c0      	blx	r8
 801915e:	3001      	adds	r0, #1
 8019160:	d0e6      	beq.n	8019130 <_printf_common+0xa4>
 8019162:	3601      	adds	r6, #1
 8019164:	e7d9      	b.n	801911a <_printf_common+0x8e>
	...

08019168 <_printf_i>:
 8019168:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801916c:	7e0f      	ldrb	r7, [r1, #24]
 801916e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019170:	2f78      	cmp	r7, #120	; 0x78
 8019172:	4691      	mov	r9, r2
 8019174:	4680      	mov	r8, r0
 8019176:	460c      	mov	r4, r1
 8019178:	469a      	mov	sl, r3
 801917a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801917e:	d807      	bhi.n	8019190 <_printf_i+0x28>
 8019180:	2f62      	cmp	r7, #98	; 0x62
 8019182:	d80a      	bhi.n	801919a <_printf_i+0x32>
 8019184:	2f00      	cmp	r7, #0
 8019186:	f000 80d8 	beq.w	801933a <_printf_i+0x1d2>
 801918a:	2f58      	cmp	r7, #88	; 0x58
 801918c:	f000 80a3 	beq.w	80192d6 <_printf_i+0x16e>
 8019190:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019194:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019198:	e03a      	b.n	8019210 <_printf_i+0xa8>
 801919a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801919e:	2b15      	cmp	r3, #21
 80191a0:	d8f6      	bhi.n	8019190 <_printf_i+0x28>
 80191a2:	a101      	add	r1, pc, #4	; (adr r1, 80191a8 <_printf_i+0x40>)
 80191a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80191a8:	08019201 	.word	0x08019201
 80191ac:	08019215 	.word	0x08019215
 80191b0:	08019191 	.word	0x08019191
 80191b4:	08019191 	.word	0x08019191
 80191b8:	08019191 	.word	0x08019191
 80191bc:	08019191 	.word	0x08019191
 80191c0:	08019215 	.word	0x08019215
 80191c4:	08019191 	.word	0x08019191
 80191c8:	08019191 	.word	0x08019191
 80191cc:	08019191 	.word	0x08019191
 80191d0:	08019191 	.word	0x08019191
 80191d4:	08019321 	.word	0x08019321
 80191d8:	08019245 	.word	0x08019245
 80191dc:	08019303 	.word	0x08019303
 80191e0:	08019191 	.word	0x08019191
 80191e4:	08019191 	.word	0x08019191
 80191e8:	08019343 	.word	0x08019343
 80191ec:	08019191 	.word	0x08019191
 80191f0:	08019245 	.word	0x08019245
 80191f4:	08019191 	.word	0x08019191
 80191f8:	08019191 	.word	0x08019191
 80191fc:	0801930b 	.word	0x0801930b
 8019200:	682b      	ldr	r3, [r5, #0]
 8019202:	1d1a      	adds	r2, r3, #4
 8019204:	681b      	ldr	r3, [r3, #0]
 8019206:	602a      	str	r2, [r5, #0]
 8019208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801920c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019210:	2301      	movs	r3, #1
 8019212:	e0a3      	b.n	801935c <_printf_i+0x1f4>
 8019214:	6820      	ldr	r0, [r4, #0]
 8019216:	6829      	ldr	r1, [r5, #0]
 8019218:	0606      	lsls	r6, r0, #24
 801921a:	f101 0304 	add.w	r3, r1, #4
 801921e:	d50a      	bpl.n	8019236 <_printf_i+0xce>
 8019220:	680e      	ldr	r6, [r1, #0]
 8019222:	602b      	str	r3, [r5, #0]
 8019224:	2e00      	cmp	r6, #0
 8019226:	da03      	bge.n	8019230 <_printf_i+0xc8>
 8019228:	232d      	movs	r3, #45	; 0x2d
 801922a:	4276      	negs	r6, r6
 801922c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019230:	485e      	ldr	r0, [pc, #376]	; (80193ac <_printf_i+0x244>)
 8019232:	230a      	movs	r3, #10
 8019234:	e019      	b.n	801926a <_printf_i+0x102>
 8019236:	680e      	ldr	r6, [r1, #0]
 8019238:	602b      	str	r3, [r5, #0]
 801923a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801923e:	bf18      	it	ne
 8019240:	b236      	sxthne	r6, r6
 8019242:	e7ef      	b.n	8019224 <_printf_i+0xbc>
 8019244:	682b      	ldr	r3, [r5, #0]
 8019246:	6820      	ldr	r0, [r4, #0]
 8019248:	1d19      	adds	r1, r3, #4
 801924a:	6029      	str	r1, [r5, #0]
 801924c:	0601      	lsls	r1, r0, #24
 801924e:	d501      	bpl.n	8019254 <_printf_i+0xec>
 8019250:	681e      	ldr	r6, [r3, #0]
 8019252:	e002      	b.n	801925a <_printf_i+0xf2>
 8019254:	0646      	lsls	r6, r0, #25
 8019256:	d5fb      	bpl.n	8019250 <_printf_i+0xe8>
 8019258:	881e      	ldrh	r6, [r3, #0]
 801925a:	4854      	ldr	r0, [pc, #336]	; (80193ac <_printf_i+0x244>)
 801925c:	2f6f      	cmp	r7, #111	; 0x6f
 801925e:	bf0c      	ite	eq
 8019260:	2308      	moveq	r3, #8
 8019262:	230a      	movne	r3, #10
 8019264:	2100      	movs	r1, #0
 8019266:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801926a:	6865      	ldr	r5, [r4, #4]
 801926c:	60a5      	str	r5, [r4, #8]
 801926e:	2d00      	cmp	r5, #0
 8019270:	bfa2      	ittt	ge
 8019272:	6821      	ldrge	r1, [r4, #0]
 8019274:	f021 0104 	bicge.w	r1, r1, #4
 8019278:	6021      	strge	r1, [r4, #0]
 801927a:	b90e      	cbnz	r6, 8019280 <_printf_i+0x118>
 801927c:	2d00      	cmp	r5, #0
 801927e:	d04d      	beq.n	801931c <_printf_i+0x1b4>
 8019280:	4615      	mov	r5, r2
 8019282:	fbb6 f1f3 	udiv	r1, r6, r3
 8019286:	fb03 6711 	mls	r7, r3, r1, r6
 801928a:	5dc7      	ldrb	r7, [r0, r7]
 801928c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019290:	4637      	mov	r7, r6
 8019292:	42bb      	cmp	r3, r7
 8019294:	460e      	mov	r6, r1
 8019296:	d9f4      	bls.n	8019282 <_printf_i+0x11a>
 8019298:	2b08      	cmp	r3, #8
 801929a:	d10b      	bne.n	80192b4 <_printf_i+0x14c>
 801929c:	6823      	ldr	r3, [r4, #0]
 801929e:	07de      	lsls	r6, r3, #31
 80192a0:	d508      	bpl.n	80192b4 <_printf_i+0x14c>
 80192a2:	6923      	ldr	r3, [r4, #16]
 80192a4:	6861      	ldr	r1, [r4, #4]
 80192a6:	4299      	cmp	r1, r3
 80192a8:	bfde      	ittt	le
 80192aa:	2330      	movle	r3, #48	; 0x30
 80192ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80192b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80192b4:	1b52      	subs	r2, r2, r5
 80192b6:	6122      	str	r2, [r4, #16]
 80192b8:	f8cd a000 	str.w	sl, [sp]
 80192bc:	464b      	mov	r3, r9
 80192be:	aa03      	add	r2, sp, #12
 80192c0:	4621      	mov	r1, r4
 80192c2:	4640      	mov	r0, r8
 80192c4:	f7ff fee2 	bl	801908c <_printf_common>
 80192c8:	3001      	adds	r0, #1
 80192ca:	d14c      	bne.n	8019366 <_printf_i+0x1fe>
 80192cc:	f04f 30ff 	mov.w	r0, #4294967295
 80192d0:	b004      	add	sp, #16
 80192d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80192d6:	4835      	ldr	r0, [pc, #212]	; (80193ac <_printf_i+0x244>)
 80192d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80192dc:	6829      	ldr	r1, [r5, #0]
 80192de:	6823      	ldr	r3, [r4, #0]
 80192e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80192e4:	6029      	str	r1, [r5, #0]
 80192e6:	061d      	lsls	r5, r3, #24
 80192e8:	d514      	bpl.n	8019314 <_printf_i+0x1ac>
 80192ea:	07df      	lsls	r7, r3, #31
 80192ec:	bf44      	itt	mi
 80192ee:	f043 0320 	orrmi.w	r3, r3, #32
 80192f2:	6023      	strmi	r3, [r4, #0]
 80192f4:	b91e      	cbnz	r6, 80192fe <_printf_i+0x196>
 80192f6:	6823      	ldr	r3, [r4, #0]
 80192f8:	f023 0320 	bic.w	r3, r3, #32
 80192fc:	6023      	str	r3, [r4, #0]
 80192fe:	2310      	movs	r3, #16
 8019300:	e7b0      	b.n	8019264 <_printf_i+0xfc>
 8019302:	6823      	ldr	r3, [r4, #0]
 8019304:	f043 0320 	orr.w	r3, r3, #32
 8019308:	6023      	str	r3, [r4, #0]
 801930a:	2378      	movs	r3, #120	; 0x78
 801930c:	4828      	ldr	r0, [pc, #160]	; (80193b0 <_printf_i+0x248>)
 801930e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019312:	e7e3      	b.n	80192dc <_printf_i+0x174>
 8019314:	0659      	lsls	r1, r3, #25
 8019316:	bf48      	it	mi
 8019318:	b2b6      	uxthmi	r6, r6
 801931a:	e7e6      	b.n	80192ea <_printf_i+0x182>
 801931c:	4615      	mov	r5, r2
 801931e:	e7bb      	b.n	8019298 <_printf_i+0x130>
 8019320:	682b      	ldr	r3, [r5, #0]
 8019322:	6826      	ldr	r6, [r4, #0]
 8019324:	6961      	ldr	r1, [r4, #20]
 8019326:	1d18      	adds	r0, r3, #4
 8019328:	6028      	str	r0, [r5, #0]
 801932a:	0635      	lsls	r5, r6, #24
 801932c:	681b      	ldr	r3, [r3, #0]
 801932e:	d501      	bpl.n	8019334 <_printf_i+0x1cc>
 8019330:	6019      	str	r1, [r3, #0]
 8019332:	e002      	b.n	801933a <_printf_i+0x1d2>
 8019334:	0670      	lsls	r0, r6, #25
 8019336:	d5fb      	bpl.n	8019330 <_printf_i+0x1c8>
 8019338:	8019      	strh	r1, [r3, #0]
 801933a:	2300      	movs	r3, #0
 801933c:	6123      	str	r3, [r4, #16]
 801933e:	4615      	mov	r5, r2
 8019340:	e7ba      	b.n	80192b8 <_printf_i+0x150>
 8019342:	682b      	ldr	r3, [r5, #0]
 8019344:	1d1a      	adds	r2, r3, #4
 8019346:	602a      	str	r2, [r5, #0]
 8019348:	681d      	ldr	r5, [r3, #0]
 801934a:	6862      	ldr	r2, [r4, #4]
 801934c:	2100      	movs	r1, #0
 801934e:	4628      	mov	r0, r5
 8019350:	f7ed ff26 	bl	80071a0 <memchr>
 8019354:	b108      	cbz	r0, 801935a <_printf_i+0x1f2>
 8019356:	1b40      	subs	r0, r0, r5
 8019358:	6060      	str	r0, [r4, #4]
 801935a:	6863      	ldr	r3, [r4, #4]
 801935c:	6123      	str	r3, [r4, #16]
 801935e:	2300      	movs	r3, #0
 8019360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019364:	e7a8      	b.n	80192b8 <_printf_i+0x150>
 8019366:	6923      	ldr	r3, [r4, #16]
 8019368:	462a      	mov	r2, r5
 801936a:	4649      	mov	r1, r9
 801936c:	4640      	mov	r0, r8
 801936e:	47d0      	blx	sl
 8019370:	3001      	adds	r0, #1
 8019372:	d0ab      	beq.n	80192cc <_printf_i+0x164>
 8019374:	6823      	ldr	r3, [r4, #0]
 8019376:	079b      	lsls	r3, r3, #30
 8019378:	d413      	bmi.n	80193a2 <_printf_i+0x23a>
 801937a:	68e0      	ldr	r0, [r4, #12]
 801937c:	9b03      	ldr	r3, [sp, #12]
 801937e:	4298      	cmp	r0, r3
 8019380:	bfb8      	it	lt
 8019382:	4618      	movlt	r0, r3
 8019384:	e7a4      	b.n	80192d0 <_printf_i+0x168>
 8019386:	2301      	movs	r3, #1
 8019388:	4632      	mov	r2, r6
 801938a:	4649      	mov	r1, r9
 801938c:	4640      	mov	r0, r8
 801938e:	47d0      	blx	sl
 8019390:	3001      	adds	r0, #1
 8019392:	d09b      	beq.n	80192cc <_printf_i+0x164>
 8019394:	3501      	adds	r5, #1
 8019396:	68e3      	ldr	r3, [r4, #12]
 8019398:	9903      	ldr	r1, [sp, #12]
 801939a:	1a5b      	subs	r3, r3, r1
 801939c:	42ab      	cmp	r3, r5
 801939e:	dcf2      	bgt.n	8019386 <_printf_i+0x21e>
 80193a0:	e7eb      	b.n	801937a <_printf_i+0x212>
 80193a2:	2500      	movs	r5, #0
 80193a4:	f104 0619 	add.w	r6, r4, #25
 80193a8:	e7f5      	b.n	8019396 <_printf_i+0x22e>
 80193aa:	bf00      	nop
 80193ac:	0801ddf6 	.word	0x0801ddf6
 80193b0:	0801de07 	.word	0x0801de07

080193b4 <_scanf_float>:
 80193b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193b8:	b087      	sub	sp, #28
 80193ba:	4617      	mov	r7, r2
 80193bc:	9303      	str	r3, [sp, #12]
 80193be:	688b      	ldr	r3, [r1, #8]
 80193c0:	1e5a      	subs	r2, r3, #1
 80193c2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80193c6:	bf83      	ittte	hi
 80193c8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80193cc:	195b      	addhi	r3, r3, r5
 80193ce:	9302      	strhi	r3, [sp, #8]
 80193d0:	2300      	movls	r3, #0
 80193d2:	bf86      	itte	hi
 80193d4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80193d8:	608b      	strhi	r3, [r1, #8]
 80193da:	9302      	strls	r3, [sp, #8]
 80193dc:	680b      	ldr	r3, [r1, #0]
 80193de:	468b      	mov	fp, r1
 80193e0:	2500      	movs	r5, #0
 80193e2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80193e6:	f84b 3b1c 	str.w	r3, [fp], #28
 80193ea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80193ee:	4680      	mov	r8, r0
 80193f0:	460c      	mov	r4, r1
 80193f2:	465e      	mov	r6, fp
 80193f4:	46aa      	mov	sl, r5
 80193f6:	46a9      	mov	r9, r5
 80193f8:	9501      	str	r5, [sp, #4]
 80193fa:	68a2      	ldr	r2, [r4, #8]
 80193fc:	b152      	cbz	r2, 8019414 <_scanf_float+0x60>
 80193fe:	683b      	ldr	r3, [r7, #0]
 8019400:	781b      	ldrb	r3, [r3, #0]
 8019402:	2b4e      	cmp	r3, #78	; 0x4e
 8019404:	d864      	bhi.n	80194d0 <_scanf_float+0x11c>
 8019406:	2b40      	cmp	r3, #64	; 0x40
 8019408:	d83c      	bhi.n	8019484 <_scanf_float+0xd0>
 801940a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801940e:	b2c8      	uxtb	r0, r1
 8019410:	280e      	cmp	r0, #14
 8019412:	d93a      	bls.n	801948a <_scanf_float+0xd6>
 8019414:	f1b9 0f00 	cmp.w	r9, #0
 8019418:	d003      	beq.n	8019422 <_scanf_float+0x6e>
 801941a:	6823      	ldr	r3, [r4, #0]
 801941c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8019420:	6023      	str	r3, [r4, #0]
 8019422:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019426:	f1ba 0f01 	cmp.w	sl, #1
 801942a:	f200 8113 	bhi.w	8019654 <_scanf_float+0x2a0>
 801942e:	455e      	cmp	r6, fp
 8019430:	f200 8105 	bhi.w	801963e <_scanf_float+0x28a>
 8019434:	2501      	movs	r5, #1
 8019436:	4628      	mov	r0, r5
 8019438:	b007      	add	sp, #28
 801943a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801943e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8019442:	2a0d      	cmp	r2, #13
 8019444:	d8e6      	bhi.n	8019414 <_scanf_float+0x60>
 8019446:	a101      	add	r1, pc, #4	; (adr r1, 801944c <_scanf_float+0x98>)
 8019448:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801944c:	0801958b 	.word	0x0801958b
 8019450:	08019415 	.word	0x08019415
 8019454:	08019415 	.word	0x08019415
 8019458:	08019415 	.word	0x08019415
 801945c:	080195eb 	.word	0x080195eb
 8019460:	080195c3 	.word	0x080195c3
 8019464:	08019415 	.word	0x08019415
 8019468:	08019415 	.word	0x08019415
 801946c:	08019599 	.word	0x08019599
 8019470:	08019415 	.word	0x08019415
 8019474:	08019415 	.word	0x08019415
 8019478:	08019415 	.word	0x08019415
 801947c:	08019415 	.word	0x08019415
 8019480:	08019551 	.word	0x08019551
 8019484:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8019488:	e7db      	b.n	8019442 <_scanf_float+0x8e>
 801948a:	290e      	cmp	r1, #14
 801948c:	d8c2      	bhi.n	8019414 <_scanf_float+0x60>
 801948e:	a001      	add	r0, pc, #4	; (adr r0, 8019494 <_scanf_float+0xe0>)
 8019490:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8019494:	08019543 	.word	0x08019543
 8019498:	08019415 	.word	0x08019415
 801949c:	08019543 	.word	0x08019543
 80194a0:	080195d7 	.word	0x080195d7
 80194a4:	08019415 	.word	0x08019415
 80194a8:	080194f1 	.word	0x080194f1
 80194ac:	0801952d 	.word	0x0801952d
 80194b0:	0801952d 	.word	0x0801952d
 80194b4:	0801952d 	.word	0x0801952d
 80194b8:	0801952d 	.word	0x0801952d
 80194bc:	0801952d 	.word	0x0801952d
 80194c0:	0801952d 	.word	0x0801952d
 80194c4:	0801952d 	.word	0x0801952d
 80194c8:	0801952d 	.word	0x0801952d
 80194cc:	0801952d 	.word	0x0801952d
 80194d0:	2b6e      	cmp	r3, #110	; 0x6e
 80194d2:	d809      	bhi.n	80194e8 <_scanf_float+0x134>
 80194d4:	2b60      	cmp	r3, #96	; 0x60
 80194d6:	d8b2      	bhi.n	801943e <_scanf_float+0x8a>
 80194d8:	2b54      	cmp	r3, #84	; 0x54
 80194da:	d077      	beq.n	80195cc <_scanf_float+0x218>
 80194dc:	2b59      	cmp	r3, #89	; 0x59
 80194de:	d199      	bne.n	8019414 <_scanf_float+0x60>
 80194e0:	2d07      	cmp	r5, #7
 80194e2:	d197      	bne.n	8019414 <_scanf_float+0x60>
 80194e4:	2508      	movs	r5, #8
 80194e6:	e029      	b.n	801953c <_scanf_float+0x188>
 80194e8:	2b74      	cmp	r3, #116	; 0x74
 80194ea:	d06f      	beq.n	80195cc <_scanf_float+0x218>
 80194ec:	2b79      	cmp	r3, #121	; 0x79
 80194ee:	e7f6      	b.n	80194de <_scanf_float+0x12a>
 80194f0:	6821      	ldr	r1, [r4, #0]
 80194f2:	05c8      	lsls	r0, r1, #23
 80194f4:	d51a      	bpl.n	801952c <_scanf_float+0x178>
 80194f6:	9b02      	ldr	r3, [sp, #8]
 80194f8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80194fc:	6021      	str	r1, [r4, #0]
 80194fe:	f109 0901 	add.w	r9, r9, #1
 8019502:	b11b      	cbz	r3, 801950c <_scanf_float+0x158>
 8019504:	3b01      	subs	r3, #1
 8019506:	3201      	adds	r2, #1
 8019508:	9302      	str	r3, [sp, #8]
 801950a:	60a2      	str	r2, [r4, #8]
 801950c:	68a3      	ldr	r3, [r4, #8]
 801950e:	3b01      	subs	r3, #1
 8019510:	60a3      	str	r3, [r4, #8]
 8019512:	6923      	ldr	r3, [r4, #16]
 8019514:	3301      	adds	r3, #1
 8019516:	6123      	str	r3, [r4, #16]
 8019518:	687b      	ldr	r3, [r7, #4]
 801951a:	3b01      	subs	r3, #1
 801951c:	2b00      	cmp	r3, #0
 801951e:	607b      	str	r3, [r7, #4]
 8019520:	f340 8084 	ble.w	801962c <_scanf_float+0x278>
 8019524:	683b      	ldr	r3, [r7, #0]
 8019526:	3301      	adds	r3, #1
 8019528:	603b      	str	r3, [r7, #0]
 801952a:	e766      	b.n	80193fa <_scanf_float+0x46>
 801952c:	eb1a 0f05 	cmn.w	sl, r5
 8019530:	f47f af70 	bne.w	8019414 <_scanf_float+0x60>
 8019534:	6822      	ldr	r2, [r4, #0]
 8019536:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801953a:	6022      	str	r2, [r4, #0]
 801953c:	f806 3b01 	strb.w	r3, [r6], #1
 8019540:	e7e4      	b.n	801950c <_scanf_float+0x158>
 8019542:	6822      	ldr	r2, [r4, #0]
 8019544:	0610      	lsls	r0, r2, #24
 8019546:	f57f af65 	bpl.w	8019414 <_scanf_float+0x60>
 801954a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801954e:	e7f4      	b.n	801953a <_scanf_float+0x186>
 8019550:	f1ba 0f00 	cmp.w	sl, #0
 8019554:	d10e      	bne.n	8019574 <_scanf_float+0x1c0>
 8019556:	f1b9 0f00 	cmp.w	r9, #0
 801955a:	d10e      	bne.n	801957a <_scanf_float+0x1c6>
 801955c:	6822      	ldr	r2, [r4, #0]
 801955e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8019562:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8019566:	d108      	bne.n	801957a <_scanf_float+0x1c6>
 8019568:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801956c:	6022      	str	r2, [r4, #0]
 801956e:	f04f 0a01 	mov.w	sl, #1
 8019572:	e7e3      	b.n	801953c <_scanf_float+0x188>
 8019574:	f1ba 0f02 	cmp.w	sl, #2
 8019578:	d055      	beq.n	8019626 <_scanf_float+0x272>
 801957a:	2d01      	cmp	r5, #1
 801957c:	d002      	beq.n	8019584 <_scanf_float+0x1d0>
 801957e:	2d04      	cmp	r5, #4
 8019580:	f47f af48 	bne.w	8019414 <_scanf_float+0x60>
 8019584:	3501      	adds	r5, #1
 8019586:	b2ed      	uxtb	r5, r5
 8019588:	e7d8      	b.n	801953c <_scanf_float+0x188>
 801958a:	f1ba 0f01 	cmp.w	sl, #1
 801958e:	f47f af41 	bne.w	8019414 <_scanf_float+0x60>
 8019592:	f04f 0a02 	mov.w	sl, #2
 8019596:	e7d1      	b.n	801953c <_scanf_float+0x188>
 8019598:	b97d      	cbnz	r5, 80195ba <_scanf_float+0x206>
 801959a:	f1b9 0f00 	cmp.w	r9, #0
 801959e:	f47f af3c 	bne.w	801941a <_scanf_float+0x66>
 80195a2:	6822      	ldr	r2, [r4, #0]
 80195a4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80195a8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80195ac:	f47f af39 	bne.w	8019422 <_scanf_float+0x6e>
 80195b0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80195b4:	6022      	str	r2, [r4, #0]
 80195b6:	2501      	movs	r5, #1
 80195b8:	e7c0      	b.n	801953c <_scanf_float+0x188>
 80195ba:	2d03      	cmp	r5, #3
 80195bc:	d0e2      	beq.n	8019584 <_scanf_float+0x1d0>
 80195be:	2d05      	cmp	r5, #5
 80195c0:	e7de      	b.n	8019580 <_scanf_float+0x1cc>
 80195c2:	2d02      	cmp	r5, #2
 80195c4:	f47f af26 	bne.w	8019414 <_scanf_float+0x60>
 80195c8:	2503      	movs	r5, #3
 80195ca:	e7b7      	b.n	801953c <_scanf_float+0x188>
 80195cc:	2d06      	cmp	r5, #6
 80195ce:	f47f af21 	bne.w	8019414 <_scanf_float+0x60>
 80195d2:	2507      	movs	r5, #7
 80195d4:	e7b2      	b.n	801953c <_scanf_float+0x188>
 80195d6:	6822      	ldr	r2, [r4, #0]
 80195d8:	0591      	lsls	r1, r2, #22
 80195da:	f57f af1b 	bpl.w	8019414 <_scanf_float+0x60>
 80195de:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80195e2:	6022      	str	r2, [r4, #0]
 80195e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80195e8:	e7a8      	b.n	801953c <_scanf_float+0x188>
 80195ea:	6822      	ldr	r2, [r4, #0]
 80195ec:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80195f0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80195f4:	d006      	beq.n	8019604 <_scanf_float+0x250>
 80195f6:	0550      	lsls	r0, r2, #21
 80195f8:	f57f af0c 	bpl.w	8019414 <_scanf_float+0x60>
 80195fc:	f1b9 0f00 	cmp.w	r9, #0
 8019600:	f43f af0f 	beq.w	8019422 <_scanf_float+0x6e>
 8019604:	0591      	lsls	r1, r2, #22
 8019606:	bf58      	it	pl
 8019608:	9901      	ldrpl	r1, [sp, #4]
 801960a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801960e:	bf58      	it	pl
 8019610:	eba9 0101 	subpl.w	r1, r9, r1
 8019614:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8019618:	bf58      	it	pl
 801961a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801961e:	6022      	str	r2, [r4, #0]
 8019620:	f04f 0900 	mov.w	r9, #0
 8019624:	e78a      	b.n	801953c <_scanf_float+0x188>
 8019626:	f04f 0a03 	mov.w	sl, #3
 801962a:	e787      	b.n	801953c <_scanf_float+0x188>
 801962c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019630:	4639      	mov	r1, r7
 8019632:	4640      	mov	r0, r8
 8019634:	4798      	blx	r3
 8019636:	2800      	cmp	r0, #0
 8019638:	f43f aedf 	beq.w	80193fa <_scanf_float+0x46>
 801963c:	e6ea      	b.n	8019414 <_scanf_float+0x60>
 801963e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019642:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8019646:	463a      	mov	r2, r7
 8019648:	4640      	mov	r0, r8
 801964a:	4798      	blx	r3
 801964c:	6923      	ldr	r3, [r4, #16]
 801964e:	3b01      	subs	r3, #1
 8019650:	6123      	str	r3, [r4, #16]
 8019652:	e6ec      	b.n	801942e <_scanf_float+0x7a>
 8019654:	1e6b      	subs	r3, r5, #1
 8019656:	2b06      	cmp	r3, #6
 8019658:	d825      	bhi.n	80196a6 <_scanf_float+0x2f2>
 801965a:	2d02      	cmp	r5, #2
 801965c:	d836      	bhi.n	80196cc <_scanf_float+0x318>
 801965e:	455e      	cmp	r6, fp
 8019660:	f67f aee8 	bls.w	8019434 <_scanf_float+0x80>
 8019664:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019668:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801966c:	463a      	mov	r2, r7
 801966e:	4640      	mov	r0, r8
 8019670:	4798      	blx	r3
 8019672:	6923      	ldr	r3, [r4, #16]
 8019674:	3b01      	subs	r3, #1
 8019676:	6123      	str	r3, [r4, #16]
 8019678:	e7f1      	b.n	801965e <_scanf_float+0x2aa>
 801967a:	9802      	ldr	r0, [sp, #8]
 801967c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019680:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8019684:	9002      	str	r0, [sp, #8]
 8019686:	463a      	mov	r2, r7
 8019688:	4640      	mov	r0, r8
 801968a:	4798      	blx	r3
 801968c:	6923      	ldr	r3, [r4, #16]
 801968e:	3b01      	subs	r3, #1
 8019690:	6123      	str	r3, [r4, #16]
 8019692:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019696:	fa5f fa8a 	uxtb.w	sl, sl
 801969a:	f1ba 0f02 	cmp.w	sl, #2
 801969e:	d1ec      	bne.n	801967a <_scanf_float+0x2c6>
 80196a0:	3d03      	subs	r5, #3
 80196a2:	b2ed      	uxtb	r5, r5
 80196a4:	1b76      	subs	r6, r6, r5
 80196a6:	6823      	ldr	r3, [r4, #0]
 80196a8:	05da      	lsls	r2, r3, #23
 80196aa:	d52f      	bpl.n	801970c <_scanf_float+0x358>
 80196ac:	055b      	lsls	r3, r3, #21
 80196ae:	d510      	bpl.n	80196d2 <_scanf_float+0x31e>
 80196b0:	455e      	cmp	r6, fp
 80196b2:	f67f aebf 	bls.w	8019434 <_scanf_float+0x80>
 80196b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80196ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80196be:	463a      	mov	r2, r7
 80196c0:	4640      	mov	r0, r8
 80196c2:	4798      	blx	r3
 80196c4:	6923      	ldr	r3, [r4, #16]
 80196c6:	3b01      	subs	r3, #1
 80196c8:	6123      	str	r3, [r4, #16]
 80196ca:	e7f1      	b.n	80196b0 <_scanf_float+0x2fc>
 80196cc:	46aa      	mov	sl, r5
 80196ce:	9602      	str	r6, [sp, #8]
 80196d0:	e7df      	b.n	8019692 <_scanf_float+0x2de>
 80196d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80196d6:	6923      	ldr	r3, [r4, #16]
 80196d8:	2965      	cmp	r1, #101	; 0x65
 80196da:	f103 33ff 	add.w	r3, r3, #4294967295
 80196de:	f106 35ff 	add.w	r5, r6, #4294967295
 80196e2:	6123      	str	r3, [r4, #16]
 80196e4:	d00c      	beq.n	8019700 <_scanf_float+0x34c>
 80196e6:	2945      	cmp	r1, #69	; 0x45
 80196e8:	d00a      	beq.n	8019700 <_scanf_float+0x34c>
 80196ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80196ee:	463a      	mov	r2, r7
 80196f0:	4640      	mov	r0, r8
 80196f2:	4798      	blx	r3
 80196f4:	6923      	ldr	r3, [r4, #16]
 80196f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80196fa:	3b01      	subs	r3, #1
 80196fc:	1eb5      	subs	r5, r6, #2
 80196fe:	6123      	str	r3, [r4, #16]
 8019700:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019704:	463a      	mov	r2, r7
 8019706:	4640      	mov	r0, r8
 8019708:	4798      	blx	r3
 801970a:	462e      	mov	r6, r5
 801970c:	6825      	ldr	r5, [r4, #0]
 801970e:	f015 0510 	ands.w	r5, r5, #16
 8019712:	d159      	bne.n	80197c8 <_scanf_float+0x414>
 8019714:	7035      	strb	r5, [r6, #0]
 8019716:	6823      	ldr	r3, [r4, #0]
 8019718:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801971c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019720:	d11b      	bne.n	801975a <_scanf_float+0x3a6>
 8019722:	9b01      	ldr	r3, [sp, #4]
 8019724:	454b      	cmp	r3, r9
 8019726:	eba3 0209 	sub.w	r2, r3, r9
 801972a:	d123      	bne.n	8019774 <_scanf_float+0x3c0>
 801972c:	2200      	movs	r2, #0
 801972e:	4659      	mov	r1, fp
 8019730:	4640      	mov	r0, r8
 8019732:	f000 ff27 	bl	801a584 <_strtod_r>
 8019736:	6822      	ldr	r2, [r4, #0]
 8019738:	9b03      	ldr	r3, [sp, #12]
 801973a:	f012 0f02 	tst.w	r2, #2
 801973e:	ec57 6b10 	vmov	r6, r7, d0
 8019742:	681b      	ldr	r3, [r3, #0]
 8019744:	d021      	beq.n	801978a <_scanf_float+0x3d6>
 8019746:	9903      	ldr	r1, [sp, #12]
 8019748:	1d1a      	adds	r2, r3, #4
 801974a:	600a      	str	r2, [r1, #0]
 801974c:	681b      	ldr	r3, [r3, #0]
 801974e:	e9c3 6700 	strd	r6, r7, [r3]
 8019752:	68e3      	ldr	r3, [r4, #12]
 8019754:	3301      	adds	r3, #1
 8019756:	60e3      	str	r3, [r4, #12]
 8019758:	e66d      	b.n	8019436 <_scanf_float+0x82>
 801975a:	9b04      	ldr	r3, [sp, #16]
 801975c:	2b00      	cmp	r3, #0
 801975e:	d0e5      	beq.n	801972c <_scanf_float+0x378>
 8019760:	9905      	ldr	r1, [sp, #20]
 8019762:	230a      	movs	r3, #10
 8019764:	462a      	mov	r2, r5
 8019766:	3101      	adds	r1, #1
 8019768:	4640      	mov	r0, r8
 801976a:	f000 ff93 	bl	801a694 <_strtol_r>
 801976e:	9b04      	ldr	r3, [sp, #16]
 8019770:	9e05      	ldr	r6, [sp, #20]
 8019772:	1ac2      	subs	r2, r0, r3
 8019774:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8019778:	429e      	cmp	r6, r3
 801977a:	bf28      	it	cs
 801977c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8019780:	4912      	ldr	r1, [pc, #72]	; (80197cc <_scanf_float+0x418>)
 8019782:	4630      	mov	r0, r6
 8019784:	f000 f8ba 	bl	80198fc <siprintf>
 8019788:	e7d0      	b.n	801972c <_scanf_float+0x378>
 801978a:	9903      	ldr	r1, [sp, #12]
 801978c:	f012 0f04 	tst.w	r2, #4
 8019790:	f103 0204 	add.w	r2, r3, #4
 8019794:	600a      	str	r2, [r1, #0]
 8019796:	d1d9      	bne.n	801974c <_scanf_float+0x398>
 8019798:	f8d3 8000 	ldr.w	r8, [r3]
 801979c:	ee10 2a10 	vmov	r2, s0
 80197a0:	ee10 0a10 	vmov	r0, s0
 80197a4:	463b      	mov	r3, r7
 80197a6:	4639      	mov	r1, r7
 80197a8:	f7ee f9a0 	bl	8007aec <__aeabi_dcmpun>
 80197ac:	b128      	cbz	r0, 80197ba <_scanf_float+0x406>
 80197ae:	4808      	ldr	r0, [pc, #32]	; (80197d0 <_scanf_float+0x41c>)
 80197b0:	f000 f89e 	bl	80198f0 <nanf>
 80197b4:	ed88 0a00 	vstr	s0, [r8]
 80197b8:	e7cb      	b.n	8019752 <_scanf_float+0x39e>
 80197ba:	4630      	mov	r0, r6
 80197bc:	4639      	mov	r1, r7
 80197be:	f7ee f9f3 	bl	8007ba8 <__aeabi_d2f>
 80197c2:	f8c8 0000 	str.w	r0, [r8]
 80197c6:	e7c4      	b.n	8019752 <_scanf_float+0x39e>
 80197c8:	2500      	movs	r5, #0
 80197ca:	e634      	b.n	8019436 <_scanf_float+0x82>
 80197cc:	0801de18 	.word	0x0801de18
 80197d0:	0801e288 	.word	0x0801e288

080197d4 <iprintf>:
 80197d4:	b40f      	push	{r0, r1, r2, r3}
 80197d6:	4b0a      	ldr	r3, [pc, #40]	; (8019800 <iprintf+0x2c>)
 80197d8:	b513      	push	{r0, r1, r4, lr}
 80197da:	681c      	ldr	r4, [r3, #0]
 80197dc:	b124      	cbz	r4, 80197e8 <iprintf+0x14>
 80197de:	69a3      	ldr	r3, [r4, #24]
 80197e0:	b913      	cbnz	r3, 80197e8 <iprintf+0x14>
 80197e2:	4620      	mov	r0, r4
 80197e4:	f001 ffac 	bl	801b740 <__sinit>
 80197e8:	ab05      	add	r3, sp, #20
 80197ea:	9a04      	ldr	r2, [sp, #16]
 80197ec:	68a1      	ldr	r1, [r4, #8]
 80197ee:	9301      	str	r3, [sp, #4]
 80197f0:	4620      	mov	r0, r4
 80197f2:	f003 fb75 	bl	801cee0 <_vfiprintf_r>
 80197f6:	b002      	add	sp, #8
 80197f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80197fc:	b004      	add	sp, #16
 80197fe:	4770      	bx	lr
 8019800:	20000090 	.word	0x20000090

08019804 <_puts_r>:
 8019804:	b570      	push	{r4, r5, r6, lr}
 8019806:	460e      	mov	r6, r1
 8019808:	4605      	mov	r5, r0
 801980a:	b118      	cbz	r0, 8019814 <_puts_r+0x10>
 801980c:	6983      	ldr	r3, [r0, #24]
 801980e:	b90b      	cbnz	r3, 8019814 <_puts_r+0x10>
 8019810:	f001 ff96 	bl	801b740 <__sinit>
 8019814:	69ab      	ldr	r3, [r5, #24]
 8019816:	68ac      	ldr	r4, [r5, #8]
 8019818:	b913      	cbnz	r3, 8019820 <_puts_r+0x1c>
 801981a:	4628      	mov	r0, r5
 801981c:	f001 ff90 	bl	801b740 <__sinit>
 8019820:	4b2c      	ldr	r3, [pc, #176]	; (80198d4 <_puts_r+0xd0>)
 8019822:	429c      	cmp	r4, r3
 8019824:	d120      	bne.n	8019868 <_puts_r+0x64>
 8019826:	686c      	ldr	r4, [r5, #4]
 8019828:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801982a:	07db      	lsls	r3, r3, #31
 801982c:	d405      	bmi.n	801983a <_puts_r+0x36>
 801982e:	89a3      	ldrh	r3, [r4, #12]
 8019830:	0598      	lsls	r0, r3, #22
 8019832:	d402      	bmi.n	801983a <_puts_r+0x36>
 8019834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019836:	f002 fb94 	bl	801bf62 <__retarget_lock_acquire_recursive>
 801983a:	89a3      	ldrh	r3, [r4, #12]
 801983c:	0719      	lsls	r1, r3, #28
 801983e:	d51d      	bpl.n	801987c <_puts_r+0x78>
 8019840:	6923      	ldr	r3, [r4, #16]
 8019842:	b1db      	cbz	r3, 801987c <_puts_r+0x78>
 8019844:	3e01      	subs	r6, #1
 8019846:	68a3      	ldr	r3, [r4, #8]
 8019848:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801984c:	3b01      	subs	r3, #1
 801984e:	60a3      	str	r3, [r4, #8]
 8019850:	bb39      	cbnz	r1, 80198a2 <_puts_r+0x9e>
 8019852:	2b00      	cmp	r3, #0
 8019854:	da38      	bge.n	80198c8 <_puts_r+0xc4>
 8019856:	4622      	mov	r2, r4
 8019858:	210a      	movs	r1, #10
 801985a:	4628      	mov	r0, r5
 801985c:	f000 ff1c 	bl	801a698 <__swbuf_r>
 8019860:	3001      	adds	r0, #1
 8019862:	d011      	beq.n	8019888 <_puts_r+0x84>
 8019864:	250a      	movs	r5, #10
 8019866:	e011      	b.n	801988c <_puts_r+0x88>
 8019868:	4b1b      	ldr	r3, [pc, #108]	; (80198d8 <_puts_r+0xd4>)
 801986a:	429c      	cmp	r4, r3
 801986c:	d101      	bne.n	8019872 <_puts_r+0x6e>
 801986e:	68ac      	ldr	r4, [r5, #8]
 8019870:	e7da      	b.n	8019828 <_puts_r+0x24>
 8019872:	4b1a      	ldr	r3, [pc, #104]	; (80198dc <_puts_r+0xd8>)
 8019874:	429c      	cmp	r4, r3
 8019876:	bf08      	it	eq
 8019878:	68ec      	ldreq	r4, [r5, #12]
 801987a:	e7d5      	b.n	8019828 <_puts_r+0x24>
 801987c:	4621      	mov	r1, r4
 801987e:	4628      	mov	r0, r5
 8019880:	f000 ff5c 	bl	801a73c <__swsetup_r>
 8019884:	2800      	cmp	r0, #0
 8019886:	d0dd      	beq.n	8019844 <_puts_r+0x40>
 8019888:	f04f 35ff 	mov.w	r5, #4294967295
 801988c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801988e:	07da      	lsls	r2, r3, #31
 8019890:	d405      	bmi.n	801989e <_puts_r+0x9a>
 8019892:	89a3      	ldrh	r3, [r4, #12]
 8019894:	059b      	lsls	r3, r3, #22
 8019896:	d402      	bmi.n	801989e <_puts_r+0x9a>
 8019898:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801989a:	f002 fb63 	bl	801bf64 <__retarget_lock_release_recursive>
 801989e:	4628      	mov	r0, r5
 80198a0:	bd70      	pop	{r4, r5, r6, pc}
 80198a2:	2b00      	cmp	r3, #0
 80198a4:	da04      	bge.n	80198b0 <_puts_r+0xac>
 80198a6:	69a2      	ldr	r2, [r4, #24]
 80198a8:	429a      	cmp	r2, r3
 80198aa:	dc06      	bgt.n	80198ba <_puts_r+0xb6>
 80198ac:	290a      	cmp	r1, #10
 80198ae:	d004      	beq.n	80198ba <_puts_r+0xb6>
 80198b0:	6823      	ldr	r3, [r4, #0]
 80198b2:	1c5a      	adds	r2, r3, #1
 80198b4:	6022      	str	r2, [r4, #0]
 80198b6:	7019      	strb	r1, [r3, #0]
 80198b8:	e7c5      	b.n	8019846 <_puts_r+0x42>
 80198ba:	4622      	mov	r2, r4
 80198bc:	4628      	mov	r0, r5
 80198be:	f000 feeb 	bl	801a698 <__swbuf_r>
 80198c2:	3001      	adds	r0, #1
 80198c4:	d1bf      	bne.n	8019846 <_puts_r+0x42>
 80198c6:	e7df      	b.n	8019888 <_puts_r+0x84>
 80198c8:	6823      	ldr	r3, [r4, #0]
 80198ca:	250a      	movs	r5, #10
 80198cc:	1c5a      	adds	r2, r3, #1
 80198ce:	6022      	str	r2, [r4, #0]
 80198d0:	701d      	strb	r5, [r3, #0]
 80198d2:	e7db      	b.n	801988c <_puts_r+0x88>
 80198d4:	0801e024 	.word	0x0801e024
 80198d8:	0801e044 	.word	0x0801e044
 80198dc:	0801e004 	.word	0x0801e004

080198e0 <puts>:
 80198e0:	4b02      	ldr	r3, [pc, #8]	; (80198ec <puts+0xc>)
 80198e2:	4601      	mov	r1, r0
 80198e4:	6818      	ldr	r0, [r3, #0]
 80198e6:	f7ff bf8d 	b.w	8019804 <_puts_r>
 80198ea:	bf00      	nop
 80198ec:	20000090 	.word	0x20000090

080198f0 <nanf>:
 80198f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80198f8 <nanf+0x8>
 80198f4:	4770      	bx	lr
 80198f6:	bf00      	nop
 80198f8:	7fc00000 	.word	0x7fc00000

080198fc <siprintf>:
 80198fc:	b40e      	push	{r1, r2, r3}
 80198fe:	b500      	push	{lr}
 8019900:	b09c      	sub	sp, #112	; 0x70
 8019902:	ab1d      	add	r3, sp, #116	; 0x74
 8019904:	9002      	str	r0, [sp, #8]
 8019906:	9006      	str	r0, [sp, #24]
 8019908:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801990c:	4809      	ldr	r0, [pc, #36]	; (8019934 <siprintf+0x38>)
 801990e:	9107      	str	r1, [sp, #28]
 8019910:	9104      	str	r1, [sp, #16]
 8019912:	4909      	ldr	r1, [pc, #36]	; (8019938 <siprintf+0x3c>)
 8019914:	f853 2b04 	ldr.w	r2, [r3], #4
 8019918:	9105      	str	r1, [sp, #20]
 801991a:	6800      	ldr	r0, [r0, #0]
 801991c:	9301      	str	r3, [sp, #4]
 801991e:	a902      	add	r1, sp, #8
 8019920:	f003 f9b4 	bl	801cc8c <_svfiprintf_r>
 8019924:	9b02      	ldr	r3, [sp, #8]
 8019926:	2200      	movs	r2, #0
 8019928:	701a      	strb	r2, [r3, #0]
 801992a:	b01c      	add	sp, #112	; 0x70
 801992c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019930:	b003      	add	sp, #12
 8019932:	4770      	bx	lr
 8019934:	20000090 	.word	0x20000090
 8019938:	ffff0208 	.word	0xffff0208

0801993c <sulp>:
 801993c:	b570      	push	{r4, r5, r6, lr}
 801993e:	4604      	mov	r4, r0
 8019940:	460d      	mov	r5, r1
 8019942:	ec45 4b10 	vmov	d0, r4, r5
 8019946:	4616      	mov	r6, r2
 8019948:	f002 fefe 	bl	801c748 <__ulp>
 801994c:	ec51 0b10 	vmov	r0, r1, d0
 8019950:	b17e      	cbz	r6, 8019972 <sulp+0x36>
 8019952:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8019956:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801995a:	2b00      	cmp	r3, #0
 801995c:	dd09      	ble.n	8019972 <sulp+0x36>
 801995e:	051b      	lsls	r3, r3, #20
 8019960:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8019964:	2400      	movs	r4, #0
 8019966:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801996a:	4622      	mov	r2, r4
 801996c:	462b      	mov	r3, r5
 801996e:	f7ed fe23 	bl	80075b8 <__aeabi_dmul>
 8019972:	bd70      	pop	{r4, r5, r6, pc}
 8019974:	0000      	movs	r0, r0
	...

08019978 <_strtod_l>:
 8019978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801997c:	ed2d 8b02 	vpush	{d8}
 8019980:	b09d      	sub	sp, #116	; 0x74
 8019982:	461f      	mov	r7, r3
 8019984:	2300      	movs	r3, #0
 8019986:	9318      	str	r3, [sp, #96]	; 0x60
 8019988:	4ba2      	ldr	r3, [pc, #648]	; (8019c14 <_strtod_l+0x29c>)
 801998a:	9213      	str	r2, [sp, #76]	; 0x4c
 801998c:	681b      	ldr	r3, [r3, #0]
 801998e:	9305      	str	r3, [sp, #20]
 8019990:	4604      	mov	r4, r0
 8019992:	4618      	mov	r0, r3
 8019994:	4688      	mov	r8, r1
 8019996:	f7ed fbfb 	bl	8007190 <strlen>
 801999a:	f04f 0a00 	mov.w	sl, #0
 801999e:	4605      	mov	r5, r0
 80199a0:	f04f 0b00 	mov.w	fp, #0
 80199a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80199a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80199aa:	781a      	ldrb	r2, [r3, #0]
 80199ac:	2a2b      	cmp	r2, #43	; 0x2b
 80199ae:	d04e      	beq.n	8019a4e <_strtod_l+0xd6>
 80199b0:	d83b      	bhi.n	8019a2a <_strtod_l+0xb2>
 80199b2:	2a0d      	cmp	r2, #13
 80199b4:	d834      	bhi.n	8019a20 <_strtod_l+0xa8>
 80199b6:	2a08      	cmp	r2, #8
 80199b8:	d834      	bhi.n	8019a24 <_strtod_l+0xac>
 80199ba:	2a00      	cmp	r2, #0
 80199bc:	d03e      	beq.n	8019a3c <_strtod_l+0xc4>
 80199be:	2300      	movs	r3, #0
 80199c0:	930a      	str	r3, [sp, #40]	; 0x28
 80199c2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80199c4:	7833      	ldrb	r3, [r6, #0]
 80199c6:	2b30      	cmp	r3, #48	; 0x30
 80199c8:	f040 80b0 	bne.w	8019b2c <_strtod_l+0x1b4>
 80199cc:	7873      	ldrb	r3, [r6, #1]
 80199ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80199d2:	2b58      	cmp	r3, #88	; 0x58
 80199d4:	d168      	bne.n	8019aa8 <_strtod_l+0x130>
 80199d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80199d8:	9301      	str	r3, [sp, #4]
 80199da:	ab18      	add	r3, sp, #96	; 0x60
 80199dc:	9702      	str	r7, [sp, #8]
 80199de:	9300      	str	r3, [sp, #0]
 80199e0:	4a8d      	ldr	r2, [pc, #564]	; (8019c18 <_strtod_l+0x2a0>)
 80199e2:	ab19      	add	r3, sp, #100	; 0x64
 80199e4:	a917      	add	r1, sp, #92	; 0x5c
 80199e6:	4620      	mov	r0, r4
 80199e8:	f001 ffae 	bl	801b948 <__gethex>
 80199ec:	f010 0707 	ands.w	r7, r0, #7
 80199f0:	4605      	mov	r5, r0
 80199f2:	d005      	beq.n	8019a00 <_strtod_l+0x88>
 80199f4:	2f06      	cmp	r7, #6
 80199f6:	d12c      	bne.n	8019a52 <_strtod_l+0xda>
 80199f8:	3601      	adds	r6, #1
 80199fa:	2300      	movs	r3, #0
 80199fc:	9617      	str	r6, [sp, #92]	; 0x5c
 80199fe:	930a      	str	r3, [sp, #40]	; 0x28
 8019a00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019a02:	2b00      	cmp	r3, #0
 8019a04:	f040 8590 	bne.w	801a528 <_strtod_l+0xbb0>
 8019a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019a0a:	b1eb      	cbz	r3, 8019a48 <_strtod_l+0xd0>
 8019a0c:	4652      	mov	r2, sl
 8019a0e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8019a12:	ec43 2b10 	vmov	d0, r2, r3
 8019a16:	b01d      	add	sp, #116	; 0x74
 8019a18:	ecbd 8b02 	vpop	{d8}
 8019a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a20:	2a20      	cmp	r2, #32
 8019a22:	d1cc      	bne.n	80199be <_strtod_l+0x46>
 8019a24:	3301      	adds	r3, #1
 8019a26:	9317      	str	r3, [sp, #92]	; 0x5c
 8019a28:	e7be      	b.n	80199a8 <_strtod_l+0x30>
 8019a2a:	2a2d      	cmp	r2, #45	; 0x2d
 8019a2c:	d1c7      	bne.n	80199be <_strtod_l+0x46>
 8019a2e:	2201      	movs	r2, #1
 8019a30:	920a      	str	r2, [sp, #40]	; 0x28
 8019a32:	1c5a      	adds	r2, r3, #1
 8019a34:	9217      	str	r2, [sp, #92]	; 0x5c
 8019a36:	785b      	ldrb	r3, [r3, #1]
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	d1c2      	bne.n	80199c2 <_strtod_l+0x4a>
 8019a3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019a3e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8019a42:	2b00      	cmp	r3, #0
 8019a44:	f040 856e 	bne.w	801a524 <_strtod_l+0xbac>
 8019a48:	4652      	mov	r2, sl
 8019a4a:	465b      	mov	r3, fp
 8019a4c:	e7e1      	b.n	8019a12 <_strtod_l+0x9a>
 8019a4e:	2200      	movs	r2, #0
 8019a50:	e7ee      	b.n	8019a30 <_strtod_l+0xb8>
 8019a52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019a54:	b13a      	cbz	r2, 8019a66 <_strtod_l+0xee>
 8019a56:	2135      	movs	r1, #53	; 0x35
 8019a58:	a81a      	add	r0, sp, #104	; 0x68
 8019a5a:	f002 ff80 	bl	801c95e <__copybits>
 8019a5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8019a60:	4620      	mov	r0, r4
 8019a62:	f002 fb3f 	bl	801c0e4 <_Bfree>
 8019a66:	3f01      	subs	r7, #1
 8019a68:	2f04      	cmp	r7, #4
 8019a6a:	d806      	bhi.n	8019a7a <_strtod_l+0x102>
 8019a6c:	e8df f007 	tbb	[pc, r7]
 8019a70:	1714030a 	.word	0x1714030a
 8019a74:	0a          	.byte	0x0a
 8019a75:	00          	.byte	0x00
 8019a76:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8019a7a:	0728      	lsls	r0, r5, #28
 8019a7c:	d5c0      	bpl.n	8019a00 <_strtod_l+0x88>
 8019a7e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8019a82:	e7bd      	b.n	8019a00 <_strtod_l+0x88>
 8019a84:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8019a88:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8019a8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8019a8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8019a92:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8019a96:	e7f0      	b.n	8019a7a <_strtod_l+0x102>
 8019a98:	f8df b180 	ldr.w	fp, [pc, #384]	; 8019c1c <_strtod_l+0x2a4>
 8019a9c:	e7ed      	b.n	8019a7a <_strtod_l+0x102>
 8019a9e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8019aa2:	f04f 3aff 	mov.w	sl, #4294967295
 8019aa6:	e7e8      	b.n	8019a7a <_strtod_l+0x102>
 8019aa8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019aaa:	1c5a      	adds	r2, r3, #1
 8019aac:	9217      	str	r2, [sp, #92]	; 0x5c
 8019aae:	785b      	ldrb	r3, [r3, #1]
 8019ab0:	2b30      	cmp	r3, #48	; 0x30
 8019ab2:	d0f9      	beq.n	8019aa8 <_strtod_l+0x130>
 8019ab4:	2b00      	cmp	r3, #0
 8019ab6:	d0a3      	beq.n	8019a00 <_strtod_l+0x88>
 8019ab8:	2301      	movs	r3, #1
 8019aba:	f04f 0900 	mov.w	r9, #0
 8019abe:	9304      	str	r3, [sp, #16]
 8019ac0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019ac2:	9308      	str	r3, [sp, #32]
 8019ac4:	f8cd 901c 	str.w	r9, [sp, #28]
 8019ac8:	464f      	mov	r7, r9
 8019aca:	220a      	movs	r2, #10
 8019acc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8019ace:	7806      	ldrb	r6, [r0, #0]
 8019ad0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8019ad4:	b2d9      	uxtb	r1, r3
 8019ad6:	2909      	cmp	r1, #9
 8019ad8:	d92a      	bls.n	8019b30 <_strtod_l+0x1b8>
 8019ada:	9905      	ldr	r1, [sp, #20]
 8019adc:	462a      	mov	r2, r5
 8019ade:	f003 fb8a 	bl	801d1f6 <strncmp>
 8019ae2:	b398      	cbz	r0, 8019b4c <_strtod_l+0x1d4>
 8019ae4:	2000      	movs	r0, #0
 8019ae6:	4632      	mov	r2, r6
 8019ae8:	463d      	mov	r5, r7
 8019aea:	9005      	str	r0, [sp, #20]
 8019aec:	4603      	mov	r3, r0
 8019aee:	2a65      	cmp	r2, #101	; 0x65
 8019af0:	d001      	beq.n	8019af6 <_strtod_l+0x17e>
 8019af2:	2a45      	cmp	r2, #69	; 0x45
 8019af4:	d118      	bne.n	8019b28 <_strtod_l+0x1b0>
 8019af6:	b91d      	cbnz	r5, 8019b00 <_strtod_l+0x188>
 8019af8:	9a04      	ldr	r2, [sp, #16]
 8019afa:	4302      	orrs	r2, r0
 8019afc:	d09e      	beq.n	8019a3c <_strtod_l+0xc4>
 8019afe:	2500      	movs	r5, #0
 8019b00:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8019b04:	f108 0201 	add.w	r2, r8, #1
 8019b08:	9217      	str	r2, [sp, #92]	; 0x5c
 8019b0a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8019b0e:	2a2b      	cmp	r2, #43	; 0x2b
 8019b10:	d075      	beq.n	8019bfe <_strtod_l+0x286>
 8019b12:	2a2d      	cmp	r2, #45	; 0x2d
 8019b14:	d07b      	beq.n	8019c0e <_strtod_l+0x296>
 8019b16:	f04f 0c00 	mov.w	ip, #0
 8019b1a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8019b1e:	2909      	cmp	r1, #9
 8019b20:	f240 8082 	bls.w	8019c28 <_strtod_l+0x2b0>
 8019b24:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8019b28:	2600      	movs	r6, #0
 8019b2a:	e09d      	b.n	8019c68 <_strtod_l+0x2f0>
 8019b2c:	2300      	movs	r3, #0
 8019b2e:	e7c4      	b.n	8019aba <_strtod_l+0x142>
 8019b30:	2f08      	cmp	r7, #8
 8019b32:	bfd8      	it	le
 8019b34:	9907      	ldrle	r1, [sp, #28]
 8019b36:	f100 0001 	add.w	r0, r0, #1
 8019b3a:	bfda      	itte	le
 8019b3c:	fb02 3301 	mlale	r3, r2, r1, r3
 8019b40:	9307      	strle	r3, [sp, #28]
 8019b42:	fb02 3909 	mlagt	r9, r2, r9, r3
 8019b46:	3701      	adds	r7, #1
 8019b48:	9017      	str	r0, [sp, #92]	; 0x5c
 8019b4a:	e7bf      	b.n	8019acc <_strtod_l+0x154>
 8019b4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019b4e:	195a      	adds	r2, r3, r5
 8019b50:	9217      	str	r2, [sp, #92]	; 0x5c
 8019b52:	5d5a      	ldrb	r2, [r3, r5]
 8019b54:	2f00      	cmp	r7, #0
 8019b56:	d037      	beq.n	8019bc8 <_strtod_l+0x250>
 8019b58:	9005      	str	r0, [sp, #20]
 8019b5a:	463d      	mov	r5, r7
 8019b5c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8019b60:	2b09      	cmp	r3, #9
 8019b62:	d912      	bls.n	8019b8a <_strtod_l+0x212>
 8019b64:	2301      	movs	r3, #1
 8019b66:	e7c2      	b.n	8019aee <_strtod_l+0x176>
 8019b68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019b6a:	1c5a      	adds	r2, r3, #1
 8019b6c:	9217      	str	r2, [sp, #92]	; 0x5c
 8019b6e:	785a      	ldrb	r2, [r3, #1]
 8019b70:	3001      	adds	r0, #1
 8019b72:	2a30      	cmp	r2, #48	; 0x30
 8019b74:	d0f8      	beq.n	8019b68 <_strtod_l+0x1f0>
 8019b76:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8019b7a:	2b08      	cmp	r3, #8
 8019b7c:	f200 84d9 	bhi.w	801a532 <_strtod_l+0xbba>
 8019b80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019b82:	9005      	str	r0, [sp, #20]
 8019b84:	2000      	movs	r0, #0
 8019b86:	9308      	str	r3, [sp, #32]
 8019b88:	4605      	mov	r5, r0
 8019b8a:	3a30      	subs	r2, #48	; 0x30
 8019b8c:	f100 0301 	add.w	r3, r0, #1
 8019b90:	d014      	beq.n	8019bbc <_strtod_l+0x244>
 8019b92:	9905      	ldr	r1, [sp, #20]
 8019b94:	4419      	add	r1, r3
 8019b96:	9105      	str	r1, [sp, #20]
 8019b98:	462b      	mov	r3, r5
 8019b9a:	eb00 0e05 	add.w	lr, r0, r5
 8019b9e:	210a      	movs	r1, #10
 8019ba0:	4573      	cmp	r3, lr
 8019ba2:	d113      	bne.n	8019bcc <_strtod_l+0x254>
 8019ba4:	182b      	adds	r3, r5, r0
 8019ba6:	2b08      	cmp	r3, #8
 8019ba8:	f105 0501 	add.w	r5, r5, #1
 8019bac:	4405      	add	r5, r0
 8019bae:	dc1c      	bgt.n	8019bea <_strtod_l+0x272>
 8019bb0:	9907      	ldr	r1, [sp, #28]
 8019bb2:	230a      	movs	r3, #10
 8019bb4:	fb03 2301 	mla	r3, r3, r1, r2
 8019bb8:	9307      	str	r3, [sp, #28]
 8019bba:	2300      	movs	r3, #0
 8019bbc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8019bbe:	1c51      	adds	r1, r2, #1
 8019bc0:	9117      	str	r1, [sp, #92]	; 0x5c
 8019bc2:	7852      	ldrb	r2, [r2, #1]
 8019bc4:	4618      	mov	r0, r3
 8019bc6:	e7c9      	b.n	8019b5c <_strtod_l+0x1e4>
 8019bc8:	4638      	mov	r0, r7
 8019bca:	e7d2      	b.n	8019b72 <_strtod_l+0x1fa>
 8019bcc:	2b08      	cmp	r3, #8
 8019bce:	dc04      	bgt.n	8019bda <_strtod_l+0x262>
 8019bd0:	9e07      	ldr	r6, [sp, #28]
 8019bd2:	434e      	muls	r6, r1
 8019bd4:	9607      	str	r6, [sp, #28]
 8019bd6:	3301      	adds	r3, #1
 8019bd8:	e7e2      	b.n	8019ba0 <_strtod_l+0x228>
 8019bda:	f103 0c01 	add.w	ip, r3, #1
 8019bde:	f1bc 0f10 	cmp.w	ip, #16
 8019be2:	bfd8      	it	le
 8019be4:	fb01 f909 	mulle.w	r9, r1, r9
 8019be8:	e7f5      	b.n	8019bd6 <_strtod_l+0x25e>
 8019bea:	2d10      	cmp	r5, #16
 8019bec:	bfdc      	itt	le
 8019bee:	230a      	movle	r3, #10
 8019bf0:	fb03 2909 	mlale	r9, r3, r9, r2
 8019bf4:	e7e1      	b.n	8019bba <_strtod_l+0x242>
 8019bf6:	2300      	movs	r3, #0
 8019bf8:	9305      	str	r3, [sp, #20]
 8019bfa:	2301      	movs	r3, #1
 8019bfc:	e77c      	b.n	8019af8 <_strtod_l+0x180>
 8019bfe:	f04f 0c00 	mov.w	ip, #0
 8019c02:	f108 0202 	add.w	r2, r8, #2
 8019c06:	9217      	str	r2, [sp, #92]	; 0x5c
 8019c08:	f898 2002 	ldrb.w	r2, [r8, #2]
 8019c0c:	e785      	b.n	8019b1a <_strtod_l+0x1a2>
 8019c0e:	f04f 0c01 	mov.w	ip, #1
 8019c12:	e7f6      	b.n	8019c02 <_strtod_l+0x28a>
 8019c14:	0801e0cc 	.word	0x0801e0cc
 8019c18:	0801de20 	.word	0x0801de20
 8019c1c:	7ff00000 	.word	0x7ff00000
 8019c20:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8019c22:	1c51      	adds	r1, r2, #1
 8019c24:	9117      	str	r1, [sp, #92]	; 0x5c
 8019c26:	7852      	ldrb	r2, [r2, #1]
 8019c28:	2a30      	cmp	r2, #48	; 0x30
 8019c2a:	d0f9      	beq.n	8019c20 <_strtod_l+0x2a8>
 8019c2c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8019c30:	2908      	cmp	r1, #8
 8019c32:	f63f af79 	bhi.w	8019b28 <_strtod_l+0x1b0>
 8019c36:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8019c3a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8019c3c:	9206      	str	r2, [sp, #24]
 8019c3e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8019c40:	1c51      	adds	r1, r2, #1
 8019c42:	9117      	str	r1, [sp, #92]	; 0x5c
 8019c44:	7852      	ldrb	r2, [r2, #1]
 8019c46:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8019c4a:	2e09      	cmp	r6, #9
 8019c4c:	d937      	bls.n	8019cbe <_strtod_l+0x346>
 8019c4e:	9e06      	ldr	r6, [sp, #24]
 8019c50:	1b89      	subs	r1, r1, r6
 8019c52:	2908      	cmp	r1, #8
 8019c54:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8019c58:	dc02      	bgt.n	8019c60 <_strtod_l+0x2e8>
 8019c5a:	4576      	cmp	r6, lr
 8019c5c:	bfa8      	it	ge
 8019c5e:	4676      	movge	r6, lr
 8019c60:	f1bc 0f00 	cmp.w	ip, #0
 8019c64:	d000      	beq.n	8019c68 <_strtod_l+0x2f0>
 8019c66:	4276      	negs	r6, r6
 8019c68:	2d00      	cmp	r5, #0
 8019c6a:	d14d      	bne.n	8019d08 <_strtod_l+0x390>
 8019c6c:	9904      	ldr	r1, [sp, #16]
 8019c6e:	4301      	orrs	r1, r0
 8019c70:	f47f aec6 	bne.w	8019a00 <_strtod_l+0x88>
 8019c74:	2b00      	cmp	r3, #0
 8019c76:	f47f aee1 	bne.w	8019a3c <_strtod_l+0xc4>
 8019c7a:	2a69      	cmp	r2, #105	; 0x69
 8019c7c:	d027      	beq.n	8019cce <_strtod_l+0x356>
 8019c7e:	dc24      	bgt.n	8019cca <_strtod_l+0x352>
 8019c80:	2a49      	cmp	r2, #73	; 0x49
 8019c82:	d024      	beq.n	8019cce <_strtod_l+0x356>
 8019c84:	2a4e      	cmp	r2, #78	; 0x4e
 8019c86:	f47f aed9 	bne.w	8019a3c <_strtod_l+0xc4>
 8019c8a:	499f      	ldr	r1, [pc, #636]	; (8019f08 <_strtod_l+0x590>)
 8019c8c:	a817      	add	r0, sp, #92	; 0x5c
 8019c8e:	f002 f8b3 	bl	801bdf8 <__match>
 8019c92:	2800      	cmp	r0, #0
 8019c94:	f43f aed2 	beq.w	8019a3c <_strtod_l+0xc4>
 8019c98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019c9a:	781b      	ldrb	r3, [r3, #0]
 8019c9c:	2b28      	cmp	r3, #40	; 0x28
 8019c9e:	d12d      	bne.n	8019cfc <_strtod_l+0x384>
 8019ca0:	499a      	ldr	r1, [pc, #616]	; (8019f0c <_strtod_l+0x594>)
 8019ca2:	aa1a      	add	r2, sp, #104	; 0x68
 8019ca4:	a817      	add	r0, sp, #92	; 0x5c
 8019ca6:	f002 f8bb 	bl	801be20 <__hexnan>
 8019caa:	2805      	cmp	r0, #5
 8019cac:	d126      	bne.n	8019cfc <_strtod_l+0x384>
 8019cae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019cb0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8019cb4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8019cb8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8019cbc:	e6a0      	b.n	8019a00 <_strtod_l+0x88>
 8019cbe:	210a      	movs	r1, #10
 8019cc0:	fb01 2e0e 	mla	lr, r1, lr, r2
 8019cc4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8019cc8:	e7b9      	b.n	8019c3e <_strtod_l+0x2c6>
 8019cca:	2a6e      	cmp	r2, #110	; 0x6e
 8019ccc:	e7db      	b.n	8019c86 <_strtod_l+0x30e>
 8019cce:	4990      	ldr	r1, [pc, #576]	; (8019f10 <_strtod_l+0x598>)
 8019cd0:	a817      	add	r0, sp, #92	; 0x5c
 8019cd2:	f002 f891 	bl	801bdf8 <__match>
 8019cd6:	2800      	cmp	r0, #0
 8019cd8:	f43f aeb0 	beq.w	8019a3c <_strtod_l+0xc4>
 8019cdc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019cde:	498d      	ldr	r1, [pc, #564]	; (8019f14 <_strtod_l+0x59c>)
 8019ce0:	3b01      	subs	r3, #1
 8019ce2:	a817      	add	r0, sp, #92	; 0x5c
 8019ce4:	9317      	str	r3, [sp, #92]	; 0x5c
 8019ce6:	f002 f887 	bl	801bdf8 <__match>
 8019cea:	b910      	cbnz	r0, 8019cf2 <_strtod_l+0x37a>
 8019cec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019cee:	3301      	adds	r3, #1
 8019cf0:	9317      	str	r3, [sp, #92]	; 0x5c
 8019cf2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8019f24 <_strtod_l+0x5ac>
 8019cf6:	f04f 0a00 	mov.w	sl, #0
 8019cfa:	e681      	b.n	8019a00 <_strtod_l+0x88>
 8019cfc:	4886      	ldr	r0, [pc, #536]	; (8019f18 <_strtod_l+0x5a0>)
 8019cfe:	f003 fa1f 	bl	801d140 <nan>
 8019d02:	ec5b ab10 	vmov	sl, fp, d0
 8019d06:	e67b      	b.n	8019a00 <_strtod_l+0x88>
 8019d08:	9b05      	ldr	r3, [sp, #20]
 8019d0a:	9807      	ldr	r0, [sp, #28]
 8019d0c:	1af3      	subs	r3, r6, r3
 8019d0e:	2f00      	cmp	r7, #0
 8019d10:	bf08      	it	eq
 8019d12:	462f      	moveq	r7, r5
 8019d14:	2d10      	cmp	r5, #16
 8019d16:	9306      	str	r3, [sp, #24]
 8019d18:	46a8      	mov	r8, r5
 8019d1a:	bfa8      	it	ge
 8019d1c:	f04f 0810 	movge.w	r8, #16
 8019d20:	f7ed fbd0 	bl	80074c4 <__aeabi_ui2d>
 8019d24:	2d09      	cmp	r5, #9
 8019d26:	4682      	mov	sl, r0
 8019d28:	468b      	mov	fp, r1
 8019d2a:	dd13      	ble.n	8019d54 <_strtod_l+0x3dc>
 8019d2c:	4b7b      	ldr	r3, [pc, #492]	; (8019f1c <_strtod_l+0x5a4>)
 8019d2e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8019d32:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8019d36:	f7ed fc3f 	bl	80075b8 <__aeabi_dmul>
 8019d3a:	4682      	mov	sl, r0
 8019d3c:	4648      	mov	r0, r9
 8019d3e:	468b      	mov	fp, r1
 8019d40:	f7ed fbc0 	bl	80074c4 <__aeabi_ui2d>
 8019d44:	4602      	mov	r2, r0
 8019d46:	460b      	mov	r3, r1
 8019d48:	4650      	mov	r0, sl
 8019d4a:	4659      	mov	r1, fp
 8019d4c:	f7ed fa7e 	bl	800724c <__adddf3>
 8019d50:	4682      	mov	sl, r0
 8019d52:	468b      	mov	fp, r1
 8019d54:	2d0f      	cmp	r5, #15
 8019d56:	dc38      	bgt.n	8019dca <_strtod_l+0x452>
 8019d58:	9b06      	ldr	r3, [sp, #24]
 8019d5a:	2b00      	cmp	r3, #0
 8019d5c:	f43f ae50 	beq.w	8019a00 <_strtod_l+0x88>
 8019d60:	dd24      	ble.n	8019dac <_strtod_l+0x434>
 8019d62:	2b16      	cmp	r3, #22
 8019d64:	dc0b      	bgt.n	8019d7e <_strtod_l+0x406>
 8019d66:	496d      	ldr	r1, [pc, #436]	; (8019f1c <_strtod_l+0x5a4>)
 8019d68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8019d6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019d70:	4652      	mov	r2, sl
 8019d72:	465b      	mov	r3, fp
 8019d74:	f7ed fc20 	bl	80075b8 <__aeabi_dmul>
 8019d78:	4682      	mov	sl, r0
 8019d7a:	468b      	mov	fp, r1
 8019d7c:	e640      	b.n	8019a00 <_strtod_l+0x88>
 8019d7e:	9a06      	ldr	r2, [sp, #24]
 8019d80:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8019d84:	4293      	cmp	r3, r2
 8019d86:	db20      	blt.n	8019dca <_strtod_l+0x452>
 8019d88:	4c64      	ldr	r4, [pc, #400]	; (8019f1c <_strtod_l+0x5a4>)
 8019d8a:	f1c5 050f 	rsb	r5, r5, #15
 8019d8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8019d92:	4652      	mov	r2, sl
 8019d94:	465b      	mov	r3, fp
 8019d96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019d9a:	f7ed fc0d 	bl	80075b8 <__aeabi_dmul>
 8019d9e:	9b06      	ldr	r3, [sp, #24]
 8019da0:	1b5d      	subs	r5, r3, r5
 8019da2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8019da6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019daa:	e7e3      	b.n	8019d74 <_strtod_l+0x3fc>
 8019dac:	9b06      	ldr	r3, [sp, #24]
 8019dae:	3316      	adds	r3, #22
 8019db0:	db0b      	blt.n	8019dca <_strtod_l+0x452>
 8019db2:	9b05      	ldr	r3, [sp, #20]
 8019db4:	1b9e      	subs	r6, r3, r6
 8019db6:	4b59      	ldr	r3, [pc, #356]	; (8019f1c <_strtod_l+0x5a4>)
 8019db8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8019dbc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8019dc0:	4650      	mov	r0, sl
 8019dc2:	4659      	mov	r1, fp
 8019dc4:	f7ed fd22 	bl	800780c <__aeabi_ddiv>
 8019dc8:	e7d6      	b.n	8019d78 <_strtod_l+0x400>
 8019dca:	9b06      	ldr	r3, [sp, #24]
 8019dcc:	eba5 0808 	sub.w	r8, r5, r8
 8019dd0:	4498      	add	r8, r3
 8019dd2:	f1b8 0f00 	cmp.w	r8, #0
 8019dd6:	dd74      	ble.n	8019ec2 <_strtod_l+0x54a>
 8019dd8:	f018 030f 	ands.w	r3, r8, #15
 8019ddc:	d00a      	beq.n	8019df4 <_strtod_l+0x47c>
 8019dde:	494f      	ldr	r1, [pc, #316]	; (8019f1c <_strtod_l+0x5a4>)
 8019de0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8019de4:	4652      	mov	r2, sl
 8019de6:	465b      	mov	r3, fp
 8019de8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019dec:	f7ed fbe4 	bl	80075b8 <__aeabi_dmul>
 8019df0:	4682      	mov	sl, r0
 8019df2:	468b      	mov	fp, r1
 8019df4:	f038 080f 	bics.w	r8, r8, #15
 8019df8:	d04f      	beq.n	8019e9a <_strtod_l+0x522>
 8019dfa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8019dfe:	dd22      	ble.n	8019e46 <_strtod_l+0x4ce>
 8019e00:	2500      	movs	r5, #0
 8019e02:	462e      	mov	r6, r5
 8019e04:	9507      	str	r5, [sp, #28]
 8019e06:	9505      	str	r5, [sp, #20]
 8019e08:	2322      	movs	r3, #34	; 0x22
 8019e0a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8019f24 <_strtod_l+0x5ac>
 8019e0e:	6023      	str	r3, [r4, #0]
 8019e10:	f04f 0a00 	mov.w	sl, #0
 8019e14:	9b07      	ldr	r3, [sp, #28]
 8019e16:	2b00      	cmp	r3, #0
 8019e18:	f43f adf2 	beq.w	8019a00 <_strtod_l+0x88>
 8019e1c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8019e1e:	4620      	mov	r0, r4
 8019e20:	f002 f960 	bl	801c0e4 <_Bfree>
 8019e24:	9905      	ldr	r1, [sp, #20]
 8019e26:	4620      	mov	r0, r4
 8019e28:	f002 f95c 	bl	801c0e4 <_Bfree>
 8019e2c:	4631      	mov	r1, r6
 8019e2e:	4620      	mov	r0, r4
 8019e30:	f002 f958 	bl	801c0e4 <_Bfree>
 8019e34:	9907      	ldr	r1, [sp, #28]
 8019e36:	4620      	mov	r0, r4
 8019e38:	f002 f954 	bl	801c0e4 <_Bfree>
 8019e3c:	4629      	mov	r1, r5
 8019e3e:	4620      	mov	r0, r4
 8019e40:	f002 f950 	bl	801c0e4 <_Bfree>
 8019e44:	e5dc      	b.n	8019a00 <_strtod_l+0x88>
 8019e46:	4b36      	ldr	r3, [pc, #216]	; (8019f20 <_strtod_l+0x5a8>)
 8019e48:	9304      	str	r3, [sp, #16]
 8019e4a:	2300      	movs	r3, #0
 8019e4c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8019e50:	4650      	mov	r0, sl
 8019e52:	4659      	mov	r1, fp
 8019e54:	4699      	mov	r9, r3
 8019e56:	f1b8 0f01 	cmp.w	r8, #1
 8019e5a:	dc21      	bgt.n	8019ea0 <_strtod_l+0x528>
 8019e5c:	b10b      	cbz	r3, 8019e62 <_strtod_l+0x4ea>
 8019e5e:	4682      	mov	sl, r0
 8019e60:	468b      	mov	fp, r1
 8019e62:	4b2f      	ldr	r3, [pc, #188]	; (8019f20 <_strtod_l+0x5a8>)
 8019e64:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8019e68:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8019e6c:	4652      	mov	r2, sl
 8019e6e:	465b      	mov	r3, fp
 8019e70:	e9d9 0100 	ldrd	r0, r1, [r9]
 8019e74:	f7ed fba0 	bl	80075b8 <__aeabi_dmul>
 8019e78:	4b2a      	ldr	r3, [pc, #168]	; (8019f24 <_strtod_l+0x5ac>)
 8019e7a:	460a      	mov	r2, r1
 8019e7c:	400b      	ands	r3, r1
 8019e7e:	492a      	ldr	r1, [pc, #168]	; (8019f28 <_strtod_l+0x5b0>)
 8019e80:	428b      	cmp	r3, r1
 8019e82:	4682      	mov	sl, r0
 8019e84:	d8bc      	bhi.n	8019e00 <_strtod_l+0x488>
 8019e86:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8019e8a:	428b      	cmp	r3, r1
 8019e8c:	bf86      	itte	hi
 8019e8e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8019f2c <_strtod_l+0x5b4>
 8019e92:	f04f 3aff 	movhi.w	sl, #4294967295
 8019e96:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8019e9a:	2300      	movs	r3, #0
 8019e9c:	9304      	str	r3, [sp, #16]
 8019e9e:	e084      	b.n	8019faa <_strtod_l+0x632>
 8019ea0:	f018 0f01 	tst.w	r8, #1
 8019ea4:	d005      	beq.n	8019eb2 <_strtod_l+0x53a>
 8019ea6:	9b04      	ldr	r3, [sp, #16]
 8019ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019eac:	f7ed fb84 	bl	80075b8 <__aeabi_dmul>
 8019eb0:	2301      	movs	r3, #1
 8019eb2:	9a04      	ldr	r2, [sp, #16]
 8019eb4:	3208      	adds	r2, #8
 8019eb6:	f109 0901 	add.w	r9, r9, #1
 8019eba:	ea4f 0868 	mov.w	r8, r8, asr #1
 8019ebe:	9204      	str	r2, [sp, #16]
 8019ec0:	e7c9      	b.n	8019e56 <_strtod_l+0x4de>
 8019ec2:	d0ea      	beq.n	8019e9a <_strtod_l+0x522>
 8019ec4:	f1c8 0800 	rsb	r8, r8, #0
 8019ec8:	f018 020f 	ands.w	r2, r8, #15
 8019ecc:	d00a      	beq.n	8019ee4 <_strtod_l+0x56c>
 8019ece:	4b13      	ldr	r3, [pc, #76]	; (8019f1c <_strtod_l+0x5a4>)
 8019ed0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019ed4:	4650      	mov	r0, sl
 8019ed6:	4659      	mov	r1, fp
 8019ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019edc:	f7ed fc96 	bl	800780c <__aeabi_ddiv>
 8019ee0:	4682      	mov	sl, r0
 8019ee2:	468b      	mov	fp, r1
 8019ee4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8019ee8:	d0d7      	beq.n	8019e9a <_strtod_l+0x522>
 8019eea:	f1b8 0f1f 	cmp.w	r8, #31
 8019eee:	dd1f      	ble.n	8019f30 <_strtod_l+0x5b8>
 8019ef0:	2500      	movs	r5, #0
 8019ef2:	462e      	mov	r6, r5
 8019ef4:	9507      	str	r5, [sp, #28]
 8019ef6:	9505      	str	r5, [sp, #20]
 8019ef8:	2322      	movs	r3, #34	; 0x22
 8019efa:	f04f 0a00 	mov.w	sl, #0
 8019efe:	f04f 0b00 	mov.w	fp, #0
 8019f02:	6023      	str	r3, [r4, #0]
 8019f04:	e786      	b.n	8019e14 <_strtod_l+0x49c>
 8019f06:	bf00      	nop
 8019f08:	0801ddf1 	.word	0x0801ddf1
 8019f0c:	0801de34 	.word	0x0801de34
 8019f10:	0801dde9 	.word	0x0801dde9
 8019f14:	0801df74 	.word	0x0801df74
 8019f18:	0801e288 	.word	0x0801e288
 8019f1c:	0801e168 	.word	0x0801e168
 8019f20:	0801e140 	.word	0x0801e140
 8019f24:	7ff00000 	.word	0x7ff00000
 8019f28:	7ca00000 	.word	0x7ca00000
 8019f2c:	7fefffff 	.word	0x7fefffff
 8019f30:	f018 0310 	ands.w	r3, r8, #16
 8019f34:	bf18      	it	ne
 8019f36:	236a      	movne	r3, #106	; 0x6a
 8019f38:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 801a2e8 <_strtod_l+0x970>
 8019f3c:	9304      	str	r3, [sp, #16]
 8019f3e:	4650      	mov	r0, sl
 8019f40:	4659      	mov	r1, fp
 8019f42:	2300      	movs	r3, #0
 8019f44:	f018 0f01 	tst.w	r8, #1
 8019f48:	d004      	beq.n	8019f54 <_strtod_l+0x5dc>
 8019f4a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8019f4e:	f7ed fb33 	bl	80075b8 <__aeabi_dmul>
 8019f52:	2301      	movs	r3, #1
 8019f54:	ea5f 0868 	movs.w	r8, r8, asr #1
 8019f58:	f109 0908 	add.w	r9, r9, #8
 8019f5c:	d1f2      	bne.n	8019f44 <_strtod_l+0x5cc>
 8019f5e:	b10b      	cbz	r3, 8019f64 <_strtod_l+0x5ec>
 8019f60:	4682      	mov	sl, r0
 8019f62:	468b      	mov	fp, r1
 8019f64:	9b04      	ldr	r3, [sp, #16]
 8019f66:	b1c3      	cbz	r3, 8019f9a <_strtod_l+0x622>
 8019f68:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8019f6c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8019f70:	2b00      	cmp	r3, #0
 8019f72:	4659      	mov	r1, fp
 8019f74:	dd11      	ble.n	8019f9a <_strtod_l+0x622>
 8019f76:	2b1f      	cmp	r3, #31
 8019f78:	f340 8124 	ble.w	801a1c4 <_strtod_l+0x84c>
 8019f7c:	2b34      	cmp	r3, #52	; 0x34
 8019f7e:	bfde      	ittt	le
 8019f80:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8019f84:	f04f 33ff 	movle.w	r3, #4294967295
 8019f88:	fa03 f202 	lslle.w	r2, r3, r2
 8019f8c:	f04f 0a00 	mov.w	sl, #0
 8019f90:	bfcc      	ite	gt
 8019f92:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8019f96:	ea02 0b01 	andle.w	fp, r2, r1
 8019f9a:	2200      	movs	r2, #0
 8019f9c:	2300      	movs	r3, #0
 8019f9e:	4650      	mov	r0, sl
 8019fa0:	4659      	mov	r1, fp
 8019fa2:	f7ed fd71 	bl	8007a88 <__aeabi_dcmpeq>
 8019fa6:	2800      	cmp	r0, #0
 8019fa8:	d1a2      	bne.n	8019ef0 <_strtod_l+0x578>
 8019faa:	9b07      	ldr	r3, [sp, #28]
 8019fac:	9300      	str	r3, [sp, #0]
 8019fae:	9908      	ldr	r1, [sp, #32]
 8019fb0:	462b      	mov	r3, r5
 8019fb2:	463a      	mov	r2, r7
 8019fb4:	4620      	mov	r0, r4
 8019fb6:	f002 f8fd 	bl	801c1b4 <__s2b>
 8019fba:	9007      	str	r0, [sp, #28]
 8019fbc:	2800      	cmp	r0, #0
 8019fbe:	f43f af1f 	beq.w	8019e00 <_strtod_l+0x488>
 8019fc2:	9b05      	ldr	r3, [sp, #20]
 8019fc4:	1b9e      	subs	r6, r3, r6
 8019fc6:	9b06      	ldr	r3, [sp, #24]
 8019fc8:	2b00      	cmp	r3, #0
 8019fca:	bfb4      	ite	lt
 8019fcc:	4633      	movlt	r3, r6
 8019fce:	2300      	movge	r3, #0
 8019fd0:	930c      	str	r3, [sp, #48]	; 0x30
 8019fd2:	9b06      	ldr	r3, [sp, #24]
 8019fd4:	2500      	movs	r5, #0
 8019fd6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019fda:	9312      	str	r3, [sp, #72]	; 0x48
 8019fdc:	462e      	mov	r6, r5
 8019fde:	9b07      	ldr	r3, [sp, #28]
 8019fe0:	4620      	mov	r0, r4
 8019fe2:	6859      	ldr	r1, [r3, #4]
 8019fe4:	f002 f83e 	bl	801c064 <_Balloc>
 8019fe8:	9005      	str	r0, [sp, #20]
 8019fea:	2800      	cmp	r0, #0
 8019fec:	f43f af0c 	beq.w	8019e08 <_strtod_l+0x490>
 8019ff0:	9b07      	ldr	r3, [sp, #28]
 8019ff2:	691a      	ldr	r2, [r3, #16]
 8019ff4:	3202      	adds	r2, #2
 8019ff6:	f103 010c 	add.w	r1, r3, #12
 8019ffa:	0092      	lsls	r2, r2, #2
 8019ffc:	300c      	adds	r0, #12
 8019ffe:	f7fe fd59 	bl	8018ab4 <memcpy>
 801a002:	ec4b ab10 	vmov	d0, sl, fp
 801a006:	aa1a      	add	r2, sp, #104	; 0x68
 801a008:	a919      	add	r1, sp, #100	; 0x64
 801a00a:	4620      	mov	r0, r4
 801a00c:	f002 fc18 	bl	801c840 <__d2b>
 801a010:	ec4b ab18 	vmov	d8, sl, fp
 801a014:	9018      	str	r0, [sp, #96]	; 0x60
 801a016:	2800      	cmp	r0, #0
 801a018:	f43f aef6 	beq.w	8019e08 <_strtod_l+0x490>
 801a01c:	2101      	movs	r1, #1
 801a01e:	4620      	mov	r0, r4
 801a020:	f002 f962 	bl	801c2e8 <__i2b>
 801a024:	4606      	mov	r6, r0
 801a026:	2800      	cmp	r0, #0
 801a028:	f43f aeee 	beq.w	8019e08 <_strtod_l+0x490>
 801a02c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a02e:	9904      	ldr	r1, [sp, #16]
 801a030:	2b00      	cmp	r3, #0
 801a032:	bfab      	itete	ge
 801a034:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801a036:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801a038:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801a03a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801a03e:	bfac      	ite	ge
 801a040:	eb03 0902 	addge.w	r9, r3, r2
 801a044:	1ad7      	sublt	r7, r2, r3
 801a046:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801a048:	eba3 0801 	sub.w	r8, r3, r1
 801a04c:	4490      	add	r8, r2
 801a04e:	4ba1      	ldr	r3, [pc, #644]	; (801a2d4 <_strtod_l+0x95c>)
 801a050:	f108 38ff 	add.w	r8, r8, #4294967295
 801a054:	4598      	cmp	r8, r3
 801a056:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801a05a:	f280 80c7 	bge.w	801a1ec <_strtod_l+0x874>
 801a05e:	eba3 0308 	sub.w	r3, r3, r8
 801a062:	2b1f      	cmp	r3, #31
 801a064:	eba2 0203 	sub.w	r2, r2, r3
 801a068:	f04f 0101 	mov.w	r1, #1
 801a06c:	f300 80b1 	bgt.w	801a1d2 <_strtod_l+0x85a>
 801a070:	fa01 f303 	lsl.w	r3, r1, r3
 801a074:	930d      	str	r3, [sp, #52]	; 0x34
 801a076:	2300      	movs	r3, #0
 801a078:	9308      	str	r3, [sp, #32]
 801a07a:	eb09 0802 	add.w	r8, r9, r2
 801a07e:	9b04      	ldr	r3, [sp, #16]
 801a080:	45c1      	cmp	r9, r8
 801a082:	4417      	add	r7, r2
 801a084:	441f      	add	r7, r3
 801a086:	464b      	mov	r3, r9
 801a088:	bfa8      	it	ge
 801a08a:	4643      	movge	r3, r8
 801a08c:	42bb      	cmp	r3, r7
 801a08e:	bfa8      	it	ge
 801a090:	463b      	movge	r3, r7
 801a092:	2b00      	cmp	r3, #0
 801a094:	bfc2      	ittt	gt
 801a096:	eba8 0803 	subgt.w	r8, r8, r3
 801a09a:	1aff      	subgt	r7, r7, r3
 801a09c:	eba9 0903 	subgt.w	r9, r9, r3
 801a0a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a0a2:	2b00      	cmp	r3, #0
 801a0a4:	dd17      	ble.n	801a0d6 <_strtod_l+0x75e>
 801a0a6:	4631      	mov	r1, r6
 801a0a8:	461a      	mov	r2, r3
 801a0aa:	4620      	mov	r0, r4
 801a0ac:	f002 f9dc 	bl	801c468 <__pow5mult>
 801a0b0:	4606      	mov	r6, r0
 801a0b2:	2800      	cmp	r0, #0
 801a0b4:	f43f aea8 	beq.w	8019e08 <_strtod_l+0x490>
 801a0b8:	4601      	mov	r1, r0
 801a0ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a0bc:	4620      	mov	r0, r4
 801a0be:	f002 f929 	bl	801c314 <__multiply>
 801a0c2:	900b      	str	r0, [sp, #44]	; 0x2c
 801a0c4:	2800      	cmp	r0, #0
 801a0c6:	f43f ae9f 	beq.w	8019e08 <_strtod_l+0x490>
 801a0ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a0cc:	4620      	mov	r0, r4
 801a0ce:	f002 f809 	bl	801c0e4 <_Bfree>
 801a0d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a0d4:	9318      	str	r3, [sp, #96]	; 0x60
 801a0d6:	f1b8 0f00 	cmp.w	r8, #0
 801a0da:	f300 808c 	bgt.w	801a1f6 <_strtod_l+0x87e>
 801a0de:	9b06      	ldr	r3, [sp, #24]
 801a0e0:	2b00      	cmp	r3, #0
 801a0e2:	dd08      	ble.n	801a0f6 <_strtod_l+0x77e>
 801a0e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a0e6:	9905      	ldr	r1, [sp, #20]
 801a0e8:	4620      	mov	r0, r4
 801a0ea:	f002 f9bd 	bl	801c468 <__pow5mult>
 801a0ee:	9005      	str	r0, [sp, #20]
 801a0f0:	2800      	cmp	r0, #0
 801a0f2:	f43f ae89 	beq.w	8019e08 <_strtod_l+0x490>
 801a0f6:	2f00      	cmp	r7, #0
 801a0f8:	dd08      	ble.n	801a10c <_strtod_l+0x794>
 801a0fa:	9905      	ldr	r1, [sp, #20]
 801a0fc:	463a      	mov	r2, r7
 801a0fe:	4620      	mov	r0, r4
 801a100:	f002 fa0c 	bl	801c51c <__lshift>
 801a104:	9005      	str	r0, [sp, #20]
 801a106:	2800      	cmp	r0, #0
 801a108:	f43f ae7e 	beq.w	8019e08 <_strtod_l+0x490>
 801a10c:	f1b9 0f00 	cmp.w	r9, #0
 801a110:	dd08      	ble.n	801a124 <_strtod_l+0x7ac>
 801a112:	4631      	mov	r1, r6
 801a114:	464a      	mov	r2, r9
 801a116:	4620      	mov	r0, r4
 801a118:	f002 fa00 	bl	801c51c <__lshift>
 801a11c:	4606      	mov	r6, r0
 801a11e:	2800      	cmp	r0, #0
 801a120:	f43f ae72 	beq.w	8019e08 <_strtod_l+0x490>
 801a124:	9a05      	ldr	r2, [sp, #20]
 801a126:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a128:	4620      	mov	r0, r4
 801a12a:	f002 fa83 	bl	801c634 <__mdiff>
 801a12e:	4605      	mov	r5, r0
 801a130:	2800      	cmp	r0, #0
 801a132:	f43f ae69 	beq.w	8019e08 <_strtod_l+0x490>
 801a136:	68c3      	ldr	r3, [r0, #12]
 801a138:	930b      	str	r3, [sp, #44]	; 0x2c
 801a13a:	2300      	movs	r3, #0
 801a13c:	60c3      	str	r3, [r0, #12]
 801a13e:	4631      	mov	r1, r6
 801a140:	f002 fa5c 	bl	801c5fc <__mcmp>
 801a144:	2800      	cmp	r0, #0
 801a146:	da60      	bge.n	801a20a <_strtod_l+0x892>
 801a148:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a14a:	ea53 030a 	orrs.w	r3, r3, sl
 801a14e:	f040 8082 	bne.w	801a256 <_strtod_l+0x8de>
 801a152:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a156:	2b00      	cmp	r3, #0
 801a158:	d17d      	bne.n	801a256 <_strtod_l+0x8de>
 801a15a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801a15e:	0d1b      	lsrs	r3, r3, #20
 801a160:	051b      	lsls	r3, r3, #20
 801a162:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801a166:	d976      	bls.n	801a256 <_strtod_l+0x8de>
 801a168:	696b      	ldr	r3, [r5, #20]
 801a16a:	b913      	cbnz	r3, 801a172 <_strtod_l+0x7fa>
 801a16c:	692b      	ldr	r3, [r5, #16]
 801a16e:	2b01      	cmp	r3, #1
 801a170:	dd71      	ble.n	801a256 <_strtod_l+0x8de>
 801a172:	4629      	mov	r1, r5
 801a174:	2201      	movs	r2, #1
 801a176:	4620      	mov	r0, r4
 801a178:	f002 f9d0 	bl	801c51c <__lshift>
 801a17c:	4631      	mov	r1, r6
 801a17e:	4605      	mov	r5, r0
 801a180:	f002 fa3c 	bl	801c5fc <__mcmp>
 801a184:	2800      	cmp	r0, #0
 801a186:	dd66      	ble.n	801a256 <_strtod_l+0x8de>
 801a188:	9904      	ldr	r1, [sp, #16]
 801a18a:	4a53      	ldr	r2, [pc, #332]	; (801a2d8 <_strtod_l+0x960>)
 801a18c:	465b      	mov	r3, fp
 801a18e:	2900      	cmp	r1, #0
 801a190:	f000 8081 	beq.w	801a296 <_strtod_l+0x91e>
 801a194:	ea02 010b 	and.w	r1, r2, fp
 801a198:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801a19c:	dc7b      	bgt.n	801a296 <_strtod_l+0x91e>
 801a19e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801a1a2:	f77f aea9 	ble.w	8019ef8 <_strtod_l+0x580>
 801a1a6:	4b4d      	ldr	r3, [pc, #308]	; (801a2dc <_strtod_l+0x964>)
 801a1a8:	4650      	mov	r0, sl
 801a1aa:	4659      	mov	r1, fp
 801a1ac:	2200      	movs	r2, #0
 801a1ae:	f7ed fa03 	bl	80075b8 <__aeabi_dmul>
 801a1b2:	460b      	mov	r3, r1
 801a1b4:	4303      	orrs	r3, r0
 801a1b6:	bf08      	it	eq
 801a1b8:	2322      	moveq	r3, #34	; 0x22
 801a1ba:	4682      	mov	sl, r0
 801a1bc:	468b      	mov	fp, r1
 801a1be:	bf08      	it	eq
 801a1c0:	6023      	streq	r3, [r4, #0]
 801a1c2:	e62b      	b.n	8019e1c <_strtod_l+0x4a4>
 801a1c4:	f04f 32ff 	mov.w	r2, #4294967295
 801a1c8:	fa02 f303 	lsl.w	r3, r2, r3
 801a1cc:	ea03 0a0a 	and.w	sl, r3, sl
 801a1d0:	e6e3      	b.n	8019f9a <_strtod_l+0x622>
 801a1d2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801a1d6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801a1da:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801a1de:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801a1e2:	fa01 f308 	lsl.w	r3, r1, r8
 801a1e6:	9308      	str	r3, [sp, #32]
 801a1e8:	910d      	str	r1, [sp, #52]	; 0x34
 801a1ea:	e746      	b.n	801a07a <_strtod_l+0x702>
 801a1ec:	2300      	movs	r3, #0
 801a1ee:	9308      	str	r3, [sp, #32]
 801a1f0:	2301      	movs	r3, #1
 801a1f2:	930d      	str	r3, [sp, #52]	; 0x34
 801a1f4:	e741      	b.n	801a07a <_strtod_l+0x702>
 801a1f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a1f8:	4642      	mov	r2, r8
 801a1fa:	4620      	mov	r0, r4
 801a1fc:	f002 f98e 	bl	801c51c <__lshift>
 801a200:	9018      	str	r0, [sp, #96]	; 0x60
 801a202:	2800      	cmp	r0, #0
 801a204:	f47f af6b 	bne.w	801a0de <_strtod_l+0x766>
 801a208:	e5fe      	b.n	8019e08 <_strtod_l+0x490>
 801a20a:	465f      	mov	r7, fp
 801a20c:	d16e      	bne.n	801a2ec <_strtod_l+0x974>
 801a20e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a210:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a214:	b342      	cbz	r2, 801a268 <_strtod_l+0x8f0>
 801a216:	4a32      	ldr	r2, [pc, #200]	; (801a2e0 <_strtod_l+0x968>)
 801a218:	4293      	cmp	r3, r2
 801a21a:	d128      	bne.n	801a26e <_strtod_l+0x8f6>
 801a21c:	9b04      	ldr	r3, [sp, #16]
 801a21e:	4651      	mov	r1, sl
 801a220:	b1eb      	cbz	r3, 801a25e <_strtod_l+0x8e6>
 801a222:	4b2d      	ldr	r3, [pc, #180]	; (801a2d8 <_strtod_l+0x960>)
 801a224:	403b      	ands	r3, r7
 801a226:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801a22a:	f04f 32ff 	mov.w	r2, #4294967295
 801a22e:	d819      	bhi.n	801a264 <_strtod_l+0x8ec>
 801a230:	0d1b      	lsrs	r3, r3, #20
 801a232:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a236:	fa02 f303 	lsl.w	r3, r2, r3
 801a23a:	4299      	cmp	r1, r3
 801a23c:	d117      	bne.n	801a26e <_strtod_l+0x8f6>
 801a23e:	4b29      	ldr	r3, [pc, #164]	; (801a2e4 <_strtod_l+0x96c>)
 801a240:	429f      	cmp	r7, r3
 801a242:	d102      	bne.n	801a24a <_strtod_l+0x8d2>
 801a244:	3101      	adds	r1, #1
 801a246:	f43f addf 	beq.w	8019e08 <_strtod_l+0x490>
 801a24a:	4b23      	ldr	r3, [pc, #140]	; (801a2d8 <_strtod_l+0x960>)
 801a24c:	403b      	ands	r3, r7
 801a24e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801a252:	f04f 0a00 	mov.w	sl, #0
 801a256:	9b04      	ldr	r3, [sp, #16]
 801a258:	2b00      	cmp	r3, #0
 801a25a:	d1a4      	bne.n	801a1a6 <_strtod_l+0x82e>
 801a25c:	e5de      	b.n	8019e1c <_strtod_l+0x4a4>
 801a25e:	f04f 33ff 	mov.w	r3, #4294967295
 801a262:	e7ea      	b.n	801a23a <_strtod_l+0x8c2>
 801a264:	4613      	mov	r3, r2
 801a266:	e7e8      	b.n	801a23a <_strtod_l+0x8c2>
 801a268:	ea53 030a 	orrs.w	r3, r3, sl
 801a26c:	d08c      	beq.n	801a188 <_strtod_l+0x810>
 801a26e:	9b08      	ldr	r3, [sp, #32]
 801a270:	b1db      	cbz	r3, 801a2aa <_strtod_l+0x932>
 801a272:	423b      	tst	r3, r7
 801a274:	d0ef      	beq.n	801a256 <_strtod_l+0x8de>
 801a276:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a278:	9a04      	ldr	r2, [sp, #16]
 801a27a:	4650      	mov	r0, sl
 801a27c:	4659      	mov	r1, fp
 801a27e:	b1c3      	cbz	r3, 801a2b2 <_strtod_l+0x93a>
 801a280:	f7ff fb5c 	bl	801993c <sulp>
 801a284:	4602      	mov	r2, r0
 801a286:	460b      	mov	r3, r1
 801a288:	ec51 0b18 	vmov	r0, r1, d8
 801a28c:	f7ec ffde 	bl	800724c <__adddf3>
 801a290:	4682      	mov	sl, r0
 801a292:	468b      	mov	fp, r1
 801a294:	e7df      	b.n	801a256 <_strtod_l+0x8de>
 801a296:	4013      	ands	r3, r2
 801a298:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801a29c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801a2a0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801a2a4:	f04f 3aff 	mov.w	sl, #4294967295
 801a2a8:	e7d5      	b.n	801a256 <_strtod_l+0x8de>
 801a2aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a2ac:	ea13 0f0a 	tst.w	r3, sl
 801a2b0:	e7e0      	b.n	801a274 <_strtod_l+0x8fc>
 801a2b2:	f7ff fb43 	bl	801993c <sulp>
 801a2b6:	4602      	mov	r2, r0
 801a2b8:	460b      	mov	r3, r1
 801a2ba:	ec51 0b18 	vmov	r0, r1, d8
 801a2be:	f7ec ffc3 	bl	8007248 <__aeabi_dsub>
 801a2c2:	2200      	movs	r2, #0
 801a2c4:	2300      	movs	r3, #0
 801a2c6:	4682      	mov	sl, r0
 801a2c8:	468b      	mov	fp, r1
 801a2ca:	f7ed fbdd 	bl	8007a88 <__aeabi_dcmpeq>
 801a2ce:	2800      	cmp	r0, #0
 801a2d0:	d0c1      	beq.n	801a256 <_strtod_l+0x8de>
 801a2d2:	e611      	b.n	8019ef8 <_strtod_l+0x580>
 801a2d4:	fffffc02 	.word	0xfffffc02
 801a2d8:	7ff00000 	.word	0x7ff00000
 801a2dc:	39500000 	.word	0x39500000
 801a2e0:	000fffff 	.word	0x000fffff
 801a2e4:	7fefffff 	.word	0x7fefffff
 801a2e8:	0801de48 	.word	0x0801de48
 801a2ec:	4631      	mov	r1, r6
 801a2ee:	4628      	mov	r0, r5
 801a2f0:	f002 fb02 	bl	801c8f8 <__ratio>
 801a2f4:	ec59 8b10 	vmov	r8, r9, d0
 801a2f8:	ee10 0a10 	vmov	r0, s0
 801a2fc:	2200      	movs	r2, #0
 801a2fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a302:	4649      	mov	r1, r9
 801a304:	f7ed fbd4 	bl	8007ab0 <__aeabi_dcmple>
 801a308:	2800      	cmp	r0, #0
 801a30a:	d07a      	beq.n	801a402 <_strtod_l+0xa8a>
 801a30c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a30e:	2b00      	cmp	r3, #0
 801a310:	d04a      	beq.n	801a3a8 <_strtod_l+0xa30>
 801a312:	4b95      	ldr	r3, [pc, #596]	; (801a568 <_strtod_l+0xbf0>)
 801a314:	2200      	movs	r2, #0
 801a316:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a31a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801a568 <_strtod_l+0xbf0>
 801a31e:	f04f 0800 	mov.w	r8, #0
 801a322:	4b92      	ldr	r3, [pc, #584]	; (801a56c <_strtod_l+0xbf4>)
 801a324:	403b      	ands	r3, r7
 801a326:	930d      	str	r3, [sp, #52]	; 0x34
 801a328:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a32a:	4b91      	ldr	r3, [pc, #580]	; (801a570 <_strtod_l+0xbf8>)
 801a32c:	429a      	cmp	r2, r3
 801a32e:	f040 80b0 	bne.w	801a492 <_strtod_l+0xb1a>
 801a332:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801a336:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801a33a:	ec4b ab10 	vmov	d0, sl, fp
 801a33e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801a342:	f002 fa01 	bl	801c748 <__ulp>
 801a346:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801a34a:	ec53 2b10 	vmov	r2, r3, d0
 801a34e:	f7ed f933 	bl	80075b8 <__aeabi_dmul>
 801a352:	4652      	mov	r2, sl
 801a354:	465b      	mov	r3, fp
 801a356:	f7ec ff79 	bl	800724c <__adddf3>
 801a35a:	460b      	mov	r3, r1
 801a35c:	4983      	ldr	r1, [pc, #524]	; (801a56c <_strtod_l+0xbf4>)
 801a35e:	4a85      	ldr	r2, [pc, #532]	; (801a574 <_strtod_l+0xbfc>)
 801a360:	4019      	ands	r1, r3
 801a362:	4291      	cmp	r1, r2
 801a364:	4682      	mov	sl, r0
 801a366:	d960      	bls.n	801a42a <_strtod_l+0xab2>
 801a368:	ee18 3a90 	vmov	r3, s17
 801a36c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801a370:	4293      	cmp	r3, r2
 801a372:	d104      	bne.n	801a37e <_strtod_l+0xa06>
 801a374:	ee18 3a10 	vmov	r3, s16
 801a378:	3301      	adds	r3, #1
 801a37a:	f43f ad45 	beq.w	8019e08 <_strtod_l+0x490>
 801a37e:	f8df b200 	ldr.w	fp, [pc, #512]	; 801a580 <_strtod_l+0xc08>
 801a382:	f04f 3aff 	mov.w	sl, #4294967295
 801a386:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a388:	4620      	mov	r0, r4
 801a38a:	f001 feab 	bl	801c0e4 <_Bfree>
 801a38e:	9905      	ldr	r1, [sp, #20]
 801a390:	4620      	mov	r0, r4
 801a392:	f001 fea7 	bl	801c0e4 <_Bfree>
 801a396:	4631      	mov	r1, r6
 801a398:	4620      	mov	r0, r4
 801a39a:	f001 fea3 	bl	801c0e4 <_Bfree>
 801a39e:	4629      	mov	r1, r5
 801a3a0:	4620      	mov	r0, r4
 801a3a2:	f001 fe9f 	bl	801c0e4 <_Bfree>
 801a3a6:	e61a      	b.n	8019fde <_strtod_l+0x666>
 801a3a8:	f1ba 0f00 	cmp.w	sl, #0
 801a3ac:	d11b      	bne.n	801a3e6 <_strtod_l+0xa6e>
 801a3ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a3b2:	b9f3      	cbnz	r3, 801a3f2 <_strtod_l+0xa7a>
 801a3b4:	4b6c      	ldr	r3, [pc, #432]	; (801a568 <_strtod_l+0xbf0>)
 801a3b6:	2200      	movs	r2, #0
 801a3b8:	4640      	mov	r0, r8
 801a3ba:	4649      	mov	r1, r9
 801a3bc:	f7ed fb6e 	bl	8007a9c <__aeabi_dcmplt>
 801a3c0:	b9d0      	cbnz	r0, 801a3f8 <_strtod_l+0xa80>
 801a3c2:	4640      	mov	r0, r8
 801a3c4:	4649      	mov	r1, r9
 801a3c6:	4b6c      	ldr	r3, [pc, #432]	; (801a578 <_strtod_l+0xc00>)
 801a3c8:	2200      	movs	r2, #0
 801a3ca:	f7ed f8f5 	bl	80075b8 <__aeabi_dmul>
 801a3ce:	4680      	mov	r8, r0
 801a3d0:	4689      	mov	r9, r1
 801a3d2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801a3d6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801a3da:	9315      	str	r3, [sp, #84]	; 0x54
 801a3dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801a3e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a3e4:	e79d      	b.n	801a322 <_strtod_l+0x9aa>
 801a3e6:	f1ba 0f01 	cmp.w	sl, #1
 801a3ea:	d102      	bne.n	801a3f2 <_strtod_l+0xa7a>
 801a3ec:	2f00      	cmp	r7, #0
 801a3ee:	f43f ad83 	beq.w	8019ef8 <_strtod_l+0x580>
 801a3f2:	4b62      	ldr	r3, [pc, #392]	; (801a57c <_strtod_l+0xc04>)
 801a3f4:	2200      	movs	r2, #0
 801a3f6:	e78e      	b.n	801a316 <_strtod_l+0x99e>
 801a3f8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 801a578 <_strtod_l+0xc00>
 801a3fc:	f04f 0800 	mov.w	r8, #0
 801a400:	e7e7      	b.n	801a3d2 <_strtod_l+0xa5a>
 801a402:	4b5d      	ldr	r3, [pc, #372]	; (801a578 <_strtod_l+0xc00>)
 801a404:	4640      	mov	r0, r8
 801a406:	4649      	mov	r1, r9
 801a408:	2200      	movs	r2, #0
 801a40a:	f7ed f8d5 	bl	80075b8 <__aeabi_dmul>
 801a40e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a410:	4680      	mov	r8, r0
 801a412:	4689      	mov	r9, r1
 801a414:	b933      	cbnz	r3, 801a424 <_strtod_l+0xaac>
 801a416:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a41a:	900e      	str	r0, [sp, #56]	; 0x38
 801a41c:	930f      	str	r3, [sp, #60]	; 0x3c
 801a41e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801a422:	e7dd      	b.n	801a3e0 <_strtod_l+0xa68>
 801a424:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 801a428:	e7f9      	b.n	801a41e <_strtod_l+0xaa6>
 801a42a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801a42e:	9b04      	ldr	r3, [sp, #16]
 801a430:	2b00      	cmp	r3, #0
 801a432:	d1a8      	bne.n	801a386 <_strtod_l+0xa0e>
 801a434:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801a438:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a43a:	0d1b      	lsrs	r3, r3, #20
 801a43c:	051b      	lsls	r3, r3, #20
 801a43e:	429a      	cmp	r2, r3
 801a440:	d1a1      	bne.n	801a386 <_strtod_l+0xa0e>
 801a442:	4640      	mov	r0, r8
 801a444:	4649      	mov	r1, r9
 801a446:	f7ed fc17 	bl	8007c78 <__aeabi_d2lz>
 801a44a:	f7ed f887 	bl	800755c <__aeabi_l2d>
 801a44e:	4602      	mov	r2, r0
 801a450:	460b      	mov	r3, r1
 801a452:	4640      	mov	r0, r8
 801a454:	4649      	mov	r1, r9
 801a456:	f7ec fef7 	bl	8007248 <__aeabi_dsub>
 801a45a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a45c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a460:	ea43 030a 	orr.w	r3, r3, sl
 801a464:	4313      	orrs	r3, r2
 801a466:	4680      	mov	r8, r0
 801a468:	4689      	mov	r9, r1
 801a46a:	d055      	beq.n	801a518 <_strtod_l+0xba0>
 801a46c:	a336      	add	r3, pc, #216	; (adr r3, 801a548 <_strtod_l+0xbd0>)
 801a46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a472:	f7ed fb13 	bl	8007a9c <__aeabi_dcmplt>
 801a476:	2800      	cmp	r0, #0
 801a478:	f47f acd0 	bne.w	8019e1c <_strtod_l+0x4a4>
 801a47c:	a334      	add	r3, pc, #208	; (adr r3, 801a550 <_strtod_l+0xbd8>)
 801a47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a482:	4640      	mov	r0, r8
 801a484:	4649      	mov	r1, r9
 801a486:	f7ed fb27 	bl	8007ad8 <__aeabi_dcmpgt>
 801a48a:	2800      	cmp	r0, #0
 801a48c:	f43f af7b 	beq.w	801a386 <_strtod_l+0xa0e>
 801a490:	e4c4      	b.n	8019e1c <_strtod_l+0x4a4>
 801a492:	9b04      	ldr	r3, [sp, #16]
 801a494:	b333      	cbz	r3, 801a4e4 <_strtod_l+0xb6c>
 801a496:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a498:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801a49c:	d822      	bhi.n	801a4e4 <_strtod_l+0xb6c>
 801a49e:	a32e      	add	r3, pc, #184	; (adr r3, 801a558 <_strtod_l+0xbe0>)
 801a4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4a4:	4640      	mov	r0, r8
 801a4a6:	4649      	mov	r1, r9
 801a4a8:	f7ed fb02 	bl	8007ab0 <__aeabi_dcmple>
 801a4ac:	b1a0      	cbz	r0, 801a4d8 <_strtod_l+0xb60>
 801a4ae:	4649      	mov	r1, r9
 801a4b0:	4640      	mov	r0, r8
 801a4b2:	f7ed fb59 	bl	8007b68 <__aeabi_d2uiz>
 801a4b6:	2801      	cmp	r0, #1
 801a4b8:	bf38      	it	cc
 801a4ba:	2001      	movcc	r0, #1
 801a4bc:	f7ed f802 	bl	80074c4 <__aeabi_ui2d>
 801a4c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a4c2:	4680      	mov	r8, r0
 801a4c4:	4689      	mov	r9, r1
 801a4c6:	bb23      	cbnz	r3, 801a512 <_strtod_l+0xb9a>
 801a4c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a4cc:	9010      	str	r0, [sp, #64]	; 0x40
 801a4ce:	9311      	str	r3, [sp, #68]	; 0x44
 801a4d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801a4d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a4d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a4da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a4dc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801a4e0:	1a9b      	subs	r3, r3, r2
 801a4e2:	9309      	str	r3, [sp, #36]	; 0x24
 801a4e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801a4e8:	eeb0 0a48 	vmov.f32	s0, s16
 801a4ec:	eef0 0a68 	vmov.f32	s1, s17
 801a4f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801a4f4:	f002 f928 	bl	801c748 <__ulp>
 801a4f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801a4fc:	ec53 2b10 	vmov	r2, r3, d0
 801a500:	f7ed f85a 	bl	80075b8 <__aeabi_dmul>
 801a504:	ec53 2b18 	vmov	r2, r3, d8
 801a508:	f7ec fea0 	bl	800724c <__adddf3>
 801a50c:	4682      	mov	sl, r0
 801a50e:	468b      	mov	fp, r1
 801a510:	e78d      	b.n	801a42e <_strtod_l+0xab6>
 801a512:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801a516:	e7db      	b.n	801a4d0 <_strtod_l+0xb58>
 801a518:	a311      	add	r3, pc, #68	; (adr r3, 801a560 <_strtod_l+0xbe8>)
 801a51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a51e:	f7ed fabd 	bl	8007a9c <__aeabi_dcmplt>
 801a522:	e7b2      	b.n	801a48a <_strtod_l+0xb12>
 801a524:	2300      	movs	r3, #0
 801a526:	930a      	str	r3, [sp, #40]	; 0x28
 801a528:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a52a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a52c:	6013      	str	r3, [r2, #0]
 801a52e:	f7ff ba6b 	b.w	8019a08 <_strtod_l+0x90>
 801a532:	2a65      	cmp	r2, #101	; 0x65
 801a534:	f43f ab5f 	beq.w	8019bf6 <_strtod_l+0x27e>
 801a538:	2a45      	cmp	r2, #69	; 0x45
 801a53a:	f43f ab5c 	beq.w	8019bf6 <_strtod_l+0x27e>
 801a53e:	2301      	movs	r3, #1
 801a540:	f7ff bb94 	b.w	8019c6c <_strtod_l+0x2f4>
 801a544:	f3af 8000 	nop.w
 801a548:	94a03595 	.word	0x94a03595
 801a54c:	3fdfffff 	.word	0x3fdfffff
 801a550:	35afe535 	.word	0x35afe535
 801a554:	3fe00000 	.word	0x3fe00000
 801a558:	ffc00000 	.word	0xffc00000
 801a55c:	41dfffff 	.word	0x41dfffff
 801a560:	94a03595 	.word	0x94a03595
 801a564:	3fcfffff 	.word	0x3fcfffff
 801a568:	3ff00000 	.word	0x3ff00000
 801a56c:	7ff00000 	.word	0x7ff00000
 801a570:	7fe00000 	.word	0x7fe00000
 801a574:	7c9fffff 	.word	0x7c9fffff
 801a578:	3fe00000 	.word	0x3fe00000
 801a57c:	bff00000 	.word	0xbff00000
 801a580:	7fefffff 	.word	0x7fefffff

0801a584 <_strtod_r>:
 801a584:	4b01      	ldr	r3, [pc, #4]	; (801a58c <_strtod_r+0x8>)
 801a586:	f7ff b9f7 	b.w	8019978 <_strtod_l>
 801a58a:	bf00      	nop
 801a58c:	200000f8 	.word	0x200000f8

0801a590 <_strtol_l.constprop.0>:
 801a590:	2b01      	cmp	r3, #1
 801a592:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a596:	d001      	beq.n	801a59c <_strtol_l.constprop.0+0xc>
 801a598:	2b24      	cmp	r3, #36	; 0x24
 801a59a:	d906      	bls.n	801a5aa <_strtol_l.constprop.0+0x1a>
 801a59c:	f7fe fa60 	bl	8018a60 <__errno>
 801a5a0:	2316      	movs	r3, #22
 801a5a2:	6003      	str	r3, [r0, #0]
 801a5a4:	2000      	movs	r0, #0
 801a5a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a5aa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801a690 <_strtol_l.constprop.0+0x100>
 801a5ae:	460d      	mov	r5, r1
 801a5b0:	462e      	mov	r6, r5
 801a5b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a5b6:	f814 700c 	ldrb.w	r7, [r4, ip]
 801a5ba:	f017 0708 	ands.w	r7, r7, #8
 801a5be:	d1f7      	bne.n	801a5b0 <_strtol_l.constprop.0+0x20>
 801a5c0:	2c2d      	cmp	r4, #45	; 0x2d
 801a5c2:	d132      	bne.n	801a62a <_strtol_l.constprop.0+0x9a>
 801a5c4:	782c      	ldrb	r4, [r5, #0]
 801a5c6:	2701      	movs	r7, #1
 801a5c8:	1cb5      	adds	r5, r6, #2
 801a5ca:	2b00      	cmp	r3, #0
 801a5cc:	d05b      	beq.n	801a686 <_strtol_l.constprop.0+0xf6>
 801a5ce:	2b10      	cmp	r3, #16
 801a5d0:	d109      	bne.n	801a5e6 <_strtol_l.constprop.0+0x56>
 801a5d2:	2c30      	cmp	r4, #48	; 0x30
 801a5d4:	d107      	bne.n	801a5e6 <_strtol_l.constprop.0+0x56>
 801a5d6:	782c      	ldrb	r4, [r5, #0]
 801a5d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801a5dc:	2c58      	cmp	r4, #88	; 0x58
 801a5de:	d14d      	bne.n	801a67c <_strtol_l.constprop.0+0xec>
 801a5e0:	786c      	ldrb	r4, [r5, #1]
 801a5e2:	2310      	movs	r3, #16
 801a5e4:	3502      	adds	r5, #2
 801a5e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801a5ea:	f108 38ff 	add.w	r8, r8, #4294967295
 801a5ee:	f04f 0c00 	mov.w	ip, #0
 801a5f2:	fbb8 f9f3 	udiv	r9, r8, r3
 801a5f6:	4666      	mov	r6, ip
 801a5f8:	fb03 8a19 	mls	sl, r3, r9, r8
 801a5fc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801a600:	f1be 0f09 	cmp.w	lr, #9
 801a604:	d816      	bhi.n	801a634 <_strtol_l.constprop.0+0xa4>
 801a606:	4674      	mov	r4, lr
 801a608:	42a3      	cmp	r3, r4
 801a60a:	dd24      	ble.n	801a656 <_strtol_l.constprop.0+0xc6>
 801a60c:	f1bc 0f00 	cmp.w	ip, #0
 801a610:	db1e      	blt.n	801a650 <_strtol_l.constprop.0+0xc0>
 801a612:	45b1      	cmp	r9, r6
 801a614:	d31c      	bcc.n	801a650 <_strtol_l.constprop.0+0xc0>
 801a616:	d101      	bne.n	801a61c <_strtol_l.constprop.0+0x8c>
 801a618:	45a2      	cmp	sl, r4
 801a61a:	db19      	blt.n	801a650 <_strtol_l.constprop.0+0xc0>
 801a61c:	fb06 4603 	mla	r6, r6, r3, r4
 801a620:	f04f 0c01 	mov.w	ip, #1
 801a624:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a628:	e7e8      	b.n	801a5fc <_strtol_l.constprop.0+0x6c>
 801a62a:	2c2b      	cmp	r4, #43	; 0x2b
 801a62c:	bf04      	itt	eq
 801a62e:	782c      	ldrbeq	r4, [r5, #0]
 801a630:	1cb5      	addeq	r5, r6, #2
 801a632:	e7ca      	b.n	801a5ca <_strtol_l.constprop.0+0x3a>
 801a634:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801a638:	f1be 0f19 	cmp.w	lr, #25
 801a63c:	d801      	bhi.n	801a642 <_strtol_l.constprop.0+0xb2>
 801a63e:	3c37      	subs	r4, #55	; 0x37
 801a640:	e7e2      	b.n	801a608 <_strtol_l.constprop.0+0x78>
 801a642:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801a646:	f1be 0f19 	cmp.w	lr, #25
 801a64a:	d804      	bhi.n	801a656 <_strtol_l.constprop.0+0xc6>
 801a64c:	3c57      	subs	r4, #87	; 0x57
 801a64e:	e7db      	b.n	801a608 <_strtol_l.constprop.0+0x78>
 801a650:	f04f 3cff 	mov.w	ip, #4294967295
 801a654:	e7e6      	b.n	801a624 <_strtol_l.constprop.0+0x94>
 801a656:	f1bc 0f00 	cmp.w	ip, #0
 801a65a:	da05      	bge.n	801a668 <_strtol_l.constprop.0+0xd8>
 801a65c:	2322      	movs	r3, #34	; 0x22
 801a65e:	6003      	str	r3, [r0, #0]
 801a660:	4646      	mov	r6, r8
 801a662:	b942      	cbnz	r2, 801a676 <_strtol_l.constprop.0+0xe6>
 801a664:	4630      	mov	r0, r6
 801a666:	e79e      	b.n	801a5a6 <_strtol_l.constprop.0+0x16>
 801a668:	b107      	cbz	r7, 801a66c <_strtol_l.constprop.0+0xdc>
 801a66a:	4276      	negs	r6, r6
 801a66c:	2a00      	cmp	r2, #0
 801a66e:	d0f9      	beq.n	801a664 <_strtol_l.constprop.0+0xd4>
 801a670:	f1bc 0f00 	cmp.w	ip, #0
 801a674:	d000      	beq.n	801a678 <_strtol_l.constprop.0+0xe8>
 801a676:	1e69      	subs	r1, r5, #1
 801a678:	6011      	str	r1, [r2, #0]
 801a67a:	e7f3      	b.n	801a664 <_strtol_l.constprop.0+0xd4>
 801a67c:	2430      	movs	r4, #48	; 0x30
 801a67e:	2b00      	cmp	r3, #0
 801a680:	d1b1      	bne.n	801a5e6 <_strtol_l.constprop.0+0x56>
 801a682:	2308      	movs	r3, #8
 801a684:	e7af      	b.n	801a5e6 <_strtol_l.constprop.0+0x56>
 801a686:	2c30      	cmp	r4, #48	; 0x30
 801a688:	d0a5      	beq.n	801a5d6 <_strtol_l.constprop.0+0x46>
 801a68a:	230a      	movs	r3, #10
 801a68c:	e7ab      	b.n	801a5e6 <_strtol_l.constprop.0+0x56>
 801a68e:	bf00      	nop
 801a690:	0801de71 	.word	0x0801de71

0801a694 <_strtol_r>:
 801a694:	f7ff bf7c 	b.w	801a590 <_strtol_l.constprop.0>

0801a698 <__swbuf_r>:
 801a698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a69a:	460e      	mov	r6, r1
 801a69c:	4614      	mov	r4, r2
 801a69e:	4605      	mov	r5, r0
 801a6a0:	b118      	cbz	r0, 801a6aa <__swbuf_r+0x12>
 801a6a2:	6983      	ldr	r3, [r0, #24]
 801a6a4:	b90b      	cbnz	r3, 801a6aa <__swbuf_r+0x12>
 801a6a6:	f001 f84b 	bl	801b740 <__sinit>
 801a6aa:	4b21      	ldr	r3, [pc, #132]	; (801a730 <__swbuf_r+0x98>)
 801a6ac:	429c      	cmp	r4, r3
 801a6ae:	d12b      	bne.n	801a708 <__swbuf_r+0x70>
 801a6b0:	686c      	ldr	r4, [r5, #4]
 801a6b2:	69a3      	ldr	r3, [r4, #24]
 801a6b4:	60a3      	str	r3, [r4, #8]
 801a6b6:	89a3      	ldrh	r3, [r4, #12]
 801a6b8:	071a      	lsls	r2, r3, #28
 801a6ba:	d52f      	bpl.n	801a71c <__swbuf_r+0x84>
 801a6bc:	6923      	ldr	r3, [r4, #16]
 801a6be:	b36b      	cbz	r3, 801a71c <__swbuf_r+0x84>
 801a6c0:	6923      	ldr	r3, [r4, #16]
 801a6c2:	6820      	ldr	r0, [r4, #0]
 801a6c4:	1ac0      	subs	r0, r0, r3
 801a6c6:	6963      	ldr	r3, [r4, #20]
 801a6c8:	b2f6      	uxtb	r6, r6
 801a6ca:	4283      	cmp	r3, r0
 801a6cc:	4637      	mov	r7, r6
 801a6ce:	dc04      	bgt.n	801a6da <__swbuf_r+0x42>
 801a6d0:	4621      	mov	r1, r4
 801a6d2:	4628      	mov	r0, r5
 801a6d4:	f000 ffa0 	bl	801b618 <_fflush_r>
 801a6d8:	bb30      	cbnz	r0, 801a728 <__swbuf_r+0x90>
 801a6da:	68a3      	ldr	r3, [r4, #8]
 801a6dc:	3b01      	subs	r3, #1
 801a6de:	60a3      	str	r3, [r4, #8]
 801a6e0:	6823      	ldr	r3, [r4, #0]
 801a6e2:	1c5a      	adds	r2, r3, #1
 801a6e4:	6022      	str	r2, [r4, #0]
 801a6e6:	701e      	strb	r6, [r3, #0]
 801a6e8:	6963      	ldr	r3, [r4, #20]
 801a6ea:	3001      	adds	r0, #1
 801a6ec:	4283      	cmp	r3, r0
 801a6ee:	d004      	beq.n	801a6fa <__swbuf_r+0x62>
 801a6f0:	89a3      	ldrh	r3, [r4, #12]
 801a6f2:	07db      	lsls	r3, r3, #31
 801a6f4:	d506      	bpl.n	801a704 <__swbuf_r+0x6c>
 801a6f6:	2e0a      	cmp	r6, #10
 801a6f8:	d104      	bne.n	801a704 <__swbuf_r+0x6c>
 801a6fa:	4621      	mov	r1, r4
 801a6fc:	4628      	mov	r0, r5
 801a6fe:	f000 ff8b 	bl	801b618 <_fflush_r>
 801a702:	b988      	cbnz	r0, 801a728 <__swbuf_r+0x90>
 801a704:	4638      	mov	r0, r7
 801a706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a708:	4b0a      	ldr	r3, [pc, #40]	; (801a734 <__swbuf_r+0x9c>)
 801a70a:	429c      	cmp	r4, r3
 801a70c:	d101      	bne.n	801a712 <__swbuf_r+0x7a>
 801a70e:	68ac      	ldr	r4, [r5, #8]
 801a710:	e7cf      	b.n	801a6b2 <__swbuf_r+0x1a>
 801a712:	4b09      	ldr	r3, [pc, #36]	; (801a738 <__swbuf_r+0xa0>)
 801a714:	429c      	cmp	r4, r3
 801a716:	bf08      	it	eq
 801a718:	68ec      	ldreq	r4, [r5, #12]
 801a71a:	e7ca      	b.n	801a6b2 <__swbuf_r+0x1a>
 801a71c:	4621      	mov	r1, r4
 801a71e:	4628      	mov	r0, r5
 801a720:	f000 f80c 	bl	801a73c <__swsetup_r>
 801a724:	2800      	cmp	r0, #0
 801a726:	d0cb      	beq.n	801a6c0 <__swbuf_r+0x28>
 801a728:	f04f 37ff 	mov.w	r7, #4294967295
 801a72c:	e7ea      	b.n	801a704 <__swbuf_r+0x6c>
 801a72e:	bf00      	nop
 801a730:	0801e024 	.word	0x0801e024
 801a734:	0801e044 	.word	0x0801e044
 801a738:	0801e004 	.word	0x0801e004

0801a73c <__swsetup_r>:
 801a73c:	4b32      	ldr	r3, [pc, #200]	; (801a808 <__swsetup_r+0xcc>)
 801a73e:	b570      	push	{r4, r5, r6, lr}
 801a740:	681d      	ldr	r5, [r3, #0]
 801a742:	4606      	mov	r6, r0
 801a744:	460c      	mov	r4, r1
 801a746:	b125      	cbz	r5, 801a752 <__swsetup_r+0x16>
 801a748:	69ab      	ldr	r3, [r5, #24]
 801a74a:	b913      	cbnz	r3, 801a752 <__swsetup_r+0x16>
 801a74c:	4628      	mov	r0, r5
 801a74e:	f000 fff7 	bl	801b740 <__sinit>
 801a752:	4b2e      	ldr	r3, [pc, #184]	; (801a80c <__swsetup_r+0xd0>)
 801a754:	429c      	cmp	r4, r3
 801a756:	d10f      	bne.n	801a778 <__swsetup_r+0x3c>
 801a758:	686c      	ldr	r4, [r5, #4]
 801a75a:	89a3      	ldrh	r3, [r4, #12]
 801a75c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a760:	0719      	lsls	r1, r3, #28
 801a762:	d42c      	bmi.n	801a7be <__swsetup_r+0x82>
 801a764:	06dd      	lsls	r5, r3, #27
 801a766:	d411      	bmi.n	801a78c <__swsetup_r+0x50>
 801a768:	2309      	movs	r3, #9
 801a76a:	6033      	str	r3, [r6, #0]
 801a76c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a770:	81a3      	strh	r3, [r4, #12]
 801a772:	f04f 30ff 	mov.w	r0, #4294967295
 801a776:	e03e      	b.n	801a7f6 <__swsetup_r+0xba>
 801a778:	4b25      	ldr	r3, [pc, #148]	; (801a810 <__swsetup_r+0xd4>)
 801a77a:	429c      	cmp	r4, r3
 801a77c:	d101      	bne.n	801a782 <__swsetup_r+0x46>
 801a77e:	68ac      	ldr	r4, [r5, #8]
 801a780:	e7eb      	b.n	801a75a <__swsetup_r+0x1e>
 801a782:	4b24      	ldr	r3, [pc, #144]	; (801a814 <__swsetup_r+0xd8>)
 801a784:	429c      	cmp	r4, r3
 801a786:	bf08      	it	eq
 801a788:	68ec      	ldreq	r4, [r5, #12]
 801a78a:	e7e6      	b.n	801a75a <__swsetup_r+0x1e>
 801a78c:	0758      	lsls	r0, r3, #29
 801a78e:	d512      	bpl.n	801a7b6 <__swsetup_r+0x7a>
 801a790:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a792:	b141      	cbz	r1, 801a7a6 <__swsetup_r+0x6a>
 801a794:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a798:	4299      	cmp	r1, r3
 801a79a:	d002      	beq.n	801a7a2 <__swsetup_r+0x66>
 801a79c:	4630      	mov	r0, r6
 801a79e:	f002 f939 	bl	801ca14 <_free_r>
 801a7a2:	2300      	movs	r3, #0
 801a7a4:	6363      	str	r3, [r4, #52]	; 0x34
 801a7a6:	89a3      	ldrh	r3, [r4, #12]
 801a7a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a7ac:	81a3      	strh	r3, [r4, #12]
 801a7ae:	2300      	movs	r3, #0
 801a7b0:	6063      	str	r3, [r4, #4]
 801a7b2:	6923      	ldr	r3, [r4, #16]
 801a7b4:	6023      	str	r3, [r4, #0]
 801a7b6:	89a3      	ldrh	r3, [r4, #12]
 801a7b8:	f043 0308 	orr.w	r3, r3, #8
 801a7bc:	81a3      	strh	r3, [r4, #12]
 801a7be:	6923      	ldr	r3, [r4, #16]
 801a7c0:	b94b      	cbnz	r3, 801a7d6 <__swsetup_r+0x9a>
 801a7c2:	89a3      	ldrh	r3, [r4, #12]
 801a7c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a7c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a7cc:	d003      	beq.n	801a7d6 <__swsetup_r+0x9a>
 801a7ce:	4621      	mov	r1, r4
 801a7d0:	4630      	mov	r0, r6
 801a7d2:	f001 fbed 	bl	801bfb0 <__smakebuf_r>
 801a7d6:	89a0      	ldrh	r0, [r4, #12]
 801a7d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a7dc:	f010 0301 	ands.w	r3, r0, #1
 801a7e0:	d00a      	beq.n	801a7f8 <__swsetup_r+0xbc>
 801a7e2:	2300      	movs	r3, #0
 801a7e4:	60a3      	str	r3, [r4, #8]
 801a7e6:	6963      	ldr	r3, [r4, #20]
 801a7e8:	425b      	negs	r3, r3
 801a7ea:	61a3      	str	r3, [r4, #24]
 801a7ec:	6923      	ldr	r3, [r4, #16]
 801a7ee:	b943      	cbnz	r3, 801a802 <__swsetup_r+0xc6>
 801a7f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a7f4:	d1ba      	bne.n	801a76c <__swsetup_r+0x30>
 801a7f6:	bd70      	pop	{r4, r5, r6, pc}
 801a7f8:	0781      	lsls	r1, r0, #30
 801a7fa:	bf58      	it	pl
 801a7fc:	6963      	ldrpl	r3, [r4, #20]
 801a7fe:	60a3      	str	r3, [r4, #8]
 801a800:	e7f4      	b.n	801a7ec <__swsetup_r+0xb0>
 801a802:	2000      	movs	r0, #0
 801a804:	e7f7      	b.n	801a7f6 <__swsetup_r+0xba>
 801a806:	bf00      	nop
 801a808:	20000090 	.word	0x20000090
 801a80c:	0801e024 	.word	0x0801e024
 801a810:	0801e044 	.word	0x0801e044
 801a814:	0801e004 	.word	0x0801e004

0801a818 <quorem>:
 801a818:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a81c:	6903      	ldr	r3, [r0, #16]
 801a81e:	690c      	ldr	r4, [r1, #16]
 801a820:	42a3      	cmp	r3, r4
 801a822:	4607      	mov	r7, r0
 801a824:	f2c0 8081 	blt.w	801a92a <quorem+0x112>
 801a828:	3c01      	subs	r4, #1
 801a82a:	f101 0814 	add.w	r8, r1, #20
 801a82e:	f100 0514 	add.w	r5, r0, #20
 801a832:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a836:	9301      	str	r3, [sp, #4]
 801a838:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801a83c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a840:	3301      	adds	r3, #1
 801a842:	429a      	cmp	r2, r3
 801a844:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801a848:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801a84c:	fbb2 f6f3 	udiv	r6, r2, r3
 801a850:	d331      	bcc.n	801a8b6 <quorem+0x9e>
 801a852:	f04f 0e00 	mov.w	lr, #0
 801a856:	4640      	mov	r0, r8
 801a858:	46ac      	mov	ip, r5
 801a85a:	46f2      	mov	sl, lr
 801a85c:	f850 2b04 	ldr.w	r2, [r0], #4
 801a860:	b293      	uxth	r3, r2
 801a862:	fb06 e303 	mla	r3, r6, r3, lr
 801a866:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801a86a:	b29b      	uxth	r3, r3
 801a86c:	ebaa 0303 	sub.w	r3, sl, r3
 801a870:	f8dc a000 	ldr.w	sl, [ip]
 801a874:	0c12      	lsrs	r2, r2, #16
 801a876:	fa13 f38a 	uxtah	r3, r3, sl
 801a87a:	fb06 e202 	mla	r2, r6, r2, lr
 801a87e:	9300      	str	r3, [sp, #0]
 801a880:	9b00      	ldr	r3, [sp, #0]
 801a882:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801a886:	b292      	uxth	r2, r2
 801a888:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801a88c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a890:	f8bd 3000 	ldrh.w	r3, [sp]
 801a894:	4581      	cmp	r9, r0
 801a896:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a89a:	f84c 3b04 	str.w	r3, [ip], #4
 801a89e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801a8a2:	d2db      	bcs.n	801a85c <quorem+0x44>
 801a8a4:	f855 300b 	ldr.w	r3, [r5, fp]
 801a8a8:	b92b      	cbnz	r3, 801a8b6 <quorem+0x9e>
 801a8aa:	9b01      	ldr	r3, [sp, #4]
 801a8ac:	3b04      	subs	r3, #4
 801a8ae:	429d      	cmp	r5, r3
 801a8b0:	461a      	mov	r2, r3
 801a8b2:	d32e      	bcc.n	801a912 <quorem+0xfa>
 801a8b4:	613c      	str	r4, [r7, #16]
 801a8b6:	4638      	mov	r0, r7
 801a8b8:	f001 fea0 	bl	801c5fc <__mcmp>
 801a8bc:	2800      	cmp	r0, #0
 801a8be:	db24      	blt.n	801a90a <quorem+0xf2>
 801a8c0:	3601      	adds	r6, #1
 801a8c2:	4628      	mov	r0, r5
 801a8c4:	f04f 0c00 	mov.w	ip, #0
 801a8c8:	f858 2b04 	ldr.w	r2, [r8], #4
 801a8cc:	f8d0 e000 	ldr.w	lr, [r0]
 801a8d0:	b293      	uxth	r3, r2
 801a8d2:	ebac 0303 	sub.w	r3, ip, r3
 801a8d6:	0c12      	lsrs	r2, r2, #16
 801a8d8:	fa13 f38e 	uxtah	r3, r3, lr
 801a8dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801a8e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a8e4:	b29b      	uxth	r3, r3
 801a8e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a8ea:	45c1      	cmp	r9, r8
 801a8ec:	f840 3b04 	str.w	r3, [r0], #4
 801a8f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801a8f4:	d2e8      	bcs.n	801a8c8 <quorem+0xb0>
 801a8f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a8fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a8fe:	b922      	cbnz	r2, 801a90a <quorem+0xf2>
 801a900:	3b04      	subs	r3, #4
 801a902:	429d      	cmp	r5, r3
 801a904:	461a      	mov	r2, r3
 801a906:	d30a      	bcc.n	801a91e <quorem+0x106>
 801a908:	613c      	str	r4, [r7, #16]
 801a90a:	4630      	mov	r0, r6
 801a90c:	b003      	add	sp, #12
 801a90e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a912:	6812      	ldr	r2, [r2, #0]
 801a914:	3b04      	subs	r3, #4
 801a916:	2a00      	cmp	r2, #0
 801a918:	d1cc      	bne.n	801a8b4 <quorem+0x9c>
 801a91a:	3c01      	subs	r4, #1
 801a91c:	e7c7      	b.n	801a8ae <quorem+0x96>
 801a91e:	6812      	ldr	r2, [r2, #0]
 801a920:	3b04      	subs	r3, #4
 801a922:	2a00      	cmp	r2, #0
 801a924:	d1f0      	bne.n	801a908 <quorem+0xf0>
 801a926:	3c01      	subs	r4, #1
 801a928:	e7eb      	b.n	801a902 <quorem+0xea>
 801a92a:	2000      	movs	r0, #0
 801a92c:	e7ee      	b.n	801a90c <quorem+0xf4>
	...

0801a930 <_dtoa_r>:
 801a930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a934:	ed2d 8b04 	vpush	{d8-d9}
 801a938:	ec57 6b10 	vmov	r6, r7, d0
 801a93c:	b093      	sub	sp, #76	; 0x4c
 801a93e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801a940:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801a944:	9106      	str	r1, [sp, #24]
 801a946:	ee10 aa10 	vmov	sl, s0
 801a94a:	4604      	mov	r4, r0
 801a94c:	9209      	str	r2, [sp, #36]	; 0x24
 801a94e:	930c      	str	r3, [sp, #48]	; 0x30
 801a950:	46bb      	mov	fp, r7
 801a952:	b975      	cbnz	r5, 801a972 <_dtoa_r+0x42>
 801a954:	2010      	movs	r0, #16
 801a956:	f001 fb6b 	bl	801c030 <malloc>
 801a95a:	4602      	mov	r2, r0
 801a95c:	6260      	str	r0, [r4, #36]	; 0x24
 801a95e:	b920      	cbnz	r0, 801a96a <_dtoa_r+0x3a>
 801a960:	4ba7      	ldr	r3, [pc, #668]	; (801ac00 <_dtoa_r+0x2d0>)
 801a962:	21ea      	movs	r1, #234	; 0xea
 801a964:	48a7      	ldr	r0, [pc, #668]	; (801ac04 <_dtoa_r+0x2d4>)
 801a966:	f002 fc79 	bl	801d25c <__assert_func>
 801a96a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801a96e:	6005      	str	r5, [r0, #0]
 801a970:	60c5      	str	r5, [r0, #12]
 801a972:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a974:	6819      	ldr	r1, [r3, #0]
 801a976:	b151      	cbz	r1, 801a98e <_dtoa_r+0x5e>
 801a978:	685a      	ldr	r2, [r3, #4]
 801a97a:	604a      	str	r2, [r1, #4]
 801a97c:	2301      	movs	r3, #1
 801a97e:	4093      	lsls	r3, r2
 801a980:	608b      	str	r3, [r1, #8]
 801a982:	4620      	mov	r0, r4
 801a984:	f001 fbae 	bl	801c0e4 <_Bfree>
 801a988:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a98a:	2200      	movs	r2, #0
 801a98c:	601a      	str	r2, [r3, #0]
 801a98e:	1e3b      	subs	r3, r7, #0
 801a990:	bfaa      	itet	ge
 801a992:	2300      	movge	r3, #0
 801a994:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801a998:	f8c8 3000 	strge.w	r3, [r8]
 801a99c:	4b9a      	ldr	r3, [pc, #616]	; (801ac08 <_dtoa_r+0x2d8>)
 801a99e:	bfbc      	itt	lt
 801a9a0:	2201      	movlt	r2, #1
 801a9a2:	f8c8 2000 	strlt.w	r2, [r8]
 801a9a6:	ea33 030b 	bics.w	r3, r3, fp
 801a9aa:	d11b      	bne.n	801a9e4 <_dtoa_r+0xb4>
 801a9ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a9ae:	f242 730f 	movw	r3, #9999	; 0x270f
 801a9b2:	6013      	str	r3, [r2, #0]
 801a9b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a9b8:	4333      	orrs	r3, r6
 801a9ba:	f000 8592 	beq.w	801b4e2 <_dtoa_r+0xbb2>
 801a9be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a9c0:	b963      	cbnz	r3, 801a9dc <_dtoa_r+0xac>
 801a9c2:	4b92      	ldr	r3, [pc, #584]	; (801ac0c <_dtoa_r+0x2dc>)
 801a9c4:	e022      	b.n	801aa0c <_dtoa_r+0xdc>
 801a9c6:	4b92      	ldr	r3, [pc, #584]	; (801ac10 <_dtoa_r+0x2e0>)
 801a9c8:	9301      	str	r3, [sp, #4]
 801a9ca:	3308      	adds	r3, #8
 801a9cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a9ce:	6013      	str	r3, [r2, #0]
 801a9d0:	9801      	ldr	r0, [sp, #4]
 801a9d2:	b013      	add	sp, #76	; 0x4c
 801a9d4:	ecbd 8b04 	vpop	{d8-d9}
 801a9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9dc:	4b8b      	ldr	r3, [pc, #556]	; (801ac0c <_dtoa_r+0x2dc>)
 801a9de:	9301      	str	r3, [sp, #4]
 801a9e0:	3303      	adds	r3, #3
 801a9e2:	e7f3      	b.n	801a9cc <_dtoa_r+0x9c>
 801a9e4:	2200      	movs	r2, #0
 801a9e6:	2300      	movs	r3, #0
 801a9e8:	4650      	mov	r0, sl
 801a9ea:	4659      	mov	r1, fp
 801a9ec:	f7ed f84c 	bl	8007a88 <__aeabi_dcmpeq>
 801a9f0:	ec4b ab19 	vmov	d9, sl, fp
 801a9f4:	4680      	mov	r8, r0
 801a9f6:	b158      	cbz	r0, 801aa10 <_dtoa_r+0xe0>
 801a9f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a9fa:	2301      	movs	r3, #1
 801a9fc:	6013      	str	r3, [r2, #0]
 801a9fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801aa00:	2b00      	cmp	r3, #0
 801aa02:	f000 856b 	beq.w	801b4dc <_dtoa_r+0xbac>
 801aa06:	4883      	ldr	r0, [pc, #524]	; (801ac14 <_dtoa_r+0x2e4>)
 801aa08:	6018      	str	r0, [r3, #0]
 801aa0a:	1e43      	subs	r3, r0, #1
 801aa0c:	9301      	str	r3, [sp, #4]
 801aa0e:	e7df      	b.n	801a9d0 <_dtoa_r+0xa0>
 801aa10:	ec4b ab10 	vmov	d0, sl, fp
 801aa14:	aa10      	add	r2, sp, #64	; 0x40
 801aa16:	a911      	add	r1, sp, #68	; 0x44
 801aa18:	4620      	mov	r0, r4
 801aa1a:	f001 ff11 	bl	801c840 <__d2b>
 801aa1e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801aa22:	ee08 0a10 	vmov	s16, r0
 801aa26:	2d00      	cmp	r5, #0
 801aa28:	f000 8084 	beq.w	801ab34 <_dtoa_r+0x204>
 801aa2c:	ee19 3a90 	vmov	r3, s19
 801aa30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801aa34:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801aa38:	4656      	mov	r6, sl
 801aa3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801aa3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801aa42:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801aa46:	4b74      	ldr	r3, [pc, #464]	; (801ac18 <_dtoa_r+0x2e8>)
 801aa48:	2200      	movs	r2, #0
 801aa4a:	4630      	mov	r0, r6
 801aa4c:	4639      	mov	r1, r7
 801aa4e:	f7ec fbfb 	bl	8007248 <__aeabi_dsub>
 801aa52:	a365      	add	r3, pc, #404	; (adr r3, 801abe8 <_dtoa_r+0x2b8>)
 801aa54:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa58:	f7ec fdae 	bl	80075b8 <__aeabi_dmul>
 801aa5c:	a364      	add	r3, pc, #400	; (adr r3, 801abf0 <_dtoa_r+0x2c0>)
 801aa5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa62:	f7ec fbf3 	bl	800724c <__adddf3>
 801aa66:	4606      	mov	r6, r0
 801aa68:	4628      	mov	r0, r5
 801aa6a:	460f      	mov	r7, r1
 801aa6c:	f7ec fd3a 	bl	80074e4 <__aeabi_i2d>
 801aa70:	a361      	add	r3, pc, #388	; (adr r3, 801abf8 <_dtoa_r+0x2c8>)
 801aa72:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa76:	f7ec fd9f 	bl	80075b8 <__aeabi_dmul>
 801aa7a:	4602      	mov	r2, r0
 801aa7c:	460b      	mov	r3, r1
 801aa7e:	4630      	mov	r0, r6
 801aa80:	4639      	mov	r1, r7
 801aa82:	f7ec fbe3 	bl	800724c <__adddf3>
 801aa86:	4606      	mov	r6, r0
 801aa88:	460f      	mov	r7, r1
 801aa8a:	f7ed f845 	bl	8007b18 <__aeabi_d2iz>
 801aa8e:	2200      	movs	r2, #0
 801aa90:	9000      	str	r0, [sp, #0]
 801aa92:	2300      	movs	r3, #0
 801aa94:	4630      	mov	r0, r6
 801aa96:	4639      	mov	r1, r7
 801aa98:	f7ed f800 	bl	8007a9c <__aeabi_dcmplt>
 801aa9c:	b150      	cbz	r0, 801aab4 <_dtoa_r+0x184>
 801aa9e:	9800      	ldr	r0, [sp, #0]
 801aaa0:	f7ec fd20 	bl	80074e4 <__aeabi_i2d>
 801aaa4:	4632      	mov	r2, r6
 801aaa6:	463b      	mov	r3, r7
 801aaa8:	f7ec ffee 	bl	8007a88 <__aeabi_dcmpeq>
 801aaac:	b910      	cbnz	r0, 801aab4 <_dtoa_r+0x184>
 801aaae:	9b00      	ldr	r3, [sp, #0]
 801aab0:	3b01      	subs	r3, #1
 801aab2:	9300      	str	r3, [sp, #0]
 801aab4:	9b00      	ldr	r3, [sp, #0]
 801aab6:	2b16      	cmp	r3, #22
 801aab8:	d85a      	bhi.n	801ab70 <_dtoa_r+0x240>
 801aaba:	9a00      	ldr	r2, [sp, #0]
 801aabc:	4b57      	ldr	r3, [pc, #348]	; (801ac1c <_dtoa_r+0x2ec>)
 801aabe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801aac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aac6:	ec51 0b19 	vmov	r0, r1, d9
 801aaca:	f7ec ffe7 	bl	8007a9c <__aeabi_dcmplt>
 801aace:	2800      	cmp	r0, #0
 801aad0:	d050      	beq.n	801ab74 <_dtoa_r+0x244>
 801aad2:	9b00      	ldr	r3, [sp, #0]
 801aad4:	3b01      	subs	r3, #1
 801aad6:	9300      	str	r3, [sp, #0]
 801aad8:	2300      	movs	r3, #0
 801aada:	930b      	str	r3, [sp, #44]	; 0x2c
 801aadc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aade:	1b5d      	subs	r5, r3, r5
 801aae0:	1e6b      	subs	r3, r5, #1
 801aae2:	9305      	str	r3, [sp, #20]
 801aae4:	bf45      	ittet	mi
 801aae6:	f1c5 0301 	rsbmi	r3, r5, #1
 801aaea:	9304      	strmi	r3, [sp, #16]
 801aaec:	2300      	movpl	r3, #0
 801aaee:	2300      	movmi	r3, #0
 801aaf0:	bf4c      	ite	mi
 801aaf2:	9305      	strmi	r3, [sp, #20]
 801aaf4:	9304      	strpl	r3, [sp, #16]
 801aaf6:	9b00      	ldr	r3, [sp, #0]
 801aaf8:	2b00      	cmp	r3, #0
 801aafa:	db3d      	blt.n	801ab78 <_dtoa_r+0x248>
 801aafc:	9b05      	ldr	r3, [sp, #20]
 801aafe:	9a00      	ldr	r2, [sp, #0]
 801ab00:	920a      	str	r2, [sp, #40]	; 0x28
 801ab02:	4413      	add	r3, r2
 801ab04:	9305      	str	r3, [sp, #20]
 801ab06:	2300      	movs	r3, #0
 801ab08:	9307      	str	r3, [sp, #28]
 801ab0a:	9b06      	ldr	r3, [sp, #24]
 801ab0c:	2b09      	cmp	r3, #9
 801ab0e:	f200 8089 	bhi.w	801ac24 <_dtoa_r+0x2f4>
 801ab12:	2b05      	cmp	r3, #5
 801ab14:	bfc4      	itt	gt
 801ab16:	3b04      	subgt	r3, #4
 801ab18:	9306      	strgt	r3, [sp, #24]
 801ab1a:	9b06      	ldr	r3, [sp, #24]
 801ab1c:	f1a3 0302 	sub.w	r3, r3, #2
 801ab20:	bfcc      	ite	gt
 801ab22:	2500      	movgt	r5, #0
 801ab24:	2501      	movle	r5, #1
 801ab26:	2b03      	cmp	r3, #3
 801ab28:	f200 8087 	bhi.w	801ac3a <_dtoa_r+0x30a>
 801ab2c:	e8df f003 	tbb	[pc, r3]
 801ab30:	59383a2d 	.word	0x59383a2d
 801ab34:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801ab38:	441d      	add	r5, r3
 801ab3a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801ab3e:	2b20      	cmp	r3, #32
 801ab40:	bfc1      	itttt	gt
 801ab42:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801ab46:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801ab4a:	fa0b f303 	lslgt.w	r3, fp, r3
 801ab4e:	fa26 f000 	lsrgt.w	r0, r6, r0
 801ab52:	bfda      	itte	le
 801ab54:	f1c3 0320 	rsble	r3, r3, #32
 801ab58:	fa06 f003 	lslle.w	r0, r6, r3
 801ab5c:	4318      	orrgt	r0, r3
 801ab5e:	f7ec fcb1 	bl	80074c4 <__aeabi_ui2d>
 801ab62:	2301      	movs	r3, #1
 801ab64:	4606      	mov	r6, r0
 801ab66:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801ab6a:	3d01      	subs	r5, #1
 801ab6c:	930e      	str	r3, [sp, #56]	; 0x38
 801ab6e:	e76a      	b.n	801aa46 <_dtoa_r+0x116>
 801ab70:	2301      	movs	r3, #1
 801ab72:	e7b2      	b.n	801aada <_dtoa_r+0x1aa>
 801ab74:	900b      	str	r0, [sp, #44]	; 0x2c
 801ab76:	e7b1      	b.n	801aadc <_dtoa_r+0x1ac>
 801ab78:	9b04      	ldr	r3, [sp, #16]
 801ab7a:	9a00      	ldr	r2, [sp, #0]
 801ab7c:	1a9b      	subs	r3, r3, r2
 801ab7e:	9304      	str	r3, [sp, #16]
 801ab80:	4253      	negs	r3, r2
 801ab82:	9307      	str	r3, [sp, #28]
 801ab84:	2300      	movs	r3, #0
 801ab86:	930a      	str	r3, [sp, #40]	; 0x28
 801ab88:	e7bf      	b.n	801ab0a <_dtoa_r+0x1da>
 801ab8a:	2300      	movs	r3, #0
 801ab8c:	9308      	str	r3, [sp, #32]
 801ab8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ab90:	2b00      	cmp	r3, #0
 801ab92:	dc55      	bgt.n	801ac40 <_dtoa_r+0x310>
 801ab94:	2301      	movs	r3, #1
 801ab96:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801ab9a:	461a      	mov	r2, r3
 801ab9c:	9209      	str	r2, [sp, #36]	; 0x24
 801ab9e:	e00c      	b.n	801abba <_dtoa_r+0x28a>
 801aba0:	2301      	movs	r3, #1
 801aba2:	e7f3      	b.n	801ab8c <_dtoa_r+0x25c>
 801aba4:	2300      	movs	r3, #0
 801aba6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801aba8:	9308      	str	r3, [sp, #32]
 801abaa:	9b00      	ldr	r3, [sp, #0]
 801abac:	4413      	add	r3, r2
 801abae:	9302      	str	r3, [sp, #8]
 801abb0:	3301      	adds	r3, #1
 801abb2:	2b01      	cmp	r3, #1
 801abb4:	9303      	str	r3, [sp, #12]
 801abb6:	bfb8      	it	lt
 801abb8:	2301      	movlt	r3, #1
 801abba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801abbc:	2200      	movs	r2, #0
 801abbe:	6042      	str	r2, [r0, #4]
 801abc0:	2204      	movs	r2, #4
 801abc2:	f102 0614 	add.w	r6, r2, #20
 801abc6:	429e      	cmp	r6, r3
 801abc8:	6841      	ldr	r1, [r0, #4]
 801abca:	d93d      	bls.n	801ac48 <_dtoa_r+0x318>
 801abcc:	4620      	mov	r0, r4
 801abce:	f001 fa49 	bl	801c064 <_Balloc>
 801abd2:	9001      	str	r0, [sp, #4]
 801abd4:	2800      	cmp	r0, #0
 801abd6:	d13b      	bne.n	801ac50 <_dtoa_r+0x320>
 801abd8:	4b11      	ldr	r3, [pc, #68]	; (801ac20 <_dtoa_r+0x2f0>)
 801abda:	4602      	mov	r2, r0
 801abdc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801abe0:	e6c0      	b.n	801a964 <_dtoa_r+0x34>
 801abe2:	2301      	movs	r3, #1
 801abe4:	e7df      	b.n	801aba6 <_dtoa_r+0x276>
 801abe6:	bf00      	nop
 801abe8:	636f4361 	.word	0x636f4361
 801abec:	3fd287a7 	.word	0x3fd287a7
 801abf0:	8b60c8b3 	.word	0x8b60c8b3
 801abf4:	3fc68a28 	.word	0x3fc68a28
 801abf8:	509f79fb 	.word	0x509f79fb
 801abfc:	3fd34413 	.word	0x3fd34413
 801ac00:	0801df7e 	.word	0x0801df7e
 801ac04:	0801df95 	.word	0x0801df95
 801ac08:	7ff00000 	.word	0x7ff00000
 801ac0c:	0801df7a 	.word	0x0801df7a
 801ac10:	0801df71 	.word	0x0801df71
 801ac14:	0801ddf5 	.word	0x0801ddf5
 801ac18:	3ff80000 	.word	0x3ff80000
 801ac1c:	0801e168 	.word	0x0801e168
 801ac20:	0801dff0 	.word	0x0801dff0
 801ac24:	2501      	movs	r5, #1
 801ac26:	2300      	movs	r3, #0
 801ac28:	9306      	str	r3, [sp, #24]
 801ac2a:	9508      	str	r5, [sp, #32]
 801ac2c:	f04f 33ff 	mov.w	r3, #4294967295
 801ac30:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801ac34:	2200      	movs	r2, #0
 801ac36:	2312      	movs	r3, #18
 801ac38:	e7b0      	b.n	801ab9c <_dtoa_r+0x26c>
 801ac3a:	2301      	movs	r3, #1
 801ac3c:	9308      	str	r3, [sp, #32]
 801ac3e:	e7f5      	b.n	801ac2c <_dtoa_r+0x2fc>
 801ac40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac42:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801ac46:	e7b8      	b.n	801abba <_dtoa_r+0x28a>
 801ac48:	3101      	adds	r1, #1
 801ac4a:	6041      	str	r1, [r0, #4]
 801ac4c:	0052      	lsls	r2, r2, #1
 801ac4e:	e7b8      	b.n	801abc2 <_dtoa_r+0x292>
 801ac50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ac52:	9a01      	ldr	r2, [sp, #4]
 801ac54:	601a      	str	r2, [r3, #0]
 801ac56:	9b03      	ldr	r3, [sp, #12]
 801ac58:	2b0e      	cmp	r3, #14
 801ac5a:	f200 809d 	bhi.w	801ad98 <_dtoa_r+0x468>
 801ac5e:	2d00      	cmp	r5, #0
 801ac60:	f000 809a 	beq.w	801ad98 <_dtoa_r+0x468>
 801ac64:	9b00      	ldr	r3, [sp, #0]
 801ac66:	2b00      	cmp	r3, #0
 801ac68:	dd32      	ble.n	801acd0 <_dtoa_r+0x3a0>
 801ac6a:	4ab7      	ldr	r2, [pc, #732]	; (801af48 <_dtoa_r+0x618>)
 801ac6c:	f003 030f 	and.w	r3, r3, #15
 801ac70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801ac74:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ac78:	9b00      	ldr	r3, [sp, #0]
 801ac7a:	05d8      	lsls	r0, r3, #23
 801ac7c:	ea4f 1723 	mov.w	r7, r3, asr #4
 801ac80:	d516      	bpl.n	801acb0 <_dtoa_r+0x380>
 801ac82:	4bb2      	ldr	r3, [pc, #712]	; (801af4c <_dtoa_r+0x61c>)
 801ac84:	ec51 0b19 	vmov	r0, r1, d9
 801ac88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801ac8c:	f7ec fdbe 	bl	800780c <__aeabi_ddiv>
 801ac90:	f007 070f 	and.w	r7, r7, #15
 801ac94:	4682      	mov	sl, r0
 801ac96:	468b      	mov	fp, r1
 801ac98:	2503      	movs	r5, #3
 801ac9a:	4eac      	ldr	r6, [pc, #688]	; (801af4c <_dtoa_r+0x61c>)
 801ac9c:	b957      	cbnz	r7, 801acb4 <_dtoa_r+0x384>
 801ac9e:	4642      	mov	r2, r8
 801aca0:	464b      	mov	r3, r9
 801aca2:	4650      	mov	r0, sl
 801aca4:	4659      	mov	r1, fp
 801aca6:	f7ec fdb1 	bl	800780c <__aeabi_ddiv>
 801acaa:	4682      	mov	sl, r0
 801acac:	468b      	mov	fp, r1
 801acae:	e028      	b.n	801ad02 <_dtoa_r+0x3d2>
 801acb0:	2502      	movs	r5, #2
 801acb2:	e7f2      	b.n	801ac9a <_dtoa_r+0x36a>
 801acb4:	07f9      	lsls	r1, r7, #31
 801acb6:	d508      	bpl.n	801acca <_dtoa_r+0x39a>
 801acb8:	4640      	mov	r0, r8
 801acba:	4649      	mov	r1, r9
 801acbc:	e9d6 2300 	ldrd	r2, r3, [r6]
 801acc0:	f7ec fc7a 	bl	80075b8 <__aeabi_dmul>
 801acc4:	3501      	adds	r5, #1
 801acc6:	4680      	mov	r8, r0
 801acc8:	4689      	mov	r9, r1
 801acca:	107f      	asrs	r7, r7, #1
 801accc:	3608      	adds	r6, #8
 801acce:	e7e5      	b.n	801ac9c <_dtoa_r+0x36c>
 801acd0:	f000 809b 	beq.w	801ae0a <_dtoa_r+0x4da>
 801acd4:	9b00      	ldr	r3, [sp, #0]
 801acd6:	4f9d      	ldr	r7, [pc, #628]	; (801af4c <_dtoa_r+0x61c>)
 801acd8:	425e      	negs	r6, r3
 801acda:	4b9b      	ldr	r3, [pc, #620]	; (801af48 <_dtoa_r+0x618>)
 801acdc:	f006 020f 	and.w	r2, r6, #15
 801ace0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ace4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ace8:	ec51 0b19 	vmov	r0, r1, d9
 801acec:	f7ec fc64 	bl	80075b8 <__aeabi_dmul>
 801acf0:	1136      	asrs	r6, r6, #4
 801acf2:	4682      	mov	sl, r0
 801acf4:	468b      	mov	fp, r1
 801acf6:	2300      	movs	r3, #0
 801acf8:	2502      	movs	r5, #2
 801acfa:	2e00      	cmp	r6, #0
 801acfc:	d17a      	bne.n	801adf4 <_dtoa_r+0x4c4>
 801acfe:	2b00      	cmp	r3, #0
 801ad00:	d1d3      	bne.n	801acaa <_dtoa_r+0x37a>
 801ad02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ad04:	2b00      	cmp	r3, #0
 801ad06:	f000 8082 	beq.w	801ae0e <_dtoa_r+0x4de>
 801ad0a:	4b91      	ldr	r3, [pc, #580]	; (801af50 <_dtoa_r+0x620>)
 801ad0c:	2200      	movs	r2, #0
 801ad0e:	4650      	mov	r0, sl
 801ad10:	4659      	mov	r1, fp
 801ad12:	f7ec fec3 	bl	8007a9c <__aeabi_dcmplt>
 801ad16:	2800      	cmp	r0, #0
 801ad18:	d079      	beq.n	801ae0e <_dtoa_r+0x4de>
 801ad1a:	9b03      	ldr	r3, [sp, #12]
 801ad1c:	2b00      	cmp	r3, #0
 801ad1e:	d076      	beq.n	801ae0e <_dtoa_r+0x4de>
 801ad20:	9b02      	ldr	r3, [sp, #8]
 801ad22:	2b00      	cmp	r3, #0
 801ad24:	dd36      	ble.n	801ad94 <_dtoa_r+0x464>
 801ad26:	9b00      	ldr	r3, [sp, #0]
 801ad28:	4650      	mov	r0, sl
 801ad2a:	4659      	mov	r1, fp
 801ad2c:	1e5f      	subs	r7, r3, #1
 801ad2e:	2200      	movs	r2, #0
 801ad30:	4b88      	ldr	r3, [pc, #544]	; (801af54 <_dtoa_r+0x624>)
 801ad32:	f7ec fc41 	bl	80075b8 <__aeabi_dmul>
 801ad36:	9e02      	ldr	r6, [sp, #8]
 801ad38:	4682      	mov	sl, r0
 801ad3a:	468b      	mov	fp, r1
 801ad3c:	3501      	adds	r5, #1
 801ad3e:	4628      	mov	r0, r5
 801ad40:	f7ec fbd0 	bl	80074e4 <__aeabi_i2d>
 801ad44:	4652      	mov	r2, sl
 801ad46:	465b      	mov	r3, fp
 801ad48:	f7ec fc36 	bl	80075b8 <__aeabi_dmul>
 801ad4c:	4b82      	ldr	r3, [pc, #520]	; (801af58 <_dtoa_r+0x628>)
 801ad4e:	2200      	movs	r2, #0
 801ad50:	f7ec fa7c 	bl	800724c <__adddf3>
 801ad54:	46d0      	mov	r8, sl
 801ad56:	46d9      	mov	r9, fp
 801ad58:	4682      	mov	sl, r0
 801ad5a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801ad5e:	2e00      	cmp	r6, #0
 801ad60:	d158      	bne.n	801ae14 <_dtoa_r+0x4e4>
 801ad62:	4b7e      	ldr	r3, [pc, #504]	; (801af5c <_dtoa_r+0x62c>)
 801ad64:	2200      	movs	r2, #0
 801ad66:	4640      	mov	r0, r8
 801ad68:	4649      	mov	r1, r9
 801ad6a:	f7ec fa6d 	bl	8007248 <__aeabi_dsub>
 801ad6e:	4652      	mov	r2, sl
 801ad70:	465b      	mov	r3, fp
 801ad72:	4680      	mov	r8, r0
 801ad74:	4689      	mov	r9, r1
 801ad76:	f7ec feaf 	bl	8007ad8 <__aeabi_dcmpgt>
 801ad7a:	2800      	cmp	r0, #0
 801ad7c:	f040 8295 	bne.w	801b2aa <_dtoa_r+0x97a>
 801ad80:	4652      	mov	r2, sl
 801ad82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801ad86:	4640      	mov	r0, r8
 801ad88:	4649      	mov	r1, r9
 801ad8a:	f7ec fe87 	bl	8007a9c <__aeabi_dcmplt>
 801ad8e:	2800      	cmp	r0, #0
 801ad90:	f040 8289 	bne.w	801b2a6 <_dtoa_r+0x976>
 801ad94:	ec5b ab19 	vmov	sl, fp, d9
 801ad98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ad9a:	2b00      	cmp	r3, #0
 801ad9c:	f2c0 8148 	blt.w	801b030 <_dtoa_r+0x700>
 801ada0:	9a00      	ldr	r2, [sp, #0]
 801ada2:	2a0e      	cmp	r2, #14
 801ada4:	f300 8144 	bgt.w	801b030 <_dtoa_r+0x700>
 801ada8:	4b67      	ldr	r3, [pc, #412]	; (801af48 <_dtoa_r+0x618>)
 801adaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801adae:	e9d3 8900 	ldrd	r8, r9, [r3]
 801adb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801adb4:	2b00      	cmp	r3, #0
 801adb6:	f280 80d5 	bge.w	801af64 <_dtoa_r+0x634>
 801adba:	9b03      	ldr	r3, [sp, #12]
 801adbc:	2b00      	cmp	r3, #0
 801adbe:	f300 80d1 	bgt.w	801af64 <_dtoa_r+0x634>
 801adc2:	f040 826f 	bne.w	801b2a4 <_dtoa_r+0x974>
 801adc6:	4b65      	ldr	r3, [pc, #404]	; (801af5c <_dtoa_r+0x62c>)
 801adc8:	2200      	movs	r2, #0
 801adca:	4640      	mov	r0, r8
 801adcc:	4649      	mov	r1, r9
 801adce:	f7ec fbf3 	bl	80075b8 <__aeabi_dmul>
 801add2:	4652      	mov	r2, sl
 801add4:	465b      	mov	r3, fp
 801add6:	f7ec fe75 	bl	8007ac4 <__aeabi_dcmpge>
 801adda:	9e03      	ldr	r6, [sp, #12]
 801addc:	4637      	mov	r7, r6
 801adde:	2800      	cmp	r0, #0
 801ade0:	f040 8245 	bne.w	801b26e <_dtoa_r+0x93e>
 801ade4:	9d01      	ldr	r5, [sp, #4]
 801ade6:	2331      	movs	r3, #49	; 0x31
 801ade8:	f805 3b01 	strb.w	r3, [r5], #1
 801adec:	9b00      	ldr	r3, [sp, #0]
 801adee:	3301      	adds	r3, #1
 801adf0:	9300      	str	r3, [sp, #0]
 801adf2:	e240      	b.n	801b276 <_dtoa_r+0x946>
 801adf4:	07f2      	lsls	r2, r6, #31
 801adf6:	d505      	bpl.n	801ae04 <_dtoa_r+0x4d4>
 801adf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801adfc:	f7ec fbdc 	bl	80075b8 <__aeabi_dmul>
 801ae00:	3501      	adds	r5, #1
 801ae02:	2301      	movs	r3, #1
 801ae04:	1076      	asrs	r6, r6, #1
 801ae06:	3708      	adds	r7, #8
 801ae08:	e777      	b.n	801acfa <_dtoa_r+0x3ca>
 801ae0a:	2502      	movs	r5, #2
 801ae0c:	e779      	b.n	801ad02 <_dtoa_r+0x3d2>
 801ae0e:	9f00      	ldr	r7, [sp, #0]
 801ae10:	9e03      	ldr	r6, [sp, #12]
 801ae12:	e794      	b.n	801ad3e <_dtoa_r+0x40e>
 801ae14:	9901      	ldr	r1, [sp, #4]
 801ae16:	4b4c      	ldr	r3, [pc, #304]	; (801af48 <_dtoa_r+0x618>)
 801ae18:	4431      	add	r1, r6
 801ae1a:	910d      	str	r1, [sp, #52]	; 0x34
 801ae1c:	9908      	ldr	r1, [sp, #32]
 801ae1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801ae22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801ae26:	2900      	cmp	r1, #0
 801ae28:	d043      	beq.n	801aeb2 <_dtoa_r+0x582>
 801ae2a:	494d      	ldr	r1, [pc, #308]	; (801af60 <_dtoa_r+0x630>)
 801ae2c:	2000      	movs	r0, #0
 801ae2e:	f7ec fced 	bl	800780c <__aeabi_ddiv>
 801ae32:	4652      	mov	r2, sl
 801ae34:	465b      	mov	r3, fp
 801ae36:	f7ec fa07 	bl	8007248 <__aeabi_dsub>
 801ae3a:	9d01      	ldr	r5, [sp, #4]
 801ae3c:	4682      	mov	sl, r0
 801ae3e:	468b      	mov	fp, r1
 801ae40:	4649      	mov	r1, r9
 801ae42:	4640      	mov	r0, r8
 801ae44:	f7ec fe68 	bl	8007b18 <__aeabi_d2iz>
 801ae48:	4606      	mov	r6, r0
 801ae4a:	f7ec fb4b 	bl	80074e4 <__aeabi_i2d>
 801ae4e:	4602      	mov	r2, r0
 801ae50:	460b      	mov	r3, r1
 801ae52:	4640      	mov	r0, r8
 801ae54:	4649      	mov	r1, r9
 801ae56:	f7ec f9f7 	bl	8007248 <__aeabi_dsub>
 801ae5a:	3630      	adds	r6, #48	; 0x30
 801ae5c:	f805 6b01 	strb.w	r6, [r5], #1
 801ae60:	4652      	mov	r2, sl
 801ae62:	465b      	mov	r3, fp
 801ae64:	4680      	mov	r8, r0
 801ae66:	4689      	mov	r9, r1
 801ae68:	f7ec fe18 	bl	8007a9c <__aeabi_dcmplt>
 801ae6c:	2800      	cmp	r0, #0
 801ae6e:	d163      	bne.n	801af38 <_dtoa_r+0x608>
 801ae70:	4642      	mov	r2, r8
 801ae72:	464b      	mov	r3, r9
 801ae74:	4936      	ldr	r1, [pc, #216]	; (801af50 <_dtoa_r+0x620>)
 801ae76:	2000      	movs	r0, #0
 801ae78:	f7ec f9e6 	bl	8007248 <__aeabi_dsub>
 801ae7c:	4652      	mov	r2, sl
 801ae7e:	465b      	mov	r3, fp
 801ae80:	f7ec fe0c 	bl	8007a9c <__aeabi_dcmplt>
 801ae84:	2800      	cmp	r0, #0
 801ae86:	f040 80b5 	bne.w	801aff4 <_dtoa_r+0x6c4>
 801ae8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ae8c:	429d      	cmp	r5, r3
 801ae8e:	d081      	beq.n	801ad94 <_dtoa_r+0x464>
 801ae90:	4b30      	ldr	r3, [pc, #192]	; (801af54 <_dtoa_r+0x624>)
 801ae92:	2200      	movs	r2, #0
 801ae94:	4650      	mov	r0, sl
 801ae96:	4659      	mov	r1, fp
 801ae98:	f7ec fb8e 	bl	80075b8 <__aeabi_dmul>
 801ae9c:	4b2d      	ldr	r3, [pc, #180]	; (801af54 <_dtoa_r+0x624>)
 801ae9e:	4682      	mov	sl, r0
 801aea0:	468b      	mov	fp, r1
 801aea2:	4640      	mov	r0, r8
 801aea4:	4649      	mov	r1, r9
 801aea6:	2200      	movs	r2, #0
 801aea8:	f7ec fb86 	bl	80075b8 <__aeabi_dmul>
 801aeac:	4680      	mov	r8, r0
 801aeae:	4689      	mov	r9, r1
 801aeb0:	e7c6      	b.n	801ae40 <_dtoa_r+0x510>
 801aeb2:	4650      	mov	r0, sl
 801aeb4:	4659      	mov	r1, fp
 801aeb6:	f7ec fb7f 	bl	80075b8 <__aeabi_dmul>
 801aeba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aebc:	9d01      	ldr	r5, [sp, #4]
 801aebe:	930f      	str	r3, [sp, #60]	; 0x3c
 801aec0:	4682      	mov	sl, r0
 801aec2:	468b      	mov	fp, r1
 801aec4:	4649      	mov	r1, r9
 801aec6:	4640      	mov	r0, r8
 801aec8:	f7ec fe26 	bl	8007b18 <__aeabi_d2iz>
 801aecc:	4606      	mov	r6, r0
 801aece:	f7ec fb09 	bl	80074e4 <__aeabi_i2d>
 801aed2:	3630      	adds	r6, #48	; 0x30
 801aed4:	4602      	mov	r2, r0
 801aed6:	460b      	mov	r3, r1
 801aed8:	4640      	mov	r0, r8
 801aeda:	4649      	mov	r1, r9
 801aedc:	f7ec f9b4 	bl	8007248 <__aeabi_dsub>
 801aee0:	f805 6b01 	strb.w	r6, [r5], #1
 801aee4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aee6:	429d      	cmp	r5, r3
 801aee8:	4680      	mov	r8, r0
 801aeea:	4689      	mov	r9, r1
 801aeec:	f04f 0200 	mov.w	r2, #0
 801aef0:	d124      	bne.n	801af3c <_dtoa_r+0x60c>
 801aef2:	4b1b      	ldr	r3, [pc, #108]	; (801af60 <_dtoa_r+0x630>)
 801aef4:	4650      	mov	r0, sl
 801aef6:	4659      	mov	r1, fp
 801aef8:	f7ec f9a8 	bl	800724c <__adddf3>
 801aefc:	4602      	mov	r2, r0
 801aefe:	460b      	mov	r3, r1
 801af00:	4640      	mov	r0, r8
 801af02:	4649      	mov	r1, r9
 801af04:	f7ec fde8 	bl	8007ad8 <__aeabi_dcmpgt>
 801af08:	2800      	cmp	r0, #0
 801af0a:	d173      	bne.n	801aff4 <_dtoa_r+0x6c4>
 801af0c:	4652      	mov	r2, sl
 801af0e:	465b      	mov	r3, fp
 801af10:	4913      	ldr	r1, [pc, #76]	; (801af60 <_dtoa_r+0x630>)
 801af12:	2000      	movs	r0, #0
 801af14:	f7ec f998 	bl	8007248 <__aeabi_dsub>
 801af18:	4602      	mov	r2, r0
 801af1a:	460b      	mov	r3, r1
 801af1c:	4640      	mov	r0, r8
 801af1e:	4649      	mov	r1, r9
 801af20:	f7ec fdbc 	bl	8007a9c <__aeabi_dcmplt>
 801af24:	2800      	cmp	r0, #0
 801af26:	f43f af35 	beq.w	801ad94 <_dtoa_r+0x464>
 801af2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801af2c:	1e6b      	subs	r3, r5, #1
 801af2e:	930f      	str	r3, [sp, #60]	; 0x3c
 801af30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801af34:	2b30      	cmp	r3, #48	; 0x30
 801af36:	d0f8      	beq.n	801af2a <_dtoa_r+0x5fa>
 801af38:	9700      	str	r7, [sp, #0]
 801af3a:	e049      	b.n	801afd0 <_dtoa_r+0x6a0>
 801af3c:	4b05      	ldr	r3, [pc, #20]	; (801af54 <_dtoa_r+0x624>)
 801af3e:	f7ec fb3b 	bl	80075b8 <__aeabi_dmul>
 801af42:	4680      	mov	r8, r0
 801af44:	4689      	mov	r9, r1
 801af46:	e7bd      	b.n	801aec4 <_dtoa_r+0x594>
 801af48:	0801e168 	.word	0x0801e168
 801af4c:	0801e140 	.word	0x0801e140
 801af50:	3ff00000 	.word	0x3ff00000
 801af54:	40240000 	.word	0x40240000
 801af58:	401c0000 	.word	0x401c0000
 801af5c:	40140000 	.word	0x40140000
 801af60:	3fe00000 	.word	0x3fe00000
 801af64:	9d01      	ldr	r5, [sp, #4]
 801af66:	4656      	mov	r6, sl
 801af68:	465f      	mov	r7, fp
 801af6a:	4642      	mov	r2, r8
 801af6c:	464b      	mov	r3, r9
 801af6e:	4630      	mov	r0, r6
 801af70:	4639      	mov	r1, r7
 801af72:	f7ec fc4b 	bl	800780c <__aeabi_ddiv>
 801af76:	f7ec fdcf 	bl	8007b18 <__aeabi_d2iz>
 801af7a:	4682      	mov	sl, r0
 801af7c:	f7ec fab2 	bl	80074e4 <__aeabi_i2d>
 801af80:	4642      	mov	r2, r8
 801af82:	464b      	mov	r3, r9
 801af84:	f7ec fb18 	bl	80075b8 <__aeabi_dmul>
 801af88:	4602      	mov	r2, r0
 801af8a:	460b      	mov	r3, r1
 801af8c:	4630      	mov	r0, r6
 801af8e:	4639      	mov	r1, r7
 801af90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801af94:	f7ec f958 	bl	8007248 <__aeabi_dsub>
 801af98:	f805 6b01 	strb.w	r6, [r5], #1
 801af9c:	9e01      	ldr	r6, [sp, #4]
 801af9e:	9f03      	ldr	r7, [sp, #12]
 801afa0:	1bae      	subs	r6, r5, r6
 801afa2:	42b7      	cmp	r7, r6
 801afa4:	4602      	mov	r2, r0
 801afa6:	460b      	mov	r3, r1
 801afa8:	d135      	bne.n	801b016 <_dtoa_r+0x6e6>
 801afaa:	f7ec f94f 	bl	800724c <__adddf3>
 801afae:	4642      	mov	r2, r8
 801afb0:	464b      	mov	r3, r9
 801afb2:	4606      	mov	r6, r0
 801afb4:	460f      	mov	r7, r1
 801afb6:	f7ec fd8f 	bl	8007ad8 <__aeabi_dcmpgt>
 801afba:	b9d0      	cbnz	r0, 801aff2 <_dtoa_r+0x6c2>
 801afbc:	4642      	mov	r2, r8
 801afbe:	464b      	mov	r3, r9
 801afc0:	4630      	mov	r0, r6
 801afc2:	4639      	mov	r1, r7
 801afc4:	f7ec fd60 	bl	8007a88 <__aeabi_dcmpeq>
 801afc8:	b110      	cbz	r0, 801afd0 <_dtoa_r+0x6a0>
 801afca:	f01a 0f01 	tst.w	sl, #1
 801afce:	d110      	bne.n	801aff2 <_dtoa_r+0x6c2>
 801afd0:	4620      	mov	r0, r4
 801afd2:	ee18 1a10 	vmov	r1, s16
 801afd6:	f001 f885 	bl	801c0e4 <_Bfree>
 801afda:	2300      	movs	r3, #0
 801afdc:	9800      	ldr	r0, [sp, #0]
 801afde:	702b      	strb	r3, [r5, #0]
 801afe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801afe2:	3001      	adds	r0, #1
 801afe4:	6018      	str	r0, [r3, #0]
 801afe6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801afe8:	2b00      	cmp	r3, #0
 801afea:	f43f acf1 	beq.w	801a9d0 <_dtoa_r+0xa0>
 801afee:	601d      	str	r5, [r3, #0]
 801aff0:	e4ee      	b.n	801a9d0 <_dtoa_r+0xa0>
 801aff2:	9f00      	ldr	r7, [sp, #0]
 801aff4:	462b      	mov	r3, r5
 801aff6:	461d      	mov	r5, r3
 801aff8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801affc:	2a39      	cmp	r2, #57	; 0x39
 801affe:	d106      	bne.n	801b00e <_dtoa_r+0x6de>
 801b000:	9a01      	ldr	r2, [sp, #4]
 801b002:	429a      	cmp	r2, r3
 801b004:	d1f7      	bne.n	801aff6 <_dtoa_r+0x6c6>
 801b006:	9901      	ldr	r1, [sp, #4]
 801b008:	2230      	movs	r2, #48	; 0x30
 801b00a:	3701      	adds	r7, #1
 801b00c:	700a      	strb	r2, [r1, #0]
 801b00e:	781a      	ldrb	r2, [r3, #0]
 801b010:	3201      	adds	r2, #1
 801b012:	701a      	strb	r2, [r3, #0]
 801b014:	e790      	b.n	801af38 <_dtoa_r+0x608>
 801b016:	4ba6      	ldr	r3, [pc, #664]	; (801b2b0 <_dtoa_r+0x980>)
 801b018:	2200      	movs	r2, #0
 801b01a:	f7ec facd 	bl	80075b8 <__aeabi_dmul>
 801b01e:	2200      	movs	r2, #0
 801b020:	2300      	movs	r3, #0
 801b022:	4606      	mov	r6, r0
 801b024:	460f      	mov	r7, r1
 801b026:	f7ec fd2f 	bl	8007a88 <__aeabi_dcmpeq>
 801b02a:	2800      	cmp	r0, #0
 801b02c:	d09d      	beq.n	801af6a <_dtoa_r+0x63a>
 801b02e:	e7cf      	b.n	801afd0 <_dtoa_r+0x6a0>
 801b030:	9a08      	ldr	r2, [sp, #32]
 801b032:	2a00      	cmp	r2, #0
 801b034:	f000 80d7 	beq.w	801b1e6 <_dtoa_r+0x8b6>
 801b038:	9a06      	ldr	r2, [sp, #24]
 801b03a:	2a01      	cmp	r2, #1
 801b03c:	f300 80ba 	bgt.w	801b1b4 <_dtoa_r+0x884>
 801b040:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b042:	2a00      	cmp	r2, #0
 801b044:	f000 80b2 	beq.w	801b1ac <_dtoa_r+0x87c>
 801b048:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801b04c:	9e07      	ldr	r6, [sp, #28]
 801b04e:	9d04      	ldr	r5, [sp, #16]
 801b050:	9a04      	ldr	r2, [sp, #16]
 801b052:	441a      	add	r2, r3
 801b054:	9204      	str	r2, [sp, #16]
 801b056:	9a05      	ldr	r2, [sp, #20]
 801b058:	2101      	movs	r1, #1
 801b05a:	441a      	add	r2, r3
 801b05c:	4620      	mov	r0, r4
 801b05e:	9205      	str	r2, [sp, #20]
 801b060:	f001 f942 	bl	801c2e8 <__i2b>
 801b064:	4607      	mov	r7, r0
 801b066:	2d00      	cmp	r5, #0
 801b068:	dd0c      	ble.n	801b084 <_dtoa_r+0x754>
 801b06a:	9b05      	ldr	r3, [sp, #20]
 801b06c:	2b00      	cmp	r3, #0
 801b06e:	dd09      	ble.n	801b084 <_dtoa_r+0x754>
 801b070:	42ab      	cmp	r3, r5
 801b072:	9a04      	ldr	r2, [sp, #16]
 801b074:	bfa8      	it	ge
 801b076:	462b      	movge	r3, r5
 801b078:	1ad2      	subs	r2, r2, r3
 801b07a:	9204      	str	r2, [sp, #16]
 801b07c:	9a05      	ldr	r2, [sp, #20]
 801b07e:	1aed      	subs	r5, r5, r3
 801b080:	1ad3      	subs	r3, r2, r3
 801b082:	9305      	str	r3, [sp, #20]
 801b084:	9b07      	ldr	r3, [sp, #28]
 801b086:	b31b      	cbz	r3, 801b0d0 <_dtoa_r+0x7a0>
 801b088:	9b08      	ldr	r3, [sp, #32]
 801b08a:	2b00      	cmp	r3, #0
 801b08c:	f000 80af 	beq.w	801b1ee <_dtoa_r+0x8be>
 801b090:	2e00      	cmp	r6, #0
 801b092:	dd13      	ble.n	801b0bc <_dtoa_r+0x78c>
 801b094:	4639      	mov	r1, r7
 801b096:	4632      	mov	r2, r6
 801b098:	4620      	mov	r0, r4
 801b09a:	f001 f9e5 	bl	801c468 <__pow5mult>
 801b09e:	ee18 2a10 	vmov	r2, s16
 801b0a2:	4601      	mov	r1, r0
 801b0a4:	4607      	mov	r7, r0
 801b0a6:	4620      	mov	r0, r4
 801b0a8:	f001 f934 	bl	801c314 <__multiply>
 801b0ac:	ee18 1a10 	vmov	r1, s16
 801b0b0:	4680      	mov	r8, r0
 801b0b2:	4620      	mov	r0, r4
 801b0b4:	f001 f816 	bl	801c0e4 <_Bfree>
 801b0b8:	ee08 8a10 	vmov	s16, r8
 801b0bc:	9b07      	ldr	r3, [sp, #28]
 801b0be:	1b9a      	subs	r2, r3, r6
 801b0c0:	d006      	beq.n	801b0d0 <_dtoa_r+0x7a0>
 801b0c2:	ee18 1a10 	vmov	r1, s16
 801b0c6:	4620      	mov	r0, r4
 801b0c8:	f001 f9ce 	bl	801c468 <__pow5mult>
 801b0cc:	ee08 0a10 	vmov	s16, r0
 801b0d0:	2101      	movs	r1, #1
 801b0d2:	4620      	mov	r0, r4
 801b0d4:	f001 f908 	bl	801c2e8 <__i2b>
 801b0d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b0da:	2b00      	cmp	r3, #0
 801b0dc:	4606      	mov	r6, r0
 801b0de:	f340 8088 	ble.w	801b1f2 <_dtoa_r+0x8c2>
 801b0e2:	461a      	mov	r2, r3
 801b0e4:	4601      	mov	r1, r0
 801b0e6:	4620      	mov	r0, r4
 801b0e8:	f001 f9be 	bl	801c468 <__pow5mult>
 801b0ec:	9b06      	ldr	r3, [sp, #24]
 801b0ee:	2b01      	cmp	r3, #1
 801b0f0:	4606      	mov	r6, r0
 801b0f2:	f340 8081 	ble.w	801b1f8 <_dtoa_r+0x8c8>
 801b0f6:	f04f 0800 	mov.w	r8, #0
 801b0fa:	6933      	ldr	r3, [r6, #16]
 801b0fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801b100:	6918      	ldr	r0, [r3, #16]
 801b102:	f001 f8a1 	bl	801c248 <__hi0bits>
 801b106:	f1c0 0020 	rsb	r0, r0, #32
 801b10a:	9b05      	ldr	r3, [sp, #20]
 801b10c:	4418      	add	r0, r3
 801b10e:	f010 001f 	ands.w	r0, r0, #31
 801b112:	f000 8092 	beq.w	801b23a <_dtoa_r+0x90a>
 801b116:	f1c0 0320 	rsb	r3, r0, #32
 801b11a:	2b04      	cmp	r3, #4
 801b11c:	f340 808a 	ble.w	801b234 <_dtoa_r+0x904>
 801b120:	f1c0 001c 	rsb	r0, r0, #28
 801b124:	9b04      	ldr	r3, [sp, #16]
 801b126:	4403      	add	r3, r0
 801b128:	9304      	str	r3, [sp, #16]
 801b12a:	9b05      	ldr	r3, [sp, #20]
 801b12c:	4403      	add	r3, r0
 801b12e:	4405      	add	r5, r0
 801b130:	9305      	str	r3, [sp, #20]
 801b132:	9b04      	ldr	r3, [sp, #16]
 801b134:	2b00      	cmp	r3, #0
 801b136:	dd07      	ble.n	801b148 <_dtoa_r+0x818>
 801b138:	ee18 1a10 	vmov	r1, s16
 801b13c:	461a      	mov	r2, r3
 801b13e:	4620      	mov	r0, r4
 801b140:	f001 f9ec 	bl	801c51c <__lshift>
 801b144:	ee08 0a10 	vmov	s16, r0
 801b148:	9b05      	ldr	r3, [sp, #20]
 801b14a:	2b00      	cmp	r3, #0
 801b14c:	dd05      	ble.n	801b15a <_dtoa_r+0x82a>
 801b14e:	4631      	mov	r1, r6
 801b150:	461a      	mov	r2, r3
 801b152:	4620      	mov	r0, r4
 801b154:	f001 f9e2 	bl	801c51c <__lshift>
 801b158:	4606      	mov	r6, r0
 801b15a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b15c:	2b00      	cmp	r3, #0
 801b15e:	d06e      	beq.n	801b23e <_dtoa_r+0x90e>
 801b160:	ee18 0a10 	vmov	r0, s16
 801b164:	4631      	mov	r1, r6
 801b166:	f001 fa49 	bl	801c5fc <__mcmp>
 801b16a:	2800      	cmp	r0, #0
 801b16c:	da67      	bge.n	801b23e <_dtoa_r+0x90e>
 801b16e:	9b00      	ldr	r3, [sp, #0]
 801b170:	3b01      	subs	r3, #1
 801b172:	ee18 1a10 	vmov	r1, s16
 801b176:	9300      	str	r3, [sp, #0]
 801b178:	220a      	movs	r2, #10
 801b17a:	2300      	movs	r3, #0
 801b17c:	4620      	mov	r0, r4
 801b17e:	f000 ffd3 	bl	801c128 <__multadd>
 801b182:	9b08      	ldr	r3, [sp, #32]
 801b184:	ee08 0a10 	vmov	s16, r0
 801b188:	2b00      	cmp	r3, #0
 801b18a:	f000 81b1 	beq.w	801b4f0 <_dtoa_r+0xbc0>
 801b18e:	2300      	movs	r3, #0
 801b190:	4639      	mov	r1, r7
 801b192:	220a      	movs	r2, #10
 801b194:	4620      	mov	r0, r4
 801b196:	f000 ffc7 	bl	801c128 <__multadd>
 801b19a:	9b02      	ldr	r3, [sp, #8]
 801b19c:	2b00      	cmp	r3, #0
 801b19e:	4607      	mov	r7, r0
 801b1a0:	f300 808e 	bgt.w	801b2c0 <_dtoa_r+0x990>
 801b1a4:	9b06      	ldr	r3, [sp, #24]
 801b1a6:	2b02      	cmp	r3, #2
 801b1a8:	dc51      	bgt.n	801b24e <_dtoa_r+0x91e>
 801b1aa:	e089      	b.n	801b2c0 <_dtoa_r+0x990>
 801b1ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b1ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801b1b2:	e74b      	b.n	801b04c <_dtoa_r+0x71c>
 801b1b4:	9b03      	ldr	r3, [sp, #12]
 801b1b6:	1e5e      	subs	r6, r3, #1
 801b1b8:	9b07      	ldr	r3, [sp, #28]
 801b1ba:	42b3      	cmp	r3, r6
 801b1bc:	bfbf      	itttt	lt
 801b1be:	9b07      	ldrlt	r3, [sp, #28]
 801b1c0:	9607      	strlt	r6, [sp, #28]
 801b1c2:	1af2      	sublt	r2, r6, r3
 801b1c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801b1c6:	bfb6      	itet	lt
 801b1c8:	189b      	addlt	r3, r3, r2
 801b1ca:	1b9e      	subge	r6, r3, r6
 801b1cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 801b1ce:	9b03      	ldr	r3, [sp, #12]
 801b1d0:	bfb8      	it	lt
 801b1d2:	2600      	movlt	r6, #0
 801b1d4:	2b00      	cmp	r3, #0
 801b1d6:	bfb7      	itett	lt
 801b1d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801b1dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801b1e0:	1a9d      	sublt	r5, r3, r2
 801b1e2:	2300      	movlt	r3, #0
 801b1e4:	e734      	b.n	801b050 <_dtoa_r+0x720>
 801b1e6:	9e07      	ldr	r6, [sp, #28]
 801b1e8:	9d04      	ldr	r5, [sp, #16]
 801b1ea:	9f08      	ldr	r7, [sp, #32]
 801b1ec:	e73b      	b.n	801b066 <_dtoa_r+0x736>
 801b1ee:	9a07      	ldr	r2, [sp, #28]
 801b1f0:	e767      	b.n	801b0c2 <_dtoa_r+0x792>
 801b1f2:	9b06      	ldr	r3, [sp, #24]
 801b1f4:	2b01      	cmp	r3, #1
 801b1f6:	dc18      	bgt.n	801b22a <_dtoa_r+0x8fa>
 801b1f8:	f1ba 0f00 	cmp.w	sl, #0
 801b1fc:	d115      	bne.n	801b22a <_dtoa_r+0x8fa>
 801b1fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b202:	b993      	cbnz	r3, 801b22a <_dtoa_r+0x8fa>
 801b204:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b208:	0d1b      	lsrs	r3, r3, #20
 801b20a:	051b      	lsls	r3, r3, #20
 801b20c:	b183      	cbz	r3, 801b230 <_dtoa_r+0x900>
 801b20e:	9b04      	ldr	r3, [sp, #16]
 801b210:	3301      	adds	r3, #1
 801b212:	9304      	str	r3, [sp, #16]
 801b214:	9b05      	ldr	r3, [sp, #20]
 801b216:	3301      	adds	r3, #1
 801b218:	9305      	str	r3, [sp, #20]
 801b21a:	f04f 0801 	mov.w	r8, #1
 801b21e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b220:	2b00      	cmp	r3, #0
 801b222:	f47f af6a 	bne.w	801b0fa <_dtoa_r+0x7ca>
 801b226:	2001      	movs	r0, #1
 801b228:	e76f      	b.n	801b10a <_dtoa_r+0x7da>
 801b22a:	f04f 0800 	mov.w	r8, #0
 801b22e:	e7f6      	b.n	801b21e <_dtoa_r+0x8ee>
 801b230:	4698      	mov	r8, r3
 801b232:	e7f4      	b.n	801b21e <_dtoa_r+0x8ee>
 801b234:	f43f af7d 	beq.w	801b132 <_dtoa_r+0x802>
 801b238:	4618      	mov	r0, r3
 801b23a:	301c      	adds	r0, #28
 801b23c:	e772      	b.n	801b124 <_dtoa_r+0x7f4>
 801b23e:	9b03      	ldr	r3, [sp, #12]
 801b240:	2b00      	cmp	r3, #0
 801b242:	dc37      	bgt.n	801b2b4 <_dtoa_r+0x984>
 801b244:	9b06      	ldr	r3, [sp, #24]
 801b246:	2b02      	cmp	r3, #2
 801b248:	dd34      	ble.n	801b2b4 <_dtoa_r+0x984>
 801b24a:	9b03      	ldr	r3, [sp, #12]
 801b24c:	9302      	str	r3, [sp, #8]
 801b24e:	9b02      	ldr	r3, [sp, #8]
 801b250:	b96b      	cbnz	r3, 801b26e <_dtoa_r+0x93e>
 801b252:	4631      	mov	r1, r6
 801b254:	2205      	movs	r2, #5
 801b256:	4620      	mov	r0, r4
 801b258:	f000 ff66 	bl	801c128 <__multadd>
 801b25c:	4601      	mov	r1, r0
 801b25e:	4606      	mov	r6, r0
 801b260:	ee18 0a10 	vmov	r0, s16
 801b264:	f001 f9ca 	bl	801c5fc <__mcmp>
 801b268:	2800      	cmp	r0, #0
 801b26a:	f73f adbb 	bgt.w	801ade4 <_dtoa_r+0x4b4>
 801b26e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b270:	9d01      	ldr	r5, [sp, #4]
 801b272:	43db      	mvns	r3, r3
 801b274:	9300      	str	r3, [sp, #0]
 801b276:	f04f 0800 	mov.w	r8, #0
 801b27a:	4631      	mov	r1, r6
 801b27c:	4620      	mov	r0, r4
 801b27e:	f000 ff31 	bl	801c0e4 <_Bfree>
 801b282:	2f00      	cmp	r7, #0
 801b284:	f43f aea4 	beq.w	801afd0 <_dtoa_r+0x6a0>
 801b288:	f1b8 0f00 	cmp.w	r8, #0
 801b28c:	d005      	beq.n	801b29a <_dtoa_r+0x96a>
 801b28e:	45b8      	cmp	r8, r7
 801b290:	d003      	beq.n	801b29a <_dtoa_r+0x96a>
 801b292:	4641      	mov	r1, r8
 801b294:	4620      	mov	r0, r4
 801b296:	f000 ff25 	bl	801c0e4 <_Bfree>
 801b29a:	4639      	mov	r1, r7
 801b29c:	4620      	mov	r0, r4
 801b29e:	f000 ff21 	bl	801c0e4 <_Bfree>
 801b2a2:	e695      	b.n	801afd0 <_dtoa_r+0x6a0>
 801b2a4:	2600      	movs	r6, #0
 801b2a6:	4637      	mov	r7, r6
 801b2a8:	e7e1      	b.n	801b26e <_dtoa_r+0x93e>
 801b2aa:	9700      	str	r7, [sp, #0]
 801b2ac:	4637      	mov	r7, r6
 801b2ae:	e599      	b.n	801ade4 <_dtoa_r+0x4b4>
 801b2b0:	40240000 	.word	0x40240000
 801b2b4:	9b08      	ldr	r3, [sp, #32]
 801b2b6:	2b00      	cmp	r3, #0
 801b2b8:	f000 80ca 	beq.w	801b450 <_dtoa_r+0xb20>
 801b2bc:	9b03      	ldr	r3, [sp, #12]
 801b2be:	9302      	str	r3, [sp, #8]
 801b2c0:	2d00      	cmp	r5, #0
 801b2c2:	dd05      	ble.n	801b2d0 <_dtoa_r+0x9a0>
 801b2c4:	4639      	mov	r1, r7
 801b2c6:	462a      	mov	r2, r5
 801b2c8:	4620      	mov	r0, r4
 801b2ca:	f001 f927 	bl	801c51c <__lshift>
 801b2ce:	4607      	mov	r7, r0
 801b2d0:	f1b8 0f00 	cmp.w	r8, #0
 801b2d4:	d05b      	beq.n	801b38e <_dtoa_r+0xa5e>
 801b2d6:	6879      	ldr	r1, [r7, #4]
 801b2d8:	4620      	mov	r0, r4
 801b2da:	f000 fec3 	bl	801c064 <_Balloc>
 801b2de:	4605      	mov	r5, r0
 801b2e0:	b928      	cbnz	r0, 801b2ee <_dtoa_r+0x9be>
 801b2e2:	4b87      	ldr	r3, [pc, #540]	; (801b500 <_dtoa_r+0xbd0>)
 801b2e4:	4602      	mov	r2, r0
 801b2e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 801b2ea:	f7ff bb3b 	b.w	801a964 <_dtoa_r+0x34>
 801b2ee:	693a      	ldr	r2, [r7, #16]
 801b2f0:	3202      	adds	r2, #2
 801b2f2:	0092      	lsls	r2, r2, #2
 801b2f4:	f107 010c 	add.w	r1, r7, #12
 801b2f8:	300c      	adds	r0, #12
 801b2fa:	f7fd fbdb 	bl	8018ab4 <memcpy>
 801b2fe:	2201      	movs	r2, #1
 801b300:	4629      	mov	r1, r5
 801b302:	4620      	mov	r0, r4
 801b304:	f001 f90a 	bl	801c51c <__lshift>
 801b308:	9b01      	ldr	r3, [sp, #4]
 801b30a:	f103 0901 	add.w	r9, r3, #1
 801b30e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801b312:	4413      	add	r3, r2
 801b314:	9305      	str	r3, [sp, #20]
 801b316:	f00a 0301 	and.w	r3, sl, #1
 801b31a:	46b8      	mov	r8, r7
 801b31c:	9304      	str	r3, [sp, #16]
 801b31e:	4607      	mov	r7, r0
 801b320:	4631      	mov	r1, r6
 801b322:	ee18 0a10 	vmov	r0, s16
 801b326:	f7ff fa77 	bl	801a818 <quorem>
 801b32a:	4641      	mov	r1, r8
 801b32c:	9002      	str	r0, [sp, #8]
 801b32e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801b332:	ee18 0a10 	vmov	r0, s16
 801b336:	f001 f961 	bl	801c5fc <__mcmp>
 801b33a:	463a      	mov	r2, r7
 801b33c:	9003      	str	r0, [sp, #12]
 801b33e:	4631      	mov	r1, r6
 801b340:	4620      	mov	r0, r4
 801b342:	f001 f977 	bl	801c634 <__mdiff>
 801b346:	68c2      	ldr	r2, [r0, #12]
 801b348:	f109 3bff 	add.w	fp, r9, #4294967295
 801b34c:	4605      	mov	r5, r0
 801b34e:	bb02      	cbnz	r2, 801b392 <_dtoa_r+0xa62>
 801b350:	4601      	mov	r1, r0
 801b352:	ee18 0a10 	vmov	r0, s16
 801b356:	f001 f951 	bl	801c5fc <__mcmp>
 801b35a:	4602      	mov	r2, r0
 801b35c:	4629      	mov	r1, r5
 801b35e:	4620      	mov	r0, r4
 801b360:	9207      	str	r2, [sp, #28]
 801b362:	f000 febf 	bl	801c0e4 <_Bfree>
 801b366:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801b36a:	ea43 0102 	orr.w	r1, r3, r2
 801b36e:	9b04      	ldr	r3, [sp, #16]
 801b370:	430b      	orrs	r3, r1
 801b372:	464d      	mov	r5, r9
 801b374:	d10f      	bne.n	801b396 <_dtoa_r+0xa66>
 801b376:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801b37a:	d02a      	beq.n	801b3d2 <_dtoa_r+0xaa2>
 801b37c:	9b03      	ldr	r3, [sp, #12]
 801b37e:	2b00      	cmp	r3, #0
 801b380:	dd02      	ble.n	801b388 <_dtoa_r+0xa58>
 801b382:	9b02      	ldr	r3, [sp, #8]
 801b384:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801b388:	f88b a000 	strb.w	sl, [fp]
 801b38c:	e775      	b.n	801b27a <_dtoa_r+0x94a>
 801b38e:	4638      	mov	r0, r7
 801b390:	e7ba      	b.n	801b308 <_dtoa_r+0x9d8>
 801b392:	2201      	movs	r2, #1
 801b394:	e7e2      	b.n	801b35c <_dtoa_r+0xa2c>
 801b396:	9b03      	ldr	r3, [sp, #12]
 801b398:	2b00      	cmp	r3, #0
 801b39a:	db04      	blt.n	801b3a6 <_dtoa_r+0xa76>
 801b39c:	9906      	ldr	r1, [sp, #24]
 801b39e:	430b      	orrs	r3, r1
 801b3a0:	9904      	ldr	r1, [sp, #16]
 801b3a2:	430b      	orrs	r3, r1
 801b3a4:	d122      	bne.n	801b3ec <_dtoa_r+0xabc>
 801b3a6:	2a00      	cmp	r2, #0
 801b3a8:	ddee      	ble.n	801b388 <_dtoa_r+0xa58>
 801b3aa:	ee18 1a10 	vmov	r1, s16
 801b3ae:	2201      	movs	r2, #1
 801b3b0:	4620      	mov	r0, r4
 801b3b2:	f001 f8b3 	bl	801c51c <__lshift>
 801b3b6:	4631      	mov	r1, r6
 801b3b8:	ee08 0a10 	vmov	s16, r0
 801b3bc:	f001 f91e 	bl	801c5fc <__mcmp>
 801b3c0:	2800      	cmp	r0, #0
 801b3c2:	dc03      	bgt.n	801b3cc <_dtoa_r+0xa9c>
 801b3c4:	d1e0      	bne.n	801b388 <_dtoa_r+0xa58>
 801b3c6:	f01a 0f01 	tst.w	sl, #1
 801b3ca:	d0dd      	beq.n	801b388 <_dtoa_r+0xa58>
 801b3cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801b3d0:	d1d7      	bne.n	801b382 <_dtoa_r+0xa52>
 801b3d2:	2339      	movs	r3, #57	; 0x39
 801b3d4:	f88b 3000 	strb.w	r3, [fp]
 801b3d8:	462b      	mov	r3, r5
 801b3da:	461d      	mov	r5, r3
 801b3dc:	3b01      	subs	r3, #1
 801b3de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801b3e2:	2a39      	cmp	r2, #57	; 0x39
 801b3e4:	d071      	beq.n	801b4ca <_dtoa_r+0xb9a>
 801b3e6:	3201      	adds	r2, #1
 801b3e8:	701a      	strb	r2, [r3, #0]
 801b3ea:	e746      	b.n	801b27a <_dtoa_r+0x94a>
 801b3ec:	2a00      	cmp	r2, #0
 801b3ee:	dd07      	ble.n	801b400 <_dtoa_r+0xad0>
 801b3f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801b3f4:	d0ed      	beq.n	801b3d2 <_dtoa_r+0xaa2>
 801b3f6:	f10a 0301 	add.w	r3, sl, #1
 801b3fa:	f88b 3000 	strb.w	r3, [fp]
 801b3fe:	e73c      	b.n	801b27a <_dtoa_r+0x94a>
 801b400:	9b05      	ldr	r3, [sp, #20]
 801b402:	f809 ac01 	strb.w	sl, [r9, #-1]
 801b406:	4599      	cmp	r9, r3
 801b408:	d047      	beq.n	801b49a <_dtoa_r+0xb6a>
 801b40a:	ee18 1a10 	vmov	r1, s16
 801b40e:	2300      	movs	r3, #0
 801b410:	220a      	movs	r2, #10
 801b412:	4620      	mov	r0, r4
 801b414:	f000 fe88 	bl	801c128 <__multadd>
 801b418:	45b8      	cmp	r8, r7
 801b41a:	ee08 0a10 	vmov	s16, r0
 801b41e:	f04f 0300 	mov.w	r3, #0
 801b422:	f04f 020a 	mov.w	r2, #10
 801b426:	4641      	mov	r1, r8
 801b428:	4620      	mov	r0, r4
 801b42a:	d106      	bne.n	801b43a <_dtoa_r+0xb0a>
 801b42c:	f000 fe7c 	bl	801c128 <__multadd>
 801b430:	4680      	mov	r8, r0
 801b432:	4607      	mov	r7, r0
 801b434:	f109 0901 	add.w	r9, r9, #1
 801b438:	e772      	b.n	801b320 <_dtoa_r+0x9f0>
 801b43a:	f000 fe75 	bl	801c128 <__multadd>
 801b43e:	4639      	mov	r1, r7
 801b440:	4680      	mov	r8, r0
 801b442:	2300      	movs	r3, #0
 801b444:	220a      	movs	r2, #10
 801b446:	4620      	mov	r0, r4
 801b448:	f000 fe6e 	bl	801c128 <__multadd>
 801b44c:	4607      	mov	r7, r0
 801b44e:	e7f1      	b.n	801b434 <_dtoa_r+0xb04>
 801b450:	9b03      	ldr	r3, [sp, #12]
 801b452:	9302      	str	r3, [sp, #8]
 801b454:	9d01      	ldr	r5, [sp, #4]
 801b456:	ee18 0a10 	vmov	r0, s16
 801b45a:	4631      	mov	r1, r6
 801b45c:	f7ff f9dc 	bl	801a818 <quorem>
 801b460:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801b464:	9b01      	ldr	r3, [sp, #4]
 801b466:	f805 ab01 	strb.w	sl, [r5], #1
 801b46a:	1aea      	subs	r2, r5, r3
 801b46c:	9b02      	ldr	r3, [sp, #8]
 801b46e:	4293      	cmp	r3, r2
 801b470:	dd09      	ble.n	801b486 <_dtoa_r+0xb56>
 801b472:	ee18 1a10 	vmov	r1, s16
 801b476:	2300      	movs	r3, #0
 801b478:	220a      	movs	r2, #10
 801b47a:	4620      	mov	r0, r4
 801b47c:	f000 fe54 	bl	801c128 <__multadd>
 801b480:	ee08 0a10 	vmov	s16, r0
 801b484:	e7e7      	b.n	801b456 <_dtoa_r+0xb26>
 801b486:	9b02      	ldr	r3, [sp, #8]
 801b488:	2b00      	cmp	r3, #0
 801b48a:	bfc8      	it	gt
 801b48c:	461d      	movgt	r5, r3
 801b48e:	9b01      	ldr	r3, [sp, #4]
 801b490:	bfd8      	it	le
 801b492:	2501      	movle	r5, #1
 801b494:	441d      	add	r5, r3
 801b496:	f04f 0800 	mov.w	r8, #0
 801b49a:	ee18 1a10 	vmov	r1, s16
 801b49e:	2201      	movs	r2, #1
 801b4a0:	4620      	mov	r0, r4
 801b4a2:	f001 f83b 	bl	801c51c <__lshift>
 801b4a6:	4631      	mov	r1, r6
 801b4a8:	ee08 0a10 	vmov	s16, r0
 801b4ac:	f001 f8a6 	bl	801c5fc <__mcmp>
 801b4b0:	2800      	cmp	r0, #0
 801b4b2:	dc91      	bgt.n	801b3d8 <_dtoa_r+0xaa8>
 801b4b4:	d102      	bne.n	801b4bc <_dtoa_r+0xb8c>
 801b4b6:	f01a 0f01 	tst.w	sl, #1
 801b4ba:	d18d      	bne.n	801b3d8 <_dtoa_r+0xaa8>
 801b4bc:	462b      	mov	r3, r5
 801b4be:	461d      	mov	r5, r3
 801b4c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b4c4:	2a30      	cmp	r2, #48	; 0x30
 801b4c6:	d0fa      	beq.n	801b4be <_dtoa_r+0xb8e>
 801b4c8:	e6d7      	b.n	801b27a <_dtoa_r+0x94a>
 801b4ca:	9a01      	ldr	r2, [sp, #4]
 801b4cc:	429a      	cmp	r2, r3
 801b4ce:	d184      	bne.n	801b3da <_dtoa_r+0xaaa>
 801b4d0:	9b00      	ldr	r3, [sp, #0]
 801b4d2:	3301      	adds	r3, #1
 801b4d4:	9300      	str	r3, [sp, #0]
 801b4d6:	2331      	movs	r3, #49	; 0x31
 801b4d8:	7013      	strb	r3, [r2, #0]
 801b4da:	e6ce      	b.n	801b27a <_dtoa_r+0x94a>
 801b4dc:	4b09      	ldr	r3, [pc, #36]	; (801b504 <_dtoa_r+0xbd4>)
 801b4de:	f7ff ba95 	b.w	801aa0c <_dtoa_r+0xdc>
 801b4e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b4e4:	2b00      	cmp	r3, #0
 801b4e6:	f47f aa6e 	bne.w	801a9c6 <_dtoa_r+0x96>
 801b4ea:	4b07      	ldr	r3, [pc, #28]	; (801b508 <_dtoa_r+0xbd8>)
 801b4ec:	f7ff ba8e 	b.w	801aa0c <_dtoa_r+0xdc>
 801b4f0:	9b02      	ldr	r3, [sp, #8]
 801b4f2:	2b00      	cmp	r3, #0
 801b4f4:	dcae      	bgt.n	801b454 <_dtoa_r+0xb24>
 801b4f6:	9b06      	ldr	r3, [sp, #24]
 801b4f8:	2b02      	cmp	r3, #2
 801b4fa:	f73f aea8 	bgt.w	801b24e <_dtoa_r+0x91e>
 801b4fe:	e7a9      	b.n	801b454 <_dtoa_r+0xb24>
 801b500:	0801dff0 	.word	0x0801dff0
 801b504:	0801ddf4 	.word	0x0801ddf4
 801b508:	0801df71 	.word	0x0801df71

0801b50c <__sflush_r>:
 801b50c:	898a      	ldrh	r2, [r1, #12]
 801b50e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b512:	4605      	mov	r5, r0
 801b514:	0710      	lsls	r0, r2, #28
 801b516:	460c      	mov	r4, r1
 801b518:	d458      	bmi.n	801b5cc <__sflush_r+0xc0>
 801b51a:	684b      	ldr	r3, [r1, #4]
 801b51c:	2b00      	cmp	r3, #0
 801b51e:	dc05      	bgt.n	801b52c <__sflush_r+0x20>
 801b520:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b522:	2b00      	cmp	r3, #0
 801b524:	dc02      	bgt.n	801b52c <__sflush_r+0x20>
 801b526:	2000      	movs	r0, #0
 801b528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b52c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b52e:	2e00      	cmp	r6, #0
 801b530:	d0f9      	beq.n	801b526 <__sflush_r+0x1a>
 801b532:	2300      	movs	r3, #0
 801b534:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b538:	682f      	ldr	r7, [r5, #0]
 801b53a:	602b      	str	r3, [r5, #0]
 801b53c:	d032      	beq.n	801b5a4 <__sflush_r+0x98>
 801b53e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b540:	89a3      	ldrh	r3, [r4, #12]
 801b542:	075a      	lsls	r2, r3, #29
 801b544:	d505      	bpl.n	801b552 <__sflush_r+0x46>
 801b546:	6863      	ldr	r3, [r4, #4]
 801b548:	1ac0      	subs	r0, r0, r3
 801b54a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b54c:	b10b      	cbz	r3, 801b552 <__sflush_r+0x46>
 801b54e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b550:	1ac0      	subs	r0, r0, r3
 801b552:	2300      	movs	r3, #0
 801b554:	4602      	mov	r2, r0
 801b556:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b558:	6a21      	ldr	r1, [r4, #32]
 801b55a:	4628      	mov	r0, r5
 801b55c:	47b0      	blx	r6
 801b55e:	1c43      	adds	r3, r0, #1
 801b560:	89a3      	ldrh	r3, [r4, #12]
 801b562:	d106      	bne.n	801b572 <__sflush_r+0x66>
 801b564:	6829      	ldr	r1, [r5, #0]
 801b566:	291d      	cmp	r1, #29
 801b568:	d82c      	bhi.n	801b5c4 <__sflush_r+0xb8>
 801b56a:	4a2a      	ldr	r2, [pc, #168]	; (801b614 <__sflush_r+0x108>)
 801b56c:	40ca      	lsrs	r2, r1
 801b56e:	07d6      	lsls	r6, r2, #31
 801b570:	d528      	bpl.n	801b5c4 <__sflush_r+0xb8>
 801b572:	2200      	movs	r2, #0
 801b574:	6062      	str	r2, [r4, #4]
 801b576:	04d9      	lsls	r1, r3, #19
 801b578:	6922      	ldr	r2, [r4, #16]
 801b57a:	6022      	str	r2, [r4, #0]
 801b57c:	d504      	bpl.n	801b588 <__sflush_r+0x7c>
 801b57e:	1c42      	adds	r2, r0, #1
 801b580:	d101      	bne.n	801b586 <__sflush_r+0x7a>
 801b582:	682b      	ldr	r3, [r5, #0]
 801b584:	b903      	cbnz	r3, 801b588 <__sflush_r+0x7c>
 801b586:	6560      	str	r0, [r4, #84]	; 0x54
 801b588:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b58a:	602f      	str	r7, [r5, #0]
 801b58c:	2900      	cmp	r1, #0
 801b58e:	d0ca      	beq.n	801b526 <__sflush_r+0x1a>
 801b590:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b594:	4299      	cmp	r1, r3
 801b596:	d002      	beq.n	801b59e <__sflush_r+0x92>
 801b598:	4628      	mov	r0, r5
 801b59a:	f001 fa3b 	bl	801ca14 <_free_r>
 801b59e:	2000      	movs	r0, #0
 801b5a0:	6360      	str	r0, [r4, #52]	; 0x34
 801b5a2:	e7c1      	b.n	801b528 <__sflush_r+0x1c>
 801b5a4:	6a21      	ldr	r1, [r4, #32]
 801b5a6:	2301      	movs	r3, #1
 801b5a8:	4628      	mov	r0, r5
 801b5aa:	47b0      	blx	r6
 801b5ac:	1c41      	adds	r1, r0, #1
 801b5ae:	d1c7      	bne.n	801b540 <__sflush_r+0x34>
 801b5b0:	682b      	ldr	r3, [r5, #0]
 801b5b2:	2b00      	cmp	r3, #0
 801b5b4:	d0c4      	beq.n	801b540 <__sflush_r+0x34>
 801b5b6:	2b1d      	cmp	r3, #29
 801b5b8:	d001      	beq.n	801b5be <__sflush_r+0xb2>
 801b5ba:	2b16      	cmp	r3, #22
 801b5bc:	d101      	bne.n	801b5c2 <__sflush_r+0xb6>
 801b5be:	602f      	str	r7, [r5, #0]
 801b5c0:	e7b1      	b.n	801b526 <__sflush_r+0x1a>
 801b5c2:	89a3      	ldrh	r3, [r4, #12]
 801b5c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b5c8:	81a3      	strh	r3, [r4, #12]
 801b5ca:	e7ad      	b.n	801b528 <__sflush_r+0x1c>
 801b5cc:	690f      	ldr	r7, [r1, #16]
 801b5ce:	2f00      	cmp	r7, #0
 801b5d0:	d0a9      	beq.n	801b526 <__sflush_r+0x1a>
 801b5d2:	0793      	lsls	r3, r2, #30
 801b5d4:	680e      	ldr	r6, [r1, #0]
 801b5d6:	bf08      	it	eq
 801b5d8:	694b      	ldreq	r3, [r1, #20]
 801b5da:	600f      	str	r7, [r1, #0]
 801b5dc:	bf18      	it	ne
 801b5de:	2300      	movne	r3, #0
 801b5e0:	eba6 0807 	sub.w	r8, r6, r7
 801b5e4:	608b      	str	r3, [r1, #8]
 801b5e6:	f1b8 0f00 	cmp.w	r8, #0
 801b5ea:	dd9c      	ble.n	801b526 <__sflush_r+0x1a>
 801b5ec:	6a21      	ldr	r1, [r4, #32]
 801b5ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b5f0:	4643      	mov	r3, r8
 801b5f2:	463a      	mov	r2, r7
 801b5f4:	4628      	mov	r0, r5
 801b5f6:	47b0      	blx	r6
 801b5f8:	2800      	cmp	r0, #0
 801b5fa:	dc06      	bgt.n	801b60a <__sflush_r+0xfe>
 801b5fc:	89a3      	ldrh	r3, [r4, #12]
 801b5fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b602:	81a3      	strh	r3, [r4, #12]
 801b604:	f04f 30ff 	mov.w	r0, #4294967295
 801b608:	e78e      	b.n	801b528 <__sflush_r+0x1c>
 801b60a:	4407      	add	r7, r0
 801b60c:	eba8 0800 	sub.w	r8, r8, r0
 801b610:	e7e9      	b.n	801b5e6 <__sflush_r+0xda>
 801b612:	bf00      	nop
 801b614:	20400001 	.word	0x20400001

0801b618 <_fflush_r>:
 801b618:	b538      	push	{r3, r4, r5, lr}
 801b61a:	690b      	ldr	r3, [r1, #16]
 801b61c:	4605      	mov	r5, r0
 801b61e:	460c      	mov	r4, r1
 801b620:	b913      	cbnz	r3, 801b628 <_fflush_r+0x10>
 801b622:	2500      	movs	r5, #0
 801b624:	4628      	mov	r0, r5
 801b626:	bd38      	pop	{r3, r4, r5, pc}
 801b628:	b118      	cbz	r0, 801b632 <_fflush_r+0x1a>
 801b62a:	6983      	ldr	r3, [r0, #24]
 801b62c:	b90b      	cbnz	r3, 801b632 <_fflush_r+0x1a>
 801b62e:	f000 f887 	bl	801b740 <__sinit>
 801b632:	4b14      	ldr	r3, [pc, #80]	; (801b684 <_fflush_r+0x6c>)
 801b634:	429c      	cmp	r4, r3
 801b636:	d11b      	bne.n	801b670 <_fflush_r+0x58>
 801b638:	686c      	ldr	r4, [r5, #4]
 801b63a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b63e:	2b00      	cmp	r3, #0
 801b640:	d0ef      	beq.n	801b622 <_fflush_r+0xa>
 801b642:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b644:	07d0      	lsls	r0, r2, #31
 801b646:	d404      	bmi.n	801b652 <_fflush_r+0x3a>
 801b648:	0599      	lsls	r1, r3, #22
 801b64a:	d402      	bmi.n	801b652 <_fflush_r+0x3a>
 801b64c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b64e:	f000 fc88 	bl	801bf62 <__retarget_lock_acquire_recursive>
 801b652:	4628      	mov	r0, r5
 801b654:	4621      	mov	r1, r4
 801b656:	f7ff ff59 	bl	801b50c <__sflush_r>
 801b65a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b65c:	07da      	lsls	r2, r3, #31
 801b65e:	4605      	mov	r5, r0
 801b660:	d4e0      	bmi.n	801b624 <_fflush_r+0xc>
 801b662:	89a3      	ldrh	r3, [r4, #12]
 801b664:	059b      	lsls	r3, r3, #22
 801b666:	d4dd      	bmi.n	801b624 <_fflush_r+0xc>
 801b668:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b66a:	f000 fc7b 	bl	801bf64 <__retarget_lock_release_recursive>
 801b66e:	e7d9      	b.n	801b624 <_fflush_r+0xc>
 801b670:	4b05      	ldr	r3, [pc, #20]	; (801b688 <_fflush_r+0x70>)
 801b672:	429c      	cmp	r4, r3
 801b674:	d101      	bne.n	801b67a <_fflush_r+0x62>
 801b676:	68ac      	ldr	r4, [r5, #8]
 801b678:	e7df      	b.n	801b63a <_fflush_r+0x22>
 801b67a:	4b04      	ldr	r3, [pc, #16]	; (801b68c <_fflush_r+0x74>)
 801b67c:	429c      	cmp	r4, r3
 801b67e:	bf08      	it	eq
 801b680:	68ec      	ldreq	r4, [r5, #12]
 801b682:	e7da      	b.n	801b63a <_fflush_r+0x22>
 801b684:	0801e024 	.word	0x0801e024
 801b688:	0801e044 	.word	0x0801e044
 801b68c:	0801e004 	.word	0x0801e004

0801b690 <std>:
 801b690:	2300      	movs	r3, #0
 801b692:	b510      	push	{r4, lr}
 801b694:	4604      	mov	r4, r0
 801b696:	e9c0 3300 	strd	r3, r3, [r0]
 801b69a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b69e:	6083      	str	r3, [r0, #8]
 801b6a0:	8181      	strh	r1, [r0, #12]
 801b6a2:	6643      	str	r3, [r0, #100]	; 0x64
 801b6a4:	81c2      	strh	r2, [r0, #14]
 801b6a6:	6183      	str	r3, [r0, #24]
 801b6a8:	4619      	mov	r1, r3
 801b6aa:	2208      	movs	r2, #8
 801b6ac:	305c      	adds	r0, #92	; 0x5c
 801b6ae:	f7fd fa0f 	bl	8018ad0 <memset>
 801b6b2:	4b05      	ldr	r3, [pc, #20]	; (801b6c8 <std+0x38>)
 801b6b4:	6263      	str	r3, [r4, #36]	; 0x24
 801b6b6:	4b05      	ldr	r3, [pc, #20]	; (801b6cc <std+0x3c>)
 801b6b8:	62a3      	str	r3, [r4, #40]	; 0x28
 801b6ba:	4b05      	ldr	r3, [pc, #20]	; (801b6d0 <std+0x40>)
 801b6bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b6be:	4b05      	ldr	r3, [pc, #20]	; (801b6d4 <std+0x44>)
 801b6c0:	6224      	str	r4, [r4, #32]
 801b6c2:	6323      	str	r3, [r4, #48]	; 0x30
 801b6c4:	bd10      	pop	{r4, pc}
 801b6c6:	bf00      	nop
 801b6c8:	0801d171 	.word	0x0801d171
 801b6cc:	0801d193 	.word	0x0801d193
 801b6d0:	0801d1cb 	.word	0x0801d1cb
 801b6d4:	0801d1ef 	.word	0x0801d1ef

0801b6d8 <_cleanup_r>:
 801b6d8:	4901      	ldr	r1, [pc, #4]	; (801b6e0 <_cleanup_r+0x8>)
 801b6da:	f000 b8af 	b.w	801b83c <_fwalk_reent>
 801b6de:	bf00      	nop
 801b6e0:	0801b619 	.word	0x0801b619

0801b6e4 <__sfmoreglue>:
 801b6e4:	b570      	push	{r4, r5, r6, lr}
 801b6e6:	2268      	movs	r2, #104	; 0x68
 801b6e8:	1e4d      	subs	r5, r1, #1
 801b6ea:	4355      	muls	r5, r2
 801b6ec:	460e      	mov	r6, r1
 801b6ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801b6f2:	f001 f9fb 	bl	801caec <_malloc_r>
 801b6f6:	4604      	mov	r4, r0
 801b6f8:	b140      	cbz	r0, 801b70c <__sfmoreglue+0x28>
 801b6fa:	2100      	movs	r1, #0
 801b6fc:	e9c0 1600 	strd	r1, r6, [r0]
 801b700:	300c      	adds	r0, #12
 801b702:	60a0      	str	r0, [r4, #8]
 801b704:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801b708:	f7fd f9e2 	bl	8018ad0 <memset>
 801b70c:	4620      	mov	r0, r4
 801b70e:	bd70      	pop	{r4, r5, r6, pc}

0801b710 <__sfp_lock_acquire>:
 801b710:	4801      	ldr	r0, [pc, #4]	; (801b718 <__sfp_lock_acquire+0x8>)
 801b712:	f000 bc26 	b.w	801bf62 <__retarget_lock_acquire_recursive>
 801b716:	bf00      	nop
 801b718:	20000a39 	.word	0x20000a39

0801b71c <__sfp_lock_release>:
 801b71c:	4801      	ldr	r0, [pc, #4]	; (801b724 <__sfp_lock_release+0x8>)
 801b71e:	f000 bc21 	b.w	801bf64 <__retarget_lock_release_recursive>
 801b722:	bf00      	nop
 801b724:	20000a39 	.word	0x20000a39

0801b728 <__sinit_lock_acquire>:
 801b728:	4801      	ldr	r0, [pc, #4]	; (801b730 <__sinit_lock_acquire+0x8>)
 801b72a:	f000 bc1a 	b.w	801bf62 <__retarget_lock_acquire_recursive>
 801b72e:	bf00      	nop
 801b730:	20000a3a 	.word	0x20000a3a

0801b734 <__sinit_lock_release>:
 801b734:	4801      	ldr	r0, [pc, #4]	; (801b73c <__sinit_lock_release+0x8>)
 801b736:	f000 bc15 	b.w	801bf64 <__retarget_lock_release_recursive>
 801b73a:	bf00      	nop
 801b73c:	20000a3a 	.word	0x20000a3a

0801b740 <__sinit>:
 801b740:	b510      	push	{r4, lr}
 801b742:	4604      	mov	r4, r0
 801b744:	f7ff fff0 	bl	801b728 <__sinit_lock_acquire>
 801b748:	69a3      	ldr	r3, [r4, #24]
 801b74a:	b11b      	cbz	r3, 801b754 <__sinit+0x14>
 801b74c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b750:	f7ff bff0 	b.w	801b734 <__sinit_lock_release>
 801b754:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801b758:	6523      	str	r3, [r4, #80]	; 0x50
 801b75a:	4b13      	ldr	r3, [pc, #76]	; (801b7a8 <__sinit+0x68>)
 801b75c:	4a13      	ldr	r2, [pc, #76]	; (801b7ac <__sinit+0x6c>)
 801b75e:	681b      	ldr	r3, [r3, #0]
 801b760:	62a2      	str	r2, [r4, #40]	; 0x28
 801b762:	42a3      	cmp	r3, r4
 801b764:	bf04      	itt	eq
 801b766:	2301      	moveq	r3, #1
 801b768:	61a3      	streq	r3, [r4, #24]
 801b76a:	4620      	mov	r0, r4
 801b76c:	f000 f820 	bl	801b7b0 <__sfp>
 801b770:	6060      	str	r0, [r4, #4]
 801b772:	4620      	mov	r0, r4
 801b774:	f000 f81c 	bl	801b7b0 <__sfp>
 801b778:	60a0      	str	r0, [r4, #8]
 801b77a:	4620      	mov	r0, r4
 801b77c:	f000 f818 	bl	801b7b0 <__sfp>
 801b780:	2200      	movs	r2, #0
 801b782:	60e0      	str	r0, [r4, #12]
 801b784:	2104      	movs	r1, #4
 801b786:	6860      	ldr	r0, [r4, #4]
 801b788:	f7ff ff82 	bl	801b690 <std>
 801b78c:	68a0      	ldr	r0, [r4, #8]
 801b78e:	2201      	movs	r2, #1
 801b790:	2109      	movs	r1, #9
 801b792:	f7ff ff7d 	bl	801b690 <std>
 801b796:	68e0      	ldr	r0, [r4, #12]
 801b798:	2202      	movs	r2, #2
 801b79a:	2112      	movs	r1, #18
 801b79c:	f7ff ff78 	bl	801b690 <std>
 801b7a0:	2301      	movs	r3, #1
 801b7a2:	61a3      	str	r3, [r4, #24]
 801b7a4:	e7d2      	b.n	801b74c <__sinit+0xc>
 801b7a6:	bf00      	nop
 801b7a8:	0801dde0 	.word	0x0801dde0
 801b7ac:	0801b6d9 	.word	0x0801b6d9

0801b7b0 <__sfp>:
 801b7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b7b2:	4607      	mov	r7, r0
 801b7b4:	f7ff ffac 	bl	801b710 <__sfp_lock_acquire>
 801b7b8:	4b1e      	ldr	r3, [pc, #120]	; (801b834 <__sfp+0x84>)
 801b7ba:	681e      	ldr	r6, [r3, #0]
 801b7bc:	69b3      	ldr	r3, [r6, #24]
 801b7be:	b913      	cbnz	r3, 801b7c6 <__sfp+0x16>
 801b7c0:	4630      	mov	r0, r6
 801b7c2:	f7ff ffbd 	bl	801b740 <__sinit>
 801b7c6:	3648      	adds	r6, #72	; 0x48
 801b7c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801b7cc:	3b01      	subs	r3, #1
 801b7ce:	d503      	bpl.n	801b7d8 <__sfp+0x28>
 801b7d0:	6833      	ldr	r3, [r6, #0]
 801b7d2:	b30b      	cbz	r3, 801b818 <__sfp+0x68>
 801b7d4:	6836      	ldr	r6, [r6, #0]
 801b7d6:	e7f7      	b.n	801b7c8 <__sfp+0x18>
 801b7d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801b7dc:	b9d5      	cbnz	r5, 801b814 <__sfp+0x64>
 801b7de:	4b16      	ldr	r3, [pc, #88]	; (801b838 <__sfp+0x88>)
 801b7e0:	60e3      	str	r3, [r4, #12]
 801b7e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b7e6:	6665      	str	r5, [r4, #100]	; 0x64
 801b7e8:	f000 fbba 	bl	801bf60 <__retarget_lock_init_recursive>
 801b7ec:	f7ff ff96 	bl	801b71c <__sfp_lock_release>
 801b7f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801b7f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801b7f8:	6025      	str	r5, [r4, #0]
 801b7fa:	61a5      	str	r5, [r4, #24]
 801b7fc:	2208      	movs	r2, #8
 801b7fe:	4629      	mov	r1, r5
 801b800:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801b804:	f7fd f964 	bl	8018ad0 <memset>
 801b808:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801b80c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801b810:	4620      	mov	r0, r4
 801b812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b814:	3468      	adds	r4, #104	; 0x68
 801b816:	e7d9      	b.n	801b7cc <__sfp+0x1c>
 801b818:	2104      	movs	r1, #4
 801b81a:	4638      	mov	r0, r7
 801b81c:	f7ff ff62 	bl	801b6e4 <__sfmoreglue>
 801b820:	4604      	mov	r4, r0
 801b822:	6030      	str	r0, [r6, #0]
 801b824:	2800      	cmp	r0, #0
 801b826:	d1d5      	bne.n	801b7d4 <__sfp+0x24>
 801b828:	f7ff ff78 	bl	801b71c <__sfp_lock_release>
 801b82c:	230c      	movs	r3, #12
 801b82e:	603b      	str	r3, [r7, #0]
 801b830:	e7ee      	b.n	801b810 <__sfp+0x60>
 801b832:	bf00      	nop
 801b834:	0801dde0 	.word	0x0801dde0
 801b838:	ffff0001 	.word	0xffff0001

0801b83c <_fwalk_reent>:
 801b83c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b840:	4606      	mov	r6, r0
 801b842:	4688      	mov	r8, r1
 801b844:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801b848:	2700      	movs	r7, #0
 801b84a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b84e:	f1b9 0901 	subs.w	r9, r9, #1
 801b852:	d505      	bpl.n	801b860 <_fwalk_reent+0x24>
 801b854:	6824      	ldr	r4, [r4, #0]
 801b856:	2c00      	cmp	r4, #0
 801b858:	d1f7      	bne.n	801b84a <_fwalk_reent+0xe>
 801b85a:	4638      	mov	r0, r7
 801b85c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b860:	89ab      	ldrh	r3, [r5, #12]
 801b862:	2b01      	cmp	r3, #1
 801b864:	d907      	bls.n	801b876 <_fwalk_reent+0x3a>
 801b866:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b86a:	3301      	adds	r3, #1
 801b86c:	d003      	beq.n	801b876 <_fwalk_reent+0x3a>
 801b86e:	4629      	mov	r1, r5
 801b870:	4630      	mov	r0, r6
 801b872:	47c0      	blx	r8
 801b874:	4307      	orrs	r7, r0
 801b876:	3568      	adds	r5, #104	; 0x68
 801b878:	e7e9      	b.n	801b84e <_fwalk_reent+0x12>

0801b87a <rshift>:
 801b87a:	6903      	ldr	r3, [r0, #16]
 801b87c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801b880:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b884:	ea4f 1261 	mov.w	r2, r1, asr #5
 801b888:	f100 0414 	add.w	r4, r0, #20
 801b88c:	dd45      	ble.n	801b91a <rshift+0xa0>
 801b88e:	f011 011f 	ands.w	r1, r1, #31
 801b892:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801b896:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801b89a:	d10c      	bne.n	801b8b6 <rshift+0x3c>
 801b89c:	f100 0710 	add.w	r7, r0, #16
 801b8a0:	4629      	mov	r1, r5
 801b8a2:	42b1      	cmp	r1, r6
 801b8a4:	d334      	bcc.n	801b910 <rshift+0x96>
 801b8a6:	1a9b      	subs	r3, r3, r2
 801b8a8:	009b      	lsls	r3, r3, #2
 801b8aa:	1eea      	subs	r2, r5, #3
 801b8ac:	4296      	cmp	r6, r2
 801b8ae:	bf38      	it	cc
 801b8b0:	2300      	movcc	r3, #0
 801b8b2:	4423      	add	r3, r4
 801b8b4:	e015      	b.n	801b8e2 <rshift+0x68>
 801b8b6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801b8ba:	f1c1 0820 	rsb	r8, r1, #32
 801b8be:	40cf      	lsrs	r7, r1
 801b8c0:	f105 0e04 	add.w	lr, r5, #4
 801b8c4:	46a1      	mov	r9, r4
 801b8c6:	4576      	cmp	r6, lr
 801b8c8:	46f4      	mov	ip, lr
 801b8ca:	d815      	bhi.n	801b8f8 <rshift+0x7e>
 801b8cc:	1a9a      	subs	r2, r3, r2
 801b8ce:	0092      	lsls	r2, r2, #2
 801b8d0:	3a04      	subs	r2, #4
 801b8d2:	3501      	adds	r5, #1
 801b8d4:	42ae      	cmp	r6, r5
 801b8d6:	bf38      	it	cc
 801b8d8:	2200      	movcc	r2, #0
 801b8da:	18a3      	adds	r3, r4, r2
 801b8dc:	50a7      	str	r7, [r4, r2]
 801b8de:	b107      	cbz	r7, 801b8e2 <rshift+0x68>
 801b8e0:	3304      	adds	r3, #4
 801b8e2:	1b1a      	subs	r2, r3, r4
 801b8e4:	42a3      	cmp	r3, r4
 801b8e6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801b8ea:	bf08      	it	eq
 801b8ec:	2300      	moveq	r3, #0
 801b8ee:	6102      	str	r2, [r0, #16]
 801b8f0:	bf08      	it	eq
 801b8f2:	6143      	streq	r3, [r0, #20]
 801b8f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b8f8:	f8dc c000 	ldr.w	ip, [ip]
 801b8fc:	fa0c fc08 	lsl.w	ip, ip, r8
 801b900:	ea4c 0707 	orr.w	r7, ip, r7
 801b904:	f849 7b04 	str.w	r7, [r9], #4
 801b908:	f85e 7b04 	ldr.w	r7, [lr], #4
 801b90c:	40cf      	lsrs	r7, r1
 801b90e:	e7da      	b.n	801b8c6 <rshift+0x4c>
 801b910:	f851 cb04 	ldr.w	ip, [r1], #4
 801b914:	f847 cf04 	str.w	ip, [r7, #4]!
 801b918:	e7c3      	b.n	801b8a2 <rshift+0x28>
 801b91a:	4623      	mov	r3, r4
 801b91c:	e7e1      	b.n	801b8e2 <rshift+0x68>

0801b91e <__hexdig_fun>:
 801b91e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801b922:	2b09      	cmp	r3, #9
 801b924:	d802      	bhi.n	801b92c <__hexdig_fun+0xe>
 801b926:	3820      	subs	r0, #32
 801b928:	b2c0      	uxtb	r0, r0
 801b92a:	4770      	bx	lr
 801b92c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801b930:	2b05      	cmp	r3, #5
 801b932:	d801      	bhi.n	801b938 <__hexdig_fun+0x1a>
 801b934:	3847      	subs	r0, #71	; 0x47
 801b936:	e7f7      	b.n	801b928 <__hexdig_fun+0xa>
 801b938:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801b93c:	2b05      	cmp	r3, #5
 801b93e:	d801      	bhi.n	801b944 <__hexdig_fun+0x26>
 801b940:	3827      	subs	r0, #39	; 0x27
 801b942:	e7f1      	b.n	801b928 <__hexdig_fun+0xa>
 801b944:	2000      	movs	r0, #0
 801b946:	4770      	bx	lr

0801b948 <__gethex>:
 801b948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b94c:	ed2d 8b02 	vpush	{d8}
 801b950:	b089      	sub	sp, #36	; 0x24
 801b952:	ee08 0a10 	vmov	s16, r0
 801b956:	9304      	str	r3, [sp, #16]
 801b958:	4bb4      	ldr	r3, [pc, #720]	; (801bc2c <__gethex+0x2e4>)
 801b95a:	681b      	ldr	r3, [r3, #0]
 801b95c:	9301      	str	r3, [sp, #4]
 801b95e:	4618      	mov	r0, r3
 801b960:	468b      	mov	fp, r1
 801b962:	4690      	mov	r8, r2
 801b964:	f7eb fc14 	bl	8007190 <strlen>
 801b968:	9b01      	ldr	r3, [sp, #4]
 801b96a:	f8db 2000 	ldr.w	r2, [fp]
 801b96e:	4403      	add	r3, r0
 801b970:	4682      	mov	sl, r0
 801b972:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801b976:	9305      	str	r3, [sp, #20]
 801b978:	1c93      	adds	r3, r2, #2
 801b97a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801b97e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801b982:	32fe      	adds	r2, #254	; 0xfe
 801b984:	18d1      	adds	r1, r2, r3
 801b986:	461f      	mov	r7, r3
 801b988:	f813 0b01 	ldrb.w	r0, [r3], #1
 801b98c:	9100      	str	r1, [sp, #0]
 801b98e:	2830      	cmp	r0, #48	; 0x30
 801b990:	d0f8      	beq.n	801b984 <__gethex+0x3c>
 801b992:	f7ff ffc4 	bl	801b91e <__hexdig_fun>
 801b996:	4604      	mov	r4, r0
 801b998:	2800      	cmp	r0, #0
 801b99a:	d13a      	bne.n	801ba12 <__gethex+0xca>
 801b99c:	9901      	ldr	r1, [sp, #4]
 801b99e:	4652      	mov	r2, sl
 801b9a0:	4638      	mov	r0, r7
 801b9a2:	f001 fc28 	bl	801d1f6 <strncmp>
 801b9a6:	4605      	mov	r5, r0
 801b9a8:	2800      	cmp	r0, #0
 801b9aa:	d168      	bne.n	801ba7e <__gethex+0x136>
 801b9ac:	f817 000a 	ldrb.w	r0, [r7, sl]
 801b9b0:	eb07 060a 	add.w	r6, r7, sl
 801b9b4:	f7ff ffb3 	bl	801b91e <__hexdig_fun>
 801b9b8:	2800      	cmp	r0, #0
 801b9ba:	d062      	beq.n	801ba82 <__gethex+0x13a>
 801b9bc:	4633      	mov	r3, r6
 801b9be:	7818      	ldrb	r0, [r3, #0]
 801b9c0:	2830      	cmp	r0, #48	; 0x30
 801b9c2:	461f      	mov	r7, r3
 801b9c4:	f103 0301 	add.w	r3, r3, #1
 801b9c8:	d0f9      	beq.n	801b9be <__gethex+0x76>
 801b9ca:	f7ff ffa8 	bl	801b91e <__hexdig_fun>
 801b9ce:	2301      	movs	r3, #1
 801b9d0:	fab0 f480 	clz	r4, r0
 801b9d4:	0964      	lsrs	r4, r4, #5
 801b9d6:	4635      	mov	r5, r6
 801b9d8:	9300      	str	r3, [sp, #0]
 801b9da:	463a      	mov	r2, r7
 801b9dc:	4616      	mov	r6, r2
 801b9de:	3201      	adds	r2, #1
 801b9e0:	7830      	ldrb	r0, [r6, #0]
 801b9e2:	f7ff ff9c 	bl	801b91e <__hexdig_fun>
 801b9e6:	2800      	cmp	r0, #0
 801b9e8:	d1f8      	bne.n	801b9dc <__gethex+0x94>
 801b9ea:	9901      	ldr	r1, [sp, #4]
 801b9ec:	4652      	mov	r2, sl
 801b9ee:	4630      	mov	r0, r6
 801b9f0:	f001 fc01 	bl	801d1f6 <strncmp>
 801b9f4:	b980      	cbnz	r0, 801ba18 <__gethex+0xd0>
 801b9f6:	b94d      	cbnz	r5, 801ba0c <__gethex+0xc4>
 801b9f8:	eb06 050a 	add.w	r5, r6, sl
 801b9fc:	462a      	mov	r2, r5
 801b9fe:	4616      	mov	r6, r2
 801ba00:	3201      	adds	r2, #1
 801ba02:	7830      	ldrb	r0, [r6, #0]
 801ba04:	f7ff ff8b 	bl	801b91e <__hexdig_fun>
 801ba08:	2800      	cmp	r0, #0
 801ba0a:	d1f8      	bne.n	801b9fe <__gethex+0xb6>
 801ba0c:	1bad      	subs	r5, r5, r6
 801ba0e:	00ad      	lsls	r5, r5, #2
 801ba10:	e004      	b.n	801ba1c <__gethex+0xd4>
 801ba12:	2400      	movs	r4, #0
 801ba14:	4625      	mov	r5, r4
 801ba16:	e7e0      	b.n	801b9da <__gethex+0x92>
 801ba18:	2d00      	cmp	r5, #0
 801ba1a:	d1f7      	bne.n	801ba0c <__gethex+0xc4>
 801ba1c:	7833      	ldrb	r3, [r6, #0]
 801ba1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801ba22:	2b50      	cmp	r3, #80	; 0x50
 801ba24:	d13b      	bne.n	801ba9e <__gethex+0x156>
 801ba26:	7873      	ldrb	r3, [r6, #1]
 801ba28:	2b2b      	cmp	r3, #43	; 0x2b
 801ba2a:	d02c      	beq.n	801ba86 <__gethex+0x13e>
 801ba2c:	2b2d      	cmp	r3, #45	; 0x2d
 801ba2e:	d02e      	beq.n	801ba8e <__gethex+0x146>
 801ba30:	1c71      	adds	r1, r6, #1
 801ba32:	f04f 0900 	mov.w	r9, #0
 801ba36:	7808      	ldrb	r0, [r1, #0]
 801ba38:	f7ff ff71 	bl	801b91e <__hexdig_fun>
 801ba3c:	1e43      	subs	r3, r0, #1
 801ba3e:	b2db      	uxtb	r3, r3
 801ba40:	2b18      	cmp	r3, #24
 801ba42:	d82c      	bhi.n	801ba9e <__gethex+0x156>
 801ba44:	f1a0 0210 	sub.w	r2, r0, #16
 801ba48:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801ba4c:	f7ff ff67 	bl	801b91e <__hexdig_fun>
 801ba50:	1e43      	subs	r3, r0, #1
 801ba52:	b2db      	uxtb	r3, r3
 801ba54:	2b18      	cmp	r3, #24
 801ba56:	d91d      	bls.n	801ba94 <__gethex+0x14c>
 801ba58:	f1b9 0f00 	cmp.w	r9, #0
 801ba5c:	d000      	beq.n	801ba60 <__gethex+0x118>
 801ba5e:	4252      	negs	r2, r2
 801ba60:	4415      	add	r5, r2
 801ba62:	f8cb 1000 	str.w	r1, [fp]
 801ba66:	b1e4      	cbz	r4, 801baa2 <__gethex+0x15a>
 801ba68:	9b00      	ldr	r3, [sp, #0]
 801ba6a:	2b00      	cmp	r3, #0
 801ba6c:	bf14      	ite	ne
 801ba6e:	2700      	movne	r7, #0
 801ba70:	2706      	moveq	r7, #6
 801ba72:	4638      	mov	r0, r7
 801ba74:	b009      	add	sp, #36	; 0x24
 801ba76:	ecbd 8b02 	vpop	{d8}
 801ba7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba7e:	463e      	mov	r6, r7
 801ba80:	4625      	mov	r5, r4
 801ba82:	2401      	movs	r4, #1
 801ba84:	e7ca      	b.n	801ba1c <__gethex+0xd4>
 801ba86:	f04f 0900 	mov.w	r9, #0
 801ba8a:	1cb1      	adds	r1, r6, #2
 801ba8c:	e7d3      	b.n	801ba36 <__gethex+0xee>
 801ba8e:	f04f 0901 	mov.w	r9, #1
 801ba92:	e7fa      	b.n	801ba8a <__gethex+0x142>
 801ba94:	230a      	movs	r3, #10
 801ba96:	fb03 0202 	mla	r2, r3, r2, r0
 801ba9a:	3a10      	subs	r2, #16
 801ba9c:	e7d4      	b.n	801ba48 <__gethex+0x100>
 801ba9e:	4631      	mov	r1, r6
 801baa0:	e7df      	b.n	801ba62 <__gethex+0x11a>
 801baa2:	1bf3      	subs	r3, r6, r7
 801baa4:	3b01      	subs	r3, #1
 801baa6:	4621      	mov	r1, r4
 801baa8:	2b07      	cmp	r3, #7
 801baaa:	dc0b      	bgt.n	801bac4 <__gethex+0x17c>
 801baac:	ee18 0a10 	vmov	r0, s16
 801bab0:	f000 fad8 	bl	801c064 <_Balloc>
 801bab4:	4604      	mov	r4, r0
 801bab6:	b940      	cbnz	r0, 801baca <__gethex+0x182>
 801bab8:	4b5d      	ldr	r3, [pc, #372]	; (801bc30 <__gethex+0x2e8>)
 801baba:	4602      	mov	r2, r0
 801babc:	21de      	movs	r1, #222	; 0xde
 801babe:	485d      	ldr	r0, [pc, #372]	; (801bc34 <__gethex+0x2ec>)
 801bac0:	f001 fbcc 	bl	801d25c <__assert_func>
 801bac4:	3101      	adds	r1, #1
 801bac6:	105b      	asrs	r3, r3, #1
 801bac8:	e7ee      	b.n	801baa8 <__gethex+0x160>
 801baca:	f100 0914 	add.w	r9, r0, #20
 801bace:	f04f 0b00 	mov.w	fp, #0
 801bad2:	f1ca 0301 	rsb	r3, sl, #1
 801bad6:	f8cd 9008 	str.w	r9, [sp, #8]
 801bada:	f8cd b000 	str.w	fp, [sp]
 801bade:	9306      	str	r3, [sp, #24]
 801bae0:	42b7      	cmp	r7, r6
 801bae2:	d340      	bcc.n	801bb66 <__gethex+0x21e>
 801bae4:	9802      	ldr	r0, [sp, #8]
 801bae6:	9b00      	ldr	r3, [sp, #0]
 801bae8:	f840 3b04 	str.w	r3, [r0], #4
 801baec:	eba0 0009 	sub.w	r0, r0, r9
 801baf0:	1080      	asrs	r0, r0, #2
 801baf2:	0146      	lsls	r6, r0, #5
 801baf4:	6120      	str	r0, [r4, #16]
 801baf6:	4618      	mov	r0, r3
 801baf8:	f000 fba6 	bl	801c248 <__hi0bits>
 801bafc:	1a30      	subs	r0, r6, r0
 801bafe:	f8d8 6000 	ldr.w	r6, [r8]
 801bb02:	42b0      	cmp	r0, r6
 801bb04:	dd63      	ble.n	801bbce <__gethex+0x286>
 801bb06:	1b87      	subs	r7, r0, r6
 801bb08:	4639      	mov	r1, r7
 801bb0a:	4620      	mov	r0, r4
 801bb0c:	f000 ff4a 	bl	801c9a4 <__any_on>
 801bb10:	4682      	mov	sl, r0
 801bb12:	b1a8      	cbz	r0, 801bb40 <__gethex+0x1f8>
 801bb14:	1e7b      	subs	r3, r7, #1
 801bb16:	1159      	asrs	r1, r3, #5
 801bb18:	f003 021f 	and.w	r2, r3, #31
 801bb1c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801bb20:	f04f 0a01 	mov.w	sl, #1
 801bb24:	fa0a f202 	lsl.w	r2, sl, r2
 801bb28:	420a      	tst	r2, r1
 801bb2a:	d009      	beq.n	801bb40 <__gethex+0x1f8>
 801bb2c:	4553      	cmp	r3, sl
 801bb2e:	dd05      	ble.n	801bb3c <__gethex+0x1f4>
 801bb30:	1eb9      	subs	r1, r7, #2
 801bb32:	4620      	mov	r0, r4
 801bb34:	f000 ff36 	bl	801c9a4 <__any_on>
 801bb38:	2800      	cmp	r0, #0
 801bb3a:	d145      	bne.n	801bbc8 <__gethex+0x280>
 801bb3c:	f04f 0a02 	mov.w	sl, #2
 801bb40:	4639      	mov	r1, r7
 801bb42:	4620      	mov	r0, r4
 801bb44:	f7ff fe99 	bl	801b87a <rshift>
 801bb48:	443d      	add	r5, r7
 801bb4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801bb4e:	42ab      	cmp	r3, r5
 801bb50:	da4c      	bge.n	801bbec <__gethex+0x2a4>
 801bb52:	ee18 0a10 	vmov	r0, s16
 801bb56:	4621      	mov	r1, r4
 801bb58:	f000 fac4 	bl	801c0e4 <_Bfree>
 801bb5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bb5e:	2300      	movs	r3, #0
 801bb60:	6013      	str	r3, [r2, #0]
 801bb62:	27a3      	movs	r7, #163	; 0xa3
 801bb64:	e785      	b.n	801ba72 <__gethex+0x12a>
 801bb66:	1e73      	subs	r3, r6, #1
 801bb68:	9a05      	ldr	r2, [sp, #20]
 801bb6a:	9303      	str	r3, [sp, #12]
 801bb6c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801bb70:	4293      	cmp	r3, r2
 801bb72:	d019      	beq.n	801bba8 <__gethex+0x260>
 801bb74:	f1bb 0f20 	cmp.w	fp, #32
 801bb78:	d107      	bne.n	801bb8a <__gethex+0x242>
 801bb7a:	9b02      	ldr	r3, [sp, #8]
 801bb7c:	9a00      	ldr	r2, [sp, #0]
 801bb7e:	f843 2b04 	str.w	r2, [r3], #4
 801bb82:	9302      	str	r3, [sp, #8]
 801bb84:	2300      	movs	r3, #0
 801bb86:	9300      	str	r3, [sp, #0]
 801bb88:	469b      	mov	fp, r3
 801bb8a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801bb8e:	f7ff fec6 	bl	801b91e <__hexdig_fun>
 801bb92:	9b00      	ldr	r3, [sp, #0]
 801bb94:	f000 000f 	and.w	r0, r0, #15
 801bb98:	fa00 f00b 	lsl.w	r0, r0, fp
 801bb9c:	4303      	orrs	r3, r0
 801bb9e:	9300      	str	r3, [sp, #0]
 801bba0:	f10b 0b04 	add.w	fp, fp, #4
 801bba4:	9b03      	ldr	r3, [sp, #12]
 801bba6:	e00d      	b.n	801bbc4 <__gethex+0x27c>
 801bba8:	9b03      	ldr	r3, [sp, #12]
 801bbaa:	9a06      	ldr	r2, [sp, #24]
 801bbac:	4413      	add	r3, r2
 801bbae:	42bb      	cmp	r3, r7
 801bbb0:	d3e0      	bcc.n	801bb74 <__gethex+0x22c>
 801bbb2:	4618      	mov	r0, r3
 801bbb4:	9901      	ldr	r1, [sp, #4]
 801bbb6:	9307      	str	r3, [sp, #28]
 801bbb8:	4652      	mov	r2, sl
 801bbba:	f001 fb1c 	bl	801d1f6 <strncmp>
 801bbbe:	9b07      	ldr	r3, [sp, #28]
 801bbc0:	2800      	cmp	r0, #0
 801bbc2:	d1d7      	bne.n	801bb74 <__gethex+0x22c>
 801bbc4:	461e      	mov	r6, r3
 801bbc6:	e78b      	b.n	801bae0 <__gethex+0x198>
 801bbc8:	f04f 0a03 	mov.w	sl, #3
 801bbcc:	e7b8      	b.n	801bb40 <__gethex+0x1f8>
 801bbce:	da0a      	bge.n	801bbe6 <__gethex+0x29e>
 801bbd0:	1a37      	subs	r7, r6, r0
 801bbd2:	4621      	mov	r1, r4
 801bbd4:	ee18 0a10 	vmov	r0, s16
 801bbd8:	463a      	mov	r2, r7
 801bbda:	f000 fc9f 	bl	801c51c <__lshift>
 801bbde:	1bed      	subs	r5, r5, r7
 801bbe0:	4604      	mov	r4, r0
 801bbe2:	f100 0914 	add.w	r9, r0, #20
 801bbe6:	f04f 0a00 	mov.w	sl, #0
 801bbea:	e7ae      	b.n	801bb4a <__gethex+0x202>
 801bbec:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801bbf0:	42a8      	cmp	r0, r5
 801bbf2:	dd72      	ble.n	801bcda <__gethex+0x392>
 801bbf4:	1b45      	subs	r5, r0, r5
 801bbf6:	42ae      	cmp	r6, r5
 801bbf8:	dc36      	bgt.n	801bc68 <__gethex+0x320>
 801bbfa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801bbfe:	2b02      	cmp	r3, #2
 801bc00:	d02a      	beq.n	801bc58 <__gethex+0x310>
 801bc02:	2b03      	cmp	r3, #3
 801bc04:	d02c      	beq.n	801bc60 <__gethex+0x318>
 801bc06:	2b01      	cmp	r3, #1
 801bc08:	d11c      	bne.n	801bc44 <__gethex+0x2fc>
 801bc0a:	42ae      	cmp	r6, r5
 801bc0c:	d11a      	bne.n	801bc44 <__gethex+0x2fc>
 801bc0e:	2e01      	cmp	r6, #1
 801bc10:	d112      	bne.n	801bc38 <__gethex+0x2f0>
 801bc12:	9a04      	ldr	r2, [sp, #16]
 801bc14:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801bc18:	6013      	str	r3, [r2, #0]
 801bc1a:	2301      	movs	r3, #1
 801bc1c:	6123      	str	r3, [r4, #16]
 801bc1e:	f8c9 3000 	str.w	r3, [r9]
 801bc22:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801bc24:	2762      	movs	r7, #98	; 0x62
 801bc26:	601c      	str	r4, [r3, #0]
 801bc28:	e723      	b.n	801ba72 <__gethex+0x12a>
 801bc2a:	bf00      	nop
 801bc2c:	0801e0cc 	.word	0x0801e0cc
 801bc30:	0801dff0 	.word	0x0801dff0
 801bc34:	0801e064 	.word	0x0801e064
 801bc38:	1e71      	subs	r1, r6, #1
 801bc3a:	4620      	mov	r0, r4
 801bc3c:	f000 feb2 	bl	801c9a4 <__any_on>
 801bc40:	2800      	cmp	r0, #0
 801bc42:	d1e6      	bne.n	801bc12 <__gethex+0x2ca>
 801bc44:	ee18 0a10 	vmov	r0, s16
 801bc48:	4621      	mov	r1, r4
 801bc4a:	f000 fa4b 	bl	801c0e4 <_Bfree>
 801bc4e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bc50:	2300      	movs	r3, #0
 801bc52:	6013      	str	r3, [r2, #0]
 801bc54:	2750      	movs	r7, #80	; 0x50
 801bc56:	e70c      	b.n	801ba72 <__gethex+0x12a>
 801bc58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801bc5a:	2b00      	cmp	r3, #0
 801bc5c:	d1f2      	bne.n	801bc44 <__gethex+0x2fc>
 801bc5e:	e7d8      	b.n	801bc12 <__gethex+0x2ca>
 801bc60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801bc62:	2b00      	cmp	r3, #0
 801bc64:	d1d5      	bne.n	801bc12 <__gethex+0x2ca>
 801bc66:	e7ed      	b.n	801bc44 <__gethex+0x2fc>
 801bc68:	1e6f      	subs	r7, r5, #1
 801bc6a:	f1ba 0f00 	cmp.w	sl, #0
 801bc6e:	d131      	bne.n	801bcd4 <__gethex+0x38c>
 801bc70:	b127      	cbz	r7, 801bc7c <__gethex+0x334>
 801bc72:	4639      	mov	r1, r7
 801bc74:	4620      	mov	r0, r4
 801bc76:	f000 fe95 	bl	801c9a4 <__any_on>
 801bc7a:	4682      	mov	sl, r0
 801bc7c:	117b      	asrs	r3, r7, #5
 801bc7e:	2101      	movs	r1, #1
 801bc80:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801bc84:	f007 071f 	and.w	r7, r7, #31
 801bc88:	fa01 f707 	lsl.w	r7, r1, r7
 801bc8c:	421f      	tst	r7, r3
 801bc8e:	4629      	mov	r1, r5
 801bc90:	4620      	mov	r0, r4
 801bc92:	bf18      	it	ne
 801bc94:	f04a 0a02 	orrne.w	sl, sl, #2
 801bc98:	1b76      	subs	r6, r6, r5
 801bc9a:	f7ff fdee 	bl	801b87a <rshift>
 801bc9e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801bca2:	2702      	movs	r7, #2
 801bca4:	f1ba 0f00 	cmp.w	sl, #0
 801bca8:	d048      	beq.n	801bd3c <__gethex+0x3f4>
 801bcaa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801bcae:	2b02      	cmp	r3, #2
 801bcb0:	d015      	beq.n	801bcde <__gethex+0x396>
 801bcb2:	2b03      	cmp	r3, #3
 801bcb4:	d017      	beq.n	801bce6 <__gethex+0x39e>
 801bcb6:	2b01      	cmp	r3, #1
 801bcb8:	d109      	bne.n	801bcce <__gethex+0x386>
 801bcba:	f01a 0f02 	tst.w	sl, #2
 801bcbe:	d006      	beq.n	801bcce <__gethex+0x386>
 801bcc0:	f8d9 0000 	ldr.w	r0, [r9]
 801bcc4:	ea4a 0a00 	orr.w	sl, sl, r0
 801bcc8:	f01a 0f01 	tst.w	sl, #1
 801bccc:	d10e      	bne.n	801bcec <__gethex+0x3a4>
 801bcce:	f047 0710 	orr.w	r7, r7, #16
 801bcd2:	e033      	b.n	801bd3c <__gethex+0x3f4>
 801bcd4:	f04f 0a01 	mov.w	sl, #1
 801bcd8:	e7d0      	b.n	801bc7c <__gethex+0x334>
 801bcda:	2701      	movs	r7, #1
 801bcdc:	e7e2      	b.n	801bca4 <__gethex+0x35c>
 801bcde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801bce0:	f1c3 0301 	rsb	r3, r3, #1
 801bce4:	9315      	str	r3, [sp, #84]	; 0x54
 801bce6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801bce8:	2b00      	cmp	r3, #0
 801bcea:	d0f0      	beq.n	801bcce <__gethex+0x386>
 801bcec:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801bcf0:	f104 0314 	add.w	r3, r4, #20
 801bcf4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801bcf8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801bcfc:	f04f 0c00 	mov.w	ip, #0
 801bd00:	4618      	mov	r0, r3
 801bd02:	f853 2b04 	ldr.w	r2, [r3], #4
 801bd06:	f1b2 3fff 	cmp.w	r2, #4294967295
 801bd0a:	d01c      	beq.n	801bd46 <__gethex+0x3fe>
 801bd0c:	3201      	adds	r2, #1
 801bd0e:	6002      	str	r2, [r0, #0]
 801bd10:	2f02      	cmp	r7, #2
 801bd12:	f104 0314 	add.w	r3, r4, #20
 801bd16:	d13f      	bne.n	801bd98 <__gethex+0x450>
 801bd18:	f8d8 2000 	ldr.w	r2, [r8]
 801bd1c:	3a01      	subs	r2, #1
 801bd1e:	42b2      	cmp	r2, r6
 801bd20:	d10a      	bne.n	801bd38 <__gethex+0x3f0>
 801bd22:	1171      	asrs	r1, r6, #5
 801bd24:	2201      	movs	r2, #1
 801bd26:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801bd2a:	f006 061f 	and.w	r6, r6, #31
 801bd2e:	fa02 f606 	lsl.w	r6, r2, r6
 801bd32:	421e      	tst	r6, r3
 801bd34:	bf18      	it	ne
 801bd36:	4617      	movne	r7, r2
 801bd38:	f047 0720 	orr.w	r7, r7, #32
 801bd3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801bd3e:	601c      	str	r4, [r3, #0]
 801bd40:	9b04      	ldr	r3, [sp, #16]
 801bd42:	601d      	str	r5, [r3, #0]
 801bd44:	e695      	b.n	801ba72 <__gethex+0x12a>
 801bd46:	4299      	cmp	r1, r3
 801bd48:	f843 cc04 	str.w	ip, [r3, #-4]
 801bd4c:	d8d8      	bhi.n	801bd00 <__gethex+0x3b8>
 801bd4e:	68a3      	ldr	r3, [r4, #8]
 801bd50:	459b      	cmp	fp, r3
 801bd52:	db19      	blt.n	801bd88 <__gethex+0x440>
 801bd54:	6861      	ldr	r1, [r4, #4]
 801bd56:	ee18 0a10 	vmov	r0, s16
 801bd5a:	3101      	adds	r1, #1
 801bd5c:	f000 f982 	bl	801c064 <_Balloc>
 801bd60:	4681      	mov	r9, r0
 801bd62:	b918      	cbnz	r0, 801bd6c <__gethex+0x424>
 801bd64:	4b1a      	ldr	r3, [pc, #104]	; (801bdd0 <__gethex+0x488>)
 801bd66:	4602      	mov	r2, r0
 801bd68:	2184      	movs	r1, #132	; 0x84
 801bd6a:	e6a8      	b.n	801babe <__gethex+0x176>
 801bd6c:	6922      	ldr	r2, [r4, #16]
 801bd6e:	3202      	adds	r2, #2
 801bd70:	f104 010c 	add.w	r1, r4, #12
 801bd74:	0092      	lsls	r2, r2, #2
 801bd76:	300c      	adds	r0, #12
 801bd78:	f7fc fe9c 	bl	8018ab4 <memcpy>
 801bd7c:	4621      	mov	r1, r4
 801bd7e:	ee18 0a10 	vmov	r0, s16
 801bd82:	f000 f9af 	bl	801c0e4 <_Bfree>
 801bd86:	464c      	mov	r4, r9
 801bd88:	6923      	ldr	r3, [r4, #16]
 801bd8a:	1c5a      	adds	r2, r3, #1
 801bd8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801bd90:	6122      	str	r2, [r4, #16]
 801bd92:	2201      	movs	r2, #1
 801bd94:	615a      	str	r2, [r3, #20]
 801bd96:	e7bb      	b.n	801bd10 <__gethex+0x3c8>
 801bd98:	6922      	ldr	r2, [r4, #16]
 801bd9a:	455a      	cmp	r2, fp
 801bd9c:	dd0b      	ble.n	801bdb6 <__gethex+0x46e>
 801bd9e:	2101      	movs	r1, #1
 801bda0:	4620      	mov	r0, r4
 801bda2:	f7ff fd6a 	bl	801b87a <rshift>
 801bda6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801bdaa:	3501      	adds	r5, #1
 801bdac:	42ab      	cmp	r3, r5
 801bdae:	f6ff aed0 	blt.w	801bb52 <__gethex+0x20a>
 801bdb2:	2701      	movs	r7, #1
 801bdb4:	e7c0      	b.n	801bd38 <__gethex+0x3f0>
 801bdb6:	f016 061f 	ands.w	r6, r6, #31
 801bdba:	d0fa      	beq.n	801bdb2 <__gethex+0x46a>
 801bdbc:	4453      	add	r3, sl
 801bdbe:	f1c6 0620 	rsb	r6, r6, #32
 801bdc2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801bdc6:	f000 fa3f 	bl	801c248 <__hi0bits>
 801bdca:	42b0      	cmp	r0, r6
 801bdcc:	dbe7      	blt.n	801bd9e <__gethex+0x456>
 801bdce:	e7f0      	b.n	801bdb2 <__gethex+0x46a>
 801bdd0:	0801dff0 	.word	0x0801dff0

0801bdd4 <L_shift>:
 801bdd4:	f1c2 0208 	rsb	r2, r2, #8
 801bdd8:	0092      	lsls	r2, r2, #2
 801bdda:	b570      	push	{r4, r5, r6, lr}
 801bddc:	f1c2 0620 	rsb	r6, r2, #32
 801bde0:	6843      	ldr	r3, [r0, #4]
 801bde2:	6804      	ldr	r4, [r0, #0]
 801bde4:	fa03 f506 	lsl.w	r5, r3, r6
 801bde8:	432c      	orrs	r4, r5
 801bdea:	40d3      	lsrs	r3, r2
 801bdec:	6004      	str	r4, [r0, #0]
 801bdee:	f840 3f04 	str.w	r3, [r0, #4]!
 801bdf2:	4288      	cmp	r0, r1
 801bdf4:	d3f4      	bcc.n	801bde0 <L_shift+0xc>
 801bdf6:	bd70      	pop	{r4, r5, r6, pc}

0801bdf8 <__match>:
 801bdf8:	b530      	push	{r4, r5, lr}
 801bdfa:	6803      	ldr	r3, [r0, #0]
 801bdfc:	3301      	adds	r3, #1
 801bdfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 801be02:	b914      	cbnz	r4, 801be0a <__match+0x12>
 801be04:	6003      	str	r3, [r0, #0]
 801be06:	2001      	movs	r0, #1
 801be08:	bd30      	pop	{r4, r5, pc}
 801be0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801be0e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801be12:	2d19      	cmp	r5, #25
 801be14:	bf98      	it	ls
 801be16:	3220      	addls	r2, #32
 801be18:	42a2      	cmp	r2, r4
 801be1a:	d0f0      	beq.n	801bdfe <__match+0x6>
 801be1c:	2000      	movs	r0, #0
 801be1e:	e7f3      	b.n	801be08 <__match+0x10>

0801be20 <__hexnan>:
 801be20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be24:	680b      	ldr	r3, [r1, #0]
 801be26:	115e      	asrs	r6, r3, #5
 801be28:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801be2c:	f013 031f 	ands.w	r3, r3, #31
 801be30:	b087      	sub	sp, #28
 801be32:	bf18      	it	ne
 801be34:	3604      	addne	r6, #4
 801be36:	2500      	movs	r5, #0
 801be38:	1f37      	subs	r7, r6, #4
 801be3a:	4690      	mov	r8, r2
 801be3c:	6802      	ldr	r2, [r0, #0]
 801be3e:	9301      	str	r3, [sp, #4]
 801be40:	4682      	mov	sl, r0
 801be42:	f846 5c04 	str.w	r5, [r6, #-4]
 801be46:	46b9      	mov	r9, r7
 801be48:	463c      	mov	r4, r7
 801be4a:	9502      	str	r5, [sp, #8]
 801be4c:	46ab      	mov	fp, r5
 801be4e:	7851      	ldrb	r1, [r2, #1]
 801be50:	1c53      	adds	r3, r2, #1
 801be52:	9303      	str	r3, [sp, #12]
 801be54:	b341      	cbz	r1, 801bea8 <__hexnan+0x88>
 801be56:	4608      	mov	r0, r1
 801be58:	9205      	str	r2, [sp, #20]
 801be5a:	9104      	str	r1, [sp, #16]
 801be5c:	f7ff fd5f 	bl	801b91e <__hexdig_fun>
 801be60:	2800      	cmp	r0, #0
 801be62:	d14f      	bne.n	801bf04 <__hexnan+0xe4>
 801be64:	9904      	ldr	r1, [sp, #16]
 801be66:	9a05      	ldr	r2, [sp, #20]
 801be68:	2920      	cmp	r1, #32
 801be6a:	d818      	bhi.n	801be9e <__hexnan+0x7e>
 801be6c:	9b02      	ldr	r3, [sp, #8]
 801be6e:	459b      	cmp	fp, r3
 801be70:	dd13      	ble.n	801be9a <__hexnan+0x7a>
 801be72:	454c      	cmp	r4, r9
 801be74:	d206      	bcs.n	801be84 <__hexnan+0x64>
 801be76:	2d07      	cmp	r5, #7
 801be78:	dc04      	bgt.n	801be84 <__hexnan+0x64>
 801be7a:	462a      	mov	r2, r5
 801be7c:	4649      	mov	r1, r9
 801be7e:	4620      	mov	r0, r4
 801be80:	f7ff ffa8 	bl	801bdd4 <L_shift>
 801be84:	4544      	cmp	r4, r8
 801be86:	d950      	bls.n	801bf2a <__hexnan+0x10a>
 801be88:	2300      	movs	r3, #0
 801be8a:	f1a4 0904 	sub.w	r9, r4, #4
 801be8e:	f844 3c04 	str.w	r3, [r4, #-4]
 801be92:	f8cd b008 	str.w	fp, [sp, #8]
 801be96:	464c      	mov	r4, r9
 801be98:	461d      	mov	r5, r3
 801be9a:	9a03      	ldr	r2, [sp, #12]
 801be9c:	e7d7      	b.n	801be4e <__hexnan+0x2e>
 801be9e:	2929      	cmp	r1, #41	; 0x29
 801bea0:	d156      	bne.n	801bf50 <__hexnan+0x130>
 801bea2:	3202      	adds	r2, #2
 801bea4:	f8ca 2000 	str.w	r2, [sl]
 801bea8:	f1bb 0f00 	cmp.w	fp, #0
 801beac:	d050      	beq.n	801bf50 <__hexnan+0x130>
 801beae:	454c      	cmp	r4, r9
 801beb0:	d206      	bcs.n	801bec0 <__hexnan+0xa0>
 801beb2:	2d07      	cmp	r5, #7
 801beb4:	dc04      	bgt.n	801bec0 <__hexnan+0xa0>
 801beb6:	462a      	mov	r2, r5
 801beb8:	4649      	mov	r1, r9
 801beba:	4620      	mov	r0, r4
 801bebc:	f7ff ff8a 	bl	801bdd4 <L_shift>
 801bec0:	4544      	cmp	r4, r8
 801bec2:	d934      	bls.n	801bf2e <__hexnan+0x10e>
 801bec4:	f1a8 0204 	sub.w	r2, r8, #4
 801bec8:	4623      	mov	r3, r4
 801beca:	f853 1b04 	ldr.w	r1, [r3], #4
 801bece:	f842 1f04 	str.w	r1, [r2, #4]!
 801bed2:	429f      	cmp	r7, r3
 801bed4:	d2f9      	bcs.n	801beca <__hexnan+0xaa>
 801bed6:	1b3b      	subs	r3, r7, r4
 801bed8:	f023 0303 	bic.w	r3, r3, #3
 801bedc:	3304      	adds	r3, #4
 801bede:	3401      	adds	r4, #1
 801bee0:	3e03      	subs	r6, #3
 801bee2:	42b4      	cmp	r4, r6
 801bee4:	bf88      	it	hi
 801bee6:	2304      	movhi	r3, #4
 801bee8:	4443      	add	r3, r8
 801beea:	2200      	movs	r2, #0
 801beec:	f843 2b04 	str.w	r2, [r3], #4
 801bef0:	429f      	cmp	r7, r3
 801bef2:	d2fb      	bcs.n	801beec <__hexnan+0xcc>
 801bef4:	683b      	ldr	r3, [r7, #0]
 801bef6:	b91b      	cbnz	r3, 801bf00 <__hexnan+0xe0>
 801bef8:	4547      	cmp	r7, r8
 801befa:	d127      	bne.n	801bf4c <__hexnan+0x12c>
 801befc:	2301      	movs	r3, #1
 801befe:	603b      	str	r3, [r7, #0]
 801bf00:	2005      	movs	r0, #5
 801bf02:	e026      	b.n	801bf52 <__hexnan+0x132>
 801bf04:	3501      	adds	r5, #1
 801bf06:	2d08      	cmp	r5, #8
 801bf08:	f10b 0b01 	add.w	fp, fp, #1
 801bf0c:	dd06      	ble.n	801bf1c <__hexnan+0xfc>
 801bf0e:	4544      	cmp	r4, r8
 801bf10:	d9c3      	bls.n	801be9a <__hexnan+0x7a>
 801bf12:	2300      	movs	r3, #0
 801bf14:	f844 3c04 	str.w	r3, [r4, #-4]
 801bf18:	2501      	movs	r5, #1
 801bf1a:	3c04      	subs	r4, #4
 801bf1c:	6822      	ldr	r2, [r4, #0]
 801bf1e:	f000 000f 	and.w	r0, r0, #15
 801bf22:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801bf26:	6022      	str	r2, [r4, #0]
 801bf28:	e7b7      	b.n	801be9a <__hexnan+0x7a>
 801bf2a:	2508      	movs	r5, #8
 801bf2c:	e7b5      	b.n	801be9a <__hexnan+0x7a>
 801bf2e:	9b01      	ldr	r3, [sp, #4]
 801bf30:	2b00      	cmp	r3, #0
 801bf32:	d0df      	beq.n	801bef4 <__hexnan+0xd4>
 801bf34:	f04f 32ff 	mov.w	r2, #4294967295
 801bf38:	f1c3 0320 	rsb	r3, r3, #32
 801bf3c:	fa22 f303 	lsr.w	r3, r2, r3
 801bf40:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801bf44:	401a      	ands	r2, r3
 801bf46:	f846 2c04 	str.w	r2, [r6, #-4]
 801bf4a:	e7d3      	b.n	801bef4 <__hexnan+0xd4>
 801bf4c:	3f04      	subs	r7, #4
 801bf4e:	e7d1      	b.n	801bef4 <__hexnan+0xd4>
 801bf50:	2004      	movs	r0, #4
 801bf52:	b007      	add	sp, #28
 801bf54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bf58 <_localeconv_r>:
 801bf58:	4800      	ldr	r0, [pc, #0]	; (801bf5c <_localeconv_r+0x4>)
 801bf5a:	4770      	bx	lr
 801bf5c:	200001e8 	.word	0x200001e8

0801bf60 <__retarget_lock_init_recursive>:
 801bf60:	4770      	bx	lr

0801bf62 <__retarget_lock_acquire_recursive>:
 801bf62:	4770      	bx	lr

0801bf64 <__retarget_lock_release_recursive>:
 801bf64:	4770      	bx	lr

0801bf66 <__swhatbuf_r>:
 801bf66:	b570      	push	{r4, r5, r6, lr}
 801bf68:	460e      	mov	r6, r1
 801bf6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bf6e:	2900      	cmp	r1, #0
 801bf70:	b096      	sub	sp, #88	; 0x58
 801bf72:	4614      	mov	r4, r2
 801bf74:	461d      	mov	r5, r3
 801bf76:	da08      	bge.n	801bf8a <__swhatbuf_r+0x24>
 801bf78:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801bf7c:	2200      	movs	r2, #0
 801bf7e:	602a      	str	r2, [r5, #0]
 801bf80:	061a      	lsls	r2, r3, #24
 801bf82:	d410      	bmi.n	801bfa6 <__swhatbuf_r+0x40>
 801bf84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bf88:	e00e      	b.n	801bfa8 <__swhatbuf_r+0x42>
 801bf8a:	466a      	mov	r2, sp
 801bf8c:	f001 f9a6 	bl	801d2dc <_fstat_r>
 801bf90:	2800      	cmp	r0, #0
 801bf92:	dbf1      	blt.n	801bf78 <__swhatbuf_r+0x12>
 801bf94:	9a01      	ldr	r2, [sp, #4]
 801bf96:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801bf9a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801bf9e:	425a      	negs	r2, r3
 801bfa0:	415a      	adcs	r2, r3
 801bfa2:	602a      	str	r2, [r5, #0]
 801bfa4:	e7ee      	b.n	801bf84 <__swhatbuf_r+0x1e>
 801bfa6:	2340      	movs	r3, #64	; 0x40
 801bfa8:	2000      	movs	r0, #0
 801bfaa:	6023      	str	r3, [r4, #0]
 801bfac:	b016      	add	sp, #88	; 0x58
 801bfae:	bd70      	pop	{r4, r5, r6, pc}

0801bfb0 <__smakebuf_r>:
 801bfb0:	898b      	ldrh	r3, [r1, #12]
 801bfb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bfb4:	079d      	lsls	r5, r3, #30
 801bfb6:	4606      	mov	r6, r0
 801bfb8:	460c      	mov	r4, r1
 801bfba:	d507      	bpl.n	801bfcc <__smakebuf_r+0x1c>
 801bfbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801bfc0:	6023      	str	r3, [r4, #0]
 801bfc2:	6123      	str	r3, [r4, #16]
 801bfc4:	2301      	movs	r3, #1
 801bfc6:	6163      	str	r3, [r4, #20]
 801bfc8:	b002      	add	sp, #8
 801bfca:	bd70      	pop	{r4, r5, r6, pc}
 801bfcc:	ab01      	add	r3, sp, #4
 801bfce:	466a      	mov	r2, sp
 801bfd0:	f7ff ffc9 	bl	801bf66 <__swhatbuf_r>
 801bfd4:	9900      	ldr	r1, [sp, #0]
 801bfd6:	4605      	mov	r5, r0
 801bfd8:	4630      	mov	r0, r6
 801bfda:	f000 fd87 	bl	801caec <_malloc_r>
 801bfde:	b948      	cbnz	r0, 801bff4 <__smakebuf_r+0x44>
 801bfe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bfe4:	059a      	lsls	r2, r3, #22
 801bfe6:	d4ef      	bmi.n	801bfc8 <__smakebuf_r+0x18>
 801bfe8:	f023 0303 	bic.w	r3, r3, #3
 801bfec:	f043 0302 	orr.w	r3, r3, #2
 801bff0:	81a3      	strh	r3, [r4, #12]
 801bff2:	e7e3      	b.n	801bfbc <__smakebuf_r+0xc>
 801bff4:	4b0d      	ldr	r3, [pc, #52]	; (801c02c <__smakebuf_r+0x7c>)
 801bff6:	62b3      	str	r3, [r6, #40]	; 0x28
 801bff8:	89a3      	ldrh	r3, [r4, #12]
 801bffa:	6020      	str	r0, [r4, #0]
 801bffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c000:	81a3      	strh	r3, [r4, #12]
 801c002:	9b00      	ldr	r3, [sp, #0]
 801c004:	6163      	str	r3, [r4, #20]
 801c006:	9b01      	ldr	r3, [sp, #4]
 801c008:	6120      	str	r0, [r4, #16]
 801c00a:	b15b      	cbz	r3, 801c024 <__smakebuf_r+0x74>
 801c00c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c010:	4630      	mov	r0, r6
 801c012:	f001 f975 	bl	801d300 <_isatty_r>
 801c016:	b128      	cbz	r0, 801c024 <__smakebuf_r+0x74>
 801c018:	89a3      	ldrh	r3, [r4, #12]
 801c01a:	f023 0303 	bic.w	r3, r3, #3
 801c01e:	f043 0301 	orr.w	r3, r3, #1
 801c022:	81a3      	strh	r3, [r4, #12]
 801c024:	89a0      	ldrh	r0, [r4, #12]
 801c026:	4305      	orrs	r5, r0
 801c028:	81a5      	strh	r5, [r4, #12]
 801c02a:	e7cd      	b.n	801bfc8 <__smakebuf_r+0x18>
 801c02c:	0801b6d9 	.word	0x0801b6d9

0801c030 <malloc>:
 801c030:	4b02      	ldr	r3, [pc, #8]	; (801c03c <malloc+0xc>)
 801c032:	4601      	mov	r1, r0
 801c034:	6818      	ldr	r0, [r3, #0]
 801c036:	f000 bd59 	b.w	801caec <_malloc_r>
 801c03a:	bf00      	nop
 801c03c:	20000090 	.word	0x20000090

0801c040 <__ascii_mbtowc>:
 801c040:	b082      	sub	sp, #8
 801c042:	b901      	cbnz	r1, 801c046 <__ascii_mbtowc+0x6>
 801c044:	a901      	add	r1, sp, #4
 801c046:	b142      	cbz	r2, 801c05a <__ascii_mbtowc+0x1a>
 801c048:	b14b      	cbz	r3, 801c05e <__ascii_mbtowc+0x1e>
 801c04a:	7813      	ldrb	r3, [r2, #0]
 801c04c:	600b      	str	r3, [r1, #0]
 801c04e:	7812      	ldrb	r2, [r2, #0]
 801c050:	1e10      	subs	r0, r2, #0
 801c052:	bf18      	it	ne
 801c054:	2001      	movne	r0, #1
 801c056:	b002      	add	sp, #8
 801c058:	4770      	bx	lr
 801c05a:	4610      	mov	r0, r2
 801c05c:	e7fb      	b.n	801c056 <__ascii_mbtowc+0x16>
 801c05e:	f06f 0001 	mvn.w	r0, #1
 801c062:	e7f8      	b.n	801c056 <__ascii_mbtowc+0x16>

0801c064 <_Balloc>:
 801c064:	b570      	push	{r4, r5, r6, lr}
 801c066:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c068:	4604      	mov	r4, r0
 801c06a:	460d      	mov	r5, r1
 801c06c:	b976      	cbnz	r6, 801c08c <_Balloc+0x28>
 801c06e:	2010      	movs	r0, #16
 801c070:	f7ff ffde 	bl	801c030 <malloc>
 801c074:	4602      	mov	r2, r0
 801c076:	6260      	str	r0, [r4, #36]	; 0x24
 801c078:	b920      	cbnz	r0, 801c084 <_Balloc+0x20>
 801c07a:	4b18      	ldr	r3, [pc, #96]	; (801c0dc <_Balloc+0x78>)
 801c07c:	4818      	ldr	r0, [pc, #96]	; (801c0e0 <_Balloc+0x7c>)
 801c07e:	2166      	movs	r1, #102	; 0x66
 801c080:	f001 f8ec 	bl	801d25c <__assert_func>
 801c084:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c088:	6006      	str	r6, [r0, #0]
 801c08a:	60c6      	str	r6, [r0, #12]
 801c08c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801c08e:	68f3      	ldr	r3, [r6, #12]
 801c090:	b183      	cbz	r3, 801c0b4 <_Balloc+0x50>
 801c092:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c094:	68db      	ldr	r3, [r3, #12]
 801c096:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c09a:	b9b8      	cbnz	r0, 801c0cc <_Balloc+0x68>
 801c09c:	2101      	movs	r1, #1
 801c09e:	fa01 f605 	lsl.w	r6, r1, r5
 801c0a2:	1d72      	adds	r2, r6, #5
 801c0a4:	0092      	lsls	r2, r2, #2
 801c0a6:	4620      	mov	r0, r4
 801c0a8:	f000 fc9d 	bl	801c9e6 <_calloc_r>
 801c0ac:	b160      	cbz	r0, 801c0c8 <_Balloc+0x64>
 801c0ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c0b2:	e00e      	b.n	801c0d2 <_Balloc+0x6e>
 801c0b4:	2221      	movs	r2, #33	; 0x21
 801c0b6:	2104      	movs	r1, #4
 801c0b8:	4620      	mov	r0, r4
 801c0ba:	f000 fc94 	bl	801c9e6 <_calloc_r>
 801c0be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c0c0:	60f0      	str	r0, [r6, #12]
 801c0c2:	68db      	ldr	r3, [r3, #12]
 801c0c4:	2b00      	cmp	r3, #0
 801c0c6:	d1e4      	bne.n	801c092 <_Balloc+0x2e>
 801c0c8:	2000      	movs	r0, #0
 801c0ca:	bd70      	pop	{r4, r5, r6, pc}
 801c0cc:	6802      	ldr	r2, [r0, #0]
 801c0ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c0d2:	2300      	movs	r3, #0
 801c0d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c0d8:	e7f7      	b.n	801c0ca <_Balloc+0x66>
 801c0da:	bf00      	nop
 801c0dc:	0801df7e 	.word	0x0801df7e
 801c0e0:	0801e0e0 	.word	0x0801e0e0

0801c0e4 <_Bfree>:
 801c0e4:	b570      	push	{r4, r5, r6, lr}
 801c0e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c0e8:	4605      	mov	r5, r0
 801c0ea:	460c      	mov	r4, r1
 801c0ec:	b976      	cbnz	r6, 801c10c <_Bfree+0x28>
 801c0ee:	2010      	movs	r0, #16
 801c0f0:	f7ff ff9e 	bl	801c030 <malloc>
 801c0f4:	4602      	mov	r2, r0
 801c0f6:	6268      	str	r0, [r5, #36]	; 0x24
 801c0f8:	b920      	cbnz	r0, 801c104 <_Bfree+0x20>
 801c0fa:	4b09      	ldr	r3, [pc, #36]	; (801c120 <_Bfree+0x3c>)
 801c0fc:	4809      	ldr	r0, [pc, #36]	; (801c124 <_Bfree+0x40>)
 801c0fe:	218a      	movs	r1, #138	; 0x8a
 801c100:	f001 f8ac 	bl	801d25c <__assert_func>
 801c104:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c108:	6006      	str	r6, [r0, #0]
 801c10a:	60c6      	str	r6, [r0, #12]
 801c10c:	b13c      	cbz	r4, 801c11e <_Bfree+0x3a>
 801c10e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801c110:	6862      	ldr	r2, [r4, #4]
 801c112:	68db      	ldr	r3, [r3, #12]
 801c114:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c118:	6021      	str	r1, [r4, #0]
 801c11a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801c11e:	bd70      	pop	{r4, r5, r6, pc}
 801c120:	0801df7e 	.word	0x0801df7e
 801c124:	0801e0e0 	.word	0x0801e0e0

0801c128 <__multadd>:
 801c128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c12c:	690d      	ldr	r5, [r1, #16]
 801c12e:	4607      	mov	r7, r0
 801c130:	460c      	mov	r4, r1
 801c132:	461e      	mov	r6, r3
 801c134:	f101 0c14 	add.w	ip, r1, #20
 801c138:	2000      	movs	r0, #0
 801c13a:	f8dc 3000 	ldr.w	r3, [ip]
 801c13e:	b299      	uxth	r1, r3
 801c140:	fb02 6101 	mla	r1, r2, r1, r6
 801c144:	0c1e      	lsrs	r6, r3, #16
 801c146:	0c0b      	lsrs	r3, r1, #16
 801c148:	fb02 3306 	mla	r3, r2, r6, r3
 801c14c:	b289      	uxth	r1, r1
 801c14e:	3001      	adds	r0, #1
 801c150:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801c154:	4285      	cmp	r5, r0
 801c156:	f84c 1b04 	str.w	r1, [ip], #4
 801c15a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801c15e:	dcec      	bgt.n	801c13a <__multadd+0x12>
 801c160:	b30e      	cbz	r6, 801c1a6 <__multadd+0x7e>
 801c162:	68a3      	ldr	r3, [r4, #8]
 801c164:	42ab      	cmp	r3, r5
 801c166:	dc19      	bgt.n	801c19c <__multadd+0x74>
 801c168:	6861      	ldr	r1, [r4, #4]
 801c16a:	4638      	mov	r0, r7
 801c16c:	3101      	adds	r1, #1
 801c16e:	f7ff ff79 	bl	801c064 <_Balloc>
 801c172:	4680      	mov	r8, r0
 801c174:	b928      	cbnz	r0, 801c182 <__multadd+0x5a>
 801c176:	4602      	mov	r2, r0
 801c178:	4b0c      	ldr	r3, [pc, #48]	; (801c1ac <__multadd+0x84>)
 801c17a:	480d      	ldr	r0, [pc, #52]	; (801c1b0 <__multadd+0x88>)
 801c17c:	21b5      	movs	r1, #181	; 0xb5
 801c17e:	f001 f86d 	bl	801d25c <__assert_func>
 801c182:	6922      	ldr	r2, [r4, #16]
 801c184:	3202      	adds	r2, #2
 801c186:	f104 010c 	add.w	r1, r4, #12
 801c18a:	0092      	lsls	r2, r2, #2
 801c18c:	300c      	adds	r0, #12
 801c18e:	f7fc fc91 	bl	8018ab4 <memcpy>
 801c192:	4621      	mov	r1, r4
 801c194:	4638      	mov	r0, r7
 801c196:	f7ff ffa5 	bl	801c0e4 <_Bfree>
 801c19a:	4644      	mov	r4, r8
 801c19c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801c1a0:	3501      	adds	r5, #1
 801c1a2:	615e      	str	r6, [r3, #20]
 801c1a4:	6125      	str	r5, [r4, #16]
 801c1a6:	4620      	mov	r0, r4
 801c1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c1ac:	0801dff0 	.word	0x0801dff0
 801c1b0:	0801e0e0 	.word	0x0801e0e0

0801c1b4 <__s2b>:
 801c1b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c1b8:	460c      	mov	r4, r1
 801c1ba:	4615      	mov	r5, r2
 801c1bc:	461f      	mov	r7, r3
 801c1be:	2209      	movs	r2, #9
 801c1c0:	3308      	adds	r3, #8
 801c1c2:	4606      	mov	r6, r0
 801c1c4:	fb93 f3f2 	sdiv	r3, r3, r2
 801c1c8:	2100      	movs	r1, #0
 801c1ca:	2201      	movs	r2, #1
 801c1cc:	429a      	cmp	r2, r3
 801c1ce:	db09      	blt.n	801c1e4 <__s2b+0x30>
 801c1d0:	4630      	mov	r0, r6
 801c1d2:	f7ff ff47 	bl	801c064 <_Balloc>
 801c1d6:	b940      	cbnz	r0, 801c1ea <__s2b+0x36>
 801c1d8:	4602      	mov	r2, r0
 801c1da:	4b19      	ldr	r3, [pc, #100]	; (801c240 <__s2b+0x8c>)
 801c1dc:	4819      	ldr	r0, [pc, #100]	; (801c244 <__s2b+0x90>)
 801c1de:	21ce      	movs	r1, #206	; 0xce
 801c1e0:	f001 f83c 	bl	801d25c <__assert_func>
 801c1e4:	0052      	lsls	r2, r2, #1
 801c1e6:	3101      	adds	r1, #1
 801c1e8:	e7f0      	b.n	801c1cc <__s2b+0x18>
 801c1ea:	9b08      	ldr	r3, [sp, #32]
 801c1ec:	6143      	str	r3, [r0, #20]
 801c1ee:	2d09      	cmp	r5, #9
 801c1f0:	f04f 0301 	mov.w	r3, #1
 801c1f4:	6103      	str	r3, [r0, #16]
 801c1f6:	dd16      	ble.n	801c226 <__s2b+0x72>
 801c1f8:	f104 0909 	add.w	r9, r4, #9
 801c1fc:	46c8      	mov	r8, r9
 801c1fe:	442c      	add	r4, r5
 801c200:	f818 3b01 	ldrb.w	r3, [r8], #1
 801c204:	4601      	mov	r1, r0
 801c206:	3b30      	subs	r3, #48	; 0x30
 801c208:	220a      	movs	r2, #10
 801c20a:	4630      	mov	r0, r6
 801c20c:	f7ff ff8c 	bl	801c128 <__multadd>
 801c210:	45a0      	cmp	r8, r4
 801c212:	d1f5      	bne.n	801c200 <__s2b+0x4c>
 801c214:	f1a5 0408 	sub.w	r4, r5, #8
 801c218:	444c      	add	r4, r9
 801c21a:	1b2d      	subs	r5, r5, r4
 801c21c:	1963      	adds	r3, r4, r5
 801c21e:	42bb      	cmp	r3, r7
 801c220:	db04      	blt.n	801c22c <__s2b+0x78>
 801c222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c226:	340a      	adds	r4, #10
 801c228:	2509      	movs	r5, #9
 801c22a:	e7f6      	b.n	801c21a <__s2b+0x66>
 801c22c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c230:	4601      	mov	r1, r0
 801c232:	3b30      	subs	r3, #48	; 0x30
 801c234:	220a      	movs	r2, #10
 801c236:	4630      	mov	r0, r6
 801c238:	f7ff ff76 	bl	801c128 <__multadd>
 801c23c:	e7ee      	b.n	801c21c <__s2b+0x68>
 801c23e:	bf00      	nop
 801c240:	0801dff0 	.word	0x0801dff0
 801c244:	0801e0e0 	.word	0x0801e0e0

0801c248 <__hi0bits>:
 801c248:	0c03      	lsrs	r3, r0, #16
 801c24a:	041b      	lsls	r3, r3, #16
 801c24c:	b9d3      	cbnz	r3, 801c284 <__hi0bits+0x3c>
 801c24e:	0400      	lsls	r0, r0, #16
 801c250:	2310      	movs	r3, #16
 801c252:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801c256:	bf04      	itt	eq
 801c258:	0200      	lsleq	r0, r0, #8
 801c25a:	3308      	addeq	r3, #8
 801c25c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801c260:	bf04      	itt	eq
 801c262:	0100      	lsleq	r0, r0, #4
 801c264:	3304      	addeq	r3, #4
 801c266:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801c26a:	bf04      	itt	eq
 801c26c:	0080      	lsleq	r0, r0, #2
 801c26e:	3302      	addeq	r3, #2
 801c270:	2800      	cmp	r0, #0
 801c272:	db05      	blt.n	801c280 <__hi0bits+0x38>
 801c274:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801c278:	f103 0301 	add.w	r3, r3, #1
 801c27c:	bf08      	it	eq
 801c27e:	2320      	moveq	r3, #32
 801c280:	4618      	mov	r0, r3
 801c282:	4770      	bx	lr
 801c284:	2300      	movs	r3, #0
 801c286:	e7e4      	b.n	801c252 <__hi0bits+0xa>

0801c288 <__lo0bits>:
 801c288:	6803      	ldr	r3, [r0, #0]
 801c28a:	f013 0207 	ands.w	r2, r3, #7
 801c28e:	4601      	mov	r1, r0
 801c290:	d00b      	beq.n	801c2aa <__lo0bits+0x22>
 801c292:	07da      	lsls	r2, r3, #31
 801c294:	d423      	bmi.n	801c2de <__lo0bits+0x56>
 801c296:	0798      	lsls	r0, r3, #30
 801c298:	bf49      	itett	mi
 801c29a:	085b      	lsrmi	r3, r3, #1
 801c29c:	089b      	lsrpl	r3, r3, #2
 801c29e:	2001      	movmi	r0, #1
 801c2a0:	600b      	strmi	r3, [r1, #0]
 801c2a2:	bf5c      	itt	pl
 801c2a4:	600b      	strpl	r3, [r1, #0]
 801c2a6:	2002      	movpl	r0, #2
 801c2a8:	4770      	bx	lr
 801c2aa:	b298      	uxth	r0, r3
 801c2ac:	b9a8      	cbnz	r0, 801c2da <__lo0bits+0x52>
 801c2ae:	0c1b      	lsrs	r3, r3, #16
 801c2b0:	2010      	movs	r0, #16
 801c2b2:	b2da      	uxtb	r2, r3
 801c2b4:	b90a      	cbnz	r2, 801c2ba <__lo0bits+0x32>
 801c2b6:	3008      	adds	r0, #8
 801c2b8:	0a1b      	lsrs	r3, r3, #8
 801c2ba:	071a      	lsls	r2, r3, #28
 801c2bc:	bf04      	itt	eq
 801c2be:	091b      	lsreq	r3, r3, #4
 801c2c0:	3004      	addeq	r0, #4
 801c2c2:	079a      	lsls	r2, r3, #30
 801c2c4:	bf04      	itt	eq
 801c2c6:	089b      	lsreq	r3, r3, #2
 801c2c8:	3002      	addeq	r0, #2
 801c2ca:	07da      	lsls	r2, r3, #31
 801c2cc:	d403      	bmi.n	801c2d6 <__lo0bits+0x4e>
 801c2ce:	085b      	lsrs	r3, r3, #1
 801c2d0:	f100 0001 	add.w	r0, r0, #1
 801c2d4:	d005      	beq.n	801c2e2 <__lo0bits+0x5a>
 801c2d6:	600b      	str	r3, [r1, #0]
 801c2d8:	4770      	bx	lr
 801c2da:	4610      	mov	r0, r2
 801c2dc:	e7e9      	b.n	801c2b2 <__lo0bits+0x2a>
 801c2de:	2000      	movs	r0, #0
 801c2e0:	4770      	bx	lr
 801c2e2:	2020      	movs	r0, #32
 801c2e4:	4770      	bx	lr
	...

0801c2e8 <__i2b>:
 801c2e8:	b510      	push	{r4, lr}
 801c2ea:	460c      	mov	r4, r1
 801c2ec:	2101      	movs	r1, #1
 801c2ee:	f7ff feb9 	bl	801c064 <_Balloc>
 801c2f2:	4602      	mov	r2, r0
 801c2f4:	b928      	cbnz	r0, 801c302 <__i2b+0x1a>
 801c2f6:	4b05      	ldr	r3, [pc, #20]	; (801c30c <__i2b+0x24>)
 801c2f8:	4805      	ldr	r0, [pc, #20]	; (801c310 <__i2b+0x28>)
 801c2fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801c2fe:	f000 ffad 	bl	801d25c <__assert_func>
 801c302:	2301      	movs	r3, #1
 801c304:	6144      	str	r4, [r0, #20]
 801c306:	6103      	str	r3, [r0, #16]
 801c308:	bd10      	pop	{r4, pc}
 801c30a:	bf00      	nop
 801c30c:	0801dff0 	.word	0x0801dff0
 801c310:	0801e0e0 	.word	0x0801e0e0

0801c314 <__multiply>:
 801c314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c318:	4691      	mov	r9, r2
 801c31a:	690a      	ldr	r2, [r1, #16]
 801c31c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801c320:	429a      	cmp	r2, r3
 801c322:	bfb8      	it	lt
 801c324:	460b      	movlt	r3, r1
 801c326:	460c      	mov	r4, r1
 801c328:	bfbc      	itt	lt
 801c32a:	464c      	movlt	r4, r9
 801c32c:	4699      	movlt	r9, r3
 801c32e:	6927      	ldr	r7, [r4, #16]
 801c330:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801c334:	68a3      	ldr	r3, [r4, #8]
 801c336:	6861      	ldr	r1, [r4, #4]
 801c338:	eb07 060a 	add.w	r6, r7, sl
 801c33c:	42b3      	cmp	r3, r6
 801c33e:	b085      	sub	sp, #20
 801c340:	bfb8      	it	lt
 801c342:	3101      	addlt	r1, #1
 801c344:	f7ff fe8e 	bl	801c064 <_Balloc>
 801c348:	b930      	cbnz	r0, 801c358 <__multiply+0x44>
 801c34a:	4602      	mov	r2, r0
 801c34c:	4b44      	ldr	r3, [pc, #272]	; (801c460 <__multiply+0x14c>)
 801c34e:	4845      	ldr	r0, [pc, #276]	; (801c464 <__multiply+0x150>)
 801c350:	f240 115d 	movw	r1, #349	; 0x15d
 801c354:	f000 ff82 	bl	801d25c <__assert_func>
 801c358:	f100 0514 	add.w	r5, r0, #20
 801c35c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801c360:	462b      	mov	r3, r5
 801c362:	2200      	movs	r2, #0
 801c364:	4543      	cmp	r3, r8
 801c366:	d321      	bcc.n	801c3ac <__multiply+0x98>
 801c368:	f104 0314 	add.w	r3, r4, #20
 801c36c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801c370:	f109 0314 	add.w	r3, r9, #20
 801c374:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801c378:	9202      	str	r2, [sp, #8]
 801c37a:	1b3a      	subs	r2, r7, r4
 801c37c:	3a15      	subs	r2, #21
 801c37e:	f022 0203 	bic.w	r2, r2, #3
 801c382:	3204      	adds	r2, #4
 801c384:	f104 0115 	add.w	r1, r4, #21
 801c388:	428f      	cmp	r7, r1
 801c38a:	bf38      	it	cc
 801c38c:	2204      	movcc	r2, #4
 801c38e:	9201      	str	r2, [sp, #4]
 801c390:	9a02      	ldr	r2, [sp, #8]
 801c392:	9303      	str	r3, [sp, #12]
 801c394:	429a      	cmp	r2, r3
 801c396:	d80c      	bhi.n	801c3b2 <__multiply+0x9e>
 801c398:	2e00      	cmp	r6, #0
 801c39a:	dd03      	ble.n	801c3a4 <__multiply+0x90>
 801c39c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801c3a0:	2b00      	cmp	r3, #0
 801c3a2:	d05a      	beq.n	801c45a <__multiply+0x146>
 801c3a4:	6106      	str	r6, [r0, #16]
 801c3a6:	b005      	add	sp, #20
 801c3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3ac:	f843 2b04 	str.w	r2, [r3], #4
 801c3b0:	e7d8      	b.n	801c364 <__multiply+0x50>
 801c3b2:	f8b3 a000 	ldrh.w	sl, [r3]
 801c3b6:	f1ba 0f00 	cmp.w	sl, #0
 801c3ba:	d024      	beq.n	801c406 <__multiply+0xf2>
 801c3bc:	f104 0e14 	add.w	lr, r4, #20
 801c3c0:	46a9      	mov	r9, r5
 801c3c2:	f04f 0c00 	mov.w	ip, #0
 801c3c6:	f85e 2b04 	ldr.w	r2, [lr], #4
 801c3ca:	f8d9 1000 	ldr.w	r1, [r9]
 801c3ce:	fa1f fb82 	uxth.w	fp, r2
 801c3d2:	b289      	uxth	r1, r1
 801c3d4:	fb0a 110b 	mla	r1, sl, fp, r1
 801c3d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801c3dc:	f8d9 2000 	ldr.w	r2, [r9]
 801c3e0:	4461      	add	r1, ip
 801c3e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801c3e6:	fb0a c20b 	mla	r2, sl, fp, ip
 801c3ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801c3ee:	b289      	uxth	r1, r1
 801c3f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801c3f4:	4577      	cmp	r7, lr
 801c3f6:	f849 1b04 	str.w	r1, [r9], #4
 801c3fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801c3fe:	d8e2      	bhi.n	801c3c6 <__multiply+0xb2>
 801c400:	9a01      	ldr	r2, [sp, #4]
 801c402:	f845 c002 	str.w	ip, [r5, r2]
 801c406:	9a03      	ldr	r2, [sp, #12]
 801c408:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801c40c:	3304      	adds	r3, #4
 801c40e:	f1b9 0f00 	cmp.w	r9, #0
 801c412:	d020      	beq.n	801c456 <__multiply+0x142>
 801c414:	6829      	ldr	r1, [r5, #0]
 801c416:	f104 0c14 	add.w	ip, r4, #20
 801c41a:	46ae      	mov	lr, r5
 801c41c:	f04f 0a00 	mov.w	sl, #0
 801c420:	f8bc b000 	ldrh.w	fp, [ip]
 801c424:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801c428:	fb09 220b 	mla	r2, r9, fp, r2
 801c42c:	4492      	add	sl, r2
 801c42e:	b289      	uxth	r1, r1
 801c430:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801c434:	f84e 1b04 	str.w	r1, [lr], #4
 801c438:	f85c 2b04 	ldr.w	r2, [ip], #4
 801c43c:	f8be 1000 	ldrh.w	r1, [lr]
 801c440:	0c12      	lsrs	r2, r2, #16
 801c442:	fb09 1102 	mla	r1, r9, r2, r1
 801c446:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801c44a:	4567      	cmp	r7, ip
 801c44c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801c450:	d8e6      	bhi.n	801c420 <__multiply+0x10c>
 801c452:	9a01      	ldr	r2, [sp, #4]
 801c454:	50a9      	str	r1, [r5, r2]
 801c456:	3504      	adds	r5, #4
 801c458:	e79a      	b.n	801c390 <__multiply+0x7c>
 801c45a:	3e01      	subs	r6, #1
 801c45c:	e79c      	b.n	801c398 <__multiply+0x84>
 801c45e:	bf00      	nop
 801c460:	0801dff0 	.word	0x0801dff0
 801c464:	0801e0e0 	.word	0x0801e0e0

0801c468 <__pow5mult>:
 801c468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c46c:	4615      	mov	r5, r2
 801c46e:	f012 0203 	ands.w	r2, r2, #3
 801c472:	4606      	mov	r6, r0
 801c474:	460f      	mov	r7, r1
 801c476:	d007      	beq.n	801c488 <__pow5mult+0x20>
 801c478:	4c25      	ldr	r4, [pc, #148]	; (801c510 <__pow5mult+0xa8>)
 801c47a:	3a01      	subs	r2, #1
 801c47c:	2300      	movs	r3, #0
 801c47e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c482:	f7ff fe51 	bl	801c128 <__multadd>
 801c486:	4607      	mov	r7, r0
 801c488:	10ad      	asrs	r5, r5, #2
 801c48a:	d03d      	beq.n	801c508 <__pow5mult+0xa0>
 801c48c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801c48e:	b97c      	cbnz	r4, 801c4b0 <__pow5mult+0x48>
 801c490:	2010      	movs	r0, #16
 801c492:	f7ff fdcd 	bl	801c030 <malloc>
 801c496:	4602      	mov	r2, r0
 801c498:	6270      	str	r0, [r6, #36]	; 0x24
 801c49a:	b928      	cbnz	r0, 801c4a8 <__pow5mult+0x40>
 801c49c:	4b1d      	ldr	r3, [pc, #116]	; (801c514 <__pow5mult+0xac>)
 801c49e:	481e      	ldr	r0, [pc, #120]	; (801c518 <__pow5mult+0xb0>)
 801c4a0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801c4a4:	f000 feda 	bl	801d25c <__assert_func>
 801c4a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c4ac:	6004      	str	r4, [r0, #0]
 801c4ae:	60c4      	str	r4, [r0, #12]
 801c4b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801c4b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801c4b8:	b94c      	cbnz	r4, 801c4ce <__pow5mult+0x66>
 801c4ba:	f240 2171 	movw	r1, #625	; 0x271
 801c4be:	4630      	mov	r0, r6
 801c4c0:	f7ff ff12 	bl	801c2e8 <__i2b>
 801c4c4:	2300      	movs	r3, #0
 801c4c6:	f8c8 0008 	str.w	r0, [r8, #8]
 801c4ca:	4604      	mov	r4, r0
 801c4cc:	6003      	str	r3, [r0, #0]
 801c4ce:	f04f 0900 	mov.w	r9, #0
 801c4d2:	07eb      	lsls	r3, r5, #31
 801c4d4:	d50a      	bpl.n	801c4ec <__pow5mult+0x84>
 801c4d6:	4639      	mov	r1, r7
 801c4d8:	4622      	mov	r2, r4
 801c4da:	4630      	mov	r0, r6
 801c4dc:	f7ff ff1a 	bl	801c314 <__multiply>
 801c4e0:	4639      	mov	r1, r7
 801c4e2:	4680      	mov	r8, r0
 801c4e4:	4630      	mov	r0, r6
 801c4e6:	f7ff fdfd 	bl	801c0e4 <_Bfree>
 801c4ea:	4647      	mov	r7, r8
 801c4ec:	106d      	asrs	r5, r5, #1
 801c4ee:	d00b      	beq.n	801c508 <__pow5mult+0xa0>
 801c4f0:	6820      	ldr	r0, [r4, #0]
 801c4f2:	b938      	cbnz	r0, 801c504 <__pow5mult+0x9c>
 801c4f4:	4622      	mov	r2, r4
 801c4f6:	4621      	mov	r1, r4
 801c4f8:	4630      	mov	r0, r6
 801c4fa:	f7ff ff0b 	bl	801c314 <__multiply>
 801c4fe:	6020      	str	r0, [r4, #0]
 801c500:	f8c0 9000 	str.w	r9, [r0]
 801c504:	4604      	mov	r4, r0
 801c506:	e7e4      	b.n	801c4d2 <__pow5mult+0x6a>
 801c508:	4638      	mov	r0, r7
 801c50a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c50e:	bf00      	nop
 801c510:	0801e230 	.word	0x0801e230
 801c514:	0801df7e 	.word	0x0801df7e
 801c518:	0801e0e0 	.word	0x0801e0e0

0801c51c <__lshift>:
 801c51c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c520:	460c      	mov	r4, r1
 801c522:	6849      	ldr	r1, [r1, #4]
 801c524:	6923      	ldr	r3, [r4, #16]
 801c526:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801c52a:	68a3      	ldr	r3, [r4, #8]
 801c52c:	4607      	mov	r7, r0
 801c52e:	4691      	mov	r9, r2
 801c530:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801c534:	f108 0601 	add.w	r6, r8, #1
 801c538:	42b3      	cmp	r3, r6
 801c53a:	db0b      	blt.n	801c554 <__lshift+0x38>
 801c53c:	4638      	mov	r0, r7
 801c53e:	f7ff fd91 	bl	801c064 <_Balloc>
 801c542:	4605      	mov	r5, r0
 801c544:	b948      	cbnz	r0, 801c55a <__lshift+0x3e>
 801c546:	4602      	mov	r2, r0
 801c548:	4b2a      	ldr	r3, [pc, #168]	; (801c5f4 <__lshift+0xd8>)
 801c54a:	482b      	ldr	r0, [pc, #172]	; (801c5f8 <__lshift+0xdc>)
 801c54c:	f240 11d9 	movw	r1, #473	; 0x1d9
 801c550:	f000 fe84 	bl	801d25c <__assert_func>
 801c554:	3101      	adds	r1, #1
 801c556:	005b      	lsls	r3, r3, #1
 801c558:	e7ee      	b.n	801c538 <__lshift+0x1c>
 801c55a:	2300      	movs	r3, #0
 801c55c:	f100 0114 	add.w	r1, r0, #20
 801c560:	f100 0210 	add.w	r2, r0, #16
 801c564:	4618      	mov	r0, r3
 801c566:	4553      	cmp	r3, sl
 801c568:	db37      	blt.n	801c5da <__lshift+0xbe>
 801c56a:	6920      	ldr	r0, [r4, #16]
 801c56c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801c570:	f104 0314 	add.w	r3, r4, #20
 801c574:	f019 091f 	ands.w	r9, r9, #31
 801c578:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801c57c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801c580:	d02f      	beq.n	801c5e2 <__lshift+0xc6>
 801c582:	f1c9 0e20 	rsb	lr, r9, #32
 801c586:	468a      	mov	sl, r1
 801c588:	f04f 0c00 	mov.w	ip, #0
 801c58c:	681a      	ldr	r2, [r3, #0]
 801c58e:	fa02 f209 	lsl.w	r2, r2, r9
 801c592:	ea42 020c 	orr.w	r2, r2, ip
 801c596:	f84a 2b04 	str.w	r2, [sl], #4
 801c59a:	f853 2b04 	ldr.w	r2, [r3], #4
 801c59e:	4298      	cmp	r0, r3
 801c5a0:	fa22 fc0e 	lsr.w	ip, r2, lr
 801c5a4:	d8f2      	bhi.n	801c58c <__lshift+0x70>
 801c5a6:	1b03      	subs	r3, r0, r4
 801c5a8:	3b15      	subs	r3, #21
 801c5aa:	f023 0303 	bic.w	r3, r3, #3
 801c5ae:	3304      	adds	r3, #4
 801c5b0:	f104 0215 	add.w	r2, r4, #21
 801c5b4:	4290      	cmp	r0, r2
 801c5b6:	bf38      	it	cc
 801c5b8:	2304      	movcc	r3, #4
 801c5ba:	f841 c003 	str.w	ip, [r1, r3]
 801c5be:	f1bc 0f00 	cmp.w	ip, #0
 801c5c2:	d001      	beq.n	801c5c8 <__lshift+0xac>
 801c5c4:	f108 0602 	add.w	r6, r8, #2
 801c5c8:	3e01      	subs	r6, #1
 801c5ca:	4638      	mov	r0, r7
 801c5cc:	612e      	str	r6, [r5, #16]
 801c5ce:	4621      	mov	r1, r4
 801c5d0:	f7ff fd88 	bl	801c0e4 <_Bfree>
 801c5d4:	4628      	mov	r0, r5
 801c5d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c5da:	f842 0f04 	str.w	r0, [r2, #4]!
 801c5de:	3301      	adds	r3, #1
 801c5e0:	e7c1      	b.n	801c566 <__lshift+0x4a>
 801c5e2:	3904      	subs	r1, #4
 801c5e4:	f853 2b04 	ldr.w	r2, [r3], #4
 801c5e8:	f841 2f04 	str.w	r2, [r1, #4]!
 801c5ec:	4298      	cmp	r0, r3
 801c5ee:	d8f9      	bhi.n	801c5e4 <__lshift+0xc8>
 801c5f0:	e7ea      	b.n	801c5c8 <__lshift+0xac>
 801c5f2:	bf00      	nop
 801c5f4:	0801dff0 	.word	0x0801dff0
 801c5f8:	0801e0e0 	.word	0x0801e0e0

0801c5fc <__mcmp>:
 801c5fc:	b530      	push	{r4, r5, lr}
 801c5fe:	6902      	ldr	r2, [r0, #16]
 801c600:	690c      	ldr	r4, [r1, #16]
 801c602:	1b12      	subs	r2, r2, r4
 801c604:	d10e      	bne.n	801c624 <__mcmp+0x28>
 801c606:	f100 0314 	add.w	r3, r0, #20
 801c60a:	3114      	adds	r1, #20
 801c60c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801c610:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801c614:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801c618:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801c61c:	42a5      	cmp	r5, r4
 801c61e:	d003      	beq.n	801c628 <__mcmp+0x2c>
 801c620:	d305      	bcc.n	801c62e <__mcmp+0x32>
 801c622:	2201      	movs	r2, #1
 801c624:	4610      	mov	r0, r2
 801c626:	bd30      	pop	{r4, r5, pc}
 801c628:	4283      	cmp	r3, r0
 801c62a:	d3f3      	bcc.n	801c614 <__mcmp+0x18>
 801c62c:	e7fa      	b.n	801c624 <__mcmp+0x28>
 801c62e:	f04f 32ff 	mov.w	r2, #4294967295
 801c632:	e7f7      	b.n	801c624 <__mcmp+0x28>

0801c634 <__mdiff>:
 801c634:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c638:	460c      	mov	r4, r1
 801c63a:	4606      	mov	r6, r0
 801c63c:	4611      	mov	r1, r2
 801c63e:	4620      	mov	r0, r4
 801c640:	4690      	mov	r8, r2
 801c642:	f7ff ffdb 	bl	801c5fc <__mcmp>
 801c646:	1e05      	subs	r5, r0, #0
 801c648:	d110      	bne.n	801c66c <__mdiff+0x38>
 801c64a:	4629      	mov	r1, r5
 801c64c:	4630      	mov	r0, r6
 801c64e:	f7ff fd09 	bl	801c064 <_Balloc>
 801c652:	b930      	cbnz	r0, 801c662 <__mdiff+0x2e>
 801c654:	4b3a      	ldr	r3, [pc, #232]	; (801c740 <__mdiff+0x10c>)
 801c656:	4602      	mov	r2, r0
 801c658:	f240 2132 	movw	r1, #562	; 0x232
 801c65c:	4839      	ldr	r0, [pc, #228]	; (801c744 <__mdiff+0x110>)
 801c65e:	f000 fdfd 	bl	801d25c <__assert_func>
 801c662:	2301      	movs	r3, #1
 801c664:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801c668:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c66c:	bfa4      	itt	ge
 801c66e:	4643      	movge	r3, r8
 801c670:	46a0      	movge	r8, r4
 801c672:	4630      	mov	r0, r6
 801c674:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801c678:	bfa6      	itte	ge
 801c67a:	461c      	movge	r4, r3
 801c67c:	2500      	movge	r5, #0
 801c67e:	2501      	movlt	r5, #1
 801c680:	f7ff fcf0 	bl	801c064 <_Balloc>
 801c684:	b920      	cbnz	r0, 801c690 <__mdiff+0x5c>
 801c686:	4b2e      	ldr	r3, [pc, #184]	; (801c740 <__mdiff+0x10c>)
 801c688:	4602      	mov	r2, r0
 801c68a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801c68e:	e7e5      	b.n	801c65c <__mdiff+0x28>
 801c690:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801c694:	6926      	ldr	r6, [r4, #16]
 801c696:	60c5      	str	r5, [r0, #12]
 801c698:	f104 0914 	add.w	r9, r4, #20
 801c69c:	f108 0514 	add.w	r5, r8, #20
 801c6a0:	f100 0e14 	add.w	lr, r0, #20
 801c6a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801c6a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801c6ac:	f108 0210 	add.w	r2, r8, #16
 801c6b0:	46f2      	mov	sl, lr
 801c6b2:	2100      	movs	r1, #0
 801c6b4:	f859 3b04 	ldr.w	r3, [r9], #4
 801c6b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801c6bc:	fa1f f883 	uxth.w	r8, r3
 801c6c0:	fa11 f18b 	uxtah	r1, r1, fp
 801c6c4:	0c1b      	lsrs	r3, r3, #16
 801c6c6:	eba1 0808 	sub.w	r8, r1, r8
 801c6ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801c6ce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801c6d2:	fa1f f888 	uxth.w	r8, r8
 801c6d6:	1419      	asrs	r1, r3, #16
 801c6d8:	454e      	cmp	r6, r9
 801c6da:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801c6de:	f84a 3b04 	str.w	r3, [sl], #4
 801c6e2:	d8e7      	bhi.n	801c6b4 <__mdiff+0x80>
 801c6e4:	1b33      	subs	r3, r6, r4
 801c6e6:	3b15      	subs	r3, #21
 801c6e8:	f023 0303 	bic.w	r3, r3, #3
 801c6ec:	3304      	adds	r3, #4
 801c6ee:	3415      	adds	r4, #21
 801c6f0:	42a6      	cmp	r6, r4
 801c6f2:	bf38      	it	cc
 801c6f4:	2304      	movcc	r3, #4
 801c6f6:	441d      	add	r5, r3
 801c6f8:	4473      	add	r3, lr
 801c6fa:	469e      	mov	lr, r3
 801c6fc:	462e      	mov	r6, r5
 801c6fe:	4566      	cmp	r6, ip
 801c700:	d30e      	bcc.n	801c720 <__mdiff+0xec>
 801c702:	f10c 0203 	add.w	r2, ip, #3
 801c706:	1b52      	subs	r2, r2, r5
 801c708:	f022 0203 	bic.w	r2, r2, #3
 801c70c:	3d03      	subs	r5, #3
 801c70e:	45ac      	cmp	ip, r5
 801c710:	bf38      	it	cc
 801c712:	2200      	movcc	r2, #0
 801c714:	441a      	add	r2, r3
 801c716:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801c71a:	b17b      	cbz	r3, 801c73c <__mdiff+0x108>
 801c71c:	6107      	str	r7, [r0, #16]
 801c71e:	e7a3      	b.n	801c668 <__mdiff+0x34>
 801c720:	f856 8b04 	ldr.w	r8, [r6], #4
 801c724:	fa11 f288 	uxtah	r2, r1, r8
 801c728:	1414      	asrs	r4, r2, #16
 801c72a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801c72e:	b292      	uxth	r2, r2
 801c730:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801c734:	f84e 2b04 	str.w	r2, [lr], #4
 801c738:	1421      	asrs	r1, r4, #16
 801c73a:	e7e0      	b.n	801c6fe <__mdiff+0xca>
 801c73c:	3f01      	subs	r7, #1
 801c73e:	e7ea      	b.n	801c716 <__mdiff+0xe2>
 801c740:	0801dff0 	.word	0x0801dff0
 801c744:	0801e0e0 	.word	0x0801e0e0

0801c748 <__ulp>:
 801c748:	b082      	sub	sp, #8
 801c74a:	ed8d 0b00 	vstr	d0, [sp]
 801c74e:	9b01      	ldr	r3, [sp, #4]
 801c750:	4912      	ldr	r1, [pc, #72]	; (801c79c <__ulp+0x54>)
 801c752:	4019      	ands	r1, r3
 801c754:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801c758:	2900      	cmp	r1, #0
 801c75a:	dd05      	ble.n	801c768 <__ulp+0x20>
 801c75c:	2200      	movs	r2, #0
 801c75e:	460b      	mov	r3, r1
 801c760:	ec43 2b10 	vmov	d0, r2, r3
 801c764:	b002      	add	sp, #8
 801c766:	4770      	bx	lr
 801c768:	4249      	negs	r1, r1
 801c76a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801c76e:	ea4f 5021 	mov.w	r0, r1, asr #20
 801c772:	f04f 0200 	mov.w	r2, #0
 801c776:	f04f 0300 	mov.w	r3, #0
 801c77a:	da04      	bge.n	801c786 <__ulp+0x3e>
 801c77c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801c780:	fa41 f300 	asr.w	r3, r1, r0
 801c784:	e7ec      	b.n	801c760 <__ulp+0x18>
 801c786:	f1a0 0114 	sub.w	r1, r0, #20
 801c78a:	291e      	cmp	r1, #30
 801c78c:	bfda      	itte	le
 801c78e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801c792:	fa20 f101 	lsrle.w	r1, r0, r1
 801c796:	2101      	movgt	r1, #1
 801c798:	460a      	mov	r2, r1
 801c79a:	e7e1      	b.n	801c760 <__ulp+0x18>
 801c79c:	7ff00000 	.word	0x7ff00000

0801c7a0 <__b2d>:
 801c7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c7a2:	6905      	ldr	r5, [r0, #16]
 801c7a4:	f100 0714 	add.w	r7, r0, #20
 801c7a8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801c7ac:	1f2e      	subs	r6, r5, #4
 801c7ae:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801c7b2:	4620      	mov	r0, r4
 801c7b4:	f7ff fd48 	bl	801c248 <__hi0bits>
 801c7b8:	f1c0 0320 	rsb	r3, r0, #32
 801c7bc:	280a      	cmp	r0, #10
 801c7be:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801c83c <__b2d+0x9c>
 801c7c2:	600b      	str	r3, [r1, #0]
 801c7c4:	dc14      	bgt.n	801c7f0 <__b2d+0x50>
 801c7c6:	f1c0 0e0b 	rsb	lr, r0, #11
 801c7ca:	fa24 f10e 	lsr.w	r1, r4, lr
 801c7ce:	42b7      	cmp	r7, r6
 801c7d0:	ea41 030c 	orr.w	r3, r1, ip
 801c7d4:	bf34      	ite	cc
 801c7d6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801c7da:	2100      	movcs	r1, #0
 801c7dc:	3015      	adds	r0, #21
 801c7de:	fa04 f000 	lsl.w	r0, r4, r0
 801c7e2:	fa21 f10e 	lsr.w	r1, r1, lr
 801c7e6:	ea40 0201 	orr.w	r2, r0, r1
 801c7ea:	ec43 2b10 	vmov	d0, r2, r3
 801c7ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c7f0:	42b7      	cmp	r7, r6
 801c7f2:	bf3a      	itte	cc
 801c7f4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801c7f8:	f1a5 0608 	subcc.w	r6, r5, #8
 801c7fc:	2100      	movcs	r1, #0
 801c7fe:	380b      	subs	r0, #11
 801c800:	d017      	beq.n	801c832 <__b2d+0x92>
 801c802:	f1c0 0c20 	rsb	ip, r0, #32
 801c806:	fa04 f500 	lsl.w	r5, r4, r0
 801c80a:	42be      	cmp	r6, r7
 801c80c:	fa21 f40c 	lsr.w	r4, r1, ip
 801c810:	ea45 0504 	orr.w	r5, r5, r4
 801c814:	bf8c      	ite	hi
 801c816:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801c81a:	2400      	movls	r4, #0
 801c81c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801c820:	fa01 f000 	lsl.w	r0, r1, r0
 801c824:	fa24 f40c 	lsr.w	r4, r4, ip
 801c828:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801c82c:	ea40 0204 	orr.w	r2, r0, r4
 801c830:	e7db      	b.n	801c7ea <__b2d+0x4a>
 801c832:	ea44 030c 	orr.w	r3, r4, ip
 801c836:	460a      	mov	r2, r1
 801c838:	e7d7      	b.n	801c7ea <__b2d+0x4a>
 801c83a:	bf00      	nop
 801c83c:	3ff00000 	.word	0x3ff00000

0801c840 <__d2b>:
 801c840:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c844:	4689      	mov	r9, r1
 801c846:	2101      	movs	r1, #1
 801c848:	ec57 6b10 	vmov	r6, r7, d0
 801c84c:	4690      	mov	r8, r2
 801c84e:	f7ff fc09 	bl	801c064 <_Balloc>
 801c852:	4604      	mov	r4, r0
 801c854:	b930      	cbnz	r0, 801c864 <__d2b+0x24>
 801c856:	4602      	mov	r2, r0
 801c858:	4b25      	ldr	r3, [pc, #148]	; (801c8f0 <__d2b+0xb0>)
 801c85a:	4826      	ldr	r0, [pc, #152]	; (801c8f4 <__d2b+0xb4>)
 801c85c:	f240 310a 	movw	r1, #778	; 0x30a
 801c860:	f000 fcfc 	bl	801d25c <__assert_func>
 801c864:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801c868:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801c86c:	bb35      	cbnz	r5, 801c8bc <__d2b+0x7c>
 801c86e:	2e00      	cmp	r6, #0
 801c870:	9301      	str	r3, [sp, #4]
 801c872:	d028      	beq.n	801c8c6 <__d2b+0x86>
 801c874:	4668      	mov	r0, sp
 801c876:	9600      	str	r6, [sp, #0]
 801c878:	f7ff fd06 	bl	801c288 <__lo0bits>
 801c87c:	9900      	ldr	r1, [sp, #0]
 801c87e:	b300      	cbz	r0, 801c8c2 <__d2b+0x82>
 801c880:	9a01      	ldr	r2, [sp, #4]
 801c882:	f1c0 0320 	rsb	r3, r0, #32
 801c886:	fa02 f303 	lsl.w	r3, r2, r3
 801c88a:	430b      	orrs	r3, r1
 801c88c:	40c2      	lsrs	r2, r0
 801c88e:	6163      	str	r3, [r4, #20]
 801c890:	9201      	str	r2, [sp, #4]
 801c892:	9b01      	ldr	r3, [sp, #4]
 801c894:	61a3      	str	r3, [r4, #24]
 801c896:	2b00      	cmp	r3, #0
 801c898:	bf14      	ite	ne
 801c89a:	2202      	movne	r2, #2
 801c89c:	2201      	moveq	r2, #1
 801c89e:	6122      	str	r2, [r4, #16]
 801c8a0:	b1d5      	cbz	r5, 801c8d8 <__d2b+0x98>
 801c8a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801c8a6:	4405      	add	r5, r0
 801c8a8:	f8c9 5000 	str.w	r5, [r9]
 801c8ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801c8b0:	f8c8 0000 	str.w	r0, [r8]
 801c8b4:	4620      	mov	r0, r4
 801c8b6:	b003      	add	sp, #12
 801c8b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c8bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801c8c0:	e7d5      	b.n	801c86e <__d2b+0x2e>
 801c8c2:	6161      	str	r1, [r4, #20]
 801c8c4:	e7e5      	b.n	801c892 <__d2b+0x52>
 801c8c6:	a801      	add	r0, sp, #4
 801c8c8:	f7ff fcde 	bl	801c288 <__lo0bits>
 801c8cc:	9b01      	ldr	r3, [sp, #4]
 801c8ce:	6163      	str	r3, [r4, #20]
 801c8d0:	2201      	movs	r2, #1
 801c8d2:	6122      	str	r2, [r4, #16]
 801c8d4:	3020      	adds	r0, #32
 801c8d6:	e7e3      	b.n	801c8a0 <__d2b+0x60>
 801c8d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801c8dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801c8e0:	f8c9 0000 	str.w	r0, [r9]
 801c8e4:	6918      	ldr	r0, [r3, #16]
 801c8e6:	f7ff fcaf 	bl	801c248 <__hi0bits>
 801c8ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801c8ee:	e7df      	b.n	801c8b0 <__d2b+0x70>
 801c8f0:	0801dff0 	.word	0x0801dff0
 801c8f4:	0801e0e0 	.word	0x0801e0e0

0801c8f8 <__ratio>:
 801c8f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8fc:	4688      	mov	r8, r1
 801c8fe:	4669      	mov	r1, sp
 801c900:	4681      	mov	r9, r0
 801c902:	f7ff ff4d 	bl	801c7a0 <__b2d>
 801c906:	a901      	add	r1, sp, #4
 801c908:	4640      	mov	r0, r8
 801c90a:	ec55 4b10 	vmov	r4, r5, d0
 801c90e:	f7ff ff47 	bl	801c7a0 <__b2d>
 801c912:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801c916:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801c91a:	eba3 0c02 	sub.w	ip, r3, r2
 801c91e:	e9dd 3200 	ldrd	r3, r2, [sp]
 801c922:	1a9b      	subs	r3, r3, r2
 801c924:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801c928:	ec51 0b10 	vmov	r0, r1, d0
 801c92c:	2b00      	cmp	r3, #0
 801c92e:	bfd6      	itet	le
 801c930:	460a      	movle	r2, r1
 801c932:	462a      	movgt	r2, r5
 801c934:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801c938:	468b      	mov	fp, r1
 801c93a:	462f      	mov	r7, r5
 801c93c:	bfd4      	ite	le
 801c93e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801c942:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801c946:	4620      	mov	r0, r4
 801c948:	ee10 2a10 	vmov	r2, s0
 801c94c:	465b      	mov	r3, fp
 801c94e:	4639      	mov	r1, r7
 801c950:	f7ea ff5c 	bl	800780c <__aeabi_ddiv>
 801c954:	ec41 0b10 	vmov	d0, r0, r1
 801c958:	b003      	add	sp, #12
 801c95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c95e <__copybits>:
 801c95e:	3901      	subs	r1, #1
 801c960:	b570      	push	{r4, r5, r6, lr}
 801c962:	1149      	asrs	r1, r1, #5
 801c964:	6914      	ldr	r4, [r2, #16]
 801c966:	3101      	adds	r1, #1
 801c968:	f102 0314 	add.w	r3, r2, #20
 801c96c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801c970:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801c974:	1f05      	subs	r5, r0, #4
 801c976:	42a3      	cmp	r3, r4
 801c978:	d30c      	bcc.n	801c994 <__copybits+0x36>
 801c97a:	1aa3      	subs	r3, r4, r2
 801c97c:	3b11      	subs	r3, #17
 801c97e:	f023 0303 	bic.w	r3, r3, #3
 801c982:	3211      	adds	r2, #17
 801c984:	42a2      	cmp	r2, r4
 801c986:	bf88      	it	hi
 801c988:	2300      	movhi	r3, #0
 801c98a:	4418      	add	r0, r3
 801c98c:	2300      	movs	r3, #0
 801c98e:	4288      	cmp	r0, r1
 801c990:	d305      	bcc.n	801c99e <__copybits+0x40>
 801c992:	bd70      	pop	{r4, r5, r6, pc}
 801c994:	f853 6b04 	ldr.w	r6, [r3], #4
 801c998:	f845 6f04 	str.w	r6, [r5, #4]!
 801c99c:	e7eb      	b.n	801c976 <__copybits+0x18>
 801c99e:	f840 3b04 	str.w	r3, [r0], #4
 801c9a2:	e7f4      	b.n	801c98e <__copybits+0x30>

0801c9a4 <__any_on>:
 801c9a4:	f100 0214 	add.w	r2, r0, #20
 801c9a8:	6900      	ldr	r0, [r0, #16]
 801c9aa:	114b      	asrs	r3, r1, #5
 801c9ac:	4298      	cmp	r0, r3
 801c9ae:	b510      	push	{r4, lr}
 801c9b0:	db11      	blt.n	801c9d6 <__any_on+0x32>
 801c9b2:	dd0a      	ble.n	801c9ca <__any_on+0x26>
 801c9b4:	f011 011f 	ands.w	r1, r1, #31
 801c9b8:	d007      	beq.n	801c9ca <__any_on+0x26>
 801c9ba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801c9be:	fa24 f001 	lsr.w	r0, r4, r1
 801c9c2:	fa00 f101 	lsl.w	r1, r0, r1
 801c9c6:	428c      	cmp	r4, r1
 801c9c8:	d10b      	bne.n	801c9e2 <__any_on+0x3e>
 801c9ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c9ce:	4293      	cmp	r3, r2
 801c9d0:	d803      	bhi.n	801c9da <__any_on+0x36>
 801c9d2:	2000      	movs	r0, #0
 801c9d4:	bd10      	pop	{r4, pc}
 801c9d6:	4603      	mov	r3, r0
 801c9d8:	e7f7      	b.n	801c9ca <__any_on+0x26>
 801c9da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801c9de:	2900      	cmp	r1, #0
 801c9e0:	d0f5      	beq.n	801c9ce <__any_on+0x2a>
 801c9e2:	2001      	movs	r0, #1
 801c9e4:	e7f6      	b.n	801c9d4 <__any_on+0x30>

0801c9e6 <_calloc_r>:
 801c9e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c9e8:	fba1 2402 	umull	r2, r4, r1, r2
 801c9ec:	b94c      	cbnz	r4, 801ca02 <_calloc_r+0x1c>
 801c9ee:	4611      	mov	r1, r2
 801c9f0:	9201      	str	r2, [sp, #4]
 801c9f2:	f000 f87b 	bl	801caec <_malloc_r>
 801c9f6:	9a01      	ldr	r2, [sp, #4]
 801c9f8:	4605      	mov	r5, r0
 801c9fa:	b930      	cbnz	r0, 801ca0a <_calloc_r+0x24>
 801c9fc:	4628      	mov	r0, r5
 801c9fe:	b003      	add	sp, #12
 801ca00:	bd30      	pop	{r4, r5, pc}
 801ca02:	220c      	movs	r2, #12
 801ca04:	6002      	str	r2, [r0, #0]
 801ca06:	2500      	movs	r5, #0
 801ca08:	e7f8      	b.n	801c9fc <_calloc_r+0x16>
 801ca0a:	4621      	mov	r1, r4
 801ca0c:	f7fc f860 	bl	8018ad0 <memset>
 801ca10:	e7f4      	b.n	801c9fc <_calloc_r+0x16>
	...

0801ca14 <_free_r>:
 801ca14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ca16:	2900      	cmp	r1, #0
 801ca18:	d044      	beq.n	801caa4 <_free_r+0x90>
 801ca1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ca1e:	9001      	str	r0, [sp, #4]
 801ca20:	2b00      	cmp	r3, #0
 801ca22:	f1a1 0404 	sub.w	r4, r1, #4
 801ca26:	bfb8      	it	lt
 801ca28:	18e4      	addlt	r4, r4, r3
 801ca2a:	f000 fca5 	bl	801d378 <__malloc_lock>
 801ca2e:	4a1e      	ldr	r2, [pc, #120]	; (801caa8 <_free_r+0x94>)
 801ca30:	9801      	ldr	r0, [sp, #4]
 801ca32:	6813      	ldr	r3, [r2, #0]
 801ca34:	b933      	cbnz	r3, 801ca44 <_free_r+0x30>
 801ca36:	6063      	str	r3, [r4, #4]
 801ca38:	6014      	str	r4, [r2, #0]
 801ca3a:	b003      	add	sp, #12
 801ca3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ca40:	f000 bca0 	b.w	801d384 <__malloc_unlock>
 801ca44:	42a3      	cmp	r3, r4
 801ca46:	d908      	bls.n	801ca5a <_free_r+0x46>
 801ca48:	6825      	ldr	r5, [r4, #0]
 801ca4a:	1961      	adds	r1, r4, r5
 801ca4c:	428b      	cmp	r3, r1
 801ca4e:	bf01      	itttt	eq
 801ca50:	6819      	ldreq	r1, [r3, #0]
 801ca52:	685b      	ldreq	r3, [r3, #4]
 801ca54:	1949      	addeq	r1, r1, r5
 801ca56:	6021      	streq	r1, [r4, #0]
 801ca58:	e7ed      	b.n	801ca36 <_free_r+0x22>
 801ca5a:	461a      	mov	r2, r3
 801ca5c:	685b      	ldr	r3, [r3, #4]
 801ca5e:	b10b      	cbz	r3, 801ca64 <_free_r+0x50>
 801ca60:	42a3      	cmp	r3, r4
 801ca62:	d9fa      	bls.n	801ca5a <_free_r+0x46>
 801ca64:	6811      	ldr	r1, [r2, #0]
 801ca66:	1855      	adds	r5, r2, r1
 801ca68:	42a5      	cmp	r5, r4
 801ca6a:	d10b      	bne.n	801ca84 <_free_r+0x70>
 801ca6c:	6824      	ldr	r4, [r4, #0]
 801ca6e:	4421      	add	r1, r4
 801ca70:	1854      	adds	r4, r2, r1
 801ca72:	42a3      	cmp	r3, r4
 801ca74:	6011      	str	r1, [r2, #0]
 801ca76:	d1e0      	bne.n	801ca3a <_free_r+0x26>
 801ca78:	681c      	ldr	r4, [r3, #0]
 801ca7a:	685b      	ldr	r3, [r3, #4]
 801ca7c:	6053      	str	r3, [r2, #4]
 801ca7e:	4421      	add	r1, r4
 801ca80:	6011      	str	r1, [r2, #0]
 801ca82:	e7da      	b.n	801ca3a <_free_r+0x26>
 801ca84:	d902      	bls.n	801ca8c <_free_r+0x78>
 801ca86:	230c      	movs	r3, #12
 801ca88:	6003      	str	r3, [r0, #0]
 801ca8a:	e7d6      	b.n	801ca3a <_free_r+0x26>
 801ca8c:	6825      	ldr	r5, [r4, #0]
 801ca8e:	1961      	adds	r1, r4, r5
 801ca90:	428b      	cmp	r3, r1
 801ca92:	bf04      	itt	eq
 801ca94:	6819      	ldreq	r1, [r3, #0]
 801ca96:	685b      	ldreq	r3, [r3, #4]
 801ca98:	6063      	str	r3, [r4, #4]
 801ca9a:	bf04      	itt	eq
 801ca9c:	1949      	addeq	r1, r1, r5
 801ca9e:	6021      	streq	r1, [r4, #0]
 801caa0:	6054      	str	r4, [r2, #4]
 801caa2:	e7ca      	b.n	801ca3a <_free_r+0x26>
 801caa4:	b003      	add	sp, #12
 801caa6:	bd30      	pop	{r4, r5, pc}
 801caa8:	20000a3c 	.word	0x20000a3c

0801caac <sbrk_aligned>:
 801caac:	b570      	push	{r4, r5, r6, lr}
 801caae:	4e0e      	ldr	r6, [pc, #56]	; (801cae8 <sbrk_aligned+0x3c>)
 801cab0:	460c      	mov	r4, r1
 801cab2:	6831      	ldr	r1, [r6, #0]
 801cab4:	4605      	mov	r5, r0
 801cab6:	b911      	cbnz	r1, 801cabe <sbrk_aligned+0x12>
 801cab8:	f000 fb4a 	bl	801d150 <_sbrk_r>
 801cabc:	6030      	str	r0, [r6, #0]
 801cabe:	4621      	mov	r1, r4
 801cac0:	4628      	mov	r0, r5
 801cac2:	f000 fb45 	bl	801d150 <_sbrk_r>
 801cac6:	1c43      	adds	r3, r0, #1
 801cac8:	d00a      	beq.n	801cae0 <sbrk_aligned+0x34>
 801caca:	1cc4      	adds	r4, r0, #3
 801cacc:	f024 0403 	bic.w	r4, r4, #3
 801cad0:	42a0      	cmp	r0, r4
 801cad2:	d007      	beq.n	801cae4 <sbrk_aligned+0x38>
 801cad4:	1a21      	subs	r1, r4, r0
 801cad6:	4628      	mov	r0, r5
 801cad8:	f000 fb3a 	bl	801d150 <_sbrk_r>
 801cadc:	3001      	adds	r0, #1
 801cade:	d101      	bne.n	801cae4 <sbrk_aligned+0x38>
 801cae0:	f04f 34ff 	mov.w	r4, #4294967295
 801cae4:	4620      	mov	r0, r4
 801cae6:	bd70      	pop	{r4, r5, r6, pc}
 801cae8:	20000a40 	.word	0x20000a40

0801caec <_malloc_r>:
 801caec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801caf0:	1ccd      	adds	r5, r1, #3
 801caf2:	f025 0503 	bic.w	r5, r5, #3
 801caf6:	3508      	adds	r5, #8
 801caf8:	2d0c      	cmp	r5, #12
 801cafa:	bf38      	it	cc
 801cafc:	250c      	movcc	r5, #12
 801cafe:	2d00      	cmp	r5, #0
 801cb00:	4607      	mov	r7, r0
 801cb02:	db01      	blt.n	801cb08 <_malloc_r+0x1c>
 801cb04:	42a9      	cmp	r1, r5
 801cb06:	d905      	bls.n	801cb14 <_malloc_r+0x28>
 801cb08:	230c      	movs	r3, #12
 801cb0a:	603b      	str	r3, [r7, #0]
 801cb0c:	2600      	movs	r6, #0
 801cb0e:	4630      	mov	r0, r6
 801cb10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cb14:	4e2e      	ldr	r6, [pc, #184]	; (801cbd0 <_malloc_r+0xe4>)
 801cb16:	f000 fc2f 	bl	801d378 <__malloc_lock>
 801cb1a:	6833      	ldr	r3, [r6, #0]
 801cb1c:	461c      	mov	r4, r3
 801cb1e:	bb34      	cbnz	r4, 801cb6e <_malloc_r+0x82>
 801cb20:	4629      	mov	r1, r5
 801cb22:	4638      	mov	r0, r7
 801cb24:	f7ff ffc2 	bl	801caac <sbrk_aligned>
 801cb28:	1c43      	adds	r3, r0, #1
 801cb2a:	4604      	mov	r4, r0
 801cb2c:	d14d      	bne.n	801cbca <_malloc_r+0xde>
 801cb2e:	6834      	ldr	r4, [r6, #0]
 801cb30:	4626      	mov	r6, r4
 801cb32:	2e00      	cmp	r6, #0
 801cb34:	d140      	bne.n	801cbb8 <_malloc_r+0xcc>
 801cb36:	6823      	ldr	r3, [r4, #0]
 801cb38:	4631      	mov	r1, r6
 801cb3a:	4638      	mov	r0, r7
 801cb3c:	eb04 0803 	add.w	r8, r4, r3
 801cb40:	f000 fb06 	bl	801d150 <_sbrk_r>
 801cb44:	4580      	cmp	r8, r0
 801cb46:	d13a      	bne.n	801cbbe <_malloc_r+0xd2>
 801cb48:	6821      	ldr	r1, [r4, #0]
 801cb4a:	3503      	adds	r5, #3
 801cb4c:	1a6d      	subs	r5, r5, r1
 801cb4e:	f025 0503 	bic.w	r5, r5, #3
 801cb52:	3508      	adds	r5, #8
 801cb54:	2d0c      	cmp	r5, #12
 801cb56:	bf38      	it	cc
 801cb58:	250c      	movcc	r5, #12
 801cb5a:	4629      	mov	r1, r5
 801cb5c:	4638      	mov	r0, r7
 801cb5e:	f7ff ffa5 	bl	801caac <sbrk_aligned>
 801cb62:	3001      	adds	r0, #1
 801cb64:	d02b      	beq.n	801cbbe <_malloc_r+0xd2>
 801cb66:	6823      	ldr	r3, [r4, #0]
 801cb68:	442b      	add	r3, r5
 801cb6a:	6023      	str	r3, [r4, #0]
 801cb6c:	e00e      	b.n	801cb8c <_malloc_r+0xa0>
 801cb6e:	6822      	ldr	r2, [r4, #0]
 801cb70:	1b52      	subs	r2, r2, r5
 801cb72:	d41e      	bmi.n	801cbb2 <_malloc_r+0xc6>
 801cb74:	2a0b      	cmp	r2, #11
 801cb76:	d916      	bls.n	801cba6 <_malloc_r+0xba>
 801cb78:	1961      	adds	r1, r4, r5
 801cb7a:	42a3      	cmp	r3, r4
 801cb7c:	6025      	str	r5, [r4, #0]
 801cb7e:	bf18      	it	ne
 801cb80:	6059      	strne	r1, [r3, #4]
 801cb82:	6863      	ldr	r3, [r4, #4]
 801cb84:	bf08      	it	eq
 801cb86:	6031      	streq	r1, [r6, #0]
 801cb88:	5162      	str	r2, [r4, r5]
 801cb8a:	604b      	str	r3, [r1, #4]
 801cb8c:	4638      	mov	r0, r7
 801cb8e:	f104 060b 	add.w	r6, r4, #11
 801cb92:	f000 fbf7 	bl	801d384 <__malloc_unlock>
 801cb96:	f026 0607 	bic.w	r6, r6, #7
 801cb9a:	1d23      	adds	r3, r4, #4
 801cb9c:	1af2      	subs	r2, r6, r3
 801cb9e:	d0b6      	beq.n	801cb0e <_malloc_r+0x22>
 801cba0:	1b9b      	subs	r3, r3, r6
 801cba2:	50a3      	str	r3, [r4, r2]
 801cba4:	e7b3      	b.n	801cb0e <_malloc_r+0x22>
 801cba6:	6862      	ldr	r2, [r4, #4]
 801cba8:	42a3      	cmp	r3, r4
 801cbaa:	bf0c      	ite	eq
 801cbac:	6032      	streq	r2, [r6, #0]
 801cbae:	605a      	strne	r2, [r3, #4]
 801cbb0:	e7ec      	b.n	801cb8c <_malloc_r+0xa0>
 801cbb2:	4623      	mov	r3, r4
 801cbb4:	6864      	ldr	r4, [r4, #4]
 801cbb6:	e7b2      	b.n	801cb1e <_malloc_r+0x32>
 801cbb8:	4634      	mov	r4, r6
 801cbba:	6876      	ldr	r6, [r6, #4]
 801cbbc:	e7b9      	b.n	801cb32 <_malloc_r+0x46>
 801cbbe:	230c      	movs	r3, #12
 801cbc0:	603b      	str	r3, [r7, #0]
 801cbc2:	4638      	mov	r0, r7
 801cbc4:	f000 fbde 	bl	801d384 <__malloc_unlock>
 801cbc8:	e7a1      	b.n	801cb0e <_malloc_r+0x22>
 801cbca:	6025      	str	r5, [r4, #0]
 801cbcc:	e7de      	b.n	801cb8c <_malloc_r+0xa0>
 801cbce:	bf00      	nop
 801cbd0:	20000a3c 	.word	0x20000a3c

0801cbd4 <__ssputs_r>:
 801cbd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cbd8:	688e      	ldr	r6, [r1, #8]
 801cbda:	429e      	cmp	r6, r3
 801cbdc:	4682      	mov	sl, r0
 801cbde:	460c      	mov	r4, r1
 801cbe0:	4690      	mov	r8, r2
 801cbe2:	461f      	mov	r7, r3
 801cbe4:	d838      	bhi.n	801cc58 <__ssputs_r+0x84>
 801cbe6:	898a      	ldrh	r2, [r1, #12]
 801cbe8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801cbec:	d032      	beq.n	801cc54 <__ssputs_r+0x80>
 801cbee:	6825      	ldr	r5, [r4, #0]
 801cbf0:	6909      	ldr	r1, [r1, #16]
 801cbf2:	eba5 0901 	sub.w	r9, r5, r1
 801cbf6:	6965      	ldr	r5, [r4, #20]
 801cbf8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cbfc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801cc00:	3301      	adds	r3, #1
 801cc02:	444b      	add	r3, r9
 801cc04:	106d      	asrs	r5, r5, #1
 801cc06:	429d      	cmp	r5, r3
 801cc08:	bf38      	it	cc
 801cc0a:	461d      	movcc	r5, r3
 801cc0c:	0553      	lsls	r3, r2, #21
 801cc0e:	d531      	bpl.n	801cc74 <__ssputs_r+0xa0>
 801cc10:	4629      	mov	r1, r5
 801cc12:	f7ff ff6b 	bl	801caec <_malloc_r>
 801cc16:	4606      	mov	r6, r0
 801cc18:	b950      	cbnz	r0, 801cc30 <__ssputs_r+0x5c>
 801cc1a:	230c      	movs	r3, #12
 801cc1c:	f8ca 3000 	str.w	r3, [sl]
 801cc20:	89a3      	ldrh	r3, [r4, #12]
 801cc22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cc26:	81a3      	strh	r3, [r4, #12]
 801cc28:	f04f 30ff 	mov.w	r0, #4294967295
 801cc2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cc30:	6921      	ldr	r1, [r4, #16]
 801cc32:	464a      	mov	r2, r9
 801cc34:	f7fb ff3e 	bl	8018ab4 <memcpy>
 801cc38:	89a3      	ldrh	r3, [r4, #12]
 801cc3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801cc3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cc42:	81a3      	strh	r3, [r4, #12]
 801cc44:	6126      	str	r6, [r4, #16]
 801cc46:	6165      	str	r5, [r4, #20]
 801cc48:	444e      	add	r6, r9
 801cc4a:	eba5 0509 	sub.w	r5, r5, r9
 801cc4e:	6026      	str	r6, [r4, #0]
 801cc50:	60a5      	str	r5, [r4, #8]
 801cc52:	463e      	mov	r6, r7
 801cc54:	42be      	cmp	r6, r7
 801cc56:	d900      	bls.n	801cc5a <__ssputs_r+0x86>
 801cc58:	463e      	mov	r6, r7
 801cc5a:	6820      	ldr	r0, [r4, #0]
 801cc5c:	4632      	mov	r2, r6
 801cc5e:	4641      	mov	r1, r8
 801cc60:	f000 fb70 	bl	801d344 <memmove>
 801cc64:	68a3      	ldr	r3, [r4, #8]
 801cc66:	1b9b      	subs	r3, r3, r6
 801cc68:	60a3      	str	r3, [r4, #8]
 801cc6a:	6823      	ldr	r3, [r4, #0]
 801cc6c:	4433      	add	r3, r6
 801cc6e:	6023      	str	r3, [r4, #0]
 801cc70:	2000      	movs	r0, #0
 801cc72:	e7db      	b.n	801cc2c <__ssputs_r+0x58>
 801cc74:	462a      	mov	r2, r5
 801cc76:	f000 fb8b 	bl	801d390 <_realloc_r>
 801cc7a:	4606      	mov	r6, r0
 801cc7c:	2800      	cmp	r0, #0
 801cc7e:	d1e1      	bne.n	801cc44 <__ssputs_r+0x70>
 801cc80:	6921      	ldr	r1, [r4, #16]
 801cc82:	4650      	mov	r0, sl
 801cc84:	f7ff fec6 	bl	801ca14 <_free_r>
 801cc88:	e7c7      	b.n	801cc1a <__ssputs_r+0x46>
	...

0801cc8c <_svfiprintf_r>:
 801cc8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc90:	4698      	mov	r8, r3
 801cc92:	898b      	ldrh	r3, [r1, #12]
 801cc94:	061b      	lsls	r3, r3, #24
 801cc96:	b09d      	sub	sp, #116	; 0x74
 801cc98:	4607      	mov	r7, r0
 801cc9a:	460d      	mov	r5, r1
 801cc9c:	4614      	mov	r4, r2
 801cc9e:	d50e      	bpl.n	801ccbe <_svfiprintf_r+0x32>
 801cca0:	690b      	ldr	r3, [r1, #16]
 801cca2:	b963      	cbnz	r3, 801ccbe <_svfiprintf_r+0x32>
 801cca4:	2140      	movs	r1, #64	; 0x40
 801cca6:	f7ff ff21 	bl	801caec <_malloc_r>
 801ccaa:	6028      	str	r0, [r5, #0]
 801ccac:	6128      	str	r0, [r5, #16]
 801ccae:	b920      	cbnz	r0, 801ccba <_svfiprintf_r+0x2e>
 801ccb0:	230c      	movs	r3, #12
 801ccb2:	603b      	str	r3, [r7, #0]
 801ccb4:	f04f 30ff 	mov.w	r0, #4294967295
 801ccb8:	e0d1      	b.n	801ce5e <_svfiprintf_r+0x1d2>
 801ccba:	2340      	movs	r3, #64	; 0x40
 801ccbc:	616b      	str	r3, [r5, #20]
 801ccbe:	2300      	movs	r3, #0
 801ccc0:	9309      	str	r3, [sp, #36]	; 0x24
 801ccc2:	2320      	movs	r3, #32
 801ccc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ccc8:	f8cd 800c 	str.w	r8, [sp, #12]
 801cccc:	2330      	movs	r3, #48	; 0x30
 801ccce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801ce78 <_svfiprintf_r+0x1ec>
 801ccd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ccd6:	f04f 0901 	mov.w	r9, #1
 801ccda:	4623      	mov	r3, r4
 801ccdc:	469a      	mov	sl, r3
 801ccde:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cce2:	b10a      	cbz	r2, 801cce8 <_svfiprintf_r+0x5c>
 801cce4:	2a25      	cmp	r2, #37	; 0x25
 801cce6:	d1f9      	bne.n	801ccdc <_svfiprintf_r+0x50>
 801cce8:	ebba 0b04 	subs.w	fp, sl, r4
 801ccec:	d00b      	beq.n	801cd06 <_svfiprintf_r+0x7a>
 801ccee:	465b      	mov	r3, fp
 801ccf0:	4622      	mov	r2, r4
 801ccf2:	4629      	mov	r1, r5
 801ccf4:	4638      	mov	r0, r7
 801ccf6:	f7ff ff6d 	bl	801cbd4 <__ssputs_r>
 801ccfa:	3001      	adds	r0, #1
 801ccfc:	f000 80aa 	beq.w	801ce54 <_svfiprintf_r+0x1c8>
 801cd00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cd02:	445a      	add	r2, fp
 801cd04:	9209      	str	r2, [sp, #36]	; 0x24
 801cd06:	f89a 3000 	ldrb.w	r3, [sl]
 801cd0a:	2b00      	cmp	r3, #0
 801cd0c:	f000 80a2 	beq.w	801ce54 <_svfiprintf_r+0x1c8>
 801cd10:	2300      	movs	r3, #0
 801cd12:	f04f 32ff 	mov.w	r2, #4294967295
 801cd16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cd1a:	f10a 0a01 	add.w	sl, sl, #1
 801cd1e:	9304      	str	r3, [sp, #16]
 801cd20:	9307      	str	r3, [sp, #28]
 801cd22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801cd26:	931a      	str	r3, [sp, #104]	; 0x68
 801cd28:	4654      	mov	r4, sl
 801cd2a:	2205      	movs	r2, #5
 801cd2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cd30:	4851      	ldr	r0, [pc, #324]	; (801ce78 <_svfiprintf_r+0x1ec>)
 801cd32:	f7ea fa35 	bl	80071a0 <memchr>
 801cd36:	9a04      	ldr	r2, [sp, #16]
 801cd38:	b9d8      	cbnz	r0, 801cd72 <_svfiprintf_r+0xe6>
 801cd3a:	06d0      	lsls	r0, r2, #27
 801cd3c:	bf44      	itt	mi
 801cd3e:	2320      	movmi	r3, #32
 801cd40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cd44:	0711      	lsls	r1, r2, #28
 801cd46:	bf44      	itt	mi
 801cd48:	232b      	movmi	r3, #43	; 0x2b
 801cd4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cd4e:	f89a 3000 	ldrb.w	r3, [sl]
 801cd52:	2b2a      	cmp	r3, #42	; 0x2a
 801cd54:	d015      	beq.n	801cd82 <_svfiprintf_r+0xf6>
 801cd56:	9a07      	ldr	r2, [sp, #28]
 801cd58:	4654      	mov	r4, sl
 801cd5a:	2000      	movs	r0, #0
 801cd5c:	f04f 0c0a 	mov.w	ip, #10
 801cd60:	4621      	mov	r1, r4
 801cd62:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cd66:	3b30      	subs	r3, #48	; 0x30
 801cd68:	2b09      	cmp	r3, #9
 801cd6a:	d94e      	bls.n	801ce0a <_svfiprintf_r+0x17e>
 801cd6c:	b1b0      	cbz	r0, 801cd9c <_svfiprintf_r+0x110>
 801cd6e:	9207      	str	r2, [sp, #28]
 801cd70:	e014      	b.n	801cd9c <_svfiprintf_r+0x110>
 801cd72:	eba0 0308 	sub.w	r3, r0, r8
 801cd76:	fa09 f303 	lsl.w	r3, r9, r3
 801cd7a:	4313      	orrs	r3, r2
 801cd7c:	9304      	str	r3, [sp, #16]
 801cd7e:	46a2      	mov	sl, r4
 801cd80:	e7d2      	b.n	801cd28 <_svfiprintf_r+0x9c>
 801cd82:	9b03      	ldr	r3, [sp, #12]
 801cd84:	1d19      	adds	r1, r3, #4
 801cd86:	681b      	ldr	r3, [r3, #0]
 801cd88:	9103      	str	r1, [sp, #12]
 801cd8a:	2b00      	cmp	r3, #0
 801cd8c:	bfbb      	ittet	lt
 801cd8e:	425b      	neglt	r3, r3
 801cd90:	f042 0202 	orrlt.w	r2, r2, #2
 801cd94:	9307      	strge	r3, [sp, #28]
 801cd96:	9307      	strlt	r3, [sp, #28]
 801cd98:	bfb8      	it	lt
 801cd9a:	9204      	strlt	r2, [sp, #16]
 801cd9c:	7823      	ldrb	r3, [r4, #0]
 801cd9e:	2b2e      	cmp	r3, #46	; 0x2e
 801cda0:	d10c      	bne.n	801cdbc <_svfiprintf_r+0x130>
 801cda2:	7863      	ldrb	r3, [r4, #1]
 801cda4:	2b2a      	cmp	r3, #42	; 0x2a
 801cda6:	d135      	bne.n	801ce14 <_svfiprintf_r+0x188>
 801cda8:	9b03      	ldr	r3, [sp, #12]
 801cdaa:	1d1a      	adds	r2, r3, #4
 801cdac:	681b      	ldr	r3, [r3, #0]
 801cdae:	9203      	str	r2, [sp, #12]
 801cdb0:	2b00      	cmp	r3, #0
 801cdb2:	bfb8      	it	lt
 801cdb4:	f04f 33ff 	movlt.w	r3, #4294967295
 801cdb8:	3402      	adds	r4, #2
 801cdba:	9305      	str	r3, [sp, #20]
 801cdbc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801ce88 <_svfiprintf_r+0x1fc>
 801cdc0:	7821      	ldrb	r1, [r4, #0]
 801cdc2:	2203      	movs	r2, #3
 801cdc4:	4650      	mov	r0, sl
 801cdc6:	f7ea f9eb 	bl	80071a0 <memchr>
 801cdca:	b140      	cbz	r0, 801cdde <_svfiprintf_r+0x152>
 801cdcc:	2340      	movs	r3, #64	; 0x40
 801cdce:	eba0 000a 	sub.w	r0, r0, sl
 801cdd2:	fa03 f000 	lsl.w	r0, r3, r0
 801cdd6:	9b04      	ldr	r3, [sp, #16]
 801cdd8:	4303      	orrs	r3, r0
 801cdda:	3401      	adds	r4, #1
 801cddc:	9304      	str	r3, [sp, #16]
 801cdde:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cde2:	4826      	ldr	r0, [pc, #152]	; (801ce7c <_svfiprintf_r+0x1f0>)
 801cde4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801cde8:	2206      	movs	r2, #6
 801cdea:	f7ea f9d9 	bl	80071a0 <memchr>
 801cdee:	2800      	cmp	r0, #0
 801cdf0:	d038      	beq.n	801ce64 <_svfiprintf_r+0x1d8>
 801cdf2:	4b23      	ldr	r3, [pc, #140]	; (801ce80 <_svfiprintf_r+0x1f4>)
 801cdf4:	bb1b      	cbnz	r3, 801ce3e <_svfiprintf_r+0x1b2>
 801cdf6:	9b03      	ldr	r3, [sp, #12]
 801cdf8:	3307      	adds	r3, #7
 801cdfa:	f023 0307 	bic.w	r3, r3, #7
 801cdfe:	3308      	adds	r3, #8
 801ce00:	9303      	str	r3, [sp, #12]
 801ce02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce04:	4433      	add	r3, r6
 801ce06:	9309      	str	r3, [sp, #36]	; 0x24
 801ce08:	e767      	b.n	801ccda <_svfiprintf_r+0x4e>
 801ce0a:	fb0c 3202 	mla	r2, ip, r2, r3
 801ce0e:	460c      	mov	r4, r1
 801ce10:	2001      	movs	r0, #1
 801ce12:	e7a5      	b.n	801cd60 <_svfiprintf_r+0xd4>
 801ce14:	2300      	movs	r3, #0
 801ce16:	3401      	adds	r4, #1
 801ce18:	9305      	str	r3, [sp, #20]
 801ce1a:	4619      	mov	r1, r3
 801ce1c:	f04f 0c0a 	mov.w	ip, #10
 801ce20:	4620      	mov	r0, r4
 801ce22:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ce26:	3a30      	subs	r2, #48	; 0x30
 801ce28:	2a09      	cmp	r2, #9
 801ce2a:	d903      	bls.n	801ce34 <_svfiprintf_r+0x1a8>
 801ce2c:	2b00      	cmp	r3, #0
 801ce2e:	d0c5      	beq.n	801cdbc <_svfiprintf_r+0x130>
 801ce30:	9105      	str	r1, [sp, #20]
 801ce32:	e7c3      	b.n	801cdbc <_svfiprintf_r+0x130>
 801ce34:	fb0c 2101 	mla	r1, ip, r1, r2
 801ce38:	4604      	mov	r4, r0
 801ce3a:	2301      	movs	r3, #1
 801ce3c:	e7f0      	b.n	801ce20 <_svfiprintf_r+0x194>
 801ce3e:	ab03      	add	r3, sp, #12
 801ce40:	9300      	str	r3, [sp, #0]
 801ce42:	462a      	mov	r2, r5
 801ce44:	4b0f      	ldr	r3, [pc, #60]	; (801ce84 <_svfiprintf_r+0x1f8>)
 801ce46:	a904      	add	r1, sp, #16
 801ce48:	4638      	mov	r0, r7
 801ce4a:	f7fb fee9 	bl	8018c20 <_printf_float>
 801ce4e:	1c42      	adds	r2, r0, #1
 801ce50:	4606      	mov	r6, r0
 801ce52:	d1d6      	bne.n	801ce02 <_svfiprintf_r+0x176>
 801ce54:	89ab      	ldrh	r3, [r5, #12]
 801ce56:	065b      	lsls	r3, r3, #25
 801ce58:	f53f af2c 	bmi.w	801ccb4 <_svfiprintf_r+0x28>
 801ce5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ce5e:	b01d      	add	sp, #116	; 0x74
 801ce60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce64:	ab03      	add	r3, sp, #12
 801ce66:	9300      	str	r3, [sp, #0]
 801ce68:	462a      	mov	r2, r5
 801ce6a:	4b06      	ldr	r3, [pc, #24]	; (801ce84 <_svfiprintf_r+0x1f8>)
 801ce6c:	a904      	add	r1, sp, #16
 801ce6e:	4638      	mov	r0, r7
 801ce70:	f7fc f97a 	bl	8019168 <_printf_i>
 801ce74:	e7eb      	b.n	801ce4e <_svfiprintf_r+0x1c2>
 801ce76:	bf00      	nop
 801ce78:	0801e23c 	.word	0x0801e23c
 801ce7c:	0801e246 	.word	0x0801e246
 801ce80:	08018c21 	.word	0x08018c21
 801ce84:	0801cbd5 	.word	0x0801cbd5
 801ce88:	0801e242 	.word	0x0801e242

0801ce8c <__sfputc_r>:
 801ce8c:	6893      	ldr	r3, [r2, #8]
 801ce8e:	3b01      	subs	r3, #1
 801ce90:	2b00      	cmp	r3, #0
 801ce92:	b410      	push	{r4}
 801ce94:	6093      	str	r3, [r2, #8]
 801ce96:	da08      	bge.n	801ceaa <__sfputc_r+0x1e>
 801ce98:	6994      	ldr	r4, [r2, #24]
 801ce9a:	42a3      	cmp	r3, r4
 801ce9c:	db01      	blt.n	801cea2 <__sfputc_r+0x16>
 801ce9e:	290a      	cmp	r1, #10
 801cea0:	d103      	bne.n	801ceaa <__sfputc_r+0x1e>
 801cea2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cea6:	f7fd bbf7 	b.w	801a698 <__swbuf_r>
 801ceaa:	6813      	ldr	r3, [r2, #0]
 801ceac:	1c58      	adds	r0, r3, #1
 801ceae:	6010      	str	r0, [r2, #0]
 801ceb0:	7019      	strb	r1, [r3, #0]
 801ceb2:	4608      	mov	r0, r1
 801ceb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ceb8:	4770      	bx	lr

0801ceba <__sfputs_r>:
 801ceba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cebc:	4606      	mov	r6, r0
 801cebe:	460f      	mov	r7, r1
 801cec0:	4614      	mov	r4, r2
 801cec2:	18d5      	adds	r5, r2, r3
 801cec4:	42ac      	cmp	r4, r5
 801cec6:	d101      	bne.n	801cecc <__sfputs_r+0x12>
 801cec8:	2000      	movs	r0, #0
 801ceca:	e007      	b.n	801cedc <__sfputs_r+0x22>
 801cecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ced0:	463a      	mov	r2, r7
 801ced2:	4630      	mov	r0, r6
 801ced4:	f7ff ffda 	bl	801ce8c <__sfputc_r>
 801ced8:	1c43      	adds	r3, r0, #1
 801ceda:	d1f3      	bne.n	801cec4 <__sfputs_r+0xa>
 801cedc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801cee0 <_vfiprintf_r>:
 801cee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cee4:	460d      	mov	r5, r1
 801cee6:	b09d      	sub	sp, #116	; 0x74
 801cee8:	4614      	mov	r4, r2
 801ceea:	4698      	mov	r8, r3
 801ceec:	4606      	mov	r6, r0
 801ceee:	b118      	cbz	r0, 801cef8 <_vfiprintf_r+0x18>
 801cef0:	6983      	ldr	r3, [r0, #24]
 801cef2:	b90b      	cbnz	r3, 801cef8 <_vfiprintf_r+0x18>
 801cef4:	f7fe fc24 	bl	801b740 <__sinit>
 801cef8:	4b89      	ldr	r3, [pc, #548]	; (801d120 <_vfiprintf_r+0x240>)
 801cefa:	429d      	cmp	r5, r3
 801cefc:	d11b      	bne.n	801cf36 <_vfiprintf_r+0x56>
 801cefe:	6875      	ldr	r5, [r6, #4]
 801cf00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801cf02:	07d9      	lsls	r1, r3, #31
 801cf04:	d405      	bmi.n	801cf12 <_vfiprintf_r+0x32>
 801cf06:	89ab      	ldrh	r3, [r5, #12]
 801cf08:	059a      	lsls	r2, r3, #22
 801cf0a:	d402      	bmi.n	801cf12 <_vfiprintf_r+0x32>
 801cf0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801cf0e:	f7ff f828 	bl	801bf62 <__retarget_lock_acquire_recursive>
 801cf12:	89ab      	ldrh	r3, [r5, #12]
 801cf14:	071b      	lsls	r3, r3, #28
 801cf16:	d501      	bpl.n	801cf1c <_vfiprintf_r+0x3c>
 801cf18:	692b      	ldr	r3, [r5, #16]
 801cf1a:	b9eb      	cbnz	r3, 801cf58 <_vfiprintf_r+0x78>
 801cf1c:	4629      	mov	r1, r5
 801cf1e:	4630      	mov	r0, r6
 801cf20:	f7fd fc0c 	bl	801a73c <__swsetup_r>
 801cf24:	b1c0      	cbz	r0, 801cf58 <_vfiprintf_r+0x78>
 801cf26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801cf28:	07dc      	lsls	r4, r3, #31
 801cf2a:	d50e      	bpl.n	801cf4a <_vfiprintf_r+0x6a>
 801cf2c:	f04f 30ff 	mov.w	r0, #4294967295
 801cf30:	b01d      	add	sp, #116	; 0x74
 801cf32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf36:	4b7b      	ldr	r3, [pc, #492]	; (801d124 <_vfiprintf_r+0x244>)
 801cf38:	429d      	cmp	r5, r3
 801cf3a:	d101      	bne.n	801cf40 <_vfiprintf_r+0x60>
 801cf3c:	68b5      	ldr	r5, [r6, #8]
 801cf3e:	e7df      	b.n	801cf00 <_vfiprintf_r+0x20>
 801cf40:	4b79      	ldr	r3, [pc, #484]	; (801d128 <_vfiprintf_r+0x248>)
 801cf42:	429d      	cmp	r5, r3
 801cf44:	bf08      	it	eq
 801cf46:	68f5      	ldreq	r5, [r6, #12]
 801cf48:	e7da      	b.n	801cf00 <_vfiprintf_r+0x20>
 801cf4a:	89ab      	ldrh	r3, [r5, #12]
 801cf4c:	0598      	lsls	r0, r3, #22
 801cf4e:	d4ed      	bmi.n	801cf2c <_vfiprintf_r+0x4c>
 801cf50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801cf52:	f7ff f807 	bl	801bf64 <__retarget_lock_release_recursive>
 801cf56:	e7e9      	b.n	801cf2c <_vfiprintf_r+0x4c>
 801cf58:	2300      	movs	r3, #0
 801cf5a:	9309      	str	r3, [sp, #36]	; 0x24
 801cf5c:	2320      	movs	r3, #32
 801cf5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801cf62:	f8cd 800c 	str.w	r8, [sp, #12]
 801cf66:	2330      	movs	r3, #48	; 0x30
 801cf68:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801d12c <_vfiprintf_r+0x24c>
 801cf6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801cf70:	f04f 0901 	mov.w	r9, #1
 801cf74:	4623      	mov	r3, r4
 801cf76:	469a      	mov	sl, r3
 801cf78:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cf7c:	b10a      	cbz	r2, 801cf82 <_vfiprintf_r+0xa2>
 801cf7e:	2a25      	cmp	r2, #37	; 0x25
 801cf80:	d1f9      	bne.n	801cf76 <_vfiprintf_r+0x96>
 801cf82:	ebba 0b04 	subs.w	fp, sl, r4
 801cf86:	d00b      	beq.n	801cfa0 <_vfiprintf_r+0xc0>
 801cf88:	465b      	mov	r3, fp
 801cf8a:	4622      	mov	r2, r4
 801cf8c:	4629      	mov	r1, r5
 801cf8e:	4630      	mov	r0, r6
 801cf90:	f7ff ff93 	bl	801ceba <__sfputs_r>
 801cf94:	3001      	adds	r0, #1
 801cf96:	f000 80aa 	beq.w	801d0ee <_vfiprintf_r+0x20e>
 801cf9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cf9c:	445a      	add	r2, fp
 801cf9e:	9209      	str	r2, [sp, #36]	; 0x24
 801cfa0:	f89a 3000 	ldrb.w	r3, [sl]
 801cfa4:	2b00      	cmp	r3, #0
 801cfa6:	f000 80a2 	beq.w	801d0ee <_vfiprintf_r+0x20e>
 801cfaa:	2300      	movs	r3, #0
 801cfac:	f04f 32ff 	mov.w	r2, #4294967295
 801cfb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cfb4:	f10a 0a01 	add.w	sl, sl, #1
 801cfb8:	9304      	str	r3, [sp, #16]
 801cfba:	9307      	str	r3, [sp, #28]
 801cfbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801cfc0:	931a      	str	r3, [sp, #104]	; 0x68
 801cfc2:	4654      	mov	r4, sl
 801cfc4:	2205      	movs	r2, #5
 801cfc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cfca:	4858      	ldr	r0, [pc, #352]	; (801d12c <_vfiprintf_r+0x24c>)
 801cfcc:	f7ea f8e8 	bl	80071a0 <memchr>
 801cfd0:	9a04      	ldr	r2, [sp, #16]
 801cfd2:	b9d8      	cbnz	r0, 801d00c <_vfiprintf_r+0x12c>
 801cfd4:	06d1      	lsls	r1, r2, #27
 801cfd6:	bf44      	itt	mi
 801cfd8:	2320      	movmi	r3, #32
 801cfda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cfde:	0713      	lsls	r3, r2, #28
 801cfe0:	bf44      	itt	mi
 801cfe2:	232b      	movmi	r3, #43	; 0x2b
 801cfe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cfe8:	f89a 3000 	ldrb.w	r3, [sl]
 801cfec:	2b2a      	cmp	r3, #42	; 0x2a
 801cfee:	d015      	beq.n	801d01c <_vfiprintf_r+0x13c>
 801cff0:	9a07      	ldr	r2, [sp, #28]
 801cff2:	4654      	mov	r4, sl
 801cff4:	2000      	movs	r0, #0
 801cff6:	f04f 0c0a 	mov.w	ip, #10
 801cffa:	4621      	mov	r1, r4
 801cffc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d000:	3b30      	subs	r3, #48	; 0x30
 801d002:	2b09      	cmp	r3, #9
 801d004:	d94e      	bls.n	801d0a4 <_vfiprintf_r+0x1c4>
 801d006:	b1b0      	cbz	r0, 801d036 <_vfiprintf_r+0x156>
 801d008:	9207      	str	r2, [sp, #28]
 801d00a:	e014      	b.n	801d036 <_vfiprintf_r+0x156>
 801d00c:	eba0 0308 	sub.w	r3, r0, r8
 801d010:	fa09 f303 	lsl.w	r3, r9, r3
 801d014:	4313      	orrs	r3, r2
 801d016:	9304      	str	r3, [sp, #16]
 801d018:	46a2      	mov	sl, r4
 801d01a:	e7d2      	b.n	801cfc2 <_vfiprintf_r+0xe2>
 801d01c:	9b03      	ldr	r3, [sp, #12]
 801d01e:	1d19      	adds	r1, r3, #4
 801d020:	681b      	ldr	r3, [r3, #0]
 801d022:	9103      	str	r1, [sp, #12]
 801d024:	2b00      	cmp	r3, #0
 801d026:	bfbb      	ittet	lt
 801d028:	425b      	neglt	r3, r3
 801d02a:	f042 0202 	orrlt.w	r2, r2, #2
 801d02e:	9307      	strge	r3, [sp, #28]
 801d030:	9307      	strlt	r3, [sp, #28]
 801d032:	bfb8      	it	lt
 801d034:	9204      	strlt	r2, [sp, #16]
 801d036:	7823      	ldrb	r3, [r4, #0]
 801d038:	2b2e      	cmp	r3, #46	; 0x2e
 801d03a:	d10c      	bne.n	801d056 <_vfiprintf_r+0x176>
 801d03c:	7863      	ldrb	r3, [r4, #1]
 801d03e:	2b2a      	cmp	r3, #42	; 0x2a
 801d040:	d135      	bne.n	801d0ae <_vfiprintf_r+0x1ce>
 801d042:	9b03      	ldr	r3, [sp, #12]
 801d044:	1d1a      	adds	r2, r3, #4
 801d046:	681b      	ldr	r3, [r3, #0]
 801d048:	9203      	str	r2, [sp, #12]
 801d04a:	2b00      	cmp	r3, #0
 801d04c:	bfb8      	it	lt
 801d04e:	f04f 33ff 	movlt.w	r3, #4294967295
 801d052:	3402      	adds	r4, #2
 801d054:	9305      	str	r3, [sp, #20]
 801d056:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801d13c <_vfiprintf_r+0x25c>
 801d05a:	7821      	ldrb	r1, [r4, #0]
 801d05c:	2203      	movs	r2, #3
 801d05e:	4650      	mov	r0, sl
 801d060:	f7ea f89e 	bl	80071a0 <memchr>
 801d064:	b140      	cbz	r0, 801d078 <_vfiprintf_r+0x198>
 801d066:	2340      	movs	r3, #64	; 0x40
 801d068:	eba0 000a 	sub.w	r0, r0, sl
 801d06c:	fa03 f000 	lsl.w	r0, r3, r0
 801d070:	9b04      	ldr	r3, [sp, #16]
 801d072:	4303      	orrs	r3, r0
 801d074:	3401      	adds	r4, #1
 801d076:	9304      	str	r3, [sp, #16]
 801d078:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d07c:	482c      	ldr	r0, [pc, #176]	; (801d130 <_vfiprintf_r+0x250>)
 801d07e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d082:	2206      	movs	r2, #6
 801d084:	f7ea f88c 	bl	80071a0 <memchr>
 801d088:	2800      	cmp	r0, #0
 801d08a:	d03f      	beq.n	801d10c <_vfiprintf_r+0x22c>
 801d08c:	4b29      	ldr	r3, [pc, #164]	; (801d134 <_vfiprintf_r+0x254>)
 801d08e:	bb1b      	cbnz	r3, 801d0d8 <_vfiprintf_r+0x1f8>
 801d090:	9b03      	ldr	r3, [sp, #12]
 801d092:	3307      	adds	r3, #7
 801d094:	f023 0307 	bic.w	r3, r3, #7
 801d098:	3308      	adds	r3, #8
 801d09a:	9303      	str	r3, [sp, #12]
 801d09c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d09e:	443b      	add	r3, r7
 801d0a0:	9309      	str	r3, [sp, #36]	; 0x24
 801d0a2:	e767      	b.n	801cf74 <_vfiprintf_r+0x94>
 801d0a4:	fb0c 3202 	mla	r2, ip, r2, r3
 801d0a8:	460c      	mov	r4, r1
 801d0aa:	2001      	movs	r0, #1
 801d0ac:	e7a5      	b.n	801cffa <_vfiprintf_r+0x11a>
 801d0ae:	2300      	movs	r3, #0
 801d0b0:	3401      	adds	r4, #1
 801d0b2:	9305      	str	r3, [sp, #20]
 801d0b4:	4619      	mov	r1, r3
 801d0b6:	f04f 0c0a 	mov.w	ip, #10
 801d0ba:	4620      	mov	r0, r4
 801d0bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d0c0:	3a30      	subs	r2, #48	; 0x30
 801d0c2:	2a09      	cmp	r2, #9
 801d0c4:	d903      	bls.n	801d0ce <_vfiprintf_r+0x1ee>
 801d0c6:	2b00      	cmp	r3, #0
 801d0c8:	d0c5      	beq.n	801d056 <_vfiprintf_r+0x176>
 801d0ca:	9105      	str	r1, [sp, #20]
 801d0cc:	e7c3      	b.n	801d056 <_vfiprintf_r+0x176>
 801d0ce:	fb0c 2101 	mla	r1, ip, r1, r2
 801d0d2:	4604      	mov	r4, r0
 801d0d4:	2301      	movs	r3, #1
 801d0d6:	e7f0      	b.n	801d0ba <_vfiprintf_r+0x1da>
 801d0d8:	ab03      	add	r3, sp, #12
 801d0da:	9300      	str	r3, [sp, #0]
 801d0dc:	462a      	mov	r2, r5
 801d0de:	4b16      	ldr	r3, [pc, #88]	; (801d138 <_vfiprintf_r+0x258>)
 801d0e0:	a904      	add	r1, sp, #16
 801d0e2:	4630      	mov	r0, r6
 801d0e4:	f7fb fd9c 	bl	8018c20 <_printf_float>
 801d0e8:	4607      	mov	r7, r0
 801d0ea:	1c78      	adds	r0, r7, #1
 801d0ec:	d1d6      	bne.n	801d09c <_vfiprintf_r+0x1bc>
 801d0ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d0f0:	07d9      	lsls	r1, r3, #31
 801d0f2:	d405      	bmi.n	801d100 <_vfiprintf_r+0x220>
 801d0f4:	89ab      	ldrh	r3, [r5, #12]
 801d0f6:	059a      	lsls	r2, r3, #22
 801d0f8:	d402      	bmi.n	801d100 <_vfiprintf_r+0x220>
 801d0fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d0fc:	f7fe ff32 	bl	801bf64 <__retarget_lock_release_recursive>
 801d100:	89ab      	ldrh	r3, [r5, #12]
 801d102:	065b      	lsls	r3, r3, #25
 801d104:	f53f af12 	bmi.w	801cf2c <_vfiprintf_r+0x4c>
 801d108:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d10a:	e711      	b.n	801cf30 <_vfiprintf_r+0x50>
 801d10c:	ab03      	add	r3, sp, #12
 801d10e:	9300      	str	r3, [sp, #0]
 801d110:	462a      	mov	r2, r5
 801d112:	4b09      	ldr	r3, [pc, #36]	; (801d138 <_vfiprintf_r+0x258>)
 801d114:	a904      	add	r1, sp, #16
 801d116:	4630      	mov	r0, r6
 801d118:	f7fc f826 	bl	8019168 <_printf_i>
 801d11c:	e7e4      	b.n	801d0e8 <_vfiprintf_r+0x208>
 801d11e:	bf00      	nop
 801d120:	0801e024 	.word	0x0801e024
 801d124:	0801e044 	.word	0x0801e044
 801d128:	0801e004 	.word	0x0801e004
 801d12c:	0801e23c 	.word	0x0801e23c
 801d130:	0801e246 	.word	0x0801e246
 801d134:	08018c21 	.word	0x08018c21
 801d138:	0801cebb 	.word	0x0801cebb
 801d13c:	0801e242 	.word	0x0801e242

0801d140 <nan>:
 801d140:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801d148 <nan+0x8>
 801d144:	4770      	bx	lr
 801d146:	bf00      	nop
 801d148:	00000000 	.word	0x00000000
 801d14c:	7ff80000 	.word	0x7ff80000

0801d150 <_sbrk_r>:
 801d150:	b538      	push	{r3, r4, r5, lr}
 801d152:	4d06      	ldr	r5, [pc, #24]	; (801d16c <_sbrk_r+0x1c>)
 801d154:	2300      	movs	r3, #0
 801d156:	4604      	mov	r4, r0
 801d158:	4608      	mov	r0, r1
 801d15a:	602b      	str	r3, [r5, #0]
 801d15c:	f7ee fe5a 	bl	800be14 <_sbrk>
 801d160:	1c43      	adds	r3, r0, #1
 801d162:	d102      	bne.n	801d16a <_sbrk_r+0x1a>
 801d164:	682b      	ldr	r3, [r5, #0]
 801d166:	b103      	cbz	r3, 801d16a <_sbrk_r+0x1a>
 801d168:	6023      	str	r3, [r4, #0]
 801d16a:	bd38      	pop	{r3, r4, r5, pc}
 801d16c:	20000a44 	.word	0x20000a44

0801d170 <__sread>:
 801d170:	b510      	push	{r4, lr}
 801d172:	460c      	mov	r4, r1
 801d174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d178:	f000 f93a 	bl	801d3f0 <_read_r>
 801d17c:	2800      	cmp	r0, #0
 801d17e:	bfab      	itete	ge
 801d180:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d182:	89a3      	ldrhlt	r3, [r4, #12]
 801d184:	181b      	addge	r3, r3, r0
 801d186:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d18a:	bfac      	ite	ge
 801d18c:	6563      	strge	r3, [r4, #84]	; 0x54
 801d18e:	81a3      	strhlt	r3, [r4, #12]
 801d190:	bd10      	pop	{r4, pc}

0801d192 <__swrite>:
 801d192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d196:	461f      	mov	r7, r3
 801d198:	898b      	ldrh	r3, [r1, #12]
 801d19a:	05db      	lsls	r3, r3, #23
 801d19c:	4605      	mov	r5, r0
 801d19e:	460c      	mov	r4, r1
 801d1a0:	4616      	mov	r6, r2
 801d1a2:	d505      	bpl.n	801d1b0 <__swrite+0x1e>
 801d1a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d1a8:	2302      	movs	r3, #2
 801d1aa:	2200      	movs	r2, #0
 801d1ac:	f000 f8b8 	bl	801d320 <_lseek_r>
 801d1b0:	89a3      	ldrh	r3, [r4, #12]
 801d1b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d1b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d1ba:	81a3      	strh	r3, [r4, #12]
 801d1bc:	4632      	mov	r2, r6
 801d1be:	463b      	mov	r3, r7
 801d1c0:	4628      	mov	r0, r5
 801d1c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d1c6:	f000 b837 	b.w	801d238 <_write_r>

0801d1ca <__sseek>:
 801d1ca:	b510      	push	{r4, lr}
 801d1cc:	460c      	mov	r4, r1
 801d1ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d1d2:	f000 f8a5 	bl	801d320 <_lseek_r>
 801d1d6:	1c43      	adds	r3, r0, #1
 801d1d8:	89a3      	ldrh	r3, [r4, #12]
 801d1da:	bf15      	itete	ne
 801d1dc:	6560      	strne	r0, [r4, #84]	; 0x54
 801d1de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d1e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d1e6:	81a3      	strheq	r3, [r4, #12]
 801d1e8:	bf18      	it	ne
 801d1ea:	81a3      	strhne	r3, [r4, #12]
 801d1ec:	bd10      	pop	{r4, pc}

0801d1ee <__sclose>:
 801d1ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d1f2:	f000 b851 	b.w	801d298 <_close_r>

0801d1f6 <strncmp>:
 801d1f6:	b510      	push	{r4, lr}
 801d1f8:	b17a      	cbz	r2, 801d21a <strncmp+0x24>
 801d1fa:	4603      	mov	r3, r0
 801d1fc:	3901      	subs	r1, #1
 801d1fe:	1884      	adds	r4, r0, r2
 801d200:	f813 0b01 	ldrb.w	r0, [r3], #1
 801d204:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801d208:	4290      	cmp	r0, r2
 801d20a:	d101      	bne.n	801d210 <strncmp+0x1a>
 801d20c:	42a3      	cmp	r3, r4
 801d20e:	d101      	bne.n	801d214 <strncmp+0x1e>
 801d210:	1a80      	subs	r0, r0, r2
 801d212:	bd10      	pop	{r4, pc}
 801d214:	2800      	cmp	r0, #0
 801d216:	d1f3      	bne.n	801d200 <strncmp+0xa>
 801d218:	e7fa      	b.n	801d210 <strncmp+0x1a>
 801d21a:	4610      	mov	r0, r2
 801d21c:	e7f9      	b.n	801d212 <strncmp+0x1c>

0801d21e <__ascii_wctomb>:
 801d21e:	b149      	cbz	r1, 801d234 <__ascii_wctomb+0x16>
 801d220:	2aff      	cmp	r2, #255	; 0xff
 801d222:	bf85      	ittet	hi
 801d224:	238a      	movhi	r3, #138	; 0x8a
 801d226:	6003      	strhi	r3, [r0, #0]
 801d228:	700a      	strbls	r2, [r1, #0]
 801d22a:	f04f 30ff 	movhi.w	r0, #4294967295
 801d22e:	bf98      	it	ls
 801d230:	2001      	movls	r0, #1
 801d232:	4770      	bx	lr
 801d234:	4608      	mov	r0, r1
 801d236:	4770      	bx	lr

0801d238 <_write_r>:
 801d238:	b538      	push	{r3, r4, r5, lr}
 801d23a:	4d07      	ldr	r5, [pc, #28]	; (801d258 <_write_r+0x20>)
 801d23c:	4604      	mov	r4, r0
 801d23e:	4608      	mov	r0, r1
 801d240:	4611      	mov	r1, r2
 801d242:	2200      	movs	r2, #0
 801d244:	602a      	str	r2, [r5, #0]
 801d246:	461a      	mov	r2, r3
 801d248:	f7ee fd93 	bl	800bd72 <_write>
 801d24c:	1c43      	adds	r3, r0, #1
 801d24e:	d102      	bne.n	801d256 <_write_r+0x1e>
 801d250:	682b      	ldr	r3, [r5, #0]
 801d252:	b103      	cbz	r3, 801d256 <_write_r+0x1e>
 801d254:	6023      	str	r3, [r4, #0]
 801d256:	bd38      	pop	{r3, r4, r5, pc}
 801d258:	20000a44 	.word	0x20000a44

0801d25c <__assert_func>:
 801d25c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d25e:	4614      	mov	r4, r2
 801d260:	461a      	mov	r2, r3
 801d262:	4b09      	ldr	r3, [pc, #36]	; (801d288 <__assert_func+0x2c>)
 801d264:	681b      	ldr	r3, [r3, #0]
 801d266:	4605      	mov	r5, r0
 801d268:	68d8      	ldr	r0, [r3, #12]
 801d26a:	b14c      	cbz	r4, 801d280 <__assert_func+0x24>
 801d26c:	4b07      	ldr	r3, [pc, #28]	; (801d28c <__assert_func+0x30>)
 801d26e:	9100      	str	r1, [sp, #0]
 801d270:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d274:	4906      	ldr	r1, [pc, #24]	; (801d290 <__assert_func+0x34>)
 801d276:	462b      	mov	r3, r5
 801d278:	f000 f81e 	bl	801d2b8 <fiprintf>
 801d27c:	f000 f8ca 	bl	801d414 <abort>
 801d280:	4b04      	ldr	r3, [pc, #16]	; (801d294 <__assert_func+0x38>)
 801d282:	461c      	mov	r4, r3
 801d284:	e7f3      	b.n	801d26e <__assert_func+0x12>
 801d286:	bf00      	nop
 801d288:	20000090 	.word	0x20000090
 801d28c:	0801e24d 	.word	0x0801e24d
 801d290:	0801e25a 	.word	0x0801e25a
 801d294:	0801e288 	.word	0x0801e288

0801d298 <_close_r>:
 801d298:	b538      	push	{r3, r4, r5, lr}
 801d29a:	4d06      	ldr	r5, [pc, #24]	; (801d2b4 <_close_r+0x1c>)
 801d29c:	2300      	movs	r3, #0
 801d29e:	4604      	mov	r4, r0
 801d2a0:	4608      	mov	r0, r1
 801d2a2:	602b      	str	r3, [r5, #0]
 801d2a4:	f7ee fd81 	bl	800bdaa <_close>
 801d2a8:	1c43      	adds	r3, r0, #1
 801d2aa:	d102      	bne.n	801d2b2 <_close_r+0x1a>
 801d2ac:	682b      	ldr	r3, [r5, #0]
 801d2ae:	b103      	cbz	r3, 801d2b2 <_close_r+0x1a>
 801d2b0:	6023      	str	r3, [r4, #0]
 801d2b2:	bd38      	pop	{r3, r4, r5, pc}
 801d2b4:	20000a44 	.word	0x20000a44

0801d2b8 <fiprintf>:
 801d2b8:	b40e      	push	{r1, r2, r3}
 801d2ba:	b503      	push	{r0, r1, lr}
 801d2bc:	4601      	mov	r1, r0
 801d2be:	ab03      	add	r3, sp, #12
 801d2c0:	4805      	ldr	r0, [pc, #20]	; (801d2d8 <fiprintf+0x20>)
 801d2c2:	f853 2b04 	ldr.w	r2, [r3], #4
 801d2c6:	6800      	ldr	r0, [r0, #0]
 801d2c8:	9301      	str	r3, [sp, #4]
 801d2ca:	f7ff fe09 	bl	801cee0 <_vfiprintf_r>
 801d2ce:	b002      	add	sp, #8
 801d2d0:	f85d eb04 	ldr.w	lr, [sp], #4
 801d2d4:	b003      	add	sp, #12
 801d2d6:	4770      	bx	lr
 801d2d8:	20000090 	.word	0x20000090

0801d2dc <_fstat_r>:
 801d2dc:	b538      	push	{r3, r4, r5, lr}
 801d2de:	4d07      	ldr	r5, [pc, #28]	; (801d2fc <_fstat_r+0x20>)
 801d2e0:	2300      	movs	r3, #0
 801d2e2:	4604      	mov	r4, r0
 801d2e4:	4608      	mov	r0, r1
 801d2e6:	4611      	mov	r1, r2
 801d2e8:	602b      	str	r3, [r5, #0]
 801d2ea:	f7ee fd6a 	bl	800bdc2 <_fstat>
 801d2ee:	1c43      	adds	r3, r0, #1
 801d2f0:	d102      	bne.n	801d2f8 <_fstat_r+0x1c>
 801d2f2:	682b      	ldr	r3, [r5, #0]
 801d2f4:	b103      	cbz	r3, 801d2f8 <_fstat_r+0x1c>
 801d2f6:	6023      	str	r3, [r4, #0]
 801d2f8:	bd38      	pop	{r3, r4, r5, pc}
 801d2fa:	bf00      	nop
 801d2fc:	20000a44 	.word	0x20000a44

0801d300 <_isatty_r>:
 801d300:	b538      	push	{r3, r4, r5, lr}
 801d302:	4d06      	ldr	r5, [pc, #24]	; (801d31c <_isatty_r+0x1c>)
 801d304:	2300      	movs	r3, #0
 801d306:	4604      	mov	r4, r0
 801d308:	4608      	mov	r0, r1
 801d30a:	602b      	str	r3, [r5, #0]
 801d30c:	f7ee fd69 	bl	800bde2 <_isatty>
 801d310:	1c43      	adds	r3, r0, #1
 801d312:	d102      	bne.n	801d31a <_isatty_r+0x1a>
 801d314:	682b      	ldr	r3, [r5, #0]
 801d316:	b103      	cbz	r3, 801d31a <_isatty_r+0x1a>
 801d318:	6023      	str	r3, [r4, #0]
 801d31a:	bd38      	pop	{r3, r4, r5, pc}
 801d31c:	20000a44 	.word	0x20000a44

0801d320 <_lseek_r>:
 801d320:	b538      	push	{r3, r4, r5, lr}
 801d322:	4d07      	ldr	r5, [pc, #28]	; (801d340 <_lseek_r+0x20>)
 801d324:	4604      	mov	r4, r0
 801d326:	4608      	mov	r0, r1
 801d328:	4611      	mov	r1, r2
 801d32a:	2200      	movs	r2, #0
 801d32c:	602a      	str	r2, [r5, #0]
 801d32e:	461a      	mov	r2, r3
 801d330:	f7ee fd62 	bl	800bdf8 <_lseek>
 801d334:	1c43      	adds	r3, r0, #1
 801d336:	d102      	bne.n	801d33e <_lseek_r+0x1e>
 801d338:	682b      	ldr	r3, [r5, #0]
 801d33a:	b103      	cbz	r3, 801d33e <_lseek_r+0x1e>
 801d33c:	6023      	str	r3, [r4, #0]
 801d33e:	bd38      	pop	{r3, r4, r5, pc}
 801d340:	20000a44 	.word	0x20000a44

0801d344 <memmove>:
 801d344:	4288      	cmp	r0, r1
 801d346:	b510      	push	{r4, lr}
 801d348:	eb01 0402 	add.w	r4, r1, r2
 801d34c:	d902      	bls.n	801d354 <memmove+0x10>
 801d34e:	4284      	cmp	r4, r0
 801d350:	4623      	mov	r3, r4
 801d352:	d807      	bhi.n	801d364 <memmove+0x20>
 801d354:	1e43      	subs	r3, r0, #1
 801d356:	42a1      	cmp	r1, r4
 801d358:	d008      	beq.n	801d36c <memmove+0x28>
 801d35a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d35e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d362:	e7f8      	b.n	801d356 <memmove+0x12>
 801d364:	4402      	add	r2, r0
 801d366:	4601      	mov	r1, r0
 801d368:	428a      	cmp	r2, r1
 801d36a:	d100      	bne.n	801d36e <memmove+0x2a>
 801d36c:	bd10      	pop	{r4, pc}
 801d36e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d372:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d376:	e7f7      	b.n	801d368 <memmove+0x24>

0801d378 <__malloc_lock>:
 801d378:	4801      	ldr	r0, [pc, #4]	; (801d380 <__malloc_lock+0x8>)
 801d37a:	f7fe bdf2 	b.w	801bf62 <__retarget_lock_acquire_recursive>
 801d37e:	bf00      	nop
 801d380:	20000a38 	.word	0x20000a38

0801d384 <__malloc_unlock>:
 801d384:	4801      	ldr	r0, [pc, #4]	; (801d38c <__malloc_unlock+0x8>)
 801d386:	f7fe bded 	b.w	801bf64 <__retarget_lock_release_recursive>
 801d38a:	bf00      	nop
 801d38c:	20000a38 	.word	0x20000a38

0801d390 <_realloc_r>:
 801d390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d394:	4680      	mov	r8, r0
 801d396:	4614      	mov	r4, r2
 801d398:	460e      	mov	r6, r1
 801d39a:	b921      	cbnz	r1, 801d3a6 <_realloc_r+0x16>
 801d39c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d3a0:	4611      	mov	r1, r2
 801d3a2:	f7ff bba3 	b.w	801caec <_malloc_r>
 801d3a6:	b92a      	cbnz	r2, 801d3b4 <_realloc_r+0x24>
 801d3a8:	f7ff fb34 	bl	801ca14 <_free_r>
 801d3ac:	4625      	mov	r5, r4
 801d3ae:	4628      	mov	r0, r5
 801d3b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d3b4:	f000 f835 	bl	801d422 <_malloc_usable_size_r>
 801d3b8:	4284      	cmp	r4, r0
 801d3ba:	4607      	mov	r7, r0
 801d3bc:	d802      	bhi.n	801d3c4 <_realloc_r+0x34>
 801d3be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801d3c2:	d812      	bhi.n	801d3ea <_realloc_r+0x5a>
 801d3c4:	4621      	mov	r1, r4
 801d3c6:	4640      	mov	r0, r8
 801d3c8:	f7ff fb90 	bl	801caec <_malloc_r>
 801d3cc:	4605      	mov	r5, r0
 801d3ce:	2800      	cmp	r0, #0
 801d3d0:	d0ed      	beq.n	801d3ae <_realloc_r+0x1e>
 801d3d2:	42bc      	cmp	r4, r7
 801d3d4:	4622      	mov	r2, r4
 801d3d6:	4631      	mov	r1, r6
 801d3d8:	bf28      	it	cs
 801d3da:	463a      	movcs	r2, r7
 801d3dc:	f7fb fb6a 	bl	8018ab4 <memcpy>
 801d3e0:	4631      	mov	r1, r6
 801d3e2:	4640      	mov	r0, r8
 801d3e4:	f7ff fb16 	bl	801ca14 <_free_r>
 801d3e8:	e7e1      	b.n	801d3ae <_realloc_r+0x1e>
 801d3ea:	4635      	mov	r5, r6
 801d3ec:	e7df      	b.n	801d3ae <_realloc_r+0x1e>
	...

0801d3f0 <_read_r>:
 801d3f0:	b538      	push	{r3, r4, r5, lr}
 801d3f2:	4d07      	ldr	r5, [pc, #28]	; (801d410 <_read_r+0x20>)
 801d3f4:	4604      	mov	r4, r0
 801d3f6:	4608      	mov	r0, r1
 801d3f8:	4611      	mov	r1, r2
 801d3fa:	2200      	movs	r2, #0
 801d3fc:	602a      	str	r2, [r5, #0]
 801d3fe:	461a      	mov	r2, r3
 801d400:	f7ee fc9a 	bl	800bd38 <_read>
 801d404:	1c43      	adds	r3, r0, #1
 801d406:	d102      	bne.n	801d40e <_read_r+0x1e>
 801d408:	682b      	ldr	r3, [r5, #0]
 801d40a:	b103      	cbz	r3, 801d40e <_read_r+0x1e>
 801d40c:	6023      	str	r3, [r4, #0]
 801d40e:	bd38      	pop	{r3, r4, r5, pc}
 801d410:	20000a44 	.word	0x20000a44

0801d414 <abort>:
 801d414:	b508      	push	{r3, lr}
 801d416:	2006      	movs	r0, #6
 801d418:	f000 f834 	bl	801d484 <raise>
 801d41c:	2001      	movs	r0, #1
 801d41e:	f7ee fc81 	bl	800bd24 <_exit>

0801d422 <_malloc_usable_size_r>:
 801d422:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d426:	1f18      	subs	r0, r3, #4
 801d428:	2b00      	cmp	r3, #0
 801d42a:	bfbc      	itt	lt
 801d42c:	580b      	ldrlt	r3, [r1, r0]
 801d42e:	18c0      	addlt	r0, r0, r3
 801d430:	4770      	bx	lr

0801d432 <_raise_r>:
 801d432:	291f      	cmp	r1, #31
 801d434:	b538      	push	{r3, r4, r5, lr}
 801d436:	4604      	mov	r4, r0
 801d438:	460d      	mov	r5, r1
 801d43a:	d904      	bls.n	801d446 <_raise_r+0x14>
 801d43c:	2316      	movs	r3, #22
 801d43e:	6003      	str	r3, [r0, #0]
 801d440:	f04f 30ff 	mov.w	r0, #4294967295
 801d444:	bd38      	pop	{r3, r4, r5, pc}
 801d446:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801d448:	b112      	cbz	r2, 801d450 <_raise_r+0x1e>
 801d44a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d44e:	b94b      	cbnz	r3, 801d464 <_raise_r+0x32>
 801d450:	4620      	mov	r0, r4
 801d452:	f000 f831 	bl	801d4b8 <_getpid_r>
 801d456:	462a      	mov	r2, r5
 801d458:	4601      	mov	r1, r0
 801d45a:	4620      	mov	r0, r4
 801d45c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d460:	f000 b818 	b.w	801d494 <_kill_r>
 801d464:	2b01      	cmp	r3, #1
 801d466:	d00a      	beq.n	801d47e <_raise_r+0x4c>
 801d468:	1c59      	adds	r1, r3, #1
 801d46a:	d103      	bne.n	801d474 <_raise_r+0x42>
 801d46c:	2316      	movs	r3, #22
 801d46e:	6003      	str	r3, [r0, #0]
 801d470:	2001      	movs	r0, #1
 801d472:	e7e7      	b.n	801d444 <_raise_r+0x12>
 801d474:	2400      	movs	r4, #0
 801d476:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801d47a:	4628      	mov	r0, r5
 801d47c:	4798      	blx	r3
 801d47e:	2000      	movs	r0, #0
 801d480:	e7e0      	b.n	801d444 <_raise_r+0x12>
	...

0801d484 <raise>:
 801d484:	4b02      	ldr	r3, [pc, #8]	; (801d490 <raise+0xc>)
 801d486:	4601      	mov	r1, r0
 801d488:	6818      	ldr	r0, [r3, #0]
 801d48a:	f7ff bfd2 	b.w	801d432 <_raise_r>
 801d48e:	bf00      	nop
 801d490:	20000090 	.word	0x20000090

0801d494 <_kill_r>:
 801d494:	b538      	push	{r3, r4, r5, lr}
 801d496:	4d07      	ldr	r5, [pc, #28]	; (801d4b4 <_kill_r+0x20>)
 801d498:	2300      	movs	r3, #0
 801d49a:	4604      	mov	r4, r0
 801d49c:	4608      	mov	r0, r1
 801d49e:	4611      	mov	r1, r2
 801d4a0:	602b      	str	r3, [r5, #0]
 801d4a2:	f7ee fc2f 	bl	800bd04 <_kill>
 801d4a6:	1c43      	adds	r3, r0, #1
 801d4a8:	d102      	bne.n	801d4b0 <_kill_r+0x1c>
 801d4aa:	682b      	ldr	r3, [r5, #0]
 801d4ac:	b103      	cbz	r3, 801d4b0 <_kill_r+0x1c>
 801d4ae:	6023      	str	r3, [r4, #0]
 801d4b0:	bd38      	pop	{r3, r4, r5, pc}
 801d4b2:	bf00      	nop
 801d4b4:	20000a44 	.word	0x20000a44

0801d4b8 <_getpid_r>:
 801d4b8:	f7ee bc1c 	b.w	800bcf4 <_getpid>

0801d4bc <sqrt>:
 801d4bc:	b538      	push	{r3, r4, r5, lr}
 801d4be:	ed2d 8b02 	vpush	{d8}
 801d4c2:	ec55 4b10 	vmov	r4, r5, d0
 801d4c6:	f000 f825 	bl	801d514 <__ieee754_sqrt>
 801d4ca:	4622      	mov	r2, r4
 801d4cc:	462b      	mov	r3, r5
 801d4ce:	4620      	mov	r0, r4
 801d4d0:	4629      	mov	r1, r5
 801d4d2:	eeb0 8a40 	vmov.f32	s16, s0
 801d4d6:	eef0 8a60 	vmov.f32	s17, s1
 801d4da:	f7ea fb07 	bl	8007aec <__aeabi_dcmpun>
 801d4de:	b990      	cbnz	r0, 801d506 <sqrt+0x4a>
 801d4e0:	2200      	movs	r2, #0
 801d4e2:	2300      	movs	r3, #0
 801d4e4:	4620      	mov	r0, r4
 801d4e6:	4629      	mov	r1, r5
 801d4e8:	f7ea fad8 	bl	8007a9c <__aeabi_dcmplt>
 801d4ec:	b158      	cbz	r0, 801d506 <sqrt+0x4a>
 801d4ee:	f7fb fab7 	bl	8018a60 <__errno>
 801d4f2:	2321      	movs	r3, #33	; 0x21
 801d4f4:	6003      	str	r3, [r0, #0]
 801d4f6:	2200      	movs	r2, #0
 801d4f8:	2300      	movs	r3, #0
 801d4fa:	4610      	mov	r0, r2
 801d4fc:	4619      	mov	r1, r3
 801d4fe:	f7ea f985 	bl	800780c <__aeabi_ddiv>
 801d502:	ec41 0b18 	vmov	d8, r0, r1
 801d506:	eeb0 0a48 	vmov.f32	s0, s16
 801d50a:	eef0 0a68 	vmov.f32	s1, s17
 801d50e:	ecbd 8b02 	vpop	{d8}
 801d512:	bd38      	pop	{r3, r4, r5, pc}

0801d514 <__ieee754_sqrt>:
 801d514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d518:	ec55 4b10 	vmov	r4, r5, d0
 801d51c:	4e55      	ldr	r6, [pc, #340]	; (801d674 <__ieee754_sqrt+0x160>)
 801d51e:	43ae      	bics	r6, r5
 801d520:	ee10 0a10 	vmov	r0, s0
 801d524:	ee10 3a10 	vmov	r3, s0
 801d528:	462a      	mov	r2, r5
 801d52a:	4629      	mov	r1, r5
 801d52c:	d110      	bne.n	801d550 <__ieee754_sqrt+0x3c>
 801d52e:	ee10 2a10 	vmov	r2, s0
 801d532:	462b      	mov	r3, r5
 801d534:	f7ea f840 	bl	80075b8 <__aeabi_dmul>
 801d538:	4602      	mov	r2, r0
 801d53a:	460b      	mov	r3, r1
 801d53c:	4620      	mov	r0, r4
 801d53e:	4629      	mov	r1, r5
 801d540:	f7e9 fe84 	bl	800724c <__adddf3>
 801d544:	4604      	mov	r4, r0
 801d546:	460d      	mov	r5, r1
 801d548:	ec45 4b10 	vmov	d0, r4, r5
 801d54c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d550:	2d00      	cmp	r5, #0
 801d552:	dc10      	bgt.n	801d576 <__ieee754_sqrt+0x62>
 801d554:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801d558:	4330      	orrs	r0, r6
 801d55a:	d0f5      	beq.n	801d548 <__ieee754_sqrt+0x34>
 801d55c:	b15d      	cbz	r5, 801d576 <__ieee754_sqrt+0x62>
 801d55e:	ee10 2a10 	vmov	r2, s0
 801d562:	462b      	mov	r3, r5
 801d564:	ee10 0a10 	vmov	r0, s0
 801d568:	f7e9 fe6e 	bl	8007248 <__aeabi_dsub>
 801d56c:	4602      	mov	r2, r0
 801d56e:	460b      	mov	r3, r1
 801d570:	f7ea f94c 	bl	800780c <__aeabi_ddiv>
 801d574:	e7e6      	b.n	801d544 <__ieee754_sqrt+0x30>
 801d576:	1512      	asrs	r2, r2, #20
 801d578:	d074      	beq.n	801d664 <__ieee754_sqrt+0x150>
 801d57a:	07d4      	lsls	r4, r2, #31
 801d57c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801d580:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801d584:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801d588:	bf5e      	ittt	pl
 801d58a:	0fda      	lsrpl	r2, r3, #31
 801d58c:	005b      	lslpl	r3, r3, #1
 801d58e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801d592:	2400      	movs	r4, #0
 801d594:	0fda      	lsrs	r2, r3, #31
 801d596:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801d59a:	107f      	asrs	r7, r7, #1
 801d59c:	005b      	lsls	r3, r3, #1
 801d59e:	2516      	movs	r5, #22
 801d5a0:	4620      	mov	r0, r4
 801d5a2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801d5a6:	1886      	adds	r6, r0, r2
 801d5a8:	428e      	cmp	r6, r1
 801d5aa:	bfde      	ittt	le
 801d5ac:	1b89      	suble	r1, r1, r6
 801d5ae:	18b0      	addle	r0, r6, r2
 801d5b0:	18a4      	addle	r4, r4, r2
 801d5b2:	0049      	lsls	r1, r1, #1
 801d5b4:	3d01      	subs	r5, #1
 801d5b6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801d5ba:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801d5be:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801d5c2:	d1f0      	bne.n	801d5a6 <__ieee754_sqrt+0x92>
 801d5c4:	462a      	mov	r2, r5
 801d5c6:	f04f 0e20 	mov.w	lr, #32
 801d5ca:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801d5ce:	4281      	cmp	r1, r0
 801d5d0:	eb06 0c05 	add.w	ip, r6, r5
 801d5d4:	dc02      	bgt.n	801d5dc <__ieee754_sqrt+0xc8>
 801d5d6:	d113      	bne.n	801d600 <__ieee754_sqrt+0xec>
 801d5d8:	459c      	cmp	ip, r3
 801d5da:	d811      	bhi.n	801d600 <__ieee754_sqrt+0xec>
 801d5dc:	f1bc 0f00 	cmp.w	ip, #0
 801d5e0:	eb0c 0506 	add.w	r5, ip, r6
 801d5e4:	da43      	bge.n	801d66e <__ieee754_sqrt+0x15a>
 801d5e6:	2d00      	cmp	r5, #0
 801d5e8:	db41      	blt.n	801d66e <__ieee754_sqrt+0x15a>
 801d5ea:	f100 0801 	add.w	r8, r0, #1
 801d5ee:	1a09      	subs	r1, r1, r0
 801d5f0:	459c      	cmp	ip, r3
 801d5f2:	bf88      	it	hi
 801d5f4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801d5f8:	eba3 030c 	sub.w	r3, r3, ip
 801d5fc:	4432      	add	r2, r6
 801d5fe:	4640      	mov	r0, r8
 801d600:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801d604:	f1be 0e01 	subs.w	lr, lr, #1
 801d608:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801d60c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801d610:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801d614:	d1db      	bne.n	801d5ce <__ieee754_sqrt+0xba>
 801d616:	430b      	orrs	r3, r1
 801d618:	d006      	beq.n	801d628 <__ieee754_sqrt+0x114>
 801d61a:	1c50      	adds	r0, r2, #1
 801d61c:	bf13      	iteet	ne
 801d61e:	3201      	addne	r2, #1
 801d620:	3401      	addeq	r4, #1
 801d622:	4672      	moveq	r2, lr
 801d624:	f022 0201 	bicne.w	r2, r2, #1
 801d628:	1063      	asrs	r3, r4, #1
 801d62a:	0852      	lsrs	r2, r2, #1
 801d62c:	07e1      	lsls	r1, r4, #31
 801d62e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801d632:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801d636:	bf48      	it	mi
 801d638:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801d63c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801d640:	4614      	mov	r4, r2
 801d642:	e781      	b.n	801d548 <__ieee754_sqrt+0x34>
 801d644:	0ad9      	lsrs	r1, r3, #11
 801d646:	3815      	subs	r0, #21
 801d648:	055b      	lsls	r3, r3, #21
 801d64a:	2900      	cmp	r1, #0
 801d64c:	d0fa      	beq.n	801d644 <__ieee754_sqrt+0x130>
 801d64e:	02cd      	lsls	r5, r1, #11
 801d650:	d50a      	bpl.n	801d668 <__ieee754_sqrt+0x154>
 801d652:	f1c2 0420 	rsb	r4, r2, #32
 801d656:	fa23 f404 	lsr.w	r4, r3, r4
 801d65a:	1e55      	subs	r5, r2, #1
 801d65c:	4093      	lsls	r3, r2
 801d65e:	4321      	orrs	r1, r4
 801d660:	1b42      	subs	r2, r0, r5
 801d662:	e78a      	b.n	801d57a <__ieee754_sqrt+0x66>
 801d664:	4610      	mov	r0, r2
 801d666:	e7f0      	b.n	801d64a <__ieee754_sqrt+0x136>
 801d668:	0049      	lsls	r1, r1, #1
 801d66a:	3201      	adds	r2, #1
 801d66c:	e7ef      	b.n	801d64e <__ieee754_sqrt+0x13a>
 801d66e:	4680      	mov	r8, r0
 801d670:	e7bd      	b.n	801d5ee <__ieee754_sqrt+0xda>
 801d672:	bf00      	nop
 801d674:	7ff00000 	.word	0x7ff00000

0801d678 <_init>:
 801d678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d67a:	bf00      	nop
 801d67c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d67e:	bc08      	pop	{r3}
 801d680:	469e      	mov	lr, r3
 801d682:	4770      	bx	lr

0801d684 <_fini>:
 801d684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d686:	bf00      	nop
 801d688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d68a:	bc08      	pop	{r3}
 801d68c:	469e      	mov	lr, r3
 801d68e:	4770      	bx	lr
