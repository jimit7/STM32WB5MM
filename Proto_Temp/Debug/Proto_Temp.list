
Proto_Temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000160a4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002658  080161e8  080161e8  000261e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018840  08018840  00028840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018848  08018848  00028848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801884c  0801884c  0002884c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000240  20000008  08018850  00030008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000248  08018a90  00030248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000280  08018ac5  00030280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000674  20000298  08018ad6  00030298  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000090c  08018ad6  0003090c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00050000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00050000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08018ad6  000401e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .comment      00000043  00000000  00000000  00040a97  2**0
                  CONTENTS, READONLY
 16 .debug_info   0003ad54  00000000  00000000  00040ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00008910  00000000  00000000  0007b82e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000032d8  00000000  00000000  00084140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000026d2  00000000  00000000  00087418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000343b6  00000000  00000000  00089aea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00042639  00000000  00000000  000bdea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0011018c  00000000  00000000  001004d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000e99c  00000000  00000000  00210668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000067  00000000  00000000  0021f004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000298 	.word	0x20000298
 800015c:	00000000 	.word	0x00000000
 8000160:	080161cc 	.word	0x080161cc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000029c 	.word	0x2000029c
 800017c:	080161cc 	.word	0x080161cc

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9a6 	b.w	8000f9c <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff0b 	bl	8000a8c <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fc81 	bl	80005a8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc02 	bl	80004b4 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fc78 	bl	80005a8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff faba 	bl	8000238 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9e08      	ldr	r6, [sp, #32]
 8000cda:	460d      	mov	r5, r1
 8000cdc:	4604      	mov	r4, r0
 8000cde:	460f      	mov	r7, r1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d14a      	bne.n	8000d7a <__udivmoddi4+0xa6>
 8000ce4:	428a      	cmp	r2, r1
 8000ce6:	4694      	mov	ip, r2
 8000ce8:	d965      	bls.n	8000db6 <__udivmoddi4+0xe2>
 8000cea:	fab2 f382 	clz	r3, r2
 8000cee:	b143      	cbz	r3, 8000d02 <__udivmoddi4+0x2e>
 8000cf0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf4:	f1c3 0220 	rsb	r2, r3, #32
 8000cf8:	409f      	lsls	r7, r3
 8000cfa:	fa20 f202 	lsr.w	r2, r0, r2
 8000cfe:	4317      	orrs	r7, r2
 8000d00:	409c      	lsls	r4, r3
 8000d02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d06:	fa1f f58c 	uxth.w	r5, ip
 8000d0a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d0e:	0c22      	lsrs	r2, r4, #16
 8000d10:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d14:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d18:	fb01 f005 	mul.w	r0, r1, r5
 8000d1c:	4290      	cmp	r0, r2
 8000d1e:	d90a      	bls.n	8000d36 <__udivmoddi4+0x62>
 8000d20:	eb1c 0202 	adds.w	r2, ip, r2
 8000d24:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d28:	f080 811c 	bcs.w	8000f64 <__udivmoddi4+0x290>
 8000d2c:	4290      	cmp	r0, r2
 8000d2e:	f240 8119 	bls.w	8000f64 <__udivmoddi4+0x290>
 8000d32:	3902      	subs	r1, #2
 8000d34:	4462      	add	r2, ip
 8000d36:	1a12      	subs	r2, r2, r0
 8000d38:	b2a4      	uxth	r4, r4
 8000d3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d46:	fb00 f505 	mul.w	r5, r0, r5
 8000d4a:	42a5      	cmp	r5, r4
 8000d4c:	d90a      	bls.n	8000d64 <__udivmoddi4+0x90>
 8000d4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d52:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x294>
 8000d5a:	42a5      	cmp	r5, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x294>
 8000d60:	4464      	add	r4, ip
 8000d62:	3802      	subs	r0, #2
 8000d64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d68:	1b64      	subs	r4, r4, r5
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	b11e      	cbz	r6, 8000d76 <__udivmoddi4+0xa2>
 8000d6e:	40dc      	lsrs	r4, r3
 8000d70:	2300      	movs	r3, #0
 8000d72:	e9c6 4300 	strd	r4, r3, [r6]
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0xbc>
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	f000 80ed 	beq.w	8000f5e <__udivmoddi4+0x28a>
 8000d84:	2100      	movs	r1, #0
 8000d86:	e9c6 0500 	strd	r0, r5, [r6]
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d90:	fab3 f183 	clz	r1, r3
 8000d94:	2900      	cmp	r1, #0
 8000d96:	d149      	bne.n	8000e2c <__udivmoddi4+0x158>
 8000d98:	42ab      	cmp	r3, r5
 8000d9a:	d302      	bcc.n	8000da2 <__udivmoddi4+0xce>
 8000d9c:	4282      	cmp	r2, r0
 8000d9e:	f200 80f8 	bhi.w	8000f92 <__udivmoddi4+0x2be>
 8000da2:	1a84      	subs	r4, r0, r2
 8000da4:	eb65 0203 	sbc.w	r2, r5, r3
 8000da8:	2001      	movs	r0, #1
 8000daa:	4617      	mov	r7, r2
 8000dac:	2e00      	cmp	r6, #0
 8000dae:	d0e2      	beq.n	8000d76 <__udivmoddi4+0xa2>
 8000db0:	e9c6 4700 	strd	r4, r7, [r6]
 8000db4:	e7df      	b.n	8000d76 <__udivmoddi4+0xa2>
 8000db6:	b902      	cbnz	r2, 8000dba <__udivmoddi4+0xe6>
 8000db8:	deff      	udf	#255	; 0xff
 8000dba:	fab2 f382 	clz	r3, r2
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f040 8090 	bne.w	8000ee4 <__udivmoddi4+0x210>
 8000dc4:	1a8a      	subs	r2, r1, r2
 8000dc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dca:	fa1f fe8c 	uxth.w	lr, ip
 8000dce:	2101      	movs	r1, #1
 8000dd0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dd4:	fb07 2015 	mls	r0, r7, r5, r2
 8000dd8:	0c22      	lsrs	r2, r4, #16
 8000dda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dde:	fb0e f005 	mul.w	r0, lr, r5
 8000de2:	4290      	cmp	r0, r2
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x124>
 8000de6:	eb1c 0202 	adds.w	r2, ip, r2
 8000dea:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dee:	d202      	bcs.n	8000df6 <__udivmoddi4+0x122>
 8000df0:	4290      	cmp	r0, r2
 8000df2:	f200 80cb 	bhi.w	8000f8c <__udivmoddi4+0x2b8>
 8000df6:	4645      	mov	r5, r8
 8000df8:	1a12      	subs	r2, r2, r0
 8000dfa:	b2a4      	uxth	r4, r4
 8000dfc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e00:	fb07 2210 	mls	r2, r7, r0, r2
 8000e04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e08:	fb0e fe00 	mul.w	lr, lr, r0
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x14e>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e18:	d202      	bcs.n	8000e20 <__udivmoddi4+0x14c>
 8000e1a:	45a6      	cmp	lr, r4
 8000e1c:	f200 80bb 	bhi.w	8000f96 <__udivmoddi4+0x2c2>
 8000e20:	4610      	mov	r0, r2
 8000e22:	eba4 040e 	sub.w	r4, r4, lr
 8000e26:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e2a:	e79f      	b.n	8000d6c <__udivmoddi4+0x98>
 8000e2c:	f1c1 0720 	rsb	r7, r1, #32
 8000e30:	408b      	lsls	r3, r1
 8000e32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e3a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e3e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e42:	40fd      	lsrs	r5, r7
 8000e44:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e48:	4323      	orrs	r3, r4
 8000e4a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e4e:	fa1f fe8c 	uxth.w	lr, ip
 8000e52:	fb09 5518 	mls	r5, r9, r8, r5
 8000e56:	0c1c      	lsrs	r4, r3, #16
 8000e58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e5c:	fb08 f50e 	mul.w	r5, r8, lr
 8000e60:	42a5      	cmp	r5, r4
 8000e62:	fa02 f201 	lsl.w	r2, r2, r1
 8000e66:	fa00 f001 	lsl.w	r0, r0, r1
 8000e6a:	d90b      	bls.n	8000e84 <__udivmoddi4+0x1b0>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e74:	f080 8088 	bcs.w	8000f88 <__udivmoddi4+0x2b4>
 8000e78:	42a5      	cmp	r5, r4
 8000e7a:	f240 8085 	bls.w	8000f88 <__udivmoddi4+0x2b4>
 8000e7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e82:	4464      	add	r4, ip
 8000e84:	1b64      	subs	r4, r4, r5
 8000e86:	b29d      	uxth	r5, r3
 8000e88:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e8c:	fb09 4413 	mls	r4, r9, r3, r4
 8000e90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e94:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e98:	45a6      	cmp	lr, r4
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x1da>
 8000e9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ea4:	d26c      	bcs.n	8000f80 <__udivmoddi4+0x2ac>
 8000ea6:	45a6      	cmp	lr, r4
 8000ea8:	d96a      	bls.n	8000f80 <__udivmoddi4+0x2ac>
 8000eaa:	3b02      	subs	r3, #2
 8000eac:	4464      	add	r4, ip
 8000eae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000eb2:	fba3 9502 	umull	r9, r5, r3, r2
 8000eb6:	eba4 040e 	sub.w	r4, r4, lr
 8000eba:	42ac      	cmp	r4, r5
 8000ebc:	46c8      	mov	r8, r9
 8000ebe:	46ae      	mov	lr, r5
 8000ec0:	d356      	bcc.n	8000f70 <__udivmoddi4+0x29c>
 8000ec2:	d053      	beq.n	8000f6c <__udivmoddi4+0x298>
 8000ec4:	b156      	cbz	r6, 8000edc <__udivmoddi4+0x208>
 8000ec6:	ebb0 0208 	subs.w	r2, r0, r8
 8000eca:	eb64 040e 	sbc.w	r4, r4, lr
 8000ece:	fa04 f707 	lsl.w	r7, r4, r7
 8000ed2:	40ca      	lsrs	r2, r1
 8000ed4:	40cc      	lsrs	r4, r1
 8000ed6:	4317      	orrs	r7, r2
 8000ed8:	e9c6 7400 	strd	r7, r4, [r6]
 8000edc:	4618      	mov	r0, r3
 8000ede:	2100      	movs	r1, #0
 8000ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee4:	f1c3 0120 	rsb	r1, r3, #32
 8000ee8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eec:	fa20 f201 	lsr.w	r2, r0, r1
 8000ef0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ef4:	409d      	lsls	r5, r3
 8000ef6:	432a      	orrs	r2, r5
 8000ef8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f04:	fb07 1510 	mls	r5, r7, r0, r1
 8000f08:	0c11      	lsrs	r1, r2, #16
 8000f0a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f0e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f12:	428d      	cmp	r5, r1
 8000f14:	fa04 f403 	lsl.w	r4, r4, r3
 8000f18:	d908      	bls.n	8000f2c <__udivmoddi4+0x258>
 8000f1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f22:	d22f      	bcs.n	8000f84 <__udivmoddi4+0x2b0>
 8000f24:	428d      	cmp	r5, r1
 8000f26:	d92d      	bls.n	8000f84 <__udivmoddi4+0x2b0>
 8000f28:	3802      	subs	r0, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1b49      	subs	r1, r1, r5
 8000f2e:	b292      	uxth	r2, r2
 8000f30:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f34:	fb07 1115 	mls	r1, r7, r5, r1
 8000f38:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f3c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f40:	4291      	cmp	r1, r2
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x282>
 8000f44:	eb1c 0202 	adds.w	r2, ip, r2
 8000f48:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f4c:	d216      	bcs.n	8000f7c <__udivmoddi4+0x2a8>
 8000f4e:	4291      	cmp	r1, r2
 8000f50:	d914      	bls.n	8000f7c <__udivmoddi4+0x2a8>
 8000f52:	3d02      	subs	r5, #2
 8000f54:	4462      	add	r2, ip
 8000f56:	1a52      	subs	r2, r2, r1
 8000f58:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f5c:	e738      	b.n	8000dd0 <__udivmoddi4+0xfc>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e708      	b.n	8000d76 <__udivmoddi4+0xa2>
 8000f64:	4639      	mov	r1, r7
 8000f66:	e6e6      	b.n	8000d36 <__udivmoddi4+0x62>
 8000f68:	4610      	mov	r0, r2
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x90>
 8000f6c:	4548      	cmp	r0, r9
 8000f6e:	d2a9      	bcs.n	8000ec4 <__udivmoddi4+0x1f0>
 8000f70:	ebb9 0802 	subs.w	r8, r9, r2
 8000f74:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	e7a3      	b.n	8000ec4 <__udivmoddi4+0x1f0>
 8000f7c:	4645      	mov	r5, r8
 8000f7e:	e7ea      	b.n	8000f56 <__udivmoddi4+0x282>
 8000f80:	462b      	mov	r3, r5
 8000f82:	e794      	b.n	8000eae <__udivmoddi4+0x1da>
 8000f84:	4640      	mov	r0, r8
 8000f86:	e7d1      	b.n	8000f2c <__udivmoddi4+0x258>
 8000f88:	46d0      	mov	r8, sl
 8000f8a:	e77b      	b.n	8000e84 <__udivmoddi4+0x1b0>
 8000f8c:	3d02      	subs	r5, #2
 8000f8e:	4462      	add	r2, ip
 8000f90:	e732      	b.n	8000df8 <__udivmoddi4+0x124>
 8000f92:	4608      	mov	r0, r1
 8000f94:	e70a      	b.n	8000dac <__udivmoddi4+0xd8>
 8000f96:	4464      	add	r4, ip
 8000f98:	3802      	subs	r0, #2
 8000f9a:	e742      	b.n	8000e22 <__udivmoddi4+0x14e>

08000f9c <__aeabi_idiv0>:
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <AccelInit>:

AccelData output;


void AccelInit(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af04      	add	r7, sp, #16
	uint8_t cmd[1];
	cmd[0]=0x00;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c3,ACCEL_ADDRESS,ACCEL_TEMP_CFG_REG,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
 8000fae:	9302      	str	r3, [sp, #8]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2301      	movs	r3, #1
 8000fba:	221f      	movs	r2, #31
 8000fbc:	2130      	movs	r1, #48	; 0x30
 8000fbe:	484b      	ldr	r0, [pc, #300]	; (80010ec <AccelInit+0x14c>)
 8000fc0:	f005 fa8a 	bl	80064d8 <HAL_I2C_Mem_Write>
	cmd[0]=0x77;
 8000fc4:	2377      	movs	r3, #119	; 0x77
 8000fc6:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c3,ACCEL_ADDRESS,ACCEL_CTRL_REG1,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 8000fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fcc:	9302      	str	r3, [sp, #8]
 8000fce:	2301      	movs	r3, #1
 8000fd0:	9301      	str	r3, [sp, #4]
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	2220      	movs	r2, #32
 8000fda:	2130      	movs	r1, #48	; 0x30
 8000fdc:	4843      	ldr	r0, [pc, #268]	; (80010ec <AccelInit+0x14c>)
 8000fde:	f005 fa7b 	bl	80064d8 <HAL_I2C_Mem_Write>
	cmd[0]=0x00;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c3,ACCEL_ADDRESS,ACCEL_CTRL_REG2,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fea:	9302      	str	r3, [sp, #8]
 8000fec:	2301      	movs	r3, #1
 8000fee:	9301      	str	r3, [sp, #4]
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	2221      	movs	r2, #33	; 0x21
 8000ff8:	2130      	movs	r1, #48	; 0x30
 8000ffa:	483c      	ldr	r0, [pc, #240]	; (80010ec <AccelInit+0x14c>)
 8000ffc:	f005 fa6c 	bl	80064d8 <HAL_I2C_Mem_Write>
	cmd[0]=0x18;
 8001000:	2318      	movs	r3, #24
 8001002:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c3,ACCEL_ADDRESS,ACCEL_CTRL_REG3,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 8001004:	f04f 33ff 	mov.w	r3, #4294967295
 8001008:	9302      	str	r3, [sp, #8]
 800100a:	2301      	movs	r3, #1
 800100c:	9301      	str	r3, [sp, #4]
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	2222      	movs	r2, #34	; 0x22
 8001016:	2130      	movs	r1, #48	; 0x30
 8001018:	4834      	ldr	r0, [pc, #208]	; (80010ec <AccelInit+0x14c>)
 800101a:	f005 fa5d 	bl	80064d8 <HAL_I2C_Mem_Write>
	cmd[0]=0x00;
 800101e:	2300      	movs	r3, #0
 8001020:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c3,ACCEL_ADDRESS,ACCEL_CTRL_REG4,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 8001022:	f04f 33ff 	mov.w	r3, #4294967295
 8001026:	9302      	str	r3, [sp, #8]
 8001028:	2301      	movs	r3, #1
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2301      	movs	r3, #1
 8001032:	2223      	movs	r2, #35	; 0x23
 8001034:	2130      	movs	r1, #48	; 0x30
 8001036:	482d      	ldr	r0, [pc, #180]	; (80010ec <AccelInit+0x14c>)
 8001038:	f005 fa4e 	bl	80064d8 <HAL_I2C_Mem_Write>
	cmd[0]=0x0A;
 800103c:	230a      	movs	r3, #10
 800103e:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c3,ACCEL_ADDRESS,ACCEL_CTRL_REG5,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 8001040:	f04f 33ff 	mov.w	r3, #4294967295
 8001044:	9302      	str	r3, [sp, #8]
 8001046:	2301      	movs	r3, #1
 8001048:	9301      	str	r3, [sp, #4]
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	2301      	movs	r3, #1
 8001050:	2224      	movs	r2, #36	; 0x24
 8001052:	2130      	movs	r1, #48	; 0x30
 8001054:	4825      	ldr	r0, [pc, #148]	; (80010ec <AccelInit+0x14c>)
 8001056:	f005 fa3f 	bl	80064d8 <HAL_I2C_Mem_Write>
	cmd[0]=0x20;
 800105a:	2320      	movs	r3, #32
 800105c:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c3,ACCEL_ADDRESS,ACCEL_CTRL_REG6,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 800105e:	f04f 33ff 	mov.w	r3, #4294967295
 8001062:	9302      	str	r3, [sp, #8]
 8001064:	2301      	movs	r3, #1
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2301      	movs	r3, #1
 800106e:	2225      	movs	r2, #37	; 0x25
 8001070:	2130      	movs	r1, #48	; 0x30
 8001072:	481e      	ldr	r0, [pc, #120]	; (80010ec <AccelInit+0x14c>)
 8001074:	f005 fa30 	bl	80064d8 <HAL_I2C_Mem_Write>
	cmd[0]=0x00;
 8001078:	2300      	movs	r3, #0
 800107a:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c3,ACCEL_ADDRESS,ACCEL_REFERENCE_DATACAPTURE,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 800107c:	f04f 33ff 	mov.w	r3, #4294967295
 8001080:	9302      	str	r3, [sp, #8]
 8001082:	2301      	movs	r3, #1
 8001084:	9301      	str	r3, [sp, #4]
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	2301      	movs	r3, #1
 800108c:	2226      	movs	r2, #38	; 0x26
 800108e:	2130      	movs	r1, #48	; 0x30
 8001090:	4816      	ldr	r0, [pc, #88]	; (80010ec <AccelInit+0x14c>)
 8001092:	f005 fa21 	bl	80064d8 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c3,ACCEL_ADDRESS,ACCEL_FIFO_CTRL_REG,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
 800109a:	9302      	str	r3, [sp, #8]
 800109c:	2301      	movs	r3, #1
 800109e:	9301      	str	r3, [sp, #4]
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2301      	movs	r3, #1
 80010a6:	222e      	movs	r2, #46	; 0x2e
 80010a8:	2130      	movs	r1, #48	; 0x30
 80010aa:	4810      	ldr	r0, [pc, #64]	; (80010ec <AccelInit+0x14c>)
 80010ac:	f005 fa14 	bl	80064d8 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c3,ACCEL_ADDRESS,ACCEL_INT1_CFG,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 80010b0:	f04f 33ff 	mov.w	r3, #4294967295
 80010b4:	9302      	str	r3, [sp, #8]
 80010b6:	2301      	movs	r3, #1
 80010b8:	9301      	str	r3, [sp, #4]
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	2301      	movs	r3, #1
 80010c0:	2230      	movs	r2, #48	; 0x30
 80010c2:	2130      	movs	r1, #48	; 0x30
 80010c4:	4809      	ldr	r0, [pc, #36]	; (80010ec <AccelInit+0x14c>)
 80010c6:	f005 fa07 	bl	80064d8 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c3,ACCEL_ADDRESS,ACCEL_INT2_CFG,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295
 80010ce:	9302      	str	r3, [sp, #8]
 80010d0:	2301      	movs	r3, #1
 80010d2:	9301      	str	r3, [sp, #4]
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2301      	movs	r3, #1
 80010da:	2234      	movs	r2, #52	; 0x34
 80010dc:	2130      	movs	r1, #48	; 0x30
 80010de:	4803      	ldr	r0, [pc, #12]	; (80010ec <AccelInit+0x14c>)
 80010e0:	f005 f9fa 	bl	80064d8 <HAL_I2C_Mem_Write>
}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	200003e0 	.word	0x200003e0

080010f0 <AccelRead>:

void AccelRead(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af04      	add	r7, sp, #16

  uint8_t data[1];
  HAL_I2C_Mem_Read(&hi2c3,ACCEL_ADDRESS,ACCEL_OUT_X_L,I2C_MEMADD_SIZE_8BIT,data,1,HAL_MAX_DELAY);
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	9302      	str	r3, [sp, #8]
 80010fc:	2301      	movs	r3, #1
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	2228      	movs	r2, #40	; 0x28
 8001108:	2130      	movs	r1, #48	; 0x30
 800110a:	486d      	ldr	r0, [pc, #436]	; (80012c0 <AccelRead+0x1d0>)
 800110c:	f005 faf8 	bl	8006700 <HAL_I2C_Mem_Read>
  dataconver.data[0]=data[0];
 8001110:	793a      	ldrb	r2, [r7, #4]
 8001112:	4b6c      	ldr	r3, [pc, #432]	; (80012c4 <AccelRead+0x1d4>)
 8001114:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Read(&hi2c3,ACCEL_ADDRESS,ACCEL_OUT_X_H,I2C_MEMADD_SIZE_8BIT,data,1,HAL_MAX_DELAY);
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
 800111a:	9302      	str	r3, [sp, #8]
 800111c:	2301      	movs	r3, #1
 800111e:	9301      	str	r3, [sp, #4]
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2301      	movs	r3, #1
 8001126:	2229      	movs	r2, #41	; 0x29
 8001128:	2130      	movs	r1, #48	; 0x30
 800112a:	4865      	ldr	r0, [pc, #404]	; (80012c0 <AccelRead+0x1d0>)
 800112c:	f005 fae8 	bl	8006700 <HAL_I2C_Mem_Read>
  dataconver.data[1]=data[0];
 8001130:	793a      	ldrb	r2, [r7, #4]
 8001132:	4b64      	ldr	r3, [pc, #400]	; (80012c4 <AccelRead+0x1d4>)
 8001134:	705a      	strb	r2, [r3, #1]
  output.RawAccelX=dataconver.word;
 8001136:	4b63      	ldr	r3, [pc, #396]	; (80012c4 <AccelRead+0x1d4>)
 8001138:	f9b3 2000 	ldrsh.w	r2, [r3]
 800113c:	4b62      	ldr	r3, [pc, #392]	; (80012c8 <AccelRead+0x1d8>)
 800113e:	80da      	strh	r2, [r3, #6]
  HAL_I2C_Mem_Read(&hi2c3,ACCEL_ADDRESS,ACCEL_OUT_Y_L,I2C_MEMADD_SIZE_8BIT,data,1,HAL_MAX_DELAY);
 8001140:	f04f 33ff 	mov.w	r3, #4294967295
 8001144:	9302      	str	r3, [sp, #8]
 8001146:	2301      	movs	r3, #1
 8001148:	9301      	str	r3, [sp, #4]
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2301      	movs	r3, #1
 8001150:	222a      	movs	r2, #42	; 0x2a
 8001152:	2130      	movs	r1, #48	; 0x30
 8001154:	485a      	ldr	r0, [pc, #360]	; (80012c0 <AccelRead+0x1d0>)
 8001156:	f005 fad3 	bl	8006700 <HAL_I2C_Mem_Read>
  dataconver.data[0]=data[0];
 800115a:	793a      	ldrb	r2, [r7, #4]
 800115c:	4b59      	ldr	r3, [pc, #356]	; (80012c4 <AccelRead+0x1d4>)
 800115e:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Read(&hi2c3,ACCEL_ADDRESS,ACCEL_OUT_Y_H,I2C_MEMADD_SIZE_8BIT,data,1,HAL_MAX_DELAY);
 8001160:	f04f 33ff 	mov.w	r3, #4294967295
 8001164:	9302      	str	r3, [sp, #8]
 8001166:	2301      	movs	r3, #1
 8001168:	9301      	str	r3, [sp, #4]
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	2301      	movs	r3, #1
 8001170:	222b      	movs	r2, #43	; 0x2b
 8001172:	2130      	movs	r1, #48	; 0x30
 8001174:	4852      	ldr	r0, [pc, #328]	; (80012c0 <AccelRead+0x1d0>)
 8001176:	f005 fac3 	bl	8006700 <HAL_I2C_Mem_Read>
  dataconver.data[1]=data[0];
 800117a:	793a      	ldrb	r2, [r7, #4]
 800117c:	4b51      	ldr	r3, [pc, #324]	; (80012c4 <AccelRead+0x1d4>)
 800117e:	705a      	strb	r2, [r3, #1]
  output.RawAccelY=dataconver.word;
 8001180:	4b50      	ldr	r3, [pc, #320]	; (80012c4 <AccelRead+0x1d4>)
 8001182:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001186:	4b50      	ldr	r3, [pc, #320]	; (80012c8 <AccelRead+0x1d8>)
 8001188:	811a      	strh	r2, [r3, #8]
  HAL_I2C_Mem_Read(&hi2c3,ACCEL_ADDRESS,ACCEL_OUT_Z_L,I2C_MEMADD_SIZE_8BIT,data,1,HAL_MAX_DELAY);
 800118a:	f04f 33ff 	mov.w	r3, #4294967295
 800118e:	9302      	str	r3, [sp, #8]
 8001190:	2301      	movs	r3, #1
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2301      	movs	r3, #1
 800119a:	222c      	movs	r2, #44	; 0x2c
 800119c:	2130      	movs	r1, #48	; 0x30
 800119e:	4848      	ldr	r0, [pc, #288]	; (80012c0 <AccelRead+0x1d0>)
 80011a0:	f005 faae 	bl	8006700 <HAL_I2C_Mem_Read>
  dataconver.data[0]=data[0];
 80011a4:	793a      	ldrb	r2, [r7, #4]
 80011a6:	4b47      	ldr	r3, [pc, #284]	; (80012c4 <AccelRead+0x1d4>)
 80011a8:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Read(&hi2c3,ACCEL_ADDRESS,ACCEL_OUT_Z_H,I2C_MEMADD_SIZE_8BIT,data,1,HAL_MAX_DELAY);
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295
 80011ae:	9302      	str	r3, [sp, #8]
 80011b0:	2301      	movs	r3, #1
 80011b2:	9301      	str	r3, [sp, #4]
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	2301      	movs	r3, #1
 80011ba:	222d      	movs	r2, #45	; 0x2d
 80011bc:	2130      	movs	r1, #48	; 0x30
 80011be:	4840      	ldr	r0, [pc, #256]	; (80012c0 <AccelRead+0x1d0>)
 80011c0:	f005 fa9e 	bl	8006700 <HAL_I2C_Mem_Read>
  dataconver.data[1]=data[0];
 80011c4:	793a      	ldrb	r2, [r7, #4]
 80011c6:	4b3f      	ldr	r3, [pc, #252]	; (80012c4 <AccelRead+0x1d4>)
 80011c8:	705a      	strb	r2, [r3, #1]
  output.RawAccelZ=dataconver.word;
 80011ca:	4b3e      	ldr	r3, [pc, #248]	; (80012c4 <AccelRead+0x1d4>)
 80011cc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80011d0:	4b3d      	ldr	r3, [pc, #244]	; (80012c8 <AccelRead+0x1d8>)
 80011d2:	815a      	strh	r2, [r3, #10]
  output.AccelXScratch = ((float)(output.RawAccelX/64))*0.004f *100;
 80011d4:	4b3c      	ldr	r3, [pc, #240]	; (80012c8 <AccelRead+0x1d8>)
 80011d6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	da00      	bge.n	80011e0 <AccelRead+0xf0>
 80011de:	333f      	adds	r3, #63	; 0x3f
 80011e0:	119b      	asrs	r3, r3, #6
 80011e2:	b21b      	sxth	r3, r3
 80011e4:	ee07 3a90 	vmov	s15, r3
 80011e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ec:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80012cc <AccelRead+0x1dc>
 80011f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011f4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80012d0 <AccelRead+0x1e0>
 80011f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011fc:	4b32      	ldr	r3, [pc, #200]	; (80012c8 <AccelRead+0x1d8>)
 80011fe:	edc3 7a03 	vstr	s15, [r3, #12]
  output.AccelYScratch = ((float)(output.RawAccelY/64))*0.004f *100;
 8001202:	4b31      	ldr	r3, [pc, #196]	; (80012c8 <AccelRead+0x1d8>)
 8001204:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001208:	2b00      	cmp	r3, #0
 800120a:	da00      	bge.n	800120e <AccelRead+0x11e>
 800120c:	333f      	adds	r3, #63	; 0x3f
 800120e:	119b      	asrs	r3, r3, #6
 8001210:	b21b      	sxth	r3, r3
 8001212:	ee07 3a90 	vmov	s15, r3
 8001216:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800121a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80012cc <AccelRead+0x1dc>
 800121e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001222:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80012d0 <AccelRead+0x1e0>
 8001226:	ee67 7a87 	vmul.f32	s15, s15, s14
 800122a:	4b27      	ldr	r3, [pc, #156]	; (80012c8 <AccelRead+0x1d8>)
 800122c:	edc3 7a04 	vstr	s15, [r3, #16]
  output.AccelZScratch = ((float)(output.RawAccelZ/64))*0.004f *100;
 8001230:	4b25      	ldr	r3, [pc, #148]	; (80012c8 <AccelRead+0x1d8>)
 8001232:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001236:	2b00      	cmp	r3, #0
 8001238:	da00      	bge.n	800123c <AccelRead+0x14c>
 800123a:	333f      	adds	r3, #63	; 0x3f
 800123c:	119b      	asrs	r3, r3, #6
 800123e:	b21b      	sxth	r3, r3
 8001240:	ee07 3a90 	vmov	s15, r3
 8001244:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001248:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80012cc <AccelRead+0x1dc>
 800124c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001250:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80012d0 <AccelRead+0x1e0>
 8001254:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001258:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <AccelRead+0x1d8>)
 800125a:	edc3 7a05 	vstr	s15, [r3, #20]
  output.AccelX = (int16_t)output.AccelXScratch;
 800125e:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <AccelRead+0x1d8>)
 8001260:	edd3 7a03 	vldr	s15, [r3, #12]
 8001264:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001268:	ee17 3a90 	vmov	r3, s15
 800126c:	b21a      	sxth	r2, r3
 800126e:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <AccelRead+0x1d8>)
 8001270:	801a      	strh	r2, [r3, #0]
  output.AccelY = (int16_t)output.AccelYScratch;
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <AccelRead+0x1d8>)
 8001274:	edd3 7a04 	vldr	s15, [r3, #16]
 8001278:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800127c:	ee17 3a90 	vmov	r3, s15
 8001280:	b21a      	sxth	r2, r3
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <AccelRead+0x1d8>)
 8001284:	805a      	strh	r2, [r3, #2]
  output.AccelZ = (int16_t)output.AccelZScratch;
 8001286:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <AccelRead+0x1d8>)
 8001288:	edd3 7a05 	vldr	s15, [r3, #20]
 800128c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001290:	ee17 3a90 	vmov	r3, s15
 8001294:	b21a      	sxth	r2, r3
 8001296:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <AccelRead+0x1d8>)
 8001298:	809a      	strh	r2, [r3, #4]
  printf("Accelerometer X:%d Y:%d Z:%d \n",output.AccelX,output.AccelY,output.AccelZ);
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <AccelRead+0x1d8>)
 800129c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a0:	4619      	mov	r1, r3
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <AccelRead+0x1d8>)
 80012a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <AccelRead+0x1d8>)
 80012ac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012b0:	4808      	ldr	r0, [pc, #32]	; (80012d4 <AccelRead+0x1e4>)
 80012b2:	f011 f917 	bl	80124e4 <iprintf>

}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200003e0 	.word	0x200003e0
 80012c4:	200002b4 	.word	0x200002b4
 80012c8:	200002b8 	.word	0x200002b8
 80012cc:	3b83126f 	.word	0x3b83126f
 80012d0:	42c80000 	.word	0x42c80000
 80012d4:	080161e8 	.word	0x080161e8

080012d8 <UV_init>:




void UV_init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af04      	add	r7, sp, #16
 uint8_t cmd[1]={0};
 80012de:	2300      	movs	r3, #0
 80012e0:	713b      	strb	r3, [r7, #4]
 cmd[0]=0x0A;
 80012e2:	230a      	movs	r3, #10
 80012e4:	713b      	strb	r3, [r7, #4]

 HAL_I2C_Mem_Write(&hi2c3,LTR390_WR,LTR390_MAIN_CTRL,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ea:	9302      	str	r3, [sp, #8]
 80012ec:	2301      	movs	r3, #1
 80012ee:	9301      	str	r3, [sp, #4]
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	2301      	movs	r3, #1
 80012f6:	2200      	movs	r2, #0
 80012f8:	21a6      	movs	r1, #166	; 0xa6
 80012fa:	484d      	ldr	r0, [pc, #308]	; (8001430 <UV_init+0x158>)
 80012fc:	f005 f8ec 	bl	80064d8 <HAL_I2C_Mem_Write>
 cmd[0]=0x42;
 8001300:	2342      	movs	r3, #66	; 0x42
 8001302:	713b      	strb	r3, [r7, #4]
 HAL_I2C_Mem_Write(&hi2c3,LTR390_WR,LTR390_MEAS_RATE,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 8001304:	f04f 33ff 	mov.w	r3, #4294967295
 8001308:	9302      	str	r3, [sp, #8]
 800130a:	2301      	movs	r3, #1
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	2301      	movs	r3, #1
 8001314:	2204      	movs	r2, #4
 8001316:	21a6      	movs	r1, #166	; 0xa6
 8001318:	4845      	ldr	r0, [pc, #276]	; (8001430 <UV_init+0x158>)
 800131a:	f005 f8dd 	bl	80064d8 <HAL_I2C_Mem_Write>
 cmd[0]=0x01;
 800131e:	2301      	movs	r3, #1
 8001320:	713b      	strb	r3, [r7, #4]
 HAL_I2C_Mem_Write(&hi2c3,LTR390_WR,LTR390_GAIN,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 8001322:	f04f 33ff 	mov.w	r3, #4294967295
 8001326:	9302      	str	r3, [sp, #8]
 8001328:	2301      	movs	r3, #1
 800132a:	9301      	str	r3, [sp, #4]
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	2301      	movs	r3, #1
 8001332:	2205      	movs	r2, #5
 8001334:	21a6      	movs	r1, #166	; 0xa6
 8001336:	483e      	ldr	r0, [pc, #248]	; (8001430 <UV_init+0x158>)
 8001338:	f005 f8ce 	bl	80064d8 <HAL_I2C_Mem_Write>
 cmd[0]=0x0A;
 800133c:	230a      	movs	r3, #10
 800133e:	713b      	strb	r3, [r7, #4]
 HAL_I2C_Mem_Write(&hi2c3,LTR390_WR,LTR390_INT_PST,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 8001340:	f04f 33ff 	mov.w	r3, #4294967295
 8001344:	9302      	str	r3, [sp, #8]
 8001346:	2301      	movs	r3, #1
 8001348:	9301      	str	r3, [sp, #4]
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	2301      	movs	r3, #1
 8001350:	221a      	movs	r2, #26
 8001352:	21a6      	movs	r1, #166	; 0xa6
 8001354:	4836      	ldr	r0, [pc, #216]	; (8001430 <UV_init+0x158>)
 8001356:	f005 f8bf 	bl	80064d8 <HAL_I2C_Mem_Write>
 cmd[0]=0x64;
 800135a:	2364      	movs	r3, #100	; 0x64
 800135c:	713b      	strb	r3, [r7, #4]
 HAL_I2C_Mem_Write(&hi2c3,LTR390_WR,UVS_ALS_thr_low_l,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	9302      	str	r3, [sp, #8]
 8001364:	2301      	movs	r3, #1
 8001366:	9301      	str	r3, [sp, #4]
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2301      	movs	r3, #1
 800136e:	2224      	movs	r2, #36	; 0x24
 8001370:	21a6      	movs	r1, #166	; 0xa6
 8001372:	482f      	ldr	r0, [pc, #188]	; (8001430 <UV_init+0x158>)
 8001374:	f005 f8b0 	bl	80064d8 <HAL_I2C_Mem_Write>
 cmd[0]=0x00;
 8001378:	2300      	movs	r3, #0
 800137a:	713b      	strb	r3, [r7, #4]
 HAL_I2C_Mem_Write(&hi2c3,LTR390_WR,UVS_ALS_thr_low_m,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 800137c:	f04f 33ff 	mov.w	r3, #4294967295
 8001380:	9302      	str	r3, [sp, #8]
 8001382:	2301      	movs	r3, #1
 8001384:	9301      	str	r3, [sp, #4]
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	2301      	movs	r3, #1
 800138c:	2225      	movs	r2, #37	; 0x25
 800138e:	21a6      	movs	r1, #166	; 0xa6
 8001390:	4827      	ldr	r0, [pc, #156]	; (8001430 <UV_init+0x158>)
 8001392:	f005 f8a1 	bl	80064d8 <HAL_I2C_Mem_Write>
 //bus_write(LTR390_WR,UVS_ALS_thr_low_h,0x00);
 HAL_I2C_Mem_Write(&hi2c3,LTR390_WR,UVS_ALS_thr_low_h,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 8001396:	f04f 33ff 	mov.w	r3, #4294967295
 800139a:	9302      	str	r3, [sp, #8]
 800139c:	2301      	movs	r3, #1
 800139e:	9301      	str	r3, [sp, #4]
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	2301      	movs	r3, #1
 80013a6:	2226      	movs	r2, #38	; 0x26
 80013a8:	21a6      	movs	r1, #166	; 0xa6
 80013aa:	4821      	ldr	r0, [pc, #132]	; (8001430 <UV_init+0x158>)
 80013ac:	f005 f894 	bl	80064d8 <HAL_I2C_Mem_Write>
 cmd[0]=0x3E;
 80013b0:	233e      	movs	r3, #62	; 0x3e
 80013b2:	713b      	strb	r3, [r7, #4]
 HAL_I2C_Mem_Write(&hi2c3,LTR390_WR,UVS_ALS_thr_up_l,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 80013b4:	f04f 33ff 	mov.w	r3, #4294967295
 80013b8:	9302      	str	r3, [sp, #8]
 80013ba:	2301      	movs	r3, #1
 80013bc:	9301      	str	r3, [sp, #4]
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	2301      	movs	r3, #1
 80013c4:	2221      	movs	r2, #33	; 0x21
 80013c6:	21a6      	movs	r1, #166	; 0xa6
 80013c8:	4819      	ldr	r0, [pc, #100]	; (8001430 <UV_init+0x158>)
 80013ca:	f005 f885 	bl	80064d8 <HAL_I2C_Mem_Write>
 cmd[0]=0x08;
 80013ce:	2308      	movs	r3, #8
 80013d0:	713b      	strb	r3, [r7, #4]
 HAL_I2C_Mem_Write(&hi2c3,LTR390_WR,UVS_ALS_thr_up_m,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
 80013d6:	9302      	str	r3, [sp, #8]
 80013d8:	2301      	movs	r3, #1
 80013da:	9301      	str	r3, [sp, #4]
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	2301      	movs	r3, #1
 80013e2:	2222      	movs	r2, #34	; 0x22
 80013e4:	21a6      	movs	r1, #166	; 0xa6
 80013e6:	4812      	ldr	r0, [pc, #72]	; (8001430 <UV_init+0x158>)
 80013e8:	f005 f876 	bl	80064d8 <HAL_I2C_Mem_Write>
 cmd[0]=0x00;
 80013ec:	2300      	movs	r3, #0
 80013ee:	713b      	strb	r3, [r7, #4]
 HAL_I2C_Mem_Write(&hi2c3,LTR390_WR,UVS_ALS_thr_up_h,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 80013f0:	f04f 33ff 	mov.w	r3, #4294967295
 80013f4:	9302      	str	r3, [sp, #8]
 80013f6:	2301      	movs	r3, #1
 80013f8:	9301      	str	r3, [sp, #4]
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	2301      	movs	r3, #1
 8001400:	2223      	movs	r2, #35	; 0x23
 8001402:	21a6      	movs	r1, #166	; 0xa6
 8001404:	480a      	ldr	r0, [pc, #40]	; (8001430 <UV_init+0x158>)
 8001406:	f005 f867 	bl	80064d8 <HAL_I2C_Mem_Write>
 cmd[0]=0x34;
 800140a:	2334      	movs	r3, #52	; 0x34
 800140c:	713b      	strb	r3, [r7, #4]
 HAL_I2C_Mem_Write(&hi2c3,LTR390_WR,LTR390_INT_CFG,I2C_MEMADD_SIZE_8BIT,cmd,1,HAL_MAX_DELAY);
 800140e:	f04f 33ff 	mov.w	r3, #4294967295
 8001412:	9302      	str	r3, [sp, #8]
 8001414:	2301      	movs	r3, #1
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	2301      	movs	r3, #1
 800141e:	2219      	movs	r2, #25
 8001420:	21a6      	movs	r1, #166	; 0xa6
 8001422:	4803      	ldr	r0, [pc, #12]	; (8001430 <UV_init+0x158>)
 8001424:	f005 f858 	bl	80064d8 <HAL_I2C_Mem_Write>
}
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	200003e0 	.word	0x200003e0

08001434 <UV>:




int8_t *UV(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af04      	add	r7, sp, #16
  static int8_t data_little_Endian[3];
  uint8_t data_Big_Endian[3];
  HAL_I2C_Mem_Read(&hi2c3,LTR390_RD,LTR390_UVSDATA,I2C_MEMADD_SIZE_8BIT,data_Big_Endian,3,HAL_MAX_DELAY);
 800143a:	f04f 33ff 	mov.w	r3, #4294967295
 800143e:	9302      	str	r3, [sp, #8]
 8001440:	2303      	movs	r3, #3
 8001442:	9301      	str	r3, [sp, #4]
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	2301      	movs	r3, #1
 800144a:	2210      	movs	r2, #16
 800144c:	21a7      	movs	r1, #167	; 0xa7
 800144e:	4813      	ldr	r0, [pc, #76]	; (800149c <UV+0x68>)
 8001450:	f005 f956 	bl	8006700 <HAL_I2C_Mem_Read>
  printf("uv_raw %d %d %d \n",data_Big_Endian[0],data_Big_Endian[1],data_Big_Endian[2]);
 8001454:	793b      	ldrb	r3, [r7, #4]
 8001456:	4619      	mov	r1, r3
 8001458:	797b      	ldrb	r3, [r7, #5]
 800145a:	461a      	mov	r2, r3
 800145c:	79bb      	ldrb	r3, [r7, #6]
 800145e:	4810      	ldr	r0, [pc, #64]	; (80014a0 <UV+0x6c>)
 8001460:	f011 f840 	bl	80124e4 <iprintf>
  data_little_Endian[0]=data_Big_Endian[2];
 8001464:	79bb      	ldrb	r3, [r7, #6]
 8001466:	b25a      	sxtb	r2, r3
 8001468:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <UV+0x70>)
 800146a:	701a      	strb	r2, [r3, #0]
  data_little_Endian[1]=data_Big_Endian[1];
 800146c:	797b      	ldrb	r3, [r7, #5]
 800146e:	b25a      	sxtb	r2, r3
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <UV+0x70>)
 8001472:	705a      	strb	r2, [r3, #1]
  data_little_Endian[2]=data_Big_Endian[0];
 8001474:	793b      	ldrb	r3, [r7, #4]
 8001476:	b25a      	sxtb	r2, r3
 8001478:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <UV+0x70>)
 800147a:	709a      	strb	r2, [r3, #2]
  printf("uv_raw %d  \n",((data_Big_Endian[2]*65536) + (data_Big_Endian[1]*256) +data_Big_Endian[0]));
 800147c:	79bb      	ldrb	r3, [r7, #6]
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	797a      	ldrb	r2, [r7, #5]
 8001482:	4413      	add	r3, r2
 8001484:	021b      	lsls	r3, r3, #8
 8001486:	793a      	ldrb	r2, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	4619      	mov	r1, r3
 800148c:	4806      	ldr	r0, [pc, #24]	; (80014a8 <UV+0x74>)
 800148e:	f011 f829 	bl	80124e4 <iprintf>
  return data_little_Endian;
 8001492:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <UV+0x70>)

}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	200003e0 	.word	0x200003e0
 80014a0:	08016208 	.word	0x08016208
 80014a4:	200002d0 	.word	0x200002d0
 80014a8:	0801621c 	.word	0x0801621c

080014ac <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4013      	ands	r3, r2
 80014ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014d0:	68fb      	ldr	r3, [r7, #12]
}
 80014d2:	bf00      	nop
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014e6:	463b      	mov	r3, r7
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
 80014f4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80014f6:	4b29      	ldr	r3, [pc, #164]	; (800159c <MX_ADC1_Init+0xbc>)
 80014f8:	4a29      	ldr	r2, [pc, #164]	; (80015a0 <MX_ADC1_Init+0xc0>)
 80014fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80014fc:	4b27      	ldr	r3, [pc, #156]	; (800159c <MX_ADC1_Init+0xbc>)
 80014fe:	2200      	movs	r2, #0
 8001500:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001502:	4b26      	ldr	r3, [pc, #152]	; (800159c <MX_ADC1_Init+0xbc>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001508:	4b24      	ldr	r3, [pc, #144]	; (800159c <MX_ADC1_Init+0xbc>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800150e:	4b23      	ldr	r3, [pc, #140]	; (800159c <MX_ADC1_Init+0xbc>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001514:	4b21      	ldr	r3, [pc, #132]	; (800159c <MX_ADC1_Init+0xbc>)
 8001516:	2204      	movs	r2, #4
 8001518:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800151a:	4b20      	ldr	r3, [pc, #128]	; (800159c <MX_ADC1_Init+0xbc>)
 800151c:	2200      	movs	r2, #0
 800151e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001520:	4b1e      	ldr	r3, [pc, #120]	; (800159c <MX_ADC1_Init+0xbc>)
 8001522:	2200      	movs	r2, #0
 8001524:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001526:	4b1d      	ldr	r3, [pc, #116]	; (800159c <MX_ADC1_Init+0xbc>)
 8001528:	2201      	movs	r2, #1
 800152a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800152c:	4b1b      	ldr	r3, [pc, #108]	; (800159c <MX_ADC1_Init+0xbc>)
 800152e:	2200      	movs	r2, #0
 8001530:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001534:	4b19      	ldr	r3, [pc, #100]	; (800159c <MX_ADC1_Init+0xbc>)
 8001536:	2200      	movs	r2, #0
 8001538:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800153a:	4b18      	ldr	r3, [pc, #96]	; (800159c <MX_ADC1_Init+0xbc>)
 800153c:	2200      	movs	r2, #0
 800153e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001540:	4b16      	ldr	r3, [pc, #88]	; (800159c <MX_ADC1_Init+0xbc>)
 8001542:	2200      	movs	r2, #0
 8001544:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001548:	4b14      	ldr	r3, [pc, #80]	; (800159c <MX_ADC1_Init+0xbc>)
 800154a:	2200      	movs	r2, #0
 800154c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800154e:	4b13      	ldr	r3, [pc, #76]	; (800159c <MX_ADC1_Init+0xbc>)
 8001550:	2200      	movs	r2, #0
 8001552:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001556:	4811      	ldr	r0, [pc, #68]	; (800159c <MX_ADC1_Init+0xbc>)
 8001558:	f003 fd54 	bl	8005004 <HAL_ADC_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001562:	f002 f83b 	bl	80035dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001566:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <MX_ADC1_Init+0xc4>)
 8001568:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800156a:	2306      	movs	r3, #6
 800156c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001572:	237f      	movs	r3, #127	; 0x7f
 8001574:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001576:	2304      	movs	r3, #4
 8001578:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800157e:	463b      	mov	r3, r7
 8001580:	4619      	mov	r1, r3
 8001582:	4806      	ldr	r0, [pc, #24]	; (800159c <MX_ADC1_Init+0xbc>)
 8001584:	f003 fe8a 	bl	800529c <HAL_ADC_ConfigChannel>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800158e:	f002 f825 	bl	80035dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001592:	bf00      	nop
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200002d4 	.word	0x200002d4
 80015a0:	50040000 	.word	0x50040000
 80015a4:	10c00010 	.word	0x10c00010

080015a8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b09c      	sub	sp, #112	; 0x70
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	2250      	movs	r2, #80	; 0x50
 80015c6:	2100      	movs	r1, #0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f011 f8f9 	bl	80127c0 <memset>
  if(adcHandle->Instance==ADC1)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a24      	ldr	r2, [pc, #144]	; (8001664 <HAL_ADC_MspInit+0xbc>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d140      	bne.n	800165a <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80015d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015dc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80015de:	2318      	movs	r3, #24
 80015e0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80015e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015e6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80015e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80015ee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80015f2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 80015f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80015f8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80015fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80015fe:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001600:	f107 030c 	add.w	r3, r7, #12
 8001604:	4618      	mov	r0, r3
 8001606:	f007 fcdc 	bl	8008fc2 <HAL_RCCEx_PeriphCLKConfig>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <HAL_ADC_MspInit+0x6c>
    {
      Error_Handler();
 8001610:	f001 ffe4 	bl	80035dc <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001614:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001618:	f7ff ff48 	bl	80014ac <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161c:	2001      	movs	r0, #1
 800161e:	f7ff ff45 	bl	80014ac <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001622:	2004      	movs	r0, #4
 8001624:	f7ff ff42 	bl	80014ac <LL_AHB2_GRP1_EnableClock>
    PC1     ------> ADC1_IN2
    PC5     ------> ADC1_IN14
    PC4     ------> ADC1_IN13
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_5;
 8001628:	2325      	movs	r3, #37	; 0x25
 800162a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800162c:	2303      	movs	r3, #3
 800162e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001634:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001638:	4619      	mov	r1, r3
 800163a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163e:	f004 fd03 	bl	8006048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_4;
 8001642:	233a      	movs	r3, #58	; 0x3a
 8001644:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001646:	2303      	movs	r3, #3
 8001648:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800164e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001652:	4619      	mov	r1, r3
 8001654:	4804      	ldr	r0, [pc, #16]	; (8001668 <HAL_ADC_MspInit+0xc0>)
 8001656:	f004 fcf7 	bl	8006048 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800165a:	bf00      	nop
 800165c:	3770      	adds	r7, #112	; 0x70
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	50040000 	.word	0x50040000
 8001668:	48000800 	.word	0x48000800

0800166c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 800166c:	b5b0      	push	{r4, r5, r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8001672:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <APPD_EnableCPU2+0x34>)
 8001674:	1d3c      	adds	r4, r7, #4
 8001676:	461d      	mov	r5, r3
 8001678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800167a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800167c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001680:	c403      	stmia	r4!, {r0, r1}
 8001682:	8022      	strh	r2, [r4, #0]
 8001684:	3402      	adds	r4, #2
 8001686:	0c13      	lsrs	r3, r2, #16
 8001688:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800168a:	f00b fd95 	bl	800d1b8 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	4618      	mov	r0, r3
 8001692:	f00b f826 	bl	800c6e2 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8001696:	bf00      	nop
}
 8001698:	3720      	adds	r7, #32
 800169a:	46bd      	mov	sp, r7
 800169c:	bdb0      	pop	{r4, r5, r7, pc}
 800169e:	bf00      	nop
 80016a0:	0801622c 	.word	0x0801622c

080016a4 <DbgOutputTraces>:
/* USER CODE END DbgOutputInit */
  return;
}

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	460b      	mov	r3, r1
 80016ae:	607a      	str	r2, [r7, #4]
 80016b0:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 80016b2:	897a      	ldrh	r2, [r7, #10]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68f9      	ldr	r1, [r7, #12]
 80016b8:	2002      	movs	r0, #2
 80016ba:	f001 fd3d 	bl	8003138 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 80016be:	bf00      	nop
}
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80016d0:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <LL_C2_PWR_SetPowerMode+0x28>)
 80016d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016d6:	f023 0207 	bic.w	r2, r3, #7
 80016da:	4905      	ldr	r1, [pc, #20]	; (80016f0 <LL_C2_PWR_SetPowerMode+0x28>)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4313      	orrs	r3, r2
 80016e0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	58000400 	.word	0x58000400

080016f4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <LL_EXTI_EnableIT_32_63+0x24>)
 80016fe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001702:	4905      	ldr	r1, [pc, #20]	; (8001718 <LL_EXTI_EnableIT_32_63+0x24>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4313      	orrs	r3, r2
 8001708:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	58000800 	.word	0x58000800

0800171c <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001728:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800172a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800172e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001732:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001736:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	021b      	lsls	r3, r3, #8
 800173e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001742:	4313      	orrs	r3, r2
 8001744:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	cafecafe 	.word	0xcafecafe

08001758 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800176a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4313      	orrs	r3, r2
 8001772:	608b      	str	r3, [r1, #8]
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800178c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001794:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80017a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80017c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80017d8:	d101      	bne.n	80017de <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80017ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80017fe:	d101      	bne.n	8001804 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8001800:	2301      	movs	r3, #1
 8001802:	e000      	b.n	8001806 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800181c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800181e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4313      	orrs	r3, r2
 8001826:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800182c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4013      	ands	r3, r2
 8001832:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001834:	68fb      	ldr	r3, [r7, #12]
}
 8001836:	bf00      	nop
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
	...

08001844 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8001848:	4b04      	ldr	r3, [pc, #16]	; (800185c <LL_DBGMCU_GetDeviceID+0x18>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001850:	4618      	mov	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	e0042000 	.word	0xe0042000

08001860 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001864:	4b04      	ldr	r3, [pc, #16]	; (8001878 <LL_DBGMCU_GetRevisionID+0x18>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	0c1b      	lsrs	r3, r3, #16
 800186a:	b29b      	uxth	r3, r3
}
 800186c:	4618      	mov	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e0042000 	.word	0xe0042000

0800187c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	041b      	lsls	r3, r3, #16
 800188e:	431a      	orrs	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	605a      	str	r2, [r3, #4]
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	431a      	orrs	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	605a      	str	r2, [r3, #4]
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
 80018ca:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	695a      	ldr	r2, [r3, #20]
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	041b      	lsls	r3, r3, #16
 80018d4:	431a      	orrs	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	615a      	str	r2, [r3, #20]
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
 80018ee:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	695a      	ldr	r2, [r3, #20]
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	431a      	orrs	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	615a      	str	r2, [r3, #20]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	609a      	str	r2, [r3, #8]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	619a      	str	r2, [r3, #24]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001944:	4b05      	ldr	r3, [pc, #20]	; (800195c <LL_LPM_EnableSleep+0x1c>)
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	4a04      	ldr	r2, [pc, #16]	; (800195c <LL_LPM_EnableSleep+0x1c>)
 800194a:	f023 0304 	bic.w	r3, r3, #4
 800194e:	6113      	str	r3, [r2, #16]
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	22ff      	movs	r2, #255	; 0xff
 800196c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	22ca      	movs	r2, #202	; 0xca
 8001986:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2253      	movs	r2, #83	; 0x53
 800198c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f023 0207 	bic.w	r2, r3, #7
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	609a      	str	r2, [r3, #8]
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80019c4:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <MX_APPE_Config+0x18>)
 80019c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019ca:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80019cc:	f000 f862 	bl	8001a94 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80019d0:	f000 f8a2 	bl	8001b18 <Config_HSE>

  return;
 80019d4:	bf00      	nop
}
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	58004000 	.word	0x58004000

080019dc <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08a      	sub	sp, #40	; 0x28
 80019e0:	af0a      	add	r7, sp, #40	; 0x28
  System_Init();       /**< System initialization */
 80019e2:	f000 f8ad 	bl	8001b40 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80019e6:	f000 f8c5 	bl	8001b74 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80019ea:	4915      	ldr	r1, [pc, #84]	; (8001a40 <MX_APPE_Init+0x64>)
 80019ec:	2000      	movs	r0, #0
 80019ee:	f001 f937 	bl	8002c60 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  mlx90632_init();
 80019f2:	f002 faa9 	bl	8003f48 <mlx90632_init>
 // AccelInit();
    HAL_Delay(10);
 80019f6:	200a      	movs	r0, #10
 80019f8:	f000 faf0 	bl	8001fdc <HAL_Delay>
    mlx90632_read_eeprom(&PR, &PG, &PO, &PT, &Ea, &Eb, &Fa, &Fb, &Ga, &Gb, &Ha, &Hb, &Ka);
 80019fc:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <MX_APPE_Init+0x68>)
 80019fe:	9308      	str	r3, [sp, #32]
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <MX_APPE_Init+0x6c>)
 8001a02:	9307      	str	r3, [sp, #28]
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <MX_APPE_Init+0x70>)
 8001a06:	9306      	str	r3, [sp, #24]
 8001a08:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <MX_APPE_Init+0x74>)
 8001a0a:	9305      	str	r3, [sp, #20]
 8001a0c:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <MX_APPE_Init+0x78>)
 8001a0e:	9304      	str	r3, [sp, #16]
 8001a10:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <MX_APPE_Init+0x7c>)
 8001a12:	9303      	str	r3, [sp, #12]
 8001a14:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <MX_APPE_Init+0x80>)
 8001a16:	9302      	str	r3, [sp, #8]
 8001a18:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <MX_APPE_Init+0x84>)
 8001a1a:	9301      	str	r3, [sp, #4]
 8001a1c:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <MX_APPE_Init+0x88>)
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <MX_APPE_Init+0x8c>)
 8001a22:	4a12      	ldr	r2, [pc, #72]	; (8001a6c <MX_APPE_Init+0x90>)
 8001a24:	4912      	ldr	r1, [pc, #72]	; (8001a70 <MX_APPE_Init+0x94>)
 8001a26:	4813      	ldr	r0, [pc, #76]	; (8001a74 <MX_APPE_Init+0x98>)
 8001a28:	f002 fad1 	bl	8003fce <mlx90632_read_eeprom>
  AccelInit();
 8001a2c:	f7ff fab8 	bl	8000fa0 <AccelInit>
  UV_init();
 8001a30:	f7ff fc52 	bl	80012d8 <UV_init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001a34:	f000 f8ac 	bl	8001b90 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8001a38:	bf00      	nop
}
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	200004c4 	.word	0x200004c4
 8001a44:	20000030 	.word	0x20000030
 8001a48:	20000338 	.word	0x20000338
 8001a4c:	2000002c 	.word	0x2000002c
 8001a50:	2000002e 	.word	0x2000002e
 8001a54:	20000028 	.word	0x20000028
 8001a58:	20000024 	.word	0x20000024
 8001a5c:	20000020 	.word	0x20000020
 8001a60:	2000001c 	.word	0x2000001c
 8001a64:	20000018 	.word	0x20000018
 8001a68:	20000010 	.word	0x20000010
 8001a6c:	20000014 	.word	0x20000014
 8001a70:	2000000c 	.word	0x2000000c
 8001a74:	20000008 	.word	0x20000008

08001a78 <Init_Smps>:

void Init_Smps(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8001a7c:	bf00      	nop
}
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <Init_Exti>:

void Init_Exti(void)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8001a8a:	2050      	movs	r0, #80	; 0x50
 8001a8c:	f7ff fe32 	bl	80016f4 <LL_EXTI_EnableIT_32_63>

  return;
 8001a90:	bf00      	nop
}
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8001a98:	f000 f804 	bl	8001aa4 <Reset_BackupDomain>

  Reset_IPCC();
 8001a9c:	f000 f81a 	bl	8001ad4 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001aa0:	bf00      	nop
}
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8001aa8:	f7ff fe8c 	bl	80017c4 <LL_RCC_IsActiveFlag_PINRST>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d00d      	beq.n	8001ace <Reset_BackupDomain+0x2a>
 8001ab2:	f7ff fe9a 	bl	80017ea <LL_RCC_IsActiveFlag_SFTRST>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d108      	bne.n	8001ace <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001abc:	f005 fb10 	bl	80070e0 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8001ac0:	f005 fb0e 	bl	80070e0 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8001ac4:	f7ff fe5c 	bl	8001780 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8001ac8:	f7ff fe6b 	bl	80017a2 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8001acc:	bf00      	nop
 8001ace:	bf00      	nop
}
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001ad8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001adc:	f7ff fe98 	bl	8001810 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8001ae0:	213f      	movs	r1, #63	; 0x3f
 8001ae2:	480c      	ldr	r0, [pc, #48]	; (8001b14 <Reset_IPCC+0x40>)
 8001ae4:	f7ff ff10 	bl	8001908 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8001ae8:	213f      	movs	r1, #63	; 0x3f
 8001aea:	480a      	ldr	r0, [pc, #40]	; (8001b14 <Reset_IPCC+0x40>)
 8001aec:	f7ff ff1a 	bl	8001924 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8001af0:	213f      	movs	r1, #63	; 0x3f
 8001af2:	4808      	ldr	r0, [pc, #32]	; (8001b14 <Reset_IPCC+0x40>)
 8001af4:	f7ff fec2 	bl	800187c <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8001af8:	213f      	movs	r1, #63	; 0x3f
 8001afa:	4806      	ldr	r0, [pc, #24]	; (8001b14 <Reset_IPCC+0x40>)
 8001afc:	f7ff fee1 	bl	80018c2 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8001b00:	213f      	movs	r1, #63	; 0x3f
 8001b02:	4804      	ldr	r0, [pc, #16]	; (8001b14 <Reset_IPCC+0x40>)
 8001b04:	f7ff fecc 	bl	80018a0 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8001b08:	213f      	movs	r1, #63	; 0x3f
 8001b0a:	4802      	ldr	r0, [pc, #8]	; (8001b14 <Reset_IPCC+0x40>)
 8001b0c:	f7ff feeb 	bl	80018e6 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8001b10:	bf00      	nop
}
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	58000c00 	.word	0x58000c00

08001b18 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001b1e:	2000      	movs	r0, #0
 8001b20:	f00b fc9e 	bl	800d460 <OTP_Read>
 8001b24:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d005      	beq.n	8001b38 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	799b      	ldrb	r3, [r3, #6]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fdf3 	bl	800171c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001b36:	bf00      	nop
 8001b38:	bf00      	nop
}
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <System_Init>:

static void System_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  Init_Smps();
 8001b44:	f7ff ff98 	bl	8001a78 <Init_Smps>

  Init_Exti();
 8001b48:	f7ff ff9d 	bl	8001a86 <Init_Exti>

  Init_Rtc();
 8001b4c:	f000 f802 	bl	8001b54 <Init_Rtc>

  return;
 8001b50:	bf00      	nop
}
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001b58:	4805      	ldr	r0, [pc, #20]	; (8001b70 <Init_Rtc+0x1c>)
 8001b5a:	f7ff ff0e 	bl	800197a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001b5e:	2100      	movs	r1, #0
 8001b60:	4803      	ldr	r0, [pc, #12]	; (8001b70 <Init_Rtc+0x1c>)
 8001b62:	f7ff ff1a 	bl	800199a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001b66:	4802      	ldr	r0, [pc, #8]	; (8001b70 <Init_Rtc+0x1c>)
 8001b68:	f7ff fefa 	bl	8001960 <LL_RTC_EnableWriteProtection>

  return;
 8001b6c:	bf00      	nop
}
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40002800 	.word	0x40002800

08001b74 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001b78:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001b7c:	f7ff fdec 	bl	8001758 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001b80:	f00f fb0a 	bl	8011198 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001b84:	2004      	movs	r0, #4
 8001b86:	f7ff fd9f 	bl	80016c8 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8001b8a:	bf00      	nop
}
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b088      	sub	sp, #32
 8001b94:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 8001b96:	f00b f959 	bl	800ce4c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8001b9a:	4a11      	ldr	r2, [pc, #68]	; (8001be0 <appe_Tl_Init+0x50>)
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	2040      	movs	r0, #64	; 0x40
 8001ba0:	f00f fc38 	bl	8011414 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001ba4:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <appe_Tl_Init+0x54>)
 8001ba6:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <appe_Tl_Init+0x58>)
 8001baa:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001bac:	463b      	mov	r3, r7
 8001bae:	4619      	mov	r1, r3
 8001bb0:	480e      	ldr	r0, [pc, #56]	; (8001bec <appe_Tl_Init+0x5c>)
 8001bb2:	f00b f80d 	bl	800cbd0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <appe_Tl_Init+0x60>)
 8001bb8:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001bba:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <appe_Tl_Init+0x64>)
 8001bbc:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <appe_Tl_Init+0x68>)
 8001bc0:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001bc2:	f240 533c 	movw	r3, #1340	; 0x53c
 8001bc6:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001bc8:	f107 0308 	add.w	r3, r7, #8
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f00b fa7f 	bl	800d0d0 <TL_MM_Init>

  TL_Enable();
 8001bd2:	f00b f935 	bl	800ce40 <TL_Enable>

  return;
 8001bd6:	bf00      	nop
}
 8001bd8:	3720      	adds	r7, #32
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	0800cc09 	.word	0x0800cc09
 8001be4:	20030734 	.word	0x20030734
 8001be8:	08001bfd 	.word	0x08001bfd
 8001bec:	08001c15 	.word	0x08001c15
 8001bf0:	2003094c 	.word	0x2003094c
 8001bf4:	20030840 	.word	0x20030840
 8001bf8:	200301f8 	.word	0x200301f8

08001bfc <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8001c06:	bf00      	nop
}
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
	...

08001c14 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b088      	sub	sp, #32
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	330b      	adds	r3, #11
 8001c22:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	881b      	ldrh	r3, [r3, #0]
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8001c2e:	2b07      	cmp	r3, #7
 8001c30:	f200 80d0 	bhi.w	8001dd4 <APPE_SysUserEvtRx+0x1c0>
 8001c34:	a201      	add	r2, pc, #4	; (adr r2, 8001c3c <APPE_SysUserEvtRx+0x28>)
 8001c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c3a:	bf00      	nop
 8001c3c:	08001c5d 	.word	0x08001c5d
 8001c40:	08001cef 	.word	0x08001cef
 8001c44:	08001d11 	.word	0x08001d11
 8001c48:	08001dd5 	.word	0x08001dd5
 8001c4c:	08001d55 	.word	0x08001d55
 8001c50:	08001d79 	.word	0x08001d79
 8001c54:	08001d95 	.word	0x08001d95
 8001c58:	08001db9 	.word	0x08001db9
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001c5c:	f107 030c 	add.w	r3, r7, #12
 8001c60:	4618      	mov	r0, r3
 8001c62:	f00a fd6b 	bl	800c73c <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8001c66:	485e      	ldr	r0, [pc, #376]	; (8001de0 <APPE_SysUserEvtRx+0x1cc>)
 8001c68:	f00b fb32 	bl	800d2d0 <DbgTraceGetFileName>
 8001c6c:	4601      	mov	r1, r0
 8001c6e:	f44f 73bf 	mov.w	r3, #382	; 0x17e
 8001c72:	4a5c      	ldr	r2, [pc, #368]	; (8001de4 <APPE_SysUserEvtRx+0x1d0>)
 8001c74:	485c      	ldr	r0, [pc, #368]	; (8001de8 <APPE_SysUserEvtRx+0x1d4>)
 8001c76:	f010 fc35 	bl	80124e4 <iprintf>
 8001c7a:	7b3b      	ldrb	r3, [r7, #12]
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	7b7b      	ldrb	r3, [r7, #13]
 8001c80:	461a      	mov	r2, r3
 8001c82:	7bbb      	ldrb	r3, [r7, #14]
 8001c84:	4859      	ldr	r0, [pc, #356]	; (8001dec <APPE_SysUserEvtRx+0x1d8>)
 8001c86:	f010 fc2d 	bl	80124e4 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8001c8a:	4855      	ldr	r0, [pc, #340]	; (8001de0 <APPE_SysUserEvtRx+0x1cc>)
 8001c8c:	f00b fb20 	bl	800d2d0 <DbgTraceGetFileName>
 8001c90:	4601      	mov	r1, r0
 8001c92:	f240 137f 	movw	r3, #383	; 0x17f
 8001c96:	4a53      	ldr	r2, [pc, #332]	; (8001de4 <APPE_SysUserEvtRx+0x1d0>)
 8001c98:	4853      	ldr	r0, [pc, #332]	; (8001de8 <APPE_SysUserEvtRx+0x1d4>)
 8001c9a:	f010 fc23 	bl	80124e4 <iprintf>
 8001c9e:	7c3b      	ldrb	r3, [r7, #16]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4853      	ldr	r0, [pc, #332]	; (8001df0 <APPE_SysUserEvtRx+0x1dc>)
 8001ca4:	f010 fc1e 	bl	80124e4 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8001ca8:	484d      	ldr	r0, [pc, #308]	; (8001de0 <APPE_SysUserEvtRx+0x1cc>)
 8001caa:	f00b fb11 	bl	800d2d0 <DbgTraceGetFileName>
 8001cae:	4601      	mov	r1, r0
 8001cb0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001cb4:	4a4b      	ldr	r2, [pc, #300]	; (8001de4 <APPE_SysUserEvtRx+0x1d0>)
 8001cb6:	484c      	ldr	r0, [pc, #304]	; (8001de8 <APPE_SysUserEvtRx+0x1d4>)
 8001cb8:	f010 fc14 	bl	80124e4 <iprintf>
 8001cbc:	7dbb      	ldrb	r3, [r7, #22]
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	7dfb      	ldrb	r3, [r7, #23]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	7e3b      	ldrb	r3, [r7, #24]
 8001cc6:	484b      	ldr	r0, [pc, #300]	; (8001df4 <APPE_SysUserEvtRx+0x1e0>)
 8001cc8:	f010 fc0c 	bl	80124e4 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8001ccc:	4844      	ldr	r0, [pc, #272]	; (8001de0 <APPE_SysUserEvtRx+0x1cc>)
 8001cce:	f00b faff 	bl	800d2d0 <DbgTraceGetFileName>
 8001cd2:	4601      	mov	r1, r0
 8001cd4:	f44f 73c1 	mov.w	r3, #386	; 0x182
 8001cd8:	4a42      	ldr	r2, [pc, #264]	; (8001de4 <APPE_SysUserEvtRx+0x1d0>)
 8001cda:	4843      	ldr	r0, [pc, #268]	; (8001de8 <APPE_SysUserEvtRx+0x1d4>)
 8001cdc:	f010 fc02 	bl	80124e4 <iprintf>
 8001ce0:	4845      	ldr	r0, [pc, #276]	; (8001df8 <APPE_SysUserEvtRx+0x1e4>)
 8001ce2:	f010 fbff 	bl	80124e4 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f8e0 	bl	8001eac <APPE_SysEvtReadyProcessing>
    break;
 8001cec:	e073      	b.n	8001dd6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 8001cee:	483c      	ldr	r0, [pc, #240]	; (8001de0 <APPE_SysUserEvtRx+0x1cc>)
 8001cf0:	f00b faee 	bl	800d2d0 <DbgTraceGetFileName>
 8001cf4:	4601      	mov	r1, r0
 8001cf6:	f240 1387 	movw	r3, #391	; 0x187
 8001cfa:	4a3a      	ldr	r2, [pc, #232]	; (8001de4 <APPE_SysUserEvtRx+0x1d0>)
 8001cfc:	483a      	ldr	r0, [pc, #232]	; (8001de8 <APPE_SysUserEvtRx+0x1d4>)
 8001cfe:	f010 fbf1 	bl	80124e4 <iprintf>
 8001d02:	483e      	ldr	r0, [pc, #248]	; (8001dfc <APPE_SysUserEvtRx+0x1e8>)
 8001d04:	f010 fbee 	bl	80124e4 <iprintf>
    APPE_SysEvtError(pPayload);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f885 	bl	8001e18 <APPE_SysEvtError>
    break;
 8001d0e:	e062      	b.n	8001dd6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8001d10:	4833      	ldr	r0, [pc, #204]	; (8001de0 <APPE_SysUserEvtRx+0x1cc>)
 8001d12:	f00b fadd 	bl	800d2d0 <DbgTraceGetFileName>
 8001d16:	4601      	mov	r1, r0
 8001d18:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 8001d1c:	4a31      	ldr	r2, [pc, #196]	; (8001de4 <APPE_SysUserEvtRx+0x1d0>)
 8001d1e:	4832      	ldr	r0, [pc, #200]	; (8001de8 <APPE_SysUserEvtRx+0x1d4>)
 8001d20:	f010 fbe0 	bl	80124e4 <iprintf>
 8001d24:	4836      	ldr	r0, [pc, #216]	; (8001e00 <APPE_SysUserEvtRx+0x1ec>)
 8001d26:	f010 fc4b 	bl	80125c0 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8001d2a:	482d      	ldr	r0, [pc, #180]	; (8001de0 <APPE_SysUserEvtRx+0x1cc>)
 8001d2c:	f00b fad0 	bl	800d2d0 <DbgTraceGetFileName>
 8001d30:	4601      	mov	r1, r0
 8001d32:	f240 138d 	movw	r3, #397	; 0x18d
 8001d36:	4a2b      	ldr	r2, [pc, #172]	; (8001de4 <APPE_SysUserEvtRx+0x1d0>)
 8001d38:	482b      	ldr	r0, [pc, #172]	; (8001de8 <APPE_SysUserEvtRx+0x1d4>)
 8001d3a:	f010 fbd3 	bl	80124e4 <iprintf>
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	3302      	adds	r3, #2
 8001d42:	6819      	ldr	r1, [r3, #0]
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	3302      	adds	r3, #2
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	482d      	ldr	r0, [pc, #180]	; (8001e04 <APPE_SysUserEvtRx+0x1f0>)
 8001d4e:	f010 fbc9 	bl	80124e4 <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 8001d52:	e040      	b.n	8001dd6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8001d54:	4822      	ldr	r0, [pc, #136]	; (8001de0 <APPE_SysUserEvtRx+0x1cc>)
 8001d56:	f00b fabb 	bl	800d2d0 <DbgTraceGetFileName>
 8001d5a:	4601      	mov	r1, r0
 8001d5c:	f240 1393 	movw	r3, #403	; 0x193
 8001d60:	4a20      	ldr	r2, [pc, #128]	; (8001de4 <APPE_SysUserEvtRx+0x1d0>)
 8001d62:	4821      	ldr	r0, [pc, #132]	; (8001de8 <APPE_SysUserEvtRx+0x1d4>)
 8001d64:	f010 fbbe 	bl	80124e4 <iprintf>
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	3302      	adds	r3, #2
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4825      	ldr	r0, [pc, #148]	; (8001e08 <APPE_SysUserEvtRx+0x1f4>)
 8001d72:	f010 fbb7 	bl	80124e4 <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 8001d76:	e02e      	b.n	8001dd6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8001d78:	4819      	ldr	r0, [pc, #100]	; (8001de0 <APPE_SysUserEvtRx+0x1cc>)
 8001d7a:	f00b faa9 	bl	800d2d0 <DbgTraceGetFileName>
 8001d7e:	4601      	mov	r1, r0
 8001d80:	f44f 73cc 	mov.w	r3, #408	; 0x198
 8001d84:	4a17      	ldr	r2, [pc, #92]	; (8001de4 <APPE_SysUserEvtRx+0x1d0>)
 8001d86:	4818      	ldr	r0, [pc, #96]	; (8001de8 <APPE_SysUserEvtRx+0x1d4>)
 8001d88:	f010 fbac 	bl	80124e4 <iprintf>
 8001d8c:	481f      	ldr	r0, [pc, #124]	; (8001e0c <APPE_SysUserEvtRx+0x1f8>)
 8001d8e:	f010 fba9 	bl	80124e4 <iprintf>
    break;
 8001d92:	e020      	b.n	8001dd6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8001d94:	4812      	ldr	r0, [pc, #72]	; (8001de0 <APPE_SysUserEvtRx+0x1cc>)
 8001d96:	f00b fa9b 	bl	800d2d0 <DbgTraceGetFileName>
 8001d9a:	4601      	mov	r1, r0
 8001d9c:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 8001da0:	4a10      	ldr	r2, [pc, #64]	; (8001de4 <APPE_SysUserEvtRx+0x1d0>)
 8001da2:	4811      	ldr	r0, [pc, #68]	; (8001de8 <APPE_SysUserEvtRx+0x1d4>)
 8001da4:	f010 fb9e 	bl	80124e4 <iprintf>
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	3302      	adds	r3, #2
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4619      	mov	r1, r3
 8001db0:	4817      	ldr	r0, [pc, #92]	; (8001e10 <APPE_SysUserEvtRx+0x1fc>)
 8001db2:	f010 fb97 	bl	80124e4 <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 8001db6:	e00e      	b.n	8001dd6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8001db8:	4809      	ldr	r0, [pc, #36]	; (8001de0 <APPE_SysUserEvtRx+0x1cc>)
 8001dba:	f00b fa89 	bl	800d2d0 <DbgTraceGetFileName>
 8001dbe:	4601      	mov	r1, r0
 8001dc0:	f240 13a1 	movw	r3, #417	; 0x1a1
 8001dc4:	4a07      	ldr	r2, [pc, #28]	; (8001de4 <APPE_SysUserEvtRx+0x1d0>)
 8001dc6:	4808      	ldr	r0, [pc, #32]	; (8001de8 <APPE_SysUserEvtRx+0x1d4>)
 8001dc8:	f010 fb8c 	bl	80124e4 <iprintf>
 8001dcc:	4811      	ldr	r0, [pc, #68]	; (8001e14 <APPE_SysUserEvtRx+0x200>)
 8001dce:	f010 fb89 	bl	80124e4 <iprintf>
    break;
 8001dd2:	e000      	b.n	8001dd6 <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 8001dd4:	bf00      	nop
  }

  return;
 8001dd6:	bf00      	nop
}
 8001dd8:	3720      	adds	r7, #32
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	08016248 	.word	0x08016248
 8001de4:	08018248 	.word	0x08018248
 8001de8:	08016260 	.word	0x08016260
 8001dec:	08016274 	.word	0x08016274
 8001df0:	08016298 	.word	0x08016298
 8001df4:	080162b4 	.word	0x080162b4
 8001df8:	080162cc 	.word	0x080162cc
 8001dfc:	080162ec 	.word	0x080162ec
 8001e00:	08016310 	.word	0x08016310
 8001e04:	08016360 	.word	0x08016360
 8001e08:	08016388 	.word	0x08016388
 8001e0c:	080163c4 	.word	0x080163c4
 8001e10:	080163e8 	.word	0x080163e8
 8001e14:	08016424 	.word	0x08016424

08001e18 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	330b      	adds	r3, #11
 8001e26:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	3302      	adds	r3, #2
 8001e2c:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8001e2e:	4819      	ldr	r0, [pc, #100]	; (8001e94 <APPE_SysEvtError+0x7c>)
 8001e30:	f00b fa4e 	bl	800d2d0 <DbgTraceGetFileName>
 8001e34:	4601      	mov	r1, r0
 8001e36:	f240 13b9 	movw	r3, #441	; 0x1b9
 8001e3a:	4a17      	ldr	r2, [pc, #92]	; (8001e98 <APPE_SysEvtError+0x80>)
 8001e3c:	4817      	ldr	r0, [pc, #92]	; (8001e9c <APPE_SysEvtError+0x84>)
 8001e3e:	f010 fb51 	bl	80124e4 <iprintf>
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	4619      	mov	r1, r3
 8001e48:	4815      	ldr	r0, [pc, #84]	; (8001ea0 <APPE_SysEvtError+0x88>)
 8001e4a:	f010 fb4b 	bl	80124e4 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10d      	bne.n	8001e72 <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8001e56:	480f      	ldr	r0, [pc, #60]	; (8001e94 <APPE_SysEvtError+0x7c>)
 8001e58:	f00b fa3a 	bl	800d2d0 <DbgTraceGetFileName>
 8001e5c:	4601      	mov	r1, r0
 8001e5e:	f44f 73df 	mov.w	r3, #446	; 0x1be
 8001e62:	4a0d      	ldr	r2, [pc, #52]	; (8001e98 <APPE_SysEvtError+0x80>)
 8001e64:	480d      	ldr	r0, [pc, #52]	; (8001e9c <APPE_SysEvtError+0x84>)
 8001e66:	f010 fb3d 	bl	80124e4 <iprintf>
 8001e6a:	480e      	ldr	r0, [pc, #56]	; (8001ea4 <APPE_SysEvtError+0x8c>)
 8001e6c:	f010 fba8 	bl	80125c0 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001e70:	e00d      	b.n	8001e8e <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8001e72:	4808      	ldr	r0, [pc, #32]	; (8001e94 <APPE_SysEvtError+0x7c>)
 8001e74:	f00b fa2c 	bl	800d2d0 <DbgTraceGetFileName>
 8001e78:	4601      	mov	r1, r0
 8001e7a:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8001e7e:	4a06      	ldr	r2, [pc, #24]	; (8001e98 <APPE_SysEvtError+0x80>)
 8001e80:	4806      	ldr	r0, [pc, #24]	; (8001e9c <APPE_SysEvtError+0x84>)
 8001e82:	f010 fb2f 	bl	80124e4 <iprintf>
 8001e86:	4808      	ldr	r0, [pc, #32]	; (8001ea8 <APPE_SysEvtError+0x90>)
 8001e88:	f010 fb9a 	bl	80125c0 <puts>
  return;
 8001e8c:	bf00      	nop
}
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	08016248 	.word	0x08016248
 8001e98:	0801825c 	.word	0x0801825c
 8001e9c:	08016260 	.word	0x08016260
 8001ea0:	08016448 	.word	0x08016448
 8001ea4:	08016478 	.word	0x08016478
 8001ea8:	080164b4 	.word	0x080164b4

08001eac <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08a      	sub	sp, #40	; 0x28
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001eb4:	f107 0308 	add.w	r3, r7, #8
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	330b      	adds	r3, #11
 8001ed0:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	3302      	adds	r3, #2
 8001ed6:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d146      	bne.n	8001f6e <APPE_SysEvtReadyProcessing+0xc2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8001ee0:	4836      	ldr	r0, [pc, #216]	; (8001fbc <APPE_SysEvtReadyProcessing+0x110>)
 8001ee2:	f00b f9f5 	bl	800d2d0 <DbgTraceGetFileName>
 8001ee6:	4601      	mov	r1, r0
 8001ee8:	f44f 73ec 	mov.w	r3, #472	; 0x1d8
 8001eec:	4a34      	ldr	r2, [pc, #208]	; (8001fc0 <APPE_SysEvtReadyProcessing+0x114>)
 8001eee:	4835      	ldr	r0, [pc, #212]	; (8001fc4 <APPE_SysEvtReadyProcessing+0x118>)
 8001ef0:	f010 faf8 	bl	80124e4 <iprintf>
 8001ef4:	4834      	ldr	r0, [pc, #208]	; (8001fc8 <APPE_SysEvtReadyProcessing+0x11c>)
 8001ef6:	f010 fb63 	bl	80125c0 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8001efa:	f7ff fbb7 	bl	800166c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8001efe:	230f      	movs	r3, #15
 8001f00:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8001f02:	237f      	movs	r3, #127	; 0x7f
 8001f04:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001f06:	f7ff fcab 	bl	8001860 <LL_DBGMCU_GetRevisionID>
 8001f0a:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8001f0c:	482b      	ldr	r0, [pc, #172]	; (8001fbc <APPE_SysEvtReadyProcessing+0x110>)
 8001f0e:	f00b f9df 	bl	800d2d0 <DbgTraceGetFileName>
 8001f12:	4601      	mov	r1, r0
 8001f14:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8001f18:	4a29      	ldr	r2, [pc, #164]	; (8001fc0 <APPE_SysEvtReadyProcessing+0x114>)
 8001f1a:	482a      	ldr	r0, [pc, #168]	; (8001fc4 <APPE_SysEvtReadyProcessing+0x118>)
 8001f1c:	f010 fae2 	bl	80124e4 <iprintf>
 8001f20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f22:	482a      	ldr	r0, [pc, #168]	; (8001fcc <APPE_SysEvtReadyProcessing+0x120>)
 8001f24:	f010 fade 	bl	80124e4 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8001f2e:	f7ff fc89 	bl	8001844 <LL_DBGMCU_GetDeviceID>
 8001f32:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8001f34:	4821      	ldr	r0, [pc, #132]	; (8001fbc <APPE_SysEvtReadyProcessing+0x110>)
 8001f36:	f00b f9cb 	bl	800d2d0 <DbgTraceGetFileName>
 8001f3a:	4601      	mov	r1, r0
 8001f3c:	f240 13f5 	movw	r3, #501	; 0x1f5
 8001f40:	4a1f      	ldr	r2, [pc, #124]	; (8001fc0 <APPE_SysEvtReadyProcessing+0x114>)
 8001f42:	4820      	ldr	r0, [pc, #128]	; (8001fc4 <APPE_SysEvtReadyProcessing+0x118>)
 8001f44:	f010 face 	bl	80124e4 <iprintf>
 8001f48:	6a39      	ldr	r1, [r7, #32]
 8001f4a:	4821      	ldr	r0, [pc, #132]	; (8001fd0 <APPE_SysEvtReadyProcessing+0x124>)
 8001f4c:	f010 faca 	bl	80124e4 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8001f50:	6a3b      	ldr	r3, [r7, #32]
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8001f56:	f107 0308 	add.w	r3, r7, #8
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f00a fbd8 	bl	800c710 <SHCI_C2_Config>

    APP_BLE_Init();
 8001f60:	f00b ff58 	bl	800de14 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001f64:	2100      	movs	r1, #0
 8001f66:	2001      	movs	r0, #1
 8001f68:	f00f f928 	bl	80111bc <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001f6c:	e022      	b.n	8001fb4 <APPE_SysEvtReadyProcessing+0x108>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d110      	bne.n	8001f98 <APPE_SysEvtReadyProcessing+0xec>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8001f76:	4811      	ldr	r0, [pc, #68]	; (8001fbc <APPE_SysEvtReadyProcessing+0x110>)
 8001f78:	f00b f9aa 	bl	800d2d0 <DbgTraceGetFileName>
 8001f7c:	4601      	mov	r1, r0
 8001f7e:	f240 2302 	movw	r3, #514	; 0x202
 8001f82:	4a0f      	ldr	r2, [pc, #60]	; (8001fc0 <APPE_SysEvtReadyProcessing+0x114>)
 8001f84:	480f      	ldr	r0, [pc, #60]	; (8001fc4 <APPE_SysEvtReadyProcessing+0x118>)
 8001f86:	f010 faad 	bl	80124e4 <iprintf>
 8001f8a:	4812      	ldr	r0, [pc, #72]	; (8001fd4 <APPE_SysEvtReadyProcessing+0x128>)
 8001f8c:	f010 faaa 	bl	80124e4 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	701a      	strb	r2, [r3, #0]
  return;
 8001f96:	e00d      	b.n	8001fb4 <APPE_SysEvtReadyProcessing+0x108>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8001f98:	4808      	ldr	r0, [pc, #32]	; (8001fbc <APPE_SysEvtReadyProcessing+0x110>)
 8001f9a:	f00b f999 	bl	800d2d0 <DbgTraceGetFileName>
 8001f9e:	4601      	mov	r1, r0
 8001fa0:	f240 2309 	movw	r3, #521	; 0x209
 8001fa4:	4a06      	ldr	r2, [pc, #24]	; (8001fc0 <APPE_SysEvtReadyProcessing+0x114>)
 8001fa6:	4807      	ldr	r0, [pc, #28]	; (8001fc4 <APPE_SysEvtReadyProcessing+0x118>)
 8001fa8:	f010 fa9c 	bl	80124e4 <iprintf>
 8001fac:	480a      	ldr	r0, [pc, #40]	; (8001fd8 <APPE_SysEvtReadyProcessing+0x12c>)
 8001fae:	f010 fa99 	bl	80124e4 <iprintf>
  return;
 8001fb2:	bf00      	nop
}
 8001fb4:	3728      	adds	r7, #40	; 0x28
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	08016248 	.word	0x08016248
 8001fc0:	08018270 	.word	0x08018270
 8001fc4:	08016260 	.word	0x08016260
 8001fc8:	080164ec 	.word	0x080164ec
 8001fcc:	08016508 	.word	0x08016508
 8001fd0:	0801652c 	.word	0x0801652c
 8001fd4:	0801654c 	.word	0x0801654c
 8001fd8:	08016580 	.word	0x08016580

08001fdc <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fe4:	f002 fe5e 	bl	8004ca4 <HAL_GetTick>
 8001fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff4:	d00a      	beq.n	800200c <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001ff6:	f002 fe6d 	bl	8004cd4 <HAL_GetTickFreq>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	4413      	add	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002004:	e002      	b.n	800200c <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8002006:	f7ff fc9b 	bl	8001940 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 800200a:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 800200c:	f002 fe4a 	bl	8004ca4 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	429a      	cmp	r2, r3
 800201a:	d8f4      	bhi.n	8002006 <HAL_Delay+0x2a>
  }
}
 800201c:	bf00      	nop
 800201e:	bf00      	nop
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800202a:	f04f 30ff 	mov.w	r0, #4294967295
 800202e:	f00f f8f5 	bl	801121c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}

08002036 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8002036:	b480      	push	{r7}
 8002038:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800203a:	bf00      	nop
}
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800204e:	f04f 30ff 	mov.w	r0, #4294967295
 8002052:	f00f f8e3 	bl	801121c <UTIL_SEQ_Run>
  return;
 8002056:	bf00      	nop
}
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8002066:	2100      	movs	r1, #0
 8002068:	2040      	movs	r0, #64	; 0x40
 800206a:	f00f f9f5 	bl	8011458 <UTIL_SEQ_SetTask>
  return;
 800206e:	bf00      	nop
}
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800207e:	2002      	movs	r0, #2
 8002080:	f00f fa56 	bl	8011530 <UTIL_SEQ_SetEvt>
  return;
 8002084:	bf00      	nop
}
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8002094:	2002      	movs	r0, #2
 8002096:	f00f fa6b 	bl	8011570 <UTIL_SEQ_WaitEvt>
  return;
 800209a:	bf00      	nop
}
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <LL_AHB2_GRP1_EnableClock>:
{
 80020a2:	b480      	push	{r7}
 80020a4:	b085      	sub	sp, #20
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80020aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80020ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4013      	ands	r3, r2
 80020c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020c6:	68fb      	ldr	r3, [r7, #12]
}
 80020c8:	bf00      	nop
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <MX_GPIO_Init>:
     PD10   ------> TSC_G6_IO1
     PE0   ------> S_TIM16_CH1
     PD11   ------> TSC_G6_IO2
*/
void MX_GPIO_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020da:	1d3b      	adds	r3, r7, #4
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
 80020e6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e8:	2001      	movs	r0, #1
 80020ea:	f7ff ffda 	bl	80020a2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ee:	2004      	movs	r0, #4
 80020f0:	f7ff ffd7 	bl	80020a2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f4:	2002      	movs	r0, #2
 80020f6:	f7ff ffd4 	bl	80020a2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020fa:	2008      	movs	r0, #8
 80020fc:	f7ff ffd1 	bl	80020a2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002100:	2010      	movs	r0, #16
 8002102:	f7ff ffce 	bl	80020a2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002106:	2080      	movs	r0, #128	; 0x80
 8002108:	f7ff ffcb 	bl	80020a2 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, CS_DISP_Pin|GPIO_SELECT2_Pin, GPIO_PIN_RESET);
 800210c:	2200      	movs	r2, #0
 800210e:	2103      	movs	r1, #3
 8002110:	48bd      	ldr	r0, [pc, #756]	; (8002408 <MX_GPIO_Init+0x334>)
 8002112:	f004 f909 	bl	8006328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Yellow_Led_Pin|Green_Led_Pin|Blue_Led_Pin|Red_Led_Pin, GPIO_PIN_SET);
 8002116:	2201      	movs	r2, #1
 8002118:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800211c:	48bb      	ldr	r0, [pc, #748]	; (800240c <MX_GPIO_Init+0x338>)
 800211e:	f004 f903 	bl	8006328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D_C_DISP_Pin|RST_DISP_Pin, GPIO_PIN_RESET);
 8002122:	2200      	movs	r2, #0
 8002124:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002128:	48b9      	ldr	r0, [pc, #740]	; (8002410 <MX_GPIO_Init+0x33c>)
 800212a:	f004 f8fd 	bl	8006328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 800212e:	2200      	movs	r2, #0
 8002130:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002134:	48b5      	ldr	r0, [pc, #724]	; (800240c <MX_GPIO_Init+0x338>)
 8002136:	f004 f8f7 	bl	8006328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_SELECT1_GPIO_Port, GPIO_SELECT1_Pin, GPIO_PIN_RESET);
 800213a:	2200      	movs	r2, #0
 800213c:	2104      	movs	r1, #4
 800213e:	48b5      	ldr	r0, [pc, #724]	; (8002414 <MX_GPIO_Init+0x340>)
 8002140:	f004 f8f2 	bl	8006328 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA7 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_4;
 8002144:	2392      	movs	r3, #146	; 0x92
 8002146:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002148:	2302      	movs	r3, #2
 800214a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002150:	2300      	movs	r3, #0
 8002152:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002154:	2305      	movs	r3, #5
 8002156:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002158:	1d3b      	adds	r3, r7, #4
 800215a:	4619      	mov	r1, r3
 800215c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002160:	f003 ff72 	bl	8006048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11;
 8002164:	f640 4304 	movw	r3, #3076	; 0xc04
 8002168:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800216a:	2300      	movs	r3, #0
 800216c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216e:	2300      	movs	r3, #0
 8002170:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002172:	1d3b      	adds	r3, r7, #4
 8002174:	4619      	mov	r1, r3
 8002176:	48a6      	ldr	r0, [pc, #664]	; (8002410 <MX_GPIO_Init+0x33c>)
 8002178:	f003 ff66 	bl	8006048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800217c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002180:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002182:	2312      	movs	r3, #18
 8002184:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218a:	2300      	movs	r3, #0
 800218c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800218e:	2304      	movs	r3, #4
 8002190:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002192:	1d3b      	adds	r3, r7, #4
 8002194:	4619      	mov	r1, r3
 8002196:	48a0      	ldr	r0, [pc, #640]	; (8002418 <MX_GPIO_Init+0x344>)
 8002198:	f003 ff56 	bl	8006048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 800219c:	23c0      	movs	r3, #192	; 0xc0
 800219e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a0:	2302      	movs	r3, #2
 80021a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a8:	2300      	movs	r3, #0
 80021aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021ac:	2307      	movs	r3, #7
 80021ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b0:	1d3b      	adds	r3, r7, #4
 80021b2:	4619      	mov	r1, r3
 80021b4:	4898      	ldr	r0, [pc, #608]	; (8002418 <MX_GPIO_Init+0x344>)
 80021b6:	f003 ff47 	bl	8006048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80021ba:	2310      	movs	r3, #16
 80021bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021be:	2302      	movs	r3, #2
 80021c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c6:	2300      	movs	r3, #0
 80021c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021ca:	2305      	movs	r3, #5
 80021cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ce:	1d3b      	adds	r3, r7, #4
 80021d0:	4619      	mov	r1, r3
 80021d2:	4891      	ldr	r0, [pc, #580]	; (8002418 <MX_GPIO_Init+0x344>)
 80021d4:	f003 ff38 	bl	8006048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC12 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 80021d8:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 80021dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021e8:	1d3b      	adds	r3, r7, #4
 80021ea:	4619      	mov	r1, r3
 80021ec:	4888      	ldr	r0, [pc, #544]	; (8002410 <MX_GPIO_Init+0x33c>)
 80021ee:	f003 ff2b 	bl	8006048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80021f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f8:	2302      	movs	r3, #2
 80021fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002200:	2300      	movs	r3, #0
 8002202:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002204:	2301      	movs	r3, #1
 8002206:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002208:	1d3b      	adds	r3, r7, #4
 800220a:	4619      	mov	r1, r3
 800220c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002210:	f003 ff1a 	bl	8006048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002218:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800221a:	2312      	movs	r3, #18
 800221c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002222:	2300      	movs	r3, #0
 8002224:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002226:	2304      	movs	r3, #4
 8002228:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800222a:	1d3b      	adds	r3, r7, #4
 800222c:	4619      	mov	r1, r3
 800222e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002232:	f003 ff09 	bl	8006048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_P_Pin|USB_N_Pin;
 8002236:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800223a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223c:	2302      	movs	r3, #2
 800223e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002244:	2300      	movs	r3, #0
 8002246:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002248:	230a      	movs	r3, #10
 800224a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224c:	1d3b      	adds	r3, r7, #4
 800224e:	4619      	mov	r1, r3
 8002250:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002254:	f003 fef8 	bl	8006048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002258:	2303      	movs	r3, #3
 800225a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225c:	2302      	movs	r3, #2
 800225e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002264:	2300      	movs	r3, #0
 8002266:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002268:	2305      	movs	r3, #5
 800226a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800226c:	1d3b      	adds	r3, r7, #4
 800226e:	4619      	mov	r1, r3
 8002270:	4866      	ldr	r0, [pc, #408]	; (800240c <MX_GPIO_Init+0x338>)
 8002272:	f003 fee9 	bl	8006048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800227a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227c:	2302      	movs	r3, #2
 800227e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002284:	2300      	movs	r3, #0
 8002286:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002288:	2305      	movs	r3, #5
 800228a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800228c:	1d3b      	adds	r3, r7, #4
 800228e:	4619      	mov	r1, r3
 8002290:	4861      	ldr	r0, [pc, #388]	; (8002418 <MX_GPIO_Init+0x344>)
 8002292:	f003 fed9 	bl	8006048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PEPin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|DRDY_Pin;
 8002296:	2312      	movs	r3, #18
 8002298:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800229a:	2300      	movs	r3, #0
 800229c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022a2:	1d3b      	adds	r3, r7, #4
 80022a4:	4619      	mov	r1, r3
 80022a6:	485b      	ldr	r0, [pc, #364]	; (8002414 <MX_GPIO_Init+0x340>)
 80022a8:	f003 fece 	bl	8006048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b2:	2302      	movs	r3, #2
 80022b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ba:	2300      	movs	r3, #0
 80022bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022be:	2301      	movs	r3, #1
 80022c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c2:	1d3b      	adds	r3, r7, #4
 80022c4:	4619      	mov	r1, r3
 80022c6:	4854      	ldr	r0, [pc, #336]	; (8002418 <MX_GPIO_Init+0x344>)
 80022c8:	f003 febe 	bl	8006048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022cc:	2304      	movs	r3, #4
 80022ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022d0:	2300      	movs	r3, #0
 80022d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d8:	1d3b      	adds	r3, r7, #4
 80022da:	4619      	mov	r1, r3
 80022dc:	484e      	ldr	r0, [pc, #312]	; (8002418 <MX_GPIO_Init+0x344>)
 80022de:	f003 feb3 	bl	8006048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SAI1_CK2_Pin|SAI1_D2_Pin;
 80022e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e8:	2302      	movs	r3, #2
 80022ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f0:	2300      	movs	r3, #0
 80022f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF3_SAI1;
 80022f4:	2303      	movs	r3, #3
 80022f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f8:	1d3b      	adds	r3, r7, #4
 80022fa:	4619      	mov	r1, r3
 80022fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002300:	f003 fea2 	bl	8006048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = CS_DISP_Pin|GPIO_SELECT2_Pin;
 8002304:	2303      	movs	r3, #3
 8002306:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002308:	2301      	movs	r3, #1
 800230a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002310:	2300      	movs	r3, #0
 8002312:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002314:	1d3b      	adds	r3, r7, #4
 8002316:	4619      	mov	r1, r3
 8002318:	483b      	ldr	r0, [pc, #236]	; (8002408 <MX_GPIO_Init+0x334>)
 800231a:	f003 fe95 	bl	8006048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PD8
                           PDPin */
  GPIO_InitStruct.Pin = Yellow_Led_Pin|Green_Led_Pin|Blue_Led_Pin|GPIO_PIN_8
 800231e:	f44f 4371 	mov.w	r3, #61696	; 0xf100
 8002322:	607b      	str	r3, [r7, #4]
                          |Red_Led_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002324:	2301      	movs	r3, #1
 8002326:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232c:	2300      	movs	r3, #0
 800232e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002330:	1d3b      	adds	r3, r7, #4
 8002332:	4619      	mov	r1, r3
 8002334:	4835      	ldr	r0, [pc, #212]	; (800240c <MX_GPIO_Init+0x338>)
 8002336:	f003 fe87 	bl	8006048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = EOC_Pin|PWR_Pin;
 800233a:	f44f 7301 	mov.w	r3, #516	; 0x204
 800233e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002340:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002344:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800234a:	1d3b      	adds	r3, r7, #4
 800234c:	4619      	mov	r1, r3
 800234e:	482f      	ldr	r0, [pc, #188]	; (800240c <MX_GPIO_Init+0x338>)
 8002350:	f003 fe7a 	bl	8006048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = D_C_DISP_Pin|RST_DISP_Pin;
 8002354:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002358:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800235a:	2301      	movs	r3, #1
 800235c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002362:	2300      	movs	r3, #0
 8002364:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002366:	1d3b      	adds	r3, r7, #4
 8002368:	4619      	mov	r1, r3
 800236a:	4829      	ldr	r0, [pc, #164]	; (8002410 <MX_GPIO_Init+0x33c>)
 800236c:	f003 fe6c 	bl	8006048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TSC_G4_IO2_Pin;
 8002370:	2380      	movs	r3, #128	; 0x80
 8002372:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002374:	2302      	movs	r3, #2
 8002376:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237c:	2300      	movs	r3, #0
 800237e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 8002380:	2309      	movs	r3, #9
 8002382:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TSC_G4_IO2_GPIO_Port, &GPIO_InitStruct);
 8002384:	1d3b      	adds	r3, r7, #4
 8002386:	4619      	mov	r1, r3
 8002388:	4821      	ldr	r0, [pc, #132]	; (8002410 <MX_GPIO_Init+0x33c>)
 800238a:	f003 fe5d 	bl	8006048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800238e:	2308      	movs	r3, #8
 8002390:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002392:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002396:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800239c:	1d3b      	adds	r3, r7, #4
 800239e:	4619      	mov	r1, r3
 80023a0:	481c      	ldr	r0, [pc, #112]	; (8002414 <MX_GPIO_Init+0x340>)
 80023a2:	f003 fe51 	bl	8006048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80023a6:	2310      	movs	r3, #16
 80023a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023aa:	2300      	movs	r3, #0
 80023ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023b2:	1d3b      	adds	r3, r7, #4
 80023b4:	4619      	mov	r1, r3
 80023b6:	4815      	ldr	r0, [pc, #84]	; (800240c <MX_GPIO_Init+0x338>)
 80023b8:	f003 fe46 	bl	8006048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = TSC_G6_IO1_Pin|TSC_G6_IO2_Pin;
 80023bc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80023c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c2:	2302      	movs	r3, #2
 80023c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ca:	2300      	movs	r3, #0
 80023cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 80023ce:	2309      	movs	r3, #9
 80023d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023d2:	1d3b      	adds	r3, r7, #4
 80023d4:	4619      	mov	r1, r3
 80023d6:	480d      	ldr	r0, [pc, #52]	; (800240c <MX_GPIO_Init+0x338>)
 80023d8:	f003 fe36 	bl	8006048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_SELECT1_Pin;
 80023dc:	2304      	movs	r3, #4
 80023de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023e0:	2301      	movs	r3, #1
 80023e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e8:	2300      	movs	r3, #0
 80023ea:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIO_SELECT1_GPIO_Port, &GPIO_InitStruct);
 80023ec:	1d3b      	adds	r3, r7, #4
 80023ee:	4619      	mov	r1, r3
 80023f0:	4808      	ldr	r0, [pc, #32]	; (8002414 <MX_GPIO_Init+0x340>)
 80023f2:	f003 fe29 	bl	8006048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023f6:	2301      	movs	r3, #1
 80023f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fa:	2302      	movs	r3, #2
 80023fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fe:	2300      	movs	r3, #0
 8002400:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002402:	2300      	movs	r3, #0
 8002404:	e00a      	b.n	800241c <MX_GPIO_Init+0x348>
 8002406:	bf00      	nop
 8002408:	48001c00 	.word	0x48001c00
 800240c:	48000c00 	.word	0x48000c00
 8002410:	48000800 	.word	0x48000800
 8002414:	48001000 	.word	0x48001000
 8002418:	48000400 	.word	0x48000400
 800241c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 800241e:	230e      	movs	r3, #14
 8002420:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002422:	1d3b      	adds	r3, r7, #4
 8002424:	4619      	mov	r1, r3
 8002426:	4803      	ldr	r0, [pc, #12]	; (8002434 <MX_GPIO_Init+0x360>)
 8002428:	f003 fe0e 	bl	8006048 <HAL_GPIO_Init>

}
 800242c:	bf00      	nop
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	48001000 	.word	0x48001000

08002438 <LL_EXTI_EnableIT_0_31>:
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002440:	4b06      	ldr	r3, [pc, #24]	; (800245c <LL_EXTI_EnableIT_0_31+0x24>)
 8002442:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002446:	4905      	ldr	r1, [pc, #20]	; (800245c <LL_EXTI_EnableIT_0_31+0x24>)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4313      	orrs	r3, r2
 800244c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	58000800 	.word	0x58000800

08002460 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	4904      	ldr	r1, [pc, #16]	; (8002480 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4313      	orrs	r3, r2
 8002472:	600b      	str	r3, [r1, #0]

}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	58000800 	.word	0x58000800

08002484 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800248a:	4b0d      	ldr	r3, [pc, #52]	; (80024c0 <ReadRtcSsrValue+0x3c>)
 800248c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248e:	b29b      	uxth	r3, r3
 8002490:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002492:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <ReadRtcSsrValue+0x3c>)
 8002494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002496:	b29b      	uxth	r3, r3
 8002498:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800249a:	e005      	b.n	80024a8 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80024a0:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <ReadRtcSsrValue+0x3c>)
 80024a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d1f5      	bne.n	800249c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80024b0:	683b      	ldr	r3, [r7, #0]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	40002800 	.word	0x40002800

080024c4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	460a      	mov	r2, r1
 80024ce:	71fb      	strb	r3, [r7, #7]
 80024d0:	4613      	mov	r3, r2
 80024d2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80024d4:	79ba      	ldrb	r2, [r7, #6]
 80024d6:	491d      	ldr	r1, [pc, #116]	; (800254c <LinkTimerAfter+0x88>)
 80024d8:	4613      	mov	r3, r2
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	4413      	add	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	440b      	add	r3, r1
 80024e2:	3315      	adds	r3, #21
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
 80024ea:	2b06      	cmp	r3, #6
 80024ec:	d009      	beq.n	8002502 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80024ee:	7bfa      	ldrb	r2, [r7, #15]
 80024f0:	4916      	ldr	r1, [pc, #88]	; (800254c <LinkTimerAfter+0x88>)
 80024f2:	4613      	mov	r3, r2
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	4413      	add	r3, r2
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	440b      	add	r3, r1
 80024fc:	3314      	adds	r3, #20
 80024fe:	79fa      	ldrb	r2, [r7, #7]
 8002500:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8002502:	79fa      	ldrb	r2, [r7, #7]
 8002504:	4911      	ldr	r1, [pc, #68]	; (800254c <LinkTimerAfter+0x88>)
 8002506:	4613      	mov	r3, r2
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	4413      	add	r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	440b      	add	r3, r1
 8002510:	3315      	adds	r3, #21
 8002512:	7bfa      	ldrb	r2, [r7, #15]
 8002514:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002516:	79fa      	ldrb	r2, [r7, #7]
 8002518:	490c      	ldr	r1, [pc, #48]	; (800254c <LinkTimerAfter+0x88>)
 800251a:	4613      	mov	r3, r2
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	4413      	add	r3, r2
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	440b      	add	r3, r1
 8002524:	3314      	adds	r3, #20
 8002526:	79ba      	ldrb	r2, [r7, #6]
 8002528:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800252a:	79ba      	ldrb	r2, [r7, #6]
 800252c:	4907      	ldr	r1, [pc, #28]	; (800254c <LinkTimerAfter+0x88>)
 800252e:	4613      	mov	r3, r2
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	4413      	add	r3, r2
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	440b      	add	r3, r1
 8002538:	3315      	adds	r3, #21
 800253a:	79fa      	ldrb	r2, [r7, #7]
 800253c:	701a      	strb	r2, [r3, #0]

  return;
 800253e:	bf00      	nop
}
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	2000033c 	.word	0x2000033c

08002550 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	460a      	mov	r2, r1
 800255a:	71fb      	strb	r3, [r7, #7]
 800255c:	4613      	mov	r3, r2
 800255e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002560:	4b29      	ldr	r3, [pc, #164]	; (8002608 <LinkTimerBefore+0xb8>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	b2db      	uxtb	r3, r3
 8002566:	79ba      	ldrb	r2, [r7, #6]
 8002568:	429a      	cmp	r2, r3
 800256a:	d032      	beq.n	80025d2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 800256c:	79ba      	ldrb	r2, [r7, #6]
 800256e:	4927      	ldr	r1, [pc, #156]	; (800260c <LinkTimerBefore+0xbc>)
 8002570:	4613      	mov	r3, r2
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	4413      	add	r3, r2
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	440b      	add	r3, r1
 800257a:	3314      	adds	r3, #20
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002580:	7bfa      	ldrb	r2, [r7, #15]
 8002582:	4922      	ldr	r1, [pc, #136]	; (800260c <LinkTimerBefore+0xbc>)
 8002584:	4613      	mov	r3, r2
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	4413      	add	r3, r2
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	440b      	add	r3, r1
 800258e:	3315      	adds	r3, #21
 8002590:	79fa      	ldrb	r2, [r7, #7]
 8002592:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002594:	79fa      	ldrb	r2, [r7, #7]
 8002596:	491d      	ldr	r1, [pc, #116]	; (800260c <LinkTimerBefore+0xbc>)
 8002598:	4613      	mov	r3, r2
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	4413      	add	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	440b      	add	r3, r1
 80025a2:	3315      	adds	r3, #21
 80025a4:	79ba      	ldrb	r2, [r7, #6]
 80025a6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80025a8:	79fa      	ldrb	r2, [r7, #7]
 80025aa:	4918      	ldr	r1, [pc, #96]	; (800260c <LinkTimerBefore+0xbc>)
 80025ac:	4613      	mov	r3, r2
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	4413      	add	r3, r2
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	440b      	add	r3, r1
 80025b6:	3314      	adds	r3, #20
 80025b8:	7bfa      	ldrb	r2, [r7, #15]
 80025ba:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80025bc:	79ba      	ldrb	r2, [r7, #6]
 80025be:	4913      	ldr	r1, [pc, #76]	; (800260c <LinkTimerBefore+0xbc>)
 80025c0:	4613      	mov	r3, r2
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	4413      	add	r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	440b      	add	r3, r1
 80025ca:	3314      	adds	r3, #20
 80025cc:	79fa      	ldrb	r2, [r7, #7]
 80025ce:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80025d0:	e014      	b.n	80025fc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80025d2:	79fa      	ldrb	r2, [r7, #7]
 80025d4:	490d      	ldr	r1, [pc, #52]	; (800260c <LinkTimerBefore+0xbc>)
 80025d6:	4613      	mov	r3, r2
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	4413      	add	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	440b      	add	r3, r1
 80025e0:	3315      	adds	r3, #21
 80025e2:	79ba      	ldrb	r2, [r7, #6]
 80025e4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80025e6:	79ba      	ldrb	r2, [r7, #6]
 80025e8:	4908      	ldr	r1, [pc, #32]	; (800260c <LinkTimerBefore+0xbc>)
 80025ea:	4613      	mov	r3, r2
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	4413      	add	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	440b      	add	r3, r1
 80025f4:	3314      	adds	r3, #20
 80025f6:	79fa      	ldrb	r2, [r7, #7]
 80025f8:	701a      	strb	r2, [r3, #0]
  return;
 80025fa:	bf00      	nop
}
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	200003cc 	.word	0x200003cc
 800260c:	2000033c 	.word	0x2000033c

08002610 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800261a:	4b4e      	ldr	r3, [pc, #312]	; (8002754 <linkTimer+0x144>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b06      	cmp	r3, #6
 8002622:	d118      	bne.n	8002656 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002624:	4b4b      	ldr	r3, [pc, #300]	; (8002754 <linkTimer+0x144>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	b2da      	uxtb	r2, r3
 800262a:	4b4b      	ldr	r3, [pc, #300]	; (8002758 <linkTimer+0x148>)
 800262c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800262e:	4a49      	ldr	r2, [pc, #292]	; (8002754 <linkTimer+0x144>)
 8002630:	79fb      	ldrb	r3, [r7, #7]
 8002632:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002634:	79fa      	ldrb	r2, [r7, #7]
 8002636:	4949      	ldr	r1, [pc, #292]	; (800275c <linkTimer+0x14c>)
 8002638:	4613      	mov	r3, r2
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	4413      	add	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	440b      	add	r3, r1
 8002642:	3315      	adds	r3, #21
 8002644:	2206      	movs	r2, #6
 8002646:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002648:	4b45      	ldr	r3, [pc, #276]	; (8002760 <linkTimer+0x150>)
 800264a:	f04f 32ff 	mov.w	r2, #4294967295
 800264e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	81fb      	strh	r3, [r7, #14]
 8002654:	e078      	b.n	8002748 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8002656:	f000 f909 	bl	800286c <ReturnTimeElapsed>
 800265a:	4603      	mov	r3, r0
 800265c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800265e:	79fa      	ldrb	r2, [r7, #7]
 8002660:	493e      	ldr	r1, [pc, #248]	; (800275c <linkTimer+0x14c>)
 8002662:	4613      	mov	r3, r2
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	4413      	add	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	440b      	add	r3, r1
 800266c:	3308      	adds	r3, #8
 800266e:	6819      	ldr	r1, [r3, #0]
 8002670:	89fb      	ldrh	r3, [r7, #14]
 8002672:	79fa      	ldrb	r2, [r7, #7]
 8002674:	4419      	add	r1, r3
 8002676:	4839      	ldr	r0, [pc, #228]	; (800275c <linkTimer+0x14c>)
 8002678:	4613      	mov	r3, r2
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	4413      	add	r3, r2
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	4403      	add	r3, r0
 8002682:	3308      	adds	r3, #8
 8002684:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8002686:	79fa      	ldrb	r2, [r7, #7]
 8002688:	4934      	ldr	r1, [pc, #208]	; (800275c <linkTimer+0x14c>)
 800268a:	4613      	mov	r3, r2
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	4413      	add	r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	440b      	add	r3, r1
 8002694:	3308      	adds	r3, #8
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800269a:	4b2e      	ldr	r3, [pc, #184]	; (8002754 <linkTimer+0x144>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	4619      	mov	r1, r3
 80026a2:	4a2e      	ldr	r2, [pc, #184]	; (800275c <linkTimer+0x14c>)
 80026a4:	460b      	mov	r3, r1
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	440b      	add	r3, r1
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	4413      	add	r3, r2
 80026ae:	3308      	adds	r3, #8
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d337      	bcc.n	8002728 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80026b8:	4b26      	ldr	r3, [pc, #152]	; (8002754 <linkTimer+0x144>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80026be:	7b7a      	ldrb	r2, [r7, #13]
 80026c0:	4926      	ldr	r1, [pc, #152]	; (800275c <linkTimer+0x14c>)
 80026c2:	4613      	mov	r3, r2
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	4413      	add	r3, r2
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	440b      	add	r3, r1
 80026cc:	3315      	adds	r3, #21
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80026d2:	e013      	b.n	80026fc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80026d4:	7b7a      	ldrb	r2, [r7, #13]
 80026d6:	4921      	ldr	r1, [pc, #132]	; (800275c <linkTimer+0x14c>)
 80026d8:	4613      	mov	r3, r2
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	4413      	add	r3, r2
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	440b      	add	r3, r1
 80026e2:	3315      	adds	r3, #21
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80026e8:	7b7a      	ldrb	r2, [r7, #13]
 80026ea:	491c      	ldr	r1, [pc, #112]	; (800275c <linkTimer+0x14c>)
 80026ec:	4613      	mov	r3, r2
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	4413      	add	r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	440b      	add	r3, r1
 80026f6:	3315      	adds	r3, #21
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80026fc:	7b3b      	ldrb	r3, [r7, #12]
 80026fe:	2b06      	cmp	r3, #6
 8002700:	d00b      	beq.n	800271a <linkTimer+0x10a>
 8002702:	7b3a      	ldrb	r2, [r7, #12]
 8002704:	4915      	ldr	r1, [pc, #84]	; (800275c <linkTimer+0x14c>)
 8002706:	4613      	mov	r3, r2
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	4413      	add	r3, r2
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	440b      	add	r3, r1
 8002710:	3308      	adds	r3, #8
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	429a      	cmp	r2, r3
 8002718:	d2dc      	bcs.n	80026d4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800271a:	7b7a      	ldrb	r2, [r7, #13]
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	4611      	mov	r1, r2
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff fecf 	bl	80024c4 <LinkTimerAfter>
 8002726:	e00f      	b.n	8002748 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8002728:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <linkTimer+0x144>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	b2da      	uxtb	r2, r3
 800272e:	79fb      	ldrb	r3, [r7, #7]
 8002730:	4611      	mov	r1, r2
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff ff0c 	bl	8002550 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8002738:	4b06      	ldr	r3, [pc, #24]	; (8002754 <linkTimer+0x144>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	b2da      	uxtb	r2, r3
 800273e:	4b06      	ldr	r3, [pc, #24]	; (8002758 <linkTimer+0x148>)
 8002740:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8002742:	4a04      	ldr	r2, [pc, #16]	; (8002754 <linkTimer+0x144>)
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8002748:	89fb      	ldrh	r3, [r7, #14]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	200003cc 	.word	0x200003cc
 8002758:	200003cd 	.word	0x200003cd
 800275c:	2000033c 	.word	0x2000033c
 8002760:	200003d0 	.word	0x200003d0

08002764 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	460a      	mov	r2, r1
 800276e:	71fb      	strb	r3, [r7, #7]
 8002770:	4613      	mov	r3, r2
 8002772:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002774:	4b39      	ldr	r3, [pc, #228]	; (800285c <UnlinkTimer+0xf8>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	b2db      	uxtb	r3, r3
 800277a:	79fa      	ldrb	r2, [r7, #7]
 800277c:	429a      	cmp	r2, r3
 800277e:	d111      	bne.n	80027a4 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002780:	4b36      	ldr	r3, [pc, #216]	; (800285c <UnlinkTimer+0xf8>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	b2da      	uxtb	r2, r3
 8002786:	4b36      	ldr	r3, [pc, #216]	; (8002860 <UnlinkTimer+0xfc>)
 8002788:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800278a:	79fa      	ldrb	r2, [r7, #7]
 800278c:	4935      	ldr	r1, [pc, #212]	; (8002864 <UnlinkTimer+0x100>)
 800278e:	4613      	mov	r3, r2
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	4413      	add	r3, r2
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	440b      	add	r3, r1
 8002798:	3315      	adds	r3, #21
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	b2da      	uxtb	r2, r3
 800279e:	4b2f      	ldr	r3, [pc, #188]	; (800285c <UnlinkTimer+0xf8>)
 80027a0:	701a      	strb	r2, [r3, #0]
 80027a2:	e03e      	b.n	8002822 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80027a4:	79fa      	ldrb	r2, [r7, #7]
 80027a6:	492f      	ldr	r1, [pc, #188]	; (8002864 <UnlinkTimer+0x100>)
 80027a8:	4613      	mov	r3, r2
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	4413      	add	r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	440b      	add	r3, r1
 80027b2:	3314      	adds	r3, #20
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80027b8:	79fa      	ldrb	r2, [r7, #7]
 80027ba:	492a      	ldr	r1, [pc, #168]	; (8002864 <UnlinkTimer+0x100>)
 80027bc:	4613      	mov	r3, r2
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	4413      	add	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	440b      	add	r3, r1
 80027c6:	3315      	adds	r3, #21
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80027cc:	79f9      	ldrb	r1, [r7, #7]
 80027ce:	7bfa      	ldrb	r2, [r7, #15]
 80027d0:	4824      	ldr	r0, [pc, #144]	; (8002864 <UnlinkTimer+0x100>)
 80027d2:	460b      	mov	r3, r1
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	440b      	add	r3, r1
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	4403      	add	r3, r0
 80027dc:	3315      	adds	r3, #21
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	b2d8      	uxtb	r0, r3
 80027e2:	4920      	ldr	r1, [pc, #128]	; (8002864 <UnlinkTimer+0x100>)
 80027e4:	4613      	mov	r3, r2
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	4413      	add	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	440b      	add	r3, r1
 80027ee:	3315      	adds	r3, #21
 80027f0:	4602      	mov	r2, r0
 80027f2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80027f4:	7bbb      	ldrb	r3, [r7, #14]
 80027f6:	2b06      	cmp	r3, #6
 80027f8:	d013      	beq.n	8002822 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80027fa:	79f9      	ldrb	r1, [r7, #7]
 80027fc:	7bba      	ldrb	r2, [r7, #14]
 80027fe:	4819      	ldr	r0, [pc, #100]	; (8002864 <UnlinkTimer+0x100>)
 8002800:	460b      	mov	r3, r1
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	440b      	add	r3, r1
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	4403      	add	r3, r0
 800280a:	3314      	adds	r3, #20
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	b2d8      	uxtb	r0, r3
 8002810:	4914      	ldr	r1, [pc, #80]	; (8002864 <UnlinkTimer+0x100>)
 8002812:	4613      	mov	r3, r2
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	4413      	add	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	440b      	add	r3, r1
 800281c:	3314      	adds	r3, #20
 800281e:	4602      	mov	r2, r0
 8002820:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8002822:	79fa      	ldrb	r2, [r7, #7]
 8002824:	490f      	ldr	r1, [pc, #60]	; (8002864 <UnlinkTimer+0x100>)
 8002826:	4613      	mov	r3, r2
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	4413      	add	r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	440b      	add	r3, r1
 8002830:	330c      	adds	r3, #12
 8002832:	2201      	movs	r2, #1
 8002834:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8002836:	4b09      	ldr	r3, [pc, #36]	; (800285c <UnlinkTimer+0xf8>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b06      	cmp	r3, #6
 800283e:	d107      	bne.n	8002850 <UnlinkTimer+0xec>
 8002840:	79bb      	ldrb	r3, [r7, #6]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d104      	bne.n	8002850 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002846:	4b08      	ldr	r3, [pc, #32]	; (8002868 <UnlinkTimer+0x104>)
 8002848:	f04f 32ff 	mov.w	r2, #4294967295
 800284c:	601a      	str	r2, [r3, #0]
  }

  return;
 800284e:	bf00      	nop
 8002850:	bf00      	nop
}
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	200003cc 	.word	0x200003cc
 8002860:	200003cd 	.word	0x200003cd
 8002864:	2000033c 	.word	0x2000033c
 8002868:	200003d0 	.word	0x200003d0

0800286c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8002872:	4b1a      	ldr	r3, [pc, #104]	; (80028dc <ReturnTimeElapsed+0x70>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800287a:	d026      	beq.n	80028ca <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 800287c:	f7ff fe02 	bl	8002484 <ReadRtcSsrValue>
 8002880:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8002882:	4b16      	ldr	r3, [pc, #88]	; (80028dc <ReturnTimeElapsed+0x70>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	429a      	cmp	r2, r3
 800288a:	d805      	bhi.n	8002898 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 800288c:	4b13      	ldr	r3, [pc, #76]	; (80028dc <ReturnTimeElapsed+0x70>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	607b      	str	r3, [r7, #4]
 8002896:	e00a      	b.n	80028ae <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8002898:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <ReturnTimeElapsed+0x74>)
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	461a      	mov	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80028a4:	4b0d      	ldr	r3, [pc, #52]	; (80028dc <ReturnTimeElapsed+0x70>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	4413      	add	r3, r2
 80028ac:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80028ae:	4b0d      	ldr	r3, [pc, #52]	; (80028e4 <ReturnTimeElapsed+0x78>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	461a      	mov	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	fb02 f303 	mul.w	r3, r2, r3
 80028ba:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80028bc:	4b0a      	ldr	r3, [pc, #40]	; (80028e8 <ReturnTimeElapsed+0x7c>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	461a      	mov	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	40d3      	lsrs	r3, r2
 80028c6:	607b      	str	r3, [r7, #4]
 80028c8:	e001      	b.n	80028ce <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80028ca:	2300      	movs	r3, #0
 80028cc:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	b29b      	uxth	r3, r3
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	200003d0 	.word	0x200003d0
 80028e0:	200003d8 	.word	0x200003d8
 80028e4:	200003d6 	.word	0x200003d6
 80028e8:	200003d5 	.word	0x200003d5

080028ec <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80028f6:	88fb      	ldrh	r3, [r7, #6]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d108      	bne.n	800290e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80028fc:	f7ff fdc2 	bl	8002484 <ReadRtcSsrValue>
 8002900:	4603      	mov	r3, r0
 8002902:	4a21      	ldr	r2, [pc, #132]	; (8002988 <RestartWakeupCounter+0x9c>)
 8002904:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002906:	2003      	movs	r0, #3
 8002908:	f003 fa0b 	bl	8005d22 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 800290c:	e039      	b.n	8002982 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800290e:	88fb      	ldrh	r3, [r7, #6]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d803      	bhi.n	800291c <RestartWakeupCounter+0x30>
 8002914:	4b1d      	ldr	r3, [pc, #116]	; (800298c <RestartWakeupCounter+0xa0>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d002      	beq.n	8002922 <RestartWakeupCounter+0x36>
      Value -= 1;
 800291c:	88fb      	ldrh	r3, [r7, #6]
 800291e:	3b01      	subs	r3, #1
 8002920:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002922:	bf00      	nop
 8002924:	4b1a      	ldr	r3, [pc, #104]	; (8002990 <RestartWakeupCounter+0xa4>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	f003 0304 	and.w	r3, r3, #4
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0f8      	beq.n	8002924 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002932:	4b17      	ldr	r3, [pc, #92]	; (8002990 <RestartWakeupCounter+0xa4>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	b2da      	uxtb	r2, r3
 800293a:	4b15      	ldr	r3, [pc, #84]	; (8002990 <RestartWakeupCounter+0xa4>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002942:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002944:	4b13      	ldr	r3, [pc, #76]	; (8002994 <RestartWakeupCounter+0xa8>)
 8002946:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800294a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800294c:	2003      	movs	r0, #3
 800294e:	f003 f9f6 	bl	8005d3e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8002952:	4b11      	ldr	r3, [pc, #68]	; (8002998 <RestartWakeupCounter+0xac>)
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	0c1b      	lsrs	r3, r3, #16
 8002958:	041b      	lsls	r3, r3, #16
 800295a:	88fa      	ldrh	r2, [r7, #6]
 800295c:	490e      	ldr	r1, [pc, #56]	; (8002998 <RestartWakeupCounter+0xac>)
 800295e:	4313      	orrs	r3, r2
 8002960:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002962:	f7ff fd8f 	bl	8002484 <ReadRtcSsrValue>
 8002966:	4603      	mov	r3, r0
 8002968:	4a07      	ldr	r2, [pc, #28]	; (8002988 <RestartWakeupCounter+0x9c>)
 800296a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 800296c:	4b08      	ldr	r3, [pc, #32]	; (8002990 <RestartWakeupCounter+0xa4>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	4b07      	ldr	r3, [pc, #28]	; (8002990 <RestartWakeupCounter+0xa4>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800297a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 800297c:	f3af 8000 	nop.w
  return ;
 8002980:	bf00      	nop
}
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	200003d0 	.word	0x200003d0
 800298c:	200003d5 	.word	0x200003d5
 8002990:	200004c4 	.word	0x200004c4
 8002994:	58000800 	.word	0x58000800
 8002998:	40002800 	.word	0x40002800

0800299c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80029a2:	4b45      	ldr	r3, [pc, #276]	; (8002ab8 <RescheduleTimerList+0x11c>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ae:	d107      	bne.n	80029c0 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80029b0:	bf00      	nop
 80029b2:	4b42      	ldr	r3, [pc, #264]	; (8002abc <RescheduleTimerList+0x120>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1f8      	bne.n	80029b2 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80029c0:	4b3e      	ldr	r3, [pc, #248]	; (8002abc <RescheduleTimerList+0x120>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	4b3d      	ldr	r3, [pc, #244]	; (8002abc <RescheduleTimerList+0x120>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ce:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80029d0:	4b3b      	ldr	r3, [pc, #236]	; (8002ac0 <RescheduleTimerList+0x124>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80029d6:	7bfa      	ldrb	r2, [r7, #15]
 80029d8:	493a      	ldr	r1, [pc, #232]	; (8002ac4 <RescheduleTimerList+0x128>)
 80029da:	4613      	mov	r3, r2
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	4413      	add	r3, r2
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	440b      	add	r3, r1
 80029e4:	3308      	adds	r3, #8
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80029ea:	f7ff ff3f 	bl	800286c <ReturnTimeElapsed>
 80029ee:	4603      	mov	r3, r0
 80029f0:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80029f2:	88fb      	ldrh	r3, [r7, #6]
 80029f4:	68ba      	ldr	r2, [r7, #8]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d205      	bcs.n	8002a06 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80029fe:	4b32      	ldr	r3, [pc, #200]	; (8002ac8 <RescheduleTimerList+0x12c>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	701a      	strb	r2, [r3, #0]
 8002a04:	e04d      	b.n	8002aa2 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8002a06:	88fb      	ldrh	r3, [r7, #6]
 8002a08:	4a30      	ldr	r2, [pc, #192]	; (8002acc <RescheduleTimerList+0x130>)
 8002a0a:	8812      	ldrh	r2, [r2, #0]
 8002a0c:	b292      	uxth	r2, r2
 8002a0e:	4413      	add	r3, r2
 8002a10:	461a      	mov	r2, r3
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d906      	bls.n	8002a26 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8002a18:	4b2c      	ldr	r3, [pc, #176]	; (8002acc <RescheduleTimerList+0x130>)
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8002a1e:	4b2a      	ldr	r3, [pc, #168]	; (8002ac8 <RescheduleTimerList+0x12c>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	701a      	strb	r2, [r3, #0]
 8002a24:	e03d      	b.n	8002aa2 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	88fb      	ldrh	r3, [r7, #6]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002a30:	4b25      	ldr	r3, [pc, #148]	; (8002ac8 <RescheduleTimerList+0x12c>)
 8002a32:	2201      	movs	r2, #1
 8002a34:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002a36:	e034      	b.n	8002aa2 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8002a38:	7bfa      	ldrb	r2, [r7, #15]
 8002a3a:	4922      	ldr	r1, [pc, #136]	; (8002ac4 <RescheduleTimerList+0x128>)
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	4413      	add	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	440b      	add	r3, r1
 8002a46:	3308      	adds	r3, #8
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	88fb      	ldrh	r3, [r7, #6]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d20a      	bcs.n	8002a66 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8002a50:	7bfa      	ldrb	r2, [r7, #15]
 8002a52:	491c      	ldr	r1, [pc, #112]	; (8002ac4 <RescheduleTimerList+0x128>)
 8002a54:	4613      	mov	r3, r2
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	4413      	add	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	440b      	add	r3, r1
 8002a5e:	3308      	adds	r3, #8
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	e013      	b.n	8002a8e <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8002a66:	7bfa      	ldrb	r2, [r7, #15]
 8002a68:	4916      	ldr	r1, [pc, #88]	; (8002ac4 <RescheduleTimerList+0x128>)
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	4413      	add	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	440b      	add	r3, r1
 8002a74:	3308      	adds	r3, #8
 8002a76:	6819      	ldr	r1, [r3, #0]
 8002a78:	88fb      	ldrh	r3, [r7, #6]
 8002a7a:	7bfa      	ldrb	r2, [r7, #15]
 8002a7c:	1ac9      	subs	r1, r1, r3
 8002a7e:	4811      	ldr	r0, [pc, #68]	; (8002ac4 <RescheduleTimerList+0x128>)
 8002a80:	4613      	mov	r3, r2
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	4413      	add	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	4403      	add	r3, r0
 8002a8a:	3308      	adds	r3, #8
 8002a8c:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8002a8e:	7bfa      	ldrb	r2, [r7, #15]
 8002a90:	490c      	ldr	r1, [pc, #48]	; (8002ac4 <RescheduleTimerList+0x128>)
 8002a92:	4613      	mov	r3, r2
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	4413      	add	r3, r2
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	440b      	add	r3, r1
 8002a9c:	3315      	adds	r3, #21
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
 8002aa4:	2b06      	cmp	r3, #6
 8002aa6:	d1c7      	bne.n	8002a38 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8002aa8:	89bb      	ldrh	r3, [r7, #12]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff ff1e 	bl	80028ec <RestartWakeupCounter>

  return ;
 8002ab0:	bf00      	nop
}
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40002800 	.word	0x40002800
 8002abc:	200004c4 	.word	0x200004c4
 8002ac0:	200003cc 	.word	0x200003cc
 8002ac4:	2000033c 	.word	0x2000033c
 8002ac8:	200003d4 	.word	0x200003d4
 8002acc:	200003da 	.word	0x200003da

08002ad0 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b08a      	sub	sp, #40	; 0x28
 8002ad4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ad6:	f3ef 8310 	mrs	r3, PRIMASK
 8002ada:	617b      	str	r3, [r7, #20]
  return(result);
 8002adc:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8002ae0:	b672      	cpsid	i
}
 8002ae2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002ae4:	4b59      	ldr	r3, [pc, #356]	; (8002c4c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	22ca      	movs	r2, #202	; 0xca
 8002aea:	625a      	str	r2, [r3, #36]	; 0x24
 8002aec:	4b57      	ldr	r3, [pc, #348]	; (8002c4c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2253      	movs	r2, #83	; 0x53
 8002af2:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002af4:	4b55      	ldr	r3, [pc, #340]	; (8002c4c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	4b54      	ldr	r3, [pc, #336]	; (8002c4c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b02:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002b04:	4b52      	ldr	r3, [pc, #328]	; (8002c50 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002b0c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002b10:	4950      	ldr	r1, [pc, #320]	; (8002c54 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002b12:	4613      	mov	r3, r2
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	4413      	add	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	440b      	add	r3, r1
 8002b1c:	330c      	adds	r3, #12
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d16e      	bne.n	8002c04 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8002b26:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002b2a:	494a      	ldr	r1, [pc, #296]	; (8002c54 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	4413      	add	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	440b      	add	r3, r1
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8002b3a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002b3e:	4945      	ldr	r1, [pc, #276]	; (8002c54 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002b40:	4613      	mov	r3, r2
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	4413      	add	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	440b      	add	r3, r1
 8002b4a:	3310      	adds	r3, #16
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002b50:	4b41      	ldr	r3, [pc, #260]	; (8002c58 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d04c      	beq.n	8002bf4 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8002b5a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002b5e:	493d      	ldr	r1, [pc, #244]	; (8002c54 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002b60:	4613      	mov	r3, r2
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	4413      	add	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	440b      	add	r3, r1
 8002b6a:	330d      	adds	r3, #13
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d124      	bne.n	8002bbe <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002b74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b78:	2101      	movs	r1, #1
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff fdf2 	bl	8002764 <UnlinkTimer>
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	f383 8810 	msr	PRIMASK, r3
}
 8002b8a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8002b8c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002b90:	4930      	ldr	r1, [pc, #192]	; (8002c54 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002b92:	4613      	mov	r3, r2
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	4413      	add	r3, r2
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	440b      	add	r3, r1
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ba4:	4611      	mov	r1, r2
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 fa32 	bl	8003010 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002bac:	4b27      	ldr	r3, [pc, #156]	; (8002c4c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	22ca      	movs	r2, #202	; 0xca
 8002bb2:	625a      	str	r2, [r3, #36]	; 0x24
 8002bb4:	4b25      	ldr	r3, [pc, #148]	; (8002c4c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2253      	movs	r2, #83	; 0x53
 8002bba:	625a      	str	r2, [r3, #36]	; 0x24
 8002bbc:	e012      	b.n	8002be4 <HW_TS_RTC_Wakeup_Handler+0x114>
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f383 8810 	msr	PRIMASK, r3
}
 8002bc8:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8002bca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f000 f99a 	bl	8002f08 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002bd4:	4b1d      	ldr	r3, [pc, #116]	; (8002c4c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	22ca      	movs	r2, #202	; 0xca
 8002bda:	625a      	str	r2, [r3, #36]	; 0x24
 8002bdc:	4b1b      	ldr	r3, [pc, #108]	; (8002c4c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2253      	movs	r2, #83	; 0x53
 8002be2:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002be4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002be8:	69fa      	ldr	r2, [r7, #28]
 8002bea:	4619      	mov	r1, r3
 8002bec:	69b8      	ldr	r0, [r7, #24]
 8002bee:	f000 fa95 	bl	800311c <HW_TS_RTC_Int_AppNot>
 8002bf2:	e022      	b.n	8002c3a <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002bf4:	f7ff fed2 	bl	800299c <RescheduleTimerList>
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	f383 8810 	msr	PRIMASK, r3
}
 8002c02:	e01a      	b.n	8002c3a <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002c04:	bf00      	nop
 8002c06:	4b11      	ldr	r3, [pc, #68]	; (8002c4c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d0f8      	beq.n	8002c06 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002c14:	4b0d      	ldr	r3, [pc, #52]	; (8002c4c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002c24:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002c26:	4b0d      	ldr	r3, [pc, #52]	; (8002c5c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002c28:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002c2c:	60da      	str	r2, [r3, #12]
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f383 8810 	msr	PRIMASK, r3
}
 8002c38:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002c3a:	4b04      	ldr	r3, [pc, #16]	; (8002c4c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	22ff      	movs	r2, #255	; 0xff
 8002c40:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8002c42:	bf00      	nop
}
 8002c44:	3728      	adds	r7, #40	; 0x28
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	200004c4 	.word	0x200004c4
 8002c50:	200003cc 	.word	0x200003cc
 8002c54:	2000033c 	.word	0x2000033c
 8002c58:	200003d4 	.word	0x200003d4
 8002c5c:	58000800 	.word	0x58000800

08002c60 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b088      	sub	sp, #32
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	6039      	str	r1, [r7, #0]
 8002c6a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002c6c:	4b5e      	ldr	r3, [pc, #376]	; (8002de8 <HW_TS_Init+0x188>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	22ca      	movs	r2, #202	; 0xca
 8002c72:	625a      	str	r2, [r3, #36]	; 0x24
 8002c74:	4b5c      	ldr	r3, [pc, #368]	; (8002de8 <HW_TS_Init+0x188>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2253      	movs	r2, #83	; 0x53
 8002c7a:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002c7c:	4b5b      	ldr	r3, [pc, #364]	; (8002dec <HW_TS_Init+0x18c>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	4a5a      	ldr	r2, [pc, #360]	; (8002dec <HW_TS_Init+0x18c>)
 8002c82:	f043 0320 	orr.w	r3, r3, #32
 8002c86:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002c88:	4b58      	ldr	r3, [pc, #352]	; (8002dec <HW_TS_Init+0x18c>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	f1c3 0304 	rsb	r3, r3, #4
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	4b55      	ldr	r3, [pc, #340]	; (8002df0 <HW_TS_Init+0x190>)
 8002c9c:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8002c9e:	4b53      	ldr	r3, [pc, #332]	; (8002dec <HW_TS_Init+0x18c>)
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002ca6:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8002caa:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	fa92 f2a2 	rbit	r2, r2
 8002cb2:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	2a00      	cmp	r2, #0
 8002cbc:	d101      	bne.n	8002cc2 <HW_TS_Init+0x62>
  {
    return 32U;
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	e003      	b.n	8002cca <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	fab2 f282 	clz	r2, r2
 8002cc8:	b2d2      	uxtb	r2, r2
 8002cca:	40d3      	lsrs	r3, r2
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	3301      	adds	r3, #1
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	4b48      	ldr	r3, [pc, #288]	; (8002df4 <HW_TS_Init+0x194>)
 8002cd4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002cd6:	4b45      	ldr	r3, [pc, #276]	; (8002dec <HW_TS_Init+0x18c>)
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	4b44      	ldr	r3, [pc, #272]	; (8002df8 <HW_TS_Init+0x198>)
 8002ce8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002cea:	4b43      	ldr	r3, [pc, #268]	; (8002df8 <HW_TS_Init+0x198>)
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	4a40      	ldr	r2, [pc, #256]	; (8002df4 <HW_TS_Init+0x194>)
 8002cf2:	7812      	ldrb	r2, [r2, #0]
 8002cf4:	fb02 f303 	mul.w	r3, r2, r3
 8002cf8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002cfc:	4a3c      	ldr	r2, [pc, #240]	; (8002df0 <HW_TS_Init+0x190>)
 8002cfe:	7812      	ldrb	r2, [r2, #0]
 8002d00:	40d3      	lsrs	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d904      	bls.n	8002d18 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8002d0e:	4b3b      	ldr	r3, [pc, #236]	; (8002dfc <HW_TS_Init+0x19c>)
 8002d10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d14:	801a      	strh	r2, [r3, #0]
 8002d16:	e003      	b.n	8002d20 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	4b37      	ldr	r3, [pc, #220]	; (8002dfc <HW_TS_Init+0x19c>)
 8002d1e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002d20:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002d24:	f7ff fb9c 	bl	8002460 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002d28:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002d2c:	f7ff fb84 	bl	8002438 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002d30:	79fb      	ldrb	r3, [r7, #7]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d13d      	bne.n	8002db2 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002d36:	4b32      	ldr	r3, [pc, #200]	; (8002e00 <HW_TS_Init+0x1a0>)
 8002d38:	2201      	movs	r2, #1
 8002d3a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002d3c:	4b31      	ldr	r3, [pc, #196]	; (8002e04 <HW_TS_Init+0x1a4>)
 8002d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d42:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002d44:	2300      	movs	r3, #0
 8002d46:	77fb      	strb	r3, [r7, #31]
 8002d48:	e00c      	b.n	8002d64 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002d4a:	7ffa      	ldrb	r2, [r7, #31]
 8002d4c:	492e      	ldr	r1, [pc, #184]	; (8002e08 <HW_TS_Init+0x1a8>)
 8002d4e:	4613      	mov	r3, r2
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	4413      	add	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	440b      	add	r3, r1
 8002d58:	330c      	adds	r3, #12
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002d5e:	7ffb      	ldrb	r3, [r7, #31]
 8002d60:	3301      	adds	r3, #1
 8002d62:	77fb      	strb	r3, [r7, #31]
 8002d64:	7ffb      	ldrb	r3, [r7, #31]
 8002d66:	2b05      	cmp	r3, #5
 8002d68:	d9ef      	bls.n	8002d4a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8002d6a:	4b28      	ldr	r3, [pc, #160]	; (8002e0c <HW_TS_Init+0x1ac>)
 8002d6c:	2206      	movs	r2, #6
 8002d6e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002d70:	4b1d      	ldr	r3, [pc, #116]	; (8002de8 <HW_TS_Init+0x188>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689a      	ldr	r2, [r3, #8]
 8002d76:	4b1c      	ldr	r3, [pc, #112]	; (8002de8 <HW_TS_Init+0x188>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d7e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002d80:	4b19      	ldr	r3, [pc, #100]	; (8002de8 <HW_TS_Init+0x188>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	4b17      	ldr	r3, [pc, #92]	; (8002de8 <HW_TS_Init+0x188>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002d90:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8002d92:	4b1f      	ldr	r3, [pc, #124]	; (8002e10 <HW_TS_Init+0x1b0>)
 8002d94:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002d98:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8002d9a:	2003      	movs	r0, #3
 8002d9c:	f002 ffcf 	bl	8005d3e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002da0:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <HW_TS_Init+0x188>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689a      	ldr	r2, [r3, #8]
 8002da6:	4b10      	ldr	r3, [pc, #64]	; (8002de8 <HW_TS_Init+0x188>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dae:	609a      	str	r2, [r3, #8]
 8002db0:	e009      	b.n	8002dc6 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8002db2:	4b0d      	ldr	r3, [pc, #52]	; (8002de8 <HW_TS_Init+0x188>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d002      	beq.n	8002dc6 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002dc0:	2003      	movs	r0, #3
 8002dc2:	f002 ffae 	bl	8005d22 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002dc6:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <HW_TS_Init+0x188>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	22ff      	movs	r2, #255	; 0xff
 8002dcc:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8002dce:	2200      	movs	r2, #0
 8002dd0:	2103      	movs	r1, #3
 8002dd2:	2003      	movs	r0, #3
 8002dd4:	f002 ff63 	bl	8005c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002dd8:	2003      	movs	r0, #3
 8002dda:	f002 ff7a 	bl	8005cd2 <HAL_NVIC_EnableIRQ>

  return;
 8002dde:	bf00      	nop
}
 8002de0:	3720      	adds	r7, #32
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	200004c4 	.word	0x200004c4
 8002dec:	40002800 	.word	0x40002800
 8002df0:	200003d5 	.word	0x200003d5
 8002df4:	200003d6 	.word	0x200003d6
 8002df8:	200003d8 	.word	0x200003d8
 8002dfc:	200003da 	.word	0x200003da
 8002e00:	200003d4 	.word	0x200003d4
 8002e04:	200003d0 	.word	0x200003d0
 8002e08:	2000033c 	.word	0x2000033c
 8002e0c:	200003cc 	.word	0x200003cc
 8002e10:	58000800 	.word	0x58000800

08002e14 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b08b      	sub	sp, #44	; 0x2c
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	603b      	str	r3, [r7, #0]
 8002e20:	4613      	mov	r3, r2
 8002e22:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8002e24:	2300      	movs	r3, #0
 8002e26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e2a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e2e:	61fb      	str	r3, [r7, #28]
  return(result);
 8002e30:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002e32:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e34:	b672      	cpsid	i
}
 8002e36:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002e38:	e004      	b.n	8002e44 <HW_TS_Create+0x30>
  {
    loop++;
 8002e3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002e3e:	3301      	adds	r3, #1
 8002e40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002e44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002e48:	2b05      	cmp	r3, #5
 8002e4a:	d80c      	bhi.n	8002e66 <HW_TS_Create+0x52>
 8002e4c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002e50:	492c      	ldr	r1, [pc, #176]	; (8002f04 <HW_TS_Create+0xf0>)
 8002e52:	4613      	mov	r3, r2
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	4413      	add	r3, r2
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	440b      	add	r3, r1
 8002e5c:	330c      	adds	r3, #12
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1e9      	bne.n	8002e3a <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002e66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002e6a:	2b06      	cmp	r3, #6
 8002e6c:	d038      	beq.n	8002ee0 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8002e6e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002e72:	4924      	ldr	r1, [pc, #144]	; (8002f04 <HW_TS_Create+0xf0>)
 8002e74:	4613      	mov	r3, r2
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	4413      	add	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	440b      	add	r3, r1
 8002e7e:	330c      	adds	r3, #12
 8002e80:	2201      	movs	r2, #1
 8002e82:	701a      	strb	r2, [r3, #0]
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	f383 8810 	msr	PRIMASK, r3
}
 8002e8e:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8002e90:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002e94:	491b      	ldr	r1, [pc, #108]	; (8002f04 <HW_TS_Create+0xf0>)
 8002e96:	4613      	mov	r3, r2
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	4413      	add	r3, r2
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	440b      	add	r3, r1
 8002ea0:	3310      	adds	r3, #16
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8002ea6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002eaa:	4916      	ldr	r1, [pc, #88]	; (8002f04 <HW_TS_Create+0xf0>)
 8002eac:	4613      	mov	r3, r2
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	4413      	add	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	440b      	add	r3, r1
 8002eb6:	330d      	adds	r3, #13
 8002eb8:	79fa      	ldrb	r2, [r7, #7]
 8002eba:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8002ebc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002ec0:	4910      	ldr	r1, [pc, #64]	; (8002f04 <HW_TS_Create+0xf0>)
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	4413      	add	r3, r2
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	440b      	add	r3, r1
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002ed6:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002ede:	e008      	b.n	8002ef2 <HW_TS_Create+0xde>
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
 8002ee2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f383 8810 	msr	PRIMASK, r3
}
 8002eea:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8002eec:	2301      	movs	r3, #1
 8002eee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8002ef2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	372c      	adds	r7, #44	; 0x2c
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	2000033c 	.word	0x2000033c

08002f08 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f12:	f3ef 8310 	mrs	r3, PRIMASK
 8002f16:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f18:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002f1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f1c:	b672      	cpsid	i
}
 8002f1e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002f20:	2003      	movs	r0, #3
 8002f22:	f002 fee4 	bl	8005cee <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002f26:	4b34      	ldr	r3, [pc, #208]	; (8002ff8 <HW_TS_Stop+0xf0>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	22ca      	movs	r2, #202	; 0xca
 8002f2c:	625a      	str	r2, [r3, #36]	; 0x24
 8002f2e:	4b32      	ldr	r3, [pc, #200]	; (8002ff8 <HW_TS_Stop+0xf0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2253      	movs	r2, #83	; 0x53
 8002f34:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002f36:	79fa      	ldrb	r2, [r7, #7]
 8002f38:	4930      	ldr	r1, [pc, #192]	; (8002ffc <HW_TS_Stop+0xf4>)
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	4413      	add	r3, r2
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	440b      	add	r3, r1
 8002f44:	330c      	adds	r3, #12
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d142      	bne.n	8002fd4 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8002f4e:	79fb      	ldrb	r3, [r7, #7]
 8002f50:	2100      	movs	r1, #0
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff fc06 	bl	8002764 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002f58:	4b29      	ldr	r3, [pc, #164]	; (8003000 <HW_TS_Stop+0xf8>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002f5e:	7cfb      	ldrb	r3, [r7, #19]
 8002f60:	2b06      	cmp	r3, #6
 8002f62:	d12f      	bne.n	8002fc4 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002f64:	4b27      	ldr	r3, [pc, #156]	; (8003004 <HW_TS_Stop+0xfc>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f70:	d107      	bne.n	8002f82 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002f72:	bf00      	nop
 8002f74:	4b20      	ldr	r3, [pc, #128]	; (8002ff8 <HW_TS_Stop+0xf0>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f003 0304 	and.w	r3, r3, #4
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f8      	bne.n	8002f74 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002f82:	4b1d      	ldr	r3, [pc, #116]	; (8002ff8 <HW_TS_Stop+0xf0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	4b1b      	ldr	r3, [pc, #108]	; (8002ff8 <HW_TS_Stop+0xf0>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f90:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002f92:	bf00      	nop
 8002f94:	4b18      	ldr	r3, [pc, #96]	; (8002ff8 <HW_TS_Stop+0xf0>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f003 0304 	and.w	r3, r3, #4
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d0f8      	beq.n	8002f94 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002fa2:	4b15      	ldr	r3, [pc, #84]	; (8002ff8 <HW_TS_Stop+0xf0>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	4b13      	ldr	r3, [pc, #76]	; (8002ff8 <HW_TS_Stop+0xf0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002fb2:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002fb4:	4b14      	ldr	r3, [pc, #80]	; (8003008 <HW_TS_Stop+0x100>)
 8002fb6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002fba:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002fbc:	2003      	movs	r0, #3
 8002fbe:	f002 febe 	bl	8005d3e <HAL_NVIC_ClearPendingIRQ>
 8002fc2:	e007      	b.n	8002fd4 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002fc4:	4b11      	ldr	r3, [pc, #68]	; (800300c <HW_TS_Stop+0x104>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	7cfa      	ldrb	r2, [r7, #19]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d001      	beq.n	8002fd4 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8002fd0:	f7ff fce4 	bl	800299c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002fd4:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <HW_TS_Stop+0xf0>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	22ff      	movs	r2, #255	; 0xff
 8002fda:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002fdc:	2003      	movs	r0, #3
 8002fde:	f002 fe78 	bl	8005cd2 <HAL_NVIC_EnableIRQ>
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	f383 8810 	msr	PRIMASK, r3
}
 8002fec:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002fee:	bf00      	nop
}
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	200004c4 	.word	0x200004c4
 8002ffc:	2000033c 	.word	0x2000033c
 8003000:	200003cc 	.word	0x200003cc
 8003004:	40002800 	.word	0x40002800
 8003008:	58000800 	.word	0x58000800
 800300c:	200003cd 	.word	0x200003cd

08003010 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	6039      	str	r1, [r7, #0]
 800301a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800301c:	79fa      	ldrb	r2, [r7, #7]
 800301e:	493b      	ldr	r1, [pc, #236]	; (800310c <HW_TS_Start+0xfc>)
 8003020:	4613      	mov	r3, r2
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	4413      	add	r3, r2
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	440b      	add	r3, r1
 800302a:	330c      	adds	r3, #12
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d103      	bne.n	800303c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8003034:	79fb      	ldrb	r3, [r7, #7]
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff ff66 	bl	8002f08 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800303c:	f3ef 8310 	mrs	r3, PRIMASK
 8003040:	60fb      	str	r3, [r7, #12]
  return(result);
 8003042:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003044:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003046:	b672      	cpsid	i
}
 8003048:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800304a:	2003      	movs	r0, #3
 800304c:	f002 fe4f 	bl	8005cee <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003050:	4b2f      	ldr	r3, [pc, #188]	; (8003110 <HW_TS_Start+0x100>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	22ca      	movs	r2, #202	; 0xca
 8003056:	625a      	str	r2, [r3, #36]	; 0x24
 8003058:	4b2d      	ldr	r3, [pc, #180]	; (8003110 <HW_TS_Start+0x100>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2253      	movs	r2, #83	; 0x53
 800305e:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8003060:	79fa      	ldrb	r2, [r7, #7]
 8003062:	492a      	ldr	r1, [pc, #168]	; (800310c <HW_TS_Start+0xfc>)
 8003064:	4613      	mov	r3, r2
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	4413      	add	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	440b      	add	r3, r1
 800306e:	330c      	adds	r3, #12
 8003070:	2202      	movs	r2, #2
 8003072:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8003074:	79fa      	ldrb	r2, [r7, #7]
 8003076:	4925      	ldr	r1, [pc, #148]	; (800310c <HW_TS_Start+0xfc>)
 8003078:	4613      	mov	r3, r2
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	4413      	add	r3, r2
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	440b      	add	r3, r1
 8003082:	3308      	adds	r3, #8
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8003088:	79fa      	ldrb	r2, [r7, #7]
 800308a:	4920      	ldr	r1, [pc, #128]	; (800310c <HW_TS_Start+0xfc>)
 800308c:	4613      	mov	r3, r2
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	4413      	add	r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	440b      	add	r3, r1
 8003096:	3304      	adds	r3, #4
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800309c:	79fb      	ldrb	r3, [r7, #7]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff fab6 	bl	8002610 <linkTimer>
 80030a4:	4603      	mov	r3, r0
 80030a6:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80030a8:	4b1a      	ldr	r3, [pc, #104]	; (8003114 <HW_TS_Start+0x104>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80030ae:	4b1a      	ldr	r3, [pc, #104]	; (8003118 <HW_TS_Start+0x108>)
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	7c7a      	ldrb	r2, [r7, #17]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d002      	beq.n	80030c0 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80030ba:	f7ff fc6f 	bl	800299c <RescheduleTimerList>
 80030be:	e013      	b.n	80030e8 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80030c0:	79fa      	ldrb	r2, [r7, #7]
 80030c2:	4912      	ldr	r1, [pc, #72]	; (800310c <HW_TS_Start+0xfc>)
 80030c4:	4613      	mov	r3, r2
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	4413      	add	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	440b      	add	r3, r1
 80030ce:	3308      	adds	r3, #8
 80030d0:	6819      	ldr	r1, [r3, #0]
 80030d2:	8a7b      	ldrh	r3, [r7, #18]
 80030d4:	79fa      	ldrb	r2, [r7, #7]
 80030d6:	1ac9      	subs	r1, r1, r3
 80030d8:	480c      	ldr	r0, [pc, #48]	; (800310c <HW_TS_Start+0xfc>)
 80030da:	4613      	mov	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4413      	add	r3, r2
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4403      	add	r3, r0
 80030e4:	3308      	adds	r3, #8
 80030e6:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80030e8:	4b09      	ldr	r3, [pc, #36]	; (8003110 <HW_TS_Start+0x100>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	22ff      	movs	r2, #255	; 0xff
 80030ee:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80030f0:	2003      	movs	r0, #3
 80030f2:	f002 fdee 	bl	8005cd2 <HAL_NVIC_EnableIRQ>
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	f383 8810 	msr	PRIMASK, r3
}
 8003100:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003102:	bf00      	nop
}
 8003104:	3718      	adds	r7, #24
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	2000033c 	.word	0x2000033c
 8003110:	200004c4 	.word	0x200004c4
 8003114:	200003cc 	.word	0x200003cc
 8003118:	200003cd 	.word	0x200003cd

0800311c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	460b      	mov	r3, r1
 8003126:	607a      	str	r2, [r7, #4]
 8003128:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4798      	blx	r3

  return;
 800312e:	bf00      	nop
}
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
	...

08003138 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	60b9      	str	r1, [r7, #8]
 8003140:	607b      	str	r3, [r7, #4]
 8003142:	4603      	mov	r3, r0
 8003144:	73fb      	strb	r3, [r7, #15]
 8003146:	4613      	mov	r3, r2
 8003148:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800314a:	2300      	movs	r3, #0
 800314c:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 800314e:	2300      	movs	r3, #0
 8003150:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8003152:	7bfb      	ldrb	r3, [r7, #15]
 8003154:	2b02      	cmp	r3, #2
 8003156:	d10e      	bne.n	8003176 <HW_UART_Transmit_DMA+0x3e>
            break;
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case hw_lpuart1:
            HW_hlpuart1TxCb = cb;
 8003158:	4a17      	ldr	r2, [pc, #92]	; (80031b8 <HW_UART_Transmit_DMA+0x80>)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6013      	str	r3, [r2, #0]
            hlpuart1.Instance = LPUART1;
 800315e:	4b17      	ldr	r3, [pc, #92]	; (80031bc <HW_UART_Transmit_DMA+0x84>)
 8003160:	4a17      	ldr	r2, [pc, #92]	; (80031c0 <HW_UART_Transmit_DMA+0x88>)
 8003162:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 8003164:	89bb      	ldrh	r3, [r7, #12]
 8003166:	461a      	mov	r2, r3
 8003168:	68b9      	ldr	r1, [r7, #8]
 800316a:	4814      	ldr	r0, [pc, #80]	; (80031bc <HW_UART_Transmit_DMA+0x84>)
 800316c:	f006 fdf8 	bl	8009d60 <HAL_UART_Transmit_DMA>
 8003170:	4603      	mov	r3, r0
 8003172:	75fb      	strb	r3, [r7, #23]
            break;
 8003174:	e000      	b.n	8003178 <HW_UART_Transmit_DMA+0x40>
#endif

        default:
            break;
 8003176:	bf00      	nop
    }

    switch (hal_status)
 8003178:	7dfb      	ldrb	r3, [r7, #23]
 800317a:	2b03      	cmp	r3, #3
 800317c:	d816      	bhi.n	80031ac <HW_UART_Transmit_DMA+0x74>
 800317e:	a201      	add	r2, pc, #4	; (adr r2, 8003184 <HW_UART_Transmit_DMA+0x4c>)
 8003180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003184:	08003195 	.word	0x08003195
 8003188:	0800319b 	.word	0x0800319b
 800318c:	080031a1 	.word	0x080031a1
 8003190:	080031a7 	.word	0x080031a7
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8003194:	2300      	movs	r3, #0
 8003196:	75bb      	strb	r3, [r7, #22]
            break;
 8003198:	e009      	b.n	80031ae <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 800319a:	2301      	movs	r3, #1
 800319c:	75bb      	strb	r3, [r7, #22]
            break;
 800319e:	e006      	b.n	80031ae <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 80031a0:	2302      	movs	r3, #2
 80031a2:	75bb      	strb	r3, [r7, #22]
            break;
 80031a4:	e003      	b.n	80031ae <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 80031a6:	2303      	movs	r3, #3
 80031a8:	75bb      	strb	r3, [r7, #22]
            break;
 80031aa:	e000      	b.n	80031ae <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 80031ac:	bf00      	nop
    }

    return hw_status;
 80031ae:	7dbb      	ldrb	r3, [r7, #22]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	200003dc 	.word	0x200003dc
 80031bc:	200004ec 	.word	0x200004ec
 80031c0:	40008000 	.word	0x40008000

080031c4 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	461a      	mov	r2, r3
 80031d2:	4b09      	ldr	r3, [pc, #36]	; (80031f8 <HAL_UART_TxCpltCallback+0x34>)
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d107      	bne.n	80031e8 <HAL_UART_TxCpltCallback+0x24>
            break;
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 80031d8:	4b08      	ldr	r3, [pc, #32]	; (80031fc <HAL_UART_TxCpltCallback+0x38>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d005      	beq.n	80031ec <HAL_UART_TxCpltCallback+0x28>
            {
                HW_hlpuart1TxCb();
 80031e0:	4b06      	ldr	r3, [pc, #24]	; (80031fc <HAL_UART_TxCpltCallback+0x38>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4798      	blx	r3
            }
            break;
 80031e6:	e001      	b.n	80031ec <HAL_UART_TxCpltCallback+0x28>
#endif

        default:
            break;
 80031e8:	bf00      	nop
 80031ea:	e000      	b.n	80031ee <HAL_UART_TxCpltCallback+0x2a>
            break;
 80031ec:	bf00      	nop
    }

    return;
 80031ee:	bf00      	nop
}
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40008000 	.word	0x40008000
 80031fc:	200003dc 	.word	0x200003dc

08003200 <LL_AHB2_GRP1_EnableClock>:
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800320c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800320e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4313      	orrs	r3, r2
 8003216:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800321c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4013      	ands	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003224:	68fb      	ldr	r3, [r7, #12]
}
 8003226:	bf00      	nop
 8003228:	3714      	adds	r7, #20
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003232:	b480      	push	{r7}
 8003234:	b085      	sub	sp, #20
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800323a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800323e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003240:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4313      	orrs	r3, r2
 8003248:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800324a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800324e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4013      	ands	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003256:	68fb      	ldr	r3, [r7, #12]
}
 8003258:	bf00      	nop
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003268:	4b1b      	ldr	r3, [pc, #108]	; (80032d8 <MX_I2C3_Init+0x74>)
 800326a:	4a1c      	ldr	r2, [pc, #112]	; (80032dc <MX_I2C3_Init+0x78>)
 800326c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10707DBC;
 800326e:	4b1a      	ldr	r3, [pc, #104]	; (80032d8 <MX_I2C3_Init+0x74>)
 8003270:	4a1b      	ldr	r2, [pc, #108]	; (80032e0 <MX_I2C3_Init+0x7c>)
 8003272:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8003274:	4b18      	ldr	r3, [pc, #96]	; (80032d8 <MX_I2C3_Init+0x74>)
 8003276:	2200      	movs	r2, #0
 8003278:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800327a:	4b17      	ldr	r3, [pc, #92]	; (80032d8 <MX_I2C3_Init+0x74>)
 800327c:	2201      	movs	r2, #1
 800327e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003280:	4b15      	ldr	r3, [pc, #84]	; (80032d8 <MX_I2C3_Init+0x74>)
 8003282:	2200      	movs	r2, #0
 8003284:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8003286:	4b14      	ldr	r3, [pc, #80]	; (80032d8 <MX_I2C3_Init+0x74>)
 8003288:	2200      	movs	r2, #0
 800328a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800328c:	4b12      	ldr	r3, [pc, #72]	; (80032d8 <MX_I2C3_Init+0x74>)
 800328e:	2200      	movs	r2, #0
 8003290:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003292:	4b11      	ldr	r3, [pc, #68]	; (80032d8 <MX_I2C3_Init+0x74>)
 8003294:	2200      	movs	r2, #0
 8003296:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003298:	4b0f      	ldr	r3, [pc, #60]	; (80032d8 <MX_I2C3_Init+0x74>)
 800329a:	2200      	movs	r2, #0
 800329c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800329e:	480e      	ldr	r0, [pc, #56]	; (80032d8 <MX_I2C3_Init+0x74>)
 80032a0:	f003 f87e 	bl	80063a0 <HAL_I2C_Init>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80032aa:	f000 f997 	bl	80035dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80032ae:	2100      	movs	r1, #0
 80032b0:	4809      	ldr	r0, [pc, #36]	; (80032d8 <MX_I2C3_Init+0x74>)
 80032b2:	f003 fdf7 	bl	8006ea4 <HAL_I2CEx_ConfigAnalogFilter>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80032bc:	f000 f98e 	bl	80035dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80032c0:	2100      	movs	r1, #0
 80032c2:	4805      	ldr	r0, [pc, #20]	; (80032d8 <MX_I2C3_Init+0x74>)
 80032c4:	f003 fe39 	bl	8006f3a <HAL_I2CEx_ConfigDigitalFilter>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80032ce:	f000 f985 	bl	80035dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80032d2:	bf00      	nop
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	200003e0 	.word	0x200003e0
 80032dc:	40005c00 	.word	0x40005c00
 80032e0:	10707dbc 	.word	0x10707dbc

080032e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b09c      	sub	sp, #112	; 0x70
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	605a      	str	r2, [r3, #4]
 80032f6:	609a      	str	r2, [r3, #8]
 80032f8:	60da      	str	r2, [r3, #12]
 80032fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032fc:	f107 030c 	add.w	r3, r7, #12
 8003300:	2250      	movs	r2, #80	; 0x50
 8003302:	2100      	movs	r1, #0
 8003304:	4618      	mov	r0, r3
 8003306:	f00f fa5b 	bl	80127c0 <memset>
  if(i2cHandle->Instance==I2C3)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a17      	ldr	r2, [pc, #92]	; (800336c <HAL_I2C_MspInit+0x88>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d126      	bne.n	8003362 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003314:	2308      	movs	r3, #8
 8003316:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003318:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800331c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800331e:	f107 030c 	add.w	r3, r7, #12
 8003322:	4618      	mov	r0, r3
 8003324:	f005 fe4d 	bl	8008fc2 <HAL_RCCEx_PeriphCLKConfig>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800332e:	f000 f955 	bl	80035dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003332:	2002      	movs	r0, #2
 8003334:	f7ff ff64 	bl	8003200 <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration
    PB13     ------> I2C3_SCL
    PB14     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin|I2C3_SDA_Pin;
 8003338:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800333c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800333e:	2312      	movs	r3, #18
 8003340:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003342:	2301      	movs	r3, #1
 8003344:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003346:	2300      	movs	r3, #0
 8003348:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800334a:	2304      	movs	r3, #4
 800334c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800334e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003352:	4619      	mov	r1, r3
 8003354:	4806      	ldr	r0, [pc, #24]	; (8003370 <HAL_I2C_MspInit+0x8c>)
 8003356:	f002 fe77 	bl	8006048 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800335a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800335e:	f7ff ff68 	bl	8003232 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003362:	bf00      	nop
 8003364:	3770      	adds	r7, #112	; 0x70
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	40005c00 	.word	0x40005c00
 8003370:	48000400 	.word	0x48000400

08003374 <LL_AHB3_GRP1_EnableClock>:
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800337c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003380:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003382:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4313      	orrs	r3, r2
 800338a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800338c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003390:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4013      	ands	r3, r2
 8003396:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003398:	68fb      	ldr	r3, [r7, #12]
}
 800339a:	bf00      	nop
 800339c:	3714      	adds	r7, #20
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
	...

080033a8 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80033ac:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <MX_IPCC_Init+0x20>)
 80033ae:	4a07      	ldr	r2, [pc, #28]	; (80033cc <MX_IPCC_Init+0x24>)
 80033b0:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80033b2:	4805      	ldr	r0, [pc, #20]	; (80033c8 <MX_IPCC_Init+0x20>)
 80033b4:	f003 fe0e 	bl	8006fd4 <HAL_IPCC_Init>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80033be:	f000 f90d 	bl	80035dc <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80033c2:	bf00      	nop
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	20000434 	.word	0x20000434
 80033cc:	58000c00 	.word	0x58000c00

080033d0 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a0d      	ldr	r2, [pc, #52]	; (8003414 <HAL_IPCC_MspInit+0x44>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d113      	bne.n	800340a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80033e2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80033e6:	f7ff ffc5 	bl	8003374 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80033ea:	2200      	movs	r2, #0
 80033ec:	2100      	movs	r1, #0
 80033ee:	202c      	movs	r0, #44	; 0x2c
 80033f0:	f002 fc55 	bl	8005c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80033f4:	202c      	movs	r0, #44	; 0x2c
 80033f6:	f002 fc6c 	bl	8005cd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80033fa:	2200      	movs	r2, #0
 80033fc:	2100      	movs	r1, #0
 80033fe:	202d      	movs	r0, #45	; 0x2d
 8003400:	f002 fc4d 	bl	8005c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8003404:	202d      	movs	r0, #45	; 0x2d
 8003406:	f002 fc64 	bl	8005cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 800340a:	bf00      	nop
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	58000c00 	.word	0x58000c00

08003418 <LL_RCC_LSE_SetDriveCapability>:
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8003420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003428:	f023 0218 	bic.w	r2, r3, #24
 800342c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4313      	orrs	r3, r2
 8003434:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003448:	f001 fbbe 	bl	8004bc8 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 800344c:	f7fe fab8 	bl	80019c0 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003450:	f000 f81a 	bl	8003488 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003454:	f000 f884 	bl	8003560 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8003458:	f7ff ffa6 	bl	80033a8 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800345c:	f7fe fe3a 	bl	80020d4 <MX_GPIO_Init>
  MX_MEMORYMAP_Init();
 8003460:	f000 f8c1 	bl	80035e6 <MX_MEMORYMAP_Init>
  MX_ADC1_Init();
 8003464:	f7fe f83c 	bl	80014e0 <MX_ADC1_Init>
  MX_I2C3_Init();
 8003468:	f7ff fefc 	bl	8003264 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 800346c:	f001 faa0 	bl	80049b0 <MX_LPUART1_UART_Init>
  MX_QUADSPI_Init();
 8003470:	f000 ffd0 	bl	8004414 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8003474:	f001 f890 	bl	8004598 <MX_RTC_Init>
  MX_RF_Init();
 8003478:	f001 f85c 	bl	8004534 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 800347c:	f7fe faae 	bl	80019dc <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8003480:	f7fe fdd1 	bl	8002026 <MX_APPE_Process>
 8003484:	e7fc      	b.n	8003480 <main+0x3c>
	...

08003488 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b09a      	sub	sp, #104	; 0x68
 800348c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800348e:	f107 0320 	add.w	r3, r7, #32
 8003492:	2248      	movs	r2, #72	; 0x48
 8003494:	2100      	movs	r1, #0
 8003496:	4618      	mov	r0, r3
 8003498:	f00f f992 	bl	80127c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800349c:	1d3b      	adds	r3, r7, #4
 800349e:	2200      	movs	r2, #0
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	605a      	str	r2, [r3, #4]
 80034a4:	609a      	str	r2, [r3, #8]
 80034a6:	60da      	str	r2, [r3, #12]
 80034a8:	611a      	str	r2, [r3, #16]
 80034aa:	615a      	str	r2, [r3, #20]
 80034ac:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80034ae:	f003 fe17 	bl	80070e0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 80034b2:	2010      	movs	r0, #16
 80034b4:	f7ff ffb0 	bl	8003418 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80034b8:	4b28      	ldr	r3, [pc, #160]	; (800355c <SystemClock_Config+0xd4>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034c0:	4a26      	ldr	r2, [pc, #152]	; (800355c <SystemClock_Config+0xd4>)
 80034c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034c6:	6013      	str	r3, [r2, #0]
 80034c8:	4b24      	ldr	r3, [pc, #144]	; (800355c <SystemClock_Config+0xd4>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034d0:	603b      	str	r3, [r7, #0]
 80034d2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80034d4:	2307      	movs	r3, #7
 80034d6:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80034d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80034de:	2301      	movs	r3, #1
 80034e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80034e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80034e8:	2340      	movs	r3, #64	; 0x40
 80034ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034ec:	2302      	movs	r3, #2
 80034ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80034f0:	2303      	movs	r3, #3
 80034f2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV8;
 80034f4:	2370      	movs	r3, #112	; 0x70
 80034f6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 80034f8:	2320      	movs	r3, #32
 80034fa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80034fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003500:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003502:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003506:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003508:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800350c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800350e:	f107 0320 	add.w	r3, r7, #32
 8003512:	4618      	mov	r0, r3
 8003514:	f004 fda4 	bl	8008060 <HAL_RCC_OscConfig>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800351e:	f000 f85d 	bl	80035dc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8003522:	236f      	movs	r3, #111	; 0x6f
 8003524:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003526:	2303      	movs	r3, #3
 8003528:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800352a:	2300      	movs	r3, #0
 800352c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800352e:	2300      	movs	r3, #0
 8003530:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8003536:	2380      	movs	r3, #128	; 0x80
 8003538:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800353a:	2300      	movs	r3, #0
 800353c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800353e:	1d3b      	adds	r3, r7, #4
 8003540:	2103      	movs	r1, #3
 8003542:	4618      	mov	r0, r3
 8003544:	f005 f900 	bl	8008748 <HAL_RCC_ClockConfig>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800354e:	f000 f845 	bl	80035dc <Error_Handler>
  }
}
 8003552:	bf00      	nop
 8003554:	3768      	adds	r7, #104	; 0x68
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	58000400 	.word	0x58000400

08003560 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b094      	sub	sp, #80	; 0x50
 8003564:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003566:	463b      	mov	r3, r7
 8003568:	2250      	movs	r2, #80	; 0x50
 800356a:	2100      	movs	r1, #0
 800356c:	4618      	mov	r0, r3
 800356e:	f00f f927 	bl	80127c0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8003572:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003576:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8003578:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800357c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800357e:	2300      	movs	r3, #0
 8003580:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8003582:	2310      	movs	r3, #16
 8003584:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003586:	463b      	mov	r3, r7
 8003588:	4618      	mov	r0, r3
 800358a:	f005 fd1a 	bl	8008fc2 <HAL_RCCEx_PeriphCLKConfig>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8003594:	f000 f822 	bl	80035dc <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8003598:	bf00      	nop
 800359a:	3750      	adds	r7, #80	; 0x50
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <__io_getchar>:

  return ch;
}

GETCHAR_PROTOTYPE
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 80035a6:	2300      	movs	r3, #0
 80035a8:	71fb      	strb	r3, [r7, #7]
  /* Place your implementation of fgetc here */

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&hlpuart1);
 80035aa:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <__io_getchar+0x38>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2208      	movs	r2, #8
 80035b0:	621a      	str	r2, [r3, #32]

  /* Wait for reception of a character on the USART1 RX line
     and echo this character on console */
  HAL_UART_Receive(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 80035b2:	1df9      	adds	r1, r7, #7
 80035b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035b8:	2201      	movs	r2, #1
 80035ba:	4807      	ldr	r0, [pc, #28]	; (80035d8 <__io_getchar+0x38>)
 80035bc:	f006 fb08 	bl	8009bd0 <HAL_UART_Receive>
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 80035c0:	1df9      	adds	r1, r7, #7
 80035c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035c6:	2201      	movs	r2, #1
 80035c8:	4803      	ldr	r0, [pc, #12]	; (80035d8 <__io_getchar+0x38>)
 80035ca:	f006 fa73 	bl	8009ab4 <HAL_UART_Transmit>
  return ch;
 80035ce:	79fb      	ldrb	r3, [r7, #7]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	200004ec 	.word	0x200004ec

080035dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80035e0:	b672      	cpsid	i
}
 80035e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035e4:	e7fe      	b.n	80035e4 <Error_Handler+0x8>

080035e6 <MX_MEMORYMAP_Init>:

/* USER CODE END 0 */

/* MEMORYMAP init function */
void MX_MEMORYMAP_Init(void)
{
 80035e6:	b480      	push	{r7}
 80035e8:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 80035ea:	bf00      	nop
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <mlx90632_start_measurement>:
int16_t object_new_raw;
int16_t object_old_raw;
extern  double pre_ambient, pre_object, ambient, object;

int mlx90632_start_measurement(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
    int ret, tries = MLX90632_MAX_NUMBER_MESUREMENT_READ_TRIES;
 80035fa:	2364      	movs	r3, #100	; 0x64
 80035fc:	60fb      	str	r3, [r7, #12]
    uint16_t reg_status;

    ret = mlx90632_i2c_read(MLX90632_REG_STATUS, &reg_status);
 80035fe:	1dbb      	adds	r3, r7, #6
 8003600:	4619      	mov	r1, r3
 8003602:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8003606:	f000 fe4b 	bl	80042a0 <mlx90632_i2c_read>
 800360a:	60b8      	str	r0, [r7, #8]
    if (ret < 0)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	2b00      	cmp	r3, #0
 8003610:	da01      	bge.n	8003616 <mlx90632_start_measurement+0x22>
        return ret;
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	e036      	b.n	8003684 <mlx90632_start_measurement+0x90>

    ret = mlx90632_i2c_write(MLX90632_REG_STATUS, reg_status & (~MLX90632_STAT_DATA_RDY));
 8003616:	88fb      	ldrh	r3, [r7, #6]
 8003618:	f023 0301 	bic.w	r3, r3, #1
 800361c:	b29b      	uxth	r3, r3
 800361e:	4619      	mov	r1, r3
 8003620:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8003624:	f000 fe8e 	bl	8004344 <mlx90632_i2c_write>
 8003628:	60b8      	str	r0, [r7, #8]
    if (ret < 0)
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	2b00      	cmp	r3, #0
 800362e:	da18      	bge.n	8003662 <mlx90632_start_measurement+0x6e>
        return ret;
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	e027      	b.n	8003684 <mlx90632_start_measurement+0x90>

    while (tries-- > 0)
    {
        ret = mlx90632_i2c_read(MLX90632_REG_STATUS, &reg_status);
 8003634:	1dbb      	adds	r3, r7, #6
 8003636:	4619      	mov	r1, r3
 8003638:	f643 70ff 	movw	r0, #16383	; 0x3fff
 800363c:	f000 fe30 	bl	80042a0 <mlx90632_i2c_read>
 8003640:	60b8      	str	r0, [r7, #8]
        if (ret < 0)
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2b00      	cmp	r3, #0
 8003646:	da01      	bge.n	800364c <mlx90632_start_measurement+0x58>
            return ret;
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	e01b      	b.n	8003684 <mlx90632_start_measurement+0x90>
        if (reg_status & MLX90632_STAT_DATA_RDY)
 800364c:	88fb      	ldrh	r3, [r7, #6]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10b      	bne.n	800366e <mlx90632_start_measurement+0x7a>
            break;
        /* minimum wait time to complete measurement
         * should be calculated according to refresh rate
         * atm 10ms - 11ms
         */
        usleep(10000, 11000);
 8003656:	f642 21f8 	movw	r1, #11000	; 0x2af8
 800365a:	f242 7010 	movw	r0, #10000	; 0x2710
 800365e:	f000 fe99 	bl	8004394 <usleep>
    while (tries-- > 0)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	1e5a      	subs	r2, r3, #1
 8003666:	60fa      	str	r2, [r7, #12]
 8003668:	2b00      	cmp	r3, #0
 800366a:	dce3      	bgt.n	8003634 <mlx90632_start_measurement+0x40>
 800366c:	e000      	b.n	8003670 <mlx90632_start_measurement+0x7c>
            break;
 800366e:	bf00      	nop
    }

    if (tries < 0)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2b00      	cmp	r3, #0
 8003674:	da02      	bge.n	800367c <mlx90632_start_measurement+0x88>
    {
        // data not ready
        return -ETIMEDOUT;
 8003676:	f06f 0373 	mvn.w	r3, #115	; 0x73
 800367a:	e003      	b.n	8003684 <mlx90632_start_measurement+0x90>
    }

    return (reg_status & MLX90632_STAT_CYCLE_POS) >> 2;
 800367c:	88fb      	ldrh	r3, [r7, #6]
 800367e:	089b      	lsrs	r3, r3, #2
 8003680:	f003 031f 	and.w	r3, r3, #31
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <mlx90632_channel_new_select>:
 *
 * @retval 0 When both memory locations are updated as per ret
 * @retval -EINVAL channel_new and channel_old were not updated
 */
STATIC int32_t mlx90632_channel_new_select(int32_t ret, uint8_t *channel_new, uint8_t *channel_old)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
    switch (ret)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d003      	beq.n	80036a6 <mlx90632_channel_new_select+0x1a>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d007      	beq.n	80036b4 <mlx90632_channel_new_select+0x28>
 80036a4:	e00d      	b.n	80036c2 <mlx90632_channel_new_select+0x36>
    {
        case 1:
            *channel_new = 1;
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	2201      	movs	r2, #1
 80036aa:	701a      	strb	r2, [r3, #0]
            *channel_old = 2;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	701a      	strb	r2, [r3, #0]
            break;
 80036b2:	e009      	b.n	80036c8 <mlx90632_channel_new_select+0x3c>

        case 2:
            *channel_new = 2;
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	2202      	movs	r2, #2
 80036b8:	701a      	strb	r2, [r3, #0]
            *channel_old = 1;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	701a      	strb	r2, [r3, #0]
            break;
 80036c0:	e002      	b.n	80036c8 <mlx90632_channel_new_select+0x3c>

        default:
            return -EINVAL;
 80036c2:	f06f 0315 	mvn.w	r3, #21
 80036c6:	e000      	b.n	80036ca <mlx90632_channel_new_select+0x3e>
    }
    return 0;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <mlx90632_read_temp_ambient_raw>:
 *
 * @retval 0 Successfully read both values
 * @retval <0 Something went wrong. Check errno.h for more details.
 */
STATIC int32_t mlx90632_read_temp_ambient_raw(int16_t *ambient_new_raw, int16_t *ambient_old_raw)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b084      	sub	sp, #16
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	6039      	str	r1, [r7, #0]
    int32_t ret;
    uint16_t read_tmp;

    ret = mlx90632_i2c_read(MLX90632_RAM_3(1), &read_tmp);
 80036e0:	f107 030a 	add.w	r3, r7, #10
 80036e4:	4619      	mov	r1, r3
 80036e6:	f244 0005 	movw	r0, #16389	; 0x4005
 80036ea:	f000 fdd9 	bl	80042a0 <mlx90632_i2c_read>
 80036ee:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	da01      	bge.n	80036fa <mlx90632_read_temp_ambient_raw+0x24>
        return ret;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	e015      	b.n	8003726 <mlx90632_read_temp_ambient_raw+0x50>
    *ambient_new_raw = (int16_t)read_tmp;
 80036fa:	897b      	ldrh	r3, [r7, #10]
 80036fc:	b21a      	sxth	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	801a      	strh	r2, [r3, #0]

    ret = mlx90632_i2c_read(MLX90632_RAM_3(2), &read_tmp);
 8003702:	f107 030a 	add.w	r3, r7, #10
 8003706:	4619      	mov	r1, r3
 8003708:	f244 0008 	movw	r0, #16392	; 0x4008
 800370c:	f000 fdc8 	bl	80042a0 <mlx90632_i2c_read>
 8003710:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2b00      	cmp	r3, #0
 8003716:	da01      	bge.n	800371c <mlx90632_read_temp_ambient_raw+0x46>
        return ret;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	e004      	b.n	8003726 <mlx90632_read_temp_ambient_raw+0x50>
    *ambient_old_raw = (int16_t)read_tmp;
 800371c:	897b      	ldrh	r3, [r7, #10]
 800371e:	b21a      	sxth	r2, r3
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	801a      	strh	r2, [r3, #0]

    return ret;
 8003724:	68fb      	ldr	r3, [r7, #12]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <mlx90632_read_temp_object_raw>:
 * @retval 0 Successfully read both values
 * @retval <0 Something went wrong. Check errno.h for more details.
 */
STATIC int32_t mlx90632_read_temp_object_raw(int32_t start_measurement_ret,
                                             int16_t *object_new_raw, int16_t *object_old_raw)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b088      	sub	sp, #32
 8003732:	af00      	add	r7, sp, #0
 8003734:	60f8      	str	r0, [r7, #12]
 8003736:	60b9      	str	r1, [r7, #8]
 8003738:	607a      	str	r2, [r7, #4]
    int32_t ret;
    uint16_t read_tmp;
    int16_t read;
    uint8_t channel, channel_old;

    ret = mlx90632_channel_new_select(start_measurement_ret, &channel, &channel_old);
 800373a:	f107 0216 	add.w	r2, r7, #22
 800373e:	f107 0317 	add.w	r3, r7, #23
 8003742:	4619      	mov	r1, r3
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f7ff ffa1 	bl	800368c <mlx90632_channel_new_select>
 800374a:	61f8      	str	r0, [r7, #28]
    if (ret != 0)
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <mlx90632_read_temp_object_raw+0x2a>
        return -EINVAL;
 8003752:	f06f 0315 	mvn.w	r3, #21
 8003756:	e074      	b.n	8003842 <mlx90632_read_temp_object_raw+0x114>

    ret = mlx90632_i2c_read(MLX90632_RAM_2(channel), &read_tmp);
 8003758:	7dfb      	ldrb	r3, [r7, #23]
 800375a:	b29b      	uxth	r3, r3
 800375c:	461a      	mov	r2, r3
 800375e:	0052      	lsls	r2, r2, #1
 8003760:	4413      	add	r3, r2
 8003762:	b29b      	uxth	r3, r3
 8003764:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003768:	3301      	adds	r3, #1
 800376a:	b29b      	uxth	r3, r3
 800376c:	b21b      	sxth	r3, r3
 800376e:	f107 0218 	add.w	r2, r7, #24
 8003772:	4611      	mov	r1, r2
 8003774:	4618      	mov	r0, r3
 8003776:	f000 fd93 	bl	80042a0 <mlx90632_i2c_read>
 800377a:	61f8      	str	r0, [r7, #28]
    if (ret < 0)
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	2b00      	cmp	r3, #0
 8003780:	da01      	bge.n	8003786 <mlx90632_read_temp_object_raw+0x58>
        return ret;
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	e05d      	b.n	8003842 <mlx90632_read_temp_object_raw+0x114>

    read = (int16_t)read_tmp;
 8003786:	8b3b      	ldrh	r3, [r7, #24]
 8003788:	837b      	strh	r3, [r7, #26]

    ret = mlx90632_i2c_read(MLX90632_RAM_1(channel), &read_tmp);
 800378a:	7dfb      	ldrb	r3, [r7, #23]
 800378c:	b29b      	uxth	r3, r3
 800378e:	461a      	mov	r2, r3
 8003790:	0052      	lsls	r2, r2, #1
 8003792:	4413      	add	r3, r2
 8003794:	b29b      	uxth	r3, r3
 8003796:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800379a:	b29b      	uxth	r3, r3
 800379c:	b21b      	sxth	r3, r3
 800379e:	f107 0218 	add.w	r2, r7, #24
 80037a2:	4611      	mov	r1, r2
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 fd7b 	bl	80042a0 <mlx90632_i2c_read>
 80037aa:	61f8      	str	r0, [r7, #28]
    if (ret < 0)
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	da01      	bge.n	80037b6 <mlx90632_read_temp_object_raw+0x88>
        return ret;
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	e045      	b.n	8003842 <mlx90632_read_temp_object_raw+0x114>
    *object_new_raw = (read + (int16_t)read_tmp) / 2;
 80037b6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80037ba:	8b3a      	ldrh	r2, [r7, #24]
 80037bc:	b212      	sxth	r2, r2
 80037be:	4413      	add	r3, r2
 80037c0:	0fda      	lsrs	r2, r3, #31
 80037c2:	4413      	add	r3, r2
 80037c4:	105b      	asrs	r3, r3, #1
 80037c6:	b21a      	sxth	r2, r3
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	801a      	strh	r2, [r3, #0]

    ret = mlx90632_i2c_read(MLX90632_RAM_2(channel_old), &read_tmp);
 80037cc:	7dbb      	ldrb	r3, [r7, #22]
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	461a      	mov	r2, r3
 80037d2:	0052      	lsls	r2, r2, #1
 80037d4:	4413      	add	r3, r2
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80037dc:	3301      	adds	r3, #1
 80037de:	b29b      	uxth	r3, r3
 80037e0:	b21b      	sxth	r3, r3
 80037e2:	f107 0218 	add.w	r2, r7, #24
 80037e6:	4611      	mov	r1, r2
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 fd59 	bl	80042a0 <mlx90632_i2c_read>
 80037ee:	61f8      	str	r0, [r7, #28]
    if (ret < 0)
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	da01      	bge.n	80037fa <mlx90632_read_temp_object_raw+0xcc>
        return ret;
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	e023      	b.n	8003842 <mlx90632_read_temp_object_raw+0x114>
    read = (int16_t)read_tmp;
 80037fa:	8b3b      	ldrh	r3, [r7, #24]
 80037fc:	837b      	strh	r3, [r7, #26]

    ret = mlx90632_i2c_read(MLX90632_RAM_1(channel_old), &read_tmp);
 80037fe:	7dbb      	ldrb	r3, [r7, #22]
 8003800:	b29b      	uxth	r3, r3
 8003802:	461a      	mov	r2, r3
 8003804:	0052      	lsls	r2, r2, #1
 8003806:	4413      	add	r3, r2
 8003808:	b29b      	uxth	r3, r3
 800380a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800380e:	b29b      	uxth	r3, r3
 8003810:	b21b      	sxth	r3, r3
 8003812:	f107 0218 	add.w	r2, r7, #24
 8003816:	4611      	mov	r1, r2
 8003818:	4618      	mov	r0, r3
 800381a:	f000 fd41 	bl	80042a0 <mlx90632_i2c_read>
 800381e:	61f8      	str	r0, [r7, #28]
    if (ret < 0)
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	2b00      	cmp	r3, #0
 8003824:	da01      	bge.n	800382a <mlx90632_read_temp_object_raw+0xfc>
        return ret;
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	e00b      	b.n	8003842 <mlx90632_read_temp_object_raw+0x114>
    *object_old_raw = (read + (int16_t)read_tmp) / 2;
 800382a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800382e:	8b3a      	ldrh	r2, [r7, #24]
 8003830:	b212      	sxth	r2, r2
 8003832:	4413      	add	r3, r2
 8003834:	0fda      	lsrs	r2, r3, #31
 8003836:	4413      	add	r3, r2
 8003838:	105b      	asrs	r3, r3, #1
 800383a:	b21a      	sxth	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	801a      	strh	r2, [r3, #0]

    return ret;
 8003840:	69fb      	ldr	r3, [r7, #28]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3720      	adds	r7, #32
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
	...

0800384c <mlx90632_read_temp_raw>:

int32_t mlx90632_read_temp_raw(int16_t *ambient_new_raw, int16_t *ambient_old_raw,
                               int16_t *object_new_raw, int16_t *object_old_raw)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
 8003858:	603b      	str	r3, [r7, #0]
    int32_t ret, start_measurement_ret;

    // trigger and wait for measurement to complete
    start_measurement_ret = mlx90632_start_measurement();
 800385a:	f7ff fecb 	bl	80035f4 <mlx90632_start_measurement>
 800385e:	6178      	str	r0, [r7, #20]
    if (start_measurement_ret < 0)
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	2b00      	cmp	r3, #0
 8003864:	da01      	bge.n	800386a <mlx90632_read_temp_raw+0x1e>
        return start_measurement_ret;
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	e013      	b.n	8003892 <mlx90632_read_temp_raw+0x46>
    printf("start\n");
 800386a:	480c      	ldr	r0, [pc, #48]	; (800389c <mlx90632_read_temp_raw+0x50>)
 800386c:	f00e fea8 	bl	80125c0 <puts>
    /** Read new and old **ambient** values from sensor */
    ret = mlx90632_read_temp_ambient_raw(ambient_new_raw, ambient_old_raw);
 8003870:	68b9      	ldr	r1, [r7, #8]
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f7ff ff2f 	bl	80036d6 <mlx90632_read_temp_ambient_raw>
 8003878:	6138      	str	r0, [r7, #16]
    if (ret < 0)
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	2b00      	cmp	r3, #0
 800387e:	da01      	bge.n	8003884 <mlx90632_read_temp_raw+0x38>
        return ret;
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	e006      	b.n	8003892 <mlx90632_read_temp_raw+0x46>

    /** Read new and old **object** values from sensor */
    ret = mlx90632_read_temp_object_raw(start_measurement_ret, object_new_raw, object_old_raw);
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	6978      	ldr	r0, [r7, #20]
 800388a:	f7ff ff50 	bl	800372e <mlx90632_read_temp_object_raw>
 800388e:	6138      	str	r0, [r7, #16]

    return ret;
 8003890:	693b      	ldr	r3, [r7, #16]
}
 8003892:	4618      	mov	r0, r3
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	080165b4 	.word	0x080165b4

080038a0 <mlx90632_preprocess_temp_ambient>:
}


/* DSPv5 */
double mlx90632_preprocess_temp_ambient(int16_t ambient_new_raw, int16_t ambient_old_raw, int16_t Gb)
{
 80038a0:	b5b0      	push	{r4, r5, r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	4603      	mov	r3, r0
 80038a8:	80fb      	strh	r3, [r7, #6]
 80038aa:	460b      	mov	r3, r1
 80038ac:	80bb      	strh	r3, [r7, #4]
 80038ae:	4613      	mov	r3, r2
 80038b0:	807b      	strh	r3, [r7, #2]
    double VR_Ta, kGb;

    kGb = ((double)Gb) / 1024.0;
 80038b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fc fe0c 	bl	80004d4 <__aeabi_i2d>
 80038bc:	f04f 0200 	mov.w	r2, #0
 80038c0:	4b27      	ldr	r3, [pc, #156]	; (8003960 <mlx90632_preprocess_temp_ambient+0xc0>)
 80038c2:	f7fc ff9b 	bl	80007fc <__aeabi_ddiv>
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	e9c7 2304 	strd	r2, r3, [r7, #16]

    VR_Ta = ambient_old_raw + kGb * (ambient_new_raw / (MLX90632_REF_3));
 80038ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fc fdfe 	bl	80004d4 <__aeabi_i2d>
 80038d8:	4604      	mov	r4, r0
 80038da:	460d      	mov	r5, r1
 80038dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fc fdf7 	bl	80004d4 <__aeabi_i2d>
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	4b1e      	ldr	r3, [pc, #120]	; (8003964 <mlx90632_preprocess_temp_ambient+0xc4>)
 80038ec:	f7fc ff86 	bl	80007fc <__aeabi_ddiv>
 80038f0:	4602      	mov	r2, r0
 80038f2:	460b      	mov	r3, r1
 80038f4:	4610      	mov	r0, r2
 80038f6:	4619      	mov	r1, r3
 80038f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80038fc:	f7fc fe54 	bl	80005a8 <__aeabi_dmul>
 8003900:	4602      	mov	r2, r0
 8003902:	460b      	mov	r3, r1
 8003904:	4620      	mov	r0, r4
 8003906:	4629      	mov	r1, r5
 8003908:	f7fc fc98 	bl	800023c <__adddf3>
 800390c:	4602      	mov	r2, r0
 800390e:	460b      	mov	r3, r1
 8003910:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return ((ambient_new_raw / (MLX90632_REF_3)) / VR_Ta) * 524288.0;
 8003914:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003918:	4618      	mov	r0, r3
 800391a:	f7fc fddb 	bl	80004d4 <__aeabi_i2d>
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	4b10      	ldr	r3, [pc, #64]	; (8003964 <mlx90632_preprocess_temp_ambient+0xc4>)
 8003924:	f7fc ff6a 	bl	80007fc <__aeabi_ddiv>
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	4610      	mov	r0, r2
 800392e:	4619      	mov	r1, r3
 8003930:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003934:	f7fc ff62 	bl	80007fc <__aeabi_ddiv>
 8003938:	4602      	mov	r2, r0
 800393a:	460b      	mov	r3, r1
 800393c:	4610      	mov	r0, r2
 800393e:	4619      	mov	r1, r3
 8003940:	f04f 0200 	mov.w	r2, #0
 8003944:	4b08      	ldr	r3, [pc, #32]	; (8003968 <mlx90632_preprocess_temp_ambient+0xc8>)
 8003946:	f7fc fe2f 	bl	80005a8 <__aeabi_dmul>
 800394a:	4602      	mov	r2, r0
 800394c:	460b      	mov	r3, r1
 800394e:	ec43 2b17 	vmov	d7, r2, r3
}
 8003952:	eeb0 0a47 	vmov.f32	s0, s14
 8003956:	eef0 0a67 	vmov.f32	s1, s15
 800395a:	3718      	adds	r7, #24
 800395c:	46bd      	mov	sp, r7
 800395e:	bdb0      	pop	{r4, r5, r7, pc}
 8003960:	40900000 	.word	0x40900000
 8003964:	40280000 	.word	0x40280000
 8003968:	41200000 	.word	0x41200000

0800396c <mlx90632_preprocess_temp_object>:

double mlx90632_preprocess_temp_object(int16_t object_new_raw, int16_t object_old_raw,
                                       int16_t ambient_new_raw, int16_t ambient_old_raw,
                                       int16_t Ka)
{
 800396c:	b5b0      	push	{r4, r5, r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	4604      	mov	r4, r0
 8003974:	4608      	mov	r0, r1
 8003976:	4611      	mov	r1, r2
 8003978:	461a      	mov	r2, r3
 800397a:	4623      	mov	r3, r4
 800397c:	80fb      	strh	r3, [r7, #6]
 800397e:	4603      	mov	r3, r0
 8003980:	80bb      	strh	r3, [r7, #4]
 8003982:	460b      	mov	r3, r1
 8003984:	807b      	strh	r3, [r7, #2]
 8003986:	4613      	mov	r3, r2
 8003988:	803b      	strh	r3, [r7, #0]
    double VR_IR, kKa;
//    printf("KA %d\n",Ka);
    kKa = ((double)Ka) / 1024.0;
 800398a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800398e:	4618      	mov	r0, r3
 8003990:	f7fc fda0 	bl	80004d4 <__aeabi_i2d>
 8003994:	f04f 0200 	mov.w	r2, #0
 8003998:	4b2a      	ldr	r3, [pc, #168]	; (8003a44 <mlx90632_preprocess_temp_object+0xd8>)
 800399a:	f7fc ff2f 	bl	80007fc <__aeabi_ddiv>
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	e9c7 2304 	strd	r2, r3, [r7, #16]

    VR_IR = ambient_old_raw + kKa * (ambient_new_raw / (MLX90632_REF_3));
 80039a6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fc fd92 	bl	80004d4 <__aeabi_i2d>
 80039b0:	4604      	mov	r4, r0
 80039b2:	460d      	mov	r5, r1
 80039b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7fc fd8b 	bl	80004d4 <__aeabi_i2d>
 80039be:	f04f 0200 	mov.w	r2, #0
 80039c2:	4b21      	ldr	r3, [pc, #132]	; (8003a48 <mlx90632_preprocess_temp_object+0xdc>)
 80039c4:	f7fc ff1a 	bl	80007fc <__aeabi_ddiv>
 80039c8:	4602      	mov	r2, r0
 80039ca:	460b      	mov	r3, r1
 80039cc:	4610      	mov	r0, r2
 80039ce:	4619      	mov	r1, r3
 80039d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80039d4:	f7fc fde8 	bl	80005a8 <__aeabi_dmul>
 80039d8:	4602      	mov	r2, r0
 80039da:	460b      	mov	r3, r1
 80039dc:	4620      	mov	r0, r4
 80039de:	4629      	mov	r1, r5
 80039e0:	f7fc fc2c 	bl	800023c <__adddf3>
 80039e4:	4602      	mov	r2, r0
 80039e6:	460b      	mov	r3, r1
 80039e8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return ((((object_new_raw + object_old_raw) / 2) / (MLX90632_REF_12)) / VR_IR) * 524288.0;
 80039ec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80039f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80039f4:	4413      	add	r3, r2
 80039f6:	0fda      	lsrs	r2, r3, #31
 80039f8:	4413      	add	r3, r2
 80039fa:	105b      	asrs	r3, r3, #1
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7fc fd69 	bl	80004d4 <__aeabi_i2d>
 8003a02:	f04f 0200 	mov.w	r2, #0
 8003a06:	4b10      	ldr	r3, [pc, #64]	; (8003a48 <mlx90632_preprocess_temp_object+0xdc>)
 8003a08:	f7fc fef8 	bl	80007fc <__aeabi_ddiv>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4610      	mov	r0, r2
 8003a12:	4619      	mov	r1, r3
 8003a14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a18:	f7fc fef0 	bl	80007fc <__aeabi_ddiv>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4610      	mov	r0, r2
 8003a22:	4619      	mov	r1, r3
 8003a24:	f04f 0200 	mov.w	r2, #0
 8003a28:	4b08      	ldr	r3, [pc, #32]	; (8003a4c <mlx90632_preprocess_temp_object+0xe0>)
 8003a2a:	f7fc fdbd 	bl	80005a8 <__aeabi_dmul>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	460b      	mov	r3, r1
 8003a32:	ec43 2b17 	vmov	d7, r2, r3
}
 8003a36:	eeb0 0a47 	vmov.f32	s0, s14
 8003a3a:	eef0 0a67 	vmov.f32	s1, s15
 8003a3e:	3718      	adds	r7, #24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bdb0      	pop	{r4, r5, r7, pc}
 8003a44:	40900000 	.word	0x40900000
 8003a48:	40280000 	.word	0x40280000
 8003a4c:	41200000 	.word	0x41200000

08003a50 <mlx90632_calc_temp_ambient>:

double mlx90632_calc_temp_ambient(int16_t ambient_new_raw, int16_t ambient_old_raw, int32_t P_T,
                                  int32_t P_R, int32_t P_G, int32_t P_O, int16_t Gb)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b090      	sub	sp, #64	; 0x40
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60ba      	str	r2, [r7, #8]
 8003a58:	607b      	str	r3, [r7, #4]
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	81fb      	strh	r3, [r7, #14]
 8003a5e:	460b      	mov	r3, r1
 8003a60:	81bb      	strh	r3, [r7, #12]
    double Asub, Bsub, Ablock, Bblock, Cblock, AMB;

    AMB = mlx90632_preprocess_temp_ambient(ambient_new_raw, ambient_old_raw, Gb);
 8003a62:	f9b7 2050 	ldrsh.w	r2, [r7, #80]	; 0x50
 8003a66:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8003a6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7ff ff16 	bl	80038a0 <mlx90632_preprocess_temp_ambient>
 8003a74:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38

    Asub = ((double)P_T) / (double)17592186044416.0;
 8003a78:	68b8      	ldr	r0, [r7, #8]
 8003a7a:	f7fc fd2b 	bl	80004d4 <__aeabi_i2d>
 8003a7e:	f04f 0200 	mov.w	r2, #0
 8003a82:	4b32      	ldr	r3, [pc, #200]	; (8003b4c <mlx90632_calc_temp_ambient+0xfc>)
 8003a84:	f7fc feba 	bl	80007fc <__aeabi_ddiv>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Bsub = (double)AMB - ((double)P_R / (double)256.0);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7fc fd1f 	bl	80004d4 <__aeabi_i2d>
 8003a96:	f04f 0200 	mov.w	r2, #0
 8003a9a:	4b2d      	ldr	r3, [pc, #180]	; (8003b50 <mlx90632_calc_temp_ambient+0x100>)
 8003a9c:	f7fc feae 	bl	80007fc <__aeabi_ddiv>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003aa8:	f7fc fbc6 	bl	8000238 <__aeabi_dsub>
 8003aac:	4602      	mov	r2, r0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    Ablock = Asub * (Bsub * Bsub);
 8003ab4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ab8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003abc:	f7fc fd74 	bl	80005a8 <__aeabi_dmul>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003ac8:	f7fc fd6e 	bl	80005a8 <__aeabi_dmul>
 8003acc:	4602      	mov	r2, r0
 8003ace:	460b      	mov	r3, r1
 8003ad0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    Bblock = (Bsub / (double)P_G) * (double)1048576.0;
 8003ad4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003ad6:	f7fc fcfd 	bl	80004d4 <__aeabi_i2d>
 8003ada:	4602      	mov	r2, r0
 8003adc:	460b      	mov	r3, r1
 8003ade:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003ae2:	f7fc fe8b 	bl	80007fc <__aeabi_ddiv>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	460b      	mov	r3, r1
 8003aea:	4610      	mov	r0, r2
 8003aec:	4619      	mov	r1, r3
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	4b18      	ldr	r3, [pc, #96]	; (8003b54 <mlx90632_calc_temp_ambient+0x104>)
 8003af4:	f7fc fd58 	bl	80005a8 <__aeabi_dmul>
 8003af8:	4602      	mov	r2, r0
 8003afa:	460b      	mov	r3, r1
 8003afc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    Cblock = (double)P_O / (double)256.0;
 8003b00:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003b02:	f7fc fce7 	bl	80004d4 <__aeabi_i2d>
 8003b06:	f04f 0200 	mov.w	r2, #0
 8003b0a:	4b11      	ldr	r3, [pc, #68]	; (8003b50 <mlx90632_calc_temp_ambient+0x100>)
 8003b0c:	f7fc fe76 	bl	80007fc <__aeabi_ddiv>
 8003b10:	4602      	mov	r2, r0
 8003b12:	460b      	mov	r3, r1
 8003b14:	e9c7 2304 	strd	r2, r3, [r7, #16]

    return Bblock + Ablock + Cblock;
 8003b18:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b1c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003b20:	f7fc fb8c 	bl	800023c <__adddf3>
 8003b24:	4602      	mov	r2, r0
 8003b26:	460b      	mov	r3, r1
 8003b28:	4610      	mov	r0, r2
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003b30:	f7fc fb84 	bl	800023c <__adddf3>
 8003b34:	4602      	mov	r2, r0
 8003b36:	460b      	mov	r3, r1
 8003b38:	ec43 2b17 	vmov	d7, r2, r3
}
 8003b3c:	eeb0 0a47 	vmov.f32	s0, s14
 8003b40:	eef0 0a67 	vmov.f32	s1, s15
 8003b44:	3740      	adds	r7, #64	; 0x40
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	42b00000 	.word	0x42b00000
 8003b50:	40700000 	.word	0x40700000
 8003b54:	41300000 	.word	0x41300000

08003b58 <mlx90632_calc_temp_object_iteration>:
 * @return Calculated object temperature for current iteration in milliCelsius
 */
STATIC double mlx90632_calc_temp_object_iteration(double prev_object_temp, int32_t object, double TAdut,
                                                  int32_t Ga, int32_t Fa, int32_t Fb, int16_t Ha, int16_t Hb,
                                                  double emissivity)
{
 8003b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b5c:	b09c      	sub	sp, #112	; 0x70
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	ed87 0b08 	vstr	d0, [r7, #32]
 8003b64:	61f8      	str	r0, [r7, #28]
 8003b66:	ed87 1b04 	vstr	d1, [r7, #16]
 8003b6a:	61b9      	str	r1, [r7, #24]
 8003b6c:	60fa      	str	r2, [r7, #12]
 8003b6e:	60bb      	str	r3, [r7, #8]
 8003b70:	ed87 2b00 	vstr	d2, [r7]
    // temp variables
    double KsTAtmp, Alpha_corr;
    double Ha_customer, Hb_customer;


    Ha_customer = Ha / ((double)16384.0);
 8003b74:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7fc fcab 	bl	80004d4 <__aeabi_i2d>
 8003b7e:	f04f 0200 	mov.w	r2, #0
 8003b82:	4b95      	ldr	r3, [pc, #596]	; (8003dd8 <mlx90632_calc_temp_object_iteration+0x280>)
 8003b84:	f7fc fe3a 	bl	80007fc <__aeabi_ddiv>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    Hb_customer = Hb / ((double)1024.0);
 8003b90:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7fc fc9d 	bl	80004d4 <__aeabi_i2d>
 8003b9a:	f04f 0200 	mov.w	r2, #0
 8003b9e:	4b8f      	ldr	r3, [pc, #572]	; (8003ddc <mlx90632_calc_temp_object_iteration+0x284>)
 8003ba0:	f7fc fe2c 	bl	80007fc <__aeabi_ddiv>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    calcedGa = ((double)Ga * (prev_object_temp - 25)) / ((double)68719476736.0);
 8003bac:	69b8      	ldr	r0, [r7, #24]
 8003bae:	f7fc fc91 	bl	80004d4 <__aeabi_i2d>
 8003bb2:	4682      	mov	sl, r0
 8003bb4:	468b      	mov	fp, r1
 8003bb6:	f04f 0200 	mov.w	r2, #0
 8003bba:	4b89      	ldr	r3, [pc, #548]	; (8003de0 <mlx90632_calc_temp_object_iteration+0x288>)
 8003bbc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003bc0:	f7fc fb3a 	bl	8000238 <__aeabi_dsub>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	4650      	mov	r0, sl
 8003bca:	4659      	mov	r1, fp
 8003bcc:	f7fc fcec 	bl	80005a8 <__aeabi_dmul>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4610      	mov	r0, r2
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	4b81      	ldr	r3, [pc, #516]	; (8003de4 <mlx90632_calc_temp_object_iteration+0x28c>)
 8003bde:	f7fc fe0d 	bl	80007fc <__aeabi_ddiv>
 8003be2:	4602      	mov	r2, r0
 8003be4:	460b      	mov	r3, r1
 8003be6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    KsTAtmp = (double)Fb * (TAdut - 25);
 8003bea:	68b8      	ldr	r0, [r7, #8]
 8003bec:	f7fc fc72 	bl	80004d4 <__aeabi_i2d>
 8003bf0:	4682      	mov	sl, r0
 8003bf2:	468b      	mov	fp, r1
 8003bf4:	f04f 0200 	mov.w	r2, #0
 8003bf8:	4b79      	ldr	r3, [pc, #484]	; (8003de0 <mlx90632_calc_temp_object_iteration+0x288>)
 8003bfa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003bfe:	f7fc fb1b 	bl	8000238 <__aeabi_dsub>
 8003c02:	4602      	mov	r2, r0
 8003c04:	460b      	mov	r3, r1
 8003c06:	4650      	mov	r0, sl
 8003c08:	4659      	mov	r1, fp
 8003c0a:	f7fc fccd 	bl	80005a8 <__aeabi_dmul>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    calcedGb = KsTAtmp / ((double)68719476736.0);
 8003c16:	f04f 0200 	mov.w	r2, #0
 8003c1a:	4b72      	ldr	r3, [pc, #456]	; (8003de4 <mlx90632_calc_temp_object_iteration+0x28c>)
 8003c1c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003c20:	f7fc fdec 	bl	80007fc <__aeabi_ddiv>
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    Alpha_corr = (((double)(Fa * POW10)) * Ha_customer * (double)(1 + calcedGa + calcedGb)) /
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	17da      	asrs	r2, r3, #31
 8003c30:	4698      	mov	r8, r3
 8003c32:	4691      	mov	r9, r2
 8003c34:	4b6c      	ldr	r3, [pc, #432]	; (8003de8 <mlx90632_calc_temp_object_iteration+0x290>)
 8003c36:	fb03 f209 	mul.w	r2, r3, r9
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	fb03 f308 	mul.w	r3, r3, r8
 8003c40:	4413      	add	r3, r2
 8003c42:	4a69      	ldr	r2, [pc, #420]	; (8003de8 <mlx90632_calc_temp_object_iteration+0x290>)
 8003c44:	fba8 4502 	umull	r4, r5, r8, r2
 8003c48:	442b      	add	r3, r5
 8003c4a:	461d      	mov	r5, r3
 8003c4c:	4620      	mov	r0, r4
 8003c4e:	4629      	mov	r1, r5
 8003c50:	f7fc fc7c 	bl	800054c <__aeabi_l2d>
 8003c54:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003c58:	f7fc fca6 	bl	80005a8 <__aeabi_dmul>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	460b      	mov	r3, r1
 8003c60:	4614      	mov	r4, r2
 8003c62:	461d      	mov	r5, r3
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	4b60      	ldr	r3, [pc, #384]	; (8003dec <mlx90632_calc_temp_object_iteration+0x294>)
 8003c6a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003c6e:	f7fc fae5 	bl	800023c <__adddf3>
 8003c72:	4602      	mov	r2, r0
 8003c74:	460b      	mov	r3, r1
 8003c76:	4610      	mov	r0, r2
 8003c78:	4619      	mov	r1, r3
 8003c7a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c7e:	f7fc fadd 	bl	800023c <__adddf3>
 8003c82:	4602      	mov	r2, r0
 8003c84:	460b      	mov	r3, r1
 8003c86:	4620      	mov	r0, r4
 8003c88:	4629      	mov	r1, r5
 8003c8a:	f7fc fc8d 	bl	80005a8 <__aeabi_dmul>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	460b      	mov	r3, r1
 8003c92:	4610      	mov	r0, r2
 8003c94:	4619      	mov	r1, r3
 8003c96:	f04f 0200 	mov.w	r2, #0
 8003c9a:	4b55      	ldr	r3, [pc, #340]	; (8003df0 <mlx90632_calc_temp_object_iteration+0x298>)
 8003c9c:	f7fc fdae 	bl	80007fc <__aeabi_ddiv>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
                 ((double)70368744177664.0);
    calcedFa = object / (emissivity * (Alpha_corr / POW10));
 8003ca8:	69f8      	ldr	r0, [r7, #28]
 8003caa:	f7fc fc13 	bl	80004d4 <__aeabi_i2d>
 8003cae:	4604      	mov	r4, r0
 8003cb0:	460d      	mov	r5, r1
 8003cb2:	a345      	add	r3, pc, #276	; (adr r3, 8003dc8 <mlx90632_calc_temp_object_iteration+0x270>)
 8003cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003cbc:	f7fc fd9e 	bl	80007fc <__aeabi_ddiv>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ccc:	f7fc fc6c 	bl	80005a8 <__aeabi_dmul>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	4620      	mov	r0, r4
 8003cd6:	4629      	mov	r1, r5
 8003cd8:	f7fc fd90 	bl	80007fc <__aeabi_ddiv>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    TAdut4 = (TAdut + 273.15) * (TAdut + 273.15) * (TAdut + 273.15) * (TAdut + 273.15);
 8003ce4:	a33a      	add	r3, pc, #232	; (adr r3, 8003dd0 <mlx90632_calc_temp_object_iteration+0x278>)
 8003ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003cee:	f7fc faa5 	bl	800023c <__adddf3>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	4614      	mov	r4, r2
 8003cf8:	461d      	mov	r5, r3
 8003cfa:	a335      	add	r3, pc, #212	; (adr r3, 8003dd0 <mlx90632_calc_temp_object_iteration+0x278>)
 8003cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d00:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d04:	f7fc fa9a 	bl	800023c <__adddf3>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	4620      	mov	r0, r4
 8003d0e:	4629      	mov	r1, r5
 8003d10:	f7fc fc4a 	bl	80005a8 <__aeabi_dmul>
 8003d14:	4602      	mov	r2, r0
 8003d16:	460b      	mov	r3, r1
 8003d18:	4614      	mov	r4, r2
 8003d1a:	461d      	mov	r5, r3
 8003d1c:	a32c      	add	r3, pc, #176	; (adr r3, 8003dd0 <mlx90632_calc_temp_object_iteration+0x278>)
 8003d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d22:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d26:	f7fc fa89 	bl	800023c <__adddf3>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	4620      	mov	r0, r4
 8003d30:	4629      	mov	r1, r5
 8003d32:	f7fc fc39 	bl	80005a8 <__aeabi_dmul>
 8003d36:	4602      	mov	r2, r0
 8003d38:	460b      	mov	r3, r1
 8003d3a:	4614      	mov	r4, r2
 8003d3c:	461d      	mov	r5, r3
 8003d3e:	a324      	add	r3, pc, #144	; (adr r3, 8003dd0 <mlx90632_calc_temp_object_iteration+0x278>)
 8003d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d44:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d48:	f7fc fa78 	bl	800023c <__adddf3>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4620      	mov	r0, r4
 8003d52:	4629      	mov	r1, r5
 8003d54:	f7fc fc28 	bl	80005a8 <__aeabi_dmul>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    first_sqrt = sqrt(calcedFa + TAdut4);
 8003d60:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003d64:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003d68:	f7fc fa68 	bl	800023c <__adddf3>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	460b      	mov	r3, r1
 8003d70:	ec43 2b17 	vmov	d7, r2, r3
 8003d74:	eeb0 0a47 	vmov.f32	s0, s14
 8003d78:	eef0 0a67 	vmov.f32	s1, s15
 8003d7c:	f012 f920 	bl	8015fc0 <sqrt>
 8003d80:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28

    return sqrt(first_sqrt) - 273.15 - Hb_customer;
 8003d84:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8003d88:	f012 f91a 	bl	8015fc0 <sqrt>
 8003d8c:	ec51 0b10 	vmov	r0, r1, d0
 8003d90:	a30f      	add	r3, pc, #60	; (adr r3, 8003dd0 <mlx90632_calc_temp_object_iteration+0x278>)
 8003d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d96:	f7fc fa4f 	bl	8000238 <__aeabi_dsub>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	4610      	mov	r0, r2
 8003da0:	4619      	mov	r1, r3
 8003da2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003da6:	f7fc fa47 	bl	8000238 <__aeabi_dsub>
 8003daa:	4602      	mov	r2, r0
 8003dac:	460b      	mov	r3, r1
 8003dae:	ec43 2b17 	vmov	d7, r2, r3
}
 8003db2:	eeb0 0a47 	vmov.f32	s0, s14
 8003db6:	eef0 0a67 	vmov.f32	s1, s15
 8003dba:	3770      	adds	r7, #112	; 0x70
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dc2:	bf00      	nop
 8003dc4:	f3af 8000 	nop.w
 8003dc8:	20000000 	.word	0x20000000
 8003dcc:	4202a05f 	.word	0x4202a05f
 8003dd0:	66666666 	.word	0x66666666
 8003dd4:	40711266 	.word	0x40711266
 8003dd8:	40d00000 	.word	0x40d00000
 8003ddc:	40900000 	.word	0x40900000
 8003de0:	40390000 	.word	0x40390000
 8003de4:	42300000 	.word	0x42300000
 8003de8:	540be400 	.word	0x540be400
 8003dec:	3ff00000 	.word	0x3ff00000
 8003df0:	42d00000 	.word	0x42d00000

08003df4 <mlx90632_set_emissivity>:
    return sqrt(first_sqrt) - 273.15 - Hb_customer;
}

static double emissivity = 0.0;
void mlx90632_set_emissivity(double value)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	ed87 0b00 	vstr	d0, [r7]
    emissivity = value;
 8003dfe:	4905      	ldr	r1, [pc, #20]	; (8003e14 <mlx90632_set_emissivity+0x20>)
 8003e00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e04:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	20000478 	.word	0x20000478

08003e18 <mlx90632_get_emissivity>:

double mlx90632_get_emissivity(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
    if (emissivity == 0.0)
 8003e1c:	4b0c      	ldr	r3, [pc, #48]	; (8003e50 <mlx90632_get_emissivity+0x38>)
 8003e1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	f04f 0300 	mov.w	r3, #0
 8003e2a:	f7fc fe25 	bl	8000a78 <__aeabi_dcmpeq>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <mlx90632_get_emissivity+0x24>
    {
        return 1.0;
 8003e34:	f04f 0200 	mov.w	r2, #0
 8003e38:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <mlx90632_get_emissivity+0x3c>)
 8003e3a:	e002      	b.n	8003e42 <mlx90632_get_emissivity+0x2a>
    }
    else
    {
        return emissivity;
 8003e3c:	4b04      	ldr	r3, [pc, #16]	; (8003e50 <mlx90632_get_emissivity+0x38>)
 8003e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
    }
}
 8003e42:	ec43 2b17 	vmov	d7, r2, r3
 8003e46:	eeb0 0a47 	vmov.f32	s0, s14
 8003e4a:	eef0 0a67 	vmov.f32	s1, s15
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	20000478 	.word	0x20000478
 8003e54:	3ff00000 	.word	0x3ff00000

08003e58 <mlx90632_calc_temp_object>:

double mlx90632_calc_temp_object(int32_t object, int32_t ambient,
                                 int32_t Ea, int32_t Eb, int32_t Ga, int32_t Fa, int32_t Fb,
                                 int16_t Ha, int16_t Hb)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b092      	sub	sp, #72	; 0x48
 8003e5c:	af02      	add	r7, sp, #8
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
 8003e64:	603b      	str	r3, [r7, #0]
    double kEa, kEb, TAdut;
    double temp = 25.0;
 8003e66:	f04f 0200 	mov.w	r2, #0
 8003e6a:	4b34      	ldr	r3, [pc, #208]	; (8003f3c <mlx90632_calc_temp_object+0xe4>)
 8003e6c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double tmp_emi = mlx90632_get_emissivity();
 8003e70:	f7ff ffd2 	bl	8003e18 <mlx90632_get_emissivity>
 8003e74:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
    int8_t i;

    kEa = ((double)Ea) / ((double)65536.0);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f7fc fb2b 	bl	80004d4 <__aeabi_i2d>
 8003e7e:	f04f 0200 	mov.w	r2, #0
 8003e82:	4b2f      	ldr	r3, [pc, #188]	; (8003f40 <mlx90632_calc_temp_object+0xe8>)
 8003e84:	f7fc fcba 	bl	80007fc <__aeabi_ddiv>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    kEb = ((double)Eb) / ((double)256.0);
 8003e90:	6838      	ldr	r0, [r7, #0]
 8003e92:	f7fc fb1f 	bl	80004d4 <__aeabi_i2d>
 8003e96:	f04f 0200 	mov.w	r2, #0
 8003e9a:	4b2a      	ldr	r3, [pc, #168]	; (8003f44 <mlx90632_calc_temp_object+0xec>)
 8003e9c:	f7fc fcae 	bl	80007fc <__aeabi_ddiv>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    TAdut = (((double)ambient) - kEb) / kEa + 25;
 8003ea8:	68b8      	ldr	r0, [r7, #8]
 8003eaa:	f7fc fb13 	bl	80004d4 <__aeabi_i2d>
 8003eae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003eb2:	f7fc f9c1 	bl	8000238 <__aeabi_dsub>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	4610      	mov	r0, r2
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ec2:	f7fc fc9b 	bl	80007fc <__aeabi_ddiv>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	460b      	mov	r3, r1
 8003eca:	4610      	mov	r0, r2
 8003ecc:	4619      	mov	r1, r3
 8003ece:	f04f 0200 	mov.w	r2, #0
 8003ed2:	4b1a      	ldr	r3, [pc, #104]	; (8003f3c <mlx90632_calc_temp_object+0xe4>)
 8003ed4:	f7fc f9b2 	bl	800023c <__adddf3>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	460b      	mov	r3, r1
 8003edc:	e9c7 2304 	strd	r2, r3, [r7, #16]

    //iterate through calculations
    for (i = 0; i < 5; ++i)
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003ee6:	e019      	b.n	8003f1c <mlx90632_calc_temp_object+0xc4>
    {
        temp = mlx90632_calc_temp_object_iteration(temp, object, TAdut, Ga, Fa, Fb, Ha, Hb, tmp_emi);
 8003ee8:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8003eec:	9301      	str	r3, [sp, #4]
 8003eee:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8003ef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003efa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003efc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003efe:	ed97 1b04 	vldr	d1, [r7, #16]
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8003f08:	f7ff fe26 	bl	8003b58 <mlx90632_calc_temp_object_iteration>
 8003f0c:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
    for (i = 0; i < 5; ++i)
 8003f10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003f14:	3301      	adds	r3, #1
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003f1c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	dde1      	ble.n	8003ee8 <mlx90632_calc_temp_object+0x90>
    }
    return temp;
 8003f24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f28:	ec43 2b17 	vmov	d7, r2, r3
}
 8003f2c:	eeb0 0a47 	vmov.f32	s0, s14
 8003f30:	eef0 0a67 	vmov.f32	s1, s15
 8003f34:	3740      	adds	r7, #64	; 0x40
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40390000 	.word	0x40390000
 8003f40:	40f00000 	.word	0x40f00000
 8003f44:	40700000 	.word	0x40700000

08003f48 <mlx90632_init>:
    }
    return temp;
}

int32_t mlx90632_init(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
    int32_t ret;
    uint16_t eeprom_version=0, reg_status;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	807b      	strh	r3, [r7, #2]

    ret = mlx90632_i2c_read(MLX90632_EE_VERSION, &eeprom_version);
 8003f52:	1cbb      	adds	r3, r7, #2
 8003f54:	4619      	mov	r1, r3
 8003f56:	f242 400b 	movw	r0, #9227	; 0x240b
 8003f5a:	f000 f9a1 	bl	80042a0 <mlx90632_i2c_read>
 8003f5e:	6078      	str	r0, [r7, #4]
    if (ret < 0)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	da01      	bge.n	8003f6a <mlx90632_init+0x22>
    {
        return ret;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	e02d      	b.n	8003fc6 <mlx90632_init+0x7e>
    }

    if ((eeprom_version & 0x00FF) != MLX90632_DSPv5)
 8003f6a:	887b      	ldrh	r3, [r7, #2]
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b05      	cmp	r3, #5
 8003f70:	d002      	beq.n	8003f78 <mlx90632_init+0x30>
    {
        // this here can fail because of big/little endian of cpu/i2c
        return -EPROTONOSUPPORT;
 8003f72:	f06f 037a 	mvn.w	r3, #122	; 0x7a
 8003f76:	e026      	b.n	8003fc6 <mlx90632_init+0x7e>
    }

    ret = mlx90632_i2c_read(MLX90632_REG_STATUS, &reg_status);
 8003f78:	463b      	mov	r3, r7
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8003f80:	f000 f98e 	bl	80042a0 <mlx90632_i2c_read>
 8003f84:	6078      	str	r0, [r7, #4]
    if (ret < 0)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	da01      	bge.n	8003f90 <mlx90632_init+0x48>
        return ret;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	e01a      	b.n	8003fc6 <mlx90632_init+0x7e>

    // Prepare a clean start with setting NEW_DATA to 0
    ret = mlx90632_i2c_write(MLX90632_REG_STATUS, reg_status & ~(MLX90632_STAT_DATA_RDY));
 8003f90:	883b      	ldrh	r3, [r7, #0]
 8003f92:	f023 0301 	bic.w	r3, r3, #1
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	4619      	mov	r1, r3
 8003f9a:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8003f9e:	f000 f9d1 	bl	8004344 <mlx90632_i2c_write>
 8003fa2:	6078      	str	r0, [r7, #4]
    if (ret < 0)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	da01      	bge.n	8003fae <mlx90632_init+0x66>
        return ret;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	e00b      	b.n	8003fc6 <mlx90632_init+0x7e>

    if ((eeprom_version & 0x7F00) == MLX90632_XTD_RNG_KEY)
 8003fae:	887b      	ldrh	r3, [r7, #2]
 8003fb0:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8003fb4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003fb8:	d101      	bne.n	8003fbe <mlx90632_init+0x76>
    {
        return ERANGE;
 8003fba:	2322      	movs	r3, #34	; 0x22
 8003fbc:	e003      	b.n	8003fc6 <mlx90632_init+0x7e>
    }
    HAL_Delay(10);
 8003fbe:	200a      	movs	r0, #10
 8003fc0:	f7fe f80c 	bl	8001fdc <HAL_Delay>

//    HAL_Delay(10);
//    mlx90632_read_eeprom(&PR, &PG, &PO, &PT, &Ea, &Eb, &Fa, &Fb, &Ga, &Gb, &Ha, &Hb, &Ka);
    return 0;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <mlx90632_read_eeprom>:
        return MLX90632_MEAS_HZ_ERROR;

    return (mlx90632_meas_t)MLX90632_REFRESH_RATE(meas1);
}
int mlx90632_read_eeprom(int32_t *PR, int32_t *PG, int32_t *PO, int32_t *PT, int32_t *Ea, int32_t *Eb, int32_t *Fa, int32_t *Fb, int32_t *Ga, int16_t *Gb, int16_t *Ha, int16_t *Hb, int16_t *Ka)
  {
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b086      	sub	sp, #24
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	60f8      	str	r0, [r7, #12]
 8003fd6:	60b9      	str	r1, [r7, #8]
 8003fd8:	607a      	str	r2, [r7, #4]
 8003fda:	603b      	str	r3, [r7, #0]
    int32_t ret;
    ret = mlx90632_i2c_read32(MLX90632_EE_P_R, (uint32_t *) PR);
 8003fdc:	68f9      	ldr	r1, [r7, #12]
 8003fde:	f242 400c 	movw	r0, #9228	; 0x240c
 8003fe2:	f000 f985 	bl	80042f0 <mlx90632_i2c_read32>
 8003fe6:	6178      	str	r0, [r7, #20]
   // printf("P_R %ld\n",PR);
    if(ret < 0)
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	da01      	bge.n	8003ff2 <mlx90632_read_eeprom+0x24>
      return ret;
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	e084      	b.n	80040fc <mlx90632_read_eeprom+0x12e>
    ret = mlx90632_i2c_read32(MLX90632_EE_P_G, (uint32_t *) PG);
 8003ff2:	68b9      	ldr	r1, [r7, #8]
 8003ff4:	f242 400e 	movw	r0, #9230	; 0x240e
 8003ff8:	f000 f97a 	bl	80042f0 <mlx90632_i2c_read32>
 8003ffc:	6178      	str	r0, [r7, #20]
   // printf("P_G %d\n",PG);
    if(ret < 0)
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	2b00      	cmp	r3, #0
 8004002:	da01      	bge.n	8004008 <mlx90632_read_eeprom+0x3a>
      return ret;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	e079      	b.n	80040fc <mlx90632_read_eeprom+0x12e>
    ret = mlx90632_i2c_read32(MLX90632_EE_P_O, (uint32_t *) PO);
 8004008:	6879      	ldr	r1, [r7, #4]
 800400a:	f242 4012 	movw	r0, #9234	; 0x2412
 800400e:	f000 f96f 	bl	80042f0 <mlx90632_i2c_read32>
 8004012:	6178      	str	r0, [r7, #20]
   // printf("P_o %d\n",PO);
    if(ret < 0)
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	2b00      	cmp	r3, #0
 8004018:	da01      	bge.n	800401e <mlx90632_read_eeprom+0x50>
      return ret;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	e06e      	b.n	80040fc <mlx90632_read_eeprom+0x12e>
    ret = mlx90632_i2c_read32(MLX90632_EE_P_T, (uint32_t *) PT);
 800401e:	6839      	ldr	r1, [r7, #0]
 8004020:	f242 4010 	movw	r0, #9232	; 0x2410
 8004024:	f000 f964 	bl	80042f0 <mlx90632_i2c_read32>
 8004028:	6178      	str	r0, [r7, #20]
   // printf("P_T %d\n",PT);
    if(ret < 0)
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	2b00      	cmp	r3, #0
 800402e:	da01      	bge.n	8004034 <mlx90632_read_eeprom+0x66>
      return ret;
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	e063      	b.n	80040fc <mlx90632_read_eeprom+0x12e>
    ret = mlx90632_i2c_read32(MLX90632_EE_Ea, (uint32_t *) Ea);
 8004034:	6a39      	ldr	r1, [r7, #32]
 8004036:	f242 4024 	movw	r0, #9252	; 0x2424
 800403a:	f000 f959 	bl	80042f0 <mlx90632_i2c_read32>
 800403e:	6178      	str	r0, [r7, #20]
   // printf("E_A %d\n",Ea);
    if(ret < 0)
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	2b00      	cmp	r3, #0
 8004044:	da01      	bge.n	800404a <mlx90632_read_eeprom+0x7c>
      return ret;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	e058      	b.n	80040fc <mlx90632_read_eeprom+0x12e>
    ret = mlx90632_i2c_read32(MLX90632_EE_Eb, (uint32_t *) Eb);
 800404a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800404c:	f242 4026 	movw	r0, #9254	; 0x2426
 8004050:	f000 f94e 	bl	80042f0 <mlx90632_i2c_read32>
 8004054:	6178      	str	r0, [r7, #20]
   // printf("E_b %d\n",Eb);
    if(ret < 0)
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	2b00      	cmp	r3, #0
 800405a:	da01      	bge.n	8004060 <mlx90632_read_eeprom+0x92>
      return ret;
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	e04d      	b.n	80040fc <mlx90632_read_eeprom+0x12e>
    ret = mlx90632_i2c_read32(MLX90632_EE_Fa, (uint32_t *) Fa);
 8004060:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004062:	f242 4028 	movw	r0, #9256	; 0x2428
 8004066:	f000 f943 	bl	80042f0 <mlx90632_i2c_read32>
 800406a:	6178      	str	r0, [r7, #20]
   // printf("F_A %d\n",Fa);
    if(ret < 0)
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	2b00      	cmp	r3, #0
 8004070:	da01      	bge.n	8004076 <mlx90632_read_eeprom+0xa8>
      return ret;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	e042      	b.n	80040fc <mlx90632_read_eeprom+0x12e>
    ret = mlx90632_i2c_read32(MLX90632_EE_Fb, (uint32_t *) Fb);
 8004076:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004078:	f242 402a 	movw	r0, #9258	; 0x242a
 800407c:	f000 f938 	bl	80042f0 <mlx90632_i2c_read32>
 8004080:	6178      	str	r0, [r7, #20]
   // printf("F_b %d\n",Fb);
    if(ret < 0)
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	2b00      	cmp	r3, #0
 8004086:	da01      	bge.n	800408c <mlx90632_read_eeprom+0xbe>
      return ret;
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	e037      	b.n	80040fc <mlx90632_read_eeprom+0x12e>
    ret = mlx90632_i2c_read32(MLX90632_EE_Ga, (uint32_t *) Ga);
 800408c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800408e:	f242 402c 	movw	r0, #9260	; 0x242c
 8004092:	f000 f92d 	bl	80042f0 <mlx90632_i2c_read32>
 8004096:	6178      	str	r0, [r7, #20]
   // printf("G_A %d\n",Ga);
    if(ret < 0)
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	2b00      	cmp	r3, #0
 800409c:	da01      	bge.n	80040a2 <mlx90632_read_eeprom+0xd4>
      return ret;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	e02c      	b.n	80040fc <mlx90632_read_eeprom+0x12e>
    ret = mlx90632_i2c_read(MLX90632_EE_Gb, (uint16_t *) Gb);
 80040a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80040a4:	f242 402e 	movw	r0, #9262	; 0x242e
 80040a8:	f000 f8fa 	bl	80042a0 <mlx90632_i2c_read>
 80040ac:	6178      	str	r0, [r7, #20]
   // printf("G_b %d\n",Gb);
    if(ret < 0)
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	da01      	bge.n	80040b8 <mlx90632_read_eeprom+0xea>
      return ret;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	e021      	b.n	80040fc <mlx90632_read_eeprom+0x12e>
    ret = mlx90632_i2c_read(MLX90632_EE_Ha, (uint16_t *) Ha);
 80040b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040ba:	f242 4081 	movw	r0, #9345	; 0x2481
 80040be:	f000 f8ef 	bl	80042a0 <mlx90632_i2c_read>
 80040c2:	6178      	str	r0, [r7, #20]
   // printf("H_A %d\n",Ha);
    if(ret < 0)
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	da01      	bge.n	80040ce <mlx90632_read_eeprom+0x100>
      return ret;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	e016      	b.n	80040fc <mlx90632_read_eeprom+0x12e>
    ret = mlx90632_i2c_read(MLX90632_EE_Hb, (uint16_t *) Hb);
 80040ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80040d0:	f242 4082 	movw	r0, #9346	; 0x2482
 80040d4:	f000 f8e4 	bl	80042a0 <mlx90632_i2c_read>
 80040d8:	6178      	str	r0, [r7, #20]
   // printf("H_b %d\n",Hb);
    if(ret < 0)
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	da01      	bge.n	80040e4 <mlx90632_read_eeprom+0x116>
      return ret;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	e00b      	b.n	80040fc <mlx90632_read_eeprom+0x12e>
    ret = mlx90632_i2c_read(MLX90632_EE_Ka, (uint16_t *) Ka);
 80040e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040e6:	f242 402f 	movw	r0, #9263	; 0x242f
 80040ea:	f000 f8d9 	bl	80042a0 <mlx90632_i2c_read>
 80040ee:	6178      	str	r0, [r7, #20]
   // printf("K_A %d\n",Ka);
    if(ret < 0)
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	da01      	bge.n	80040fa <mlx90632_read_eeprom+0x12c>
      return ret;
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	e000      	b.n	80040fc <mlx90632_read_eeprom+0x12e>
    return 0;
 80040fa:	2300      	movs	r3, #0
  }
 80040fc:	4618      	mov	r0, r3
 80040fe:	3718      	adds	r7, #24
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	0000      	movs	r0, r0
	...

08004108 <Temp>:

double Temp(void)
{
 8004108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800410c:	b08e      	sub	sp, #56	; 0x38
 800410e:	af06      	add	r7, sp, #24
  int32_t ret = 0; /**< Variable will store return values */
 8004110:	2300      	movs	r3, #0
 8004112:	61fb      	str	r3, [r7, #28]

  float O,A; /**< Object temperature in degrees Celsius */
  ret = mlx90632_read_temp_raw(&ambient_new_raw, &ambient_old_raw,
 8004114:	4b50      	ldr	r3, [pc, #320]	; (8004258 <Temp+0x150>)
 8004116:	4a51      	ldr	r2, [pc, #324]	; (800425c <Temp+0x154>)
 8004118:	4951      	ldr	r1, [pc, #324]	; (8004260 <Temp+0x158>)
 800411a:	4852      	ldr	r0, [pc, #328]	; (8004264 <Temp+0x15c>)
 800411c:	f7ff fb96 	bl	800384c <mlx90632_read_temp_raw>
 8004120:	61f8      	str	r0, [r7, #28]
                               &object_new_raw, &object_old_raw);


  double pre_ambient = mlx90632_preprocess_temp_ambient(ambient_new_raw,
 8004122:	4b50      	ldr	r3, [pc, #320]	; (8004264 <Temp+0x15c>)
 8004124:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004128:	4a4d      	ldr	r2, [pc, #308]	; (8004260 <Temp+0x158>)
 800412a:	f9b2 1000 	ldrsh.w	r1, [r2]
 800412e:	4a4e      	ldr	r2, [pc, #312]	; (8004268 <Temp+0x160>)
 8004130:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004134:	4618      	mov	r0, r3
 8004136:	f7ff fbb3 	bl	80038a0 <mlx90632_preprocess_temp_ambient>
 800413a:	ed87 0b04 	vstr	d0, [r7, #16]
                                                        ambient_old_raw, Gb);
  double pre_object = mlx90632_preprocess_temp_object(object_new_raw, object_old_raw,
 800413e:	4b47      	ldr	r3, [pc, #284]	; (800425c <Temp+0x154>)
 8004140:	f9b3 0000 	ldrsh.w	r0, [r3]
 8004144:	4b44      	ldr	r3, [pc, #272]	; (8004258 <Temp+0x150>)
 8004146:	f9b3 1000 	ldrsh.w	r1, [r3]
 800414a:	4b46      	ldr	r3, [pc, #280]	; (8004264 <Temp+0x15c>)
 800414c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004150:	4b43      	ldr	r3, [pc, #268]	; (8004260 <Temp+0x158>)
 8004152:	f9b3 4000 	ldrsh.w	r4, [r3]
 8004156:	4b45      	ldr	r3, [pc, #276]	; (800426c <Temp+0x164>)
 8004158:	f9b3 3000 	ldrsh.w	r3, [r3]
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	4623      	mov	r3, r4
 8004160:	f7ff fc04 	bl	800396c <mlx90632_preprocess_temp_object>
 8004164:	ed87 0b02 	vstr	d0, [r7, #8]
                                                      ambient_new_raw, ambient_old_raw,
                                                      Ka);
  mlx90632_set_emissivity(1.0);
 8004168:	ed9f 0b39 	vldr	d0, [pc, #228]	; 8004250 <Temp+0x148>
 800416c:	f7ff fe42 	bl	8003df4 <mlx90632_set_emissivity>
  //      /* Calculate object temperature */
  A = mlx90632_calc_temp_ambient(ambient_new_raw, ambient_old_raw, PT, PR, PG, PO, Gb);
 8004170:	4b3c      	ldr	r3, [pc, #240]	; (8004264 <Temp+0x15c>)
 8004172:	f9b3 0000 	ldrsh.w	r0, [r3]
 8004176:	4b3a      	ldr	r3, [pc, #232]	; (8004260 <Temp+0x158>)
 8004178:	f9b3 4000 	ldrsh.w	r4, [r3]
 800417c:	4b3c      	ldr	r3, [pc, #240]	; (8004270 <Temp+0x168>)
 800417e:	681d      	ldr	r5, [r3, #0]
 8004180:	4b3c      	ldr	r3, [pc, #240]	; (8004274 <Temp+0x16c>)
 8004182:	681e      	ldr	r6, [r3, #0]
 8004184:	4b3c      	ldr	r3, [pc, #240]	; (8004278 <Temp+0x170>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a3c      	ldr	r2, [pc, #240]	; (800427c <Temp+0x174>)
 800418a:	6812      	ldr	r2, [r2, #0]
 800418c:	4936      	ldr	r1, [pc, #216]	; (8004268 <Temp+0x160>)
 800418e:	f9b1 1000 	ldrsh.w	r1, [r1]
 8004192:	9102      	str	r1, [sp, #8]
 8004194:	9201      	str	r2, [sp, #4]
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	4633      	mov	r3, r6
 800419a:	462a      	mov	r2, r5
 800419c:	4621      	mov	r1, r4
 800419e:	f7ff fc57 	bl	8003a50 <mlx90632_calc_temp_ambient>
 80041a2:	ec53 2b10 	vmov	r2, r3, d0
 80041a6:	4610      	mov	r0, r2
 80041a8:	4619      	mov	r1, r3
 80041aa:	f7fc fcf5 	bl	8000b98 <__aeabi_d2f>
 80041ae:	4603      	mov	r3, r0
 80041b0:	607b      	str	r3, [r7, #4]
  O= mlx90632_calc_temp_object(pre_object, pre_ambient, Ea, Eb, Ga, Fa, Fb, Ha, Hb);
 80041b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80041b6:	f7fc fca7 	bl	8000b08 <__aeabi_d2iz>
 80041ba:	4680      	mov	r8, r0
 80041bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80041c0:	f7fc fca2 	bl	8000b08 <__aeabi_d2iz>
 80041c4:	4684      	mov	ip, r0
 80041c6:	4b2e      	ldr	r3, [pc, #184]	; (8004280 <Temp+0x178>)
 80041c8:	681d      	ldr	r5, [r3, #0]
 80041ca:	4b2e      	ldr	r3, [pc, #184]	; (8004284 <Temp+0x17c>)
 80041cc:	681e      	ldr	r6, [r3, #0]
 80041ce:	4b2e      	ldr	r3, [pc, #184]	; (8004288 <Temp+0x180>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a2e      	ldr	r2, [pc, #184]	; (800428c <Temp+0x184>)
 80041d4:	6812      	ldr	r2, [r2, #0]
 80041d6:	492e      	ldr	r1, [pc, #184]	; (8004290 <Temp+0x188>)
 80041d8:	6809      	ldr	r1, [r1, #0]
 80041da:	482e      	ldr	r0, [pc, #184]	; (8004294 <Temp+0x18c>)
 80041dc:	f9b0 0000 	ldrsh.w	r0, [r0]
 80041e0:	4c2d      	ldr	r4, [pc, #180]	; (8004298 <Temp+0x190>)
 80041e2:	f9b4 4000 	ldrsh.w	r4, [r4]
 80041e6:	9404      	str	r4, [sp, #16]
 80041e8:	9003      	str	r0, [sp, #12]
 80041ea:	9102      	str	r1, [sp, #8]
 80041ec:	9201      	str	r2, [sp, #4]
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	4633      	mov	r3, r6
 80041f2:	462a      	mov	r2, r5
 80041f4:	4661      	mov	r1, ip
 80041f6:	4640      	mov	r0, r8
 80041f8:	f7ff fe2e 	bl	8003e58 <mlx90632_calc_temp_object>
 80041fc:	ec53 2b10 	vmov	r2, r3, d0
 8004200:	4610      	mov	r0, r2
 8004202:	4619      	mov	r1, r3
 8004204:	f7fc fcc8 	bl	8000b98 <__aeabi_d2f>
 8004208:	4603      	mov	r3, r0
 800420a:	603b      	str	r3, [r7, #0]
  printf("\n OBject_Temperature: %f & Ambient: %f \t \n",O,A);
 800420c:	6838      	ldr	r0, [r7, #0]
 800420e:	f7fc f973 	bl	80004f8 <__aeabi_f2d>
 8004212:	4604      	mov	r4, r0
 8004214:	460d      	mov	r5, r1
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7fc f96e 	bl	80004f8 <__aeabi_f2d>
 800421c:	4602      	mov	r2, r0
 800421e:	460b      	mov	r3, r1
 8004220:	e9cd 2300 	strd	r2, r3, [sp]
 8004224:	4622      	mov	r2, r4
 8004226:	462b      	mov	r3, r5
 8004228:	481c      	ldr	r0, [pc, #112]	; (800429c <Temp+0x194>)
 800422a:	f00e f95b 	bl	80124e4 <iprintf>
  return O;
 800422e:	6838      	ldr	r0, [r7, #0]
 8004230:	f7fc f962 	bl	80004f8 <__aeabi_f2d>
 8004234:	4602      	mov	r2, r0
 8004236:	460b      	mov	r3, r1
 8004238:	ec43 2b17 	vmov	d7, r2, r3
}
 800423c:	eeb0 0a47 	vmov.f32	s0, s14
 8004240:	eef0 0a67 	vmov.f32	s1, s15
 8004244:	3720      	adds	r7, #32
 8004246:	46bd      	mov	sp, r7
 8004248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800424c:	f3af 8000 	nop.w
 8004250:	00000000 	.word	0x00000000
 8004254:	3ff00000 	.word	0x3ff00000
 8004258:	20000476 	.word	0x20000476
 800425c:	20000474 	.word	0x20000474
 8004260:	20000472 	.word	0x20000472
 8004264:	20000470 	.word	0x20000470
 8004268:	2000002e 	.word	0x2000002e
 800426c:	20000030 	.word	0x20000030
 8004270:	20000010 	.word	0x20000010
 8004274:	20000008 	.word	0x20000008
 8004278:	2000000c 	.word	0x2000000c
 800427c:	20000014 	.word	0x20000014
 8004280:	20000018 	.word	0x20000018
 8004284:	2000001c 	.word	0x2000001c
 8004288:	20000028 	.word	0x20000028
 800428c:	20000020 	.word	0x20000020
 8004290:	20000024 	.word	0x20000024
 8004294:	2000002c 	.word	0x2000002c
 8004298:	20000338 	.word	0x20000338
 800429c:	080165bc 	.word	0x080165bc

080042a0 <mlx90632_i2c_read>:




int32_t mlx90632_i2c_read(int16_t register_address, uint16_t *value)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b088      	sub	sp, #32
 80042a4:	af04      	add	r7, sp, #16
 80042a6:	4603      	mov	r3, r0
 80042a8:	6039      	str	r1, [r7, #0]
 80042aa:	80fb      	strh	r3, [r7, #6]
  uint8_t data[2];
  int32_t ret;
  ret =  HAL_I2C_Mem_Read(&hi2c3,Mlx90632_address,register_address,I2C_MEMADD_SIZE_16BIT,data,2,HAL_MAX_DELAY); //i2c_read(register_address,data,2);
 80042ac:	88fa      	ldrh	r2, [r7, #6]
 80042ae:	f04f 33ff 	mov.w	r3, #4294967295
 80042b2:	9302      	str	r3, [sp, #8]
 80042b4:	2302      	movs	r3, #2
 80042b6:	9301      	str	r3, [sp, #4]
 80042b8:	f107 0308 	add.w	r3, r7, #8
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	2302      	movs	r3, #2
 80042c0:	2174      	movs	r1, #116	; 0x74
 80042c2:	480a      	ldr	r0, [pc, #40]	; (80042ec <mlx90632_i2c_read+0x4c>)
 80042c4:	f002 fa1c 	bl	8006700 <HAL_I2C_Mem_Read>
 80042c8:	4603      	mov	r3, r0
 80042ca:	60fb      	str	r3, [r7, #12]
    //Endianness
  *value = data[1]|(data[0]<<8);
 80042cc:	7a7b      	ldrb	r3, [r7, #9]
 80042ce:	b21a      	sxth	r2, r3
 80042d0:	7a3b      	ldrb	r3, [r7, #8]
 80042d2:	021b      	lsls	r3, r3, #8
 80042d4:	b21b      	sxth	r3, r3
 80042d6:	4313      	orrs	r3, r2
 80042d8:	b21b      	sxth	r3, r3
 80042da:	b29a      	uxth	r2, r3
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	801a      	strh	r2, [r3, #0]

  return ret;
 80042e0:	68fb      	ldr	r3, [r7, #12]

}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	200003e0 	.word	0x200003e0

080042f0 <mlx90632_i2c_read32>:

/* Implementation of I2C read for 32-bit values */
int32_t mlx90632_i2c_read32(int16_t register_address,uint32_t *value)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b088      	sub	sp, #32
 80042f4:	af04      	add	r7, sp, #16
 80042f6:	4603      	mov	r3, r0
 80042f8:	6039      	str	r1, [r7, #0]
 80042fa:	80fb      	strh	r3, [r7, #6]
  uint8_t data[4];
  int32_t ret;
  ret =  HAL_I2C_Mem_Read(&hi2c3,Mlx90632_address,register_address,I2C_MEMADD_SIZE_16BIT,data,4,HAL_MAX_DELAY); //i2c_read(register_address,data,2);
 80042fc:	88fa      	ldrh	r2, [r7, #6]
 80042fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004302:	9302      	str	r3, [sp, #8]
 8004304:	2304      	movs	r3, #4
 8004306:	9301      	str	r3, [sp, #4]
 8004308:	f107 0308 	add.w	r3, r7, #8
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	2302      	movs	r3, #2
 8004310:	2174      	movs	r1, #116	; 0x74
 8004312:	480b      	ldr	r0, [pc, #44]	; (8004340 <mlx90632_i2c_read32+0x50>)
 8004314:	f002 f9f4 	bl	8006700 <HAL_I2C_Mem_Read>
 8004318:	4603      	mov	r3, r0
 800431a:	60fb      	str	r3, [r7, #12]
  //Endianness
  *value = data[2]<<24|data[3]<<16|data[0]<<8|data[1];
 800431c:	7abb      	ldrb	r3, [r7, #10]
 800431e:	061a      	lsls	r2, r3, #24
 8004320:	7afb      	ldrb	r3, [r7, #11]
 8004322:	041b      	lsls	r3, r3, #16
 8004324:	431a      	orrs	r2, r3
 8004326:	7a3b      	ldrb	r3, [r7, #8]
 8004328:	021b      	lsls	r3, r3, #8
 800432a:	4313      	orrs	r3, r2
 800432c:	7a7a      	ldrb	r2, [r7, #9]
 800432e:	4313      	orrs	r3, r2
 8004330:	461a      	mov	r2, r3
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	601a      	str	r2, [r3, #0]

  return ret;
 8004336:	68fb      	ldr	r3, [r7, #12]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	200003e0 	.word	0x200003e0

08004344 <mlx90632_i2c_write>:

int32_t mlx90632_i2c_write(int16_t register_address, uint16_t value) {
 8004344:	b580      	push	{r7, lr}
 8004346:	b088      	sub	sp, #32
 8004348:	af04      	add	r7, sp, #16
 800434a:	4603      	mov	r3, r0
 800434c:	460a      	mov	r2, r1
 800434e:	80fb      	strh	r3, [r7, #6]
 8004350:	4613      	mov	r3, r2
 8004352:	80bb      	strh	r3, [r7, #4]
  int32_t ret;
  uint8_t data[2];
  data[0] = value >> 8;
 8004354:	88bb      	ldrh	r3, [r7, #4]
 8004356:	0a1b      	lsrs	r3, r3, #8
 8004358:	b29b      	uxth	r3, r3
 800435a:	b2db      	uxtb	r3, r3
 800435c:	723b      	strb	r3, [r7, #8]
  data[1] = value;
 800435e:	88bb      	ldrh	r3, [r7, #4]
 8004360:	b2db      	uxtb	r3, r3
 8004362:	727b      	strb	r3, [r7, #9]
  return ret =  HAL_I2C_Mem_Write(&hi2c3,Mlx90632_address,register_address,I2C_MEMADD_SIZE_16BIT,data,2,HAL_MAX_DELAY); //i2c_read(register_address,data,2);
 8004364:	88fa      	ldrh	r2, [r7, #6]
 8004366:	f04f 33ff 	mov.w	r3, #4294967295
 800436a:	9302      	str	r3, [sp, #8]
 800436c:	2302      	movs	r3, #2
 800436e:	9301      	str	r3, [sp, #4]
 8004370:	f107 0308 	add.w	r3, r7, #8
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	2302      	movs	r3, #2
 8004378:	2174      	movs	r1, #116	; 0x74
 800437a:	4805      	ldr	r0, [pc, #20]	; (8004390 <mlx90632_i2c_write+0x4c>)
 800437c:	f002 f8ac 	bl	80064d8 <HAL_I2C_Mem_Write>
 8004380:	4603      	mov	r3, r0
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	68fb      	ldr	r3, [r7, #12]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	200003e0 	.word	0x200003e0

08004394 <usleep>:

void usleep(int min_range, int max_range)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]

	HAL_Delay(min_range);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7fd fe1b 	bl	8001fdc <HAL_Delay>
}
 80043a6:	bf00      	nop
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <LL_AHB2_GRP1_EnableClock>:
{
 80043ae:	b480      	push	{r7}
 80043b0:	b085      	sub	sp, #20
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80043b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80043c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4013      	ands	r3, r2
 80043d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80043d2:	68fb      	ldr	r3, [r7, #12]
}
 80043d4:	bf00      	nop
 80043d6:	3714      	adds	r7, #20
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <LL_AHB3_GRP1_EnableClock>:
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80043e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80043f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4013      	ands	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004404:	68fb      	ldr	r3, [r7, #12]
}
 8004406:	bf00      	nop
 8004408:	3714      	adds	r7, #20
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
	...

08004414 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8004418:	4b0f      	ldr	r3, [pc, #60]	; (8004458 <MX_QUADSPI_Init+0x44>)
 800441a:	4a10      	ldr	r2, [pc, #64]	; (800445c <MX_QUADSPI_Init+0x48>)
 800441c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 800441e:	4b0e      	ldr	r3, [pc, #56]	; (8004458 <MX_QUADSPI_Init+0x44>)
 8004420:	2201      	movs	r2, #1
 8004422:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8004424:	4b0c      	ldr	r3, [pc, #48]	; (8004458 <MX_QUADSPI_Init+0x44>)
 8004426:	2204      	movs	r2, #4
 8004428:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800442a:	4b0b      	ldr	r3, [pc, #44]	; (8004458 <MX_QUADSPI_Init+0x44>)
 800442c:	2200      	movs	r2, #0
 800442e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 20;
 8004430:	4b09      	ldr	r3, [pc, #36]	; (8004458 <MX_QUADSPI_Init+0x44>)
 8004432:	2214      	movs	r2, #20
 8004434:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8004436:	4b08      	ldr	r3, [pc, #32]	; (8004458 <MX_QUADSPI_Init+0x44>)
 8004438:	2200      	movs	r2, #0
 800443a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800443c:	4b06      	ldr	r3, [pc, #24]	; (8004458 <MX_QUADSPI_Init+0x44>)
 800443e:	2200      	movs	r2, #0
 8004440:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8004442:	4805      	ldr	r0, [pc, #20]	; (8004458 <MX_QUADSPI_Init+0x44>)
 8004444:	f002 fe6a 	bl	800711c <HAL_QSPI_Init>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800444e:	f7ff f8c5 	bl	80035dc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8004452:	bf00      	nop
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	20000480 	.word	0x20000480
 800445c:	a0001000 	.word	0xa0001000

08004460 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b088      	sub	sp, #32
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004468:	f107 030c 	add.w	r3, r7, #12
 800446c:	2200      	movs	r2, #0
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	605a      	str	r2, [r3, #4]
 8004472:	609a      	str	r2, [r3, #8]
 8004474:	60da      	str	r2, [r3, #12]
 8004476:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a2a      	ldr	r2, [pc, #168]	; (8004528 <HAL_QSPI_MspInit+0xc8>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d14e      	bne.n	8004520 <HAL_QSPI_MspInit+0xc0>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8004482:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004486:	f7ff ffab 	bl	80043e0 <LL_AHB3_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800448a:	2002      	movs	r0, #2
 800448c:	f7ff ff8f 	bl	80043ae <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004490:	2001      	movs	r0, #1
 8004492:	f7ff ff8c 	bl	80043ae <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004496:	2008      	movs	r0, #8
 8004498:	f7ff ff89 	bl	80043ae <LL_AHB2_GRP1_EnableClock>
    PD7     ------> QUADSPI_BK1_IO3
    PD3     ------> QUADSPI_BK1_NCS
    PD5     ------> QUADSPI_BK1_IO1
    PD6     ------> QUADSPI_BK1_IO2
    */
    GPIO_InitStruct.Pin = QSPI_BK_IO0_Pin;
 800449c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044a2:	2302      	movs	r3, #2
 80044a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a6:	2300      	movs	r3, #0
 80044a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044aa:	2302      	movs	r3, #2
 80044ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80044ae:	230a      	movs	r3, #10
 80044b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(QSPI_BK_IO0_GPIO_Port, &GPIO_InitStruct);
 80044b2:	f107 030c 	add.w	r3, r7, #12
 80044b6:	4619      	mov	r1, r3
 80044b8:	481c      	ldr	r0, [pc, #112]	; (800452c <HAL_QSPI_MspInit+0xcc>)
 80044ba:	f001 fdc5 	bl	8006048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK_SCK_Pin;
 80044be:	2308      	movs	r3, #8
 80044c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c2:	2302      	movs	r3, #2
 80044c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c6:	2300      	movs	r3, #0
 80044c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044ca:	2302      	movs	r3, #2
 80044cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80044ce:	230a      	movs	r3, #10
 80044d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(QSPI_BK_SCK_GPIO_Port, &GPIO_InitStruct);
 80044d2:	f107 030c 	add.w	r3, r7, #12
 80044d6:	4619      	mov	r1, r3
 80044d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80044dc:	f001 fdb4 	bl	8006048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|QSPI_BK_IO1_Pin|QSPI_BK_IO2_Pin;
 80044e0:	23e0      	movs	r3, #224	; 0xe0
 80044e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044e4:	2302      	movs	r3, #2
 80044e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e8:	2300      	movs	r3, #0
 80044ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044ec:	2302      	movs	r3, #2
 80044ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80044f0:	230a      	movs	r3, #10
 80044f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044f4:	f107 030c 	add.w	r3, r7, #12
 80044f8:	4619      	mov	r1, r3
 80044fa:	480d      	ldr	r0, [pc, #52]	; (8004530 <HAL_QSPI_MspInit+0xd0>)
 80044fc:	f001 fda4 	bl	8006048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK_NCS_Pin;
 8004500:	2308      	movs	r3, #8
 8004502:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004504:	2302      	movs	r3, #2
 8004506:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004508:	2301      	movs	r3, #1
 800450a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800450c:	2302      	movs	r3, #2
 800450e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8004510:	230a      	movs	r3, #10
 8004512:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(QSPI_BK_NCS_GPIO_Port, &GPIO_InitStruct);
 8004514:	f107 030c 	add.w	r3, r7, #12
 8004518:	4619      	mov	r1, r3
 800451a:	4805      	ldr	r0, [pc, #20]	; (8004530 <HAL_QSPI_MspInit+0xd0>)
 800451c:	f001 fd94 	bl	8006048 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8004520:	bf00      	nop
 8004522:	3720      	adds	r7, #32
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	a0001000 	.word	0xa0001000
 800452c:	48000400 	.word	0x48000400
 8004530:	48000c00 	.word	0x48000c00

08004534 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8004538:	bf00      	nop
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <LL_RCC_EnableRTC>:
{
 8004542:	b480      	push	{r7}
 8004544:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8004546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800454a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800454e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004556:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800455a:	bf00      	nop
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <LL_APB1_GRP1_EnableClock>:
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800456c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004570:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004572:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4313      	orrs	r3, r2
 800457a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800457c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004580:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4013      	ands	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004588:	68fb      	ldr	r3, [r7, #12]
}
 800458a:	bf00      	nop
 800458c:	3714      	adds	r7, #20
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
	...

08004598 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800459c:	4b16      	ldr	r3, [pc, #88]	; (80045f8 <MX_RTC_Init+0x60>)
 800459e:	4a17      	ldr	r2, [pc, #92]	; (80045fc <MX_RTC_Init+0x64>)
 80045a0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80045a2:	4b15      	ldr	r3, [pc, #84]	; (80045f8 <MX_RTC_Init+0x60>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80045a8:	4b13      	ldr	r3, [pc, #76]	; (80045f8 <MX_RTC_Init+0x60>)
 80045aa:	220f      	movs	r2, #15
 80045ac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80045ae:	4b12      	ldr	r3, [pc, #72]	; (80045f8 <MX_RTC_Init+0x60>)
 80045b0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80045b4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80045b6:	4b10      	ldr	r3, [pc, #64]	; (80045f8 <MX_RTC_Init+0x60>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80045bc:	4b0e      	ldr	r3, [pc, #56]	; (80045f8 <MX_RTC_Init+0x60>)
 80045be:	2200      	movs	r2, #0
 80045c0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80045c2:	4b0d      	ldr	r3, [pc, #52]	; (80045f8 <MX_RTC_Init+0x60>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80045c8:	4b0b      	ldr	r3, [pc, #44]	; (80045f8 <MX_RTC_Init+0x60>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80045ce:	480a      	ldr	r0, [pc, #40]	; (80045f8 <MX_RTC_Init+0x60>)
 80045d0:	f004 ff7e 	bl	80094d0 <HAL_RTC_Init>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80045da:	f7fe ffff 	bl	80035dc <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80045de:	2200      	movs	r2, #0
 80045e0:	2100      	movs	r1, #0
 80045e2:	4805      	ldr	r0, [pc, #20]	; (80045f8 <MX_RTC_Init+0x60>)
 80045e4:	f005 f93a 	bl	800985c <HAL_RTCEx_SetWakeUpTimer_IT>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80045ee:	f7fe fff5 	bl	80035dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80045f2:	bf00      	nop
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	200004c4 	.word	0x200004c4
 80045fc:	40002800 	.word	0x40002800

08004600 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b096      	sub	sp, #88	; 0x58
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004608:	f107 0308 	add.w	r3, r7, #8
 800460c:	2250      	movs	r2, #80	; 0x50
 800460e:	2100      	movs	r1, #0
 8004610:	4618      	mov	r0, r3
 8004612:	f00e f8d5 	bl	80127c0 <memset>
  if(rtcHandle->Instance==RTC)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a12      	ldr	r2, [pc, #72]	; (8004664 <HAL_RTC_MspInit+0x64>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d11d      	bne.n	800465c <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004620:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004624:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004626:	f44f 7380 	mov.w	r3, #256	; 0x100
 800462a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800462c:	f107 0308 	add.w	r3, r7, #8
 8004630:	4618      	mov	r0, r3
 8004632:	f004 fcc6 	bl	8008fc2 <HAL_RCCEx_PeriphCLKConfig>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d001      	beq.n	8004640 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800463c:	f7fe ffce 	bl	80035dc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004640:	f7ff ff7f 	bl	8004542 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8004644:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004648:	f7ff ff8c 	bl	8004564 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800464c:	2200      	movs	r2, #0
 800464e:	2100      	movs	r1, #0
 8004650:	2003      	movs	r0, #3
 8004652:	f001 fb24 	bl	8005c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8004656:	2003      	movs	r0, #3
 8004658:	f001 fb3b 	bl	8005cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800465c:	bf00      	nop
 800465e:	3758      	adds	r7, #88	; 0x58
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	40002800 	.word	0x40002800

08004668 <LL_AHB3_GRP1_EnableClock>:
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8004670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004674:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004676:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4313      	orrs	r3, r2
 800467e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8004680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004684:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4013      	ands	r3, r2
 800468a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800468c:	68fb      	ldr	r3, [r7, #12]
}
 800468e:	bf00      	nop
 8004690:	3714      	adds	r7, #20
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800469e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80046a2:	f7ff ffe1 	bl	8004668 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80046a6:	2200      	movs	r2, #0
 80046a8:	2100      	movs	r1, #0
 80046aa:	202e      	movs	r0, #46	; 0x2e
 80046ac:	f001 faf7 	bl	8005c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80046b0:	202e      	movs	r0, #46	; 0x2e
 80046b2:	f001 fb0e 	bl	8005cd2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046b6:	bf00      	nop
 80046b8:	bd80      	pop	{r7, pc}

080046ba <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80046ba:	b480      	push	{r7}
 80046bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80046be:	e7fe      	b.n	80046be <NMI_Handler+0x4>

080046c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80046c4:	e7fe      	b.n	80046c4 <HardFault_Handler+0x4>

080046c6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80046c6:	b480      	push	{r7}
 80046c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80046ca:	e7fe      	b.n	80046ca <MemManage_Handler+0x4>

080046cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80046d0:	e7fe      	b.n	80046d0 <BusFault_Handler+0x4>

080046d2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80046d2:	b480      	push	{r7}
 80046d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80046d6:	e7fe      	b.n	80046d6 <UsageFault_Handler+0x4>

080046d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80046d8:	b480      	push	{r7}
 80046da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80046dc:	bf00      	nop
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr

080046e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80046e6:	b480      	push	{r7}
 80046e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046ea:	bf00      	nop
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80046f8:	bf00      	nop
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004706:	f000 fab9 	bl	8004c7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800470a:	bf00      	nop
 800470c:	bd80      	pop	{r7, pc}

0800470e <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8004712:	f7fe f9dd 	bl	8002ad0 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8004716:	bf00      	nop
 8004718:	bd80      	pop	{r7, pc}
	...

0800471c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8004720:	4802      	ldr	r0, [pc, #8]	; (800472c <LPUART1_IRQHandler+0x10>)
 8004722:	f005 fb9d 	bl	8009e60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8004726:	bf00      	nop
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	200004ec 	.word	0x200004ec

08004730 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8004734:	f00c fbf2 	bl	8010f1c <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8004738:	bf00      	nop
 800473a:	bd80      	pop	{r7, pc}

0800473c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8004740:	f00c fc22 	bl	8010f88 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8004744:	bf00      	nop
 8004746:	bd80      	pop	{r7, pc}

08004748 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800474c:	f001 fe04 	bl	8006358 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8004750:	bf00      	nop
 8004752:	bd80      	pop	{r7, pc}

08004754 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004754:	b480      	push	{r7}
 8004756:	af00      	add	r7, sp, #0
  return 1;
 8004758:	2301      	movs	r3, #1
}
 800475a:	4618      	mov	r0, r3
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <_kill>:

int _kill(int pid, int sig)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800476e:	f00e f891 	bl	8012894 <__errno>
 8004772:	4603      	mov	r3, r0
 8004774:	2216      	movs	r2, #22
 8004776:	601a      	str	r2, [r3, #0]
  return -1;
 8004778:	f04f 33ff 	mov.w	r3, #4294967295
}
 800477c:	4618      	mov	r0, r3
 800477e:	3708      	adds	r7, #8
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <_exit>:

void _exit (int status)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800478c:	f04f 31ff 	mov.w	r1, #4294967295
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7ff ffe7 	bl	8004764 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004796:	e7fe      	b.n	8004796 <_exit+0x12>

08004798 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047a4:	2300      	movs	r3, #0
 80047a6:	617b      	str	r3, [r7, #20]
 80047a8:	e00a      	b.n	80047c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80047aa:	f7fe fef9 	bl	80035a0 <__io_getchar>
 80047ae:	4601      	mov	r1, r0
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	1c5a      	adds	r2, r3, #1
 80047b4:	60ba      	str	r2, [r7, #8]
 80047b6:	b2ca      	uxtb	r2, r1
 80047b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	3301      	adds	r3, #1
 80047be:	617b      	str	r3, [r7, #20]
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	dbf0      	blt.n	80047aa <_read+0x12>
  }

  return len;
 80047c8:	687b      	ldr	r3, [r7, #4]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3718      	adds	r7, #24
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80047da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047de:	4618      	mov	r0, r3
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b083      	sub	sp, #12
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
 80047f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80047fa:	605a      	str	r2, [r3, #4]
  return 0;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <_isatty>:

int _isatty(int file)
{
 800480a:	b480      	push	{r7}
 800480c:	b083      	sub	sp, #12
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004812:	2301      	movs	r3, #1
}
 8004814:	4618      	mov	r0, r3
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
	...

0800483c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004844:	4a14      	ldr	r2, [pc, #80]	; (8004898 <_sbrk+0x5c>)
 8004846:	4b15      	ldr	r3, [pc, #84]	; (800489c <_sbrk+0x60>)
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004850:	4b13      	ldr	r3, [pc, #76]	; (80048a0 <_sbrk+0x64>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d102      	bne.n	800485e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004858:	4b11      	ldr	r3, [pc, #68]	; (80048a0 <_sbrk+0x64>)
 800485a:	4a12      	ldr	r2, [pc, #72]	; (80048a4 <_sbrk+0x68>)
 800485c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800485e:	4b10      	ldr	r3, [pc, #64]	; (80048a0 <_sbrk+0x64>)
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4413      	add	r3, r2
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	429a      	cmp	r2, r3
 800486a:	d207      	bcs.n	800487c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800486c:	f00e f812 	bl	8012894 <__errno>
 8004870:	4603      	mov	r3, r0
 8004872:	220c      	movs	r2, #12
 8004874:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004876:	f04f 33ff 	mov.w	r3, #4294967295
 800487a:	e009      	b.n	8004890 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800487c:	4b08      	ldr	r3, [pc, #32]	; (80048a0 <_sbrk+0x64>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004882:	4b07      	ldr	r3, [pc, #28]	; (80048a0 <_sbrk+0x64>)
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4413      	add	r3, r2
 800488a:	4a05      	ldr	r2, [pc, #20]	; (80048a0 <_sbrk+0x64>)
 800488c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800488e:	68fb      	ldr	r3, [r7, #12]
}
 8004890:	4618      	mov	r0, r3
 8004892:	3718      	adds	r7, #24
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	20030000 	.word	0x20030000
 800489c:	00000400 	.word	0x00000400
 80048a0:	200004e8 	.word	0x200004e8
 80048a4:	20000910 	.word	0x20000910

080048a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80048a8:	b480      	push	{r7}
 80048aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80048ac:	4b24      	ldr	r3, [pc, #144]	; (8004940 <SystemInit+0x98>)
 80048ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b2:	4a23      	ldr	r2, [pc, #140]	; (8004940 <SystemInit+0x98>)
 80048b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80048bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048c6:	f043 0301 	orr.w	r3, r3, #1
 80048ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80048cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048d0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80048d4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80048d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048e0:	4b18      	ldr	r3, [pc, #96]	; (8004944 <SystemInit+0x9c>)
 80048e2:	4013      	ands	r3, r2
 80048e4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80048e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048f2:	f023 0305 	bic.w	r3, r3, #5
 80048f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80048fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004902:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004906:	f023 0301 	bic.w	r3, r3, #1
 800490a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800490e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004912:	4a0d      	ldr	r2, [pc, #52]	; (8004948 <SystemInit+0xa0>)
 8004914:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8004916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800491a:	4a0b      	ldr	r2, [pc, #44]	; (8004948 <SystemInit+0xa0>)
 800491c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800491e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004928:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800492c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800492e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004932:	2200      	movs	r2, #0
 8004934:	619a      	str	r2, [r3, #24]
}
 8004936:	bf00      	nop
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	e000ed00 	.word	0xe000ed00
 8004944:	faf6fefb 	.word	0xfaf6fefb
 8004948:	22041000 	.word	0x22041000

0800494c <LL_AHB2_GRP1_EnableClock>:
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004958:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800495a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4313      	orrs	r3, r2
 8004962:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004968:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4013      	ands	r3, r2
 800496e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004970:	68fb      	ldr	r3, [r7, #12]
}
 8004972:	bf00      	nop
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800497e:	b480      	push	{r7}
 8004980:	b085      	sub	sp, #20
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8004986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800498a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800498c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4313      	orrs	r3, r2
 8004994:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8004996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800499a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4013      	ands	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80049a2:	68fb      	ldr	r3, [r7, #12]
}
 80049a4:	bf00      	nop
 80049a6:	3714      	adds	r7, #20
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80049b4:	4b22      	ldr	r3, [pc, #136]	; (8004a40 <MX_LPUART1_UART_Init+0x90>)
 80049b6:	4a23      	ldr	r2, [pc, #140]	; (8004a44 <MX_LPUART1_UART_Init+0x94>)
 80049b8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80049ba:	4b21      	ldr	r3, [pc, #132]	; (8004a40 <MX_LPUART1_UART_Init+0x90>)
 80049bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80049c0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80049c2:	4b1f      	ldr	r3, [pc, #124]	; (8004a40 <MX_LPUART1_UART_Init+0x90>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80049c8:	4b1d      	ldr	r3, [pc, #116]	; (8004a40 <MX_LPUART1_UART_Init+0x90>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80049ce:	4b1c      	ldr	r3, [pc, #112]	; (8004a40 <MX_LPUART1_UART_Init+0x90>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80049d4:	4b1a      	ldr	r3, [pc, #104]	; (8004a40 <MX_LPUART1_UART_Init+0x90>)
 80049d6:	220c      	movs	r2, #12
 80049d8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049da:	4b19      	ldr	r3, [pc, #100]	; (8004a40 <MX_LPUART1_UART_Init+0x90>)
 80049dc:	2200      	movs	r2, #0
 80049de:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80049e0:	4b17      	ldr	r3, [pc, #92]	; (8004a40 <MX_LPUART1_UART_Init+0x90>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80049e6:	4b16      	ldr	r3, [pc, #88]	; (8004a40 <MX_LPUART1_UART_Init+0x90>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80049ec:	4b14      	ldr	r3, [pc, #80]	; (8004a40 <MX_LPUART1_UART_Init+0x90>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80049f2:	4b13      	ldr	r3, [pc, #76]	; (8004a40 <MX_LPUART1_UART_Init+0x90>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80049f8:	4811      	ldr	r0, [pc, #68]	; (8004a40 <MX_LPUART1_UART_Init+0x90>)
 80049fa:	f005 f80b 	bl	8009a14 <HAL_UART_Init>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8004a04:	f7fe fdea 	bl	80035dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004a08:	2100      	movs	r1, #0
 8004a0a:	480d      	ldr	r0, [pc, #52]	; (8004a40 <MX_LPUART1_UART_Init+0x90>)
 8004a0c:	f006 fb21 	bl	800b052 <HAL_UARTEx_SetTxFifoThreshold>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004a16:	f7fe fde1 	bl	80035dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	4808      	ldr	r0, [pc, #32]	; (8004a40 <MX_LPUART1_UART_Init+0x90>)
 8004a1e:	f006 fb56 	bl	800b0ce <HAL_UARTEx_SetRxFifoThreshold>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004a28:	f7fe fdd8 	bl	80035dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8004a2c:	4804      	ldr	r0, [pc, #16]	; (8004a40 <MX_LPUART1_UART_Init+0x90>)
 8004a2e:	f006 fad7 	bl	800afe0 <HAL_UARTEx_DisableFifoMode>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d001      	beq.n	8004a3c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004a38:	f7fe fdd0 	bl	80035dc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8004a3c:	bf00      	nop
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	200004ec 	.word	0x200004ec
 8004a44:	40008000 	.word	0x40008000

08004a48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b09c      	sub	sp, #112	; 0x70
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a50:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004a54:	2200      	movs	r2, #0
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	605a      	str	r2, [r3, #4]
 8004a5a:	609a      	str	r2, [r3, #8]
 8004a5c:	60da      	str	r2, [r3, #12]
 8004a5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004a60:	f107 030c 	add.w	r3, r7, #12
 8004a64:	2250      	movs	r2, #80	; 0x50
 8004a66:	2100      	movs	r1, #0
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f00d fea9 	bl	80127c0 <memset>
  if(uartHandle->Instance==LPUART1)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a35      	ldr	r2, [pc, #212]	; (8004b48 <HAL_UART_MspInit+0x100>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d163      	bne.n	8004b40 <HAL_UART_MspInit+0xf8>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8004a78:	2302      	movs	r3, #2
 8004a7a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004a80:	f107 030c 	add.w	r3, r7, #12
 8004a84:	4618      	mov	r0, r3
 8004a86:	f004 fa9c 	bl	8008fc2 <HAL_RCCEx_PeriphCLKConfig>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d001      	beq.n	8004a94 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004a90:	f7fe fda4 	bl	80035dc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8004a94:	2001      	movs	r0, #1
 8004a96:	f7ff ff72 	bl	800497e <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a9a:	2004      	movs	r0, #4
 8004a9c:	f7ff ff56 	bl	800494c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004aa0:	2002      	movs	r0, #2
 8004aa2:	f7ff ff53 	bl	800494c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004aa6:	2001      	movs	r0, #1
 8004aa8:	f7ff ff50 	bl	800494c <LL_AHB2_GRP1_EnableClock>
    PC0     ------> LPUART1_RX
    PB5     ------> LPUART1_TX
    PB12     ------> LPUART1_RTS
    PA6     ------> LPUART1_CTS
    */
    GPIO_InitStruct.Pin = LPUART1_RX_MCU_Pin;
 8004aac:	2301      	movs	r3, #1
 8004aae:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8004abc:	2308      	movs	r3, #8
 8004abe:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(LPUART1_RX_MCU_GPIO_Port, &GPIO_InitStruct);
 8004ac0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4821      	ldr	r0, [pc, #132]	; (8004b4c <HAL_UART_MspInit+0x104>)
 8004ac8:	f001 fabe 	bl	8006048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LPUART1_TX_MCU_Pin;
 8004acc:	2320      	movs	r3, #32
 8004ace:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8004adc:	2308      	movs	r3, #8
 8004ade:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(LPUART1_TX_MCU_GPIO_Port, &GPIO_InitStruct);
 8004ae0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	481a      	ldr	r0, [pc, #104]	; (8004b50 <HAL_UART_MspInit+0x108>)
 8004ae8:	f001 faae 	bl	8006048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004af0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004af2:	2302      	movs	r3, #2
 8004af4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af6:	2300      	movs	r3, #0
 8004af8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004afa:	2300      	movs	r3, #0
 8004afc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8004afe:	2308      	movs	r3, #8
 8004b00:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b02:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004b06:	4619      	mov	r1, r3
 8004b08:	4811      	ldr	r0, [pc, #68]	; (8004b50 <HAL_UART_MspInit+0x108>)
 8004b0a:	f001 fa9d 	bl	8006048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004b0e:	2340      	movs	r3, #64	; 0x40
 8004b10:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b12:	2302      	movs	r3, #2
 8004b14:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b16:	2300      	movs	r3, #0
 8004b18:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8004b1e:	2308      	movs	r3, #8
 8004b20:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b22:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004b26:	4619      	mov	r1, r3
 8004b28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b2c:	f001 fa8c 	bl	8006048 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8004b30:	2200      	movs	r2, #0
 8004b32:	2100      	movs	r1, #0
 8004b34:	2025      	movs	r0, #37	; 0x25
 8004b36:	f001 f8b2 	bl	8005c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8004b3a:	2025      	movs	r0, #37	; 0x25
 8004b3c:	f001 f8c9 	bl	8005cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8004b40:	bf00      	nop
 8004b42:	3770      	adds	r7, #112	; 0x70
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	40008000 	.word	0x40008000
 8004b4c:	48000800 	.word	0x48000800
 8004b50:	48000400 	.word	0x48000400

08004b54 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8004b54:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b56:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b58:	3304      	adds	r3, #4

08004b5a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b5a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b5c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8004b5e:	d3f9      	bcc.n	8004b54 <CopyDataInit>
  bx lr
 8004b60:	4770      	bx	lr

08004b62 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8004b62:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8004b64:	3004      	adds	r0, #4

08004b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8004b66:	4288      	cmp	r0, r1
  bcc FillZerobss
 8004b68:	d3fb      	bcc.n	8004b62 <FillZerobss>
  bx lr
 8004b6a:	4770      	bx	lr

08004b6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004b6c:	480c      	ldr	r0, [pc, #48]	; (8004ba0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004b6e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004b70:	f7ff fe9a 	bl	80048a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8004b74:	480b      	ldr	r0, [pc, #44]	; (8004ba4 <LoopForever+0x6>)
 8004b76:	490c      	ldr	r1, [pc, #48]	; (8004ba8 <LoopForever+0xa>)
 8004b78:	4a0c      	ldr	r2, [pc, #48]	; (8004bac <LoopForever+0xe>)
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f7ff ffed 	bl	8004b5a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8004b80:	480b      	ldr	r0, [pc, #44]	; (8004bb0 <LoopForever+0x12>)
 8004b82:	490c      	ldr	r1, [pc, #48]	; (8004bb4 <LoopForever+0x16>)
 8004b84:	4a0c      	ldr	r2, [pc, #48]	; (8004bb8 <LoopForever+0x1a>)
 8004b86:	2300      	movs	r3, #0
 8004b88:	f7ff ffe7 	bl	8004b5a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8004b8c:	480b      	ldr	r0, [pc, #44]	; (8004bbc <LoopForever+0x1e>)
 8004b8e:	490c      	ldr	r1, [pc, #48]	; (8004bc0 <LoopForever+0x22>)
 8004b90:	2300      	movs	r3, #0
 8004b92:	f7ff ffe8 	bl	8004b66 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004b96:	f00d fe83 	bl	80128a0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004b9a:	f7fe fc53 	bl	8003444 <main>

08004b9e <LoopForever>:

LoopForever:
  b LoopForever
 8004b9e:	e7fe      	b.n	8004b9e <LoopForever>
  ldr   r0, =_estack
 8004ba0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8004ba4:	20000008 	.word	0x20000008
 8004ba8:	20000248 	.word	0x20000248
 8004bac:	08018850 	.word	0x08018850
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8004bb0:	200301e4 	.word	0x200301e4
 8004bb4:	20030a67 	.word	0x20030a67
 8004bb8:	08018ad6 	.word	0x08018ad6
  INIT_BSS _sbss, _ebss
 8004bbc:	20000298 	.word	0x20000298
 8004bc0:	2000090c 	.word	0x2000090c

08004bc4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004bc4:	e7fe      	b.n	8004bc4 <ADC1_IRQHandler>
	...

08004bc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004bd2:	4b0c      	ldr	r3, [pc, #48]	; (8004c04 <HAL_Init+0x3c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a0b      	ldr	r2, [pc, #44]	; (8004c04 <HAL_Init+0x3c>)
 8004bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bdc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004bde:	2003      	movs	r0, #3
 8004be0:	f001 f852 	bl	8005c88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004be4:	2000      	movs	r0, #0
 8004be6:	f000 f80f 	bl	8004c08 <HAL_InitTick>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	71fb      	strb	r3, [r7, #7]
 8004bf4:	e001      	b.n	8004bfa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004bf6:	f7ff fd50 	bl	800469a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004bfa:	79fb      	ldrb	r3, [r7, #7]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3708      	adds	r7, #8
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	58004000 	.word	0x58004000

08004c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004c10:	2300      	movs	r3, #0
 8004c12:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8004c14:	4b17      	ldr	r3, [pc, #92]	; (8004c74 <HAL_InitTick+0x6c>)
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d024      	beq.n	8004c66 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004c1c:	f003 ff40 	bl	8008aa0 <HAL_RCC_GetHCLKFreq>
 8004c20:	4602      	mov	r2, r0
 8004c22:	4b14      	ldr	r3, [pc, #80]	; (8004c74 <HAL_InitTick+0x6c>)
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	4619      	mov	r1, r3
 8004c28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c34:	4618      	mov	r0, r3
 8004c36:	f001 f868 	bl	8005d0a <HAL_SYSTICK_Config>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10f      	bne.n	8004c60 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b0f      	cmp	r3, #15
 8004c44:	d809      	bhi.n	8004c5a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c46:	2200      	movs	r2, #0
 8004c48:	6879      	ldr	r1, [r7, #4]
 8004c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c4e:	f001 f826 	bl	8005c9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004c52:	4a09      	ldr	r2, [pc, #36]	; (8004c78 <HAL_InitTick+0x70>)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6013      	str	r3, [r2, #0]
 8004c58:	e007      	b.n	8004c6a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	73fb      	strb	r3, [r7, #15]
 8004c5e:	e004      	b.n	8004c6a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	73fb      	strb	r3, [r7, #15]
 8004c64:	e001      	b.n	8004c6a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	2000003c 	.word	0x2000003c
 8004c78:	20000038 	.word	0x20000038

08004c7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004c80:	4b06      	ldr	r3, [pc, #24]	; (8004c9c <HAL_IncTick+0x20>)
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	461a      	mov	r2, r3
 8004c86:	4b06      	ldr	r3, [pc, #24]	; (8004ca0 <HAL_IncTick+0x24>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	4a04      	ldr	r2, [pc, #16]	; (8004ca0 <HAL_IncTick+0x24>)
 8004c8e:	6013      	str	r3, [r2, #0]
}
 8004c90:	bf00      	nop
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	2000003c 	.word	0x2000003c
 8004ca0:	20000580 	.word	0x20000580

08004ca4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8004ca8:	4b03      	ldr	r3, [pc, #12]	; (8004cb8 <HAL_GetTick+0x14>)
 8004caa:	681b      	ldr	r3, [r3, #0]
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	20000580 	.word	0x20000580

08004cbc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8004cc0:	4b03      	ldr	r3, [pc, #12]	; (8004cd0 <HAL_GetTickPrio+0x14>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	20000038 	.word	0x20000038

08004cd4 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8004cd8:	4b03      	ldr	r3, [pc, #12]	; (8004ce8 <HAL_GetTickFreq+0x14>)
 8004cda:	781b      	ldrb	r3, [r3, #0]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	2000003c 	.word	0x2000003c

08004cec <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	431a      	orrs	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b083      	sub	sp, #12
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
 8004d1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	431a      	orrs	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	609a      	str	r2, [r3, #8]
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b087      	sub	sp, #28
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
 8004d60:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	3360      	adds	r3, #96	; 0x60
 8004d66:	461a      	mov	r2, r3
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	4b08      	ldr	r3, [pc, #32]	; (8004d98 <LL_ADC_SetOffset+0x44>)
 8004d76:	4013      	ands	r3, r2
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	4313      	orrs	r3, r2
 8004d84:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004d8c:	bf00      	nop
 8004d8e:	371c      	adds	r7, #28
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	03fff000 	.word	0x03fff000

08004d9c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	3360      	adds	r3, #96	; 0x60
 8004daa:	461a      	mov	r2, r3
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4413      	add	r3, r2
 8004db2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3714      	adds	r7, #20
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b087      	sub	sp, #28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	3360      	adds	r3, #96	; 0x60
 8004dd8:	461a      	mov	r2, r3
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	431a      	orrs	r2, r3
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004df2:	bf00      	nop
 8004df4:	371c      	adds	r7, #28
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b087      	sub	sp, #28
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	60f8      	str	r0, [r7, #12]
 8004e06:	60b9      	str	r1, [r7, #8]
 8004e08:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	3330      	adds	r3, #48	; 0x30
 8004e0e:	461a      	mov	r2, r3
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	0a1b      	lsrs	r3, r3, #8
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	f003 030c 	and.w	r3, r3, #12
 8004e1a:	4413      	add	r3, r2
 8004e1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	f003 031f 	and.w	r3, r3, #31
 8004e28:	211f      	movs	r1, #31
 8004e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e2e:	43db      	mvns	r3, r3
 8004e30:	401a      	ands	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	0e9b      	lsrs	r3, r3, #26
 8004e36:	f003 011f 	and.w	r1, r3, #31
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	f003 031f 	and.w	r3, r3, #31
 8004e40:	fa01 f303 	lsl.w	r3, r1, r3
 8004e44:	431a      	orrs	r2, r3
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8004e4a:	bf00      	nop
 8004e4c:	371c      	adds	r7, #28
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b087      	sub	sp, #28
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	60f8      	str	r0, [r7, #12]
 8004e5e:	60b9      	str	r1, [r7, #8]
 8004e60:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	3314      	adds	r3, #20
 8004e66:	461a      	mov	r2, r3
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	0e5b      	lsrs	r3, r3, #25
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	f003 0304 	and.w	r3, r3, #4
 8004e72:	4413      	add	r3, r2
 8004e74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	0d1b      	lsrs	r3, r3, #20
 8004e7e:	f003 031f 	and.w	r3, r3, #31
 8004e82:	2107      	movs	r1, #7
 8004e84:	fa01 f303 	lsl.w	r3, r1, r3
 8004e88:	43db      	mvns	r3, r3
 8004e8a:	401a      	ands	r2, r3
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	0d1b      	lsrs	r3, r3, #20
 8004e90:	f003 031f 	and.w	r3, r3, #31
 8004e94:	6879      	ldr	r1, [r7, #4]
 8004e96:	fa01 f303 	lsl.w	r3, r1, r3
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8004ea0:	bf00      	nop
 8004ea2:	371c      	adds	r7, #28
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ec4:	43db      	mvns	r3, r3
 8004ec6:	401a      	ands	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f003 0318 	and.w	r3, r3, #24
 8004ece:	4908      	ldr	r1, [pc, #32]	; (8004ef0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004ed0:	40d9      	lsrs	r1, r3
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	400b      	ands	r3, r1
 8004ed6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eda:	431a      	orrs	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004ee2:	bf00      	nop
 8004ee4:	3714      	adds	r7, #20
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	0007ffff 	.word	0x0007ffff

08004ef4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004f04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	6093      	str	r3, [r2, #8]
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f2c:	d101      	bne.n	8004f32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e000      	b.n	8004f34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004f50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004f54:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f7c:	d101      	bne.n	8004f82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e000      	b.n	8004f84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f003 0301 	and.w	r3, r3, #1
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d101      	bne.n	8004fa8 <LL_ADC_IsEnabled+0x18>
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e000      	b.n	8004faa <LL_ADC_IsEnabled+0x1a>
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b083      	sub	sp, #12
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 0304 	and.w	r3, r3, #4
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	d101      	bne.n	8004fce <LL_ADC_REG_IsConversionOngoing+0x18>
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e000      	b.n	8004fd0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f003 0308 	and.w	r3, r3, #8
 8004fec:	2b08      	cmp	r3, #8
 8004fee:	d101      	bne.n	8004ff4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e000      	b.n	8004ff6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
	...

08005004 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b088      	sub	sp, #32
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800500c:	2300      	movs	r3, #0
 800500e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8005010:	2300      	movs	r3, #0
 8005012:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005014:	2300      	movs	r3, #0
 8005016:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e12e      	b.n	8005280 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800502c:	2b00      	cmp	r3, #0
 800502e:	d109      	bne.n	8005044 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f7fc fab9 	bl	80015a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4618      	mov	r0, r3
 800504a:	f7ff ff65 	bl	8004f18 <LL_ADC_IsDeepPowerDownEnabled>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d004      	beq.n	800505e <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4618      	mov	r0, r3
 800505a:	f7ff ff4b 	bl	8004ef4 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4618      	mov	r0, r3
 8005064:	f7ff ff80 	bl	8004f68 <LL_ADC_IsInternalRegulatorEnabled>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d115      	bne.n	800509a <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4618      	mov	r0, r3
 8005074:	f7ff ff64 	bl	8004f40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005078:	4b83      	ldr	r3, [pc, #524]	; (8005288 <HAL_ADC_Init+0x284>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	099b      	lsrs	r3, r3, #6
 800507e:	4a83      	ldr	r2, [pc, #524]	; (800528c <HAL_ADC_Init+0x288>)
 8005080:	fba2 2303 	umull	r2, r3, r2, r3
 8005084:	099b      	lsrs	r3, r3, #6
 8005086:	3301      	adds	r3, #1
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800508c:	e002      	b.n	8005094 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	3b01      	subs	r3, #1
 8005092:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1f9      	bne.n	800508e <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4618      	mov	r0, r3
 80050a0:	f7ff ff62 	bl	8004f68 <LL_ADC_IsInternalRegulatorEnabled>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10d      	bne.n	80050c6 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ae:	f043 0210 	orr.w	r2, r3, #16
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ba:	f043 0201 	orr.w	r2, r3, #1
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7ff ff73 	bl	8004fb6 <LL_ADC_REG_IsConversionOngoing>
 80050d0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d6:	f003 0310 	and.w	r3, r3, #16
 80050da:	2b00      	cmp	r3, #0
 80050dc:	f040 80c7 	bne.w	800526e <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	f040 80c3 	bne.w	800526e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80050f0:	f043 0202 	orr.w	r2, r3, #2
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7ff ff47 	bl	8004f90 <LL_ADC_IsEnabled>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10b      	bne.n	8005120 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005108:	4861      	ldr	r0, [pc, #388]	; (8005290 <HAL_ADC_Init+0x28c>)
 800510a:	f7ff ff41 	bl	8004f90 <LL_ADC_IsEnabled>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d105      	bne.n	8005120 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	4619      	mov	r1, r3
 800511a:	485e      	ldr	r0, [pc, #376]	; (8005294 <HAL_ADC_Init+0x290>)
 800511c:	f7ff fde6 	bl	8004cec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	7e5b      	ldrb	r3, [r3, #25]
 8005124:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800512a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005130:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005136:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800513e:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8005140:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	4313      	orrs	r3, r2
 8005146:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d106      	bne.n	8005160 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	3b01      	subs	r3, #1
 8005158:	045b      	lsls	r3, r3, #17
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	4313      	orrs	r3, r2
 800515e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005164:	2b00      	cmp	r3, #0
 8005166:	d009      	beq.n	800517c <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005174:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005176:	69ba      	ldr	r2, [r7, #24]
 8005178:	4313      	orrs	r3, r2
 800517a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68da      	ldr	r2, [r3, #12]
 8005182:	4b45      	ldr	r3, [pc, #276]	; (8005298 <HAL_ADC_Init+0x294>)
 8005184:	4013      	ands	r3, r2
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	6812      	ldr	r2, [r2, #0]
 800518a:	69b9      	ldr	r1, [r7, #24]
 800518c:	430b      	orrs	r3, r1
 800518e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4618      	mov	r0, r3
 8005196:	f7ff ff0e 	bl	8004fb6 <LL_ADC_REG_IsConversionOngoing>
 800519a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7ff ff1b 	bl	8004fdc <LL_ADC_INJ_IsConversionOngoing>
 80051a6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d13d      	bne.n	800522a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d13a      	bne.n	800522a <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80051b8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80051c0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80051c2:	4313      	orrs	r3, r2
 80051c4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051d0:	f023 0302 	bic.w	r3, r3, #2
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	6812      	ldr	r2, [r2, #0]
 80051d8:	69b9      	ldr	r1, [r7, #24]
 80051da:	430b      	orrs	r3, r1
 80051dc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d118      	bne.n	800521a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80051f2:	f023 0304 	bic.w	r3, r3, #4
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80051fe:	4311      	orrs	r1, r2
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005204:	4311      	orrs	r1, r2
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800520a:	430a      	orrs	r2, r1
 800520c:	431a      	orrs	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f042 0201 	orr.w	r2, r2, #1
 8005216:	611a      	str	r2, [r3, #16]
 8005218:	e007      	b.n	800522a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	691a      	ldr	r2, [r3, #16]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f022 0201 	bic.w	r2, r2, #1
 8005228:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d10c      	bne.n	800524c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005238:	f023 010f 	bic.w	r1, r3, #15
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	69db      	ldr	r3, [r3, #28]
 8005240:	1e5a      	subs	r2, r3, #1
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	631a      	str	r2, [r3, #48]	; 0x30
 800524a:	e007      	b.n	800525c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f022 020f 	bic.w	r2, r2, #15
 800525a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005260:	f023 0303 	bic.w	r3, r3, #3
 8005264:	f043 0201 	orr.w	r2, r3, #1
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	655a      	str	r2, [r3, #84]	; 0x54
 800526c:	e007      	b.n	800527e <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005272:	f043 0210 	orr.w	r2, r3, #16
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800527e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005280:	4618      	mov	r0, r3
 8005282:	3720      	adds	r7, #32
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	20000034 	.word	0x20000034
 800528c:	053e2d63 	.word	0x053e2d63
 8005290:	50040000 	.word	0x50040000
 8005294:	50040300 	.word	0x50040300
 8005298:	fff0c007 	.word	0xfff0c007

0800529c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b0b6      	sub	sp, #216	; 0xd8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80052ac:	2300      	movs	r3, #0
 80052ae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d101      	bne.n	80052be <HAL_ADC_ConfigChannel+0x22>
 80052ba:	2302      	movs	r3, #2
 80052bc:	e39f      	b.n	80059fe <HAL_ADC_ConfigChannel+0x762>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7ff fe73 	bl	8004fb6 <LL_ADC_REG_IsConversionOngoing>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f040 8384 	bne.w	80059e0 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6818      	ldr	r0, [r3, #0]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	6859      	ldr	r1, [r3, #4]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	461a      	mov	r2, r3
 80052e6:	f7ff fd8a 	bl	8004dfe <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7ff fe61 	bl	8004fb6 <LL_ADC_REG_IsConversionOngoing>
 80052f4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7ff fe6d 	bl	8004fdc <LL_ADC_INJ_IsConversionOngoing>
 8005302:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005306:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800530a:	2b00      	cmp	r3, #0
 800530c:	f040 81a6 	bne.w	800565c <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005310:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005314:	2b00      	cmp	r3, #0
 8005316:	f040 81a1 	bne.w	800565c <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6818      	ldr	r0, [r3, #0]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	6819      	ldr	r1, [r3, #0]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	461a      	mov	r2, r3
 8005328:	f7ff fd95 	bl	8004e56 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	695a      	ldr	r2, [r3, #20]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	08db      	lsrs	r3, r3, #3
 8005338:	f003 0303 	and.w	r3, r3, #3
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	fa02 f303 	lsl.w	r3, r2, r3
 8005342:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	2b04      	cmp	r3, #4
 800534c:	d00a      	beq.n	8005364 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6818      	ldr	r0, [r3, #0]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	6919      	ldr	r1, [r3, #16]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800535e:	f7ff fcf9 	bl	8004d54 <LL_ADC_SetOffset>
 8005362:	e17b      	b.n	800565c <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2100      	movs	r1, #0
 800536a:	4618      	mov	r0, r3
 800536c:	f7ff fd16 	bl	8004d9c <LL_ADC_GetOffsetChannel>
 8005370:	4603      	mov	r3, r0
 8005372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10a      	bne.n	8005390 <HAL_ADC_ConfigChannel+0xf4>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2100      	movs	r1, #0
 8005380:	4618      	mov	r0, r3
 8005382:	f7ff fd0b 	bl	8004d9c <LL_ADC_GetOffsetChannel>
 8005386:	4603      	mov	r3, r0
 8005388:	0e9b      	lsrs	r3, r3, #26
 800538a:	f003 021f 	and.w	r2, r3, #31
 800538e:	e01e      	b.n	80053ce <HAL_ADC_ConfigChannel+0x132>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2100      	movs	r1, #0
 8005396:	4618      	mov	r0, r3
 8005398:	f7ff fd00 	bl	8004d9c <LL_ADC_GetOffsetChannel>
 800539c:	4603      	mov	r3, r0
 800539e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80053a6:	fa93 f3a3 	rbit	r3, r3
 80053aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 80053ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80053b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 80053b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 80053be:	2320      	movs	r3, #32
 80053c0:	e004      	b.n	80053cc <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 80053c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80053c6:	fab3 f383 	clz	r3, r3
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	461a      	mov	r2, r3
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d105      	bne.n	80053e6 <HAL_ADC_ConfigChannel+0x14a>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	0e9b      	lsrs	r3, r3, #26
 80053e0:	f003 031f 	and.w	r3, r3, #31
 80053e4:	e018      	b.n	8005418 <HAL_ADC_ConfigChannel+0x17c>
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80053f2:	fa93 f3a3 	rbit	r3, r3
 80053f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80053fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8005402:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 800540a:	2320      	movs	r3, #32
 800540c:	e004      	b.n	8005418 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 800540e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005412:	fab3 f383 	clz	r3, r3
 8005416:	b2db      	uxtb	r3, r3
 8005418:	429a      	cmp	r2, r3
 800541a:	d106      	bne.n	800542a <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2200      	movs	r2, #0
 8005422:	2100      	movs	r1, #0
 8005424:	4618      	mov	r0, r3
 8005426:	f7ff fccf 	bl	8004dc8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2101      	movs	r1, #1
 8005430:	4618      	mov	r0, r3
 8005432:	f7ff fcb3 	bl	8004d9c <LL_ADC_GetOffsetChannel>
 8005436:	4603      	mov	r3, r0
 8005438:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10a      	bne.n	8005456 <HAL_ADC_ConfigChannel+0x1ba>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2101      	movs	r1, #1
 8005446:	4618      	mov	r0, r3
 8005448:	f7ff fca8 	bl	8004d9c <LL_ADC_GetOffsetChannel>
 800544c:	4603      	mov	r3, r0
 800544e:	0e9b      	lsrs	r3, r3, #26
 8005450:	f003 021f 	and.w	r2, r3, #31
 8005454:	e01e      	b.n	8005494 <HAL_ADC_ConfigChannel+0x1f8>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2101      	movs	r1, #1
 800545c:	4618      	mov	r0, r3
 800545e:	f7ff fc9d 	bl	8004d9c <LL_ADC_GetOffsetChannel>
 8005462:	4603      	mov	r3, r0
 8005464:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005468:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800546c:	fa93 f3a3 	rbit	r3, r3
 8005470:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005474:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005478:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800547c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005480:	2b00      	cmp	r3, #0
 8005482:	d101      	bne.n	8005488 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8005484:	2320      	movs	r3, #32
 8005486:	e004      	b.n	8005492 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8005488:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800548c:	fab3 f383 	clz	r3, r3
 8005490:	b2db      	uxtb	r3, r3
 8005492:	461a      	mov	r2, r3
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800549c:	2b00      	cmp	r3, #0
 800549e:	d105      	bne.n	80054ac <HAL_ADC_ConfigChannel+0x210>
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	0e9b      	lsrs	r3, r3, #26
 80054a6:	f003 031f 	and.w	r3, r3, #31
 80054aa:	e018      	b.n	80054de <HAL_ADC_ConfigChannel+0x242>
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054b8:	fa93 f3a3 	rbit	r3, r3
 80054bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80054c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80054c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80054c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d101      	bne.n	80054d4 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 80054d0:	2320      	movs	r3, #32
 80054d2:	e004      	b.n	80054de <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 80054d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80054d8:	fab3 f383 	clz	r3, r3
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	429a      	cmp	r2, r3
 80054e0:	d106      	bne.n	80054f0 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2200      	movs	r2, #0
 80054e8:	2101      	movs	r1, #1
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7ff fc6c 	bl	8004dc8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2102      	movs	r1, #2
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7ff fc50 	bl	8004d9c <LL_ADC_GetOffsetChannel>
 80054fc:	4603      	mov	r3, r0
 80054fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10a      	bne.n	800551c <HAL_ADC_ConfigChannel+0x280>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2102      	movs	r1, #2
 800550c:	4618      	mov	r0, r3
 800550e:	f7ff fc45 	bl	8004d9c <LL_ADC_GetOffsetChannel>
 8005512:	4603      	mov	r3, r0
 8005514:	0e9b      	lsrs	r3, r3, #26
 8005516:	f003 021f 	and.w	r2, r3, #31
 800551a:	e01e      	b.n	800555a <HAL_ADC_ConfigChannel+0x2be>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2102      	movs	r1, #2
 8005522:	4618      	mov	r0, r3
 8005524:	f7ff fc3a 	bl	8004d9c <LL_ADC_GetOffsetChannel>
 8005528:	4603      	mov	r3, r0
 800552a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800552e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005532:	fa93 f3a3 	rbit	r3, r3
 8005536:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800553a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800553e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005542:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 800554a:	2320      	movs	r3, #32
 800554c:	e004      	b.n	8005558 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800554e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005552:	fab3 f383 	clz	r3, r3
 8005556:	b2db      	uxtb	r3, r3
 8005558:	461a      	mov	r2, r3
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005562:	2b00      	cmp	r3, #0
 8005564:	d105      	bne.n	8005572 <HAL_ADC_ConfigChannel+0x2d6>
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	0e9b      	lsrs	r3, r3, #26
 800556c:	f003 031f 	and.w	r3, r3, #31
 8005570:	e016      	b.n	80055a0 <HAL_ADC_ConfigChannel+0x304>
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800557a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800557e:	fa93 f3a3 	rbit	r3, r3
 8005582:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005584:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005586:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800558a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8005592:	2320      	movs	r3, #32
 8005594:	e004      	b.n	80055a0 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8005596:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800559a:	fab3 f383 	clz	r3, r3
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d106      	bne.n	80055b2 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2200      	movs	r2, #0
 80055aa:	2102      	movs	r1, #2
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7ff fc0b 	bl	8004dc8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2103      	movs	r1, #3
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7ff fbef 	bl	8004d9c <LL_ADC_GetOffsetChannel>
 80055be:	4603      	mov	r3, r0
 80055c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10a      	bne.n	80055de <HAL_ADC_ConfigChannel+0x342>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2103      	movs	r1, #3
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7ff fbe4 	bl	8004d9c <LL_ADC_GetOffsetChannel>
 80055d4:	4603      	mov	r3, r0
 80055d6:	0e9b      	lsrs	r3, r3, #26
 80055d8:	f003 021f 	and.w	r2, r3, #31
 80055dc:	e017      	b.n	800560e <HAL_ADC_ConfigChannel+0x372>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2103      	movs	r1, #3
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7ff fbd9 	bl	8004d9c <LL_ADC_GetOffsetChannel>
 80055ea:	4603      	mov	r3, r0
 80055ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055f0:	fa93 f3a3 	rbit	r3, r3
 80055f4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80055f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055f8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80055fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d101      	bne.n	8005604 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8005600:	2320      	movs	r3, #32
 8005602:	e003      	b.n	800560c <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8005604:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005606:	fab3 f383 	clz	r3, r3
 800560a:	b2db      	uxtb	r3, r3
 800560c:	461a      	mov	r2, r3
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005616:	2b00      	cmp	r3, #0
 8005618:	d105      	bne.n	8005626 <HAL_ADC_ConfigChannel+0x38a>
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	0e9b      	lsrs	r3, r3, #26
 8005620:	f003 031f 	and.w	r3, r3, #31
 8005624:	e011      	b.n	800564a <HAL_ADC_ConfigChannel+0x3ae>
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800562c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800562e:	fa93 f3a3 	rbit	r3, r3
 8005632:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005634:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005636:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8005638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800563a:	2b00      	cmp	r3, #0
 800563c:	d101      	bne.n	8005642 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 800563e:	2320      	movs	r3, #32
 8005640:	e003      	b.n	800564a <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8005642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005644:	fab3 f383 	clz	r3, r3
 8005648:	b2db      	uxtb	r3, r3
 800564a:	429a      	cmp	r2, r3
 800564c:	d106      	bne.n	800565c <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2200      	movs	r2, #0
 8005654:	2103      	movs	r1, #3
 8005656:	4618      	mov	r0, r3
 8005658:	f7ff fbb6 	bl	8004dc8 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4618      	mov	r0, r3
 8005662:	f7ff fc95 	bl	8004f90 <LL_ADC_IsEnabled>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	f040 81c2 	bne.w	80059f2 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6818      	ldr	r0, [r3, #0]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	6819      	ldr	r1, [r3, #0]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	461a      	mov	r2, r3
 800567c:	f7ff fc16 	bl	8004eac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	4a8e      	ldr	r2, [pc, #568]	; (80058c0 <HAL_ADC_ConfigChannel+0x624>)
 8005686:	4293      	cmp	r3, r2
 8005688:	f040 8130 	bne.w	80058ec <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10b      	bne.n	80056b4 <HAL_ADC_ConfigChannel+0x418>
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	0e9b      	lsrs	r3, r3, #26
 80056a2:	3301      	adds	r3, #1
 80056a4:	f003 031f 	and.w	r3, r3, #31
 80056a8:	2b09      	cmp	r3, #9
 80056aa:	bf94      	ite	ls
 80056ac:	2301      	movls	r3, #1
 80056ae:	2300      	movhi	r3, #0
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	e019      	b.n	80056e8 <HAL_ADC_ConfigChannel+0x44c>
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056bc:	fa93 f3a3 	rbit	r3, r3
 80056c0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80056c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056c4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80056c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d101      	bne.n	80056d0 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 80056cc:	2320      	movs	r3, #32
 80056ce:	e003      	b.n	80056d8 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 80056d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056d2:	fab3 f383 	clz	r3, r3
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	3301      	adds	r3, #1
 80056da:	f003 031f 	and.w	r3, r3, #31
 80056de:	2b09      	cmp	r3, #9
 80056e0:	bf94      	ite	ls
 80056e2:	2301      	movls	r3, #1
 80056e4:	2300      	movhi	r3, #0
 80056e6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d079      	beq.n	80057e0 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d107      	bne.n	8005708 <HAL_ADC_ConfigChannel+0x46c>
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	0e9b      	lsrs	r3, r3, #26
 80056fe:	3301      	adds	r3, #1
 8005700:	069b      	lsls	r3, r3, #26
 8005702:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005706:	e015      	b.n	8005734 <HAL_ADC_ConfigChannel+0x498>
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800570e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005710:	fa93 f3a3 	rbit	r3, r3
 8005714:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005718:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800571a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800571c:	2b00      	cmp	r3, #0
 800571e:	d101      	bne.n	8005724 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8005720:	2320      	movs	r3, #32
 8005722:	e003      	b.n	800572c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8005724:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005726:	fab3 f383 	clz	r3, r3
 800572a:	b2db      	uxtb	r3, r3
 800572c:	3301      	adds	r3, #1
 800572e:	069b      	lsls	r3, r3, #26
 8005730:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800573c:	2b00      	cmp	r3, #0
 800573e:	d109      	bne.n	8005754 <HAL_ADC_ConfigChannel+0x4b8>
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	0e9b      	lsrs	r3, r3, #26
 8005746:	3301      	adds	r3, #1
 8005748:	f003 031f 	and.w	r3, r3, #31
 800574c:	2101      	movs	r1, #1
 800574e:	fa01 f303 	lsl.w	r3, r1, r3
 8005752:	e017      	b.n	8005784 <HAL_ADC_ConfigChannel+0x4e8>
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800575a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800575c:	fa93 f3a3 	rbit	r3, r3
 8005760:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005764:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005766:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 800576c:	2320      	movs	r3, #32
 800576e:	e003      	b.n	8005778 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8005770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005772:	fab3 f383 	clz	r3, r3
 8005776:	b2db      	uxtb	r3, r3
 8005778:	3301      	adds	r3, #1
 800577a:	f003 031f 	and.w	r3, r3, #31
 800577e:	2101      	movs	r1, #1
 8005780:	fa01 f303 	lsl.w	r3, r1, r3
 8005784:	ea42 0103 	orr.w	r1, r2, r3
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10a      	bne.n	80057aa <HAL_ADC_ConfigChannel+0x50e>
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	0e9b      	lsrs	r3, r3, #26
 800579a:	3301      	adds	r3, #1
 800579c:	f003 021f 	and.w	r2, r3, #31
 80057a0:	4613      	mov	r3, r2
 80057a2:	005b      	lsls	r3, r3, #1
 80057a4:	4413      	add	r3, r2
 80057a6:	051b      	lsls	r3, r3, #20
 80057a8:	e018      	b.n	80057dc <HAL_ADC_ConfigChannel+0x540>
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b2:	fa93 f3a3 	rbit	r3, r3
 80057b6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80057b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80057bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80057c2:	2320      	movs	r3, #32
 80057c4:	e003      	b.n	80057ce <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80057c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057c8:	fab3 f383 	clz	r3, r3
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	3301      	adds	r3, #1
 80057d0:	f003 021f 	and.w	r2, r3, #31
 80057d4:	4613      	mov	r3, r2
 80057d6:	005b      	lsls	r3, r3, #1
 80057d8:	4413      	add	r3, r2
 80057da:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057dc:	430b      	orrs	r3, r1
 80057de:	e080      	b.n	80058e2 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d107      	bne.n	80057fc <HAL_ADC_ConfigChannel+0x560>
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	0e9b      	lsrs	r3, r3, #26
 80057f2:	3301      	adds	r3, #1
 80057f4:	069b      	lsls	r3, r3, #26
 80057f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80057fa:	e015      	b.n	8005828 <HAL_ADC_ConfigChannel+0x58c>
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005804:	fa93 f3a3 	rbit	r3, r3
 8005808:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800580a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800580e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005810:	2b00      	cmp	r3, #0
 8005812:	d101      	bne.n	8005818 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8005814:	2320      	movs	r3, #32
 8005816:	e003      	b.n	8005820 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8005818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581a:	fab3 f383 	clz	r3, r3
 800581e:	b2db      	uxtb	r3, r3
 8005820:	3301      	adds	r3, #1
 8005822:	069b      	lsls	r3, r3, #26
 8005824:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005830:	2b00      	cmp	r3, #0
 8005832:	d109      	bne.n	8005848 <HAL_ADC_ConfigChannel+0x5ac>
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	0e9b      	lsrs	r3, r3, #26
 800583a:	3301      	adds	r3, #1
 800583c:	f003 031f 	and.w	r3, r3, #31
 8005840:	2101      	movs	r1, #1
 8005842:	fa01 f303 	lsl.w	r3, r1, r3
 8005846:	e017      	b.n	8005878 <HAL_ADC_ConfigChannel+0x5dc>
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800584e:	6a3b      	ldr	r3, [r7, #32]
 8005850:	fa93 f3a3 	rbit	r3, r3
 8005854:	61fb      	str	r3, [r7, #28]
  return result;
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	2b00      	cmp	r3, #0
 800585e:	d101      	bne.n	8005864 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8005860:	2320      	movs	r3, #32
 8005862:	e003      	b.n	800586c <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8005864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005866:	fab3 f383 	clz	r3, r3
 800586a:	b2db      	uxtb	r3, r3
 800586c:	3301      	adds	r3, #1
 800586e:	f003 031f 	and.w	r3, r3, #31
 8005872:	2101      	movs	r1, #1
 8005874:	fa01 f303 	lsl.w	r3, r1, r3
 8005878:	ea42 0103 	orr.w	r1, r2, r3
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005884:	2b00      	cmp	r3, #0
 8005886:	d10d      	bne.n	80058a4 <HAL_ADC_ConfigChannel+0x608>
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	0e9b      	lsrs	r3, r3, #26
 800588e:	3301      	adds	r3, #1
 8005890:	f003 021f 	and.w	r2, r3, #31
 8005894:	4613      	mov	r3, r2
 8005896:	005b      	lsls	r3, r3, #1
 8005898:	4413      	add	r3, r2
 800589a:	3b1e      	subs	r3, #30
 800589c:	051b      	lsls	r3, r3, #20
 800589e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80058a2:	e01d      	b.n	80058e0 <HAL_ADC_ConfigChannel+0x644>
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	fa93 f3a3 	rbit	r3, r3
 80058b0:	613b      	str	r3, [r7, #16]
  return result;
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d103      	bne.n	80058c4 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 80058bc:	2320      	movs	r3, #32
 80058be:	e005      	b.n	80058cc <HAL_ADC_ConfigChannel+0x630>
 80058c0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	fab3 f383 	clz	r3, r3
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	3301      	adds	r3, #1
 80058ce:	f003 021f 	and.w	r2, r3, #31
 80058d2:	4613      	mov	r3, r2
 80058d4:	005b      	lsls	r3, r3, #1
 80058d6:	4413      	add	r3, r2
 80058d8:	3b1e      	subs	r3, #30
 80058da:	051b      	lsls	r3, r3, #20
 80058dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058e0:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058e6:	4619      	mov	r1, r3
 80058e8:	f7ff fab5 	bl	8004e56 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	4b45      	ldr	r3, [pc, #276]	; (8005a08 <HAL_ADC_ConfigChannel+0x76c>)
 80058f2:	4013      	ands	r3, r2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d07c      	beq.n	80059f2 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80058f8:	4844      	ldr	r0, [pc, #272]	; (8005a0c <HAL_ADC_ConfigChannel+0x770>)
 80058fa:	f7ff fa1d 	bl	8004d38 <LL_ADC_GetCommonPathInternalCh>
 80058fe:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005902:	4843      	ldr	r0, [pc, #268]	; (8005a10 <HAL_ADC_ConfigChannel+0x774>)
 8005904:	f7ff fb44 	bl	8004f90 <LL_ADC_IsEnabled>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d15e      	bne.n	80059cc <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a40      	ldr	r2, [pc, #256]	; (8005a14 <HAL_ADC_ConfigChannel+0x778>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d127      	bne.n	8005968 <HAL_ADC_ConfigChannel+0x6cc>
 8005918:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800591c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d121      	bne.n	8005968 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a39      	ldr	r2, [pc, #228]	; (8005a10 <HAL_ADC_ConfigChannel+0x774>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d161      	bne.n	80059f2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800592e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005932:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005936:	4619      	mov	r1, r3
 8005938:	4834      	ldr	r0, [pc, #208]	; (8005a0c <HAL_ADC_ConfigChannel+0x770>)
 800593a:	f7ff f9ea 	bl	8004d12 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800593e:	4b36      	ldr	r3, [pc, #216]	; (8005a18 <HAL_ADC_ConfigChannel+0x77c>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	099b      	lsrs	r3, r3, #6
 8005944:	4a35      	ldr	r2, [pc, #212]	; (8005a1c <HAL_ADC_ConfigChannel+0x780>)
 8005946:	fba2 2303 	umull	r2, r3, r2, r3
 800594a:	099b      	lsrs	r3, r3, #6
 800594c:	1c5a      	adds	r2, r3, #1
 800594e:	4613      	mov	r3, r2
 8005950:	005b      	lsls	r3, r3, #1
 8005952:	4413      	add	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8005958:	e002      	b.n	8005960 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	3b01      	subs	r3, #1
 800595e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1f9      	bne.n	800595a <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005966:	e044      	b.n	80059f2 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a2c      	ldr	r2, [pc, #176]	; (8005a20 <HAL_ADC_ConfigChannel+0x784>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d113      	bne.n	800599a <HAL_ADC_ConfigChannel+0x6fe>
 8005972:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005976:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10d      	bne.n	800599a <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a23      	ldr	r2, [pc, #140]	; (8005a10 <HAL_ADC_ConfigChannel+0x774>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d134      	bne.n	80059f2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005988:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800598c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005990:	4619      	mov	r1, r3
 8005992:	481e      	ldr	r0, [pc, #120]	; (8005a0c <HAL_ADC_ConfigChannel+0x770>)
 8005994:	f7ff f9bd 	bl	8004d12 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005998:	e02b      	b.n	80059f2 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a21      	ldr	r2, [pc, #132]	; (8005a24 <HAL_ADC_ConfigChannel+0x788>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d126      	bne.n	80059f2 <HAL_ADC_ConfigChannel+0x756>
 80059a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80059a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d120      	bne.n	80059f2 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a16      	ldr	r2, [pc, #88]	; (8005a10 <HAL_ADC_ConfigChannel+0x774>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d11b      	bne.n	80059f2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80059ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80059be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80059c2:	4619      	mov	r1, r3
 80059c4:	4811      	ldr	r0, [pc, #68]	; (8005a0c <HAL_ADC_ConfigChannel+0x770>)
 80059c6:	f7ff f9a4 	bl	8004d12 <LL_ADC_SetCommonPathInternalCh>
 80059ca:	e012      	b.n	80059f2 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d0:	f043 0220 	orr.w	r2, r3, #32
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80059de:	e008      	b.n	80059f2 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e4:	f043 0220 	orr.w	r2, r3, #32
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 80059fa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	37d8      	adds	r7, #216	; 0xd8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	80080000 	.word	0x80080000
 8005a0c:	50040300 	.word	0x50040300
 8005a10:	50040000 	.word	0x50040000
 8005a14:	c7520000 	.word	0xc7520000
 8005a18:	20000034 	.word	0x20000034
 8005a1c:	053e2d63 	.word	0x053e2d63
 8005a20:	cb840000 	.word	0xcb840000
 8005a24:	80000001 	.word	0x80000001

08005a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f003 0307 	and.w	r3, r3, #7
 8005a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a38:	4b0c      	ldr	r3, [pc, #48]	; (8005a6c <__NVIC_SetPriorityGrouping+0x44>)
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a3e:	68ba      	ldr	r2, [r7, #8]
 8005a40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a44:	4013      	ands	r3, r2
 8005a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a5a:	4a04      	ldr	r2, [pc, #16]	; (8005a6c <__NVIC_SetPriorityGrouping+0x44>)
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	60d3      	str	r3, [r2, #12]
}
 8005a60:	bf00      	nop
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	e000ed00 	.word	0xe000ed00

08005a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a70:	b480      	push	{r7}
 8005a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a74:	4b04      	ldr	r3, [pc, #16]	; (8005a88 <__NVIC_GetPriorityGrouping+0x18>)
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	0a1b      	lsrs	r3, r3, #8
 8005a7a:	f003 0307 	and.w	r3, r3, #7
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr
 8005a88:	e000ed00 	.word	0xe000ed00

08005a8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	4603      	mov	r3, r0
 8005a94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	db0b      	blt.n	8005ab6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a9e:	79fb      	ldrb	r3, [r7, #7]
 8005aa0:	f003 021f 	and.w	r2, r3, #31
 8005aa4:	4907      	ldr	r1, [pc, #28]	; (8005ac4 <__NVIC_EnableIRQ+0x38>)
 8005aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aaa:	095b      	lsrs	r3, r3, #5
 8005aac:	2001      	movs	r0, #1
 8005aae:	fa00 f202 	lsl.w	r2, r0, r2
 8005ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005ab6:	bf00      	nop
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	e000e100 	.word	0xe000e100

08005ac8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	4603      	mov	r3, r0
 8005ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	db12      	blt.n	8005b00 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ada:	79fb      	ldrb	r3, [r7, #7]
 8005adc:	f003 021f 	and.w	r2, r3, #31
 8005ae0:	490a      	ldr	r1, [pc, #40]	; (8005b0c <__NVIC_DisableIRQ+0x44>)
 8005ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ae6:	095b      	lsrs	r3, r3, #5
 8005ae8:	2001      	movs	r0, #1
 8005aea:	fa00 f202 	lsl.w	r2, r0, r2
 8005aee:	3320      	adds	r3, #32
 8005af0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005af4:	f3bf 8f4f 	dsb	sy
}
 8005af8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005afa:	f3bf 8f6f 	isb	sy
}
 8005afe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	e000e100 	.word	0xe000e100

08005b10 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	4603      	mov	r3, r0
 8005b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	db0c      	blt.n	8005b3c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b22:	79fb      	ldrb	r3, [r7, #7]
 8005b24:	f003 021f 	and.w	r2, r3, #31
 8005b28:	4907      	ldr	r1, [pc, #28]	; (8005b48 <__NVIC_SetPendingIRQ+0x38>)
 8005b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b2e:	095b      	lsrs	r3, r3, #5
 8005b30:	2001      	movs	r0, #1
 8005b32:	fa00 f202 	lsl.w	r2, r0, r2
 8005b36:	3340      	adds	r3, #64	; 0x40
 8005b38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr
 8005b48:	e000e100 	.word	0xe000e100

08005b4c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	4603      	mov	r3, r0
 8005b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	db0c      	blt.n	8005b78 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b5e:	79fb      	ldrb	r3, [r7, #7]
 8005b60:	f003 021f 	and.w	r2, r3, #31
 8005b64:	4907      	ldr	r1, [pc, #28]	; (8005b84 <__NVIC_ClearPendingIRQ+0x38>)
 8005b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b6a:	095b      	lsrs	r3, r3, #5
 8005b6c:	2001      	movs	r0, #1
 8005b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8005b72:	3360      	adds	r3, #96	; 0x60
 8005b74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	e000e100 	.word	0xe000e100

08005b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	4603      	mov	r3, r0
 8005b90:	6039      	str	r1, [r7, #0]
 8005b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	db0a      	blt.n	8005bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	b2da      	uxtb	r2, r3
 8005ba0:	490c      	ldr	r1, [pc, #48]	; (8005bd4 <__NVIC_SetPriority+0x4c>)
 8005ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ba6:	0112      	lsls	r2, r2, #4
 8005ba8:	b2d2      	uxtb	r2, r2
 8005baa:	440b      	add	r3, r1
 8005bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005bb0:	e00a      	b.n	8005bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	b2da      	uxtb	r2, r3
 8005bb6:	4908      	ldr	r1, [pc, #32]	; (8005bd8 <__NVIC_SetPriority+0x50>)
 8005bb8:	79fb      	ldrb	r3, [r7, #7]
 8005bba:	f003 030f 	and.w	r3, r3, #15
 8005bbe:	3b04      	subs	r3, #4
 8005bc0:	0112      	lsls	r2, r2, #4
 8005bc2:	b2d2      	uxtb	r2, r2
 8005bc4:	440b      	add	r3, r1
 8005bc6:	761a      	strb	r2, [r3, #24]
}
 8005bc8:	bf00      	nop
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr
 8005bd4:	e000e100 	.word	0xe000e100
 8005bd8:	e000ed00 	.word	0xe000ed00

08005bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b089      	sub	sp, #36	; 0x24
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f003 0307 	and.w	r3, r3, #7
 8005bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	f1c3 0307 	rsb	r3, r3, #7
 8005bf6:	2b04      	cmp	r3, #4
 8005bf8:	bf28      	it	cs
 8005bfa:	2304      	movcs	r3, #4
 8005bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	3304      	adds	r3, #4
 8005c02:	2b06      	cmp	r3, #6
 8005c04:	d902      	bls.n	8005c0c <NVIC_EncodePriority+0x30>
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	3b03      	subs	r3, #3
 8005c0a:	e000      	b.n	8005c0e <NVIC_EncodePriority+0x32>
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c10:	f04f 32ff 	mov.w	r2, #4294967295
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1a:	43da      	mvns	r2, r3
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	401a      	ands	r2, r3
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c24:	f04f 31ff 	mov.w	r1, #4294967295
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c2e:	43d9      	mvns	r1, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c34:	4313      	orrs	r3, r2
         );
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3724      	adds	r7, #36	; 0x24
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
	...

08005c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c54:	d301      	bcc.n	8005c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005c56:	2301      	movs	r3, #1
 8005c58:	e00f      	b.n	8005c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c5a:	4a0a      	ldr	r2, [pc, #40]	; (8005c84 <SysTick_Config+0x40>)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005c62:	210f      	movs	r1, #15
 8005c64:	f04f 30ff 	mov.w	r0, #4294967295
 8005c68:	f7ff ff8e 	bl	8005b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c6c:	4b05      	ldr	r3, [pc, #20]	; (8005c84 <SysTick_Config+0x40>)
 8005c6e:	2200      	movs	r2, #0
 8005c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c72:	4b04      	ldr	r3, [pc, #16]	; (8005c84 <SysTick_Config+0x40>)
 8005c74:	2207      	movs	r2, #7
 8005c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3708      	adds	r7, #8
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	e000e010 	.word	0xe000e010

08005c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f7ff fec9 	bl	8005a28 <__NVIC_SetPriorityGrouping>
}
 8005c96:	bf00      	nop
 8005c98:	3708      	adds	r7, #8
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b086      	sub	sp, #24
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	60b9      	str	r1, [r7, #8]
 8005ca8:	607a      	str	r2, [r7, #4]
 8005caa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005cac:	f7ff fee0 	bl	8005a70 <__NVIC_GetPriorityGrouping>
 8005cb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	68b9      	ldr	r1, [r7, #8]
 8005cb6:	6978      	ldr	r0, [r7, #20]
 8005cb8:	f7ff ff90 	bl	8005bdc <NVIC_EncodePriority>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cc2:	4611      	mov	r1, r2
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7ff ff5f 	bl	8005b88 <__NVIC_SetPriority>
}
 8005cca:	bf00      	nop
 8005ccc:	3718      	adds	r7, #24
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b082      	sub	sp, #8
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	4603      	mov	r3, r0
 8005cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f7ff fed3 	bl	8005a8c <__NVIC_EnableIRQ>
}
 8005ce6:	bf00      	nop
 8005ce8:	3708      	adds	r7, #8
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b082      	sub	sp, #8
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7ff fee3 	bl	8005ac8 <__NVIC_DisableIRQ>
}
 8005d02:	bf00      	nop
 8005d04:	3708      	adds	r7, #8
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b082      	sub	sp, #8
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f7ff ff96 	bl	8005c44 <SysTick_Config>
 8005d18:	4603      	mov	r3, r0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3708      	adds	r7, #8
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b082      	sub	sp, #8
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	4603      	mov	r3, r0
 8005d2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8005d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7ff feed 	bl	8005b10 <__NVIC_SetPendingIRQ>
}
 8005d36:	bf00      	nop
 8005d38:	3708      	adds	r7, #8
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b082      	sub	sp, #8
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	4603      	mov	r3, r0
 8005d46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8005d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7ff fefd 	bl	8005b4c <__NVIC_ClearPendingIRQ>
}
 8005d52:	bf00      	nop
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b086      	sub	sp, #24
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	60f8      	str	r0, [r7, #12]
 8005d62:	60b9      	str	r1, [r7, #8]
 8005d64:	607a      	str	r2, [r7, #4]
 8005d66:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d101      	bne.n	8005d7a <HAL_DMA_Start_IT+0x20>
 8005d76:	2302      	movs	r3, #2
 8005d78:	e066      	b.n	8005e48 <HAL_DMA_Start_IT+0xee>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d155      	bne.n	8005e3a <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2202      	movs	r2, #2
 8005d92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f022 0201 	bic.w	r2, r2, #1
 8005daa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	68b9      	ldr	r1, [r7, #8]
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f000 f90a 	bl	8005fcc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d008      	beq.n	8005dd2 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f042 020e 	orr.w	r2, r2, #14
 8005dce:	601a      	str	r2, [r3, #0]
 8005dd0:	e00f      	b.n	8005df2 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f022 0204 	bic.w	r2, r2, #4
 8005de0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f042 020a 	orr.w	r2, r2, #10
 8005df0:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d007      	beq.n	8005e10 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e0e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d007      	beq.n	8005e28 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e26:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f042 0201 	orr.w	r2, r2, #1
 8005e36:	601a      	str	r2, [r3, #0]
 8005e38:	e005      	b.n	8005e46 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005e42:	2302      	movs	r3, #2
 8005e44:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3718      	adds	r7, #24
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d101      	bne.n	8005e62 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e04f      	b.n	8005f02 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d008      	beq.n	8005e80 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2204      	movs	r2, #4
 8005e72:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e040      	b.n	8005f02 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f022 020e 	bic.w	r2, r2, #14
 8005e8e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e9e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f022 0201 	bic.w	r2, r2, #1
 8005eae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb4:	f003 021c 	and.w	r2, r3, #28
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebc:	2101      	movs	r1, #1
 8005ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8005ec2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005ecc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00c      	beq.n	8005ef0 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ee4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005eee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	370c      	adds	r7, #12
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr

08005f0e <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b084      	sub	sp, #16
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f16:	2300      	movs	r3, #0
 8005f18:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d005      	beq.n	8005f32 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2204      	movs	r2, #4
 8005f2a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	73fb      	strb	r3, [r7, #15]
 8005f30:	e047      	b.n	8005fc2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 020e 	bic.w	r2, r2, #14
 8005f40:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f022 0201 	bic.w	r2, r2, #1
 8005f50:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f66:	f003 021c 	and.w	r2, r3, #28
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6e:	2101      	movs	r1, #1
 8005f70:	fa01 f202 	lsl.w	r2, r1, r2
 8005f74:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005f7e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00c      	beq.n	8005fa2 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f96:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005fa0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d003      	beq.n	8005fc2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	4798      	blx	r3
    }
  }
  return status;
 8005fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]
 8005fd8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005fe2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d004      	beq.n	8005ff6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005ff4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ffa:	f003 021c 	and.w	r2, r3, #28
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006002:	2101      	movs	r1, #1
 8006004:	fa01 f202 	lsl.w	r2, r1, r2
 8006008:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	2b10      	cmp	r3, #16
 8006018:	d108      	bne.n	800602c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800602a:	e007      	b.n	800603c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	60da      	str	r2, [r3, #12]
}
 800603c:	bf00      	nop
 800603e:	3714      	adds	r7, #20
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006048:	b480      	push	{r7}
 800604a:	b087      	sub	sp, #28
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006052:	2300      	movs	r3, #0
 8006054:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006056:	e14c      	b.n	80062f2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	2101      	movs	r1, #1
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	fa01 f303 	lsl.w	r3, r1, r3
 8006064:	4013      	ands	r3, r2
 8006066:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2b00      	cmp	r3, #0
 800606c:	f000 813e 	beq.w	80062ec <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	f003 0303 	and.w	r3, r3, #3
 8006078:	2b01      	cmp	r3, #1
 800607a:	d005      	beq.n	8006088 <HAL_GPIO_Init+0x40>
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f003 0303 	and.w	r3, r3, #3
 8006084:	2b02      	cmp	r3, #2
 8006086:	d130      	bne.n	80060ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	005b      	lsls	r3, r3, #1
 8006092:	2203      	movs	r2, #3
 8006094:	fa02 f303 	lsl.w	r3, r2, r3
 8006098:	43db      	mvns	r3, r3
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	4013      	ands	r3, r2
 800609e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	68da      	ldr	r2, [r3, #12]
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	005b      	lsls	r3, r3, #1
 80060a8:	fa02 f303 	lsl.w	r3, r2, r3
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80060be:	2201      	movs	r2, #1
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	fa02 f303 	lsl.w	r3, r2, r3
 80060c6:	43db      	mvns	r3, r3
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	4013      	ands	r3, r2
 80060cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	091b      	lsrs	r3, r3, #4
 80060d4:	f003 0201 	and.w	r2, r3, #1
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	fa02 f303 	lsl.w	r3, r2, r3
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	f003 0303 	and.w	r3, r3, #3
 80060f2:	2b03      	cmp	r3, #3
 80060f4:	d017      	beq.n	8006126 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	005b      	lsls	r3, r3, #1
 8006100:	2203      	movs	r2, #3
 8006102:	fa02 f303 	lsl.w	r3, r2, r3
 8006106:	43db      	mvns	r3, r3
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	4013      	ands	r3, r2
 800610c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	689a      	ldr	r2, [r3, #8]
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	005b      	lsls	r3, r3, #1
 8006116:	fa02 f303 	lsl.w	r3, r2, r3
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	4313      	orrs	r3, r2
 800611e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f003 0303 	and.w	r3, r3, #3
 800612e:	2b02      	cmp	r3, #2
 8006130:	d123      	bne.n	800617a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	08da      	lsrs	r2, r3, #3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	3208      	adds	r2, #8
 800613a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800613e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	f003 0307 	and.w	r3, r3, #7
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	220f      	movs	r2, #15
 800614a:	fa02 f303 	lsl.w	r3, r2, r3
 800614e:	43db      	mvns	r3, r3
 8006150:	693a      	ldr	r2, [r7, #16]
 8006152:	4013      	ands	r3, r2
 8006154:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	691a      	ldr	r2, [r3, #16]
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f003 0307 	and.w	r3, r3, #7
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	fa02 f303 	lsl.w	r3, r2, r3
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	4313      	orrs	r3, r2
 800616a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	08da      	lsrs	r2, r3, #3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	3208      	adds	r2, #8
 8006174:	6939      	ldr	r1, [r7, #16]
 8006176:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	005b      	lsls	r3, r3, #1
 8006184:	2203      	movs	r2, #3
 8006186:	fa02 f303 	lsl.w	r3, r2, r3
 800618a:	43db      	mvns	r3, r3
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	4013      	ands	r3, r2
 8006190:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f003 0203 	and.w	r2, r3, #3
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	005b      	lsls	r3, r3, #1
 800619e:	fa02 f303 	lsl.w	r3, r2, r3
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f000 8098 	beq.w	80062ec <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80061bc:	4a54      	ldr	r2, [pc, #336]	; (8006310 <HAL_GPIO_Init+0x2c8>)
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	089b      	lsrs	r3, r3, #2
 80061c2:	3302      	adds	r3, #2
 80061c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f003 0303 	and.w	r3, r3, #3
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	220f      	movs	r2, #15
 80061d4:	fa02 f303 	lsl.w	r3, r2, r3
 80061d8:	43db      	mvns	r3, r3
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	4013      	ands	r3, r2
 80061de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80061e6:	d019      	beq.n	800621c <HAL_GPIO_Init+0x1d4>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a4a      	ldr	r2, [pc, #296]	; (8006314 <HAL_GPIO_Init+0x2cc>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d013      	beq.n	8006218 <HAL_GPIO_Init+0x1d0>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a49      	ldr	r2, [pc, #292]	; (8006318 <HAL_GPIO_Init+0x2d0>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d00d      	beq.n	8006214 <HAL_GPIO_Init+0x1cc>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a48      	ldr	r2, [pc, #288]	; (800631c <HAL_GPIO_Init+0x2d4>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d007      	beq.n	8006210 <HAL_GPIO_Init+0x1c8>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a47      	ldr	r2, [pc, #284]	; (8006320 <HAL_GPIO_Init+0x2d8>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d101      	bne.n	800620c <HAL_GPIO_Init+0x1c4>
 8006208:	2304      	movs	r3, #4
 800620a:	e008      	b.n	800621e <HAL_GPIO_Init+0x1d6>
 800620c:	2307      	movs	r3, #7
 800620e:	e006      	b.n	800621e <HAL_GPIO_Init+0x1d6>
 8006210:	2303      	movs	r3, #3
 8006212:	e004      	b.n	800621e <HAL_GPIO_Init+0x1d6>
 8006214:	2302      	movs	r3, #2
 8006216:	e002      	b.n	800621e <HAL_GPIO_Init+0x1d6>
 8006218:	2301      	movs	r3, #1
 800621a:	e000      	b.n	800621e <HAL_GPIO_Init+0x1d6>
 800621c:	2300      	movs	r3, #0
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	f002 0203 	and.w	r2, r2, #3
 8006224:	0092      	lsls	r2, r2, #2
 8006226:	4093      	lsls	r3, r2
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	4313      	orrs	r3, r2
 800622c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800622e:	4938      	ldr	r1, [pc, #224]	; (8006310 <HAL_GPIO_Init+0x2c8>)
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	089b      	lsrs	r3, r3, #2
 8006234:	3302      	adds	r3, #2
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800623c:	4b39      	ldr	r3, [pc, #228]	; (8006324 <HAL_GPIO_Init+0x2dc>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	43db      	mvns	r3, r3
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	4013      	ands	r3, r2
 800624a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d003      	beq.n	8006260 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	4313      	orrs	r3, r2
 800625e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006260:	4a30      	ldr	r2, [pc, #192]	; (8006324 <HAL_GPIO_Init+0x2dc>)
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006266:	4b2f      	ldr	r3, [pc, #188]	; (8006324 <HAL_GPIO_Init+0x2dc>)
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	43db      	mvns	r3, r3
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	4013      	ands	r3, r2
 8006274:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d003      	beq.n	800628a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	4313      	orrs	r3, r2
 8006288:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800628a:	4a26      	ldr	r2, [pc, #152]	; (8006324 <HAL_GPIO_Init+0x2dc>)
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006290:	4b24      	ldr	r3, [pc, #144]	; (8006324 <HAL_GPIO_Init+0x2dc>)
 8006292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	43db      	mvns	r3, r3
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	4013      	ands	r3, r2
 80062a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80062b6:	4a1b      	ldr	r2, [pc, #108]	; (8006324 <HAL_GPIO_Init+0x2dc>)
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80062be:	4b19      	ldr	r3, [pc, #100]	; (8006324 <HAL_GPIO_Init+0x2dc>)
 80062c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	43db      	mvns	r3, r3
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	4013      	ands	r3, r2
 80062ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d003      	beq.n	80062e4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80062e4:	4a0f      	ldr	r2, [pc, #60]	; (8006324 <HAL_GPIO_Init+0x2dc>)
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	3301      	adds	r3, #1
 80062f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	fa22 f303 	lsr.w	r3, r2, r3
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f47f aeab 	bne.w	8006058 <HAL_GPIO_Init+0x10>
  }
}
 8006302:	bf00      	nop
 8006304:	bf00      	nop
 8006306:	371c      	adds	r7, #28
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr
 8006310:	40010000 	.word	0x40010000
 8006314:	48000400 	.word	0x48000400
 8006318:	48000800 	.word	0x48000800
 800631c:	48000c00 	.word	0x48000c00
 8006320:	48001000 	.word	0x48001000
 8006324:	58000800 	.word	0x58000800

08006328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	460b      	mov	r3, r1
 8006332:	807b      	strh	r3, [r7, #2]
 8006334:	4613      	mov	r3, r2
 8006336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006338:	787b      	ldrb	r3, [r7, #1]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d003      	beq.n	8006346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800633e:	887a      	ldrh	r2, [r7, #2]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006344:	e002      	b.n	800634c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006346:	887a      	ldrh	r2, [r7, #2]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800635e:	4b0a      	ldr	r3, [pc, #40]	; (8006388 <HAL_HSEM_IRQHandler+0x30>)
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8006364:	4b08      	ldr	r3, [pc, #32]	; (8006388 <HAL_HSEM_IRQHandler+0x30>)
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	43db      	mvns	r3, r3
 800636c:	4906      	ldr	r1, [pc, #24]	; (8006388 <HAL_HSEM_IRQHandler+0x30>)
 800636e:	4013      	ands	r3, r2
 8006370:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8006372:	4a05      	ldr	r2, [pc, #20]	; (8006388 <HAL_HSEM_IRQHandler+0x30>)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 f807 	bl	800638c <HAL_HSEM_FreeCallback>
}
 800637e:	bf00      	nop
 8006380:	3708      	adds	r7, #8
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	58001500 	.word	0x58001500

0800638c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e08d      	b.n	80064ce <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d106      	bne.n	80063cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7fc ff8c 	bl	80032e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2224      	movs	r2, #36	; 0x24
 80063d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f022 0201 	bic.w	r2, r2, #1
 80063e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	685a      	ldr	r2, [r3, #4]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80063f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	689a      	ldr	r2, [r3, #8]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006400:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d107      	bne.n	800641a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	689a      	ldr	r2, [r3, #8]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006416:	609a      	str	r2, [r3, #8]
 8006418:	e006      	b.n	8006428 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	689a      	ldr	r2, [r3, #8]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006426:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	2b02      	cmp	r3, #2
 800642e:	d108      	bne.n	8006442 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	685a      	ldr	r2, [r3, #4]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800643e:	605a      	str	r2, [r3, #4]
 8006440:	e007      	b.n	8006452 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006450:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	6812      	ldr	r2, [r2, #0]
 800645c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006460:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006464:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68da      	ldr	r2, [r3, #12]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006474:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	691a      	ldr	r2, [r3, #16]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	430a      	orrs	r2, r1
 800648e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	69d9      	ldr	r1, [r3, #28]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a1a      	ldr	r2, [r3, #32]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	430a      	orrs	r2, r1
 800649e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f042 0201 	orr.w	r2, r2, #1
 80064ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2220      	movs	r2, #32
 80064ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3708      	adds	r7, #8
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
	...

080064d8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b088      	sub	sp, #32
 80064dc:	af02      	add	r7, sp, #8
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	4608      	mov	r0, r1
 80064e2:	4611      	mov	r1, r2
 80064e4:	461a      	mov	r2, r3
 80064e6:	4603      	mov	r3, r0
 80064e8:	817b      	strh	r3, [r7, #10]
 80064ea:	460b      	mov	r3, r1
 80064ec:	813b      	strh	r3, [r7, #8]
 80064ee:	4613      	mov	r3, r2
 80064f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	2b20      	cmp	r3, #32
 80064fc:	f040 80f9 	bne.w	80066f2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006500:	6a3b      	ldr	r3, [r7, #32]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d002      	beq.n	800650c <HAL_I2C_Mem_Write+0x34>
 8006506:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006508:	2b00      	cmp	r3, #0
 800650a:	d105      	bne.n	8006518 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006512:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e0ed      	b.n	80066f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800651e:	2b01      	cmp	r3, #1
 8006520:	d101      	bne.n	8006526 <HAL_I2C_Mem_Write+0x4e>
 8006522:	2302      	movs	r3, #2
 8006524:	e0e6      	b.n	80066f4 <HAL_I2C_Mem_Write+0x21c>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2201      	movs	r2, #1
 800652a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800652e:	f7fe fbb9 	bl	8004ca4 <HAL_GetTick>
 8006532:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	9300      	str	r3, [sp, #0]
 8006538:	2319      	movs	r3, #25
 800653a:	2201      	movs	r2, #1
 800653c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f000 fac3 	bl	8006acc <I2C_WaitOnFlagUntilTimeout>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d001      	beq.n	8006550 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e0d1      	b.n	80066f4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2221      	movs	r2, #33	; 0x21
 8006554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2240      	movs	r2, #64	; 0x40
 800655c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6a3a      	ldr	r2, [r7, #32]
 800656a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006570:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006578:	88f8      	ldrh	r0, [r7, #6]
 800657a:	893a      	ldrh	r2, [r7, #8]
 800657c:	8979      	ldrh	r1, [r7, #10]
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	9301      	str	r3, [sp, #4]
 8006582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	4603      	mov	r3, r0
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f000 f9d3 	bl	8006934 <I2C_RequestMemoryWrite>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d005      	beq.n	80065a0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e0a9      	b.n	80066f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	2bff      	cmp	r3, #255	; 0xff
 80065a8:	d90e      	bls.n	80065c8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	22ff      	movs	r2, #255	; 0xff
 80065ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065b4:	b2da      	uxtb	r2, r3
 80065b6:	8979      	ldrh	r1, [r7, #10]
 80065b8:	2300      	movs	r3, #0
 80065ba:	9300      	str	r3, [sp, #0]
 80065bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f000 fc3d 	bl	8006e40 <I2C_TransferConfig>
 80065c6:	e00f      	b.n	80065e8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065d6:	b2da      	uxtb	r2, r3
 80065d8:	8979      	ldrh	r1, [r7, #10]
 80065da:	2300      	movs	r3, #0
 80065dc:	9300      	str	r3, [sp, #0]
 80065de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f000 fc2c 	bl	8006e40 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065e8:	697a      	ldr	r2, [r7, #20]
 80065ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f000 fabc 	bl	8006b6a <I2C_WaitOnTXISFlagUntilTimeout>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d001      	beq.n	80065fc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e07b      	b.n	80066f4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006600:	781a      	ldrb	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660c:	1c5a      	adds	r2, r3, #1
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006616:	b29b      	uxth	r3, r3
 8006618:	3b01      	subs	r3, #1
 800661a:	b29a      	uxth	r2, r3
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006624:	3b01      	subs	r3, #1
 8006626:	b29a      	uxth	r2, r3
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006630:	b29b      	uxth	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d034      	beq.n	80066a0 <HAL_I2C_Mem_Write+0x1c8>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800663a:	2b00      	cmp	r3, #0
 800663c:	d130      	bne.n	80066a0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006644:	2200      	movs	r2, #0
 8006646:	2180      	movs	r1, #128	; 0x80
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f000 fa3f 	bl	8006acc <I2C_WaitOnFlagUntilTimeout>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d001      	beq.n	8006658 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e04d      	b.n	80066f4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800665c:	b29b      	uxth	r3, r3
 800665e:	2bff      	cmp	r3, #255	; 0xff
 8006660:	d90e      	bls.n	8006680 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	22ff      	movs	r2, #255	; 0xff
 8006666:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800666c:	b2da      	uxtb	r2, r3
 800666e:	8979      	ldrh	r1, [r7, #10]
 8006670:	2300      	movs	r3, #0
 8006672:	9300      	str	r3, [sp, #0]
 8006674:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f000 fbe1 	bl	8006e40 <I2C_TransferConfig>
 800667e:	e00f      	b.n	80066a0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006684:	b29a      	uxth	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800668e:	b2da      	uxtb	r2, r3
 8006690:	8979      	ldrh	r1, [r7, #10]
 8006692:	2300      	movs	r3, #0
 8006694:	9300      	str	r3, [sp, #0]
 8006696:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f000 fbd0 	bl	8006e40 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d19e      	bne.n	80065e8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f000 faa2 	bl	8006bf8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d001      	beq.n	80066be <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e01a      	b.n	80066f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2220      	movs	r2, #32
 80066c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	6859      	ldr	r1, [r3, #4]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	4b0a      	ldr	r3, [pc, #40]	; (80066fc <HAL_I2C_Mem_Write+0x224>)
 80066d2:	400b      	ands	r3, r1
 80066d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2220      	movs	r2, #32
 80066da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80066ee:	2300      	movs	r3, #0
 80066f0:	e000      	b.n	80066f4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80066f2:	2302      	movs	r3, #2
  }
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3718      	adds	r7, #24
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	fe00e800 	.word	0xfe00e800

08006700 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b088      	sub	sp, #32
 8006704:	af02      	add	r7, sp, #8
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	4608      	mov	r0, r1
 800670a:	4611      	mov	r1, r2
 800670c:	461a      	mov	r2, r3
 800670e:	4603      	mov	r3, r0
 8006710:	817b      	strh	r3, [r7, #10]
 8006712:	460b      	mov	r3, r1
 8006714:	813b      	strh	r3, [r7, #8]
 8006716:	4613      	mov	r3, r2
 8006718:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b20      	cmp	r3, #32
 8006724:	f040 80fd 	bne.w	8006922 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006728:	6a3b      	ldr	r3, [r7, #32]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d002      	beq.n	8006734 <HAL_I2C_Mem_Read+0x34>
 800672e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006730:	2b00      	cmp	r3, #0
 8006732:	d105      	bne.n	8006740 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f44f 7200 	mov.w	r2, #512	; 0x200
 800673a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e0f1      	b.n	8006924 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006746:	2b01      	cmp	r3, #1
 8006748:	d101      	bne.n	800674e <HAL_I2C_Mem_Read+0x4e>
 800674a:	2302      	movs	r3, #2
 800674c:	e0ea      	b.n	8006924 <HAL_I2C_Mem_Read+0x224>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2201      	movs	r2, #1
 8006752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006756:	f7fe faa5 	bl	8004ca4 <HAL_GetTick>
 800675a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	2319      	movs	r3, #25
 8006762:	2201      	movs	r2, #1
 8006764:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f000 f9af 	bl	8006acc <I2C_WaitOnFlagUntilTimeout>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d001      	beq.n	8006778 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e0d5      	b.n	8006924 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2222      	movs	r2, #34	; 0x22
 800677c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2240      	movs	r2, #64	; 0x40
 8006784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6a3a      	ldr	r2, [r7, #32]
 8006792:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006798:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80067a0:	88f8      	ldrh	r0, [r7, #6]
 80067a2:	893a      	ldrh	r2, [r7, #8]
 80067a4:	8979      	ldrh	r1, [r7, #10]
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	9301      	str	r3, [sp, #4]
 80067aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ac:	9300      	str	r3, [sp, #0]
 80067ae:	4603      	mov	r3, r0
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f000 f913 	bl	80069dc <I2C_RequestMemoryRead>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d005      	beq.n	80067c8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e0ad      	b.n	8006924 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	2bff      	cmp	r3, #255	; 0xff
 80067d0:	d90e      	bls.n	80067f0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	22ff      	movs	r2, #255	; 0xff
 80067d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067dc:	b2da      	uxtb	r2, r3
 80067de:	8979      	ldrh	r1, [r7, #10]
 80067e0:	4b52      	ldr	r3, [pc, #328]	; (800692c <HAL_I2C_Mem_Read+0x22c>)
 80067e2:	9300      	str	r3, [sp, #0]
 80067e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f000 fb29 	bl	8006e40 <I2C_TransferConfig>
 80067ee:	e00f      	b.n	8006810 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067fe:	b2da      	uxtb	r2, r3
 8006800:	8979      	ldrh	r1, [r7, #10]
 8006802:	4b4a      	ldr	r3, [pc, #296]	; (800692c <HAL_I2C_Mem_Read+0x22c>)
 8006804:	9300      	str	r3, [sp, #0]
 8006806:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800680a:	68f8      	ldr	r0, [r7, #12]
 800680c:	f000 fb18 	bl	8006e40 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	9300      	str	r3, [sp, #0]
 8006814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006816:	2200      	movs	r2, #0
 8006818:	2104      	movs	r1, #4
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f000 f956 	bl	8006acc <I2C_WaitOnFlagUntilTimeout>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d001      	beq.n	800682a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e07c      	b.n	8006924 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006834:	b2d2      	uxtb	r2, r2
 8006836:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683c:	1c5a      	adds	r2, r3, #1
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006846:	3b01      	subs	r3, #1
 8006848:	b29a      	uxth	r2, r3
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006852:	b29b      	uxth	r3, r3
 8006854:	3b01      	subs	r3, #1
 8006856:	b29a      	uxth	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006860:	b29b      	uxth	r3, r3
 8006862:	2b00      	cmp	r3, #0
 8006864:	d034      	beq.n	80068d0 <HAL_I2C_Mem_Read+0x1d0>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800686a:	2b00      	cmp	r3, #0
 800686c:	d130      	bne.n	80068d0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	9300      	str	r3, [sp, #0]
 8006872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006874:	2200      	movs	r2, #0
 8006876:	2180      	movs	r1, #128	; 0x80
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f000 f927 	bl	8006acc <I2C_WaitOnFlagUntilTimeout>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d001      	beq.n	8006888 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e04d      	b.n	8006924 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800688c:	b29b      	uxth	r3, r3
 800688e:	2bff      	cmp	r3, #255	; 0xff
 8006890:	d90e      	bls.n	80068b0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	22ff      	movs	r2, #255	; 0xff
 8006896:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800689c:	b2da      	uxtb	r2, r3
 800689e:	8979      	ldrh	r1, [r7, #10]
 80068a0:	2300      	movs	r3, #0
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f000 fac9 	bl	8006e40 <I2C_TransferConfig>
 80068ae:	e00f      	b.n	80068d0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068be:	b2da      	uxtb	r2, r3
 80068c0:	8979      	ldrh	r1, [r7, #10]
 80068c2:	2300      	movs	r3, #0
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f000 fab8 	bl	8006e40 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d19a      	bne.n	8006810 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	f000 f98a 	bl	8006bf8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d001      	beq.n	80068ee <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e01a      	b.n	8006924 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2220      	movs	r2, #32
 80068f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	6859      	ldr	r1, [r3, #4]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	4b0b      	ldr	r3, [pc, #44]	; (8006930 <HAL_I2C_Mem_Read+0x230>)
 8006902:	400b      	ands	r3, r1
 8006904:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2220      	movs	r2, #32
 800690a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2200      	movs	r2, #0
 800691a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800691e:	2300      	movs	r3, #0
 8006920:	e000      	b.n	8006924 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006922:	2302      	movs	r3, #2
  }
}
 8006924:	4618      	mov	r0, r3
 8006926:	3718      	adds	r7, #24
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	80002400 	.word	0x80002400
 8006930:	fe00e800 	.word	0xfe00e800

08006934 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b086      	sub	sp, #24
 8006938:	af02      	add	r7, sp, #8
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	4608      	mov	r0, r1
 800693e:	4611      	mov	r1, r2
 8006940:	461a      	mov	r2, r3
 8006942:	4603      	mov	r3, r0
 8006944:	817b      	strh	r3, [r7, #10]
 8006946:	460b      	mov	r3, r1
 8006948:	813b      	strh	r3, [r7, #8]
 800694a:	4613      	mov	r3, r2
 800694c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800694e:	88fb      	ldrh	r3, [r7, #6]
 8006950:	b2da      	uxtb	r2, r3
 8006952:	8979      	ldrh	r1, [r7, #10]
 8006954:	4b20      	ldr	r3, [pc, #128]	; (80069d8 <I2C_RequestMemoryWrite+0xa4>)
 8006956:	9300      	str	r3, [sp, #0]
 8006958:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f000 fa6f 	bl	8006e40 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006962:	69fa      	ldr	r2, [r7, #28]
 8006964:	69b9      	ldr	r1, [r7, #24]
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f000 f8ff 	bl	8006b6a <I2C_WaitOnTXISFlagUntilTimeout>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d001      	beq.n	8006976 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e02c      	b.n	80069d0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006976:	88fb      	ldrh	r3, [r7, #6]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d105      	bne.n	8006988 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800697c:	893b      	ldrh	r3, [r7, #8]
 800697e:	b2da      	uxtb	r2, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	629a      	str	r2, [r3, #40]	; 0x28
 8006986:	e015      	b.n	80069b4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006988:	893b      	ldrh	r3, [r7, #8]
 800698a:	0a1b      	lsrs	r3, r3, #8
 800698c:	b29b      	uxth	r3, r3
 800698e:	b2da      	uxtb	r2, r3
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006996:	69fa      	ldr	r2, [r7, #28]
 8006998:	69b9      	ldr	r1, [r7, #24]
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f000 f8e5 	bl	8006b6a <I2C_WaitOnTXISFlagUntilTimeout>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d001      	beq.n	80069aa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e012      	b.n	80069d0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80069aa:	893b      	ldrh	r3, [r7, #8]
 80069ac:	b2da      	uxtb	r2, r3
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	9300      	str	r3, [sp, #0]
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	2200      	movs	r2, #0
 80069bc:	2180      	movs	r1, #128	; 0x80
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f000 f884 	bl	8006acc <I2C_WaitOnFlagUntilTimeout>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d001      	beq.n	80069ce <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e000      	b.n	80069d0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3710      	adds	r7, #16
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	80002000 	.word	0x80002000

080069dc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b086      	sub	sp, #24
 80069e0:	af02      	add	r7, sp, #8
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	4608      	mov	r0, r1
 80069e6:	4611      	mov	r1, r2
 80069e8:	461a      	mov	r2, r3
 80069ea:	4603      	mov	r3, r0
 80069ec:	817b      	strh	r3, [r7, #10]
 80069ee:	460b      	mov	r3, r1
 80069f0:	813b      	strh	r3, [r7, #8]
 80069f2:	4613      	mov	r3, r2
 80069f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80069f6:	88fb      	ldrh	r3, [r7, #6]
 80069f8:	b2da      	uxtb	r2, r3
 80069fa:	8979      	ldrh	r1, [r7, #10]
 80069fc:	4b20      	ldr	r3, [pc, #128]	; (8006a80 <I2C_RequestMemoryRead+0xa4>)
 80069fe:	9300      	str	r3, [sp, #0]
 8006a00:	2300      	movs	r3, #0
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f000 fa1c 	bl	8006e40 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a08:	69fa      	ldr	r2, [r7, #28]
 8006a0a:	69b9      	ldr	r1, [r7, #24]
 8006a0c:	68f8      	ldr	r0, [r7, #12]
 8006a0e:	f000 f8ac 	bl	8006b6a <I2C_WaitOnTXISFlagUntilTimeout>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d001      	beq.n	8006a1c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e02c      	b.n	8006a76 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a1c:	88fb      	ldrh	r3, [r7, #6]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d105      	bne.n	8006a2e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a22:	893b      	ldrh	r3, [r7, #8]
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	629a      	str	r2, [r3, #40]	; 0x28
 8006a2c:	e015      	b.n	8006a5a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006a2e:	893b      	ldrh	r3, [r7, #8]
 8006a30:	0a1b      	lsrs	r3, r3, #8
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	b2da      	uxtb	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a3c:	69fa      	ldr	r2, [r7, #28]
 8006a3e:	69b9      	ldr	r1, [r7, #24]
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f000 f892 	bl	8006b6a <I2C_WaitOnTXISFlagUntilTimeout>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d001      	beq.n	8006a50 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e012      	b.n	8006a76 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a50:	893b      	ldrh	r3, [r7, #8]
 8006a52:	b2da      	uxtb	r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	9300      	str	r3, [sp, #0]
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	2200      	movs	r2, #0
 8006a62:	2140      	movs	r1, #64	; 0x40
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f000 f831 	bl	8006acc <I2C_WaitOnFlagUntilTimeout>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d001      	beq.n	8006a74 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e000      	b.n	8006a76 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	80002000 	.word	0x80002000

08006a84 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	f003 0302 	and.w	r3, r3, #2
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d103      	bne.n	8006aa2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	699b      	ldr	r3, [r3, #24]
 8006aa8:	f003 0301 	and.w	r3, r3, #1
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d007      	beq.n	8006ac0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	699a      	ldr	r2, [r3, #24]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f042 0201 	orr.w	r2, r2, #1
 8006abe:	619a      	str	r2, [r3, #24]
  }
}
 8006ac0:	bf00      	nop
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	603b      	str	r3, [r7, #0]
 8006ad8:	4613      	mov	r3, r2
 8006ada:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006adc:	e031      	b.n	8006b42 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae4:	d02d      	beq.n	8006b42 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ae6:	f7fe f8dd 	bl	8004ca4 <HAL_GetTick>
 8006aea:	4602      	mov	r2, r0
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	683a      	ldr	r2, [r7, #0]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d302      	bcc.n	8006afc <I2C_WaitOnFlagUntilTimeout+0x30>
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d122      	bne.n	8006b42 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	699a      	ldr	r2, [r3, #24]
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	4013      	ands	r3, r2
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	bf0c      	ite	eq
 8006b0c:	2301      	moveq	r3, #1
 8006b0e:	2300      	movne	r3, #0
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	461a      	mov	r2, r3
 8006b14:	79fb      	ldrb	r3, [r7, #7]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d113      	bne.n	8006b42 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b1e:	f043 0220 	orr.w	r2, r3, #32
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2220      	movs	r2, #32
 8006b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e00f      	b.n	8006b62 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	699a      	ldr	r2, [r3, #24]
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	bf0c      	ite	eq
 8006b52:	2301      	moveq	r3, #1
 8006b54:	2300      	movne	r3, #0
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	461a      	mov	r2, r3
 8006b5a:	79fb      	ldrb	r3, [r7, #7]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d0be      	beq.n	8006ade <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b084      	sub	sp, #16
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	60f8      	str	r0, [r7, #12]
 8006b72:	60b9      	str	r1, [r7, #8]
 8006b74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006b76:	e033      	b.n	8006be0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	68b9      	ldr	r1, [r7, #8]
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f000 f87f 	bl	8006c80 <I2C_IsErrorOccurred>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d001      	beq.n	8006b8c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e031      	b.n	8006bf0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b92:	d025      	beq.n	8006be0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b94:	f7fe f886 	bl	8004ca4 <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	68ba      	ldr	r2, [r7, #8]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d302      	bcc.n	8006baa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d11a      	bne.n	8006be0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	f003 0302 	and.w	r3, r3, #2
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d013      	beq.n	8006be0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bbc:	f043 0220 	orr.w	r2, r3, #32
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2220      	movs	r2, #32
 8006bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e007      	b.n	8006bf0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	f003 0302 	and.w	r3, r3, #2
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d1c4      	bne.n	8006b78 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3710      	adds	r7, #16
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c04:	e02f      	b.n	8006c66 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	68b9      	ldr	r1, [r7, #8]
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f000 f838 	bl	8006c80 <I2C_IsErrorOccurred>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d001      	beq.n	8006c1a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e02d      	b.n	8006c76 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c1a:	f7fe f843 	bl	8004ca4 <HAL_GetTick>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	68ba      	ldr	r2, [r7, #8]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d302      	bcc.n	8006c30 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d11a      	bne.n	8006c66 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	f003 0320 	and.w	r3, r3, #32
 8006c3a:	2b20      	cmp	r3, #32
 8006c3c:	d013      	beq.n	8006c66 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c42:	f043 0220 	orr.w	r2, r3, #32
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2220      	movs	r2, #32
 8006c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e007      	b.n	8006c76 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	699b      	ldr	r3, [r3, #24]
 8006c6c:	f003 0320 	and.w	r3, r3, #32
 8006c70:	2b20      	cmp	r3, #32
 8006c72:	d1c8      	bne.n	8006c06 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
	...

08006c80 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b08a      	sub	sp, #40	; 0x28
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	699b      	ldr	r3, [r3, #24]
 8006c98:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	f003 0310 	and.w	r3, r3, #16
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d068      	beq.n	8006d7e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2210      	movs	r2, #16
 8006cb2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006cb4:	e049      	b.n	8006d4a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cbc:	d045      	beq.n	8006d4a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006cbe:	f7fd fff1 	bl	8004ca4 <HAL_GetTick>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d302      	bcc.n	8006cd4 <I2C_IsErrorOccurred+0x54>
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d13a      	bne.n	8006d4a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cde:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006ce6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cf6:	d121      	bne.n	8006d3c <I2C_IsErrorOccurred+0xbc>
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cfe:	d01d      	beq.n	8006d3c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006d00:	7cfb      	ldrb	r3, [r7, #19]
 8006d02:	2b20      	cmp	r3, #32
 8006d04:	d01a      	beq.n	8006d3c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	685a      	ldr	r2, [r3, #4]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d14:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006d16:	f7fd ffc5 	bl	8004ca4 <HAL_GetTick>
 8006d1a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d1c:	e00e      	b.n	8006d3c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006d1e:	f7fd ffc1 	bl	8004ca4 <HAL_GetTick>
 8006d22:	4602      	mov	r2, r0
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	2b19      	cmp	r3, #25
 8006d2a:	d907      	bls.n	8006d3c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006d2c:	6a3b      	ldr	r3, [r7, #32]
 8006d2e:	f043 0320 	orr.w	r3, r3, #32
 8006d32:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006d3a:	e006      	b.n	8006d4a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	699b      	ldr	r3, [r3, #24]
 8006d42:	f003 0320 	and.w	r3, r3, #32
 8006d46:	2b20      	cmp	r3, #32
 8006d48:	d1e9      	bne.n	8006d1e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	f003 0320 	and.w	r3, r3, #32
 8006d54:	2b20      	cmp	r3, #32
 8006d56:	d003      	beq.n	8006d60 <I2C_IsErrorOccurred+0xe0>
 8006d58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d0aa      	beq.n	8006cb6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006d60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d103      	bne.n	8006d70 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006d70:	6a3b      	ldr	r3, [r7, #32]
 8006d72:	f043 0304 	orr.w	r3, r3, #4
 8006d76:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00b      	beq.n	8006da8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006d90:	6a3b      	ldr	r3, [r7, #32]
 8006d92:	f043 0301 	orr.w	r3, r3, #1
 8006d96:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006da0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00b      	beq.n	8006dca <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006db2:	6a3b      	ldr	r3, [r7, #32]
 8006db4:	f043 0308 	orr.w	r3, r3, #8
 8006db8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006dc2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00b      	beq.n	8006dec <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006dd4:	6a3b      	ldr	r3, [r7, #32]
 8006dd6:	f043 0302 	orr.w	r3, r3, #2
 8006dda:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006de4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006dec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d01c      	beq.n	8006e2e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006df4:	68f8      	ldr	r0, [r7, #12]
 8006df6:	f7ff fe45 	bl	8006a84 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	6859      	ldr	r1, [r3, #4]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	4b0d      	ldr	r3, [pc, #52]	; (8006e3c <I2C_IsErrorOccurred+0x1bc>)
 8006e06:	400b      	ands	r3, r1
 8006e08:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e0e:	6a3b      	ldr	r3, [r7, #32]
 8006e10:	431a      	orrs	r2, r3
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2220      	movs	r2, #32
 8006e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006e2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3728      	adds	r7, #40	; 0x28
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	fe00e800 	.word	0xfe00e800

08006e40 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b087      	sub	sp, #28
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	607b      	str	r3, [r7, #4]
 8006e4a:	460b      	mov	r3, r1
 8006e4c:	817b      	strh	r3, [r7, #10]
 8006e4e:	4613      	mov	r3, r2
 8006e50:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006e52:	897b      	ldrh	r3, [r7, #10]
 8006e54:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006e58:	7a7b      	ldrb	r3, [r7, #9]
 8006e5a:	041b      	lsls	r3, r3, #16
 8006e5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006e60:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006e66:	6a3b      	ldr	r3, [r7, #32]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e6e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	685a      	ldr	r2, [r3, #4]
 8006e76:	6a3b      	ldr	r3, [r7, #32]
 8006e78:	0d5b      	lsrs	r3, r3, #21
 8006e7a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006e7e:	4b08      	ldr	r3, [pc, #32]	; (8006ea0 <I2C_TransferConfig+0x60>)
 8006e80:	430b      	orrs	r3, r1
 8006e82:	43db      	mvns	r3, r3
 8006e84:	ea02 0103 	and.w	r1, r2, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	430a      	orrs	r2, r1
 8006e90:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006e92:	bf00      	nop
 8006e94:	371c      	adds	r7, #28
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	03ff63ff 	.word	0x03ff63ff

08006ea4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	2b20      	cmp	r3, #32
 8006eb8:	d138      	bne.n	8006f2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d101      	bne.n	8006ec8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006ec4:	2302      	movs	r3, #2
 8006ec6:	e032      	b.n	8006f2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2224      	movs	r2, #36	; 0x24
 8006ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f022 0201 	bic.w	r2, r2, #1
 8006ee6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ef6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	6819      	ldr	r1, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	683a      	ldr	r2, [r7, #0]
 8006f04:	430a      	orrs	r2, r1
 8006f06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f042 0201 	orr.w	r2, r2, #1
 8006f16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2220      	movs	r2, #32
 8006f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	e000      	b.n	8006f2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006f2c:	2302      	movs	r3, #2
  }
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	370c      	adds	r7, #12
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr

08006f3a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	b085      	sub	sp, #20
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
 8006f42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2b20      	cmp	r3, #32
 8006f4e:	d139      	bne.n	8006fc4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d101      	bne.n	8006f5e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006f5a:	2302      	movs	r3, #2
 8006f5c:	e033      	b.n	8006fc6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2224      	movs	r2, #36	; 0x24
 8006f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f022 0201 	bic.w	r2, r2, #1
 8006f7c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006f8c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	021b      	lsls	r3, r3, #8
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f042 0201 	orr.w	r2, r2, #1
 8006fae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2220      	movs	r2, #32
 8006fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	e000      	b.n	8006fc6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006fc4:	2302      	movs	r3, #2
  }
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
	...

08006fd4 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d01e      	beq.n	8007024 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8006fe6:	4b13      	ldr	r3, [pc, #76]	; (8007034 <HAL_IPCC_Init+0x60>)
 8006fe8:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d102      	bne.n	8006ffc <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f7fc f9ea 	bl	80033d0 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8006ffc:	68b8      	ldr	r0, [r7, #8]
 8006ffe:	f000 f85b 	bl	80070b8 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 f82c 	bl	800706c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2201      	movs	r2, #1
 800701e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8007022:	e001      	b.n	8007028 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8007028:	7bfb      	ldrb	r3, [r7, #15]
}
 800702a:	4618      	mov	r0, r3
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	58000c00 	.word	0x58000c00

08007038 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	4613      	mov	r3, r2
 8007044:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8007046:	bf00      	nop
 8007048:	3714      	adds	r7, #20
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr

08007052 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8007052:	b480      	push	{r7}
 8007054:	b085      	sub	sp, #20
 8007056:	af00      	add	r7, sp, #0
 8007058:	60f8      	str	r0, [r7, #12]
 800705a:	60b9      	str	r1, [r7, #8]
 800705c:	4613      	mov	r3, r2
 800705e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8007060:	bf00      	nop
 8007062:	3714      	adds	r7, #20
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8007074:	2300      	movs	r3, #0
 8007076:	60fb      	str	r3, [r7, #12]
 8007078:	e00f      	b.n	800709a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4413      	add	r3, r2
 8007082:	4a0b      	ldr	r2, [pc, #44]	; (80070b0 <IPCC_SetDefaultCallbacks+0x44>)
 8007084:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	3306      	adds	r3, #6
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4413      	add	r3, r2
 8007090:	4a08      	ldr	r2, [pc, #32]	; (80070b4 <IPCC_SetDefaultCallbacks+0x48>)
 8007092:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	3301      	adds	r3, #1
 8007098:	60fb      	str	r3, [r7, #12]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2b05      	cmp	r3, #5
 800709e:	d9ec      	bls.n	800707a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80070a0:	bf00      	nop
 80070a2:	bf00      	nop
 80070a4:	3714      	adds	r7, #20
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	08007039 	.word	0x08007039
 80070b4:	08007053 	.word	0x08007053

080070b8 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 80070cc:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	223f      	movs	r2, #63	; 0x3f
 80070d2:	609a      	str	r2, [r3, #8]
}
 80070d4:	bf00      	nop
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80070e0:	b480      	push	{r7}
 80070e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80070e4:	4b05      	ldr	r3, [pc, #20]	; (80070fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a04      	ldr	r2, [pc, #16]	; (80070fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80070ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070ee:	6013      	str	r3, [r2, #0]
}
 80070f0:	bf00      	nop
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	58000400 	.word	0x58000400

08007100 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007100:	b480      	push	{r7}
 8007102:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8007104:	4b04      	ldr	r3, [pc, #16]	; (8007118 <HAL_PWREx_GetVoltageRange+0x18>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800710c:	4618      	mov	r0, r3
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	58000400 	.word	0x58000400

0800711c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b086      	sub	sp, #24
 8007120:	af02      	add	r7, sp, #8
 8007122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007124:	f7fd fdbe 	bl	8004ca4 <HAL_GetTick>
 8007128:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d101      	bne.n	8007134 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e063      	b.n	80071fc <HAL_QSPI_Init+0xe0>
  assert_param(IS_QSPI_SSHIFT(hqspi->Init.SampleShifting));
  assert_param(IS_QSPI_FLASH_SIZE(hqspi->Init.FlashSize));
  assert_param(IS_QSPI_CS_HIGH_TIME(hqspi->Init.ChipSelectHighTime));
  assert_param(IS_QSPI_CLOCK_MODE(hqspi->Init.ClockMode));

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800713a:	b2db      	uxtb	r3, r3
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10b      	bne.n	8007158 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f7fd f989 	bl	8004460 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800714e:	f241 3188 	movw	r1, #5000	; 0x1388
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fa5c 	bl	8007610 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	3b01      	subs	r3, #1
 8007168:	021a      	lsls	r2, r3, #8
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	430a      	orrs	r2, r1
 8007170:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007176:	9300      	str	r3, [sp, #0]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	2120      	movs	r1, #32
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 fa54 	bl	800762c <QSPI_WaitFlagStateUntilTimeout>
 8007184:	4603      	mov	r3, r0
 8007186:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007188:	7afb      	ldrb	r3, [r7, #11]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d131      	bne.n	80071f2 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007198:	f023 0310 	bic.w	r3, r3, #16
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	6852      	ldr	r2, [r2, #4]
 80071a0:	0611      	lsls	r1, r2, #24
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	68d2      	ldr	r2, [r2, #12]
 80071a6:	4311      	orrs	r1, r2
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	6812      	ldr	r2, [r2, #0]
 80071ac:	430b      	orrs	r3, r1
 80071ae:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	685a      	ldr	r2, [r3, #4]
 80071b6:	4b13      	ldr	r3, [pc, #76]	; (8007204 <HAL_QSPI_Init+0xe8>)
 80071b8:	4013      	ands	r3, r2
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	6912      	ldr	r2, [r2, #16]
 80071be:	0411      	lsls	r1, r2, #16
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	6952      	ldr	r2, [r2, #20]
 80071c4:	4311      	orrs	r1, r2
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	6992      	ldr	r2, [r2, #24]
 80071ca:	4311      	orrs	r1, r2
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	6812      	ldr	r2, [r2, #0]
 80071d0:	430b      	orrs	r3, r1
 80071d2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f042 0201 	orr.w	r2, r2, #1
 80071e2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2201      	movs	r2, #1
 80071ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80071fa:	7afb      	ldrb	r3, [r7, #11]
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	ffe0f8fe 	.word	0xffe0f8fe

08007208 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b088      	sub	sp, #32
 800720c:	af02      	add	r7, sp, #8
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007214:	f7fd fd46 	bl	8004ca4 <HAL_GetTick>
 8007218:	6138      	str	r0, [r7, #16]

  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b01      	cmp	r3, #1
 8007224:	d101      	bne.n	800722a <HAL_QSPI_Command+0x22>
 8007226:	2302      	movs	r3, #2
 8007228:	e048      	b.n	80072bc <HAL_QSPI_Command+0xb4>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2201      	movs	r2, #1
 800722e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007238:	b2db      	uxtb	r3, r3
 800723a:	2b01      	cmp	r3, #1
 800723c:	d137      	bne.n	80072ae <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2200      	movs	r2, #0
 8007242:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2202      	movs	r2, #2
 8007248:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	9300      	str	r3, [sp, #0]
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	2200      	movs	r2, #0
 8007254:	2120      	movs	r1, #32
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f000 f9e8 	bl	800762c <QSPI_WaitFlagStateUntilTimeout>
 800725c:	4603      	mov	r3, r0
 800725e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8007260:	7dfb      	ldrb	r3, [r7, #23]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d125      	bne.n	80072b2 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8007266:	2200      	movs	r2, #0
 8007268:	68b9      	ldr	r1, [r7, #8]
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f000 fa15 	bl	800769a <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007274:	2b00      	cmp	r3, #0
 8007276:	d115      	bne.n	80072a4 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	9300      	str	r3, [sp, #0]
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	2201      	movs	r2, #1
 8007280:	2102      	movs	r1, #2
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	f000 f9d2 	bl	800762c <QSPI_WaitFlagStateUntilTimeout>
 8007288:	4603      	mov	r3, r0
 800728a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800728c:	7dfb      	ldrb	r3, [r7, #23]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d10f      	bne.n	80072b2 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2202      	movs	r2, #2
 8007298:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80072a2:	e006      	b.n	80072b2 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80072ac:	e001      	b.n	80072b2 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80072ae:	2302      	movs	r3, #2
 80072b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80072ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3718      	adds	r7, #24
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b08a      	sub	sp, #40	; 0x28
 80072c8:	af02      	add	r7, sp, #8
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072d0:	2300      	movs	r3, #0
 80072d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80072d4:	f7fd fce6 	bl	8004ca4 <HAL_GetTick>
 80072d8:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	3320      	adds	r3, #32
 80072e0:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d101      	bne.n	80072f2 <HAL_QSPI_Transmit+0x2e>
 80072ee:	2302      	movs	r3, #2
 80072f0:	e076      	b.n	80073e0 <HAL_QSPI_Transmit+0x11c>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2201      	movs	r2, #1
 80072f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007300:	b2db      	uxtb	r3, r3
 8007302:	2b01      	cmp	r3, #1
 8007304:	d165      	bne.n	80073d2 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d056      	beq.n	80073c0 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2212      	movs	r2, #18
 8007316:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	1c5a      	adds	r2, r3, #1
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	691b      	ldr	r3, [r3, #16]
 800732c:	1c5a      	adds	r2, r3, #1
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	695a      	ldr	r2, [r3, #20]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8007346:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8007348:	e01b      	b.n	8007382 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	9300      	str	r3, [sp, #0]
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	2201      	movs	r2, #1
 8007352:	2104      	movs	r1, #4
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f000 f969 	bl	800762c <QSPI_WaitFlagStateUntilTimeout>
 800735a:	4603      	mov	r3, r0
 800735c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800735e:	7ffb      	ldrb	r3, [r7, #31]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d113      	bne.n	800738c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	69db      	ldr	r3, [r3, #28]
 8007368:	781a      	ldrb	r2, [r3, #0]
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	69db      	ldr	r3, [r3, #28]
 8007372:	1c5a      	adds	r2, r3, #1
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737c:	1e5a      	subs	r2, r3, #1
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1df      	bne.n	800734a <HAL_QSPI_Transmit+0x86>
 800738a:	e000      	b.n	800738e <HAL_QSPI_Transmit+0xca>
          break;
 800738c:	bf00      	nop
      }

      if (status == HAL_OK)
 800738e:	7ffb      	ldrb	r3, [r7, #31]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d110      	bne.n	80073b6 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	9300      	str	r3, [sp, #0]
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	2201      	movs	r2, #1
 800739c:	2102      	movs	r1, #2
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	f000 f944 	bl	800762c <QSPI_WaitFlagStateUntilTimeout>
 80073a4:	4603      	mov	r3, r0
 80073a6:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80073a8:	7ffb      	ldrb	r3, [r7, #31]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d103      	bne.n	80073b6 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2202      	movs	r2, #2
 80073b4:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80073be:	e00a      	b.n	80073d6 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073c4:	f043 0208 	orr.w	r2, r3, #8
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	77fb      	strb	r3, [r7, #31]
 80073d0:	e001      	b.n	80073d6 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 80073d2:	2302      	movs	r3, #2
 80073d4:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80073de:	7ffb      	ldrb	r3, [r7, #31]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3720      	adds	r7, #32
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b08a      	sub	sp, #40	; 0x28
 80073ec:	af02      	add	r7, sp, #8
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073f4:	2300      	movs	r3, #0
 80073f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80073f8:	f7fd fc54 	bl	8004ca4 <HAL_GetTick>
 80073fc:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	699b      	ldr	r3, [r3, #24]
 8007404:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	3320      	adds	r3, #32
 800740c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007414:	b2db      	uxtb	r3, r3
 8007416:	2b01      	cmp	r3, #1
 8007418:	d101      	bne.n	800741e <HAL_QSPI_Receive+0x36>
 800741a:	2302      	movs	r3, #2
 800741c:	e07d      	b.n	800751a <HAL_QSPI_Receive+0x132>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800742c:	b2db      	uxtb	r3, r3
 800742e:	2b01      	cmp	r3, #1
 8007430:	d16c      	bne.n	800750c <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d05d      	beq.n	80074fa <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2222      	movs	r2, #34	; 0x22
 8007442:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	1c5a      	adds	r2, r3, #1
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	1c5a      	adds	r2, r3, #1
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	68ba      	ldr	r2, [r7, #8]
 8007462:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	695b      	ldr	r3, [r3, #20]
 800746a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007476:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	697a      	ldr	r2, [r7, #20]
 800747e:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8007480:	e01c      	b.n	80074bc <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	9300      	str	r3, [sp, #0]
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	2201      	movs	r2, #1
 800748a:	2106      	movs	r1, #6
 800748c:	68f8      	ldr	r0, [r7, #12]
 800748e:	f000 f8cd 	bl	800762c <QSPI_WaitFlagStateUntilTimeout>
 8007492:	4603      	mov	r3, r0
 8007494:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8007496:	7ffb      	ldrb	r3, [r7, #31]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d114      	bne.n	80074c6 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a0:	693a      	ldr	r2, [r7, #16]
 80074a2:	7812      	ldrb	r2, [r2, #0]
 80074a4:	b2d2      	uxtb	r2, r2
 80074a6:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ac:	1c5a      	adds	r2, r3, #1
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b6:	1e5a      	subs	r2, r3, #1
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1de      	bne.n	8007482 <HAL_QSPI_Receive+0x9a>
 80074c4:	e000      	b.n	80074c8 <HAL_QSPI_Receive+0xe0>
          break;
 80074c6:	bf00      	nop
      }

      if (status == HAL_OK)
 80074c8:	7ffb      	ldrb	r3, [r7, #31]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d110      	bne.n	80074f0 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	2201      	movs	r2, #1
 80074d6:	2102      	movs	r1, #2
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f000 f8a7 	bl	800762c <QSPI_WaitFlagStateUntilTimeout>
 80074de:	4603      	mov	r3, r0
 80074e0:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80074e2:	7ffb      	ldrb	r3, [r7, #31]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d103      	bne.n	80074f0 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2202      	movs	r2, #2
 80074ee:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80074f8:	e00a      	b.n	8007510 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074fe:	f043 0208 	orr.w	r2, r3, #8
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	77fb      	strb	r3, [r7, #31]
 800750a:	e001      	b.n	8007510 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 800750c:	2302      	movs	r3, #2
 800750e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2200      	movs	r2, #0
 8007514:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8007518:	7ffb      	ldrb	r3, [r7, #31]
}
 800751a:	4618      	mov	r0, r3
 800751c:	3720      	adds	r7, #32
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b088      	sub	sp, #32
 8007526:	af02      	add	r7, sp, #8
 8007528:	60f8      	str	r0, [r7, #12]
 800752a:	60b9      	str	r1, [r7, #8]
 800752c:	607a      	str	r2, [r7, #4]
 800752e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007530:	f7fd fbb8 	bl	8004ca4 <HAL_GetTick>
 8007534:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800753c:	b2db      	uxtb	r3, r3
 800753e:	2b01      	cmp	r3, #1
 8007540:	d101      	bne.n	8007546 <HAL_QSPI_AutoPolling+0x24>
 8007542:	2302      	movs	r3, #2
 8007544:	e060      	b.n	8007608 <HAL_QSPI_AutoPolling+0xe6>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2201      	movs	r2, #1
 800754a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007554:	b2db      	uxtb	r3, r3
 8007556:	2b01      	cmp	r3, #1
 8007558:	d14f      	bne.n	80075fa <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2242      	movs	r2, #66	; 0x42
 8007564:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	9300      	str	r3, [sp, #0]
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	2200      	movs	r2, #0
 8007570:	2120      	movs	r1, #32
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	f000 f85a 	bl	800762c <QSPI_WaitFlagStateUntilTimeout>
 8007578:	4603      	mov	r3, r0
 800757a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800757c:	7dfb      	ldrb	r3, [r7, #23]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d13d      	bne.n	80075fe <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	6812      	ldr	r2, [r2, #0]
 800758a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	6852      	ldr	r2, [r2, #4]
 8007594:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	6892      	ldr	r2, [r2, #8]
 800759e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	431a      	orrs	r2, r3
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80075b8:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	68da      	ldr	r2, [r3, #12]
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80075c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80075c6:	68b9      	ldr	r1, [r7, #8]
 80075c8:	68f8      	ldr	r0, [r7, #12]
 80075ca:	f000 f866 	bl	800769a <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	9300      	str	r3, [sp, #0]
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	2201      	movs	r2, #1
 80075d6:	2108      	movs	r1, #8
 80075d8:	68f8      	ldr	r0, [r7, #12]
 80075da:	f000 f827 	bl	800762c <QSPI_WaitFlagStateUntilTimeout>
 80075de:	4603      	mov	r3, r0
 80075e0:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80075e2:	7dfb      	ldrb	r3, [r7, #23]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d10a      	bne.n	80075fe <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2208      	movs	r2, #8
 80075ee:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80075f8:	e001      	b.n	80075fe <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80075fa:	2302      	movs	r3, #2
 80075fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8007606:	7dfb      	ldrb	r3, [r7, #23]
}
 8007608:	4618      	mov	r0, r3
 800760a:	3718      	adds	r7, #24
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	683a      	ldr	r2, [r7, #0]
 800761e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8007620:	bf00      	nop
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	603b      	str	r3, [r7, #0]
 8007638:	4613      	mov	r3, r2
 800763a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800763c:	e01a      	b.n	8007674 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007644:	d016      	beq.n	8007674 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007646:	f7fd fb2d 	bl	8004ca4 <HAL_GetTick>
 800764a:	4602      	mov	r2, r0
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	1ad3      	subs	r3, r2, r3
 8007650:	69ba      	ldr	r2, [r7, #24]
 8007652:	429a      	cmp	r2, r3
 8007654:	d302      	bcc.n	800765c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d10b      	bne.n	8007674 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2204      	movs	r2, #4
 8007660:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007668:	f043 0201 	orr.w	r2, r3, #1
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	e00e      	b.n	8007692 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	689a      	ldr	r2, [r3, #8]
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	4013      	ands	r3, r2
 800767e:	2b00      	cmp	r3, #0
 8007680:	bf14      	ite	ne
 8007682:	2301      	movne	r3, #1
 8007684:	2300      	moveq	r3, #0
 8007686:	b2db      	uxtb	r3, r3
 8007688:	461a      	mov	r2, r3
 800768a:	79fb      	ldrb	r3, [r7, #7]
 800768c:	429a      	cmp	r2, r3
 800768e:	d1d6      	bne.n	800763e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800769a:	b480      	push	{r7}
 800769c:	b085      	sub	sp, #20
 800769e:	af00      	add	r7, sp, #0
 80076a0:	60f8      	str	r0, [r7, #12]
 80076a2:	60b9      	str	r1, [r7, #8]
 80076a4:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d009      	beq.n	80076c2 <QSPI_Config+0x28>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80076b4:	d005      	beq.n	80076c2 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	3a01      	subs	r2, #1
 80076c0:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	699b      	ldr	r3, [r3, #24]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	f000 80ad 	beq.w	8007826 <QSPI_Config+0x18c>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	6a1b      	ldr	r3, [r3, #32]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d059      	beq.n	8007788 <QSPI_Config+0xee>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	68ba      	ldr	r2, [r7, #8]
 80076da:	6892      	ldr	r2, [r2, #8]
 80076dc:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	69db      	ldr	r3, [r3, #28]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d02e      	beq.n	8007744 <QSPI_Config+0xaa>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ee:	431a      	orrs	r2, r3
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f4:	431a      	orrs	r2, r3
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	049b      	lsls	r3, r3, #18
 80076fc:	431a      	orrs	r2, r3
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	431a      	orrs	r2, r3
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	6a1b      	ldr	r3, [r3, #32]
 8007708:	431a      	orrs	r2, r3
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	431a      	orrs	r2, r3
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	69db      	ldr	r3, [r3, #28]
 8007714:	431a      	orrs	r2, r3
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	699b      	ldr	r3, [r3, #24]
 800771a:	431a      	orrs	r2, r3
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	ea42 0103 	orr.w	r1, r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	430a      	orrs	r2, r1
 800772c:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007734:	f000 8119 	beq.w	800796a <QSPI_Config+0x2d0>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68ba      	ldr	r2, [r7, #8]
 800773e:	6852      	ldr	r2, [r2, #4]
 8007740:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8007742:	e112      	b.n	800796a <QSPI_Config+0x2d0>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800774c:	431a      	orrs	r2, r3
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007752:	431a      	orrs	r2, r3
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	695b      	ldr	r3, [r3, #20]
 8007758:	049b      	lsls	r3, r3, #18
 800775a:	431a      	orrs	r2, r3
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	431a      	orrs	r2, r3
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	6a1b      	ldr	r3, [r3, #32]
 8007766:	431a      	orrs	r2, r3
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	69db      	ldr	r3, [r3, #28]
 800776c:	431a      	orrs	r2, r3
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	699b      	ldr	r3, [r3, #24]
 8007772:	431a      	orrs	r2, r3
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	ea42 0103 	orr.w	r1, r2, r3
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	430a      	orrs	r2, r1
 8007784:	615a      	str	r2, [r3, #20]
}
 8007786:	e0f0      	b.n	800796a <QSPI_Config+0x2d0>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	69db      	ldr	r3, [r3, #28]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d02b      	beq.n	80077e8 <QSPI_Config+0x14e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007798:	431a      	orrs	r2, r3
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779e:	431a      	orrs	r2, r3
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	695b      	ldr	r3, [r3, #20]
 80077a4:	049b      	lsls	r3, r3, #18
 80077a6:	431a      	orrs	r2, r3
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	6a1b      	ldr	r3, [r3, #32]
 80077ac:	431a      	orrs	r2, r3
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	431a      	orrs	r2, r3
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	69db      	ldr	r3, [r3, #28]
 80077b8:	431a      	orrs	r2, r3
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	699b      	ldr	r3, [r3, #24]
 80077be:	431a      	orrs	r2, r3
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	ea42 0103 	orr.w	r1, r2, r3
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	430a      	orrs	r2, r1
 80077d0:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80077d8:	f000 80c7 	beq.w	800796a <QSPI_Config+0x2d0>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	6852      	ldr	r2, [r2, #4]
 80077e4:	619a      	str	r2, [r3, #24]
}
 80077e6:	e0c0      	b.n	800796a <QSPI_Config+0x2d0>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f0:	431a      	orrs	r2, r3
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f6:	431a      	orrs	r2, r3
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	695b      	ldr	r3, [r3, #20]
 80077fc:	049b      	lsls	r3, r3, #18
 80077fe:	431a      	orrs	r2, r3
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	6a1b      	ldr	r3, [r3, #32]
 8007804:	431a      	orrs	r2, r3
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	69db      	ldr	r3, [r3, #28]
 800780a:	431a      	orrs	r2, r3
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	699b      	ldr	r3, [r3, #24]
 8007810:	431a      	orrs	r2, r3
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	ea42 0103 	orr.w	r1, r2, r3
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	430a      	orrs	r2, r1
 8007822:	615a      	str	r2, [r3, #20]
}
 8007824:	e0a1      	b.n	800796a <QSPI_Config+0x2d0>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	6a1b      	ldr	r3, [r3, #32]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d052      	beq.n	80078d4 <QSPI_Config+0x23a>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68ba      	ldr	r2, [r7, #8]
 8007834:	6892      	ldr	r2, [r2, #8]
 8007836:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	69db      	ldr	r3, [r3, #28]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d02a      	beq.n	8007896 <QSPI_Config+0x1fc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007848:	431a      	orrs	r2, r3
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784e:	431a      	orrs	r2, r3
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	695b      	ldr	r3, [r3, #20]
 8007854:	049b      	lsls	r3, r3, #18
 8007856:	431a      	orrs	r2, r3
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	431a      	orrs	r2, r3
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	431a      	orrs	r2, r3
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	431a      	orrs	r2, r3
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	69db      	ldr	r3, [r3, #28]
 800786e:	431a      	orrs	r2, r3
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	699b      	ldr	r3, [r3, #24]
 8007874:	ea42 0103 	orr.w	r1, r2, r3
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	430a      	orrs	r2, r1
 8007880:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007888:	d06f      	beq.n	800796a <QSPI_Config+0x2d0>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	6852      	ldr	r2, [r2, #4]
 8007892:	619a      	str	r2, [r3, #24]
}
 8007894:	e069      	b.n	800796a <QSPI_Config+0x2d0>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800789e:	431a      	orrs	r2, r3
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a4:	431a      	orrs	r2, r3
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	049b      	lsls	r3, r3, #18
 80078ac:	431a      	orrs	r2, r3
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	431a      	orrs	r2, r3
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	6a1b      	ldr	r3, [r3, #32]
 80078b8:	431a      	orrs	r2, r3
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	69db      	ldr	r3, [r3, #28]
 80078be:	431a      	orrs	r2, r3
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	699b      	ldr	r3, [r3, #24]
 80078c4:	ea42 0103 	orr.w	r1, r2, r3
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	430a      	orrs	r2, r1
 80078d0:	615a      	str	r2, [r3, #20]
}
 80078d2:	e04a      	b.n	800796a <QSPI_Config+0x2d0>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	69db      	ldr	r3, [r3, #28]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d027      	beq.n	800792c <QSPI_Config+0x292>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e4:	431a      	orrs	r2, r3
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ea:	431a      	orrs	r2, r3
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	695b      	ldr	r3, [r3, #20]
 80078f0:	049b      	lsls	r3, r3, #18
 80078f2:	431a      	orrs	r2, r3
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	6a1b      	ldr	r3, [r3, #32]
 80078f8:	431a      	orrs	r2, r3
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	431a      	orrs	r2, r3
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	69db      	ldr	r3, [r3, #28]
 8007904:	431a      	orrs	r2, r3
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	ea42 0103 	orr.w	r1, r2, r3
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	430a      	orrs	r2, r1
 8007916:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800791e:	d024      	beq.n	800796a <QSPI_Config+0x2d0>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	68ba      	ldr	r2, [r7, #8]
 8007926:	6852      	ldr	r2, [r2, #4]
 8007928:	619a      	str	r2, [r3, #24]
}
 800792a:	e01e      	b.n	800796a <QSPI_Config+0x2d0>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007930:	2b00      	cmp	r3, #0
 8007932:	d01a      	beq.n	800796a <QSPI_Config+0x2d0>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800793c:	431a      	orrs	r2, r3
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007942:	431a      	orrs	r2, r3
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	695b      	ldr	r3, [r3, #20]
 8007948:	049b      	lsls	r3, r3, #18
 800794a:	431a      	orrs	r2, r3
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	6a1b      	ldr	r3, [r3, #32]
 8007950:	431a      	orrs	r2, r3
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	69db      	ldr	r3, [r3, #28]
 8007956:	431a      	orrs	r2, r3
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	699b      	ldr	r3, [r3, #24]
 800795c:	ea42 0103 	orr.w	r1, r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	430a      	orrs	r2, r1
 8007968:	615a      	str	r2, [r3, #20]
}
 800796a:	bf00      	nop
 800796c:	3714      	adds	r7, #20
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr

08007976 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8007976:	b480      	push	{r7}
 8007978:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800797a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007984:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007988:	d101      	bne.n	800798e <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800798a:	2301      	movs	r3, #1
 800798c:	e000      	b.n	8007990 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800798e:	2300      	movs	r3, #0
}
 8007990:	4618      	mov	r0, r3
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr

0800799a <LL_RCC_HSE_Enable>:
{
 800799a:	b480      	push	{r7}
 800799c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800799e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079ac:	6013      	str	r3, [r2, #0]
}
 80079ae:	bf00      	nop
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <LL_RCC_HSE_Disable>:
{
 80079b8:	b480      	push	{r7}
 80079ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80079bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079ca:	6013      	str	r3, [r2, #0]
}
 80079cc:	bf00      	nop
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr

080079d6 <LL_RCC_HSE_IsReady>:
{
 80079d6:	b480      	push	{r7}
 80079d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80079da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079e8:	d101      	bne.n	80079ee <LL_RCC_HSE_IsReady+0x18>
 80079ea:	2301      	movs	r3, #1
 80079ec:	e000      	b.n	80079f0 <LL_RCC_HSE_IsReady+0x1a>
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <LL_RCC_HSI_Enable>:
{
 80079fa:	b480      	push	{r7}
 80079fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80079fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a0c:	6013      	str	r3, [r2, #0]
}
 8007a0e:	bf00      	nop
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <LL_RCC_HSI_Disable>:
{
 8007a18:	b480      	push	{r7}
 8007a1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8007a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a2a:	6013      	str	r3, [r2, #0]
}
 8007a2c:	bf00      	nop
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr

08007a36 <LL_RCC_HSI_IsReady>:
{
 8007a36:	b480      	push	{r7}
 8007a38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8007a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a48:	d101      	bne.n	8007a4e <LL_RCC_HSI_IsReady+0x18>
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e000      	b.n	8007a50 <LL_RCC_HSI_IsReady+0x1a>
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr

08007a5a <LL_RCC_HSI_SetCalibTrimming>:
{
 8007a5a:	b480      	push	{r7}
 8007a5c:	b083      	sub	sp, #12
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8007a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	061b      	lsls	r3, r3, #24
 8007a70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a74:	4313      	orrs	r3, r2
 8007a76:	604b      	str	r3, [r1, #4]
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <LL_RCC_HSI48_Enable>:
{
 8007a84:	b480      	push	{r7}
 8007a86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007a90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a94:	f043 0301 	orr.w	r3, r3, #1
 8007a98:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8007a9c:	bf00      	nop
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <LL_RCC_HSI48_Disable>:
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007aae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ab2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ab6:	f023 0301 	bic.w	r3, r3, #1
 8007aba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8007abe:	bf00      	nop
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <LL_RCC_HSI48_IsReady>:
{
 8007ac8:	b480      	push	{r7}
 8007aca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8007acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ad0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ad4:	f003 0302 	and.w	r3, r3, #2
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d101      	bne.n	8007ae0 <LL_RCC_HSI48_IsReady+0x18>
 8007adc:	2301      	movs	r3, #1
 8007ade:	e000      	b.n	8007ae2 <LL_RCC_HSI48_IsReady+0x1a>
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <LL_RCC_LSE_Enable>:
{
 8007aec:	b480      	push	{r7}
 8007aee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007af8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007afc:	f043 0301 	orr.w	r3, r3, #1
 8007b00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007b04:	bf00      	nop
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr

08007b0e <LL_RCC_LSE_Disable>:
{
 8007b0e:	b480      	push	{r7}
 8007b10:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b1e:	f023 0301 	bic.w	r3, r3, #1
 8007b22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007b26:	bf00      	nop
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <LL_RCC_LSE_EnableBypass>:
{
 8007b30:	b480      	push	{r7}
 8007b32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b40:	f043 0304 	orr.w	r3, r3, #4
 8007b44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007b48:	bf00      	nop
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr

08007b52 <LL_RCC_LSE_DisableBypass>:
{
 8007b52:	b480      	push	{r7}
 8007b54:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b62:	f023 0304 	bic.w	r3, r3, #4
 8007b66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007b6a:	bf00      	nop
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <LL_RCC_LSE_IsReady>:
{
 8007b74:	b480      	push	{r7}
 8007b76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b80:	f003 0302 	and.w	r3, r3, #2
 8007b84:	2b02      	cmp	r3, #2
 8007b86:	d101      	bne.n	8007b8c <LL_RCC_LSE_IsReady+0x18>
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e000      	b.n	8007b8e <LL_RCC_LSE_IsReady+0x1a>
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <LL_RCC_LSI1_Enable>:
{
 8007b98:	b480      	push	{r7}
 8007b9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8007b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ba4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ba8:	f043 0301 	orr.w	r3, r3, #1
 8007bac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007bb0:	bf00      	nop
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr

08007bba <LL_RCC_LSI1_Disable>:
{
 8007bba:	b480      	push	{r7}
 8007bbc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8007bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007bca:	f023 0301 	bic.w	r3, r3, #1
 8007bce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007bd2:	bf00      	nop
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <LL_RCC_LSI1_IsReady>:
{
 8007bdc:	b480      	push	{r7}
 8007bde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8007be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007be4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007be8:	f003 0302 	and.w	r3, r3, #2
 8007bec:	2b02      	cmp	r3, #2
 8007bee:	d101      	bne.n	8007bf4 <LL_RCC_LSI1_IsReady+0x18>
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e000      	b.n	8007bf6 <LL_RCC_LSI1_IsReady+0x1a>
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <LL_RCC_LSI2_Enable>:
{
 8007c00:	b480      	push	{r7}
 8007c02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c10:	f043 0304 	orr.w	r3, r3, #4
 8007c14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007c18:	bf00      	nop
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <LL_RCC_LSI2_Disable>:
{
 8007c22:	b480      	push	{r7}
 8007c24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c32:	f023 0304 	bic.w	r3, r3, #4
 8007c36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007c3a:	bf00      	nop
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <LL_RCC_LSI2_IsReady>:
{
 8007c44:	b480      	push	{r7}
 8007c46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8007c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c50:	f003 0308 	and.w	r3, r3, #8
 8007c54:	2b08      	cmp	r3, #8
 8007c56:	d101      	bne.n	8007c5c <LL_RCC_LSI2_IsReady+0x18>
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e000      	b.n	8007c5e <LL_RCC_LSI2_IsReady+0x1a>
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <LL_RCC_LSI2_SetTrimming>:
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8007c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c78:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	021b      	lsls	r3, r3, #8
 8007c80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c84:	4313      	orrs	r3, r2
 8007c86:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8007c8a:	bf00      	nop
 8007c8c:	370c      	adds	r7, #12
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <LL_RCC_MSI_Enable>:
{
 8007c96:	b480      	push	{r7}
 8007c98:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8007c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ca4:	f043 0301 	orr.w	r3, r3, #1
 8007ca8:	6013      	str	r3, [r2, #0]
}
 8007caa:	bf00      	nop
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <LL_RCC_MSI_Disable>:
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8007cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007cc2:	f023 0301 	bic.w	r3, r3, #1
 8007cc6:	6013      	str	r3, [r2, #0]
}
 8007cc8:	bf00      	nop
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr

08007cd2 <LL_RCC_MSI_IsReady>:
{
 8007cd2:	b480      	push	{r7}
 8007cd4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8007cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 0302 	and.w	r3, r3, #2
 8007ce0:	2b02      	cmp	r3, #2
 8007ce2:	d101      	bne.n	8007ce8 <LL_RCC_MSI_IsReady+0x16>
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e000      	b.n	8007cea <LL_RCC_MSI_IsReady+0x18>
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <LL_RCC_MSI_SetRange>:
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8007cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	600b      	str	r3, [r1, #0]
}
 8007d10:	bf00      	nop
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <LL_RCC_MSI_GetRange>:
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8007d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d2c:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2bb0      	cmp	r3, #176	; 0xb0
 8007d32:	d901      	bls.n	8007d38 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8007d34:	23b0      	movs	r3, #176	; 0xb0
 8007d36:	607b      	str	r3, [r7, #4]
  return msiRange;
 8007d38:	687b      	ldr	r3, [r7, #4]
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	370c      	adds	r7, #12
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr

08007d46 <LL_RCC_MSI_SetCalibTrimming>:
{
 8007d46:	b480      	push	{r7}
 8007d48:	b083      	sub	sp, #12
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8007d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	021b      	lsls	r3, r3, #8
 8007d5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d60:	4313      	orrs	r3, r2
 8007d62:	604b      	str	r3, [r1, #4]
}
 8007d64:	bf00      	nop
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <LL_RCC_SetSysClkSource>:
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8007d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	f023 0203 	bic.w	r2, r3, #3
 8007d82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	608b      	str	r3, [r1, #8]
}
 8007d8c:	bf00      	nop
 8007d8e:	370c      	adds	r7, #12
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <LL_RCC_GetSysClkSource>:
{
 8007d98:	b480      	push	{r7}
 8007d9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	f003 030c 	and.w	r3, r3, #12
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <LL_RCC_SetAHBPrescaler>:
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8007db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007dc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	608b      	str	r3, [r1, #8]
}
 8007dcc:	bf00      	nop
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <LL_C2_RCC_SetAHBPrescaler>:
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8007de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007de4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007de8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007dec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8007df8:	bf00      	nop
 8007dfa:	370c      	adds	r7, #12
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <LL_RCC_SetAHB4Prescaler>:
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8007e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e10:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007e14:	f023 020f 	bic.w	r2, r3, #15
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	091b      	lsrs	r3, r3, #4
 8007e1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e20:	4313      	orrs	r3, r2
 8007e22:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8007e26:	bf00      	nop
 8007e28:	370c      	adds	r7, #12
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr

08007e32 <LL_RCC_SetAPB1Prescaler>:
{
 8007e32:	b480      	push	{r7}
 8007e34:	b083      	sub	sp, #12
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8007e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007e44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	608b      	str	r3, [r1, #8]
}
 8007e4e:	bf00      	nop
 8007e50:	370c      	adds	r7, #12
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr

08007e5a <LL_RCC_SetAPB2Prescaler>:
{
 8007e5a:	b480      	push	{r7}
 8007e5c:	b083      	sub	sp, #12
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8007e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007e6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	608b      	str	r3, [r1, #8]
}
 8007e76:	bf00      	nop
 8007e78:	370c      	adds	r7, #12
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr

08007e82 <LL_RCC_GetAHBPrescaler>:
{
 8007e82:	b480      	push	{r7}
 8007e84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <LL_RCC_GetAHB4Prescaler>:
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8007e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ea2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007ea6:	011b      	lsls	r3, r3, #4
 8007ea8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr

08007eb6 <LL_RCC_GetAPB1Prescaler>:
{
 8007eb6:	b480      	push	{r7}
 8007eb8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8007eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr

08007ece <LL_RCC_GetAPB2Prescaler>:
{
 8007ece:	b480      	push	{r7}
 8007ed0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8007ed2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr

08007ee6 <LL_RCC_PLL_Enable>:
{
 8007ee6:	b480      	push	{r7}
 8007ee8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8007eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ef4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ef8:	6013      	str	r3, [r2, #0]
}
 8007efa:	bf00      	nop
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <LL_RCC_PLL_Disable>:
{
 8007f04:	b480      	push	{r7}
 8007f06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8007f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f16:	6013      	str	r3, [r2, #0]
}
 8007f18:	bf00      	nop
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr

08007f22 <LL_RCC_PLL_IsReady>:
{
 8007f22:	b480      	push	{r7}
 8007f24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8007f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f34:	d101      	bne.n	8007f3a <LL_RCC_PLL_IsReady+0x18>
 8007f36:	2301      	movs	r3, #1
 8007f38:	e000      	b.n	8007f3c <LL_RCC_PLL_IsReady+0x1a>
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr

08007f46 <LL_RCC_PLL_GetN>:
{
 8007f46:	b480      	push	{r7}
 8007f48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	0a1b      	lsrs	r3, r3, #8
 8007f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <LL_RCC_PLL_GetR>:
{
 8007f60:	b480      	push	{r7}
 8007f62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8007f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <LL_RCC_PLL_GetDivider>:
{
 8007f78:	b480      	push	{r7}
 8007f7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8007f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <LL_RCC_PLL_GetMainSource>:
{
 8007f90:	b480      	push	{r7}
 8007f92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	f003 0303 	and.w	r3, r3, #3
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <LL_RCC_IsActiveFlag_HPRE>:
{
 8007fa8:	b480      	push	{r7}
 8007faa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8007fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fba:	d101      	bne.n	8007fc0 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e000      	b.n	8007fc2 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8007fcc:	b480      	push	{r7}
 8007fce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8007fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fd4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fe0:	d101      	bne.n	8007fe6 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e000      	b.n	8007fe8 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr

08007ff2 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8007ff2:	b480      	push	{r7}
 8007ff4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8007ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ffa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008006:	d101      	bne.n	800800c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8008008:	2301      	movs	r3, #1
 800800a:	e000      	b.n	800800e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8008018:	b480      	push	{r7}
 800801a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800801c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008026:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800802a:	d101      	bne.n	8008030 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800802c:	2301      	movs	r3, #1
 800802e:	e000      	b.n	8008032 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <LL_RCC_IsActiveFlag_PPRE2>:
{
 800803c:	b480      	push	{r7}
 800803e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8008040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800804a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800804e:	d101      	bne.n	8008054 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8008050:	2301      	movs	r3, #1
 8008052:	e000      	b.n	8008056 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008060:	b590      	push	{r4, r7, lr}
 8008062:	b08d      	sub	sp, #52	; 0x34
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d101      	bne.n	8008072 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	e363      	b.n	800873a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f003 0320 	and.w	r3, r3, #32
 800807a:	2b00      	cmp	r3, #0
 800807c:	f000 808d 	beq.w	800819a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008080:	f7ff fe8a 	bl	8007d98 <LL_RCC_GetSysClkSource>
 8008084:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008086:	f7ff ff83 	bl	8007f90 <LL_RCC_PLL_GetMainSource>
 800808a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800808c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800808e:	2b00      	cmp	r3, #0
 8008090:	d005      	beq.n	800809e <HAL_RCC_OscConfig+0x3e>
 8008092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008094:	2b0c      	cmp	r3, #12
 8008096:	d147      	bne.n	8008128 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8008098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809a:	2b01      	cmp	r3, #1
 800809c:	d144      	bne.n	8008128 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	69db      	ldr	r3, [r3, #28]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d101      	bne.n	80080aa <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e347      	b.n	800873a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80080ae:	f7ff fe35 	bl	8007d1c <LL_RCC_MSI_GetRange>
 80080b2:	4603      	mov	r3, r0
 80080b4:	429c      	cmp	r4, r3
 80080b6:	d914      	bls.n	80080e2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080bc:	4618      	mov	r0, r3
 80080be:	f000 fd2f 	bl	8008b20 <RCC_SetFlashLatencyFromMSIRange>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d001      	beq.n	80080cc <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	e336      	b.n	800873a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d0:	4618      	mov	r0, r3
 80080d2:	f7ff fe0f 	bl	8007cf4 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a1b      	ldr	r3, [r3, #32]
 80080da:	4618      	mov	r0, r3
 80080dc:	f7ff fe33 	bl	8007d46 <LL_RCC_MSI_SetCalibTrimming>
 80080e0:	e013      	b.n	800810a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e6:	4618      	mov	r0, r3
 80080e8:	f7ff fe04 	bl	8007cf4 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6a1b      	ldr	r3, [r3, #32]
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7ff fe28 	bl	8007d46 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fa:	4618      	mov	r0, r3
 80080fc:	f000 fd10 	bl	8008b20 <RCC_SetFlashLatencyFromMSIRange>
 8008100:	4603      	mov	r3, r0
 8008102:	2b00      	cmp	r3, #0
 8008104:	d001      	beq.n	800810a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e317      	b.n	800873a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800810a:	f000 fcc9 	bl	8008aa0 <HAL_RCC_GetHCLKFreq>
 800810e:	4603      	mov	r3, r0
 8008110:	4aa4      	ldr	r2, [pc, #656]	; (80083a4 <HAL_RCC_OscConfig+0x344>)
 8008112:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008114:	4ba4      	ldr	r3, [pc, #656]	; (80083a8 <HAL_RCC_OscConfig+0x348>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4618      	mov	r0, r3
 800811a:	f7fc fd75 	bl	8004c08 <HAL_InitTick>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d039      	beq.n	8008198 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8008124:	2301      	movs	r3, #1
 8008126:	e308      	b.n	800873a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	69db      	ldr	r3, [r3, #28]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d01e      	beq.n	800816e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008130:	f7ff fdb1 	bl	8007c96 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008134:	f7fc fdb6 	bl	8004ca4 <HAL_GetTick>
 8008138:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800813a:	e008      	b.n	800814e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800813c:	f7fc fdb2 	bl	8004ca4 <HAL_GetTick>
 8008140:	4602      	mov	r2, r0
 8008142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008144:	1ad3      	subs	r3, r2, r3
 8008146:	2b02      	cmp	r3, #2
 8008148:	d901      	bls.n	800814e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800814a:	2303      	movs	r3, #3
 800814c:	e2f5      	b.n	800873a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800814e:	f7ff fdc0 	bl	8007cd2 <LL_RCC_MSI_IsReady>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d0f1      	beq.n	800813c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815c:	4618      	mov	r0, r3
 800815e:	f7ff fdc9 	bl	8007cf4 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6a1b      	ldr	r3, [r3, #32]
 8008166:	4618      	mov	r0, r3
 8008168:	f7ff fded 	bl	8007d46 <LL_RCC_MSI_SetCalibTrimming>
 800816c:	e015      	b.n	800819a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800816e:	f7ff fda1 	bl	8007cb4 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008172:	f7fc fd97 	bl	8004ca4 <HAL_GetTick>
 8008176:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8008178:	e008      	b.n	800818c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800817a:	f7fc fd93 	bl	8004ca4 <HAL_GetTick>
 800817e:	4602      	mov	r2, r0
 8008180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008182:	1ad3      	subs	r3, r2, r3
 8008184:	2b02      	cmp	r3, #2
 8008186:	d901      	bls.n	800818c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008188:	2303      	movs	r3, #3
 800818a:	e2d6      	b.n	800873a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800818c:	f7ff fda1 	bl	8007cd2 <LL_RCC_MSI_IsReady>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1f1      	bne.n	800817a <HAL_RCC_OscConfig+0x11a>
 8008196:	e000      	b.n	800819a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8008198:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f003 0301 	and.w	r3, r3, #1
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d047      	beq.n	8008236 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081a6:	f7ff fdf7 	bl	8007d98 <LL_RCC_GetSysClkSource>
 80081aa:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80081ac:	f7ff fef0 	bl	8007f90 <LL_RCC_PLL_GetMainSource>
 80081b0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80081b2:	6a3b      	ldr	r3, [r7, #32]
 80081b4:	2b08      	cmp	r3, #8
 80081b6:	d005      	beq.n	80081c4 <HAL_RCC_OscConfig+0x164>
 80081b8:	6a3b      	ldr	r3, [r7, #32]
 80081ba:	2b0c      	cmp	r3, #12
 80081bc:	d108      	bne.n	80081d0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	2b03      	cmp	r3, #3
 80081c2:	d105      	bne.n	80081d0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d134      	bne.n	8008236 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	e2b4      	b.n	800873a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081d8:	d102      	bne.n	80081e0 <HAL_RCC_OscConfig+0x180>
 80081da:	f7ff fbde 	bl	800799a <LL_RCC_HSE_Enable>
 80081de:	e001      	b.n	80081e4 <HAL_RCC_OscConfig+0x184>
 80081e0:	f7ff fbea 	bl	80079b8 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d012      	beq.n	8008212 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081ec:	f7fc fd5a 	bl	8004ca4 <HAL_GetTick>
 80081f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80081f2:	e008      	b.n	8008206 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80081f4:	f7fc fd56 	bl	8004ca4 <HAL_GetTick>
 80081f8:	4602      	mov	r2, r0
 80081fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	2b64      	cmp	r3, #100	; 0x64
 8008200:	d901      	bls.n	8008206 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8008202:	2303      	movs	r3, #3
 8008204:	e299      	b.n	800873a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8008206:	f7ff fbe6 	bl	80079d6 <LL_RCC_HSE_IsReady>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d0f1      	beq.n	80081f4 <HAL_RCC_OscConfig+0x194>
 8008210:	e011      	b.n	8008236 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008212:	f7fc fd47 	bl	8004ca4 <HAL_GetTick>
 8008216:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8008218:	e008      	b.n	800822c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800821a:	f7fc fd43 	bl	8004ca4 <HAL_GetTick>
 800821e:	4602      	mov	r2, r0
 8008220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008222:	1ad3      	subs	r3, r2, r3
 8008224:	2b64      	cmp	r3, #100	; 0x64
 8008226:	d901      	bls.n	800822c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8008228:	2303      	movs	r3, #3
 800822a:	e286      	b.n	800873a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800822c:	f7ff fbd3 	bl	80079d6 <LL_RCC_HSE_IsReady>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1f1      	bne.n	800821a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f003 0302 	and.w	r3, r3, #2
 800823e:	2b00      	cmp	r3, #0
 8008240:	d04c      	beq.n	80082dc <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008242:	f7ff fda9 	bl	8007d98 <LL_RCC_GetSysClkSource>
 8008246:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008248:	f7ff fea2 	bl	8007f90 <LL_RCC_PLL_GetMainSource>
 800824c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800824e:	69bb      	ldr	r3, [r7, #24]
 8008250:	2b04      	cmp	r3, #4
 8008252:	d005      	beq.n	8008260 <HAL_RCC_OscConfig+0x200>
 8008254:	69bb      	ldr	r3, [r7, #24]
 8008256:	2b0c      	cmp	r3, #12
 8008258:	d10e      	bne.n	8008278 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	2b02      	cmp	r3, #2
 800825e:	d10b      	bne.n	8008278 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d101      	bne.n	800826c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8008268:	2301      	movs	r3, #1
 800826a:	e266      	b.n	800873a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	4618      	mov	r0, r3
 8008272:	f7ff fbf2 	bl	8007a5a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008276:	e031      	b.n	80082dc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d019      	beq.n	80082b4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008280:	f7ff fbbb 	bl	80079fa <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008284:	f7fc fd0e 	bl	8004ca4 <HAL_GetTick>
 8008288:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800828a:	e008      	b.n	800829e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800828c:	f7fc fd0a 	bl	8004ca4 <HAL_GetTick>
 8008290:	4602      	mov	r2, r0
 8008292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008294:	1ad3      	subs	r3, r2, r3
 8008296:	2b02      	cmp	r3, #2
 8008298:	d901      	bls.n	800829e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800829a:	2303      	movs	r3, #3
 800829c:	e24d      	b.n	800873a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800829e:	f7ff fbca 	bl	8007a36 <LL_RCC_HSI_IsReady>
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d0f1      	beq.n	800828c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	691b      	ldr	r3, [r3, #16]
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7ff fbd4 	bl	8007a5a <LL_RCC_HSI_SetCalibTrimming>
 80082b2:	e013      	b.n	80082dc <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082b4:	f7ff fbb0 	bl	8007a18 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082b8:	f7fc fcf4 	bl	8004ca4 <HAL_GetTick>
 80082bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80082be:	e008      	b.n	80082d2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80082c0:	f7fc fcf0 	bl	8004ca4 <HAL_GetTick>
 80082c4:	4602      	mov	r2, r0
 80082c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c8:	1ad3      	subs	r3, r2, r3
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	d901      	bls.n	80082d2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80082ce:	2303      	movs	r3, #3
 80082d0:	e233      	b.n	800873a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80082d2:	f7ff fbb0 	bl	8007a36 <LL_RCC_HSI_IsReady>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d1f1      	bne.n	80082c0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 0308 	and.w	r3, r3, #8
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d106      	bne.n	80082f6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	f000 80a3 	beq.w	800843c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	695b      	ldr	r3, [r3, #20]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d076      	beq.n	80083ec <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f003 0310 	and.w	r3, r3, #16
 8008306:	2b00      	cmp	r3, #0
 8008308:	d046      	beq.n	8008398 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800830a:	f7ff fc67 	bl	8007bdc <LL_RCC_LSI1_IsReady>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d113      	bne.n	800833c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8008314:	f7ff fc40 	bl	8007b98 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008318:	f7fc fcc4 	bl	8004ca4 <HAL_GetTick>
 800831c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800831e:	e008      	b.n	8008332 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008320:	f7fc fcc0 	bl	8004ca4 <HAL_GetTick>
 8008324:	4602      	mov	r2, r0
 8008326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008328:	1ad3      	subs	r3, r2, r3
 800832a:	2b02      	cmp	r3, #2
 800832c:	d901      	bls.n	8008332 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800832e:	2303      	movs	r3, #3
 8008330:	e203      	b.n	800873a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8008332:	f7ff fc53 	bl	8007bdc <LL_RCC_LSI1_IsReady>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d0f1      	beq.n	8008320 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800833c:	f7ff fc60 	bl	8007c00 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008340:	f7fc fcb0 	bl	8004ca4 <HAL_GetTick>
 8008344:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8008346:	e008      	b.n	800835a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008348:	f7fc fcac 	bl	8004ca4 <HAL_GetTick>
 800834c:	4602      	mov	r2, r0
 800834e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008350:	1ad3      	subs	r3, r2, r3
 8008352:	2b03      	cmp	r3, #3
 8008354:	d901      	bls.n	800835a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8008356:	2303      	movs	r3, #3
 8008358:	e1ef      	b.n	800873a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800835a:	f7ff fc73 	bl	8007c44 <LL_RCC_LSI2_IsReady>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d0f1      	beq.n	8008348 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	699b      	ldr	r3, [r3, #24]
 8008368:	4618      	mov	r0, r3
 800836a:	f7ff fc7d 	bl	8007c68 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800836e:	f7ff fc24 	bl	8007bba <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008372:	f7fc fc97 	bl	8004ca4 <HAL_GetTick>
 8008376:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8008378:	e008      	b.n	800838c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800837a:	f7fc fc93 	bl	8004ca4 <HAL_GetTick>
 800837e:	4602      	mov	r2, r0
 8008380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008382:	1ad3      	subs	r3, r2, r3
 8008384:	2b02      	cmp	r3, #2
 8008386:	d901      	bls.n	800838c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8008388:	2303      	movs	r3, #3
 800838a:	e1d6      	b.n	800873a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800838c:	f7ff fc26 	bl	8007bdc <LL_RCC_LSI1_IsReady>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d1f1      	bne.n	800837a <HAL_RCC_OscConfig+0x31a>
 8008396:	e051      	b.n	800843c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8008398:	f7ff fbfe 	bl	8007b98 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800839c:	f7fc fc82 	bl	8004ca4 <HAL_GetTick>
 80083a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80083a2:	e00c      	b.n	80083be <HAL_RCC_OscConfig+0x35e>
 80083a4:	20000034 	.word	0x20000034
 80083a8:	20000038 	.word	0x20000038
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80083ac:	f7fc fc7a 	bl	8004ca4 <HAL_GetTick>
 80083b0:	4602      	mov	r2, r0
 80083b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b4:	1ad3      	subs	r3, r2, r3
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	d901      	bls.n	80083be <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80083ba:	2303      	movs	r3, #3
 80083bc:	e1bd      	b.n	800873a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80083be:	f7ff fc0d 	bl	8007bdc <LL_RCC_LSI1_IsReady>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d0f1      	beq.n	80083ac <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80083c8:	f7ff fc2b 	bl	8007c22 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80083cc:	e008      	b.n	80083e0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80083ce:	f7fc fc69 	bl	8004ca4 <HAL_GetTick>
 80083d2:	4602      	mov	r2, r0
 80083d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d6:	1ad3      	subs	r3, r2, r3
 80083d8:	2b03      	cmp	r3, #3
 80083da:	d901      	bls.n	80083e0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80083dc:	2303      	movs	r3, #3
 80083de:	e1ac      	b.n	800873a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80083e0:	f7ff fc30 	bl	8007c44 <LL_RCC_LSI2_IsReady>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d1f1      	bne.n	80083ce <HAL_RCC_OscConfig+0x36e>
 80083ea:	e027      	b.n	800843c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80083ec:	f7ff fc19 	bl	8007c22 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083f0:	f7fc fc58 	bl	8004ca4 <HAL_GetTick>
 80083f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80083f6:	e008      	b.n	800840a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80083f8:	f7fc fc54 	bl	8004ca4 <HAL_GetTick>
 80083fc:	4602      	mov	r2, r0
 80083fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008400:	1ad3      	subs	r3, r2, r3
 8008402:	2b03      	cmp	r3, #3
 8008404:	d901      	bls.n	800840a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008406:	2303      	movs	r3, #3
 8008408:	e197      	b.n	800873a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800840a:	f7ff fc1b 	bl	8007c44 <LL_RCC_LSI2_IsReady>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d1f1      	bne.n	80083f8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8008414:	f7ff fbd1 	bl	8007bba <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008418:	f7fc fc44 	bl	8004ca4 <HAL_GetTick>
 800841c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800841e:	e008      	b.n	8008432 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008420:	f7fc fc40 	bl	8004ca4 <HAL_GetTick>
 8008424:	4602      	mov	r2, r0
 8008426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	2b02      	cmp	r3, #2
 800842c:	d901      	bls.n	8008432 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800842e:	2303      	movs	r3, #3
 8008430:	e183      	b.n	800873a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8008432:	f7ff fbd3 	bl	8007bdc <LL_RCC_LSI1_IsReady>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d1f1      	bne.n	8008420 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 0304 	and.w	r3, r3, #4
 8008444:	2b00      	cmp	r3, #0
 8008446:	d05b      	beq.n	8008500 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008448:	4ba7      	ldr	r3, [pc, #668]	; (80086e8 <HAL_RCC_OscConfig+0x688>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008450:	2b00      	cmp	r3, #0
 8008452:	d114      	bne.n	800847e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008454:	f7fe fe44 	bl	80070e0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008458:	f7fc fc24 	bl	8004ca4 <HAL_GetTick>
 800845c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800845e:	e008      	b.n	8008472 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008460:	f7fc fc20 	bl	8004ca4 <HAL_GetTick>
 8008464:	4602      	mov	r2, r0
 8008466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008468:	1ad3      	subs	r3, r2, r3
 800846a:	2b02      	cmp	r3, #2
 800846c:	d901      	bls.n	8008472 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800846e:	2303      	movs	r3, #3
 8008470:	e163      	b.n	800873a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008472:	4b9d      	ldr	r3, [pc, #628]	; (80086e8 <HAL_RCC_OscConfig+0x688>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800847a:	2b00      	cmp	r3, #0
 800847c:	d0f0      	beq.n	8008460 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	2b01      	cmp	r3, #1
 8008484:	d102      	bne.n	800848c <HAL_RCC_OscConfig+0x42c>
 8008486:	f7ff fb31 	bl	8007aec <LL_RCC_LSE_Enable>
 800848a:	e00c      	b.n	80084a6 <HAL_RCC_OscConfig+0x446>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	2b05      	cmp	r3, #5
 8008492:	d104      	bne.n	800849e <HAL_RCC_OscConfig+0x43e>
 8008494:	f7ff fb4c 	bl	8007b30 <LL_RCC_LSE_EnableBypass>
 8008498:	f7ff fb28 	bl	8007aec <LL_RCC_LSE_Enable>
 800849c:	e003      	b.n	80084a6 <HAL_RCC_OscConfig+0x446>
 800849e:	f7ff fb36 	bl	8007b0e <LL_RCC_LSE_Disable>
 80084a2:	f7ff fb56 	bl	8007b52 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d014      	beq.n	80084d8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084ae:	f7fc fbf9 	bl	8004ca4 <HAL_GetTick>
 80084b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80084b4:	e00a      	b.n	80084cc <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084b6:	f7fc fbf5 	bl	8004ca4 <HAL_GetTick>
 80084ba:	4602      	mov	r2, r0
 80084bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084be:	1ad3      	subs	r3, r2, r3
 80084c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d901      	bls.n	80084cc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80084c8:	2303      	movs	r3, #3
 80084ca:	e136      	b.n	800873a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80084cc:	f7ff fb52 	bl	8007b74 <LL_RCC_LSE_IsReady>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d0ef      	beq.n	80084b6 <HAL_RCC_OscConfig+0x456>
 80084d6:	e013      	b.n	8008500 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084d8:	f7fc fbe4 	bl	8004ca4 <HAL_GetTick>
 80084dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80084de:	e00a      	b.n	80084f6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084e0:	f7fc fbe0 	bl	8004ca4 <HAL_GetTick>
 80084e4:	4602      	mov	r2, r0
 80084e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e8:	1ad3      	subs	r3, r2, r3
 80084ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d901      	bls.n	80084f6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80084f2:	2303      	movs	r3, #3
 80084f4:	e121      	b.n	800873a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80084f6:	f7ff fb3d 	bl	8007b74 <LL_RCC_LSE_IsReady>
 80084fa:	4603      	mov	r3, r0
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d1ef      	bne.n	80084e0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008508:	2b00      	cmp	r3, #0
 800850a:	d02c      	beq.n	8008566 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008510:	2b00      	cmp	r3, #0
 8008512:	d014      	beq.n	800853e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008514:	f7ff fab6 	bl	8007a84 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008518:	f7fc fbc4 	bl	8004ca4 <HAL_GetTick>
 800851c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800851e:	e008      	b.n	8008532 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008520:	f7fc fbc0 	bl	8004ca4 <HAL_GetTick>
 8008524:	4602      	mov	r2, r0
 8008526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008528:	1ad3      	subs	r3, r2, r3
 800852a:	2b02      	cmp	r3, #2
 800852c:	d901      	bls.n	8008532 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800852e:	2303      	movs	r3, #3
 8008530:	e103      	b.n	800873a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8008532:	f7ff fac9 	bl	8007ac8 <LL_RCC_HSI48_IsReady>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d0f1      	beq.n	8008520 <HAL_RCC_OscConfig+0x4c0>
 800853c:	e013      	b.n	8008566 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800853e:	f7ff fab2 	bl	8007aa6 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008542:	f7fc fbaf 	bl	8004ca4 <HAL_GetTick>
 8008546:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8008548:	e008      	b.n	800855c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800854a:	f7fc fbab 	bl	8004ca4 <HAL_GetTick>
 800854e:	4602      	mov	r2, r0
 8008550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008552:	1ad3      	subs	r3, r2, r3
 8008554:	2b02      	cmp	r3, #2
 8008556:	d901      	bls.n	800855c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8008558:	2303      	movs	r3, #3
 800855a:	e0ee      	b.n	800873a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800855c:	f7ff fab4 	bl	8007ac8 <LL_RCC_HSI48_IsReady>
 8008560:	4603      	mov	r3, r0
 8008562:	2b00      	cmp	r3, #0
 8008564:	d1f1      	bne.n	800854a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800856a:	2b00      	cmp	r3, #0
 800856c:	f000 80e4 	beq.w	8008738 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008570:	f7ff fc12 	bl	8007d98 <LL_RCC_GetSysClkSource>
 8008574:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8008576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008582:	2b02      	cmp	r3, #2
 8008584:	f040 80b4 	bne.w	80086f0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f003 0203 	and.w	r2, r3, #3
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008592:	429a      	cmp	r2, r3
 8008594:	d123      	bne.n	80085de <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d11c      	bne.n	80085de <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	0a1b      	lsrs	r3, r3, #8
 80085a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d114      	bne.n	80085de <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80085be:	429a      	cmp	r2, r3
 80085c0:	d10d      	bne.n	80085de <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d106      	bne.n	80085de <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80085da:	429a      	cmp	r2, r3
 80085dc:	d05d      	beq.n	800869a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	2b0c      	cmp	r3, #12
 80085e2:	d058      	beq.n	8008696 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80085e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d001      	beq.n	80085f6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e0a1      	b.n	800873a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80085f6:	f7ff fc85 	bl	8007f04 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80085fa:	f7fc fb53 	bl	8004ca4 <HAL_GetTick>
 80085fe:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008600:	e008      	b.n	8008614 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008602:	f7fc fb4f 	bl	8004ca4 <HAL_GetTick>
 8008606:	4602      	mov	r2, r0
 8008608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860a:	1ad3      	subs	r3, r2, r3
 800860c:	2b02      	cmp	r3, #2
 800860e:	d901      	bls.n	8008614 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8008610:	2303      	movs	r3, #3
 8008612:	e092      	b.n	800873a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800861e:	2b00      	cmp	r3, #0
 8008620:	d1ef      	bne.n	8008602 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008622:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008626:	68da      	ldr	r2, [r3, #12]
 8008628:	4b30      	ldr	r3, [pc, #192]	; (80086ec <HAL_RCC_OscConfig+0x68c>)
 800862a:	4013      	ands	r3, r2
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008634:	4311      	orrs	r1, r2
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800863a:	0212      	lsls	r2, r2, #8
 800863c:	4311      	orrs	r1, r2
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008642:	4311      	orrs	r1, r2
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008648:	4311      	orrs	r1, r2
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800864e:	430a      	orrs	r2, r1
 8008650:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008654:	4313      	orrs	r3, r2
 8008656:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008658:	f7ff fc45 	bl	8007ee6 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800865c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800866a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800866c:	f7fc fb1a 	bl	8004ca4 <HAL_GetTick>
 8008670:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008672:	e008      	b.n	8008686 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008674:	f7fc fb16 	bl	8004ca4 <HAL_GetTick>
 8008678:	4602      	mov	r2, r0
 800867a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867c:	1ad3      	subs	r3, r2, r3
 800867e:	2b02      	cmp	r3, #2
 8008680:	d901      	bls.n	8008686 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8008682:	2303      	movs	r3, #3
 8008684:	e059      	b.n	800873a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008690:	2b00      	cmp	r3, #0
 8008692:	d0ef      	beq.n	8008674 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008694:	e050      	b.n	8008738 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	e04f      	b.n	800873a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800869a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d147      	bne.n	8008738 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80086a8:	f7ff fc1d 	bl	8007ee6 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80086ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086b0:	68db      	ldr	r3, [r3, #12]
 80086b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80086bc:	f7fc faf2 	bl	8004ca4 <HAL_GetTick>
 80086c0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80086c2:	e008      	b.n	80086d6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086c4:	f7fc faee 	bl	8004ca4 <HAL_GetTick>
 80086c8:	4602      	mov	r2, r0
 80086ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086cc:	1ad3      	subs	r3, r2, r3
 80086ce:	2b02      	cmp	r3, #2
 80086d0:	d901      	bls.n	80086d6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80086d2:	2303      	movs	r3, #3
 80086d4:	e031      	b.n	800873a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80086d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d0ef      	beq.n	80086c4 <HAL_RCC_OscConfig+0x664>
 80086e4:	e028      	b.n	8008738 <HAL_RCC_OscConfig+0x6d8>
 80086e6:	bf00      	nop
 80086e8:	58000400 	.word	0x58000400
 80086ec:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	2b0c      	cmp	r3, #12
 80086f4:	d01e      	beq.n	8008734 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086f6:	f7ff fc05 	bl	8007f04 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086fa:	f7fc fad3 	bl	8004ca4 <HAL_GetTick>
 80086fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008700:	e008      	b.n	8008714 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008702:	f7fc facf 	bl	8004ca4 <HAL_GetTick>
 8008706:	4602      	mov	r2, r0
 8008708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870a:	1ad3      	subs	r3, r2, r3
 800870c:	2b02      	cmp	r3, #2
 800870e:	d901      	bls.n	8008714 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8008710:	2303      	movs	r3, #3
 8008712:	e012      	b.n	800873a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800871e:	2b00      	cmp	r3, #0
 8008720:	d1ef      	bne.n	8008702 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8008722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008726:	68da      	ldr	r2, [r3, #12]
 8008728:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800872c:	4b05      	ldr	r3, [pc, #20]	; (8008744 <HAL_RCC_OscConfig+0x6e4>)
 800872e:	4013      	ands	r3, r2
 8008730:	60cb      	str	r3, [r1, #12]
 8008732:	e001      	b.n	8008738 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	e000      	b.n	800873a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3734      	adds	r7, #52	; 0x34
 800873e:	46bd      	mov	sp, r7
 8008740:	bd90      	pop	{r4, r7, pc}
 8008742:	bf00      	nop
 8008744:	eefefffc 	.word	0xeefefffc

08008748 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b084      	sub	sp, #16
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d101      	bne.n	800875c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	e12d      	b.n	80089b8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800875c:	4b98      	ldr	r3, [pc, #608]	; (80089c0 <HAL_RCC_ClockConfig+0x278>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f003 0307 	and.w	r3, r3, #7
 8008764:	683a      	ldr	r2, [r7, #0]
 8008766:	429a      	cmp	r2, r3
 8008768:	d91b      	bls.n	80087a2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800876a:	4b95      	ldr	r3, [pc, #596]	; (80089c0 <HAL_RCC_ClockConfig+0x278>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f023 0207 	bic.w	r2, r3, #7
 8008772:	4993      	ldr	r1, [pc, #588]	; (80089c0 <HAL_RCC_ClockConfig+0x278>)
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	4313      	orrs	r3, r2
 8008778:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800877a:	f7fc fa93 	bl	8004ca4 <HAL_GetTick>
 800877e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008780:	e008      	b.n	8008794 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008782:	f7fc fa8f 	bl	8004ca4 <HAL_GetTick>
 8008786:	4602      	mov	r2, r0
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	1ad3      	subs	r3, r2, r3
 800878c:	2b02      	cmp	r3, #2
 800878e:	d901      	bls.n	8008794 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8008790:	2303      	movs	r3, #3
 8008792:	e111      	b.n	80089b8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008794:	4b8a      	ldr	r3, [pc, #552]	; (80089c0 <HAL_RCC_ClockConfig+0x278>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f003 0307 	and.w	r3, r3, #7
 800879c:	683a      	ldr	r2, [r7, #0]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d1ef      	bne.n	8008782 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f003 0302 	and.w	r3, r3, #2
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d016      	beq.n	80087dc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7ff fafc 	bl	8007db0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80087b8:	f7fc fa74 	bl	8004ca4 <HAL_GetTick>
 80087bc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80087be:	e008      	b.n	80087d2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80087c0:	f7fc fa70 	bl	8004ca4 <HAL_GetTick>
 80087c4:	4602      	mov	r2, r0
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	1ad3      	subs	r3, r2, r3
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d901      	bls.n	80087d2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80087ce:	2303      	movs	r3, #3
 80087d0:	e0f2      	b.n	80089b8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80087d2:	f7ff fbe9 	bl	8007fa8 <LL_RCC_IsActiveFlag_HPRE>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d0f1      	beq.n	80087c0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 0320 	and.w	r3, r3, #32
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d016      	beq.n	8008816 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	695b      	ldr	r3, [r3, #20]
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7ff faf3 	bl	8007dd8 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80087f2:	f7fc fa57 	bl	8004ca4 <HAL_GetTick>
 80087f6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80087f8:	e008      	b.n	800880c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80087fa:	f7fc fa53 	bl	8004ca4 <HAL_GetTick>
 80087fe:	4602      	mov	r2, r0
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	1ad3      	subs	r3, r2, r3
 8008804:	2b02      	cmp	r3, #2
 8008806:	d901      	bls.n	800880c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8008808:	2303      	movs	r3, #3
 800880a:	e0d5      	b.n	80089b8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800880c:	f7ff fbde 	bl	8007fcc <LL_RCC_IsActiveFlag_C2HPRE>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d0f1      	beq.n	80087fa <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800881e:	2b00      	cmp	r3, #0
 8008820:	d016      	beq.n	8008850 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	699b      	ldr	r3, [r3, #24]
 8008826:	4618      	mov	r0, r3
 8008828:	f7ff faec 	bl	8007e04 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800882c:	f7fc fa3a 	bl	8004ca4 <HAL_GetTick>
 8008830:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008832:	e008      	b.n	8008846 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008834:	f7fc fa36 	bl	8004ca4 <HAL_GetTick>
 8008838:	4602      	mov	r2, r0
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	1ad3      	subs	r3, r2, r3
 800883e:	2b02      	cmp	r3, #2
 8008840:	d901      	bls.n	8008846 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8008842:	2303      	movs	r3, #3
 8008844:	e0b8      	b.n	80089b8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008846:	f7ff fbd4 	bl	8007ff2 <LL_RCC_IsActiveFlag_SHDHPRE>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d0f1      	beq.n	8008834 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f003 0304 	and.w	r3, r3, #4
 8008858:	2b00      	cmp	r3, #0
 800885a:	d016      	beq.n	800888a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	4618      	mov	r0, r3
 8008862:	f7ff fae6 	bl	8007e32 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008866:	f7fc fa1d 	bl	8004ca4 <HAL_GetTick>
 800886a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800886c:	e008      	b.n	8008880 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800886e:	f7fc fa19 	bl	8004ca4 <HAL_GetTick>
 8008872:	4602      	mov	r2, r0
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	1ad3      	subs	r3, r2, r3
 8008878:	2b02      	cmp	r3, #2
 800887a:	d901      	bls.n	8008880 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800887c:	2303      	movs	r3, #3
 800887e:	e09b      	b.n	80089b8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008880:	f7ff fbca 	bl	8008018 <LL_RCC_IsActiveFlag_PPRE1>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d0f1      	beq.n	800886e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f003 0308 	and.w	r3, r3, #8
 8008892:	2b00      	cmp	r3, #0
 8008894:	d017      	beq.n	80088c6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	00db      	lsls	r3, r3, #3
 800889c:	4618      	mov	r0, r3
 800889e:	f7ff fadc 	bl	8007e5a <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80088a2:	f7fc f9ff 	bl	8004ca4 <HAL_GetTick>
 80088a6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80088a8:	e008      	b.n	80088bc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80088aa:	f7fc f9fb 	bl	8004ca4 <HAL_GetTick>
 80088ae:	4602      	mov	r2, r0
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	1ad3      	subs	r3, r2, r3
 80088b4:	2b02      	cmp	r3, #2
 80088b6:	d901      	bls.n	80088bc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80088b8:	2303      	movs	r3, #3
 80088ba:	e07d      	b.n	80089b8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80088bc:	f7ff fbbe 	bl	800803c <LL_RCC_IsActiveFlag_PPRE2>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d0f1      	beq.n	80088aa <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f003 0301 	and.w	r3, r3, #1
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d043      	beq.n	800895a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	2b02      	cmp	r3, #2
 80088d8:	d106      	bne.n	80088e8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80088da:	f7ff f87c 	bl	80079d6 <LL_RCC_HSE_IsReady>
 80088de:	4603      	mov	r3, r0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d11e      	bne.n	8008922 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80088e4:	2301      	movs	r3, #1
 80088e6:	e067      	b.n	80089b8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	2b03      	cmp	r3, #3
 80088ee:	d106      	bne.n	80088fe <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80088f0:	f7ff fb17 	bl	8007f22 <LL_RCC_PLL_IsReady>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d113      	bne.n	8008922 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e05c      	b.n	80089b8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d106      	bne.n	8008914 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8008906:	f7ff f9e4 	bl	8007cd2 <LL_RCC_MSI_IsReady>
 800890a:	4603      	mov	r3, r0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d108      	bne.n	8008922 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	e051      	b.n	80089b8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8008914:	f7ff f88f 	bl	8007a36 <LL_RCC_HSI_IsReady>
 8008918:	4603      	mov	r3, r0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d101      	bne.n	8008922 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800891e:	2301      	movs	r3, #1
 8008920:	e04a      	b.n	80089b8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	4618      	mov	r0, r3
 8008928:	f7ff fa22 	bl	8007d70 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800892c:	f7fc f9ba 	bl	8004ca4 <HAL_GetTick>
 8008930:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008932:	e00a      	b.n	800894a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008934:	f7fc f9b6 	bl	8004ca4 <HAL_GetTick>
 8008938:	4602      	mov	r2, r0
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	1ad3      	subs	r3, r2, r3
 800893e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008942:	4293      	cmp	r3, r2
 8008944:	d901      	bls.n	800894a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8008946:	2303      	movs	r3, #3
 8008948:	e036      	b.n	80089b8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800894a:	f7ff fa25 	bl	8007d98 <LL_RCC_GetSysClkSource>
 800894e:	4602      	mov	r2, r0
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	009b      	lsls	r3, r3, #2
 8008956:	429a      	cmp	r2, r3
 8008958:	d1ec      	bne.n	8008934 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800895a:	4b19      	ldr	r3, [pc, #100]	; (80089c0 <HAL_RCC_ClockConfig+0x278>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f003 0307 	and.w	r3, r3, #7
 8008962:	683a      	ldr	r2, [r7, #0]
 8008964:	429a      	cmp	r2, r3
 8008966:	d21b      	bcs.n	80089a0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008968:	4b15      	ldr	r3, [pc, #84]	; (80089c0 <HAL_RCC_ClockConfig+0x278>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f023 0207 	bic.w	r2, r3, #7
 8008970:	4913      	ldr	r1, [pc, #76]	; (80089c0 <HAL_RCC_ClockConfig+0x278>)
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	4313      	orrs	r3, r2
 8008976:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008978:	f7fc f994 	bl	8004ca4 <HAL_GetTick>
 800897c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800897e:	e008      	b.n	8008992 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008980:	f7fc f990 	bl	8004ca4 <HAL_GetTick>
 8008984:	4602      	mov	r2, r0
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	1ad3      	subs	r3, r2, r3
 800898a:	2b02      	cmp	r3, #2
 800898c:	d901      	bls.n	8008992 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800898e:	2303      	movs	r3, #3
 8008990:	e012      	b.n	80089b8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008992:	4b0b      	ldr	r3, [pc, #44]	; (80089c0 <HAL_RCC_ClockConfig+0x278>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f003 0307 	and.w	r3, r3, #7
 800899a:	683a      	ldr	r2, [r7, #0]
 800899c:	429a      	cmp	r2, r3
 800899e:	d1ef      	bne.n	8008980 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80089a0:	f000 f87e 	bl	8008aa0 <HAL_RCC_GetHCLKFreq>
 80089a4:	4603      	mov	r3, r0
 80089a6:	4a07      	ldr	r2, [pc, #28]	; (80089c4 <HAL_RCC_ClockConfig+0x27c>)
 80089a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80089aa:	f7fc f987 	bl	8004cbc <HAL_GetTickPrio>
 80089ae:	4603      	mov	r3, r0
 80089b0:	4618      	mov	r0, r3
 80089b2:	f7fc f929 	bl	8004c08 <HAL_InitTick>
 80089b6:	4603      	mov	r3, r0
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3710      	adds	r7, #16
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	58004000 	.word	0x58004000
 80089c4:	20000034 	.word	0x20000034

080089c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80089c8:	b590      	push	{r4, r7, lr}
 80089ca:	b085      	sub	sp, #20
 80089cc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80089ce:	f7ff f9e3 	bl	8007d98 <LL_RCC_GetSysClkSource>
 80089d2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d10a      	bne.n	80089f0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80089da:	f7ff f99f 	bl	8007d1c <LL_RCC_MSI_GetRange>
 80089de:	4603      	mov	r3, r0
 80089e0:	091b      	lsrs	r3, r3, #4
 80089e2:	f003 030f 	and.w	r3, r3, #15
 80089e6:	4a2b      	ldr	r2, [pc, #172]	; (8008a94 <HAL_RCC_GetSysClockFreq+0xcc>)
 80089e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089ec:	60fb      	str	r3, [r7, #12]
 80089ee:	e04b      	b.n	8008a88 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2b04      	cmp	r3, #4
 80089f4:	d102      	bne.n	80089fc <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80089f6:	4b28      	ldr	r3, [pc, #160]	; (8008a98 <HAL_RCC_GetSysClockFreq+0xd0>)
 80089f8:	60fb      	str	r3, [r7, #12]
 80089fa:	e045      	b.n	8008a88 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2b08      	cmp	r3, #8
 8008a00:	d10a      	bne.n	8008a18 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008a02:	f7fe ffb8 	bl	8007976 <LL_RCC_HSE_IsEnabledDiv2>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d102      	bne.n	8008a12 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8008a0c:	4b22      	ldr	r3, [pc, #136]	; (8008a98 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008a0e:	60fb      	str	r3, [r7, #12]
 8008a10:	e03a      	b.n	8008a88 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8008a12:	4b22      	ldr	r3, [pc, #136]	; (8008a9c <HAL_RCC_GetSysClockFreq+0xd4>)
 8008a14:	60fb      	str	r3, [r7, #12]
 8008a16:	e037      	b.n	8008a88 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8008a18:	f7ff faba 	bl	8007f90 <LL_RCC_PLL_GetMainSource>
 8008a1c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	2b02      	cmp	r3, #2
 8008a22:	d003      	beq.n	8008a2c <HAL_RCC_GetSysClockFreq+0x64>
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	2b03      	cmp	r3, #3
 8008a28:	d003      	beq.n	8008a32 <HAL_RCC_GetSysClockFreq+0x6a>
 8008a2a:	e00d      	b.n	8008a48 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8008a2c:	4b1a      	ldr	r3, [pc, #104]	; (8008a98 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008a2e:	60bb      	str	r3, [r7, #8]
        break;
 8008a30:	e015      	b.n	8008a5e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008a32:	f7fe ffa0 	bl	8007976 <LL_RCC_HSE_IsEnabledDiv2>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d102      	bne.n	8008a42 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8008a3c:	4b16      	ldr	r3, [pc, #88]	; (8008a98 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008a3e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8008a40:	e00d      	b.n	8008a5e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8008a42:	4b16      	ldr	r3, [pc, #88]	; (8008a9c <HAL_RCC_GetSysClockFreq+0xd4>)
 8008a44:	60bb      	str	r3, [r7, #8]
        break;
 8008a46:	e00a      	b.n	8008a5e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008a48:	f7ff f968 	bl	8007d1c <LL_RCC_MSI_GetRange>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	091b      	lsrs	r3, r3, #4
 8008a50:	f003 030f 	and.w	r3, r3, #15
 8008a54:	4a0f      	ldr	r2, [pc, #60]	; (8008a94 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a5a:	60bb      	str	r3, [r7, #8]
        break;
 8008a5c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8008a5e:	f7ff fa72 	bl	8007f46 <LL_RCC_PLL_GetN>
 8008a62:	4602      	mov	r2, r0
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	fb03 f402 	mul.w	r4, r3, r2
 8008a6a:	f7ff fa85 	bl	8007f78 <LL_RCC_PLL_GetDivider>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	091b      	lsrs	r3, r3, #4
 8008a72:	3301      	adds	r3, #1
 8008a74:	fbb4 f4f3 	udiv	r4, r4, r3
 8008a78:	f7ff fa72 	bl	8007f60 <LL_RCC_PLL_GetR>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	0f5b      	lsrs	r3, r3, #29
 8008a80:	3301      	adds	r3, #1
 8008a82:	fbb4 f3f3 	udiv	r3, r4, r3
 8008a86:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8008a88:	68fb      	ldr	r3, [r7, #12]
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3714      	adds	r7, #20
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd90      	pop	{r4, r7, pc}
 8008a92:	bf00      	nop
 8008a94:	080182ec 	.word	0x080182ec
 8008a98:	00f42400 	.word	0x00f42400
 8008a9c:	01e84800 	.word	0x01e84800

08008aa0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008aa0:	b598      	push	{r3, r4, r7, lr}
 8008aa2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8008aa4:	f7ff ff90 	bl	80089c8 <HAL_RCC_GetSysClockFreq>
 8008aa8:	4604      	mov	r4, r0
 8008aaa:	f7ff f9ea 	bl	8007e82 <LL_RCC_GetAHBPrescaler>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	091b      	lsrs	r3, r3, #4
 8008ab2:	f003 030f 	and.w	r3, r3, #15
 8008ab6:	4a03      	ldr	r2, [pc, #12]	; (8008ac4 <HAL_RCC_GetHCLKFreq+0x24>)
 8008ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008abc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	bd98      	pop	{r3, r4, r7, pc}
 8008ac4:	0801828c 	.word	0x0801828c

08008ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ac8:	b598      	push	{r3, r4, r7, lr}
 8008aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008acc:	f7ff ffe8 	bl	8008aa0 <HAL_RCC_GetHCLKFreq>
 8008ad0:	4604      	mov	r4, r0
 8008ad2:	f7ff f9f0 	bl	8007eb6 <LL_RCC_GetAPB1Prescaler>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	0a1b      	lsrs	r3, r3, #8
 8008ada:	f003 0307 	and.w	r3, r3, #7
 8008ade:	4a04      	ldr	r2, [pc, #16]	; (8008af0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ae4:	f003 031f 	and.w	r3, r3, #31
 8008ae8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	bd98      	pop	{r3, r4, r7, pc}
 8008af0:	080182cc 	.word	0x080182cc

08008af4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008af4:	b598      	push	{r3, r4, r7, lr}
 8008af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8008af8:	f7ff ffd2 	bl	8008aa0 <HAL_RCC_GetHCLKFreq>
 8008afc:	4604      	mov	r4, r0
 8008afe:	f7ff f9e6 	bl	8007ece <LL_RCC_GetAPB2Prescaler>
 8008b02:	4603      	mov	r3, r0
 8008b04:	0adb      	lsrs	r3, r3, #11
 8008b06:	f003 0307 	and.w	r3, r3, #7
 8008b0a:	4a04      	ldr	r2, [pc, #16]	; (8008b1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8008b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b10:	f003 031f 	and.w	r3, r3, #31
 8008b14:	fa24 f303 	lsr.w	r3, r4, r3
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	bd98      	pop	{r3, r4, r7, pc}
 8008b1c:	080182cc 	.word	0x080182cc

08008b20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8008b20:	b590      	push	{r4, r7, lr}
 8008b22:	b085      	sub	sp, #20
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2bb0      	cmp	r3, #176	; 0xb0
 8008b2c:	d903      	bls.n	8008b36 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8008b2e:	4b15      	ldr	r3, [pc, #84]	; (8008b84 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b32:	60fb      	str	r3, [r7, #12]
 8008b34:	e007      	b.n	8008b46 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	091b      	lsrs	r3, r3, #4
 8008b3a:	f003 030f 	and.w	r3, r3, #15
 8008b3e:	4a11      	ldr	r2, [pc, #68]	; (8008b84 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b44:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8008b46:	f7ff f9a8 	bl	8007e9a <LL_RCC_GetAHB4Prescaler>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	091b      	lsrs	r3, r3, #4
 8008b4e:	f003 030f 	and.w	r3, r3, #15
 8008b52:	4a0d      	ldr	r2, [pc, #52]	; (8008b88 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8008b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b58:	68fa      	ldr	r2, [r7, #12]
 8008b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b5e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	4a0a      	ldr	r2, [pc, #40]	; (8008b8c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8008b64:	fba2 2303 	umull	r2, r3, r2, r3
 8008b68:	0c9c      	lsrs	r4, r3, #18
 8008b6a:	f7fe fac9 	bl	8007100 <HAL_PWREx_GetVoltageRange>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	4619      	mov	r1, r3
 8008b72:	4620      	mov	r0, r4
 8008b74:	f000 f80c 	bl	8008b90 <RCC_SetFlashLatency>
 8008b78:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3714      	adds	r7, #20
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd90      	pop	{r4, r7, pc}
 8008b82:	bf00      	nop
 8008b84:	080182ec 	.word	0x080182ec
 8008b88:	0801828c 	.word	0x0801828c
 8008b8c:	431bde83 	.word	0x431bde83

08008b90 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8008b90:	b590      	push	{r4, r7, lr}
 8008b92:	b093      	sub	sp, #76	; 0x4c
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8008b9a:	4b37      	ldr	r3, [pc, #220]	; (8008c78 <RCC_SetFlashLatency+0xe8>)
 8008b9c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8008ba0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008ba2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8008ba6:	4a35      	ldr	r2, [pc, #212]	; (8008c7c <RCC_SetFlashLatency+0xec>)
 8008ba8:	f107 031c 	add.w	r3, r7, #28
 8008bac:	ca07      	ldmia	r2, {r0, r1, r2}
 8008bae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8008bb2:	4b33      	ldr	r3, [pc, #204]	; (8008c80 <RCC_SetFlashLatency+0xf0>)
 8008bb4:	f107 040c 	add.w	r4, r7, #12
 8008bb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008bba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bc8:	d11a      	bne.n	8008c00 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008bca:	2300      	movs	r3, #0
 8008bcc:	643b      	str	r3, [r7, #64]	; 0x40
 8008bce:	e013      	b.n	8008bf8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8008bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	3348      	adds	r3, #72	; 0x48
 8008bd6:	443b      	add	r3, r7
 8008bd8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d807      	bhi.n	8008bf2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	3348      	adds	r3, #72	; 0x48
 8008be8:	443b      	add	r3, r7
 8008bea:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8008bee:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8008bf0:	e020      	b.n	8008c34 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	643b      	str	r3, [r7, #64]	; 0x40
 8008bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bfa:	2b03      	cmp	r3, #3
 8008bfc:	d9e8      	bls.n	8008bd0 <RCC_SetFlashLatency+0x40>
 8008bfe:	e019      	b.n	8008c34 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008c00:	2300      	movs	r3, #0
 8008c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c04:	e013      	b.n	8008c2e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8008c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	3348      	adds	r3, #72	; 0x48
 8008c0c:	443b      	add	r3, r7
 8008c0e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d807      	bhi.n	8008c28 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	3348      	adds	r3, #72	; 0x48
 8008c1e:	443b      	add	r3, r7
 8008c20:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8008c24:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8008c26:	e005      	b.n	8008c34 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c30:	2b02      	cmp	r3, #2
 8008c32:	d9e8      	bls.n	8008c06 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8008c34:	4b13      	ldr	r3, [pc, #76]	; (8008c84 <RCC_SetFlashLatency+0xf4>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f023 0207 	bic.w	r2, r3, #7
 8008c3c:	4911      	ldr	r1, [pc, #68]	; (8008c84 <RCC_SetFlashLatency+0xf4>)
 8008c3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c40:	4313      	orrs	r3, r2
 8008c42:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008c44:	f7fc f82e 	bl	8004ca4 <HAL_GetTick>
 8008c48:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008c4a:	e008      	b.n	8008c5e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008c4c:	f7fc f82a 	bl	8004ca4 <HAL_GetTick>
 8008c50:	4602      	mov	r2, r0
 8008c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c54:	1ad3      	subs	r3, r2, r3
 8008c56:	2b02      	cmp	r3, #2
 8008c58:	d901      	bls.n	8008c5e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8008c5a:	2303      	movs	r3, #3
 8008c5c:	e007      	b.n	8008c6e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008c5e:	4b09      	ldr	r3, [pc, #36]	; (8008c84 <RCC_SetFlashLatency+0xf4>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f003 0307 	and.w	r3, r3, #7
 8008c66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d1ef      	bne.n	8008c4c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	374c      	adds	r7, #76	; 0x4c
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd90      	pop	{r4, r7, pc}
 8008c76:	bf00      	nop
 8008c78:	080165e8 	.word	0x080165e8
 8008c7c:	080165f8 	.word	0x080165f8
 8008c80:	08016604 	.word	0x08016604
 8008c84:	58004000 	.word	0x58004000

08008c88 <LL_RCC_LSE_IsEnabled>:
{
 8008c88:	b480      	push	{r7}
 8008c8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8008c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c94:	f003 0301 	and.w	r3, r3, #1
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d101      	bne.n	8008ca0 <LL_RCC_LSE_IsEnabled+0x18>
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	e000      	b.n	8008ca2 <LL_RCC_LSE_IsEnabled+0x1a>
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <LL_RCC_LSE_IsReady>:
{
 8008cac:	b480      	push	{r7}
 8008cae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cb8:	f003 0302 	and.w	r3, r3, #2
 8008cbc:	2b02      	cmp	r3, #2
 8008cbe:	d101      	bne.n	8008cc4 <LL_RCC_LSE_IsReady+0x18>
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	e000      	b.n	8008cc6 <LL_RCC_LSE_IsReady+0x1a>
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr

08008cd0 <LL_RCC_SetRFWKPClockSource>:
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8008cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ce0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008ce4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8008cf0:	bf00      	nop
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <LL_RCC_SetSMPSClockSource>:
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8008d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0a:	f023 0203 	bic.w	r2, r3, #3
 8008d0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4313      	orrs	r3, r2
 8008d16:	624b      	str	r3, [r1, #36]	; 0x24
}
 8008d18:	bf00      	nop
 8008d1a:	370c      	adds	r7, #12
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr

08008d24 <LL_RCC_SetSMPSPrescaler>:
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8008d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d32:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008d36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8008d40:	bf00      	nop
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr

08008d4c <LL_RCC_SetUSARTClockSource>:
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b083      	sub	sp, #12
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8008d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d5c:	f023 0203 	bic.w	r2, r3, #3
 8008d60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	4313      	orrs	r3, r2
 8008d68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008d6c:	bf00      	nop
 8008d6e:	370c      	adds	r7, #12
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <LL_RCC_SetLPUARTClockSource>:
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8008d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d88:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008d8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4313      	orrs	r3, r2
 8008d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008d98:	bf00      	nop
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <LL_RCC_SetI2CClockSource>:
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8008dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008db0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	091b      	lsrs	r3, r3, #4
 8008db8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008dbc:	43db      	mvns	r3, r3
 8008dbe:	401a      	ands	r2, r3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	011b      	lsls	r3, r3, #4
 8008dc4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008dc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008dd2:	bf00      	nop
 8008dd4:	370c      	adds	r7, #12
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr

08008dde <LL_RCC_SetLPTIMClockSource>:
{
 8008dde:	b480      	push	{r7}
 8008de0:	b083      	sub	sp, #12
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8008de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	0c1b      	lsrs	r3, r3, #16
 8008df2:	041b      	lsls	r3, r3, #16
 8008df4:	43db      	mvns	r3, r3
 8008df6:	401a      	ands	r2, r3
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	041b      	lsls	r3, r3, #16
 8008dfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008e00:	4313      	orrs	r3, r2
 8008e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008e06:	bf00      	nop
 8008e08:	370c      	adds	r7, #12
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr

08008e12 <LL_RCC_SetSAIClockSource>:
{
 8008e12:	b480      	push	{r7}
 8008e14:	b083      	sub	sp, #12
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8008e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008e26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008e32:	bf00      	nop
 8008e34:	370c      	adds	r7, #12
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr

08008e3e <LL_RCC_SetRNGClockSource>:
{
 8008e3e:	b480      	push	{r7}
 8008e40:	b083      	sub	sp, #12
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8008e46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e4e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8008e52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008e5e:	bf00      	nop
 8008e60:	370c      	adds	r7, #12
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr

08008e6a <LL_RCC_SetCLK48ClockSource>:
{
 8008e6a:	b480      	push	{r7}
 8008e6c:	b083      	sub	sp, #12
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8008e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008e7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4313      	orrs	r3, r2
 8008e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008e8a:	bf00      	nop
 8008e8c:	370c      	adds	r7, #12
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr

08008e96 <LL_RCC_SetUSBClockSource>:
{
 8008e96:	b580      	push	{r7, lr}
 8008e98:	b082      	sub	sp, #8
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f7ff ffe3 	bl	8008e6a <LL_RCC_SetCLK48ClockSource>
}
 8008ea4:	bf00      	nop
 8008ea6:	3708      	adds	r7, #8
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <LL_RCC_SetADCClockSource>:
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8008eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ebc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008ec0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008ecc:	bf00      	nop
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <LL_RCC_SetRTCClockSource>:
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8008ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ee8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008eec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8008ef8:	bf00      	nop
 8008efa:	370c      	adds	r7, #12
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <LL_RCC_GetRTCClockSource>:
{
 8008f04:	b480      	push	{r7}
 8008f06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8008f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f10:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr

08008f1e <LL_RCC_ForceBackupDomainReset>:
{
 8008f1e:	b480      	push	{r7}
 8008f20:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008f36:	bf00      	nop
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <LL_RCC_ReleaseBackupDomainReset>:
{
 8008f40:	b480      	push	{r7}
 8008f42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008f58:	bf00      	nop
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr

08008f62 <LL_RCC_PLLSAI1_Enable>:
{
 8008f62:	b480      	push	{r7}
 8008f64:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8008f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008f74:	6013      	str	r3, [r2, #0]
}
 8008f76:	bf00      	nop
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <LL_RCC_PLLSAI1_Disable>:
{
 8008f80:	b480      	push	{r7}
 8008f82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8008f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008f92:	6013      	str	r3, [r2, #0]
}
 8008f94:	bf00      	nop
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr

08008f9e <LL_RCC_PLLSAI1_IsReady>:
{
 8008f9e:	b480      	push	{r7}
 8008fa0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8008fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fb0:	d101      	bne.n	8008fb6 <LL_RCC_PLLSAI1_IsReady+0x18>
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e000      	b.n	8008fb8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8008fb6:	2300      	movs	r3, #0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr

08008fc2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b088      	sub	sp, #32
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8008fca:	2300      	movs	r3, #0
 8008fcc:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8008fce:	2300      	movs	r3, #0
 8008fd0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d034      	beq.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fe2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008fe6:	d021      	beq.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8008fe8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008fec:	d81b      	bhi.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008fee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008ff2:	d01d      	beq.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8008ff4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008ff8:	d815      	bhi.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d00b      	beq.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8008ffe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009002:	d110      	bne.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8009004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800900e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009012:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8009014:	e00d      	b.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	3304      	adds	r3, #4
 800901a:	4618      	mov	r0, r3
 800901c:	f000 f947 	bl	80092ae <RCCEx_PLLSAI1_ConfigNP>
 8009020:	4603      	mov	r3, r0
 8009022:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009024:	e005      	b.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8009026:	2301      	movs	r3, #1
 8009028:	77fb      	strb	r3, [r7, #31]
        break;
 800902a:	e002      	b.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800902c:	bf00      	nop
 800902e:	e000      	b.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8009030:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009032:	7ffb      	ldrb	r3, [r7, #31]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d105      	bne.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800903c:	4618      	mov	r0, r3
 800903e:	f7ff fee8 	bl	8008e12 <LL_RCC_SetSAIClockSource>
 8009042:	e001      	b.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009044:	7ffb      	ldrb	r3, [r7, #31]
 8009046:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009050:	2b00      	cmp	r3, #0
 8009052:	d046      	beq.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8009054:	f7ff ff56 	bl	8008f04 <LL_RCC_GetRTCClockSource>
 8009058:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800905e:	69ba      	ldr	r2, [r7, #24]
 8009060:	429a      	cmp	r2, r3
 8009062:	d03c      	beq.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8009064:	f7fe f83c 	bl	80070e0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8009068:	69bb      	ldr	r3, [r7, #24]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d105      	bne.n	800907a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009072:	4618      	mov	r0, r3
 8009074:	f7ff ff30 	bl	8008ed8 <LL_RCC_SetRTCClockSource>
 8009078:	e02e      	b.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800907a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800907e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009082:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8009084:	f7ff ff4b 	bl	8008f1e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8009088:	f7ff ff5a 	bl	8008f40 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009096:	4313      	orrs	r3, r2
 8009098:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800909a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80090a4:	f7ff fdf0 	bl	8008c88 <LL_RCC_LSE_IsEnabled>
 80090a8:	4603      	mov	r3, r0
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d114      	bne.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80090ae:	f7fb fdf9 	bl	8004ca4 <HAL_GetTick>
 80090b2:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80090b4:	e00b      	b.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090b6:	f7fb fdf5 	bl	8004ca4 <HAL_GetTick>
 80090ba:	4602      	mov	r2, r0
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	1ad3      	subs	r3, r2, r3
 80090c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d902      	bls.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80090c8:	2303      	movs	r3, #3
 80090ca:	77fb      	strb	r3, [r7, #31]
              break;
 80090cc:	e004      	b.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80090ce:	f7ff fded 	bl	8008cac <LL_RCC_LSE_IsReady>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d1ee      	bne.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80090d8:	7ffb      	ldrb	r3, [r7, #31]
 80090da:	77bb      	strb	r3, [r7, #30]
 80090dc:	e001      	b.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090de:	7ffb      	ldrb	r3, [r7, #31]
 80090e0:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f003 0301 	and.w	r3, r3, #1
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d004      	beq.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	699b      	ldr	r3, [r3, #24]
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7ff fe2a 	bl	8008d4c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f003 0302 	and.w	r3, r3, #2
 8009100:	2b00      	cmp	r3, #0
 8009102:	d004      	beq.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	69db      	ldr	r3, [r3, #28]
 8009108:	4618      	mov	r0, r3
 800910a:	f7ff fe35 	bl	8008d78 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f003 0310 	and.w	r3, r3, #16
 8009116:	2b00      	cmp	r3, #0
 8009118:	d004      	beq.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800911e:	4618      	mov	r0, r3
 8009120:	f7ff fe5d 	bl	8008dde <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f003 0320 	and.w	r3, r3, #32
 800912c:	2b00      	cmp	r3, #0
 800912e:	d004      	beq.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009134:	4618      	mov	r0, r3
 8009136:	f7ff fe52 	bl	8008dde <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f003 0304 	and.w	r3, r3, #4
 8009142:	2b00      	cmp	r3, #0
 8009144:	d004      	beq.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6a1b      	ldr	r3, [r3, #32]
 800914a:	4618      	mov	r0, r3
 800914c:	f7ff fe2a 	bl	8008da4 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f003 0308 	and.w	r3, r3, #8
 8009158:	2b00      	cmp	r3, #0
 800915a:	d004      	beq.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009160:	4618      	mov	r0, r3
 8009162:	f7ff fe1f 	bl	8008da4 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800916e:	2b00      	cmp	r3, #0
 8009170:	d022      	beq.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009176:	4618      	mov	r0, r3
 8009178:	f7ff fe8d 	bl	8008e96 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009180:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009184:	d107      	bne.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8009186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009190:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009194:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800919a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800919e:	d10b      	bne.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	3304      	adds	r3, #4
 80091a4:	4618      	mov	r0, r3
 80091a6:	f000 f8dd 	bl	8009364 <RCCEx_PLLSAI1_ConfigNQ>
 80091aa:	4603      	mov	r3, r0
 80091ac:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80091ae:	7ffb      	ldrb	r3, [r7, #31]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d001      	beq.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80091b4:	7ffb      	ldrb	r3, [r7, #31]
 80091b6:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d02b      	beq.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091cc:	d008      	beq.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091d6:	d003      	beq.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d105      	bne.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091e4:	4618      	mov	r0, r3
 80091e6:	f7ff fe2a 	bl	8008e3e <LL_RCC_SetRNGClockSource>
 80091ea:	e00a      	b.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091f4:	60fb      	str	r3, [r7, #12]
 80091f6:	2000      	movs	r0, #0
 80091f8:	f7ff fe21 	bl	8008e3e <LL_RCC_SetRNGClockSource>
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	f7ff fe34 	bl	8008e6a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009206:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800920a:	d107      	bne.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800920c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009216:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800921a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009224:	2b00      	cmp	r3, #0
 8009226:	d022      	beq.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800922c:	4618      	mov	r0, r3
 800922e:	f7ff fe3d 	bl	8008eac <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009236:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800923a:	d107      	bne.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800923c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009240:	68db      	ldr	r3, [r3, #12]
 8009242:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800924a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009250:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009254:	d10b      	bne.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	3304      	adds	r3, #4
 800925a:	4618      	mov	r0, r3
 800925c:	f000 f8dd 	bl	800941a <RCCEx_PLLSAI1_ConfigNR>
 8009260:	4603      	mov	r3, r0
 8009262:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8009264:	7ffb      	ldrb	r3, [r7, #31]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d001      	beq.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800926a:	7ffb      	ldrb	r3, [r7, #31]
 800926c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009276:	2b00      	cmp	r3, #0
 8009278:	d004      	beq.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800927e:	4618      	mov	r0, r3
 8009280:	f7ff fd26 	bl	8008cd0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800928c:	2b00      	cmp	r3, #0
 800928e:	d009      	beq.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009294:	4618      	mov	r0, r3
 8009296:	f7ff fd45 	bl	8008d24 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800929e:	4618      	mov	r0, r3
 80092a0:	f7ff fd2c 	bl	8008cfc <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80092a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3720      	adds	r7, #32
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}

080092ae <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80092ae:	b580      	push	{r7, lr}
 80092b0:	b084      	sub	sp, #16
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80092b6:	2300      	movs	r3, #0
 80092b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80092ba:	f7ff fe61 	bl	8008f80 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80092be:	f7fb fcf1 	bl	8004ca4 <HAL_GetTick>
 80092c2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80092c4:	e009      	b.n	80092da <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80092c6:	f7fb fced 	bl	8004ca4 <HAL_GetTick>
 80092ca:	4602      	mov	r2, r0
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	1ad3      	subs	r3, r2, r3
 80092d0:	2b02      	cmp	r3, #2
 80092d2:	d902      	bls.n	80092da <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80092d4:	2303      	movs	r3, #3
 80092d6:	73fb      	strb	r3, [r7, #15]
      break;
 80092d8:	e004      	b.n	80092e4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80092da:	f7ff fe60 	bl	8008f9e <LL_RCC_PLLSAI1_IsReady>
 80092de:	4603      	mov	r3, r0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d1f0      	bne.n	80092c6 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80092e4:	7bfb      	ldrb	r3, [r7, #15]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d137      	bne.n	800935a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80092ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092ee:	691b      	ldr	r3, [r3, #16]
 80092f0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	021b      	lsls	r3, r3, #8
 80092fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80092fe:	4313      	orrs	r3, r2
 8009300:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8009302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009306:	691b      	ldr	r3, [r3, #16]
 8009308:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009314:	4313      	orrs	r3, r2
 8009316:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009318:	f7ff fe23 	bl	8008f62 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800931c:	f7fb fcc2 	bl	8004ca4 <HAL_GetTick>
 8009320:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009322:	e009      	b.n	8009338 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009324:	f7fb fcbe 	bl	8004ca4 <HAL_GetTick>
 8009328:	4602      	mov	r2, r0
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	1ad3      	subs	r3, r2, r3
 800932e:	2b02      	cmp	r3, #2
 8009330:	d902      	bls.n	8009338 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8009332:	2303      	movs	r3, #3
 8009334:	73fb      	strb	r3, [r7, #15]
        break;
 8009336:	e004      	b.n	8009342 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009338:	f7ff fe31 	bl	8008f9e <LL_RCC_PLLSAI1_IsReady>
 800933c:	4603      	mov	r3, r0
 800933e:	2b01      	cmp	r3, #1
 8009340:	d1f0      	bne.n	8009324 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8009342:	7bfb      	ldrb	r3, [r7, #15]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d108      	bne.n	800935a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8009348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800934c:	691a      	ldr	r2, [r3, #16]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	691b      	ldr	r3, [r3, #16]
 8009352:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009356:	4313      	orrs	r3, r2
 8009358:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800935a:	7bfb      	ldrb	r3, [r7, #15]
}
 800935c:	4618      	mov	r0, r3
 800935e:	3710      	adds	r7, #16
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b084      	sub	sp, #16
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800936c:	2300      	movs	r3, #0
 800936e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009370:	f7ff fe06 	bl	8008f80 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009374:	f7fb fc96 	bl	8004ca4 <HAL_GetTick>
 8009378:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800937a:	e009      	b.n	8009390 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800937c:	f7fb fc92 	bl	8004ca4 <HAL_GetTick>
 8009380:	4602      	mov	r2, r0
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	2b02      	cmp	r3, #2
 8009388:	d902      	bls.n	8009390 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800938a:	2303      	movs	r3, #3
 800938c:	73fb      	strb	r3, [r7, #15]
      break;
 800938e:	e004      	b.n	800939a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009390:	f7ff fe05 	bl	8008f9e <LL_RCC_PLLSAI1_IsReady>
 8009394:	4603      	mov	r3, r0
 8009396:	2b00      	cmp	r3, #0
 8009398:	d1f0      	bne.n	800937c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800939a:	7bfb      	ldrb	r3, [r7, #15]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d137      	bne.n	8009410 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80093a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093a4:	691b      	ldr	r3, [r3, #16]
 80093a6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	021b      	lsls	r3, r3, #8
 80093b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80093b4:	4313      	orrs	r3, r2
 80093b6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80093b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093bc:	691b      	ldr	r3, [r3, #16]
 80093be:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80093ca:	4313      	orrs	r3, r2
 80093cc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80093ce:	f7ff fdc8 	bl	8008f62 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093d2:	f7fb fc67 	bl	8004ca4 <HAL_GetTick>
 80093d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80093d8:	e009      	b.n	80093ee <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80093da:	f7fb fc63 	bl	8004ca4 <HAL_GetTick>
 80093de:	4602      	mov	r2, r0
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	1ad3      	subs	r3, r2, r3
 80093e4:	2b02      	cmp	r3, #2
 80093e6:	d902      	bls.n	80093ee <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80093e8:	2303      	movs	r3, #3
 80093ea:	73fb      	strb	r3, [r7, #15]
        break;
 80093ec:	e004      	b.n	80093f8 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80093ee:	f7ff fdd6 	bl	8008f9e <LL_RCC_PLLSAI1_IsReady>
 80093f2:	4603      	mov	r3, r0
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d1f0      	bne.n	80093da <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80093f8:	7bfb      	ldrb	r3, [r7, #15]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d108      	bne.n	8009410 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80093fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009402:	691a      	ldr	r2, [r3, #16]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	691b      	ldr	r3, [r3, #16]
 8009408:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800940c:	4313      	orrs	r3, r2
 800940e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009410:	7bfb      	ldrb	r3, [r7, #15]
}
 8009412:	4618      	mov	r0, r3
 8009414:	3710      	adds	r7, #16
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}

0800941a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800941a:	b580      	push	{r7, lr}
 800941c:	b084      	sub	sp, #16
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009422:	2300      	movs	r3, #0
 8009424:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009426:	f7ff fdab 	bl	8008f80 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800942a:	f7fb fc3b 	bl	8004ca4 <HAL_GetTick>
 800942e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009430:	e009      	b.n	8009446 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009432:	f7fb fc37 	bl	8004ca4 <HAL_GetTick>
 8009436:	4602      	mov	r2, r0
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	1ad3      	subs	r3, r2, r3
 800943c:	2b02      	cmp	r3, #2
 800943e:	d902      	bls.n	8009446 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8009440:	2303      	movs	r3, #3
 8009442:	73fb      	strb	r3, [r7, #15]
      break;
 8009444:	e004      	b.n	8009450 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009446:	f7ff fdaa 	bl	8008f9e <LL_RCC_PLLSAI1_IsReady>
 800944a:	4603      	mov	r3, r0
 800944c:	2b00      	cmp	r3, #0
 800944e:	d1f0      	bne.n	8009432 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8009450:	7bfb      	ldrb	r3, [r7, #15]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d137      	bne.n	80094c6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800945a:	691b      	ldr	r3, [r3, #16]
 800945c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	021b      	lsls	r3, r3, #8
 8009466:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800946a:	4313      	orrs	r3, r2
 800946c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800946e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009472:	691b      	ldr	r3, [r3, #16]
 8009474:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	68db      	ldr	r3, [r3, #12]
 800947c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009480:	4313      	orrs	r3, r2
 8009482:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009484:	f7ff fd6d 	bl	8008f62 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009488:	f7fb fc0c 	bl	8004ca4 <HAL_GetTick>
 800948c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800948e:	e009      	b.n	80094a4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009490:	f7fb fc08 	bl	8004ca4 <HAL_GetTick>
 8009494:	4602      	mov	r2, r0
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	1ad3      	subs	r3, r2, r3
 800949a:	2b02      	cmp	r3, #2
 800949c:	d902      	bls.n	80094a4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800949e:	2303      	movs	r3, #3
 80094a0:	73fb      	strb	r3, [r7, #15]
        break;
 80094a2:	e004      	b.n	80094ae <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80094a4:	f7ff fd7b 	bl	8008f9e <LL_RCC_PLLSAI1_IsReady>
 80094a8:	4603      	mov	r3, r0
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	d1f0      	bne.n	8009490 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80094ae:	7bfb      	ldrb	r3, [r7, #15]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d108      	bne.n	80094c6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80094b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094b8:	691a      	ldr	r2, [r3, #16]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	691b      	ldr	r3, [r3, #16]
 80094be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80094c2:	4313      	orrs	r3, r2
 80094c4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80094c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3710      	adds	r7, #16
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d101      	bne.n	80094e2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	e09f      	b.n	8009622 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d106      	bne.n	80094fc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f7fb f882 	bl	8004600 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2202      	movs	r2, #2
 8009500:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009504:	4b49      	ldr	r3, [pc, #292]	; (800962c <HAL_RTC_Init+0x15c>)
 8009506:	68db      	ldr	r3, [r3, #12]
 8009508:	f003 0310 	and.w	r3, r3, #16
 800950c:	2b10      	cmp	r3, #16
 800950e:	d07e      	beq.n	800960e <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	22ca      	movs	r2, #202	; 0xca
 8009516:	625a      	str	r2, [r3, #36]	; 0x24
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	2253      	movs	r2, #83	; 0x53
 800951e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 f954 	bl	80097ce <RTC_EnterInitMode>
 8009526:	4603      	mov	r3, r0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d00a      	beq.n	8009542 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	22ff      	movs	r2, #255	; 0xff
 8009532:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2204      	movs	r2, #4
 8009538:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 800953c:	2301      	movs	r3, #1
 800953e:	73fb      	strb	r3, [r7, #15]
 8009540:	e067      	b.n	8009612 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	6812      	ldr	r2, [r2, #0]
 800954c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009550:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009554:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	6899      	ldr	r1, [r3, #8]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	685a      	ldr	r2, [r3, #4]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	691b      	ldr	r3, [r3, #16]
 8009564:	431a      	orrs	r2, r3
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	699b      	ldr	r3, [r3, #24]
 800956a:	431a      	orrs	r2, r3
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	430a      	orrs	r2, r1
 8009572:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	68d2      	ldr	r2, [r2, #12]
 800957c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	6919      	ldr	r1, [r3, #16]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	041a      	lsls	r2, r3, #16
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	430a      	orrs	r2, r1
 8009590:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	68da      	ldr	r2, [r3, #12]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80095a0:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f022 0203 	bic.w	r2, r2, #3
 80095b0:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	69da      	ldr	r2, [r3, #28]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	695b      	ldr	r3, [r3, #20]
 80095c0:	431a      	orrs	r2, r3
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	430a      	orrs	r2, r1
 80095c8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	f003 0320 	and.w	r3, r3, #32
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d113      	bne.n	8009600 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 f8d2 	bl	8009782 <HAL_RTC_WaitForSynchro>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d00d      	beq.n	8009600 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	22ff      	movs	r2, #255	; 0xff
 80095ea:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2204      	movs	r2, #4
 80095f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80095fc:	2301      	movs	r3, #1
 80095fe:	e010      	b.n	8009622 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	22ff      	movs	r2, #255	; 0xff
 8009606:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8009608:	2300      	movs	r3, #0
 800960a:	73fb      	strb	r3, [r7, #15]
 800960c:	e001      	b.n	8009612 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800960e:	2300      	movs	r3, #0
 8009610:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009612:	7bfb      	ldrb	r3, [r7, #15]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d103      	bne.n	8009620 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2201      	movs	r2, #1
 800961c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8009620:	7bfb      	ldrb	r3, [r7, #15]
}
 8009622:	4618      	mov	r0, r3
 8009624:	3710      	adds	r7, #16
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	40002800 	.word	0x40002800

08009630 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b086      	sub	sp, #24
 8009634:	af00      	add	r7, sp, #0
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	60b9      	str	r1, [r7, #8]
 800963a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	691b      	ldr	r3, [r3, #16]
 800964c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800965e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009662:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	0c1b      	lsrs	r3, r3, #16
 8009668:	b2db      	uxtb	r3, r3
 800966a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800966e:	b2da      	uxtb	r2, r3
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	0a1b      	lsrs	r3, r3, #8
 8009678:	b2db      	uxtb	r3, r3
 800967a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800967e:	b2da      	uxtb	r2, r3
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	b2db      	uxtb	r3, r3
 8009688:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800968c:	b2da      	uxtb	r2, r3
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	0c1b      	lsrs	r3, r3, #16
 8009696:	b2db      	uxtb	r3, r3
 8009698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800969c:	b2da      	uxtb	r2, r3
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d11a      	bne.n	80096de <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	4618      	mov	r0, r3
 80096ae:	f000 f8b8 	bl	8009822 <RTC_Bcd2ToByte>
 80096b2:	4603      	mov	r3, r0
 80096b4:	461a      	mov	r2, r3
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	785b      	ldrb	r3, [r3, #1]
 80096be:	4618      	mov	r0, r3
 80096c0:	f000 f8af 	bl	8009822 <RTC_Bcd2ToByte>
 80096c4:	4603      	mov	r3, r0
 80096c6:	461a      	mov	r2, r3
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	789b      	ldrb	r3, [r3, #2]
 80096d0:	4618      	mov	r0, r3
 80096d2:	f000 f8a6 	bl	8009822 <RTC_Bcd2ToByte>
 80096d6:	4603      	mov	r3, r0
 80096d8:	461a      	mov	r2, r3
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80096de:	2300      	movs	r3, #0
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3718      	adds	r7, #24
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b086      	sub	sp, #24
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	60f8      	str	r0, [r7, #12]
 80096f0:	60b9      	str	r1, [r7, #8]
 80096f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80096fe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009702:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	0c1b      	lsrs	r3, r3, #16
 8009708:	b2da      	uxtb	r2, r3
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	0a1b      	lsrs	r3, r3, #8
 8009712:	b2db      	uxtb	r3, r3
 8009714:	f003 031f 	and.w	r3, r3, #31
 8009718:	b2da      	uxtb	r2, r3
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	b2db      	uxtb	r3, r3
 8009722:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009726:	b2da      	uxtb	r2, r3
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	0b5b      	lsrs	r3, r3, #13
 8009730:	b2db      	uxtb	r3, r3
 8009732:	f003 0307 	and.w	r3, r3, #7
 8009736:	b2da      	uxtb	r2, r3
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d11a      	bne.n	8009778 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	78db      	ldrb	r3, [r3, #3]
 8009746:	4618      	mov	r0, r3
 8009748:	f000 f86b 	bl	8009822 <RTC_Bcd2ToByte>
 800974c:	4603      	mov	r3, r0
 800974e:	461a      	mov	r2, r3
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	785b      	ldrb	r3, [r3, #1]
 8009758:	4618      	mov	r0, r3
 800975a:	f000 f862 	bl	8009822 <RTC_Bcd2ToByte>
 800975e:	4603      	mov	r3, r0
 8009760:	461a      	mov	r2, r3
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	789b      	ldrb	r3, [r3, #2]
 800976a:	4618      	mov	r0, r3
 800976c:	f000 f859 	bl	8009822 <RTC_Bcd2ToByte>
 8009770:	4603      	mov	r3, r0
 8009772:	461a      	mov	r2, r3
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009778:	2300      	movs	r3, #0
}
 800977a:	4618      	mov	r0, r3
 800977c:	3718      	adds	r7, #24
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009782:	b580      	push	{r7, lr}
 8009784:	b084      	sub	sp, #16
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	68da      	ldr	r2, [r3, #12]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009798:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800979a:	f7fb fa83 	bl	8004ca4 <HAL_GetTick>
 800979e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80097a0:	e009      	b.n	80097b6 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80097a2:	f7fb fa7f 	bl	8004ca4 <HAL_GetTick>
 80097a6:	4602      	mov	r2, r0
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	1ad3      	subs	r3, r2, r3
 80097ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80097b0:	d901      	bls.n	80097b6 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80097b2:	2303      	movs	r3, #3
 80097b4:	e007      	b.n	80097c6 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	f003 0320 	and.w	r3, r3, #32
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d0ee      	beq.n	80097a2 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80097c4:	2300      	movs	r3, #0
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3710      	adds	r7, #16
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}

080097ce <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80097ce:	b580      	push	{r7, lr}
 80097d0:	b084      	sub	sp, #16
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	68db      	ldr	r3, [r3, #12]
 80097dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d119      	bne.n	8009818 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f04f 32ff 	mov.w	r2, #4294967295
 80097ec:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80097ee:	f7fb fa59 	bl	8004ca4 <HAL_GetTick>
 80097f2:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80097f4:	e009      	b.n	800980a <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80097f6:	f7fb fa55 	bl	8004ca4 <HAL_GetTick>
 80097fa:	4602      	mov	r2, r0
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	1ad3      	subs	r3, r2, r3
 8009800:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009804:	d901      	bls.n	800980a <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8009806:	2303      	movs	r3, #3
 8009808:	e007      	b.n	800981a <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009814:	2b00      	cmp	r3, #0
 8009816:	d0ee      	beq.n	80097f6 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}

08009822 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009822:	b480      	push	{r7}
 8009824:	b085      	sub	sp, #20
 8009826:	af00      	add	r7, sp, #0
 8009828:	4603      	mov	r3, r0
 800982a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800982c:	79fb      	ldrb	r3, [r7, #7]
 800982e:	091b      	lsrs	r3, r3, #4
 8009830:	b2db      	uxtb	r3, r3
 8009832:	461a      	mov	r2, r3
 8009834:	4613      	mov	r3, r2
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	4413      	add	r3, r2
 800983a:	005b      	lsls	r3, r3, #1
 800983c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	b2da      	uxtb	r2, r3
 8009842:	79fb      	ldrb	r3, [r7, #7]
 8009844:	f003 030f 	and.w	r3, r3, #15
 8009848:	b2db      	uxtb	r3, r3
 800984a:	4413      	add	r3, r2
 800984c:	b2db      	uxtb	r3, r3
}
 800984e:	4618      	mov	r0, r3
 8009850:	3714      	adds	r7, #20
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr
	...

0800985c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b086      	sub	sp, #24
 8009860:	af00      	add	r7, sp, #0
 8009862:	60f8      	str	r0, [r7, #12]
 8009864:	60b9      	str	r1, [r7, #8]
 8009866:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800986e:	2b01      	cmp	r3, #1
 8009870:	d101      	bne.n	8009876 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8009872:	2302      	movs	r3, #2
 8009874:	e0a8      	b.n	80099c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2201      	movs	r2, #1
 800987a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2202      	movs	r2, #2
 8009882:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	22ca      	movs	r2, #202	; 0xca
 800988c:	625a      	str	r2, [r3, #36]	; 0x24
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	2253      	movs	r2, #83	; 0x53
 8009894:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d020      	beq.n	80098e6 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80098a4:	f7fb f9fe 	bl	8004ca4 <HAL_GetTick>
 80098a8:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80098aa:	e015      	b.n	80098d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80098ac:	f7fb f9fa 	bl	8004ca4 <HAL_GetTick>
 80098b0:	4602      	mov	r2, r0
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	1ad3      	subs	r3, r2, r3
 80098b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80098ba:	d90d      	bls.n	80098d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	22ff      	movs	r2, #255	; 0xff
 80098c2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2203      	movs	r2, #3
 80098c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2200      	movs	r2, #0
 80098d0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80098d4:	2303      	movs	r3, #3
 80098d6:	e077      	b.n	80099c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	68db      	ldr	r3, [r3, #12]
 80098de:	f003 0304 	and.w	r3, r3, #4
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d1e2      	bne.n	80098ac <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	689a      	ldr	r2, [r3, #8]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098f4:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	68db      	ldr	r3, [r3, #12]
 80098fc:	b2da      	uxtb	r2, r3
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8009906:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009908:	f7fb f9cc 	bl	8004ca4 <HAL_GetTick>
 800990c:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800990e:	e015      	b.n	800993c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009910:	f7fb f9c8 	bl	8004ca4 <HAL_GetTick>
 8009914:	4602      	mov	r2, r0
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	1ad3      	subs	r3, r2, r3
 800991a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800991e:	d90d      	bls.n	800993c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	22ff      	movs	r2, #255	; 0xff
 8009926:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2203      	movs	r2, #3
 800992c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2200      	movs	r2, #0
 8009934:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8009938:	2303      	movs	r3, #3
 800993a:	e045      	b.n	80099c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	68db      	ldr	r3, [r3, #12]
 8009942:	f003 0304 	and.w	r3, r3, #4
 8009946:	2b00      	cmp	r3, #0
 8009948:	d0e2      	beq.n	8009910 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	68ba      	ldr	r2, [r7, #8]
 8009950:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	689a      	ldr	r2, [r3, #8]
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f022 0207 	bic.w	r2, r2, #7
 8009960:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	6899      	ldr	r1, [r3, #8]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	430a      	orrs	r2, r1
 8009970:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8009972:	4b17      	ldr	r3, [pc, #92]	; (80099d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8009974:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009978:	4a15      	ldr	r2, [pc, #84]	; (80099d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800997a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800997e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8009982:	4b13      	ldr	r3, [pc, #76]	; (80099d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a12      	ldr	r2, [pc, #72]	; (80099d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8009988:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800998c:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	689a      	ldr	r2, [r3, #8]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800999c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	689a      	ldr	r2, [r3, #8]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80099ac:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	22ff      	movs	r2, #255	; 0xff
 80099b4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2201      	movs	r2, #1
 80099ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2200      	movs	r2, #0
 80099c2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80099c6:	2300      	movs	r3, #0
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3718      	adds	r7, #24
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	58000800 	.word	0x58000800

080099d4 <LL_RCC_GetUSARTClockSource>:
{
 80099d4:	b480      	push	{r7}
 80099d6:	b083      	sub	sp, #12
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80099dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80099e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	4013      	ands	r3, r2
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	370c      	adds	r7, #12
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <LL_RCC_GetLPUARTClockSource>:
{
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80099fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a00:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	4013      	ands	r3, r2
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	370c      	adds	r7, #12
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b082      	sub	sp, #8
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d101      	bne.n	8009a26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a22:	2301      	movs	r3, #1
 8009a24:	e042      	b.n	8009aac <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d106      	bne.n	8009a3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f7fb f805 	bl	8004a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2224      	movs	r2, #36	; 0x24
 8009a42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f022 0201 	bic.w	r2, r2, #1
 8009a54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d002      	beq.n	8009a64 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 ff6a 	bl	800a938 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f000 fd3f 	bl	800a4e8 <UART_SetConfig>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d101      	bne.n	8009a74 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009a70:	2301      	movs	r3, #1
 8009a72:	e01b      	b.n	8009aac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	685a      	ldr	r2, [r3, #4]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009a82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	689a      	ldr	r2, [r3, #8]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009a92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	681a      	ldr	r2, [r3, #0]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f042 0201 	orr.w	r2, r2, #1
 8009aa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 ffe9 	bl	800aa7c <UART_CheckIdleState>
 8009aaa:	4603      	mov	r3, r0
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3708      	adds	r7, #8
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b08a      	sub	sp, #40	; 0x28
 8009ab8:	af02      	add	r7, sp, #8
 8009aba:	60f8      	str	r0, [r7, #12]
 8009abc:	60b9      	str	r1, [r7, #8]
 8009abe:	603b      	str	r3, [r7, #0]
 8009ac0:	4613      	mov	r3, r2
 8009ac2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009aca:	2b20      	cmp	r3, #32
 8009acc:	d17b      	bne.n	8009bc6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d002      	beq.n	8009ada <HAL_UART_Transmit+0x26>
 8009ad4:	88fb      	ldrh	r3, [r7, #6]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d101      	bne.n	8009ade <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009ada:	2301      	movs	r3, #1
 8009adc:	e074      	b.n	8009bc8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2221      	movs	r2, #33	; 0x21
 8009aea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009aee:	f7fb f8d9 	bl	8004ca4 <HAL_GetTick>
 8009af2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	88fa      	ldrh	r2, [r7, #6]
 8009af8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	88fa      	ldrh	r2, [r7, #6]
 8009b00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b0c:	d108      	bne.n	8009b20 <HAL_UART_Transmit+0x6c>
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	691b      	ldr	r3, [r3, #16]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d104      	bne.n	8009b20 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009b16:	2300      	movs	r3, #0
 8009b18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	61bb      	str	r3, [r7, #24]
 8009b1e:	e003      	b.n	8009b28 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009b24:	2300      	movs	r3, #0
 8009b26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009b28:	e030      	b.n	8009b8c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	9300      	str	r3, [sp, #0]
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	2200      	movs	r2, #0
 8009b32:	2180      	movs	r1, #128	; 0x80
 8009b34:	68f8      	ldr	r0, [r7, #12]
 8009b36:	f001 f84b 	bl	800abd0 <UART_WaitOnFlagUntilTimeout>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d005      	beq.n	8009b4c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2220      	movs	r2, #32
 8009b44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8009b48:	2303      	movs	r3, #3
 8009b4a:	e03d      	b.n	8009bc8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009b4c:	69fb      	ldr	r3, [r7, #28]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d10b      	bne.n	8009b6a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009b52:	69bb      	ldr	r3, [r7, #24]
 8009b54:	881b      	ldrh	r3, [r3, #0]
 8009b56:	461a      	mov	r2, r3
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b60:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009b62:	69bb      	ldr	r3, [r7, #24]
 8009b64:	3302      	adds	r3, #2
 8009b66:	61bb      	str	r3, [r7, #24]
 8009b68:	e007      	b.n	8009b7a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009b6a:	69fb      	ldr	r3, [r7, #28]
 8009b6c:	781a      	ldrb	r2, [r3, #0]
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009b74:	69fb      	ldr	r3, [r7, #28]
 8009b76:	3301      	adds	r3, #1
 8009b78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	3b01      	subs	r3, #1
 8009b84:	b29a      	uxth	r2, r3
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d1c8      	bne.n	8009b2a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	9300      	str	r3, [sp, #0]
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	2140      	movs	r1, #64	; 0x40
 8009ba2:	68f8      	ldr	r0, [r7, #12]
 8009ba4:	f001 f814 	bl	800abd0 <UART_WaitOnFlagUntilTimeout>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d005      	beq.n	8009bba <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2220      	movs	r2, #32
 8009bb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8009bb6:	2303      	movs	r3, #3
 8009bb8:	e006      	b.n	8009bc8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2220      	movs	r2, #32
 8009bbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	e000      	b.n	8009bc8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009bc6:	2302      	movs	r3, #2
  }
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3720      	adds	r7, #32
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b08a      	sub	sp, #40	; 0x28
 8009bd4:	af02      	add	r7, sp, #8
 8009bd6:	60f8      	str	r0, [r7, #12]
 8009bd8:	60b9      	str	r1, [r7, #8]
 8009bda:	603b      	str	r3, [r7, #0]
 8009bdc:	4613      	mov	r3, r2
 8009bde:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009be6:	2b20      	cmp	r3, #32
 8009be8:	f040 80b5 	bne.w	8009d56 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d002      	beq.n	8009bf8 <HAL_UART_Receive+0x28>
 8009bf2:	88fb      	ldrh	r3, [r7, #6]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d101      	bne.n	8009bfc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	e0ad      	b.n	8009d58 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2222      	movs	r2, #34	; 0x22
 8009c08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009c12:	f7fb f847 	bl	8004ca4 <HAL_GetTick>
 8009c16:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	88fa      	ldrh	r2, [r7, #6]
 8009c1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	88fa      	ldrh	r2, [r7, #6]
 8009c24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c30:	d10e      	bne.n	8009c50 <HAL_UART_Receive+0x80>
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	691b      	ldr	r3, [r3, #16]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d105      	bne.n	8009c46 <HAL_UART_Receive+0x76>
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009c40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009c44:	e02d      	b.n	8009ca2 <HAL_UART_Receive+0xd2>
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	22ff      	movs	r2, #255	; 0xff
 8009c4a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009c4e:	e028      	b.n	8009ca2 <HAL_UART_Receive+0xd2>
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d10d      	bne.n	8009c74 <HAL_UART_Receive+0xa4>
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	691b      	ldr	r3, [r3, #16]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d104      	bne.n	8009c6a <HAL_UART_Receive+0x9a>
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	22ff      	movs	r2, #255	; 0xff
 8009c64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009c68:	e01b      	b.n	8009ca2 <HAL_UART_Receive+0xd2>
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	227f      	movs	r2, #127	; 0x7f
 8009c6e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009c72:	e016      	b.n	8009ca2 <HAL_UART_Receive+0xd2>
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	689b      	ldr	r3, [r3, #8]
 8009c78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c7c:	d10d      	bne.n	8009c9a <HAL_UART_Receive+0xca>
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	691b      	ldr	r3, [r3, #16]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d104      	bne.n	8009c90 <HAL_UART_Receive+0xc0>
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	227f      	movs	r2, #127	; 0x7f
 8009c8a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009c8e:	e008      	b.n	8009ca2 <HAL_UART_Receive+0xd2>
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	223f      	movs	r2, #63	; 0x3f
 8009c94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009c98:	e003      	b.n	8009ca2 <HAL_UART_Receive+0xd2>
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009ca8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	689b      	ldr	r3, [r3, #8]
 8009cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cb2:	d108      	bne.n	8009cc6 <HAL_UART_Receive+0xf6>
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	691b      	ldr	r3, [r3, #16]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d104      	bne.n	8009cc6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	61bb      	str	r3, [r7, #24]
 8009cc4:	e003      	b.n	8009cce <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009cce:	e036      	b.n	8009d3e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	9300      	str	r3, [sp, #0]
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	2120      	movs	r1, #32
 8009cda:	68f8      	ldr	r0, [r7, #12]
 8009cdc:	f000 ff78 	bl	800abd0 <UART_WaitOnFlagUntilTimeout>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d005      	beq.n	8009cf2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2220      	movs	r2, #32
 8009cea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8009cee:	2303      	movs	r3, #3
 8009cf0:	e032      	b.n	8009d58 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8009cf2:	69fb      	ldr	r3, [r7, #28]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d10c      	bne.n	8009d12 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cfe:	b29a      	uxth	r2, r3
 8009d00:	8a7b      	ldrh	r3, [r7, #18]
 8009d02:	4013      	ands	r3, r2
 8009d04:	b29a      	uxth	r2, r3
 8009d06:	69bb      	ldr	r3, [r7, #24]
 8009d08:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009d0a:	69bb      	ldr	r3, [r7, #24]
 8009d0c:	3302      	adds	r3, #2
 8009d0e:	61bb      	str	r3, [r7, #24]
 8009d10:	e00c      	b.n	8009d2c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d18:	b2da      	uxtb	r2, r3
 8009d1a:	8a7b      	ldrh	r3, [r7, #18]
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	4013      	ands	r3, r2
 8009d20:	b2da      	uxtb	r2, r3
 8009d22:	69fb      	ldr	r3, [r7, #28]
 8009d24:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009d26:	69fb      	ldr	r3, [r7, #28]
 8009d28:	3301      	adds	r3, #1
 8009d2a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	3b01      	subs	r3, #1
 8009d36:	b29a      	uxth	r2, r3
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d1c2      	bne.n	8009cd0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2220      	movs	r2, #32
 8009d4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8009d52:	2300      	movs	r3, #0
 8009d54:	e000      	b.n	8009d58 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8009d56:	2302      	movs	r3, #2
  }
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3720      	adds	r7, #32
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b08a      	sub	sp, #40	; 0x28
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	60f8      	str	r0, [r7, #12]
 8009d68:	60b9      	str	r1, [r7, #8]
 8009d6a:	4613      	mov	r3, r2
 8009d6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d74:	2b20      	cmp	r3, #32
 8009d76:	d167      	bne.n	8009e48 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d002      	beq.n	8009d84 <HAL_UART_Transmit_DMA+0x24>
 8009d7e:	88fb      	ldrh	r3, [r7, #6]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d101      	bne.n	8009d88 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009d84:	2301      	movs	r3, #1
 8009d86:	e060      	b.n	8009e4a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	68ba      	ldr	r2, [r7, #8]
 8009d8c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	88fa      	ldrh	r2, [r7, #6]
 8009d92:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	88fa      	ldrh	r2, [r7, #6]
 8009d9a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2200      	movs	r2, #0
 8009da2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2221      	movs	r2, #33	; 0x21
 8009daa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d028      	beq.n	8009e08 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009dba:	4a26      	ldr	r2, [pc, #152]	; (8009e54 <HAL_UART_Transmit_DMA+0xf4>)
 8009dbc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009dc2:	4a25      	ldr	r2, [pc, #148]	; (8009e58 <HAL_UART_Transmit_DMA+0xf8>)
 8009dc4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009dca:	4a24      	ldr	r2, [pc, #144]	; (8009e5c <HAL_UART_Transmit_DMA+0xfc>)
 8009dcc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dde:	4619      	mov	r1, r3
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	3328      	adds	r3, #40	; 0x28
 8009de6:	461a      	mov	r2, r3
 8009de8:	88fb      	ldrh	r3, [r7, #6]
 8009dea:	f7fb ffb6 	bl	8005d5a <HAL_DMA_Start_IT>
 8009dee:	4603      	mov	r3, r0
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d009      	beq.n	8009e08 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2210      	movs	r2, #16
 8009df8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2220      	movs	r2, #32
 8009e00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8009e04:	2301      	movs	r3, #1
 8009e06:	e020      	b.n	8009e4a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2240      	movs	r2, #64	; 0x40
 8009e0e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	3308      	adds	r3, #8
 8009e16:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	e853 3f00 	ldrex	r3, [r3]
 8009e1e:	613b      	str	r3, [r7, #16]
   return(result);
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e26:	627b      	str	r3, [r7, #36]	; 0x24
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	3308      	adds	r3, #8
 8009e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e30:	623a      	str	r2, [r7, #32]
 8009e32:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e34:	69f9      	ldr	r1, [r7, #28]
 8009e36:	6a3a      	ldr	r2, [r7, #32]
 8009e38:	e841 2300 	strex	r3, r2, [r1]
 8009e3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009e3e:	69bb      	ldr	r3, [r7, #24]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d1e5      	bne.n	8009e10 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009e44:	2300      	movs	r3, #0
 8009e46:	e000      	b.n	8009e4a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009e48:	2302      	movs	r3, #2
  }
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3728      	adds	r7, #40	; 0x28
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop
 8009e54:	0800aded 	.word	0x0800aded
 8009e58:	0800ae87 	.word	0x0800ae87
 8009e5c:	0800aea3 	.word	0x0800aea3

08009e60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b0ba      	sub	sp, #232	; 0xe8
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	69db      	ldr	r3, [r3, #28]
 8009e6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009e86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009e8a:	f640 030f 	movw	r3, #2063	; 0x80f
 8009e8e:	4013      	ands	r3, r2
 8009e90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009e94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d11b      	bne.n	8009ed4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ea0:	f003 0320 	and.w	r3, r3, #32
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d015      	beq.n	8009ed4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009eac:	f003 0320 	and.w	r3, r3, #32
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d105      	bne.n	8009ec0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009eb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d009      	beq.n	8009ed4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	f000 82e3 	beq.w	800a490 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	4798      	blx	r3
      }
      return;
 8009ed2:	e2dd      	b.n	800a490 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009ed4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	f000 8123 	beq.w	800a124 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009ede:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009ee2:	4b8d      	ldr	r3, [pc, #564]	; (800a118 <HAL_UART_IRQHandler+0x2b8>)
 8009ee4:	4013      	ands	r3, r2
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d106      	bne.n	8009ef8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009eea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009eee:	4b8b      	ldr	r3, [pc, #556]	; (800a11c <HAL_UART_IRQHandler+0x2bc>)
 8009ef0:	4013      	ands	r3, r2
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	f000 8116 	beq.w	800a124 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009efc:	f003 0301 	and.w	r3, r3, #1
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d011      	beq.n	8009f28 <HAL_UART_IRQHandler+0xc8>
 8009f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d00b      	beq.n	8009f28 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	2201      	movs	r2, #1
 8009f16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f1e:	f043 0201 	orr.w	r2, r3, #1
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f2c:	f003 0302 	and.w	r3, r3, #2
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d011      	beq.n	8009f58 <HAL_UART_IRQHandler+0xf8>
 8009f34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f38:	f003 0301 	and.w	r3, r3, #1
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d00b      	beq.n	8009f58 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	2202      	movs	r2, #2
 8009f46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f4e:	f043 0204 	orr.w	r2, r3, #4
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f5c:	f003 0304 	and.w	r3, r3, #4
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d011      	beq.n	8009f88 <HAL_UART_IRQHandler+0x128>
 8009f64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f68:	f003 0301 	and.w	r3, r3, #1
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d00b      	beq.n	8009f88 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	2204      	movs	r2, #4
 8009f76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f7e:	f043 0202 	orr.w	r2, r3, #2
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f8c:	f003 0308 	and.w	r3, r3, #8
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d017      	beq.n	8009fc4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f98:	f003 0320 	and.w	r3, r3, #32
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d105      	bne.n	8009fac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009fa0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009fa4:	4b5c      	ldr	r3, [pc, #368]	; (800a118 <HAL_UART_IRQHandler+0x2b8>)
 8009fa6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00b      	beq.n	8009fc4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2208      	movs	r2, #8
 8009fb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fba:	f043 0208 	orr.w	r2, r3, #8
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d012      	beq.n	8009ff6 <HAL_UART_IRQHandler+0x196>
 8009fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d00c      	beq.n	8009ff6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009fe4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fec:	f043 0220 	orr.w	r2, r3, #32
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	f000 8249 	beq.w	800a494 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a006:	f003 0320 	and.w	r3, r3, #32
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d013      	beq.n	800a036 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a00e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a012:	f003 0320 	and.w	r3, r3, #32
 800a016:	2b00      	cmp	r3, #0
 800a018:	d105      	bne.n	800a026 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a01a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a01e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a022:	2b00      	cmp	r3, #0
 800a024:	d007      	beq.n	800a036 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d003      	beq.n	800a036 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a03c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	689b      	ldr	r3, [r3, #8]
 800a046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a04a:	2b40      	cmp	r3, #64	; 0x40
 800a04c:	d005      	beq.n	800a05a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a04e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a052:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a056:	2b00      	cmp	r3, #0
 800a058:	d054      	beq.n	800a104 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 fe60 	bl	800ad20 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	689b      	ldr	r3, [r3, #8]
 800a066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a06a:	2b40      	cmp	r3, #64	; 0x40
 800a06c:	d146      	bne.n	800a0fc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	3308      	adds	r3, #8
 800a074:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a078:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a07c:	e853 3f00 	ldrex	r3, [r3]
 800a080:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a084:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a088:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a08c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	3308      	adds	r3, #8
 800a096:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a09a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a09e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a0a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a0aa:	e841 2300 	strex	r3, r2, [r1]
 800a0ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a0b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d1d9      	bne.n	800a06e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d017      	beq.n	800a0f4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0ca:	4a15      	ldr	r2, [pc, #84]	; (800a120 <HAL_UART_IRQHandler+0x2c0>)
 800a0cc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f7fb ff1a 	bl	8005f0e <HAL_DMA_Abort_IT>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d019      	beq.n	800a114 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800a0ee:	4610      	mov	r0, r2
 800a0f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0f2:	e00f      	b.n	800a114 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f000 f9e1 	bl	800a4bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0fa:	e00b      	b.n	800a114 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 f9dd 	bl	800a4bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a102:	e007      	b.n	800a114 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 f9d9 	bl	800a4bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2200      	movs	r2, #0
 800a10e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800a112:	e1bf      	b.n	800a494 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a114:	bf00      	nop
    return;
 800a116:	e1bd      	b.n	800a494 <HAL_UART_IRQHandler+0x634>
 800a118:	10000001 	.word	0x10000001
 800a11c:	04000120 	.word	0x04000120
 800a120:	0800af23 	.word	0x0800af23

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a128:	2b01      	cmp	r3, #1
 800a12a:	f040 8153 	bne.w	800a3d4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a12e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a132:	f003 0310 	and.w	r3, r3, #16
 800a136:	2b00      	cmp	r3, #0
 800a138:	f000 814c 	beq.w	800a3d4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a13c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a140:	f003 0310 	and.w	r3, r3, #16
 800a144:	2b00      	cmp	r3, #0
 800a146:	f000 8145 	beq.w	800a3d4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	2210      	movs	r2, #16
 800a150:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	689b      	ldr	r3, [r3, #8]
 800a158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a15c:	2b40      	cmp	r3, #64	; 0x40
 800a15e:	f040 80bb 	bne.w	800a2d8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a170:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a174:	2b00      	cmp	r3, #0
 800a176:	f000 818f 	beq.w	800a498 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a180:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a184:	429a      	cmp	r2, r3
 800a186:	f080 8187 	bcs.w	800a498 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a190:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f003 0320 	and.w	r3, r3, #32
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	f040 8087 	bne.w	800a2b6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a1b4:	e853 3f00 	ldrex	r3, [r3]
 800a1b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a1bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a1c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a1d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a1d6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a1de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a1e2:	e841 2300 	strex	r3, r2, [r1]
 800a1e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a1ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d1da      	bne.n	800a1a8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	3308      	adds	r3, #8
 800a1f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a1fc:	e853 3f00 	ldrex	r3, [r3]
 800a200:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a202:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a204:	f023 0301 	bic.w	r3, r3, #1
 800a208:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	3308      	adds	r3, #8
 800a212:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a216:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a21a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a21c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a21e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a222:	e841 2300 	strex	r3, r2, [r1]
 800a226:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a228:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d1e1      	bne.n	800a1f2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	3308      	adds	r3, #8
 800a234:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a236:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a238:	e853 3f00 	ldrex	r3, [r3]
 800a23c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a23e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a240:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a244:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	3308      	adds	r3, #8
 800a24e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a252:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a254:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a256:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a258:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a25a:	e841 2300 	strex	r3, r2, [r1]
 800a25e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a260:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a262:	2b00      	cmp	r3, #0
 800a264:	d1e3      	bne.n	800a22e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2220      	movs	r2, #32
 800a26a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2200      	movs	r2, #0
 800a272:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a27a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a27c:	e853 3f00 	ldrex	r3, [r3]
 800a280:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a284:	f023 0310 	bic.w	r3, r3, #16
 800a288:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	461a      	mov	r2, r3
 800a292:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a296:	65bb      	str	r3, [r7, #88]	; 0x58
 800a298:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a29a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a29c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a29e:	e841 2300 	strex	r3, r2, [r1]
 800a2a2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a2a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d1e4      	bne.n	800a274 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f7fb fdcd 	bl	8005e50 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2202      	movs	r2, #2
 800a2ba:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	1ad3      	subs	r3, r2, r3
 800a2cc:	b29b      	uxth	r3, r3
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f000 f8fd 	bl	800a4d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a2d6:	e0df      	b.n	800a498 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a2e4:	b29b      	uxth	r3, r3
 800a2e6:	1ad3      	subs	r3, r2, r3
 800a2e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	f000 80d1 	beq.w	800a49c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800a2fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	f000 80cc 	beq.w	800a49c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a30c:	e853 3f00 	ldrex	r3, [r3]
 800a310:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a314:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a318:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	461a      	mov	r2, r3
 800a322:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a326:	647b      	str	r3, [r7, #68]	; 0x44
 800a328:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a32a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a32c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a32e:	e841 2300 	strex	r3, r2, [r1]
 800a332:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a336:	2b00      	cmp	r3, #0
 800a338:	d1e4      	bne.n	800a304 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	3308      	adds	r3, #8
 800a340:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a344:	e853 3f00 	ldrex	r3, [r3]
 800a348:	623b      	str	r3, [r7, #32]
   return(result);
 800a34a:	6a3b      	ldr	r3, [r7, #32]
 800a34c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a350:	f023 0301 	bic.w	r3, r3, #1
 800a354:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	3308      	adds	r3, #8
 800a35e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a362:	633a      	str	r2, [r7, #48]	; 0x30
 800a364:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a366:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a36a:	e841 2300 	strex	r3, r2, [r1]
 800a36e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a372:	2b00      	cmp	r3, #0
 800a374:	d1e1      	bne.n	800a33a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2220      	movs	r2, #32
 800a37a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2200      	movs	r2, #0
 800a382:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2200      	movs	r2, #0
 800a388:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	e853 3f00 	ldrex	r3, [r3]
 800a396:	60fb      	str	r3, [r7, #12]
   return(result);
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f023 0310 	bic.w	r3, r3, #16
 800a39e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	461a      	mov	r2, r3
 800a3a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a3ac:	61fb      	str	r3, [r7, #28]
 800a3ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b0:	69b9      	ldr	r1, [r7, #24]
 800a3b2:	69fa      	ldr	r2, [r7, #28]
 800a3b4:	e841 2300 	strex	r3, r2, [r1]
 800a3b8:	617b      	str	r3, [r7, #20]
   return(result);
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d1e4      	bne.n	800a38a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2202      	movs	r2, #2
 800a3c4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a3c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a3ca:	4619      	mov	r1, r3
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f000 f87f 	bl	800a4d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a3d2:	e063      	b.n	800a49c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a3d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d00e      	beq.n	800a3fe <HAL_UART_IRQHandler+0x59e>
 800a3e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a3e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d008      	beq.n	800a3fe <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a3f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f000 fdd4 	bl	800afa4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a3fc:	e051      	b.n	800a4a2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a3fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a406:	2b00      	cmp	r3, #0
 800a408:	d014      	beq.n	800a434 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a40a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a40e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a412:	2b00      	cmp	r3, #0
 800a414:	d105      	bne.n	800a422 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a416:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a41a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d008      	beq.n	800a434 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a426:	2b00      	cmp	r3, #0
 800a428:	d03a      	beq.n	800a4a0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	4798      	blx	r3
    }
    return;
 800a432:	e035      	b.n	800a4a0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d009      	beq.n	800a454 <HAL_UART_IRQHandler+0x5f4>
 800a440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d003      	beq.n	800a454 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f000 fd7e 	bl	800af4e <UART_EndTransmit_IT>
    return;
 800a452:	e026      	b.n	800a4a2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a458:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d009      	beq.n	800a474 <HAL_UART_IRQHandler+0x614>
 800a460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a464:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d003      	beq.n	800a474 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f000 fdad 	bl	800afcc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a472:	e016      	b.n	800a4a2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a478:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d010      	beq.n	800a4a2 <HAL_UART_IRQHandler+0x642>
 800a480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a484:	2b00      	cmp	r3, #0
 800a486:	da0c      	bge.n	800a4a2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f000 fd95 	bl	800afb8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a48e:	e008      	b.n	800a4a2 <HAL_UART_IRQHandler+0x642>
      return;
 800a490:	bf00      	nop
 800a492:	e006      	b.n	800a4a2 <HAL_UART_IRQHandler+0x642>
    return;
 800a494:	bf00      	nop
 800a496:	e004      	b.n	800a4a2 <HAL_UART_IRQHandler+0x642>
      return;
 800a498:	bf00      	nop
 800a49a:	e002      	b.n	800a4a2 <HAL_UART_IRQHandler+0x642>
      return;
 800a49c:	bf00      	nop
 800a49e:	e000      	b.n	800a4a2 <HAL_UART_IRQHandler+0x642>
    return;
 800a4a0:	bf00      	nop
  }
}
 800a4a2:	37e8      	adds	r7, #232	; 0xe8
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b083      	sub	sp, #12
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a4b0:	bf00      	nop
 800a4b2:	370c      	adds	r7, #12
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ba:	4770      	bx	lr

0800a4bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b083      	sub	sp, #12
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a4c4:	bf00      	nop
 800a4c6:	370c      	adds	r7, #12
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr

0800a4d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b083      	sub	sp, #12
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	460b      	mov	r3, r1
 800a4da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a4dc:	bf00      	nop
 800a4de:	370c      	adds	r7, #12
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr

0800a4e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a4e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a4ec:	b08c      	sub	sp, #48	; 0x30
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	689a      	ldr	r2, [r3, #8]
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	691b      	ldr	r3, [r3, #16]
 800a500:	431a      	orrs	r2, r3
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	695b      	ldr	r3, [r3, #20]
 800a506:	431a      	orrs	r2, r3
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	69db      	ldr	r3, [r3, #28]
 800a50c:	4313      	orrs	r3, r2
 800a50e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	681a      	ldr	r2, [r3, #0]
 800a516:	4baf      	ldr	r3, [pc, #700]	; (800a7d4 <UART_SetConfig+0x2ec>)
 800a518:	4013      	ands	r3, r2
 800a51a:	697a      	ldr	r2, [r7, #20]
 800a51c:	6812      	ldr	r2, [r2, #0]
 800a51e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a520:	430b      	orrs	r3, r1
 800a522:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	68da      	ldr	r2, [r3, #12]
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	430a      	orrs	r2, r1
 800a538:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	699b      	ldr	r3, [r3, #24]
 800a53e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4aa4      	ldr	r2, [pc, #656]	; (800a7d8 <UART_SetConfig+0x2f0>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d004      	beq.n	800a554 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	6a1b      	ldr	r3, [r3, #32]
 800a54e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a550:	4313      	orrs	r3, r2
 800a552:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	689b      	ldr	r3, [r3, #8]
 800a55a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a55e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a562:	697a      	ldr	r2, [r7, #20]
 800a564:	6812      	ldr	r2, [r2, #0]
 800a566:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a568:	430b      	orrs	r3, r1
 800a56a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a572:	f023 010f 	bic.w	r1, r3, #15
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	430a      	orrs	r2, r1
 800a580:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	4a95      	ldr	r2, [pc, #596]	; (800a7dc <UART_SetConfig+0x2f4>)
 800a588:	4293      	cmp	r3, r2
 800a58a:	d125      	bne.n	800a5d8 <UART_SetConfig+0xf0>
 800a58c:	2003      	movs	r0, #3
 800a58e:	f7ff fa21 	bl	80099d4 <LL_RCC_GetUSARTClockSource>
 800a592:	4603      	mov	r3, r0
 800a594:	2b03      	cmp	r3, #3
 800a596:	d81b      	bhi.n	800a5d0 <UART_SetConfig+0xe8>
 800a598:	a201      	add	r2, pc, #4	; (adr r2, 800a5a0 <UART_SetConfig+0xb8>)
 800a59a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a59e:	bf00      	nop
 800a5a0:	0800a5b1 	.word	0x0800a5b1
 800a5a4:	0800a5c1 	.word	0x0800a5c1
 800a5a8:	0800a5b9 	.word	0x0800a5b9
 800a5ac:	0800a5c9 	.word	0x0800a5c9
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a5b6:	e042      	b.n	800a63e <UART_SetConfig+0x156>
 800a5b8:	2302      	movs	r3, #2
 800a5ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a5be:	e03e      	b.n	800a63e <UART_SetConfig+0x156>
 800a5c0:	2304      	movs	r3, #4
 800a5c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a5c6:	e03a      	b.n	800a63e <UART_SetConfig+0x156>
 800a5c8:	2308      	movs	r3, #8
 800a5ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a5ce:	e036      	b.n	800a63e <UART_SetConfig+0x156>
 800a5d0:	2310      	movs	r3, #16
 800a5d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a5d6:	e032      	b.n	800a63e <UART_SetConfig+0x156>
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a7e      	ldr	r2, [pc, #504]	; (800a7d8 <UART_SetConfig+0x2f0>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d12a      	bne.n	800a638 <UART_SetConfig+0x150>
 800a5e2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800a5e6:	f7ff fa05 	bl	80099f4 <LL_RCC_GetLPUARTClockSource>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a5f0:	d01a      	beq.n	800a628 <UART_SetConfig+0x140>
 800a5f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a5f6:	d81b      	bhi.n	800a630 <UART_SetConfig+0x148>
 800a5f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5fc:	d00c      	beq.n	800a618 <UART_SetConfig+0x130>
 800a5fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a602:	d815      	bhi.n	800a630 <UART_SetConfig+0x148>
 800a604:	2b00      	cmp	r3, #0
 800a606:	d003      	beq.n	800a610 <UART_SetConfig+0x128>
 800a608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a60c:	d008      	beq.n	800a620 <UART_SetConfig+0x138>
 800a60e:	e00f      	b.n	800a630 <UART_SetConfig+0x148>
 800a610:	2300      	movs	r3, #0
 800a612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a616:	e012      	b.n	800a63e <UART_SetConfig+0x156>
 800a618:	2302      	movs	r3, #2
 800a61a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a61e:	e00e      	b.n	800a63e <UART_SetConfig+0x156>
 800a620:	2304      	movs	r3, #4
 800a622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a626:	e00a      	b.n	800a63e <UART_SetConfig+0x156>
 800a628:	2308      	movs	r3, #8
 800a62a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a62e:	e006      	b.n	800a63e <UART_SetConfig+0x156>
 800a630:	2310      	movs	r3, #16
 800a632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a636:	e002      	b.n	800a63e <UART_SetConfig+0x156>
 800a638:	2310      	movs	r3, #16
 800a63a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4a65      	ldr	r2, [pc, #404]	; (800a7d8 <UART_SetConfig+0x2f0>)
 800a644:	4293      	cmp	r3, r2
 800a646:	f040 8097 	bne.w	800a778 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a64a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a64e:	2b08      	cmp	r3, #8
 800a650:	d823      	bhi.n	800a69a <UART_SetConfig+0x1b2>
 800a652:	a201      	add	r2, pc, #4	; (adr r2, 800a658 <UART_SetConfig+0x170>)
 800a654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a658:	0800a67d 	.word	0x0800a67d
 800a65c:	0800a69b 	.word	0x0800a69b
 800a660:	0800a685 	.word	0x0800a685
 800a664:	0800a69b 	.word	0x0800a69b
 800a668:	0800a68b 	.word	0x0800a68b
 800a66c:	0800a69b 	.word	0x0800a69b
 800a670:	0800a69b 	.word	0x0800a69b
 800a674:	0800a69b 	.word	0x0800a69b
 800a678:	0800a693 	.word	0x0800a693
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a67c:	f7fe fa24 	bl	8008ac8 <HAL_RCC_GetPCLK1Freq>
 800a680:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a682:	e010      	b.n	800a6a6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a684:	4b56      	ldr	r3, [pc, #344]	; (800a7e0 <UART_SetConfig+0x2f8>)
 800a686:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a688:	e00d      	b.n	800a6a6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a68a:	f7fe f99d 	bl	80089c8 <HAL_RCC_GetSysClockFreq>
 800a68e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a690:	e009      	b.n	800a6a6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a692:	f248 0306 	movw	r3, #32774	; 0x8006
 800a696:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a698:	e005      	b.n	800a6a6 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800a69a:	2300      	movs	r3, #0
 800a69c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a6a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	f000 812b 	beq.w	800a904 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b2:	4a4c      	ldr	r2, [pc, #304]	; (800a7e4 <UART_SetConfig+0x2fc>)
 800a6b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6c0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	685a      	ldr	r2, [r3, #4]
 800a6c6:	4613      	mov	r3, r2
 800a6c8:	005b      	lsls	r3, r3, #1
 800a6ca:	4413      	add	r3, r2
 800a6cc:	69ba      	ldr	r2, [r7, #24]
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	d305      	bcc.n	800a6de <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	685b      	ldr	r3, [r3, #4]
 800a6d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a6d8:	69ba      	ldr	r2, [r7, #24]
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d903      	bls.n	800a6e6 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800a6de:	2301      	movs	r3, #1
 800a6e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a6e4:	e10e      	b.n	800a904 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	60bb      	str	r3, [r7, #8]
 800a6ec:	60fa      	str	r2, [r7, #12]
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f2:	4a3c      	ldr	r2, [pc, #240]	; (800a7e4 <UART_SetConfig+0x2fc>)
 800a6f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6f8:	b29b      	uxth	r3, r3
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	603b      	str	r3, [r7, #0]
 800a6fe:	607a      	str	r2, [r7, #4]
 800a700:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a704:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a708:	f7f6 fa96 	bl	8000c38 <__aeabi_uldivmod>
 800a70c:	4602      	mov	r2, r0
 800a70e:	460b      	mov	r3, r1
 800a710:	4610      	mov	r0, r2
 800a712:	4619      	mov	r1, r3
 800a714:	f04f 0200 	mov.w	r2, #0
 800a718:	f04f 0300 	mov.w	r3, #0
 800a71c:	020b      	lsls	r3, r1, #8
 800a71e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a722:	0202      	lsls	r2, r0, #8
 800a724:	6979      	ldr	r1, [r7, #20]
 800a726:	6849      	ldr	r1, [r1, #4]
 800a728:	0849      	lsrs	r1, r1, #1
 800a72a:	2000      	movs	r0, #0
 800a72c:	460c      	mov	r4, r1
 800a72e:	4605      	mov	r5, r0
 800a730:	eb12 0804 	adds.w	r8, r2, r4
 800a734:	eb43 0905 	adc.w	r9, r3, r5
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	2200      	movs	r2, #0
 800a73e:	469a      	mov	sl, r3
 800a740:	4693      	mov	fp, r2
 800a742:	4652      	mov	r2, sl
 800a744:	465b      	mov	r3, fp
 800a746:	4640      	mov	r0, r8
 800a748:	4649      	mov	r1, r9
 800a74a:	f7f6 fa75 	bl	8000c38 <__aeabi_uldivmod>
 800a74e:	4602      	mov	r2, r0
 800a750:	460b      	mov	r3, r1
 800a752:	4613      	mov	r3, r2
 800a754:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a756:	6a3b      	ldr	r3, [r7, #32]
 800a758:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a75c:	d308      	bcc.n	800a770 <UART_SetConfig+0x288>
 800a75e:	6a3b      	ldr	r3, [r7, #32]
 800a760:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a764:	d204      	bcs.n	800a770 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	6a3a      	ldr	r2, [r7, #32]
 800a76c:	60da      	str	r2, [r3, #12]
 800a76e:	e0c9      	b.n	800a904 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800a770:	2301      	movs	r3, #1
 800a772:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a776:	e0c5      	b.n	800a904 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	69db      	ldr	r3, [r3, #28]
 800a77c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a780:	d16d      	bne.n	800a85e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800a782:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a786:	3b01      	subs	r3, #1
 800a788:	2b07      	cmp	r3, #7
 800a78a:	d82d      	bhi.n	800a7e8 <UART_SetConfig+0x300>
 800a78c:	a201      	add	r2, pc, #4	; (adr r2, 800a794 <UART_SetConfig+0x2ac>)
 800a78e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a792:	bf00      	nop
 800a794:	0800a7b5 	.word	0x0800a7b5
 800a798:	0800a7bd 	.word	0x0800a7bd
 800a79c:	0800a7e9 	.word	0x0800a7e9
 800a7a0:	0800a7c3 	.word	0x0800a7c3
 800a7a4:	0800a7e9 	.word	0x0800a7e9
 800a7a8:	0800a7e9 	.word	0x0800a7e9
 800a7ac:	0800a7e9 	.word	0x0800a7e9
 800a7b0:	0800a7cb 	.word	0x0800a7cb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a7b4:	f7fe f99e 	bl	8008af4 <HAL_RCC_GetPCLK2Freq>
 800a7b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a7ba:	e01b      	b.n	800a7f4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a7bc:	4b08      	ldr	r3, [pc, #32]	; (800a7e0 <UART_SetConfig+0x2f8>)
 800a7be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a7c0:	e018      	b.n	800a7f4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a7c2:	f7fe f901 	bl	80089c8 <HAL_RCC_GetSysClockFreq>
 800a7c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a7c8:	e014      	b.n	800a7f4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7ca:	f248 0306 	movw	r3, #32774	; 0x8006
 800a7ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a7d0:	e010      	b.n	800a7f4 <UART_SetConfig+0x30c>
 800a7d2:	bf00      	nop
 800a7d4:	cfff69f3 	.word	0xcfff69f3
 800a7d8:	40008000 	.word	0x40008000
 800a7dc:	40013800 	.word	0x40013800
 800a7e0:	00f42400 	.word	0x00f42400
 800a7e4:	0801832c 	.word	0x0801832c
      default:
        pclk = 0U;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a7f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	f000 8084 	beq.w	800a904 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a800:	4a4b      	ldr	r2, [pc, #300]	; (800a930 <UART_SetConfig+0x448>)
 800a802:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a806:	461a      	mov	r2, r3
 800a808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a80a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a80e:	005a      	lsls	r2, r3, #1
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	085b      	lsrs	r3, r3, #1
 800a816:	441a      	add	r2, r3
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a820:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a822:	6a3b      	ldr	r3, [r7, #32]
 800a824:	2b0f      	cmp	r3, #15
 800a826:	d916      	bls.n	800a856 <UART_SetConfig+0x36e>
 800a828:	6a3b      	ldr	r3, [r7, #32]
 800a82a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a82e:	d212      	bcs.n	800a856 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a830:	6a3b      	ldr	r3, [r7, #32]
 800a832:	b29b      	uxth	r3, r3
 800a834:	f023 030f 	bic.w	r3, r3, #15
 800a838:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a83a:	6a3b      	ldr	r3, [r7, #32]
 800a83c:	085b      	lsrs	r3, r3, #1
 800a83e:	b29b      	uxth	r3, r3
 800a840:	f003 0307 	and.w	r3, r3, #7
 800a844:	b29a      	uxth	r2, r3
 800a846:	8bfb      	ldrh	r3, [r7, #30]
 800a848:	4313      	orrs	r3, r2
 800a84a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	8bfa      	ldrh	r2, [r7, #30]
 800a852:	60da      	str	r2, [r3, #12]
 800a854:	e056      	b.n	800a904 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800a856:	2301      	movs	r3, #1
 800a858:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a85c:	e052      	b.n	800a904 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a85e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a862:	3b01      	subs	r3, #1
 800a864:	2b07      	cmp	r3, #7
 800a866:	d822      	bhi.n	800a8ae <UART_SetConfig+0x3c6>
 800a868:	a201      	add	r2, pc, #4	; (adr r2, 800a870 <UART_SetConfig+0x388>)
 800a86a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a86e:	bf00      	nop
 800a870:	0800a891 	.word	0x0800a891
 800a874:	0800a899 	.word	0x0800a899
 800a878:	0800a8af 	.word	0x0800a8af
 800a87c:	0800a89f 	.word	0x0800a89f
 800a880:	0800a8af 	.word	0x0800a8af
 800a884:	0800a8af 	.word	0x0800a8af
 800a888:	0800a8af 	.word	0x0800a8af
 800a88c:	0800a8a7 	.word	0x0800a8a7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a890:	f7fe f930 	bl	8008af4 <HAL_RCC_GetPCLK2Freq>
 800a894:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a896:	e010      	b.n	800a8ba <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a898:	4b26      	ldr	r3, [pc, #152]	; (800a934 <UART_SetConfig+0x44c>)
 800a89a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a89c:	e00d      	b.n	800a8ba <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a89e:	f7fe f893 	bl	80089c8 <HAL_RCC_GetSysClockFreq>
 800a8a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a8a4:	e009      	b.n	800a8ba <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8a6:	f248 0306 	movw	r3, #32774	; 0x8006
 800a8aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a8ac:	e005      	b.n	800a8ba <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a8b8:	bf00      	nop
    }

    if (pclk != 0U)
 800a8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d021      	beq.n	800a904 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c4:	4a1a      	ldr	r2, [pc, #104]	; (800a930 <UART_SetConfig+0x448>)
 800a8c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ce:	fbb3 f2f2 	udiv	r2, r3, r2
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	085b      	lsrs	r3, r3, #1
 800a8d8:	441a      	add	r2, r3
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	685b      	ldr	r3, [r3, #4]
 800a8de:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a8e4:	6a3b      	ldr	r3, [r7, #32]
 800a8e6:	2b0f      	cmp	r3, #15
 800a8e8:	d909      	bls.n	800a8fe <UART_SetConfig+0x416>
 800a8ea:	6a3b      	ldr	r3, [r7, #32]
 800a8ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8f0:	d205      	bcs.n	800a8fe <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a8f2:	6a3b      	ldr	r3, [r7, #32]
 800a8f4:	b29a      	uxth	r2, r3
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	60da      	str	r2, [r3, #12]
 800a8fc:	e002      	b.n	800a904 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800a8fe:	2301      	movs	r3, #1
 800a900:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	2201      	movs	r2, #1
 800a908:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	2201      	movs	r2, #1
 800a910:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	2200      	movs	r2, #0
 800a918:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	2200      	movs	r2, #0
 800a91e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a920:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800a924:	4618      	mov	r0, r3
 800a926:	3730      	adds	r7, #48	; 0x30
 800a928:	46bd      	mov	sp, r7
 800a92a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a92e:	bf00      	nop
 800a930:	0801832c 	.word	0x0801832c
 800a934:	00f42400 	.word	0x00f42400

0800a938 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a938:	b480      	push	{r7}
 800a93a:	b083      	sub	sp, #12
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a944:	f003 0308 	and.w	r3, r3, #8
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d00a      	beq.n	800a962 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	685b      	ldr	r3, [r3, #4]
 800a952:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	430a      	orrs	r2, r1
 800a960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a966:	f003 0301 	and.w	r3, r3, #1
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d00a      	beq.n	800a984 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	430a      	orrs	r2, r1
 800a982:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a988:	f003 0302 	and.w	r3, r3, #2
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d00a      	beq.n	800a9a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	685b      	ldr	r3, [r3, #4]
 800a996:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	430a      	orrs	r2, r1
 800a9a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9aa:	f003 0304 	and.w	r3, r3, #4
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d00a      	beq.n	800a9c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	430a      	orrs	r2, r1
 800a9c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9cc:	f003 0310 	and.w	r3, r3, #16
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d00a      	beq.n	800a9ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	689b      	ldr	r3, [r3, #8]
 800a9da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	430a      	orrs	r2, r1
 800a9e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ee:	f003 0320 	and.w	r3, r3, #32
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d00a      	beq.n	800aa0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	430a      	orrs	r2, r1
 800aa0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d01a      	beq.n	800aa4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	430a      	orrs	r2, r1
 800aa2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa36:	d10a      	bne.n	800aa4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	430a      	orrs	r2, r1
 800aa4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d00a      	beq.n	800aa70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	430a      	orrs	r2, r1
 800aa6e:	605a      	str	r2, [r3, #4]
  }
}
 800aa70:	bf00      	nop
 800aa72:	370c      	adds	r7, #12
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b098      	sub	sp, #96	; 0x60
 800aa80:	af02      	add	r7, sp, #8
 800aa82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aa8c:	f7fa f90a 	bl	8004ca4 <HAL_GetTick>
 800aa90:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f003 0308 	and.w	r3, r3, #8
 800aa9c:	2b08      	cmp	r3, #8
 800aa9e:	d12f      	bne.n	800ab00 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aaa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aaa4:	9300      	str	r3, [sp, #0]
 800aaa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 f88e 	bl	800abd0 <UART_WaitOnFlagUntilTimeout>
 800aab4:	4603      	mov	r3, r0
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d022      	beq.n	800ab00 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aac2:	e853 3f00 	ldrex	r3, [r3]
 800aac6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aace:	653b      	str	r3, [r7, #80]	; 0x50
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	461a      	mov	r2, r3
 800aad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aad8:	647b      	str	r3, [r7, #68]	; 0x44
 800aada:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aadc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aade:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aae0:	e841 2300 	strex	r3, r2, [r1]
 800aae4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d1e6      	bne.n	800aaba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2220      	movs	r2, #32
 800aaf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aafc:	2303      	movs	r3, #3
 800aafe:	e063      	b.n	800abc8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f003 0304 	and.w	r3, r3, #4
 800ab0a:	2b04      	cmp	r3, #4
 800ab0c:	d149      	bne.n	800aba2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab0e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ab12:	9300      	str	r3, [sp, #0]
 800ab14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab16:	2200      	movs	r2, #0
 800ab18:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f000 f857 	bl	800abd0 <UART_WaitOnFlagUntilTimeout>
 800ab22:	4603      	mov	r3, r0
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d03c      	beq.n	800aba2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab30:	e853 3f00 	ldrex	r3, [r3]
 800ab34:	623b      	str	r3, [r7, #32]
   return(result);
 800ab36:	6a3b      	ldr	r3, [r7, #32]
 800ab38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	461a      	mov	r2, r3
 800ab44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab46:	633b      	str	r3, [r7, #48]	; 0x30
 800ab48:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab4e:	e841 2300 	strex	r3, r2, [r1]
 800ab52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d1e6      	bne.n	800ab28 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	3308      	adds	r3, #8
 800ab60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	e853 3f00 	ldrex	r3, [r3]
 800ab68:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	f023 0301 	bic.w	r3, r3, #1
 800ab70:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	3308      	adds	r3, #8
 800ab78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab7a:	61fa      	str	r2, [r7, #28]
 800ab7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab7e:	69b9      	ldr	r1, [r7, #24]
 800ab80:	69fa      	ldr	r2, [r7, #28]
 800ab82:	e841 2300 	strex	r3, r2, [r1]
 800ab86:	617b      	str	r3, [r7, #20]
   return(result);
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d1e5      	bne.n	800ab5a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2220      	movs	r2, #32
 800ab92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab9e:	2303      	movs	r3, #3
 800aba0:	e012      	b.n	800abc8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2220      	movs	r2, #32
 800aba6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2220      	movs	r2, #32
 800abae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2200      	movs	r2, #0
 800abb6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2200      	movs	r2, #0
 800abbc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2200      	movs	r2, #0
 800abc2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800abc6:	2300      	movs	r3, #0
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3758      	adds	r7, #88	; 0x58
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	60f8      	str	r0, [r7, #12]
 800abd8:	60b9      	str	r1, [r7, #8]
 800abda:	603b      	str	r3, [r7, #0]
 800abdc:	4613      	mov	r3, r2
 800abde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abe0:	e049      	b.n	800ac76 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abe2:	69bb      	ldr	r3, [r7, #24]
 800abe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abe8:	d045      	beq.n	800ac76 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abea:	f7fa f85b 	bl	8004ca4 <HAL_GetTick>
 800abee:	4602      	mov	r2, r0
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	1ad3      	subs	r3, r2, r3
 800abf4:	69ba      	ldr	r2, [r7, #24]
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d302      	bcc.n	800ac00 <UART_WaitOnFlagUntilTimeout+0x30>
 800abfa:	69bb      	ldr	r3, [r7, #24]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d101      	bne.n	800ac04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ac00:	2303      	movs	r3, #3
 800ac02:	e048      	b.n	800ac96 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f003 0304 	and.w	r3, r3, #4
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d031      	beq.n	800ac76 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	69db      	ldr	r3, [r3, #28]
 800ac18:	f003 0308 	and.w	r3, r3, #8
 800ac1c:	2b08      	cmp	r3, #8
 800ac1e:	d110      	bne.n	800ac42 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	2208      	movs	r2, #8
 800ac26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ac28:	68f8      	ldr	r0, [r7, #12]
 800ac2a:	f000 f879 	bl	800ad20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2208      	movs	r2, #8
 800ac32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800ac3e:	2301      	movs	r3, #1
 800ac40:	e029      	b.n	800ac96 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	69db      	ldr	r3, [r3, #28]
 800ac48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac50:	d111      	bne.n	800ac76 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ac5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ac5c:	68f8      	ldr	r0, [r7, #12]
 800ac5e:	f000 f85f 	bl	800ad20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	2220      	movs	r2, #32
 800ac66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ac72:	2303      	movs	r3, #3
 800ac74:	e00f      	b.n	800ac96 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	69da      	ldr	r2, [r3, #28]
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	4013      	ands	r3, r2
 800ac80:	68ba      	ldr	r2, [r7, #8]
 800ac82:	429a      	cmp	r2, r3
 800ac84:	bf0c      	ite	eq
 800ac86:	2301      	moveq	r3, #1
 800ac88:	2300      	movne	r3, #0
 800ac8a:	b2db      	uxtb	r3, r3
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	79fb      	ldrb	r3, [r7, #7]
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d0a6      	beq.n	800abe2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ac94:	2300      	movs	r3, #0
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3710      	adds	r7, #16
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}

0800ac9e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ac9e:	b480      	push	{r7}
 800aca0:	b08f      	sub	sp, #60	; 0x3c
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acac:	6a3b      	ldr	r3, [r7, #32]
 800acae:	e853 3f00 	ldrex	r3, [r3]
 800acb2:	61fb      	str	r3, [r7, #28]
   return(result);
 800acb4:	69fb      	ldr	r3, [r7, #28]
 800acb6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800acba:	637b      	str	r3, [r7, #52]	; 0x34
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	461a      	mov	r2, r3
 800acc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800acc6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800acca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800accc:	e841 2300 	strex	r3, r2, [r1]
 800acd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800acd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d1e6      	bne.n	800aca6 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	3308      	adds	r3, #8
 800acde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	e853 3f00 	ldrex	r3, [r3]
 800ace6:	60bb      	str	r3, [r7, #8]
   return(result);
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800acee:	633b      	str	r3, [r7, #48]	; 0x30
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	3308      	adds	r3, #8
 800acf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acf8:	61ba      	str	r2, [r7, #24]
 800acfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acfc:	6979      	ldr	r1, [r7, #20]
 800acfe:	69ba      	ldr	r2, [r7, #24]
 800ad00:	e841 2300 	strex	r3, r2, [r1]
 800ad04:	613b      	str	r3, [r7, #16]
   return(result);
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d1e5      	bne.n	800acd8 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2220      	movs	r2, #32
 800ad10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800ad14:	bf00      	nop
 800ad16:	373c      	adds	r7, #60	; 0x3c
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr

0800ad20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b095      	sub	sp, #84	; 0x54
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad30:	e853 3f00 	ldrex	r3, [r3]
 800ad34:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ad36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	461a      	mov	r2, r3
 800ad44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad46:	643b      	str	r3, [r7, #64]	; 0x40
 800ad48:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ad4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad4e:	e841 2300 	strex	r3, r2, [r1]
 800ad52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d1e6      	bne.n	800ad28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	3308      	adds	r3, #8
 800ad60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad62:	6a3b      	ldr	r3, [r7, #32]
 800ad64:	e853 3f00 	ldrex	r3, [r3]
 800ad68:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad6a:	69fb      	ldr	r3, [r7, #28]
 800ad6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ad70:	f023 0301 	bic.w	r3, r3, #1
 800ad74:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	3308      	adds	r3, #8
 800ad7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ad80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad86:	e841 2300 	strex	r3, r2, [r1]
 800ad8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d1e3      	bne.n	800ad5a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d118      	bne.n	800adcc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	e853 3f00 	ldrex	r3, [r3]
 800ada6:	60bb      	str	r3, [r7, #8]
   return(result);
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	f023 0310 	bic.w	r3, r3, #16
 800adae:	647b      	str	r3, [r7, #68]	; 0x44
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	461a      	mov	r2, r3
 800adb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adb8:	61bb      	str	r3, [r7, #24]
 800adba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adbc:	6979      	ldr	r1, [r7, #20]
 800adbe:	69ba      	ldr	r2, [r7, #24]
 800adc0:	e841 2300 	strex	r3, r2, [r1]
 800adc4:	613b      	str	r3, [r7, #16]
   return(result);
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d1e6      	bne.n	800ad9a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2220      	movs	r2, #32
 800add0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2200      	movs	r2, #0
 800add8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2200      	movs	r2, #0
 800adde:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ade0:	bf00      	nop
 800ade2:	3754      	adds	r7, #84	; 0x54
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr

0800adec <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b090      	sub	sp, #64	; 0x40
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adf8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f003 0320 	and.w	r3, r3, #32
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d137      	bne.n	800ae78 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800ae08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ae10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	3308      	adds	r3, #8
 800ae16:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae1a:	e853 3f00 	ldrex	r3, [r3]
 800ae1e:	623b      	str	r3, [r7, #32]
   return(result);
 800ae20:	6a3b      	ldr	r3, [r7, #32]
 800ae22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae26:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	3308      	adds	r3, #8
 800ae2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae30:	633a      	str	r2, [r7, #48]	; 0x30
 800ae32:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae38:	e841 2300 	strex	r3, r2, [r1]
 800ae3c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ae3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d1e5      	bne.n	800ae10 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ae44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	e853 3f00 	ldrex	r3, [r3]
 800ae50:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae58:	637b      	str	r3, [r7, #52]	; 0x34
 800ae5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	461a      	mov	r2, r3
 800ae60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae62:	61fb      	str	r3, [r7, #28]
 800ae64:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae66:	69b9      	ldr	r1, [r7, #24]
 800ae68:	69fa      	ldr	r2, [r7, #28]
 800ae6a:	e841 2300 	strex	r3, r2, [r1]
 800ae6e:	617b      	str	r3, [r7, #20]
   return(result);
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d1e6      	bne.n	800ae44 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ae76:	e002      	b.n	800ae7e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800ae78:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ae7a:	f7f8 f9a3 	bl	80031c4 <HAL_UART_TxCpltCallback>
}
 800ae7e:	bf00      	nop
 800ae80:	3740      	adds	r7, #64	; 0x40
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}

0800ae86 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ae86:	b580      	push	{r7, lr}
 800ae88:	b084      	sub	sp, #16
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae92:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ae94:	68f8      	ldr	r0, [r7, #12]
 800ae96:	f7ff fb07 	bl	800a4a8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae9a:	bf00      	nop
 800ae9c:	3710      	adds	r7, #16
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}

0800aea2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b086      	sub	sp, #24
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeae:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aeb6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aebe:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	689b      	ldr	r3, [r3, #8]
 800aec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aeca:	2b80      	cmp	r3, #128	; 0x80
 800aecc:	d109      	bne.n	800aee2 <UART_DMAError+0x40>
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	2b21      	cmp	r3, #33	; 0x21
 800aed2:	d106      	bne.n	800aee2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	2200      	movs	r2, #0
 800aed8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800aedc:	6978      	ldr	r0, [r7, #20]
 800aede:	f7ff fede 	bl	800ac9e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	689b      	ldr	r3, [r3, #8]
 800aee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aeec:	2b40      	cmp	r3, #64	; 0x40
 800aeee:	d109      	bne.n	800af04 <UART_DMAError+0x62>
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2b22      	cmp	r3, #34	; 0x22
 800aef4:	d106      	bne.n	800af04 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	2200      	movs	r2, #0
 800aefa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800aefe:	6978      	ldr	r0, [r7, #20]
 800af00:	f7ff ff0e 	bl	800ad20 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af0a:	f043 0210 	orr.w	r2, r3, #16
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af14:	6978      	ldr	r0, [r7, #20]
 800af16:	f7ff fad1 	bl	800a4bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af1a:	bf00      	nop
 800af1c:	3718      	adds	r7, #24
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}

0800af22 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800af22:	b580      	push	{r7, lr}
 800af24:	b084      	sub	sp, #16
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	2200      	movs	r2, #0
 800af34:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	2200      	movs	r2, #0
 800af3c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af40:	68f8      	ldr	r0, [r7, #12]
 800af42:	f7ff fabb 	bl	800a4bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af46:	bf00      	nop
 800af48:	3710      	adds	r7, #16
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}

0800af4e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800af4e:	b580      	push	{r7, lr}
 800af50:	b088      	sub	sp, #32
 800af52:	af00      	add	r7, sp, #0
 800af54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	e853 3f00 	ldrex	r3, [r3]
 800af62:	60bb      	str	r3, [r7, #8]
   return(result);
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af6a:	61fb      	str	r3, [r7, #28]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	461a      	mov	r2, r3
 800af72:	69fb      	ldr	r3, [r7, #28]
 800af74:	61bb      	str	r3, [r7, #24]
 800af76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af78:	6979      	ldr	r1, [r7, #20]
 800af7a:	69ba      	ldr	r2, [r7, #24]
 800af7c:	e841 2300 	strex	r3, r2, [r1]
 800af80:	613b      	str	r3, [r7, #16]
   return(result);
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d1e6      	bne.n	800af56 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2220      	movs	r2, #32
 800af8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2200      	movs	r2, #0
 800af94:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f7f8 f914 	bl	80031c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af9c:	bf00      	nop
 800af9e:	3720      	adds	r7, #32
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800afa4:	b480      	push	{r7}
 800afa6:	b083      	sub	sp, #12
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800afac:	bf00      	nop
 800afae:	370c      	adds	r7, #12
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr

0800afb8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800afb8:	b480      	push	{r7}
 800afba:	b083      	sub	sp, #12
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800afc0:	bf00      	nop
 800afc2:	370c      	adds	r7, #12
 800afc4:	46bd      	mov	sp, r7
 800afc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afca:	4770      	bx	lr

0800afcc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800afcc:	b480      	push	{r7}
 800afce:	b083      	sub	sp, #12
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800afd4:	bf00      	nop
 800afd6:	370c      	adds	r7, #12
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr

0800afe0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b085      	sub	sp, #20
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800afee:	2b01      	cmp	r3, #1
 800aff0:	d101      	bne.n	800aff6 <HAL_UARTEx_DisableFifoMode+0x16>
 800aff2:	2302      	movs	r3, #2
 800aff4:	e027      	b.n	800b046 <HAL_UARTEx_DisableFifoMode+0x66>
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2201      	movs	r2, #1
 800affa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2224      	movs	r2, #36	; 0x24
 800b002:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	681a      	ldr	r2, [r3, #0]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f022 0201 	bic.w	r2, r2, #1
 800b01c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b024:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2200      	movs	r2, #0
 800b02a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	68fa      	ldr	r2, [r7, #12]
 800b032:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2220      	movs	r2, #32
 800b038:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2200      	movs	r2, #0
 800b040:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b044:	2300      	movs	r3, #0
}
 800b046:	4618      	mov	r0, r3
 800b048:	3714      	adds	r7, #20
 800b04a:	46bd      	mov	sp, r7
 800b04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b050:	4770      	bx	lr

0800b052 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b052:	b580      	push	{r7, lr}
 800b054:	b084      	sub	sp, #16
 800b056:	af00      	add	r7, sp, #0
 800b058:	6078      	str	r0, [r7, #4]
 800b05a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b062:	2b01      	cmp	r3, #1
 800b064:	d101      	bne.n	800b06a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b066:	2302      	movs	r3, #2
 800b068:	e02d      	b.n	800b0c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2201      	movs	r2, #1
 800b06e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2224      	movs	r2, #36	; 0x24
 800b076:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	681a      	ldr	r2, [r3, #0]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f022 0201 	bic.w	r2, r2, #1
 800b090:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	689b      	ldr	r3, [r3, #8]
 800b098:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	683a      	ldr	r2, [r7, #0]
 800b0a2:	430a      	orrs	r2, r1
 800b0a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f000 f850 	bl	800b14c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	68fa      	ldr	r2, [r7, #12]
 800b0b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2220      	movs	r2, #32
 800b0b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b0c4:	2300      	movs	r3, #0
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3710      	adds	r7, #16
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b084      	sub	sp, #16
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
 800b0d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b0de:	2b01      	cmp	r3, #1
 800b0e0:	d101      	bne.n	800b0e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b0e2:	2302      	movs	r3, #2
 800b0e4:	e02d      	b.n	800b142 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2201      	movs	r2, #1
 800b0ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2224      	movs	r2, #36	; 0x24
 800b0f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	681a      	ldr	r2, [r3, #0]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f022 0201 	bic.w	r2, r2, #1
 800b10c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	689b      	ldr	r3, [r3, #8]
 800b114:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	683a      	ldr	r2, [r7, #0]
 800b11e:	430a      	orrs	r2, r1
 800b120:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f000 f812 	bl	800b14c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	68fa      	ldr	r2, [r7, #12]
 800b12e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2220      	movs	r2, #32
 800b134:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2200      	movs	r2, #0
 800b13c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b140:	2300      	movs	r3, #0
}
 800b142:	4618      	mov	r0, r3
 800b144:	3710      	adds	r7, #16
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
	...

0800b14c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b085      	sub	sp, #20
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d108      	bne.n	800b16e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2201      	movs	r2, #1
 800b160:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2201      	movs	r2, #1
 800b168:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b16c:	e031      	b.n	800b1d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b16e:	2308      	movs	r3, #8
 800b170:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b172:	2308      	movs	r3, #8
 800b174:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	689b      	ldr	r3, [r3, #8]
 800b17c:	0e5b      	lsrs	r3, r3, #25
 800b17e:	b2db      	uxtb	r3, r3
 800b180:	f003 0307 	and.w	r3, r3, #7
 800b184:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	689b      	ldr	r3, [r3, #8]
 800b18c:	0f5b      	lsrs	r3, r3, #29
 800b18e:	b2db      	uxtb	r3, r3
 800b190:	f003 0307 	and.w	r3, r3, #7
 800b194:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b196:	7bbb      	ldrb	r3, [r7, #14]
 800b198:	7b3a      	ldrb	r2, [r7, #12]
 800b19a:	4911      	ldr	r1, [pc, #68]	; (800b1e0 <UARTEx_SetNbDataToProcess+0x94>)
 800b19c:	5c8a      	ldrb	r2, [r1, r2]
 800b19e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b1a2:	7b3a      	ldrb	r2, [r7, #12]
 800b1a4:	490f      	ldr	r1, [pc, #60]	; (800b1e4 <UARTEx_SetNbDataToProcess+0x98>)
 800b1a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b1a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b1ac:	b29a      	uxth	r2, r3
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b1b4:	7bfb      	ldrb	r3, [r7, #15]
 800b1b6:	7b7a      	ldrb	r2, [r7, #13]
 800b1b8:	4909      	ldr	r1, [pc, #36]	; (800b1e0 <UARTEx_SetNbDataToProcess+0x94>)
 800b1ba:	5c8a      	ldrb	r2, [r1, r2]
 800b1bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b1c0:	7b7a      	ldrb	r2, [r7, #13]
 800b1c2:	4908      	ldr	r1, [pc, #32]	; (800b1e4 <UARTEx_SetNbDataToProcess+0x98>)
 800b1c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b1c6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b1ca:	b29a      	uxth	r2, r3
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b1d2:	bf00      	nop
 800b1d4:	3714      	adds	r7, #20
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1dc:	4770      	bx	lr
 800b1de:	bf00      	nop
 800b1e0:	08018344 	.word	0x08018344
 800b1e4:	0801834c 	.word	0x0801834c

0800b1e8 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b088      	sub	sp, #32
 800b1ec:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b1f2:	f107 0308 	add.w	r3, r7, #8
 800b1f6:	2218      	movs	r2, #24
 800b1f8:	2100      	movs	r1, #0
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f001 f92d 	bl	800c45a <Osal_MemSet>
  rq.ogf = 0x3f;
 800b200:	233f      	movs	r3, #63	; 0x3f
 800b202:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800b204:	2381      	movs	r3, #129	; 0x81
 800b206:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b208:	1dfb      	adds	r3, r7, #7
 800b20a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b20c:	2301      	movs	r3, #1
 800b20e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b210:	f107 0308 	add.w	r3, r7, #8
 800b214:	2100      	movs	r1, #0
 800b216:	4618      	mov	r0, r3
 800b218:	f001 fba8 	bl	800c96c <hci_send_req>
 800b21c:	4603      	mov	r3, r0
 800b21e:	2b00      	cmp	r3, #0
 800b220:	da01      	bge.n	800b226 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800b222:	23ff      	movs	r3, #255	; 0xff
 800b224:	e000      	b.n	800b228 <aci_gap_set_non_discoverable+0x40>
  return status;
 800b226:	79fb      	ldrb	r3, [r7, #7]
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3720      	adds	r7, #32
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}

0800b230 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800b230:	b5b0      	push	{r4, r5, r7, lr}
 800b232:	b0ce      	sub	sp, #312	; 0x138
 800b234:	af00      	add	r7, sp, #0
 800b236:	4605      	mov	r5, r0
 800b238:	460c      	mov	r4, r1
 800b23a:	4610      	mov	r0, r2
 800b23c:	4619      	mov	r1, r3
 800b23e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b242:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800b246:	462a      	mov	r2, r5
 800b248:	701a      	strb	r2, [r3, #0]
 800b24a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b24e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800b252:	4622      	mov	r2, r4
 800b254:	801a      	strh	r2, [r3, #0]
 800b256:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b25a:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800b25e:	4602      	mov	r2, r0
 800b260:	801a      	strh	r2, [r3, #0]
 800b262:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b266:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800b26a:	460a      	mov	r2, r1
 800b26c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800b26e:	f107 0310 	add.w	r3, r7, #16
 800b272:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800b276:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800b27a:	3308      	adds	r3, #8
 800b27c:	f107 0210 	add.w	r2, r7, #16
 800b280:	4413      	add	r3, r2
 800b282:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800b286:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800b28a:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800b28e:	4413      	add	r3, r2
 800b290:	3309      	adds	r3, #9
 800b292:	f107 0210 	add.w	r2, r7, #16
 800b296:	4413      	add	r3, r2
 800b298:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b29c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b2a0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800b2ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b2b2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800b2b6:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800b2ba:	7812      	ldrb	r2, [r2, #0]
 800b2bc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b2be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800b2c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b2cc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800b2d0:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800b2d4:	8812      	ldrh	r2, [r2, #0]
 800b2d6:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800b2da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b2de:	3302      	adds	r3, #2
 800b2e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800b2e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b2e8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800b2ec:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 800b2f0:	8812      	ldrh	r2, [r2, #0]
 800b2f2:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800b2f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b2fa:	3302      	adds	r3, #2
 800b2fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800b300:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b304:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800b308:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800b30c:	7812      	ldrb	r2, [r2, #0]
 800b30e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800b310:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b314:	3301      	adds	r3, #1
 800b316:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800b31a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b31e:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800b322:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800b324:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b328:	3301      	adds	r3, #1
 800b32a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800b32e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b332:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800b336:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800b338:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b33c:	3301      	adds	r3, #1
 800b33e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800b342:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b346:	3308      	adds	r3, #8
 800b348:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800b34c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800b350:	4618      	mov	r0, r3
 800b352:	f001 f872 	bl	800c43a <Osal_MemCpy>
    index_input += Local_Name_Length;
 800b356:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800b35a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b35e:	4413      	add	r3, r2
 800b360:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800b364:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b368:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800b36c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800b36e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b372:	3301      	adds	r3, #1
 800b374:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800b378:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b37c:	3301      	adds	r3, #1
 800b37e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800b382:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800b386:	4618      	mov	r0, r3
 800b388:	f001 f857 	bl	800c43a <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800b38c:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800b390:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b394:	4413      	add	r3, r2
 800b396:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800b39a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b39e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800b3a2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800b3a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b3a8:	3302      	adds	r3, #2
 800b3aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800b3ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b3b2:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800b3b6:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800b3b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b3bc:	3302      	adds	r3, #2
 800b3be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b3c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b3c6:	2218      	movs	r2, #24
 800b3c8:	2100      	movs	r1, #0
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f001 f845 	bl	800c45a <Osal_MemSet>
  rq.ogf = 0x3f;
 800b3d0:	233f      	movs	r3, #63	; 0x3f
 800b3d2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800b3d6:	2383      	movs	r3, #131	; 0x83
 800b3d8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b3dc:	f107 0310 	add.w	r3, r7, #16
 800b3e0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b3e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b3e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b3ec:	f107 030f 	add.w	r3, r7, #15
 800b3f0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b3fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b3fe:	2100      	movs	r1, #0
 800b400:	4618      	mov	r0, r3
 800b402:	f001 fab3 	bl	800c96c <hci_send_req>
 800b406:	4603      	mov	r3, r0
 800b408:	2b00      	cmp	r3, #0
 800b40a:	da01      	bge.n	800b410 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800b40c:	23ff      	movs	r3, #255	; 0xff
 800b40e:	e004      	b.n	800b41a <aci_gap_set_discoverable+0x1ea>
  return status;
 800b410:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b414:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800b418:	781b      	ldrb	r3, [r3, #0]
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800b420:	46bd      	mov	sp, r7
 800b422:	bdb0      	pop	{r4, r5, r7, pc}

0800b424 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b0cc      	sub	sp, #304	; 0x130
 800b428:	af00      	add	r7, sp, #0
 800b42a:	4602      	mov	r2, r0
 800b42c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b430:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800b434:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800b436:	f107 0310 	add.w	r3, r7, #16
 800b43a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b43e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b442:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b446:	2200      	movs	r2, #0
 800b448:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b44a:	2300      	movs	r3, #0
 800b44c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800b450:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b454:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b458:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800b45c:	7812      	ldrb	r2, [r2, #0]
 800b45e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b460:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b464:	3301      	adds	r3, #1
 800b466:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b46a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b46e:	2218      	movs	r2, #24
 800b470:	2100      	movs	r1, #0
 800b472:	4618      	mov	r0, r3
 800b474:	f000 fff1 	bl	800c45a <Osal_MemSet>
  rq.ogf = 0x3f;
 800b478:	233f      	movs	r3, #63	; 0x3f
 800b47a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800b47e:	2385      	movs	r3, #133	; 0x85
 800b480:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b484:	f107 0310 	add.w	r3, r7, #16
 800b488:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b48c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b490:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b494:	f107 030f 	add.w	r3, r7, #15
 800b498:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b49c:	2301      	movs	r3, #1
 800b49e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b4a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b4a6:	2100      	movs	r1, #0
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f001 fa5f 	bl	800c96c <hci_send_req>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	da01      	bge.n	800b4b8 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800b4b4:	23ff      	movs	r3, #255	; 0xff
 800b4b6:	e004      	b.n	800b4c2 <aci_gap_set_io_capability+0x9e>
  return status;
 800b4b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4bc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b4c0:	781b      	ldrb	r3, [r3, #0]
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800b4cc:	b5b0      	push	{r4, r5, r7, lr}
 800b4ce:	b0cc      	sub	sp, #304	; 0x130
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	4605      	mov	r5, r0
 800b4d4:	460c      	mov	r4, r1
 800b4d6:	4610      	mov	r0, r2
 800b4d8:	4619      	mov	r1, r3
 800b4da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4de:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800b4e2:	462a      	mov	r2, r5
 800b4e4:	701a      	strb	r2, [r3, #0]
 800b4e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4ea:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800b4ee:	4622      	mov	r2, r4
 800b4f0:	701a      	strb	r2, [r3, #0]
 800b4f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4f6:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	701a      	strb	r2, [r3, #0]
 800b4fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b502:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b506:	460a      	mov	r2, r1
 800b508:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800b50a:	f107 0310 	add.w	r3, r7, #16
 800b50e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b512:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b516:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b51a:	2200      	movs	r2, #0
 800b51c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b51e:	2300      	movs	r3, #0
 800b520:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800b524:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b528:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b52c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800b530:	7812      	ldrb	r2, [r2, #0]
 800b532:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b534:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b538:	3301      	adds	r3, #1
 800b53a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800b53e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b542:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b546:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800b54a:	7812      	ldrb	r2, [r2, #0]
 800b54c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b54e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b552:	3301      	adds	r3, #1
 800b554:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800b558:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b55c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b560:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800b564:	7812      	ldrb	r2, [r2, #0]
 800b566:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800b568:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b56c:	3301      	adds	r3, #1
 800b56e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800b572:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b576:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b57a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800b57e:	7812      	ldrb	r2, [r2, #0]
 800b580:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800b582:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b586:	3301      	adds	r3, #1
 800b588:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800b58c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b590:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800b594:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800b596:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b59a:	3301      	adds	r3, #1
 800b59c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800b5a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5a4:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800b5a8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800b5aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b5ae:	3301      	adds	r3, #1
 800b5b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800b5b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5b8:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800b5bc:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800b5be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b5c2:	3301      	adds	r3, #1
 800b5c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800b5c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5cc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800b5d0:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800b5d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b5d8:	3304      	adds	r3, #4
 800b5da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800b5de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5e2:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800b5e6:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800b5e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b5ec:	3301      	adds	r3, #1
 800b5ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b5f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b5f6:	2218      	movs	r2, #24
 800b5f8:	2100      	movs	r1, #0
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f000 ff2d 	bl	800c45a <Osal_MemSet>
  rq.ogf = 0x3f;
 800b600:	233f      	movs	r3, #63	; 0x3f
 800b602:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800b606:	2386      	movs	r3, #134	; 0x86
 800b608:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b60c:	f107 0310 	add.w	r3, r7, #16
 800b610:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b614:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b618:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b61c:	f107 030f 	add.w	r3, r7, #15
 800b620:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b624:	2301      	movs	r3, #1
 800b626:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b62a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b62e:	2100      	movs	r1, #0
 800b630:	4618      	mov	r0, r3
 800b632:	f001 f99b 	bl	800c96c <hci_send_req>
 800b636:	4603      	mov	r3, r0
 800b638:	2b00      	cmp	r3, #0
 800b63a:	da01      	bge.n	800b640 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800b63c:	23ff      	movs	r3, #255	; 0xff
 800b63e:	e004      	b.n	800b64a <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800b640:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b644:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b648:	781b      	ldrb	r3, [r3, #0]
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b650:	46bd      	mov	sp, r7
 800b652:	bdb0      	pop	{r4, r5, r7, pc}

0800b654 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b0cc      	sub	sp, #304	; 0x130
 800b658:	af00      	add	r7, sp, #0
 800b65a:	4602      	mov	r2, r0
 800b65c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b660:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b664:	6019      	str	r1, [r3, #0]
 800b666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b66a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800b66e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800b670:	f107 0310 	add.w	r3, r7, #16
 800b674:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b678:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b67c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b680:	2200      	movs	r2, #0
 800b682:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b684:	2300      	movs	r3, #0
 800b686:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800b68a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b68e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b692:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800b696:	8812      	ldrh	r2, [r2, #0]
 800b698:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b69a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b69e:	3302      	adds	r3, #2
 800b6a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 800b6a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b6a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b6ac:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800b6b0:	6812      	ldr	r2, [r2, #0]
 800b6b2:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800b6b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b6ba:	3304      	adds	r3, #4
 800b6bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b6c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b6c4:	2218      	movs	r2, #24
 800b6c6:	2100      	movs	r1, #0
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f000 fec6 	bl	800c45a <Osal_MemSet>
  rq.ogf = 0x3f;
 800b6ce:	233f      	movs	r3, #63	; 0x3f
 800b6d0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 800b6d4:	2388      	movs	r3, #136	; 0x88
 800b6d6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b6da:	f107 0310 	add.w	r3, r7, #16
 800b6de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b6e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b6e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b6ea:	f107 030f 	add.w	r3, r7, #15
 800b6ee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b6f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b6fc:	2100      	movs	r1, #0
 800b6fe:	4618      	mov	r0, r3
 800b700:	f001 f934 	bl	800c96c <hci_send_req>
 800b704:	4603      	mov	r3, r0
 800b706:	2b00      	cmp	r3, #0
 800b708:	da01      	bge.n	800b70e <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800b70a:	23ff      	movs	r3, #255	; 0xff
 800b70c:	e004      	b.n	800b718 <aci_gap_pass_key_resp+0xc4>
  return status;
 800b70e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b712:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b716:	781b      	ldrb	r3, [r3, #0]
}
 800b718:	4618      	mov	r0, r3
 800b71a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}

0800b722 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800b722:	b590      	push	{r4, r7, lr}
 800b724:	b0cd      	sub	sp, #308	; 0x134
 800b726:	af00      	add	r7, sp, #0
 800b728:	4604      	mov	r4, r0
 800b72a:	4608      	mov	r0, r1
 800b72c:	4611      	mov	r1, r2
 800b72e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b732:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800b736:	6013      	str	r3, [r2, #0]
 800b738:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b73c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800b740:	4622      	mov	r2, r4
 800b742:	701a      	strb	r2, [r3, #0]
 800b744:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b748:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800b74c:	4602      	mov	r2, r0
 800b74e:	701a      	strb	r2, [r3, #0]
 800b750:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b754:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800b758:	460a      	mov	r2, r1
 800b75a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800b75c:	f107 0310 	add.w	r3, r7, #16
 800b760:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800b764:	f107 0308 	add.w	r3, r7, #8
 800b768:	2207      	movs	r2, #7
 800b76a:	2100      	movs	r1, #0
 800b76c:	4618      	mov	r0, r3
 800b76e:	f000 fe74 	bl	800c45a <Osal_MemSet>
  int index_input = 0;
 800b772:	2300      	movs	r3, #0
 800b774:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800b778:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b77c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b780:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800b784:	7812      	ldrb	r2, [r2, #0]
 800b786:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b788:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b78c:	3301      	adds	r3, #1
 800b78e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800b792:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b796:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b79a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800b79e:	7812      	ldrb	r2, [r2, #0]
 800b7a0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b7a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800b7ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b7b0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b7b4:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800b7b8:	7812      	ldrb	r2, [r2, #0]
 800b7ba:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800b7bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b7c0:	3301      	adds	r3, #1
 800b7c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b7c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b7ca:	2218      	movs	r2, #24
 800b7cc:	2100      	movs	r1, #0
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f000 fe43 	bl	800c45a <Osal_MemSet>
  rq.ogf = 0x3f;
 800b7d4:	233f      	movs	r3, #63	; 0x3f
 800b7d6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800b7da:	238a      	movs	r3, #138	; 0x8a
 800b7dc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b7e0:	f107 0310 	add.w	r3, r7, #16
 800b7e4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b7e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b7ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800b7f0:	f107 0308 	add.w	r3, r7, #8
 800b7f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800b7f8:	2307      	movs	r3, #7
 800b7fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b7fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b802:	2100      	movs	r1, #0
 800b804:	4618      	mov	r0, r3
 800b806:	f001 f8b1 	bl	800c96c <hci_send_req>
 800b80a:	4603      	mov	r3, r0
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	da01      	bge.n	800b814 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800b810:	23ff      	movs	r3, #255	; 0xff
 800b812:	e02e      	b.n	800b872 <aci_gap_init+0x150>
  if ( resp.Status )
 800b814:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b818:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d005      	beq.n	800b82e <aci_gap_init+0x10c>
    return resp.Status;
 800b822:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b826:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800b82a:	781b      	ldrb	r3, [r3, #0]
 800b82c:	e021      	b.n	800b872 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800b82e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b832:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800b836:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b83a:	b29a      	uxth	r2, r3
 800b83c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b840:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800b848:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b84c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800b850:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800b854:	b29a      	uxth	r2, r3
 800b856:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800b85a:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800b85c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b860:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800b864:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800b868:	b29a      	uxth	r2, r3
 800b86a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800b86e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800b870:	2300      	movs	r3, #0
}
 800b872:	4618      	mov	r0, r3
 800b874:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd90      	pop	{r4, r7, pc}

0800b87c <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b0cc      	sub	sp, #304	; 0x130
 800b880:	af00      	add	r7, sp, #0
 800b882:	4602      	mov	r2, r0
 800b884:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b888:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b88c:	6019      	str	r1, [r3, #0]
 800b88e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b892:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800b896:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800b898:	f107 0310 	add.w	r3, r7, #16
 800b89c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b8a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b8a4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800b8b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b8b6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b8ba:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800b8be:	7812      	ldrb	r2, [r2, #0]
 800b8c0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b8c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800b8cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b8d0:	1c58      	adds	r0, r3, #1
 800b8d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b8d6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800b8da:	781a      	ldrb	r2, [r3, #0]
 800b8dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b8e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b8e4:	6819      	ldr	r1, [r3, #0]
 800b8e6:	f000 fda8 	bl	800c43a <Osal_MemCpy>
  index_input += AdvDataLen;
 800b8ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b8ee:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800b8f2:	781b      	ldrb	r3, [r3, #0]
 800b8f4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b8f8:	4413      	add	r3, r2
 800b8fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b8fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b902:	2218      	movs	r2, #24
 800b904:	2100      	movs	r1, #0
 800b906:	4618      	mov	r0, r3
 800b908:	f000 fda7 	bl	800c45a <Osal_MemSet>
  rq.ogf = 0x3f;
 800b90c:	233f      	movs	r3, #63	; 0x3f
 800b90e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800b912:	238e      	movs	r3, #142	; 0x8e
 800b914:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b918:	f107 0310 	add.w	r3, r7, #16
 800b91c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b920:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b924:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b928:	f107 030f 	add.w	r3, r7, #15
 800b92c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b930:	2301      	movs	r3, #1
 800b932:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b936:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b93a:	2100      	movs	r1, #0
 800b93c:	4618      	mov	r0, r3
 800b93e:	f001 f815 	bl	800c96c <hci_send_req>
 800b942:	4603      	mov	r3, r0
 800b944:	2b00      	cmp	r3, #0
 800b946:	da01      	bge.n	800b94c <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800b948:	23ff      	movs	r3, #255	; 0xff
 800b94a:	e004      	b.n	800b956 <aci_gap_update_adv_data+0xda>
  return status;
 800b94c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b950:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b954:	781b      	ldrb	r3, [r3, #0]
}
 800b956:	4618      	mov	r0, r3
 800b958:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b088      	sub	sp, #32
 800b964:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b966:	2300      	movs	r3, #0
 800b968:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b96a:	f107 0308 	add.w	r3, r7, #8
 800b96e:	2218      	movs	r2, #24
 800b970:	2100      	movs	r1, #0
 800b972:	4618      	mov	r0, r3
 800b974:	f000 fd71 	bl	800c45a <Osal_MemSet>
  rq.ogf = 0x3f;
 800b978:	233f      	movs	r3, #63	; 0x3f
 800b97a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800b97c:	2392      	movs	r3, #146	; 0x92
 800b97e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b980:	1dfb      	adds	r3, r7, #7
 800b982:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b984:	2301      	movs	r3, #1
 800b986:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b988:	f107 0308 	add.w	r3, r7, #8
 800b98c:	2100      	movs	r1, #0
 800b98e:	4618      	mov	r0, r3
 800b990:	f000 ffec 	bl	800c96c <hci_send_req>
 800b994:	4603      	mov	r3, r0
 800b996:	2b00      	cmp	r3, #0
 800b998:	da01      	bge.n	800b99e <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800b99a:	23ff      	movs	r3, #255	; 0xff
 800b99c:	e000      	b.n	800b9a0 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800b99e:	79fb      	ldrb	r3, [r7, #7]
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3720      	adds	r7, #32
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}

0800b9a8 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b0cc      	sub	sp, #304	; 0x130
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	4602      	mov	r2, r0
 800b9b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b9b4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800b9b8:	801a      	strh	r2, [r3, #0]
 800b9ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b9be:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800b9c2:	460a      	mov	r2, r1
 800b9c4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800b9c6:	f107 0310 	add.w	r3, r7, #16
 800b9ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b9ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b9d2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800b9e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b9e4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b9e8:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800b9ec:	8812      	ldrh	r2, [r2, #0]
 800b9ee:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b9f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b9f4:	3302      	adds	r3, #2
 800b9f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800b9fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b9fe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ba02:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800ba06:	7812      	ldrb	r2, [r2, #0]
 800ba08:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ba0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ba0e:	3301      	adds	r3, #1
 800ba10:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ba14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ba18:	2218      	movs	r2, #24
 800ba1a:	2100      	movs	r1, #0
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f000 fd1c 	bl	800c45a <Osal_MemSet>
  rq.ogf = 0x3f;
 800ba22:	233f      	movs	r3, #63	; 0x3f
 800ba24:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 800ba28:	23a5      	movs	r3, #165	; 0xa5
 800ba2a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ba2e:	f107 0310 	add.w	r3, r7, #16
 800ba32:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ba36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ba3a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ba3e:	f107 030f 	add.w	r3, r7, #15
 800ba42:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ba46:	2301      	movs	r3, #1
 800ba48:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ba4c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ba50:	2100      	movs	r1, #0
 800ba52:	4618      	mov	r0, r3
 800ba54:	f000 ff8a 	bl	800c96c <hci_send_req>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	da01      	bge.n	800ba62 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800ba5e:	23ff      	movs	r3, #255	; 0xff
 800ba60:	e004      	b.n	800ba6c <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800ba62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba66:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ba6a:	781b      	ldrb	r3, [r3, #0]
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}

0800ba76 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800ba76:	b580      	push	{r7, lr}
 800ba78:	b088      	sub	sp, #32
 800ba7a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ba80:	f107 0308 	add.w	r3, r7, #8
 800ba84:	2218      	movs	r2, #24
 800ba86:	2100      	movs	r1, #0
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f000 fce6 	bl	800c45a <Osal_MemSet>
  rq.ogf = 0x3f;
 800ba8e:	233f      	movs	r3, #63	; 0x3f
 800ba90:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800ba92:	f240 1301 	movw	r3, #257	; 0x101
 800ba96:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ba98:	1dfb      	adds	r3, r7, #7
 800ba9a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800baa0:	f107 0308 	add.w	r3, r7, #8
 800baa4:	2100      	movs	r1, #0
 800baa6:	4618      	mov	r0, r3
 800baa8:	f000 ff60 	bl	800c96c <hci_send_req>
 800baac:	4603      	mov	r3, r0
 800baae:	2b00      	cmp	r3, #0
 800bab0:	da01      	bge.n	800bab6 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800bab2:	23ff      	movs	r3, #255	; 0xff
 800bab4:	e000      	b.n	800bab8 <aci_gatt_init+0x42>
  return status;
 800bab6:	79fb      	ldrb	r3, [r7, #7]
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3720      	adds	r7, #32
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}

0800bac0 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800bac0:	b590      	push	{r4, r7, lr}
 800bac2:	b0cf      	sub	sp, #316	; 0x13c
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	4604      	mov	r4, r0
 800bac8:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800bacc:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800bad0:	6001      	str	r1, [r0, #0]
 800bad2:	4610      	mov	r0, r2
 800bad4:	4619      	mov	r1, r3
 800bad6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800bada:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800bade:	4622      	mov	r2, r4
 800bae0:	701a      	strb	r2, [r3, #0]
 800bae2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800bae6:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800baea:	4602      	mov	r2, r0
 800baec:	701a      	strb	r2, [r3, #0]
 800baee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800baf2:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800baf6:	460a      	mov	r2, r1
 800baf8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800bafa:	f107 0310 	add.w	r3, r7, #16
 800bafe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800bb02:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800bb06:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800bb0a:	781b      	ldrb	r3, [r3, #0]
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	d00a      	beq.n	800bb26 <aci_gatt_add_service+0x66>
 800bb10:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800bb14:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	2b02      	cmp	r3, #2
 800bb1c:	d101      	bne.n	800bb22 <aci_gatt_add_service+0x62>
 800bb1e:	2311      	movs	r3, #17
 800bb20:	e002      	b.n	800bb28 <aci_gatt_add_service+0x68>
 800bb22:	2301      	movs	r3, #1
 800bb24:	e000      	b.n	800bb28 <aci_gatt_add_service+0x68>
 800bb26:	2303      	movs	r3, #3
 800bb28:	f107 0210 	add.w	r2, r7, #16
 800bb2c:	4413      	add	r3, r2
 800bb2e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800bb32:	f107 030c 	add.w	r3, r7, #12
 800bb36:	2203      	movs	r2, #3
 800bb38:	2100      	movs	r1, #0
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f000 fc8d 	bl	800c45a <Osal_MemSet>
  int index_input = 0;
 800bb40:	2300      	movs	r3, #0
 800bb42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800bb46:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bb4a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800bb4e:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800bb52:	7812      	ldrb	r2, [r2, #0]
 800bb54:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800bb56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bb5a:	3301      	adds	r3, #1
 800bb5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800bb60:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800bb64:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800bb68:	781b      	ldrb	r3, [r3, #0]
 800bb6a:	2b01      	cmp	r3, #1
 800bb6c:	d002      	beq.n	800bb74 <aci_gatt_add_service+0xb4>
 800bb6e:	2b02      	cmp	r3, #2
 800bb70:	d004      	beq.n	800bb7c <aci_gatt_add_service+0xbc>
 800bb72:	e007      	b.n	800bb84 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800bb74:	2302      	movs	r3, #2
 800bb76:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800bb7a:	e005      	b.n	800bb88 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800bb7c:	2310      	movs	r3, #16
 800bb7e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800bb82:	e001      	b.n	800bb88 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800bb84:	2397      	movs	r3, #151	; 0x97
 800bb86:	e06c      	b.n	800bc62 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800bb88:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bb8c:	1c58      	adds	r0, r3, #1
 800bb8e:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800bb92:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800bb96:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800bb9a:	6819      	ldr	r1, [r3, #0]
 800bb9c:	f000 fc4d 	bl	800c43a <Osal_MemCpy>
    index_input += size;
 800bba0:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800bba4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800bba8:	4413      	add	r3, r2
 800bbaa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800bbae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bbb2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800bbb6:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800bbba:	7812      	ldrb	r2, [r2, #0]
 800bbbc:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800bbbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bbc2:	3301      	adds	r3, #1
 800bbc4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800bbc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bbcc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800bbd0:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800bbd4:	7812      	ldrb	r2, [r2, #0]
 800bbd6:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800bbd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bbdc:	3301      	adds	r3, #1
 800bbde:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800bbe2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bbe6:	2218      	movs	r2, #24
 800bbe8:	2100      	movs	r1, #0
 800bbea:	4618      	mov	r0, r3
 800bbec:	f000 fc35 	bl	800c45a <Osal_MemSet>
  rq.ogf = 0x3f;
 800bbf0:	233f      	movs	r3, #63	; 0x3f
 800bbf2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800bbf6:	f44f 7381 	mov.w	r3, #258	; 0x102
 800bbfa:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800bbfe:	f107 0310 	add.w	r3, r7, #16
 800bc02:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800bc06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bc0a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800bc0e:	f107 030c 	add.w	r3, r7, #12
 800bc12:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800bc16:	2303      	movs	r3, #3
 800bc18:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800bc1c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bc20:	2100      	movs	r1, #0
 800bc22:	4618      	mov	r0, r3
 800bc24:	f000 fea2 	bl	800c96c <hci_send_req>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	da01      	bge.n	800bc32 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800bc2e:	23ff      	movs	r3, #255	; 0xff
 800bc30:	e017      	b.n	800bc62 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800bc32:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800bc36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bc3a:	781b      	ldrb	r3, [r3, #0]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d005      	beq.n	800bc4c <aci_gatt_add_service+0x18c>
    return resp.Status;
 800bc40:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800bc44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bc48:	781b      	ldrb	r3, [r3, #0]
 800bc4a:	e00a      	b.n	800bc62 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800bc4c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800bc50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bc54:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800bc58:	b29a      	uxth	r2, r3
 800bc5a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800bc5e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800bc60:	2300      	movs	r3, #0
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd90      	pop	{r4, r7, pc}

0800bc6c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800bc6c:	b590      	push	{r4, r7, lr}
 800bc6e:	b0d1      	sub	sp, #324	; 0x144
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	4604      	mov	r4, r0
 800bc74:	4608      	mov	r0, r1
 800bc76:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800bc7a:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800bc7e:	600a      	str	r2, [r1, #0]
 800bc80:	4619      	mov	r1, r3
 800bc82:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bc86:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800bc8a:	4622      	mov	r2, r4
 800bc8c:	801a      	strh	r2, [r3, #0]
 800bc8e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bc92:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800bc96:	4602      	mov	r2, r0
 800bc98:	701a      	strb	r2, [r3, #0]
 800bc9a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bc9e:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800bca2:	460a      	mov	r2, r1
 800bca4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800bca6:	f107 0318 	add.w	r3, r7, #24
 800bcaa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800bcae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bcb2:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800bcb6:	781b      	ldrb	r3, [r3, #0]
 800bcb8:	2b01      	cmp	r3, #1
 800bcba:	d00a      	beq.n	800bcd2 <aci_gatt_add_char+0x66>
 800bcbc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bcc0:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800bcc4:	781b      	ldrb	r3, [r3, #0]
 800bcc6:	2b02      	cmp	r3, #2
 800bcc8:	d101      	bne.n	800bcce <aci_gatt_add_char+0x62>
 800bcca:	2313      	movs	r3, #19
 800bccc:	e002      	b.n	800bcd4 <aci_gatt_add_char+0x68>
 800bcce:	2303      	movs	r3, #3
 800bcd0:	e000      	b.n	800bcd4 <aci_gatt_add_char+0x68>
 800bcd2:	2305      	movs	r3, #5
 800bcd4:	f107 0218 	add.w	r2, r7, #24
 800bcd8:	4413      	add	r3, r2
 800bcda:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800bcde:	f107 0314 	add.w	r3, r7, #20
 800bce2:	2203      	movs	r2, #3
 800bce4:	2100      	movs	r1, #0
 800bce6:	4618      	mov	r0, r3
 800bce8:	f000 fbb7 	bl	800c45a <Osal_MemSet>
  int index_input = 0;
 800bcec:	2300      	movs	r3, #0
 800bcee:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800bcf2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800bcf6:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800bcfa:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800bcfe:	8812      	ldrh	r2, [r2, #0]
 800bd00:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800bd02:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bd06:	3302      	adds	r3, #2
 800bd08:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800bd0c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800bd10:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800bd14:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800bd18:	7812      	ldrb	r2, [r2, #0]
 800bd1a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800bd1c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bd20:	3301      	adds	r3, #1
 800bd22:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800bd26:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bd2a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800bd2e:	781b      	ldrb	r3, [r3, #0]
 800bd30:	2b01      	cmp	r3, #1
 800bd32:	d002      	beq.n	800bd3a <aci_gatt_add_char+0xce>
 800bd34:	2b02      	cmp	r3, #2
 800bd36:	d004      	beq.n	800bd42 <aci_gatt_add_char+0xd6>
 800bd38:	e007      	b.n	800bd4a <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800bd3a:	2302      	movs	r3, #2
 800bd3c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800bd40:	e005      	b.n	800bd4e <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800bd42:	2310      	movs	r3, #16
 800bd44:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800bd48:	e001      	b.n	800bd4e <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800bd4a:	2397      	movs	r3, #151	; 0x97
 800bd4c:	e091      	b.n	800be72 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800bd4e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800bd52:	1cd8      	adds	r0, r3, #3
 800bd54:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800bd58:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bd5c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800bd60:	6819      	ldr	r1, [r3, #0]
 800bd62:	f000 fb6a 	bl	800c43a <Osal_MemCpy>
    index_input += size;
 800bd66:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800bd6a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800bd6e:	4413      	add	r3, r2
 800bd70:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800bd74:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800bd78:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800bd7c:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800bd80:	8812      	ldrh	r2, [r2, #0]
 800bd82:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800bd84:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bd88:	3302      	adds	r3, #2
 800bd8a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800bd8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800bd92:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800bd96:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800bd98:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bd9c:	3301      	adds	r3, #1
 800bd9e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800bda2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800bda6:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800bdaa:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800bdac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bdb0:	3301      	adds	r3, #1
 800bdb2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800bdb6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800bdba:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800bdbe:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800bdc0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bdc4:	3301      	adds	r3, #1
 800bdc6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800bdca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800bdce:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800bdd2:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800bdd4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bdd8:	3301      	adds	r3, #1
 800bdda:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800bdde:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800bde2:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800bde6:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800bde8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bdec:	3301      	adds	r3, #1
 800bdee:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800bdf2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800bdf6:	2218      	movs	r2, #24
 800bdf8:	2100      	movs	r1, #0
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f000 fb2d 	bl	800c45a <Osal_MemSet>
  rq.ogf = 0x3f;
 800be00:	233f      	movs	r3, #63	; 0x3f
 800be02:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800be06:	f44f 7382 	mov.w	r3, #260	; 0x104
 800be0a:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800be0e:	f107 0318 	add.w	r3, r7, #24
 800be12:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800be16:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800be1a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800be1e:	f107 0314 	add.w	r3, r7, #20
 800be22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800be26:	2303      	movs	r3, #3
 800be28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800be2c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800be30:	2100      	movs	r1, #0
 800be32:	4618      	mov	r0, r3
 800be34:	f000 fd9a 	bl	800c96c <hci_send_req>
 800be38:	4603      	mov	r3, r0
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	da01      	bge.n	800be42 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800be3e:	23ff      	movs	r3, #255	; 0xff
 800be40:	e017      	b.n	800be72 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800be42:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800be46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d005      	beq.n	800be5c <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800be50:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800be54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800be58:	781b      	ldrb	r3, [r3, #0]
 800be5a:	e00a      	b.n	800be72 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800be5c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800be60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800be64:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800be68:	b29a      	uxth	r2, r3
 800be6a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800be6e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800be70:	2300      	movs	r3, #0
}
 800be72:	4618      	mov	r0, r3
 800be74:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd90      	pop	{r4, r7, pc}

0800be7c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800be7c:	b5b0      	push	{r4, r5, r7, lr}
 800be7e:	b0cc      	sub	sp, #304	; 0x130
 800be80:	af00      	add	r7, sp, #0
 800be82:	4605      	mov	r5, r0
 800be84:	460c      	mov	r4, r1
 800be86:	4610      	mov	r0, r2
 800be88:	4619      	mov	r1, r3
 800be8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800be8e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800be92:	462a      	mov	r2, r5
 800be94:	801a      	strh	r2, [r3, #0]
 800be96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800be9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800be9e:	4622      	mov	r2, r4
 800bea0:	801a      	strh	r2, [r3, #0]
 800bea2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bea6:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800beaa:	4602      	mov	r2, r0
 800beac:	701a      	strb	r2, [r3, #0]
 800beae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800beb2:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800beb6:	460a      	mov	r2, r1
 800beb8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800beba:	f107 0310 	add.w	r3, r7, #16
 800bebe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800bec2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bec6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800beca:	2200      	movs	r2, #0
 800becc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800bece:	2300      	movs	r3, #0
 800bed0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800bed4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bed8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800bedc:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800bee0:	8812      	ldrh	r2, [r2, #0]
 800bee2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800bee4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bee8:	3302      	adds	r3, #2
 800beea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800beee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bef2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800bef6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800befa:	8812      	ldrh	r2, [r2, #0]
 800befc:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800befe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bf02:	3302      	adds	r3, #2
 800bf04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800bf08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bf0c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800bf10:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800bf14:	7812      	ldrb	r2, [r2, #0]
 800bf16:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800bf18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bf1c:	3301      	adds	r3, #1
 800bf1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800bf22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bf26:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800bf2a:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800bf2e:	7812      	ldrb	r2, [r2, #0]
 800bf30:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800bf32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bf36:	3301      	adds	r3, #1
 800bf38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800bf3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bf40:	1d98      	adds	r0, r3, #6
 800bf42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bf46:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800bf4a:	781b      	ldrb	r3, [r3, #0]
 800bf4c:	461a      	mov	r2, r3
 800bf4e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800bf52:	f000 fa72 	bl	800c43a <Osal_MemCpy>
  index_input += Char_Value_Length;
 800bf56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bf5a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800bf5e:	781b      	ldrb	r3, [r3, #0]
 800bf60:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800bf64:	4413      	add	r3, r2
 800bf66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800bf6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bf6e:	2218      	movs	r2, #24
 800bf70:	2100      	movs	r1, #0
 800bf72:	4618      	mov	r0, r3
 800bf74:	f000 fa71 	bl	800c45a <Osal_MemSet>
  rq.ogf = 0x3f;
 800bf78:	233f      	movs	r3, #63	; 0x3f
 800bf7a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800bf7e:	f44f 7383 	mov.w	r3, #262	; 0x106
 800bf82:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800bf86:	f107 0310 	add.w	r3, r7, #16
 800bf8a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800bf8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bf92:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800bf96:	f107 030f 	add.w	r3, r7, #15
 800bf9a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800bfa4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bfa8:	2100      	movs	r1, #0
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f000 fcde 	bl	800c96c <hci_send_req>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	da01      	bge.n	800bfba <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800bfb6:	23ff      	movs	r3, #255	; 0xff
 800bfb8:	e004      	b.n	800bfc4 <aci_gatt_update_char_value+0x148>
  return status;
 800bfba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bfbe:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800bfc2:	781b      	ldrb	r3, [r3, #0]
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bdb0      	pop	{r4, r5, r7, pc}

0800bfce <aci_gatt_allow_read>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_allow_read( uint16_t Connection_Handle )
{
 800bfce:	b580      	push	{r7, lr}
 800bfd0:	b0cc      	sub	sp, #304	; 0x130
 800bfd2:	af00      	add	r7, sp, #0
 800bfd4:	4602      	mov	r2, r0
 800bfd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bfda:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800bfde:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 800bfe0:	f107 0310 	add.w	r3, r7, #16
 800bfe4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800bfe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bfec:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800bff0:	2200      	movs	r2, #0
 800bff2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800bff4:	2300      	movs	r3, #0
 800bff6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800bffa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bffe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c002:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800c006:	8812      	ldrh	r2, [r2, #0]
 800c008:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800c00a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c00e:	3302      	adds	r3, #2
 800c010:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c014:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c018:	2218      	movs	r2, #24
 800c01a:	2100      	movs	r1, #0
 800c01c:	4618      	mov	r0, r3
 800c01e:	f000 fa1c 	bl	800c45a <Osal_MemSet>
  rq.ogf = 0x3f;
 800c022:	233f      	movs	r3, #63	; 0x3f
 800c024:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x127;
 800c028:	f240 1327 	movw	r3, #295	; 0x127
 800c02c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c030:	f107 0310 	add.w	r3, r7, #16
 800c034:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c038:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c03c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c040:	f107 030f 	add.w	r3, r7, #15
 800c044:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c048:	2301      	movs	r3, #1
 800c04a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c04e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c052:	2100      	movs	r1, #0
 800c054:	4618      	mov	r0, r3
 800c056:	f000 fc89 	bl	800c96c <hci_send_req>
 800c05a:	4603      	mov	r3, r0
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	da01      	bge.n	800c064 <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 800c060:	23ff      	movs	r3, #255	; 0xff
 800c062:	e004      	b.n	800c06e <aci_gatt_allow_read+0xa0>
  return status;
 800c064:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c068:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800c06c:	781b      	ldrb	r3, [r3, #0]
}
 800c06e:	4618      	mov	r0, r3
 800c070:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}

0800c078 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b0cc      	sub	sp, #304	; 0x130
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c082:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c086:	601a      	str	r2, [r3, #0]
 800c088:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c08c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800c090:	4602      	mov	r2, r0
 800c092:	701a      	strb	r2, [r3, #0]
 800c094:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c098:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800c09c:	460a      	mov	r2, r1
 800c09e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800c0a0:	f107 0310 	add.w	r3, r7, #16
 800c0a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c0a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c0ac:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800c0ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c0be:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c0c2:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800c0c6:	7812      	ldrb	r2, [r2, #0]
 800c0c8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c0ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800c0d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c0d8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c0dc:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800c0e0:	7812      	ldrb	r2, [r2, #0]
 800c0e2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800c0e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c0e8:	3301      	adds	r3, #1
 800c0ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800c0ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c0f2:	1c98      	adds	r0, r3, #2
 800c0f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c0f8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800c0fc:	781a      	ldrb	r2, [r3, #0]
 800c0fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c102:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c106:	6819      	ldr	r1, [r3, #0]
 800c108:	f000 f997 	bl	800c43a <Osal_MemCpy>
  index_input += Length;
 800c10c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c110:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800c114:	781b      	ldrb	r3, [r3, #0]
 800c116:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c11a:	4413      	add	r3, r2
 800c11c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c120:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c124:	2218      	movs	r2, #24
 800c126:	2100      	movs	r1, #0
 800c128:	4618      	mov	r0, r3
 800c12a:	f000 f996 	bl	800c45a <Osal_MemSet>
  rq.ogf = 0x3f;
 800c12e:	233f      	movs	r3, #63	; 0x3f
 800c130:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800c134:	230c      	movs	r3, #12
 800c136:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c13a:	f107 0310 	add.w	r3, r7, #16
 800c13e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c142:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c146:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c14a:	f107 030f 	add.w	r3, r7, #15
 800c14e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c152:	2301      	movs	r3, #1
 800c154:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c158:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c15c:	2100      	movs	r1, #0
 800c15e:	4618      	mov	r0, r3
 800c160:	f000 fc04 	bl	800c96c <hci_send_req>
 800c164:	4603      	mov	r3, r0
 800c166:	2b00      	cmp	r3, #0
 800c168:	da01      	bge.n	800c16e <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800c16a:	23ff      	movs	r3, #255	; 0xff
 800c16c:	e004      	b.n	800c178 <aci_hal_write_config_data+0x100>
  return status;
 800c16e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c172:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800c176:	781b      	ldrb	r3, [r3, #0]
}
 800c178:	4618      	mov	r0, r3
 800c17a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}

0800c182 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800c182:	b580      	push	{r7, lr}
 800c184:	b0cc      	sub	sp, #304	; 0x130
 800c186:	af00      	add	r7, sp, #0
 800c188:	4602      	mov	r2, r0
 800c18a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c18e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800c192:	701a      	strb	r2, [r3, #0]
 800c194:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c198:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800c19c:	460a      	mov	r2, r1
 800c19e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800c1a0:	f107 0310 	add.w	r3, r7, #16
 800c1a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c1a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c1ac:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800c1ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c1be:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c1c2:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800c1c6:	7812      	ldrb	r2, [r2, #0]
 800c1c8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c1ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c1ce:	3301      	adds	r3, #1
 800c1d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800c1d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c1d8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c1dc:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800c1e0:	7812      	ldrb	r2, [r2, #0]
 800c1e2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800c1e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c1e8:	3301      	adds	r3, #1
 800c1ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c1ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c1f2:	2218      	movs	r2, #24
 800c1f4:	2100      	movs	r1, #0
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f000 f92f 	bl	800c45a <Osal_MemSet>
  rq.ogf = 0x3f;
 800c1fc:	233f      	movs	r3, #63	; 0x3f
 800c1fe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800c202:	230f      	movs	r3, #15
 800c204:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c208:	f107 0310 	add.w	r3, r7, #16
 800c20c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c210:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c214:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c218:	f107 030f 	add.w	r3, r7, #15
 800c21c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c220:	2301      	movs	r3, #1
 800c222:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c226:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c22a:	2100      	movs	r1, #0
 800c22c:	4618      	mov	r0, r3
 800c22e:	f000 fb9d 	bl	800c96c <hci_send_req>
 800c232:	4603      	mov	r3, r0
 800c234:	2b00      	cmp	r3, #0
 800c236:	da01      	bge.n	800c23c <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800c238:	23ff      	movs	r3, #255	; 0xff
 800c23a:	e004      	b.n	800c246 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800c23c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c240:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800c244:	781b      	ldrb	r3, [r3, #0]
}
 800c246:	4618      	mov	r0, r3
 800c248:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}

0800c250 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b0cc      	sub	sp, #304	; 0x130
 800c254:	af00      	add	r7, sp, #0
 800c256:	4602      	mov	r2, r0
 800c258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c25c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800c260:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800c262:	f107 0310 	add.w	r3, r7, #16
 800c266:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c26a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c26e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800c272:	2200      	movs	r2, #0
 800c274:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c276:	2300      	movs	r3, #0
 800c278:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800c27c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c280:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c284:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800c288:	8812      	ldrh	r2, [r2, #0]
 800c28a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800c28c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c290:	3302      	adds	r3, #2
 800c292:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c296:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c29a:	2218      	movs	r2, #24
 800c29c:	2100      	movs	r1, #0
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f000 f8db 	bl	800c45a <Osal_MemSet>
  rq.ogf = 0x3f;
 800c2a4:	233f      	movs	r3, #63	; 0x3f
 800c2a6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800c2aa:	2318      	movs	r3, #24
 800c2ac:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c2b0:	f107 0310 	add.w	r3, r7, #16
 800c2b4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c2b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c2bc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c2c0:	f107 030f 	add.w	r3, r7, #15
 800c2c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c2ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c2d2:	2100      	movs	r1, #0
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f000 fb49 	bl	800c96c <hci_send_req>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	da01      	bge.n	800c2e4 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800c2e0:	23ff      	movs	r3, #255	; 0xff
 800c2e2:	e004      	b.n	800c2ee <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800c2e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c2e8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800c2ec:	781b      	ldrb	r3, [r3, #0]
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}

0800c2f8 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b088      	sub	sp, #32
 800c2fc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800c2fe:	2300      	movs	r3, #0
 800c300:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c302:	f107 0308 	add.w	r3, r7, #8
 800c306:	2218      	movs	r2, #24
 800c308:	2100      	movs	r1, #0
 800c30a:	4618      	mov	r0, r3
 800c30c:	f000 f8a5 	bl	800c45a <Osal_MemSet>
  rq.ogf = 0x03;
 800c310:	2303      	movs	r3, #3
 800c312:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800c314:	2303      	movs	r3, #3
 800c316:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800c318:	1dfb      	adds	r3, r7, #7
 800c31a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800c31c:	2301      	movs	r3, #1
 800c31e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c320:	f107 0308 	add.w	r3, r7, #8
 800c324:	2100      	movs	r1, #0
 800c326:	4618      	mov	r0, r3
 800c328:	f000 fb20 	bl	800c96c <hci_send_req>
 800c32c:	4603      	mov	r3, r0
 800c32e:	2b00      	cmp	r3, #0
 800c330:	da01      	bge.n	800c336 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800c332:	23ff      	movs	r3, #255	; 0xff
 800c334:	e000      	b.n	800c338 <hci_reset+0x40>
  return status;
 800c336:	79fb      	ldrb	r3, [r7, #7]
}
 800c338:	4618      	mov	r0, r3
 800c33a:	3720      	adds	r7, #32
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}

0800c340 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800c340:	b590      	push	{r4, r7, lr}
 800c342:	b0cd      	sub	sp, #308	; 0x134
 800c344:	af00      	add	r7, sp, #0
 800c346:	4604      	mov	r4, r0
 800c348:	4608      	mov	r0, r1
 800c34a:	4611      	mov	r1, r2
 800c34c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c350:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800c354:	4622      	mov	r2, r4
 800c356:	701a      	strb	r2, [r3, #0]
 800c358:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c35c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800c360:	4602      	mov	r2, r0
 800c362:	701a      	strb	r2, [r3, #0]
 800c364:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c368:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800c36c:	460a      	mov	r2, r1
 800c36e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800c370:	f107 0310 	add.w	r3, r7, #16
 800c374:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c37c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800c380:	2200      	movs	r2, #0
 800c382:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c384:	2300      	movs	r3, #0
 800c386:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800c38a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c38e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c392:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800c396:	7812      	ldrb	r2, [r2, #0]
 800c398:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c39a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c39e:	3301      	adds	r3, #1
 800c3a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800c3a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c3a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c3ac:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800c3b0:	7812      	ldrb	r2, [r2, #0]
 800c3b2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800c3b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c3b8:	3301      	adds	r3, #1
 800c3ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800c3be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c3c2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c3c6:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800c3ca:	7812      	ldrb	r2, [r2, #0]
 800c3cc:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800c3ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c3d2:	3301      	adds	r3, #1
 800c3d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c3d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c3dc:	2218      	movs	r2, #24
 800c3de:	2100      	movs	r1, #0
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f000 f83a 	bl	800c45a <Osal_MemSet>
  rq.ogf = 0x08;
 800c3e6:	2308      	movs	r3, #8
 800c3e8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800c3ec:	2331      	movs	r3, #49	; 0x31
 800c3ee:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c3f2:	f107 0310 	add.w	r3, r7, #16
 800c3f6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c3fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c3fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c402:	f107 030f 	add.w	r3, r7, #15
 800c406:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c40a:	2301      	movs	r3, #1
 800c40c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c410:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c414:	2100      	movs	r1, #0
 800c416:	4618      	mov	r0, r3
 800c418:	f000 faa8 	bl	800c96c <hci_send_req>
 800c41c:	4603      	mov	r3, r0
 800c41e:	2b00      	cmp	r3, #0
 800c420:	da01      	bge.n	800c426 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800c422:	23ff      	movs	r3, #255	; 0xff
 800c424:	e004      	b.n	800c430 <hci_le_set_default_phy+0xf0>
  return status;
 800c426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c42a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800c42e:	781b      	ldrb	r3, [r3, #0]
}
 800c430:	4618      	mov	r0, r3
 800c432:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800c436:	46bd      	mov	sp, r7
 800c438:	bd90      	pop	{r4, r7, pc}

0800c43a <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800c43a:	b580      	push	{r7, lr}
 800c43c:	b084      	sub	sp, #16
 800c43e:	af00      	add	r7, sp, #0
 800c440:	60f8      	str	r0, [r7, #12]
 800c442:	60b9      	str	r1, [r7, #8]
 800c444:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800c446:	687a      	ldr	r2, [r7, #4]
 800c448:	68b9      	ldr	r1, [r7, #8]
 800c44a:	68f8      	ldr	r0, [r7, #12]
 800c44c:	f006 fa4e 	bl	80128ec <memcpy>
 800c450:	4603      	mov	r3, r0
}
 800c452:	4618      	mov	r0, r3
 800c454:	3710      	adds	r7, #16
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}

0800c45a <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800c45a:	b580      	push	{r7, lr}
 800c45c:	b084      	sub	sp, #16
 800c45e:	af00      	add	r7, sp, #0
 800c460:	60f8      	str	r0, [r7, #12]
 800c462:	60b9      	str	r1, [r7, #8]
 800c464:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800c466:	687a      	ldr	r2, [r7, #4]
 800c468:	68b9      	ldr	r1, [r7, #8]
 800c46a:	68f8      	ldr	r0, [r7, #12]
 800c46c:	f006 f9a8 	bl	80127c0 <memset>
 800c470:	4603      	mov	r3, r0
}
 800c472:	4618      	mov	r0, r3
 800c474:	3710      	adds	r7, #16
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}

0800c47a <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800c47a:	b480      	push	{r7}
 800c47c:	af00      	add	r7, sp, #0
  return;
 800c47e:	bf00      	nop
}
 800c480:	46bd      	mov	sp, r7
 800c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c486:	4770      	bx	lr

0800c488 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800c488:	b480      	push	{r7}
 800c48a:	af00      	add	r7, sp, #0
  return;
 800c48c:	bf00      	nop
}
 800c48e:	46bd      	mov	sp, r7
 800c490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c494:	4770      	bx	lr

0800c496 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800c496:	b480      	push	{r7}
 800c498:	af00      	add	r7, sp, #0
  return;
 800c49a:	bf00      	nop
}
 800c49c:	46bd      	mov	sp, r7
 800c49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a2:	4770      	bx	lr

0800c4a4 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	af00      	add	r7, sp, #0
  return;
 800c4a8:	bf00      	nop
}
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b0:	4770      	bx	lr

0800c4b2 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800c4b2:	b480      	push	{r7}
 800c4b4:	af00      	add	r7, sp, #0
  return;
 800c4b6:	bf00      	nop
}
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4be:	4770      	bx	lr

0800c4c0 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	af00      	add	r7, sp, #0
  return;
 800c4c4:	bf00      	nop
}
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4cc:	4770      	bx	lr

0800c4ce <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800c4ce:	b480      	push	{r7}
 800c4d0:	af00      	add	r7, sp, #0
  return;
 800c4d2:	bf00      	nop
}
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr

0800c4dc <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800c4dc:	b480      	push	{r7}
 800c4de:	af00      	add	r7, sp, #0
  return;
 800c4e0:	bf00      	nop
}
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e8:	4770      	bx	lr

0800c4ea <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800c4ea:	b480      	push	{r7}
 800c4ec:	af00      	add	r7, sp, #0
  return;
 800c4ee:	bf00      	nop
}
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f6:	4770      	bx	lr

0800c4f8 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	af00      	add	r7, sp, #0
  return;
 800c4fc:	bf00      	nop
}
 800c4fe:	46bd      	mov	sp, r7
 800c500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c504:	4770      	bx	lr

0800c506 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800c506:	b480      	push	{r7}
 800c508:	af00      	add	r7, sp, #0
  return;
 800c50a:	bf00      	nop
}
 800c50c:	46bd      	mov	sp, r7
 800c50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c512:	4770      	bx	lr

0800c514 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800c514:	b480      	push	{r7}
 800c516:	af00      	add	r7, sp, #0
  return;
 800c518:	bf00      	nop
}
 800c51a:	46bd      	mov	sp, r7
 800c51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c520:	4770      	bx	lr

0800c522 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800c522:	b480      	push	{r7}
 800c524:	af00      	add	r7, sp, #0
  return;
 800c526:	bf00      	nop
}
 800c528:	46bd      	mov	sp, r7
 800c52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52e:	4770      	bx	lr

0800c530 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800c530:	b480      	push	{r7}
 800c532:	af00      	add	r7, sp, #0
  return;
 800c534:	bf00      	nop
}
 800c536:	46bd      	mov	sp, r7
 800c538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53c:	4770      	bx	lr

0800c53e <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800c53e:	b480      	push	{r7}
 800c540:	af00      	add	r7, sp, #0
  return;
 800c542:	bf00      	nop
}
 800c544:	46bd      	mov	sp, r7
 800c546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54a:	4770      	bx	lr

0800c54c <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800c54c:	b480      	push	{r7}
 800c54e:	af00      	add	r7, sp, #0
  return;
 800c550:	bf00      	nop
}
 800c552:	46bd      	mov	sp, r7
 800c554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c558:	4770      	bx	lr

0800c55a <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800c55a:	b480      	push	{r7}
 800c55c:	af00      	add	r7, sp, #0
  return;
 800c55e:	bf00      	nop
}
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr

0800c568 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800c56c:	4b04      	ldr	r3, [pc, #16]	; (800c580 <SVCCTL_Init+0x18>)
 800c56e:	2200      	movs	r2, #0
 800c570:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800c572:	4b04      	ldr	r3, [pc, #16]	; (800c584 <SVCCTL_Init+0x1c>)
 800c574:	2200      	movs	r2, #0
 800c576:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800c578:	f000 f806 	bl	800c588 <SVCCTL_SvcInit>

  return;
 800c57c:	bf00      	nop
}
 800c57e:	bd80      	pop	{r7, pc}
 800c580:	20000248 	.word	0x20000248
 800c584:	20000268 	.word	0x20000268

0800c588 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	af00      	add	r7, sp, #0
  BAS_Init();
 800c58c:	f7ff ff75 	bl	800c47a <BAS_Init>

  BLS_Init();
 800c590:	f7ff ff7a 	bl	800c488 <BLS_Init>

  CRS_STM_Init();
 800c594:	f7ff ff7f 	bl	800c496 <CRS_STM_Init>

  DIS_Init();
 800c598:	f7ff ff84 	bl	800c4a4 <DIS_Init>

  EDS_STM_Init();
 800c59c:	f7ff ff89 	bl	800c4b2 <EDS_STM_Init>

  HIDS_Init();
 800c5a0:	f7ff ff8e 	bl	800c4c0 <HIDS_Init>

  HRS_Init();
 800c5a4:	f7ff ff93 	bl	800c4ce <HRS_Init>

  HTS_Init();
 800c5a8:	f7ff ff98 	bl	800c4dc <HTS_Init>

  IAS_Init();
 800c5ac:	f7ff ff9d 	bl	800c4ea <IAS_Init>

  LLS_Init();
 800c5b0:	f7ff ffa2 	bl	800c4f8 <LLS_Init>

  TPS_Init();
 800c5b4:	f7ff ffa7 	bl	800c506 <TPS_Init>

  MOTENV_STM_Init();
 800c5b8:	f7ff ffac 	bl	800c514 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800c5bc:	f7ff ffb1 	bl	800c522 <P2PS_STM_Init>

  ZDD_STM_Init();
 800c5c0:	f7ff ffb6 	bl	800c530 <ZDD_STM_Init>

  OTAS_STM_Init();
 800c5c4:	f7ff ffbb 	bl	800c53e <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800c5c8:	f7ff ffc7 	bl	800c55a <BVOPUS_STM_Init>

  MESH_Init();
 800c5cc:	f7ff ffbe 	bl	800c54c <MESH_Init>

  SVCCTL_InitCustomSvc();
 800c5d0:	f003 f882 	bl	800f6d8 <SVCCTL_InitCustomSvc>
  
  return;
 800c5d4:	bf00      	nop
}
 800c5d6:	bd80      	pop	{r7, pc}

0800c5d8 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b083      	sub	sp, #12
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800c5e0:	4b09      	ldr	r3, [pc, #36]	; (800c608 <SVCCTL_RegisterSvcHandler+0x30>)
 800c5e2:	7f1b      	ldrb	r3, [r3, #28]
 800c5e4:	4619      	mov	r1, r3
 800c5e6:	4a08      	ldr	r2, [pc, #32]	; (800c608 <SVCCTL_RegisterSvcHandler+0x30>)
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800c5ee:	4b06      	ldr	r3, [pc, #24]	; (800c608 <SVCCTL_RegisterSvcHandler+0x30>)
 800c5f0:	7f1b      	ldrb	r3, [r3, #28]
 800c5f2:	3301      	adds	r3, #1
 800c5f4:	b2da      	uxtb	r2, r3
 800c5f6:	4b04      	ldr	r3, [pc, #16]	; (800c608 <SVCCTL_RegisterSvcHandler+0x30>)
 800c5f8:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800c5fa:	bf00      	nop
}
 800c5fc:	370c      	adds	r7, #12
 800c5fe:	46bd      	mov	sp, r7
 800c600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c604:	4770      	bx	lr
 800c606:	bf00      	nop
 800c608:	20000248 	.word	0x20000248

0800c60c <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b086      	sub	sp, #24
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	3301      	adds	r3, #1
 800c618:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800c61a:	2300      	movs	r3, #0
 800c61c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	781b      	ldrb	r3, [r3, #0]
 800c622:	2bff      	cmp	r3, #255	; 0xff
 800c624:	d125      	bne.n	800c672 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800c626:	693b      	ldr	r3, [r7, #16]
 800c628:	3302      	adds	r3, #2
 800c62a:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	881b      	ldrh	r3, [r3, #0]
 800c630:	b29b      	uxth	r3, r3
 800c632:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c636:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c63a:	d118      	bne.n	800c66e <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800c63c:	2300      	movs	r3, #0
 800c63e:	757b      	strb	r3, [r7, #21]
 800c640:	e00d      	b.n	800c65e <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800c642:	7d7b      	ldrb	r3, [r7, #21]
 800c644:	4a1a      	ldr	r2, [pc, #104]	; (800c6b0 <SVCCTL_UserEvtRx+0xa4>)
 800c646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	4798      	blx	r3
 800c64e:	4603      	mov	r3, r0
 800c650:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800c652:	7dfb      	ldrb	r3, [r7, #23]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d108      	bne.n	800c66a <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800c658:	7d7b      	ldrb	r3, [r7, #21]
 800c65a:	3301      	adds	r3, #1
 800c65c:	757b      	strb	r3, [r7, #21]
 800c65e:	4b14      	ldr	r3, [pc, #80]	; (800c6b0 <SVCCTL_UserEvtRx+0xa4>)
 800c660:	7f1b      	ldrb	r3, [r3, #28]
 800c662:	7d7a      	ldrb	r2, [r7, #21]
 800c664:	429a      	cmp	r2, r3
 800c666:	d3ec      	bcc.n	800c642 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800c668:	e002      	b.n	800c670 <SVCCTL_UserEvtRx+0x64>
              break;
 800c66a:	bf00      	nop
          break;
 800c66c:	e000      	b.n	800c670 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800c66e:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800c670:	e000      	b.n	800c674 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800c672:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800c674:	7dfb      	ldrb	r3, [r7, #23]
 800c676:	2b02      	cmp	r3, #2
 800c678:	d00f      	beq.n	800c69a <SVCCTL_UserEvtRx+0x8e>
 800c67a:	2b02      	cmp	r3, #2
 800c67c:	dc10      	bgt.n	800c6a0 <SVCCTL_UserEvtRx+0x94>
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d002      	beq.n	800c688 <SVCCTL_UserEvtRx+0x7c>
 800c682:	2b01      	cmp	r3, #1
 800c684:	d006      	beq.n	800c694 <SVCCTL_UserEvtRx+0x88>
 800c686:	e00b      	b.n	800c6a0 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f001 fc6b 	bl	800df64 <SVCCTL_App_Notification>
 800c68e:	4603      	mov	r3, r0
 800c690:	75bb      	strb	r3, [r7, #22]
      break;
 800c692:	e008      	b.n	800c6a6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800c694:	2301      	movs	r3, #1
 800c696:	75bb      	strb	r3, [r7, #22]
      break;
 800c698:	e005      	b.n	800c6a6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800c69a:	2300      	movs	r3, #0
 800c69c:	75bb      	strb	r3, [r7, #22]
      break;
 800c69e:	e002      	b.n	800c6a6 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	75bb      	strb	r3, [r7, #22]
      break;
 800c6a4:	bf00      	nop
  }

  return (return_status);
 800c6a6:	7dbb      	ldrb	r3, [r7, #22]
}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	3718      	adds	r7, #24
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}
 800c6b0:	20000248 	.word	0x20000248

0800c6b4 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b088      	sub	sp, #32
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800c6bc:	f107 030c 	add.w	r3, r7, #12
 800c6c0:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800c6c8:	69fb      	ldr	r3, [r7, #28]
 800c6ca:	212e      	movs	r1, #46	; 0x2e
 800c6cc:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800c6d0:	f000 fae8 	bl	800cca4 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800c6d4:	69fb      	ldr	r3, [r7, #28]
 800c6d6:	330b      	adds	r3, #11
 800c6d8:	78db      	ldrb	r3, [r3, #3]
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	3720      	adds	r7, #32
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}

0800c6e2 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800c6e2:	b580      	push	{r7, lr}
 800c6e4:	b088      	sub	sp, #32
 800c6e6:	af00      	add	r7, sp, #0
 800c6e8:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800c6ea:	f107 030c 	add.w	r3, r7, #12
 800c6ee:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800c6f6:	69fb      	ldr	r3, [r7, #28]
 800c6f8:	210f      	movs	r1, #15
 800c6fa:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800c6fe:	f000 fad1 	bl	800cca4 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800c702:	69fb      	ldr	r3, [r7, #28]
 800c704:	330b      	adds	r3, #11
 800c706:	78db      	ldrb	r3, [r3, #3]
}
 800c708:	4618      	mov	r0, r3
 800c70a:	3720      	adds	r7, #32
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b088      	sub	sp, #32
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800c718:	f107 030c 	add.w	r3, r7, #12
 800c71c:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800c71e:	69fb      	ldr	r3, [r7, #28]
 800c720:	687a      	ldr	r2, [r7, #4]
 800c722:	2110      	movs	r1, #16
 800c724:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800c728:	f000 fabc 	bl	800cca4 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800c72c:	69fb      	ldr	r3, [r7, #28]
 800c72e:	330b      	adds	r3, #11
 800c730:	78db      	ldrb	r3, [r3, #3]
}
 800c732:	4618      	mov	r0, r3
 800c734:	3720      	adds	r7, #32
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}
	...

0800c73c <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800c73c:	b480      	push	{r7}
 800c73e:	b08b      	sub	sp, #44	; 0x2c
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800c744:	2300      	movs	r3, #0
 800c746:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800c748:	2300      	movs	r3, #0
 800c74a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800c74c:	2300      	movs	r3, #0
 800c74e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800c750:	2300      	movs	r3, #0
 800c752:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800c754:	2300      	movs	r3, #0
 800c756:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800c758:	2300      	movs	r3, #0
 800c75a:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800c75c:	2300      	movs	r3, #0
 800c75e:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800c760:	2300      	movs	r3, #0
 800c762:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800c764:	4b4a      	ldr	r3, [pc, #296]	; (800c890 <SHCI_GetWirelessFwInfo+0x154>)
 800c766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c768:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c76c:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	009b      	lsls	r3, r3, #2
 800c772:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800c776:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	4a44      	ldr	r2, [pc, #272]	; (800c894 <SHCI_GetWirelessFwInfo+0x158>)
 800c784:	4293      	cmp	r3, r2
 800c786:	d10f      	bne.n	800c7a8 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	695b      	ldr	r3, [r3, #20]
 800c78c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	699b      	ldr	r3, [r3, #24]
 800c792:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	69db      	ldr	r3, [r3, #28]
 800c798:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800c79a:	68bb      	ldr	r3, [r7, #8]
 800c79c:	68db      	ldr	r3, [r3, #12]
 800c79e:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	691b      	ldr	r3, [r3, #16]
 800c7a4:	617b      	str	r3, [r7, #20]
 800c7a6:	e01a      	b.n	800c7de <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800c7a8:	693b      	ldr	r3, [r7, #16]
 800c7aa:	009b      	lsls	r3, r3, #2
 800c7ac:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800c7b0:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800c7b4:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	691b      	ldr	r3, [r3, #16]
 800c7bc:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	695b      	ldr	r3, [r3, #20]
 800c7c4:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	699b      	ldr	r3, [r3, #24]
 800c7cc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	685b      	ldr	r3, [r3, #4]
 800c7d4:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	689b      	ldr	r3, [r3, #8]
 800c7dc:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800c7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e0:	0e1b      	lsrs	r3, r3, #24
 800c7e2:	b2da      	uxtb	r2, r3
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800c7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ea:	0c1b      	lsrs	r3, r3, #16
 800c7ec:	b2da      	uxtb	r2, r3
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800c7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f4:	0a1b      	lsrs	r3, r3, #8
 800c7f6:	b2da      	uxtb	r2, r3
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800c7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7fe:	091b      	lsrs	r3, r3, #4
 800c800:	b2db      	uxtb	r3, r3
 800c802:	f003 030f 	and.w	r3, r3, #15
 800c806:	b2da      	uxtb	r2, r3
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800c80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c80e:	b2db      	uxtb	r3, r3
 800c810:	f003 030f 	and.w	r3, r3, #15
 800c814:	b2da      	uxtb	r2, r3
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800c81a:	6a3b      	ldr	r3, [r7, #32]
 800c81c:	0e1b      	lsrs	r3, r3, #24
 800c81e:	b2da      	uxtb	r2, r3
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800c824:	6a3b      	ldr	r3, [r7, #32]
 800c826:	0c1b      	lsrs	r3, r3, #16
 800c828:	b2da      	uxtb	r2, r3
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800c82e:	6a3b      	ldr	r3, [r7, #32]
 800c830:	0a1b      	lsrs	r3, r3, #8
 800c832:	b2da      	uxtb	r2, r3
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800c838:	6a3b      	ldr	r3, [r7, #32]
 800c83a:	b2da      	uxtb	r2, r3
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800c840:	69fb      	ldr	r3, [r7, #28]
 800c842:	b2da      	uxtb	r2, r3
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800c848:	69bb      	ldr	r3, [r7, #24]
 800c84a:	0e1b      	lsrs	r3, r3, #24
 800c84c:	b2da      	uxtb	r2, r3
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800c852:	69bb      	ldr	r3, [r7, #24]
 800c854:	0c1b      	lsrs	r3, r3, #16
 800c856:	b2da      	uxtb	r2, r3
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800c85c:	69bb      	ldr	r3, [r7, #24]
 800c85e:	0a1b      	lsrs	r3, r3, #8
 800c860:	b2da      	uxtb	r2, r3
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	0e1b      	lsrs	r3, r3, #24
 800c86a:	b2da      	uxtb	r2, r3
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	0c1b      	lsrs	r3, r3, #16
 800c874:	b2da      	uxtb	r2, r3
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	b2da      	uxtb	r2, r3
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800c882:	2300      	movs	r3, #0
}
 800c884:	4618      	mov	r0, r3
 800c886:	372c      	adds	r7, #44	; 0x2c
 800c888:	46bd      	mov	sp, r7
 800c88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88e:	4770      	bx	lr
 800c890:	58004000 	.word	0x58004000
 800c894:	a94656b9 	.word	0xa94656b9

0800c898 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b082      	sub	sp, #8
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
 800c8a0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	685b      	ldr	r3, [r3, #4]
 800c8a6:	4a08      	ldr	r2, [pc, #32]	; (800c8c8 <hci_init+0x30>)
 800c8a8:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800c8aa:	4a08      	ldr	r2, [pc, #32]	; (800c8cc <hci_init+0x34>)
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800c8b0:	4806      	ldr	r0, [pc, #24]	; (800c8cc <hci_init+0x34>)
 800c8b2:	f000 f979 	bl	800cba8 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f000 f8da 	bl	800ca74 <TlInit>

  return;
 800c8c0:	bf00      	nop
}
 800c8c2:	3708      	adds	r7, #8
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}
 800c8c8:	200005ac 	.word	0x200005ac
 800c8cc:	20000584 	.word	0x20000584

0800c8d0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b084      	sub	sp, #16
 800c8d4:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800c8d6:	4822      	ldr	r0, [pc, #136]	; (800c960 <hci_user_evt_proc+0x90>)
 800c8d8:	f000 fdfa 	bl	800d4d0 <LST_is_empty>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d12b      	bne.n	800c93a <hci_user_evt_proc+0x6a>
 800c8e2:	4b20      	ldr	r3, [pc, #128]	; (800c964 <hci_user_evt_proc+0x94>)
 800c8e4:	781b      	ldrb	r3, [r3, #0]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d027      	beq.n	800c93a <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800c8ea:	f107 030c 	add.w	r3, r7, #12
 800c8ee:	4619      	mov	r1, r3
 800c8f0:	481b      	ldr	r0, [pc, #108]	; (800c960 <hci_user_evt_proc+0x90>)
 800c8f2:	f000 fe7c 	bl	800d5ee <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800c8f6:	4b1c      	ldr	r3, [pc, #112]	; (800c968 <hci_user_evt_proc+0x98>)
 800c8f8:	69db      	ldr	r3, [r3, #28]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d00c      	beq.n	800c918 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800c902:	2301      	movs	r3, #1
 800c904:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800c906:	4b18      	ldr	r3, [pc, #96]	; (800c968 <hci_user_evt_proc+0x98>)
 800c908:	69db      	ldr	r3, [r3, #28]
 800c90a:	1d3a      	adds	r2, r7, #4
 800c90c:	4610      	mov	r0, r2
 800c90e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800c910:	793a      	ldrb	r2, [r7, #4]
 800c912:	4b14      	ldr	r3, [pc, #80]	; (800c964 <hci_user_evt_proc+0x94>)
 800c914:	701a      	strb	r2, [r3, #0]
 800c916:	e002      	b.n	800c91e <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800c918:	4b12      	ldr	r3, [pc, #72]	; (800c964 <hci_user_evt_proc+0x94>)
 800c91a:	2201      	movs	r2, #1
 800c91c:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800c91e:	4b11      	ldr	r3, [pc, #68]	; (800c964 <hci_user_evt_proc+0x94>)
 800c920:	781b      	ldrb	r3, [r3, #0]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d004      	beq.n	800c930 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	4618      	mov	r0, r3
 800c92a:	f000 fc0d 	bl	800d148 <TL_MM_EvtDone>
 800c92e:	e004      	b.n	800c93a <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	4619      	mov	r1, r3
 800c934:	480a      	ldr	r0, [pc, #40]	; (800c960 <hci_user_evt_proc+0x90>)
 800c936:	f000 fded 	bl	800d514 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800c93a:	4809      	ldr	r0, [pc, #36]	; (800c960 <hci_user_evt_proc+0x90>)
 800c93c:	f000 fdc8 	bl	800d4d0 <LST_is_empty>
 800c940:	4603      	mov	r3, r0
 800c942:	2b00      	cmp	r3, #0
 800c944:	d107      	bne.n	800c956 <hci_user_evt_proc+0x86>
 800c946:	4b07      	ldr	r3, [pc, #28]	; (800c964 <hci_user_evt_proc+0x94>)
 800c948:	781b      	ldrb	r3, [r3, #0]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d003      	beq.n	800c956 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800c94e:	4804      	ldr	r0, [pc, #16]	; (800c960 <hci_user_evt_proc+0x90>)
 800c950:	f002 f968 	bl	800ec24 <hci_notify_asynch_evt>
  }


  return;
 800c954:	bf00      	nop
 800c956:	bf00      	nop
}
 800c958:	3710      	adds	r7, #16
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}
 800c95e:	bf00      	nop
 800c960:	20000270 	.word	0x20000270
 800c964:	2000027c 	.word	0x2000027c
 800c968:	20000584 	.word	0x20000584

0800c96c <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b088      	sub	sp, #32
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
 800c974:	460b      	mov	r3, r1
 800c976:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800c978:	2000      	movs	r0, #0
 800c97a:	f000 f8d1 	bl	800cb20 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800c97e:	2300      	movs	r3, #0
 800c980:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	885b      	ldrh	r3, [r3, #2]
 800c986:	b21b      	sxth	r3, r3
 800c988:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c98c:	b21a      	sxth	r2, r3
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	881b      	ldrh	r3, [r3, #0]
 800c992:	029b      	lsls	r3, r3, #10
 800c994:	b21b      	sxth	r3, r3
 800c996:	4313      	orrs	r3, r2
 800c998:	b21b      	sxth	r3, r3
 800c99a:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800c99c:	4b33      	ldr	r3, [pc, #204]	; (800ca6c <hci_send_req+0x100>)
 800c99e:	2201      	movs	r2, #1
 800c9a0:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	68db      	ldr	r3, [r3, #12]
 800c9a6:	b2d9      	uxtb	r1, r3
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	689a      	ldr	r2, [r3, #8]
 800c9ac:	8bbb      	ldrh	r3, [r7, #28]
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f000 f890 	bl	800cad4 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800c9b4:	e04e      	b.n	800ca54 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800c9b6:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800c9ba:	f002 f94a 	bl	800ec52 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800c9be:	e043      	b.n	800ca48 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800c9c0:	f107 030c 	add.w	r3, r7, #12
 800c9c4:	4619      	mov	r1, r3
 800c9c6:	482a      	ldr	r0, [pc, #168]	; (800ca70 <hci_send_req+0x104>)
 800c9c8:	f000 fe11 	bl	800d5ee <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	7a5b      	ldrb	r3, [r3, #9]
 800c9d0:	2b0f      	cmp	r3, #15
 800c9d2:	d114      	bne.n	800c9fe <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	330b      	adds	r3, #11
 800c9d8:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800c9da:	693b      	ldr	r3, [r7, #16]
 800c9dc:	885b      	ldrh	r3, [r3, #2]
 800c9de:	b29b      	uxth	r3, r3
 800c9e0:	8bba      	ldrh	r2, [r7, #28]
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	d104      	bne.n	800c9f0 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	691b      	ldr	r3, [r3, #16]
 800c9ea:	693a      	ldr	r2, [r7, #16]
 800c9ec:	7812      	ldrb	r2, [r2, #0]
 800c9ee:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	785b      	ldrb	r3, [r3, #1]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d027      	beq.n	800ca48 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	77fb      	strb	r3, [r7, #31]
 800c9fc:	e024      	b.n	800ca48 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	330b      	adds	r3, #11
 800ca02:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800ca04:	69bb      	ldr	r3, [r7, #24]
 800ca06:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ca0a:	b29b      	uxth	r3, r3
 800ca0c:	8bba      	ldrh	r2, [r7, #28]
 800ca0e:	429a      	cmp	r2, r3
 800ca10:	d114      	bne.n	800ca3c <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	7a9b      	ldrb	r3, [r3, #10]
 800ca16:	3b03      	subs	r3, #3
 800ca18:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	695a      	ldr	r2, [r3, #20]
 800ca1e:	7dfb      	ldrb	r3, [r7, #23]
 800ca20:	429a      	cmp	r2, r3
 800ca22:	bfa8      	it	ge
 800ca24:	461a      	movge	r2, r3
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6918      	ldr	r0, [r3, #16]
 800ca2e:	69bb      	ldr	r3, [r7, #24]
 800ca30:	1cd9      	adds	r1, r3, #3
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	695b      	ldr	r3, [r3, #20]
 800ca36:	461a      	mov	r2, r3
 800ca38:	f005 ff58 	bl	80128ec <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800ca3c:	69bb      	ldr	r3, [r7, #24]
 800ca3e:	781b      	ldrb	r3, [r3, #0]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d001      	beq.n	800ca48 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800ca44:	2301      	movs	r3, #1
 800ca46:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800ca48:	4809      	ldr	r0, [pc, #36]	; (800ca70 <hci_send_req+0x104>)
 800ca4a:	f000 fd41 	bl	800d4d0 <LST_is_empty>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d0b5      	beq.n	800c9c0 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800ca54:	7ffb      	ldrb	r3, [r7, #31]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d0ad      	beq.n	800c9b6 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800ca5a:	2001      	movs	r0, #1
 800ca5c:	f000 f860 	bl	800cb20 <NotifyCmdStatus>

  return 0;
 800ca60:	2300      	movs	r3, #0
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3720      	adds	r7, #32
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}
 800ca6a:	bf00      	nop
 800ca6c:	200005b0 	.word	0x200005b0
 800ca70:	200005a4 	.word	0x200005a4

0800ca74 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b086      	sub	sp, #24
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800ca7c:	480f      	ldr	r0, [pc, #60]	; (800cabc <TlInit+0x48>)
 800ca7e:	f000 fd17 	bl	800d4b0 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800ca82:	4a0f      	ldr	r2, [pc, #60]	; (800cac0 <TlInit+0x4c>)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800ca88:	480e      	ldr	r0, [pc, #56]	; (800cac4 <TlInit+0x50>)
 800ca8a:	f000 fd11 	bl	800d4b0 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800ca8e:	4b0e      	ldr	r3, [pc, #56]	; (800cac8 <TlInit+0x54>)
 800ca90:	2201      	movs	r2, #1
 800ca92:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800ca94:	4b0d      	ldr	r3, [pc, #52]	; (800cacc <TlInit+0x58>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d00a      	beq.n	800cab2 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800caa0:	4b0b      	ldr	r3, [pc, #44]	; (800cad0 <TlInit+0x5c>)
 800caa2:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800caa4:	4b09      	ldr	r3, [pc, #36]	; (800cacc <TlInit+0x58>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	f107 0208 	add.w	r2, r7, #8
 800caac:	4610      	mov	r0, r2
 800caae:	4798      	blx	r3
  }

  return;
 800cab0:	bf00      	nop
 800cab2:	bf00      	nop
}
 800cab4:	3718      	adds	r7, #24
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}
 800caba:	bf00      	nop
 800cabc:	200005a4 	.word	0x200005a4
 800cac0:	20000278 	.word	0x20000278
 800cac4:	20000270 	.word	0x20000270
 800cac8:	2000027c 	.word	0x2000027c
 800cacc:	20000584 	.word	0x20000584
 800cad0:	0800cb61 	.word	0x0800cb61

0800cad4 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b082      	sub	sp, #8
 800cad8:	af00      	add	r7, sp, #0
 800cada:	4603      	mov	r3, r0
 800cadc:	603a      	str	r2, [r7, #0]
 800cade:	80fb      	strh	r3, [r7, #6]
 800cae0:	460b      	mov	r3, r1
 800cae2:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800cae4:	4b0c      	ldr	r3, [pc, #48]	; (800cb18 <SendCmd+0x44>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	88fa      	ldrh	r2, [r7, #6]
 800caea:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800caee:	4b0a      	ldr	r3, [pc, #40]	; (800cb18 <SendCmd+0x44>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	797a      	ldrb	r2, [r7, #5]
 800caf4:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800caf6:	4b08      	ldr	r3, [pc, #32]	; (800cb18 <SendCmd+0x44>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	330c      	adds	r3, #12
 800cafc:	797a      	ldrb	r2, [r7, #5]
 800cafe:	6839      	ldr	r1, [r7, #0]
 800cb00:	4618      	mov	r0, r3
 800cb02:	f005 fef3 	bl	80128ec <memcpy>

  hciContext.io.Send(0,0);
 800cb06:	4b05      	ldr	r3, [pc, #20]	; (800cb1c <SendCmd+0x48>)
 800cb08:	691b      	ldr	r3, [r3, #16]
 800cb0a:	2100      	movs	r1, #0
 800cb0c:	2000      	movs	r0, #0
 800cb0e:	4798      	blx	r3

  return;
 800cb10:	bf00      	nop
}
 800cb12:	3708      	adds	r7, #8
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}
 800cb18:	20000278 	.word	0x20000278
 800cb1c:	20000584 	.word	0x20000584

0800cb20 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b082      	sub	sp, #8
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	4603      	mov	r3, r0
 800cb28:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800cb2a:	79fb      	ldrb	r3, [r7, #7]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d108      	bne.n	800cb42 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800cb30:	4b0a      	ldr	r3, [pc, #40]	; (800cb5c <NotifyCmdStatus+0x3c>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d00d      	beq.n	800cb54 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800cb38:	4b08      	ldr	r3, [pc, #32]	; (800cb5c <NotifyCmdStatus+0x3c>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	2000      	movs	r0, #0
 800cb3e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800cb40:	e008      	b.n	800cb54 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800cb42:	4b06      	ldr	r3, [pc, #24]	; (800cb5c <NotifyCmdStatus+0x3c>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d004      	beq.n	800cb54 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800cb4a:	4b04      	ldr	r3, [pc, #16]	; (800cb5c <NotifyCmdStatus+0x3c>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	2001      	movs	r0, #1
 800cb50:	4798      	blx	r3
  return;
 800cb52:	bf00      	nop
 800cb54:	bf00      	nop
}
 800cb56:	3708      	adds	r7, #8
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd80      	pop	{r7, pc}
 800cb5c:	200005ac 	.word	0x200005ac

0800cb60 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b082      	sub	sp, #8
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	7a5b      	ldrb	r3, [r3, #9]
 800cb6c:	2b0f      	cmp	r3, #15
 800cb6e:	d003      	beq.n	800cb78 <TlEvtReceived+0x18>
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	7a5b      	ldrb	r3, [r3, #9]
 800cb74:	2b0e      	cmp	r3, #14
 800cb76:	d107      	bne.n	800cb88 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800cb78:	6879      	ldr	r1, [r7, #4]
 800cb7a:	4809      	ldr	r0, [pc, #36]	; (800cba0 <TlEvtReceived+0x40>)
 800cb7c:	f000 fcf0 	bl	800d560 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800cb80:	2000      	movs	r0, #0
 800cb82:	f002 f85b 	bl	800ec3c <hci_cmd_resp_release>
 800cb86:	e006      	b.n	800cb96 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800cb88:	6879      	ldr	r1, [r7, #4]
 800cb8a:	4806      	ldr	r0, [pc, #24]	; (800cba4 <TlEvtReceived+0x44>)
 800cb8c:	f000 fce8 	bl	800d560 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800cb90:	4804      	ldr	r0, [pc, #16]	; (800cba4 <TlEvtReceived+0x44>)
 800cb92:	f002 f847 	bl	800ec24 <hci_notify_asynch_evt>
  }

  return;
 800cb96:	bf00      	nop
}
 800cb98:	3708      	adds	r7, #8
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}
 800cb9e:	bf00      	nop
 800cba0:	200005a4 	.word	0x200005a4
 800cba4:	20000270 	.word	0x20000270

0800cba8 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b083      	sub	sp, #12
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	4a05      	ldr	r2, [pc, #20]	; (800cbc8 <hci_register_io_bus+0x20>)
 800cbb4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	4a04      	ldr	r2, [pc, #16]	; (800cbcc <hci_register_io_bus+0x24>)
 800cbba:	611a      	str	r2, [r3, #16]

  return;
 800cbbc:	bf00      	nop
}
 800cbbe:	370c      	adds	r7, #12
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc6:	4770      	bx	lr
 800cbc8:	0800cec1 	.word	0x0800cec1
 800cbcc:	0800cf29 	.word	0x0800cf29

0800cbd0 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b082      	sub	sp, #8
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
 800cbd8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	685b      	ldr	r3, [r3, #4]
 800cbde:	4a08      	ldr	r2, [pc, #32]	; (800cc00 <shci_init+0x30>)
 800cbe0:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800cbe2:	4a08      	ldr	r2, [pc, #32]	; (800cc04 <shci_init+0x34>)
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800cbe8:	4806      	ldr	r0, [pc, #24]	; (800cc04 <shci_init+0x34>)
 800cbea:	f000 f915 	bl	800ce18 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f000 f898 	bl	800cd28 <TlInit>

  return;
 800cbf8:	bf00      	nop
}
 800cbfa:	3708      	adds	r7, #8
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}
 800cc00:	200005d4 	.word	0x200005d4
 800cc04:	200005b4 	.word	0x200005b4

0800cc08 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b084      	sub	sp, #16
 800cc0c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800cc0e:	4822      	ldr	r0, [pc, #136]	; (800cc98 <shci_user_evt_proc+0x90>)
 800cc10:	f000 fc5e 	bl	800d4d0 <LST_is_empty>
 800cc14:	4603      	mov	r3, r0
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d12b      	bne.n	800cc72 <shci_user_evt_proc+0x6a>
 800cc1a:	4b20      	ldr	r3, [pc, #128]	; (800cc9c <shci_user_evt_proc+0x94>)
 800cc1c:	781b      	ldrb	r3, [r3, #0]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d027      	beq.n	800cc72 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800cc22:	f107 030c 	add.w	r3, r7, #12
 800cc26:	4619      	mov	r1, r3
 800cc28:	481b      	ldr	r0, [pc, #108]	; (800cc98 <shci_user_evt_proc+0x90>)
 800cc2a:	f000 fce0 	bl	800d5ee <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800cc2e:	4b1c      	ldr	r3, [pc, #112]	; (800cca0 <shci_user_evt_proc+0x98>)
 800cc30:	69db      	ldr	r3, [r3, #28]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d00c      	beq.n	800cc50 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800cc3e:	4b18      	ldr	r3, [pc, #96]	; (800cca0 <shci_user_evt_proc+0x98>)
 800cc40:	69db      	ldr	r3, [r3, #28]
 800cc42:	1d3a      	adds	r2, r7, #4
 800cc44:	4610      	mov	r0, r2
 800cc46:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800cc48:	793a      	ldrb	r2, [r7, #4]
 800cc4a:	4b14      	ldr	r3, [pc, #80]	; (800cc9c <shci_user_evt_proc+0x94>)
 800cc4c:	701a      	strb	r2, [r3, #0]
 800cc4e:	e002      	b.n	800cc56 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800cc50:	4b12      	ldr	r3, [pc, #72]	; (800cc9c <shci_user_evt_proc+0x94>)
 800cc52:	2201      	movs	r2, #1
 800cc54:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800cc56:	4b11      	ldr	r3, [pc, #68]	; (800cc9c <shci_user_evt_proc+0x94>)
 800cc58:	781b      	ldrb	r3, [r3, #0]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d004      	beq.n	800cc68 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	4618      	mov	r0, r3
 800cc62:	f000 fa71 	bl	800d148 <TL_MM_EvtDone>
 800cc66:	e004      	b.n	800cc72 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	4619      	mov	r1, r3
 800cc6c:	480a      	ldr	r0, [pc, #40]	; (800cc98 <shci_user_evt_proc+0x90>)
 800cc6e:	f000 fc51 	bl	800d514 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800cc72:	4809      	ldr	r0, [pc, #36]	; (800cc98 <shci_user_evt_proc+0x90>)
 800cc74:	f000 fc2c 	bl	800d4d0 <LST_is_empty>
 800cc78:	4603      	mov	r3, r0
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d107      	bne.n	800cc8e <shci_user_evt_proc+0x86>
 800cc7e:	4b07      	ldr	r3, [pc, #28]	; (800cc9c <shci_user_evt_proc+0x94>)
 800cc80:	781b      	ldrb	r3, [r3, #0]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d003      	beq.n	800cc8e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800cc86:	4804      	ldr	r0, [pc, #16]	; (800cc98 <shci_user_evt_proc+0x90>)
 800cc88:	f7f5 f9e9 	bl	800205e <shci_notify_asynch_evt>
  }


  return;
 800cc8c:	bf00      	nop
 800cc8e:	bf00      	nop
}
 800cc90:	3710      	adds	r7, #16
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}
 800cc96:	bf00      	nop
 800cc98:	20000280 	.word	0x20000280
 800cc9c:	20000290 	.word	0x20000290
 800cca0:	200005b4 	.word	0x200005b4

0800cca4 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b084      	sub	sp, #16
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	60ba      	str	r2, [r7, #8]
 800ccac:	607b      	str	r3, [r7, #4]
 800ccae:	4603      	mov	r3, r0
 800ccb0:	81fb      	strh	r3, [r7, #14]
 800ccb2:	460b      	mov	r3, r1
 800ccb4:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800ccb6:	2000      	movs	r0, #0
 800ccb8:	f000 f868 	bl	800cd8c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800ccbc:	4b17      	ldr	r3, [pc, #92]	; (800cd1c <shci_send+0x78>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	89fa      	ldrh	r2, [r7, #14]
 800ccc2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800ccc6:	4b15      	ldr	r3, [pc, #84]	; (800cd1c <shci_send+0x78>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	7b7a      	ldrb	r2, [r7, #13]
 800cccc:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800ccce:	4b13      	ldr	r3, [pc, #76]	; (800cd1c <shci_send+0x78>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	330c      	adds	r3, #12
 800ccd4:	7b7a      	ldrb	r2, [r7, #13]
 800ccd6:	68b9      	ldr	r1, [r7, #8]
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f005 fe07 	bl	80128ec <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800ccde:	4b10      	ldr	r3, [pc, #64]	; (800cd20 <shci_send+0x7c>)
 800cce0:	2201      	movs	r2, #1
 800cce2:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800cce4:	4b0f      	ldr	r3, [pc, #60]	; (800cd24 <shci_send+0x80>)
 800cce6:	691b      	ldr	r3, [r3, #16]
 800cce8:	2100      	movs	r1, #0
 800ccea:	2000      	movs	r0, #0
 800ccec:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800ccee:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800ccf2:	f7f5 f9cb 	bl	800208c <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f103 0008 	add.w	r0, r3, #8
 800ccfc:	4b07      	ldr	r3, [pc, #28]	; (800cd1c <shci_send+0x78>)
 800ccfe:	6819      	ldr	r1, [r3, #0]
 800cd00:	4b06      	ldr	r3, [pc, #24]	; (800cd1c <shci_send+0x78>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	789b      	ldrb	r3, [r3, #2]
 800cd06:	3303      	adds	r3, #3
 800cd08:	461a      	mov	r2, r3
 800cd0a:	f005 fdef 	bl	80128ec <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800cd0e:	2001      	movs	r0, #1
 800cd10:	f000 f83c 	bl	800cd8c <Cmd_SetStatus>

  return;
 800cd14:	bf00      	nop
}
 800cd16:	3710      	adds	r7, #16
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}
 800cd1c:	2000028c 	.word	0x2000028c
 800cd20:	200005d8 	.word	0x200005d8
 800cd24:	200005b4 	.word	0x200005b4

0800cd28 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b086      	sub	sp, #24
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800cd30:	4a10      	ldr	r2, [pc, #64]	; (800cd74 <TlInit+0x4c>)
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800cd36:	4810      	ldr	r0, [pc, #64]	; (800cd78 <TlInit+0x50>)
 800cd38:	f000 fbba 	bl	800d4b0 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800cd3c:	2001      	movs	r0, #1
 800cd3e:	f000 f825 	bl	800cd8c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800cd42:	4b0e      	ldr	r3, [pc, #56]	; (800cd7c <TlInit+0x54>)
 800cd44:	2201      	movs	r2, #1
 800cd46:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800cd48:	4b0d      	ldr	r3, [pc, #52]	; (800cd80 <TlInit+0x58>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d00c      	beq.n	800cd6a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800cd54:	4b0b      	ldr	r3, [pc, #44]	; (800cd84 <TlInit+0x5c>)
 800cd56:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800cd58:	4b0b      	ldr	r3, [pc, #44]	; (800cd88 <TlInit+0x60>)
 800cd5a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800cd5c:	4b08      	ldr	r3, [pc, #32]	; (800cd80 <TlInit+0x58>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f107 020c 	add.w	r2, r7, #12
 800cd64:	4610      	mov	r0, r2
 800cd66:	4798      	blx	r3
  }

  return;
 800cd68:	bf00      	nop
 800cd6a:	bf00      	nop
}
 800cd6c:	3718      	adds	r7, #24
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}
 800cd72:	bf00      	nop
 800cd74:	2000028c 	.word	0x2000028c
 800cd78:	20000280 	.word	0x20000280
 800cd7c:	20000290 	.word	0x20000290
 800cd80:	200005b4 	.word	0x200005b4
 800cd84:	0800cddd 	.word	0x0800cddd
 800cd88:	0800cdf5 	.word	0x0800cdf5

0800cd8c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b082      	sub	sp, #8
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	4603      	mov	r3, r0
 800cd94:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800cd96:	79fb      	ldrb	r3, [r7, #7]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d10b      	bne.n	800cdb4 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800cd9c:	4b0d      	ldr	r3, [pc, #52]	; (800cdd4 <Cmd_SetStatus+0x48>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d003      	beq.n	800cdac <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800cda4:	4b0b      	ldr	r3, [pc, #44]	; (800cdd4 <Cmd_SetStatus+0x48>)
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	2000      	movs	r0, #0
 800cdaa:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800cdac:	4b0a      	ldr	r3, [pc, #40]	; (800cdd8 <Cmd_SetStatus+0x4c>)
 800cdae:	2200      	movs	r2, #0
 800cdb0:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800cdb2:	e00b      	b.n	800cdcc <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800cdb4:	4b08      	ldr	r3, [pc, #32]	; (800cdd8 <Cmd_SetStatus+0x4c>)
 800cdb6:	2201      	movs	r2, #1
 800cdb8:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800cdba:	4b06      	ldr	r3, [pc, #24]	; (800cdd4 <Cmd_SetStatus+0x48>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d004      	beq.n	800cdcc <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800cdc2:	4b04      	ldr	r3, [pc, #16]	; (800cdd4 <Cmd_SetStatus+0x48>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	2001      	movs	r0, #1
 800cdc8:	4798      	blx	r3
  return;
 800cdca:	bf00      	nop
 800cdcc:	bf00      	nop
}
 800cdce:	3708      	adds	r7, #8
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}
 800cdd4:	200005d4 	.word	0x200005d4
 800cdd8:	20000288 	.word	0x20000288

0800cddc <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b082      	sub	sp, #8
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800cde4:	2000      	movs	r0, #0
 800cde6:	f7f5 f946 	bl	8002076 <shci_cmd_resp_release>

  return;
 800cdea:	bf00      	nop
}
 800cdec:	3708      	adds	r7, #8
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}
	...

0800cdf4 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b082      	sub	sp, #8
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800cdfc:	6879      	ldr	r1, [r7, #4]
 800cdfe:	4805      	ldr	r0, [pc, #20]	; (800ce14 <TlUserEvtReceived+0x20>)
 800ce00:	f000 fbae 	bl	800d560 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800ce04:	4803      	ldr	r0, [pc, #12]	; (800ce14 <TlUserEvtReceived+0x20>)
 800ce06:	f7f5 f92a 	bl	800205e <shci_notify_asynch_evt>

  return;
 800ce0a:	bf00      	nop
}
 800ce0c:	3708      	adds	r7, #8
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}
 800ce12:	bf00      	nop
 800ce14:	20000280 	.word	0x20000280

0800ce18 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800ce18:	b480      	push	{r7}
 800ce1a:	b083      	sub	sp, #12
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	4a05      	ldr	r2, [pc, #20]	; (800ce38 <shci_register_io_bus+0x20>)
 800ce24:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	4a04      	ldr	r2, [pc, #16]	; (800ce3c <shci_register_io_bus+0x24>)
 800ce2a:	611a      	str	r2, [r3, #16]

  return;
 800ce2c:	bf00      	nop
}
 800ce2e:	370c      	adds	r7, #12
 800ce30:	46bd      	mov	sp, r7
 800ce32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce36:	4770      	bx	lr
 800ce38:	0800cfd5 	.word	0x0800cfd5
 800ce3c:	0800d029 	.word	0x0800d029

0800ce40 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800ce44:	f004 f8d6 	bl	8010ff4 <HW_IPCC_Enable>

  return;
 800ce48:	bf00      	nop
}
 800ce4a:	bd80      	pop	{r7, pc}

0800ce4c <TL_Init>:


void TL_Init( void )
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800ce50:	4b10      	ldr	r3, [pc, #64]	; (800ce94 <TL_Init+0x48>)
 800ce52:	4a11      	ldr	r2, [pc, #68]	; (800ce98 <TL_Init+0x4c>)
 800ce54:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800ce56:	4b0f      	ldr	r3, [pc, #60]	; (800ce94 <TL_Init+0x48>)
 800ce58:	4a10      	ldr	r2, [pc, #64]	; (800ce9c <TL_Init+0x50>)
 800ce5a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800ce5c:	4b0d      	ldr	r3, [pc, #52]	; (800ce94 <TL_Init+0x48>)
 800ce5e:	4a10      	ldr	r2, [pc, #64]	; (800cea0 <TL_Init+0x54>)
 800ce60:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800ce62:	4b0c      	ldr	r3, [pc, #48]	; (800ce94 <TL_Init+0x48>)
 800ce64:	4a0f      	ldr	r2, [pc, #60]	; (800cea4 <TL_Init+0x58>)
 800ce66:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800ce68:	4b0a      	ldr	r3, [pc, #40]	; (800ce94 <TL_Init+0x48>)
 800ce6a:	4a0f      	ldr	r2, [pc, #60]	; (800cea8 <TL_Init+0x5c>)
 800ce6c:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800ce6e:	4b09      	ldr	r3, [pc, #36]	; (800ce94 <TL_Init+0x48>)
 800ce70:	4a0e      	ldr	r2, [pc, #56]	; (800ceac <TL_Init+0x60>)
 800ce72:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800ce74:	4b07      	ldr	r3, [pc, #28]	; (800ce94 <TL_Init+0x48>)
 800ce76:	4a0e      	ldr	r2, [pc, #56]	; (800ceb0 <TL_Init+0x64>)
 800ce78:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800ce7a:	4b06      	ldr	r3, [pc, #24]	; (800ce94 <TL_Init+0x48>)
 800ce7c:	4a0d      	ldr	r2, [pc, #52]	; (800ceb4 <TL_Init+0x68>)
 800ce7e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800ce80:	4b04      	ldr	r3, [pc, #16]	; (800ce94 <TL_Init+0x48>)
 800ce82:	4a0d      	ldr	r2, [pc, #52]	; (800ceb8 <TL_Init+0x6c>)
 800ce84:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800ce86:	4b03      	ldr	r3, [pc, #12]	; (800ce94 <TL_Init+0x48>)
 800ce88:	4a0c      	ldr	r2, [pc, #48]	; (800cebc <TL_Init+0x70>)
 800ce8a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800ce8c:	f004 f8c6 	bl	801101c <HW_IPCC_Init>

  return;
 800ce90:	bf00      	nop
}
 800ce92:	bd80      	pop	{r7, pc}
 800ce94:	20030000 	.word	0x20030000
 800ce98:	20030028 	.word	0x20030028
 800ce9c:	20030048 	.word	0x20030048
 800cea0:	20030058 	.word	0x20030058
 800cea4:	20030068 	.word	0x20030068
 800cea8:	20030070 	.word	0x20030070
 800ceac:	20030078 	.word	0x20030078
 800ceb0:	20030080 	.word	0x20030080
 800ceb4:	2003009c 	.word	0x2003009c
 800ceb8:	200300a0 	.word	0x200300a0
 800cebc:	200300ac 	.word	0x200300ac

0800cec0 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b084      	sub	sp, #16
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800cecc:	4811      	ldr	r0, [pc, #68]	; (800cf14 <TL_BLE_Init+0x54>)
 800cece:	f000 faef 	bl	800d4b0 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800ced2:	4b11      	ldr	r3, [pc, #68]	; (800cf18 <TL_BLE_Init+0x58>)
 800ced4:	685b      	ldr	r3, [r3, #4]
 800ced6:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	689a      	ldr	r2, [r3, #8]
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	68da      	ldr	r2, [r3, #12]
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800cee8:	68bb      	ldr	r3, [r7, #8]
 800ceea:	4a0c      	ldr	r2, [pc, #48]	; (800cf1c <TL_BLE_Init+0x5c>)
 800ceec:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	4a08      	ldr	r2, [pc, #32]	; (800cf14 <TL_BLE_Init+0x54>)
 800cef2:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800cef4:	f004 f8a8 	bl	8011048 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	4a08      	ldr	r2, [pc, #32]	; (800cf20 <TL_BLE_Init+0x60>)
 800cefe:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	685b      	ldr	r3, [r3, #4]
 800cf04:	4a07      	ldr	r2, [pc, #28]	; (800cf24 <TL_BLE_Init+0x64>)
 800cf06:	6013      	str	r3, [r2, #0]

  return 0;
 800cf08:	2300      	movs	r3, #0
}
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	3710      	adds	r7, #16
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}
 800cf12:	bf00      	nop
 800cf14:	200300c8 	.word	0x200300c8
 800cf18:	20030000 	.word	0x20030000
 800cf1c:	20030a58 	.word	0x20030a58
 800cf20:	200005e4 	.word	0x200005e4
 800cf24:	200005e8 	.word	0x200005e8

0800cf28 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b082      	sub	sp, #8
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
 800cf30:	460b      	mov	r3, r1
 800cf32:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800cf34:	4b09      	ldr	r3, [pc, #36]	; (800cf5c <TL_BLE_SendCmd+0x34>)
 800cf36:	685b      	ldr	r3, [r3, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	2201      	movs	r2, #1
 800cf3c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800cf3e:	4b07      	ldr	r3, [pc, #28]	; (800cf5c <TL_BLE_SendCmd+0x34>)
 800cf40:	685b      	ldr	r3, [r3, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	4619      	mov	r1, r3
 800cf46:	2001      	movs	r0, #1
 800cf48:	f000 f96c 	bl	800d224 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800cf4c:	f004 f886 	bl	801105c <HW_IPCC_BLE_SendCmd>

  return 0;
 800cf50:	2300      	movs	r3, #0
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3708      	adds	r7, #8
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}
 800cf5a:	bf00      	nop
 800cf5c:	20030000 	.word	0x20030000

0800cf60 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b082      	sub	sp, #8
 800cf64:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800cf66:	e01c      	b.n	800cfa2 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800cf68:	1d3b      	adds	r3, r7, #4
 800cf6a:	4619      	mov	r1, r3
 800cf6c:	4812      	ldr	r0, [pc, #72]	; (800cfb8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800cf6e:	f000 fb3e 	bl	800d5ee <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	7a5b      	ldrb	r3, [r3, #9]
 800cf76:	2b0f      	cmp	r3, #15
 800cf78:	d003      	beq.n	800cf82 <HW_IPCC_BLE_RxEvtNot+0x22>
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	7a5b      	ldrb	r3, [r3, #9]
 800cf7e:	2b0e      	cmp	r3, #14
 800cf80:	d105      	bne.n	800cf8e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	4619      	mov	r1, r3
 800cf86:	2002      	movs	r0, #2
 800cf88:	f000 f94c 	bl	800d224 <OutputDbgTrace>
 800cf8c:	e004      	b.n	800cf98 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	4619      	mov	r1, r3
 800cf92:	2003      	movs	r0, #3
 800cf94:	f000 f946 	bl	800d224 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800cf98:	4b08      	ldr	r3, [pc, #32]	; (800cfbc <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	687a      	ldr	r2, [r7, #4]
 800cf9e:	4610      	mov	r0, r2
 800cfa0:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800cfa2:	4805      	ldr	r0, [pc, #20]	; (800cfb8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800cfa4:	f000 fa94 	bl	800d4d0 <LST_is_empty>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d0dc      	beq.n	800cf68 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800cfae:	bf00      	nop
}
 800cfb0:	3708      	adds	r7, #8
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}
 800cfb6:	bf00      	nop
 800cfb8:	200300c8 	.word	0x200300c8
 800cfbc:	200005e4 	.word	0x200005e4

0800cfc0 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800cfc4:	4b02      	ldr	r3, [pc, #8]	; (800cfd0 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	4798      	blx	r3

  return;
 800cfca:	bf00      	nop
}
 800cfcc:	bd80      	pop	{r7, pc}
 800cfce:	bf00      	nop
 800cfd0:	200005e8 	.word	0x200005e8

0800cfd4 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b084      	sub	sp, #16
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800cfe0:	480d      	ldr	r0, [pc, #52]	; (800d018 <TL_SYS_Init+0x44>)
 800cfe2:	f000 fa65 	bl	800d4b0 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800cfe6:	4b0d      	ldr	r3, [pc, #52]	; (800d01c <TL_SYS_Init+0x48>)
 800cfe8:	68db      	ldr	r3, [r3, #12]
 800cfea:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	689a      	ldr	r2, [r3, #8]
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	4a08      	ldr	r2, [pc, #32]	; (800d018 <TL_SYS_Init+0x44>)
 800cff8:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800cffa:	f004 f851 	bl	80110a0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	4a07      	ldr	r2, [pc, #28]	; (800d020 <TL_SYS_Init+0x4c>)
 800d004:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	685b      	ldr	r3, [r3, #4]
 800d00a:	4a06      	ldr	r2, [pc, #24]	; (800d024 <TL_SYS_Init+0x50>)
 800d00c:	6013      	str	r3, [r2, #0]

  return 0;
 800d00e:	2300      	movs	r3, #0
}
 800d010:	4618      	mov	r0, r3
 800d012:	3710      	adds	r7, #16
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}
 800d018:	200300d0 	.word	0x200300d0
 800d01c:	20030000 	.word	0x20030000
 800d020:	200005ec 	.word	0x200005ec
 800d024:	200005f0 	.word	0x200005f0

0800d028 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b082      	sub	sp, #8
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
 800d030:	460b      	mov	r3, r1
 800d032:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800d034:	4b09      	ldr	r3, [pc, #36]	; (800d05c <TL_SYS_SendCmd+0x34>)
 800d036:	68db      	ldr	r3, [r3, #12]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	2210      	movs	r2, #16
 800d03c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800d03e:	4b07      	ldr	r3, [pc, #28]	; (800d05c <TL_SYS_SendCmd+0x34>)
 800d040:	68db      	ldr	r3, [r3, #12]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	4619      	mov	r1, r3
 800d046:	2004      	movs	r0, #4
 800d048:	f000 f8ec 	bl	800d224 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800d04c:	f004 f832 	bl	80110b4 <HW_IPCC_SYS_SendCmd>

  return 0;
 800d050:	2300      	movs	r3, #0
}
 800d052:	4618      	mov	r0, r3
 800d054:	3708      	adds	r7, #8
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}
 800d05a:	bf00      	nop
 800d05c:	20030000 	.word	0x20030000

0800d060 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800d064:	4b07      	ldr	r3, [pc, #28]	; (800d084 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800d066:	68db      	ldr	r3, [r3, #12]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	4619      	mov	r1, r3
 800d06c:	2005      	movs	r0, #5
 800d06e:	f000 f8d9 	bl	800d224 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800d072:	4b05      	ldr	r3, [pc, #20]	; (800d088 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	4a03      	ldr	r2, [pc, #12]	; (800d084 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800d078:	68d2      	ldr	r2, [r2, #12]
 800d07a:	6812      	ldr	r2, [r2, #0]
 800d07c:	4610      	mov	r0, r2
 800d07e:	4798      	blx	r3

  return;
 800d080:	bf00      	nop
}
 800d082:	bd80      	pop	{r7, pc}
 800d084:	20030000 	.word	0x20030000
 800d088:	200005ec 	.word	0x200005ec

0800d08c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b082      	sub	sp, #8
 800d090:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800d092:	e00e      	b.n	800d0b2 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800d094:	1d3b      	adds	r3, r7, #4
 800d096:	4619      	mov	r1, r3
 800d098:	480b      	ldr	r0, [pc, #44]	; (800d0c8 <HW_IPCC_SYS_EvtNot+0x3c>)
 800d09a:	f000 faa8 	bl	800d5ee <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	4619      	mov	r1, r3
 800d0a2:	2006      	movs	r0, #6
 800d0a4:	f000 f8be 	bl	800d224 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800d0a8:	4b08      	ldr	r3, [pc, #32]	; (800d0cc <HW_IPCC_SYS_EvtNot+0x40>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	687a      	ldr	r2, [r7, #4]
 800d0ae:	4610      	mov	r0, r2
 800d0b0:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800d0b2:	4805      	ldr	r0, [pc, #20]	; (800d0c8 <HW_IPCC_SYS_EvtNot+0x3c>)
 800d0b4:	f000 fa0c 	bl	800d4d0 <LST_is_empty>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d0ea      	beq.n	800d094 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800d0be:	bf00      	nop
}
 800d0c0:	3708      	adds	r7, #8
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}
 800d0c6:	bf00      	nop
 800d0c8:	200300d0 	.word	0x200300d0
 800d0cc:	200005f0 	.word	0x200005f0

0800d0d0 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b082      	sub	sp, #8
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800d0d8:	4817      	ldr	r0, [pc, #92]	; (800d138 <TL_MM_Init+0x68>)
 800d0da:	f000 f9e9 	bl	800d4b0 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800d0de:	4817      	ldr	r0, [pc, #92]	; (800d13c <TL_MM_Init+0x6c>)
 800d0e0:	f000 f9e6 	bl	800d4b0 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800d0e4:	4b16      	ldr	r3, [pc, #88]	; (800d140 <TL_MM_Init+0x70>)
 800d0e6:	691b      	ldr	r3, [r3, #16]
 800d0e8:	4a16      	ldr	r2, [pc, #88]	; (800d144 <TL_MM_Init+0x74>)
 800d0ea:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800d0ec:	4b15      	ldr	r3, [pc, #84]	; (800d144 <TL_MM_Init+0x74>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	687a      	ldr	r2, [r7, #4]
 800d0f2:	6892      	ldr	r2, [r2, #8]
 800d0f4:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800d0f6:	4b13      	ldr	r3, [pc, #76]	; (800d144 <TL_MM_Init+0x74>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	687a      	ldr	r2, [r7, #4]
 800d0fc:	68d2      	ldr	r2, [r2, #12]
 800d0fe:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800d100:	4b10      	ldr	r3, [pc, #64]	; (800d144 <TL_MM_Init+0x74>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	4a0c      	ldr	r2, [pc, #48]	; (800d138 <TL_MM_Init+0x68>)
 800d106:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800d108:	4b0e      	ldr	r3, [pc, #56]	; (800d144 <TL_MM_Init+0x74>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	687a      	ldr	r2, [r7, #4]
 800d10e:	6812      	ldr	r2, [r2, #0]
 800d110:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800d112:	4b0c      	ldr	r3, [pc, #48]	; (800d144 <TL_MM_Init+0x74>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	687a      	ldr	r2, [r7, #4]
 800d118:	6852      	ldr	r2, [r2, #4]
 800d11a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800d11c:	4b09      	ldr	r3, [pc, #36]	; (800d144 <TL_MM_Init+0x74>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	687a      	ldr	r2, [r7, #4]
 800d122:	6912      	ldr	r2, [r2, #16]
 800d124:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800d126:	4b07      	ldr	r3, [pc, #28]	; (800d144 <TL_MM_Init+0x74>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	687a      	ldr	r2, [r7, #4]
 800d12c:	6952      	ldr	r2, [r2, #20]
 800d12e:	619a      	str	r2, [r3, #24]

  return;
 800d130:	bf00      	nop
}
 800d132:	3708      	adds	r7, #8
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}
 800d138:	200300b8 	.word	0x200300b8
 800d13c:	200005dc 	.word	0x200005dc
 800d140:	20030000 	.word	0x20030000
 800d144:	200005f4 	.word	0x200005f4

0800d148 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b082      	sub	sp, #8
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800d150:	6879      	ldr	r1, [r7, #4]
 800d152:	4807      	ldr	r0, [pc, #28]	; (800d170 <TL_MM_EvtDone+0x28>)
 800d154:	f000 fa04 	bl	800d560 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800d158:	6879      	ldr	r1, [r7, #4]
 800d15a:	2000      	movs	r0, #0
 800d15c:	f000 f862 	bl	800d224 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800d160:	4804      	ldr	r0, [pc, #16]	; (800d174 <TL_MM_EvtDone+0x2c>)
 800d162:	f003 ffcd 	bl	8011100 <HW_IPCC_MM_SendFreeBuf>

  return;
 800d166:	bf00      	nop
}
 800d168:	3708      	adds	r7, #8
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}
 800d16e:	bf00      	nop
 800d170:	200005dc 	.word	0x200005dc
 800d174:	0800d179 	.word	0x0800d179

0800d178 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b082      	sub	sp, #8
 800d17c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800d17e:	e00c      	b.n	800d19a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800d180:	1d3b      	adds	r3, r7, #4
 800d182:	4619      	mov	r1, r3
 800d184:	480a      	ldr	r0, [pc, #40]	; (800d1b0 <SendFreeBuf+0x38>)
 800d186:	f000 fa32 	bl	800d5ee <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800d18a:	4b0a      	ldr	r3, [pc, #40]	; (800d1b4 <SendFreeBuf+0x3c>)
 800d18c:	691b      	ldr	r3, [r3, #16]
 800d18e:	691b      	ldr	r3, [r3, #16]
 800d190:	687a      	ldr	r2, [r7, #4]
 800d192:	4611      	mov	r1, r2
 800d194:	4618      	mov	r0, r3
 800d196:	f000 f9e3 	bl	800d560 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800d19a:	4805      	ldr	r0, [pc, #20]	; (800d1b0 <SendFreeBuf+0x38>)
 800d19c:	f000 f998 	bl	800d4d0 <LST_is_empty>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d0ec      	beq.n	800d180 <SendFreeBuf+0x8>
  }

  return;
 800d1a6:	bf00      	nop
}
 800d1a8:	3708      	adds	r7, #8
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
 800d1ae:	bf00      	nop
 800d1b0:	200005dc 	.word	0x200005dc
 800d1b4:	20030000 	.word	0x20030000

0800d1b8 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800d1bc:	4805      	ldr	r0, [pc, #20]	; (800d1d4 <TL_TRACES_Init+0x1c>)
 800d1be:	f000 f977 	bl	800d4b0 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800d1c2:	4b05      	ldr	r3, [pc, #20]	; (800d1d8 <TL_TRACES_Init+0x20>)
 800d1c4:	695b      	ldr	r3, [r3, #20]
 800d1c6:	4a03      	ldr	r2, [pc, #12]	; (800d1d4 <TL_TRACES_Init+0x1c>)
 800d1c8:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800d1ca:	f003 ffcf 	bl	801116c <HW_IPCC_TRACES_Init>

  return;
 800d1ce:	bf00      	nop
}
 800d1d0:	bd80      	pop	{r7, pc}
 800d1d2:	bf00      	nop
 800d1d4:	200300c0 	.word	0x200300c0
 800d1d8:	20030000 	.word	0x20030000

0800d1dc <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b082      	sub	sp, #8
 800d1e0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800d1e2:	e008      	b.n	800d1f6 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800d1e4:	1d3b      	adds	r3, r7, #4
 800d1e6:	4619      	mov	r1, r3
 800d1e8:	4808      	ldr	r0, [pc, #32]	; (800d20c <HW_IPCC_TRACES_EvtNot+0x30>)
 800d1ea:	f000 fa00 	bl	800d5ee <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f000 f80d 	bl	800d210 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800d1f6:	4805      	ldr	r0, [pc, #20]	; (800d20c <HW_IPCC_TRACES_EvtNot+0x30>)
 800d1f8:	f000 f96a 	bl	800d4d0 <LST_is_empty>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d0f0      	beq.n	800d1e4 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800d202:	bf00      	nop
}
 800d204:	3708      	adds	r7, #8
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}
 800d20a:	bf00      	nop
 800d20c:	200300c0 	.word	0x200300c0

0800d210 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800d210:	b480      	push	{r7}
 800d212:	b083      	sub	sp, #12
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800d218:	bf00      	nop
 800d21a:	370c      	adds	r7, #12
 800d21c:	46bd      	mov	sp, r7
 800d21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d222:	4770      	bx	lr

0800d224 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800d224:	b480      	push	{r7}
 800d226:	b085      	sub	sp, #20
 800d228:	af00      	add	r7, sp, #0
 800d22a:	4603      	mov	r3, r0
 800d22c:	6039      	str	r1, [r7, #0]
 800d22e:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800d230:	79fb      	ldrb	r3, [r7, #7]
 800d232:	2b06      	cmp	r3, #6
 800d234:	d845      	bhi.n	800d2c2 <OutputDbgTrace+0x9e>
 800d236:	a201      	add	r2, pc, #4	; (adr r2, 800d23c <OutputDbgTrace+0x18>)
 800d238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d23c:	0800d259 	.word	0x0800d259
 800d240:	0800d27d 	.word	0x0800d27d
 800d244:	0800d283 	.word	0x0800d283
 800d248:	0800d297 	.word	0x0800d297
 800d24c:	0800d2a3 	.word	0x0800d2a3
 800d250:	0800d2a9 	.word	0x0800d2a9
 800d254:	0800d2b7 	.word	0x0800d2b7
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	7a5b      	ldrb	r3, [r3, #9]
 800d260:	2bff      	cmp	r3, #255	; 0xff
 800d262:	d005      	beq.n	800d270 <OutputDbgTrace+0x4c>
 800d264:	2bff      	cmp	r3, #255	; 0xff
 800d266:	dc05      	bgt.n	800d274 <OutputDbgTrace+0x50>
 800d268:	2b0e      	cmp	r3, #14
 800d26a:	d005      	beq.n	800d278 <OutputDbgTrace+0x54>
 800d26c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800d26e:	e001      	b.n	800d274 <OutputDbgTrace+0x50>
          break;
 800d270:	bf00      	nop
 800d272:	e027      	b.n	800d2c4 <OutputDbgTrace+0xa0>
          break;
 800d274:	bf00      	nop
 800d276:	e025      	b.n	800d2c4 <OutputDbgTrace+0xa0>
          break;
 800d278:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800d27a:	e023      	b.n	800d2c4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800d280:	e020      	b.n	800d2c4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	7a5b      	ldrb	r3, [r3, #9]
 800d28a:	2b0e      	cmp	r3, #14
 800d28c:	d001      	beq.n	800d292 <OutputDbgTrace+0x6e>
 800d28e:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800d290:	e000      	b.n	800d294 <OutputDbgTrace+0x70>
          break;
 800d292:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800d294:	e016      	b.n	800d2c4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	7a5b      	ldrb	r3, [r3, #9]
 800d29e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800d2a0:	e010      	b.n	800d2c4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800d2a6:	e00d      	b.n	800d2c4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	7a5b      	ldrb	r3, [r3, #9]
 800d2b0:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800d2b2:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800d2b4:	e006      	b.n	800d2c4 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	7a5b      	ldrb	r3, [r3, #9]
 800d2be:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800d2c0:	e000      	b.n	800d2c4 <OutputDbgTrace+0xa0>

    default:
      break;
 800d2c2:	bf00      	nop
  }

  return;
 800d2c4:	bf00      	nop
}
 800d2c6:	3714      	adds	r7, #20
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ce:	4770      	bx	lr

0800d2d0 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b084      	sub	sp, #16
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 800d2dc:	215c      	movs	r1, #92	; 0x5c
 800d2de:	6878      	ldr	r0, [r7, #4]
 800d2e0:	f005 fa76 	bl	80127d0 <strrchr>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d007      	beq.n	800d2fa <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 800d2ea:	215c      	movs	r1, #92	; 0x5c
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f005 fa6f 	bl	80127d0 <strrchr>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	3301      	adds	r3, #1
 800d2f6:	60fb      	str	r3, [r7, #12]
 800d2f8:	e00d      	b.n	800d316 <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 800d2fa:	212f      	movs	r1, #47	; 0x2f
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f005 fa67 	bl	80127d0 <strrchr>
 800d302:	4603      	mov	r3, r0
 800d304:	2b00      	cmp	r3, #0
 800d306:	d006      	beq.n	800d316 <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 800d308:	212f      	movs	r1, #47	; 0x2f
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	f005 fa60 	bl	80127d0 <strrchr>
 800d310:	4603      	mov	r3, r0
 800d312:	3301      	adds	r3, #1
 800d314:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800d316:	68fb      	ldr	r3, [r7, #12]
}
 800d318:	4618      	mov	r0, r3
 800d31a:	3710      	adds	r7, #16
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}

0800d320 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b086      	sub	sp, #24
 800d324:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d326:	f3ef 8310 	mrs	r3, PRIMASK
 800d32a:	60fb      	str	r3, [r7, #12]
  return(result);
 800d32c:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800d32e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d330:	b672      	cpsid	i
}
 800d332:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800d334:	1cbb      	adds	r3, r7, #2
 800d336:	4619      	mov	r1, r3
 800d338:	4812      	ldr	r0, [pc, #72]	; (800d384 <DbgTrace_TxCpltCallback+0x64>)
 800d33a:	f000 fb9e 	bl	800da7a <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800d33e:	1cbb      	adds	r3, r7, #2
 800d340:	4619      	mov	r1, r3
 800d342:	4810      	ldr	r0, [pc, #64]	; (800d384 <DbgTrace_TxCpltCallback+0x64>)
 800d344:	f000 fc8a 	bl	800dc5c <CircularQueue_Sense>
 800d348:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800d34a:	693b      	ldr	r3, [r7, #16]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d00c      	beq.n	800d36a <DbgTrace_TxCpltCallback+0x4a>
 800d350:	697b      	ldr	r3, [r7, #20]
 800d352:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d354:	68bb      	ldr	r3, [r7, #8]
 800d356:	f383 8810 	msr	PRIMASK, r3
}
 800d35a:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800d35c:	887b      	ldrh	r3, [r7, #2]
 800d35e:	4a0a      	ldr	r2, [pc, #40]	; (800d388 <DbgTrace_TxCpltCallback+0x68>)
 800d360:	4619      	mov	r1, r3
 800d362:	6938      	ldr	r0, [r7, #16]
 800d364:	f7f4 f99e 	bl	80016a4 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800d368:	e008      	b.n	800d37c <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800d36a:	4b08      	ldr	r3, [pc, #32]	; (800d38c <DbgTrace_TxCpltCallback+0x6c>)
 800d36c:	2201      	movs	r2, #1
 800d36e:	701a      	strb	r2, [r3, #0]
 800d370:	697b      	ldr	r3, [r7, #20]
 800d372:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	f383 8810 	msr	PRIMASK, r3
}
 800d37a:	bf00      	nop
}
 800d37c:	bf00      	nop
 800d37e:	3718      	adds	r7, #24
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}
 800d384:	200005f8 	.word	0x200005f8
 800d388:	0800d321 	.word	0x0800d321
 800d38c:	2000003d 	.word	0x2000003d

0800d390 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b084      	sub	sp, #16
 800d394:	af00      	add	r7, sp, #0
 800d396:	60f8      	str	r0, [r7, #12]
 800d398:	60b9      	str	r1, [r7, #8]
 800d39a:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800d39c:	687a      	ldr	r2, [r7, #4]
 800d39e:	68b9      	ldr	r1, [r7, #8]
 800d3a0:	68f8      	ldr	r0, [r7, #12]
 800d3a2:	f000 f805 	bl	800d3b0 <DbgTraceWrite>
 800d3a6:	4603      	mov	r3, r0
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3710      	adds	r7, #16
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}

0800d3b0 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b08a      	sub	sp, #40	; 0x28
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	60f8      	str	r0, [r7, #12]
 800d3b8:	60b9      	str	r1, [r7, #8]
 800d3ba:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800d3bc:	2300      	movs	r3, #0
 800d3be:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d3c0:	f3ef 8310 	mrs	r3, PRIMASK
 800d3c4:	61bb      	str	r3, [r7, #24]
  return(result);
 800d3c6:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800d3c8:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3d0:	d102      	bne.n	800d3d8 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	627b      	str	r3, [r7, #36]	; 0x24
 800d3d6:	e037      	b.n	800d448 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	2b01      	cmp	r3, #1
 800d3dc:	d006      	beq.n	800d3ec <DbgTraceWrite+0x3c>
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	2b02      	cmp	r3, #2
 800d3e2:	d003      	beq.n	800d3ec <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800d3e4:	f04f 33ff 	mov.w	r3, #4294967295
 800d3e8:	627b      	str	r3, [r7, #36]	; 0x24
 800d3ea:	e02d      	b.n	800d448 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d02a      	beq.n	800d448 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800d3f6:	b672      	cpsid	i
}
 800d3f8:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	b29a      	uxth	r2, r3
 800d3fe:	2301      	movs	r3, #1
 800d400:	68b9      	ldr	r1, [r7, #8]
 800d402:	4814      	ldr	r0, [pc, #80]	; (800d454 <DbgTraceWrite+0xa4>)
 800d404:	f000 f912 	bl	800d62c <CircularQueue_Add>
 800d408:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800d40a:	69fb      	ldr	r3, [r7, #28]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d015      	beq.n	800d43c <DbgTraceWrite+0x8c>
 800d410:	4b11      	ldr	r3, [pc, #68]	; (800d458 <DbgTraceWrite+0xa8>)
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	b2db      	uxtb	r3, r3
 800d416:	2b00      	cmp	r3, #0
 800d418:	d010      	beq.n	800d43c <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800d41a:	4b0f      	ldr	r3, [pc, #60]	; (800d458 <DbgTraceWrite+0xa8>)
 800d41c:	2200      	movs	r2, #0
 800d41e:	701a      	strb	r2, [r3, #0]
 800d420:	6a3b      	ldr	r3, [r7, #32]
 800d422:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d424:	697b      	ldr	r3, [r7, #20]
 800d426:	f383 8810 	msr	PRIMASK, r3
}
 800d42a:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	b29b      	uxth	r3, r3
 800d430:	4a0a      	ldr	r2, [pc, #40]	; (800d45c <DbgTraceWrite+0xac>)
 800d432:	4619      	mov	r1, r3
 800d434:	69f8      	ldr	r0, [r7, #28]
 800d436:	f7f4 f935 	bl	80016a4 <DbgOutputTraces>
 800d43a:	e005      	b.n	800d448 <DbgTraceWrite+0x98>
 800d43c:	6a3b      	ldr	r3, [r7, #32]
 800d43e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d440:	693b      	ldr	r3, [r7, #16]
 800d442:	f383 8810 	msr	PRIMASK, r3
}
 800d446:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800d448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d44a:	4618      	mov	r0, r3
 800d44c:	3728      	adds	r7, #40	; 0x28
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}
 800d452:	bf00      	nop
 800d454:	200005f8 	.word	0x200005f8
 800d458:	2000003d 	.word	0x2000003d
 800d45c:	0800d321 	.word	0x0800d321

0800d460 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800d460:	b480      	push	{r7}
 800d462:	b085      	sub	sp, #20
 800d464:	af00      	add	r7, sp, #0
 800d466:	4603      	mov	r3, r0
 800d468:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800d46a:	4b0f      	ldr	r3, [pc, #60]	; (800d4a8 <OTP_Read+0x48>)
 800d46c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800d46e:	e002      	b.n	800d476 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	3b08      	subs	r3, #8
 800d474:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	3307      	adds	r3, #7
 800d47a:	781b      	ldrb	r3, [r3, #0]
 800d47c:	79fa      	ldrb	r2, [r7, #7]
 800d47e:	429a      	cmp	r2, r3
 800d480:	d003      	beq.n	800d48a <OTP_Read+0x2a>
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	4a09      	ldr	r2, [pc, #36]	; (800d4ac <OTP_Read+0x4c>)
 800d486:	4293      	cmp	r3, r2
 800d488:	d1f2      	bne.n	800d470 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	3307      	adds	r3, #7
 800d48e:	781b      	ldrb	r3, [r3, #0]
 800d490:	79fa      	ldrb	r2, [r7, #7]
 800d492:	429a      	cmp	r2, r3
 800d494:	d001      	beq.n	800d49a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800d496:	2300      	movs	r3, #0
 800d498:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800d49a:	68fb      	ldr	r3, [r7, #12]
}
 800d49c:	4618      	mov	r0, r3
 800d49e:	3714      	adds	r7, #20
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a6:	4770      	bx	lr
 800d4a8:	1fff73f8 	.word	0x1fff73f8
 800d4ac:	1fff7000 	.word	0x1fff7000

0800d4b0 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	b083      	sub	sp, #12
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	687a      	ldr	r2, [r7, #4]
 800d4bc:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	687a      	ldr	r2, [r7, #4]
 800d4c2:	605a      	str	r2, [r3, #4]
}
 800d4c4:	bf00      	nop
 800d4c6:	370c      	adds	r7, #12
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ce:	4770      	bx	lr

0800d4d0 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800d4d0:	b480      	push	{r7}
 800d4d2:	b087      	sub	sp, #28
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d4d8:	f3ef 8310 	mrs	r3, PRIMASK
 800d4dc:	60fb      	str	r3, [r7, #12]
  return(result);
 800d4de:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d4e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d4e2:	b672      	cpsid	i
}
 800d4e4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	687a      	ldr	r2, [r7, #4]
 800d4ec:	429a      	cmp	r2, r3
 800d4ee:	d102      	bne.n	800d4f6 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	75fb      	strb	r3, [r7, #23]
 800d4f4:	e001      	b.n	800d4fa <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	75fb      	strb	r3, [r7, #23]
 800d4fa:	693b      	ldr	r3, [r7, #16]
 800d4fc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	f383 8810 	msr	PRIMASK, r3
}
 800d504:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800d506:	7dfb      	ldrb	r3, [r7, #23]
}
 800d508:	4618      	mov	r0, r3
 800d50a:	371c      	adds	r7, #28
 800d50c:	46bd      	mov	sp, r7
 800d50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d512:	4770      	bx	lr

0800d514 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800d514:	b480      	push	{r7}
 800d516:	b087      	sub	sp, #28
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
 800d51c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d51e:	f3ef 8310 	mrs	r3, PRIMASK
 800d522:	60fb      	str	r3, [r7, #12]
  return(result);
 800d524:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d526:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d528:	b672      	cpsid	i
}
 800d52a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681a      	ldr	r2, [r3, #0]
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	687a      	ldr	r2, [r7, #4]
 800d538:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	683a      	ldr	r2, [r7, #0]
 800d53e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	683a      	ldr	r2, [r7, #0]
 800d546:	605a      	str	r2, [r3, #4]
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d54c:	693b      	ldr	r3, [r7, #16]
 800d54e:	f383 8810 	msr	PRIMASK, r3
}
 800d552:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800d554:	bf00      	nop
 800d556:	371c      	adds	r7, #28
 800d558:	46bd      	mov	sp, r7
 800d55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55e:	4770      	bx	lr

0800d560 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800d560:	b480      	push	{r7}
 800d562:	b087      	sub	sp, #28
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
 800d568:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d56a:	f3ef 8310 	mrs	r3, PRIMASK
 800d56e:	60fb      	str	r3, [r7, #12]
  return(result);
 800d570:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d572:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d574:	b672      	cpsid	i
}
 800d576:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	687a      	ldr	r2, [r7, #4]
 800d57c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	685a      	ldr	r2, [r3, #4]
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	683a      	ldr	r2, [r7, #0]
 800d58a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	685b      	ldr	r3, [r3, #4]
 800d590:	683a      	ldr	r2, [r7, #0]
 800d592:	601a      	str	r2, [r3, #0]
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d598:	693b      	ldr	r3, [r7, #16]
 800d59a:	f383 8810 	msr	PRIMASK, r3
}
 800d59e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800d5a0:	bf00      	nop
 800d5a2:	371c      	adds	r7, #28
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5aa:	4770      	bx	lr

0800d5ac <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800d5ac:	b480      	push	{r7}
 800d5ae:	b087      	sub	sp, #28
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d5b4:	f3ef 8310 	mrs	r3, PRIMASK
 800d5b8:	60fb      	str	r3, [r7, #12]
  return(result);
 800d5ba:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d5bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d5be:	b672      	cpsid	i
}
 800d5c0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	685b      	ldr	r3, [r3, #4]
 800d5c6:	687a      	ldr	r2, [r7, #4]
 800d5c8:	6812      	ldr	r2, [r2, #0]
 800d5ca:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	687a      	ldr	r2, [r7, #4]
 800d5d2:	6852      	ldr	r2, [r2, #4]
 800d5d4:	605a      	str	r2, [r3, #4]
 800d5d6:	697b      	ldr	r3, [r7, #20]
 800d5d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d5da:	693b      	ldr	r3, [r7, #16]
 800d5dc:	f383 8810 	msr	PRIMASK, r3
}
 800d5e0:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800d5e2:	bf00      	nop
 800d5e4:	371c      	adds	r7, #28
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ec:	4770      	bx	lr

0800d5ee <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800d5ee:	b580      	push	{r7, lr}
 800d5f0:	b086      	sub	sp, #24
 800d5f2:	af00      	add	r7, sp, #0
 800d5f4:	6078      	str	r0, [r7, #4]
 800d5f6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d5f8:	f3ef 8310 	mrs	r3, PRIMASK
 800d5fc:	60fb      	str	r3, [r7, #12]
  return(result);
 800d5fe:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d600:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d602:	b672      	cpsid	i
}
 800d604:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681a      	ldr	r2, [r3, #0]
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	4618      	mov	r0, r3
 800d614:	f7ff ffca 	bl	800d5ac <LST_remove_node>
 800d618:	697b      	ldr	r3, [r7, #20]
 800d61a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d61c:	693b      	ldr	r3, [r7, #16]
 800d61e:	f383 8810 	msr	PRIMASK, r3
}
 800d622:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800d624:	bf00      	nop
 800d626:	3718      	adds	r7, #24
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}

0800d62c <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b08e      	sub	sp, #56	; 0x38
 800d630:	af00      	add	r7, sp, #0
 800d632:	60f8      	str	r0, [r7, #12]
 800d634:	60b9      	str	r1, [r7, #8]
 800d636:	603b      	str	r3, [r7, #0]
 800d638:	4613      	mov	r3, r2
 800d63a:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800d63c:	2300      	movs	r3, #0
 800d63e:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800d640:	2300      	movs	r3, #0
 800d642:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800d644:	2300      	movs	r3, #0
 800d646:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800d648:	2300      	movs	r3, #0
 800d64a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d64c:	2300      	movs	r3, #0
 800d64e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800d650:	2300      	movs	r3, #0
 800d652:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800d654:	2300      	movs	r3, #0
 800d656:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	891b      	ldrh	r3, [r3, #8]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d101      	bne.n	800d664 <CircularQueue_Add+0x38>
 800d660:	2302      	movs	r3, #2
 800d662:	e000      	b.n	800d666 <CircularQueue_Add+0x3a>
 800d664:	2300      	movs	r3, #0
 800d666:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	695b      	ldr	r3, [r3, #20]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d02a      	beq.n	800d6c6 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	891b      	ldrh	r3, [r3, #8]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d123      	bne.n	800d6c0 <CircularQueue_Add+0x94>
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	681a      	ldr	r2, [r3, #0]
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	691b      	ldr	r3, [r3, #16]
 800d680:	4413      	add	r3, r2
 800d682:	781b      	ldrb	r3, [r3, #0]
 800d684:	b29a      	uxth	r2, r3
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	6819      	ldr	r1, [r3, #0]
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	691b      	ldr	r3, [r3, #16]
 800d68e:	1c58      	adds	r0, r3, #1
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	685b      	ldr	r3, [r3, #4]
 800d694:	4298      	cmp	r0, r3
 800d696:	d306      	bcc.n	800d6a6 <CircularQueue_Add+0x7a>
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	6918      	ldr	r0, [r3, #16]
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	685b      	ldr	r3, [r3, #4]
 800d6a0:	1ac3      	subs	r3, r0, r3
 800d6a2:	3301      	adds	r3, #1
 800d6a4:	e002      	b.n	800d6ac <CircularQueue_Add+0x80>
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	691b      	ldr	r3, [r3, #16]
 800d6aa:	3301      	adds	r3, #1
 800d6ac:	440b      	add	r3, r1
 800d6ae:	781b      	ldrb	r3, [r3, #0]
 800d6b0:	b29b      	uxth	r3, r3
 800d6b2:	021b      	lsls	r3, r3, #8
 800d6b4:	b29b      	uxth	r3, r3
 800d6b6:	4413      	add	r3, r2
 800d6b8:	b29b      	uxth	r3, r3
 800d6ba:	3302      	adds	r3, #2
 800d6bc:	b29b      	uxth	r3, r3
 800d6be:	e001      	b.n	800d6c4 <CircularQueue_Add+0x98>
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	891b      	ldrh	r3, [r3, #8]
 800d6c4:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	891b      	ldrh	r3, [r3, #8]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d002      	beq.n	800d6d4 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	891b      	ldrh	r3, [r3, #8]
 800d6d2:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	691a      	ldr	r2, [r3, #16]
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	68db      	ldr	r3, [r3, #12]
 800d6dc:	429a      	cmp	r2, r3
 800d6de:	d307      	bcc.n	800d6f0 <CircularQueue_Add+0xc4>
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	685a      	ldr	r2, [r3, #4]
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	6919      	ldr	r1, [r3, #16]
 800d6e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d6ea:	440b      	add	r3, r1
 800d6ec:	1ad3      	subs	r3, r2, r3
 800d6ee:	e000      	b.n	800d6f2 <CircularQueue_Add+0xc6>
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800d6f4:	88fa      	ldrh	r2, [r7, #6]
 800d6f6:	7ffb      	ldrb	r3, [r7, #31]
 800d6f8:	4413      	add	r3, r2
 800d6fa:	461a      	mov	r2, r3
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	fb02 f303 	mul.w	r3, r2, r3
 800d702:	69ba      	ldr	r2, [r7, #24]
 800d704:	429a      	cmp	r2, r3
 800d706:	d80b      	bhi.n	800d720 <CircularQueue_Add+0xf4>
 800d708:	88fa      	ldrh	r2, [r7, #6]
 800d70a:	7ffb      	ldrb	r3, [r7, #31]
 800d70c:	4413      	add	r3, r2
 800d70e:	461a      	mov	r2, r3
 800d710:	69bb      	ldr	r3, [r7, #24]
 800d712:	fbb3 f1f2 	udiv	r1, r3, r2
 800d716:	fb01 f202 	mul.w	r2, r1, r2
 800d71a:	1a9b      	subs	r3, r3, r2
 800d71c:	b2db      	uxtb	r3, r3
 800d71e:	e000      	b.n	800d722 <CircularQueue_Add+0xf6>
 800d720:	2300      	movs	r3, #0
 800d722:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800d724:	7dfa      	ldrb	r2, [r7, #23]
 800d726:	7ffb      	ldrb	r3, [r7, #31]
 800d728:	429a      	cmp	r2, r3
 800d72a:	bf8c      	ite	hi
 800d72c:	2301      	movhi	r3, #1
 800d72e:	2300      	movls	r3, #0
 800d730:	b2db      	uxtb	r3, r3
 800d732:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800d734:	7fbb      	ldrb	r3, [r7, #30]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d008      	beq.n	800d74c <CircularQueue_Add+0x120>
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	7f1b      	ldrb	r3, [r3, #28]
 800d73e:	f003 0301 	and.w	r3, r3, #1
 800d742:	2b00      	cmp	r3, #0
 800d744:	d002      	beq.n	800d74c <CircularQueue_Add+0x120>
 800d746:	7dfb      	ldrb	r3, [r7, #23]
 800d748:	b29b      	uxth	r3, r3
 800d74a:	e000      	b.n	800d74e <CircularQueue_Add+0x122>
 800d74c:	8bbb      	ldrh	r3, [r7, #28]
 800d74e:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800d750:	7fbb      	ldrb	r3, [r7, #30]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d008      	beq.n	800d768 <CircularQueue_Add+0x13c>
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	7f1b      	ldrb	r3, [r3, #28]
 800d75a:	f003 0302 	and.w	r3, r3, #2
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d002      	beq.n	800d768 <CircularQueue_Add+0x13c>
 800d762:	7ffb      	ldrb	r3, [r7, #31]
 800d764:	b29b      	uxth	r3, r3
 800d766:	e000      	b.n	800d76a <CircularQueue_Add+0x13e>
 800d768:	8bbb      	ldrh	r3, [r7, #28]
 800d76a:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800d76c:	88fb      	ldrh	r3, [r7, #6]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	f000 817e 	beq.w	800da70 <CircularQueue_Add+0x444>
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	695a      	ldr	r2, [r3, #20]
 800d778:	88f9      	ldrh	r1, [r7, #6]
 800d77a:	7ffb      	ldrb	r3, [r7, #31]
 800d77c:	440b      	add	r3, r1
 800d77e:	4619      	mov	r1, r3
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	fb01 f303 	mul.w	r3, r1, r3
 800d786:	441a      	add	r2, r3
 800d788:	8bbb      	ldrh	r3, [r7, #28]
 800d78a:	441a      	add	r2, r3
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	685b      	ldr	r3, [r3, #4]
 800d790:	429a      	cmp	r2, r3
 800d792:	f200 816d 	bhi.w	800da70 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800d796:	2300      	movs	r3, #0
 800d798:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d79a:	e14a      	b.n	800da32 <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	691a      	ldr	r2, [r3, #16]
 800d7a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d7a2:	441a      	add	r2, r3
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	685b      	ldr	r3, [r3, #4]
 800d7a8:	429a      	cmp	r2, r3
 800d7aa:	d307      	bcc.n	800d7bc <CircularQueue_Add+0x190>
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	691a      	ldr	r2, [r3, #16]
 800d7b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d7b2:	441a      	add	r2, r3
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	685b      	ldr	r3, [r3, #4]
 800d7b8:	1ad3      	subs	r3, r2, r3
 800d7ba:	e003      	b.n	800d7c4 <CircularQueue_Add+0x198>
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	691a      	ldr	r2, [r3, #16]
 800d7c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d7c2:	4413      	add	r3, r2
 800d7c4:	68fa      	ldr	r2, [r7, #12]
 800d7c6:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	691b      	ldr	r3, [r3, #16]
 800d7cc:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	891b      	ldrh	r3, [r3, #8]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d130      	bne.n	800d838 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	681a      	ldr	r2, [r3, #0]
 800d7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7dc:	1c59      	adds	r1, r3, #1
 800d7de:	6339      	str	r1, [r7, #48]	; 0x30
 800d7e0:	4413      	add	r3, r2
 800d7e2:	88fa      	ldrh	r2, [r7, #6]
 800d7e4:	b2d2      	uxtb	r2, r2
 800d7e6:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	685b      	ldr	r3, [r3, #4]
 800d7ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7ee:	429a      	cmp	r2, r3
 800d7f0:	d304      	bcc.n	800d7fc <CircularQueue_Add+0x1d0>
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	685b      	ldr	r3, [r3, #4]
 800d7f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7f8:	1ad3      	subs	r3, r2, r3
 800d7fa:	e000      	b.n	800d7fe <CircularQueue_Add+0x1d2>
 800d7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7fe:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800d800:	88fb      	ldrh	r3, [r7, #6]
 800d802:	0a1b      	lsrs	r3, r3, #8
 800d804:	b298      	uxth	r0, r3
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	681a      	ldr	r2, [r3, #0]
 800d80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d80c:	1c59      	adds	r1, r3, #1
 800d80e:	6339      	str	r1, [r7, #48]	; 0x30
 800d810:	4413      	add	r3, r2
 800d812:	b2c2      	uxtb	r2, r0
 800d814:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	685b      	ldr	r3, [r3, #4]
 800d81a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d81c:	429a      	cmp	r2, r3
 800d81e:	d304      	bcc.n	800d82a <CircularQueue_Add+0x1fe>
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	685b      	ldr	r3, [r3, #4]
 800d824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d826:	1ad3      	subs	r3, r2, r3
 800d828:	e000      	b.n	800d82c <CircularQueue_Add+0x200>
 800d82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d82c:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	695b      	ldr	r3, [r3, #20]
 800d832:	1c9a      	adds	r2, r3, #2
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800d838:	88fa      	ldrh	r2, [r7, #6]
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	6859      	ldr	r1, [r3, #4]
 800d83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d840:	1acb      	subs	r3, r1, r3
 800d842:	4293      	cmp	r3, r2
 800d844:	bf28      	it	cs
 800d846:	4613      	movcs	r3, r2
 800d848:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800d84a:	88fb      	ldrh	r3, [r7, #6]
 800d84c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d84e:	429a      	cmp	r2, r3
 800d850:	d007      	beq.n	800d862 <CircularQueue_Add+0x236>
 800d852:	88fb      	ldrh	r3, [r7, #6]
 800d854:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d856:	429a      	cmp	r2, r3
 800d858:	d225      	bcs.n	800d8a6 <CircularQueue_Add+0x27a>
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	7f1b      	ldrb	r3, [r3, #28]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d121      	bne.n	800d8a6 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	681a      	ldr	r2, [r3, #0]
 800d866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d868:	18d0      	adds	r0, r2, r3
 800d86a:	88fb      	ldrh	r3, [r7, #6]
 800d86c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d86e:	fb02 f303 	mul.w	r3, r2, r3
 800d872:	68ba      	ldr	r2, [r7, #8]
 800d874:	4413      	add	r3, r2
 800d876:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d878:	4619      	mov	r1, r3
 800d87a:	f005 f837 	bl	80128ec <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	695a      	ldr	r2, [r3, #20]
 800d882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d884:	441a      	add	r2, r3
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800d88a:	2300      	movs	r3, #0
 800d88c:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800d88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d890:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800d892:	88fa      	ldrh	r2, [r7, #6]
 800d894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d896:	1ad3      	subs	r3, r2, r3
 800d898:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800d89a:	7ffb      	ldrb	r3, [r7, #31]
 800d89c:	b29a      	uxth	r2, r3
 800d89e:	88fb      	ldrh	r3, [r7, #6]
 800d8a0:	4413      	add	r3, r2
 800d8a2:	86fb      	strh	r3, [r7, #54]	; 0x36
 800d8a4:	e0a4      	b.n	800d9f0 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800d8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	f000 80a1 	beq.w	800d9f0 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	7f1b      	ldrb	r3, [r3, #28]
 800d8b2:	f003 0301 	and.w	r3, r3, #1
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d03a      	beq.n	800d930 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	891b      	ldrh	r3, [r3, #8]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d10d      	bne.n	800d8de <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	681a      	ldr	r2, [r3, #0]
 800d8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c8:	3b02      	subs	r3, #2
 800d8ca:	4413      	add	r3, r2
 800d8cc:	22ff      	movs	r2, #255	; 0xff
 800d8ce:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	681a      	ldr	r2, [r3, #0]
 800d8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d6:	3b01      	subs	r3, #1
 800d8d8:	4413      	add	r3, r2
 800d8da:	22ff      	movs	r2, #255	; 0xff
 800d8dc:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	695a      	ldr	r2, [r3, #20]
 800d8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8e4:	441a      	add	r2, r3
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800d8ee:	88fb      	ldrh	r3, [r7, #6]
 800d8f0:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	891b      	ldrh	r3, [r3, #8]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d16f      	bne.n	800d9de <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	681a      	ldr	r2, [r3, #0]
 800d902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d904:	1c59      	adds	r1, r3, #1
 800d906:	6339      	str	r1, [r7, #48]	; 0x30
 800d908:	4413      	add	r3, r2
 800d90a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d90c:	b2d2      	uxtb	r2, r2
 800d90e:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800d910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d912:	0a18      	lsrs	r0, r3, #8
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	681a      	ldr	r2, [r3, #0]
 800d918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d91a:	1c59      	adds	r1, r3, #1
 800d91c:	6339      	str	r1, [r7, #48]	; 0x30
 800d91e:	4413      	add	r3, r2
 800d920:	b2c2      	uxtb	r2, r0
 800d922:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	695b      	ldr	r3, [r3, #20]
 800d928:	1c9a      	adds	r2, r3, #2
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	615a      	str	r2, [r3, #20]
 800d92e:	e056      	b.n	800d9de <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	7f1b      	ldrb	r3, [r3, #28]
 800d934:	f003 0302 	and.w	r3, r3, #2
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d050      	beq.n	800d9de <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	891b      	ldrh	r3, [r3, #8]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d14a      	bne.n	800d9da <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	681a      	ldr	r2, [r3, #0]
 800d948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d94a:	3b02      	subs	r3, #2
 800d94c:	4413      	add	r3, r2
 800d94e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d950:	b2d2      	uxtb	r2, r2
 800d952:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800d954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d956:	0a19      	lsrs	r1, r3, #8
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	681a      	ldr	r2, [r3, #0]
 800d95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d95e:	3b01      	subs	r3, #1
 800d960:	4413      	add	r3, r2
 800d962:	b2ca      	uxtb	r2, r1
 800d964:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	681a      	ldr	r2, [r3, #0]
 800d96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d96c:	18d0      	adds	r0, r2, r3
 800d96e:	88fb      	ldrh	r3, [r7, #6]
 800d970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d972:	fb02 f303 	mul.w	r3, r2, r3
 800d976:	68ba      	ldr	r2, [r7, #8]
 800d978:	4413      	add	r3, r2
 800d97a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d97c:	4619      	mov	r1, r3
 800d97e:	f004 ffb5 	bl	80128ec <memcpy>
             q->byteCount += NbBytesToCopy; 
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	695a      	ldr	r2, [r3, #20]
 800d986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d988:	441a      	add	r2, r3
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800d98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d990:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800d992:	88fa      	ldrh	r2, [r7, #6]
 800d994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d996:	1ad3      	subs	r3, r2, r3
 800d998:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	699b      	ldr	r3, [r3, #24]
 800d99e:	1c5a      	adds	r2, r3, #1
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	681a      	ldr	r2, [r3, #0]
 800d9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ae:	1c59      	adds	r1, r3, #1
 800d9b0:	6339      	str	r1, [r7, #48]	; 0x30
 800d9b2:	4413      	add	r3, r2
 800d9b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9b6:	b2d2      	uxtb	r2, r2
 800d9b8:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800d9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9bc:	0a18      	lsrs	r0, r3, #8
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	681a      	ldr	r2, [r3, #0]
 800d9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c4:	1c59      	adds	r1, r3, #1
 800d9c6:	6339      	str	r1, [r7, #48]	; 0x30
 800d9c8:	4413      	add	r3, r2
 800d9ca:	b2c2      	uxtb	r2, r0
 800d9cc:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	695b      	ldr	r3, [r3, #20]
 800d9d2:	1c9a      	adds	r2, r3, #2
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	615a      	str	r2, [r3, #20]
 800d9d8:	e001      	b.n	800d9de <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	e049      	b.n	800da72 <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800d9de:	7ffb      	ldrb	r3, [r7, #31]
 800d9e0:	b29a      	uxth	r2, r3
 800d9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9e4:	b29b      	uxth	r3, r3
 800d9e6:	4413      	add	r3, r2
 800d9e8:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800d9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d015      	beq.n	800da22 <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	681a      	ldr	r2, [r3, #0]
 800d9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9fc:	18d0      	adds	r0, r2, r3
 800d9fe:	88fb      	ldrh	r3, [r7, #6]
 800da00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da02:	fb03 f202 	mul.w	r2, r3, r2
 800da06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da08:	4413      	add	r3, r2
 800da0a:	68ba      	ldr	r2, [r7, #8]
 800da0c:	4413      	add	r3, r2
 800da0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da10:	4619      	mov	r1, r3
 800da12:	f004 ff6b 	bl	80128ec <memcpy>
        q->byteCount += NbBytesToCopy;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	695a      	ldr	r2, [r3, #20]
 800da1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da1c:	441a      	add	r2, r3
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	699b      	ldr	r3, [r3, #24]
 800da26:	1c5a      	adds	r2, r3, #1
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800da2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da2e:	3301      	adds	r3, #1
 800da30:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	429a      	cmp	r2, r3
 800da38:	f4ff aeb0 	bcc.w	800d79c <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	681a      	ldr	r2, [r3, #0]
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	6919      	ldr	r1, [r3, #16]
 800da44:	7ffb      	ldrb	r3, [r7, #31]
 800da46:	4419      	add	r1, r3
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	685b      	ldr	r3, [r3, #4]
 800da4c:	4299      	cmp	r1, r3
 800da4e:	d307      	bcc.n	800da60 <CircularQueue_Add+0x434>
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	6919      	ldr	r1, [r3, #16]
 800da54:	7ffb      	ldrb	r3, [r7, #31]
 800da56:	4419      	add	r1, r3
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	685b      	ldr	r3, [r3, #4]
 800da5c:	1acb      	subs	r3, r1, r3
 800da5e:	e003      	b.n	800da68 <CircularQueue_Add+0x43c>
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	6919      	ldr	r1, [r3, #16]
 800da64:	7ffb      	ldrb	r3, [r7, #31]
 800da66:	440b      	add	r3, r1
 800da68:	4413      	add	r3, r2
 800da6a:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800da6c:	6a3b      	ldr	r3, [r7, #32]
 800da6e:	e000      	b.n	800da72 <CircularQueue_Add+0x446>
    return NULL;
 800da70:	2300      	movs	r3, #0
}
 800da72:	4618      	mov	r0, r3
 800da74:	3738      	adds	r7, #56	; 0x38
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}

0800da7a <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800da7a:	b480      	push	{r7}
 800da7c:	b085      	sub	sp, #20
 800da7e:	af00      	add	r7, sp, #0
 800da80:	6078      	str	r0, [r7, #4]
 800da82:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800da84:	2300      	movs	r3, #0
 800da86:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800da88:	2300      	movs	r3, #0
 800da8a:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	891b      	ldrh	r3, [r3, #8]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d101      	bne.n	800da98 <CircularQueue_Remove+0x1e>
 800da94:	2302      	movs	r3, #2
 800da96:	e000      	b.n	800da9a <CircularQueue_Remove+0x20>
 800da98:	2300      	movs	r3, #0
 800da9a:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800da9c:	2300      	movs	r3, #0
 800da9e:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	695b      	ldr	r3, [r3, #20]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	f000 80cc 	beq.w	800dc42 <CircularQueue_Remove+0x1c8>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	891b      	ldrh	r3, [r3, #8]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d121      	bne.n	800daf6 <CircularQueue_Remove+0x7c>
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681a      	ldr	r2, [r3, #0]
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	68db      	ldr	r3, [r3, #12]
 800daba:	4413      	add	r3, r2
 800dabc:	781b      	ldrb	r3, [r3, #0]
 800dabe:	b29a      	uxth	r2, r3
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	6819      	ldr	r1, [r3, #0]
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	68db      	ldr	r3, [r3, #12]
 800dac8:	1c58      	adds	r0, r3, #1
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	685b      	ldr	r3, [r3, #4]
 800dace:	4298      	cmp	r0, r3
 800dad0:	d306      	bcc.n	800dae0 <CircularQueue_Remove+0x66>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	68d8      	ldr	r0, [r3, #12]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	685b      	ldr	r3, [r3, #4]
 800dada:	1ac3      	subs	r3, r0, r3
 800dadc:	3301      	adds	r3, #1
 800dade:	e002      	b.n	800dae6 <CircularQueue_Remove+0x6c>
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	68db      	ldr	r3, [r3, #12]
 800dae4:	3301      	adds	r3, #1
 800dae6:	440b      	add	r3, r1
 800dae8:	781b      	ldrb	r3, [r3, #0]
 800daea:	b29b      	uxth	r3, r3
 800daec:	021b      	lsls	r3, r3, #8
 800daee:	b29b      	uxth	r3, r3
 800daf0:	4413      	add	r3, r2
 800daf2:	b29b      	uxth	r3, r3
 800daf4:	e001      	b.n	800dafa <CircularQueue_Remove+0x80>
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	891b      	ldrh	r3, [r3, #8]
 800dafa:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	7f1b      	ldrb	r3, [r3, #28]
 800db00:	f003 0301 	and.w	r3, r3, #1
 800db04:	2b00      	cmp	r3, #0
 800db06:	d057      	beq.n	800dbb8 <CircularQueue_Remove+0x13e>
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	7f1b      	ldrb	r3, [r3, #28]
 800db0c:	f003 0302 	and.w	r3, r3, #2
 800db10:	2b00      	cmp	r3, #0
 800db12:	d151      	bne.n	800dbb8 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800db14:	897b      	ldrh	r3, [r7, #10]
 800db16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800db1a:	4293      	cmp	r3, r2
 800db1c:	d103      	bne.n	800db26 <CircularQueue_Remove+0xac>
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	891b      	ldrh	r3, [r3, #8]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d012      	beq.n	800db4c <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	68da      	ldr	r2, [r3, #12]
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800db2e:	429a      	cmp	r2, r3
 800db30:	d942      	bls.n	800dbb8 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	891b      	ldrh	r3, [r3, #8]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d03e      	beq.n	800dbb8 <CircularQueue_Remove+0x13e>
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	685a      	ldr	r2, [r3, #4]
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	68db      	ldr	r3, [r3, #12]
 800db42:	1ad3      	subs	r3, r2, r3
 800db44:	687a      	ldr	r2, [r7, #4]
 800db46:	8912      	ldrh	r2, [r2, #8]
 800db48:	4293      	cmp	r3, r2
 800db4a:	d235      	bcs.n	800dbb8 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	695a      	ldr	r2, [r3, #20]
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	68d9      	ldr	r1, [r3, #12]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	685b      	ldr	r3, [r3, #4]
 800db58:	1acb      	subs	r3, r1, r3
 800db5a:	441a      	add	r2, r3
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2200      	movs	r2, #0
 800db64:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	891b      	ldrh	r3, [r3, #8]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d121      	bne.n	800dbb2 <CircularQueue_Remove+0x138>
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681a      	ldr	r2, [r3, #0]
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	68db      	ldr	r3, [r3, #12]
 800db76:	4413      	add	r3, r2
 800db78:	781b      	ldrb	r3, [r3, #0]
 800db7a:	b29a      	uxth	r2, r3
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	6819      	ldr	r1, [r3, #0]
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	68db      	ldr	r3, [r3, #12]
 800db84:	1c58      	adds	r0, r3, #1
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	685b      	ldr	r3, [r3, #4]
 800db8a:	4298      	cmp	r0, r3
 800db8c:	d306      	bcc.n	800db9c <CircularQueue_Remove+0x122>
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	68d8      	ldr	r0, [r3, #12]
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	685b      	ldr	r3, [r3, #4]
 800db96:	1ac3      	subs	r3, r0, r3
 800db98:	3301      	adds	r3, #1
 800db9a:	e002      	b.n	800dba2 <CircularQueue_Remove+0x128>
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	68db      	ldr	r3, [r3, #12]
 800dba0:	3301      	adds	r3, #1
 800dba2:	440b      	add	r3, r1
 800dba4:	781b      	ldrb	r3, [r3, #0]
 800dba6:	b29b      	uxth	r3, r3
 800dba8:	021b      	lsls	r3, r3, #8
 800dbaa:	b29b      	uxth	r3, r3
 800dbac:	4413      	add	r3, r2
 800dbae:	b29b      	uxth	r3, r3
 800dbb0:	e001      	b.n	800dbb6 <CircularQueue_Remove+0x13c>
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	891b      	ldrh	r3, [r3, #8]
 800dbb6:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681a      	ldr	r2, [r3, #0]
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	68d9      	ldr	r1, [r3, #12]
 800dbc0:	7a7b      	ldrb	r3, [r7, #9]
 800dbc2:	4419      	add	r1, r3
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	685b      	ldr	r3, [r3, #4]
 800dbc8:	4299      	cmp	r1, r3
 800dbca:	d307      	bcc.n	800dbdc <CircularQueue_Remove+0x162>
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	68d9      	ldr	r1, [r3, #12]
 800dbd0:	7a7b      	ldrb	r3, [r7, #9]
 800dbd2:	4419      	add	r1, r3
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	685b      	ldr	r3, [r3, #4]
 800dbd8:	1acb      	subs	r3, r1, r3
 800dbda:	e003      	b.n	800dbe4 <CircularQueue_Remove+0x16a>
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	68d9      	ldr	r1, [r3, #12]
 800dbe0:	7a7b      	ldrb	r3, [r7, #9]
 800dbe2:	440b      	add	r3, r1
 800dbe4:	4413      	add	r3, r2
 800dbe6:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	695b      	ldr	r3, [r3, #20]
 800dbec:	8979      	ldrh	r1, [r7, #10]
 800dbee:	7a7a      	ldrb	r2, [r7, #9]
 800dbf0:	440a      	add	r2, r1
 800dbf2:	1a9a      	subs	r2, r3, r2
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	695b      	ldr	r3, [r3, #20]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d01b      	beq.n	800dc38 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	68da      	ldr	r2, [r3, #12]
 800dc04:	897b      	ldrh	r3, [r7, #10]
 800dc06:	441a      	add	r2, r3
 800dc08:	7a7b      	ldrb	r3, [r7, #9]
 800dc0a:	441a      	add	r2, r3
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	685b      	ldr	r3, [r3, #4]
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d309      	bcc.n	800dc28 <CircularQueue_Remove+0x1ae>
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	68da      	ldr	r2, [r3, #12]
 800dc18:	897b      	ldrh	r3, [r7, #10]
 800dc1a:	441a      	add	r2, r3
 800dc1c:	7a7b      	ldrb	r3, [r7, #9]
 800dc1e:	441a      	add	r2, r3
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	685b      	ldr	r3, [r3, #4]
 800dc24:	1ad3      	subs	r3, r2, r3
 800dc26:	e005      	b.n	800dc34 <CircularQueue_Remove+0x1ba>
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	68da      	ldr	r2, [r3, #12]
 800dc2c:	897b      	ldrh	r3, [r7, #10]
 800dc2e:	441a      	add	r2, r3
 800dc30:	7a7b      	ldrb	r3, [r7, #9]
 800dc32:	4413      	add	r3, r2
 800dc34:	687a      	ldr	r2, [r7, #4]
 800dc36:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	699b      	ldr	r3, [r3, #24]
 800dc3c:	1e5a      	subs	r2, r3, #1
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d002      	beq.n	800dc4e <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	897a      	ldrh	r2, [r7, #10]
 800dc4c:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800dc4e:	68fb      	ldr	r3, [r7, #12]
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	3714      	adds	r7, #20
 800dc54:	46bd      	mov	sp, r7
 800dc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5a:	4770      	bx	lr

0800dc5c <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800dc5c:	b480      	push	{r7}
 800dc5e:	b087      	sub	sp, #28
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
 800dc64:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800dc66:	2300      	movs	r3, #0
 800dc68:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	891b      	ldrh	r3, [r3, #8]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d101      	bne.n	800dc7a <CircularQueue_Sense+0x1e>
 800dc76:	2302      	movs	r3, #2
 800dc78:	e000      	b.n	800dc7c <CircularQueue_Sense+0x20>
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800dc82:	2300      	movs	r3, #0
 800dc84:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	695b      	ldr	r3, [r3, #20]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	f000 8090 	beq.w	800ddb0 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	68db      	ldr	r3, [r3, #12]
 800dc94:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	891b      	ldrh	r3, [r3, #8]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d121      	bne.n	800dce2 <CircularQueue_Sense+0x86>
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681a      	ldr	r2, [r3, #0]
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	68db      	ldr	r3, [r3, #12]
 800dca6:	4413      	add	r3, r2
 800dca8:	781b      	ldrb	r3, [r3, #0]
 800dcaa:	b29a      	uxth	r2, r3
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6819      	ldr	r1, [r3, #0]
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	68db      	ldr	r3, [r3, #12]
 800dcb4:	1c58      	adds	r0, r3, #1
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	685b      	ldr	r3, [r3, #4]
 800dcba:	4298      	cmp	r0, r3
 800dcbc:	d306      	bcc.n	800dccc <CircularQueue_Sense+0x70>
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	68d8      	ldr	r0, [r3, #12]
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	685b      	ldr	r3, [r3, #4]
 800dcc6:	1ac3      	subs	r3, r0, r3
 800dcc8:	3301      	adds	r3, #1
 800dcca:	e002      	b.n	800dcd2 <CircularQueue_Sense+0x76>
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	68db      	ldr	r3, [r3, #12]
 800dcd0:	3301      	adds	r3, #1
 800dcd2:	440b      	add	r3, r1
 800dcd4:	781b      	ldrb	r3, [r3, #0]
 800dcd6:	b29b      	uxth	r3, r3
 800dcd8:	021b      	lsls	r3, r3, #8
 800dcda:	b29b      	uxth	r3, r3
 800dcdc:	4413      	add	r3, r2
 800dcde:	b29b      	uxth	r3, r3
 800dce0:	e001      	b.n	800dce6 <CircularQueue_Sense+0x8a>
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	891b      	ldrh	r3, [r3, #8]
 800dce6:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	7f1b      	ldrb	r3, [r3, #28]
 800dcec:	f003 0301 	and.w	r3, r3, #1
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d048      	beq.n	800dd86 <CircularQueue_Sense+0x12a>
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	7f1b      	ldrb	r3, [r3, #28]
 800dcf8:	f003 0302 	and.w	r3, r3, #2
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d142      	bne.n	800dd86 <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800dd00:	8a7b      	ldrh	r3, [r7, #18]
 800dd02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd06:	4293      	cmp	r3, r2
 800dd08:	d103      	bne.n	800dd12 <CircularQueue_Sense+0xb6>
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	891b      	ldrh	r3, [r3, #8]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d012      	beq.n	800dd38 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	68da      	ldr	r2, [r3, #12]
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800dd1a:	429a      	cmp	r2, r3
 800dd1c:	d933      	bls.n	800dd86 <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	891b      	ldrh	r3, [r3, #8]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d02f      	beq.n	800dd86 <CircularQueue_Sense+0x12a>
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	685a      	ldr	r2, [r3, #4]
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	68db      	ldr	r3, [r3, #12]
 800dd2e:	1ad3      	subs	r3, r2, r3
 800dd30:	687a      	ldr	r2, [r7, #4]
 800dd32:	8912      	ldrh	r2, [r2, #8]
 800dd34:	4293      	cmp	r3, r2
 800dd36:	d226      	bcs.n	800dd86 <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800dd38:	2300      	movs	r3, #0
 800dd3a:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	891b      	ldrh	r3, [r3, #8]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d11d      	bne.n	800dd80 <CircularQueue_Sense+0x124>
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681a      	ldr	r2, [r3, #0]
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	4413      	add	r3, r2
 800dd4c:	781b      	ldrb	r3, [r3, #0]
 800dd4e:	b29a      	uxth	r2, r3
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	6819      	ldr	r1, [r3, #0]
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	1c58      	adds	r0, r3, #1
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	685b      	ldr	r3, [r3, #4]
 800dd5c:	4298      	cmp	r0, r3
 800dd5e:	d305      	bcc.n	800dd6c <CircularQueue_Sense+0x110>
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	685b      	ldr	r3, [r3, #4]
 800dd64:	68f8      	ldr	r0, [r7, #12]
 800dd66:	1ac3      	subs	r3, r0, r3
 800dd68:	3301      	adds	r3, #1
 800dd6a:	e001      	b.n	800dd70 <CircularQueue_Sense+0x114>
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	3301      	adds	r3, #1
 800dd70:	440b      	add	r3, r1
 800dd72:	781b      	ldrb	r3, [r3, #0]
 800dd74:	b29b      	uxth	r3, r3
 800dd76:	021b      	lsls	r3, r3, #8
 800dd78:	b29b      	uxth	r3, r3
 800dd7a:	4413      	add	r3, r2
 800dd7c:	b29b      	uxth	r3, r3
 800dd7e:	e001      	b.n	800dd84 <CircularQueue_Sense+0x128>
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	891b      	ldrh	r3, [r3, #8]
 800dd84:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681a      	ldr	r2, [r3, #0]
 800dd8a:	7af9      	ldrb	r1, [r7, #11]
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	4419      	add	r1, r3
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	685b      	ldr	r3, [r3, #4]
 800dd94:	4299      	cmp	r1, r3
 800dd96:	d306      	bcc.n	800dda6 <CircularQueue_Sense+0x14a>
 800dd98:	7af9      	ldrb	r1, [r7, #11]
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	4419      	add	r1, r3
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	685b      	ldr	r3, [r3, #4]
 800dda2:	1acb      	subs	r3, r1, r3
 800dda4:	e002      	b.n	800ddac <CircularQueue_Sense+0x150>
 800dda6:	7af9      	ldrb	r1, [r7, #11]
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	440b      	add	r3, r1
 800ddac:	4413      	add	r3, r2
 800ddae:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d002      	beq.n	800ddbc <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	8a7a      	ldrh	r2, [r7, #18]
 800ddba:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800ddbc:	697b      	ldr	r3, [r7, #20]
}
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	371c      	adds	r7, #28
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc8:	4770      	bx	lr
	...

0800ddcc <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800ddcc:	b480      	push	{r7}
 800ddce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800ddd0:	4b03      	ldr	r3, [pc, #12]	; (800dde0 <LL_FLASH_GetUDN+0x14>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dddc:	4770      	bx	lr
 800ddde:	bf00      	nop
 800dde0:	1fff7580 	.word	0x1fff7580

0800dde4 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800dde4:	b480      	push	{r7}
 800dde6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800dde8:	4b03      	ldr	r3, [pc, #12]	; (800ddf8 <LL_FLASH_GetDeviceID+0x14>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	b2db      	uxtb	r3, r3
}
 800ddee:	4618      	mov	r0, r3
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf6:	4770      	bx	lr
 800ddf8:	1fff7584 	.word	0x1fff7584

0800ddfc <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800ddfc:	b480      	push	{r7}
 800ddfe:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800de00:	4b03      	ldr	r3, [pc, #12]	; (800de10 <LL_FLASH_GetSTCompanyID+0x14>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	0a1b      	lsrs	r3, r3, #8
}
 800de06:	4618      	mov	r0, r3
 800de08:	46bd      	mov	sp, r7
 800de0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0e:	4770      	bx	lr
 800de10:	1fff7584 	.word	0x1fff7584

0800de14 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800de14:	b5b0      	push	{r4, r5, r7, lr}
 800de16:	b090      	sub	sp, #64	; 0x40
 800de18:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800de1a:	2392      	movs	r3, #146	; 0x92
 800de1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800de20:	4b45      	ldr	r3, [pc, #276]	; (800df38 <APP_BLE_Init+0x124>)
 800de22:	1d3c      	adds	r4, r7, #4
 800de24:	461d      	mov	r5, r3
 800de26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800de28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800de2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800de2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800de2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800de30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800de32:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800de36:	c403      	stmia	r4!, {r0, r1}
 800de38:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800de3a:	f000 fb37 	bl	800e4ac <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800de3e:	2101      	movs	r1, #1
 800de40:	2002      	movs	r0, #2
 800de42:	f003 f9bb 	bl	80111bc <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800de46:	4a3d      	ldr	r2, [pc, #244]	; (800df3c <APP_BLE_Init+0x128>)
 800de48:	2100      	movs	r1, #0
 800de4a:	2002      	movs	r0, #2
 800de4c:	f003 fae2 	bl	8011414 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800de50:	1d3b      	adds	r3, r7, #4
 800de52:	4618      	mov	r0, r3
 800de54:	f7fe fc2e 	bl	800c6b4 <SHCI_C2_BLE_Init>
 800de58:	4603      	mov	r3, r0
 800de5a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 800de5e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800de62:	2b00      	cmp	r3, #0
 800de64:	d012      	beq.n	800de8c <APP_BLE_Init+0x78>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800de66:	4836      	ldr	r0, [pc, #216]	; (800df40 <APP_BLE_Init+0x12c>)
 800de68:	f7ff fa32 	bl	800d2d0 <DbgTraceGetFileName>
 800de6c:	4601      	mov	r1, r0
 800de6e:	f44f 73a4 	mov.w	r3, #328	; 0x148
 800de72:	4a34      	ldr	r2, [pc, #208]	; (800df44 <APP_BLE_Init+0x130>)
 800de74:	4834      	ldr	r0, [pc, #208]	; (800df48 <APP_BLE_Init+0x134>)
 800de76:	f004 fb35 	bl	80124e4 <iprintf>
 800de7a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800de7e:	4619      	mov	r1, r3
 800de80:	4832      	ldr	r0, [pc, #200]	; (800df4c <APP_BLE_Init+0x138>)
 800de82:	f004 fb2f 	bl	80124e4 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800de86:	f7f5 fba9 	bl	80035dc <Error_Handler>
 800de8a:	e00c      	b.n	800dea6 <APP_BLE_Init+0x92>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800de8c:	482c      	ldr	r0, [pc, #176]	; (800df40 <APP_BLE_Init+0x12c>)
 800de8e:	f7ff fa1f 	bl	800d2d0 <DbgTraceGetFileName>
 800de92:	4601      	mov	r1, r0
 800de94:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 800de98:	4a2a      	ldr	r2, [pc, #168]	; (800df44 <APP_BLE_Init+0x130>)
 800de9a:	482b      	ldr	r0, [pc, #172]	; (800df48 <APP_BLE_Init+0x134>)
 800de9c:	f004 fb22 	bl	80124e4 <iprintf>
 800dea0:	482b      	ldr	r0, [pc, #172]	; (800df50 <APP_BLE_Init+0x13c>)
 800dea2:	f004 fb1f 	bl	80124e4 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800dea6:	f000 fb17 	bl	800e4d8 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800deaa:	f7fe fb5d 	bl	800c568 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800deae:	4b29      	ldr	r3, [pc, #164]	; (800df54 <APP_BLE_Init+0x140>)
 800deb0:	2200      	movs	r2, #0
 800deb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800deb6:	4b27      	ldr	r3, [pc, #156]	; (800df54 <APP_BLE_Init+0x140>)
 800deb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800debc:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800debe:	4a26      	ldr	r2, [pc, #152]	; (800df58 <APP_BLE_Init+0x144>)
 800dec0:	2100      	movs	r1, #0
 800dec2:	2001      	movs	r0, #1
 800dec4:	f003 faa6 	bl	8011414 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800dec8:	2006      	movs	r0, #6
 800deca:	f7fe f9c1 	bl	800c250 <aci_hal_set_radio_activity_mask>
 800dece:	4603      	mov	r3, r0
 800ded0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800ded4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d010      	beq.n	800defe <APP_BLE_Init+0xea>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800dedc:	4818      	ldr	r0, [pc, #96]	; (800df40 <APP_BLE_Init+0x12c>)
 800dede:	f7ff f9f7 	bl	800d2d0 <DbgTraceGetFileName>
 800dee2:	4601      	mov	r1, r0
 800dee4:	f44f 73b9 	mov.w	r3, #370	; 0x172
 800dee8:	4a16      	ldr	r2, [pc, #88]	; (800df44 <APP_BLE_Init+0x130>)
 800deea:	4817      	ldr	r0, [pc, #92]	; (800df48 <APP_BLE_Init+0x134>)
 800deec:	f004 fafa 	bl	80124e4 <iprintf>
 800def0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800def4:	4619      	mov	r1, r3
 800def6:	4819      	ldr	r0, [pc, #100]	; (800df5c <APP_BLE_Init+0x148>)
 800def8:	f004 faf4 	bl	80124e4 <iprintf>
 800defc:	e00c      	b.n	800df18 <APP_BLE_Init+0x104>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800defe:	4810      	ldr	r0, [pc, #64]	; (800df40 <APP_BLE_Init+0x12c>)
 800df00:	f7ff f9e6 	bl	800d2d0 <DbgTraceGetFileName>
 800df04:	4601      	mov	r1, r0
 800df06:	f44f 73bb 	mov.w	r3, #374	; 0x176
 800df0a:	4a0e      	ldr	r2, [pc, #56]	; (800df44 <APP_BLE_Init+0x130>)
 800df0c:	480e      	ldr	r0, [pc, #56]	; (800df48 <APP_BLE_Init+0x134>)
 800df0e:	f004 fae9 	bl	80124e4 <iprintf>
 800df12:	4813      	ldr	r0, [pc, #76]	; (800df60 <APP_BLE_Init+0x14c>)
 800df14:	f004 fae6 	bl	80124e4 <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800df18:	f000 ff56 	bl	800edc8 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800df1c:	4b0d      	ldr	r3, [pc, #52]	; (800df54 <APP_BLE_Init+0x140>)
 800df1e:	2200      	movs	r2, #0
 800df20:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800df22:	4b0c      	ldr	r3, [pc, #48]	; (800df54 <APP_BLE_Init+0x140>)
 800df24:	2200      	movs	r2, #0
 800df26:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800df28:	2001      	movs	r0, #1
 800df2a:	f000 fd69 	bl	800ea00 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800df2e:	bf00      	nop
}
 800df30:	3740      	adds	r7, #64	; 0x40
 800df32:	46bd      	mov	sp, r7
 800df34:	bdb0      	pop	{r4, r5, r7, pc}
 800df36:	bf00      	nop
 800df38:	08016720 	.word	0x08016720
 800df3c:	0800c8d1 	.word	0x0800c8d1
 800df40:	08016614 	.word	0x08016614
 800df44:	0801837c 	.word	0x0801837c
 800df48:	08016630 	.word	0x08016630
 800df4c:	08016644 	.word	0x08016644
 800df50:	0801667c 	.word	0x0801667c
 800df54:	20000620 	.word	0x20000620
 800df58:	0800eb85 	.word	0x0800eb85
 800df5c:	080166a4 	.word	0x080166a4
 800df60:	080166e8 	.word	0x080166e8

0800df64 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800df64:	b5b0      	push	{r4, r5, r7, lr}
 800df66:	b08e      	sub	sp, #56	; 0x38
 800df68:	af04      	add	r7, sp, #16
 800df6a:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800df6c:	2392      	movs	r3, #146	; 0x92
 800df6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	3301      	adds	r3, #1
 800df76:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800df78:	6a3b      	ldr	r3, [r7, #32]
 800df7a:	781b      	ldrb	r3, [r3, #0]
 800df7c:	2bff      	cmp	r3, #255	; 0xff
 800df7e:	f000 811d 	beq.w	800e1bc <SVCCTL_App_Notification+0x258>
 800df82:	2bff      	cmp	r3, #255	; 0xff
 800df84:	f300 8269 	bgt.w	800e45a <SVCCTL_App_Notification+0x4f6>
 800df88:	2b05      	cmp	r3, #5
 800df8a:	d002      	beq.n	800df92 <SVCCTL_App_Notification+0x2e>
 800df8c:	2b3e      	cmp	r3, #62	; 0x3e
 800df8e:	d042      	beq.n	800e016 <SVCCTL_App_Notification+0xb2>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800df90:	e263      	b.n	800e45a <SVCCTL_App_Notification+0x4f6>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800df92:	6a3b      	ldr	r3, [r7, #32]
 800df94:	3302      	adds	r3, #2
 800df96:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800df98:	68bb      	ldr	r3, [r7, #8]
 800df9a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800df9e:	b29a      	uxth	r2, r3
 800dfa0:	4bb1      	ldr	r3, [pc, #708]	; (800e268 <SVCCTL_App_Notification+0x304>)
 800dfa2:	8adb      	ldrh	r3, [r3, #22]
 800dfa4:	429a      	cmp	r2, r3
 800dfa6:	d128      	bne.n	800dffa <SVCCTL_App_Notification+0x96>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800dfa8:	4baf      	ldr	r3, [pc, #700]	; (800e268 <SVCCTL_App_Notification+0x304>)
 800dfaa:	2200      	movs	r2, #0
 800dfac:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800dfae:	4bae      	ldr	r3, [pc, #696]	; (800e268 <SVCCTL_App_Notification+0x304>)
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800dfb6:	48ad      	ldr	r0, [pc, #692]	; (800e26c <SVCCTL_App_Notification+0x308>)
 800dfb8:	f7ff f98a 	bl	800d2d0 <DbgTraceGetFileName>
 800dfbc:	4601      	mov	r1, r0
 800dfbe:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
 800dfc2:	4aab      	ldr	r2, [pc, #684]	; (800e270 <SVCCTL_App_Notification+0x30c>)
 800dfc4:	48ab      	ldr	r0, [pc, #684]	; (800e274 <SVCCTL_App_Notification+0x310>)
 800dfc6:	f004 fa8d 	bl	80124e4 <iprintf>
 800dfca:	48ab      	ldr	r0, [pc, #684]	; (800e278 <SVCCTL_App_Notification+0x314>)
 800dfcc:	f004 faf8 	bl	80125c0 <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800dfd0:	48a6      	ldr	r0, [pc, #664]	; (800e26c <SVCCTL_App_Notification+0x308>)
 800dfd2:	f7ff f97d 	bl	800d2d0 <DbgTraceGetFileName>
 800dfd6:	4601      	mov	r1, r0
 800dfd8:	f240 13bb 	movw	r3, #443	; 0x1bb
 800dfdc:	4aa4      	ldr	r2, [pc, #656]	; (800e270 <SVCCTL_App_Notification+0x30c>)
 800dfde:	48a5      	ldr	r0, [pc, #660]	; (800e274 <SVCCTL_App_Notification+0x310>)
 800dfe0:	f004 fa80 	bl	80124e4 <iprintf>
 800dfe4:	68bb      	ldr	r3, [r7, #8]
 800dfe6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800dfea:	b29b      	uxth	r3, r3
 800dfec:	4619      	mov	r1, r3
 800dfee:	68bb      	ldr	r3, [r7, #8]
 800dff0:	78db      	ldrb	r3, [r3, #3]
 800dff2:	461a      	mov	r2, r3
 800dff4:	48a1      	ldr	r0, [pc, #644]	; (800e27c <SVCCTL_App_Notification+0x318>)
 800dff6:	f004 fa75 	bl	80124e4 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 800dffa:	2001      	movs	r0, #1
 800dffc:	f000 fd00 	bl	800ea00 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800e000:	4b9f      	ldr	r3, [pc, #636]	; (800e280 <SVCCTL_App_Notification+0x31c>)
 800e002:	2201      	movs	r2, #1
 800e004:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800e006:	4b98      	ldr	r3, [pc, #608]	; (800e268 <SVCCTL_App_Notification+0x304>)
 800e008:	8ada      	ldrh	r2, [r3, #22]
 800e00a:	4b9d      	ldr	r3, [pc, #628]	; (800e280 <SVCCTL_App_Notification+0x31c>)
 800e00c:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800e00e:	489c      	ldr	r0, [pc, #624]	; (800e280 <SVCCTL_App_Notification+0x31c>)
 800e010:	f000 fec6 	bl	800eda0 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800e014:	e224      	b.n	800e460 <SVCCTL_App_Notification+0x4fc>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800e016:	6a3b      	ldr	r3, [r7, #32]
 800e018:	3302      	adds	r3, #2
 800e01a:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800e01c:	697b      	ldr	r3, [r7, #20]
 800e01e:	781b      	ldrb	r3, [r3, #0]
 800e020:	2b01      	cmp	r3, #1
 800e022:	d042      	beq.n	800e0aa <SVCCTL_App_Notification+0x146>
 800e024:	2b03      	cmp	r3, #3
 800e026:	f040 80c7 	bne.w	800e1b8 <SVCCTL_App_Notification+0x254>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800e02a:	697b      	ldr	r3, [r7, #20]
 800e02c:	3301      	adds	r3, #1
 800e02e:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800e030:	488e      	ldr	r0, [pc, #568]	; (800e26c <SVCCTL_App_Notification+0x308>)
 800e032:	f7ff f94d 	bl	800d2d0 <DbgTraceGetFileName>
 800e036:	4601      	mov	r1, r0
 800e038:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 800e03c:	4a8c      	ldr	r2, [pc, #560]	; (800e270 <SVCCTL_App_Notification+0x30c>)
 800e03e:	488d      	ldr	r0, [pc, #564]	; (800e274 <SVCCTL_App_Notification+0x310>)
 800e040:	f004 fa50 	bl	80124e4 <iprintf>
 800e044:	488f      	ldr	r0, [pc, #572]	; (800e284 <SVCCTL_App_Notification+0x320>)
 800e046:	f004 fabb 	bl	80125c0 <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800e04a:	4888      	ldr	r0, [pc, #544]	; (800e26c <SVCCTL_App_Notification+0x308>)
 800e04c:	f7ff f940 	bl	800d2d0 <DbgTraceGetFileName>
 800e050:	4601      	mov	r1, r0
 800e052:	f240 13e3 	movw	r3, #483	; 0x1e3
 800e056:	4a86      	ldr	r2, [pc, #536]	; (800e270 <SVCCTL_App_Notification+0x30c>)
 800e058:	4886      	ldr	r0, [pc, #536]	; (800e274 <SVCCTL_App_Notification+0x310>)
 800e05a:	f004 fa43 	bl	80124e4 <iprintf>
 800e05e:	693b      	ldr	r3, [r7, #16]
 800e060:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800e064:	b29b      	uxth	r3, r3
 800e066:	4618      	mov	r0, r3
 800e068:	f7f2 fa34 	bl	80004d4 <__aeabi_i2d>
 800e06c:	f04f 0200 	mov.w	r2, #0
 800e070:	4b85      	ldr	r3, [pc, #532]	; (800e288 <SVCCTL_App_Notification+0x324>)
 800e072:	f7f2 fa99 	bl	80005a8 <__aeabi_dmul>
 800e076:	4602      	mov	r2, r0
 800e078:	460b      	mov	r3, r1
 800e07a:	4610      	mov	r0, r2
 800e07c:	4619      	mov	r1, r3
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800e084:	b29b      	uxth	r3, r3
 800e086:	461c      	mov	r4, r3
 800e088:	693b      	ldr	r3, [r7, #16]
 800e08a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800e08e:	b29b      	uxth	r3, r3
 800e090:	461a      	mov	r2, r3
 800e092:	4613      	mov	r3, r2
 800e094:	009b      	lsls	r3, r3, #2
 800e096:	4413      	add	r3, r2
 800e098:	005b      	lsls	r3, r3, #1
 800e09a:	9301      	str	r3, [sp, #4]
 800e09c:	9400      	str	r4, [sp, #0]
 800e09e:	4602      	mov	r2, r0
 800e0a0:	460b      	mov	r3, r1
 800e0a2:	487a      	ldr	r0, [pc, #488]	; (800e28c <SVCCTL_App_Notification+0x328>)
 800e0a4:	f004 fa1e 	bl	80124e4 <iprintf>
          break;
 800e0a8:	e087      	b.n	800e1ba <SVCCTL_App_Notification+0x256>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	3301      	adds	r3, #1
 800e0ae:	60fb      	str	r3, [r7, #12]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800e0b0:	486e      	ldr	r0, [pc, #440]	; (800e26c <SVCCTL_App_Notification+0x308>)
 800e0b2:	f7ff f90d 	bl	800d2d0 <DbgTraceGetFileName>
 800e0b6:	4601      	mov	r1, r0
 800e0b8:	f240 13f5 	movw	r3, #501	; 0x1f5
 800e0bc:	4a6c      	ldr	r2, [pc, #432]	; (800e270 <SVCCTL_App_Notification+0x30c>)
 800e0be:	486d      	ldr	r0, [pc, #436]	; (800e274 <SVCCTL_App_Notification+0x310>)
 800e0c0:	f004 fa10 	bl	80124e4 <iprintf>
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e0ca:	b29b      	uxth	r3, r3
 800e0cc:	4619      	mov	r1, r3
 800e0ce:	4870      	ldr	r0, [pc, #448]	; (800e290 <SVCCTL_App_Notification+0x32c>)
 800e0d0:	f004 fa08 	bl	80124e4 <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800e0d4:	4865      	ldr	r0, [pc, #404]	; (800e26c <SVCCTL_App_Notification+0x308>)
 800e0d6:	f7ff f8fb 	bl	800d2d0 <DbgTraceGetFileName>
 800e0da:	4601      	mov	r1, r0
 800e0dc:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
 800e0e0:	4a63      	ldr	r2, [pc, #396]	; (800e270 <SVCCTL_App_Notification+0x30c>)
 800e0e2:	4864      	ldr	r0, [pc, #400]	; (800e274 <SVCCTL_App_Notification+0x310>)
 800e0e4:	f004 f9fe 	bl	80124e4 <iprintf>
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	7a9b      	ldrb	r3, [r3, #10]
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	7a5b      	ldrb	r3, [r3, #9]
 800e0f2:	461c      	mov	r4, r3
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	7a1b      	ldrb	r3, [r3, #8]
 800e0f8:	461d      	mov	r5, r3
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	79db      	ldrb	r3, [r3, #7]
 800e0fe:	461a      	mov	r2, r3
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	799b      	ldrb	r3, [r3, #6]
 800e104:	4619      	mov	r1, r3
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	795b      	ldrb	r3, [r3, #5]
 800e10a:	9302      	str	r3, [sp, #8]
 800e10c:	9101      	str	r1, [sp, #4]
 800e10e:	9200      	str	r2, [sp, #0]
 800e110:	462b      	mov	r3, r5
 800e112:	4622      	mov	r2, r4
 800e114:	4601      	mov	r1, r0
 800e116:	485f      	ldr	r0, [pc, #380]	; (800e294 <SVCCTL_App_Notification+0x330>)
 800e118:	f004 f9e4 	bl	80124e4 <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800e11c:	4853      	ldr	r0, [pc, #332]	; (800e26c <SVCCTL_App_Notification+0x308>)
 800e11e:	f7ff f8d7 	bl	800d2d0 <DbgTraceGetFileName>
 800e122:	4601      	mov	r1, r0
 800e124:	f240 13fd 	movw	r3, #509	; 0x1fd
 800e128:	4a51      	ldr	r2, [pc, #324]	; (800e270 <SVCCTL_App_Notification+0x30c>)
 800e12a:	4852      	ldr	r0, [pc, #328]	; (800e274 <SVCCTL_App_Notification+0x310>)
 800e12c:	f004 f9da 	bl	80124e4 <iprintf>
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800e136:	b29b      	uxth	r3, r3
 800e138:	4618      	mov	r0, r3
 800e13a:	f7f2 f9cb 	bl	80004d4 <__aeabi_i2d>
 800e13e:	f04f 0200 	mov.w	r2, #0
 800e142:	4b51      	ldr	r3, [pc, #324]	; (800e288 <SVCCTL_App_Notification+0x324>)
 800e144:	f7f2 fa30 	bl	80005a8 <__aeabi_dmul>
 800e148:	4602      	mov	r2, r0
 800e14a:	460b      	mov	r3, r1
 800e14c:	4610      	mov	r0, r2
 800e14e:	4619      	mov	r1, r3
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800e156:	b29b      	uxth	r3, r3
 800e158:	461c      	mov	r4, r3
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800e160:	b29b      	uxth	r3, r3
 800e162:	461a      	mov	r2, r3
 800e164:	4613      	mov	r3, r2
 800e166:	009b      	lsls	r3, r3, #2
 800e168:	4413      	add	r3, r2
 800e16a:	005b      	lsls	r3, r3, #1
 800e16c:	9301      	str	r3, [sp, #4]
 800e16e:	9400      	str	r4, [sp, #0]
 800e170:	4602      	mov	r2, r0
 800e172:	460b      	mov	r3, r1
 800e174:	4845      	ldr	r0, [pc, #276]	; (800e28c <SVCCTL_App_Notification+0x328>)
 800e176:	f004 f9b5 	bl	80124e4 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800e17a:	4b3b      	ldr	r3, [pc, #236]	; (800e268 <SVCCTL_App_Notification+0x304>)
 800e17c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e180:	2b04      	cmp	r3, #4
 800e182:	d104      	bne.n	800e18e <SVCCTL_App_Notification+0x22a>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800e184:	4b38      	ldr	r3, [pc, #224]	; (800e268 <SVCCTL_App_Notification+0x304>)
 800e186:	2206      	movs	r2, #6
 800e188:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800e18c:	e003      	b.n	800e196 <SVCCTL_App_Notification+0x232>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800e18e:	4b36      	ldr	r3, [pc, #216]	; (800e268 <SVCCTL_App_Notification+0x304>)
 800e190:	2205      	movs	r2, #5
 800e192:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e19c:	b29a      	uxth	r2, r3
 800e19e:	4b32      	ldr	r3, [pc, #200]	; (800e268 <SVCCTL_App_Notification+0x304>)
 800e1a0:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800e1a2:	4b37      	ldr	r3, [pc, #220]	; (800e280 <SVCCTL_App_Notification+0x31c>)
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800e1a8:	4b2f      	ldr	r3, [pc, #188]	; (800e268 <SVCCTL_App_Notification+0x304>)
 800e1aa:	8ada      	ldrh	r2, [r3, #22]
 800e1ac:	4b34      	ldr	r3, [pc, #208]	; (800e280 <SVCCTL_App_Notification+0x31c>)
 800e1ae:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800e1b0:	4833      	ldr	r0, [pc, #204]	; (800e280 <SVCCTL_App_Notification+0x31c>)
 800e1b2:	f000 fdf5 	bl	800eda0 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800e1b6:	e000      	b.n	800e1ba <SVCCTL_App_Notification+0x256>
          break;
 800e1b8:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800e1ba:	e151      	b.n	800e460 <SVCCTL_App_Notification+0x4fc>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800e1bc:	6a3b      	ldr	r3, [r7, #32]
 800e1be:	3302      	adds	r3, #2
 800e1c0:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800e1c2:	69fb      	ldr	r3, [r7, #28]
 800e1c4:	881b      	ldrh	r3, [r3, #0]
 800e1c6:	b29b      	uxth	r3, r3
 800e1c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e1cc:	f000 8141 	beq.w	800e452 <SVCCTL_App_Notification+0x4ee>
 800e1d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e1d4:	f300 8143 	bgt.w	800e45e <SVCCTL_App_Notification+0x4fa>
 800e1d8:	2b04      	cmp	r3, #4
 800e1da:	f000 813c 	beq.w	800e456 <SVCCTL_App_Notification+0x4f2>
 800e1de:	2b04      	cmp	r3, #4
 800e1e0:	f2c0 813d 	blt.w	800e45e <SVCCTL_App_Notification+0x4fa>
 800e1e4:	f240 420a 	movw	r2, #1034	; 0x40a
 800e1e8:	4293      	cmp	r3, r2
 800e1ea:	f300 8138 	bgt.w	800e45e <SVCCTL_App_Notification+0x4fa>
 800e1ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e1f2:	f340 8134 	ble.w	800e45e <SVCCTL_App_Notification+0x4fa>
 800e1f6:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 800e1fa:	2b09      	cmp	r3, #9
 800e1fc:	f200 812f 	bhi.w	800e45e <SVCCTL_App_Notification+0x4fa>
 800e200:	a201      	add	r2, pc, #4	; (adr r2, 800e208 <SVCCTL_App_Notification+0x2a4>)
 800e202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e206:	bf00      	nop
 800e208:	0800e3cd 	.word	0x0800e3cd
 800e20c:	0800e2a1 	.word	0x0800e2a1
 800e210:	0800e45f 	.word	0x0800e45f
 800e214:	0800e45f 	.word	0x0800e45f
 800e218:	0800e45f 	.word	0x0800e45f
 800e21c:	0800e45f 	.word	0x0800e45f
 800e220:	0800e231 	.word	0x0800e231
 800e224:	0800e45f 	.word	0x0800e45f
 800e228:	0800e313 	.word	0x0800e313
 800e22c:	0800e24d 	.word	0x0800e24d
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800e230:	480e      	ldr	r0, [pc, #56]	; (800e26c <SVCCTL_App_Notification+0x308>)
 800e232:	f7ff f84d 	bl	800d2d0 <DbgTraceGetFileName>
 800e236:	4601      	mov	r1, r0
 800e238:	f240 233f 	movw	r3, #575	; 0x23f
 800e23c:	4a0c      	ldr	r2, [pc, #48]	; (800e270 <SVCCTL_App_Notification+0x30c>)
 800e23e:	480d      	ldr	r0, [pc, #52]	; (800e274 <SVCCTL_App_Notification+0x310>)
 800e240:	f004 f950 	bl	80124e4 <iprintf>
 800e244:	4814      	ldr	r0, [pc, #80]	; (800e298 <SVCCTL_App_Notification+0x334>)
 800e246:	f004 f94d 	bl	80124e4 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800e24a:	e105      	b.n	800e458 <SVCCTL_App_Notification+0x4f4>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800e24c:	4807      	ldr	r0, [pc, #28]	; (800e26c <SVCCTL_App_Notification+0x308>)
 800e24e:	f7ff f83f 	bl	800d2d0 <DbgTraceGetFileName>
 800e252:	4601      	mov	r1, r0
 800e254:	f240 234f 	movw	r3, #591	; 0x24f
 800e258:	4a05      	ldr	r2, [pc, #20]	; (800e270 <SVCCTL_App_Notification+0x30c>)
 800e25a:	4806      	ldr	r0, [pc, #24]	; (800e274 <SVCCTL_App_Notification+0x310>)
 800e25c:	f004 f942 	bl	80124e4 <iprintf>
 800e260:	480e      	ldr	r0, [pc, #56]	; (800e29c <SVCCTL_App_Notification+0x338>)
 800e262:	f004 f9ad 	bl	80125c0 <puts>
          break;
 800e266:	e0f7      	b.n	800e458 <SVCCTL_App_Notification+0x4f4>
 800e268:	20000620 	.word	0x20000620
 800e26c:	08016614 	.word	0x08016614
 800e270:	0801838c 	.word	0x0801838c
 800e274:	08016630 	.word	0x08016630
 800e278:	0801675c 	.word	0x0801675c
 800e27c:	08016788 	.word	0x08016788
 800e280:	200006a4 	.word	0x200006a4
 800e284:	080167c4 	.word	0x080167c4
 800e288:	3ff40000 	.word	0x3ff40000
 800e28c:	080167f8 	.word	0x080167f8
 800e290:	08016864 	.word	0x08016864
 800e294:	080168ac 	.word	0x080168ac
 800e298:	080168fc 	.word	0x080168fc
 800e29c:	08016924 	.word	0x08016924
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800e2a0:	4872      	ldr	r0, [pc, #456]	; (800e46c <SVCCTL_App_Notification+0x508>)
 800e2a2:	f7ff f815 	bl	800d2d0 <DbgTraceGetFileName>
 800e2a6:	4601      	mov	r1, r0
 800e2a8:	f240 2356 	movw	r3, #598	; 0x256
 800e2ac:	4a70      	ldr	r2, [pc, #448]	; (800e470 <SVCCTL_App_Notification+0x50c>)
 800e2ae:	4871      	ldr	r0, [pc, #452]	; (800e474 <SVCCTL_App_Notification+0x510>)
 800e2b0:	f004 f918 	bl	80124e4 <iprintf>
 800e2b4:	4870      	ldr	r0, [pc, #448]	; (800e478 <SVCCTL_App_Notification+0x514>)
 800e2b6:	f004 f983 	bl	80125c0 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800e2ba:	4b70      	ldr	r3, [pc, #448]	; (800e47c <SVCCTL_App_Notification+0x518>)
 800e2bc:	8adb      	ldrh	r3, [r3, #22]
 800e2be:	4970      	ldr	r1, [pc, #448]	; (800e480 <SVCCTL_App_Notification+0x51c>)
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	f7fd f9c7 	bl	800b654 <aci_gap_pass_key_resp>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800e2cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d010      	beq.n	800e2f6 <SVCCTL_App_Notification+0x392>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 800e2d4:	4865      	ldr	r0, [pc, #404]	; (800e46c <SVCCTL_App_Notification+0x508>)
 800e2d6:	f7fe fffb 	bl	800d2d0 <DbgTraceGetFileName>
 800e2da:	4601      	mov	r1, r0
 800e2dc:	f240 235b 	movw	r3, #603	; 0x25b
 800e2e0:	4a63      	ldr	r2, [pc, #396]	; (800e470 <SVCCTL_App_Notification+0x50c>)
 800e2e2:	4864      	ldr	r0, [pc, #400]	; (800e474 <SVCCTL_App_Notification+0x510>)
 800e2e4:	f004 f8fe 	bl	80124e4 <iprintf>
 800e2e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2ec:	4619      	mov	r1, r3
 800e2ee:	4865      	ldr	r0, [pc, #404]	; (800e484 <SVCCTL_App_Notification+0x520>)
 800e2f0:	f004 f8f8 	bl	80124e4 <iprintf>
          break;
 800e2f4:	e0b0      	b.n	800e458 <SVCCTL_App_Notification+0x4f4>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 800e2f6:	485d      	ldr	r0, [pc, #372]	; (800e46c <SVCCTL_App_Notification+0x508>)
 800e2f8:	f7fe ffea 	bl	800d2d0 <DbgTraceGetFileName>
 800e2fc:	4601      	mov	r1, r0
 800e2fe:	f240 235f 	movw	r3, #607	; 0x25f
 800e302:	4a5b      	ldr	r2, [pc, #364]	; (800e470 <SVCCTL_App_Notification+0x50c>)
 800e304:	485b      	ldr	r0, [pc, #364]	; (800e474 <SVCCTL_App_Notification+0x510>)
 800e306:	f004 f8ed 	bl	80124e4 <iprintf>
 800e30a:	485f      	ldr	r0, [pc, #380]	; (800e488 <SVCCTL_App_Notification+0x524>)
 800e30c:	f004 f958 	bl	80125c0 <puts>
          break;
 800e310:	e0a2      	b.n	800e458 <SVCCTL_App_Notification+0x4f4>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 800e312:	4856      	ldr	r0, [pc, #344]	; (800e46c <SVCCTL_App_Notification+0x508>)
 800e314:	f7fe ffdc 	bl	800d2d0 <DbgTraceGetFileName>
 800e318:	4601      	mov	r1, r0
 800e31a:	f240 2367 	movw	r3, #615	; 0x267
 800e31e:	4a54      	ldr	r2, [pc, #336]	; (800e470 <SVCCTL_App_Notification+0x50c>)
 800e320:	4854      	ldr	r0, [pc, #336]	; (800e474 <SVCCTL_App_Notification+0x510>)
 800e322:	f004 f8df 	bl	80124e4 <iprintf>
 800e326:	4859      	ldr	r0, [pc, #356]	; (800e48c <SVCCTL_App_Notification+0x528>)
 800e328:	f004 f94a 	bl	80125c0 <puts>
          APP_DBG_MSG("     - numeric_value = %ld\n",
 800e32c:	484f      	ldr	r0, [pc, #316]	; (800e46c <SVCCTL_App_Notification+0x508>)
 800e32e:	f7fe ffcf 	bl	800d2d0 <DbgTraceGetFileName>
 800e332:	4601      	mov	r1, r0
 800e334:	f44f 731a 	mov.w	r3, #616	; 0x268
 800e338:	4a4d      	ldr	r2, [pc, #308]	; (800e470 <SVCCTL_App_Notification+0x50c>)
 800e33a:	484e      	ldr	r0, [pc, #312]	; (800e474 <SVCCTL_App_Notification+0x510>)
 800e33c:	f004 f8d2 	bl	80124e4 <iprintf>
 800e340:	69fb      	ldr	r3, [r7, #28]
 800e342:	3302      	adds	r3, #2
 800e344:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800e348:	4619      	mov	r1, r3
 800e34a:	4851      	ldr	r0, [pc, #324]	; (800e490 <SVCCTL_App_Notification+0x52c>)
 800e34c:	f004 f8ca 	bl	80124e4 <iprintf>
          APP_DBG_MSG("     - Hex_value = %lx\n",
 800e350:	4846      	ldr	r0, [pc, #280]	; (800e46c <SVCCTL_App_Notification+0x508>)
 800e352:	f7fe ffbd 	bl	800d2d0 <DbgTraceGetFileName>
 800e356:	4601      	mov	r1, r0
 800e358:	f240 236a 	movw	r3, #618	; 0x26a
 800e35c:	4a44      	ldr	r2, [pc, #272]	; (800e470 <SVCCTL_App_Notification+0x50c>)
 800e35e:	4845      	ldr	r0, [pc, #276]	; (800e474 <SVCCTL_App_Notification+0x510>)
 800e360:	f004 f8c0 	bl	80124e4 <iprintf>
 800e364:	69fb      	ldr	r3, [r7, #28]
 800e366:	3302      	adds	r3, #2
 800e368:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800e36c:	4619      	mov	r1, r3
 800e36e:	4849      	ldr	r0, [pc, #292]	; (800e494 <SVCCTL_App_Notification+0x530>)
 800e370:	f004 f8b8 	bl	80124e4 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800e374:	4b41      	ldr	r3, [pc, #260]	; (800e47c <SVCCTL_App_Notification+0x518>)
 800e376:	8adb      	ldrh	r3, [r3, #22]
 800e378:	2101      	movs	r1, #1
 800e37a:	4618      	mov	r0, r3
 800e37c:	f7fd fb14 	bl	800b9a8 <aci_gap_numeric_comparison_value_confirm_yesno>
 800e380:	4603      	mov	r3, r0
 800e382:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800e386:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d010      	beq.n	800e3b0 <SVCCTL_App_Notification+0x44c>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 800e38e:	4837      	ldr	r0, [pc, #220]	; (800e46c <SVCCTL_App_Notification+0x508>)
 800e390:	f7fe ff9e 	bl	800d2d0 <DbgTraceGetFileName>
 800e394:	4601      	mov	r1, r0
 800e396:	f240 236f 	movw	r3, #623	; 0x26f
 800e39a:	4a35      	ldr	r2, [pc, #212]	; (800e470 <SVCCTL_App_Notification+0x50c>)
 800e39c:	4835      	ldr	r0, [pc, #212]	; (800e474 <SVCCTL_App_Notification+0x510>)
 800e39e:	f004 f8a1 	bl	80124e4 <iprintf>
 800e3a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3a6:	4619      	mov	r1, r3
 800e3a8:	483b      	ldr	r0, [pc, #236]	; (800e498 <SVCCTL_App_Notification+0x534>)
 800e3aa:	f004 f89b 	bl	80124e4 <iprintf>
          break;
 800e3ae:	e053      	b.n	800e458 <SVCCTL_App_Notification+0x4f4>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 800e3b0:	482e      	ldr	r0, [pc, #184]	; (800e46c <SVCCTL_App_Notification+0x508>)
 800e3b2:	f7fe ff8d 	bl	800d2d0 <DbgTraceGetFileName>
 800e3b6:	4601      	mov	r1, r0
 800e3b8:	f240 2373 	movw	r3, #627	; 0x273
 800e3bc:	4a2c      	ldr	r2, [pc, #176]	; (800e470 <SVCCTL_App_Notification+0x50c>)
 800e3be:	482d      	ldr	r0, [pc, #180]	; (800e474 <SVCCTL_App_Notification+0x510>)
 800e3c0:	f004 f890 	bl	80124e4 <iprintf>
 800e3c4:	4835      	ldr	r0, [pc, #212]	; (800e49c <SVCCTL_App_Notification+0x538>)
 800e3c6:	f004 f8fb 	bl	80125c0 <puts>
          break;
 800e3ca:	e045      	b.n	800e458 <SVCCTL_App_Notification+0x4f4>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800e3cc:	69fb      	ldr	r3, [r7, #28]
 800e3ce:	3302      	adds	r3, #2
 800e3d0:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 800e3d2:	4826      	ldr	r0, [pc, #152]	; (800e46c <SVCCTL_App_Notification+0x508>)
 800e3d4:	f7fe ff7c 	bl	800d2d0 <DbgTraceGetFileName>
 800e3d8:	4601      	mov	r1, r0
 800e3da:	f240 237d 	movw	r3, #637	; 0x27d
 800e3de:	4a24      	ldr	r2, [pc, #144]	; (800e470 <SVCCTL_App_Notification+0x50c>)
 800e3e0:	4824      	ldr	r0, [pc, #144]	; (800e474 <SVCCTL_App_Notification+0x510>)
 800e3e2:	f004 f87f 	bl	80124e4 <iprintf>
 800e3e6:	482e      	ldr	r0, [pc, #184]	; (800e4a0 <SVCCTL_App_Notification+0x53c>)
 800e3e8:	f004 f8ea 	bl	80125c0 <puts>
          if (p_pairing_complete->Status != 0)
 800e3ec:	69bb      	ldr	r3, [r7, #24]
 800e3ee:	789b      	ldrb	r3, [r3, #2]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d013      	beq.n	800e41c <SVCCTL_App_Notification+0x4b8>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 800e3f4:	481d      	ldr	r0, [pc, #116]	; (800e46c <SVCCTL_App_Notification+0x508>)
 800e3f6:	f7fe ff6b 	bl	800d2d0 <DbgTraceGetFileName>
 800e3fa:	4601      	mov	r1, r0
 800e3fc:	f44f 7320 	mov.w	r3, #640	; 0x280
 800e400:	4a1b      	ldr	r2, [pc, #108]	; (800e470 <SVCCTL_App_Notification+0x50c>)
 800e402:	481c      	ldr	r0, [pc, #112]	; (800e474 <SVCCTL_App_Notification+0x510>)
 800e404:	f004 f86e 	bl	80124e4 <iprintf>
 800e408:	69bb      	ldr	r3, [r7, #24]
 800e40a:	789b      	ldrb	r3, [r3, #2]
 800e40c:	4619      	mov	r1, r3
 800e40e:	69bb      	ldr	r3, [r7, #24]
 800e410:	78db      	ldrb	r3, [r3, #3]
 800e412:	461a      	mov	r2, r3
 800e414:	4823      	ldr	r0, [pc, #140]	; (800e4a4 <SVCCTL_App_Notification+0x540>)
 800e416:	f004 f865 	bl	80124e4 <iprintf>
 800e41a:	e00c      	b.n	800e436 <SVCCTL_App_Notification+0x4d2>
            APP_DBG_MSG("     - Pairing Success\n");
 800e41c:	4813      	ldr	r0, [pc, #76]	; (800e46c <SVCCTL_App_Notification+0x508>)
 800e41e:	f7fe ff57 	bl	800d2d0 <DbgTraceGetFileName>
 800e422:	4601      	mov	r1, r0
 800e424:	f44f 7321 	mov.w	r3, #644	; 0x284
 800e428:	4a11      	ldr	r2, [pc, #68]	; (800e470 <SVCCTL_App_Notification+0x50c>)
 800e42a:	4812      	ldr	r0, [pc, #72]	; (800e474 <SVCCTL_App_Notification+0x510>)
 800e42c:	f004 f85a 	bl	80124e4 <iprintf>
 800e430:	481d      	ldr	r0, [pc, #116]	; (800e4a8 <SVCCTL_App_Notification+0x544>)
 800e432:	f004 f8c5 	bl	80125c0 <puts>
          APP_DBG_MSG("\n");
 800e436:	480d      	ldr	r0, [pc, #52]	; (800e46c <SVCCTL_App_Notification+0x508>)
 800e438:	f7fe ff4a 	bl	800d2d0 <DbgTraceGetFileName>
 800e43c:	4601      	mov	r1, r0
 800e43e:	f240 2386 	movw	r3, #646	; 0x286
 800e442:	4a0b      	ldr	r2, [pc, #44]	; (800e470 <SVCCTL_App_Notification+0x50c>)
 800e444:	480b      	ldr	r0, [pc, #44]	; (800e474 <SVCCTL_App_Notification+0x510>)
 800e446:	f004 f84d 	bl	80124e4 <iprintf>
 800e44a:	200a      	movs	r0, #10
 800e44c:	f004 f85c 	bl	8012508 <putchar>
          break;
 800e450:	e002      	b.n	800e458 <SVCCTL_App_Notification+0x4f4>
          break;
 800e452:	bf00      	nop
 800e454:	e003      	b.n	800e45e <SVCCTL_App_Notification+0x4fa>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800e456:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800e458:	e001      	b.n	800e45e <SVCCTL_App_Notification+0x4fa>
      break;
 800e45a:	bf00      	nop
 800e45c:	e000      	b.n	800e460 <SVCCTL_App_Notification+0x4fc>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800e45e:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800e460:	2301      	movs	r3, #1
}
 800e462:	4618      	mov	r0, r3
 800e464:	3728      	adds	r7, #40	; 0x28
 800e466:	46bd      	mov	sp, r7
 800e468:	bdb0      	pop	{r4, r5, r7, pc}
 800e46a:	bf00      	nop
 800e46c:	08016614 	.word	0x08016614
 800e470:	0801838c 	.word	0x0801838c
 800e474:	08016630 	.word	0x08016630
 800e478:	08016954 	.word	0x08016954
 800e47c:	20000620 	.word	0x20000620
 800e480:	0001b207 	.word	0x0001b207
 800e484:	0801697c 	.word	0x0801697c
 800e488:	080169b0 	.word	0x080169b0
 800e48c:	080169d8 	.word	0x080169d8
 800e490:	08016a0c 	.word	0x08016a0c
 800e494:	08016a28 	.word	0x08016a28
 800e498:	08016a40 	.word	0x08016a40
 800e49c:	08016a90 	.word	0x08016a90
 800e4a0:	08016ad8 	.word	0x08016ad8
 800e4a4:	08016b04 	.word	0x08016b04
 800e4a8:	08016b40 	.word	0x08016b40

0800e4ac <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b082      	sub	sp, #8
 800e4b0:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800e4b2:	4b06      	ldr	r3, [pc, #24]	; (800e4cc <Ble_Tl_Init+0x20>)
 800e4b4:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800e4b6:	4b06      	ldr	r3, [pc, #24]	; (800e4d0 <Ble_Tl_Init+0x24>)
 800e4b8:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800e4ba:	463b      	mov	r3, r7
 800e4bc:	4619      	mov	r1, r3
 800e4be:	4805      	ldr	r0, [pc, #20]	; (800e4d4 <Ble_Tl_Init+0x28>)
 800e4c0:	f7fe f9ea 	bl	800c898 <hci_init>

  return;
 800e4c4:	bf00      	nop
}
 800e4c6:	3708      	adds	r7, #8
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	bd80      	pop	{r7, pc}
 800e4cc:	200300d8 	.word	0x200300d8
 800e4d0:	0800eca1 	.word	0x0800eca1
 800e4d4:	0800ec69 	.word	0x0800ec69

0800e4d8 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800e4d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4da:	b08d      	sub	sp, #52	; 0x34
 800e4dc:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800e4de:	2300      	movs	r3, #0
 800e4e0:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800e4e2:	2392      	movs	r3, #146	; 0x92
 800e4e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800e4e6:	48a3      	ldr	r0, [pc, #652]	; (800e774 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800e4e8:	f7fe fef2 	bl	800d2d0 <DbgTraceGetFileName>
 800e4ec:	4601      	mov	r1, r0
 800e4ee:	f240 23c6 	movw	r3, #710	; 0x2c6
 800e4f2:	4aa1      	ldr	r2, [pc, #644]	; (800e778 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800e4f4:	48a1      	ldr	r0, [pc, #644]	; (800e77c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800e4f6:	f003 fff5 	bl	80124e4 <iprintf>
 800e4fa:	48a1      	ldr	r0, [pc, #644]	; (800e780 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800e4fc:	f004 f860 	bl	80125c0 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800e500:	f7fd fefa 	bl	800c2f8 <hci_reset>
 800e504:	4603      	mov	r3, r0
 800e506:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800e508:	7dfb      	ldrb	r3, [r7, #23]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d00f      	beq.n	800e52e <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800e50e:	4899      	ldr	r0, [pc, #612]	; (800e774 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800e510:	f7fe fede 	bl	800d2d0 <DbgTraceGetFileName>
 800e514:	4601      	mov	r1, r0
 800e516:	f240 23cf 	movw	r3, #719	; 0x2cf
 800e51a:	4a97      	ldr	r2, [pc, #604]	; (800e778 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800e51c:	4897      	ldr	r0, [pc, #604]	; (800e77c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800e51e:	f003 ffe1 	bl	80124e4 <iprintf>
 800e522:	7dfb      	ldrb	r3, [r7, #23]
 800e524:	4619      	mov	r1, r3
 800e526:	4897      	ldr	r0, [pc, #604]	; (800e784 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800e528:	f003 ffdc 	bl	80124e4 <iprintf>
 800e52c:	e00c      	b.n	800e548 <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800e52e:	4891      	ldr	r0, [pc, #580]	; (800e774 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800e530:	f7fe fece 	bl	800d2d0 <DbgTraceGetFileName>
 800e534:	4601      	mov	r1, r0
 800e536:	f240 23d3 	movw	r3, #723	; 0x2d3
 800e53a:	4a8f      	ldr	r2, [pc, #572]	; (800e778 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800e53c:	488f      	ldr	r0, [pc, #572]	; (800e77c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800e53e:	f003 ffd1 	bl	80124e4 <iprintf>
 800e542:	4891      	ldr	r0, [pc, #580]	; (800e788 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800e544:	f004 f83c 	bl	80125c0 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800e548:	f000 fad8 	bl	800eafc <BleGetBdAddress>
 800e54c:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800e54e:	693a      	ldr	r2, [r7, #16]
 800e550:	2106      	movs	r1, #6
 800e552:	2000      	movs	r0, #0
 800e554:	f7fd fd90 	bl	800c078 <aci_hal_write_config_data>
 800e558:	4603      	mov	r3, r0
 800e55a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800e55c:	7dfb      	ldrb	r3, [r7, #23]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d00f      	beq.n	800e582 <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800e562:	4884      	ldr	r0, [pc, #528]	; (800e774 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800e564:	f7fe feb4 	bl	800d2d0 <DbgTraceGetFileName>
 800e568:	4601      	mov	r1, r0
 800e56a:	f240 23dd 	movw	r3, #733	; 0x2dd
 800e56e:	4a82      	ldr	r2, [pc, #520]	; (800e778 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800e570:	4882      	ldr	r0, [pc, #520]	; (800e77c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800e572:	f003 ffb7 	bl	80124e4 <iprintf>
 800e576:	7dfb      	ldrb	r3, [r7, #23]
 800e578:	4619      	mov	r1, r3
 800e57a:	4884      	ldr	r0, [pc, #528]	; (800e78c <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800e57c:	f003 ffb2 	bl	80124e4 <iprintf>
 800e580:	e035      	b.n	800e5ee <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800e582:	487c      	ldr	r0, [pc, #496]	; (800e774 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800e584:	f7fe fea4 	bl	800d2d0 <DbgTraceGetFileName>
 800e588:	4601      	mov	r1, r0
 800e58a:	f240 23e1 	movw	r3, #737	; 0x2e1
 800e58e:	4a7a      	ldr	r2, [pc, #488]	; (800e778 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800e590:	487a      	ldr	r0, [pc, #488]	; (800e77c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800e592:	f003 ffa7 	bl	80124e4 <iprintf>
 800e596:	487e      	ldr	r0, [pc, #504]	; (800e790 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800e598:	f004 f812 	bl	80125c0 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800e59c:	4875      	ldr	r0, [pc, #468]	; (800e774 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800e59e:	f7fe fe97 	bl	800d2d0 <DbgTraceGetFileName>
 800e5a2:	4601      	mov	r1, r0
 800e5a4:	f240 23e2 	movw	r3, #738	; 0x2e2
 800e5a8:	4a73      	ldr	r2, [pc, #460]	; (800e778 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800e5aa:	4874      	ldr	r0, [pc, #464]	; (800e77c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800e5ac:	f003 ff9a 	bl	80124e4 <iprintf>
 800e5b0:	693b      	ldr	r3, [r7, #16]
 800e5b2:	3305      	adds	r3, #5
 800e5b4:	781b      	ldrb	r3, [r3, #0]
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	693b      	ldr	r3, [r7, #16]
 800e5ba:	3304      	adds	r3, #4
 800e5bc:	781b      	ldrb	r3, [r3, #0]
 800e5be:	461c      	mov	r4, r3
 800e5c0:	693b      	ldr	r3, [r7, #16]
 800e5c2:	3303      	adds	r3, #3
 800e5c4:	781b      	ldrb	r3, [r3, #0]
 800e5c6:	461d      	mov	r5, r3
 800e5c8:	693b      	ldr	r3, [r7, #16]
 800e5ca:	3302      	adds	r3, #2
 800e5cc:	781b      	ldrb	r3, [r3, #0]
 800e5ce:	461a      	mov	r2, r3
 800e5d0:	693b      	ldr	r3, [r7, #16]
 800e5d2:	3301      	adds	r3, #1
 800e5d4:	781b      	ldrb	r3, [r3, #0]
 800e5d6:	4619      	mov	r1, r3
 800e5d8:	693b      	ldr	r3, [r7, #16]
 800e5da:	781b      	ldrb	r3, [r3, #0]
 800e5dc:	9302      	str	r3, [sp, #8]
 800e5de:	9101      	str	r1, [sp, #4]
 800e5e0:	9200      	str	r2, [sp, #0]
 800e5e2:	462b      	mov	r3, r5
 800e5e4:	4622      	mov	r2, r4
 800e5e6:	4601      	mov	r1, r0
 800e5e8:	486a      	ldr	r0, [pc, #424]	; (800e794 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800e5ea:	f003 ff7b 	bl	80124e4 <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800e5ee:	4a6a      	ldr	r2, [pc, #424]	; (800e798 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800e5f0:	2110      	movs	r1, #16
 800e5f2:	2018      	movs	r0, #24
 800e5f4:	f7fd fd40 	bl	800c078 <aci_hal_write_config_data>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800e5fc:	7dfb      	ldrb	r3, [r7, #23]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d00f      	beq.n	800e622 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800e602:	485c      	ldr	r0, [pc, #368]	; (800e774 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800e604:	f7fe fe64 	bl	800d2d0 <DbgTraceGetFileName>
 800e608:	4601      	mov	r1, r0
 800e60a:	f44f 734b 	mov.w	r3, #812	; 0x32c
 800e60e:	4a5a      	ldr	r2, [pc, #360]	; (800e778 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800e610:	485a      	ldr	r0, [pc, #360]	; (800e77c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800e612:	f003 ff67 	bl	80124e4 <iprintf>
 800e616:	7dfb      	ldrb	r3, [r7, #23]
 800e618:	4619      	mov	r1, r3
 800e61a:	4860      	ldr	r0, [pc, #384]	; (800e79c <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800e61c:	f003 ff62 	bl	80124e4 <iprintf>
 800e620:	e00c      	b.n	800e63c <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800e622:	4854      	ldr	r0, [pc, #336]	; (800e774 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800e624:	f7fe fe54 	bl	800d2d0 <DbgTraceGetFileName>
 800e628:	4601      	mov	r1, r0
 800e62a:	f44f 734c 	mov.w	r3, #816	; 0x330
 800e62e:	4a52      	ldr	r2, [pc, #328]	; (800e778 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800e630:	4852      	ldr	r0, [pc, #328]	; (800e77c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800e632:	f003 ff57 	bl	80124e4 <iprintf>
 800e636:	485a      	ldr	r0, [pc, #360]	; (800e7a0 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800e638:	f003 ffc2 	bl	80125c0 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800e63c:	4a59      	ldr	r2, [pc, #356]	; (800e7a4 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800e63e:	2110      	movs	r1, #16
 800e640:	2008      	movs	r0, #8
 800e642:	f7fd fd19 	bl	800c078 <aci_hal_write_config_data>
 800e646:	4603      	mov	r3, r0
 800e648:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800e64a:	7dfb      	ldrb	r3, [r7, #23]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d00f      	beq.n	800e670 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800e650:	4848      	ldr	r0, [pc, #288]	; (800e774 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800e652:	f7fe fe3d 	bl	800d2d0 <DbgTraceGetFileName>
 800e656:	4601      	mov	r1, r0
 800e658:	f240 3339 	movw	r3, #825	; 0x339
 800e65c:	4a46      	ldr	r2, [pc, #280]	; (800e778 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800e65e:	4847      	ldr	r0, [pc, #284]	; (800e77c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800e660:	f003 ff40 	bl	80124e4 <iprintf>
 800e664:	7dfb      	ldrb	r3, [r7, #23]
 800e666:	4619      	mov	r1, r3
 800e668:	484f      	ldr	r0, [pc, #316]	; (800e7a8 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800e66a:	f003 ff3b 	bl	80124e4 <iprintf>
 800e66e:	e00c      	b.n	800e68a <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800e670:	4840      	ldr	r0, [pc, #256]	; (800e774 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800e672:	f7fe fe2d 	bl	800d2d0 <DbgTraceGetFileName>
 800e676:	4601      	mov	r1, r0
 800e678:	f240 333d 	movw	r3, #829	; 0x33d
 800e67c:	4a3e      	ldr	r2, [pc, #248]	; (800e778 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800e67e:	483f      	ldr	r0, [pc, #252]	; (800e77c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800e680:	f003 ff30 	bl	80124e4 <iprintf>
 800e684:	4849      	ldr	r0, [pc, #292]	; (800e7ac <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800e686:	f003 ff9b 	bl	80125c0 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800e68a:	211f      	movs	r1, #31
 800e68c:	2001      	movs	r0, #1
 800e68e:	f7fd fd78 	bl	800c182 <aci_hal_set_tx_power_level>
 800e692:	4603      	mov	r3, r0
 800e694:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800e696:	7dfb      	ldrb	r3, [r7, #23]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d00f      	beq.n	800e6bc <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800e69c:	4835      	ldr	r0, [pc, #212]	; (800e774 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800e69e:	f7fe fe17 	bl	800d2d0 <DbgTraceGetFileName>
 800e6a2:	4601      	mov	r1, r0
 800e6a4:	f240 3346 	movw	r3, #838	; 0x346
 800e6a8:	4a33      	ldr	r2, [pc, #204]	; (800e778 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800e6aa:	4834      	ldr	r0, [pc, #208]	; (800e77c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800e6ac:	f003 ff1a 	bl	80124e4 <iprintf>
 800e6b0:	7dfb      	ldrb	r3, [r7, #23]
 800e6b2:	4619      	mov	r1, r3
 800e6b4:	483e      	ldr	r0, [pc, #248]	; (800e7b0 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800e6b6:	f003 ff15 	bl	80124e4 <iprintf>
 800e6ba:	e00c      	b.n	800e6d6 <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800e6bc:	482d      	ldr	r0, [pc, #180]	; (800e774 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800e6be:	f7fe fe07 	bl	800d2d0 <DbgTraceGetFileName>
 800e6c2:	4601      	mov	r1, r0
 800e6c4:	f240 334a 	movw	r3, #842	; 0x34a
 800e6c8:	4a2b      	ldr	r2, [pc, #172]	; (800e778 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800e6ca:	482c      	ldr	r0, [pc, #176]	; (800e77c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800e6cc:	f003 ff0a 	bl	80124e4 <iprintf>
 800e6d0:	4838      	ldr	r0, [pc, #224]	; (800e7b4 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800e6d2:	f003 ff75 	bl	80125c0 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800e6d6:	f7fd f9ce 	bl	800ba76 <aci_gatt_init>
 800e6da:	4603      	mov	r3, r0
 800e6dc:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800e6de:	7dfb      	ldrb	r3, [r7, #23]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d00f      	beq.n	800e704 <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800e6e4:	4823      	ldr	r0, [pc, #140]	; (800e774 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800e6e6:	f7fe fdf3 	bl	800d2d0 <DbgTraceGetFileName>
 800e6ea:	4601      	mov	r1, r0
 800e6ec:	f240 3353 	movw	r3, #851	; 0x353
 800e6f0:	4a21      	ldr	r2, [pc, #132]	; (800e778 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800e6f2:	4822      	ldr	r0, [pc, #136]	; (800e77c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800e6f4:	f003 fef6 	bl	80124e4 <iprintf>
 800e6f8:	7dfb      	ldrb	r3, [r7, #23]
 800e6fa:	4619      	mov	r1, r3
 800e6fc:	482e      	ldr	r0, [pc, #184]	; (800e7b8 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800e6fe:	f003 fef1 	bl	80124e4 <iprintf>
 800e702:	e00c      	b.n	800e71e <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800e704:	481b      	ldr	r0, [pc, #108]	; (800e774 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800e706:	f7fe fde3 	bl	800d2d0 <DbgTraceGetFileName>
 800e70a:	4601      	mov	r1, r0
 800e70c:	f240 3357 	movw	r3, #855	; 0x357
 800e710:	4a19      	ldr	r2, [pc, #100]	; (800e778 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800e712:	481a      	ldr	r0, [pc, #104]	; (800e77c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800e714:	f003 fee6 	bl	80124e4 <iprintf>
 800e718:	4828      	ldr	r0, [pc, #160]	; (800e7bc <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800e71a:	f003 ff51 	bl	80125c0 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800e71e:	2300      	movs	r3, #0
 800e720:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800e722:	7bfb      	ldrb	r3, [r7, #15]
 800e724:	f043 0301 	orr.w	r3, r3, #1
 800e728:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800e72a:	7bfb      	ldrb	r3, [r7, #15]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d069      	beq.n	800e804 <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800e730:	4b23      	ldr	r3, [pc, #140]	; (800e7c0 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800e732:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800e734:	1dba      	adds	r2, r7, #6
 800e736:	7bf8      	ldrb	r0, [r7, #15]
 800e738:	1cbb      	adds	r3, r7, #2
 800e73a:	9301      	str	r3, [sp, #4]
 800e73c:	1d3b      	adds	r3, r7, #4
 800e73e:	9300      	str	r3, [sp, #0]
 800e740:	4613      	mov	r3, r2
 800e742:	2205      	movs	r2, #5
 800e744:	2100      	movs	r1, #0
 800e746:	f7fc ffec 	bl	800b722 <aci_gap_init>
 800e74a:	4603      	mov	r3, r0
 800e74c:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800e74e:	7dfb      	ldrb	r3, [r7, #23]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d039      	beq.n	800e7c8 <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800e754:	4807      	ldr	r0, [pc, #28]	; (800e774 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800e756:	f7fe fdbb 	bl	800d2d0 <DbgTraceGetFileName>
 800e75a:	4601      	mov	r1, r0
 800e75c:	f240 3377 	movw	r3, #887	; 0x377
 800e760:	4a05      	ldr	r2, [pc, #20]	; (800e778 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800e762:	4806      	ldr	r0, [pc, #24]	; (800e77c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800e764:	f003 febe 	bl	80124e4 <iprintf>
 800e768:	7dfb      	ldrb	r3, [r7, #23]
 800e76a:	4619      	mov	r1, r3
 800e76c:	4815      	ldr	r0, [pc, #84]	; (800e7c4 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800e76e:	f003 feb9 	bl	80124e4 <iprintf>
 800e772:	e036      	b.n	800e7e2 <Ble_Hci_Gap_Gatt_Init+0x30a>
 800e774:	08016614 	.word	0x08016614
 800e778:	080183a4 	.word	0x080183a4
 800e77c:	08016630 	.word	0x08016630
 800e780:	08016b58 	.word	0x08016b58
 800e784:	08016b84 	.word	0x08016b84
 800e788:	08016bb4 	.word	0x08016bb4
 800e78c:	08016bd4 	.word	0x08016bd4
 800e790:	08016c30 	.word	0x08016c30
 800e794:	08016c7c 	.word	0x08016c7c
 800e798:	0801835c 	.word	0x0801835c
 800e79c:	08016cb8 	.word	0x08016cb8
 800e7a0:	08016d10 	.word	0x08016d10
 800e7a4:	0801836c 	.word	0x0801836c
 800e7a8:	08016d58 	.word	0x08016d58
 800e7ac:	08016db0 	.word	0x08016db0
 800e7b0:	08016df8 	.word	0x08016df8
 800e7b4:	08016e38 	.word	0x08016e38
 800e7b8:	08016e68 	.word	0x08016e68
 800e7bc:	08016e9c 	.word	0x08016e9c
 800e7c0:	08016ec0 	.word	0x08016ec0
 800e7c4:	08016ec8 	.word	0x08016ec8
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800e7c8:	487e      	ldr	r0, [pc, #504]	; (800e9c4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800e7ca:	f7fe fd81 	bl	800d2d0 <DbgTraceGetFileName>
 800e7ce:	4601      	mov	r1, r0
 800e7d0:	f240 337b 	movw	r3, #891	; 0x37b
 800e7d4:	4a7c      	ldr	r2, [pc, #496]	; (800e9c8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800e7d6:	487d      	ldr	r0, [pc, #500]	; (800e9cc <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800e7d8:	f003 fe84 	bl	80124e4 <iprintf>
 800e7dc:	487c      	ldr	r0, [pc, #496]	; (800e9d0 <Ble_Hci_Gap_Gatt_Init+0x4f8>)
 800e7de:	f003 feef 	bl	80125c0 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800e7e2:	88fc      	ldrh	r4, [r7, #6]
 800e7e4:	88bd      	ldrh	r5, [r7, #4]
 800e7e6:	68b8      	ldr	r0, [r7, #8]
 800e7e8:	f7f1 fd1a 	bl	8000220 <strlen>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	b2da      	uxtb	r2, r3
 800e7f0:	68bb      	ldr	r3, [r7, #8]
 800e7f2:	9300      	str	r3, [sp, #0]
 800e7f4:	4613      	mov	r3, r2
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	4629      	mov	r1, r5
 800e7fa:	4620      	mov	r0, r4
 800e7fc:	f7fd fb3e 	bl	800be7c <aci_gatt_update_char_value>
 800e800:	4603      	mov	r3, r0
 800e802:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800e804:	88f8      	ldrh	r0, [r7, #6]
 800e806:	8879      	ldrh	r1, [r7, #2]
 800e808:	463b      	mov	r3, r7
 800e80a:	9300      	str	r3, [sp, #0]
 800e80c:	2302      	movs	r3, #2
 800e80e:	2200      	movs	r2, #0
 800e810:	f7fd fb34 	bl	800be7c <aci_gatt_update_char_value>
 800e814:	4603      	mov	r3, r0
 800e816:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800e818:	2202      	movs	r2, #2
 800e81a:	2102      	movs	r1, #2
 800e81c:	2000      	movs	r0, #0
 800e81e:	f7fd fd8f 	bl	800c340 <hci_le_set_default_phy>
 800e822:	4603      	mov	r3, r0
 800e824:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800e826:	7dfb      	ldrb	r3, [r7, #23]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d00f      	beq.n	800e84c <Ble_Hci_Gap_Gatt_Init+0x374>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800e82c:	4865      	ldr	r0, [pc, #404]	; (800e9c4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800e82e:	f7fe fd4f 	bl	800d2d0 <DbgTraceGetFileName>
 800e832:	4601      	mov	r1, r0
 800e834:	f240 339d 	movw	r3, #925	; 0x39d
 800e838:	4a63      	ldr	r2, [pc, #396]	; (800e9c8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800e83a:	4864      	ldr	r0, [pc, #400]	; (800e9cc <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800e83c:	f003 fe52 	bl	80124e4 <iprintf>
 800e840:	7dfb      	ldrb	r3, [r7, #23]
 800e842:	4619      	mov	r1, r3
 800e844:	4863      	ldr	r0, [pc, #396]	; (800e9d4 <Ble_Hci_Gap_Gatt_Init+0x4fc>)
 800e846:	f003 fe4d 	bl	80124e4 <iprintf>
 800e84a:	e00c      	b.n	800e866 <Ble_Hci_Gap_Gatt_Init+0x38e>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800e84c:	485d      	ldr	r0, [pc, #372]	; (800e9c4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800e84e:	f7fe fd3f 	bl	800d2d0 <DbgTraceGetFileName>
 800e852:	4601      	mov	r1, r0
 800e854:	f240 33a1 	movw	r3, #929	; 0x3a1
 800e858:	4a5b      	ldr	r2, [pc, #364]	; (800e9c8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800e85a:	485c      	ldr	r0, [pc, #368]	; (800e9cc <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800e85c:	f003 fe42 	bl	80124e4 <iprintf>
 800e860:	485d      	ldr	r0, [pc, #372]	; (800e9d8 <Ble_Hci_Gap_Gatt_Init+0x500>)
 800e862:	f003 fead 	bl	80125c0 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800e866:	4b5d      	ldr	r3, [pc, #372]	; (800e9dc <Ble_Hci_Gap_Gatt_Init+0x504>)
 800e868:	2200      	movs	r2, #0
 800e86a:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800e86c:	4b5b      	ldr	r3, [pc, #364]	; (800e9dc <Ble_Hci_Gap_Gatt_Init+0x504>)
 800e86e:	781b      	ldrb	r3, [r3, #0]
 800e870:	4618      	mov	r0, r3
 800e872:	f7fc fdd7 	bl	800b424 <aci_gap_set_io_capability>
 800e876:	4603      	mov	r3, r0
 800e878:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800e87a:	7dfb      	ldrb	r3, [r7, #23]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d00f      	beq.n	800e8a0 <Ble_Hci_Gap_Gatt_Init+0x3c8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800e880:	4850      	ldr	r0, [pc, #320]	; (800e9c4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800e882:	f7fe fd25 	bl	800d2d0 <DbgTraceGetFileName>
 800e886:	4601      	mov	r1, r0
 800e888:	f240 33ab 	movw	r3, #939	; 0x3ab
 800e88c:	4a4e      	ldr	r2, [pc, #312]	; (800e9c8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800e88e:	484f      	ldr	r0, [pc, #316]	; (800e9cc <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800e890:	f003 fe28 	bl	80124e4 <iprintf>
 800e894:	7dfb      	ldrb	r3, [r7, #23]
 800e896:	4619      	mov	r1, r3
 800e898:	4851      	ldr	r0, [pc, #324]	; (800e9e0 <Ble_Hci_Gap_Gatt_Init+0x508>)
 800e89a:	f003 fe23 	bl	80124e4 <iprintf>
 800e89e:	e00c      	b.n	800e8ba <Ble_Hci_Gap_Gatt_Init+0x3e2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800e8a0:	4848      	ldr	r0, [pc, #288]	; (800e9c4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800e8a2:	f7fe fd15 	bl	800d2d0 <DbgTraceGetFileName>
 800e8a6:	4601      	mov	r1, r0
 800e8a8:	f240 33af 	movw	r3, #943	; 0x3af
 800e8ac:	4a46      	ldr	r2, [pc, #280]	; (800e9c8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800e8ae:	4847      	ldr	r0, [pc, #284]	; (800e9cc <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800e8b0:	f003 fe18 	bl	80124e4 <iprintf>
 800e8b4:	484b      	ldr	r0, [pc, #300]	; (800e9e4 <Ble_Hci_Gap_Gatt_Init+0x50c>)
 800e8b6:	f003 fe83 	bl	80125c0 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800e8ba:	4b48      	ldr	r3, [pc, #288]	; (800e9dc <Ble_Hci_Gap_Gatt_Init+0x504>)
 800e8bc:	2201      	movs	r2, #1
 800e8be:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800e8c0:	4b46      	ldr	r3, [pc, #280]	; (800e9dc <Ble_Hci_Gap_Gatt_Init+0x504>)
 800e8c2:	2208      	movs	r2, #8
 800e8c4:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800e8c6:	4b45      	ldr	r3, [pc, #276]	; (800e9dc <Ble_Hci_Gap_Gatt_Init+0x504>)
 800e8c8:	2210      	movs	r2, #16
 800e8ca:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800e8cc:	4b43      	ldr	r3, [pc, #268]	; (800e9dc <Ble_Hci_Gap_Gatt_Init+0x504>)
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800e8d2:	4b42      	ldr	r3, [pc, #264]	; (800e9dc <Ble_Hci_Gap_Gatt_Init+0x504>)
 800e8d4:	4a44      	ldr	r2, [pc, #272]	; (800e9e8 <Ble_Hci_Gap_Gatt_Init+0x510>)
 800e8d6:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800e8d8:	4b40      	ldr	r3, [pc, #256]	; (800e9dc <Ble_Hci_Gap_Gatt_Init+0x504>)
 800e8da:	2201      	movs	r2, #1
 800e8dc:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800e8de:	4b3f      	ldr	r3, [pc, #252]	; (800e9dc <Ble_Hci_Gap_Gatt_Init+0x504>)
 800e8e0:	789c      	ldrb	r4, [r3, #2]
 800e8e2:	4b3e      	ldr	r3, [pc, #248]	; (800e9dc <Ble_Hci_Gap_Gatt_Init+0x504>)
 800e8e4:	785d      	ldrb	r5, [r3, #1]
 800e8e6:	4b3d      	ldr	r3, [pc, #244]	; (800e9dc <Ble_Hci_Gap_Gatt_Init+0x504>)
 800e8e8:	791b      	ldrb	r3, [r3, #4]
 800e8ea:	4a3c      	ldr	r2, [pc, #240]	; (800e9dc <Ble_Hci_Gap_Gatt_Init+0x504>)
 800e8ec:	7952      	ldrb	r2, [r2, #5]
 800e8ee:	493b      	ldr	r1, [pc, #236]	; (800e9dc <Ble_Hci_Gap_Gatt_Init+0x504>)
 800e8f0:	78c9      	ldrb	r1, [r1, #3]
 800e8f2:	483a      	ldr	r0, [pc, #232]	; (800e9dc <Ble_Hci_Gap_Gatt_Init+0x504>)
 800e8f4:	6880      	ldr	r0, [r0, #8]
 800e8f6:	2600      	movs	r6, #0
 800e8f8:	9604      	str	r6, [sp, #16]
 800e8fa:	9003      	str	r0, [sp, #12]
 800e8fc:	9102      	str	r1, [sp, #8]
 800e8fe:	9201      	str	r2, [sp, #4]
 800e900:	9300      	str	r3, [sp, #0]
 800e902:	2300      	movs	r3, #0
 800e904:	2201      	movs	r2, #1
 800e906:	4629      	mov	r1, r5
 800e908:	4620      	mov	r0, r4
 800e90a:	f7fc fddf 	bl	800b4cc <aci_gap_set_authentication_requirement>
 800e90e:	4603      	mov	r3, r0
 800e910:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800e912:	7dfb      	ldrb	r3, [r7, #23]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d00f      	beq.n	800e938 <Ble_Hci_Gap_Gatt_Init+0x460>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800e918:	482a      	ldr	r0, [pc, #168]	; (800e9c4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800e91a:	f7fe fcd9 	bl	800d2d0 <DbgTraceGetFileName>
 800e91e:	4601      	mov	r1, r0
 800e920:	f240 33ca 	movw	r3, #970	; 0x3ca
 800e924:	4a28      	ldr	r2, [pc, #160]	; (800e9c8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800e926:	4829      	ldr	r0, [pc, #164]	; (800e9cc <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800e928:	f003 fddc 	bl	80124e4 <iprintf>
 800e92c:	7dfb      	ldrb	r3, [r7, #23]
 800e92e:	4619      	mov	r1, r3
 800e930:	482e      	ldr	r0, [pc, #184]	; (800e9ec <Ble_Hci_Gap_Gatt_Init+0x514>)
 800e932:	f003 fdd7 	bl	80124e4 <iprintf>
 800e936:	e00c      	b.n	800e952 <Ble_Hci_Gap_Gatt_Init+0x47a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800e938:	4822      	ldr	r0, [pc, #136]	; (800e9c4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800e93a:	f7fe fcc9 	bl	800d2d0 <DbgTraceGetFileName>
 800e93e:	4601      	mov	r1, r0
 800e940:	f240 33ce 	movw	r3, #974	; 0x3ce
 800e944:	4a20      	ldr	r2, [pc, #128]	; (800e9c8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800e946:	4821      	ldr	r0, [pc, #132]	; (800e9cc <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800e948:	f003 fdcc 	bl	80124e4 <iprintf>
 800e94c:	4828      	ldr	r0, [pc, #160]	; (800e9f0 <Ble_Hci_Gap_Gatt_Init+0x518>)
 800e94e:	f003 fe37 	bl	80125c0 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800e952:	4b22      	ldr	r3, [pc, #136]	; (800e9dc <Ble_Hci_Gap_Gatt_Init+0x504>)
 800e954:	789b      	ldrb	r3, [r3, #2]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d023      	beq.n	800e9a2 <Ble_Hci_Gap_Gatt_Init+0x4ca>
  {
    ret = aci_gap_configure_whitelist();
 800e95a:	f7fd f801 	bl	800b960 <aci_gap_configure_filter_accept_list>
 800e95e:	4603      	mov	r3, r0
 800e960:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800e962:	7dfb      	ldrb	r3, [r7, #23]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d00f      	beq.n	800e988 <Ble_Hci_Gap_Gatt_Init+0x4b0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800e968:	4816      	ldr	r0, [pc, #88]	; (800e9c4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800e96a:	f7fe fcb1 	bl	800d2d0 <DbgTraceGetFileName>
 800e96e:	4601      	mov	r1, r0
 800e970:	f240 33d9 	movw	r3, #985	; 0x3d9
 800e974:	4a14      	ldr	r2, [pc, #80]	; (800e9c8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800e976:	4815      	ldr	r0, [pc, #84]	; (800e9cc <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800e978:	f003 fdb4 	bl	80124e4 <iprintf>
 800e97c:	7dfb      	ldrb	r3, [r7, #23]
 800e97e:	4619      	mov	r1, r3
 800e980:	481c      	ldr	r0, [pc, #112]	; (800e9f4 <Ble_Hci_Gap_Gatt_Init+0x51c>)
 800e982:	f003 fdaf 	bl	80124e4 <iprintf>
 800e986:	e00c      	b.n	800e9a2 <Ble_Hci_Gap_Gatt_Init+0x4ca>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800e988:	480e      	ldr	r0, [pc, #56]	; (800e9c4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800e98a:	f7fe fca1 	bl	800d2d0 <DbgTraceGetFileName>
 800e98e:	4601      	mov	r1, r0
 800e990:	f240 33dd 	movw	r3, #989	; 0x3dd
 800e994:	4a0c      	ldr	r2, [pc, #48]	; (800e9c8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800e996:	480d      	ldr	r0, [pc, #52]	; (800e9cc <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800e998:	f003 fda4 	bl	80124e4 <iprintf>
 800e99c:	4816      	ldr	r0, [pc, #88]	; (800e9f8 <Ble_Hci_Gap_Gatt_Init+0x520>)
 800e99e:	f003 fe0f 	bl	80125c0 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800e9a2:	4808      	ldr	r0, [pc, #32]	; (800e9c4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800e9a4:	f7fe fc94 	bl	800d2d0 <DbgTraceGetFileName>
 800e9a8:	4601      	mov	r1, r0
 800e9aa:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800e9ae:	4a06      	ldr	r2, [pc, #24]	; (800e9c8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800e9b0:	4806      	ldr	r0, [pc, #24]	; (800e9cc <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800e9b2:	f003 fd97 	bl	80124e4 <iprintf>
 800e9b6:	4811      	ldr	r0, [pc, #68]	; (800e9fc <Ble_Hci_Gap_Gatt_Init+0x524>)
 800e9b8:	f003 fd94 	bl	80124e4 <iprintf>
}
 800e9bc:	bf00      	nop
 800e9be:	371c      	adds	r7, #28
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9c4:	08016614 	.word	0x08016614
 800e9c8:	080183a4 	.word	0x080183a4
 800e9cc:	08016630 	.word	0x08016630
 800e9d0:	08016ef8 	.word	0x08016ef8
 800e9d4:	08016f18 	.word	0x08016f18
 800e9d8:	08016f54 	.word	0x08016f54
 800e9dc:	20000620 	.word	0x20000620
 800e9e0:	08016f80 	.word	0x08016f80
 800e9e4:	08016fc0 	.word	0x08016fc0
 800e9e8:	0001b207 	.word	0x0001b207
 800e9ec:	08016ff0 	.word	0x08016ff0
 800e9f0:	0801703c 	.word	0x0801703c
 800e9f4:	08017078 	.word	0x08017078
 800e9f8:	080170b8 	.word	0x080170b8
 800e9fc:	080170e8 	.word	0x080170e8

0800ea00 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b08c      	sub	sp, #48	; 0x30
 800ea04:	af08      	add	r7, sp, #32
 800ea06:	4603      	mov	r3, r0
 800ea08:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ea0a:	2392      	movs	r3, #146	; 0x92
 800ea0c:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800ea0e:	4a32      	ldr	r2, [pc, #200]	; (800ead8 <Adv_Request+0xd8>)
 800ea10:	79fb      	ldrb	r3, [r7, #7]
 800ea12:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800ea16:	2300      	movs	r3, #0
 800ea18:	9306      	str	r3, [sp, #24]
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	9305      	str	r3, [sp, #20]
 800ea1e:	2300      	movs	r3, #0
 800ea20:	9304      	str	r3, [sp, #16]
 800ea22:	2300      	movs	r3, #0
 800ea24:	9303      	str	r3, [sp, #12]
 800ea26:	2300      	movs	r3, #0
 800ea28:	9302      	str	r3, [sp, #8]
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	9301      	str	r3, [sp, #4]
 800ea2e:	2300      	movs	r3, #0
 800ea30:	9300      	str	r3, [sp, #0]
 800ea32:	2300      	movs	r3, #0
 800ea34:	22a0      	movs	r2, #160	; 0xa0
 800ea36:	2180      	movs	r1, #128	; 0x80
 800ea38:	2000      	movs	r0, #0
 800ea3a:	f7fc fbf9 	bl	800b230 <aci_gap_set_discoverable>
 800ea3e:	4603      	mov	r3, r0
 800ea40:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800ea42:	7bfb      	ldrb	r3, [r7, #15]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d00f      	beq.n	800ea68 <Adv_Request+0x68>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800ea48:	4824      	ldr	r0, [pc, #144]	; (800eadc <Adv_Request+0xdc>)
 800ea4a:	f7fe fc41 	bl	800d2d0 <DbgTraceGetFileName>
 800ea4e:	4601      	mov	r1, r0
 800ea50:	f240 33f6 	movw	r3, #1014	; 0x3f6
 800ea54:	4a22      	ldr	r2, [pc, #136]	; (800eae0 <Adv_Request+0xe0>)
 800ea56:	4823      	ldr	r0, [pc, #140]	; (800eae4 <Adv_Request+0xe4>)
 800ea58:	f003 fd44 	bl	80124e4 <iprintf>
 800ea5c:	7bfb      	ldrb	r3, [r7, #15]
 800ea5e:	4619      	mov	r1, r3
 800ea60:	4821      	ldr	r0, [pc, #132]	; (800eae8 <Adv_Request+0xe8>)
 800ea62:	f003 fd3f 	bl	80124e4 <iprintf>
 800ea66:	e00c      	b.n	800ea82 <Adv_Request+0x82>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800ea68:	481c      	ldr	r0, [pc, #112]	; (800eadc <Adv_Request+0xdc>)
 800ea6a:	f7fe fc31 	bl	800d2d0 <DbgTraceGetFileName>
 800ea6e:	4601      	mov	r1, r0
 800ea70:	f240 33fa 	movw	r3, #1018	; 0x3fa
 800ea74:	4a1a      	ldr	r2, [pc, #104]	; (800eae0 <Adv_Request+0xe0>)
 800ea76:	481b      	ldr	r0, [pc, #108]	; (800eae4 <Adv_Request+0xe4>)
 800ea78:	f003 fd34 	bl	80124e4 <iprintf>
 800ea7c:	481b      	ldr	r0, [pc, #108]	; (800eaec <Adv_Request+0xec>)
 800ea7e:	f003 fd9f 	bl	80125c0 <puts>
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800ea82:	491b      	ldr	r1, [pc, #108]	; (800eaf0 <Adv_Request+0xf0>)
 800ea84:	2015      	movs	r0, #21
 800ea86:	f7fc fef9 	bl	800b87c <aci_gap_update_adv_data>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 800ea8e:	7bfb      	ldrb	r3, [r7, #15]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d00f      	beq.n	800eab4 <Adv_Request+0xb4>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800ea94:	4811      	ldr	r0, [pc, #68]	; (800eadc <Adv_Request+0xdc>)
 800ea96:	f7fe fc1b 	bl	800d2d0 <DbgTraceGetFileName>
 800ea9a:	4601      	mov	r1, r0
 800ea9c:	f240 4301 	movw	r3, #1025	; 0x401
 800eaa0:	4a0f      	ldr	r2, [pc, #60]	; (800eae0 <Adv_Request+0xe0>)
 800eaa2:	4810      	ldr	r0, [pc, #64]	; (800eae4 <Adv_Request+0xe4>)
 800eaa4:	f003 fd1e 	bl	80124e4 <iprintf>
 800eaa8:	7bfb      	ldrb	r3, [r7, #15]
 800eaaa:	4619      	mov	r1, r3
 800eaac:	4811      	ldr	r0, [pc, #68]	; (800eaf4 <Adv_Request+0xf4>)
 800eaae:	f003 fd19 	bl	80124e4 <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800eab2:	e00d      	b.n	800ead0 <Adv_Request+0xd0>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800eab4:	4809      	ldr	r0, [pc, #36]	; (800eadc <Adv_Request+0xdc>)
 800eab6:	f7fe fc0b 	bl	800d2d0 <DbgTraceGetFileName>
 800eaba:	4601      	mov	r1, r0
 800eabc:	f240 4305 	movw	r3, #1029	; 0x405
 800eac0:	4a07      	ldr	r2, [pc, #28]	; (800eae0 <Adv_Request+0xe0>)
 800eac2:	4808      	ldr	r0, [pc, #32]	; (800eae4 <Adv_Request+0xe4>)
 800eac4:	f003 fd0e 	bl	80124e4 <iprintf>
 800eac8:	480b      	ldr	r0, [pc, #44]	; (800eaf8 <Adv_Request+0xf8>)
 800eaca:	f003 fd0b 	bl	80124e4 <iprintf>
  return;
 800eace:	bf00      	nop
}
 800ead0:	3710      	adds	r7, #16
 800ead2:	46bd      	mov	sp, r7
 800ead4:	bd80      	pop	{r7, pc}
 800ead6:	bf00      	nop
 800ead8:	20000620 	.word	0x20000620
 800eadc:	08016614 	.word	0x08016614
 800eae0:	080183bc 	.word	0x080183bc
 800eae4:	08016630 	.word	0x08016630
 800eae8:	08017114 	.word	0x08017114
 800eaec:	0801714c 	.word	0x0801714c
 800eaf0:	20000040 	.word	0x20000040
 800eaf4:	08017174 	.word	0x08017174
 800eaf8:	080171a8 	.word	0x080171a8

0800eafc <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b086      	sub	sp, #24
 800eb00:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800eb02:	f7ff f963 	bl	800ddcc <LL_FLASH_GetUDN>
 800eb06:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800eb08:	693b      	ldr	r3, [r7, #16]
 800eb0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb0e:	d023      	beq.n	800eb58 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800eb10:	f7ff f974 	bl	800ddfc <LL_FLASH_GetSTCompanyID>
 800eb14:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800eb16:	f7ff f965 	bl	800dde4 <LL_FLASH_GetDeviceID>
 800eb1a:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800eb1c:	693b      	ldr	r3, [r7, #16]
 800eb1e:	b2da      	uxtb	r2, r3
 800eb20:	4b16      	ldr	r3, [pc, #88]	; (800eb7c <BleGetBdAddress+0x80>)
 800eb22:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800eb24:	693b      	ldr	r3, [r7, #16]
 800eb26:	0a1b      	lsrs	r3, r3, #8
 800eb28:	b2da      	uxtb	r2, r3
 800eb2a:	4b14      	ldr	r3, [pc, #80]	; (800eb7c <BleGetBdAddress+0x80>)
 800eb2c:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	b2da      	uxtb	r2, r3
 800eb32:	4b12      	ldr	r3, [pc, #72]	; (800eb7c <BleGetBdAddress+0x80>)
 800eb34:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	b2da      	uxtb	r2, r3
 800eb3a:	4b10      	ldr	r3, [pc, #64]	; (800eb7c <BleGetBdAddress+0x80>)
 800eb3c:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800eb3e:	68bb      	ldr	r3, [r7, #8]
 800eb40:	0a1b      	lsrs	r3, r3, #8
 800eb42:	b2da      	uxtb	r2, r3
 800eb44:	4b0d      	ldr	r3, [pc, #52]	; (800eb7c <BleGetBdAddress+0x80>)
 800eb46:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	0c1b      	lsrs	r3, r3, #16
 800eb4c:	b2da      	uxtb	r2, r3
 800eb4e:	4b0b      	ldr	r3, [pc, #44]	; (800eb7c <BleGetBdAddress+0x80>)
 800eb50:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800eb52:	4b0a      	ldr	r3, [pc, #40]	; (800eb7c <BleGetBdAddress+0x80>)
 800eb54:	617b      	str	r3, [r7, #20]
 800eb56:	e00b      	b.n	800eb70 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800eb58:	2000      	movs	r0, #0
 800eb5a:	f7fe fc81 	bl	800d460 <OTP_Read>
 800eb5e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d002      	beq.n	800eb6c <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	617b      	str	r3, [r7, #20]
 800eb6a:	e001      	b.n	800eb70 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800eb6c:	4b04      	ldr	r3, [pc, #16]	; (800eb80 <BleGetBdAddress+0x84>)
 800eb6e:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800eb70:	697b      	ldr	r3, [r7, #20]
}
 800eb72:	4618      	mov	r0, r3
 800eb74:	3718      	adds	r7, #24
 800eb76:	46bd      	mov	sp, r7
 800eb78:	bd80      	pop	{r7, pc}
 800eb7a:	bf00      	nop
 800eb7c:	20000618 	.word	0x20000618
 800eb80:	08018354 	.word	0x08018354

0800eb84 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b082      	sub	sp, #8
 800eb88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800eb8a:	4b1f      	ldr	r3, [pc, #124]	; (800ec08 <Adv_Cancel+0x84>)
 800eb8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eb90:	2b05      	cmp	r3, #5
 800eb92:	d035      	beq.n	800ec00 <Adv_Cancel+0x7c>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800eb94:	2392      	movs	r3, #146	; 0x92
 800eb96:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800eb98:	f7fc fb26 	bl	800b1e8 <aci_gap_set_non_discoverable>
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800eba0:	4b19      	ldr	r3, [pc, #100]	; (800ec08 <Adv_Cancel+0x84>)
 800eba2:	2200      	movs	r2, #0
 800eba4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (ret != BLE_STATUS_SUCCESS)
 800eba8:	79fb      	ldrb	r3, [r7, #7]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d00d      	beq.n	800ebca <Adv_Cancel+0x46>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800ebae:	4817      	ldr	r0, [pc, #92]	; (800ec0c <Adv_Cancel+0x88>)
 800ebb0:	f7fe fb8e 	bl	800d2d0 <DbgTraceGetFileName>
 800ebb4:	4601      	mov	r1, r0
 800ebb6:	f240 4353 	movw	r3, #1107	; 0x453
 800ebba:	4a15      	ldr	r2, [pc, #84]	; (800ec10 <Adv_Cancel+0x8c>)
 800ebbc:	4815      	ldr	r0, [pc, #84]	; (800ec14 <Adv_Cancel+0x90>)
 800ebbe:	f003 fc91 	bl	80124e4 <iprintf>
 800ebc2:	4815      	ldr	r0, [pc, #84]	; (800ec18 <Adv_Cancel+0x94>)
 800ebc4:	f003 fc8e 	bl	80124e4 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800ebc8:	e01a      	b.n	800ec00 <Adv_Cancel+0x7c>
      APP_DBG_MSG("  \r\n\r");
 800ebca:	4810      	ldr	r0, [pc, #64]	; (800ec0c <Adv_Cancel+0x88>)
 800ebcc:	f7fe fb80 	bl	800d2d0 <DbgTraceGetFileName>
 800ebd0:	4601      	mov	r1, r0
 800ebd2:	f240 4357 	movw	r3, #1111	; 0x457
 800ebd6:	4a0e      	ldr	r2, [pc, #56]	; (800ec10 <Adv_Cancel+0x8c>)
 800ebd8:	480e      	ldr	r0, [pc, #56]	; (800ec14 <Adv_Cancel+0x90>)
 800ebda:	f003 fc83 	bl	80124e4 <iprintf>
 800ebde:	480f      	ldr	r0, [pc, #60]	; (800ec1c <Adv_Cancel+0x98>)
 800ebe0:	f003 fc80 	bl	80124e4 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800ebe4:	4809      	ldr	r0, [pc, #36]	; (800ec0c <Adv_Cancel+0x88>)
 800ebe6:	f7fe fb73 	bl	800d2d0 <DbgTraceGetFileName>
 800ebea:	4601      	mov	r1, r0
 800ebec:	f44f 638b 	mov.w	r3, #1112	; 0x458
 800ebf0:	4a07      	ldr	r2, [pc, #28]	; (800ec10 <Adv_Cancel+0x8c>)
 800ebf2:	4808      	ldr	r0, [pc, #32]	; (800ec14 <Adv_Cancel+0x90>)
 800ebf4:	f003 fc76 	bl	80124e4 <iprintf>
 800ebf8:	4809      	ldr	r0, [pc, #36]	; (800ec20 <Adv_Cancel+0x9c>)
 800ebfa:	f003 fc73 	bl	80124e4 <iprintf>
  return;
 800ebfe:	bf00      	nop
 800ec00:	bf00      	nop
}
 800ec02:	3708      	adds	r7, #8
 800ec04:	46bd      	mov	sp, r7
 800ec06:	bd80      	pop	{r7, pc}
 800ec08:	20000620 	.word	0x20000620
 800ec0c:	08016614 	.word	0x08016614
 800ec10:	080183c8 	.word	0x080183c8
 800ec14:	08016630 	.word	0x08016630
 800ec18:	080171d0 	.word	0x080171d0
 800ec1c:	080171f4 	.word	0x080171f4
 800ec20:	080171fc 	.word	0x080171fc

0800ec24 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b082      	sub	sp, #8
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800ec2c:	2100      	movs	r1, #0
 800ec2e:	2002      	movs	r0, #2
 800ec30:	f002 fc12 	bl	8011458 <UTIL_SEQ_SetTask>

  return;
 800ec34:	bf00      	nop
}
 800ec36:	3708      	adds	r7, #8
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	bd80      	pop	{r7, pc}

0800ec3c <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b082      	sub	sp, #8
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800ec44:	2001      	movs	r0, #1
 800ec46:	f002 fc73 	bl	8011530 <UTIL_SEQ_SetEvt>

  return;
 800ec4a:	bf00      	nop
}
 800ec4c:	3708      	adds	r7, #8
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bd80      	pop	{r7, pc}

0800ec52 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800ec52:	b580      	push	{r7, lr}
 800ec54:	b082      	sub	sp, #8
 800ec56:	af00      	add	r7, sp, #0
 800ec58:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800ec5a:	2001      	movs	r0, #1
 800ec5c:	f002 fc88 	bl	8011570 <UTIL_SEQ_WaitEvt>

  return;
 800ec60:	bf00      	nop
}
 800ec62:	3708      	adds	r7, #8
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}

0800ec68 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b084      	sub	sp, #16
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	685b      	ldr	r3, [r3, #4]
 800ec78:	3308      	adds	r3, #8
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	f7fd fcc6 	bl	800c60c <SVCCTL_UserEvtRx>
 800ec80:	4603      	mov	r3, r0
 800ec82:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800ec84:	7afb      	ldrb	r3, [r7, #11]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d003      	beq.n	800ec92 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	2201      	movs	r2, #1
 800ec8e:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800ec90:	e003      	b.n	800ec9a <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	2200      	movs	r2, #0
 800ec96:	701a      	strb	r2, [r3, #0]
  return;
 800ec98:	bf00      	nop
}
 800ec9a:	3710      	adds	r7, #16
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	bd80      	pop	{r7, pc}

0800eca0 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b084      	sub	sp, #16
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	4603      	mov	r3, r0
 800eca8:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800ecaa:	79fb      	ldrb	r3, [r7, #7]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d002      	beq.n	800ecb6 <BLE_StatusNot+0x16>
 800ecb0:	2b01      	cmp	r3, #1
 800ecb2:	d006      	beq.n	800ecc2 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800ecb4:	e00b      	b.n	800ecce <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800ecb6:	233f      	movs	r3, #63	; 0x3f
 800ecb8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800ecba:	68f8      	ldr	r0, [r7, #12]
 800ecbc:	f002 fbf8 	bl	80114b0 <UTIL_SEQ_PauseTask>
      break;
 800ecc0:	e005      	b.n	800ecce <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800ecc2:	233f      	movs	r3, #63	; 0x3f
 800ecc4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800ecc6:	68f8      	ldr	r0, [r7, #12]
 800ecc8:	f002 fc12 	bl	80114f0 <UTIL_SEQ_ResumeTask>
      break;
 800eccc:	bf00      	nop
  }

  return;
 800ecce:	bf00      	nop
}
 800ecd0:	3710      	adds	r7, #16
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bd80      	pop	{r7, pc}
	...

0800ecd8 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b082      	sub	sp, #8
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	781b      	ldrb	r3, [r3, #0]
 800ece4:	2b13      	cmp	r3, #19
 800ece6:	d84d      	bhi.n	800ed84 <Custom_STM_App_Notification+0xac>
 800ece8:	a201      	add	r2, pc, #4	; (adr r2, 800ecf0 <Custom_STM_App_Notification+0x18>)
 800ecea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecee:	bf00      	nop
 800ecf0:	0800ed85 	.word	0x0800ed85
 800ecf4:	0800ed41 	.word	0x0800ed41
 800ecf8:	0800ed57 	.word	0x0800ed57
 800ecfc:	0800ed85 	.word	0x0800ed85
 800ed00:	0800ed85 	.word	0x0800ed85
 800ed04:	0800ed85 	.word	0x0800ed85
 800ed08:	0800ed85 	.word	0x0800ed85
 800ed0c:	0800ed85 	.word	0x0800ed85
 800ed10:	0800ed85 	.word	0x0800ed85
 800ed14:	0800ed63 	.word	0x0800ed63
 800ed18:	0800ed79 	.word	0x0800ed79
 800ed1c:	0800ed85 	.word	0x0800ed85
 800ed20:	0800ed85 	.word	0x0800ed85
 800ed24:	0800ed85 	.word	0x0800ed85
 800ed28:	0800ed85 	.word	0x0800ed85
 800ed2c:	0800ed85 	.word	0x0800ed85
 800ed30:	0800ed85 	.word	0x0800ed85
 800ed34:	0800ed85 	.word	0x0800ed85
 800ed38:	0800ed85 	.word	0x0800ed85
 800ed3c:	0800ed85 	.word	0x0800ed85
      break;

    /* Temperature */
    case CUSTOM_STM_IR_T_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_IR_T_NOTIFY_ENABLED_EVT */
    	printf("Temp_NOTIFY_ENABLED\n");
 800ed40:	4813      	ldr	r0, [pc, #76]	; (800ed90 <Custom_STM_App_Notification+0xb8>)
 800ed42:	f003 fc3d 	bl	80125c0 <puts>
    	//HW_TS_Stop(UV_TIMER_ID);
    	HW_TS_Start(TEMP_TIMER_ID,TEMP_UPDATE_PERIOD);
 800ed46:	4b13      	ldr	r3, [pc, #76]	; (800ed94 <Custom_STM_App_Notification+0xbc>)
 800ed48:	781b      	ldrb	r3, [r3, #0]
 800ed4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ed4e:	4618      	mov	r0, r3
 800ed50:	f7f4 f95e 	bl	8003010 <HW_TS_Start>
      /* USER CODE END CUSTOM_STM_IR_T_NOTIFY_ENABLED_EVT */
      break;
 800ed54:	e017      	b.n	800ed86 <Custom_STM_App_Notification+0xae>

    case CUSTOM_STM_IR_T_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_IR_T_NOTIFY_DISABLED_EVT */
    	HW_TS_Stop(TEMP_TIMER_ID);
 800ed56:	4b0f      	ldr	r3, [pc, #60]	; (800ed94 <Custom_STM_App_Notification+0xbc>)
 800ed58:	781b      	ldrb	r3, [r3, #0]
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f7f4 f8d4 	bl	8002f08 <HW_TS_Stop>
      /* USER CODE END CUSTOM_STM_IR_T_NOTIFY_DISABLED_EVT */
      break;
 800ed60:	e011      	b.n	800ed86 <Custom_STM_App_Notification+0xae>
      break;

    /* UV_Sensor */
    case CUSTOM_STM_UV_V_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_UV_V_NOTIFY_ENABLED_EVT */
    	printf("UV_NOTIFY_ENABLED\n");
 800ed62:	480d      	ldr	r0, [pc, #52]	; (800ed98 <Custom_STM_App_Notification+0xc0>)
 800ed64:	f003 fc2c 	bl	80125c0 <puts>
    	//HW_TS_Stop(TEMP_TIMER_ID);
    	HW_TS_Start(UV_TIMER_ID,UV_UPDATE_PERIOD);
 800ed68:	4b0c      	ldr	r3, [pc, #48]	; (800ed9c <Custom_STM_App_Notification+0xc4>)
 800ed6a:	781b      	ldrb	r3, [r3, #0]
 800ed6c:	f640 0101 	movw	r1, #2049	; 0x801
 800ed70:	4618      	mov	r0, r3
 800ed72:	f7f4 f94d 	bl	8003010 <HW_TS_Start>
      /* USER CODE END CUSTOM_STM_UV_V_NOTIFY_ENABLED_EVT */
      break;
 800ed76:	e006      	b.n	800ed86 <Custom_STM_App_Notification+0xae>

    case CUSTOM_STM_UV_V_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_UV_V_NOTIFY_DISABLED_EVT */
    	HW_TS_Stop(UV_TIMER_ID);
 800ed78:	4b08      	ldr	r3, [pc, #32]	; (800ed9c <Custom_STM_App_Notification+0xc4>)
 800ed7a:	781b      	ldrb	r3, [r3, #0]
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	f7f4 f8c3 	bl	8002f08 <HW_TS_Stop>
      /* USER CODE END CUSTOM_STM_UV_V_NOTIFY_DISABLED_EVT */
      break;
 800ed82:	e000      	b.n	800ed86 <Custom_STM_App_Notification+0xae>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800ed84:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800ed86:	bf00      	nop
}
 800ed88:	3708      	adds	r7, #8
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	bd80      	pop	{r7, pc}
 800ed8e:	bf00      	nop
 800ed90:	08017218 	.word	0x08017218
 800ed94:	200006d0 	.word	0x200006d0
 800ed98:	0801722c 	.word	0x0801722c
 800ed9c:	2000005a 	.word	0x2000005a

0800eda0 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800eda0:	b480      	push	{r7}
 800eda2:	b083      	sub	sp, #12
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	781b      	ldrb	r3, [r3, #0]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d002      	beq.n	800edb6 <Custom_APP_Notification+0x16>
 800edb0:	2b01      	cmp	r3, #1
 800edb2:	d002      	beq.n	800edba <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800edb4:	e002      	b.n	800edbc <Custom_APP_Notification+0x1c>
      break;
 800edb6:	bf00      	nop
 800edb8:	e000      	b.n	800edbc <Custom_APP_Notification+0x1c>
      break;
 800edba:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800edbc:	bf00      	nop
}
 800edbe:	370c      	adds	r7, #12
 800edc0:	46bd      	mov	sp, r7
 800edc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc6:	4770      	bx	lr

0800edc8 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	TEMP_APP_Init();
 800edcc:	f000 fa84 	bl	800f2d8 <TEMP_APP_Init>
	 UV_APP_Init();
 800edd0:	f000 fad2 	bl	800f378 <UV_APP_Init>
  /* USER CODE END CUSTOM_APP_Init */
  return;
 800edd4:	bf00      	nop
}
 800edd6:	bd80      	pop	{r7, pc}

0800edd8 <Send_Temp_Notification>:
  return;
}

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void Send_Temp_Notification(void)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b082      	sub	sp, #8
 800eddc:	af00      	add	r7, sp, #0
	printf("Temp_sense_call\n");
 800edde:	4859      	ldr	r0, [pc, #356]	; (800ef44 <Send_Temp_Notification+0x16c>)
 800ede0:	f003 fbee 	bl	80125c0 <puts>

	Temperature=(int32_t)(Temp()*100);
 800ede4:	f7f5 f990 	bl	8004108 <Temp>
 800ede8:	ec51 0b10 	vmov	r0, r1, d0
 800edec:	f04f 0200 	mov.w	r2, #0
 800edf0:	4b55      	ldr	r3, [pc, #340]	; (800ef48 <Send_Temp_Notification+0x170>)
 800edf2:	f7f1 fbd9 	bl	80005a8 <__aeabi_dmul>
 800edf6:	4602      	mov	r2, r0
 800edf8:	460b      	mov	r3, r1
 800edfa:	4610      	mov	r0, r2
 800edfc:	4619      	mov	r1, r3
 800edfe:	f7f1 fe83 	bl	8000b08 <__aeabi_d2iz>
 800ee02:	4603      	mov	r3, r0
 800ee04:	4a51      	ldr	r2, [pc, #324]	; (800ef4c <Send_Temp_Notification+0x174>)
 800ee06:	6013      	str	r3, [r2, #0]
	int8_t Temp[4];
	uint8_t light_noti[1];
	STORE_BE_32(Temp,Temperature);
 800ee08:	4b50      	ldr	r3, [pc, #320]	; (800ef4c <Send_Temp_Notification+0x174>)
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	b25b      	sxtb	r3, r3
 800ee0e:	71fb      	strb	r3, [r7, #7]
 800ee10:	4b4e      	ldr	r3, [pc, #312]	; (800ef4c <Send_Temp_Notification+0x174>)
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	121b      	asrs	r3, r3, #8
 800ee16:	b25b      	sxtb	r3, r3
 800ee18:	71bb      	strb	r3, [r7, #6]
 800ee1a:	4b4c      	ldr	r3, [pc, #304]	; (800ef4c <Send_Temp_Notification+0x174>)
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	141b      	asrs	r3, r3, #16
 800ee20:	b25b      	sxtb	r3, r3
 800ee22:	717b      	strb	r3, [r7, #5]
 800ee24:	4b49      	ldr	r3, [pc, #292]	; (800ef4c <Send_Temp_Notification+0x174>)
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	161b      	asrs	r3, r3, #24
 800ee2a:	b25b      	sxtb	r3, r3
 800ee2c:	713b      	strb	r3, [r7, #4]
	Custom_STM_App_Update_Char(CUSTOM_STM_IR_T,Temp);
 800ee2e:	1d3b      	adds	r3, r7, #4
 800ee30:	4619      	mov	r1, r3
 800ee32:	2001      	movs	r0, #1
 800ee34:	f001 f948 	bl	80100c8 <Custom_STM_App_Update_Char>
	if(global_storage_count>75)
 800ee38:	4b45      	ldr	r3, [pc, #276]	; (800ef50 <Send_Temp_Notification+0x178>)
 800ee3a:	781b      	ldrb	r3, [r3, #0]
 800ee3c:	2b4b      	cmp	r3, #75	; 0x4b
 800ee3e:	d906      	bls.n	800ee4e <Send_Temp_Notification+0x76>
	{
		global_storage_count=0;
 800ee40:	4b43      	ldr	r3, [pc, #268]	; (800ef50 <Send_Temp_Notification+0x178>)
 800ee42:	2200      	movs	r2, #0
 800ee44:	701a      	strb	r2, [r3, #0]
		log_data(17);
 800ee46:	2011      	movs	r0, #17
 800ee48:	f000 f88a 	bl	800ef60 <log_data>
 800ee4c:	e005      	b.n	800ee5a <Send_Temp_Notification+0x82>

	}
	else
	{
		global_storage_count+=1;
 800ee4e:	4b40      	ldr	r3, [pc, #256]	; (800ef50 <Send_Temp_Notification+0x178>)
 800ee50:	781b      	ldrb	r3, [r3, #0]
 800ee52:	3301      	adds	r3, #1
 800ee54:	b2da      	uxtb	r2, r3
 800ee56:	4b3e      	ldr	r3, [pc, #248]	; (800ef50 <Send_Temp_Notification+0x178>)
 800ee58:	701a      	strb	r2, [r3, #0]
	}

	if(Temp_lower_limit !=0xffff && Temp_upper_limit !=0xffff)
	{
		if(Temperature>=Temp_lower_limit && Temperature<=Temp_lower_limit)
 800ee5a:	4b3e      	ldr	r3, [pc, #248]	; (800ef54 <Send_Temp_Notification+0x17c>)
 800ee5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee60:	461a      	mov	r2, r3
 800ee62:	4b3a      	ldr	r3, [pc, #232]	; (800ef4c <Send_Temp_Notification+0x174>)
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	429a      	cmp	r2, r3
 800ee68:	dc1b      	bgt.n	800eea2 <Send_Temp_Notification+0xca>
 800ee6a:	4b3a      	ldr	r3, [pc, #232]	; (800ef54 <Send_Temp_Notification+0x17c>)
 800ee6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee70:	461a      	mov	r2, r3
 800ee72:	4b36      	ldr	r3, [pc, #216]	; (800ef4c <Send_Temp_Notification+0x174>)
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	429a      	cmp	r2, r3
 800ee78:	db13      	blt.n	800eea2 <Send_Temp_Notification+0xca>
		{
			////Green_led //send notification
			light_noti[1]=1;
 800ee7a:	2301      	movs	r3, #1
 800ee7c:	707b      	strb	r3, [r7, #1]
			Custom_STM_App_Update_Char(CUSTOM_STM_R_N,light_noti);
 800ee7e:	463b      	mov	r3, r7
 800ee80:	4619      	mov	r1, r3
 800ee82:	2005      	movs	r0, #5
 800ee84:	f001 f920 	bl	80100c8 <Custom_STM_App_Update_Char>
			HAL_GPIO_WritePin(GPIOD, Green_Led_Pin, GPIO_PIN_RESET);
 800ee88:	2200      	movs	r2, #0
 800ee8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ee8e:	4832      	ldr	r0, [pc, #200]	; (800ef58 <Send_Temp_Notification+0x180>)
 800ee90:	f7f7 fa4a 	bl	8006328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, Yellow_Led_Pin|Blue_Led_Pin|Red_Led_Pin, GPIO_PIN_SET);
 800ee94:	2201      	movs	r2, #1
 800ee96:	f44f 4150 	mov.w	r1, #53248	; 0xd000
 800ee9a:	482f      	ldr	r0, [pc, #188]	; (800ef58 <Send_Temp_Notification+0x180>)
 800ee9c:	f7f7 fa44 	bl	8006328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, Yellow_Led_Pin|Blue_Led_Pin|Green_Led_Pin|Red_Led_Pin, GPIO_PIN_SET);

		}
	}

}
 800eea0:	e04c      	b.n	800ef3c <Send_Temp_Notification+0x164>
		else if(Temperature<Temp_lower_limit)
 800eea2:	4b2c      	ldr	r3, [pc, #176]	; (800ef54 <Send_Temp_Notification+0x17c>)
 800eea4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eea8:	461a      	mov	r2, r3
 800eeaa:	4b28      	ldr	r3, [pc, #160]	; (800ef4c <Send_Temp_Notification+0x174>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	429a      	cmp	r2, r3
 800eeb0:	dd13      	ble.n	800eeda <Send_Temp_Notification+0x102>
			light_noti[1]=2;
 800eeb2:	2302      	movs	r3, #2
 800eeb4:	707b      	strb	r3, [r7, #1]
			Custom_STM_App_Update_Char(CUSTOM_STM_R_N,light_noti);
 800eeb6:	463b      	mov	r3, r7
 800eeb8:	4619      	mov	r1, r3
 800eeba:	2005      	movs	r0, #5
 800eebc:	f001 f904 	bl	80100c8 <Custom_STM_App_Update_Char>
			HAL_GPIO_WritePin(GPIOD, Yellow_Led_Pin, GPIO_PIN_RESET);
 800eec0:	2200      	movs	r2, #0
 800eec2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800eec6:	4824      	ldr	r0, [pc, #144]	; (800ef58 <Send_Temp_Notification+0x180>)
 800eec8:	f7f7 fa2e 	bl	8006328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, Green_Led_Pin|Blue_Led_Pin|Red_Led_Pin, GPIO_PIN_SET);
 800eecc:	2201      	movs	r2, #1
 800eece:	f44f 4130 	mov.w	r1, #45056	; 0xb000
 800eed2:	4821      	ldr	r0, [pc, #132]	; (800ef58 <Send_Temp_Notification+0x180>)
 800eed4:	f7f7 fa28 	bl	8006328 <HAL_GPIO_WritePin>
}
 800eed8:	e030      	b.n	800ef3c <Send_Temp_Notification+0x164>
		else if(Temperature>Temp_upper_limit)
 800eeda:	4b20      	ldr	r3, [pc, #128]	; (800ef5c <Send_Temp_Notification+0x184>)
 800eedc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eee0:	461a      	mov	r2, r3
 800eee2:	4b1a      	ldr	r3, [pc, #104]	; (800ef4c <Send_Temp_Notification+0x174>)
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	429a      	cmp	r2, r3
 800eee8:	da13      	bge.n	800ef12 <Send_Temp_Notification+0x13a>
			light_noti[1]=3;
 800eeea:	2303      	movs	r3, #3
 800eeec:	707b      	strb	r3, [r7, #1]
			Custom_STM_App_Update_Char(CUSTOM_STM_R_N,light_noti);
 800eeee:	463b      	mov	r3, r7
 800eef0:	4619      	mov	r1, r3
 800eef2:	2005      	movs	r0, #5
 800eef4:	f001 f8e8 	bl	80100c8 <Custom_STM_App_Update_Char>
			HAL_GPIO_WritePin(GPIOD, Red_Led_Pin, GPIO_PIN_RESET);
 800eef8:	2200      	movs	r2, #0
 800eefa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800eefe:	4816      	ldr	r0, [pc, #88]	; (800ef58 <Send_Temp_Notification+0x180>)
 800ef00:	f7f7 fa12 	bl	8006328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, Yellow_Led_Pin|Blue_Led_Pin|Green_Led_Pin, GPIO_PIN_SET);
 800ef04:	2201      	movs	r2, #1
 800ef06:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 800ef0a:	4813      	ldr	r0, [pc, #76]	; (800ef58 <Send_Temp_Notification+0x180>)
 800ef0c:	f7f7 fa0c 	bl	8006328 <HAL_GPIO_WritePin>
}
 800ef10:	e014      	b.n	800ef3c <Send_Temp_Notification+0x164>
			light_noti[1]=0;
 800ef12:	2300      	movs	r3, #0
 800ef14:	707b      	strb	r3, [r7, #1]
			Custom_STM_App_Update_Char(CUSTOM_STM_R_N,light_noti);
 800ef16:	463b      	mov	r3, r7
 800ef18:	4619      	mov	r1, r3
 800ef1a:	2005      	movs	r0, #5
 800ef1c:	f001 f8d4 	bl	80100c8 <Custom_STM_App_Update_Char>
			Temp_lower_limit=0xffff;
 800ef20:	4b0c      	ldr	r3, [pc, #48]	; (800ef54 <Send_Temp_Notification+0x17c>)
 800ef22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef26:	801a      	strh	r2, [r3, #0]
			Temp_upper_limit=0xffff;
 800ef28:	4b0c      	ldr	r3, [pc, #48]	; (800ef5c <Send_Temp_Notification+0x184>)
 800ef2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef2e:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, Yellow_Led_Pin|Blue_Led_Pin|Green_Led_Pin|Red_Led_Pin, GPIO_PIN_SET);
 800ef30:	2201      	movs	r2, #1
 800ef32:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800ef36:	4808      	ldr	r0, [pc, #32]	; (800ef58 <Send_Temp_Notification+0x180>)
 800ef38:	f7f7 f9f6 	bl	8006328 <HAL_GPIO_WritePin>
}
 800ef3c:	bf00      	nop
 800ef3e:	3708      	adds	r7, #8
 800ef40:	46bd      	mov	sp, r7
 800ef42:	bd80      	pop	{r7, pc}
 800ef44:	08017240 	.word	0x08017240
 800ef48:	40590000 	.word	0x40590000
 800ef4c:	200006a8 	.word	0x200006a8
 800ef50:	200006ac 	.word	0x200006ac
 800ef54:	20000056 	.word	0x20000056
 800ef58:	48000c00 	.word	0x48000c00
 800ef5c:	20000058 	.word	0x20000058

0800ef60 <log_data>:


void log_data(uint8_t select)
  {
 800ef60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ef64:	b087      	sub	sp, #28
 800ef66:	af00      	add	r7, sp, #0
 800ef68:	4603      	mov	r3, r0
 800ef6a:	71fb      	strb	r3, [r7, #7]
 800ef6c:	466b      	mov	r3, sp
 800ef6e:	461e      	mov	r6, r3
  uint8_t log[select];
 800ef70:	79f9      	ldrb	r1, [r7, #7]
 800ef72:	460b      	mov	r3, r1
 800ef74:	3b01      	subs	r3, #1
 800ef76:	613b      	str	r3, [r7, #16]
 800ef78:	b2cb      	uxtb	r3, r1
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	4698      	mov	r8, r3
 800ef7e:	4691      	mov	r9, r2
 800ef80:	f04f 0200 	mov.w	r2, #0
 800ef84:	f04f 0300 	mov.w	r3, #0
 800ef88:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ef8c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ef90:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ef94:	b2cb      	uxtb	r3, r1
 800ef96:	2200      	movs	r2, #0
 800ef98:	461c      	mov	r4, r3
 800ef9a:	4615      	mov	r5, r2
 800ef9c:	f04f 0200 	mov.w	r2, #0
 800efa0:	f04f 0300 	mov.w	r3, #0
 800efa4:	00eb      	lsls	r3, r5, #3
 800efa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800efaa:	00e2      	lsls	r2, r4, #3
 800efac:	460b      	mov	r3, r1
 800efae:	3307      	adds	r3, #7
 800efb0:	08db      	lsrs	r3, r3, #3
 800efb2:	00db      	lsls	r3, r3, #3
 800efb4:	ebad 0d03 	sub.w	sp, sp, r3
 800efb8:	466b      	mov	r3, sp
 800efba:	3300      	adds	r3, #0
 800efbc:	60fb      	str	r3, [r7, #12]
  uint32_t current_add=Read_flash_address((select%2));
 800efbe:	79fb      	ldrb	r3, [r7, #7]
 800efc0:	f003 0301 	and.w	r3, r3, #1
 800efc4:	b2db      	uxtb	r3, r3
 800efc6:	4618      	mov	r0, r3
 800efc8:	f001 fe40 	bl	8010c4c <Read_flash_address>
 800efcc:	6178      	str	r0, [r7, #20]
  printf("current_log_add %d\n",current_add);
 800efce:	6979      	ldr	r1, [r7, #20]
 800efd0:	488a      	ldr	r0, [pc, #552]	; (800f1fc <log_data+0x29c>)
 800efd2:	f003 fa87 	bl	80124e4 <iprintf>
  Date_Time();
 800efd6:	f000 f91f 	bl	800f218 <Date_Time>
  AccelRead();
 800efda:	f7f2 f889 	bl	80010f0 <AccelRead>

  if(select==17)
 800efde:	79fb      	ldrb	r3, [r7, #7]
 800efe0:	2b11      	cmp	r3, #17
 800efe2:	f040 8081 	bne.w	800f0e8 <log_data+0x188>
    {

	 STORE_LE_32(log,Temperature);
 800efe6:	4b86      	ldr	r3, [pc, #536]	; (800f200 <log_data+0x2a0>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	b2da      	uxtb	r2, r3
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	701a      	strb	r2, [r3, #0]
 800eff0:	4b83      	ldr	r3, [pc, #524]	; (800f200 <log_data+0x2a0>)
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	121b      	asrs	r3, r3, #8
 800eff6:	b2da      	uxtb	r2, r3
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	705a      	strb	r2, [r3, #1]
 800effc:	4b80      	ldr	r3, [pc, #512]	; (800f200 <log_data+0x2a0>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	141b      	asrs	r3, r3, #16
 800f002:	b2da      	uxtb	r2, r3
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	709a      	strb	r2, [r3, #2]
 800f008:	4b7d      	ldr	r3, [pc, #500]	; (800f200 <log_data+0x2a0>)
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	161b      	asrs	r3, r3, #24
 800f00e:	b2da      	uxtb	r2, r3
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	70da      	strb	r2, [r3, #3]
	 STORE_LE_16(log+4,Data.AccelX);
 800f014:	4b7b      	ldr	r3, [pc, #492]	; (800f204 <log_data+0x2a4>)
 800f016:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f01a:	b2da      	uxtb	r2, r3
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	711a      	strb	r2, [r3, #4]
 800f020:	4b78      	ldr	r3, [pc, #480]	; (800f204 <log_data+0x2a4>)
 800f022:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f026:	121b      	asrs	r3, r3, #8
 800f028:	b21b      	sxth	r3, r3
 800f02a:	b2da      	uxtb	r2, r3
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	715a      	strb	r2, [r3, #5]
	 STORE_LE_16(log+6,Data.AccelY);
 800f030:	4b74      	ldr	r3, [pc, #464]	; (800f204 <log_data+0x2a4>)
 800f032:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f036:	b2da      	uxtb	r2, r3
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	719a      	strb	r2, [r3, #6]
 800f03c:	4b71      	ldr	r3, [pc, #452]	; (800f204 <log_data+0x2a4>)
 800f03e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f042:	121b      	asrs	r3, r3, #8
 800f044:	b21b      	sxth	r3, r3
 800f046:	b2da      	uxtb	r2, r3
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	71da      	strb	r2, [r3, #7]
     STORE_LE_16(log+8,Data.AccelZ);
 800f04c:	4b6d      	ldr	r3, [pc, #436]	; (800f204 <log_data+0x2a4>)
 800f04e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f052:	b2da      	uxtb	r2, r3
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	721a      	strb	r2, [r3, #8]
 800f058:	4b6a      	ldr	r3, [pc, #424]	; (800f204 <log_data+0x2a4>)
 800f05a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f05e:	121b      	asrs	r3, r3, #8
 800f060:	b21b      	sxth	r3, r3
 800f062:	b2da      	uxtb	r2, r3
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	725a      	strb	r2, [r3, #9]
     log[10]=Time[0];
 800f068:	4b67      	ldr	r3, [pc, #412]	; (800f208 <log_data+0x2a8>)
 800f06a:	781a      	ldrb	r2, [r3, #0]
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	729a      	strb	r2, [r3, #10]
     log[11]=Time[1];
 800f070:	4b65      	ldr	r3, [pc, #404]	; (800f208 <log_data+0x2a8>)
 800f072:	785a      	ldrb	r2, [r3, #1]
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	72da      	strb	r2, [r3, #11]
     log[12]=Time[2];
 800f078:	4b63      	ldr	r3, [pc, #396]	; (800f208 <log_data+0x2a8>)
 800f07a:	789a      	ldrb	r2, [r3, #2]
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	731a      	strb	r2, [r3, #12]
     log[13]=Time[3];
 800f080:	4b61      	ldr	r3, [pc, #388]	; (800f208 <log_data+0x2a8>)
 800f082:	78da      	ldrb	r2, [r3, #3]
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	735a      	strb	r2, [r3, #13]
     log[14]=Time[4];
 800f088:	4b5f      	ldr	r3, [pc, #380]	; (800f208 <log_data+0x2a8>)
 800f08a:	791a      	ldrb	r2, [r3, #4]
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	739a      	strb	r2, [r3, #14]
     log[15]=Time[5];
 800f090:	4b5d      	ldr	r3, [pc, #372]	; (800f208 <log_data+0x2a8>)
 800f092:	795a      	ldrb	r2, [r3, #5]
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	73da      	strb	r2, [r3, #15]
     log[16]=Time[6];
 800f098:	4b5b      	ldr	r3, [pc, #364]	; (800f208 <log_data+0x2a8>)
 800f09a:	799a      	ldrb	r2, [r3, #6]
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	741a      	strb	r2, [r3, #16]
     if(current_add>=end_address_Temp)
 800f0a0:	697b      	ldr	r3, [r7, #20]
 800f0a2:	f5b3 2f7f 	cmp.w	r3, #1044480	; 0xff000
 800f0a6:	d314      	bcc.n	800f0d2 <log_data+0x172>
         {
           update_address(end_address_Temp,1);
 800f0a8:	2101      	movs	r1, #1
 800f0aa:	f44f 207f 	mov.w	r0, #1044480	; 0xff000
 800f0ae:	f001 fd4b 	bl	8010b48 <update_address>
           current_add=Read_flash_address(1);
 800f0b2:	2001      	movs	r0, #1
 800f0b4:	f001 fdca 	bl	8010c4c <Read_flash_address>
 800f0b8:	6178      	str	r0, [r7, #20]
           Quad_Write(log,current_add,17);
 800f0ba:	2211      	movs	r2, #17
 800f0bc:	6979      	ldr	r1, [r7, #20]
 800f0be:	68f8      	ldr	r0, [r7, #12]
 800f0c0:	f001 fc64 	bl	801098c <Quad_Write>
           update_address(current_add+17,1);
 800f0c4:	697b      	ldr	r3, [r7, #20]
 800f0c6:	3311      	adds	r3, #17
 800f0c8:	2101      	movs	r1, #1
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	f001 fd3c 	bl	8010b48 <update_address>
 800f0d0:	e00a      	b.n	800f0e8 <log_data+0x188>
         }
       else
         {
           Quad_Write(&log,current_add,17);
 800f0d2:	2211      	movs	r2, #17
 800f0d4:	6979      	ldr	r1, [r7, #20]
 800f0d6:	68f8      	ldr	r0, [r7, #12]
 800f0d8:	f001 fc58 	bl	801098c <Quad_Write>
           update_address(current_add+17,1);
 800f0dc:	697b      	ldr	r3, [r7, #20]
 800f0de:	3311      	adds	r3, #17
 800f0e0:	2101      	movs	r1, #1
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f001 fd30 	bl	8010b48 <update_address>
         }
  }
  if(select==16)
 800f0e8:	79fb      	ldrb	r3, [r7, #7]
 800f0ea:	2b10      	cmp	r3, #16
 800f0ec:	d17f      	bne.n	800f1ee <log_data+0x28e>
      {
        //UV_Data=UV();  to be added
        log[0]=UV_Data[0];
 800f0ee:	4b47      	ldr	r3, [pc, #284]	; (800f20c <log_data+0x2ac>)
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	f993 3000 	ldrsb.w	r3, [r3]
 800f0f6:	b2da      	uxtb	r2, r3
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	701a      	strb	r2, [r3, #0]
        log[1]=UV_Data[1];
 800f0fc:	4b43      	ldr	r3, [pc, #268]	; (800f20c <log_data+0x2ac>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	3301      	adds	r3, #1
 800f102:	f993 3000 	ldrsb.w	r3, [r3]
 800f106:	b2da      	uxtb	r2, r3
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	705a      	strb	r2, [r3, #1]
        log[2]=UV_Data[2];
 800f10c:	4b3f      	ldr	r3, [pc, #252]	; (800f20c <log_data+0x2ac>)
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	3302      	adds	r3, #2
 800f112:	f993 3000 	ldrsb.w	r3, [r3]
 800f116:	b2da      	uxtb	r2, r3
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	709a      	strb	r2, [r3, #2]
        STORE_LE_16(log+3,Data.AccelX);
 800f11c:	4b39      	ldr	r3, [pc, #228]	; (800f204 <log_data+0x2a4>)
 800f11e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f122:	b2da      	uxtb	r2, r3
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	70da      	strb	r2, [r3, #3]
 800f128:	4b36      	ldr	r3, [pc, #216]	; (800f204 <log_data+0x2a4>)
 800f12a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f12e:	121b      	asrs	r3, r3, #8
 800f130:	b21b      	sxth	r3, r3
 800f132:	b2da      	uxtb	r2, r3
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	711a      	strb	r2, [r3, #4]
        STORE_LE_16(log+5,Data.AccelY);
 800f138:	4b32      	ldr	r3, [pc, #200]	; (800f204 <log_data+0x2a4>)
 800f13a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f13e:	b2da      	uxtb	r2, r3
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	715a      	strb	r2, [r3, #5]
 800f144:	4b2f      	ldr	r3, [pc, #188]	; (800f204 <log_data+0x2a4>)
 800f146:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f14a:	121b      	asrs	r3, r3, #8
 800f14c:	b21b      	sxth	r3, r3
 800f14e:	b2da      	uxtb	r2, r3
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	719a      	strb	r2, [r3, #6]
        STORE_LE_16(log+7,Data.AccelZ);
 800f154:	4b2b      	ldr	r3, [pc, #172]	; (800f204 <log_data+0x2a4>)
 800f156:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f15a:	b2da      	uxtb	r2, r3
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	71da      	strb	r2, [r3, #7]
 800f160:	4b28      	ldr	r3, [pc, #160]	; (800f204 <log_data+0x2a4>)
 800f162:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f166:	121b      	asrs	r3, r3, #8
 800f168:	b21b      	sxth	r3, r3
 800f16a:	b2da      	uxtb	r2, r3
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	721a      	strb	r2, [r3, #8]
        log[9]=Time[0];
 800f170:	4b25      	ldr	r3, [pc, #148]	; (800f208 <log_data+0x2a8>)
 800f172:	781a      	ldrb	r2, [r3, #0]
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	725a      	strb	r2, [r3, #9]
        log[10]=Time[1];
 800f178:	4b23      	ldr	r3, [pc, #140]	; (800f208 <log_data+0x2a8>)
 800f17a:	785a      	ldrb	r2, [r3, #1]
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	729a      	strb	r2, [r3, #10]
        log[11]=Time[2];
 800f180:	4b21      	ldr	r3, [pc, #132]	; (800f208 <log_data+0x2a8>)
 800f182:	789a      	ldrb	r2, [r3, #2]
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	72da      	strb	r2, [r3, #11]
        log[12]=Time[3];
 800f188:	4b1f      	ldr	r3, [pc, #124]	; (800f208 <log_data+0x2a8>)
 800f18a:	78da      	ldrb	r2, [r3, #3]
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	731a      	strb	r2, [r3, #12]
        log[13]=Time[4];
 800f190:	4b1d      	ldr	r3, [pc, #116]	; (800f208 <log_data+0x2a8>)
 800f192:	791a      	ldrb	r2, [r3, #4]
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	735a      	strb	r2, [r3, #13]
        log[14]=Time[5];
 800f198:	4b1b      	ldr	r3, [pc, #108]	; (800f208 <log_data+0x2a8>)
 800f19a:	795a      	ldrb	r2, [r3, #5]
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	739a      	strb	r2, [r3, #14]
        log[15]=Time[6];
 800f1a0:	4b19      	ldr	r3, [pc, #100]	; (800f208 <log_data+0x2a8>)
 800f1a2:	799a      	ldrb	r2, [r3, #6]
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	73da      	strb	r2, [r3, #15]
        if(current_add>=end_address_UV)
 800f1a8:	697b      	ldr	r3, [r7, #20]
 800f1aa:	4a19      	ldr	r2, [pc, #100]	; (800f210 <log_data+0x2b0>)
 800f1ac:	4293      	cmp	r3, r2
 800f1ae:	d913      	bls.n	800f1d8 <log_data+0x278>
          {
           update_address(end_address_UV,1);
 800f1b0:	2101      	movs	r1, #1
 800f1b2:	4818      	ldr	r0, [pc, #96]	; (800f214 <log_data+0x2b4>)
 800f1b4:	f001 fcc8 	bl	8010b48 <update_address>
           current_add=Read_flash_address(2);
 800f1b8:	2002      	movs	r0, #2
 800f1ba:	f001 fd47 	bl	8010c4c <Read_flash_address>
 800f1be:	6178      	str	r0, [r7, #20]
           Quad_Write(log,current_add,16);
 800f1c0:	2210      	movs	r2, #16
 800f1c2:	6979      	ldr	r1, [r7, #20]
 800f1c4:	68f8      	ldr	r0, [r7, #12]
 800f1c6:	f001 fbe1 	bl	801098c <Quad_Write>
           update_address(current_add+16,2);
 800f1ca:	697b      	ldr	r3, [r7, #20]
 800f1cc:	3310      	adds	r3, #16
 800f1ce:	2102      	movs	r1, #2
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	f001 fcb9 	bl	8010b48 <update_address>
 800f1d6:	e00a      	b.n	800f1ee <log_data+0x28e>
          }
        else
           {
      	  Quad_Write(log,current_add,16);
 800f1d8:	2210      	movs	r2, #16
 800f1da:	6979      	ldr	r1, [r7, #20]
 800f1dc:	68f8      	ldr	r0, [r7, #12]
 800f1de:	f001 fbd5 	bl	801098c <Quad_Write>
            update_address(current_add+16,2);
 800f1e2:	697b      	ldr	r3, [r7, #20]
 800f1e4:	3310      	adds	r3, #16
 800f1e6:	2102      	movs	r1, #2
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	f001 fcad 	bl	8010b48 <update_address>
 800f1ee:	46b5      	mov	sp, r6
           }


}
  }
 800f1f0:	bf00      	nop
 800f1f2:	371c      	adds	r7, #28
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1fa:	bf00      	nop
 800f1fc:	08017250 	.word	0x08017250
 800f200:	200006a8 	.word	0x200006a8
 800f204:	200006d4 	.word	0x200006d4
 800f208:	200006b0 	.word	0x200006b0
 800f20c:	200006ec 	.word	0x200006ec
 800f210:	001fefff 	.word	0x001fefff
 800f214:	001ff000 	.word	0x001ff000

0800f218 <Date_Time>:
void Date_Time(void)
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b082      	sub	sp, #8
 800f21c:	af00      	add	r7, sp, #0
	if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800f21e:	2200      	movs	r2, #0
 800f220:	4926      	ldr	r1, [pc, #152]	; (800f2bc <Date_Time+0xa4>)
 800f222:	4827      	ldr	r0, [pc, #156]	; (800f2c0 <Date_Time+0xa8>)
 800f224:	f7fa fa04 	bl	8009630 <HAL_RTC_GetTime>
 800f228:	4603      	mov	r3, r0
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d004      	beq.n	800f238 <Date_Time+0x20>
	    	{
	    		Error_Handler();
 800f22e:	f7f4 f9d5 	bl	80035dc <Error_Handler>
	    		printf("Time_fail\n");
 800f232:	4824      	ldr	r0, [pc, #144]	; (800f2c4 <Date_Time+0xac>)
 800f234:	f003 f9c4 	bl	80125c0 <puts>
	    	}
	    	if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800f238:	2200      	movs	r2, #0
 800f23a:	4923      	ldr	r1, [pc, #140]	; (800f2c8 <Date_Time+0xb0>)
 800f23c:	4820      	ldr	r0, [pc, #128]	; (800f2c0 <Date_Time+0xa8>)
 800f23e:	f7fa fa53 	bl	80096e8 <HAL_RTC_GetDate>
 800f242:	4603      	mov	r3, r0
 800f244:	2b00      	cmp	r3, #0
 800f246:	d004      	beq.n	800f252 <Date_Time+0x3a>
	    	{

	    		printf("Date_fail\n");
 800f248:	4820      	ldr	r0, [pc, #128]	; (800f2cc <Date_Time+0xb4>)
 800f24a:	f003 f9b9 	bl	80125c0 <puts>
	    		Error_Handler();
 800f24e:	f7f4 f9c5 	bl	80035dc <Error_Handler>
	    	}
	    	Time[0]=sTime.Hours;
 800f252:	4b1a      	ldr	r3, [pc, #104]	; (800f2bc <Date_Time+0xa4>)
 800f254:	781a      	ldrb	r2, [r3, #0]
 800f256:	4b1e      	ldr	r3, [pc, #120]	; (800f2d0 <Date_Time+0xb8>)
 800f258:	701a      	strb	r2, [r3, #0]
	    	Time[1]=sTime.Minutes;
 800f25a:	4b18      	ldr	r3, [pc, #96]	; (800f2bc <Date_Time+0xa4>)
 800f25c:	785a      	ldrb	r2, [r3, #1]
 800f25e:	4b1c      	ldr	r3, [pc, #112]	; (800f2d0 <Date_Time+0xb8>)
 800f260:	705a      	strb	r2, [r3, #1]
	    	Time[2]=sTime.Seconds;
 800f262:	4b16      	ldr	r3, [pc, #88]	; (800f2bc <Date_Time+0xa4>)
 800f264:	789a      	ldrb	r2, [r3, #2]
 800f266:	4b1a      	ldr	r3, [pc, #104]	; (800f2d0 <Date_Time+0xb8>)
 800f268:	709a      	strb	r2, [r3, #2]
	    	Time[3]=sDate.WeekDay;
 800f26a:	4b17      	ldr	r3, [pc, #92]	; (800f2c8 <Date_Time+0xb0>)
 800f26c:	781a      	ldrb	r2, [r3, #0]
 800f26e:	4b18      	ldr	r3, [pc, #96]	; (800f2d0 <Date_Time+0xb8>)
 800f270:	70da      	strb	r2, [r3, #3]
	    	Time[4]=sDate.Date;
 800f272:	4b15      	ldr	r3, [pc, #84]	; (800f2c8 <Date_Time+0xb0>)
 800f274:	789a      	ldrb	r2, [r3, #2]
 800f276:	4b16      	ldr	r3, [pc, #88]	; (800f2d0 <Date_Time+0xb8>)
 800f278:	711a      	strb	r2, [r3, #4]
	    	Time[5]=sDate.Month;
 800f27a:	4b13      	ldr	r3, [pc, #76]	; (800f2c8 <Date_Time+0xb0>)
 800f27c:	785a      	ldrb	r2, [r3, #1]
 800f27e:	4b14      	ldr	r3, [pc, #80]	; (800f2d0 <Date_Time+0xb8>)
 800f280:	715a      	strb	r2, [r3, #5]
	    	Time[6]=sDate.Year -20;
 800f282:	4b11      	ldr	r3, [pc, #68]	; (800f2c8 <Date_Time+0xb0>)
 800f284:	78db      	ldrb	r3, [r3, #3]
 800f286:	3b14      	subs	r3, #20
 800f288:	b2da      	uxtb	r2, r3
 800f28a:	4b11      	ldr	r3, [pc, #68]	; (800f2d0 <Date_Time+0xb8>)
 800f28c:	719a      	strb	r2, [r3, #6]
	    	for(uint8_t i=0;i<7;i++){
 800f28e:	2300      	movs	r3, #0
 800f290:	71fb      	strb	r3, [r7, #7]
 800f292:	e00a      	b.n	800f2aa <Date_Time+0x92>
	    		printf("T[%d]:%d\n",i,Time[i]);
 800f294:	79f9      	ldrb	r1, [r7, #7]
 800f296:	79fb      	ldrb	r3, [r7, #7]
 800f298:	4a0d      	ldr	r2, [pc, #52]	; (800f2d0 <Date_Time+0xb8>)
 800f29a:	5cd3      	ldrb	r3, [r2, r3]
 800f29c:	461a      	mov	r2, r3
 800f29e:	480d      	ldr	r0, [pc, #52]	; (800f2d4 <Date_Time+0xbc>)
 800f2a0:	f003 f920 	bl	80124e4 <iprintf>
	    	for(uint8_t i=0;i<7;i++){
 800f2a4:	79fb      	ldrb	r3, [r7, #7]
 800f2a6:	3301      	adds	r3, #1
 800f2a8:	71fb      	strb	r3, [r7, #7]
 800f2aa:	79fb      	ldrb	r3, [r7, #7]
 800f2ac:	2b06      	cmp	r3, #6
 800f2ae:	d9f1      	bls.n	800f294 <Date_Time+0x7c>
	    	}
}
 800f2b0:	bf00      	nop
 800f2b2:	bf00      	nop
 800f2b4:	3708      	adds	r7, #8
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}
 800f2ba:	bf00      	nop
 800f2bc:	200006b8 	.word	0x200006b8
 800f2c0:	200004c4 	.word	0x200004c4
 800f2c4:	08017264 	.word	0x08017264
 800f2c8:	200006cc 	.word	0x200006cc
 800f2cc:	08017270 	.word	0x08017270
 800f2d0:	200006b0 	.word	0x200006b0
 800f2d4:	0801727c 	.word	0x0801727c

0800f2d8 <TEMP_APP_Init>:

static void TEMP_APP_Init(void)
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b082      	sub	sp, #8
 800f2dc:	af00      	add	r7, sp, #0

  UTIL_SEQ_RegTask( 1<<CFG_TEMP_ID, UTIL_SEQ_RFU, Send_Temp_Notification);
 800f2de:	4a08      	ldr	r2, [pc, #32]	; (800f300 <TEMP_APP_Init+0x28>)
 800f2e0:	2100      	movs	r1, #0
 800f2e2:	2004      	movs	r0, #4
 800f2e4:	f002 f896 	bl	8011414 <UTIL_SEQ_RegTask>
  /* Create timer to get the AccGyroMag params and update charecteristic */
  uint8_t A = HW_TS_Create(CFG_TIM_PROC_ID_ISR,&TEMP_TIMER_ID,hw_ts_Repeated,TEMP_Timer_Callback);
 800f2e8:	4b06      	ldr	r3, [pc, #24]	; (800f304 <TEMP_APP_Init+0x2c>)
 800f2ea:	2201      	movs	r2, #1
 800f2ec:	4906      	ldr	r1, [pc, #24]	; (800f308 <TEMP_APP_Init+0x30>)
 800f2ee:	2000      	movs	r0, #0
 800f2f0:	f7f3 fd90 	bl	8002e14 <HW_TS_Create>
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	71fb      	strb	r3, [r7, #7]

 return;
 800f2f8:	bf00      	nop
}
 800f2fa:	3708      	adds	r7, #8
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd80      	pop	{r7, pc}
 800f300:	0800edd9 	.word	0x0800edd9
 800f304:	0800f30d 	.word	0x0800f30d
 800f308:	200006d0 	.word	0x200006d0

0800f30c <TEMP_Timer_Callback>:
static void TEMP_Timer_Callback(void)
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask(1<<CFG_TEMP_ID, CFG_SCH_PRIO_0);
 800f310:	2100      	movs	r1, #0
 800f312:	2004      	movs	r0, #4
 800f314:	f002 f8a0 	bl	8011458 <UTIL_SEQ_SetTask>
}
 800f318:	bf00      	nop
 800f31a:	bd80      	pop	{r7, pc}

0800f31c <UV_Timer_Callback>:
static void UV_Timer_Callback(void)
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	af00      	add	r7, sp, #0

	UTIL_SEQ_SetTask(1<CFG_UV_ID,CFG_SCH_PRIO_0);
 800f320:	2100      	movs	r1, #0
 800f322:	2001      	movs	r0, #1
 800f324:	f002 f898 	bl	8011458 <UTIL_SEQ_SetTask>
}
 800f328:	bf00      	nop
 800f32a:	bd80      	pop	{r7, pc}

0800f32c <Send_UV_Notification>:
void Send_UV_Notification(void)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	af00      	add	r7, sp, #0
	UV_Data=UV();
 800f330:	f7f2 f880 	bl	8001434 <UV>
 800f334:	4603      	mov	r3, r0
 800f336:	461a      	mov	r2, r3
 800f338:	4b0d      	ldr	r3, [pc, #52]	; (800f370 <Send_UV_Notification+0x44>)
 800f33a:	601a      	str	r2, [r3, #0]
	Custom_STM_App_Update_Char(CUSTOM_STM_UV_V,UV_Data);
 800f33c:	4b0c      	ldr	r3, [pc, #48]	; (800f370 <Send_UV_Notification+0x44>)
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	4619      	mov	r1, r3
 800f342:	2006      	movs	r0, #6
 800f344:	f000 fec0 	bl	80100c8 <Custom_STM_App_Update_Char>
	if(global_storage_count>75)
 800f348:	4b0a      	ldr	r3, [pc, #40]	; (800f374 <Send_UV_Notification+0x48>)
 800f34a:	781b      	ldrb	r3, [r3, #0]
 800f34c:	2b4b      	cmp	r3, #75	; 0x4b
 800f34e:	d906      	bls.n	800f35e <Send_UV_Notification+0x32>
		{
			global_storage_count=0;
 800f350:	4b08      	ldr	r3, [pc, #32]	; (800f374 <Send_UV_Notification+0x48>)
 800f352:	2200      	movs	r2, #0
 800f354:	701a      	strb	r2, [r3, #0]
			log_data(16);
 800f356:	2010      	movs	r0, #16
 800f358:	f7ff fe02 	bl	800ef60 <log_data>
		else
		{
			global_storage_count+=1;
		}

}
 800f35c:	e005      	b.n	800f36a <Send_UV_Notification+0x3e>
			global_storage_count+=1;
 800f35e:	4b05      	ldr	r3, [pc, #20]	; (800f374 <Send_UV_Notification+0x48>)
 800f360:	781b      	ldrb	r3, [r3, #0]
 800f362:	3301      	adds	r3, #1
 800f364:	b2da      	uxtb	r2, r3
 800f366:	4b03      	ldr	r3, [pc, #12]	; (800f374 <Send_UV_Notification+0x48>)
 800f368:	701a      	strb	r2, [r3, #0]
}
 800f36a:	bf00      	nop
 800f36c:	bd80      	pop	{r7, pc}
 800f36e:	bf00      	nop
 800f370:	200006ec 	.word	0x200006ec
 800f374:	200006ac 	.word	0x200006ac

0800f378 <UV_APP_Init>:
static void UV_APP_Init(void)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	af00      	add	r7, sp, #0

	UTIL_SEQ_RegTask( 1<<CFG_UV_ID, UTIL_SEQ_RFU, Send_UV_Notification);
 800f37c:	4a06      	ldr	r2, [pc, #24]	; (800f398 <UV_APP_Init+0x20>)
 800f37e:	2100      	movs	r1, #0
 800f380:	2008      	movs	r0, #8
 800f382:	f002 f847 	bl	8011414 <UTIL_SEQ_RegTask>
	  /* Create timer to get the AccGyroMag params and update charecteristic */
	HW_TS_Create(CFG_TIM_PROC_ID_ISR, &UV_TIMER_ID,hw_ts_Repeated,UV_Timer_Callback);
 800f386:	4b05      	ldr	r3, [pc, #20]	; (800f39c <UV_APP_Init+0x24>)
 800f388:	2201      	movs	r2, #1
 800f38a:	4905      	ldr	r1, [pc, #20]	; (800f3a0 <UV_APP_Init+0x28>)
 800f38c:	2000      	movs	r0, #0
 800f38e:	f7f3 fd41 	bl	8002e14 <HW_TS_Create>
	 return;
 800f392:	bf00      	nop
}
 800f394:	bd80      	pop	{r7, pc}
 800f396:	bf00      	nop
 800f398:	0800f32d 	.word	0x0800f32d
 800f39c:	0800f31d 	.word	0x0800f31d
 800f3a0:	2000005a 	.word	0x2000005a

0800f3a4 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b08c      	sub	sp, #48	; 0x30
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	3301      	adds	r3, #1
 800f3b6:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (event_pckt->evt)
 800f3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ba:	781b      	ldrb	r3, [r3, #0]
 800f3bc:	2bff      	cmp	r3, #255	; 0xff
 800f3be:	f040 8183 	bne.w	800f6c8 <Custom_STM_Event_Handler+0x324>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800f3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3c4:	3302      	adds	r3, #2
 800f3c6:	627b      	str	r3, [r7, #36]	; 0x24
      switch (blecore_evt->ecode)
 800f3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ca:	881b      	ldrh	r3, [r3, #0]
 800f3cc:	b29b      	uxth	r3, r3
 800f3ce:	f640 4214 	movw	r2, #3092	; 0xc14
 800f3d2:	4293      	cmp	r3, r2
 800f3d4:	f000 8120 	beq.w	800f618 <Custom_STM_Event_Handler+0x274>
 800f3d8:	f640 4214 	movw	r2, #3092	; 0xc14
 800f3dc:	4293      	cmp	r3, r2
 800f3de:	f300 816a 	bgt.w	800f6b6 <Custom_STM_Event_Handler+0x312>
 800f3e2:	f640 4201 	movw	r2, #3073	; 0xc01
 800f3e6:	4293      	cmp	r3, r2
 800f3e8:	d003      	beq.n	800f3f2 <Custom_STM_Event_Handler+0x4e>
 800f3ea:	f640 4213 	movw	r2, #3091	; 0xc13
 800f3ee:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 800f3f0:	e169      	b.n	800f6c6 <Custom_STM_Event_Handler+0x322>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800f3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3f4:	3302      	adds	r3, #2
 800f3f6:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomIr_THdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800f3f8:	69fb      	ldr	r3, [r7, #28]
 800f3fa:	885b      	ldrh	r3, [r3, #2]
 800f3fc:	b29b      	uxth	r3, r3
 800f3fe:	461a      	mov	r2, r3
 800f400:	4bae      	ldr	r3, [pc, #696]	; (800f6bc <Custom_STM_Event_Handler+0x318>)
 800f402:	88db      	ldrh	r3, [r3, #6]
 800f404:	3302      	adds	r3, #2
 800f406:	429a      	cmp	r2, r3
 800f408:	d119      	bne.n	800f43e <Custom_STM_Event_Handler+0x9a>
            return_value = SVCCTL_EvtAckFlowEnable;
 800f40a:	2301      	movs	r3, #1
 800f40c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch (attribute_modified->Attr_Data[0])
 800f410:	69fb      	ldr	r3, [r7, #28]
 800f412:	7a1b      	ldrb	r3, [r3, #8]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d002      	beq.n	800f41e <Custom_STM_Event_Handler+0x7a>
 800f418:	2b01      	cmp	r3, #1
 800f41a:	d008      	beq.n	800f42e <Custom_STM_Event_Handler+0x8a>
              break;
 800f41c:	e0fb      	b.n	800f616 <Custom_STM_Event_Handler+0x272>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_IR_T_NOTIFY_DISABLED_EVT;
 800f41e:	2302      	movs	r3, #2
 800f420:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800f422:	f107 030c 	add.w	r3, r7, #12
 800f426:	4618      	mov	r0, r3
 800f428:	f7ff fc56 	bl	800ecd8 <Custom_STM_App_Notification>
                break;
 800f42c:	e0f3      	b.n	800f616 <Custom_STM_Event_Handler+0x272>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_IR_T_NOTIFY_ENABLED_EVT;
 800f42e:	2301      	movs	r3, #1
 800f430:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800f432:	f107 030c 	add.w	r3, r7, #12
 800f436:	4618      	mov	r0, r3
 800f438:	f7ff fc4e 	bl	800ecd8 <Custom_STM_App_Notification>
                break;
 800f43c:	e0eb      	b.n	800f616 <Custom_STM_Event_Handler+0x272>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomL_THdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800f43e:	69fb      	ldr	r3, [r7, #28]
 800f440:	885b      	ldrh	r3, [r3, #2]
 800f442:	b29b      	uxth	r3, r3
 800f444:	461a      	mov	r2, r3
 800f446:	4b9d      	ldr	r3, [pc, #628]	; (800f6bc <Custom_STM_Event_Handler+0x318>)
 800f448:	899b      	ldrh	r3, [r3, #12]
 800f44a:	3302      	adds	r3, #2
 800f44c:	429a      	cmp	r2, r3
 800f44e:	d119      	bne.n	800f484 <Custom_STM_Event_Handler+0xe0>
            return_value = SVCCTL_EvtAckFlowEnable;
 800f450:	2301      	movs	r3, #1
 800f452:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch (attribute_modified->Attr_Data[0])
 800f456:	69fb      	ldr	r3, [r7, #28]
 800f458:	7a1b      	ldrb	r3, [r3, #8]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d002      	beq.n	800f464 <Custom_STM_Event_Handler+0xc0>
 800f45e:	2b01      	cmp	r3, #1
 800f460:	d008      	beq.n	800f474 <Custom_STM_Event_Handler+0xd0>
              break;
 800f462:	e0d8      	b.n	800f616 <Custom_STM_Event_Handler+0x272>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_L_T_NOTIFY_DISABLED_EVT;
 800f464:	2306      	movs	r3, #6
 800f466:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800f468:	f107 030c 	add.w	r3, r7, #12
 800f46c:	4618      	mov	r0, r3
 800f46e:	f7ff fc33 	bl	800ecd8 <Custom_STM_App_Notification>
                break;
 800f472:	e0d0      	b.n	800f616 <Custom_STM_Event_Handler+0x272>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_L_T_NOTIFY_ENABLED_EVT;
 800f474:	2305      	movs	r3, #5
 800f476:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800f478:	f107 030c 	add.w	r3, r7, #12
 800f47c:	4618      	mov	r0, r3
 800f47e:	f7ff fc2b 	bl	800ecd8 <Custom_STM_App_Notification>
                break;
 800f482:	e0c8      	b.n	800f616 <Custom_STM_Event_Handler+0x272>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomR_NHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800f484:	69fb      	ldr	r3, [r7, #28]
 800f486:	885b      	ldrh	r3, [r3, #2]
 800f488:	b29b      	uxth	r3, r3
 800f48a:	461a      	mov	r2, r3
 800f48c:	4b8b      	ldr	r3, [pc, #556]	; (800f6bc <Custom_STM_Event_Handler+0x318>)
 800f48e:	89db      	ldrh	r3, [r3, #14]
 800f490:	3302      	adds	r3, #2
 800f492:	429a      	cmp	r2, r3
 800f494:	d119      	bne.n	800f4ca <Custom_STM_Event_Handler+0x126>
            return_value = SVCCTL_EvtAckFlowEnable;
 800f496:	2301      	movs	r3, #1
 800f498:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch (attribute_modified->Attr_Data[0])
 800f49c:	69fb      	ldr	r3, [r7, #28]
 800f49e:	7a1b      	ldrb	r3, [r3, #8]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d002      	beq.n	800f4aa <Custom_STM_Event_Handler+0x106>
 800f4a4:	2b01      	cmp	r3, #1
 800f4a6:	d008      	beq.n	800f4ba <Custom_STM_Event_Handler+0x116>
              break;
 800f4a8:	e0b5      	b.n	800f616 <Custom_STM_Event_Handler+0x272>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_R_N_NOTIFY_DISABLED_EVT;
 800f4aa:	2308      	movs	r3, #8
 800f4ac:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800f4ae:	f107 030c 	add.w	r3, r7, #12
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f7ff fc10 	bl	800ecd8 <Custom_STM_App_Notification>
                break;
 800f4b8:	e0ad      	b.n	800f616 <Custom_STM_Event_Handler+0x272>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_R_N_NOTIFY_ENABLED_EVT;
 800f4ba:	2307      	movs	r3, #7
 800f4bc:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800f4be:	f107 030c 	add.w	r3, r7, #12
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f7ff fc08 	bl	800ecd8 <Custom_STM_App_Notification>
                break;
 800f4c8:	e0a5      	b.n	800f616 <Custom_STM_Event_Handler+0x272>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomUv_VHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800f4ca:	69fb      	ldr	r3, [r7, #28]
 800f4cc:	885b      	ldrh	r3, [r3, #2]
 800f4ce:	b29b      	uxth	r3, r3
 800f4d0:	461a      	mov	r2, r3
 800f4d2:	4b7a      	ldr	r3, [pc, #488]	; (800f6bc <Custom_STM_Event_Handler+0x318>)
 800f4d4:	8a5b      	ldrh	r3, [r3, #18]
 800f4d6:	3302      	adds	r3, #2
 800f4d8:	429a      	cmp	r2, r3
 800f4da:	d119      	bne.n	800f510 <Custom_STM_Event_Handler+0x16c>
            return_value = SVCCTL_EvtAckFlowEnable;
 800f4dc:	2301      	movs	r3, #1
 800f4de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch (attribute_modified->Attr_Data[0])
 800f4e2:	69fb      	ldr	r3, [r7, #28]
 800f4e4:	7a1b      	ldrb	r3, [r3, #8]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d002      	beq.n	800f4f0 <Custom_STM_Event_Handler+0x14c>
 800f4ea:	2b01      	cmp	r3, #1
 800f4ec:	d008      	beq.n	800f500 <Custom_STM_Event_Handler+0x15c>
              break;
 800f4ee:	e092      	b.n	800f616 <Custom_STM_Event_Handler+0x272>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_UV_V_NOTIFY_DISABLED_EVT;
 800f4f0:	230a      	movs	r3, #10
 800f4f2:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800f4f4:	f107 030c 	add.w	r3, r7, #12
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	f7ff fbed 	bl	800ecd8 <Custom_STM_App_Notification>
                break;
 800f4fe:	e08a      	b.n	800f616 <Custom_STM_Event_Handler+0x272>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_UV_V_NOTIFY_ENABLED_EVT;
 800f500:	2309      	movs	r3, #9
 800f502:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800f504:	f107 030c 	add.w	r3, r7, #12
 800f508:	4618      	mov	r0, r3
 800f50a:	f7ff fbe5 	bl	800ecd8 <Custom_STM_App_Notification>
                break;
 800f50e:	e082      	b.n	800f616 <Custom_STM_Event_Handler+0x272>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomUv_LHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800f510:	69fb      	ldr	r3, [r7, #28]
 800f512:	885b      	ldrh	r3, [r3, #2]
 800f514:	b29b      	uxth	r3, r3
 800f516:	461a      	mov	r2, r3
 800f518:	4b68      	ldr	r3, [pc, #416]	; (800f6bc <Custom_STM_Event_Handler+0x318>)
 800f51a:	8a9b      	ldrh	r3, [r3, #20]
 800f51c:	3302      	adds	r3, #2
 800f51e:	429a      	cmp	r2, r3
 800f520:	d119      	bne.n	800f556 <Custom_STM_Event_Handler+0x1b2>
            return_value = SVCCTL_EvtAckFlowEnable;
 800f522:	2301      	movs	r3, #1
 800f524:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch (attribute_modified->Attr_Data[0])
 800f528:	69fb      	ldr	r3, [r7, #28]
 800f52a:	7a1b      	ldrb	r3, [r3, #8]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d002      	beq.n	800f536 <Custom_STM_Event_Handler+0x192>
 800f530:	2b01      	cmp	r3, #1
 800f532:	d008      	beq.n	800f546 <Custom_STM_Event_Handler+0x1a2>
              break;
 800f534:	e06f      	b.n	800f616 <Custom_STM_Event_Handler+0x272>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_UV_L_NOTIFY_DISABLED_EVT;
 800f536:	230c      	movs	r3, #12
 800f538:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800f53a:	f107 030c 	add.w	r3, r7, #12
 800f53e:	4618      	mov	r0, r3
 800f540:	f7ff fbca 	bl	800ecd8 <Custom_STM_App_Notification>
                break;
 800f544:	e067      	b.n	800f616 <Custom_STM_Event_Handler+0x272>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_UV_L_NOTIFY_ENABLED_EVT;
 800f546:	230b      	movs	r3, #11
 800f548:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800f54a:	f107 030c 	add.w	r3, r7, #12
 800f54e:	4618      	mov	r0, r3
 800f550:	f7ff fbc2 	bl	800ecd8 <Custom_STM_App_Notification>
                break;
 800f554:	e05f      	b.n	800f616 <Custom_STM_Event_Handler+0x272>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomEcHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800f556:	69fb      	ldr	r3, [r7, #28]
 800f558:	885b      	ldrh	r3, [r3, #2]
 800f55a:	b29b      	uxth	r3, r3
 800f55c:	461a      	mov	r2, r3
 800f55e:	4b57      	ldr	r3, [pc, #348]	; (800f6bc <Custom_STM_Event_Handler+0x318>)
 800f560:	8b5b      	ldrh	r3, [r3, #26]
 800f562:	3302      	adds	r3, #2
 800f564:	429a      	cmp	r2, r3
 800f566:	d119      	bne.n	800f59c <Custom_STM_Event_Handler+0x1f8>
            return_value = SVCCTL_EvtAckFlowEnable;
 800f568:	2301      	movs	r3, #1
 800f56a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch (attribute_modified->Attr_Data[0])
 800f56e:	69fb      	ldr	r3, [r7, #28]
 800f570:	7a1b      	ldrb	r3, [r3, #8]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d002      	beq.n	800f57c <Custom_STM_Event_Handler+0x1d8>
 800f576:	2b01      	cmp	r3, #1
 800f578:	d008      	beq.n	800f58c <Custom_STM_Event_Handler+0x1e8>
              break;
 800f57a:	e04c      	b.n	800f616 <Custom_STM_Event_Handler+0x272>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_EC_NOTIFY_DISABLED_EVT;
 800f57c:	230f      	movs	r3, #15
 800f57e:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800f580:	f107 030c 	add.w	r3, r7, #12
 800f584:	4618      	mov	r0, r3
 800f586:	f7ff fba7 	bl	800ecd8 <Custom_STM_App_Notification>
                break;
 800f58a:	e044      	b.n	800f616 <Custom_STM_Event_Handler+0x272>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_EC_NOTIFY_ENABLED_EVT;
 800f58c:	230e      	movs	r3, #14
 800f58e:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800f590:	f107 030c 	add.w	r3, r7, #12
 800f594:	4618      	mov	r0, r3
 800f596:	f7ff fb9f 	bl	800ecd8 <Custom_STM_App_Notification>
                break;
 800f59a:	e03c      	b.n	800f616 <Custom_STM_Event_Handler+0x272>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomPrHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800f59c:	69fb      	ldr	r3, [r7, #28]
 800f59e:	885b      	ldrh	r3, [r3, #2]
 800f5a0:	b29b      	uxth	r3, r3
 800f5a2:	461a      	mov	r2, r3
 800f5a4:	4b45      	ldr	r3, [pc, #276]	; (800f6bc <Custom_STM_Event_Handler+0x318>)
 800f5a6:	8b9b      	ldrh	r3, [r3, #28]
 800f5a8:	3302      	adds	r3, #2
 800f5aa:	429a      	cmp	r2, r3
 800f5ac:	d119      	bne.n	800f5e2 <Custom_STM_Event_Handler+0x23e>
            return_value = SVCCTL_EvtAckFlowEnable;
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch (attribute_modified->Attr_Data[0])
 800f5b4:	69fb      	ldr	r3, [r7, #28]
 800f5b6:	7a1b      	ldrb	r3, [r3, #8]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d002      	beq.n	800f5c2 <Custom_STM_Event_Handler+0x21e>
 800f5bc:	2b01      	cmp	r3, #1
 800f5be:	d008      	beq.n	800f5d2 <Custom_STM_Event_Handler+0x22e>
              break;
 800f5c0:	e029      	b.n	800f616 <Custom_STM_Event_Handler+0x272>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_PR_NOTIFY_DISABLED_EVT;
 800f5c2:	2311      	movs	r3, #17
 800f5c4:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800f5c6:	f107 030c 	add.w	r3, r7, #12
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	f7ff fb84 	bl	800ecd8 <Custom_STM_App_Notification>
                break;
 800f5d0:	e021      	b.n	800f616 <Custom_STM_Event_Handler+0x272>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_PR_NOTIFY_ENABLED_EVT;
 800f5d2:	2310      	movs	r3, #16
 800f5d4:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800f5d6:	f107 030c 	add.w	r3, r7, #12
 800f5da:	4618      	mov	r0, r3
 800f5dc:	f7ff fb7c 	bl	800ecd8 <Custom_STM_App_Notification>
                break;
 800f5e0:	e019      	b.n	800f616 <Custom_STM_Event_Handler+0x272>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomS_THdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800f5e2:	69fb      	ldr	r3, [r7, #28]
 800f5e4:	885b      	ldrh	r3, [r3, #2]
 800f5e6:	b29b      	uxth	r3, r3
 800f5e8:	461a      	mov	r2, r3
 800f5ea:	4b34      	ldr	r3, [pc, #208]	; (800f6bc <Custom_STM_Event_Handler+0x318>)
 800f5ec:	895b      	ldrh	r3, [r3, #10]
 800f5ee:	3301      	adds	r3, #1
 800f5f0:	429a      	cmp	r2, r3
 800f5f2:	d103      	bne.n	800f5fc <Custom_STM_Event_Handler+0x258>
            return_value = SVCCTL_EvtAckFlowEnable;
 800f5f4:	2301      	movs	r3, #1
 800f5f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          break;
 800f5fa:	e061      	b.n	800f6c0 <Custom_STM_Event_Handler+0x31c>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomTdHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800f5fc:	69fb      	ldr	r3, [r7, #28]
 800f5fe:	885b      	ldrh	r3, [r3, #2]
 800f600:	b29b      	uxth	r3, r3
 800f602:	461a      	mov	r2, r3
 800f604:	4b2d      	ldr	r3, [pc, #180]	; (800f6bc <Custom_STM_Event_Handler+0x318>)
 800f606:	8bdb      	ldrh	r3, [r3, #30]
 800f608:	3301      	adds	r3, #1
 800f60a:	429a      	cmp	r2, r3
 800f60c:	d158      	bne.n	800f6c0 <Custom_STM_Event_Handler+0x31c>
            return_value = SVCCTL_EvtAckFlowEnable;
 800f60e:	2301      	movs	r3, #1
 800f610:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          break;
 800f614:	e054      	b.n	800f6c0 <Custom_STM_Event_Handler+0x31c>
 800f616:	e053      	b.n	800f6c0 <Custom_STM_Event_Handler+0x31c>
          read_req = (aci_gatt_read_permit_req_event_rp0*)blecore_evt->data;
 800f618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f61a:	3302      	adds	r3, #2
 800f61c:	623b      	str	r3, [r7, #32]
          if (read_req->Attribute_Handle == (CustomContext.CustomLevelHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800f61e:	6a3b      	ldr	r3, [r7, #32]
 800f620:	885b      	ldrh	r3, [r3, #2]
 800f622:	b29b      	uxth	r3, r3
 800f624:	461a      	mov	r2, r3
 800f626:	4b25      	ldr	r3, [pc, #148]	; (800f6bc <Custom_STM_Event_Handler+0x318>)
 800f628:	885b      	ldrh	r3, [r3, #2]
 800f62a:	3301      	adds	r3, #1
 800f62c:	429a      	cmp	r2, r3
 800f62e:	d109      	bne.n	800f644 <Custom_STM_Event_Handler+0x2a0>
            return_value = SVCCTL_EvtAckFlowEnable;
 800f630:	2301      	movs	r3, #1
 800f632:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            aci_gatt_allow_read(read_req->Connection_Handle);
 800f636:	6a3b      	ldr	r3, [r7, #32]
 800f638:	881b      	ldrh	r3, [r3, #0]
 800f63a:	b29b      	uxth	r3, r3
 800f63c:	4618      	mov	r0, r3
 800f63e:	f7fc fcc6 	bl	800bfce <aci_gatt_allow_read>
          break;
 800f642:	e03f      	b.n	800f6c4 <Custom_STM_Event_Handler+0x320>
          else if (read_req->Attribute_Handle == (CustomContext.CustomA_THdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800f644:	6a3b      	ldr	r3, [r7, #32]
 800f646:	885b      	ldrh	r3, [r3, #2]
 800f648:	b29b      	uxth	r3, r3
 800f64a:	461a      	mov	r2, r3
 800f64c:	4b1b      	ldr	r3, [pc, #108]	; (800f6bc <Custom_STM_Event_Handler+0x318>)
 800f64e:	891b      	ldrh	r3, [r3, #8]
 800f650:	3301      	adds	r3, #1
 800f652:	429a      	cmp	r2, r3
 800f654:	d109      	bne.n	800f66a <Custom_STM_Event_Handler+0x2c6>
            return_value = SVCCTL_EvtAckFlowEnable;
 800f656:	2301      	movs	r3, #1
 800f658:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            aci_gatt_allow_read(read_req->Connection_Handle);
 800f65c:	6a3b      	ldr	r3, [r7, #32]
 800f65e:	881b      	ldrh	r3, [r3, #0]
 800f660:	b29b      	uxth	r3, r3
 800f662:	4618      	mov	r0, r3
 800f664:	f7fc fcb3 	bl	800bfce <aci_gatt_allow_read>
          break;
 800f668:	e02c      	b.n	800f6c4 <Custom_STM_Event_Handler+0x320>
          else if (read_req->Attribute_Handle == (CustomContext.CustomAclxHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800f66a:	6a3b      	ldr	r3, [r7, #32]
 800f66c:	885b      	ldrh	r3, [r3, #2]
 800f66e:	b29b      	uxth	r3, r3
 800f670:	461a      	mov	r2, r3
 800f672:	4b12      	ldr	r3, [pc, #72]	; (800f6bc <Custom_STM_Event_Handler+0x318>)
 800f674:	8b1b      	ldrh	r3, [r3, #24]
 800f676:	3301      	adds	r3, #1
 800f678:	429a      	cmp	r2, r3
 800f67a:	d109      	bne.n	800f690 <Custom_STM_Event_Handler+0x2ec>
            return_value = SVCCTL_EvtAckFlowEnable;
 800f67c:	2301      	movs	r3, #1
 800f67e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            aci_gatt_allow_read(read_req->Connection_Handle);
 800f682:	6a3b      	ldr	r3, [r7, #32]
 800f684:	881b      	ldrh	r3, [r3, #0]
 800f686:	b29b      	uxth	r3, r3
 800f688:	4618      	mov	r0, r3
 800f68a:	f7fc fca0 	bl	800bfce <aci_gatt_allow_read>
          break;
 800f68e:	e019      	b.n	800f6c4 <Custom_STM_Event_Handler+0x320>
          else if (read_req->Attribute_Handle == (CustomContext.CustomTdHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800f690:	6a3b      	ldr	r3, [r7, #32]
 800f692:	885b      	ldrh	r3, [r3, #2]
 800f694:	b29b      	uxth	r3, r3
 800f696:	461a      	mov	r2, r3
 800f698:	4b08      	ldr	r3, [pc, #32]	; (800f6bc <Custom_STM_Event_Handler+0x318>)
 800f69a:	8bdb      	ldrh	r3, [r3, #30]
 800f69c:	3301      	adds	r3, #1
 800f69e:	429a      	cmp	r2, r3
 800f6a0:	d110      	bne.n	800f6c4 <Custom_STM_Event_Handler+0x320>
            return_value = SVCCTL_EvtAckFlowEnable;
 800f6a2:	2301      	movs	r3, #1
 800f6a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            aci_gatt_allow_read(read_req->Connection_Handle);
 800f6a8:	6a3b      	ldr	r3, [r7, #32]
 800f6aa:	881b      	ldrh	r3, [r3, #0]
 800f6ac:	b29b      	uxth	r3, r3
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	f7fc fc8d 	bl	800bfce <aci_gatt_allow_read>
          break;
 800f6b4:	e006      	b.n	800f6c4 <Custom_STM_Event_Handler+0x320>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800f6b6:	bf00      	nop
 800f6b8:	e007      	b.n	800f6ca <Custom_STM_Event_Handler+0x326>
 800f6ba:	bf00      	nop
 800f6bc:	200006f0 	.word	0x200006f0
          break;
 800f6c0:	bf00      	nop
 800f6c2:	e002      	b.n	800f6ca <Custom_STM_Event_Handler+0x326>
          break;
 800f6c4:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800f6c6:	e000      	b.n	800f6ca <Custom_STM_Event_Handler+0x326>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800f6c8:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800f6ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}/* end Custom_STM_Event_Handler */
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	3730      	adds	r7, #48	; 0x30
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	bd80      	pop	{r7, pc}
 800f6d6:	bf00      	nop

0800f6d8 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800f6d8:	b580      	push	{r7, lr}
 800f6da:	b08c      	sub	sp, #48	; 0x30
 800f6dc:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800f6de:	2392      	movs	r3, #146	; 0x92
 800f6e0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800f6e2:	48c9      	ldr	r0, [pc, #804]	; (800fa08 <SVCCTL_InitCustomSvc+0x330>)
 800f6e4:	f7fc ff78 	bl	800c5d8 <SVCCTL_RegisterSvcHandler>
   *                              = 3
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors addded, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 3;
 800f6e8:	2303      	movs	r3, #3
 800f6ea:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_BATTERY_SERVICE_UUID(uuid.Char_UUID_128);
 800f6ec:	238f      	movs	r3, #143	; 0x8f
 800f6ee:	713b      	strb	r3, [r7, #4]
 800f6f0:	23e5      	movs	r3, #229	; 0xe5
 800f6f2:	717b      	strb	r3, [r7, #5]
 800f6f4:	23b3      	movs	r3, #179	; 0xb3
 800f6f6:	71bb      	strb	r3, [r7, #6]
 800f6f8:	23d5      	movs	r3, #213	; 0xd5
 800f6fa:	71fb      	strb	r3, [r7, #7]
 800f6fc:	232e      	movs	r3, #46	; 0x2e
 800f6fe:	723b      	strb	r3, [r7, #8]
 800f700:	237f      	movs	r3, #127	; 0x7f
 800f702:	727b      	strb	r3, [r7, #9]
 800f704:	234a      	movs	r3, #74	; 0x4a
 800f706:	72bb      	strb	r3, [r7, #10]
 800f708:	2398      	movs	r3, #152	; 0x98
 800f70a:	72fb      	strb	r3, [r7, #11]
 800f70c:	232a      	movs	r3, #42	; 0x2a
 800f70e:	733b      	strb	r3, [r7, #12]
 800f710:	2348      	movs	r3, #72	; 0x48
 800f712:	737b      	strb	r3, [r7, #13]
 800f714:	237a      	movs	r3, #122	; 0x7a
 800f716:	73bb      	strb	r3, [r7, #14]
 800f718:	23cc      	movs	r3, #204	; 0xcc
 800f71a:	73fb      	strb	r3, [r7, #15]
 800f71c:	230f      	movs	r3, #15
 800f71e:	743b      	strb	r3, [r7, #16]
 800f720:	2318      	movs	r3, #24
 800f722:	747b      	strb	r3, [r7, #17]
 800f724:	2300      	movs	r3, #0
 800f726:	74bb      	strb	r3, [r7, #18]
 800f728:	2300      	movs	r3, #0
 800f72a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800f72c:	7dbb      	ldrb	r3, [r7, #22]
 800f72e:	1d39      	adds	r1, r7, #4
 800f730:	4ab6      	ldr	r2, [pc, #728]	; (800fa0c <SVCCTL_InitCustomSvc+0x334>)
 800f732:	9200      	str	r2, [sp, #0]
 800f734:	2201      	movs	r2, #1
 800f736:	2002      	movs	r0, #2
 800f738:	f7fc f9c2 	bl	800bac0 <aci_gatt_add_service>
 800f73c:	4603      	mov	r3, r0
 800f73e:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomBat_SerHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800f740:	7dfb      	ldrb	r3, [r7, #23]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d00f      	beq.n	800f766 <SVCCTL_InitCustomSvc+0x8e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: Bat_ser, error code: 0x%x \n\r", ret);
 800f746:	48b2      	ldr	r0, [pc, #712]	; (800fa10 <SVCCTL_InitCustomSvc+0x338>)
 800f748:	f7fd fdc2 	bl	800d2d0 <DbgTraceGetFileName>
 800f74c:	4601      	mov	r1, r0
 800f74e:	f240 238a 	movw	r3, #650	; 0x28a
 800f752:	4ab0      	ldr	r2, [pc, #704]	; (800fa14 <SVCCTL_InitCustomSvc+0x33c>)
 800f754:	48b0      	ldr	r0, [pc, #704]	; (800fa18 <SVCCTL_InitCustomSvc+0x340>)
 800f756:	f002 fec5 	bl	80124e4 <iprintf>
 800f75a:	7dfb      	ldrb	r3, [r7, #23]
 800f75c:	4619      	mov	r1, r3
 800f75e:	48af      	ldr	r0, [pc, #700]	; (800fa1c <SVCCTL_InitCustomSvc+0x344>)
 800f760:	f002 fec0 	bl	80124e4 <iprintf>
 800f764:	e00c      	b.n	800f780 <SVCCTL_InitCustomSvc+0xa8>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: Bat_ser \n\r");
 800f766:	48aa      	ldr	r0, [pc, #680]	; (800fa10 <SVCCTL_InitCustomSvc+0x338>)
 800f768:	f7fd fdb2 	bl	800d2d0 <DbgTraceGetFileName>
 800f76c:	4601      	mov	r1, r0
 800f76e:	f240 238e 	movw	r3, #654	; 0x28e
 800f772:	4aa8      	ldr	r2, [pc, #672]	; (800fa14 <SVCCTL_InitCustomSvc+0x33c>)
 800f774:	48a8      	ldr	r0, [pc, #672]	; (800fa18 <SVCCTL_InitCustomSvc+0x340>)
 800f776:	f002 feb5 	bl	80124e4 <iprintf>
 800f77a:	48a9      	ldr	r0, [pc, #676]	; (800fa20 <SVCCTL_InitCustomSvc+0x348>)
 800f77c:	f002 feb2 	bl	80124e4 <iprintf>
  }

  /**
   *  level
   */
  COPY_LEVEL_UUID(uuid.Char_UUID_128);
 800f780:	2319      	movs	r3, #25
 800f782:	713b      	strb	r3, [r7, #4]
 800f784:	23ed      	movs	r3, #237	; 0xed
 800f786:	717b      	strb	r3, [r7, #5]
 800f788:	2382      	movs	r3, #130	; 0x82
 800f78a:	71bb      	strb	r3, [r7, #6]
 800f78c:	23ae      	movs	r3, #174	; 0xae
 800f78e:	71fb      	strb	r3, [r7, #7]
 800f790:	23ed      	movs	r3, #237	; 0xed
 800f792:	723b      	strb	r3, [r7, #8]
 800f794:	2321      	movs	r3, #33	; 0x21
 800f796:	727b      	strb	r3, [r7, #9]
 800f798:	234c      	movs	r3, #76	; 0x4c
 800f79a:	72bb      	strb	r3, [r7, #10]
 800f79c:	239d      	movs	r3, #157	; 0x9d
 800f79e:	72fb      	strb	r3, [r7, #11]
 800f7a0:	2341      	movs	r3, #65	; 0x41
 800f7a2:	733b      	strb	r3, [r7, #12]
 800f7a4:	2345      	movs	r3, #69	; 0x45
 800f7a6:	737b      	strb	r3, [r7, #13]
 800f7a8:	2322      	movs	r3, #34	; 0x22
 800f7aa:	73bb      	strb	r3, [r7, #14]
 800f7ac:	238e      	movs	r3, #142	; 0x8e
 800f7ae:	73fb      	strb	r3, [r7, #15]
 800f7b0:	2319      	movs	r3, #25
 800f7b2:	743b      	strb	r3, [r7, #16]
 800f7b4:	232a      	movs	r3, #42	; 0x2a
 800f7b6:	747b      	strb	r3, [r7, #17]
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	74bb      	strb	r3, [r7, #18]
 800f7bc:	2300      	movs	r3, #0
 800f7be:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomBat_SerHdle,
 800f7c0:	4b92      	ldr	r3, [pc, #584]	; (800fa0c <SVCCTL_InitCustomSvc+0x334>)
 800f7c2:	8818      	ldrh	r0, [r3, #0]
 800f7c4:	4b97      	ldr	r3, [pc, #604]	; (800fa24 <SVCCTL_InitCustomSvc+0x34c>)
 800f7c6:	781b      	ldrb	r3, [r3, #0]
 800f7c8:	b29b      	uxth	r3, r3
 800f7ca:	1d3a      	adds	r2, r7, #4
 800f7cc:	4996      	ldr	r1, [pc, #600]	; (800fa28 <SVCCTL_InitCustomSvc+0x350>)
 800f7ce:	9105      	str	r1, [sp, #20]
 800f7d0:	2100      	movs	r1, #0
 800f7d2:	9104      	str	r1, [sp, #16]
 800f7d4:	2110      	movs	r1, #16
 800f7d6:	9103      	str	r1, [sp, #12]
 800f7d8:	2104      	movs	r1, #4
 800f7da:	9102      	str	r1, [sp, #8]
 800f7dc:	2100      	movs	r1, #0
 800f7de:	9101      	str	r1, [sp, #4]
 800f7e0:	2102      	movs	r1, #2
 800f7e2:	9100      	str	r1, [sp, #0]
 800f7e4:	2102      	movs	r1, #2
 800f7e6:	f7fc fa41 	bl	800bc6c <aci_gatt_add_char>
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomLevelHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800f7ee:	7dfb      	ldrb	r3, [r7, #23]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d00f      	beq.n	800f814 <SVCCTL_InitCustomSvc+0x13c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : LEVEL, error code: 0x%x \n\r", ret);
 800f7f4:	4886      	ldr	r0, [pc, #536]	; (800fa10 <SVCCTL_InitCustomSvc+0x338>)
 800f7f6:	f7fd fd6b 	bl	800d2d0 <DbgTraceGetFileName>
 800f7fa:	4601      	mov	r1, r0
 800f7fc:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 800f800:	4a84      	ldr	r2, [pc, #528]	; (800fa14 <SVCCTL_InitCustomSvc+0x33c>)
 800f802:	4885      	ldr	r0, [pc, #532]	; (800fa18 <SVCCTL_InitCustomSvc+0x340>)
 800f804:	f002 fe6e 	bl	80124e4 <iprintf>
 800f808:	7dfb      	ldrb	r3, [r7, #23]
 800f80a:	4619      	mov	r1, r3
 800f80c:	4887      	ldr	r0, [pc, #540]	; (800fa2c <SVCCTL_InitCustomSvc+0x354>)
 800f80e:	f002 fe69 	bl	80124e4 <iprintf>
 800f812:	e00c      	b.n	800f82e <SVCCTL_InitCustomSvc+0x156>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : LEVEL \n\r");
 800f814:	487e      	ldr	r0, [pc, #504]	; (800fa10 <SVCCTL_InitCustomSvc+0x338>)
 800f816:	f7fd fd5b 	bl	800d2d0 <DbgTraceGetFileName>
 800f81a:	4601      	mov	r1, r0
 800f81c:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 800f820:	4a7c      	ldr	r2, [pc, #496]	; (800fa14 <SVCCTL_InitCustomSvc+0x33c>)
 800f822:	487d      	ldr	r0, [pc, #500]	; (800fa18 <SVCCTL_InitCustomSvc+0x340>)
 800f824:	f002 fe5e 	bl	80124e4 <iprintf>
 800f828:	4881      	ldr	r0, [pc, #516]	; (800fa30 <SVCCTL_InitCustomSvc+0x358>)
 800f82a:	f002 fe5b 	bl	80124e4 <iprintf>
   *                              = 14
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors addded, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 14;
 800f82e:	230e      	movs	r3, #14
 800f830:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_TEMPERATURE_UUID(uuid.Char_UUID_128);
 800f832:	233d      	movs	r3, #61	; 0x3d
 800f834:	713b      	strb	r3, [r7, #4]
 800f836:	2392      	movs	r3, #146	; 0x92
 800f838:	717b      	strb	r3, [r7, #5]
 800f83a:	23b4      	movs	r3, #180	; 0xb4
 800f83c:	71bb      	strb	r3, [r7, #6]
 800f83e:	2399      	movs	r3, #153	; 0x99
 800f840:	71fb      	strb	r3, [r7, #7]
 800f842:	238b      	movs	r3, #139	; 0x8b
 800f844:	723b      	strb	r3, [r7, #8]
 800f846:	2330      	movs	r3, #48	; 0x30
 800f848:	727b      	strb	r3, [r7, #9]
 800f84a:	23d1      	movs	r3, #209	; 0xd1
 800f84c:	72bb      	strb	r3, [r7, #10]
 800f84e:	23a0      	movs	r3, #160	; 0xa0
 800f850:	72fb      	strb	r3, [r7, #11]
 800f852:	2357      	movs	r3, #87	; 0x57
 800f854:	733b      	strb	r3, [r7, #12]
 800f856:	2344      	movs	r3, #68	; 0x44
 800f858:	737b      	strb	r3, [r7, #13]
 800f85a:	23a2      	movs	r3, #162	; 0xa2
 800f85c:	73bb      	strb	r3, [r7, #14]
 800f85e:	2393      	movs	r3, #147	; 0x93
 800f860:	73fb      	strb	r3, [r7, #15]
 800f862:	2312      	movs	r3, #18
 800f864:	743b      	strb	r3, [r7, #16]
 800f866:	2332      	movs	r3, #50	; 0x32
 800f868:	747b      	strb	r3, [r7, #17]
 800f86a:	23c8      	movs	r3, #200	; 0xc8
 800f86c:	74bb      	strb	r3, [r7, #18]
 800f86e:	2361      	movs	r3, #97	; 0x61
 800f870:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800f872:	7dbb      	ldrb	r3, [r7, #22]
 800f874:	1d39      	adds	r1, r7, #4
 800f876:	4a6f      	ldr	r2, [pc, #444]	; (800fa34 <SVCCTL_InitCustomSvc+0x35c>)
 800f878:	9200      	str	r2, [sp, #0]
 800f87a:	2201      	movs	r2, #1
 800f87c:	2002      	movs	r0, #2
 800f87e:	f7fc f91f 	bl	800bac0 <aci_gatt_add_service>
 800f882:	4603      	mov	r3, r0
 800f884:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomTempHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800f886:	7dfb      	ldrb	r3, [r7, #23]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d00f      	beq.n	800f8ac <SVCCTL_InitCustomSvc+0x1d4>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: temp, error code: 0x%x \n\r", ret);
 800f88c:	4860      	ldr	r0, [pc, #384]	; (800fa10 <SVCCTL_InitCustomSvc+0x338>)
 800f88e:	f7fd fd1f 	bl	800d2d0 <DbgTraceGetFileName>
 800f892:	4601      	mov	r1, r0
 800f894:	f240 23cd 	movw	r3, #717	; 0x2cd
 800f898:	4a5e      	ldr	r2, [pc, #376]	; (800fa14 <SVCCTL_InitCustomSvc+0x33c>)
 800f89a:	485f      	ldr	r0, [pc, #380]	; (800fa18 <SVCCTL_InitCustomSvc+0x340>)
 800f89c:	f002 fe22 	bl	80124e4 <iprintf>
 800f8a0:	7dfb      	ldrb	r3, [r7, #23]
 800f8a2:	4619      	mov	r1, r3
 800f8a4:	4864      	ldr	r0, [pc, #400]	; (800fa38 <SVCCTL_InitCustomSvc+0x360>)
 800f8a6:	f002 fe1d 	bl	80124e4 <iprintf>
 800f8aa:	e00c      	b.n	800f8c6 <SVCCTL_InitCustomSvc+0x1ee>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: temp \n\r");
 800f8ac:	4858      	ldr	r0, [pc, #352]	; (800fa10 <SVCCTL_InitCustomSvc+0x338>)
 800f8ae:	f7fd fd0f 	bl	800d2d0 <DbgTraceGetFileName>
 800f8b2:	4601      	mov	r1, r0
 800f8b4:	f240 23d1 	movw	r3, #721	; 0x2d1
 800f8b8:	4a56      	ldr	r2, [pc, #344]	; (800fa14 <SVCCTL_InitCustomSvc+0x33c>)
 800f8ba:	4857      	ldr	r0, [pc, #348]	; (800fa18 <SVCCTL_InitCustomSvc+0x340>)
 800f8bc:	f002 fe12 	bl	80124e4 <iprintf>
 800f8c0:	485e      	ldr	r0, [pc, #376]	; (800fa3c <SVCCTL_InitCustomSvc+0x364>)
 800f8c2:	f002 fe0f 	bl	80124e4 <iprintf>
  }

  /**
   *  IR_temperature
   */
  COPY_IR_TEMPERATURE_UUID(uuid.Char_UUID_128);
 800f8c6:	2353      	movs	r3, #83	; 0x53
 800f8c8:	713b      	strb	r3, [r7, #4]
 800f8ca:	23d5      	movs	r3, #213	; 0xd5
 800f8cc:	717b      	strb	r3, [r7, #5]
 800f8ce:	23da      	movs	r3, #218	; 0xda
 800f8d0:	71bb      	strb	r3, [r7, #6]
 800f8d2:	2348      	movs	r3, #72	; 0x48
 800f8d4:	71fb      	strb	r3, [r7, #7]
 800f8d6:	23f4      	movs	r3, #244	; 0xf4
 800f8d8:	723b      	strb	r3, [r7, #8]
 800f8da:	237c      	movs	r3, #124	; 0x7c
 800f8dc:	727b      	strb	r3, [r7, #9]
 800f8de:	23d8      	movs	r3, #216	; 0xd8
 800f8e0:	72bb      	strb	r3, [r7, #10]
 800f8e2:	238f      	movs	r3, #143	; 0x8f
 800f8e4:	72fb      	strb	r3, [r7, #11]
 800f8e6:	2360      	movs	r3, #96	; 0x60
 800f8e8:	733b      	strb	r3, [r7, #12]
 800f8ea:	2345      	movs	r3, #69	; 0x45
 800f8ec:	737b      	strb	r3, [r7, #13]
 800f8ee:	239b      	movs	r3, #155	; 0x9b
 800f8f0:	73bb      	strb	r3, [r7, #14]
 800f8f2:	2321      	movs	r3, #33	; 0x21
 800f8f4:	73fb      	strb	r3, [r7, #15]
 800f8f6:	2322      	movs	r3, #34	; 0x22
 800f8f8:	743b      	strb	r3, [r7, #16]
 800f8fa:	23c3      	movs	r3, #195	; 0xc3
 800f8fc:	747b      	strb	r3, [r7, #17]
 800f8fe:	230a      	movs	r3, #10
 800f900:	74bb      	strb	r3, [r7, #18]
 800f902:	233a      	movs	r3, #58	; 0x3a
 800f904:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomTempHdle,
 800f906:	4b41      	ldr	r3, [pc, #260]	; (800fa0c <SVCCTL_InitCustomSvc+0x334>)
 800f908:	8898      	ldrh	r0, [r3, #4]
 800f90a:	4b4d      	ldr	r3, [pc, #308]	; (800fa40 <SVCCTL_InitCustomSvc+0x368>)
 800f90c:	781b      	ldrb	r3, [r3, #0]
 800f90e:	b29b      	uxth	r3, r3
 800f910:	1d3a      	adds	r2, r7, #4
 800f912:	494c      	ldr	r1, [pc, #304]	; (800fa44 <SVCCTL_InitCustomSvc+0x36c>)
 800f914:	9105      	str	r1, [sp, #20]
 800f916:	2100      	movs	r1, #0
 800f918:	9104      	str	r1, [sp, #16]
 800f91a:	2110      	movs	r1, #16
 800f91c:	9103      	str	r1, [sp, #12]
 800f91e:	2104      	movs	r1, #4
 800f920:	9102      	str	r1, [sp, #8]
 800f922:	2101      	movs	r1, #1
 800f924:	9101      	str	r1, [sp, #4]
 800f926:	2110      	movs	r1, #16
 800f928:	9100      	str	r1, [sp, #0]
 800f92a:	2102      	movs	r1, #2
 800f92c:	f7fc f99e 	bl	800bc6c <aci_gatt_add_char>
 800f930:	4603      	mov	r3, r0
 800f932:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_AUTHEN_READ,
                          GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomIr_THdle));
  if (ret != BLE_STATUS_SUCCESS)
 800f934:	7dfb      	ldrb	r3, [r7, #23]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d00f      	beq.n	800f95a <SVCCTL_InitCustomSvc+0x282>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : IR_T, error code: 0x%x \n\r", ret);
 800f93a:	4835      	ldr	r0, [pc, #212]	; (800fa10 <SVCCTL_InitCustomSvc+0x338>)
 800f93c:	f7fd fcc8 	bl	800d2d0 <DbgTraceGetFileName>
 800f940:	4601      	mov	r1, r0
 800f942:	f240 23e3 	movw	r3, #739	; 0x2e3
 800f946:	4a33      	ldr	r2, [pc, #204]	; (800fa14 <SVCCTL_InitCustomSvc+0x33c>)
 800f948:	4833      	ldr	r0, [pc, #204]	; (800fa18 <SVCCTL_InitCustomSvc+0x340>)
 800f94a:	f002 fdcb 	bl	80124e4 <iprintf>
 800f94e:	7dfb      	ldrb	r3, [r7, #23]
 800f950:	4619      	mov	r1, r3
 800f952:	483d      	ldr	r0, [pc, #244]	; (800fa48 <SVCCTL_InitCustomSvc+0x370>)
 800f954:	f002 fdc6 	bl	80124e4 <iprintf>
 800f958:	e00c      	b.n	800f974 <SVCCTL_InitCustomSvc+0x29c>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : IR_T \n\r");
 800f95a:	482d      	ldr	r0, [pc, #180]	; (800fa10 <SVCCTL_InitCustomSvc+0x338>)
 800f95c:	f7fd fcb8 	bl	800d2d0 <DbgTraceGetFileName>
 800f960:	4601      	mov	r1, r0
 800f962:	f240 23e7 	movw	r3, #743	; 0x2e7
 800f966:	4a2b      	ldr	r2, [pc, #172]	; (800fa14 <SVCCTL_InitCustomSvc+0x33c>)
 800f968:	482b      	ldr	r0, [pc, #172]	; (800fa18 <SVCCTL_InitCustomSvc+0x340>)
 800f96a:	f002 fdbb 	bl	80124e4 <iprintf>
 800f96e:	4837      	ldr	r0, [pc, #220]	; (800fa4c <SVCCTL_InitCustomSvc+0x374>)
 800f970:	f002 fdb8 	bl	80124e4 <iprintf>

  /* USER CODE END SVCCTL_Init_Service2_Char1 */
  /**
   *  Analog_Temperature
   */
  COPY_ANALOG_TEMPERATURE_UUID(uuid.Char_UUID_128);
 800f974:	23d0      	movs	r3, #208	; 0xd0
 800f976:	713b      	strb	r3, [r7, #4]
 800f978:	2346      	movs	r3, #70	; 0x46
 800f97a:	717b      	strb	r3, [r7, #5]
 800f97c:	233a      	movs	r3, #58	; 0x3a
 800f97e:	71bb      	strb	r3, [r7, #6]
 800f980:	239a      	movs	r3, #154	; 0x9a
 800f982:	71fb      	strb	r3, [r7, #7]
 800f984:	237a      	movs	r3, #122	; 0x7a
 800f986:	723b      	strb	r3, [r7, #8]
 800f988:	2382      	movs	r3, #130	; 0x82
 800f98a:	727b      	strb	r3, [r7, #9]
 800f98c:	2303      	movs	r3, #3
 800f98e:	72bb      	strb	r3, [r7, #10]
 800f990:	238c      	movs	r3, #140	; 0x8c
 800f992:	72fb      	strb	r3, [r7, #11]
 800f994:	2304      	movs	r3, #4
 800f996:	733b      	strb	r3, [r7, #12]
 800f998:	234b      	movs	r3, #75	; 0x4b
 800f99a:	737b      	strb	r3, [r7, #13]
 800f99c:	2373      	movs	r3, #115	; 0x73
 800f99e:	73bb      	strb	r3, [r7, #14]
 800f9a0:	236a      	movs	r3, #106	; 0x6a
 800f9a2:	73fb      	strb	r3, [r7, #15]
 800f9a4:	23e2      	movs	r3, #226	; 0xe2
 800f9a6:	743b      	strb	r3, [r7, #16]
 800f9a8:	238c      	movs	r3, #140	; 0x8c
 800f9aa:	747b      	strb	r3, [r7, #17]
 800f9ac:	23ba      	movs	r3, #186	; 0xba
 800f9ae:	74bb      	strb	r3, [r7, #18]
 800f9b0:	235a      	movs	r3, #90	; 0x5a
 800f9b2:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomTempHdle,
 800f9b4:	4b15      	ldr	r3, [pc, #84]	; (800fa0c <SVCCTL_InitCustomSvc+0x334>)
 800f9b6:	8898      	ldrh	r0, [r3, #4]
 800f9b8:	4b25      	ldr	r3, [pc, #148]	; (800fa50 <SVCCTL_InitCustomSvc+0x378>)
 800f9ba:	781b      	ldrb	r3, [r3, #0]
 800f9bc:	b29b      	uxth	r3, r3
 800f9be:	1d3a      	adds	r2, r7, #4
 800f9c0:	4924      	ldr	r1, [pc, #144]	; (800fa54 <SVCCTL_InitCustomSvc+0x37c>)
 800f9c2:	9105      	str	r1, [sp, #20]
 800f9c4:	2100      	movs	r1, #0
 800f9c6:	9104      	str	r1, [sp, #16]
 800f9c8:	2110      	movs	r1, #16
 800f9ca:	9103      	str	r1, [sp, #12]
 800f9cc:	2104      	movs	r1, #4
 800f9ce:	9102      	str	r1, [sp, #8]
 800f9d0:	2101      	movs	r1, #1
 800f9d2:	9101      	str	r1, [sp, #4]
 800f9d4:	2102      	movs	r1, #2
 800f9d6:	9100      	str	r1, [sp, #0]
 800f9d8:	2102      	movs	r1, #2
 800f9da:	f7fc f947 	bl	800bc6c <aci_gatt_add_char>
 800f9de:	4603      	mov	r3, r0
 800f9e0:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_AUTHEN_READ,
                          GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomA_THdle));
  if (ret != BLE_STATUS_SUCCESS)
 800f9e2:	7dfb      	ldrb	r3, [r7, #23]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d039      	beq.n	800fa5c <SVCCTL_InitCustomSvc+0x384>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : A_T, error code: 0x%x \n\r", ret);
 800f9e8:	4809      	ldr	r0, [pc, #36]	; (800fa10 <SVCCTL_InitCustomSvc+0x338>)
 800f9ea:	f7fd fc71 	bl	800d2d0 <DbgTraceGetFileName>
 800f9ee:	4601      	mov	r1, r0
 800f9f0:	f240 23fd 	movw	r3, #765	; 0x2fd
 800f9f4:	4a07      	ldr	r2, [pc, #28]	; (800fa14 <SVCCTL_InitCustomSvc+0x33c>)
 800f9f6:	4808      	ldr	r0, [pc, #32]	; (800fa18 <SVCCTL_InitCustomSvc+0x340>)
 800f9f8:	f002 fd74 	bl	80124e4 <iprintf>
 800f9fc:	7dfb      	ldrb	r3, [r7, #23]
 800f9fe:	4619      	mov	r1, r3
 800fa00:	4815      	ldr	r0, [pc, #84]	; (800fa58 <SVCCTL_InitCustomSvc+0x380>)
 800fa02:	f002 fd6f 	bl	80124e4 <iprintf>
 800fa06:	e036      	b.n	800fa76 <SVCCTL_InitCustomSvc+0x39e>
 800fa08:	0800f3a5 	.word	0x0800f3a5
 800fa0c:	200006f0 	.word	0x200006f0
 800fa10:	08017288 	.word	0x08017288
 800fa14:	080183d4 	.word	0x080183d4
 800fa18:	080172a8 	.word	0x080172a8
 800fa1c:	080172bc 	.word	0x080172bc
 800fa20:	08017304 	.word	0x08017304
 800fa24:	2000005b 	.word	0x2000005b
 800fa28:	200006f2 	.word	0x200006f2
 800fa2c:	08017338 	.word	0x08017338
 800fa30:	0801737c 	.word	0x0801737c
 800fa34:	200006f4 	.word	0x200006f4
 800fa38:	080173b0 	.word	0x080173b0
 800fa3c:	080173f4 	.word	0x080173f4
 800fa40:	2000005c 	.word	0x2000005c
 800fa44:	200006f6 	.word	0x200006f6
 800fa48:	08017428 	.word	0x08017428
 800fa4c:	0801746c 	.word	0x0801746c
 800fa50:	2000005d 	.word	0x2000005d
 800fa54:	200006f8 	.word	0x200006f8
 800fa58:	080174a0 	.word	0x080174a0
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : A_T \n\r");
 800fa5c:	48b6      	ldr	r0, [pc, #728]	; (800fd38 <SVCCTL_InitCustomSvc+0x660>)
 800fa5e:	f7fd fc37 	bl	800d2d0 <DbgTraceGetFileName>
 800fa62:	4601      	mov	r1, r0
 800fa64:	f240 3301 	movw	r3, #769	; 0x301
 800fa68:	4ab4      	ldr	r2, [pc, #720]	; (800fd3c <SVCCTL_InitCustomSvc+0x664>)
 800fa6a:	48b5      	ldr	r0, [pc, #724]	; (800fd40 <SVCCTL_InitCustomSvc+0x668>)
 800fa6c:	f002 fd3a 	bl	80124e4 <iprintf>
 800fa70:	48b4      	ldr	r0, [pc, #720]	; (800fd44 <SVCCTL_InitCustomSvc+0x66c>)
 800fa72:	f002 fd37 	bl	80124e4 <iprintf>

  /* USER CODE END SVCCTL_Init_Service2_Char2 */
  /**
   *  Set_Temp
   */
  COPY_SET_TEMP_UUID(uuid.Char_UUID_128);
 800fa76:	238c      	movs	r3, #140	; 0x8c
 800fa78:	713b      	strb	r3, [r7, #4]
 800fa7a:	23df      	movs	r3, #223	; 0xdf
 800fa7c:	717b      	strb	r3, [r7, #5]
 800fa7e:	23a8      	movs	r3, #168	; 0xa8
 800fa80:	71bb      	strb	r3, [r7, #6]
 800fa82:	23c4      	movs	r3, #196	; 0xc4
 800fa84:	71fb      	strb	r3, [r7, #7]
 800fa86:	2308      	movs	r3, #8
 800fa88:	723b      	strb	r3, [r7, #8]
 800fa8a:	23b4      	movs	r3, #180	; 0xb4
 800fa8c:	727b      	strb	r3, [r7, #9]
 800fa8e:	23df      	movs	r3, #223	; 0xdf
 800fa90:	72bb      	strb	r3, [r7, #10]
 800fa92:	23a9      	movs	r3, #169	; 0xa9
 800fa94:	72fb      	strb	r3, [r7, #11]
 800fa96:	23b8      	movs	r3, #184	; 0xb8
 800fa98:	733b      	strb	r3, [r7, #12]
 800fa9a:	2343      	movs	r3, #67	; 0x43
 800fa9c:	737b      	strb	r3, [r7, #13]
 800fa9e:	2345      	movs	r3, #69	; 0x45
 800faa0:	73bb      	strb	r3, [r7, #14]
 800faa2:	2307      	movs	r3, #7
 800faa4:	73fb      	strb	r3, [r7, #15]
 800faa6:	23c1      	movs	r3, #193	; 0xc1
 800faa8:	743b      	strb	r3, [r7, #16]
 800faaa:	234b      	movs	r3, #75	; 0x4b
 800faac:	747b      	strb	r3, [r7, #17]
 800faae:	2324      	movs	r3, #36	; 0x24
 800fab0:	74bb      	strb	r3, [r7, #18]
 800fab2:	230a      	movs	r3, #10
 800fab4:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomTempHdle,
 800fab6:	4ba4      	ldr	r3, [pc, #656]	; (800fd48 <SVCCTL_InitCustomSvc+0x670>)
 800fab8:	8898      	ldrh	r0, [r3, #4]
 800faba:	4ba4      	ldr	r3, [pc, #656]	; (800fd4c <SVCCTL_InitCustomSvc+0x674>)
 800fabc:	781b      	ldrb	r3, [r3, #0]
 800fabe:	b29b      	uxth	r3, r3
 800fac0:	1d3a      	adds	r2, r7, #4
 800fac2:	49a3      	ldr	r1, [pc, #652]	; (800fd50 <SVCCTL_InitCustomSvc+0x678>)
 800fac4:	9105      	str	r1, [sp, #20]
 800fac6:	2100      	movs	r1, #0
 800fac8:	9104      	str	r1, [sp, #16]
 800faca:	2110      	movs	r1, #16
 800facc:	9103      	str	r1, [sp, #12]
 800face:	2101      	movs	r1, #1
 800fad0:	9102      	str	r1, [sp, #8]
 800fad2:	2108      	movs	r1, #8
 800fad4:	9101      	str	r1, [sp, #4]
 800fad6:	2104      	movs	r1, #4
 800fad8:	9100      	str	r1, [sp, #0]
 800fada:	2102      	movs	r1, #2
 800fadc:	f7fc f8c6 	bl	800bc6c <aci_gatt_add_char>
 800fae0:	4603      	mov	r3, r0
 800fae2:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_AUTHEN_WRITE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomS_THdle));
  if (ret != BLE_STATUS_SUCCESS)
 800fae4:	7dfb      	ldrb	r3, [r7, #23]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d00f      	beq.n	800fb0a <SVCCTL_InitCustomSvc+0x432>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : S_T, error code: 0x%x \n\r", ret);
 800faea:	4893      	ldr	r0, [pc, #588]	; (800fd38 <SVCCTL_InitCustomSvc+0x660>)
 800faec:	f7fd fbf0 	bl	800d2d0 <DbgTraceGetFileName>
 800faf0:	4601      	mov	r1, r0
 800faf2:	f240 3317 	movw	r3, #791	; 0x317
 800faf6:	4a91      	ldr	r2, [pc, #580]	; (800fd3c <SVCCTL_InitCustomSvc+0x664>)
 800faf8:	4891      	ldr	r0, [pc, #580]	; (800fd40 <SVCCTL_InitCustomSvc+0x668>)
 800fafa:	f002 fcf3 	bl	80124e4 <iprintf>
 800fafe:	7dfb      	ldrb	r3, [r7, #23]
 800fb00:	4619      	mov	r1, r3
 800fb02:	4894      	ldr	r0, [pc, #592]	; (800fd54 <SVCCTL_InitCustomSvc+0x67c>)
 800fb04:	f002 fcee 	bl	80124e4 <iprintf>
 800fb08:	e00c      	b.n	800fb24 <SVCCTL_InitCustomSvc+0x44c>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : S_T \n\r");
 800fb0a:	488b      	ldr	r0, [pc, #556]	; (800fd38 <SVCCTL_InitCustomSvc+0x660>)
 800fb0c:	f7fd fbe0 	bl	800d2d0 <DbgTraceGetFileName>
 800fb10:	4601      	mov	r1, r0
 800fb12:	f240 331b 	movw	r3, #795	; 0x31b
 800fb16:	4a89      	ldr	r2, [pc, #548]	; (800fd3c <SVCCTL_InitCustomSvc+0x664>)
 800fb18:	4889      	ldr	r0, [pc, #548]	; (800fd40 <SVCCTL_InitCustomSvc+0x668>)
 800fb1a:	f002 fce3 	bl	80124e4 <iprintf>
 800fb1e:	488e      	ldr	r0, [pc, #568]	; (800fd58 <SVCCTL_InitCustomSvc+0x680>)
 800fb20:	f002 fce0 	bl	80124e4 <iprintf>

  /* USER CODE END SVCCTL_Init_Service2_Char3 */
  /**
   *  Log_Temp
   */
  COPY_LOG_TEMP_UUID(uuid.Char_UUID_128);
 800fb24:	2363      	movs	r3, #99	; 0x63
 800fb26:	713b      	strb	r3, [r7, #4]
 800fb28:	23bf      	movs	r3, #191	; 0xbf
 800fb2a:	717b      	strb	r3, [r7, #5]
 800fb2c:	23d4      	movs	r3, #212	; 0xd4
 800fb2e:	71bb      	strb	r3, [r7, #6]
 800fb30:	2343      	movs	r3, #67	; 0x43
 800fb32:	71fb      	strb	r3, [r7, #7]
 800fb34:	2305      	movs	r3, #5
 800fb36:	723b      	strb	r3, [r7, #8]
 800fb38:	238b      	movs	r3, #139	; 0x8b
 800fb3a:	727b      	strb	r3, [r7, #9]
 800fb3c:	231d      	movs	r3, #29
 800fb3e:	72bb      	strb	r3, [r7, #10]
 800fb40:	238b      	movs	r3, #139	; 0x8b
 800fb42:	72fb      	strb	r3, [r7, #11]
 800fb44:	23a4      	movs	r3, #164	; 0xa4
 800fb46:	733b      	strb	r3, [r7, #12]
 800fb48:	2344      	movs	r3, #68	; 0x44
 800fb4a:	737b      	strb	r3, [r7, #13]
 800fb4c:	2316      	movs	r3, #22
 800fb4e:	73bb      	strb	r3, [r7, #14]
 800fb50:	236a      	movs	r3, #106	; 0x6a
 800fb52:	73fb      	strb	r3, [r7, #15]
 800fb54:	23c1      	movs	r3, #193	; 0xc1
 800fb56:	743b      	strb	r3, [r7, #16]
 800fb58:	23e7      	movs	r3, #231	; 0xe7
 800fb5a:	747b      	strb	r3, [r7, #17]
 800fb5c:	2372      	movs	r3, #114	; 0x72
 800fb5e:	74bb      	strb	r3, [r7, #18]
 800fb60:	23d5      	movs	r3, #213	; 0xd5
 800fb62:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomTempHdle,
 800fb64:	4b78      	ldr	r3, [pc, #480]	; (800fd48 <SVCCTL_InitCustomSvc+0x670>)
 800fb66:	8898      	ldrh	r0, [r3, #4]
 800fb68:	4b7c      	ldr	r3, [pc, #496]	; (800fd5c <SVCCTL_InitCustomSvc+0x684>)
 800fb6a:	781b      	ldrb	r3, [r3, #0]
 800fb6c:	b29b      	uxth	r3, r3
 800fb6e:	1d3a      	adds	r2, r7, #4
 800fb70:	497b      	ldr	r1, [pc, #492]	; (800fd60 <SVCCTL_InitCustomSvc+0x688>)
 800fb72:	9105      	str	r1, [sp, #20]
 800fb74:	2100      	movs	r1, #0
 800fb76:	9104      	str	r1, [sp, #16]
 800fb78:	2110      	movs	r1, #16
 800fb7a:	9103      	str	r1, [sp, #12]
 800fb7c:	2104      	movs	r1, #4
 800fb7e:	9102      	str	r1, [sp, #8]
 800fb80:	2101      	movs	r1, #1
 800fb82:	9101      	str	r1, [sp, #4]
 800fb84:	2110      	movs	r1, #16
 800fb86:	9100      	str	r1, [sp, #0]
 800fb88:	2102      	movs	r1, #2
 800fb8a:	f7fc f86f 	bl	800bc6c <aci_gatt_add_char>
 800fb8e:	4603      	mov	r3, r0
 800fb90:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_AUTHEN_READ,
                          GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomL_THdle));
  if (ret != BLE_STATUS_SUCCESS)
 800fb92:	7dfb      	ldrb	r3, [r7, #23]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d00f      	beq.n	800fbb8 <SVCCTL_InitCustomSvc+0x4e0>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : L_T, error code: 0x%x \n\r", ret);
 800fb98:	4867      	ldr	r0, [pc, #412]	; (800fd38 <SVCCTL_InitCustomSvc+0x660>)
 800fb9a:	f7fd fb99 	bl	800d2d0 <DbgTraceGetFileName>
 800fb9e:	4601      	mov	r1, r0
 800fba0:	f240 3331 	movw	r3, #817	; 0x331
 800fba4:	4a65      	ldr	r2, [pc, #404]	; (800fd3c <SVCCTL_InitCustomSvc+0x664>)
 800fba6:	4866      	ldr	r0, [pc, #408]	; (800fd40 <SVCCTL_InitCustomSvc+0x668>)
 800fba8:	f002 fc9c 	bl	80124e4 <iprintf>
 800fbac:	7dfb      	ldrb	r3, [r7, #23]
 800fbae:	4619      	mov	r1, r3
 800fbb0:	486c      	ldr	r0, [pc, #432]	; (800fd64 <SVCCTL_InitCustomSvc+0x68c>)
 800fbb2:	f002 fc97 	bl	80124e4 <iprintf>
 800fbb6:	e00c      	b.n	800fbd2 <SVCCTL_InitCustomSvc+0x4fa>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : L_T \n\r");
 800fbb8:	485f      	ldr	r0, [pc, #380]	; (800fd38 <SVCCTL_InitCustomSvc+0x660>)
 800fbba:	f7fd fb89 	bl	800d2d0 <DbgTraceGetFileName>
 800fbbe:	4601      	mov	r1, r0
 800fbc0:	f240 3335 	movw	r3, #821	; 0x335
 800fbc4:	4a5d      	ldr	r2, [pc, #372]	; (800fd3c <SVCCTL_InitCustomSvc+0x664>)
 800fbc6:	485e      	ldr	r0, [pc, #376]	; (800fd40 <SVCCTL_InitCustomSvc+0x668>)
 800fbc8:	f002 fc8c 	bl	80124e4 <iprintf>
 800fbcc:	4866      	ldr	r0, [pc, #408]	; (800fd68 <SVCCTL_InitCustomSvc+0x690>)
 800fbce:	f002 fc89 	bl	80124e4 <iprintf>

  /* USER CODE END SVCCTL_Init_Service2_Char4 */
  /**
   *  Range_Notification
   */
  COPY_RANGE_NOTIFICATION_UUID(uuid.Char_UUID_128);
 800fbd2:	23b3      	movs	r3, #179	; 0xb3
 800fbd4:	713b      	strb	r3, [r7, #4]
 800fbd6:	234d      	movs	r3, #77	; 0x4d
 800fbd8:	717b      	strb	r3, [r7, #5]
 800fbda:	235b      	movs	r3, #91	; 0x5b
 800fbdc:	71bb      	strb	r3, [r7, #6]
 800fbde:	23fa      	movs	r3, #250	; 0xfa
 800fbe0:	71fb      	strb	r3, [r7, #7]
 800fbe2:	23b1      	movs	r3, #177	; 0xb1
 800fbe4:	723b      	strb	r3, [r7, #8]
 800fbe6:	235a      	movs	r3, #90	; 0x5a
 800fbe8:	727b      	strb	r3, [r7, #9]
 800fbea:	2345      	movs	r3, #69	; 0x45
 800fbec:	72bb      	strb	r3, [r7, #10]
 800fbee:	23b9      	movs	r3, #185	; 0xb9
 800fbf0:	72fb      	strb	r3, [r7, #11]
 800fbf2:	2313      	movs	r3, #19
 800fbf4:	733b      	strb	r3, [r7, #12]
 800fbf6:	234f      	movs	r3, #79	; 0x4f
 800fbf8:	737b      	strb	r3, [r7, #13]
 800fbfa:	236c      	movs	r3, #108	; 0x6c
 800fbfc:	73bb      	strb	r3, [r7, #14]
 800fbfe:	23d9      	movs	r3, #217	; 0xd9
 800fc00:	73fb      	strb	r3, [r7, #15]
 800fc02:	2307      	movs	r3, #7
 800fc04:	743b      	strb	r3, [r7, #16]
 800fc06:	2348      	movs	r3, #72	; 0x48
 800fc08:	747b      	strb	r3, [r7, #17]
 800fc0a:	231a      	movs	r3, #26
 800fc0c:	74bb      	strb	r3, [r7, #18]
 800fc0e:	235a      	movs	r3, #90	; 0x5a
 800fc10:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomTempHdle,
 800fc12:	4b4d      	ldr	r3, [pc, #308]	; (800fd48 <SVCCTL_InitCustomSvc+0x670>)
 800fc14:	8898      	ldrh	r0, [r3, #4]
 800fc16:	4b55      	ldr	r3, [pc, #340]	; (800fd6c <SVCCTL_InitCustomSvc+0x694>)
 800fc18:	781b      	ldrb	r3, [r3, #0]
 800fc1a:	b29b      	uxth	r3, r3
 800fc1c:	1d3a      	adds	r2, r7, #4
 800fc1e:	4954      	ldr	r1, [pc, #336]	; (800fd70 <SVCCTL_InitCustomSvc+0x698>)
 800fc20:	9105      	str	r1, [sp, #20]
 800fc22:	2100      	movs	r1, #0
 800fc24:	9104      	str	r1, [sp, #16]
 800fc26:	2110      	movs	r1, #16
 800fc28:	9103      	str	r1, [sp, #12]
 800fc2a:	2104      	movs	r1, #4
 800fc2c:	9102      	str	r1, [sp, #8]
 800fc2e:	2101      	movs	r1, #1
 800fc30:	9101      	str	r1, [sp, #4]
 800fc32:	2110      	movs	r1, #16
 800fc34:	9100      	str	r1, [sp, #0]
 800fc36:	2102      	movs	r1, #2
 800fc38:	f7fc f818 	bl	800bc6c <aci_gatt_add_char>
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_AUTHEN_READ,
                          GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomR_NHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800fc40:	7dfb      	ldrb	r3, [r7, #23]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d00f      	beq.n	800fc66 <SVCCTL_InitCustomSvc+0x58e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : R_N, error code: 0x%x \n\r", ret);
 800fc46:	483c      	ldr	r0, [pc, #240]	; (800fd38 <SVCCTL_InitCustomSvc+0x660>)
 800fc48:	f7fd fb42 	bl	800d2d0 <DbgTraceGetFileName>
 800fc4c:	4601      	mov	r1, r0
 800fc4e:	f240 334b 	movw	r3, #843	; 0x34b
 800fc52:	4a3a      	ldr	r2, [pc, #232]	; (800fd3c <SVCCTL_InitCustomSvc+0x664>)
 800fc54:	483a      	ldr	r0, [pc, #232]	; (800fd40 <SVCCTL_InitCustomSvc+0x668>)
 800fc56:	f002 fc45 	bl	80124e4 <iprintf>
 800fc5a:	7dfb      	ldrb	r3, [r7, #23]
 800fc5c:	4619      	mov	r1, r3
 800fc5e:	4845      	ldr	r0, [pc, #276]	; (800fd74 <SVCCTL_InitCustomSvc+0x69c>)
 800fc60:	f002 fc40 	bl	80124e4 <iprintf>
 800fc64:	e00c      	b.n	800fc80 <SVCCTL_InitCustomSvc+0x5a8>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : R_N \n\r");
 800fc66:	4834      	ldr	r0, [pc, #208]	; (800fd38 <SVCCTL_InitCustomSvc+0x660>)
 800fc68:	f7fd fb32 	bl	800d2d0 <DbgTraceGetFileName>
 800fc6c:	4601      	mov	r1, r0
 800fc6e:	f240 334f 	movw	r3, #847	; 0x34f
 800fc72:	4a32      	ldr	r2, [pc, #200]	; (800fd3c <SVCCTL_InitCustomSvc+0x664>)
 800fc74:	4832      	ldr	r0, [pc, #200]	; (800fd40 <SVCCTL_InitCustomSvc+0x668>)
 800fc76:	f002 fc35 	bl	80124e4 <iprintf>
 800fc7a:	483f      	ldr	r0, [pc, #252]	; (800fd78 <SVCCTL_InitCustomSvc+0x6a0>)
 800fc7c:	f002 fc32 	bl	80124e4 <iprintf>
   *                              = 7
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors addded, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 7;
 800fc80:	2307      	movs	r3, #7
 800fc82:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  uuid.Char_UUID_16 = 0x5b56;
 800fc84:	f645 3356 	movw	r3, #23382	; 0x5b56
 800fc88:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_service(UUID_TYPE_16,
 800fc8a:	7dbb      	ldrb	r3, [r7, #22]
 800fc8c:	1d39      	adds	r1, r7, #4
 800fc8e:	4a3b      	ldr	r2, [pc, #236]	; (800fd7c <SVCCTL_InitCustomSvc+0x6a4>)
 800fc90:	9200      	str	r2, [sp, #0]
 800fc92:	2201      	movs	r2, #1
 800fc94:	2001      	movs	r0, #1
 800fc96:	f7fb ff13 	bl	800bac0 <aci_gatt_add_service>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomUv_SHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800fc9e:	7dfb      	ldrb	r3, [r7, #23]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d00f      	beq.n	800fcc4 <SVCCTL_InitCustomSvc+0x5ec>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: UV_S, error code: 0x%x \n\r", ret);
 800fca4:	4824      	ldr	r0, [pc, #144]	; (800fd38 <SVCCTL_InitCustomSvc+0x660>)
 800fca6:	f7fd fb13 	bl	800d2d0 <DbgTraceGetFileName>
 800fcaa:	4601      	mov	r1, r0
 800fcac:	f44f 735d 	mov.w	r3, #884	; 0x374
 800fcb0:	4a22      	ldr	r2, [pc, #136]	; (800fd3c <SVCCTL_InitCustomSvc+0x664>)
 800fcb2:	4823      	ldr	r0, [pc, #140]	; (800fd40 <SVCCTL_InitCustomSvc+0x668>)
 800fcb4:	f002 fc16 	bl	80124e4 <iprintf>
 800fcb8:	7dfb      	ldrb	r3, [r7, #23]
 800fcba:	4619      	mov	r1, r3
 800fcbc:	4830      	ldr	r0, [pc, #192]	; (800fd80 <SVCCTL_InitCustomSvc+0x6a8>)
 800fcbe:	f002 fc11 	bl	80124e4 <iprintf>
 800fcc2:	e00c      	b.n	800fcde <SVCCTL_InitCustomSvc+0x606>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: UV_S \n\r");
 800fcc4:	481c      	ldr	r0, [pc, #112]	; (800fd38 <SVCCTL_InitCustomSvc+0x660>)
 800fcc6:	f7fd fb03 	bl	800d2d0 <DbgTraceGetFileName>
 800fcca:	4601      	mov	r1, r0
 800fccc:	f44f 735e 	mov.w	r3, #888	; 0x378
 800fcd0:	4a1a      	ldr	r2, [pc, #104]	; (800fd3c <SVCCTL_InitCustomSvc+0x664>)
 800fcd2:	481b      	ldr	r0, [pc, #108]	; (800fd40 <SVCCTL_InitCustomSvc+0x668>)
 800fcd4:	f002 fc06 	bl	80124e4 <iprintf>
 800fcd8:	482a      	ldr	r0, [pc, #168]	; (800fd84 <SVCCTL_InitCustomSvc+0x6ac>)
 800fcda:	f002 fc03 	bl	80124e4 <iprintf>
  }

  /**
   *  UV_Value
   */
  uuid.Char_UUID_16 = 0x5e30;
 800fcde:	f645 6330 	movw	r3, #24112	; 0x5e30
 800fce2:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_char(CustomContext.CustomUv_SHdle,
 800fce4:	4b18      	ldr	r3, [pc, #96]	; (800fd48 <SVCCTL_InitCustomSvc+0x670>)
 800fce6:	8a18      	ldrh	r0, [r3, #16]
 800fce8:	4b27      	ldr	r3, [pc, #156]	; (800fd88 <SVCCTL_InitCustomSvc+0x6b0>)
 800fcea:	781b      	ldrb	r3, [r3, #0]
 800fcec:	b29b      	uxth	r3, r3
 800fcee:	1d3a      	adds	r2, r7, #4
 800fcf0:	4926      	ldr	r1, [pc, #152]	; (800fd8c <SVCCTL_InitCustomSvc+0x6b4>)
 800fcf2:	9105      	str	r1, [sp, #20]
 800fcf4:	2100      	movs	r1, #0
 800fcf6:	9104      	str	r1, [sp, #16]
 800fcf8:	2110      	movs	r1, #16
 800fcfa:	9103      	str	r1, [sp, #12]
 800fcfc:	2104      	movs	r1, #4
 800fcfe:	9102      	str	r1, [sp, #8]
 800fd00:	2101      	movs	r1, #1
 800fd02:	9101      	str	r1, [sp, #4]
 800fd04:	2110      	movs	r1, #16
 800fd06:	9100      	str	r1, [sp, #0]
 800fd08:	2101      	movs	r1, #1
 800fd0a:	f7fb ffaf 	bl	800bc6c <aci_gatt_add_char>
 800fd0e:	4603      	mov	r3, r0
 800fd10:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_AUTHEN_READ,
                          GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomUv_VHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800fd12:	7dfb      	ldrb	r3, [r7, #23]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d03d      	beq.n	800fd94 <SVCCTL_InitCustomSvc+0x6bc>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : UV_V, error code: 0x%x \n\r", ret);
 800fd18:	4807      	ldr	r0, [pc, #28]	; (800fd38 <SVCCTL_InitCustomSvc+0x660>)
 800fd1a:	f7fd fad9 	bl	800d2d0 <DbgTraceGetFileName>
 800fd1e:	4601      	mov	r1, r0
 800fd20:	f240 338a 	movw	r3, #906	; 0x38a
 800fd24:	4a05      	ldr	r2, [pc, #20]	; (800fd3c <SVCCTL_InitCustomSvc+0x664>)
 800fd26:	4806      	ldr	r0, [pc, #24]	; (800fd40 <SVCCTL_InitCustomSvc+0x668>)
 800fd28:	f002 fbdc 	bl	80124e4 <iprintf>
 800fd2c:	7dfb      	ldrb	r3, [r7, #23]
 800fd2e:	4619      	mov	r1, r3
 800fd30:	4817      	ldr	r0, [pc, #92]	; (800fd90 <SVCCTL_InitCustomSvc+0x6b8>)
 800fd32:	f002 fbd7 	bl	80124e4 <iprintf>
 800fd36:	e03a      	b.n	800fdae <SVCCTL_InitCustomSvc+0x6d6>
 800fd38:	08017288 	.word	0x08017288
 800fd3c:	080183d4 	.word	0x080183d4
 800fd40:	080172a8 	.word	0x080172a8
 800fd44:	080174e4 	.word	0x080174e4
 800fd48:	200006f0 	.word	0x200006f0
 800fd4c:	2000005e 	.word	0x2000005e
 800fd50:	200006fa 	.word	0x200006fa
 800fd54:	08017514 	.word	0x08017514
 800fd58:	08017558 	.word	0x08017558
 800fd5c:	2000005f 	.word	0x2000005f
 800fd60:	200006fc 	.word	0x200006fc
 800fd64:	08017588 	.word	0x08017588
 800fd68:	080175cc 	.word	0x080175cc
 800fd6c:	20000060 	.word	0x20000060
 800fd70:	200006fe 	.word	0x200006fe
 800fd74:	080175fc 	.word	0x080175fc
 800fd78:	08017640 	.word	0x08017640
 800fd7c:	20000700 	.word	0x20000700
 800fd80:	08017670 	.word	0x08017670
 800fd84:	080176b4 	.word	0x080176b4
 800fd88:	20000061 	.word	0x20000061
 800fd8c:	20000702 	.word	0x20000702
 800fd90:	080176e8 	.word	0x080176e8
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : UV_V \n\r");
 800fd94:	48b0      	ldr	r0, [pc, #704]	; (8010058 <SVCCTL_InitCustomSvc+0x980>)
 800fd96:	f7fd fa9b 	bl	800d2d0 <DbgTraceGetFileName>
 800fd9a:	4601      	mov	r1, r0
 800fd9c:	f240 338e 	movw	r3, #910	; 0x38e
 800fda0:	4aae      	ldr	r2, [pc, #696]	; (801005c <SVCCTL_InitCustomSvc+0x984>)
 800fda2:	48af      	ldr	r0, [pc, #700]	; (8010060 <SVCCTL_InitCustomSvc+0x988>)
 800fda4:	f002 fb9e 	bl	80124e4 <iprintf>
 800fda8:	48ae      	ldr	r0, [pc, #696]	; (8010064 <SVCCTL_InitCustomSvc+0x98c>)
 800fdaa:	f002 fb9b 	bl	80124e4 <iprintf>

  /* USER CODE END SVCCTL_Init_Service3_Char1 */
  /**
   *  UV_Log
   */
  uuid.Char_UUID_16 = 0x5f84;
 800fdae:	f645 7384 	movw	r3, #24452	; 0x5f84
 800fdb2:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_char(CustomContext.CustomUv_SHdle,
 800fdb4:	4bac      	ldr	r3, [pc, #688]	; (8010068 <SVCCTL_InitCustomSvc+0x990>)
 800fdb6:	8a18      	ldrh	r0, [r3, #16]
 800fdb8:	4bac      	ldr	r3, [pc, #688]	; (801006c <SVCCTL_InitCustomSvc+0x994>)
 800fdba:	781b      	ldrb	r3, [r3, #0]
 800fdbc:	b29b      	uxth	r3, r3
 800fdbe:	1d3a      	adds	r2, r7, #4
 800fdc0:	49ab      	ldr	r1, [pc, #684]	; (8010070 <SVCCTL_InitCustomSvc+0x998>)
 800fdc2:	9105      	str	r1, [sp, #20]
 800fdc4:	2101      	movs	r1, #1
 800fdc6:	9104      	str	r1, [sp, #16]
 800fdc8:	2110      	movs	r1, #16
 800fdca:	9103      	str	r1, [sp, #12]
 800fdcc:	2104      	movs	r1, #4
 800fdce:	9102      	str	r1, [sp, #8]
 800fdd0:	2101      	movs	r1, #1
 800fdd2:	9101      	str	r1, [sp, #4]
 800fdd4:	2110      	movs	r1, #16
 800fdd6:	9100      	str	r1, [sp, #0]
 800fdd8:	2101      	movs	r1, #1
 800fdda:	f7fb ff47 	bl	800bc6c <aci_gatt_add_char>
 800fdde:	4603      	mov	r3, r0
 800fde0:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_AUTHEN_READ,
                          GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomUv_LHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800fde2:	7dfb      	ldrb	r3, [r7, #23]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d00f      	beq.n	800fe08 <SVCCTL_InitCustomSvc+0x730>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : UV_L, error code: 0x%x \n\r", ret);
 800fde8:	489b      	ldr	r0, [pc, #620]	; (8010058 <SVCCTL_InitCustomSvc+0x980>)
 800fdea:	f7fd fa71 	bl	800d2d0 <DbgTraceGetFileName>
 800fdee:	4601      	mov	r1, r0
 800fdf0:	f44f 7369 	mov.w	r3, #932	; 0x3a4
 800fdf4:	4a99      	ldr	r2, [pc, #612]	; (801005c <SVCCTL_InitCustomSvc+0x984>)
 800fdf6:	489a      	ldr	r0, [pc, #616]	; (8010060 <SVCCTL_InitCustomSvc+0x988>)
 800fdf8:	f002 fb74 	bl	80124e4 <iprintf>
 800fdfc:	7dfb      	ldrb	r3, [r7, #23]
 800fdfe:	4619      	mov	r1, r3
 800fe00:	489c      	ldr	r0, [pc, #624]	; (8010074 <SVCCTL_InitCustomSvc+0x99c>)
 800fe02:	f002 fb6f 	bl	80124e4 <iprintf>
 800fe06:	e00c      	b.n	800fe22 <SVCCTL_InitCustomSvc+0x74a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : UV_L \n\r");
 800fe08:	4893      	ldr	r0, [pc, #588]	; (8010058 <SVCCTL_InitCustomSvc+0x980>)
 800fe0a:	f7fd fa61 	bl	800d2d0 <DbgTraceGetFileName>
 800fe0e:	4601      	mov	r1, r0
 800fe10:	f44f 736a 	mov.w	r3, #936	; 0x3a8
 800fe14:	4a91      	ldr	r2, [pc, #580]	; (801005c <SVCCTL_InitCustomSvc+0x984>)
 800fe16:	4892      	ldr	r0, [pc, #584]	; (8010060 <SVCCTL_InitCustomSvc+0x988>)
 800fe18:	f002 fb64 	bl	80124e4 <iprintf>
 800fe1c:	4896      	ldr	r0, [pc, #600]	; (8010078 <SVCCTL_InitCustomSvc+0x9a0>)
 800fe1e:	f002 fb61 	bl	80124e4 <iprintf>
   *                              = 11
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors addded, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 11;
 800fe22:	230b      	movs	r3, #11
 800fe24:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  uuid.Char_UUID_16 = 0x60ba;
 800fe26:	f246 03ba 	movw	r3, #24762	; 0x60ba
 800fe2a:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_service(UUID_TYPE_16,
 800fe2c:	7dbb      	ldrb	r3, [r7, #22]
 800fe2e:	1d39      	adds	r1, r7, #4
 800fe30:	4a92      	ldr	r2, [pc, #584]	; (801007c <SVCCTL_InitCustomSvc+0x9a4>)
 800fe32:	9200      	str	r2, [sp, #0]
 800fe34:	2201      	movs	r2, #1
 800fe36:	2001      	movs	r0, #1
 800fe38:	f7fb fe42 	bl	800bac0 <aci_gatt_add_service>
 800fe3c:	4603      	mov	r3, r0
 800fe3e:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomUtHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800fe40:	7dfb      	ldrb	r3, [r7, #23]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d00f      	beq.n	800fe66 <SVCCTL_InitCustomSvc+0x78e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: UT, error code: 0x%x \n\r", ret);
 800fe46:	4884      	ldr	r0, [pc, #528]	; (8010058 <SVCCTL_InitCustomSvc+0x980>)
 800fe48:	f7fd fa42 	bl	800d2d0 <DbgTraceGetFileName>
 800fe4c:	4601      	mov	r1, r0
 800fe4e:	f240 33cf 	movw	r3, #975	; 0x3cf
 800fe52:	4a82      	ldr	r2, [pc, #520]	; (801005c <SVCCTL_InitCustomSvc+0x984>)
 800fe54:	4882      	ldr	r0, [pc, #520]	; (8010060 <SVCCTL_InitCustomSvc+0x988>)
 800fe56:	f002 fb45 	bl	80124e4 <iprintf>
 800fe5a:	7dfb      	ldrb	r3, [r7, #23]
 800fe5c:	4619      	mov	r1, r3
 800fe5e:	4888      	ldr	r0, [pc, #544]	; (8010080 <SVCCTL_InitCustomSvc+0x9a8>)
 800fe60:	f002 fb40 	bl	80124e4 <iprintf>
 800fe64:	e00c      	b.n	800fe80 <SVCCTL_InitCustomSvc+0x7a8>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: UT \n\r");
 800fe66:	487c      	ldr	r0, [pc, #496]	; (8010058 <SVCCTL_InitCustomSvc+0x980>)
 800fe68:	f7fd fa32 	bl	800d2d0 <DbgTraceGetFileName>
 800fe6c:	4601      	mov	r1, r0
 800fe6e:	f240 33d3 	movw	r3, #979	; 0x3d3
 800fe72:	4a7a      	ldr	r2, [pc, #488]	; (801005c <SVCCTL_InitCustomSvc+0x984>)
 800fe74:	487a      	ldr	r0, [pc, #488]	; (8010060 <SVCCTL_InitCustomSvc+0x988>)
 800fe76:	f002 fb35 	bl	80124e4 <iprintf>
 800fe7a:	4882      	ldr	r0, [pc, #520]	; (8010084 <SVCCTL_InitCustomSvc+0x9ac>)
 800fe7c:	f002 fb32 	bl	80124e4 <iprintf>
  }

  /**
   *  Acclerometer
   */
  uuid.Char_UUID_16 = 0x642a;
 800fe80:	f246 432a 	movw	r3, #25642	; 0x642a
 800fe84:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_char(CustomContext.CustomUtHdle,
 800fe86:	4b78      	ldr	r3, [pc, #480]	; (8010068 <SVCCTL_InitCustomSvc+0x990>)
 800fe88:	8ad8      	ldrh	r0, [r3, #22]
 800fe8a:	4b7f      	ldr	r3, [pc, #508]	; (8010088 <SVCCTL_InitCustomSvc+0x9b0>)
 800fe8c:	781b      	ldrb	r3, [r3, #0]
 800fe8e:	b29b      	uxth	r3, r3
 800fe90:	1d3a      	adds	r2, r7, #4
 800fe92:	497e      	ldr	r1, [pc, #504]	; (801008c <SVCCTL_InitCustomSvc+0x9b4>)
 800fe94:	9105      	str	r1, [sp, #20]
 800fe96:	2100      	movs	r1, #0
 800fe98:	9104      	str	r1, [sp, #16]
 800fe9a:	2110      	movs	r1, #16
 800fe9c:	9103      	str	r1, [sp, #12]
 800fe9e:	2104      	movs	r1, #4
 800fea0:	9102      	str	r1, [sp, #8]
 800fea2:	2101      	movs	r1, #1
 800fea4:	9101      	str	r1, [sp, #4]
 800fea6:	2102      	movs	r1, #2
 800fea8:	9100      	str	r1, [sp, #0]
 800feaa:	2101      	movs	r1, #1
 800feac:	f7fb fede 	bl	800bc6c <aci_gatt_add_char>
 800feb0:	4603      	mov	r3, r0
 800feb2:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_AUTHEN_READ,
                          GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomAclxHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800feb4:	7dfb      	ldrb	r3, [r7, #23]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d00f      	beq.n	800feda <SVCCTL_InitCustomSvc+0x802>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : ACLX, error code: 0x%x \n\r", ret);
 800feba:	4867      	ldr	r0, [pc, #412]	; (8010058 <SVCCTL_InitCustomSvc+0x980>)
 800febc:	f7fd fa08 	bl	800d2d0 <DbgTraceGetFileName>
 800fec0:	4601      	mov	r1, r0
 800fec2:	f240 33e5 	movw	r3, #997	; 0x3e5
 800fec6:	4a65      	ldr	r2, [pc, #404]	; (801005c <SVCCTL_InitCustomSvc+0x984>)
 800fec8:	4865      	ldr	r0, [pc, #404]	; (8010060 <SVCCTL_InitCustomSvc+0x988>)
 800feca:	f002 fb0b 	bl	80124e4 <iprintf>
 800fece:	7dfb      	ldrb	r3, [r7, #23]
 800fed0:	4619      	mov	r1, r3
 800fed2:	486f      	ldr	r0, [pc, #444]	; (8010090 <SVCCTL_InitCustomSvc+0x9b8>)
 800fed4:	f002 fb06 	bl	80124e4 <iprintf>
 800fed8:	e00c      	b.n	800fef4 <SVCCTL_InitCustomSvc+0x81c>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : ACLX \n\r");
 800feda:	485f      	ldr	r0, [pc, #380]	; (8010058 <SVCCTL_InitCustomSvc+0x980>)
 800fedc:	f7fd f9f8 	bl	800d2d0 <DbgTraceGetFileName>
 800fee0:	4601      	mov	r1, r0
 800fee2:	f240 33e9 	movw	r3, #1001	; 0x3e9
 800fee6:	4a5d      	ldr	r2, [pc, #372]	; (801005c <SVCCTL_InitCustomSvc+0x984>)
 800fee8:	485d      	ldr	r0, [pc, #372]	; (8010060 <SVCCTL_InitCustomSvc+0x988>)
 800feea:	f002 fafb 	bl	80124e4 <iprintf>
 800feee:	4869      	ldr	r0, [pc, #420]	; (8010094 <SVCCTL_InitCustomSvc+0x9bc>)
 800fef0:	f002 faf8 	bl	80124e4 <iprintf>

  /* USER CODE END SVCCTL_Init_Service4_Char1 */
  /**
   *  EOC
   */
  uuid.Char_UUID_16 = 0x6556;
 800fef4:	f246 5356 	movw	r3, #25942	; 0x6556
 800fef8:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_char(CustomContext.CustomUtHdle,
 800fefa:	4b5b      	ldr	r3, [pc, #364]	; (8010068 <SVCCTL_InitCustomSvc+0x990>)
 800fefc:	8ad8      	ldrh	r0, [r3, #22]
 800fefe:	4b66      	ldr	r3, [pc, #408]	; (8010098 <SVCCTL_InitCustomSvc+0x9c0>)
 800ff00:	781b      	ldrb	r3, [r3, #0]
 800ff02:	b29b      	uxth	r3, r3
 800ff04:	1d3a      	adds	r2, r7, #4
 800ff06:	4965      	ldr	r1, [pc, #404]	; (801009c <SVCCTL_InitCustomSvc+0x9c4>)
 800ff08:	9105      	str	r1, [sp, #20]
 800ff0a:	2100      	movs	r1, #0
 800ff0c:	9104      	str	r1, [sp, #16]
 800ff0e:	2110      	movs	r1, #16
 800ff10:	9103      	str	r1, [sp, #12]
 800ff12:	2104      	movs	r1, #4
 800ff14:	9102      	str	r1, [sp, #8]
 800ff16:	2101      	movs	r1, #1
 800ff18:	9101      	str	r1, [sp, #4]
 800ff1a:	2110      	movs	r1, #16
 800ff1c:	9100      	str	r1, [sp, #0]
 800ff1e:	2101      	movs	r1, #1
 800ff20:	f7fb fea4 	bl	800bc6c <aci_gatt_add_char>
 800ff24:	4603      	mov	r3, r0
 800ff26:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_AUTHEN_READ,
                          GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomEcHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800ff28:	7dfb      	ldrb	r3, [r7, #23]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d00f      	beq.n	800ff4e <SVCCTL_InitCustomSvc+0x876>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : EC, error code: 0x%x \n\r", ret);
 800ff2e:	484a      	ldr	r0, [pc, #296]	; (8010058 <SVCCTL_InitCustomSvc+0x980>)
 800ff30:	f7fd f9ce 	bl	800d2d0 <DbgTraceGetFileName>
 800ff34:	4601      	mov	r1, r0
 800ff36:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800ff3a:	4a48      	ldr	r2, [pc, #288]	; (801005c <SVCCTL_InitCustomSvc+0x984>)
 800ff3c:	4848      	ldr	r0, [pc, #288]	; (8010060 <SVCCTL_InitCustomSvc+0x988>)
 800ff3e:	f002 fad1 	bl	80124e4 <iprintf>
 800ff42:	7dfb      	ldrb	r3, [r7, #23]
 800ff44:	4619      	mov	r1, r3
 800ff46:	4856      	ldr	r0, [pc, #344]	; (80100a0 <SVCCTL_InitCustomSvc+0x9c8>)
 800ff48:	f002 facc 	bl	80124e4 <iprintf>
 800ff4c:	e00c      	b.n	800ff68 <SVCCTL_InitCustomSvc+0x890>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : EC \n\r");
 800ff4e:	4842      	ldr	r0, [pc, #264]	; (8010058 <SVCCTL_InitCustomSvc+0x980>)
 800ff50:	f7fd f9be 	bl	800d2d0 <DbgTraceGetFileName>
 800ff54:	4601      	mov	r1, r0
 800ff56:	f240 4303 	movw	r3, #1027	; 0x403
 800ff5a:	4a40      	ldr	r2, [pc, #256]	; (801005c <SVCCTL_InitCustomSvc+0x984>)
 800ff5c:	4840      	ldr	r0, [pc, #256]	; (8010060 <SVCCTL_InitCustomSvc+0x988>)
 800ff5e:	f002 fac1 	bl	80124e4 <iprintf>
 800ff62:	4850      	ldr	r0, [pc, #320]	; (80100a4 <SVCCTL_InitCustomSvc+0x9cc>)
 800ff64:	f002 fabe 	bl	80124e4 <iprintf>

  /* USER CODE END SVCCTL_Init_Service4_Char2 */
  /**
   *  PWR
   */
  uuid.Char_UUID_16 = 0x6682;
 800ff68:	f246 6382 	movw	r3, #26242	; 0x6682
 800ff6c:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_char(CustomContext.CustomUtHdle,
 800ff6e:	4b3e      	ldr	r3, [pc, #248]	; (8010068 <SVCCTL_InitCustomSvc+0x990>)
 800ff70:	8ad8      	ldrh	r0, [r3, #22]
 800ff72:	4b4d      	ldr	r3, [pc, #308]	; (80100a8 <SVCCTL_InitCustomSvc+0x9d0>)
 800ff74:	781b      	ldrb	r3, [r3, #0]
 800ff76:	b29b      	uxth	r3, r3
 800ff78:	1d3a      	adds	r2, r7, #4
 800ff7a:	494c      	ldr	r1, [pc, #304]	; (80100ac <SVCCTL_InitCustomSvc+0x9d4>)
 800ff7c:	9105      	str	r1, [sp, #20]
 800ff7e:	2100      	movs	r1, #0
 800ff80:	9104      	str	r1, [sp, #16]
 800ff82:	2110      	movs	r1, #16
 800ff84:	9103      	str	r1, [sp, #12]
 800ff86:	2107      	movs	r1, #7
 800ff88:	9102      	str	r1, [sp, #8]
 800ff8a:	2101      	movs	r1, #1
 800ff8c:	9101      	str	r1, [sp, #4]
 800ff8e:	2110      	movs	r1, #16
 800ff90:	9100      	str	r1, [sp, #0]
 800ff92:	2101      	movs	r1, #1
 800ff94:	f7fb fe6a 	bl	800bc6c <aci_gatt_add_char>
 800ff98:	4603      	mov	r3, r0
 800ff9a:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_AUTHEN_READ,
                          GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomPrHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800ff9c:	7dfb      	ldrb	r3, [r7, #23]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d00f      	beq.n	800ffc2 <SVCCTL_InitCustomSvc+0x8ea>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : PR, error code: 0x%x \n\r", ret);
 800ffa2:	482d      	ldr	r0, [pc, #180]	; (8010058 <SVCCTL_InitCustomSvc+0x980>)
 800ffa4:	f7fd f994 	bl	800d2d0 <DbgTraceGetFileName>
 800ffa8:	4601      	mov	r1, r0
 800ffaa:	f240 4319 	movw	r3, #1049	; 0x419
 800ffae:	4a2b      	ldr	r2, [pc, #172]	; (801005c <SVCCTL_InitCustomSvc+0x984>)
 800ffb0:	482b      	ldr	r0, [pc, #172]	; (8010060 <SVCCTL_InitCustomSvc+0x988>)
 800ffb2:	f002 fa97 	bl	80124e4 <iprintf>
 800ffb6:	7dfb      	ldrb	r3, [r7, #23]
 800ffb8:	4619      	mov	r1, r3
 800ffba:	483d      	ldr	r0, [pc, #244]	; (80100b0 <SVCCTL_InitCustomSvc+0x9d8>)
 800ffbc:	f002 fa92 	bl	80124e4 <iprintf>
 800ffc0:	e00c      	b.n	800ffdc <SVCCTL_InitCustomSvc+0x904>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : PR \n\r");
 800ffc2:	4825      	ldr	r0, [pc, #148]	; (8010058 <SVCCTL_InitCustomSvc+0x980>)
 800ffc4:	f7fd f984 	bl	800d2d0 <DbgTraceGetFileName>
 800ffc8:	4601      	mov	r1, r0
 800ffca:	f240 431d 	movw	r3, #1053	; 0x41d
 800ffce:	4a23      	ldr	r2, [pc, #140]	; (801005c <SVCCTL_InitCustomSvc+0x984>)
 800ffd0:	4823      	ldr	r0, [pc, #140]	; (8010060 <SVCCTL_InitCustomSvc+0x988>)
 800ffd2:	f002 fa87 	bl	80124e4 <iprintf>
 800ffd6:	4837      	ldr	r0, [pc, #220]	; (80100b4 <SVCCTL_InitCustomSvc+0x9dc>)
 800ffd8:	f002 fa84 	bl	80124e4 <iprintf>

  /* USER CODE END SVCCTL_Init_Service4_Char3 */
  /**
   *  Time
   */
  uuid.Char_UUID_16 = 0x6786;
 800ffdc:	f246 7386 	movw	r3, #26502	; 0x6786
 800ffe0:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_char(CustomContext.CustomUtHdle,
 800ffe2:	4b21      	ldr	r3, [pc, #132]	; (8010068 <SVCCTL_InitCustomSvc+0x990>)
 800ffe4:	8ad8      	ldrh	r0, [r3, #22]
 800ffe6:	4b34      	ldr	r3, [pc, #208]	; (80100b8 <SVCCTL_InitCustomSvc+0x9e0>)
 800ffe8:	781b      	ldrb	r3, [r3, #0]
 800ffea:	b29b      	uxth	r3, r3
 800ffec:	1d3a      	adds	r2, r7, #4
 800ffee:	4933      	ldr	r1, [pc, #204]	; (80100bc <SVCCTL_InitCustomSvc+0x9e4>)
 800fff0:	9105      	str	r1, [sp, #20]
 800fff2:	2100      	movs	r1, #0
 800fff4:	9104      	str	r1, [sp, #16]
 800fff6:	2110      	movs	r1, #16
 800fff8:	9103      	str	r1, [sp, #12]
 800fffa:	2105      	movs	r1, #5
 800fffc:	9102      	str	r1, [sp, #8]
 800fffe:	2109      	movs	r1, #9
 8010000:	9101      	str	r1, [sp, #4]
 8010002:	2106      	movs	r1, #6
 8010004:	9100      	str	r1, [sp, #0]
 8010006:	2101      	movs	r1, #1
 8010008:	f7fb fe30 	bl	800bc6c <aci_gatt_add_char>
 801000c:	4603      	mov	r3, r0
 801000e:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_AUTHEN_READ | ATTR_PERMISSION_AUTHEN_WRITE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomTdHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8010010:	7dfb      	ldrb	r3, [r7, #23]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d00f      	beq.n	8010036 <SVCCTL_InitCustomSvc+0x95e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : TD, error code: 0x%x \n\r", ret);
 8010016:	4810      	ldr	r0, [pc, #64]	; (8010058 <SVCCTL_InitCustomSvc+0x980>)
 8010018:	f7fd f95a 	bl	800d2d0 <DbgTraceGetFileName>
 801001c:	4601      	mov	r1, r0
 801001e:	f240 4333 	movw	r3, #1075	; 0x433
 8010022:	4a0e      	ldr	r2, [pc, #56]	; (801005c <SVCCTL_InitCustomSvc+0x984>)
 8010024:	480e      	ldr	r0, [pc, #56]	; (8010060 <SVCCTL_InitCustomSvc+0x988>)
 8010026:	f002 fa5d 	bl	80124e4 <iprintf>
 801002a:	7dfb      	ldrb	r3, [r7, #23]
 801002c:	4619      	mov	r1, r3
 801002e:	4824      	ldr	r0, [pc, #144]	; (80100c0 <SVCCTL_InitCustomSvc+0x9e8>)
 8010030:	f002 fa58 	bl	80124e4 <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8010034:	e00d      	b.n	8010052 <SVCCTL_InitCustomSvc+0x97a>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : TD \n\r");
 8010036:	4808      	ldr	r0, [pc, #32]	; (8010058 <SVCCTL_InitCustomSvc+0x980>)
 8010038:	f7fd f94a 	bl	800d2d0 <DbgTraceGetFileName>
 801003c:	4601      	mov	r1, r0
 801003e:	f240 4337 	movw	r3, #1079	; 0x437
 8010042:	4a06      	ldr	r2, [pc, #24]	; (801005c <SVCCTL_InitCustomSvc+0x984>)
 8010044:	4806      	ldr	r0, [pc, #24]	; (8010060 <SVCCTL_InitCustomSvc+0x988>)
 8010046:	f002 fa4d 	bl	80124e4 <iprintf>
 801004a:	481e      	ldr	r0, [pc, #120]	; (80100c4 <SVCCTL_InitCustomSvc+0x9ec>)
 801004c:	f002 fa4a 	bl	80124e4 <iprintf>
  return;
 8010050:	bf00      	nop
}
 8010052:	3718      	adds	r7, #24
 8010054:	46bd      	mov	sp, r7
 8010056:	bd80      	pop	{r7, pc}
 8010058:	08017288 	.word	0x08017288
 801005c:	080183d4 	.word	0x080183d4
 8010060:	080172a8 	.word	0x080172a8
 8010064:	0801772c 	.word	0x0801772c
 8010068:	200006f0 	.word	0x200006f0
 801006c:	20000062 	.word	0x20000062
 8010070:	20000704 	.word	0x20000704
 8010074:	08017760 	.word	0x08017760
 8010078:	080177a4 	.word	0x080177a4
 801007c:	20000706 	.word	0x20000706
 8010080:	080177d8 	.word	0x080177d8
 8010084:	0801781c 	.word	0x0801781c
 8010088:	20000063 	.word	0x20000063
 801008c:	20000708 	.word	0x20000708
 8010090:	0801784c 	.word	0x0801784c
 8010094:	08017890 	.word	0x08017890
 8010098:	20000064 	.word	0x20000064
 801009c:	2000070a 	.word	0x2000070a
 80100a0:	080178c4 	.word	0x080178c4
 80100a4:	08017908 	.word	0x08017908
 80100a8:	20000065 	.word	0x20000065
 80100ac:	2000070c 	.word	0x2000070c
 80100b0:	08017938 	.word	0x08017938
 80100b4:	0801797c 	.word	0x0801797c
 80100b8:	20000066 	.word	0x20000066
 80100bc:	2000070e 	.word	0x2000070e
 80100c0:	080179ac 	.word	0x080179ac
 80100c4:	080179f0 	.word	0x080179f0

080100c8 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b086      	sub	sp, #24
 80100cc:	af02      	add	r7, sp, #8
 80100ce:	4603      	mov	r3, r0
 80100d0:	6039      	str	r1, [r7, #0]
 80100d2:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80100d4:	2392      	movs	r3, #146	; 0x92
 80100d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 80100d8:	79fb      	ldrb	r3, [r7, #7]
 80100da:	2b0b      	cmp	r3, #11
 80100dc:	f200 8283 	bhi.w	80105e6 <Custom_STM_App_Update_Char+0x51e>
 80100e0:	a201      	add	r2, pc, #4	; (adr r2, 80100e8 <Custom_STM_App_Update_Char+0x20>)
 80100e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100e6:	bf00      	nop
 80100e8:	08010119 	.word	0x08010119
 80100ec:	08010177 	.word	0x08010177
 80100f0:	080101d5 	.word	0x080101d5
 80100f4:	08010233 	.word	0x08010233
 80100f8:	08010291 	.word	0x08010291
 80100fc:	080102ef 	.word	0x080102ef
 8010100:	0801034d 	.word	0x0801034d
 8010104:	08010411 	.word	0x08010411
 8010108:	0801046f 	.word	0x0801046f
 801010c:	080104cd 	.word	0x080104cd
 8010110:	0801052b 	.word	0x0801052b
 8010114:	08010589 	.word	0x08010589
  {

    case CUSTOM_STM_LEVEL:
      ret = aci_gatt_update_char_value(CustomContext.CustomBat_SerHdle,
 8010118:	4ba4      	ldr	r3, [pc, #656]	; (80103ac <Custom_STM_App_Update_Char+0x2e4>)
 801011a:	8818      	ldrh	r0, [r3, #0]
 801011c:	4ba3      	ldr	r3, [pc, #652]	; (80103ac <Custom_STM_App_Update_Char+0x2e4>)
 801011e:	8859      	ldrh	r1, [r3, #2]
 8010120:	4ba3      	ldr	r3, [pc, #652]	; (80103b0 <Custom_STM_App_Update_Char+0x2e8>)
 8010122:	781a      	ldrb	r2, [r3, #0]
 8010124:	683b      	ldr	r3, [r7, #0]
 8010126:	9300      	str	r3, [sp, #0]
 8010128:	4613      	mov	r3, r2
 801012a:	2200      	movs	r2, #0
 801012c:	f7fb fea6 	bl	800be7c <aci_gatt_update_char_value>
 8010130:	4603      	mov	r3, r0
 8010132:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomLevelHdle,
                                       0, /* charValOffset */
                                       SizeLevel, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 8010134:	7bfb      	ldrb	r3, [r7, #15]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d00f      	beq.n	801015a <Custom_STM_App_Update_Char+0x92>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value LEVEL command, result : 0x%x \n\r", ret);
 801013a:	489e      	ldr	r0, [pc, #632]	; (80103b4 <Custom_STM_App_Update_Char+0x2ec>)
 801013c:	f7fd f8c8 	bl	800d2d0 <DbgTraceGetFileName>
 8010140:	4601      	mov	r1, r0
 8010142:	f240 435e 	movw	r3, #1118	; 0x45e
 8010146:	4a9c      	ldr	r2, [pc, #624]	; (80103b8 <Custom_STM_App_Update_Char+0x2f0>)
 8010148:	489c      	ldr	r0, [pc, #624]	; (80103bc <Custom_STM_App_Update_Char+0x2f4>)
 801014a:	f002 f9cb 	bl	80124e4 <iprintf>
 801014e:	7bfb      	ldrb	r3, [r7, #15]
 8010150:	4619      	mov	r1, r3
 8010152:	489b      	ldr	r0, [pc, #620]	; (80103c0 <Custom_STM_App_Update_Char+0x2f8>)
 8010154:	f002 f9c6 	bl	80124e4 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value LEVEL command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_1*/
      break;
 8010158:	e246      	b.n	80105e8 <Custom_STM_App_Update_Char+0x520>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value LEVEL command\n\r");
 801015a:	4896      	ldr	r0, [pc, #600]	; (80103b4 <Custom_STM_App_Update_Char+0x2ec>)
 801015c:	f7fd f8b8 	bl	800d2d0 <DbgTraceGetFileName>
 8010160:	4601      	mov	r1, r0
 8010162:	f240 4362 	movw	r3, #1122	; 0x462
 8010166:	4a94      	ldr	r2, [pc, #592]	; (80103b8 <Custom_STM_App_Update_Char+0x2f0>)
 8010168:	4894      	ldr	r0, [pc, #592]	; (80103bc <Custom_STM_App_Update_Char+0x2f4>)
 801016a:	f002 f9bb 	bl	80124e4 <iprintf>
 801016e:	4895      	ldr	r0, [pc, #596]	; (80103c4 <Custom_STM_App_Update_Char+0x2fc>)
 8010170:	f002 f9b8 	bl	80124e4 <iprintf>
      break;
 8010174:	e238      	b.n	80105e8 <Custom_STM_App_Update_Char+0x520>

    case CUSTOM_STM_IR_T:
      ret = aci_gatt_update_char_value(CustomContext.CustomTempHdle,
 8010176:	4b8d      	ldr	r3, [pc, #564]	; (80103ac <Custom_STM_App_Update_Char+0x2e4>)
 8010178:	8898      	ldrh	r0, [r3, #4]
 801017a:	4b8c      	ldr	r3, [pc, #560]	; (80103ac <Custom_STM_App_Update_Char+0x2e4>)
 801017c:	88d9      	ldrh	r1, [r3, #6]
 801017e:	4b92      	ldr	r3, [pc, #584]	; (80103c8 <Custom_STM_App_Update_Char+0x300>)
 8010180:	781a      	ldrb	r2, [r3, #0]
 8010182:	683b      	ldr	r3, [r7, #0]
 8010184:	9300      	str	r3, [sp, #0]
 8010186:	4613      	mov	r3, r2
 8010188:	2200      	movs	r2, #0
 801018a:	f7fb fe77 	bl	800be7c <aci_gatt_update_char_value>
 801018e:	4603      	mov	r3, r0
 8010190:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomIr_THdle,
                                       0, /* charValOffset */
                                       SizeIr_T, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 8010192:	7bfb      	ldrb	r3, [r7, #15]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d00f      	beq.n	80101b8 <Custom_STM_App_Update_Char+0xf0>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value IR_T command, result : 0x%x \n\r", ret);
 8010198:	4886      	ldr	r0, [pc, #536]	; (80103b4 <Custom_STM_App_Update_Char+0x2ec>)
 801019a:	f7fd f899 	bl	800d2d0 <DbgTraceGetFileName>
 801019e:	4601      	mov	r1, r0
 80101a0:	f240 4371 	movw	r3, #1137	; 0x471
 80101a4:	4a84      	ldr	r2, [pc, #528]	; (80103b8 <Custom_STM_App_Update_Char+0x2f0>)
 80101a6:	4885      	ldr	r0, [pc, #532]	; (80103bc <Custom_STM_App_Update_Char+0x2f4>)
 80101a8:	f002 f99c 	bl	80124e4 <iprintf>
 80101ac:	7bfb      	ldrb	r3, [r7, #15]
 80101ae:	4619      	mov	r1, r3
 80101b0:	4886      	ldr	r0, [pc, #536]	; (80103cc <Custom_STM_App_Update_Char+0x304>)
 80101b2:	f002 f997 	bl	80124e4 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value IR_T command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_2_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_1*/
      break;
 80101b6:	e217      	b.n	80105e8 <Custom_STM_App_Update_Char+0x520>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value IR_T command\n\r");
 80101b8:	487e      	ldr	r0, [pc, #504]	; (80103b4 <Custom_STM_App_Update_Char+0x2ec>)
 80101ba:	f7fd f889 	bl	800d2d0 <DbgTraceGetFileName>
 80101be:	4601      	mov	r1, r0
 80101c0:	f240 4375 	movw	r3, #1141	; 0x475
 80101c4:	4a7c      	ldr	r2, [pc, #496]	; (80103b8 <Custom_STM_App_Update_Char+0x2f0>)
 80101c6:	487d      	ldr	r0, [pc, #500]	; (80103bc <Custom_STM_App_Update_Char+0x2f4>)
 80101c8:	f002 f98c 	bl	80124e4 <iprintf>
 80101cc:	4880      	ldr	r0, [pc, #512]	; (80103d0 <Custom_STM_App_Update_Char+0x308>)
 80101ce:	f002 f989 	bl	80124e4 <iprintf>
      break;
 80101d2:	e209      	b.n	80105e8 <Custom_STM_App_Update_Char+0x520>

    case CUSTOM_STM_A_T:
      ret = aci_gatt_update_char_value(CustomContext.CustomTempHdle,
 80101d4:	4b75      	ldr	r3, [pc, #468]	; (80103ac <Custom_STM_App_Update_Char+0x2e4>)
 80101d6:	8898      	ldrh	r0, [r3, #4]
 80101d8:	4b74      	ldr	r3, [pc, #464]	; (80103ac <Custom_STM_App_Update_Char+0x2e4>)
 80101da:	8919      	ldrh	r1, [r3, #8]
 80101dc:	4b7d      	ldr	r3, [pc, #500]	; (80103d4 <Custom_STM_App_Update_Char+0x30c>)
 80101de:	781a      	ldrb	r2, [r3, #0]
 80101e0:	683b      	ldr	r3, [r7, #0]
 80101e2:	9300      	str	r3, [sp, #0]
 80101e4:	4613      	mov	r3, r2
 80101e6:	2200      	movs	r2, #0
 80101e8:	f7fb fe48 	bl	800be7c <aci_gatt_update_char_value>
 80101ec:	4603      	mov	r3, r0
 80101ee:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomA_THdle,
                                       0, /* charValOffset */
                                       SizeA_T, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 80101f0:	7bfb      	ldrb	r3, [r7, #15]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d00f      	beq.n	8010216 <Custom_STM_App_Update_Char+0x14e>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value A_T command, result : 0x%x \n\r", ret);
 80101f6:	486f      	ldr	r0, [pc, #444]	; (80103b4 <Custom_STM_App_Update_Char+0x2ec>)
 80101f8:	f7fd f86a 	bl	800d2d0 <DbgTraceGetFileName>
 80101fc:	4601      	mov	r1, r0
 80101fe:	f240 4384 	movw	r3, #1156	; 0x484
 8010202:	4a6d      	ldr	r2, [pc, #436]	; (80103b8 <Custom_STM_App_Update_Char+0x2f0>)
 8010204:	486d      	ldr	r0, [pc, #436]	; (80103bc <Custom_STM_App_Update_Char+0x2f4>)
 8010206:	f002 f96d 	bl	80124e4 <iprintf>
 801020a:	7bfb      	ldrb	r3, [r7, #15]
 801020c:	4619      	mov	r1, r3
 801020e:	4872      	ldr	r0, [pc, #456]	; (80103d8 <Custom_STM_App_Update_Char+0x310>)
 8010210:	f002 f968 	bl	80124e4 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value A_T command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_2_Char_2*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_2*/
      break;
 8010214:	e1e8      	b.n	80105e8 <Custom_STM_App_Update_Char+0x520>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value A_T command\n\r");
 8010216:	4867      	ldr	r0, [pc, #412]	; (80103b4 <Custom_STM_App_Update_Char+0x2ec>)
 8010218:	f7fd f85a 	bl	800d2d0 <DbgTraceGetFileName>
 801021c:	4601      	mov	r1, r0
 801021e:	f44f 6391 	mov.w	r3, #1160	; 0x488
 8010222:	4a65      	ldr	r2, [pc, #404]	; (80103b8 <Custom_STM_App_Update_Char+0x2f0>)
 8010224:	4865      	ldr	r0, [pc, #404]	; (80103bc <Custom_STM_App_Update_Char+0x2f4>)
 8010226:	f002 f95d 	bl	80124e4 <iprintf>
 801022a:	486c      	ldr	r0, [pc, #432]	; (80103dc <Custom_STM_App_Update_Char+0x314>)
 801022c:	f002 f95a 	bl	80124e4 <iprintf>
      break;
 8010230:	e1da      	b.n	80105e8 <Custom_STM_App_Update_Char+0x520>

    case CUSTOM_STM_S_T:
      ret = aci_gatt_update_char_value(CustomContext.CustomTempHdle,
 8010232:	4b5e      	ldr	r3, [pc, #376]	; (80103ac <Custom_STM_App_Update_Char+0x2e4>)
 8010234:	8898      	ldrh	r0, [r3, #4]
 8010236:	4b5d      	ldr	r3, [pc, #372]	; (80103ac <Custom_STM_App_Update_Char+0x2e4>)
 8010238:	8959      	ldrh	r1, [r3, #10]
 801023a:	4b69      	ldr	r3, [pc, #420]	; (80103e0 <Custom_STM_App_Update_Char+0x318>)
 801023c:	781a      	ldrb	r2, [r3, #0]
 801023e:	683b      	ldr	r3, [r7, #0]
 8010240:	9300      	str	r3, [sp, #0]
 8010242:	4613      	mov	r3, r2
 8010244:	2200      	movs	r2, #0
 8010246:	f7fb fe19 	bl	800be7c <aci_gatt_update_char_value>
 801024a:	4603      	mov	r3, r0
 801024c:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomS_THdle,
                                       0, /* charValOffset */
                                       SizeS_T, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 801024e:	7bfb      	ldrb	r3, [r7, #15]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d00f      	beq.n	8010274 <Custom_STM_App_Update_Char+0x1ac>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value S_T command, result : 0x%x \n\r", ret);
 8010254:	4857      	ldr	r0, [pc, #348]	; (80103b4 <Custom_STM_App_Update_Char+0x2ec>)
 8010256:	f7fd f83b 	bl	800d2d0 <DbgTraceGetFileName>
 801025a:	4601      	mov	r1, r0
 801025c:	f240 4397 	movw	r3, #1175	; 0x497
 8010260:	4a55      	ldr	r2, [pc, #340]	; (80103b8 <Custom_STM_App_Update_Char+0x2f0>)
 8010262:	4856      	ldr	r0, [pc, #344]	; (80103bc <Custom_STM_App_Update_Char+0x2f4>)
 8010264:	f002 f93e 	bl	80124e4 <iprintf>
 8010268:	7bfb      	ldrb	r3, [r7, #15]
 801026a:	4619      	mov	r1, r3
 801026c:	485d      	ldr	r0, [pc, #372]	; (80103e4 <Custom_STM_App_Update_Char+0x31c>)
 801026e:	f002 f939 	bl	80124e4 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value S_T command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_2_Char_3*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_3*/
      break;
 8010272:	e1b9      	b.n	80105e8 <Custom_STM_App_Update_Char+0x520>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value S_T command\n\r");
 8010274:	484f      	ldr	r0, [pc, #316]	; (80103b4 <Custom_STM_App_Update_Char+0x2ec>)
 8010276:	f7fd f82b 	bl	800d2d0 <DbgTraceGetFileName>
 801027a:	4601      	mov	r1, r0
 801027c:	f240 439b 	movw	r3, #1179	; 0x49b
 8010280:	4a4d      	ldr	r2, [pc, #308]	; (80103b8 <Custom_STM_App_Update_Char+0x2f0>)
 8010282:	484e      	ldr	r0, [pc, #312]	; (80103bc <Custom_STM_App_Update_Char+0x2f4>)
 8010284:	f002 f92e 	bl	80124e4 <iprintf>
 8010288:	4857      	ldr	r0, [pc, #348]	; (80103e8 <Custom_STM_App_Update_Char+0x320>)
 801028a:	f002 f92b 	bl	80124e4 <iprintf>
      break;
 801028e:	e1ab      	b.n	80105e8 <Custom_STM_App_Update_Char+0x520>

    case CUSTOM_STM_L_T:
      ret = aci_gatt_update_char_value(CustomContext.CustomTempHdle,
 8010290:	4b46      	ldr	r3, [pc, #280]	; (80103ac <Custom_STM_App_Update_Char+0x2e4>)
 8010292:	8898      	ldrh	r0, [r3, #4]
 8010294:	4b45      	ldr	r3, [pc, #276]	; (80103ac <Custom_STM_App_Update_Char+0x2e4>)
 8010296:	8999      	ldrh	r1, [r3, #12]
 8010298:	4b54      	ldr	r3, [pc, #336]	; (80103ec <Custom_STM_App_Update_Char+0x324>)
 801029a:	781a      	ldrb	r2, [r3, #0]
 801029c:	683b      	ldr	r3, [r7, #0]
 801029e:	9300      	str	r3, [sp, #0]
 80102a0:	4613      	mov	r3, r2
 80102a2:	2200      	movs	r2, #0
 80102a4:	f7fb fdea 	bl	800be7c <aci_gatt_update_char_value>
 80102a8:	4603      	mov	r3, r0
 80102aa:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomL_THdle,
                                       0, /* charValOffset */
                                       SizeL_T, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 80102ac:	7bfb      	ldrb	r3, [r7, #15]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d00f      	beq.n	80102d2 <Custom_STM_App_Update_Char+0x20a>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value L_T command, result : 0x%x \n\r", ret);
 80102b2:	4840      	ldr	r0, [pc, #256]	; (80103b4 <Custom_STM_App_Update_Char+0x2ec>)
 80102b4:	f7fd f80c 	bl	800d2d0 <DbgTraceGetFileName>
 80102b8:	4601      	mov	r1, r0
 80102ba:	f240 43aa 	movw	r3, #1194	; 0x4aa
 80102be:	4a3e      	ldr	r2, [pc, #248]	; (80103b8 <Custom_STM_App_Update_Char+0x2f0>)
 80102c0:	483e      	ldr	r0, [pc, #248]	; (80103bc <Custom_STM_App_Update_Char+0x2f4>)
 80102c2:	f002 f90f 	bl	80124e4 <iprintf>
 80102c6:	7bfb      	ldrb	r3, [r7, #15]
 80102c8:	4619      	mov	r1, r3
 80102ca:	4849      	ldr	r0, [pc, #292]	; (80103f0 <Custom_STM_App_Update_Char+0x328>)
 80102cc:	f002 f90a 	bl	80124e4 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value L_T command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_2_Char_4*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_4*/
      break;
 80102d0:	e18a      	b.n	80105e8 <Custom_STM_App_Update_Char+0x520>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value L_T command\n\r");
 80102d2:	4838      	ldr	r0, [pc, #224]	; (80103b4 <Custom_STM_App_Update_Char+0x2ec>)
 80102d4:	f7fc fffc 	bl	800d2d0 <DbgTraceGetFileName>
 80102d8:	4601      	mov	r1, r0
 80102da:	f240 43ae 	movw	r3, #1198	; 0x4ae
 80102de:	4a36      	ldr	r2, [pc, #216]	; (80103b8 <Custom_STM_App_Update_Char+0x2f0>)
 80102e0:	4836      	ldr	r0, [pc, #216]	; (80103bc <Custom_STM_App_Update_Char+0x2f4>)
 80102e2:	f002 f8ff 	bl	80124e4 <iprintf>
 80102e6:	4843      	ldr	r0, [pc, #268]	; (80103f4 <Custom_STM_App_Update_Char+0x32c>)
 80102e8:	f002 f8fc 	bl	80124e4 <iprintf>
      break;
 80102ec:	e17c      	b.n	80105e8 <Custom_STM_App_Update_Char+0x520>

    case CUSTOM_STM_R_N:
      ret = aci_gatt_update_char_value(CustomContext.CustomTempHdle,
 80102ee:	4b2f      	ldr	r3, [pc, #188]	; (80103ac <Custom_STM_App_Update_Char+0x2e4>)
 80102f0:	8898      	ldrh	r0, [r3, #4]
 80102f2:	4b2e      	ldr	r3, [pc, #184]	; (80103ac <Custom_STM_App_Update_Char+0x2e4>)
 80102f4:	89d9      	ldrh	r1, [r3, #14]
 80102f6:	4b40      	ldr	r3, [pc, #256]	; (80103f8 <Custom_STM_App_Update_Char+0x330>)
 80102f8:	781a      	ldrb	r2, [r3, #0]
 80102fa:	683b      	ldr	r3, [r7, #0]
 80102fc:	9300      	str	r3, [sp, #0]
 80102fe:	4613      	mov	r3, r2
 8010300:	2200      	movs	r2, #0
 8010302:	f7fb fdbb 	bl	800be7c <aci_gatt_update_char_value>
 8010306:	4603      	mov	r3, r0
 8010308:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomR_NHdle,
                                       0, /* charValOffset */
                                       SizeR_N, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 801030a:	7bfb      	ldrb	r3, [r7, #15]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d00f      	beq.n	8010330 <Custom_STM_App_Update_Char+0x268>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value R_N command, result : 0x%x \n\r", ret);
 8010310:	4828      	ldr	r0, [pc, #160]	; (80103b4 <Custom_STM_App_Update_Char+0x2ec>)
 8010312:	f7fc ffdd 	bl	800d2d0 <DbgTraceGetFileName>
 8010316:	4601      	mov	r1, r0
 8010318:	f240 43bd 	movw	r3, #1213	; 0x4bd
 801031c:	4a26      	ldr	r2, [pc, #152]	; (80103b8 <Custom_STM_App_Update_Char+0x2f0>)
 801031e:	4827      	ldr	r0, [pc, #156]	; (80103bc <Custom_STM_App_Update_Char+0x2f4>)
 8010320:	f002 f8e0 	bl	80124e4 <iprintf>
 8010324:	7bfb      	ldrb	r3, [r7, #15]
 8010326:	4619      	mov	r1, r3
 8010328:	4834      	ldr	r0, [pc, #208]	; (80103fc <Custom_STM_App_Update_Char+0x334>)
 801032a:	f002 f8db 	bl	80124e4 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value R_N command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_2_Char_5*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_5*/
      break;
 801032e:	e15b      	b.n	80105e8 <Custom_STM_App_Update_Char+0x520>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value R_N command\n\r");
 8010330:	4820      	ldr	r0, [pc, #128]	; (80103b4 <Custom_STM_App_Update_Char+0x2ec>)
 8010332:	f7fc ffcd 	bl	800d2d0 <DbgTraceGetFileName>
 8010336:	4601      	mov	r1, r0
 8010338:	f240 43c1 	movw	r3, #1217	; 0x4c1
 801033c:	4a1e      	ldr	r2, [pc, #120]	; (80103b8 <Custom_STM_App_Update_Char+0x2f0>)
 801033e:	481f      	ldr	r0, [pc, #124]	; (80103bc <Custom_STM_App_Update_Char+0x2f4>)
 8010340:	f002 f8d0 	bl	80124e4 <iprintf>
 8010344:	482e      	ldr	r0, [pc, #184]	; (8010400 <Custom_STM_App_Update_Char+0x338>)
 8010346:	f002 f8cd 	bl	80124e4 <iprintf>
      break;
 801034a:	e14d      	b.n	80105e8 <Custom_STM_App_Update_Char+0x520>

    case CUSTOM_STM_UV_V:
      ret = aci_gatt_update_char_value(CustomContext.CustomUv_SHdle,
 801034c:	4b17      	ldr	r3, [pc, #92]	; (80103ac <Custom_STM_App_Update_Char+0x2e4>)
 801034e:	8a18      	ldrh	r0, [r3, #16]
 8010350:	4b16      	ldr	r3, [pc, #88]	; (80103ac <Custom_STM_App_Update_Char+0x2e4>)
 8010352:	8a59      	ldrh	r1, [r3, #18]
 8010354:	4b2b      	ldr	r3, [pc, #172]	; (8010404 <Custom_STM_App_Update_Char+0x33c>)
 8010356:	781a      	ldrb	r2, [r3, #0]
 8010358:	683b      	ldr	r3, [r7, #0]
 801035a:	9300      	str	r3, [sp, #0]
 801035c:	4613      	mov	r3, r2
 801035e:	2200      	movs	r2, #0
 8010360:	f7fb fd8c 	bl	800be7c <aci_gatt_update_char_value>
 8010364:	4603      	mov	r3, r0
 8010366:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomUv_VHdle,
                                       0, /* charValOffset */
                                       SizeUv_V, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 8010368:	7bfb      	ldrb	r3, [r7, #15]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d00f      	beq.n	801038e <Custom_STM_App_Update_Char+0x2c6>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value UV_V command, result : 0x%x \n\r", ret);
 801036e:	4811      	ldr	r0, [pc, #68]	; (80103b4 <Custom_STM_App_Update_Char+0x2ec>)
 8010370:	f7fc ffae 	bl	800d2d0 <DbgTraceGetFileName>
 8010374:	4601      	mov	r1, r0
 8010376:	f44f 639a 	mov.w	r3, #1232	; 0x4d0
 801037a:	4a0f      	ldr	r2, [pc, #60]	; (80103b8 <Custom_STM_App_Update_Char+0x2f0>)
 801037c:	480f      	ldr	r0, [pc, #60]	; (80103bc <Custom_STM_App_Update_Char+0x2f4>)
 801037e:	f002 f8b1 	bl	80124e4 <iprintf>
 8010382:	7bfb      	ldrb	r3, [r7, #15]
 8010384:	4619      	mov	r1, r3
 8010386:	4820      	ldr	r0, [pc, #128]	; (8010408 <Custom_STM_App_Update_Char+0x340>)
 8010388:	f002 f8ac 	bl	80124e4 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value UV_V command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_3_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_3_Char_1*/
      break;
 801038c:	e12c      	b.n	80105e8 <Custom_STM_App_Update_Char+0x520>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value UV_V command\n\r");
 801038e:	4809      	ldr	r0, [pc, #36]	; (80103b4 <Custom_STM_App_Update_Char+0x2ec>)
 8010390:	f7fc ff9e 	bl	800d2d0 <DbgTraceGetFileName>
 8010394:	4601      	mov	r1, r0
 8010396:	f240 43d4 	movw	r3, #1236	; 0x4d4
 801039a:	4a07      	ldr	r2, [pc, #28]	; (80103b8 <Custom_STM_App_Update_Char+0x2f0>)
 801039c:	4807      	ldr	r0, [pc, #28]	; (80103bc <Custom_STM_App_Update_Char+0x2f4>)
 801039e:	f002 f8a1 	bl	80124e4 <iprintf>
 80103a2:	481a      	ldr	r0, [pc, #104]	; (801040c <Custom_STM_App_Update_Char+0x344>)
 80103a4:	f002 f89e 	bl	80124e4 <iprintf>
      break;
 80103a8:	e11e      	b.n	80105e8 <Custom_STM_App_Update_Char+0x520>
 80103aa:	bf00      	nop
 80103ac:	200006f0 	.word	0x200006f0
 80103b0:	2000005b 	.word	0x2000005b
 80103b4:	08017288 	.word	0x08017288
 80103b8:	080183ec 	.word	0x080183ec
 80103bc:	080172a8 	.word	0x080172a8
 80103c0:	08017a20 	.word	0x08017a20
 80103c4:	08017a68 	.word	0x08017a68
 80103c8:	2000005c 	.word	0x2000005c
 80103cc:	08017aa0 	.word	0x08017aa0
 80103d0:	08017ae8 	.word	0x08017ae8
 80103d4:	2000005d 	.word	0x2000005d
 80103d8:	08017b20 	.word	0x08017b20
 80103dc:	08017b64 	.word	0x08017b64
 80103e0:	2000005e 	.word	0x2000005e
 80103e4:	08017b98 	.word	0x08017b98
 80103e8:	08017bdc 	.word	0x08017bdc
 80103ec:	2000005f 	.word	0x2000005f
 80103f0:	08017c10 	.word	0x08017c10
 80103f4:	08017c54 	.word	0x08017c54
 80103f8:	20000060 	.word	0x20000060
 80103fc:	08017c88 	.word	0x08017c88
 8010400:	08017ccc 	.word	0x08017ccc
 8010404:	20000061 	.word	0x20000061
 8010408:	08017d00 	.word	0x08017d00
 801040c:	08017d48 	.word	0x08017d48

    case CUSTOM_STM_UV_L:
      ret = aci_gatt_update_char_value(CustomContext.CustomUv_SHdle,
 8010410:	4b78      	ldr	r3, [pc, #480]	; (80105f4 <Custom_STM_App_Update_Char+0x52c>)
 8010412:	8a18      	ldrh	r0, [r3, #16]
 8010414:	4b77      	ldr	r3, [pc, #476]	; (80105f4 <Custom_STM_App_Update_Char+0x52c>)
 8010416:	8a99      	ldrh	r1, [r3, #20]
 8010418:	4b77      	ldr	r3, [pc, #476]	; (80105f8 <Custom_STM_App_Update_Char+0x530>)
 801041a:	781a      	ldrb	r2, [r3, #0]
 801041c:	683b      	ldr	r3, [r7, #0]
 801041e:	9300      	str	r3, [sp, #0]
 8010420:	4613      	mov	r3, r2
 8010422:	2200      	movs	r2, #0
 8010424:	f7fb fd2a 	bl	800be7c <aci_gatt_update_char_value>
 8010428:	4603      	mov	r3, r0
 801042a:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomUv_LHdle,
                                       0, /* charValOffset */
                                       SizeUv_L, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 801042c:	7bfb      	ldrb	r3, [r7, #15]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d00f      	beq.n	8010452 <Custom_STM_App_Update_Char+0x38a>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value UV_L command, result : 0x%x \n\r", ret);
 8010432:	4872      	ldr	r0, [pc, #456]	; (80105fc <Custom_STM_App_Update_Char+0x534>)
 8010434:	f7fc ff4c 	bl	800d2d0 <DbgTraceGetFileName>
 8010438:	4601      	mov	r1, r0
 801043a:	f240 43e3 	movw	r3, #1251	; 0x4e3
 801043e:	4a70      	ldr	r2, [pc, #448]	; (8010600 <Custom_STM_App_Update_Char+0x538>)
 8010440:	4870      	ldr	r0, [pc, #448]	; (8010604 <Custom_STM_App_Update_Char+0x53c>)
 8010442:	f002 f84f 	bl	80124e4 <iprintf>
 8010446:	7bfb      	ldrb	r3, [r7, #15]
 8010448:	4619      	mov	r1, r3
 801044a:	486f      	ldr	r0, [pc, #444]	; (8010608 <Custom_STM_App_Update_Char+0x540>)
 801044c:	f002 f84a 	bl	80124e4 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value UV_L command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_3_Char_2*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_3_Char_2*/
      break;
 8010450:	e0ca      	b.n	80105e8 <Custom_STM_App_Update_Char+0x520>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value UV_L command\n\r");
 8010452:	486a      	ldr	r0, [pc, #424]	; (80105fc <Custom_STM_App_Update_Char+0x534>)
 8010454:	f7fc ff3c 	bl	800d2d0 <DbgTraceGetFileName>
 8010458:	4601      	mov	r1, r0
 801045a:	f240 43e7 	movw	r3, #1255	; 0x4e7
 801045e:	4a68      	ldr	r2, [pc, #416]	; (8010600 <Custom_STM_App_Update_Char+0x538>)
 8010460:	4868      	ldr	r0, [pc, #416]	; (8010604 <Custom_STM_App_Update_Char+0x53c>)
 8010462:	f002 f83f 	bl	80124e4 <iprintf>
 8010466:	4869      	ldr	r0, [pc, #420]	; (801060c <Custom_STM_App_Update_Char+0x544>)
 8010468:	f002 f83c 	bl	80124e4 <iprintf>
      break;
 801046c:	e0bc      	b.n	80105e8 <Custom_STM_App_Update_Char+0x520>

    case CUSTOM_STM_ACLX:
      ret = aci_gatt_update_char_value(CustomContext.CustomUtHdle,
 801046e:	4b61      	ldr	r3, [pc, #388]	; (80105f4 <Custom_STM_App_Update_Char+0x52c>)
 8010470:	8ad8      	ldrh	r0, [r3, #22]
 8010472:	4b60      	ldr	r3, [pc, #384]	; (80105f4 <Custom_STM_App_Update_Char+0x52c>)
 8010474:	8b19      	ldrh	r1, [r3, #24]
 8010476:	4b66      	ldr	r3, [pc, #408]	; (8010610 <Custom_STM_App_Update_Char+0x548>)
 8010478:	781a      	ldrb	r2, [r3, #0]
 801047a:	683b      	ldr	r3, [r7, #0]
 801047c:	9300      	str	r3, [sp, #0]
 801047e:	4613      	mov	r3, r2
 8010480:	2200      	movs	r2, #0
 8010482:	f7fb fcfb 	bl	800be7c <aci_gatt_update_char_value>
 8010486:	4603      	mov	r3, r0
 8010488:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomAclxHdle,
                                       0, /* charValOffset */
                                       SizeAclx, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 801048a:	7bfb      	ldrb	r3, [r7, #15]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d00f      	beq.n	80104b0 <Custom_STM_App_Update_Char+0x3e8>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value ACLX command, result : 0x%x \n\r", ret);
 8010490:	485a      	ldr	r0, [pc, #360]	; (80105fc <Custom_STM_App_Update_Char+0x534>)
 8010492:	f7fc ff1d 	bl	800d2d0 <DbgTraceGetFileName>
 8010496:	4601      	mov	r1, r0
 8010498:	f240 43f6 	movw	r3, #1270	; 0x4f6
 801049c:	4a58      	ldr	r2, [pc, #352]	; (8010600 <Custom_STM_App_Update_Char+0x538>)
 801049e:	4859      	ldr	r0, [pc, #356]	; (8010604 <Custom_STM_App_Update_Char+0x53c>)
 80104a0:	f002 f820 	bl	80124e4 <iprintf>
 80104a4:	7bfb      	ldrb	r3, [r7, #15]
 80104a6:	4619      	mov	r1, r3
 80104a8:	485a      	ldr	r0, [pc, #360]	; (8010614 <Custom_STM_App_Update_Char+0x54c>)
 80104aa:	f002 f81b 	bl	80124e4 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ACLX command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_4_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_4_Char_1*/
      break;
 80104ae:	e09b      	b.n	80105e8 <Custom_STM_App_Update_Char+0x520>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ACLX command\n\r");
 80104b0:	4852      	ldr	r0, [pc, #328]	; (80105fc <Custom_STM_App_Update_Char+0x534>)
 80104b2:	f7fc ff0d 	bl	800d2d0 <DbgTraceGetFileName>
 80104b6:	4601      	mov	r1, r0
 80104b8:	f240 43fa 	movw	r3, #1274	; 0x4fa
 80104bc:	4a50      	ldr	r2, [pc, #320]	; (8010600 <Custom_STM_App_Update_Char+0x538>)
 80104be:	4851      	ldr	r0, [pc, #324]	; (8010604 <Custom_STM_App_Update_Char+0x53c>)
 80104c0:	f002 f810 	bl	80124e4 <iprintf>
 80104c4:	4854      	ldr	r0, [pc, #336]	; (8010618 <Custom_STM_App_Update_Char+0x550>)
 80104c6:	f002 f80d 	bl	80124e4 <iprintf>
      break;
 80104ca:	e08d      	b.n	80105e8 <Custom_STM_App_Update_Char+0x520>

    case CUSTOM_STM_EC:
      ret = aci_gatt_update_char_value(CustomContext.CustomUtHdle,
 80104cc:	4b49      	ldr	r3, [pc, #292]	; (80105f4 <Custom_STM_App_Update_Char+0x52c>)
 80104ce:	8ad8      	ldrh	r0, [r3, #22]
 80104d0:	4b48      	ldr	r3, [pc, #288]	; (80105f4 <Custom_STM_App_Update_Char+0x52c>)
 80104d2:	8b59      	ldrh	r1, [r3, #26]
 80104d4:	4b51      	ldr	r3, [pc, #324]	; (801061c <Custom_STM_App_Update_Char+0x554>)
 80104d6:	781a      	ldrb	r2, [r3, #0]
 80104d8:	683b      	ldr	r3, [r7, #0]
 80104da:	9300      	str	r3, [sp, #0]
 80104dc:	4613      	mov	r3, r2
 80104de:	2200      	movs	r2, #0
 80104e0:	f7fb fccc 	bl	800be7c <aci_gatt_update_char_value>
 80104e4:	4603      	mov	r3, r0
 80104e6:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomEcHdle,
                                       0, /* charValOffset */
                                       SizeEc, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 80104e8:	7bfb      	ldrb	r3, [r7, #15]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d00f      	beq.n	801050e <Custom_STM_App_Update_Char+0x446>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value EC command, result : 0x%x \n\r", ret);
 80104ee:	4843      	ldr	r0, [pc, #268]	; (80105fc <Custom_STM_App_Update_Char+0x534>)
 80104f0:	f7fc feee 	bl	800d2d0 <DbgTraceGetFileName>
 80104f4:	4601      	mov	r1, r0
 80104f6:	f240 5309 	movw	r3, #1289	; 0x509
 80104fa:	4a41      	ldr	r2, [pc, #260]	; (8010600 <Custom_STM_App_Update_Char+0x538>)
 80104fc:	4841      	ldr	r0, [pc, #260]	; (8010604 <Custom_STM_App_Update_Char+0x53c>)
 80104fe:	f001 fff1 	bl	80124e4 <iprintf>
 8010502:	7bfb      	ldrb	r3, [r7, #15]
 8010504:	4619      	mov	r1, r3
 8010506:	4846      	ldr	r0, [pc, #280]	; (8010620 <Custom_STM_App_Update_Char+0x558>)
 8010508:	f001 ffec 	bl	80124e4 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value EC command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_4_Char_2*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_4_Char_2*/
      break;
 801050c:	e06c      	b.n	80105e8 <Custom_STM_App_Update_Char+0x520>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value EC command\n\r");
 801050e:	483b      	ldr	r0, [pc, #236]	; (80105fc <Custom_STM_App_Update_Char+0x534>)
 8010510:	f7fc fede 	bl	800d2d0 <DbgTraceGetFileName>
 8010514:	4601      	mov	r1, r0
 8010516:	f240 530d 	movw	r3, #1293	; 0x50d
 801051a:	4a39      	ldr	r2, [pc, #228]	; (8010600 <Custom_STM_App_Update_Char+0x538>)
 801051c:	4839      	ldr	r0, [pc, #228]	; (8010604 <Custom_STM_App_Update_Char+0x53c>)
 801051e:	f001 ffe1 	bl	80124e4 <iprintf>
 8010522:	4840      	ldr	r0, [pc, #256]	; (8010624 <Custom_STM_App_Update_Char+0x55c>)
 8010524:	f001 ffde 	bl	80124e4 <iprintf>
      break;
 8010528:	e05e      	b.n	80105e8 <Custom_STM_App_Update_Char+0x520>

    case CUSTOM_STM_PR:
      ret = aci_gatt_update_char_value(CustomContext.CustomUtHdle,
 801052a:	4b32      	ldr	r3, [pc, #200]	; (80105f4 <Custom_STM_App_Update_Char+0x52c>)
 801052c:	8ad8      	ldrh	r0, [r3, #22]
 801052e:	4b31      	ldr	r3, [pc, #196]	; (80105f4 <Custom_STM_App_Update_Char+0x52c>)
 8010530:	8b99      	ldrh	r1, [r3, #28]
 8010532:	4b3d      	ldr	r3, [pc, #244]	; (8010628 <Custom_STM_App_Update_Char+0x560>)
 8010534:	781a      	ldrb	r2, [r3, #0]
 8010536:	683b      	ldr	r3, [r7, #0]
 8010538:	9300      	str	r3, [sp, #0]
 801053a:	4613      	mov	r3, r2
 801053c:	2200      	movs	r2, #0
 801053e:	f7fb fc9d 	bl	800be7c <aci_gatt_update_char_value>
 8010542:	4603      	mov	r3, r0
 8010544:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomPrHdle,
                                       0, /* charValOffset */
                                       SizePr, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 8010546:	7bfb      	ldrb	r3, [r7, #15]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d00f      	beq.n	801056c <Custom_STM_App_Update_Char+0x4a4>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value PR command, result : 0x%x \n\r", ret);
 801054c:	482b      	ldr	r0, [pc, #172]	; (80105fc <Custom_STM_App_Update_Char+0x534>)
 801054e:	f7fc febf 	bl	800d2d0 <DbgTraceGetFileName>
 8010552:	4601      	mov	r1, r0
 8010554:	f240 531c 	movw	r3, #1308	; 0x51c
 8010558:	4a29      	ldr	r2, [pc, #164]	; (8010600 <Custom_STM_App_Update_Char+0x538>)
 801055a:	482a      	ldr	r0, [pc, #168]	; (8010604 <Custom_STM_App_Update_Char+0x53c>)
 801055c:	f001 ffc2 	bl	80124e4 <iprintf>
 8010560:	7bfb      	ldrb	r3, [r7, #15]
 8010562:	4619      	mov	r1, r3
 8010564:	4831      	ldr	r0, [pc, #196]	; (801062c <Custom_STM_App_Update_Char+0x564>)
 8010566:	f001 ffbd 	bl	80124e4 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value PR command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_4_Char_3*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_4_Char_3*/
      break;
 801056a:	e03d      	b.n	80105e8 <Custom_STM_App_Update_Char+0x520>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value PR command\n\r");
 801056c:	4823      	ldr	r0, [pc, #140]	; (80105fc <Custom_STM_App_Update_Char+0x534>)
 801056e:	f7fc feaf 	bl	800d2d0 <DbgTraceGetFileName>
 8010572:	4601      	mov	r1, r0
 8010574:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8010578:	4a21      	ldr	r2, [pc, #132]	; (8010600 <Custom_STM_App_Update_Char+0x538>)
 801057a:	4822      	ldr	r0, [pc, #136]	; (8010604 <Custom_STM_App_Update_Char+0x53c>)
 801057c:	f001 ffb2 	bl	80124e4 <iprintf>
 8010580:	482b      	ldr	r0, [pc, #172]	; (8010630 <Custom_STM_App_Update_Char+0x568>)
 8010582:	f001 ffaf 	bl	80124e4 <iprintf>
      break;
 8010586:	e02f      	b.n	80105e8 <Custom_STM_App_Update_Char+0x520>

    case CUSTOM_STM_TD:
      ret = aci_gatt_update_char_value(CustomContext.CustomUtHdle,
 8010588:	4b1a      	ldr	r3, [pc, #104]	; (80105f4 <Custom_STM_App_Update_Char+0x52c>)
 801058a:	8ad8      	ldrh	r0, [r3, #22]
 801058c:	4b19      	ldr	r3, [pc, #100]	; (80105f4 <Custom_STM_App_Update_Char+0x52c>)
 801058e:	8bd9      	ldrh	r1, [r3, #30]
 8010590:	4b28      	ldr	r3, [pc, #160]	; (8010634 <Custom_STM_App_Update_Char+0x56c>)
 8010592:	781a      	ldrb	r2, [r3, #0]
 8010594:	683b      	ldr	r3, [r7, #0]
 8010596:	9300      	str	r3, [sp, #0]
 8010598:	4613      	mov	r3, r2
 801059a:	2200      	movs	r2, #0
 801059c:	f7fb fc6e 	bl	800be7c <aci_gatt_update_char_value>
 80105a0:	4603      	mov	r3, r0
 80105a2:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomTdHdle,
                                       0, /* charValOffset */
                                       SizeTd, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 80105a4:	7bfb      	ldrb	r3, [r7, #15]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d00f      	beq.n	80105ca <Custom_STM_App_Update_Char+0x502>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value TD command, result : 0x%x \n\r", ret);
 80105aa:	4814      	ldr	r0, [pc, #80]	; (80105fc <Custom_STM_App_Update_Char+0x534>)
 80105ac:	f7fc fe90 	bl	800d2d0 <DbgTraceGetFileName>
 80105b0:	4601      	mov	r1, r0
 80105b2:	f240 532f 	movw	r3, #1327	; 0x52f
 80105b6:	4a12      	ldr	r2, [pc, #72]	; (8010600 <Custom_STM_App_Update_Char+0x538>)
 80105b8:	4812      	ldr	r0, [pc, #72]	; (8010604 <Custom_STM_App_Update_Char+0x53c>)
 80105ba:	f001 ff93 	bl	80124e4 <iprintf>
 80105be:	7bfb      	ldrb	r3, [r7, #15]
 80105c0:	4619      	mov	r1, r3
 80105c2:	481d      	ldr	r0, [pc, #116]	; (8010638 <Custom_STM_App_Update_Char+0x570>)
 80105c4:	f001 ff8e 	bl	80124e4 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value TD command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_4_Char_4*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_4_Char_4*/
      break;
 80105c8:	e00e      	b.n	80105e8 <Custom_STM_App_Update_Char+0x520>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value TD command\n\r");
 80105ca:	480c      	ldr	r0, [pc, #48]	; (80105fc <Custom_STM_App_Update_Char+0x534>)
 80105cc:	f7fc fe80 	bl	800d2d0 <DbgTraceGetFileName>
 80105d0:	4601      	mov	r1, r0
 80105d2:	f240 5333 	movw	r3, #1331	; 0x533
 80105d6:	4a0a      	ldr	r2, [pc, #40]	; (8010600 <Custom_STM_App_Update_Char+0x538>)
 80105d8:	480a      	ldr	r0, [pc, #40]	; (8010604 <Custom_STM_App_Update_Char+0x53c>)
 80105da:	f001 ff83 	bl	80124e4 <iprintf>
 80105de:	4817      	ldr	r0, [pc, #92]	; (801063c <Custom_STM_App_Update_Char+0x574>)
 80105e0:	f001 ff80 	bl	80124e4 <iprintf>
      break;
 80105e4:	e000      	b.n	80105e8 <Custom_STM_App_Update_Char+0x520>

    default:
      break;
 80105e6:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 80105e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80105ea:	4618      	mov	r0, r3
 80105ec:	3710      	adds	r7, #16
 80105ee:	46bd      	mov	sp, r7
 80105f0:	bd80      	pop	{r7, pc}
 80105f2:	bf00      	nop
 80105f4:	200006f0 	.word	0x200006f0
 80105f8:	20000062 	.word	0x20000062
 80105fc:	08017288 	.word	0x08017288
 8010600:	080183ec 	.word	0x080183ec
 8010604:	080172a8 	.word	0x080172a8
 8010608:	08017d80 	.word	0x08017d80
 801060c:	08017dc8 	.word	0x08017dc8
 8010610:	20000063 	.word	0x20000063
 8010614:	08017e00 	.word	0x08017e00
 8010618:	08017e48 	.word	0x08017e48
 801061c:	20000064 	.word	0x20000064
 8010620:	08017e80 	.word	0x08017e80
 8010624:	08017ec4 	.word	0x08017ec4
 8010628:	20000065 	.word	0x20000065
 801062c:	08017ef8 	.word	0x08017ef8
 8010630:	08017f3c 	.word	0x08017f3c
 8010634:	20000066 	.word	0x20000066
 8010638:	08017f70 	.word	0x08017f70
 801063c:	08017fb4 	.word	0x08017fb4

08010640 <Write_Enable>:
	  	  			return ret;
	  	  			}
	  	  		return HAL_OK;
}
uint8_t Write_Enable(void)
{
 8010640:	b580      	push	{r7, lr}
 8010642:	b094      	sub	sp, #80	; 0x50
 8010644:	af00      	add	r7, sp, #0
	uint8_t ret;
	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;
	/* Enable write operations */
	  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8010646:	f44f 7380 	mov.w	r3, #256	; 0x100
 801064a:	633b      	str	r3, [r7, #48]	; 0x30
	  sCommand.Instruction       = WRITE_ENABLE_CMD;
 801064c:	2306      	movs	r3, #6
 801064e:	61bb      	str	r3, [r7, #24]
	  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8010650:	2300      	movs	r3, #0
 8010652:	637b      	str	r3, [r7, #52]	; 0x34
	  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8010654:	2300      	movs	r3, #0
 8010656:	63bb      	str	r3, [r7, #56]	; 0x38
	  sCommand.DataMode          = QSPI_DATA_NONE;
 8010658:	2300      	movs	r3, #0
 801065a:	63fb      	str	r3, [r7, #60]	; 0x3c
	  sCommand.DummyCycles       = 0;
 801065c:	2300      	movs	r3, #0
 801065e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8010660:	2300      	movs	r3, #0
 8010662:	647b      	str	r3, [r7, #68]	; 0x44
	  //sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
	  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8010664:	2300      	movs	r3, #0
 8010666:	64bb      	str	r3, [r7, #72]	; 0x48
	  ret=HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8010668:	f107 0318 	add.w	r3, r7, #24
 801066c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010670:	4619      	mov	r1, r3
 8010672:	481b      	ldr	r0, [pc, #108]	; (80106e0 <Write_Enable+0xa0>)
 8010674:	f7f6 fdc8 	bl	8007208 <HAL_QSPI_Command>
 8010678:	4603      	mov	r3, r0
 801067a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	  if (ret != HAL_OK) {
 801067e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010682:	2b00      	cmp	r3, #0
 8010684:	d002      	beq.n	801068c <Write_Enable+0x4c>
	    return ret;
 8010686:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801068a:	e024      	b.n	80106d6 <Write_Enable+0x96>
	  }

	  /* Configure automatic polling mode to wait for write enabling */
	  sConfig.Match           = MX25R6435F_SR_WEL;
 801068c:	2302      	movs	r3, #2
 801068e:	603b      	str	r3, [r7, #0]
	  sConfig.Mask            = MX25R6435F_SR_WEL;
 8010690:	2302      	movs	r3, #2
 8010692:	607b      	str	r3, [r7, #4]
	  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8010694:	2300      	movs	r3, #0
 8010696:	613b      	str	r3, [r7, #16]
	  sConfig.StatusBytesSize = 1;
 8010698:	2301      	movs	r3, #1
 801069a:	60fb      	str	r3, [r7, #12]
	  sConfig.Interval        = 0x10;
 801069c:	2310      	movs	r3, #16
 801069e:	60bb      	str	r3, [r7, #8]
	  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80106a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80106a4:	617b      	str	r3, [r7, #20]

	  sCommand.Instruction    = READ_STATUS_REG_CMD;
 80106a6:	2305      	movs	r3, #5
 80106a8:	61bb      	str	r3, [r7, #24]
	  sCommand.DataMode       = QSPI_DATA_1_LINE;
 80106aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80106ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	  ret=HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80106b0:	463a      	mov	r2, r7
 80106b2:	f107 0118 	add.w	r1, r7, #24
 80106b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80106ba:	4809      	ldr	r0, [pc, #36]	; (80106e0 <Write_Enable+0xa0>)
 80106bc:	f7f6 ff31 	bl	8007522 <HAL_QSPI_AutoPolling>
 80106c0:	4603      	mov	r3, r0
 80106c2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	  if (ret != HAL_OK) {
 80106c6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d002      	beq.n	80106d4 <Write_Enable+0x94>
	    return ret;
 80106ce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80106d2:	e000      	b.n	80106d6 <Write_Enable+0x96>
	  }


	  return HAL_OK;
 80106d4:	2300      	movs	r3, #0
}
 80106d6:	4618      	mov	r0, r3
 80106d8:	3750      	adds	r7, #80	; 0x50
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd80      	pop	{r7, pc}
 80106de:	bf00      	nop
 80106e0:	20000480 	.word	0x20000480

080106e4 <Quad_Enable>:
uint8_t Quad_Enable(void)
{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b08e      	sub	sp, #56	; 0x38
 80106e8:	af00      	add	r7, sp, #0
	uint8_t ret,reg;
	QSPI_CommandTypeDef sCommand;
	  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80106ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80106ee:	61bb      	str	r3, [r7, #24]
	  sCommand.Instruction       = READ_STATUS_REG_CMD;
 80106f0:	2305      	movs	r3, #5
 80106f2:	603b      	str	r3, [r7, #0]
	  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80106f4:	2300      	movs	r3, #0
 80106f6:	61fb      	str	r3, [r7, #28]
	  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80106f8:	2300      	movs	r3, #0
 80106fa:	623b      	str	r3, [r7, #32]
	  sCommand.DataMode          = QSPI_DATA_1_LINE;
 80106fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8010700:	627b      	str	r3, [r7, #36]	; 0x24
	  sCommand.DummyCycles       = 0;
 8010702:	2300      	movs	r3, #0
 8010704:	617b      	str	r3, [r7, #20]
	  sCommand.NbData            = 1;
 8010706:	2301      	movs	r3, #1
 8010708:	62bb      	str	r3, [r7, #40]	; 0x28
	  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 801070a:	2300      	movs	r3, #0
 801070c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  //sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
	  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 801070e:	2300      	movs	r3, #0
 8010710:	633b      	str	r3, [r7, #48]	; 0x30
	  ret=HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8010712:	463b      	mov	r3, r7
 8010714:	f241 3288 	movw	r2, #5000	; 0x1388
 8010718:	4619      	mov	r1, r3
 801071a:	4849      	ldr	r0, [pc, #292]	; (8010840 <Quad_Enable+0x15c>)
 801071c:	f7f6 fd74 	bl	8007208 <HAL_QSPI_Command>
 8010720:	4603      	mov	r3, r0
 8010722:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  if (ret != HAL_OK) {
 8010726:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801072a:	2b00      	cmp	r3, #0
 801072c:	d002      	beq.n	8010734 <Quad_Enable+0x50>
	    return ret;
 801072e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010732:	e081      	b.n	8010838 <Quad_Enable+0x154>
	  }
	  ret=HAL_QSPI_Receive(&hqspi, &reg, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8010734:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8010738:	f241 3288 	movw	r2, #5000	; 0x1388
 801073c:	4619      	mov	r1, r3
 801073e:	4840      	ldr	r0, [pc, #256]	; (8010840 <Quad_Enable+0x15c>)
 8010740:	f7f6 fe52 	bl	80073e8 <HAL_QSPI_Receive>
 8010744:	4603      	mov	r3, r0
 8010746:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  if (ret != HAL_OK) {
 801074a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801074e:	2b00      	cmp	r3, #0
 8010750:	d002      	beq.n	8010758 <Quad_Enable+0x74>
	  	    return ret;
 8010752:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010756:	e06f      	b.n	8010838 <Quad_Enable+0x154>
	  	  }
	  if(Write_Enable()!=HAL_OK)
 8010758:	f7ff ff72 	bl	8010640 <Write_Enable>
 801075c:	4603      	mov	r3, r0
 801075e:	2b00      	cmp	r3, #0
 8010760:	d002      	beq.n	8010768 <Quad_Enable+0x84>
		  {
		  return ret;
 8010762:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010766:	e067      	b.n	8010838 <Quad_Enable+0x154>
		  }
	  SET_BIT(reg, MX25R6435F_SR_QE);
 8010768:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801076c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010770:	b2db      	uxtb	r3, r3
 8010772:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8010776:	2301      	movs	r3, #1
 8010778:	603b      	str	r3, [r7, #0]
	  ret=HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 801077a:	463b      	mov	r3, r7
 801077c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010780:	4619      	mov	r1, r3
 8010782:	482f      	ldr	r0, [pc, #188]	; (8010840 <Quad_Enable+0x15c>)
 8010784:	f7f6 fd40 	bl	8007208 <HAL_QSPI_Command>
 8010788:	4603      	mov	r3, r0
 801078a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  if (ret != HAL_OK) {
 801078e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010792:	2b00      	cmp	r3, #0
 8010794:	d002      	beq.n	801079c <Quad_Enable+0xb8>
	  	    return ret;
 8010796:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801079a:	e04d      	b.n	8010838 <Quad_Enable+0x154>
	  	  }
	  ret=HAL_QSPI_Transmit(&hqspi, &reg, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 801079c:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80107a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80107a4:	4619      	mov	r1, r3
 80107a6:	4826      	ldr	r0, [pc, #152]	; (8010840 <Quad_Enable+0x15c>)
 80107a8:	f7f6 fd8c 	bl	80072c4 <HAL_QSPI_Transmit>
 80107ac:	4603      	mov	r3, r0
 80107ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  if (ret != HAL_OK) {
 80107b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d002      	beq.n	80107c0 <Quad_Enable+0xdc>
	 	  	    return ret;
 80107ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80107be:	e03b      	b.n	8010838 <Quad_Enable+0x154>
	 	  	  }
	  ret=QSPI_AutoPollingMemReady();
 80107c0:	f000 f842 	bl	8010848 <QSPI_AutoPollingMemReady>
 80107c4:	4603      	mov	r3, r0
 80107c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  if (ret != HAL_OK) {
 80107ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d002      	beq.n	80107d8 <Quad_Enable+0xf4>
	 	 	  	    return ret;
 80107d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80107d6:	e02f      	b.n	8010838 <Quad_Enable+0x154>
	 	 	  	  }
	  sCommand.Instruction = READ_STATUS_REG_CMD;
 80107d8:	2305      	movs	r3, #5
 80107da:	603b      	str	r3, [r7, #0]
	  ret=HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80107dc:	463b      	mov	r3, r7
 80107de:	f241 3288 	movw	r2, #5000	; 0x1388
 80107e2:	4619      	mov	r1, r3
 80107e4:	4816      	ldr	r0, [pc, #88]	; (8010840 <Quad_Enable+0x15c>)
 80107e6:	f7f6 fd0f 	bl	8007208 <HAL_QSPI_Command>
 80107ea:	4603      	mov	r3, r0
 80107ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  	  if (ret != HAL_OK) {
 80107f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d002      	beq.n	80107fe <Quad_Enable+0x11a>
	  	  	    return ret;
 80107f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80107fc:	e01c      	b.n	8010838 <Quad_Enable+0x154>
	  	  	  }
	 ret=HAL_QSPI_Receive(&hqspi, &reg, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80107fe:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8010802:	f241 3288 	movw	r2, #5000	; 0x1388
 8010806:	4619      	mov	r1, r3
 8010808:	480d      	ldr	r0, [pc, #52]	; (8010840 <Quad_Enable+0x15c>)
 801080a:	f7f6 fded 	bl	80073e8 <HAL_QSPI_Receive>
 801080e:	4603      	mov	r3, r0
 8010810:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  		  if (ret != HAL_OK) {
 8010814:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010818:	2b00      	cmp	r3, #0
 801081a:	d002      	beq.n	8010822 <Quad_Enable+0x13e>
	  		  	    return ret;
 801081c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010820:	e00a      	b.n	8010838 <Quad_Enable+0x154>
	  		  	  }
	  		if((reg & MX25R6435F_SR_QE) == 0){
 8010822:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801082a:	2b00      	cmp	r3, #0
 801082c:	d102      	bne.n	8010834 <Quad_Enable+0x150>
	  		     printf("QUAD enable\n");
 801082e:	4805      	ldr	r0, [pc, #20]	; (8010844 <Quad_Enable+0x160>)
 8010830:	f001 fec6 	bl	80125c0 <puts>
	  		  }
	  		return ret;
 8010834:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8010838:	4618      	mov	r0, r3
 801083a:	3738      	adds	r7, #56	; 0x38
 801083c:	46bd      	mov	sp, r7
 801083e:	bd80      	pop	{r7, pc}
 8010840:	20000480 	.word	0x20000480
 8010844:	08017ffc 	.word	0x08017ffc

08010848 <QSPI_AutoPollingMemReady>:

uint8_t QSPI_AutoPollingMemReady(void)
{
 8010848:	b580      	push	{r7, lr}
 801084a:	b094      	sub	sp, #80	; 0x50
 801084c:	af00      	add	r7, sp, #0
	uint8_t ret;
	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;
	sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 801084e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010852:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Instruction       = READ_STATUS_REG_CMD;
 8010854:	2305      	movs	r3, #5
 8010856:	61bb      	str	r3, [r7, #24]
	sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8010858:	2300      	movs	r3, #0
 801085a:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 801085c:	2300      	movs	r3, #0
 801085e:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode          = QSPI_DATA_1_LINE;
 8010860:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8010864:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles       = 0;
 8010866:	2300      	movs	r3, #0
 8010868:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 801086a:	2300      	movs	r3, #0
 801086c:	647b      	str	r3, [r7, #68]	; 0x44
	//sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 801086e:	2300      	movs	r3, #0
 8010870:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfig.Match           = 0;
 8010872:	2300      	movs	r3, #0
 8010874:	603b      	str	r3, [r7, #0]
	sConfig.Mask            = MX25R6435F_SR_WIP;
 8010876:	2301      	movs	r3, #1
 8010878:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 801087a:	2300      	movs	r3, #0
 801087c:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 801087e:	2301      	movs	r3, #1
 8010880:	60fb      	str	r3, [r7, #12]
	sConfig.Interval        = 0x10;
 8010882:	2310      	movs	r3, #16
 8010884:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8010886:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801088a:	617b      	str	r3, [r7, #20]
	ret=HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 801088c:	463a      	mov	r2, r7
 801088e:	f107 0118 	add.w	r1, r7, #24
 8010892:	f241 3388 	movw	r3, #5000	; 0x1388
 8010896:	4809      	ldr	r0, [pc, #36]	; (80108bc <QSPI_AutoPollingMemReady+0x74>)
 8010898:	f7f6 fe43 	bl	8007522 <HAL_QSPI_AutoPolling>
 801089c:	4603      	mov	r3, r0
 801089e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if(ret != HAL_OK)
 80108a2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d002      	beq.n	80108b0 <QSPI_AutoPollingMemReady+0x68>
	{
		return ret;
 80108aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80108ae:	e000      	b.n	80108b2 <QSPI_AutoPollingMemReady+0x6a>

	}
	return HAL_OK;
 80108b0:	2300      	movs	r3, #0
}
 80108b2:	4618      	mov	r0, r3
 80108b4:	3750      	adds	r7, #80	; 0x50
 80108b6:	46bd      	mov	sp, r7
 80108b8:	bd80      	pop	{r7, pc}
 80108ba:	bf00      	nop
 80108bc:	20000480 	.word	0x20000480

080108c0 <Quad_Read>:
uint8_t Quad_Read(uint8_t *pData,uint32_t Read_ADDr,uint32_t Size)
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b092      	sub	sp, #72	; 0x48
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	60f8      	str	r0, [r7, #12]
 80108c8:	60b9      	str	r1, [r7, #8]
 80108ca:	607a      	str	r2, [r7, #4]
	uint8_t ret;
	ret=Quad_Enable();
 80108cc:	f7ff ff0a 	bl	80106e4 <Quad_Enable>
 80108d0:	4603      	mov	r3, r0
 80108d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if(ret==HAL_OK)
 80108d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d102      	bne.n	80108e4 <Quad_Read+0x24>
	{
		printf("Quad_enable");
 80108de:	4829      	ldr	r0, [pc, #164]	; (8010984 <Quad_Read+0xc4>)
 80108e0:	f001 fe00 	bl	80124e4 <iprintf>

	}
	QSPI_CommandTypeDef sCommand;
	sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80108e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80108e8:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.Instruction       = QUAD_READ;
 80108ea:	236b      	movs	r3, #107	; 0x6b
 80108ec:	613b      	str	r3, [r7, #16]
	sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80108ee:	2300      	movs	r3, #0
 80108f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80108f2:	2300      	movs	r3, #0
 80108f4:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Address           = Read_ADDr;
 80108f6:	68bb      	ldr	r3, [r7, #8]
 80108f8:	617b      	str	r3, [r7, #20]
	sCommand.AddressSize 	   = QSPI_ADDRESS_24_BITS;
 80108fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80108fe:	61fb      	str	r3, [r7, #28]
	sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 8010900:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8010904:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DataMode          = QSPI_DATA_4_LINES;
 8010906:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 801090a:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DummyCycles       = 8;
 801090c:	2308      	movs	r3, #8
 801090e:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.NbData            = Size;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8010914:	2300      	movs	r3, #0
 8010916:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8010918:	2300      	movs	r3, #0
 801091a:	643b      	str	r3, [r7, #64]	; 0x40

	ret=HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 801091c:	f107 0310 	add.w	r3, r7, #16
 8010920:	f241 3288 	movw	r2, #5000	; 0x1388
 8010924:	4619      	mov	r1, r3
 8010926:	4818      	ldr	r0, [pc, #96]	; (8010988 <Quad_Read+0xc8>)
 8010928:	f7f6 fc6e 	bl	8007208 <HAL_QSPI_Command>
 801092c:	4603      	mov	r3, r0
 801092e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (ret != HAL_OK) {
 8010932:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010936:	2b00      	cmp	r3, #0
 8010938:	d002      	beq.n	8010940 <Quad_Read+0x80>
		  	return ret;
 801093a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801093e:	e01c      	b.n	801097a <Quad_Read+0xba>
		  	}
	ret=HAL_QSPI_Receive(&hqspi,pData, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8010940:	f241 3288 	movw	r2, #5000	; 0x1388
 8010944:	68f9      	ldr	r1, [r7, #12]
 8010946:	4810      	ldr	r0, [pc, #64]	; (8010988 <Quad_Read+0xc8>)
 8010948:	f7f6 fd4e 	bl	80073e8 <HAL_QSPI_Receive>
 801094c:	4603      	mov	r3, r0
 801094e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (ret != HAL_OK) {
 8010952:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010956:	2b00      	cmp	r3, #0
 8010958:	d002      	beq.n	8010960 <Quad_Read+0xa0>
		  	return ret;
 801095a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801095e:	e00c      	b.n	801097a <Quad_Read+0xba>
		  	}
		ret=QSPI_AutoPollingMemReady();
 8010960:	f7ff ff72 	bl	8010848 <QSPI_AutoPollingMemReady>
 8010964:	4603      	mov	r3, r0
 8010966:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					  if (ret != HAL_OK)
 801096a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801096e:	2b00      	cmp	r3, #0
 8010970:	d002      	beq.n	8010978 <Quad_Read+0xb8>
					  {
					 	return ret;
 8010972:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010976:	e000      	b.n	801097a <Quad_Read+0xba>
					 	}
				return HAL_OK;
 8010978:	2300      	movs	r3, #0
		return HAL_OK;
}
 801097a:	4618      	mov	r0, r3
 801097c:	3748      	adds	r7, #72	; 0x48
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}
 8010982:	bf00      	nop
 8010984:	08018008 	.word	0x08018008
 8010988:	20000480 	.word	0x20000480

0801098c <Quad_Write>:
uint8_t Quad_Write(uint8_t *pData,uint32_t Write_ADDr,uint32_t Size)
{
 801098c:	b580      	push	{r7, lr}
 801098e:	b0d0      	sub	sp, #320	; 0x140
 8010990:	af00      	add	r7, sp, #0
 8010992:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010996:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 801099a:	6018      	str	r0, [r3, #0]
 801099c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80109a0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80109a4:	6019      	str	r1, [r3, #0]
 80109a6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80109aa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80109ae:	601a      	str	r2, [r3, #0]
	//QSPI_CommandTypeDef sCommand;
	uint8_t ret;
	if(Write_Enable()!=HAL_OK)
 80109b0:	f7ff fe46 	bl	8010640 <Write_Enable>
 80109b4:	4603      	mov	r3, r0
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d002      	beq.n	80109c0 <Quad_Write+0x34>
			  {
		printf("Write_enable");
 80109ba:	4839      	ldr	r0, [pc, #228]	; (8010aa0 <Quad_Write+0x114>)
 80109bc:	f001 fd92 	bl	80124e4 <iprintf>
//	ret=Quad_Enable();
//	if(ret==HAL_OK)
//		{
//		printf("Quad_enable");
//		}
	uint8_t aT[] = " ****QSPI communication based on IT****  ****QSPI communication based on IT****  ****QSPI communication based on IT****  ****QSPI communication based on IT****  ****QSPI communication based on IT****  ****QSPI communication based on IT**** ";
 80109c0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80109c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80109c8:	4a36      	ldr	r2, [pc, #216]	; (8010aa4 <Quad_Write+0x118>)
 80109ca:	4618      	mov	r0, r3
 80109cc:	4611      	mov	r1, r2
 80109ce:	23f1      	movs	r3, #241	; 0xf1
 80109d0:	461a      	mov	r2, r3
 80109d2:	f001 ff8b 	bl	80128ec <memcpy>
	sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80109d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80109da:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	sCommand.Instruction       = QUAD_PAGE_PROG_CMD;
 80109de:	2338      	movs	r3, #56	; 0x38
 80109e0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80109e4:	2300      	movs	r3, #0
 80109e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	sCommand.Address           = Write_ADDr;
 80109ea:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80109ee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sCommand.AddressSize 	   = QSPI_ADDRESS_24_BITS;
 80109f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80109fc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 8010a00:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8010a04:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	sCommand.DataMode          = QSPI_DATA_4_LINES;
 8010a08:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8010a0c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	sCommand.DummyCycles       = 0;
 8010a10:	2300      	movs	r3, #0
 8010a12:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	sCommand.NbData            = Size;
 8010a16:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010a1a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8010a24:	2300      	movs	r3, #0
 8010a26:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8010a2a:	2300      	movs	r3, #0
 8010a2c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

	ret=HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8010a30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a38:	4619      	mov	r1, r3
 8010a3a:	481b      	ldr	r0, [pc, #108]	; (8010aa8 <Quad_Write+0x11c>)
 8010a3c:	f7f6 fbe4 	bl	8007208 <HAL_QSPI_Command>
 8010a40:	4603      	mov	r3, r0
 8010a42:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
		if (ret != HAL_OK) {
 8010a46:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d002      	beq.n	8010a54 <Quad_Write+0xc8>
		  	return ret;
 8010a4e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8010a52:	e020      	b.n	8010a96 <Quad_Write+0x10a>
		  	}
	ret=HAL_QSPI_Transmit(&hqspi, pData, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8010a54:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010a58:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8010a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a60:	6819      	ldr	r1, [r3, #0]
 8010a62:	4811      	ldr	r0, [pc, #68]	; (8010aa8 <Quad_Write+0x11c>)
 8010a64:	f7f6 fc2e 	bl	80072c4 <HAL_QSPI_Transmit>
 8010a68:	4603      	mov	r3, r0
 8010a6a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
		if (ret != HAL_OK) {
 8010a6e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d002      	beq.n	8010a7c <Quad_Write+0xf0>
			return ret;
 8010a76:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8010a7a:	e00c      	b.n	8010a96 <Quad_Write+0x10a>
			 }
	ret=QSPI_AutoPollingMemReady();
 8010a7c:	f7ff fee4 	bl	8010848 <QSPI_AutoPollingMemReady>
 8010a80:	4603      	mov	r3, r0
 8010a82:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
			  if (ret != HAL_OK)
 8010a86:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d002      	beq.n	8010a94 <Quad_Write+0x108>
			  {
			 	return ret;
 8010a8e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8010a92:	e000      	b.n	8010a96 <Quad_Write+0x10a>
			 	}
		return HAL_OK;
 8010a94:	2300      	movs	r3, #0
}
 8010a96:	4618      	mov	r0, r3
 8010a98:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	bd80      	pop	{r7, pc}
 8010aa0:	08018014 	.word	0x08018014
 8010aa4:	08018024 	.word	0x08018024
 8010aa8:	20000480 	.word	0x20000480

08010aac <QSPI_Sector_Erase>:
uint8_t QSPI_Sector_Erase(uint32_t Address)
{uint8_t ret;
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b090      	sub	sp, #64	; 0x40
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	6078      	str	r0, [r7, #4]
		QSPI_CommandTypeDef sCommand;
	sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8010ab4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010ab8:	623b      	str	r3, [r7, #32]
	  sCommand.Instruction       = SECTOR_ERASE_CMD;
 8010aba:	2320      	movs	r3, #32
 8010abc:	60bb      	str	r3, [r7, #8]
	  sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
 8010abe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ac2:	627b      	str	r3, [r7, #36]	; 0x24
	  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8010ac4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010ac8:	617b      	str	r3, [r7, #20]
	  sCommand.Address           = Address;
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	60fb      	str	r3, [r7, #12]
	  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8010ace:	2300      	movs	r3, #0
 8010ad0:	62bb      	str	r3, [r7, #40]	; 0x28
	  sCommand.DataMode          = QSPI_DATA_NONE;
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sCommand.DummyCycles       = 0;
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	61fb      	str	r3, [r7, #28]
	  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8010ada:	2300      	movs	r3, #0
 8010adc:	637b      	str	r3, [r7, #52]	; 0x34
	  //sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
	  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8010ade:	2300      	movs	r3, #0
 8010ae0:	63bb      	str	r3, [r7, #56]	; 0x38
	  if(Write_Enable()!=HAL_OK)
 8010ae2:	f7ff fdad 	bl	8010640 <Write_Enable>
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d005      	beq.n	8010af8 <QSPI_Sector_Erase+0x4c>
	  		{
	  		printf("Write_enable_fail");
 8010aec:	4814      	ldr	r0, [pc, #80]	; (8010b40 <QSPI_Sector_Erase+0x94>)
 8010aee:	f001 fcf9 	bl	80124e4 <iprintf>
	  		return ret;
 8010af2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010af6:	e01e      	b.n	8010b36 <QSPI_Sector_Erase+0x8a>
	  		}
	  ret=HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8010af8:	f107 0308 	add.w	r3, r7, #8
 8010afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b00:	4619      	mov	r1, r3
 8010b02:	4810      	ldr	r0, [pc, #64]	; (8010b44 <QSPI_Sector_Erase+0x98>)
 8010b04:	f7f6 fb80 	bl	8007208 <HAL_QSPI_Command>
 8010b08:	4603      	mov	r3, r0
 8010b0a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  		if (ret != HAL_OK) {
 8010b0e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d002      	beq.n	8010b1c <QSPI_Sector_Erase+0x70>
	  		  	return ret;
 8010b16:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010b1a:	e00c      	b.n	8010b36 <QSPI_Sector_Erase+0x8a>
	  		  	}
	  ret=QSPI_AutoPollingMemReady();
 8010b1c:	f7ff fe94 	bl	8010848 <QSPI_AutoPollingMemReady>
 8010b20:	4603      	mov	r3, r0
 8010b22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  		if (ret != HAL_OK)
 8010b26:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d002      	beq.n	8010b34 <QSPI_Sector_Erase+0x88>
	  			{
	  			return ret;
 8010b2e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010b32:	e000      	b.n	8010b36 <QSPI_Sector_Erase+0x8a>
	  			}
	  		return HAL_OK;
 8010b34:	2300      	movs	r3, #0

}
 8010b36:	4618      	mov	r0, r3
 8010b38:	3740      	adds	r7, #64	; 0x40
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	bd80      	pop	{r7, pc}
 8010b3e:	bf00      	nop
 8010b40:	08017fe8 	.word	0x08017fe8
 8010b44:	20000480 	.word	0x20000480

08010b48 <update_address>:

void update_address(uint32_t add,uint8_t select)
{
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	b084      	sub	sp, #16
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]
 8010b50:	460b      	mov	r3, r1
 8010b52:	70fb      	strb	r3, [r7, #3]
	 uint8_t current_address[6];
	 Byte_4_conv.Byte_32=add;
 8010b54:	4a3b      	ldr	r2, [pc, #236]	; (8010c44 <update_address+0xfc>)
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	6013      	str	r3, [r2, #0]
	  Quad_Read(&current_address,flash_address_map,6);
 8010b5a:	f107 0308 	add.w	r3, r7, #8
 8010b5e:	2206      	movs	r2, #6
 8010b60:	4939      	ldr	r1, [pc, #228]	; (8010c48 <update_address+0x100>)
 8010b62:	4618      	mov	r0, r3
 8010b64:	f7ff feac 	bl	80108c0 <Quad_Read>
	//  printf("Update address  %d %d %d %d %d %d \n",current_address[0],current_address[1],current_address[2],current_address[3],current_address[4],current_address[5]);
	  if(select==1)
 8010b68:	78fb      	ldrb	r3, [r7, #3]
 8010b6a:	2b01      	cmp	r3, #1
 8010b6c:	d136      	bne.n	8010bdc <update_address+0x94>
	    {
	      for(int8_t i=16;i>=0;i--)                //take of overFlow
 8010b6e:	2310      	movs	r3, #16
 8010b70:	73fb      	strb	r3, [r7, #15]
 8010b72:	e026      	b.n	8010bc2 <update_address+0x7a>
	          {
	//            printf("in loop %d \n",dataconverter.word);
	            if(((Byte_4_conv.Byte_32+i)%4096)==0)
 8010b74:	4b33      	ldr	r3, [pc, #204]	; (8010c44 <update_address+0xfc>)
 8010b76:	681a      	ldr	r2, [r3, #0]
 8010b78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b7c:	4413      	add	r3, r2
 8010b7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d117      	bne.n	8010bb6 <update_address+0x6e>
	              {
	                if(Byte_4_conv.Byte_32+i==end_address_Temp)
 8010b86:	4b2f      	ldr	r3, [pc, #188]	; (8010c44 <update_address+0xfc>)
 8010b88:	681a      	ldr	r2, [r3, #0]
 8010b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b8e:	4413      	add	r3, r2
 8010b90:	f5b3 2f7f 	cmp.w	r3, #1044480	; 0xff000
 8010b94:	d106      	bne.n	8010ba4 <update_address+0x5c>
	                  {
	                	QSPI_Sector_Erase(start_address_Temp);
 8010b96:	2000      	movs	r0, #0
 8010b98:	f7ff ff88 	bl	8010aac <QSPI_Sector_Erase>
	                    Byte_4_conv.Byte_32=start_address_Temp;
 8010b9c:	4b29      	ldr	r3, [pc, #164]	; (8010c44 <update_address+0xfc>)
 8010b9e:	2200      	movs	r2, #0
 8010ba0:	601a      	str	r2, [r3, #0]
	//                    printf("iterative_end \n");
	                    break;
 8010ba2:	e012      	b.n	8010bca <update_address+0x82>
	                  }
	              else
	                  {
	            	  QSPI_Sector_Erase(Byte_4_conv.Byte_32+i);
 8010ba4:	4b27      	ldr	r3, [pc, #156]	; (8010c44 <update_address+0xfc>)
 8010ba6:	681a      	ldr	r2, [r3, #0]
 8010ba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010bac:	4413      	add	r3, r2
 8010bae:	4618      	mov	r0, r3
 8010bb0:	f7ff ff7c 	bl	8010aac <QSPI_Sector_Erase>
	//                    printf("iterative_address_erase %d \n",dataconverter.word+i);
	                    break;
 8010bb4:	e009      	b.n	8010bca <update_address+0x82>
	      for(int8_t i=16;i>=0;i--)                //take of overFlow
 8010bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010bba:	b2db      	uxtb	r3, r3
 8010bbc:	3b01      	subs	r3, #1
 8010bbe:	b2db      	uxtb	r3, r3
 8010bc0:	73fb      	strb	r3, [r7, #15]
 8010bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	dad4      	bge.n	8010b74 <update_address+0x2c>
	                  }
	              }
	          }
	      current_address[0]=Byte_4_conv.Byte_8[2];
 8010bca:	4b1e      	ldr	r3, [pc, #120]	; (8010c44 <update_address+0xfc>)
 8010bcc:	789b      	ldrb	r3, [r3, #2]
 8010bce:	723b      	strb	r3, [r7, #8]
	      current_address[1]=Byte_4_conv.Byte_8[1];
 8010bd0:	4b1c      	ldr	r3, [pc, #112]	; (8010c44 <update_address+0xfc>)
 8010bd2:	785b      	ldrb	r3, [r3, #1]
 8010bd4:	727b      	strb	r3, [r7, #9]
	      current_address[2]=Byte_4_conv.Byte_8[0];
 8010bd6:	4b1b      	ldr	r3, [pc, #108]	; (8010c44 <update_address+0xfc>)
 8010bd8:	781b      	ldrb	r3, [r3, #0]
 8010bda:	72bb      	strb	r3, [r7, #10]
	//      printf("up_address %d %d %d",current_address[0],current_address[1],current_address[2]);
	    }
	  if(select==2)
 8010bdc:	78fb      	ldrb	r3, [r7, #3]
 8010bde:	2b02      	cmp	r3, #2
 8010be0:	d121      	bne.n	8010c26 <update_address+0xde>
	    {
	      if(Byte_4_conv.Byte_32 % 4096==0)
 8010be2:	4b18      	ldr	r3, [pc, #96]	; (8010c44 <update_address+0xfc>)
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d112      	bne.n	8010c14 <update_address+0xcc>
	        {
	          if(Byte_4_conv.Byte_32==end_address_UV)
 8010bee:	4b15      	ldr	r3, [pc, #84]	; (8010c44 <update_address+0xfc>)
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	4a15      	ldr	r2, [pc, #84]	; (8010c48 <update_address+0x100>)
 8010bf4:	4293      	cmp	r3, r2
 8010bf6:	d108      	bne.n	8010c0a <update_address+0xc2>
	              {
	        	  QSPI_Sector_Erase(start_address_UV);
 8010bf8:	f44f 207f 	mov.w	r0, #1044480	; 0xff000
 8010bfc:	f7ff ff56 	bl	8010aac <QSPI_Sector_Erase>
	        	  Byte_4_conv.Byte_32=start_address_UV;
 8010c00:	4b10      	ldr	r3, [pc, #64]	; (8010c44 <update_address+0xfc>)
 8010c02:	f44f 227f 	mov.w	r2, #1044480	; 0xff000
 8010c06:	601a      	str	r2, [r3, #0]
 8010c08:	e004      	b.n	8010c14 <update_address+0xcc>
	//               printf("iterative_end \n");
	              }
	          else
	              {
	        	  QSPI_Sector_Erase(Byte_4_conv.Byte_32);
 8010c0a:	4b0e      	ldr	r3, [pc, #56]	; (8010c44 <update_address+0xfc>)
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	4618      	mov	r0, r3
 8010c10:	f7ff ff4c 	bl	8010aac <QSPI_Sector_Erase>
	//               printf("iterative_address_erase %d \n",dataconverter.word);
	              }
	        }
	      current_address[3]=Byte_4_conv.Byte_8[2];
 8010c14:	4b0b      	ldr	r3, [pc, #44]	; (8010c44 <update_address+0xfc>)
 8010c16:	789b      	ldrb	r3, [r3, #2]
 8010c18:	72fb      	strb	r3, [r7, #11]
	      current_address[4]=Byte_4_conv.Byte_8[1];
 8010c1a:	4b0a      	ldr	r3, [pc, #40]	; (8010c44 <update_address+0xfc>)
 8010c1c:	785b      	ldrb	r3, [r3, #1]
 8010c1e:	733b      	strb	r3, [r7, #12]
	      current_address[5]=Byte_4_conv.Byte_8[0];
 8010c20:	4b08      	ldr	r3, [pc, #32]	; (8010c44 <update_address+0xfc>)
 8010c22:	781b      	ldrb	r3, [r3, #0]
 8010c24:	737b      	strb	r3, [r7, #13]
	    }
	  QSPI_Sector_Erase(flash_address_map);
 8010c26:	4808      	ldr	r0, [pc, #32]	; (8010c48 <update_address+0x100>)
 8010c28:	f7ff ff40 	bl	8010aac <QSPI_Sector_Erase>
	  Quad_Write(&current_address,flash_address_map,6);
 8010c2c:	f107 0308 	add.w	r3, r7, #8
 8010c30:	2206      	movs	r2, #6
 8010c32:	4905      	ldr	r1, [pc, #20]	; (8010c48 <update_address+0x100>)
 8010c34:	4618      	mov	r0, r3
 8010c36:	f7ff fea9 	bl	801098c <Quad_Write>

}
 8010c3a:	bf00      	nop
 8010c3c:	3710      	adds	r7, #16
 8010c3e:	46bd      	mov	sp, r7
 8010c40:	bd80      	pop	{r7, pc}
 8010c42:	bf00      	nop
 8010c44:	20000710 	.word	0x20000710
 8010c48:	001ff000 	.word	0x001ff000

08010c4c <Read_flash_address>:
uint32_t Read_flash_address(uint8_t select)
{
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	b086      	sub	sp, #24
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	4603      	mov	r3, r0
 8010c54:	71fb      	strb	r3, [r7, #7]
  uint8_t current_address[6];

  uint32_t add;
  Quad_Read(current_address,2093056,6);
 8010c56:	f107 030c 	add.w	r3, r7, #12
 8010c5a:	2206      	movs	r2, #6
 8010c5c:	4927      	ldr	r1, [pc, #156]	; (8010cfc <Read_flash_address+0xb0>)
 8010c5e:	4618      	mov	r0, r3
 8010c60:	f7ff fe2e 	bl	80108c0 <Quad_Read>
//  printf("current_add %d %d %d %d %d %d \n",current_address[0],current_address[1],current_address[2],current_address[3],current_address[4],current_address[5]);
// printf("select %d \n",select);
  if(select==1)
 8010c64:	79fb      	ldrb	r3, [r7, #7]
 8010c66:	2b01      	cmp	r3, #1
 8010c68:	d11e      	bne.n	8010ca8 <Read_flash_address+0x5c>
    {
	  Byte_4_conv.Byte_8[0]=current_address[2];
 8010c6a:	7bba      	ldrb	r2, [r7, #14]
 8010c6c:	4b24      	ldr	r3, [pc, #144]	; (8010d00 <Read_flash_address+0xb4>)
 8010c6e:	701a      	strb	r2, [r3, #0]
	  Byte_4_conv.Byte_8[1]=current_address[1];
 8010c70:	7b7a      	ldrb	r2, [r7, #13]
 8010c72:	4b23      	ldr	r3, [pc, #140]	; (8010d00 <Read_flash_address+0xb4>)
 8010c74:	705a      	strb	r2, [r3, #1]
	  Byte_4_conv.Byte_8[2]=current_address[0];
 8010c76:	7b3a      	ldrb	r2, [r7, #12]
 8010c78:	4b21      	ldr	r3, [pc, #132]	; (8010d00 <Read_flash_address+0xb4>)
 8010c7a:	709a      	strb	r2, [r3, #2]
	  Byte_4_conv.Byte_8[3]=0;
 8010c7c:	4b20      	ldr	r3, [pc, #128]	; (8010d00 <Read_flash_address+0xb4>)
 8010c7e:	2200      	movs	r2, #0
 8010c80:	70da      	strb	r2, [r3, #3]
      add=Byte_4_conv.Byte_32;
 8010c82:	4b1f      	ldr	r3, [pc, #124]	; (8010d00 <Read_flash_address+0xb4>)
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	617b      	str	r3, [r7, #20]
//      printf("address_1: %ld \n\n",add);
      if(add==0xffffff || add>=end_address_Temp||add<=start_address_Temp)
 8010c88:	697b      	ldr	r3, [r7, #20]
 8010c8a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8010c8e:	4293      	cmp	r3, r2
 8010c90:	d006      	beq.n	8010ca0 <Read_flash_address+0x54>
 8010c92:	697b      	ldr	r3, [r7, #20]
 8010c94:	f5b3 2f7f 	cmp.w	r3, #1044480	; 0xff000
 8010c98:	d202      	bcs.n	8010ca0 <Read_flash_address+0x54>
 8010c9a:	697b      	ldr	r3, [r7, #20]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d101      	bne.n	8010ca4 <Read_flash_address+0x58>
        {
          //update_address(start_address_Temp,1);
          add=start_address_Temp;
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	617b      	str	r3, [r7, #20]
         }
      return add;
 8010ca4:	697b      	ldr	r3, [r7, #20]
 8010ca6:	e025      	b.n	8010cf4 <Read_flash_address+0xa8>
    }
  else if(select==0)
 8010ca8:	79fb      	ldrb	r3, [r7, #7]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d120      	bne.n	8010cf0 <Read_flash_address+0xa4>
    {
	  Byte_4_conv.Byte_8[0]=current_address[5];
 8010cae:	7c7a      	ldrb	r2, [r7, #17]
 8010cb0:	4b13      	ldr	r3, [pc, #76]	; (8010d00 <Read_flash_address+0xb4>)
 8010cb2:	701a      	strb	r2, [r3, #0]
	  Byte_4_conv.Byte_8[1]=current_address[4];
 8010cb4:	7c3a      	ldrb	r2, [r7, #16]
 8010cb6:	4b12      	ldr	r3, [pc, #72]	; (8010d00 <Read_flash_address+0xb4>)
 8010cb8:	705a      	strb	r2, [r3, #1]
	  Byte_4_conv.Byte_8[2]=current_address[3];
 8010cba:	7bfa      	ldrb	r2, [r7, #15]
 8010cbc:	4b10      	ldr	r3, [pc, #64]	; (8010d00 <Read_flash_address+0xb4>)
 8010cbe:	709a      	strb	r2, [r3, #2]
	  Byte_4_conv.Byte_8[3]=0;
 8010cc0:	4b0f      	ldr	r3, [pc, #60]	; (8010d00 <Read_flash_address+0xb4>)
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	70da      	strb	r2, [r3, #3]
	  add=Byte_4_conv.Byte_32;
 8010cc6:	4b0e      	ldr	r3, [pc, #56]	; (8010d00 <Read_flash_address+0xb4>)
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	617b      	str	r3, [r7, #20]

      if(add==0xffffff || add>=end_address_UV || add<=start_address_UV)
 8010ccc:	697b      	ldr	r3, [r7, #20]
 8010cce:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8010cd2:	4293      	cmp	r3, r2
 8010cd4:	d007      	beq.n	8010ce6 <Read_flash_address+0x9a>
 8010cd6:	697b      	ldr	r3, [r7, #20]
 8010cd8:	4a0a      	ldr	r2, [pc, #40]	; (8010d04 <Read_flash_address+0xb8>)
 8010cda:	4293      	cmp	r3, r2
 8010cdc:	d803      	bhi.n	8010ce6 <Read_flash_address+0x9a>
 8010cde:	697b      	ldr	r3, [r7, #20]
 8010ce0:	f5b3 2f7f 	cmp.w	r3, #1044480	; 0xff000
 8010ce4:	d802      	bhi.n	8010cec <Read_flash_address+0xa0>
              {
                //update_address(start_address_Temp,2);
                 add=start_address_UV;
 8010ce6:	f44f 237f 	mov.w	r3, #1044480	; 0xff000
 8010cea:	617b      	str	r3, [r7, #20]
               }
            return add;
 8010cec:	697b      	ldr	r3, [r7, #20]
 8010cee:	e001      	b.n	8010cf4 <Read_flash_address+0xa8>
    }
  else
    {
      return(0xffffff);
 8010cf0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    }
}
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	3718      	adds	r7, #24
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	bd80      	pop	{r7, pc}
 8010cfc:	001ff000 	.word	0x001ff000
 8010d00:	20000710 	.word	0x20000710
 8010d04:	001fefff 	.word	0x001fefff

08010d08 <LL_PWR_EnableBootC2>:
{
 8010d08:	b480      	push	{r7}
 8010d0a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8010d0c:	4b05      	ldr	r3, [pc, #20]	; (8010d24 <LL_PWR_EnableBootC2+0x1c>)
 8010d0e:	68db      	ldr	r3, [r3, #12]
 8010d10:	4a04      	ldr	r2, [pc, #16]	; (8010d24 <LL_PWR_EnableBootC2+0x1c>)
 8010d12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010d16:	60d3      	str	r3, [r2, #12]
}
 8010d18:	bf00      	nop
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d20:	4770      	bx	lr
 8010d22:	bf00      	nop
 8010d24:	58000400 	.word	0x58000400

08010d28 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8010d28:	b480      	push	{r7}
 8010d2a:	b083      	sub	sp, #12
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8010d30:	4b06      	ldr	r3, [pc, #24]	; (8010d4c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8010d32:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8010d36:	4905      	ldr	r1, [pc, #20]	; (8010d4c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	4313      	orrs	r3, r2
 8010d3c:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8010d40:	bf00      	nop
 8010d42:	370c      	adds	r7, #12
 8010d44:	46bd      	mov	sp, r7
 8010d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4a:	4770      	bx	lr
 8010d4c:	58000800 	.word	0x58000800

08010d50 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8010d50:	b480      	push	{r7}
 8010d52:	b083      	sub	sp, #12
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8010d58:	4b05      	ldr	r3, [pc, #20]	; (8010d70 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8010d5a:	6a1a      	ldr	r2, [r3, #32]
 8010d5c:	4904      	ldr	r1, [pc, #16]	; (8010d70 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	4313      	orrs	r3, r2
 8010d62:	620b      	str	r3, [r1, #32]
}
 8010d64:	bf00      	nop
 8010d66:	370c      	adds	r7, #12
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6e:	4770      	bx	lr
 8010d70:	58000800 	.word	0x58000800

08010d74 <LL_AHB3_GRP1_EnableClock>:
{
 8010d74:	b480      	push	{r7}
 8010d76:	b085      	sub	sp, #20
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8010d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010d80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010d82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	4313      	orrs	r3, r2
 8010d8a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8010d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010d90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	4013      	ands	r3, r2
 8010d96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010d98:	68fb      	ldr	r3, [r7, #12]
}
 8010d9a:	bf00      	nop
 8010d9c:	3714      	adds	r7, #20
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da4:	4770      	bx	lr

08010da6 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8010da6:	b480      	push	{r7}
 8010da8:	b085      	sub	sp, #20
 8010daa:	af00      	add	r7, sp, #0
 8010dac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8010dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010db2:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8010db6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	4313      	orrs	r3, r2
 8010dbe:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8010dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010dc6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	4013      	ands	r3, r2
 8010dce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010dd0:	68fb      	ldr	r3, [r7, #12]
}
 8010dd2:	bf00      	nop
 8010dd4:	3714      	adds	r7, #20
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ddc:	4770      	bx	lr

08010dde <LL_C1_IPCC_EnableIT_TXF>:
{
 8010dde:	b480      	push	{r7}
 8010de0:	b083      	sub	sp, #12
 8010de2:	af00      	add	r7, sp, #0
 8010de4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	601a      	str	r2, [r3, #0]
}
 8010df2:	bf00      	nop
 8010df4:	370c      	adds	r7, #12
 8010df6:	46bd      	mov	sp, r7
 8010df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dfc:	4770      	bx	lr

08010dfe <LL_C1_IPCC_EnableIT_RXO>:
{
 8010dfe:	b480      	push	{r7}
 8010e00:	b083      	sub	sp, #12
 8010e02:	af00      	add	r7, sp, #0
 8010e04:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	f043 0201 	orr.w	r2, r3, #1
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	601a      	str	r2, [r3, #0]
}
 8010e12:	bf00      	nop
 8010e14:	370c      	adds	r7, #12
 8010e16:	46bd      	mov	sp, r7
 8010e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1c:	4770      	bx	lr

08010e1e <LL_C1_IPCC_EnableTransmitChannel>:
{
 8010e1e:	b480      	push	{r7}
 8010e20:	b083      	sub	sp, #12
 8010e22:	af00      	add	r7, sp, #0
 8010e24:	6078      	str	r0, [r7, #4]
 8010e26:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	685a      	ldr	r2, [r3, #4]
 8010e2c:	683b      	ldr	r3, [r7, #0]
 8010e2e:	041b      	lsls	r3, r3, #16
 8010e30:	43db      	mvns	r3, r3
 8010e32:	401a      	ands	r2, r3
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	605a      	str	r2, [r3, #4]
}
 8010e38:	bf00      	nop
 8010e3a:	370c      	adds	r7, #12
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e42:	4770      	bx	lr

08010e44 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8010e44:	b480      	push	{r7}
 8010e46:	b083      	sub	sp, #12
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	6078      	str	r0, [r7, #4]
 8010e4c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	685a      	ldr	r2, [r3, #4]
 8010e52:	683b      	ldr	r3, [r7, #0]
 8010e54:	041b      	lsls	r3, r3, #16
 8010e56:	431a      	orrs	r2, r3
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	605a      	str	r2, [r3, #4]
}
 8010e5c:	bf00      	nop
 8010e5e:	370c      	adds	r7, #12
 8010e60:	46bd      	mov	sp, r7
 8010e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e66:	4770      	bx	lr

08010e68 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8010e68:	b480      	push	{r7}
 8010e6a:	b083      	sub	sp, #12
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]
 8010e70:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	685a      	ldr	r2, [r3, #4]
 8010e76:	683b      	ldr	r3, [r7, #0]
 8010e78:	43db      	mvns	r3, r3
 8010e7a:	401a      	ands	r2, r3
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	605a      	str	r2, [r3, #4]
}
 8010e80:	bf00      	nop
 8010e82:	370c      	adds	r7, #12
 8010e84:	46bd      	mov	sp, r7
 8010e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8a:	4770      	bx	lr

08010e8c <LL_C1_IPCC_ClearFlag_CHx>:
{
 8010e8c:	b480      	push	{r7}
 8010e8e:	b083      	sub	sp, #12
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	6078      	str	r0, [r7, #4]
 8010e94:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	683a      	ldr	r2, [r7, #0]
 8010e9a:	609a      	str	r2, [r3, #8]
}
 8010e9c:	bf00      	nop
 8010e9e:	370c      	adds	r7, #12
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea6:	4770      	bx	lr

08010ea8 <LL_C1_IPCC_SetFlag_CHx>:
{
 8010ea8:	b480      	push	{r7}
 8010eaa:	b083      	sub	sp, #12
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	6078      	str	r0, [r7, #4]
 8010eb0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8010eb2:	683b      	ldr	r3, [r7, #0]
 8010eb4:	041a      	lsls	r2, r3, #16
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	609a      	str	r2, [r3, #8]
}
 8010eba:	bf00      	nop
 8010ebc:	370c      	adds	r7, #12
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec4:	4770      	bx	lr

08010ec6 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8010ec6:	b480      	push	{r7}
 8010ec8:	b083      	sub	sp, #12
 8010eca:	af00      	add	r7, sp, #0
 8010ecc:	6078      	str	r0, [r7, #4]
 8010ece:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	68da      	ldr	r2, [r3, #12]
 8010ed4:	683b      	ldr	r3, [r7, #0]
 8010ed6:	4013      	ands	r3, r2
 8010ed8:	683a      	ldr	r2, [r7, #0]
 8010eda:	429a      	cmp	r2, r3
 8010edc:	d101      	bne.n	8010ee2 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8010ede:	2301      	movs	r3, #1
 8010ee0:	e000      	b.n	8010ee4 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8010ee2:	2300      	movs	r3, #0
}
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	370c      	adds	r7, #12
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eee:	4770      	bx	lr

08010ef0 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8010ef0:	b480      	push	{r7}
 8010ef2:	b083      	sub	sp, #12
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
 8010ef8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	69da      	ldr	r2, [r3, #28]
 8010efe:	683b      	ldr	r3, [r7, #0]
 8010f00:	4013      	ands	r3, r2
 8010f02:	683a      	ldr	r2, [r7, #0]
 8010f04:	429a      	cmp	r2, r3
 8010f06:	d101      	bne.n	8010f0c <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8010f08:	2301      	movs	r3, #1
 8010f0a:	e000      	b.n	8010f0e <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8010f0c:	2300      	movs	r3, #0
}
 8010f0e:	4618      	mov	r0, r3
 8010f10:	370c      	adds	r7, #12
 8010f12:	46bd      	mov	sp, r7
 8010f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f18:	4770      	bx	lr
	...

08010f1c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8010f20:	2102      	movs	r1, #2
 8010f22:	4818      	ldr	r0, [pc, #96]	; (8010f84 <HW_IPCC_Rx_Handler+0x68>)
 8010f24:	f7ff ffe4 	bl	8010ef0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8010f28:	4603      	mov	r3, r0
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d008      	beq.n	8010f40 <HW_IPCC_Rx_Handler+0x24>
 8010f2e:	4b15      	ldr	r3, [pc, #84]	; (8010f84 <HW_IPCC_Rx_Handler+0x68>)
 8010f30:	685b      	ldr	r3, [r3, #4]
 8010f32:	f003 0302 	and.w	r3, r3, #2
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d102      	bne.n	8010f40 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8010f3a:	f000 f8d5 	bl	80110e8 <HW_IPCC_SYS_EvtHandler>
 8010f3e:	e01e      	b.n	8010f7e <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8010f40:	2101      	movs	r1, #1
 8010f42:	4810      	ldr	r0, [pc, #64]	; (8010f84 <HW_IPCC_Rx_Handler+0x68>)
 8010f44:	f7ff ffd4 	bl	8010ef0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8010f48:	4603      	mov	r3, r0
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d008      	beq.n	8010f60 <HW_IPCC_Rx_Handler+0x44>
 8010f4e:	4b0d      	ldr	r3, [pc, #52]	; (8010f84 <HW_IPCC_Rx_Handler+0x68>)
 8010f50:	685b      	ldr	r3, [r3, #4]
 8010f52:	f003 0301 	and.w	r3, r3, #1
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d102      	bne.n	8010f60 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8010f5a:	f000 f889 	bl	8011070 <HW_IPCC_BLE_EvtHandler>
 8010f5e:	e00e      	b.n	8010f7e <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8010f60:	2108      	movs	r1, #8
 8010f62:	4808      	ldr	r0, [pc, #32]	; (8010f84 <HW_IPCC_Rx_Handler+0x68>)
 8010f64:	f7ff ffc4 	bl	8010ef0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8010f68:	4603      	mov	r3, r0
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d008      	beq.n	8010f80 <HW_IPCC_Rx_Handler+0x64>
 8010f6e:	4b05      	ldr	r3, [pc, #20]	; (8010f84 <HW_IPCC_Rx_Handler+0x68>)
 8010f70:	685b      	ldr	r3, [r3, #4]
 8010f72:	f003 0308 	and.w	r3, r3, #8
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d102      	bne.n	8010f80 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8010f7a:	f000 f901 	bl	8011180 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8010f7e:	bf00      	nop
 8010f80:	bf00      	nop
}
 8010f82:	bd80      	pop	{r7, pc}
 8010f84:	58000c00 	.word	0x58000c00

08010f88 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8010f8c:	2102      	movs	r1, #2
 8010f8e:	4818      	ldr	r0, [pc, #96]	; (8010ff0 <HW_IPCC_Tx_Handler+0x68>)
 8010f90:	f7ff ff99 	bl	8010ec6 <LL_C1_IPCC_IsActiveFlag_CHx>
 8010f94:	4603      	mov	r3, r0
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d108      	bne.n	8010fac <HW_IPCC_Tx_Handler+0x24>
 8010f9a:	4b15      	ldr	r3, [pc, #84]	; (8010ff0 <HW_IPCC_Tx_Handler+0x68>)
 8010f9c:	685b      	ldr	r3, [r3, #4]
 8010f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d102      	bne.n	8010fac <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8010fa6:	f000 f893 	bl	80110d0 <HW_IPCC_SYS_CmdEvtHandler>
 8010faa:	e01e      	b.n	8010fea <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8010fac:	2108      	movs	r1, #8
 8010fae:	4810      	ldr	r0, [pc, #64]	; (8010ff0 <HW_IPCC_Tx_Handler+0x68>)
 8010fb0:	f7ff ff89 	bl	8010ec6 <LL_C1_IPCC_IsActiveFlag_CHx>
 8010fb4:	4603      	mov	r3, r0
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d108      	bne.n	8010fcc <HW_IPCC_Tx_Handler+0x44>
 8010fba:	4b0d      	ldr	r3, [pc, #52]	; (8010ff0 <HW_IPCC_Tx_Handler+0x68>)
 8010fbc:	685b      	ldr	r3, [r3, #4]
 8010fbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d102      	bne.n	8010fcc <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8010fc6:	f000 f8bd 	bl	8011144 <HW_IPCC_MM_FreeBufHandler>
 8010fca:	e00e      	b.n	8010fea <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8010fcc:	2120      	movs	r1, #32
 8010fce:	4808      	ldr	r0, [pc, #32]	; (8010ff0 <HW_IPCC_Tx_Handler+0x68>)
 8010fd0:	f7ff ff79 	bl	8010ec6 <LL_C1_IPCC_IsActiveFlag_CHx>
 8010fd4:	4603      	mov	r3, r0
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d108      	bne.n	8010fec <HW_IPCC_Tx_Handler+0x64>
 8010fda:	4b05      	ldr	r3, [pc, #20]	; (8010ff0 <HW_IPCC_Tx_Handler+0x68>)
 8010fdc:	685b      	ldr	r3, [r3, #4]
 8010fde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d102      	bne.n	8010fec <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8010fe6:	f000 f84f 	bl	8011088 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8010fea:	bf00      	nop
 8010fec:	bf00      	nop
}
 8010fee:	bd80      	pop	{r7, pc}
 8010ff0:	58000c00 	.word	0x58000c00

08010ff4 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8010ff8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8010ffc:	f7ff fed3 	bl	8010da6 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8011000:	f44f 7000 	mov.w	r0, #512	; 0x200
 8011004:	f7ff fea4 	bl	8010d50 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8011008:	f44f 7000 	mov.w	r0, #512	; 0x200
 801100c:	f7ff fe8c 	bl	8010d28 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8011010:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8011012:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8011014:	f7ff fe78 	bl	8010d08 <LL_PWR_EnableBootC2>

  return;
 8011018:	bf00      	nop
}
 801101a:	bd80      	pop	{r7, pc}

0801101c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 801101c:	b580      	push	{r7, lr}
 801101e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8011020:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8011024:	f7ff fea6 	bl	8010d74 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8011028:	4806      	ldr	r0, [pc, #24]	; (8011044 <HW_IPCC_Init+0x28>)
 801102a:	f7ff fee8 	bl	8010dfe <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 801102e:	4805      	ldr	r0, [pc, #20]	; (8011044 <HW_IPCC_Init+0x28>)
 8011030:	f7ff fed5 	bl	8010dde <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8011034:	202c      	movs	r0, #44	; 0x2c
 8011036:	f7f4 fe4c 	bl	8005cd2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 801103a:	202d      	movs	r0, #45	; 0x2d
 801103c:	f7f4 fe49 	bl	8005cd2 <HAL_NVIC_EnableIRQ>

  return;
 8011040:	bf00      	nop
}
 8011042:	bd80      	pop	{r7, pc}
 8011044:	58000c00 	.word	0x58000c00

08011048 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8011048:	b580      	push	{r7, lr}
 801104a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 801104c:	2101      	movs	r1, #1
 801104e:	4802      	ldr	r0, [pc, #8]	; (8011058 <HW_IPCC_BLE_Init+0x10>)
 8011050:	f7ff ff0a 	bl	8010e68 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8011054:	bf00      	nop
}
 8011056:	bd80      	pop	{r7, pc}
 8011058:	58000c00 	.word	0x58000c00

0801105c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 801105c:	b580      	push	{r7, lr}
 801105e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8011060:	2101      	movs	r1, #1
 8011062:	4802      	ldr	r0, [pc, #8]	; (801106c <HW_IPCC_BLE_SendCmd+0x10>)
 8011064:	f7ff ff20 	bl	8010ea8 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8011068:	bf00      	nop
}
 801106a:	bd80      	pop	{r7, pc}
 801106c:	58000c00 	.word	0x58000c00

08011070 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8011070:	b580      	push	{r7, lr}
 8011072:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8011074:	f7fb ff74 	bl	800cf60 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8011078:	2101      	movs	r1, #1
 801107a:	4802      	ldr	r0, [pc, #8]	; (8011084 <HW_IPCC_BLE_EvtHandler+0x14>)
 801107c:	f7ff ff06 	bl	8010e8c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8011080:	bf00      	nop
}
 8011082:	bd80      	pop	{r7, pc}
 8011084:	58000c00 	.word	0x58000c00

08011088 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8011088:	b580      	push	{r7, lr}
 801108a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 801108c:	2120      	movs	r1, #32
 801108e:	4803      	ldr	r0, [pc, #12]	; (801109c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8011090:	f7ff fed8 	bl	8010e44 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8011094:	f7fb ff94 	bl	800cfc0 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8011098:	bf00      	nop
}
 801109a:	bd80      	pop	{r7, pc}
 801109c:	58000c00 	.word	0x58000c00

080110a0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80110a0:	b580      	push	{r7, lr}
 80110a2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80110a4:	2102      	movs	r1, #2
 80110a6:	4802      	ldr	r0, [pc, #8]	; (80110b0 <HW_IPCC_SYS_Init+0x10>)
 80110a8:	f7ff fede 	bl	8010e68 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80110ac:	bf00      	nop
}
 80110ae:	bd80      	pop	{r7, pc}
 80110b0:	58000c00 	.word	0x58000c00

080110b4 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80110b4:	b580      	push	{r7, lr}
 80110b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80110b8:	2102      	movs	r1, #2
 80110ba:	4804      	ldr	r0, [pc, #16]	; (80110cc <HW_IPCC_SYS_SendCmd+0x18>)
 80110bc:	f7ff fef4 	bl	8010ea8 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80110c0:	2102      	movs	r1, #2
 80110c2:	4802      	ldr	r0, [pc, #8]	; (80110cc <HW_IPCC_SYS_SendCmd+0x18>)
 80110c4:	f7ff feab 	bl	8010e1e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80110c8:	bf00      	nop
}
 80110ca:	bd80      	pop	{r7, pc}
 80110cc:	58000c00 	.word	0x58000c00

080110d0 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80110d4:	2102      	movs	r1, #2
 80110d6:	4803      	ldr	r0, [pc, #12]	; (80110e4 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 80110d8:	f7ff feb4 	bl	8010e44 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 80110dc:	f7fb ffc0 	bl	800d060 <HW_IPCC_SYS_CmdEvtNot>

  return;
 80110e0:	bf00      	nop
}
 80110e2:	bd80      	pop	{r7, pc}
 80110e4:	58000c00 	.word	0x58000c00

080110e8 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80110ec:	f7fb ffce 	bl	800d08c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80110f0:	2102      	movs	r1, #2
 80110f2:	4802      	ldr	r0, [pc, #8]	; (80110fc <HW_IPCC_SYS_EvtHandler+0x14>)
 80110f4:	f7ff feca 	bl	8010e8c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80110f8:	bf00      	nop
}
 80110fa:	bd80      	pop	{r7, pc}
 80110fc:	58000c00 	.word	0x58000c00

08011100 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8011100:	b580      	push	{r7, lr}
 8011102:	b082      	sub	sp, #8
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8011108:	2108      	movs	r1, #8
 801110a:	480c      	ldr	r0, [pc, #48]	; (801113c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 801110c:	f7ff fedb 	bl	8010ec6 <LL_C1_IPCC_IsActiveFlag_CHx>
 8011110:	4603      	mov	r3, r0
 8011112:	2b00      	cmp	r3, #0
 8011114:	d007      	beq.n	8011126 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8011116:	4a0a      	ldr	r2, [pc, #40]	; (8011140 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801111c:	2108      	movs	r1, #8
 801111e:	4807      	ldr	r0, [pc, #28]	; (801113c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8011120:	f7ff fe7d 	bl	8010e1e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8011124:	e006      	b.n	8011134 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801112a:	2108      	movs	r1, #8
 801112c:	4803      	ldr	r0, [pc, #12]	; (801113c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 801112e:	f7ff febb 	bl	8010ea8 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8011132:	bf00      	nop
}
 8011134:	3708      	adds	r7, #8
 8011136:	46bd      	mov	sp, r7
 8011138:	bd80      	pop	{r7, pc}
 801113a:	bf00      	nop
 801113c:	58000c00 	.word	0x58000c00
 8011140:	20000714 	.word	0x20000714

08011144 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8011144:	b580      	push	{r7, lr}
 8011146:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8011148:	2108      	movs	r1, #8
 801114a:	4806      	ldr	r0, [pc, #24]	; (8011164 <HW_IPCC_MM_FreeBufHandler+0x20>)
 801114c:	f7ff fe7a 	bl	8010e44 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8011150:	4b05      	ldr	r3, [pc, #20]	; (8011168 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8011156:	2108      	movs	r1, #8
 8011158:	4802      	ldr	r0, [pc, #8]	; (8011164 <HW_IPCC_MM_FreeBufHandler+0x20>)
 801115a:	f7ff fea5 	bl	8010ea8 <LL_C1_IPCC_SetFlag_CHx>

  return;
 801115e:	bf00      	nop
}
 8011160:	bd80      	pop	{r7, pc}
 8011162:	bf00      	nop
 8011164:	58000c00 	.word	0x58000c00
 8011168:	20000714 	.word	0x20000714

0801116c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 801116c:	b580      	push	{r7, lr}
 801116e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8011170:	2108      	movs	r1, #8
 8011172:	4802      	ldr	r0, [pc, #8]	; (801117c <HW_IPCC_TRACES_Init+0x10>)
 8011174:	f7ff fe78 	bl	8010e68 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8011178:	bf00      	nop
}
 801117a:	bd80      	pop	{r7, pc}
 801117c:	58000c00 	.word	0x58000c00

08011180 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8011180:	b580      	push	{r7, lr}
 8011182:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8011184:	f7fc f82a 	bl	800d1dc <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8011188:	2108      	movs	r1, #8
 801118a:	4802      	ldr	r0, [pc, #8]	; (8011194 <HW_IPCC_TRACES_EvtHandler+0x14>)
 801118c:	f7ff fe7e 	bl	8010e8c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8011190:	bf00      	nop
}
 8011192:	bd80      	pop	{r7, pc}
 8011194:	58000c00 	.word	0x58000c00

08011198 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8011198:	b480      	push	{r7}
 801119a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801119c:	4b05      	ldr	r3, [pc, #20]	; (80111b4 <UTIL_LPM_Init+0x1c>)
 801119e:	2200      	movs	r2, #0
 80111a0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80111a2:	4b05      	ldr	r3, [pc, #20]	; (80111b8 <UTIL_LPM_Init+0x20>)
 80111a4:	2200      	movs	r2, #0
 80111a6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80111a8:	bf00      	nop
 80111aa:	46bd      	mov	sp, r7
 80111ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b0:	4770      	bx	lr
 80111b2:	bf00      	nop
 80111b4:	20000718 	.word	0x20000718
 80111b8:	2000071c 	.word	0x2000071c

080111bc <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80111bc:	b480      	push	{r7}
 80111be:	b087      	sub	sp, #28
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
 80111c4:	460b      	mov	r3, r1
 80111c6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80111c8:	f3ef 8310 	mrs	r3, PRIMASK
 80111cc:	613b      	str	r3, [r7, #16]
  return(result);
 80111ce:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80111d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80111d2:	b672      	cpsid	i
}
 80111d4:	bf00      	nop
  
  switch(state)
 80111d6:	78fb      	ldrb	r3, [r7, #3]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d008      	beq.n	80111ee <UTIL_LPM_SetOffMode+0x32>
 80111dc:	2b01      	cmp	r3, #1
 80111de:	d10e      	bne.n	80111fe <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80111e0:	4b0d      	ldr	r3, [pc, #52]	; (8011218 <UTIL_LPM_SetOffMode+0x5c>)
 80111e2:	681a      	ldr	r2, [r3, #0]
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	4313      	orrs	r3, r2
 80111e8:	4a0b      	ldr	r2, [pc, #44]	; (8011218 <UTIL_LPM_SetOffMode+0x5c>)
 80111ea:	6013      	str	r3, [r2, #0]
      break;
 80111ec:	e008      	b.n	8011200 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	43da      	mvns	r2, r3
 80111f2:	4b09      	ldr	r3, [pc, #36]	; (8011218 <UTIL_LPM_SetOffMode+0x5c>)
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	4013      	ands	r3, r2
 80111f8:	4a07      	ldr	r2, [pc, #28]	; (8011218 <UTIL_LPM_SetOffMode+0x5c>)
 80111fa:	6013      	str	r3, [r2, #0]
      break;
 80111fc:	e000      	b.n	8011200 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 80111fe:	bf00      	nop
 8011200:	697b      	ldr	r3, [r7, #20]
 8011202:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	f383 8810 	msr	PRIMASK, r3
}
 801120a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801120c:	bf00      	nop
 801120e:	371c      	adds	r7, #28
 8011210:	46bd      	mov	sp, r7
 8011212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011216:	4770      	bx	lr
 8011218:	2000071c 	.word	0x2000071c

0801121c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801121c:	b580      	push	{r7, lr}
 801121e:	b090      	sub	sp, #64	; 0x40
 8011220:	af00      	add	r7, sp, #0
 8011222:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8011224:	4b73      	ldr	r3, [pc, #460]	; (80113f4 <UTIL_SEQ_Run+0x1d8>)
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801122a:	4b72      	ldr	r3, [pc, #456]	; (80113f4 <UTIL_SEQ_Run+0x1d8>)
 801122c:	681a      	ldr	r2, [r3, #0]
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	4013      	ands	r3, r2
 8011232:	4a70      	ldr	r2, [pc, #448]	; (80113f4 <UTIL_SEQ_Run+0x1d8>)
 8011234:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8011236:	4b70      	ldr	r3, [pc, #448]	; (80113f8 <UTIL_SEQ_Run+0x1dc>)
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801123c:	4b6f      	ldr	r3, [pc, #444]	; (80113fc <UTIL_SEQ_Run+0x1e0>)
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8011242:	4b6f      	ldr	r3, [pc, #444]	; (8011400 <UTIL_SEQ_Run+0x1e4>)
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8011248:	4b6e      	ldr	r3, [pc, #440]	; (8011404 <UTIL_SEQ_Run+0x1e8>)
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801124e:	e08d      	b.n	801136c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8011250:	2300      	movs	r3, #0
 8011252:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8011254:	e002      	b.n	801125c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8011256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011258:	3301      	adds	r3, #1
 801125a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801125c:	4a6a      	ldr	r2, [pc, #424]	; (8011408 <UTIL_SEQ_Run+0x1ec>)
 801125e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011260:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011266:	401a      	ands	r2, r3
 8011268:	4b62      	ldr	r3, [pc, #392]	; (80113f4 <UTIL_SEQ_Run+0x1d8>)
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	4013      	ands	r3, r2
 801126e:	2b00      	cmp	r3, #0
 8011270:	d0f1      	beq.n	8011256 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8011272:	4a65      	ldr	r2, [pc, #404]	; (8011408 <UTIL_SEQ_Run+0x1ec>)
 8011274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011276:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801127a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801127c:	401a      	ands	r2, r3
 801127e:	4b5d      	ldr	r3, [pc, #372]	; (80113f4 <UTIL_SEQ_Run+0x1d8>)
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	4013      	ands	r3, r2
 8011284:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8011286:	4a60      	ldr	r2, [pc, #384]	; (8011408 <UTIL_SEQ_Run+0x1ec>)
 8011288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801128a:	00db      	lsls	r3, r3, #3
 801128c:	4413      	add	r3, r2
 801128e:	685a      	ldr	r2, [r3, #4]
 8011290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011292:	4013      	ands	r3, r2
 8011294:	2b00      	cmp	r3, #0
 8011296:	d106      	bne.n	80112a6 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8011298:	4a5b      	ldr	r2, [pc, #364]	; (8011408 <UTIL_SEQ_Run+0x1ec>)
 801129a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801129c:	00db      	lsls	r3, r3, #3
 801129e:	4413      	add	r3, r2
 80112a0:	f04f 32ff 	mov.w	r2, #4294967295
 80112a4:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80112a6:	4a58      	ldr	r2, [pc, #352]	; (8011408 <UTIL_SEQ_Run+0x1ec>)
 80112a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112aa:	00db      	lsls	r3, r3, #3
 80112ac:	4413      	add	r3, r2
 80112ae:	685a      	ldr	r2, [r3, #4]
 80112b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112b2:	4013      	ands	r3, r2
 80112b4:	4618      	mov	r0, r3
 80112b6:	f000 f9b3 	bl	8011620 <SEQ_BitPosition>
 80112ba:	4603      	mov	r3, r0
 80112bc:	461a      	mov	r2, r3
 80112be:	4b53      	ldr	r3, [pc, #332]	; (801140c <UTIL_SEQ_Run+0x1f0>)
 80112c0:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80112c2:	4a51      	ldr	r2, [pc, #324]	; (8011408 <UTIL_SEQ_Run+0x1ec>)
 80112c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112c6:	00db      	lsls	r3, r3, #3
 80112c8:	4413      	add	r3, r2
 80112ca:	685a      	ldr	r2, [r3, #4]
 80112cc:	4b4f      	ldr	r3, [pc, #316]	; (801140c <UTIL_SEQ_Run+0x1f0>)
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	2101      	movs	r1, #1
 80112d2:	fa01 f303 	lsl.w	r3, r1, r3
 80112d6:	43db      	mvns	r3, r3
 80112d8:	401a      	ands	r2, r3
 80112da:	494b      	ldr	r1, [pc, #300]	; (8011408 <UTIL_SEQ_Run+0x1ec>)
 80112dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112de:	00db      	lsls	r3, r3, #3
 80112e0:	440b      	add	r3, r1
 80112e2:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80112e4:	f3ef 8310 	mrs	r3, PRIMASK
 80112e8:	61bb      	str	r3, [r7, #24]
  return(result);
 80112ea:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80112ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80112ee:	b672      	cpsid	i
}
 80112f0:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80112f2:	4b46      	ldr	r3, [pc, #280]	; (801140c <UTIL_SEQ_Run+0x1f0>)
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	2201      	movs	r2, #1
 80112f8:	fa02 f303 	lsl.w	r3, r2, r3
 80112fc:	43da      	mvns	r2, r3
 80112fe:	4b3e      	ldr	r3, [pc, #248]	; (80113f8 <UTIL_SEQ_Run+0x1dc>)
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	4013      	ands	r3, r2
 8011304:	4a3c      	ldr	r2, [pc, #240]	; (80113f8 <UTIL_SEQ_Run+0x1dc>)
 8011306:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8011308:	2302      	movs	r3, #2
 801130a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801130c:	e013      	b.n	8011336 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801130e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011310:	3b01      	subs	r3, #1
 8011312:	4a3d      	ldr	r2, [pc, #244]	; (8011408 <UTIL_SEQ_Run+0x1ec>)
 8011314:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8011318:	4b3c      	ldr	r3, [pc, #240]	; (801140c <UTIL_SEQ_Run+0x1f0>)
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	2201      	movs	r2, #1
 801131e:	fa02 f303 	lsl.w	r3, r2, r3
 8011322:	43da      	mvns	r2, r3
 8011324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011326:	3b01      	subs	r3, #1
 8011328:	400a      	ands	r2, r1
 801132a:	4937      	ldr	r1, [pc, #220]	; (8011408 <UTIL_SEQ_Run+0x1ec>)
 801132c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8011330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011332:	3b01      	subs	r3, #1
 8011334:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011338:	2b00      	cmp	r3, #0
 801133a:	d1e8      	bne.n	801130e <UTIL_SEQ_Run+0xf2>
 801133c:	6a3b      	ldr	r3, [r7, #32]
 801133e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011340:	697b      	ldr	r3, [r7, #20]
 8011342:	f383 8810 	msr	PRIMASK, r3
}
 8011346:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8011348:	4b30      	ldr	r3, [pc, #192]	; (801140c <UTIL_SEQ_Run+0x1f0>)
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	4a30      	ldr	r2, [pc, #192]	; (8011410 <UTIL_SEQ_Run+0x1f4>)
 801134e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011352:	4798      	blx	r3

    local_taskset = TaskSet;
 8011354:	4b28      	ldr	r3, [pc, #160]	; (80113f8 <UTIL_SEQ_Run+0x1dc>)
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801135a:	4b28      	ldr	r3, [pc, #160]	; (80113fc <UTIL_SEQ_Run+0x1e0>)
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8011360:	4b27      	ldr	r3, [pc, #156]	; (8011400 <UTIL_SEQ_Run+0x1e4>)
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 8011366:	4b27      	ldr	r3, [pc, #156]	; (8011404 <UTIL_SEQ_Run+0x1e8>)
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801136c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801136e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011370:	401a      	ands	r2, r3
 8011372:	4b20      	ldr	r3, [pc, #128]	; (80113f4 <UTIL_SEQ_Run+0x1d8>)
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	4013      	ands	r3, r2
 8011378:	2b00      	cmp	r3, #0
 801137a:	d005      	beq.n	8011388 <UTIL_SEQ_Run+0x16c>
 801137c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801137e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011380:	4013      	ands	r3, r2
 8011382:	2b00      	cmp	r3, #0
 8011384:	f43f af64 	beq.w	8011250 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8011388:	4b20      	ldr	r3, [pc, #128]	; (801140c <UTIL_SEQ_Run+0x1f0>)
 801138a:	f04f 32ff 	mov.w	r2, #4294967295
 801138e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8011390:	f000 f938 	bl	8011604 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011394:	f3ef 8310 	mrs	r3, PRIMASK
 8011398:	613b      	str	r3, [r7, #16]
  return(result);
 801139a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801139c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801139e:	b672      	cpsid	i
}
 80113a0:	bf00      	nop
  local_taskset = TaskSet;
 80113a2:	4b15      	ldr	r3, [pc, #84]	; (80113f8 <UTIL_SEQ_Run+0x1dc>)
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 80113a8:	4b14      	ldr	r3, [pc, #80]	; (80113fc <UTIL_SEQ_Run+0x1e0>)
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 80113ae:	4b14      	ldr	r3, [pc, #80]	; (8011400 <UTIL_SEQ_Run+0x1e4>)
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 80113b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80113b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113b8:	401a      	ands	r2, r3
 80113ba:	4b0e      	ldr	r3, [pc, #56]	; (80113f4 <UTIL_SEQ_Run+0x1d8>)
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	4013      	ands	r3, r2
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d107      	bne.n	80113d4 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 80113c4:	4b0f      	ldr	r3, [pc, #60]	; (8011404 <UTIL_SEQ_Run+0x1e8>)
 80113c6:	681a      	ldr	r2, [r3, #0]
 80113c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113ca:	4013      	ands	r3, r2
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d101      	bne.n	80113d4 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 80113d0:	f7f0 fe31 	bl	8002036 <UTIL_SEQ_Idle>
 80113d4:	69fb      	ldr	r3, [r7, #28]
 80113d6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	f383 8810 	msr	PRIMASK, r3
}
 80113de:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 80113e0:	f000 f917 	bl	8011612 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80113e4:	4a03      	ldr	r2, [pc, #12]	; (80113f4 <UTIL_SEQ_Run+0x1d8>)
 80113e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113e8:	6013      	str	r3, [r2, #0]

  return;
 80113ea:	bf00      	nop
}
 80113ec:	3740      	adds	r7, #64	; 0x40
 80113ee:	46bd      	mov	sp, r7
 80113f0:	bd80      	pop	{r7, pc}
 80113f2:	bf00      	nop
 80113f4:	2000006c 	.word	0x2000006c
 80113f8:	20000720 	.word	0x20000720
 80113fc:	20000724 	.word	0x20000724
 8011400:	20000068 	.word	0x20000068
 8011404:	20000728 	.word	0x20000728
 8011408:	200007b0 	.word	0x200007b0
 801140c:	2000072c 	.word	0x2000072c
 8011410:	20000730 	.word	0x20000730

08011414 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b088      	sub	sp, #32
 8011418:	af00      	add	r7, sp, #0
 801141a:	60f8      	str	r0, [r7, #12]
 801141c:	60b9      	str	r1, [r7, #8]
 801141e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011420:	f3ef 8310 	mrs	r3, PRIMASK
 8011424:	617b      	str	r3, [r7, #20]
  return(result);
 8011426:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8011428:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801142a:	b672      	cpsid	i
}
 801142c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801142e:	68f8      	ldr	r0, [r7, #12]
 8011430:	f000 f8f6 	bl	8011620 <SEQ_BitPosition>
 8011434:	4603      	mov	r3, r0
 8011436:	4619      	mov	r1, r3
 8011438:	4a06      	ldr	r2, [pc, #24]	; (8011454 <UTIL_SEQ_RegTask+0x40>)
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8011440:	69fb      	ldr	r3, [r7, #28]
 8011442:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011444:	69bb      	ldr	r3, [r7, #24]
 8011446:	f383 8810 	msr	PRIMASK, r3
}
 801144a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801144c:	bf00      	nop
}
 801144e:	3720      	adds	r7, #32
 8011450:	46bd      	mov	sp, r7
 8011452:	bd80      	pop	{r7, pc}
 8011454:	20000730 	.word	0x20000730

08011458 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8011458:	b480      	push	{r7}
 801145a:	b087      	sub	sp, #28
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
 8011460:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011462:	f3ef 8310 	mrs	r3, PRIMASK
 8011466:	60fb      	str	r3, [r7, #12]
  return(result);
 8011468:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801146a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801146c:	b672      	cpsid	i
}
 801146e:	bf00      	nop

  TaskSet |= TaskId_bm;
 8011470:	4b0d      	ldr	r3, [pc, #52]	; (80114a8 <UTIL_SEQ_SetTask+0x50>)
 8011472:	681a      	ldr	r2, [r3, #0]
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	4313      	orrs	r3, r2
 8011478:	4a0b      	ldr	r2, [pc, #44]	; (80114a8 <UTIL_SEQ_SetTask+0x50>)
 801147a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801147c:	4a0b      	ldr	r2, [pc, #44]	; (80114ac <UTIL_SEQ_SetTask+0x54>)
 801147e:	683b      	ldr	r3, [r7, #0]
 8011480:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	431a      	orrs	r2, r3
 8011488:	4908      	ldr	r1, [pc, #32]	; (80114ac <UTIL_SEQ_SetTask+0x54>)
 801148a:	683b      	ldr	r3, [r7, #0]
 801148c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8011490:	697b      	ldr	r3, [r7, #20]
 8011492:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011494:	693b      	ldr	r3, [r7, #16]
 8011496:	f383 8810 	msr	PRIMASK, r3
}
 801149a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801149c:	bf00      	nop
}
 801149e:	371c      	adds	r7, #28
 80114a0:	46bd      	mov	sp, r7
 80114a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a6:	4770      	bx	lr
 80114a8:	20000720 	.word	0x20000720
 80114ac:	200007b0 	.word	0x200007b0

080114b0 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80114b0:	b480      	push	{r7}
 80114b2:	b087      	sub	sp, #28
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80114b8:	f3ef 8310 	mrs	r3, PRIMASK
 80114bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80114be:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80114c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80114c2:	b672      	cpsid	i
}
 80114c4:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	43da      	mvns	r2, r3
 80114ca:	4b08      	ldr	r3, [pc, #32]	; (80114ec <UTIL_SEQ_PauseTask+0x3c>)
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	4013      	ands	r3, r2
 80114d0:	4a06      	ldr	r2, [pc, #24]	; (80114ec <UTIL_SEQ_PauseTask+0x3c>)
 80114d2:	6013      	str	r3, [r2, #0]
 80114d4:	697b      	ldr	r3, [r7, #20]
 80114d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80114d8:	693b      	ldr	r3, [r7, #16]
 80114da:	f383 8810 	msr	PRIMASK, r3
}
 80114de:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80114e0:	bf00      	nop
}
 80114e2:	371c      	adds	r7, #28
 80114e4:	46bd      	mov	sp, r7
 80114e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ea:	4770      	bx	lr
 80114ec:	20000068 	.word	0x20000068

080114f0 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80114f0:	b480      	push	{r7}
 80114f2:	b087      	sub	sp, #28
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80114f8:	f3ef 8310 	mrs	r3, PRIMASK
 80114fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80114fe:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8011500:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011502:	b672      	cpsid	i
}
 8011504:	bf00      	nop

  TaskMask |= TaskId_bm;
 8011506:	4b09      	ldr	r3, [pc, #36]	; (801152c <UTIL_SEQ_ResumeTask+0x3c>)
 8011508:	681a      	ldr	r2, [r3, #0]
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	4313      	orrs	r3, r2
 801150e:	4a07      	ldr	r2, [pc, #28]	; (801152c <UTIL_SEQ_ResumeTask+0x3c>)
 8011510:	6013      	str	r3, [r2, #0]
 8011512:	697b      	ldr	r3, [r7, #20]
 8011514:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011516:	693b      	ldr	r3, [r7, #16]
 8011518:	f383 8810 	msr	PRIMASK, r3
}
 801151c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801151e:	bf00      	nop
}
 8011520:	371c      	adds	r7, #28
 8011522:	46bd      	mov	sp, r7
 8011524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011528:	4770      	bx	lr
 801152a:	bf00      	nop
 801152c:	20000068 	.word	0x20000068

08011530 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8011530:	b480      	push	{r7}
 8011532:	b087      	sub	sp, #28
 8011534:	af00      	add	r7, sp, #0
 8011536:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011538:	f3ef 8310 	mrs	r3, PRIMASK
 801153c:	60fb      	str	r3, [r7, #12]
  return(result);
 801153e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8011540:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011542:	b672      	cpsid	i
}
 8011544:	bf00      	nop

  EvtSet |= EvtId_bm;
 8011546:	4b09      	ldr	r3, [pc, #36]	; (801156c <UTIL_SEQ_SetEvt+0x3c>)
 8011548:	681a      	ldr	r2, [r3, #0]
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	4313      	orrs	r3, r2
 801154e:	4a07      	ldr	r2, [pc, #28]	; (801156c <UTIL_SEQ_SetEvt+0x3c>)
 8011550:	6013      	str	r3, [r2, #0]
 8011552:	697b      	ldr	r3, [r7, #20]
 8011554:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011556:	693b      	ldr	r3, [r7, #16]
 8011558:	f383 8810 	msr	PRIMASK, r3
}
 801155c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801155e:	bf00      	nop
}
 8011560:	371c      	adds	r7, #28
 8011562:	46bd      	mov	sp, r7
 8011564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011568:	4770      	bx	lr
 801156a:	bf00      	nop
 801156c:	20000724 	.word	0x20000724

08011570 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8011570:	b580      	push	{r7, lr}
 8011572:	b088      	sub	sp, #32
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8011578:	4b1f      	ldr	r3, [pc, #124]	; (80115f8 <UTIL_SEQ_WaitEvt+0x88>)
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 801157e:	4b1e      	ldr	r3, [pc, #120]	; (80115f8 <UTIL_SEQ_WaitEvt+0x88>)
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011586:	d102      	bne.n	801158e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8011588:	2300      	movs	r3, #0
 801158a:	61fb      	str	r3, [r7, #28]
 801158c:	e005      	b.n	801159a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 801158e:	4b1a      	ldr	r3, [pc, #104]	; (80115f8 <UTIL_SEQ_WaitEvt+0x88>)
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	2201      	movs	r2, #1
 8011594:	fa02 f303 	lsl.w	r3, r2, r3
 8011598:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 801159a:	4b18      	ldr	r3, [pc, #96]	; (80115fc <UTIL_SEQ_WaitEvt+0x8c>)
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80115a0:	4a16      	ldr	r2, [pc, #88]	; (80115fc <UTIL_SEQ_WaitEvt+0x8c>)
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 80115a6:	e003      	b.n	80115b0 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 80115a8:	6879      	ldr	r1, [r7, #4]
 80115aa:	69f8      	ldr	r0, [r7, #28]
 80115ac:	f7f0 fd4a 	bl	8002044 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 80115b0:	4b13      	ldr	r3, [pc, #76]	; (8011600 <UTIL_SEQ_WaitEvt+0x90>)
 80115b2:	681a      	ldr	r2, [r3, #0]
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	4013      	ands	r3, r2
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d0f5      	beq.n	80115a8 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 80115bc:	4a0e      	ldr	r2, [pc, #56]	; (80115f8 <UTIL_SEQ_WaitEvt+0x88>)
 80115be:	69bb      	ldr	r3, [r7, #24]
 80115c0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80115c2:	f3ef 8310 	mrs	r3, PRIMASK
 80115c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80115c8:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80115ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80115cc:	b672      	cpsid	i
}
 80115ce:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	43da      	mvns	r2, r3
 80115d4:	4b0a      	ldr	r3, [pc, #40]	; (8011600 <UTIL_SEQ_WaitEvt+0x90>)
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	4013      	ands	r3, r2
 80115da:	4a09      	ldr	r2, [pc, #36]	; (8011600 <UTIL_SEQ_WaitEvt+0x90>)
 80115dc:	6013      	str	r3, [r2, #0]
 80115de:	693b      	ldr	r3, [r7, #16]
 80115e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	f383 8810 	msr	PRIMASK, r3
}
 80115e8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 80115ea:	4a04      	ldr	r2, [pc, #16]	; (80115fc <UTIL_SEQ_WaitEvt+0x8c>)
 80115ec:	697b      	ldr	r3, [r7, #20]
 80115ee:	6013      	str	r3, [r2, #0]
  return;
 80115f0:	bf00      	nop
}
 80115f2:	3720      	adds	r7, #32
 80115f4:	46bd      	mov	sp, r7
 80115f6:	bd80      	pop	{r7, pc}
 80115f8:	2000072c 	.word	0x2000072c
 80115fc:	20000728 	.word	0x20000728
 8011600:	20000724 	.word	0x20000724

08011604 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8011604:	b480      	push	{r7}
 8011606:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8011608:	bf00      	nop
}
 801160a:	46bd      	mov	sp, r7
 801160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011610:	4770      	bx	lr

08011612 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8011612:	b480      	push	{r7}
 8011614:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8011616:	bf00      	nop
}
 8011618:	46bd      	mov	sp, r7
 801161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161e:	4770      	bx	lr

08011620 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8011620:	b480      	push	{r7}
 8011622:	b085      	sub	sp, #20
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8011628:	2300      	movs	r3, #0
 801162a:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8011630:	68bb      	ldr	r3, [r7, #8]
 8011632:	0c1b      	lsrs	r3, r3, #16
 8011634:	041b      	lsls	r3, r3, #16
 8011636:	2b00      	cmp	r3, #0
 8011638:	d104      	bne.n	8011644 <SEQ_BitPosition+0x24>
 801163a:	2310      	movs	r3, #16
 801163c:	73fb      	strb	r3, [r7, #15]
 801163e:	68bb      	ldr	r3, [r7, #8]
 8011640:	041b      	lsls	r3, r3, #16
 8011642:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8011644:	68bb      	ldr	r3, [r7, #8]
 8011646:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801164a:	2b00      	cmp	r3, #0
 801164c:	d105      	bne.n	801165a <SEQ_BitPosition+0x3a>
 801164e:	7bfb      	ldrb	r3, [r7, #15]
 8011650:	3308      	adds	r3, #8
 8011652:	73fb      	strb	r3, [r7, #15]
 8011654:	68bb      	ldr	r3, [r7, #8]
 8011656:	021b      	lsls	r3, r3, #8
 8011658:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801165a:	68bb      	ldr	r3, [r7, #8]
 801165c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011660:	2b00      	cmp	r3, #0
 8011662:	d105      	bne.n	8011670 <SEQ_BitPosition+0x50>
 8011664:	7bfb      	ldrb	r3, [r7, #15]
 8011666:	3304      	adds	r3, #4
 8011668:	73fb      	strb	r3, [r7, #15]
 801166a:	68bb      	ldr	r3, [r7, #8]
 801166c:	011b      	lsls	r3, r3, #4
 801166e:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8011670:	68bb      	ldr	r3, [r7, #8]
 8011672:	0f1b      	lsrs	r3, r3, #28
 8011674:	4a07      	ldr	r2, [pc, #28]	; (8011694 <SEQ_BitPosition+0x74>)
 8011676:	5cd2      	ldrb	r2, [r2, r3]
 8011678:	7bfb      	ldrb	r3, [r7, #15]
 801167a:	4413      	add	r3, r2
 801167c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801167e:	7bfb      	ldrb	r3, [r7, #15]
 8011680:	f1c3 031f 	rsb	r3, r3, #31
 8011684:	b2db      	uxtb	r3, r3
}
 8011686:	4618      	mov	r0, r3
 8011688:	3714      	adds	r7, #20
 801168a:	46bd      	mov	sp, r7
 801168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011690:	4770      	bx	lr
 8011692:	bf00      	nop
 8011694:	08018408 	.word	0x08018408

08011698 <__cvt>:
 8011698:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801169c:	ec55 4b10 	vmov	r4, r5, d0
 80116a0:	2d00      	cmp	r5, #0
 80116a2:	460e      	mov	r6, r1
 80116a4:	4619      	mov	r1, r3
 80116a6:	462b      	mov	r3, r5
 80116a8:	bfbb      	ittet	lt
 80116aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80116ae:	461d      	movlt	r5, r3
 80116b0:	2300      	movge	r3, #0
 80116b2:	232d      	movlt	r3, #45	; 0x2d
 80116b4:	700b      	strb	r3, [r1, #0]
 80116b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80116b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80116bc:	4691      	mov	r9, r2
 80116be:	f023 0820 	bic.w	r8, r3, #32
 80116c2:	bfbc      	itt	lt
 80116c4:	4622      	movlt	r2, r4
 80116c6:	4614      	movlt	r4, r2
 80116c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80116cc:	d005      	beq.n	80116da <__cvt+0x42>
 80116ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80116d2:	d100      	bne.n	80116d6 <__cvt+0x3e>
 80116d4:	3601      	adds	r6, #1
 80116d6:	2102      	movs	r1, #2
 80116d8:	e000      	b.n	80116dc <__cvt+0x44>
 80116da:	2103      	movs	r1, #3
 80116dc:	ab03      	add	r3, sp, #12
 80116de:	9301      	str	r3, [sp, #4]
 80116e0:	ab02      	add	r3, sp, #8
 80116e2:	9300      	str	r3, [sp, #0]
 80116e4:	ec45 4b10 	vmov	d0, r4, r5
 80116e8:	4653      	mov	r3, sl
 80116ea:	4632      	mov	r2, r6
 80116ec:	f001 f99c 	bl	8012a28 <_dtoa_r>
 80116f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80116f4:	4607      	mov	r7, r0
 80116f6:	d102      	bne.n	80116fe <__cvt+0x66>
 80116f8:	f019 0f01 	tst.w	r9, #1
 80116fc:	d022      	beq.n	8011744 <__cvt+0xac>
 80116fe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011702:	eb07 0906 	add.w	r9, r7, r6
 8011706:	d110      	bne.n	801172a <__cvt+0x92>
 8011708:	783b      	ldrb	r3, [r7, #0]
 801170a:	2b30      	cmp	r3, #48	; 0x30
 801170c:	d10a      	bne.n	8011724 <__cvt+0x8c>
 801170e:	2200      	movs	r2, #0
 8011710:	2300      	movs	r3, #0
 8011712:	4620      	mov	r0, r4
 8011714:	4629      	mov	r1, r5
 8011716:	f7ef f9af 	bl	8000a78 <__aeabi_dcmpeq>
 801171a:	b918      	cbnz	r0, 8011724 <__cvt+0x8c>
 801171c:	f1c6 0601 	rsb	r6, r6, #1
 8011720:	f8ca 6000 	str.w	r6, [sl]
 8011724:	f8da 3000 	ldr.w	r3, [sl]
 8011728:	4499      	add	r9, r3
 801172a:	2200      	movs	r2, #0
 801172c:	2300      	movs	r3, #0
 801172e:	4620      	mov	r0, r4
 8011730:	4629      	mov	r1, r5
 8011732:	f7ef f9a1 	bl	8000a78 <__aeabi_dcmpeq>
 8011736:	b108      	cbz	r0, 801173c <__cvt+0xa4>
 8011738:	f8cd 900c 	str.w	r9, [sp, #12]
 801173c:	2230      	movs	r2, #48	; 0x30
 801173e:	9b03      	ldr	r3, [sp, #12]
 8011740:	454b      	cmp	r3, r9
 8011742:	d307      	bcc.n	8011754 <__cvt+0xbc>
 8011744:	9b03      	ldr	r3, [sp, #12]
 8011746:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011748:	1bdb      	subs	r3, r3, r7
 801174a:	4638      	mov	r0, r7
 801174c:	6013      	str	r3, [r2, #0]
 801174e:	b004      	add	sp, #16
 8011750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011754:	1c59      	adds	r1, r3, #1
 8011756:	9103      	str	r1, [sp, #12]
 8011758:	701a      	strb	r2, [r3, #0]
 801175a:	e7f0      	b.n	801173e <__cvt+0xa6>

0801175c <__exponent>:
 801175c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801175e:	4603      	mov	r3, r0
 8011760:	2900      	cmp	r1, #0
 8011762:	bfb8      	it	lt
 8011764:	4249      	neglt	r1, r1
 8011766:	f803 2b02 	strb.w	r2, [r3], #2
 801176a:	bfb4      	ite	lt
 801176c:	222d      	movlt	r2, #45	; 0x2d
 801176e:	222b      	movge	r2, #43	; 0x2b
 8011770:	2909      	cmp	r1, #9
 8011772:	7042      	strb	r2, [r0, #1]
 8011774:	dd2a      	ble.n	80117cc <__exponent+0x70>
 8011776:	f10d 0207 	add.w	r2, sp, #7
 801177a:	4617      	mov	r7, r2
 801177c:	260a      	movs	r6, #10
 801177e:	4694      	mov	ip, r2
 8011780:	fb91 f5f6 	sdiv	r5, r1, r6
 8011784:	fb06 1415 	mls	r4, r6, r5, r1
 8011788:	3430      	adds	r4, #48	; 0x30
 801178a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801178e:	460c      	mov	r4, r1
 8011790:	2c63      	cmp	r4, #99	; 0x63
 8011792:	f102 32ff 	add.w	r2, r2, #4294967295
 8011796:	4629      	mov	r1, r5
 8011798:	dcf1      	bgt.n	801177e <__exponent+0x22>
 801179a:	3130      	adds	r1, #48	; 0x30
 801179c:	f1ac 0402 	sub.w	r4, ip, #2
 80117a0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80117a4:	1c41      	adds	r1, r0, #1
 80117a6:	4622      	mov	r2, r4
 80117a8:	42ba      	cmp	r2, r7
 80117aa:	d30a      	bcc.n	80117c2 <__exponent+0x66>
 80117ac:	f10d 0209 	add.w	r2, sp, #9
 80117b0:	eba2 020c 	sub.w	r2, r2, ip
 80117b4:	42bc      	cmp	r4, r7
 80117b6:	bf88      	it	hi
 80117b8:	2200      	movhi	r2, #0
 80117ba:	4413      	add	r3, r2
 80117bc:	1a18      	subs	r0, r3, r0
 80117be:	b003      	add	sp, #12
 80117c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117c2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80117c6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80117ca:	e7ed      	b.n	80117a8 <__exponent+0x4c>
 80117cc:	2330      	movs	r3, #48	; 0x30
 80117ce:	3130      	adds	r1, #48	; 0x30
 80117d0:	7083      	strb	r3, [r0, #2]
 80117d2:	70c1      	strb	r1, [r0, #3]
 80117d4:	1d03      	adds	r3, r0, #4
 80117d6:	e7f1      	b.n	80117bc <__exponent+0x60>

080117d8 <_printf_float>:
 80117d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117dc:	ed2d 8b02 	vpush	{d8}
 80117e0:	b08d      	sub	sp, #52	; 0x34
 80117e2:	460c      	mov	r4, r1
 80117e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80117e8:	4616      	mov	r6, r2
 80117ea:	461f      	mov	r7, r3
 80117ec:	4605      	mov	r5, r0
 80117ee:	f001 f807 	bl	8012800 <_localeconv_r>
 80117f2:	f8d0 a000 	ldr.w	sl, [r0]
 80117f6:	4650      	mov	r0, sl
 80117f8:	f7ee fd12 	bl	8000220 <strlen>
 80117fc:	2300      	movs	r3, #0
 80117fe:	930a      	str	r3, [sp, #40]	; 0x28
 8011800:	6823      	ldr	r3, [r4, #0]
 8011802:	9305      	str	r3, [sp, #20]
 8011804:	f8d8 3000 	ldr.w	r3, [r8]
 8011808:	f894 b018 	ldrb.w	fp, [r4, #24]
 801180c:	3307      	adds	r3, #7
 801180e:	f023 0307 	bic.w	r3, r3, #7
 8011812:	f103 0208 	add.w	r2, r3, #8
 8011816:	f8c8 2000 	str.w	r2, [r8]
 801181a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801181e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011822:	9307      	str	r3, [sp, #28]
 8011824:	f8cd 8018 	str.w	r8, [sp, #24]
 8011828:	ee08 0a10 	vmov	s16, r0
 801182c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8011830:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011834:	4b9e      	ldr	r3, [pc, #632]	; (8011ab0 <_printf_float+0x2d8>)
 8011836:	f04f 32ff 	mov.w	r2, #4294967295
 801183a:	f7ef f94f 	bl	8000adc <__aeabi_dcmpun>
 801183e:	bb88      	cbnz	r0, 80118a4 <_printf_float+0xcc>
 8011840:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011844:	4b9a      	ldr	r3, [pc, #616]	; (8011ab0 <_printf_float+0x2d8>)
 8011846:	f04f 32ff 	mov.w	r2, #4294967295
 801184a:	f7ef f929 	bl	8000aa0 <__aeabi_dcmple>
 801184e:	bb48      	cbnz	r0, 80118a4 <_printf_float+0xcc>
 8011850:	2200      	movs	r2, #0
 8011852:	2300      	movs	r3, #0
 8011854:	4640      	mov	r0, r8
 8011856:	4649      	mov	r1, r9
 8011858:	f7ef f918 	bl	8000a8c <__aeabi_dcmplt>
 801185c:	b110      	cbz	r0, 8011864 <_printf_float+0x8c>
 801185e:	232d      	movs	r3, #45	; 0x2d
 8011860:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011864:	4a93      	ldr	r2, [pc, #588]	; (8011ab4 <_printf_float+0x2dc>)
 8011866:	4b94      	ldr	r3, [pc, #592]	; (8011ab8 <_printf_float+0x2e0>)
 8011868:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801186c:	bf94      	ite	ls
 801186e:	4690      	movls	r8, r2
 8011870:	4698      	movhi	r8, r3
 8011872:	2303      	movs	r3, #3
 8011874:	6123      	str	r3, [r4, #16]
 8011876:	9b05      	ldr	r3, [sp, #20]
 8011878:	f023 0304 	bic.w	r3, r3, #4
 801187c:	6023      	str	r3, [r4, #0]
 801187e:	f04f 0900 	mov.w	r9, #0
 8011882:	9700      	str	r7, [sp, #0]
 8011884:	4633      	mov	r3, r6
 8011886:	aa0b      	add	r2, sp, #44	; 0x2c
 8011888:	4621      	mov	r1, r4
 801188a:	4628      	mov	r0, r5
 801188c:	f000 f9da 	bl	8011c44 <_printf_common>
 8011890:	3001      	adds	r0, #1
 8011892:	f040 8090 	bne.w	80119b6 <_printf_float+0x1de>
 8011896:	f04f 30ff 	mov.w	r0, #4294967295
 801189a:	b00d      	add	sp, #52	; 0x34
 801189c:	ecbd 8b02 	vpop	{d8}
 80118a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118a4:	4642      	mov	r2, r8
 80118a6:	464b      	mov	r3, r9
 80118a8:	4640      	mov	r0, r8
 80118aa:	4649      	mov	r1, r9
 80118ac:	f7ef f916 	bl	8000adc <__aeabi_dcmpun>
 80118b0:	b140      	cbz	r0, 80118c4 <_printf_float+0xec>
 80118b2:	464b      	mov	r3, r9
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	bfbc      	itt	lt
 80118b8:	232d      	movlt	r3, #45	; 0x2d
 80118ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80118be:	4a7f      	ldr	r2, [pc, #508]	; (8011abc <_printf_float+0x2e4>)
 80118c0:	4b7f      	ldr	r3, [pc, #508]	; (8011ac0 <_printf_float+0x2e8>)
 80118c2:	e7d1      	b.n	8011868 <_printf_float+0x90>
 80118c4:	6863      	ldr	r3, [r4, #4]
 80118c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80118ca:	9206      	str	r2, [sp, #24]
 80118cc:	1c5a      	adds	r2, r3, #1
 80118ce:	d13f      	bne.n	8011950 <_printf_float+0x178>
 80118d0:	2306      	movs	r3, #6
 80118d2:	6063      	str	r3, [r4, #4]
 80118d4:	9b05      	ldr	r3, [sp, #20]
 80118d6:	6861      	ldr	r1, [r4, #4]
 80118d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80118dc:	2300      	movs	r3, #0
 80118de:	9303      	str	r3, [sp, #12]
 80118e0:	ab0a      	add	r3, sp, #40	; 0x28
 80118e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80118e6:	ab09      	add	r3, sp, #36	; 0x24
 80118e8:	ec49 8b10 	vmov	d0, r8, r9
 80118ec:	9300      	str	r3, [sp, #0]
 80118ee:	6022      	str	r2, [r4, #0]
 80118f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80118f4:	4628      	mov	r0, r5
 80118f6:	f7ff fecf 	bl	8011698 <__cvt>
 80118fa:	9b06      	ldr	r3, [sp, #24]
 80118fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80118fe:	2b47      	cmp	r3, #71	; 0x47
 8011900:	4680      	mov	r8, r0
 8011902:	d108      	bne.n	8011916 <_printf_float+0x13e>
 8011904:	1cc8      	adds	r0, r1, #3
 8011906:	db02      	blt.n	801190e <_printf_float+0x136>
 8011908:	6863      	ldr	r3, [r4, #4]
 801190a:	4299      	cmp	r1, r3
 801190c:	dd41      	ble.n	8011992 <_printf_float+0x1ba>
 801190e:	f1ab 0302 	sub.w	r3, fp, #2
 8011912:	fa5f fb83 	uxtb.w	fp, r3
 8011916:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801191a:	d820      	bhi.n	801195e <_printf_float+0x186>
 801191c:	3901      	subs	r1, #1
 801191e:	465a      	mov	r2, fp
 8011920:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011924:	9109      	str	r1, [sp, #36]	; 0x24
 8011926:	f7ff ff19 	bl	801175c <__exponent>
 801192a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801192c:	1813      	adds	r3, r2, r0
 801192e:	2a01      	cmp	r2, #1
 8011930:	4681      	mov	r9, r0
 8011932:	6123      	str	r3, [r4, #16]
 8011934:	dc02      	bgt.n	801193c <_printf_float+0x164>
 8011936:	6822      	ldr	r2, [r4, #0]
 8011938:	07d2      	lsls	r2, r2, #31
 801193a:	d501      	bpl.n	8011940 <_printf_float+0x168>
 801193c:	3301      	adds	r3, #1
 801193e:	6123      	str	r3, [r4, #16]
 8011940:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011944:	2b00      	cmp	r3, #0
 8011946:	d09c      	beq.n	8011882 <_printf_float+0xaa>
 8011948:	232d      	movs	r3, #45	; 0x2d
 801194a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801194e:	e798      	b.n	8011882 <_printf_float+0xaa>
 8011950:	9a06      	ldr	r2, [sp, #24]
 8011952:	2a47      	cmp	r2, #71	; 0x47
 8011954:	d1be      	bne.n	80118d4 <_printf_float+0xfc>
 8011956:	2b00      	cmp	r3, #0
 8011958:	d1bc      	bne.n	80118d4 <_printf_float+0xfc>
 801195a:	2301      	movs	r3, #1
 801195c:	e7b9      	b.n	80118d2 <_printf_float+0xfa>
 801195e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011962:	d118      	bne.n	8011996 <_printf_float+0x1be>
 8011964:	2900      	cmp	r1, #0
 8011966:	6863      	ldr	r3, [r4, #4]
 8011968:	dd0b      	ble.n	8011982 <_printf_float+0x1aa>
 801196a:	6121      	str	r1, [r4, #16]
 801196c:	b913      	cbnz	r3, 8011974 <_printf_float+0x19c>
 801196e:	6822      	ldr	r2, [r4, #0]
 8011970:	07d0      	lsls	r0, r2, #31
 8011972:	d502      	bpl.n	801197a <_printf_float+0x1a2>
 8011974:	3301      	adds	r3, #1
 8011976:	440b      	add	r3, r1
 8011978:	6123      	str	r3, [r4, #16]
 801197a:	65a1      	str	r1, [r4, #88]	; 0x58
 801197c:	f04f 0900 	mov.w	r9, #0
 8011980:	e7de      	b.n	8011940 <_printf_float+0x168>
 8011982:	b913      	cbnz	r3, 801198a <_printf_float+0x1b2>
 8011984:	6822      	ldr	r2, [r4, #0]
 8011986:	07d2      	lsls	r2, r2, #31
 8011988:	d501      	bpl.n	801198e <_printf_float+0x1b6>
 801198a:	3302      	adds	r3, #2
 801198c:	e7f4      	b.n	8011978 <_printf_float+0x1a0>
 801198e:	2301      	movs	r3, #1
 8011990:	e7f2      	b.n	8011978 <_printf_float+0x1a0>
 8011992:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011998:	4299      	cmp	r1, r3
 801199a:	db05      	blt.n	80119a8 <_printf_float+0x1d0>
 801199c:	6823      	ldr	r3, [r4, #0]
 801199e:	6121      	str	r1, [r4, #16]
 80119a0:	07d8      	lsls	r0, r3, #31
 80119a2:	d5ea      	bpl.n	801197a <_printf_float+0x1a2>
 80119a4:	1c4b      	adds	r3, r1, #1
 80119a6:	e7e7      	b.n	8011978 <_printf_float+0x1a0>
 80119a8:	2900      	cmp	r1, #0
 80119aa:	bfd4      	ite	le
 80119ac:	f1c1 0202 	rsble	r2, r1, #2
 80119b0:	2201      	movgt	r2, #1
 80119b2:	4413      	add	r3, r2
 80119b4:	e7e0      	b.n	8011978 <_printf_float+0x1a0>
 80119b6:	6823      	ldr	r3, [r4, #0]
 80119b8:	055a      	lsls	r2, r3, #21
 80119ba:	d407      	bmi.n	80119cc <_printf_float+0x1f4>
 80119bc:	6923      	ldr	r3, [r4, #16]
 80119be:	4642      	mov	r2, r8
 80119c0:	4631      	mov	r1, r6
 80119c2:	4628      	mov	r0, r5
 80119c4:	47b8      	blx	r7
 80119c6:	3001      	adds	r0, #1
 80119c8:	d12c      	bne.n	8011a24 <_printf_float+0x24c>
 80119ca:	e764      	b.n	8011896 <_printf_float+0xbe>
 80119cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80119d0:	f240 80e0 	bls.w	8011b94 <_printf_float+0x3bc>
 80119d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80119d8:	2200      	movs	r2, #0
 80119da:	2300      	movs	r3, #0
 80119dc:	f7ef f84c 	bl	8000a78 <__aeabi_dcmpeq>
 80119e0:	2800      	cmp	r0, #0
 80119e2:	d034      	beq.n	8011a4e <_printf_float+0x276>
 80119e4:	4a37      	ldr	r2, [pc, #220]	; (8011ac4 <_printf_float+0x2ec>)
 80119e6:	2301      	movs	r3, #1
 80119e8:	4631      	mov	r1, r6
 80119ea:	4628      	mov	r0, r5
 80119ec:	47b8      	blx	r7
 80119ee:	3001      	adds	r0, #1
 80119f0:	f43f af51 	beq.w	8011896 <_printf_float+0xbe>
 80119f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80119f8:	429a      	cmp	r2, r3
 80119fa:	db02      	blt.n	8011a02 <_printf_float+0x22a>
 80119fc:	6823      	ldr	r3, [r4, #0]
 80119fe:	07d8      	lsls	r0, r3, #31
 8011a00:	d510      	bpl.n	8011a24 <_printf_float+0x24c>
 8011a02:	ee18 3a10 	vmov	r3, s16
 8011a06:	4652      	mov	r2, sl
 8011a08:	4631      	mov	r1, r6
 8011a0a:	4628      	mov	r0, r5
 8011a0c:	47b8      	blx	r7
 8011a0e:	3001      	adds	r0, #1
 8011a10:	f43f af41 	beq.w	8011896 <_printf_float+0xbe>
 8011a14:	f04f 0800 	mov.w	r8, #0
 8011a18:	f104 091a 	add.w	r9, r4, #26
 8011a1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a1e:	3b01      	subs	r3, #1
 8011a20:	4543      	cmp	r3, r8
 8011a22:	dc09      	bgt.n	8011a38 <_printf_float+0x260>
 8011a24:	6823      	ldr	r3, [r4, #0]
 8011a26:	079b      	lsls	r3, r3, #30
 8011a28:	f100 8107 	bmi.w	8011c3a <_printf_float+0x462>
 8011a2c:	68e0      	ldr	r0, [r4, #12]
 8011a2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a30:	4298      	cmp	r0, r3
 8011a32:	bfb8      	it	lt
 8011a34:	4618      	movlt	r0, r3
 8011a36:	e730      	b.n	801189a <_printf_float+0xc2>
 8011a38:	2301      	movs	r3, #1
 8011a3a:	464a      	mov	r2, r9
 8011a3c:	4631      	mov	r1, r6
 8011a3e:	4628      	mov	r0, r5
 8011a40:	47b8      	blx	r7
 8011a42:	3001      	adds	r0, #1
 8011a44:	f43f af27 	beq.w	8011896 <_printf_float+0xbe>
 8011a48:	f108 0801 	add.w	r8, r8, #1
 8011a4c:	e7e6      	b.n	8011a1c <_printf_float+0x244>
 8011a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	dc39      	bgt.n	8011ac8 <_printf_float+0x2f0>
 8011a54:	4a1b      	ldr	r2, [pc, #108]	; (8011ac4 <_printf_float+0x2ec>)
 8011a56:	2301      	movs	r3, #1
 8011a58:	4631      	mov	r1, r6
 8011a5a:	4628      	mov	r0, r5
 8011a5c:	47b8      	blx	r7
 8011a5e:	3001      	adds	r0, #1
 8011a60:	f43f af19 	beq.w	8011896 <_printf_float+0xbe>
 8011a64:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011a68:	4313      	orrs	r3, r2
 8011a6a:	d102      	bne.n	8011a72 <_printf_float+0x29a>
 8011a6c:	6823      	ldr	r3, [r4, #0]
 8011a6e:	07d9      	lsls	r1, r3, #31
 8011a70:	d5d8      	bpl.n	8011a24 <_printf_float+0x24c>
 8011a72:	ee18 3a10 	vmov	r3, s16
 8011a76:	4652      	mov	r2, sl
 8011a78:	4631      	mov	r1, r6
 8011a7a:	4628      	mov	r0, r5
 8011a7c:	47b8      	blx	r7
 8011a7e:	3001      	adds	r0, #1
 8011a80:	f43f af09 	beq.w	8011896 <_printf_float+0xbe>
 8011a84:	f04f 0900 	mov.w	r9, #0
 8011a88:	f104 0a1a 	add.w	sl, r4, #26
 8011a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a8e:	425b      	negs	r3, r3
 8011a90:	454b      	cmp	r3, r9
 8011a92:	dc01      	bgt.n	8011a98 <_printf_float+0x2c0>
 8011a94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a96:	e792      	b.n	80119be <_printf_float+0x1e6>
 8011a98:	2301      	movs	r3, #1
 8011a9a:	4652      	mov	r2, sl
 8011a9c:	4631      	mov	r1, r6
 8011a9e:	4628      	mov	r0, r5
 8011aa0:	47b8      	blx	r7
 8011aa2:	3001      	adds	r0, #1
 8011aa4:	f43f aef7 	beq.w	8011896 <_printf_float+0xbe>
 8011aa8:	f109 0901 	add.w	r9, r9, #1
 8011aac:	e7ee      	b.n	8011a8c <_printf_float+0x2b4>
 8011aae:	bf00      	nop
 8011ab0:	7fefffff 	.word	0x7fefffff
 8011ab4:	08018418 	.word	0x08018418
 8011ab8:	0801841c 	.word	0x0801841c
 8011abc:	08018420 	.word	0x08018420
 8011ac0:	08018424 	.word	0x08018424
 8011ac4:	08018428 	.word	0x08018428
 8011ac8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011aca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011acc:	429a      	cmp	r2, r3
 8011ace:	bfa8      	it	ge
 8011ad0:	461a      	movge	r2, r3
 8011ad2:	2a00      	cmp	r2, #0
 8011ad4:	4691      	mov	r9, r2
 8011ad6:	dc37      	bgt.n	8011b48 <_printf_float+0x370>
 8011ad8:	f04f 0b00 	mov.w	fp, #0
 8011adc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011ae0:	f104 021a 	add.w	r2, r4, #26
 8011ae4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011ae6:	9305      	str	r3, [sp, #20]
 8011ae8:	eba3 0309 	sub.w	r3, r3, r9
 8011aec:	455b      	cmp	r3, fp
 8011aee:	dc33      	bgt.n	8011b58 <_printf_float+0x380>
 8011af0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011af4:	429a      	cmp	r2, r3
 8011af6:	db3b      	blt.n	8011b70 <_printf_float+0x398>
 8011af8:	6823      	ldr	r3, [r4, #0]
 8011afa:	07da      	lsls	r2, r3, #31
 8011afc:	d438      	bmi.n	8011b70 <_printf_float+0x398>
 8011afe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011b02:	eba2 0903 	sub.w	r9, r2, r3
 8011b06:	9b05      	ldr	r3, [sp, #20]
 8011b08:	1ad2      	subs	r2, r2, r3
 8011b0a:	4591      	cmp	r9, r2
 8011b0c:	bfa8      	it	ge
 8011b0e:	4691      	movge	r9, r2
 8011b10:	f1b9 0f00 	cmp.w	r9, #0
 8011b14:	dc35      	bgt.n	8011b82 <_printf_float+0x3aa>
 8011b16:	f04f 0800 	mov.w	r8, #0
 8011b1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011b1e:	f104 0a1a 	add.w	sl, r4, #26
 8011b22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011b26:	1a9b      	subs	r3, r3, r2
 8011b28:	eba3 0309 	sub.w	r3, r3, r9
 8011b2c:	4543      	cmp	r3, r8
 8011b2e:	f77f af79 	ble.w	8011a24 <_printf_float+0x24c>
 8011b32:	2301      	movs	r3, #1
 8011b34:	4652      	mov	r2, sl
 8011b36:	4631      	mov	r1, r6
 8011b38:	4628      	mov	r0, r5
 8011b3a:	47b8      	blx	r7
 8011b3c:	3001      	adds	r0, #1
 8011b3e:	f43f aeaa 	beq.w	8011896 <_printf_float+0xbe>
 8011b42:	f108 0801 	add.w	r8, r8, #1
 8011b46:	e7ec      	b.n	8011b22 <_printf_float+0x34a>
 8011b48:	4613      	mov	r3, r2
 8011b4a:	4631      	mov	r1, r6
 8011b4c:	4642      	mov	r2, r8
 8011b4e:	4628      	mov	r0, r5
 8011b50:	47b8      	blx	r7
 8011b52:	3001      	adds	r0, #1
 8011b54:	d1c0      	bne.n	8011ad8 <_printf_float+0x300>
 8011b56:	e69e      	b.n	8011896 <_printf_float+0xbe>
 8011b58:	2301      	movs	r3, #1
 8011b5a:	4631      	mov	r1, r6
 8011b5c:	4628      	mov	r0, r5
 8011b5e:	9205      	str	r2, [sp, #20]
 8011b60:	47b8      	blx	r7
 8011b62:	3001      	adds	r0, #1
 8011b64:	f43f ae97 	beq.w	8011896 <_printf_float+0xbe>
 8011b68:	9a05      	ldr	r2, [sp, #20]
 8011b6a:	f10b 0b01 	add.w	fp, fp, #1
 8011b6e:	e7b9      	b.n	8011ae4 <_printf_float+0x30c>
 8011b70:	ee18 3a10 	vmov	r3, s16
 8011b74:	4652      	mov	r2, sl
 8011b76:	4631      	mov	r1, r6
 8011b78:	4628      	mov	r0, r5
 8011b7a:	47b8      	blx	r7
 8011b7c:	3001      	adds	r0, #1
 8011b7e:	d1be      	bne.n	8011afe <_printf_float+0x326>
 8011b80:	e689      	b.n	8011896 <_printf_float+0xbe>
 8011b82:	9a05      	ldr	r2, [sp, #20]
 8011b84:	464b      	mov	r3, r9
 8011b86:	4442      	add	r2, r8
 8011b88:	4631      	mov	r1, r6
 8011b8a:	4628      	mov	r0, r5
 8011b8c:	47b8      	blx	r7
 8011b8e:	3001      	adds	r0, #1
 8011b90:	d1c1      	bne.n	8011b16 <_printf_float+0x33e>
 8011b92:	e680      	b.n	8011896 <_printf_float+0xbe>
 8011b94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011b96:	2a01      	cmp	r2, #1
 8011b98:	dc01      	bgt.n	8011b9e <_printf_float+0x3c6>
 8011b9a:	07db      	lsls	r3, r3, #31
 8011b9c:	d53a      	bpl.n	8011c14 <_printf_float+0x43c>
 8011b9e:	2301      	movs	r3, #1
 8011ba0:	4642      	mov	r2, r8
 8011ba2:	4631      	mov	r1, r6
 8011ba4:	4628      	mov	r0, r5
 8011ba6:	47b8      	blx	r7
 8011ba8:	3001      	adds	r0, #1
 8011baa:	f43f ae74 	beq.w	8011896 <_printf_float+0xbe>
 8011bae:	ee18 3a10 	vmov	r3, s16
 8011bb2:	4652      	mov	r2, sl
 8011bb4:	4631      	mov	r1, r6
 8011bb6:	4628      	mov	r0, r5
 8011bb8:	47b8      	blx	r7
 8011bba:	3001      	adds	r0, #1
 8011bbc:	f43f ae6b 	beq.w	8011896 <_printf_float+0xbe>
 8011bc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011bc4:	2200      	movs	r2, #0
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8011bcc:	f7ee ff54 	bl	8000a78 <__aeabi_dcmpeq>
 8011bd0:	b9d8      	cbnz	r0, 8011c0a <_printf_float+0x432>
 8011bd2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8011bd6:	f108 0201 	add.w	r2, r8, #1
 8011bda:	4631      	mov	r1, r6
 8011bdc:	4628      	mov	r0, r5
 8011bde:	47b8      	blx	r7
 8011be0:	3001      	adds	r0, #1
 8011be2:	d10e      	bne.n	8011c02 <_printf_float+0x42a>
 8011be4:	e657      	b.n	8011896 <_printf_float+0xbe>
 8011be6:	2301      	movs	r3, #1
 8011be8:	4652      	mov	r2, sl
 8011bea:	4631      	mov	r1, r6
 8011bec:	4628      	mov	r0, r5
 8011bee:	47b8      	blx	r7
 8011bf0:	3001      	adds	r0, #1
 8011bf2:	f43f ae50 	beq.w	8011896 <_printf_float+0xbe>
 8011bf6:	f108 0801 	add.w	r8, r8, #1
 8011bfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011bfc:	3b01      	subs	r3, #1
 8011bfe:	4543      	cmp	r3, r8
 8011c00:	dcf1      	bgt.n	8011be6 <_printf_float+0x40e>
 8011c02:	464b      	mov	r3, r9
 8011c04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011c08:	e6da      	b.n	80119c0 <_printf_float+0x1e8>
 8011c0a:	f04f 0800 	mov.w	r8, #0
 8011c0e:	f104 0a1a 	add.w	sl, r4, #26
 8011c12:	e7f2      	b.n	8011bfa <_printf_float+0x422>
 8011c14:	2301      	movs	r3, #1
 8011c16:	4642      	mov	r2, r8
 8011c18:	e7df      	b.n	8011bda <_printf_float+0x402>
 8011c1a:	2301      	movs	r3, #1
 8011c1c:	464a      	mov	r2, r9
 8011c1e:	4631      	mov	r1, r6
 8011c20:	4628      	mov	r0, r5
 8011c22:	47b8      	blx	r7
 8011c24:	3001      	adds	r0, #1
 8011c26:	f43f ae36 	beq.w	8011896 <_printf_float+0xbe>
 8011c2a:	f108 0801 	add.w	r8, r8, #1
 8011c2e:	68e3      	ldr	r3, [r4, #12]
 8011c30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011c32:	1a5b      	subs	r3, r3, r1
 8011c34:	4543      	cmp	r3, r8
 8011c36:	dcf0      	bgt.n	8011c1a <_printf_float+0x442>
 8011c38:	e6f8      	b.n	8011a2c <_printf_float+0x254>
 8011c3a:	f04f 0800 	mov.w	r8, #0
 8011c3e:	f104 0919 	add.w	r9, r4, #25
 8011c42:	e7f4      	b.n	8011c2e <_printf_float+0x456>

08011c44 <_printf_common>:
 8011c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c48:	4616      	mov	r6, r2
 8011c4a:	4699      	mov	r9, r3
 8011c4c:	688a      	ldr	r2, [r1, #8]
 8011c4e:	690b      	ldr	r3, [r1, #16]
 8011c50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011c54:	4293      	cmp	r3, r2
 8011c56:	bfb8      	it	lt
 8011c58:	4613      	movlt	r3, r2
 8011c5a:	6033      	str	r3, [r6, #0]
 8011c5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011c60:	4607      	mov	r7, r0
 8011c62:	460c      	mov	r4, r1
 8011c64:	b10a      	cbz	r2, 8011c6a <_printf_common+0x26>
 8011c66:	3301      	adds	r3, #1
 8011c68:	6033      	str	r3, [r6, #0]
 8011c6a:	6823      	ldr	r3, [r4, #0]
 8011c6c:	0699      	lsls	r1, r3, #26
 8011c6e:	bf42      	ittt	mi
 8011c70:	6833      	ldrmi	r3, [r6, #0]
 8011c72:	3302      	addmi	r3, #2
 8011c74:	6033      	strmi	r3, [r6, #0]
 8011c76:	6825      	ldr	r5, [r4, #0]
 8011c78:	f015 0506 	ands.w	r5, r5, #6
 8011c7c:	d106      	bne.n	8011c8c <_printf_common+0x48>
 8011c7e:	f104 0a19 	add.w	sl, r4, #25
 8011c82:	68e3      	ldr	r3, [r4, #12]
 8011c84:	6832      	ldr	r2, [r6, #0]
 8011c86:	1a9b      	subs	r3, r3, r2
 8011c88:	42ab      	cmp	r3, r5
 8011c8a:	dc26      	bgt.n	8011cda <_printf_common+0x96>
 8011c8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011c90:	1e13      	subs	r3, r2, #0
 8011c92:	6822      	ldr	r2, [r4, #0]
 8011c94:	bf18      	it	ne
 8011c96:	2301      	movne	r3, #1
 8011c98:	0692      	lsls	r2, r2, #26
 8011c9a:	d42b      	bmi.n	8011cf4 <_printf_common+0xb0>
 8011c9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011ca0:	4649      	mov	r1, r9
 8011ca2:	4638      	mov	r0, r7
 8011ca4:	47c0      	blx	r8
 8011ca6:	3001      	adds	r0, #1
 8011ca8:	d01e      	beq.n	8011ce8 <_printf_common+0xa4>
 8011caa:	6823      	ldr	r3, [r4, #0]
 8011cac:	6922      	ldr	r2, [r4, #16]
 8011cae:	f003 0306 	and.w	r3, r3, #6
 8011cb2:	2b04      	cmp	r3, #4
 8011cb4:	bf02      	ittt	eq
 8011cb6:	68e5      	ldreq	r5, [r4, #12]
 8011cb8:	6833      	ldreq	r3, [r6, #0]
 8011cba:	1aed      	subeq	r5, r5, r3
 8011cbc:	68a3      	ldr	r3, [r4, #8]
 8011cbe:	bf0c      	ite	eq
 8011cc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011cc4:	2500      	movne	r5, #0
 8011cc6:	4293      	cmp	r3, r2
 8011cc8:	bfc4      	itt	gt
 8011cca:	1a9b      	subgt	r3, r3, r2
 8011ccc:	18ed      	addgt	r5, r5, r3
 8011cce:	2600      	movs	r6, #0
 8011cd0:	341a      	adds	r4, #26
 8011cd2:	42b5      	cmp	r5, r6
 8011cd4:	d11a      	bne.n	8011d0c <_printf_common+0xc8>
 8011cd6:	2000      	movs	r0, #0
 8011cd8:	e008      	b.n	8011cec <_printf_common+0xa8>
 8011cda:	2301      	movs	r3, #1
 8011cdc:	4652      	mov	r2, sl
 8011cde:	4649      	mov	r1, r9
 8011ce0:	4638      	mov	r0, r7
 8011ce2:	47c0      	blx	r8
 8011ce4:	3001      	adds	r0, #1
 8011ce6:	d103      	bne.n	8011cf0 <_printf_common+0xac>
 8011ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8011cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cf0:	3501      	adds	r5, #1
 8011cf2:	e7c6      	b.n	8011c82 <_printf_common+0x3e>
 8011cf4:	18e1      	adds	r1, r4, r3
 8011cf6:	1c5a      	adds	r2, r3, #1
 8011cf8:	2030      	movs	r0, #48	; 0x30
 8011cfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011cfe:	4422      	add	r2, r4
 8011d00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011d04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011d08:	3302      	adds	r3, #2
 8011d0a:	e7c7      	b.n	8011c9c <_printf_common+0x58>
 8011d0c:	2301      	movs	r3, #1
 8011d0e:	4622      	mov	r2, r4
 8011d10:	4649      	mov	r1, r9
 8011d12:	4638      	mov	r0, r7
 8011d14:	47c0      	blx	r8
 8011d16:	3001      	adds	r0, #1
 8011d18:	d0e6      	beq.n	8011ce8 <_printf_common+0xa4>
 8011d1a:	3601      	adds	r6, #1
 8011d1c:	e7d9      	b.n	8011cd2 <_printf_common+0x8e>
	...

08011d20 <_printf_i>:
 8011d20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011d24:	7e0f      	ldrb	r7, [r1, #24]
 8011d26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011d28:	2f78      	cmp	r7, #120	; 0x78
 8011d2a:	4691      	mov	r9, r2
 8011d2c:	4680      	mov	r8, r0
 8011d2e:	460c      	mov	r4, r1
 8011d30:	469a      	mov	sl, r3
 8011d32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011d36:	d807      	bhi.n	8011d48 <_printf_i+0x28>
 8011d38:	2f62      	cmp	r7, #98	; 0x62
 8011d3a:	d80a      	bhi.n	8011d52 <_printf_i+0x32>
 8011d3c:	2f00      	cmp	r7, #0
 8011d3e:	f000 80d4 	beq.w	8011eea <_printf_i+0x1ca>
 8011d42:	2f58      	cmp	r7, #88	; 0x58
 8011d44:	f000 80c0 	beq.w	8011ec8 <_printf_i+0x1a8>
 8011d48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011d4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011d50:	e03a      	b.n	8011dc8 <_printf_i+0xa8>
 8011d52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011d56:	2b15      	cmp	r3, #21
 8011d58:	d8f6      	bhi.n	8011d48 <_printf_i+0x28>
 8011d5a:	a101      	add	r1, pc, #4	; (adr r1, 8011d60 <_printf_i+0x40>)
 8011d5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011d60:	08011db9 	.word	0x08011db9
 8011d64:	08011dcd 	.word	0x08011dcd
 8011d68:	08011d49 	.word	0x08011d49
 8011d6c:	08011d49 	.word	0x08011d49
 8011d70:	08011d49 	.word	0x08011d49
 8011d74:	08011d49 	.word	0x08011d49
 8011d78:	08011dcd 	.word	0x08011dcd
 8011d7c:	08011d49 	.word	0x08011d49
 8011d80:	08011d49 	.word	0x08011d49
 8011d84:	08011d49 	.word	0x08011d49
 8011d88:	08011d49 	.word	0x08011d49
 8011d8c:	08011ed1 	.word	0x08011ed1
 8011d90:	08011df9 	.word	0x08011df9
 8011d94:	08011e8b 	.word	0x08011e8b
 8011d98:	08011d49 	.word	0x08011d49
 8011d9c:	08011d49 	.word	0x08011d49
 8011da0:	08011ef3 	.word	0x08011ef3
 8011da4:	08011d49 	.word	0x08011d49
 8011da8:	08011df9 	.word	0x08011df9
 8011dac:	08011d49 	.word	0x08011d49
 8011db0:	08011d49 	.word	0x08011d49
 8011db4:	08011e93 	.word	0x08011e93
 8011db8:	682b      	ldr	r3, [r5, #0]
 8011dba:	1d1a      	adds	r2, r3, #4
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	602a      	str	r2, [r5, #0]
 8011dc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011dc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011dc8:	2301      	movs	r3, #1
 8011dca:	e09f      	b.n	8011f0c <_printf_i+0x1ec>
 8011dcc:	6820      	ldr	r0, [r4, #0]
 8011dce:	682b      	ldr	r3, [r5, #0]
 8011dd0:	0607      	lsls	r7, r0, #24
 8011dd2:	f103 0104 	add.w	r1, r3, #4
 8011dd6:	6029      	str	r1, [r5, #0]
 8011dd8:	d501      	bpl.n	8011dde <_printf_i+0xbe>
 8011dda:	681e      	ldr	r6, [r3, #0]
 8011ddc:	e003      	b.n	8011de6 <_printf_i+0xc6>
 8011dde:	0646      	lsls	r6, r0, #25
 8011de0:	d5fb      	bpl.n	8011dda <_printf_i+0xba>
 8011de2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011de6:	2e00      	cmp	r6, #0
 8011de8:	da03      	bge.n	8011df2 <_printf_i+0xd2>
 8011dea:	232d      	movs	r3, #45	; 0x2d
 8011dec:	4276      	negs	r6, r6
 8011dee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011df2:	485a      	ldr	r0, [pc, #360]	; (8011f5c <_printf_i+0x23c>)
 8011df4:	230a      	movs	r3, #10
 8011df6:	e012      	b.n	8011e1e <_printf_i+0xfe>
 8011df8:	682b      	ldr	r3, [r5, #0]
 8011dfa:	6820      	ldr	r0, [r4, #0]
 8011dfc:	1d19      	adds	r1, r3, #4
 8011dfe:	6029      	str	r1, [r5, #0]
 8011e00:	0605      	lsls	r5, r0, #24
 8011e02:	d501      	bpl.n	8011e08 <_printf_i+0xe8>
 8011e04:	681e      	ldr	r6, [r3, #0]
 8011e06:	e002      	b.n	8011e0e <_printf_i+0xee>
 8011e08:	0641      	lsls	r1, r0, #25
 8011e0a:	d5fb      	bpl.n	8011e04 <_printf_i+0xe4>
 8011e0c:	881e      	ldrh	r6, [r3, #0]
 8011e0e:	4853      	ldr	r0, [pc, #332]	; (8011f5c <_printf_i+0x23c>)
 8011e10:	2f6f      	cmp	r7, #111	; 0x6f
 8011e12:	bf0c      	ite	eq
 8011e14:	2308      	moveq	r3, #8
 8011e16:	230a      	movne	r3, #10
 8011e18:	2100      	movs	r1, #0
 8011e1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011e1e:	6865      	ldr	r5, [r4, #4]
 8011e20:	60a5      	str	r5, [r4, #8]
 8011e22:	2d00      	cmp	r5, #0
 8011e24:	bfa2      	ittt	ge
 8011e26:	6821      	ldrge	r1, [r4, #0]
 8011e28:	f021 0104 	bicge.w	r1, r1, #4
 8011e2c:	6021      	strge	r1, [r4, #0]
 8011e2e:	b90e      	cbnz	r6, 8011e34 <_printf_i+0x114>
 8011e30:	2d00      	cmp	r5, #0
 8011e32:	d04b      	beq.n	8011ecc <_printf_i+0x1ac>
 8011e34:	4615      	mov	r5, r2
 8011e36:	fbb6 f1f3 	udiv	r1, r6, r3
 8011e3a:	fb03 6711 	mls	r7, r3, r1, r6
 8011e3e:	5dc7      	ldrb	r7, [r0, r7]
 8011e40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011e44:	4637      	mov	r7, r6
 8011e46:	42bb      	cmp	r3, r7
 8011e48:	460e      	mov	r6, r1
 8011e4a:	d9f4      	bls.n	8011e36 <_printf_i+0x116>
 8011e4c:	2b08      	cmp	r3, #8
 8011e4e:	d10b      	bne.n	8011e68 <_printf_i+0x148>
 8011e50:	6823      	ldr	r3, [r4, #0]
 8011e52:	07de      	lsls	r6, r3, #31
 8011e54:	d508      	bpl.n	8011e68 <_printf_i+0x148>
 8011e56:	6923      	ldr	r3, [r4, #16]
 8011e58:	6861      	ldr	r1, [r4, #4]
 8011e5a:	4299      	cmp	r1, r3
 8011e5c:	bfde      	ittt	le
 8011e5e:	2330      	movle	r3, #48	; 0x30
 8011e60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011e64:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011e68:	1b52      	subs	r2, r2, r5
 8011e6a:	6122      	str	r2, [r4, #16]
 8011e6c:	f8cd a000 	str.w	sl, [sp]
 8011e70:	464b      	mov	r3, r9
 8011e72:	aa03      	add	r2, sp, #12
 8011e74:	4621      	mov	r1, r4
 8011e76:	4640      	mov	r0, r8
 8011e78:	f7ff fee4 	bl	8011c44 <_printf_common>
 8011e7c:	3001      	adds	r0, #1
 8011e7e:	d14a      	bne.n	8011f16 <_printf_i+0x1f6>
 8011e80:	f04f 30ff 	mov.w	r0, #4294967295
 8011e84:	b004      	add	sp, #16
 8011e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e8a:	6823      	ldr	r3, [r4, #0]
 8011e8c:	f043 0320 	orr.w	r3, r3, #32
 8011e90:	6023      	str	r3, [r4, #0]
 8011e92:	4833      	ldr	r0, [pc, #204]	; (8011f60 <_printf_i+0x240>)
 8011e94:	2778      	movs	r7, #120	; 0x78
 8011e96:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011e9a:	6823      	ldr	r3, [r4, #0]
 8011e9c:	6829      	ldr	r1, [r5, #0]
 8011e9e:	061f      	lsls	r7, r3, #24
 8011ea0:	f851 6b04 	ldr.w	r6, [r1], #4
 8011ea4:	d402      	bmi.n	8011eac <_printf_i+0x18c>
 8011ea6:	065f      	lsls	r7, r3, #25
 8011ea8:	bf48      	it	mi
 8011eaa:	b2b6      	uxthmi	r6, r6
 8011eac:	07df      	lsls	r7, r3, #31
 8011eae:	bf48      	it	mi
 8011eb0:	f043 0320 	orrmi.w	r3, r3, #32
 8011eb4:	6029      	str	r1, [r5, #0]
 8011eb6:	bf48      	it	mi
 8011eb8:	6023      	strmi	r3, [r4, #0]
 8011eba:	b91e      	cbnz	r6, 8011ec4 <_printf_i+0x1a4>
 8011ebc:	6823      	ldr	r3, [r4, #0]
 8011ebe:	f023 0320 	bic.w	r3, r3, #32
 8011ec2:	6023      	str	r3, [r4, #0]
 8011ec4:	2310      	movs	r3, #16
 8011ec6:	e7a7      	b.n	8011e18 <_printf_i+0xf8>
 8011ec8:	4824      	ldr	r0, [pc, #144]	; (8011f5c <_printf_i+0x23c>)
 8011eca:	e7e4      	b.n	8011e96 <_printf_i+0x176>
 8011ecc:	4615      	mov	r5, r2
 8011ece:	e7bd      	b.n	8011e4c <_printf_i+0x12c>
 8011ed0:	682b      	ldr	r3, [r5, #0]
 8011ed2:	6826      	ldr	r6, [r4, #0]
 8011ed4:	6961      	ldr	r1, [r4, #20]
 8011ed6:	1d18      	adds	r0, r3, #4
 8011ed8:	6028      	str	r0, [r5, #0]
 8011eda:	0635      	lsls	r5, r6, #24
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	d501      	bpl.n	8011ee4 <_printf_i+0x1c4>
 8011ee0:	6019      	str	r1, [r3, #0]
 8011ee2:	e002      	b.n	8011eea <_printf_i+0x1ca>
 8011ee4:	0670      	lsls	r0, r6, #25
 8011ee6:	d5fb      	bpl.n	8011ee0 <_printf_i+0x1c0>
 8011ee8:	8019      	strh	r1, [r3, #0]
 8011eea:	2300      	movs	r3, #0
 8011eec:	6123      	str	r3, [r4, #16]
 8011eee:	4615      	mov	r5, r2
 8011ef0:	e7bc      	b.n	8011e6c <_printf_i+0x14c>
 8011ef2:	682b      	ldr	r3, [r5, #0]
 8011ef4:	1d1a      	adds	r2, r3, #4
 8011ef6:	602a      	str	r2, [r5, #0]
 8011ef8:	681d      	ldr	r5, [r3, #0]
 8011efa:	6862      	ldr	r2, [r4, #4]
 8011efc:	2100      	movs	r1, #0
 8011efe:	4628      	mov	r0, r5
 8011f00:	f7ee f93e 	bl	8000180 <memchr>
 8011f04:	b108      	cbz	r0, 8011f0a <_printf_i+0x1ea>
 8011f06:	1b40      	subs	r0, r0, r5
 8011f08:	6060      	str	r0, [r4, #4]
 8011f0a:	6863      	ldr	r3, [r4, #4]
 8011f0c:	6123      	str	r3, [r4, #16]
 8011f0e:	2300      	movs	r3, #0
 8011f10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011f14:	e7aa      	b.n	8011e6c <_printf_i+0x14c>
 8011f16:	6923      	ldr	r3, [r4, #16]
 8011f18:	462a      	mov	r2, r5
 8011f1a:	4649      	mov	r1, r9
 8011f1c:	4640      	mov	r0, r8
 8011f1e:	47d0      	blx	sl
 8011f20:	3001      	adds	r0, #1
 8011f22:	d0ad      	beq.n	8011e80 <_printf_i+0x160>
 8011f24:	6823      	ldr	r3, [r4, #0]
 8011f26:	079b      	lsls	r3, r3, #30
 8011f28:	d413      	bmi.n	8011f52 <_printf_i+0x232>
 8011f2a:	68e0      	ldr	r0, [r4, #12]
 8011f2c:	9b03      	ldr	r3, [sp, #12]
 8011f2e:	4298      	cmp	r0, r3
 8011f30:	bfb8      	it	lt
 8011f32:	4618      	movlt	r0, r3
 8011f34:	e7a6      	b.n	8011e84 <_printf_i+0x164>
 8011f36:	2301      	movs	r3, #1
 8011f38:	4632      	mov	r2, r6
 8011f3a:	4649      	mov	r1, r9
 8011f3c:	4640      	mov	r0, r8
 8011f3e:	47d0      	blx	sl
 8011f40:	3001      	adds	r0, #1
 8011f42:	d09d      	beq.n	8011e80 <_printf_i+0x160>
 8011f44:	3501      	adds	r5, #1
 8011f46:	68e3      	ldr	r3, [r4, #12]
 8011f48:	9903      	ldr	r1, [sp, #12]
 8011f4a:	1a5b      	subs	r3, r3, r1
 8011f4c:	42ab      	cmp	r3, r5
 8011f4e:	dcf2      	bgt.n	8011f36 <_printf_i+0x216>
 8011f50:	e7eb      	b.n	8011f2a <_printf_i+0x20a>
 8011f52:	2500      	movs	r5, #0
 8011f54:	f104 0619 	add.w	r6, r4, #25
 8011f58:	e7f5      	b.n	8011f46 <_printf_i+0x226>
 8011f5a:	bf00      	nop
 8011f5c:	0801842a 	.word	0x0801842a
 8011f60:	0801843b 	.word	0x0801843b

08011f64 <_scanf_float>:
 8011f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f68:	b087      	sub	sp, #28
 8011f6a:	4617      	mov	r7, r2
 8011f6c:	9303      	str	r3, [sp, #12]
 8011f6e:	688b      	ldr	r3, [r1, #8]
 8011f70:	1e5a      	subs	r2, r3, #1
 8011f72:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011f76:	bf83      	ittte	hi
 8011f78:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8011f7c:	195b      	addhi	r3, r3, r5
 8011f7e:	9302      	strhi	r3, [sp, #8]
 8011f80:	2300      	movls	r3, #0
 8011f82:	bf86      	itte	hi
 8011f84:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011f88:	608b      	strhi	r3, [r1, #8]
 8011f8a:	9302      	strls	r3, [sp, #8]
 8011f8c:	680b      	ldr	r3, [r1, #0]
 8011f8e:	468b      	mov	fp, r1
 8011f90:	2500      	movs	r5, #0
 8011f92:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8011f96:	f84b 3b1c 	str.w	r3, [fp], #28
 8011f9a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8011f9e:	4680      	mov	r8, r0
 8011fa0:	460c      	mov	r4, r1
 8011fa2:	465e      	mov	r6, fp
 8011fa4:	46aa      	mov	sl, r5
 8011fa6:	46a9      	mov	r9, r5
 8011fa8:	9501      	str	r5, [sp, #4]
 8011faa:	68a2      	ldr	r2, [r4, #8]
 8011fac:	b152      	cbz	r2, 8011fc4 <_scanf_float+0x60>
 8011fae:	683b      	ldr	r3, [r7, #0]
 8011fb0:	781b      	ldrb	r3, [r3, #0]
 8011fb2:	2b4e      	cmp	r3, #78	; 0x4e
 8011fb4:	d864      	bhi.n	8012080 <_scanf_float+0x11c>
 8011fb6:	2b40      	cmp	r3, #64	; 0x40
 8011fb8:	d83c      	bhi.n	8012034 <_scanf_float+0xd0>
 8011fba:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8011fbe:	b2c8      	uxtb	r0, r1
 8011fc0:	280e      	cmp	r0, #14
 8011fc2:	d93a      	bls.n	801203a <_scanf_float+0xd6>
 8011fc4:	f1b9 0f00 	cmp.w	r9, #0
 8011fc8:	d003      	beq.n	8011fd2 <_scanf_float+0x6e>
 8011fca:	6823      	ldr	r3, [r4, #0]
 8011fcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011fd0:	6023      	str	r3, [r4, #0]
 8011fd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011fd6:	f1ba 0f01 	cmp.w	sl, #1
 8011fda:	f200 8113 	bhi.w	8012204 <_scanf_float+0x2a0>
 8011fde:	455e      	cmp	r6, fp
 8011fe0:	f200 8105 	bhi.w	80121ee <_scanf_float+0x28a>
 8011fe4:	2501      	movs	r5, #1
 8011fe6:	4628      	mov	r0, r5
 8011fe8:	b007      	add	sp, #28
 8011fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fee:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8011ff2:	2a0d      	cmp	r2, #13
 8011ff4:	d8e6      	bhi.n	8011fc4 <_scanf_float+0x60>
 8011ff6:	a101      	add	r1, pc, #4	; (adr r1, 8011ffc <_scanf_float+0x98>)
 8011ff8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011ffc:	0801213b 	.word	0x0801213b
 8012000:	08011fc5 	.word	0x08011fc5
 8012004:	08011fc5 	.word	0x08011fc5
 8012008:	08011fc5 	.word	0x08011fc5
 801200c:	0801219b 	.word	0x0801219b
 8012010:	08012173 	.word	0x08012173
 8012014:	08011fc5 	.word	0x08011fc5
 8012018:	08011fc5 	.word	0x08011fc5
 801201c:	08012149 	.word	0x08012149
 8012020:	08011fc5 	.word	0x08011fc5
 8012024:	08011fc5 	.word	0x08011fc5
 8012028:	08011fc5 	.word	0x08011fc5
 801202c:	08011fc5 	.word	0x08011fc5
 8012030:	08012101 	.word	0x08012101
 8012034:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8012038:	e7db      	b.n	8011ff2 <_scanf_float+0x8e>
 801203a:	290e      	cmp	r1, #14
 801203c:	d8c2      	bhi.n	8011fc4 <_scanf_float+0x60>
 801203e:	a001      	add	r0, pc, #4	; (adr r0, 8012044 <_scanf_float+0xe0>)
 8012040:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8012044:	080120f3 	.word	0x080120f3
 8012048:	08011fc5 	.word	0x08011fc5
 801204c:	080120f3 	.word	0x080120f3
 8012050:	08012187 	.word	0x08012187
 8012054:	08011fc5 	.word	0x08011fc5
 8012058:	080120a1 	.word	0x080120a1
 801205c:	080120dd 	.word	0x080120dd
 8012060:	080120dd 	.word	0x080120dd
 8012064:	080120dd 	.word	0x080120dd
 8012068:	080120dd 	.word	0x080120dd
 801206c:	080120dd 	.word	0x080120dd
 8012070:	080120dd 	.word	0x080120dd
 8012074:	080120dd 	.word	0x080120dd
 8012078:	080120dd 	.word	0x080120dd
 801207c:	080120dd 	.word	0x080120dd
 8012080:	2b6e      	cmp	r3, #110	; 0x6e
 8012082:	d809      	bhi.n	8012098 <_scanf_float+0x134>
 8012084:	2b60      	cmp	r3, #96	; 0x60
 8012086:	d8b2      	bhi.n	8011fee <_scanf_float+0x8a>
 8012088:	2b54      	cmp	r3, #84	; 0x54
 801208a:	d077      	beq.n	801217c <_scanf_float+0x218>
 801208c:	2b59      	cmp	r3, #89	; 0x59
 801208e:	d199      	bne.n	8011fc4 <_scanf_float+0x60>
 8012090:	2d07      	cmp	r5, #7
 8012092:	d197      	bne.n	8011fc4 <_scanf_float+0x60>
 8012094:	2508      	movs	r5, #8
 8012096:	e029      	b.n	80120ec <_scanf_float+0x188>
 8012098:	2b74      	cmp	r3, #116	; 0x74
 801209a:	d06f      	beq.n	801217c <_scanf_float+0x218>
 801209c:	2b79      	cmp	r3, #121	; 0x79
 801209e:	e7f6      	b.n	801208e <_scanf_float+0x12a>
 80120a0:	6821      	ldr	r1, [r4, #0]
 80120a2:	05c8      	lsls	r0, r1, #23
 80120a4:	d51a      	bpl.n	80120dc <_scanf_float+0x178>
 80120a6:	9b02      	ldr	r3, [sp, #8]
 80120a8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80120ac:	6021      	str	r1, [r4, #0]
 80120ae:	f109 0901 	add.w	r9, r9, #1
 80120b2:	b11b      	cbz	r3, 80120bc <_scanf_float+0x158>
 80120b4:	3b01      	subs	r3, #1
 80120b6:	3201      	adds	r2, #1
 80120b8:	9302      	str	r3, [sp, #8]
 80120ba:	60a2      	str	r2, [r4, #8]
 80120bc:	68a3      	ldr	r3, [r4, #8]
 80120be:	3b01      	subs	r3, #1
 80120c0:	60a3      	str	r3, [r4, #8]
 80120c2:	6923      	ldr	r3, [r4, #16]
 80120c4:	3301      	adds	r3, #1
 80120c6:	6123      	str	r3, [r4, #16]
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	3b01      	subs	r3, #1
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	607b      	str	r3, [r7, #4]
 80120d0:	f340 8084 	ble.w	80121dc <_scanf_float+0x278>
 80120d4:	683b      	ldr	r3, [r7, #0]
 80120d6:	3301      	adds	r3, #1
 80120d8:	603b      	str	r3, [r7, #0]
 80120da:	e766      	b.n	8011faa <_scanf_float+0x46>
 80120dc:	eb1a 0f05 	cmn.w	sl, r5
 80120e0:	f47f af70 	bne.w	8011fc4 <_scanf_float+0x60>
 80120e4:	6822      	ldr	r2, [r4, #0]
 80120e6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80120ea:	6022      	str	r2, [r4, #0]
 80120ec:	f806 3b01 	strb.w	r3, [r6], #1
 80120f0:	e7e4      	b.n	80120bc <_scanf_float+0x158>
 80120f2:	6822      	ldr	r2, [r4, #0]
 80120f4:	0610      	lsls	r0, r2, #24
 80120f6:	f57f af65 	bpl.w	8011fc4 <_scanf_float+0x60>
 80120fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80120fe:	e7f4      	b.n	80120ea <_scanf_float+0x186>
 8012100:	f1ba 0f00 	cmp.w	sl, #0
 8012104:	d10e      	bne.n	8012124 <_scanf_float+0x1c0>
 8012106:	f1b9 0f00 	cmp.w	r9, #0
 801210a:	d10e      	bne.n	801212a <_scanf_float+0x1c6>
 801210c:	6822      	ldr	r2, [r4, #0]
 801210e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012112:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012116:	d108      	bne.n	801212a <_scanf_float+0x1c6>
 8012118:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801211c:	6022      	str	r2, [r4, #0]
 801211e:	f04f 0a01 	mov.w	sl, #1
 8012122:	e7e3      	b.n	80120ec <_scanf_float+0x188>
 8012124:	f1ba 0f02 	cmp.w	sl, #2
 8012128:	d055      	beq.n	80121d6 <_scanf_float+0x272>
 801212a:	2d01      	cmp	r5, #1
 801212c:	d002      	beq.n	8012134 <_scanf_float+0x1d0>
 801212e:	2d04      	cmp	r5, #4
 8012130:	f47f af48 	bne.w	8011fc4 <_scanf_float+0x60>
 8012134:	3501      	adds	r5, #1
 8012136:	b2ed      	uxtb	r5, r5
 8012138:	e7d8      	b.n	80120ec <_scanf_float+0x188>
 801213a:	f1ba 0f01 	cmp.w	sl, #1
 801213e:	f47f af41 	bne.w	8011fc4 <_scanf_float+0x60>
 8012142:	f04f 0a02 	mov.w	sl, #2
 8012146:	e7d1      	b.n	80120ec <_scanf_float+0x188>
 8012148:	b97d      	cbnz	r5, 801216a <_scanf_float+0x206>
 801214a:	f1b9 0f00 	cmp.w	r9, #0
 801214e:	f47f af3c 	bne.w	8011fca <_scanf_float+0x66>
 8012152:	6822      	ldr	r2, [r4, #0]
 8012154:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012158:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801215c:	f47f af39 	bne.w	8011fd2 <_scanf_float+0x6e>
 8012160:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012164:	6022      	str	r2, [r4, #0]
 8012166:	2501      	movs	r5, #1
 8012168:	e7c0      	b.n	80120ec <_scanf_float+0x188>
 801216a:	2d03      	cmp	r5, #3
 801216c:	d0e2      	beq.n	8012134 <_scanf_float+0x1d0>
 801216e:	2d05      	cmp	r5, #5
 8012170:	e7de      	b.n	8012130 <_scanf_float+0x1cc>
 8012172:	2d02      	cmp	r5, #2
 8012174:	f47f af26 	bne.w	8011fc4 <_scanf_float+0x60>
 8012178:	2503      	movs	r5, #3
 801217a:	e7b7      	b.n	80120ec <_scanf_float+0x188>
 801217c:	2d06      	cmp	r5, #6
 801217e:	f47f af21 	bne.w	8011fc4 <_scanf_float+0x60>
 8012182:	2507      	movs	r5, #7
 8012184:	e7b2      	b.n	80120ec <_scanf_float+0x188>
 8012186:	6822      	ldr	r2, [r4, #0]
 8012188:	0591      	lsls	r1, r2, #22
 801218a:	f57f af1b 	bpl.w	8011fc4 <_scanf_float+0x60>
 801218e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8012192:	6022      	str	r2, [r4, #0]
 8012194:	f8cd 9004 	str.w	r9, [sp, #4]
 8012198:	e7a8      	b.n	80120ec <_scanf_float+0x188>
 801219a:	6822      	ldr	r2, [r4, #0]
 801219c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80121a0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80121a4:	d006      	beq.n	80121b4 <_scanf_float+0x250>
 80121a6:	0550      	lsls	r0, r2, #21
 80121a8:	f57f af0c 	bpl.w	8011fc4 <_scanf_float+0x60>
 80121ac:	f1b9 0f00 	cmp.w	r9, #0
 80121b0:	f43f af0f 	beq.w	8011fd2 <_scanf_float+0x6e>
 80121b4:	0591      	lsls	r1, r2, #22
 80121b6:	bf58      	it	pl
 80121b8:	9901      	ldrpl	r1, [sp, #4]
 80121ba:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80121be:	bf58      	it	pl
 80121c0:	eba9 0101 	subpl.w	r1, r9, r1
 80121c4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80121c8:	bf58      	it	pl
 80121ca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80121ce:	6022      	str	r2, [r4, #0]
 80121d0:	f04f 0900 	mov.w	r9, #0
 80121d4:	e78a      	b.n	80120ec <_scanf_float+0x188>
 80121d6:	f04f 0a03 	mov.w	sl, #3
 80121da:	e787      	b.n	80120ec <_scanf_float+0x188>
 80121dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80121e0:	4639      	mov	r1, r7
 80121e2:	4640      	mov	r0, r8
 80121e4:	4798      	blx	r3
 80121e6:	2800      	cmp	r0, #0
 80121e8:	f43f aedf 	beq.w	8011faa <_scanf_float+0x46>
 80121ec:	e6ea      	b.n	8011fc4 <_scanf_float+0x60>
 80121ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80121f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80121f6:	463a      	mov	r2, r7
 80121f8:	4640      	mov	r0, r8
 80121fa:	4798      	blx	r3
 80121fc:	6923      	ldr	r3, [r4, #16]
 80121fe:	3b01      	subs	r3, #1
 8012200:	6123      	str	r3, [r4, #16]
 8012202:	e6ec      	b.n	8011fde <_scanf_float+0x7a>
 8012204:	1e6b      	subs	r3, r5, #1
 8012206:	2b06      	cmp	r3, #6
 8012208:	d825      	bhi.n	8012256 <_scanf_float+0x2f2>
 801220a:	2d02      	cmp	r5, #2
 801220c:	d836      	bhi.n	801227c <_scanf_float+0x318>
 801220e:	455e      	cmp	r6, fp
 8012210:	f67f aee8 	bls.w	8011fe4 <_scanf_float+0x80>
 8012214:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012218:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801221c:	463a      	mov	r2, r7
 801221e:	4640      	mov	r0, r8
 8012220:	4798      	blx	r3
 8012222:	6923      	ldr	r3, [r4, #16]
 8012224:	3b01      	subs	r3, #1
 8012226:	6123      	str	r3, [r4, #16]
 8012228:	e7f1      	b.n	801220e <_scanf_float+0x2aa>
 801222a:	9802      	ldr	r0, [sp, #8]
 801222c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012230:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8012234:	9002      	str	r0, [sp, #8]
 8012236:	463a      	mov	r2, r7
 8012238:	4640      	mov	r0, r8
 801223a:	4798      	blx	r3
 801223c:	6923      	ldr	r3, [r4, #16]
 801223e:	3b01      	subs	r3, #1
 8012240:	6123      	str	r3, [r4, #16]
 8012242:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012246:	fa5f fa8a 	uxtb.w	sl, sl
 801224a:	f1ba 0f02 	cmp.w	sl, #2
 801224e:	d1ec      	bne.n	801222a <_scanf_float+0x2c6>
 8012250:	3d03      	subs	r5, #3
 8012252:	b2ed      	uxtb	r5, r5
 8012254:	1b76      	subs	r6, r6, r5
 8012256:	6823      	ldr	r3, [r4, #0]
 8012258:	05da      	lsls	r2, r3, #23
 801225a:	d52f      	bpl.n	80122bc <_scanf_float+0x358>
 801225c:	055b      	lsls	r3, r3, #21
 801225e:	d510      	bpl.n	8012282 <_scanf_float+0x31e>
 8012260:	455e      	cmp	r6, fp
 8012262:	f67f aebf 	bls.w	8011fe4 <_scanf_float+0x80>
 8012266:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801226a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801226e:	463a      	mov	r2, r7
 8012270:	4640      	mov	r0, r8
 8012272:	4798      	blx	r3
 8012274:	6923      	ldr	r3, [r4, #16]
 8012276:	3b01      	subs	r3, #1
 8012278:	6123      	str	r3, [r4, #16]
 801227a:	e7f1      	b.n	8012260 <_scanf_float+0x2fc>
 801227c:	46aa      	mov	sl, r5
 801227e:	9602      	str	r6, [sp, #8]
 8012280:	e7df      	b.n	8012242 <_scanf_float+0x2de>
 8012282:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8012286:	6923      	ldr	r3, [r4, #16]
 8012288:	2965      	cmp	r1, #101	; 0x65
 801228a:	f103 33ff 	add.w	r3, r3, #4294967295
 801228e:	f106 35ff 	add.w	r5, r6, #4294967295
 8012292:	6123      	str	r3, [r4, #16]
 8012294:	d00c      	beq.n	80122b0 <_scanf_float+0x34c>
 8012296:	2945      	cmp	r1, #69	; 0x45
 8012298:	d00a      	beq.n	80122b0 <_scanf_float+0x34c>
 801229a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801229e:	463a      	mov	r2, r7
 80122a0:	4640      	mov	r0, r8
 80122a2:	4798      	blx	r3
 80122a4:	6923      	ldr	r3, [r4, #16]
 80122a6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80122aa:	3b01      	subs	r3, #1
 80122ac:	1eb5      	subs	r5, r6, #2
 80122ae:	6123      	str	r3, [r4, #16]
 80122b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80122b4:	463a      	mov	r2, r7
 80122b6:	4640      	mov	r0, r8
 80122b8:	4798      	blx	r3
 80122ba:	462e      	mov	r6, r5
 80122bc:	6825      	ldr	r5, [r4, #0]
 80122be:	f015 0510 	ands.w	r5, r5, #16
 80122c2:	d158      	bne.n	8012376 <_scanf_float+0x412>
 80122c4:	7035      	strb	r5, [r6, #0]
 80122c6:	6823      	ldr	r3, [r4, #0]
 80122c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80122cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80122d0:	d11c      	bne.n	801230c <_scanf_float+0x3a8>
 80122d2:	9b01      	ldr	r3, [sp, #4]
 80122d4:	454b      	cmp	r3, r9
 80122d6:	eba3 0209 	sub.w	r2, r3, r9
 80122da:	d124      	bne.n	8012326 <_scanf_float+0x3c2>
 80122dc:	2200      	movs	r2, #0
 80122de:	4659      	mov	r1, fp
 80122e0:	4640      	mov	r0, r8
 80122e2:	f002 fd4d 	bl	8014d80 <_strtod_r>
 80122e6:	9b03      	ldr	r3, [sp, #12]
 80122e8:	6821      	ldr	r1, [r4, #0]
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	f011 0f02 	tst.w	r1, #2
 80122f0:	ec57 6b10 	vmov	r6, r7, d0
 80122f4:	f103 0204 	add.w	r2, r3, #4
 80122f8:	d020      	beq.n	801233c <_scanf_float+0x3d8>
 80122fa:	9903      	ldr	r1, [sp, #12]
 80122fc:	600a      	str	r2, [r1, #0]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	e9c3 6700 	strd	r6, r7, [r3]
 8012304:	68e3      	ldr	r3, [r4, #12]
 8012306:	3301      	adds	r3, #1
 8012308:	60e3      	str	r3, [r4, #12]
 801230a:	e66c      	b.n	8011fe6 <_scanf_float+0x82>
 801230c:	9b04      	ldr	r3, [sp, #16]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d0e4      	beq.n	80122dc <_scanf_float+0x378>
 8012312:	9905      	ldr	r1, [sp, #20]
 8012314:	230a      	movs	r3, #10
 8012316:	462a      	mov	r2, r5
 8012318:	3101      	adds	r1, #1
 801231a:	4640      	mov	r0, r8
 801231c:	f002 fdb8 	bl	8014e90 <_strtol_r>
 8012320:	9b04      	ldr	r3, [sp, #16]
 8012322:	9e05      	ldr	r6, [sp, #20]
 8012324:	1ac2      	subs	r2, r0, r3
 8012326:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801232a:	429e      	cmp	r6, r3
 801232c:	bf28      	it	cs
 801232e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8012332:	4912      	ldr	r1, [pc, #72]	; (801237c <_scanf_float+0x418>)
 8012334:	4630      	mov	r0, r6
 8012336:	f000 f94b 	bl	80125d0 <siprintf>
 801233a:	e7cf      	b.n	80122dc <_scanf_float+0x378>
 801233c:	f011 0f04 	tst.w	r1, #4
 8012340:	9903      	ldr	r1, [sp, #12]
 8012342:	600a      	str	r2, [r1, #0]
 8012344:	d1db      	bne.n	80122fe <_scanf_float+0x39a>
 8012346:	f8d3 8000 	ldr.w	r8, [r3]
 801234a:	ee10 2a10 	vmov	r2, s0
 801234e:	ee10 0a10 	vmov	r0, s0
 8012352:	463b      	mov	r3, r7
 8012354:	4639      	mov	r1, r7
 8012356:	f7ee fbc1 	bl	8000adc <__aeabi_dcmpun>
 801235a:	b128      	cbz	r0, 8012368 <_scanf_float+0x404>
 801235c:	4808      	ldr	r0, [pc, #32]	; (8012380 <_scanf_float+0x41c>)
 801235e:	f000 fad3 	bl	8012908 <nanf>
 8012362:	ed88 0a00 	vstr	s0, [r8]
 8012366:	e7cd      	b.n	8012304 <_scanf_float+0x3a0>
 8012368:	4630      	mov	r0, r6
 801236a:	4639      	mov	r1, r7
 801236c:	f7ee fc14 	bl	8000b98 <__aeabi_d2f>
 8012370:	f8c8 0000 	str.w	r0, [r8]
 8012374:	e7c6      	b.n	8012304 <_scanf_float+0x3a0>
 8012376:	2500      	movs	r5, #0
 8012378:	e635      	b.n	8011fe6 <_scanf_float+0x82>
 801237a:	bf00      	nop
 801237c:	0801844c 	.word	0x0801844c
 8012380:	080187dd 	.word	0x080187dd

08012384 <std>:
 8012384:	2300      	movs	r3, #0
 8012386:	b510      	push	{r4, lr}
 8012388:	4604      	mov	r4, r0
 801238a:	e9c0 3300 	strd	r3, r3, [r0]
 801238e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012392:	6083      	str	r3, [r0, #8]
 8012394:	8181      	strh	r1, [r0, #12]
 8012396:	6643      	str	r3, [r0, #100]	; 0x64
 8012398:	81c2      	strh	r2, [r0, #14]
 801239a:	6183      	str	r3, [r0, #24]
 801239c:	4619      	mov	r1, r3
 801239e:	2208      	movs	r2, #8
 80123a0:	305c      	adds	r0, #92	; 0x5c
 80123a2:	f000 fa0d 	bl	80127c0 <memset>
 80123a6:	4b05      	ldr	r3, [pc, #20]	; (80123bc <std+0x38>)
 80123a8:	6263      	str	r3, [r4, #36]	; 0x24
 80123aa:	4b05      	ldr	r3, [pc, #20]	; (80123c0 <std+0x3c>)
 80123ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80123ae:	4b05      	ldr	r3, [pc, #20]	; (80123c4 <std+0x40>)
 80123b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80123b2:	4b05      	ldr	r3, [pc, #20]	; (80123c8 <std+0x44>)
 80123b4:	6224      	str	r4, [r4, #32]
 80123b6:	6323      	str	r3, [r4, #48]	; 0x30
 80123b8:	bd10      	pop	{r4, pc}
 80123ba:	bf00      	nop
 80123bc:	08012611 	.word	0x08012611
 80123c0:	08012633 	.word	0x08012633
 80123c4:	0801266b 	.word	0x0801266b
 80123c8:	0801268f 	.word	0x0801268f

080123cc <stdio_exit_handler>:
 80123cc:	4a02      	ldr	r2, [pc, #8]	; (80123d8 <stdio_exit_handler+0xc>)
 80123ce:	4903      	ldr	r1, [pc, #12]	; (80123dc <stdio_exit_handler+0x10>)
 80123d0:	4803      	ldr	r0, [pc, #12]	; (80123e0 <stdio_exit_handler+0x14>)
 80123d2:	f000 b869 	b.w	80124a8 <_fwalk_sglue>
 80123d6:	bf00      	nop
 80123d8:	20000070 	.word	0x20000070
 80123dc:	080154d9 	.word	0x080154d9
 80123e0:	2000007c 	.word	0x2000007c

080123e4 <cleanup_stdio>:
 80123e4:	6841      	ldr	r1, [r0, #4]
 80123e6:	4b0c      	ldr	r3, [pc, #48]	; (8012418 <cleanup_stdio+0x34>)
 80123e8:	4299      	cmp	r1, r3
 80123ea:	b510      	push	{r4, lr}
 80123ec:	4604      	mov	r4, r0
 80123ee:	d001      	beq.n	80123f4 <cleanup_stdio+0x10>
 80123f0:	f003 f872 	bl	80154d8 <_fflush_r>
 80123f4:	68a1      	ldr	r1, [r4, #8]
 80123f6:	4b09      	ldr	r3, [pc, #36]	; (801241c <cleanup_stdio+0x38>)
 80123f8:	4299      	cmp	r1, r3
 80123fa:	d002      	beq.n	8012402 <cleanup_stdio+0x1e>
 80123fc:	4620      	mov	r0, r4
 80123fe:	f003 f86b 	bl	80154d8 <_fflush_r>
 8012402:	68e1      	ldr	r1, [r4, #12]
 8012404:	4b06      	ldr	r3, [pc, #24]	; (8012420 <cleanup_stdio+0x3c>)
 8012406:	4299      	cmp	r1, r3
 8012408:	d004      	beq.n	8012414 <cleanup_stdio+0x30>
 801240a:	4620      	mov	r0, r4
 801240c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012410:	f003 b862 	b.w	80154d8 <_fflush_r>
 8012414:	bd10      	pop	{r4, pc}
 8012416:	bf00      	nop
 8012418:	200007c0 	.word	0x200007c0
 801241c:	20000828 	.word	0x20000828
 8012420:	20000890 	.word	0x20000890

08012424 <global_stdio_init.part.0>:
 8012424:	b510      	push	{r4, lr}
 8012426:	4b0b      	ldr	r3, [pc, #44]	; (8012454 <global_stdio_init.part.0+0x30>)
 8012428:	4c0b      	ldr	r4, [pc, #44]	; (8012458 <global_stdio_init.part.0+0x34>)
 801242a:	4a0c      	ldr	r2, [pc, #48]	; (801245c <global_stdio_init.part.0+0x38>)
 801242c:	601a      	str	r2, [r3, #0]
 801242e:	4620      	mov	r0, r4
 8012430:	2200      	movs	r2, #0
 8012432:	2104      	movs	r1, #4
 8012434:	f7ff ffa6 	bl	8012384 <std>
 8012438:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801243c:	2201      	movs	r2, #1
 801243e:	2109      	movs	r1, #9
 8012440:	f7ff ffa0 	bl	8012384 <std>
 8012444:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8012448:	2202      	movs	r2, #2
 801244a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801244e:	2112      	movs	r1, #18
 8012450:	f7ff bf98 	b.w	8012384 <std>
 8012454:	200008f8 	.word	0x200008f8
 8012458:	200007c0 	.word	0x200007c0
 801245c:	080123cd 	.word	0x080123cd

08012460 <__sfp_lock_acquire>:
 8012460:	4801      	ldr	r0, [pc, #4]	; (8012468 <__sfp_lock_acquire+0x8>)
 8012462:	f000 ba41 	b.w	80128e8 <__retarget_lock_acquire_recursive>
 8012466:	bf00      	nop
 8012468:	20000901 	.word	0x20000901

0801246c <__sfp_lock_release>:
 801246c:	4801      	ldr	r0, [pc, #4]	; (8012474 <__sfp_lock_release+0x8>)
 801246e:	f000 ba3c 	b.w	80128ea <__retarget_lock_release_recursive>
 8012472:	bf00      	nop
 8012474:	20000901 	.word	0x20000901

08012478 <__sinit>:
 8012478:	b510      	push	{r4, lr}
 801247a:	4604      	mov	r4, r0
 801247c:	f7ff fff0 	bl	8012460 <__sfp_lock_acquire>
 8012480:	6a23      	ldr	r3, [r4, #32]
 8012482:	b11b      	cbz	r3, 801248c <__sinit+0x14>
 8012484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012488:	f7ff bff0 	b.w	801246c <__sfp_lock_release>
 801248c:	4b04      	ldr	r3, [pc, #16]	; (80124a0 <__sinit+0x28>)
 801248e:	6223      	str	r3, [r4, #32]
 8012490:	4b04      	ldr	r3, [pc, #16]	; (80124a4 <__sinit+0x2c>)
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d1f5      	bne.n	8012484 <__sinit+0xc>
 8012498:	f7ff ffc4 	bl	8012424 <global_stdio_init.part.0>
 801249c:	e7f2      	b.n	8012484 <__sinit+0xc>
 801249e:	bf00      	nop
 80124a0:	080123e5 	.word	0x080123e5
 80124a4:	200008f8 	.word	0x200008f8

080124a8 <_fwalk_sglue>:
 80124a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124ac:	4607      	mov	r7, r0
 80124ae:	4688      	mov	r8, r1
 80124b0:	4614      	mov	r4, r2
 80124b2:	2600      	movs	r6, #0
 80124b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80124b8:	f1b9 0901 	subs.w	r9, r9, #1
 80124bc:	d505      	bpl.n	80124ca <_fwalk_sglue+0x22>
 80124be:	6824      	ldr	r4, [r4, #0]
 80124c0:	2c00      	cmp	r4, #0
 80124c2:	d1f7      	bne.n	80124b4 <_fwalk_sglue+0xc>
 80124c4:	4630      	mov	r0, r6
 80124c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124ca:	89ab      	ldrh	r3, [r5, #12]
 80124cc:	2b01      	cmp	r3, #1
 80124ce:	d907      	bls.n	80124e0 <_fwalk_sglue+0x38>
 80124d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80124d4:	3301      	adds	r3, #1
 80124d6:	d003      	beq.n	80124e0 <_fwalk_sglue+0x38>
 80124d8:	4629      	mov	r1, r5
 80124da:	4638      	mov	r0, r7
 80124dc:	47c0      	blx	r8
 80124de:	4306      	orrs	r6, r0
 80124e0:	3568      	adds	r5, #104	; 0x68
 80124e2:	e7e9      	b.n	80124b8 <_fwalk_sglue+0x10>

080124e4 <iprintf>:
 80124e4:	b40f      	push	{r0, r1, r2, r3}
 80124e6:	b507      	push	{r0, r1, r2, lr}
 80124e8:	4906      	ldr	r1, [pc, #24]	; (8012504 <iprintf+0x20>)
 80124ea:	ab04      	add	r3, sp, #16
 80124ec:	6808      	ldr	r0, [r1, #0]
 80124ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80124f2:	6881      	ldr	r1, [r0, #8]
 80124f4:	9301      	str	r3, [sp, #4]
 80124f6:	f002 fe4f 	bl	8015198 <_vfiprintf_r>
 80124fa:	b003      	add	sp, #12
 80124fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8012500:	b004      	add	sp, #16
 8012502:	4770      	bx	lr
 8012504:	200000c8 	.word	0x200000c8

08012508 <putchar>:
 8012508:	4b02      	ldr	r3, [pc, #8]	; (8012514 <putchar+0xc>)
 801250a:	4601      	mov	r1, r0
 801250c:	6818      	ldr	r0, [r3, #0]
 801250e:	6882      	ldr	r2, [r0, #8]
 8012510:	f003 b86c 	b.w	80155ec <_putc_r>
 8012514:	200000c8 	.word	0x200000c8

08012518 <_puts_r>:
 8012518:	6a03      	ldr	r3, [r0, #32]
 801251a:	b570      	push	{r4, r5, r6, lr}
 801251c:	6884      	ldr	r4, [r0, #8]
 801251e:	4605      	mov	r5, r0
 8012520:	460e      	mov	r6, r1
 8012522:	b90b      	cbnz	r3, 8012528 <_puts_r+0x10>
 8012524:	f7ff ffa8 	bl	8012478 <__sinit>
 8012528:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801252a:	07db      	lsls	r3, r3, #31
 801252c:	d405      	bmi.n	801253a <_puts_r+0x22>
 801252e:	89a3      	ldrh	r3, [r4, #12]
 8012530:	0598      	lsls	r0, r3, #22
 8012532:	d402      	bmi.n	801253a <_puts_r+0x22>
 8012534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012536:	f000 f9d7 	bl	80128e8 <__retarget_lock_acquire_recursive>
 801253a:	89a3      	ldrh	r3, [r4, #12]
 801253c:	0719      	lsls	r1, r3, #28
 801253e:	d513      	bpl.n	8012568 <_puts_r+0x50>
 8012540:	6923      	ldr	r3, [r4, #16]
 8012542:	b18b      	cbz	r3, 8012568 <_puts_r+0x50>
 8012544:	3e01      	subs	r6, #1
 8012546:	68a3      	ldr	r3, [r4, #8]
 8012548:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801254c:	3b01      	subs	r3, #1
 801254e:	60a3      	str	r3, [r4, #8]
 8012550:	b9e9      	cbnz	r1, 801258e <_puts_r+0x76>
 8012552:	2b00      	cmp	r3, #0
 8012554:	da2e      	bge.n	80125b4 <_puts_r+0x9c>
 8012556:	4622      	mov	r2, r4
 8012558:	210a      	movs	r1, #10
 801255a:	4628      	mov	r0, r5
 801255c:	f000 f89b 	bl	8012696 <__swbuf_r>
 8012560:	3001      	adds	r0, #1
 8012562:	d007      	beq.n	8012574 <_puts_r+0x5c>
 8012564:	250a      	movs	r5, #10
 8012566:	e007      	b.n	8012578 <_puts_r+0x60>
 8012568:	4621      	mov	r1, r4
 801256a:	4628      	mov	r0, r5
 801256c:	f000 f8d0 	bl	8012710 <__swsetup_r>
 8012570:	2800      	cmp	r0, #0
 8012572:	d0e7      	beq.n	8012544 <_puts_r+0x2c>
 8012574:	f04f 35ff 	mov.w	r5, #4294967295
 8012578:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801257a:	07da      	lsls	r2, r3, #31
 801257c:	d405      	bmi.n	801258a <_puts_r+0x72>
 801257e:	89a3      	ldrh	r3, [r4, #12]
 8012580:	059b      	lsls	r3, r3, #22
 8012582:	d402      	bmi.n	801258a <_puts_r+0x72>
 8012584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012586:	f000 f9b0 	bl	80128ea <__retarget_lock_release_recursive>
 801258a:	4628      	mov	r0, r5
 801258c:	bd70      	pop	{r4, r5, r6, pc}
 801258e:	2b00      	cmp	r3, #0
 8012590:	da04      	bge.n	801259c <_puts_r+0x84>
 8012592:	69a2      	ldr	r2, [r4, #24]
 8012594:	429a      	cmp	r2, r3
 8012596:	dc06      	bgt.n	80125a6 <_puts_r+0x8e>
 8012598:	290a      	cmp	r1, #10
 801259a:	d004      	beq.n	80125a6 <_puts_r+0x8e>
 801259c:	6823      	ldr	r3, [r4, #0]
 801259e:	1c5a      	adds	r2, r3, #1
 80125a0:	6022      	str	r2, [r4, #0]
 80125a2:	7019      	strb	r1, [r3, #0]
 80125a4:	e7cf      	b.n	8012546 <_puts_r+0x2e>
 80125a6:	4622      	mov	r2, r4
 80125a8:	4628      	mov	r0, r5
 80125aa:	f000 f874 	bl	8012696 <__swbuf_r>
 80125ae:	3001      	adds	r0, #1
 80125b0:	d1c9      	bne.n	8012546 <_puts_r+0x2e>
 80125b2:	e7df      	b.n	8012574 <_puts_r+0x5c>
 80125b4:	6823      	ldr	r3, [r4, #0]
 80125b6:	250a      	movs	r5, #10
 80125b8:	1c5a      	adds	r2, r3, #1
 80125ba:	6022      	str	r2, [r4, #0]
 80125bc:	701d      	strb	r5, [r3, #0]
 80125be:	e7db      	b.n	8012578 <_puts_r+0x60>

080125c0 <puts>:
 80125c0:	4b02      	ldr	r3, [pc, #8]	; (80125cc <puts+0xc>)
 80125c2:	4601      	mov	r1, r0
 80125c4:	6818      	ldr	r0, [r3, #0]
 80125c6:	f7ff bfa7 	b.w	8012518 <_puts_r>
 80125ca:	bf00      	nop
 80125cc:	200000c8 	.word	0x200000c8

080125d0 <siprintf>:
 80125d0:	b40e      	push	{r1, r2, r3}
 80125d2:	b500      	push	{lr}
 80125d4:	b09c      	sub	sp, #112	; 0x70
 80125d6:	ab1d      	add	r3, sp, #116	; 0x74
 80125d8:	9002      	str	r0, [sp, #8]
 80125da:	9006      	str	r0, [sp, #24]
 80125dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80125e0:	4809      	ldr	r0, [pc, #36]	; (8012608 <siprintf+0x38>)
 80125e2:	9107      	str	r1, [sp, #28]
 80125e4:	9104      	str	r1, [sp, #16]
 80125e6:	4909      	ldr	r1, [pc, #36]	; (801260c <siprintf+0x3c>)
 80125e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80125ec:	9105      	str	r1, [sp, #20]
 80125ee:	6800      	ldr	r0, [r0, #0]
 80125f0:	9301      	str	r3, [sp, #4]
 80125f2:	a902      	add	r1, sp, #8
 80125f4:	f002 fca8 	bl	8014f48 <_svfiprintf_r>
 80125f8:	9b02      	ldr	r3, [sp, #8]
 80125fa:	2200      	movs	r2, #0
 80125fc:	701a      	strb	r2, [r3, #0]
 80125fe:	b01c      	add	sp, #112	; 0x70
 8012600:	f85d eb04 	ldr.w	lr, [sp], #4
 8012604:	b003      	add	sp, #12
 8012606:	4770      	bx	lr
 8012608:	200000c8 	.word	0x200000c8
 801260c:	ffff0208 	.word	0xffff0208

08012610 <__sread>:
 8012610:	b510      	push	{r4, lr}
 8012612:	460c      	mov	r4, r1
 8012614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012618:	f000 f918 	bl	801284c <_read_r>
 801261c:	2800      	cmp	r0, #0
 801261e:	bfab      	itete	ge
 8012620:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012622:	89a3      	ldrhlt	r3, [r4, #12]
 8012624:	181b      	addge	r3, r3, r0
 8012626:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801262a:	bfac      	ite	ge
 801262c:	6563      	strge	r3, [r4, #84]	; 0x54
 801262e:	81a3      	strhlt	r3, [r4, #12]
 8012630:	bd10      	pop	{r4, pc}

08012632 <__swrite>:
 8012632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012636:	461f      	mov	r7, r3
 8012638:	898b      	ldrh	r3, [r1, #12]
 801263a:	05db      	lsls	r3, r3, #23
 801263c:	4605      	mov	r5, r0
 801263e:	460c      	mov	r4, r1
 8012640:	4616      	mov	r6, r2
 8012642:	d505      	bpl.n	8012650 <__swrite+0x1e>
 8012644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012648:	2302      	movs	r3, #2
 801264a:	2200      	movs	r2, #0
 801264c:	f000 f8ec 	bl	8012828 <_lseek_r>
 8012650:	89a3      	ldrh	r3, [r4, #12]
 8012652:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012656:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801265a:	81a3      	strh	r3, [r4, #12]
 801265c:	4632      	mov	r2, r6
 801265e:	463b      	mov	r3, r7
 8012660:	4628      	mov	r0, r5
 8012662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012666:	f000 b903 	b.w	8012870 <_write_r>

0801266a <__sseek>:
 801266a:	b510      	push	{r4, lr}
 801266c:	460c      	mov	r4, r1
 801266e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012672:	f000 f8d9 	bl	8012828 <_lseek_r>
 8012676:	1c43      	adds	r3, r0, #1
 8012678:	89a3      	ldrh	r3, [r4, #12]
 801267a:	bf15      	itete	ne
 801267c:	6560      	strne	r0, [r4, #84]	; 0x54
 801267e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012682:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012686:	81a3      	strheq	r3, [r4, #12]
 8012688:	bf18      	it	ne
 801268a:	81a3      	strhne	r3, [r4, #12]
 801268c:	bd10      	pop	{r4, pc}

0801268e <__sclose>:
 801268e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012692:	f000 b8b9 	b.w	8012808 <_close_r>

08012696 <__swbuf_r>:
 8012696:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012698:	460e      	mov	r6, r1
 801269a:	4614      	mov	r4, r2
 801269c:	4605      	mov	r5, r0
 801269e:	b118      	cbz	r0, 80126a8 <__swbuf_r+0x12>
 80126a0:	6a03      	ldr	r3, [r0, #32]
 80126a2:	b90b      	cbnz	r3, 80126a8 <__swbuf_r+0x12>
 80126a4:	f7ff fee8 	bl	8012478 <__sinit>
 80126a8:	69a3      	ldr	r3, [r4, #24]
 80126aa:	60a3      	str	r3, [r4, #8]
 80126ac:	89a3      	ldrh	r3, [r4, #12]
 80126ae:	071a      	lsls	r2, r3, #28
 80126b0:	d525      	bpl.n	80126fe <__swbuf_r+0x68>
 80126b2:	6923      	ldr	r3, [r4, #16]
 80126b4:	b31b      	cbz	r3, 80126fe <__swbuf_r+0x68>
 80126b6:	6823      	ldr	r3, [r4, #0]
 80126b8:	6922      	ldr	r2, [r4, #16]
 80126ba:	1a98      	subs	r0, r3, r2
 80126bc:	6963      	ldr	r3, [r4, #20]
 80126be:	b2f6      	uxtb	r6, r6
 80126c0:	4283      	cmp	r3, r0
 80126c2:	4637      	mov	r7, r6
 80126c4:	dc04      	bgt.n	80126d0 <__swbuf_r+0x3a>
 80126c6:	4621      	mov	r1, r4
 80126c8:	4628      	mov	r0, r5
 80126ca:	f002 ff05 	bl	80154d8 <_fflush_r>
 80126ce:	b9e0      	cbnz	r0, 801270a <__swbuf_r+0x74>
 80126d0:	68a3      	ldr	r3, [r4, #8]
 80126d2:	3b01      	subs	r3, #1
 80126d4:	60a3      	str	r3, [r4, #8]
 80126d6:	6823      	ldr	r3, [r4, #0]
 80126d8:	1c5a      	adds	r2, r3, #1
 80126da:	6022      	str	r2, [r4, #0]
 80126dc:	701e      	strb	r6, [r3, #0]
 80126de:	6962      	ldr	r2, [r4, #20]
 80126e0:	1c43      	adds	r3, r0, #1
 80126e2:	429a      	cmp	r2, r3
 80126e4:	d004      	beq.n	80126f0 <__swbuf_r+0x5a>
 80126e6:	89a3      	ldrh	r3, [r4, #12]
 80126e8:	07db      	lsls	r3, r3, #31
 80126ea:	d506      	bpl.n	80126fa <__swbuf_r+0x64>
 80126ec:	2e0a      	cmp	r6, #10
 80126ee:	d104      	bne.n	80126fa <__swbuf_r+0x64>
 80126f0:	4621      	mov	r1, r4
 80126f2:	4628      	mov	r0, r5
 80126f4:	f002 fef0 	bl	80154d8 <_fflush_r>
 80126f8:	b938      	cbnz	r0, 801270a <__swbuf_r+0x74>
 80126fa:	4638      	mov	r0, r7
 80126fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80126fe:	4621      	mov	r1, r4
 8012700:	4628      	mov	r0, r5
 8012702:	f000 f805 	bl	8012710 <__swsetup_r>
 8012706:	2800      	cmp	r0, #0
 8012708:	d0d5      	beq.n	80126b6 <__swbuf_r+0x20>
 801270a:	f04f 37ff 	mov.w	r7, #4294967295
 801270e:	e7f4      	b.n	80126fa <__swbuf_r+0x64>

08012710 <__swsetup_r>:
 8012710:	b538      	push	{r3, r4, r5, lr}
 8012712:	4b2a      	ldr	r3, [pc, #168]	; (80127bc <__swsetup_r+0xac>)
 8012714:	4605      	mov	r5, r0
 8012716:	6818      	ldr	r0, [r3, #0]
 8012718:	460c      	mov	r4, r1
 801271a:	b118      	cbz	r0, 8012724 <__swsetup_r+0x14>
 801271c:	6a03      	ldr	r3, [r0, #32]
 801271e:	b90b      	cbnz	r3, 8012724 <__swsetup_r+0x14>
 8012720:	f7ff feaa 	bl	8012478 <__sinit>
 8012724:	89a3      	ldrh	r3, [r4, #12]
 8012726:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801272a:	0718      	lsls	r0, r3, #28
 801272c:	d422      	bmi.n	8012774 <__swsetup_r+0x64>
 801272e:	06d9      	lsls	r1, r3, #27
 8012730:	d407      	bmi.n	8012742 <__swsetup_r+0x32>
 8012732:	2309      	movs	r3, #9
 8012734:	602b      	str	r3, [r5, #0]
 8012736:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801273a:	81a3      	strh	r3, [r4, #12]
 801273c:	f04f 30ff 	mov.w	r0, #4294967295
 8012740:	e034      	b.n	80127ac <__swsetup_r+0x9c>
 8012742:	0758      	lsls	r0, r3, #29
 8012744:	d512      	bpl.n	801276c <__swsetup_r+0x5c>
 8012746:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012748:	b141      	cbz	r1, 801275c <__swsetup_r+0x4c>
 801274a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801274e:	4299      	cmp	r1, r3
 8012750:	d002      	beq.n	8012758 <__swsetup_r+0x48>
 8012752:	4628      	mov	r0, r5
 8012754:	f000 ff5a 	bl	801360c <_free_r>
 8012758:	2300      	movs	r3, #0
 801275a:	6363      	str	r3, [r4, #52]	; 0x34
 801275c:	89a3      	ldrh	r3, [r4, #12]
 801275e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012762:	81a3      	strh	r3, [r4, #12]
 8012764:	2300      	movs	r3, #0
 8012766:	6063      	str	r3, [r4, #4]
 8012768:	6923      	ldr	r3, [r4, #16]
 801276a:	6023      	str	r3, [r4, #0]
 801276c:	89a3      	ldrh	r3, [r4, #12]
 801276e:	f043 0308 	orr.w	r3, r3, #8
 8012772:	81a3      	strh	r3, [r4, #12]
 8012774:	6923      	ldr	r3, [r4, #16]
 8012776:	b94b      	cbnz	r3, 801278c <__swsetup_r+0x7c>
 8012778:	89a3      	ldrh	r3, [r4, #12]
 801277a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801277e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012782:	d003      	beq.n	801278c <__swsetup_r+0x7c>
 8012784:	4621      	mov	r1, r4
 8012786:	4628      	mov	r0, r5
 8012788:	f002 fef4 	bl	8015574 <__smakebuf_r>
 801278c:	89a0      	ldrh	r0, [r4, #12]
 801278e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012792:	f010 0301 	ands.w	r3, r0, #1
 8012796:	d00a      	beq.n	80127ae <__swsetup_r+0x9e>
 8012798:	2300      	movs	r3, #0
 801279a:	60a3      	str	r3, [r4, #8]
 801279c:	6963      	ldr	r3, [r4, #20]
 801279e:	425b      	negs	r3, r3
 80127a0:	61a3      	str	r3, [r4, #24]
 80127a2:	6923      	ldr	r3, [r4, #16]
 80127a4:	b943      	cbnz	r3, 80127b8 <__swsetup_r+0xa8>
 80127a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80127aa:	d1c4      	bne.n	8012736 <__swsetup_r+0x26>
 80127ac:	bd38      	pop	{r3, r4, r5, pc}
 80127ae:	0781      	lsls	r1, r0, #30
 80127b0:	bf58      	it	pl
 80127b2:	6963      	ldrpl	r3, [r4, #20]
 80127b4:	60a3      	str	r3, [r4, #8]
 80127b6:	e7f4      	b.n	80127a2 <__swsetup_r+0x92>
 80127b8:	2000      	movs	r0, #0
 80127ba:	e7f7      	b.n	80127ac <__swsetup_r+0x9c>
 80127bc:	200000c8 	.word	0x200000c8

080127c0 <memset>:
 80127c0:	4402      	add	r2, r0
 80127c2:	4603      	mov	r3, r0
 80127c4:	4293      	cmp	r3, r2
 80127c6:	d100      	bne.n	80127ca <memset+0xa>
 80127c8:	4770      	bx	lr
 80127ca:	f803 1b01 	strb.w	r1, [r3], #1
 80127ce:	e7f9      	b.n	80127c4 <memset+0x4>

080127d0 <strrchr>:
 80127d0:	b513      	push	{r0, r1, r4, lr}
 80127d2:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 80127d6:	4603      	mov	r3, r0
 80127d8:	d110      	bne.n	80127fc <strrchr+0x2c>
 80127da:	b002      	add	sp, #8
 80127dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80127e0:	f002 bf52 	b.w	8015688 <strchr>
 80127e4:	1c43      	adds	r3, r0, #1
 80127e6:	4604      	mov	r4, r0
 80127e8:	4618      	mov	r0, r3
 80127ea:	9101      	str	r1, [sp, #4]
 80127ec:	f002 ff4c 	bl	8015688 <strchr>
 80127f0:	9901      	ldr	r1, [sp, #4]
 80127f2:	2800      	cmp	r0, #0
 80127f4:	d1f6      	bne.n	80127e4 <strrchr+0x14>
 80127f6:	4620      	mov	r0, r4
 80127f8:	b002      	add	sp, #8
 80127fa:	bd10      	pop	{r4, pc}
 80127fc:	2400      	movs	r4, #0
 80127fe:	e7f3      	b.n	80127e8 <strrchr+0x18>

08012800 <_localeconv_r>:
 8012800:	4800      	ldr	r0, [pc, #0]	; (8012804 <_localeconv_r+0x4>)
 8012802:	4770      	bx	lr
 8012804:	200001bc 	.word	0x200001bc

08012808 <_close_r>:
 8012808:	b538      	push	{r3, r4, r5, lr}
 801280a:	4d06      	ldr	r5, [pc, #24]	; (8012824 <_close_r+0x1c>)
 801280c:	2300      	movs	r3, #0
 801280e:	4604      	mov	r4, r0
 8012810:	4608      	mov	r0, r1
 8012812:	602b      	str	r3, [r5, #0]
 8012814:	f7f1 ffdd 	bl	80047d2 <_close>
 8012818:	1c43      	adds	r3, r0, #1
 801281a:	d102      	bne.n	8012822 <_close_r+0x1a>
 801281c:	682b      	ldr	r3, [r5, #0]
 801281e:	b103      	cbz	r3, 8012822 <_close_r+0x1a>
 8012820:	6023      	str	r3, [r4, #0]
 8012822:	bd38      	pop	{r3, r4, r5, pc}
 8012824:	200008fc 	.word	0x200008fc

08012828 <_lseek_r>:
 8012828:	b538      	push	{r3, r4, r5, lr}
 801282a:	4d07      	ldr	r5, [pc, #28]	; (8012848 <_lseek_r+0x20>)
 801282c:	4604      	mov	r4, r0
 801282e:	4608      	mov	r0, r1
 8012830:	4611      	mov	r1, r2
 8012832:	2200      	movs	r2, #0
 8012834:	602a      	str	r2, [r5, #0]
 8012836:	461a      	mov	r2, r3
 8012838:	f7f1 fff2 	bl	8004820 <_lseek>
 801283c:	1c43      	adds	r3, r0, #1
 801283e:	d102      	bne.n	8012846 <_lseek_r+0x1e>
 8012840:	682b      	ldr	r3, [r5, #0]
 8012842:	b103      	cbz	r3, 8012846 <_lseek_r+0x1e>
 8012844:	6023      	str	r3, [r4, #0]
 8012846:	bd38      	pop	{r3, r4, r5, pc}
 8012848:	200008fc 	.word	0x200008fc

0801284c <_read_r>:
 801284c:	b538      	push	{r3, r4, r5, lr}
 801284e:	4d07      	ldr	r5, [pc, #28]	; (801286c <_read_r+0x20>)
 8012850:	4604      	mov	r4, r0
 8012852:	4608      	mov	r0, r1
 8012854:	4611      	mov	r1, r2
 8012856:	2200      	movs	r2, #0
 8012858:	602a      	str	r2, [r5, #0]
 801285a:	461a      	mov	r2, r3
 801285c:	f7f1 ff9c 	bl	8004798 <_read>
 8012860:	1c43      	adds	r3, r0, #1
 8012862:	d102      	bne.n	801286a <_read_r+0x1e>
 8012864:	682b      	ldr	r3, [r5, #0]
 8012866:	b103      	cbz	r3, 801286a <_read_r+0x1e>
 8012868:	6023      	str	r3, [r4, #0]
 801286a:	bd38      	pop	{r3, r4, r5, pc}
 801286c:	200008fc 	.word	0x200008fc

08012870 <_write_r>:
 8012870:	b538      	push	{r3, r4, r5, lr}
 8012872:	4d07      	ldr	r5, [pc, #28]	; (8012890 <_write_r+0x20>)
 8012874:	4604      	mov	r4, r0
 8012876:	4608      	mov	r0, r1
 8012878:	4611      	mov	r1, r2
 801287a:	2200      	movs	r2, #0
 801287c:	602a      	str	r2, [r5, #0]
 801287e:	461a      	mov	r2, r3
 8012880:	f7fa fd86 	bl	800d390 <_write>
 8012884:	1c43      	adds	r3, r0, #1
 8012886:	d102      	bne.n	801288e <_write_r+0x1e>
 8012888:	682b      	ldr	r3, [r5, #0]
 801288a:	b103      	cbz	r3, 801288e <_write_r+0x1e>
 801288c:	6023      	str	r3, [r4, #0]
 801288e:	bd38      	pop	{r3, r4, r5, pc}
 8012890:	200008fc 	.word	0x200008fc

08012894 <__errno>:
 8012894:	4b01      	ldr	r3, [pc, #4]	; (801289c <__errno+0x8>)
 8012896:	6818      	ldr	r0, [r3, #0]
 8012898:	4770      	bx	lr
 801289a:	bf00      	nop
 801289c:	200000c8 	.word	0x200000c8

080128a0 <__libc_init_array>:
 80128a0:	b570      	push	{r4, r5, r6, lr}
 80128a2:	4d0d      	ldr	r5, [pc, #52]	; (80128d8 <__libc_init_array+0x38>)
 80128a4:	4c0d      	ldr	r4, [pc, #52]	; (80128dc <__libc_init_array+0x3c>)
 80128a6:	1b64      	subs	r4, r4, r5
 80128a8:	10a4      	asrs	r4, r4, #2
 80128aa:	2600      	movs	r6, #0
 80128ac:	42a6      	cmp	r6, r4
 80128ae:	d109      	bne.n	80128c4 <__libc_init_array+0x24>
 80128b0:	4d0b      	ldr	r5, [pc, #44]	; (80128e0 <__libc_init_array+0x40>)
 80128b2:	4c0c      	ldr	r4, [pc, #48]	; (80128e4 <__libc_init_array+0x44>)
 80128b4:	f003 fc8a 	bl	80161cc <_init>
 80128b8:	1b64      	subs	r4, r4, r5
 80128ba:	10a4      	asrs	r4, r4, #2
 80128bc:	2600      	movs	r6, #0
 80128be:	42a6      	cmp	r6, r4
 80128c0:	d105      	bne.n	80128ce <__libc_init_array+0x2e>
 80128c2:	bd70      	pop	{r4, r5, r6, pc}
 80128c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80128c8:	4798      	blx	r3
 80128ca:	3601      	adds	r6, #1
 80128cc:	e7ee      	b.n	80128ac <__libc_init_array+0xc>
 80128ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80128d2:	4798      	blx	r3
 80128d4:	3601      	adds	r6, #1
 80128d6:	e7f2      	b.n	80128be <__libc_init_array+0x1e>
 80128d8:	08018848 	.word	0x08018848
 80128dc:	08018848 	.word	0x08018848
 80128e0:	08018848 	.word	0x08018848
 80128e4:	0801884c 	.word	0x0801884c

080128e8 <__retarget_lock_acquire_recursive>:
 80128e8:	4770      	bx	lr

080128ea <__retarget_lock_release_recursive>:
 80128ea:	4770      	bx	lr

080128ec <memcpy>:
 80128ec:	440a      	add	r2, r1
 80128ee:	4291      	cmp	r1, r2
 80128f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80128f4:	d100      	bne.n	80128f8 <memcpy+0xc>
 80128f6:	4770      	bx	lr
 80128f8:	b510      	push	{r4, lr}
 80128fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80128fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012902:	4291      	cmp	r1, r2
 8012904:	d1f9      	bne.n	80128fa <memcpy+0xe>
 8012906:	bd10      	pop	{r4, pc}

08012908 <nanf>:
 8012908:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012910 <nanf+0x8>
 801290c:	4770      	bx	lr
 801290e:	bf00      	nop
 8012910:	7fc00000 	.word	0x7fc00000

08012914 <quorem>:
 8012914:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012918:	6903      	ldr	r3, [r0, #16]
 801291a:	690c      	ldr	r4, [r1, #16]
 801291c:	42a3      	cmp	r3, r4
 801291e:	4607      	mov	r7, r0
 8012920:	db7e      	blt.n	8012a20 <quorem+0x10c>
 8012922:	3c01      	subs	r4, #1
 8012924:	f101 0814 	add.w	r8, r1, #20
 8012928:	f100 0514 	add.w	r5, r0, #20
 801292c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012930:	9301      	str	r3, [sp, #4]
 8012932:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012936:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801293a:	3301      	adds	r3, #1
 801293c:	429a      	cmp	r2, r3
 801293e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012942:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012946:	fbb2 f6f3 	udiv	r6, r2, r3
 801294a:	d331      	bcc.n	80129b0 <quorem+0x9c>
 801294c:	f04f 0e00 	mov.w	lr, #0
 8012950:	4640      	mov	r0, r8
 8012952:	46ac      	mov	ip, r5
 8012954:	46f2      	mov	sl, lr
 8012956:	f850 2b04 	ldr.w	r2, [r0], #4
 801295a:	b293      	uxth	r3, r2
 801295c:	fb06 e303 	mla	r3, r6, r3, lr
 8012960:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012964:	0c1a      	lsrs	r2, r3, #16
 8012966:	b29b      	uxth	r3, r3
 8012968:	ebaa 0303 	sub.w	r3, sl, r3
 801296c:	f8dc a000 	ldr.w	sl, [ip]
 8012970:	fa13 f38a 	uxtah	r3, r3, sl
 8012974:	fb06 220e 	mla	r2, r6, lr, r2
 8012978:	9300      	str	r3, [sp, #0]
 801297a:	9b00      	ldr	r3, [sp, #0]
 801297c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012980:	b292      	uxth	r2, r2
 8012982:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012986:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801298a:	f8bd 3000 	ldrh.w	r3, [sp]
 801298e:	4581      	cmp	r9, r0
 8012990:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012994:	f84c 3b04 	str.w	r3, [ip], #4
 8012998:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801299c:	d2db      	bcs.n	8012956 <quorem+0x42>
 801299e:	f855 300b 	ldr.w	r3, [r5, fp]
 80129a2:	b92b      	cbnz	r3, 80129b0 <quorem+0x9c>
 80129a4:	9b01      	ldr	r3, [sp, #4]
 80129a6:	3b04      	subs	r3, #4
 80129a8:	429d      	cmp	r5, r3
 80129aa:	461a      	mov	r2, r3
 80129ac:	d32c      	bcc.n	8012a08 <quorem+0xf4>
 80129ae:	613c      	str	r4, [r7, #16]
 80129b0:	4638      	mov	r0, r7
 80129b2:	f001 f9f1 	bl	8013d98 <__mcmp>
 80129b6:	2800      	cmp	r0, #0
 80129b8:	db22      	blt.n	8012a00 <quorem+0xec>
 80129ba:	3601      	adds	r6, #1
 80129bc:	4629      	mov	r1, r5
 80129be:	2000      	movs	r0, #0
 80129c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80129c4:	f8d1 c000 	ldr.w	ip, [r1]
 80129c8:	b293      	uxth	r3, r2
 80129ca:	1ac3      	subs	r3, r0, r3
 80129cc:	0c12      	lsrs	r2, r2, #16
 80129ce:	fa13 f38c 	uxtah	r3, r3, ip
 80129d2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80129d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80129da:	b29b      	uxth	r3, r3
 80129dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80129e0:	45c1      	cmp	r9, r8
 80129e2:	f841 3b04 	str.w	r3, [r1], #4
 80129e6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80129ea:	d2e9      	bcs.n	80129c0 <quorem+0xac>
 80129ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80129f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80129f4:	b922      	cbnz	r2, 8012a00 <quorem+0xec>
 80129f6:	3b04      	subs	r3, #4
 80129f8:	429d      	cmp	r5, r3
 80129fa:	461a      	mov	r2, r3
 80129fc:	d30a      	bcc.n	8012a14 <quorem+0x100>
 80129fe:	613c      	str	r4, [r7, #16]
 8012a00:	4630      	mov	r0, r6
 8012a02:	b003      	add	sp, #12
 8012a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a08:	6812      	ldr	r2, [r2, #0]
 8012a0a:	3b04      	subs	r3, #4
 8012a0c:	2a00      	cmp	r2, #0
 8012a0e:	d1ce      	bne.n	80129ae <quorem+0x9a>
 8012a10:	3c01      	subs	r4, #1
 8012a12:	e7c9      	b.n	80129a8 <quorem+0x94>
 8012a14:	6812      	ldr	r2, [r2, #0]
 8012a16:	3b04      	subs	r3, #4
 8012a18:	2a00      	cmp	r2, #0
 8012a1a:	d1f0      	bne.n	80129fe <quorem+0xea>
 8012a1c:	3c01      	subs	r4, #1
 8012a1e:	e7eb      	b.n	80129f8 <quorem+0xe4>
 8012a20:	2000      	movs	r0, #0
 8012a22:	e7ee      	b.n	8012a02 <quorem+0xee>
 8012a24:	0000      	movs	r0, r0
	...

08012a28 <_dtoa_r>:
 8012a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a2c:	ed2d 8b04 	vpush	{d8-d9}
 8012a30:	69c5      	ldr	r5, [r0, #28]
 8012a32:	b093      	sub	sp, #76	; 0x4c
 8012a34:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012a38:	ec57 6b10 	vmov	r6, r7, d0
 8012a3c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012a40:	9107      	str	r1, [sp, #28]
 8012a42:	4604      	mov	r4, r0
 8012a44:	920a      	str	r2, [sp, #40]	; 0x28
 8012a46:	930d      	str	r3, [sp, #52]	; 0x34
 8012a48:	b975      	cbnz	r5, 8012a68 <_dtoa_r+0x40>
 8012a4a:	2010      	movs	r0, #16
 8012a4c:	f000 fe2a 	bl	80136a4 <malloc>
 8012a50:	4602      	mov	r2, r0
 8012a52:	61e0      	str	r0, [r4, #28]
 8012a54:	b920      	cbnz	r0, 8012a60 <_dtoa_r+0x38>
 8012a56:	4bae      	ldr	r3, [pc, #696]	; (8012d10 <_dtoa_r+0x2e8>)
 8012a58:	21ef      	movs	r1, #239	; 0xef
 8012a5a:	48ae      	ldr	r0, [pc, #696]	; (8012d14 <_dtoa_r+0x2ec>)
 8012a5c:	f002 fe70 	bl	8015740 <__assert_func>
 8012a60:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012a64:	6005      	str	r5, [r0, #0]
 8012a66:	60c5      	str	r5, [r0, #12]
 8012a68:	69e3      	ldr	r3, [r4, #28]
 8012a6a:	6819      	ldr	r1, [r3, #0]
 8012a6c:	b151      	cbz	r1, 8012a84 <_dtoa_r+0x5c>
 8012a6e:	685a      	ldr	r2, [r3, #4]
 8012a70:	604a      	str	r2, [r1, #4]
 8012a72:	2301      	movs	r3, #1
 8012a74:	4093      	lsls	r3, r2
 8012a76:	608b      	str	r3, [r1, #8]
 8012a78:	4620      	mov	r0, r4
 8012a7a:	f000 ff07 	bl	801388c <_Bfree>
 8012a7e:	69e3      	ldr	r3, [r4, #28]
 8012a80:	2200      	movs	r2, #0
 8012a82:	601a      	str	r2, [r3, #0]
 8012a84:	1e3b      	subs	r3, r7, #0
 8012a86:	bfbb      	ittet	lt
 8012a88:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012a8c:	9303      	strlt	r3, [sp, #12]
 8012a8e:	2300      	movge	r3, #0
 8012a90:	2201      	movlt	r2, #1
 8012a92:	bfac      	ite	ge
 8012a94:	f8c8 3000 	strge.w	r3, [r8]
 8012a98:	f8c8 2000 	strlt.w	r2, [r8]
 8012a9c:	4b9e      	ldr	r3, [pc, #632]	; (8012d18 <_dtoa_r+0x2f0>)
 8012a9e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8012aa2:	ea33 0308 	bics.w	r3, r3, r8
 8012aa6:	d11b      	bne.n	8012ae0 <_dtoa_r+0xb8>
 8012aa8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012aaa:	f242 730f 	movw	r3, #9999	; 0x270f
 8012aae:	6013      	str	r3, [r2, #0]
 8012ab0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8012ab4:	4333      	orrs	r3, r6
 8012ab6:	f000 8593 	beq.w	80135e0 <_dtoa_r+0xbb8>
 8012aba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012abc:	b963      	cbnz	r3, 8012ad8 <_dtoa_r+0xb0>
 8012abe:	4b97      	ldr	r3, [pc, #604]	; (8012d1c <_dtoa_r+0x2f4>)
 8012ac0:	e027      	b.n	8012b12 <_dtoa_r+0xea>
 8012ac2:	4b97      	ldr	r3, [pc, #604]	; (8012d20 <_dtoa_r+0x2f8>)
 8012ac4:	9300      	str	r3, [sp, #0]
 8012ac6:	3308      	adds	r3, #8
 8012ac8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012aca:	6013      	str	r3, [r2, #0]
 8012acc:	9800      	ldr	r0, [sp, #0]
 8012ace:	b013      	add	sp, #76	; 0x4c
 8012ad0:	ecbd 8b04 	vpop	{d8-d9}
 8012ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ad8:	4b90      	ldr	r3, [pc, #576]	; (8012d1c <_dtoa_r+0x2f4>)
 8012ada:	9300      	str	r3, [sp, #0]
 8012adc:	3303      	adds	r3, #3
 8012ade:	e7f3      	b.n	8012ac8 <_dtoa_r+0xa0>
 8012ae0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012ae4:	2200      	movs	r2, #0
 8012ae6:	ec51 0b17 	vmov	r0, r1, d7
 8012aea:	eeb0 8a47 	vmov.f32	s16, s14
 8012aee:	eef0 8a67 	vmov.f32	s17, s15
 8012af2:	2300      	movs	r3, #0
 8012af4:	f7ed ffc0 	bl	8000a78 <__aeabi_dcmpeq>
 8012af8:	4681      	mov	r9, r0
 8012afa:	b160      	cbz	r0, 8012b16 <_dtoa_r+0xee>
 8012afc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012afe:	2301      	movs	r3, #1
 8012b00:	6013      	str	r3, [r2, #0]
 8012b02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	f000 8568 	beq.w	80135da <_dtoa_r+0xbb2>
 8012b0a:	4b86      	ldr	r3, [pc, #536]	; (8012d24 <_dtoa_r+0x2fc>)
 8012b0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012b0e:	6013      	str	r3, [r2, #0]
 8012b10:	3b01      	subs	r3, #1
 8012b12:	9300      	str	r3, [sp, #0]
 8012b14:	e7da      	b.n	8012acc <_dtoa_r+0xa4>
 8012b16:	aa10      	add	r2, sp, #64	; 0x40
 8012b18:	a911      	add	r1, sp, #68	; 0x44
 8012b1a:	4620      	mov	r0, r4
 8012b1c:	eeb0 0a48 	vmov.f32	s0, s16
 8012b20:	eef0 0a68 	vmov.f32	s1, s17
 8012b24:	f001 fa4e 	bl	8013fc4 <__d2b>
 8012b28:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8012b2c:	4682      	mov	sl, r0
 8012b2e:	2d00      	cmp	r5, #0
 8012b30:	d07f      	beq.n	8012c32 <_dtoa_r+0x20a>
 8012b32:	ee18 3a90 	vmov	r3, s17
 8012b36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012b3a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8012b3e:	ec51 0b18 	vmov	r0, r1, d8
 8012b42:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012b46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012b4a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8012b4e:	4619      	mov	r1, r3
 8012b50:	2200      	movs	r2, #0
 8012b52:	4b75      	ldr	r3, [pc, #468]	; (8012d28 <_dtoa_r+0x300>)
 8012b54:	f7ed fb70 	bl	8000238 <__aeabi_dsub>
 8012b58:	a367      	add	r3, pc, #412	; (adr r3, 8012cf8 <_dtoa_r+0x2d0>)
 8012b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b5e:	f7ed fd23 	bl	80005a8 <__aeabi_dmul>
 8012b62:	a367      	add	r3, pc, #412	; (adr r3, 8012d00 <_dtoa_r+0x2d8>)
 8012b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b68:	f7ed fb68 	bl	800023c <__adddf3>
 8012b6c:	4606      	mov	r6, r0
 8012b6e:	4628      	mov	r0, r5
 8012b70:	460f      	mov	r7, r1
 8012b72:	f7ed fcaf 	bl	80004d4 <__aeabi_i2d>
 8012b76:	a364      	add	r3, pc, #400	; (adr r3, 8012d08 <_dtoa_r+0x2e0>)
 8012b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b7c:	f7ed fd14 	bl	80005a8 <__aeabi_dmul>
 8012b80:	4602      	mov	r2, r0
 8012b82:	460b      	mov	r3, r1
 8012b84:	4630      	mov	r0, r6
 8012b86:	4639      	mov	r1, r7
 8012b88:	f7ed fb58 	bl	800023c <__adddf3>
 8012b8c:	4606      	mov	r6, r0
 8012b8e:	460f      	mov	r7, r1
 8012b90:	f7ed ffba 	bl	8000b08 <__aeabi_d2iz>
 8012b94:	2200      	movs	r2, #0
 8012b96:	4683      	mov	fp, r0
 8012b98:	2300      	movs	r3, #0
 8012b9a:	4630      	mov	r0, r6
 8012b9c:	4639      	mov	r1, r7
 8012b9e:	f7ed ff75 	bl	8000a8c <__aeabi_dcmplt>
 8012ba2:	b148      	cbz	r0, 8012bb8 <_dtoa_r+0x190>
 8012ba4:	4658      	mov	r0, fp
 8012ba6:	f7ed fc95 	bl	80004d4 <__aeabi_i2d>
 8012baa:	4632      	mov	r2, r6
 8012bac:	463b      	mov	r3, r7
 8012bae:	f7ed ff63 	bl	8000a78 <__aeabi_dcmpeq>
 8012bb2:	b908      	cbnz	r0, 8012bb8 <_dtoa_r+0x190>
 8012bb4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012bb8:	f1bb 0f16 	cmp.w	fp, #22
 8012bbc:	d857      	bhi.n	8012c6e <_dtoa_r+0x246>
 8012bbe:	4b5b      	ldr	r3, [pc, #364]	; (8012d2c <_dtoa_r+0x304>)
 8012bc0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bc8:	ec51 0b18 	vmov	r0, r1, d8
 8012bcc:	f7ed ff5e 	bl	8000a8c <__aeabi_dcmplt>
 8012bd0:	2800      	cmp	r0, #0
 8012bd2:	d04e      	beq.n	8012c72 <_dtoa_r+0x24a>
 8012bd4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012bd8:	2300      	movs	r3, #0
 8012bda:	930c      	str	r3, [sp, #48]	; 0x30
 8012bdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012bde:	1b5b      	subs	r3, r3, r5
 8012be0:	1e5a      	subs	r2, r3, #1
 8012be2:	bf45      	ittet	mi
 8012be4:	f1c3 0301 	rsbmi	r3, r3, #1
 8012be8:	9305      	strmi	r3, [sp, #20]
 8012bea:	2300      	movpl	r3, #0
 8012bec:	2300      	movmi	r3, #0
 8012bee:	9206      	str	r2, [sp, #24]
 8012bf0:	bf54      	ite	pl
 8012bf2:	9305      	strpl	r3, [sp, #20]
 8012bf4:	9306      	strmi	r3, [sp, #24]
 8012bf6:	f1bb 0f00 	cmp.w	fp, #0
 8012bfa:	db3c      	blt.n	8012c76 <_dtoa_r+0x24e>
 8012bfc:	9b06      	ldr	r3, [sp, #24]
 8012bfe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8012c02:	445b      	add	r3, fp
 8012c04:	9306      	str	r3, [sp, #24]
 8012c06:	2300      	movs	r3, #0
 8012c08:	9308      	str	r3, [sp, #32]
 8012c0a:	9b07      	ldr	r3, [sp, #28]
 8012c0c:	2b09      	cmp	r3, #9
 8012c0e:	d868      	bhi.n	8012ce2 <_dtoa_r+0x2ba>
 8012c10:	2b05      	cmp	r3, #5
 8012c12:	bfc4      	itt	gt
 8012c14:	3b04      	subgt	r3, #4
 8012c16:	9307      	strgt	r3, [sp, #28]
 8012c18:	9b07      	ldr	r3, [sp, #28]
 8012c1a:	f1a3 0302 	sub.w	r3, r3, #2
 8012c1e:	bfcc      	ite	gt
 8012c20:	2500      	movgt	r5, #0
 8012c22:	2501      	movle	r5, #1
 8012c24:	2b03      	cmp	r3, #3
 8012c26:	f200 8085 	bhi.w	8012d34 <_dtoa_r+0x30c>
 8012c2a:	e8df f003 	tbb	[pc, r3]
 8012c2e:	3b2e      	.short	0x3b2e
 8012c30:	5839      	.short	0x5839
 8012c32:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8012c36:	441d      	add	r5, r3
 8012c38:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012c3c:	2b20      	cmp	r3, #32
 8012c3e:	bfc1      	itttt	gt
 8012c40:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012c44:	fa08 f803 	lslgt.w	r8, r8, r3
 8012c48:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8012c4c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8012c50:	bfd6      	itet	le
 8012c52:	f1c3 0320 	rsble	r3, r3, #32
 8012c56:	ea48 0003 	orrgt.w	r0, r8, r3
 8012c5a:	fa06 f003 	lslle.w	r0, r6, r3
 8012c5e:	f7ed fc29 	bl	80004b4 <__aeabi_ui2d>
 8012c62:	2201      	movs	r2, #1
 8012c64:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8012c68:	3d01      	subs	r5, #1
 8012c6a:	920e      	str	r2, [sp, #56]	; 0x38
 8012c6c:	e76f      	b.n	8012b4e <_dtoa_r+0x126>
 8012c6e:	2301      	movs	r3, #1
 8012c70:	e7b3      	b.n	8012bda <_dtoa_r+0x1b2>
 8012c72:	900c      	str	r0, [sp, #48]	; 0x30
 8012c74:	e7b2      	b.n	8012bdc <_dtoa_r+0x1b4>
 8012c76:	9b05      	ldr	r3, [sp, #20]
 8012c78:	eba3 030b 	sub.w	r3, r3, fp
 8012c7c:	9305      	str	r3, [sp, #20]
 8012c7e:	f1cb 0300 	rsb	r3, fp, #0
 8012c82:	9308      	str	r3, [sp, #32]
 8012c84:	2300      	movs	r3, #0
 8012c86:	930b      	str	r3, [sp, #44]	; 0x2c
 8012c88:	e7bf      	b.n	8012c0a <_dtoa_r+0x1e2>
 8012c8a:	2300      	movs	r3, #0
 8012c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8012c8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	dc52      	bgt.n	8012d3a <_dtoa_r+0x312>
 8012c94:	2301      	movs	r3, #1
 8012c96:	9301      	str	r3, [sp, #4]
 8012c98:	9304      	str	r3, [sp, #16]
 8012c9a:	461a      	mov	r2, r3
 8012c9c:	920a      	str	r2, [sp, #40]	; 0x28
 8012c9e:	e00b      	b.n	8012cb8 <_dtoa_r+0x290>
 8012ca0:	2301      	movs	r3, #1
 8012ca2:	e7f3      	b.n	8012c8c <_dtoa_r+0x264>
 8012ca4:	2300      	movs	r3, #0
 8012ca6:	9309      	str	r3, [sp, #36]	; 0x24
 8012ca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012caa:	445b      	add	r3, fp
 8012cac:	9301      	str	r3, [sp, #4]
 8012cae:	3301      	adds	r3, #1
 8012cb0:	2b01      	cmp	r3, #1
 8012cb2:	9304      	str	r3, [sp, #16]
 8012cb4:	bfb8      	it	lt
 8012cb6:	2301      	movlt	r3, #1
 8012cb8:	69e0      	ldr	r0, [r4, #28]
 8012cba:	2100      	movs	r1, #0
 8012cbc:	2204      	movs	r2, #4
 8012cbe:	f102 0614 	add.w	r6, r2, #20
 8012cc2:	429e      	cmp	r6, r3
 8012cc4:	d93d      	bls.n	8012d42 <_dtoa_r+0x31a>
 8012cc6:	6041      	str	r1, [r0, #4]
 8012cc8:	4620      	mov	r0, r4
 8012cca:	f000 fd9f 	bl	801380c <_Balloc>
 8012cce:	9000      	str	r0, [sp, #0]
 8012cd0:	2800      	cmp	r0, #0
 8012cd2:	d139      	bne.n	8012d48 <_dtoa_r+0x320>
 8012cd4:	4b16      	ldr	r3, [pc, #88]	; (8012d30 <_dtoa_r+0x308>)
 8012cd6:	4602      	mov	r2, r0
 8012cd8:	f240 11af 	movw	r1, #431	; 0x1af
 8012cdc:	e6bd      	b.n	8012a5a <_dtoa_r+0x32>
 8012cde:	2301      	movs	r3, #1
 8012ce0:	e7e1      	b.n	8012ca6 <_dtoa_r+0x27e>
 8012ce2:	2501      	movs	r5, #1
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	9307      	str	r3, [sp, #28]
 8012ce8:	9509      	str	r5, [sp, #36]	; 0x24
 8012cea:	f04f 33ff 	mov.w	r3, #4294967295
 8012cee:	9301      	str	r3, [sp, #4]
 8012cf0:	9304      	str	r3, [sp, #16]
 8012cf2:	2200      	movs	r2, #0
 8012cf4:	2312      	movs	r3, #18
 8012cf6:	e7d1      	b.n	8012c9c <_dtoa_r+0x274>
 8012cf8:	636f4361 	.word	0x636f4361
 8012cfc:	3fd287a7 	.word	0x3fd287a7
 8012d00:	8b60c8b3 	.word	0x8b60c8b3
 8012d04:	3fc68a28 	.word	0x3fc68a28
 8012d08:	509f79fb 	.word	0x509f79fb
 8012d0c:	3fd34413 	.word	0x3fd34413
 8012d10:	0801845e 	.word	0x0801845e
 8012d14:	08018475 	.word	0x08018475
 8012d18:	7ff00000 	.word	0x7ff00000
 8012d1c:	0801845a 	.word	0x0801845a
 8012d20:	08018451 	.word	0x08018451
 8012d24:	08018429 	.word	0x08018429
 8012d28:	3ff80000 	.word	0x3ff80000
 8012d2c:	08018560 	.word	0x08018560
 8012d30:	080184cd 	.word	0x080184cd
 8012d34:	2301      	movs	r3, #1
 8012d36:	9309      	str	r3, [sp, #36]	; 0x24
 8012d38:	e7d7      	b.n	8012cea <_dtoa_r+0x2c2>
 8012d3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d3c:	9301      	str	r3, [sp, #4]
 8012d3e:	9304      	str	r3, [sp, #16]
 8012d40:	e7ba      	b.n	8012cb8 <_dtoa_r+0x290>
 8012d42:	3101      	adds	r1, #1
 8012d44:	0052      	lsls	r2, r2, #1
 8012d46:	e7ba      	b.n	8012cbe <_dtoa_r+0x296>
 8012d48:	69e3      	ldr	r3, [r4, #28]
 8012d4a:	9a00      	ldr	r2, [sp, #0]
 8012d4c:	601a      	str	r2, [r3, #0]
 8012d4e:	9b04      	ldr	r3, [sp, #16]
 8012d50:	2b0e      	cmp	r3, #14
 8012d52:	f200 80a8 	bhi.w	8012ea6 <_dtoa_r+0x47e>
 8012d56:	2d00      	cmp	r5, #0
 8012d58:	f000 80a5 	beq.w	8012ea6 <_dtoa_r+0x47e>
 8012d5c:	f1bb 0f00 	cmp.w	fp, #0
 8012d60:	dd38      	ble.n	8012dd4 <_dtoa_r+0x3ac>
 8012d62:	4bc0      	ldr	r3, [pc, #768]	; (8013064 <_dtoa_r+0x63c>)
 8012d64:	f00b 020f 	and.w	r2, fp, #15
 8012d68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012d6c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8012d70:	e9d3 6700 	ldrd	r6, r7, [r3]
 8012d74:	ea4f 182b 	mov.w	r8, fp, asr #4
 8012d78:	d019      	beq.n	8012dae <_dtoa_r+0x386>
 8012d7a:	4bbb      	ldr	r3, [pc, #748]	; (8013068 <_dtoa_r+0x640>)
 8012d7c:	ec51 0b18 	vmov	r0, r1, d8
 8012d80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012d84:	f7ed fd3a 	bl	80007fc <__aeabi_ddiv>
 8012d88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012d8c:	f008 080f 	and.w	r8, r8, #15
 8012d90:	2503      	movs	r5, #3
 8012d92:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8013068 <_dtoa_r+0x640>
 8012d96:	f1b8 0f00 	cmp.w	r8, #0
 8012d9a:	d10a      	bne.n	8012db2 <_dtoa_r+0x38a>
 8012d9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012da0:	4632      	mov	r2, r6
 8012da2:	463b      	mov	r3, r7
 8012da4:	f7ed fd2a 	bl	80007fc <__aeabi_ddiv>
 8012da8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012dac:	e02b      	b.n	8012e06 <_dtoa_r+0x3de>
 8012dae:	2502      	movs	r5, #2
 8012db0:	e7ef      	b.n	8012d92 <_dtoa_r+0x36a>
 8012db2:	f018 0f01 	tst.w	r8, #1
 8012db6:	d008      	beq.n	8012dca <_dtoa_r+0x3a2>
 8012db8:	4630      	mov	r0, r6
 8012dba:	4639      	mov	r1, r7
 8012dbc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8012dc0:	f7ed fbf2 	bl	80005a8 <__aeabi_dmul>
 8012dc4:	3501      	adds	r5, #1
 8012dc6:	4606      	mov	r6, r0
 8012dc8:	460f      	mov	r7, r1
 8012dca:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012dce:	f109 0908 	add.w	r9, r9, #8
 8012dd2:	e7e0      	b.n	8012d96 <_dtoa_r+0x36e>
 8012dd4:	f000 809f 	beq.w	8012f16 <_dtoa_r+0x4ee>
 8012dd8:	f1cb 0600 	rsb	r6, fp, #0
 8012ddc:	4ba1      	ldr	r3, [pc, #644]	; (8013064 <_dtoa_r+0x63c>)
 8012dde:	4fa2      	ldr	r7, [pc, #648]	; (8013068 <_dtoa_r+0x640>)
 8012de0:	f006 020f 	and.w	r2, r6, #15
 8012de4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dec:	ec51 0b18 	vmov	r0, r1, d8
 8012df0:	f7ed fbda 	bl	80005a8 <__aeabi_dmul>
 8012df4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012df8:	1136      	asrs	r6, r6, #4
 8012dfa:	2300      	movs	r3, #0
 8012dfc:	2502      	movs	r5, #2
 8012dfe:	2e00      	cmp	r6, #0
 8012e00:	d17e      	bne.n	8012f00 <_dtoa_r+0x4d8>
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d1d0      	bne.n	8012da8 <_dtoa_r+0x380>
 8012e06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012e08:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	f000 8084 	beq.w	8012f1a <_dtoa_r+0x4f2>
 8012e12:	4b96      	ldr	r3, [pc, #600]	; (801306c <_dtoa_r+0x644>)
 8012e14:	2200      	movs	r2, #0
 8012e16:	4640      	mov	r0, r8
 8012e18:	4649      	mov	r1, r9
 8012e1a:	f7ed fe37 	bl	8000a8c <__aeabi_dcmplt>
 8012e1e:	2800      	cmp	r0, #0
 8012e20:	d07b      	beq.n	8012f1a <_dtoa_r+0x4f2>
 8012e22:	9b04      	ldr	r3, [sp, #16]
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d078      	beq.n	8012f1a <_dtoa_r+0x4f2>
 8012e28:	9b01      	ldr	r3, [sp, #4]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	dd39      	ble.n	8012ea2 <_dtoa_r+0x47a>
 8012e2e:	4b90      	ldr	r3, [pc, #576]	; (8013070 <_dtoa_r+0x648>)
 8012e30:	2200      	movs	r2, #0
 8012e32:	4640      	mov	r0, r8
 8012e34:	4649      	mov	r1, r9
 8012e36:	f7ed fbb7 	bl	80005a8 <__aeabi_dmul>
 8012e3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012e3e:	9e01      	ldr	r6, [sp, #4]
 8012e40:	f10b 37ff 	add.w	r7, fp, #4294967295
 8012e44:	3501      	adds	r5, #1
 8012e46:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012e4a:	4628      	mov	r0, r5
 8012e4c:	f7ed fb42 	bl	80004d4 <__aeabi_i2d>
 8012e50:	4642      	mov	r2, r8
 8012e52:	464b      	mov	r3, r9
 8012e54:	f7ed fba8 	bl	80005a8 <__aeabi_dmul>
 8012e58:	4b86      	ldr	r3, [pc, #536]	; (8013074 <_dtoa_r+0x64c>)
 8012e5a:	2200      	movs	r2, #0
 8012e5c:	f7ed f9ee 	bl	800023c <__adddf3>
 8012e60:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8012e64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012e68:	9303      	str	r3, [sp, #12]
 8012e6a:	2e00      	cmp	r6, #0
 8012e6c:	d158      	bne.n	8012f20 <_dtoa_r+0x4f8>
 8012e6e:	4b82      	ldr	r3, [pc, #520]	; (8013078 <_dtoa_r+0x650>)
 8012e70:	2200      	movs	r2, #0
 8012e72:	4640      	mov	r0, r8
 8012e74:	4649      	mov	r1, r9
 8012e76:	f7ed f9df 	bl	8000238 <__aeabi_dsub>
 8012e7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012e7e:	4680      	mov	r8, r0
 8012e80:	4689      	mov	r9, r1
 8012e82:	f7ed fe21 	bl	8000ac8 <__aeabi_dcmpgt>
 8012e86:	2800      	cmp	r0, #0
 8012e88:	f040 8296 	bne.w	80133b8 <_dtoa_r+0x990>
 8012e8c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012e90:	4640      	mov	r0, r8
 8012e92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012e96:	4649      	mov	r1, r9
 8012e98:	f7ed fdf8 	bl	8000a8c <__aeabi_dcmplt>
 8012e9c:	2800      	cmp	r0, #0
 8012e9e:	f040 8289 	bne.w	80133b4 <_dtoa_r+0x98c>
 8012ea2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012ea6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	f2c0 814e 	blt.w	801314a <_dtoa_r+0x722>
 8012eae:	f1bb 0f0e 	cmp.w	fp, #14
 8012eb2:	f300 814a 	bgt.w	801314a <_dtoa_r+0x722>
 8012eb6:	4b6b      	ldr	r3, [pc, #428]	; (8013064 <_dtoa_r+0x63c>)
 8012eb8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012ebc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012ec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	f280 80dc 	bge.w	8013080 <_dtoa_r+0x658>
 8012ec8:	9b04      	ldr	r3, [sp, #16]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	f300 80d8 	bgt.w	8013080 <_dtoa_r+0x658>
 8012ed0:	f040 826f 	bne.w	80133b2 <_dtoa_r+0x98a>
 8012ed4:	4b68      	ldr	r3, [pc, #416]	; (8013078 <_dtoa_r+0x650>)
 8012ed6:	2200      	movs	r2, #0
 8012ed8:	4640      	mov	r0, r8
 8012eda:	4649      	mov	r1, r9
 8012edc:	f7ed fb64 	bl	80005a8 <__aeabi_dmul>
 8012ee0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012ee4:	f7ed fde6 	bl	8000ab4 <__aeabi_dcmpge>
 8012ee8:	9e04      	ldr	r6, [sp, #16]
 8012eea:	4637      	mov	r7, r6
 8012eec:	2800      	cmp	r0, #0
 8012eee:	f040 8245 	bne.w	801337c <_dtoa_r+0x954>
 8012ef2:	9d00      	ldr	r5, [sp, #0]
 8012ef4:	2331      	movs	r3, #49	; 0x31
 8012ef6:	f805 3b01 	strb.w	r3, [r5], #1
 8012efa:	f10b 0b01 	add.w	fp, fp, #1
 8012efe:	e241      	b.n	8013384 <_dtoa_r+0x95c>
 8012f00:	07f2      	lsls	r2, r6, #31
 8012f02:	d505      	bpl.n	8012f10 <_dtoa_r+0x4e8>
 8012f04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012f08:	f7ed fb4e 	bl	80005a8 <__aeabi_dmul>
 8012f0c:	3501      	adds	r5, #1
 8012f0e:	2301      	movs	r3, #1
 8012f10:	1076      	asrs	r6, r6, #1
 8012f12:	3708      	adds	r7, #8
 8012f14:	e773      	b.n	8012dfe <_dtoa_r+0x3d6>
 8012f16:	2502      	movs	r5, #2
 8012f18:	e775      	b.n	8012e06 <_dtoa_r+0x3de>
 8012f1a:	9e04      	ldr	r6, [sp, #16]
 8012f1c:	465f      	mov	r7, fp
 8012f1e:	e792      	b.n	8012e46 <_dtoa_r+0x41e>
 8012f20:	9900      	ldr	r1, [sp, #0]
 8012f22:	4b50      	ldr	r3, [pc, #320]	; (8013064 <_dtoa_r+0x63c>)
 8012f24:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012f28:	4431      	add	r1, r6
 8012f2a:	9102      	str	r1, [sp, #8]
 8012f2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012f2e:	eeb0 9a47 	vmov.f32	s18, s14
 8012f32:	eef0 9a67 	vmov.f32	s19, s15
 8012f36:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012f3a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012f3e:	2900      	cmp	r1, #0
 8012f40:	d044      	beq.n	8012fcc <_dtoa_r+0x5a4>
 8012f42:	494e      	ldr	r1, [pc, #312]	; (801307c <_dtoa_r+0x654>)
 8012f44:	2000      	movs	r0, #0
 8012f46:	f7ed fc59 	bl	80007fc <__aeabi_ddiv>
 8012f4a:	ec53 2b19 	vmov	r2, r3, d9
 8012f4e:	f7ed f973 	bl	8000238 <__aeabi_dsub>
 8012f52:	9d00      	ldr	r5, [sp, #0]
 8012f54:	ec41 0b19 	vmov	d9, r0, r1
 8012f58:	4649      	mov	r1, r9
 8012f5a:	4640      	mov	r0, r8
 8012f5c:	f7ed fdd4 	bl	8000b08 <__aeabi_d2iz>
 8012f60:	4606      	mov	r6, r0
 8012f62:	f7ed fab7 	bl	80004d4 <__aeabi_i2d>
 8012f66:	4602      	mov	r2, r0
 8012f68:	460b      	mov	r3, r1
 8012f6a:	4640      	mov	r0, r8
 8012f6c:	4649      	mov	r1, r9
 8012f6e:	f7ed f963 	bl	8000238 <__aeabi_dsub>
 8012f72:	3630      	adds	r6, #48	; 0x30
 8012f74:	f805 6b01 	strb.w	r6, [r5], #1
 8012f78:	ec53 2b19 	vmov	r2, r3, d9
 8012f7c:	4680      	mov	r8, r0
 8012f7e:	4689      	mov	r9, r1
 8012f80:	f7ed fd84 	bl	8000a8c <__aeabi_dcmplt>
 8012f84:	2800      	cmp	r0, #0
 8012f86:	d164      	bne.n	8013052 <_dtoa_r+0x62a>
 8012f88:	4642      	mov	r2, r8
 8012f8a:	464b      	mov	r3, r9
 8012f8c:	4937      	ldr	r1, [pc, #220]	; (801306c <_dtoa_r+0x644>)
 8012f8e:	2000      	movs	r0, #0
 8012f90:	f7ed f952 	bl	8000238 <__aeabi_dsub>
 8012f94:	ec53 2b19 	vmov	r2, r3, d9
 8012f98:	f7ed fd78 	bl	8000a8c <__aeabi_dcmplt>
 8012f9c:	2800      	cmp	r0, #0
 8012f9e:	f040 80b6 	bne.w	801310e <_dtoa_r+0x6e6>
 8012fa2:	9b02      	ldr	r3, [sp, #8]
 8012fa4:	429d      	cmp	r5, r3
 8012fa6:	f43f af7c 	beq.w	8012ea2 <_dtoa_r+0x47a>
 8012faa:	4b31      	ldr	r3, [pc, #196]	; (8013070 <_dtoa_r+0x648>)
 8012fac:	ec51 0b19 	vmov	r0, r1, d9
 8012fb0:	2200      	movs	r2, #0
 8012fb2:	f7ed faf9 	bl	80005a8 <__aeabi_dmul>
 8012fb6:	4b2e      	ldr	r3, [pc, #184]	; (8013070 <_dtoa_r+0x648>)
 8012fb8:	ec41 0b19 	vmov	d9, r0, r1
 8012fbc:	2200      	movs	r2, #0
 8012fbe:	4640      	mov	r0, r8
 8012fc0:	4649      	mov	r1, r9
 8012fc2:	f7ed faf1 	bl	80005a8 <__aeabi_dmul>
 8012fc6:	4680      	mov	r8, r0
 8012fc8:	4689      	mov	r9, r1
 8012fca:	e7c5      	b.n	8012f58 <_dtoa_r+0x530>
 8012fcc:	ec51 0b17 	vmov	r0, r1, d7
 8012fd0:	f7ed faea 	bl	80005a8 <__aeabi_dmul>
 8012fd4:	9b02      	ldr	r3, [sp, #8]
 8012fd6:	9d00      	ldr	r5, [sp, #0]
 8012fd8:	930f      	str	r3, [sp, #60]	; 0x3c
 8012fda:	ec41 0b19 	vmov	d9, r0, r1
 8012fde:	4649      	mov	r1, r9
 8012fe0:	4640      	mov	r0, r8
 8012fe2:	f7ed fd91 	bl	8000b08 <__aeabi_d2iz>
 8012fe6:	4606      	mov	r6, r0
 8012fe8:	f7ed fa74 	bl	80004d4 <__aeabi_i2d>
 8012fec:	3630      	adds	r6, #48	; 0x30
 8012fee:	4602      	mov	r2, r0
 8012ff0:	460b      	mov	r3, r1
 8012ff2:	4640      	mov	r0, r8
 8012ff4:	4649      	mov	r1, r9
 8012ff6:	f7ed f91f 	bl	8000238 <__aeabi_dsub>
 8012ffa:	f805 6b01 	strb.w	r6, [r5], #1
 8012ffe:	9b02      	ldr	r3, [sp, #8]
 8013000:	429d      	cmp	r5, r3
 8013002:	4680      	mov	r8, r0
 8013004:	4689      	mov	r9, r1
 8013006:	f04f 0200 	mov.w	r2, #0
 801300a:	d124      	bne.n	8013056 <_dtoa_r+0x62e>
 801300c:	4b1b      	ldr	r3, [pc, #108]	; (801307c <_dtoa_r+0x654>)
 801300e:	ec51 0b19 	vmov	r0, r1, d9
 8013012:	f7ed f913 	bl	800023c <__adddf3>
 8013016:	4602      	mov	r2, r0
 8013018:	460b      	mov	r3, r1
 801301a:	4640      	mov	r0, r8
 801301c:	4649      	mov	r1, r9
 801301e:	f7ed fd53 	bl	8000ac8 <__aeabi_dcmpgt>
 8013022:	2800      	cmp	r0, #0
 8013024:	d173      	bne.n	801310e <_dtoa_r+0x6e6>
 8013026:	ec53 2b19 	vmov	r2, r3, d9
 801302a:	4914      	ldr	r1, [pc, #80]	; (801307c <_dtoa_r+0x654>)
 801302c:	2000      	movs	r0, #0
 801302e:	f7ed f903 	bl	8000238 <__aeabi_dsub>
 8013032:	4602      	mov	r2, r0
 8013034:	460b      	mov	r3, r1
 8013036:	4640      	mov	r0, r8
 8013038:	4649      	mov	r1, r9
 801303a:	f7ed fd27 	bl	8000a8c <__aeabi_dcmplt>
 801303e:	2800      	cmp	r0, #0
 8013040:	f43f af2f 	beq.w	8012ea2 <_dtoa_r+0x47a>
 8013044:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8013046:	1e6b      	subs	r3, r5, #1
 8013048:	930f      	str	r3, [sp, #60]	; 0x3c
 801304a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801304e:	2b30      	cmp	r3, #48	; 0x30
 8013050:	d0f8      	beq.n	8013044 <_dtoa_r+0x61c>
 8013052:	46bb      	mov	fp, r7
 8013054:	e04a      	b.n	80130ec <_dtoa_r+0x6c4>
 8013056:	4b06      	ldr	r3, [pc, #24]	; (8013070 <_dtoa_r+0x648>)
 8013058:	f7ed faa6 	bl	80005a8 <__aeabi_dmul>
 801305c:	4680      	mov	r8, r0
 801305e:	4689      	mov	r9, r1
 8013060:	e7bd      	b.n	8012fde <_dtoa_r+0x5b6>
 8013062:	bf00      	nop
 8013064:	08018560 	.word	0x08018560
 8013068:	08018538 	.word	0x08018538
 801306c:	3ff00000 	.word	0x3ff00000
 8013070:	40240000 	.word	0x40240000
 8013074:	401c0000 	.word	0x401c0000
 8013078:	40140000 	.word	0x40140000
 801307c:	3fe00000 	.word	0x3fe00000
 8013080:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013084:	9d00      	ldr	r5, [sp, #0]
 8013086:	4642      	mov	r2, r8
 8013088:	464b      	mov	r3, r9
 801308a:	4630      	mov	r0, r6
 801308c:	4639      	mov	r1, r7
 801308e:	f7ed fbb5 	bl	80007fc <__aeabi_ddiv>
 8013092:	f7ed fd39 	bl	8000b08 <__aeabi_d2iz>
 8013096:	9001      	str	r0, [sp, #4]
 8013098:	f7ed fa1c 	bl	80004d4 <__aeabi_i2d>
 801309c:	4642      	mov	r2, r8
 801309e:	464b      	mov	r3, r9
 80130a0:	f7ed fa82 	bl	80005a8 <__aeabi_dmul>
 80130a4:	4602      	mov	r2, r0
 80130a6:	460b      	mov	r3, r1
 80130a8:	4630      	mov	r0, r6
 80130aa:	4639      	mov	r1, r7
 80130ac:	f7ed f8c4 	bl	8000238 <__aeabi_dsub>
 80130b0:	9e01      	ldr	r6, [sp, #4]
 80130b2:	9f04      	ldr	r7, [sp, #16]
 80130b4:	3630      	adds	r6, #48	; 0x30
 80130b6:	f805 6b01 	strb.w	r6, [r5], #1
 80130ba:	9e00      	ldr	r6, [sp, #0]
 80130bc:	1bae      	subs	r6, r5, r6
 80130be:	42b7      	cmp	r7, r6
 80130c0:	4602      	mov	r2, r0
 80130c2:	460b      	mov	r3, r1
 80130c4:	d134      	bne.n	8013130 <_dtoa_r+0x708>
 80130c6:	f7ed f8b9 	bl	800023c <__adddf3>
 80130ca:	4642      	mov	r2, r8
 80130cc:	464b      	mov	r3, r9
 80130ce:	4606      	mov	r6, r0
 80130d0:	460f      	mov	r7, r1
 80130d2:	f7ed fcf9 	bl	8000ac8 <__aeabi_dcmpgt>
 80130d6:	b9c8      	cbnz	r0, 801310c <_dtoa_r+0x6e4>
 80130d8:	4642      	mov	r2, r8
 80130da:	464b      	mov	r3, r9
 80130dc:	4630      	mov	r0, r6
 80130de:	4639      	mov	r1, r7
 80130e0:	f7ed fcca 	bl	8000a78 <__aeabi_dcmpeq>
 80130e4:	b110      	cbz	r0, 80130ec <_dtoa_r+0x6c4>
 80130e6:	9b01      	ldr	r3, [sp, #4]
 80130e8:	07db      	lsls	r3, r3, #31
 80130ea:	d40f      	bmi.n	801310c <_dtoa_r+0x6e4>
 80130ec:	4651      	mov	r1, sl
 80130ee:	4620      	mov	r0, r4
 80130f0:	f000 fbcc 	bl	801388c <_Bfree>
 80130f4:	2300      	movs	r3, #0
 80130f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80130f8:	702b      	strb	r3, [r5, #0]
 80130fa:	f10b 0301 	add.w	r3, fp, #1
 80130fe:	6013      	str	r3, [r2, #0]
 8013100:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013102:	2b00      	cmp	r3, #0
 8013104:	f43f ace2 	beq.w	8012acc <_dtoa_r+0xa4>
 8013108:	601d      	str	r5, [r3, #0]
 801310a:	e4df      	b.n	8012acc <_dtoa_r+0xa4>
 801310c:	465f      	mov	r7, fp
 801310e:	462b      	mov	r3, r5
 8013110:	461d      	mov	r5, r3
 8013112:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013116:	2a39      	cmp	r2, #57	; 0x39
 8013118:	d106      	bne.n	8013128 <_dtoa_r+0x700>
 801311a:	9a00      	ldr	r2, [sp, #0]
 801311c:	429a      	cmp	r2, r3
 801311e:	d1f7      	bne.n	8013110 <_dtoa_r+0x6e8>
 8013120:	9900      	ldr	r1, [sp, #0]
 8013122:	2230      	movs	r2, #48	; 0x30
 8013124:	3701      	adds	r7, #1
 8013126:	700a      	strb	r2, [r1, #0]
 8013128:	781a      	ldrb	r2, [r3, #0]
 801312a:	3201      	adds	r2, #1
 801312c:	701a      	strb	r2, [r3, #0]
 801312e:	e790      	b.n	8013052 <_dtoa_r+0x62a>
 8013130:	4ba3      	ldr	r3, [pc, #652]	; (80133c0 <_dtoa_r+0x998>)
 8013132:	2200      	movs	r2, #0
 8013134:	f7ed fa38 	bl	80005a8 <__aeabi_dmul>
 8013138:	2200      	movs	r2, #0
 801313a:	2300      	movs	r3, #0
 801313c:	4606      	mov	r6, r0
 801313e:	460f      	mov	r7, r1
 8013140:	f7ed fc9a 	bl	8000a78 <__aeabi_dcmpeq>
 8013144:	2800      	cmp	r0, #0
 8013146:	d09e      	beq.n	8013086 <_dtoa_r+0x65e>
 8013148:	e7d0      	b.n	80130ec <_dtoa_r+0x6c4>
 801314a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801314c:	2a00      	cmp	r2, #0
 801314e:	f000 80ca 	beq.w	80132e6 <_dtoa_r+0x8be>
 8013152:	9a07      	ldr	r2, [sp, #28]
 8013154:	2a01      	cmp	r2, #1
 8013156:	f300 80ad 	bgt.w	80132b4 <_dtoa_r+0x88c>
 801315a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801315c:	2a00      	cmp	r2, #0
 801315e:	f000 80a5 	beq.w	80132ac <_dtoa_r+0x884>
 8013162:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013166:	9e08      	ldr	r6, [sp, #32]
 8013168:	9d05      	ldr	r5, [sp, #20]
 801316a:	9a05      	ldr	r2, [sp, #20]
 801316c:	441a      	add	r2, r3
 801316e:	9205      	str	r2, [sp, #20]
 8013170:	9a06      	ldr	r2, [sp, #24]
 8013172:	2101      	movs	r1, #1
 8013174:	441a      	add	r2, r3
 8013176:	4620      	mov	r0, r4
 8013178:	9206      	str	r2, [sp, #24]
 801317a:	f000 fc87 	bl	8013a8c <__i2b>
 801317e:	4607      	mov	r7, r0
 8013180:	b165      	cbz	r5, 801319c <_dtoa_r+0x774>
 8013182:	9b06      	ldr	r3, [sp, #24]
 8013184:	2b00      	cmp	r3, #0
 8013186:	dd09      	ble.n	801319c <_dtoa_r+0x774>
 8013188:	42ab      	cmp	r3, r5
 801318a:	9a05      	ldr	r2, [sp, #20]
 801318c:	bfa8      	it	ge
 801318e:	462b      	movge	r3, r5
 8013190:	1ad2      	subs	r2, r2, r3
 8013192:	9205      	str	r2, [sp, #20]
 8013194:	9a06      	ldr	r2, [sp, #24]
 8013196:	1aed      	subs	r5, r5, r3
 8013198:	1ad3      	subs	r3, r2, r3
 801319a:	9306      	str	r3, [sp, #24]
 801319c:	9b08      	ldr	r3, [sp, #32]
 801319e:	b1f3      	cbz	r3, 80131de <_dtoa_r+0x7b6>
 80131a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	f000 80a3 	beq.w	80132ee <_dtoa_r+0x8c6>
 80131a8:	2e00      	cmp	r6, #0
 80131aa:	dd10      	ble.n	80131ce <_dtoa_r+0x7a6>
 80131ac:	4639      	mov	r1, r7
 80131ae:	4632      	mov	r2, r6
 80131b0:	4620      	mov	r0, r4
 80131b2:	f000 fd2b 	bl	8013c0c <__pow5mult>
 80131b6:	4652      	mov	r2, sl
 80131b8:	4601      	mov	r1, r0
 80131ba:	4607      	mov	r7, r0
 80131bc:	4620      	mov	r0, r4
 80131be:	f000 fc7b 	bl	8013ab8 <__multiply>
 80131c2:	4651      	mov	r1, sl
 80131c4:	4680      	mov	r8, r0
 80131c6:	4620      	mov	r0, r4
 80131c8:	f000 fb60 	bl	801388c <_Bfree>
 80131cc:	46c2      	mov	sl, r8
 80131ce:	9b08      	ldr	r3, [sp, #32]
 80131d0:	1b9a      	subs	r2, r3, r6
 80131d2:	d004      	beq.n	80131de <_dtoa_r+0x7b6>
 80131d4:	4651      	mov	r1, sl
 80131d6:	4620      	mov	r0, r4
 80131d8:	f000 fd18 	bl	8013c0c <__pow5mult>
 80131dc:	4682      	mov	sl, r0
 80131de:	2101      	movs	r1, #1
 80131e0:	4620      	mov	r0, r4
 80131e2:	f000 fc53 	bl	8013a8c <__i2b>
 80131e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	4606      	mov	r6, r0
 80131ec:	f340 8081 	ble.w	80132f2 <_dtoa_r+0x8ca>
 80131f0:	461a      	mov	r2, r3
 80131f2:	4601      	mov	r1, r0
 80131f4:	4620      	mov	r0, r4
 80131f6:	f000 fd09 	bl	8013c0c <__pow5mult>
 80131fa:	9b07      	ldr	r3, [sp, #28]
 80131fc:	2b01      	cmp	r3, #1
 80131fe:	4606      	mov	r6, r0
 8013200:	dd7a      	ble.n	80132f8 <_dtoa_r+0x8d0>
 8013202:	f04f 0800 	mov.w	r8, #0
 8013206:	6933      	ldr	r3, [r6, #16]
 8013208:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801320c:	6918      	ldr	r0, [r3, #16]
 801320e:	f000 fbef 	bl	80139f0 <__hi0bits>
 8013212:	f1c0 0020 	rsb	r0, r0, #32
 8013216:	9b06      	ldr	r3, [sp, #24]
 8013218:	4418      	add	r0, r3
 801321a:	f010 001f 	ands.w	r0, r0, #31
 801321e:	f000 8094 	beq.w	801334a <_dtoa_r+0x922>
 8013222:	f1c0 0320 	rsb	r3, r0, #32
 8013226:	2b04      	cmp	r3, #4
 8013228:	f340 8085 	ble.w	8013336 <_dtoa_r+0x90e>
 801322c:	9b05      	ldr	r3, [sp, #20]
 801322e:	f1c0 001c 	rsb	r0, r0, #28
 8013232:	4403      	add	r3, r0
 8013234:	9305      	str	r3, [sp, #20]
 8013236:	9b06      	ldr	r3, [sp, #24]
 8013238:	4403      	add	r3, r0
 801323a:	4405      	add	r5, r0
 801323c:	9306      	str	r3, [sp, #24]
 801323e:	9b05      	ldr	r3, [sp, #20]
 8013240:	2b00      	cmp	r3, #0
 8013242:	dd05      	ble.n	8013250 <_dtoa_r+0x828>
 8013244:	4651      	mov	r1, sl
 8013246:	461a      	mov	r2, r3
 8013248:	4620      	mov	r0, r4
 801324a:	f000 fd39 	bl	8013cc0 <__lshift>
 801324e:	4682      	mov	sl, r0
 8013250:	9b06      	ldr	r3, [sp, #24]
 8013252:	2b00      	cmp	r3, #0
 8013254:	dd05      	ble.n	8013262 <_dtoa_r+0x83a>
 8013256:	4631      	mov	r1, r6
 8013258:	461a      	mov	r2, r3
 801325a:	4620      	mov	r0, r4
 801325c:	f000 fd30 	bl	8013cc0 <__lshift>
 8013260:	4606      	mov	r6, r0
 8013262:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013264:	2b00      	cmp	r3, #0
 8013266:	d072      	beq.n	801334e <_dtoa_r+0x926>
 8013268:	4631      	mov	r1, r6
 801326a:	4650      	mov	r0, sl
 801326c:	f000 fd94 	bl	8013d98 <__mcmp>
 8013270:	2800      	cmp	r0, #0
 8013272:	da6c      	bge.n	801334e <_dtoa_r+0x926>
 8013274:	2300      	movs	r3, #0
 8013276:	4651      	mov	r1, sl
 8013278:	220a      	movs	r2, #10
 801327a:	4620      	mov	r0, r4
 801327c:	f000 fb28 	bl	80138d0 <__multadd>
 8013280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013282:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013286:	4682      	mov	sl, r0
 8013288:	2b00      	cmp	r3, #0
 801328a:	f000 81b0 	beq.w	80135ee <_dtoa_r+0xbc6>
 801328e:	2300      	movs	r3, #0
 8013290:	4639      	mov	r1, r7
 8013292:	220a      	movs	r2, #10
 8013294:	4620      	mov	r0, r4
 8013296:	f000 fb1b 	bl	80138d0 <__multadd>
 801329a:	9b01      	ldr	r3, [sp, #4]
 801329c:	2b00      	cmp	r3, #0
 801329e:	4607      	mov	r7, r0
 80132a0:	f300 8096 	bgt.w	80133d0 <_dtoa_r+0x9a8>
 80132a4:	9b07      	ldr	r3, [sp, #28]
 80132a6:	2b02      	cmp	r3, #2
 80132a8:	dc59      	bgt.n	801335e <_dtoa_r+0x936>
 80132aa:	e091      	b.n	80133d0 <_dtoa_r+0x9a8>
 80132ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80132ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80132b2:	e758      	b.n	8013166 <_dtoa_r+0x73e>
 80132b4:	9b04      	ldr	r3, [sp, #16]
 80132b6:	1e5e      	subs	r6, r3, #1
 80132b8:	9b08      	ldr	r3, [sp, #32]
 80132ba:	42b3      	cmp	r3, r6
 80132bc:	bfbf      	itttt	lt
 80132be:	9b08      	ldrlt	r3, [sp, #32]
 80132c0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80132c2:	9608      	strlt	r6, [sp, #32]
 80132c4:	1af3      	sublt	r3, r6, r3
 80132c6:	bfb4      	ite	lt
 80132c8:	18d2      	addlt	r2, r2, r3
 80132ca:	1b9e      	subge	r6, r3, r6
 80132cc:	9b04      	ldr	r3, [sp, #16]
 80132ce:	bfbc      	itt	lt
 80132d0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80132d2:	2600      	movlt	r6, #0
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	bfb7      	itett	lt
 80132d8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80132dc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80132e0:	1a9d      	sublt	r5, r3, r2
 80132e2:	2300      	movlt	r3, #0
 80132e4:	e741      	b.n	801316a <_dtoa_r+0x742>
 80132e6:	9e08      	ldr	r6, [sp, #32]
 80132e8:	9d05      	ldr	r5, [sp, #20]
 80132ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80132ec:	e748      	b.n	8013180 <_dtoa_r+0x758>
 80132ee:	9a08      	ldr	r2, [sp, #32]
 80132f0:	e770      	b.n	80131d4 <_dtoa_r+0x7ac>
 80132f2:	9b07      	ldr	r3, [sp, #28]
 80132f4:	2b01      	cmp	r3, #1
 80132f6:	dc19      	bgt.n	801332c <_dtoa_r+0x904>
 80132f8:	9b02      	ldr	r3, [sp, #8]
 80132fa:	b9bb      	cbnz	r3, 801332c <_dtoa_r+0x904>
 80132fc:	9b03      	ldr	r3, [sp, #12]
 80132fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013302:	b99b      	cbnz	r3, 801332c <_dtoa_r+0x904>
 8013304:	9b03      	ldr	r3, [sp, #12]
 8013306:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801330a:	0d1b      	lsrs	r3, r3, #20
 801330c:	051b      	lsls	r3, r3, #20
 801330e:	b183      	cbz	r3, 8013332 <_dtoa_r+0x90a>
 8013310:	9b05      	ldr	r3, [sp, #20]
 8013312:	3301      	adds	r3, #1
 8013314:	9305      	str	r3, [sp, #20]
 8013316:	9b06      	ldr	r3, [sp, #24]
 8013318:	3301      	adds	r3, #1
 801331a:	9306      	str	r3, [sp, #24]
 801331c:	f04f 0801 	mov.w	r8, #1
 8013320:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013322:	2b00      	cmp	r3, #0
 8013324:	f47f af6f 	bne.w	8013206 <_dtoa_r+0x7de>
 8013328:	2001      	movs	r0, #1
 801332a:	e774      	b.n	8013216 <_dtoa_r+0x7ee>
 801332c:	f04f 0800 	mov.w	r8, #0
 8013330:	e7f6      	b.n	8013320 <_dtoa_r+0x8f8>
 8013332:	4698      	mov	r8, r3
 8013334:	e7f4      	b.n	8013320 <_dtoa_r+0x8f8>
 8013336:	d082      	beq.n	801323e <_dtoa_r+0x816>
 8013338:	9a05      	ldr	r2, [sp, #20]
 801333a:	331c      	adds	r3, #28
 801333c:	441a      	add	r2, r3
 801333e:	9205      	str	r2, [sp, #20]
 8013340:	9a06      	ldr	r2, [sp, #24]
 8013342:	441a      	add	r2, r3
 8013344:	441d      	add	r5, r3
 8013346:	9206      	str	r2, [sp, #24]
 8013348:	e779      	b.n	801323e <_dtoa_r+0x816>
 801334a:	4603      	mov	r3, r0
 801334c:	e7f4      	b.n	8013338 <_dtoa_r+0x910>
 801334e:	9b04      	ldr	r3, [sp, #16]
 8013350:	2b00      	cmp	r3, #0
 8013352:	dc37      	bgt.n	80133c4 <_dtoa_r+0x99c>
 8013354:	9b07      	ldr	r3, [sp, #28]
 8013356:	2b02      	cmp	r3, #2
 8013358:	dd34      	ble.n	80133c4 <_dtoa_r+0x99c>
 801335a:	9b04      	ldr	r3, [sp, #16]
 801335c:	9301      	str	r3, [sp, #4]
 801335e:	9b01      	ldr	r3, [sp, #4]
 8013360:	b963      	cbnz	r3, 801337c <_dtoa_r+0x954>
 8013362:	4631      	mov	r1, r6
 8013364:	2205      	movs	r2, #5
 8013366:	4620      	mov	r0, r4
 8013368:	f000 fab2 	bl	80138d0 <__multadd>
 801336c:	4601      	mov	r1, r0
 801336e:	4606      	mov	r6, r0
 8013370:	4650      	mov	r0, sl
 8013372:	f000 fd11 	bl	8013d98 <__mcmp>
 8013376:	2800      	cmp	r0, #0
 8013378:	f73f adbb 	bgt.w	8012ef2 <_dtoa_r+0x4ca>
 801337c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801337e:	9d00      	ldr	r5, [sp, #0]
 8013380:	ea6f 0b03 	mvn.w	fp, r3
 8013384:	f04f 0800 	mov.w	r8, #0
 8013388:	4631      	mov	r1, r6
 801338a:	4620      	mov	r0, r4
 801338c:	f000 fa7e 	bl	801388c <_Bfree>
 8013390:	2f00      	cmp	r7, #0
 8013392:	f43f aeab 	beq.w	80130ec <_dtoa_r+0x6c4>
 8013396:	f1b8 0f00 	cmp.w	r8, #0
 801339a:	d005      	beq.n	80133a8 <_dtoa_r+0x980>
 801339c:	45b8      	cmp	r8, r7
 801339e:	d003      	beq.n	80133a8 <_dtoa_r+0x980>
 80133a0:	4641      	mov	r1, r8
 80133a2:	4620      	mov	r0, r4
 80133a4:	f000 fa72 	bl	801388c <_Bfree>
 80133a8:	4639      	mov	r1, r7
 80133aa:	4620      	mov	r0, r4
 80133ac:	f000 fa6e 	bl	801388c <_Bfree>
 80133b0:	e69c      	b.n	80130ec <_dtoa_r+0x6c4>
 80133b2:	2600      	movs	r6, #0
 80133b4:	4637      	mov	r7, r6
 80133b6:	e7e1      	b.n	801337c <_dtoa_r+0x954>
 80133b8:	46bb      	mov	fp, r7
 80133ba:	4637      	mov	r7, r6
 80133bc:	e599      	b.n	8012ef2 <_dtoa_r+0x4ca>
 80133be:	bf00      	nop
 80133c0:	40240000 	.word	0x40240000
 80133c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	f000 80c8 	beq.w	801355c <_dtoa_r+0xb34>
 80133cc:	9b04      	ldr	r3, [sp, #16]
 80133ce:	9301      	str	r3, [sp, #4]
 80133d0:	2d00      	cmp	r5, #0
 80133d2:	dd05      	ble.n	80133e0 <_dtoa_r+0x9b8>
 80133d4:	4639      	mov	r1, r7
 80133d6:	462a      	mov	r2, r5
 80133d8:	4620      	mov	r0, r4
 80133da:	f000 fc71 	bl	8013cc0 <__lshift>
 80133de:	4607      	mov	r7, r0
 80133e0:	f1b8 0f00 	cmp.w	r8, #0
 80133e4:	d05b      	beq.n	801349e <_dtoa_r+0xa76>
 80133e6:	6879      	ldr	r1, [r7, #4]
 80133e8:	4620      	mov	r0, r4
 80133ea:	f000 fa0f 	bl	801380c <_Balloc>
 80133ee:	4605      	mov	r5, r0
 80133f0:	b928      	cbnz	r0, 80133fe <_dtoa_r+0x9d6>
 80133f2:	4b83      	ldr	r3, [pc, #524]	; (8013600 <_dtoa_r+0xbd8>)
 80133f4:	4602      	mov	r2, r0
 80133f6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80133fa:	f7ff bb2e 	b.w	8012a5a <_dtoa_r+0x32>
 80133fe:	693a      	ldr	r2, [r7, #16]
 8013400:	3202      	adds	r2, #2
 8013402:	0092      	lsls	r2, r2, #2
 8013404:	f107 010c 	add.w	r1, r7, #12
 8013408:	300c      	adds	r0, #12
 801340a:	f7ff fa6f 	bl	80128ec <memcpy>
 801340e:	2201      	movs	r2, #1
 8013410:	4629      	mov	r1, r5
 8013412:	4620      	mov	r0, r4
 8013414:	f000 fc54 	bl	8013cc0 <__lshift>
 8013418:	9b00      	ldr	r3, [sp, #0]
 801341a:	3301      	adds	r3, #1
 801341c:	9304      	str	r3, [sp, #16]
 801341e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013422:	4413      	add	r3, r2
 8013424:	9308      	str	r3, [sp, #32]
 8013426:	9b02      	ldr	r3, [sp, #8]
 8013428:	f003 0301 	and.w	r3, r3, #1
 801342c:	46b8      	mov	r8, r7
 801342e:	9306      	str	r3, [sp, #24]
 8013430:	4607      	mov	r7, r0
 8013432:	9b04      	ldr	r3, [sp, #16]
 8013434:	4631      	mov	r1, r6
 8013436:	3b01      	subs	r3, #1
 8013438:	4650      	mov	r0, sl
 801343a:	9301      	str	r3, [sp, #4]
 801343c:	f7ff fa6a 	bl	8012914 <quorem>
 8013440:	4641      	mov	r1, r8
 8013442:	9002      	str	r0, [sp, #8]
 8013444:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013448:	4650      	mov	r0, sl
 801344a:	f000 fca5 	bl	8013d98 <__mcmp>
 801344e:	463a      	mov	r2, r7
 8013450:	9005      	str	r0, [sp, #20]
 8013452:	4631      	mov	r1, r6
 8013454:	4620      	mov	r0, r4
 8013456:	f000 fcbb 	bl	8013dd0 <__mdiff>
 801345a:	68c2      	ldr	r2, [r0, #12]
 801345c:	4605      	mov	r5, r0
 801345e:	bb02      	cbnz	r2, 80134a2 <_dtoa_r+0xa7a>
 8013460:	4601      	mov	r1, r0
 8013462:	4650      	mov	r0, sl
 8013464:	f000 fc98 	bl	8013d98 <__mcmp>
 8013468:	4602      	mov	r2, r0
 801346a:	4629      	mov	r1, r5
 801346c:	4620      	mov	r0, r4
 801346e:	9209      	str	r2, [sp, #36]	; 0x24
 8013470:	f000 fa0c 	bl	801388c <_Bfree>
 8013474:	9b07      	ldr	r3, [sp, #28]
 8013476:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013478:	9d04      	ldr	r5, [sp, #16]
 801347a:	ea43 0102 	orr.w	r1, r3, r2
 801347e:	9b06      	ldr	r3, [sp, #24]
 8013480:	4319      	orrs	r1, r3
 8013482:	d110      	bne.n	80134a6 <_dtoa_r+0xa7e>
 8013484:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013488:	d029      	beq.n	80134de <_dtoa_r+0xab6>
 801348a:	9b05      	ldr	r3, [sp, #20]
 801348c:	2b00      	cmp	r3, #0
 801348e:	dd02      	ble.n	8013496 <_dtoa_r+0xa6e>
 8013490:	9b02      	ldr	r3, [sp, #8]
 8013492:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8013496:	9b01      	ldr	r3, [sp, #4]
 8013498:	f883 9000 	strb.w	r9, [r3]
 801349c:	e774      	b.n	8013388 <_dtoa_r+0x960>
 801349e:	4638      	mov	r0, r7
 80134a0:	e7ba      	b.n	8013418 <_dtoa_r+0x9f0>
 80134a2:	2201      	movs	r2, #1
 80134a4:	e7e1      	b.n	801346a <_dtoa_r+0xa42>
 80134a6:	9b05      	ldr	r3, [sp, #20]
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	db04      	blt.n	80134b6 <_dtoa_r+0xa8e>
 80134ac:	9907      	ldr	r1, [sp, #28]
 80134ae:	430b      	orrs	r3, r1
 80134b0:	9906      	ldr	r1, [sp, #24]
 80134b2:	430b      	orrs	r3, r1
 80134b4:	d120      	bne.n	80134f8 <_dtoa_r+0xad0>
 80134b6:	2a00      	cmp	r2, #0
 80134b8:	dded      	ble.n	8013496 <_dtoa_r+0xa6e>
 80134ba:	4651      	mov	r1, sl
 80134bc:	2201      	movs	r2, #1
 80134be:	4620      	mov	r0, r4
 80134c0:	f000 fbfe 	bl	8013cc0 <__lshift>
 80134c4:	4631      	mov	r1, r6
 80134c6:	4682      	mov	sl, r0
 80134c8:	f000 fc66 	bl	8013d98 <__mcmp>
 80134cc:	2800      	cmp	r0, #0
 80134ce:	dc03      	bgt.n	80134d8 <_dtoa_r+0xab0>
 80134d0:	d1e1      	bne.n	8013496 <_dtoa_r+0xa6e>
 80134d2:	f019 0f01 	tst.w	r9, #1
 80134d6:	d0de      	beq.n	8013496 <_dtoa_r+0xa6e>
 80134d8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80134dc:	d1d8      	bne.n	8013490 <_dtoa_r+0xa68>
 80134de:	9a01      	ldr	r2, [sp, #4]
 80134e0:	2339      	movs	r3, #57	; 0x39
 80134e2:	7013      	strb	r3, [r2, #0]
 80134e4:	462b      	mov	r3, r5
 80134e6:	461d      	mov	r5, r3
 80134e8:	3b01      	subs	r3, #1
 80134ea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80134ee:	2a39      	cmp	r2, #57	; 0x39
 80134f0:	d06c      	beq.n	80135cc <_dtoa_r+0xba4>
 80134f2:	3201      	adds	r2, #1
 80134f4:	701a      	strb	r2, [r3, #0]
 80134f6:	e747      	b.n	8013388 <_dtoa_r+0x960>
 80134f8:	2a00      	cmp	r2, #0
 80134fa:	dd07      	ble.n	801350c <_dtoa_r+0xae4>
 80134fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013500:	d0ed      	beq.n	80134de <_dtoa_r+0xab6>
 8013502:	9a01      	ldr	r2, [sp, #4]
 8013504:	f109 0301 	add.w	r3, r9, #1
 8013508:	7013      	strb	r3, [r2, #0]
 801350a:	e73d      	b.n	8013388 <_dtoa_r+0x960>
 801350c:	9b04      	ldr	r3, [sp, #16]
 801350e:	9a08      	ldr	r2, [sp, #32]
 8013510:	f803 9c01 	strb.w	r9, [r3, #-1]
 8013514:	4293      	cmp	r3, r2
 8013516:	d043      	beq.n	80135a0 <_dtoa_r+0xb78>
 8013518:	4651      	mov	r1, sl
 801351a:	2300      	movs	r3, #0
 801351c:	220a      	movs	r2, #10
 801351e:	4620      	mov	r0, r4
 8013520:	f000 f9d6 	bl	80138d0 <__multadd>
 8013524:	45b8      	cmp	r8, r7
 8013526:	4682      	mov	sl, r0
 8013528:	f04f 0300 	mov.w	r3, #0
 801352c:	f04f 020a 	mov.w	r2, #10
 8013530:	4641      	mov	r1, r8
 8013532:	4620      	mov	r0, r4
 8013534:	d107      	bne.n	8013546 <_dtoa_r+0xb1e>
 8013536:	f000 f9cb 	bl	80138d0 <__multadd>
 801353a:	4680      	mov	r8, r0
 801353c:	4607      	mov	r7, r0
 801353e:	9b04      	ldr	r3, [sp, #16]
 8013540:	3301      	adds	r3, #1
 8013542:	9304      	str	r3, [sp, #16]
 8013544:	e775      	b.n	8013432 <_dtoa_r+0xa0a>
 8013546:	f000 f9c3 	bl	80138d0 <__multadd>
 801354a:	4639      	mov	r1, r7
 801354c:	4680      	mov	r8, r0
 801354e:	2300      	movs	r3, #0
 8013550:	220a      	movs	r2, #10
 8013552:	4620      	mov	r0, r4
 8013554:	f000 f9bc 	bl	80138d0 <__multadd>
 8013558:	4607      	mov	r7, r0
 801355a:	e7f0      	b.n	801353e <_dtoa_r+0xb16>
 801355c:	9b04      	ldr	r3, [sp, #16]
 801355e:	9301      	str	r3, [sp, #4]
 8013560:	9d00      	ldr	r5, [sp, #0]
 8013562:	4631      	mov	r1, r6
 8013564:	4650      	mov	r0, sl
 8013566:	f7ff f9d5 	bl	8012914 <quorem>
 801356a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801356e:	9b00      	ldr	r3, [sp, #0]
 8013570:	f805 9b01 	strb.w	r9, [r5], #1
 8013574:	1aea      	subs	r2, r5, r3
 8013576:	9b01      	ldr	r3, [sp, #4]
 8013578:	4293      	cmp	r3, r2
 801357a:	dd07      	ble.n	801358c <_dtoa_r+0xb64>
 801357c:	4651      	mov	r1, sl
 801357e:	2300      	movs	r3, #0
 8013580:	220a      	movs	r2, #10
 8013582:	4620      	mov	r0, r4
 8013584:	f000 f9a4 	bl	80138d0 <__multadd>
 8013588:	4682      	mov	sl, r0
 801358a:	e7ea      	b.n	8013562 <_dtoa_r+0xb3a>
 801358c:	9b01      	ldr	r3, [sp, #4]
 801358e:	2b00      	cmp	r3, #0
 8013590:	bfc8      	it	gt
 8013592:	461d      	movgt	r5, r3
 8013594:	9b00      	ldr	r3, [sp, #0]
 8013596:	bfd8      	it	le
 8013598:	2501      	movle	r5, #1
 801359a:	441d      	add	r5, r3
 801359c:	f04f 0800 	mov.w	r8, #0
 80135a0:	4651      	mov	r1, sl
 80135a2:	2201      	movs	r2, #1
 80135a4:	4620      	mov	r0, r4
 80135a6:	f000 fb8b 	bl	8013cc0 <__lshift>
 80135aa:	4631      	mov	r1, r6
 80135ac:	4682      	mov	sl, r0
 80135ae:	f000 fbf3 	bl	8013d98 <__mcmp>
 80135b2:	2800      	cmp	r0, #0
 80135b4:	dc96      	bgt.n	80134e4 <_dtoa_r+0xabc>
 80135b6:	d102      	bne.n	80135be <_dtoa_r+0xb96>
 80135b8:	f019 0f01 	tst.w	r9, #1
 80135bc:	d192      	bne.n	80134e4 <_dtoa_r+0xabc>
 80135be:	462b      	mov	r3, r5
 80135c0:	461d      	mov	r5, r3
 80135c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80135c6:	2a30      	cmp	r2, #48	; 0x30
 80135c8:	d0fa      	beq.n	80135c0 <_dtoa_r+0xb98>
 80135ca:	e6dd      	b.n	8013388 <_dtoa_r+0x960>
 80135cc:	9a00      	ldr	r2, [sp, #0]
 80135ce:	429a      	cmp	r2, r3
 80135d0:	d189      	bne.n	80134e6 <_dtoa_r+0xabe>
 80135d2:	f10b 0b01 	add.w	fp, fp, #1
 80135d6:	2331      	movs	r3, #49	; 0x31
 80135d8:	e796      	b.n	8013508 <_dtoa_r+0xae0>
 80135da:	4b0a      	ldr	r3, [pc, #40]	; (8013604 <_dtoa_r+0xbdc>)
 80135dc:	f7ff ba99 	b.w	8012b12 <_dtoa_r+0xea>
 80135e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	f47f aa6d 	bne.w	8012ac2 <_dtoa_r+0x9a>
 80135e8:	4b07      	ldr	r3, [pc, #28]	; (8013608 <_dtoa_r+0xbe0>)
 80135ea:	f7ff ba92 	b.w	8012b12 <_dtoa_r+0xea>
 80135ee:	9b01      	ldr	r3, [sp, #4]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	dcb5      	bgt.n	8013560 <_dtoa_r+0xb38>
 80135f4:	9b07      	ldr	r3, [sp, #28]
 80135f6:	2b02      	cmp	r3, #2
 80135f8:	f73f aeb1 	bgt.w	801335e <_dtoa_r+0x936>
 80135fc:	e7b0      	b.n	8013560 <_dtoa_r+0xb38>
 80135fe:	bf00      	nop
 8013600:	080184cd 	.word	0x080184cd
 8013604:	08018428 	.word	0x08018428
 8013608:	08018451 	.word	0x08018451

0801360c <_free_r>:
 801360c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801360e:	2900      	cmp	r1, #0
 8013610:	d044      	beq.n	801369c <_free_r+0x90>
 8013612:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013616:	9001      	str	r0, [sp, #4]
 8013618:	2b00      	cmp	r3, #0
 801361a:	f1a1 0404 	sub.w	r4, r1, #4
 801361e:	bfb8      	it	lt
 8013620:	18e4      	addlt	r4, r4, r3
 8013622:	f000 f8e7 	bl	80137f4 <__malloc_lock>
 8013626:	4a1e      	ldr	r2, [pc, #120]	; (80136a0 <_free_r+0x94>)
 8013628:	9801      	ldr	r0, [sp, #4]
 801362a:	6813      	ldr	r3, [r2, #0]
 801362c:	b933      	cbnz	r3, 801363c <_free_r+0x30>
 801362e:	6063      	str	r3, [r4, #4]
 8013630:	6014      	str	r4, [r2, #0]
 8013632:	b003      	add	sp, #12
 8013634:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013638:	f000 b8e2 	b.w	8013800 <__malloc_unlock>
 801363c:	42a3      	cmp	r3, r4
 801363e:	d908      	bls.n	8013652 <_free_r+0x46>
 8013640:	6825      	ldr	r5, [r4, #0]
 8013642:	1961      	adds	r1, r4, r5
 8013644:	428b      	cmp	r3, r1
 8013646:	bf01      	itttt	eq
 8013648:	6819      	ldreq	r1, [r3, #0]
 801364a:	685b      	ldreq	r3, [r3, #4]
 801364c:	1949      	addeq	r1, r1, r5
 801364e:	6021      	streq	r1, [r4, #0]
 8013650:	e7ed      	b.n	801362e <_free_r+0x22>
 8013652:	461a      	mov	r2, r3
 8013654:	685b      	ldr	r3, [r3, #4]
 8013656:	b10b      	cbz	r3, 801365c <_free_r+0x50>
 8013658:	42a3      	cmp	r3, r4
 801365a:	d9fa      	bls.n	8013652 <_free_r+0x46>
 801365c:	6811      	ldr	r1, [r2, #0]
 801365e:	1855      	adds	r5, r2, r1
 8013660:	42a5      	cmp	r5, r4
 8013662:	d10b      	bne.n	801367c <_free_r+0x70>
 8013664:	6824      	ldr	r4, [r4, #0]
 8013666:	4421      	add	r1, r4
 8013668:	1854      	adds	r4, r2, r1
 801366a:	42a3      	cmp	r3, r4
 801366c:	6011      	str	r1, [r2, #0]
 801366e:	d1e0      	bne.n	8013632 <_free_r+0x26>
 8013670:	681c      	ldr	r4, [r3, #0]
 8013672:	685b      	ldr	r3, [r3, #4]
 8013674:	6053      	str	r3, [r2, #4]
 8013676:	440c      	add	r4, r1
 8013678:	6014      	str	r4, [r2, #0]
 801367a:	e7da      	b.n	8013632 <_free_r+0x26>
 801367c:	d902      	bls.n	8013684 <_free_r+0x78>
 801367e:	230c      	movs	r3, #12
 8013680:	6003      	str	r3, [r0, #0]
 8013682:	e7d6      	b.n	8013632 <_free_r+0x26>
 8013684:	6825      	ldr	r5, [r4, #0]
 8013686:	1961      	adds	r1, r4, r5
 8013688:	428b      	cmp	r3, r1
 801368a:	bf04      	itt	eq
 801368c:	6819      	ldreq	r1, [r3, #0]
 801368e:	685b      	ldreq	r3, [r3, #4]
 8013690:	6063      	str	r3, [r4, #4]
 8013692:	bf04      	itt	eq
 8013694:	1949      	addeq	r1, r1, r5
 8013696:	6021      	streq	r1, [r4, #0]
 8013698:	6054      	str	r4, [r2, #4]
 801369a:	e7ca      	b.n	8013632 <_free_r+0x26>
 801369c:	b003      	add	sp, #12
 801369e:	bd30      	pop	{r4, r5, pc}
 80136a0:	20000904 	.word	0x20000904

080136a4 <malloc>:
 80136a4:	4b02      	ldr	r3, [pc, #8]	; (80136b0 <malloc+0xc>)
 80136a6:	4601      	mov	r1, r0
 80136a8:	6818      	ldr	r0, [r3, #0]
 80136aa:	f000 b823 	b.w	80136f4 <_malloc_r>
 80136ae:	bf00      	nop
 80136b0:	200000c8 	.word	0x200000c8

080136b4 <sbrk_aligned>:
 80136b4:	b570      	push	{r4, r5, r6, lr}
 80136b6:	4e0e      	ldr	r6, [pc, #56]	; (80136f0 <sbrk_aligned+0x3c>)
 80136b8:	460c      	mov	r4, r1
 80136ba:	6831      	ldr	r1, [r6, #0]
 80136bc:	4605      	mov	r5, r0
 80136be:	b911      	cbnz	r1, 80136c6 <sbrk_aligned+0x12>
 80136c0:	f002 f824 	bl	801570c <_sbrk_r>
 80136c4:	6030      	str	r0, [r6, #0]
 80136c6:	4621      	mov	r1, r4
 80136c8:	4628      	mov	r0, r5
 80136ca:	f002 f81f 	bl	801570c <_sbrk_r>
 80136ce:	1c43      	adds	r3, r0, #1
 80136d0:	d00a      	beq.n	80136e8 <sbrk_aligned+0x34>
 80136d2:	1cc4      	adds	r4, r0, #3
 80136d4:	f024 0403 	bic.w	r4, r4, #3
 80136d8:	42a0      	cmp	r0, r4
 80136da:	d007      	beq.n	80136ec <sbrk_aligned+0x38>
 80136dc:	1a21      	subs	r1, r4, r0
 80136de:	4628      	mov	r0, r5
 80136e0:	f002 f814 	bl	801570c <_sbrk_r>
 80136e4:	3001      	adds	r0, #1
 80136e6:	d101      	bne.n	80136ec <sbrk_aligned+0x38>
 80136e8:	f04f 34ff 	mov.w	r4, #4294967295
 80136ec:	4620      	mov	r0, r4
 80136ee:	bd70      	pop	{r4, r5, r6, pc}
 80136f0:	20000908 	.word	0x20000908

080136f4 <_malloc_r>:
 80136f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80136f8:	1ccd      	adds	r5, r1, #3
 80136fa:	f025 0503 	bic.w	r5, r5, #3
 80136fe:	3508      	adds	r5, #8
 8013700:	2d0c      	cmp	r5, #12
 8013702:	bf38      	it	cc
 8013704:	250c      	movcc	r5, #12
 8013706:	2d00      	cmp	r5, #0
 8013708:	4607      	mov	r7, r0
 801370a:	db01      	blt.n	8013710 <_malloc_r+0x1c>
 801370c:	42a9      	cmp	r1, r5
 801370e:	d905      	bls.n	801371c <_malloc_r+0x28>
 8013710:	230c      	movs	r3, #12
 8013712:	603b      	str	r3, [r7, #0]
 8013714:	2600      	movs	r6, #0
 8013716:	4630      	mov	r0, r6
 8013718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801371c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80137f0 <_malloc_r+0xfc>
 8013720:	f000 f868 	bl	80137f4 <__malloc_lock>
 8013724:	f8d8 3000 	ldr.w	r3, [r8]
 8013728:	461c      	mov	r4, r3
 801372a:	bb5c      	cbnz	r4, 8013784 <_malloc_r+0x90>
 801372c:	4629      	mov	r1, r5
 801372e:	4638      	mov	r0, r7
 8013730:	f7ff ffc0 	bl	80136b4 <sbrk_aligned>
 8013734:	1c43      	adds	r3, r0, #1
 8013736:	4604      	mov	r4, r0
 8013738:	d155      	bne.n	80137e6 <_malloc_r+0xf2>
 801373a:	f8d8 4000 	ldr.w	r4, [r8]
 801373e:	4626      	mov	r6, r4
 8013740:	2e00      	cmp	r6, #0
 8013742:	d145      	bne.n	80137d0 <_malloc_r+0xdc>
 8013744:	2c00      	cmp	r4, #0
 8013746:	d048      	beq.n	80137da <_malloc_r+0xe6>
 8013748:	6823      	ldr	r3, [r4, #0]
 801374a:	4631      	mov	r1, r6
 801374c:	4638      	mov	r0, r7
 801374e:	eb04 0903 	add.w	r9, r4, r3
 8013752:	f001 ffdb 	bl	801570c <_sbrk_r>
 8013756:	4581      	cmp	r9, r0
 8013758:	d13f      	bne.n	80137da <_malloc_r+0xe6>
 801375a:	6821      	ldr	r1, [r4, #0]
 801375c:	1a6d      	subs	r5, r5, r1
 801375e:	4629      	mov	r1, r5
 8013760:	4638      	mov	r0, r7
 8013762:	f7ff ffa7 	bl	80136b4 <sbrk_aligned>
 8013766:	3001      	adds	r0, #1
 8013768:	d037      	beq.n	80137da <_malloc_r+0xe6>
 801376a:	6823      	ldr	r3, [r4, #0]
 801376c:	442b      	add	r3, r5
 801376e:	6023      	str	r3, [r4, #0]
 8013770:	f8d8 3000 	ldr.w	r3, [r8]
 8013774:	2b00      	cmp	r3, #0
 8013776:	d038      	beq.n	80137ea <_malloc_r+0xf6>
 8013778:	685a      	ldr	r2, [r3, #4]
 801377a:	42a2      	cmp	r2, r4
 801377c:	d12b      	bne.n	80137d6 <_malloc_r+0xe2>
 801377e:	2200      	movs	r2, #0
 8013780:	605a      	str	r2, [r3, #4]
 8013782:	e00f      	b.n	80137a4 <_malloc_r+0xb0>
 8013784:	6822      	ldr	r2, [r4, #0]
 8013786:	1b52      	subs	r2, r2, r5
 8013788:	d41f      	bmi.n	80137ca <_malloc_r+0xd6>
 801378a:	2a0b      	cmp	r2, #11
 801378c:	d917      	bls.n	80137be <_malloc_r+0xca>
 801378e:	1961      	adds	r1, r4, r5
 8013790:	42a3      	cmp	r3, r4
 8013792:	6025      	str	r5, [r4, #0]
 8013794:	bf18      	it	ne
 8013796:	6059      	strne	r1, [r3, #4]
 8013798:	6863      	ldr	r3, [r4, #4]
 801379a:	bf08      	it	eq
 801379c:	f8c8 1000 	streq.w	r1, [r8]
 80137a0:	5162      	str	r2, [r4, r5]
 80137a2:	604b      	str	r3, [r1, #4]
 80137a4:	4638      	mov	r0, r7
 80137a6:	f104 060b 	add.w	r6, r4, #11
 80137aa:	f000 f829 	bl	8013800 <__malloc_unlock>
 80137ae:	f026 0607 	bic.w	r6, r6, #7
 80137b2:	1d23      	adds	r3, r4, #4
 80137b4:	1af2      	subs	r2, r6, r3
 80137b6:	d0ae      	beq.n	8013716 <_malloc_r+0x22>
 80137b8:	1b9b      	subs	r3, r3, r6
 80137ba:	50a3      	str	r3, [r4, r2]
 80137bc:	e7ab      	b.n	8013716 <_malloc_r+0x22>
 80137be:	42a3      	cmp	r3, r4
 80137c0:	6862      	ldr	r2, [r4, #4]
 80137c2:	d1dd      	bne.n	8013780 <_malloc_r+0x8c>
 80137c4:	f8c8 2000 	str.w	r2, [r8]
 80137c8:	e7ec      	b.n	80137a4 <_malloc_r+0xb0>
 80137ca:	4623      	mov	r3, r4
 80137cc:	6864      	ldr	r4, [r4, #4]
 80137ce:	e7ac      	b.n	801372a <_malloc_r+0x36>
 80137d0:	4634      	mov	r4, r6
 80137d2:	6876      	ldr	r6, [r6, #4]
 80137d4:	e7b4      	b.n	8013740 <_malloc_r+0x4c>
 80137d6:	4613      	mov	r3, r2
 80137d8:	e7cc      	b.n	8013774 <_malloc_r+0x80>
 80137da:	230c      	movs	r3, #12
 80137dc:	603b      	str	r3, [r7, #0]
 80137de:	4638      	mov	r0, r7
 80137e0:	f000 f80e 	bl	8013800 <__malloc_unlock>
 80137e4:	e797      	b.n	8013716 <_malloc_r+0x22>
 80137e6:	6025      	str	r5, [r4, #0]
 80137e8:	e7dc      	b.n	80137a4 <_malloc_r+0xb0>
 80137ea:	605b      	str	r3, [r3, #4]
 80137ec:	deff      	udf	#255	; 0xff
 80137ee:	bf00      	nop
 80137f0:	20000904 	.word	0x20000904

080137f4 <__malloc_lock>:
 80137f4:	4801      	ldr	r0, [pc, #4]	; (80137fc <__malloc_lock+0x8>)
 80137f6:	f7ff b877 	b.w	80128e8 <__retarget_lock_acquire_recursive>
 80137fa:	bf00      	nop
 80137fc:	20000900 	.word	0x20000900

08013800 <__malloc_unlock>:
 8013800:	4801      	ldr	r0, [pc, #4]	; (8013808 <__malloc_unlock+0x8>)
 8013802:	f7ff b872 	b.w	80128ea <__retarget_lock_release_recursive>
 8013806:	bf00      	nop
 8013808:	20000900 	.word	0x20000900

0801380c <_Balloc>:
 801380c:	b570      	push	{r4, r5, r6, lr}
 801380e:	69c6      	ldr	r6, [r0, #28]
 8013810:	4604      	mov	r4, r0
 8013812:	460d      	mov	r5, r1
 8013814:	b976      	cbnz	r6, 8013834 <_Balloc+0x28>
 8013816:	2010      	movs	r0, #16
 8013818:	f7ff ff44 	bl	80136a4 <malloc>
 801381c:	4602      	mov	r2, r0
 801381e:	61e0      	str	r0, [r4, #28]
 8013820:	b920      	cbnz	r0, 801382c <_Balloc+0x20>
 8013822:	4b18      	ldr	r3, [pc, #96]	; (8013884 <_Balloc+0x78>)
 8013824:	4818      	ldr	r0, [pc, #96]	; (8013888 <_Balloc+0x7c>)
 8013826:	216b      	movs	r1, #107	; 0x6b
 8013828:	f001 ff8a 	bl	8015740 <__assert_func>
 801382c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013830:	6006      	str	r6, [r0, #0]
 8013832:	60c6      	str	r6, [r0, #12]
 8013834:	69e6      	ldr	r6, [r4, #28]
 8013836:	68f3      	ldr	r3, [r6, #12]
 8013838:	b183      	cbz	r3, 801385c <_Balloc+0x50>
 801383a:	69e3      	ldr	r3, [r4, #28]
 801383c:	68db      	ldr	r3, [r3, #12]
 801383e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013842:	b9b8      	cbnz	r0, 8013874 <_Balloc+0x68>
 8013844:	2101      	movs	r1, #1
 8013846:	fa01 f605 	lsl.w	r6, r1, r5
 801384a:	1d72      	adds	r2, r6, #5
 801384c:	0092      	lsls	r2, r2, #2
 801384e:	4620      	mov	r0, r4
 8013850:	f001 ff94 	bl	801577c <_calloc_r>
 8013854:	b160      	cbz	r0, 8013870 <_Balloc+0x64>
 8013856:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801385a:	e00e      	b.n	801387a <_Balloc+0x6e>
 801385c:	2221      	movs	r2, #33	; 0x21
 801385e:	2104      	movs	r1, #4
 8013860:	4620      	mov	r0, r4
 8013862:	f001 ff8b 	bl	801577c <_calloc_r>
 8013866:	69e3      	ldr	r3, [r4, #28]
 8013868:	60f0      	str	r0, [r6, #12]
 801386a:	68db      	ldr	r3, [r3, #12]
 801386c:	2b00      	cmp	r3, #0
 801386e:	d1e4      	bne.n	801383a <_Balloc+0x2e>
 8013870:	2000      	movs	r0, #0
 8013872:	bd70      	pop	{r4, r5, r6, pc}
 8013874:	6802      	ldr	r2, [r0, #0]
 8013876:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801387a:	2300      	movs	r3, #0
 801387c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013880:	e7f7      	b.n	8013872 <_Balloc+0x66>
 8013882:	bf00      	nop
 8013884:	0801845e 	.word	0x0801845e
 8013888:	080184de 	.word	0x080184de

0801388c <_Bfree>:
 801388c:	b570      	push	{r4, r5, r6, lr}
 801388e:	69c6      	ldr	r6, [r0, #28]
 8013890:	4605      	mov	r5, r0
 8013892:	460c      	mov	r4, r1
 8013894:	b976      	cbnz	r6, 80138b4 <_Bfree+0x28>
 8013896:	2010      	movs	r0, #16
 8013898:	f7ff ff04 	bl	80136a4 <malloc>
 801389c:	4602      	mov	r2, r0
 801389e:	61e8      	str	r0, [r5, #28]
 80138a0:	b920      	cbnz	r0, 80138ac <_Bfree+0x20>
 80138a2:	4b09      	ldr	r3, [pc, #36]	; (80138c8 <_Bfree+0x3c>)
 80138a4:	4809      	ldr	r0, [pc, #36]	; (80138cc <_Bfree+0x40>)
 80138a6:	218f      	movs	r1, #143	; 0x8f
 80138a8:	f001 ff4a 	bl	8015740 <__assert_func>
 80138ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80138b0:	6006      	str	r6, [r0, #0]
 80138b2:	60c6      	str	r6, [r0, #12]
 80138b4:	b13c      	cbz	r4, 80138c6 <_Bfree+0x3a>
 80138b6:	69eb      	ldr	r3, [r5, #28]
 80138b8:	6862      	ldr	r2, [r4, #4]
 80138ba:	68db      	ldr	r3, [r3, #12]
 80138bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80138c0:	6021      	str	r1, [r4, #0]
 80138c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80138c6:	bd70      	pop	{r4, r5, r6, pc}
 80138c8:	0801845e 	.word	0x0801845e
 80138cc:	080184de 	.word	0x080184de

080138d0 <__multadd>:
 80138d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138d4:	690d      	ldr	r5, [r1, #16]
 80138d6:	4607      	mov	r7, r0
 80138d8:	460c      	mov	r4, r1
 80138da:	461e      	mov	r6, r3
 80138dc:	f101 0c14 	add.w	ip, r1, #20
 80138e0:	2000      	movs	r0, #0
 80138e2:	f8dc 3000 	ldr.w	r3, [ip]
 80138e6:	b299      	uxth	r1, r3
 80138e8:	fb02 6101 	mla	r1, r2, r1, r6
 80138ec:	0c1e      	lsrs	r6, r3, #16
 80138ee:	0c0b      	lsrs	r3, r1, #16
 80138f0:	fb02 3306 	mla	r3, r2, r6, r3
 80138f4:	b289      	uxth	r1, r1
 80138f6:	3001      	adds	r0, #1
 80138f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80138fc:	4285      	cmp	r5, r0
 80138fe:	f84c 1b04 	str.w	r1, [ip], #4
 8013902:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013906:	dcec      	bgt.n	80138e2 <__multadd+0x12>
 8013908:	b30e      	cbz	r6, 801394e <__multadd+0x7e>
 801390a:	68a3      	ldr	r3, [r4, #8]
 801390c:	42ab      	cmp	r3, r5
 801390e:	dc19      	bgt.n	8013944 <__multadd+0x74>
 8013910:	6861      	ldr	r1, [r4, #4]
 8013912:	4638      	mov	r0, r7
 8013914:	3101      	adds	r1, #1
 8013916:	f7ff ff79 	bl	801380c <_Balloc>
 801391a:	4680      	mov	r8, r0
 801391c:	b928      	cbnz	r0, 801392a <__multadd+0x5a>
 801391e:	4602      	mov	r2, r0
 8013920:	4b0c      	ldr	r3, [pc, #48]	; (8013954 <__multadd+0x84>)
 8013922:	480d      	ldr	r0, [pc, #52]	; (8013958 <__multadd+0x88>)
 8013924:	21ba      	movs	r1, #186	; 0xba
 8013926:	f001 ff0b 	bl	8015740 <__assert_func>
 801392a:	6922      	ldr	r2, [r4, #16]
 801392c:	3202      	adds	r2, #2
 801392e:	f104 010c 	add.w	r1, r4, #12
 8013932:	0092      	lsls	r2, r2, #2
 8013934:	300c      	adds	r0, #12
 8013936:	f7fe ffd9 	bl	80128ec <memcpy>
 801393a:	4621      	mov	r1, r4
 801393c:	4638      	mov	r0, r7
 801393e:	f7ff ffa5 	bl	801388c <_Bfree>
 8013942:	4644      	mov	r4, r8
 8013944:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013948:	3501      	adds	r5, #1
 801394a:	615e      	str	r6, [r3, #20]
 801394c:	6125      	str	r5, [r4, #16]
 801394e:	4620      	mov	r0, r4
 8013950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013954:	080184cd 	.word	0x080184cd
 8013958:	080184de 	.word	0x080184de

0801395c <__s2b>:
 801395c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013960:	460c      	mov	r4, r1
 8013962:	4615      	mov	r5, r2
 8013964:	461f      	mov	r7, r3
 8013966:	2209      	movs	r2, #9
 8013968:	3308      	adds	r3, #8
 801396a:	4606      	mov	r6, r0
 801396c:	fb93 f3f2 	sdiv	r3, r3, r2
 8013970:	2100      	movs	r1, #0
 8013972:	2201      	movs	r2, #1
 8013974:	429a      	cmp	r2, r3
 8013976:	db09      	blt.n	801398c <__s2b+0x30>
 8013978:	4630      	mov	r0, r6
 801397a:	f7ff ff47 	bl	801380c <_Balloc>
 801397e:	b940      	cbnz	r0, 8013992 <__s2b+0x36>
 8013980:	4602      	mov	r2, r0
 8013982:	4b19      	ldr	r3, [pc, #100]	; (80139e8 <__s2b+0x8c>)
 8013984:	4819      	ldr	r0, [pc, #100]	; (80139ec <__s2b+0x90>)
 8013986:	21d3      	movs	r1, #211	; 0xd3
 8013988:	f001 feda 	bl	8015740 <__assert_func>
 801398c:	0052      	lsls	r2, r2, #1
 801398e:	3101      	adds	r1, #1
 8013990:	e7f0      	b.n	8013974 <__s2b+0x18>
 8013992:	9b08      	ldr	r3, [sp, #32]
 8013994:	6143      	str	r3, [r0, #20]
 8013996:	2d09      	cmp	r5, #9
 8013998:	f04f 0301 	mov.w	r3, #1
 801399c:	6103      	str	r3, [r0, #16]
 801399e:	dd16      	ble.n	80139ce <__s2b+0x72>
 80139a0:	f104 0909 	add.w	r9, r4, #9
 80139a4:	46c8      	mov	r8, r9
 80139a6:	442c      	add	r4, r5
 80139a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80139ac:	4601      	mov	r1, r0
 80139ae:	3b30      	subs	r3, #48	; 0x30
 80139b0:	220a      	movs	r2, #10
 80139b2:	4630      	mov	r0, r6
 80139b4:	f7ff ff8c 	bl	80138d0 <__multadd>
 80139b8:	45a0      	cmp	r8, r4
 80139ba:	d1f5      	bne.n	80139a8 <__s2b+0x4c>
 80139bc:	f1a5 0408 	sub.w	r4, r5, #8
 80139c0:	444c      	add	r4, r9
 80139c2:	1b2d      	subs	r5, r5, r4
 80139c4:	1963      	adds	r3, r4, r5
 80139c6:	42bb      	cmp	r3, r7
 80139c8:	db04      	blt.n	80139d4 <__s2b+0x78>
 80139ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139ce:	340a      	adds	r4, #10
 80139d0:	2509      	movs	r5, #9
 80139d2:	e7f6      	b.n	80139c2 <__s2b+0x66>
 80139d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80139d8:	4601      	mov	r1, r0
 80139da:	3b30      	subs	r3, #48	; 0x30
 80139dc:	220a      	movs	r2, #10
 80139de:	4630      	mov	r0, r6
 80139e0:	f7ff ff76 	bl	80138d0 <__multadd>
 80139e4:	e7ee      	b.n	80139c4 <__s2b+0x68>
 80139e6:	bf00      	nop
 80139e8:	080184cd 	.word	0x080184cd
 80139ec:	080184de 	.word	0x080184de

080139f0 <__hi0bits>:
 80139f0:	0c03      	lsrs	r3, r0, #16
 80139f2:	041b      	lsls	r3, r3, #16
 80139f4:	b9d3      	cbnz	r3, 8013a2c <__hi0bits+0x3c>
 80139f6:	0400      	lsls	r0, r0, #16
 80139f8:	2310      	movs	r3, #16
 80139fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80139fe:	bf04      	itt	eq
 8013a00:	0200      	lsleq	r0, r0, #8
 8013a02:	3308      	addeq	r3, #8
 8013a04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013a08:	bf04      	itt	eq
 8013a0a:	0100      	lsleq	r0, r0, #4
 8013a0c:	3304      	addeq	r3, #4
 8013a0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013a12:	bf04      	itt	eq
 8013a14:	0080      	lsleq	r0, r0, #2
 8013a16:	3302      	addeq	r3, #2
 8013a18:	2800      	cmp	r0, #0
 8013a1a:	db05      	blt.n	8013a28 <__hi0bits+0x38>
 8013a1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013a20:	f103 0301 	add.w	r3, r3, #1
 8013a24:	bf08      	it	eq
 8013a26:	2320      	moveq	r3, #32
 8013a28:	4618      	mov	r0, r3
 8013a2a:	4770      	bx	lr
 8013a2c:	2300      	movs	r3, #0
 8013a2e:	e7e4      	b.n	80139fa <__hi0bits+0xa>

08013a30 <__lo0bits>:
 8013a30:	6803      	ldr	r3, [r0, #0]
 8013a32:	f013 0207 	ands.w	r2, r3, #7
 8013a36:	d00c      	beq.n	8013a52 <__lo0bits+0x22>
 8013a38:	07d9      	lsls	r1, r3, #31
 8013a3a:	d422      	bmi.n	8013a82 <__lo0bits+0x52>
 8013a3c:	079a      	lsls	r2, r3, #30
 8013a3e:	bf49      	itett	mi
 8013a40:	085b      	lsrmi	r3, r3, #1
 8013a42:	089b      	lsrpl	r3, r3, #2
 8013a44:	6003      	strmi	r3, [r0, #0]
 8013a46:	2201      	movmi	r2, #1
 8013a48:	bf5c      	itt	pl
 8013a4a:	6003      	strpl	r3, [r0, #0]
 8013a4c:	2202      	movpl	r2, #2
 8013a4e:	4610      	mov	r0, r2
 8013a50:	4770      	bx	lr
 8013a52:	b299      	uxth	r1, r3
 8013a54:	b909      	cbnz	r1, 8013a5a <__lo0bits+0x2a>
 8013a56:	0c1b      	lsrs	r3, r3, #16
 8013a58:	2210      	movs	r2, #16
 8013a5a:	b2d9      	uxtb	r1, r3
 8013a5c:	b909      	cbnz	r1, 8013a62 <__lo0bits+0x32>
 8013a5e:	3208      	adds	r2, #8
 8013a60:	0a1b      	lsrs	r3, r3, #8
 8013a62:	0719      	lsls	r1, r3, #28
 8013a64:	bf04      	itt	eq
 8013a66:	091b      	lsreq	r3, r3, #4
 8013a68:	3204      	addeq	r2, #4
 8013a6a:	0799      	lsls	r1, r3, #30
 8013a6c:	bf04      	itt	eq
 8013a6e:	089b      	lsreq	r3, r3, #2
 8013a70:	3202      	addeq	r2, #2
 8013a72:	07d9      	lsls	r1, r3, #31
 8013a74:	d403      	bmi.n	8013a7e <__lo0bits+0x4e>
 8013a76:	085b      	lsrs	r3, r3, #1
 8013a78:	f102 0201 	add.w	r2, r2, #1
 8013a7c:	d003      	beq.n	8013a86 <__lo0bits+0x56>
 8013a7e:	6003      	str	r3, [r0, #0]
 8013a80:	e7e5      	b.n	8013a4e <__lo0bits+0x1e>
 8013a82:	2200      	movs	r2, #0
 8013a84:	e7e3      	b.n	8013a4e <__lo0bits+0x1e>
 8013a86:	2220      	movs	r2, #32
 8013a88:	e7e1      	b.n	8013a4e <__lo0bits+0x1e>
	...

08013a8c <__i2b>:
 8013a8c:	b510      	push	{r4, lr}
 8013a8e:	460c      	mov	r4, r1
 8013a90:	2101      	movs	r1, #1
 8013a92:	f7ff febb 	bl	801380c <_Balloc>
 8013a96:	4602      	mov	r2, r0
 8013a98:	b928      	cbnz	r0, 8013aa6 <__i2b+0x1a>
 8013a9a:	4b05      	ldr	r3, [pc, #20]	; (8013ab0 <__i2b+0x24>)
 8013a9c:	4805      	ldr	r0, [pc, #20]	; (8013ab4 <__i2b+0x28>)
 8013a9e:	f240 1145 	movw	r1, #325	; 0x145
 8013aa2:	f001 fe4d 	bl	8015740 <__assert_func>
 8013aa6:	2301      	movs	r3, #1
 8013aa8:	6144      	str	r4, [r0, #20]
 8013aaa:	6103      	str	r3, [r0, #16]
 8013aac:	bd10      	pop	{r4, pc}
 8013aae:	bf00      	nop
 8013ab0:	080184cd 	.word	0x080184cd
 8013ab4:	080184de 	.word	0x080184de

08013ab8 <__multiply>:
 8013ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013abc:	4691      	mov	r9, r2
 8013abe:	690a      	ldr	r2, [r1, #16]
 8013ac0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013ac4:	429a      	cmp	r2, r3
 8013ac6:	bfb8      	it	lt
 8013ac8:	460b      	movlt	r3, r1
 8013aca:	460c      	mov	r4, r1
 8013acc:	bfbc      	itt	lt
 8013ace:	464c      	movlt	r4, r9
 8013ad0:	4699      	movlt	r9, r3
 8013ad2:	6927      	ldr	r7, [r4, #16]
 8013ad4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013ad8:	68a3      	ldr	r3, [r4, #8]
 8013ada:	6861      	ldr	r1, [r4, #4]
 8013adc:	eb07 060a 	add.w	r6, r7, sl
 8013ae0:	42b3      	cmp	r3, r6
 8013ae2:	b085      	sub	sp, #20
 8013ae4:	bfb8      	it	lt
 8013ae6:	3101      	addlt	r1, #1
 8013ae8:	f7ff fe90 	bl	801380c <_Balloc>
 8013aec:	b930      	cbnz	r0, 8013afc <__multiply+0x44>
 8013aee:	4602      	mov	r2, r0
 8013af0:	4b44      	ldr	r3, [pc, #272]	; (8013c04 <__multiply+0x14c>)
 8013af2:	4845      	ldr	r0, [pc, #276]	; (8013c08 <__multiply+0x150>)
 8013af4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8013af8:	f001 fe22 	bl	8015740 <__assert_func>
 8013afc:	f100 0514 	add.w	r5, r0, #20
 8013b00:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013b04:	462b      	mov	r3, r5
 8013b06:	2200      	movs	r2, #0
 8013b08:	4543      	cmp	r3, r8
 8013b0a:	d321      	bcc.n	8013b50 <__multiply+0x98>
 8013b0c:	f104 0314 	add.w	r3, r4, #20
 8013b10:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013b14:	f109 0314 	add.w	r3, r9, #20
 8013b18:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013b1c:	9202      	str	r2, [sp, #8]
 8013b1e:	1b3a      	subs	r2, r7, r4
 8013b20:	3a15      	subs	r2, #21
 8013b22:	f022 0203 	bic.w	r2, r2, #3
 8013b26:	3204      	adds	r2, #4
 8013b28:	f104 0115 	add.w	r1, r4, #21
 8013b2c:	428f      	cmp	r7, r1
 8013b2e:	bf38      	it	cc
 8013b30:	2204      	movcc	r2, #4
 8013b32:	9201      	str	r2, [sp, #4]
 8013b34:	9a02      	ldr	r2, [sp, #8]
 8013b36:	9303      	str	r3, [sp, #12]
 8013b38:	429a      	cmp	r2, r3
 8013b3a:	d80c      	bhi.n	8013b56 <__multiply+0x9e>
 8013b3c:	2e00      	cmp	r6, #0
 8013b3e:	dd03      	ble.n	8013b48 <__multiply+0x90>
 8013b40:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d05b      	beq.n	8013c00 <__multiply+0x148>
 8013b48:	6106      	str	r6, [r0, #16]
 8013b4a:	b005      	add	sp, #20
 8013b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b50:	f843 2b04 	str.w	r2, [r3], #4
 8013b54:	e7d8      	b.n	8013b08 <__multiply+0x50>
 8013b56:	f8b3 a000 	ldrh.w	sl, [r3]
 8013b5a:	f1ba 0f00 	cmp.w	sl, #0
 8013b5e:	d024      	beq.n	8013baa <__multiply+0xf2>
 8013b60:	f104 0e14 	add.w	lr, r4, #20
 8013b64:	46a9      	mov	r9, r5
 8013b66:	f04f 0c00 	mov.w	ip, #0
 8013b6a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013b6e:	f8d9 1000 	ldr.w	r1, [r9]
 8013b72:	fa1f fb82 	uxth.w	fp, r2
 8013b76:	b289      	uxth	r1, r1
 8013b78:	fb0a 110b 	mla	r1, sl, fp, r1
 8013b7c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013b80:	f8d9 2000 	ldr.w	r2, [r9]
 8013b84:	4461      	add	r1, ip
 8013b86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013b8a:	fb0a c20b 	mla	r2, sl, fp, ip
 8013b8e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013b92:	b289      	uxth	r1, r1
 8013b94:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013b98:	4577      	cmp	r7, lr
 8013b9a:	f849 1b04 	str.w	r1, [r9], #4
 8013b9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013ba2:	d8e2      	bhi.n	8013b6a <__multiply+0xb2>
 8013ba4:	9a01      	ldr	r2, [sp, #4]
 8013ba6:	f845 c002 	str.w	ip, [r5, r2]
 8013baa:	9a03      	ldr	r2, [sp, #12]
 8013bac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013bb0:	3304      	adds	r3, #4
 8013bb2:	f1b9 0f00 	cmp.w	r9, #0
 8013bb6:	d021      	beq.n	8013bfc <__multiply+0x144>
 8013bb8:	6829      	ldr	r1, [r5, #0]
 8013bba:	f104 0c14 	add.w	ip, r4, #20
 8013bbe:	46ae      	mov	lr, r5
 8013bc0:	f04f 0a00 	mov.w	sl, #0
 8013bc4:	f8bc b000 	ldrh.w	fp, [ip]
 8013bc8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013bcc:	fb09 220b 	mla	r2, r9, fp, r2
 8013bd0:	4452      	add	r2, sl
 8013bd2:	b289      	uxth	r1, r1
 8013bd4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013bd8:	f84e 1b04 	str.w	r1, [lr], #4
 8013bdc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013be0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013be4:	f8be 1000 	ldrh.w	r1, [lr]
 8013be8:	fb09 110a 	mla	r1, r9, sl, r1
 8013bec:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8013bf0:	4567      	cmp	r7, ip
 8013bf2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013bf6:	d8e5      	bhi.n	8013bc4 <__multiply+0x10c>
 8013bf8:	9a01      	ldr	r2, [sp, #4]
 8013bfa:	50a9      	str	r1, [r5, r2]
 8013bfc:	3504      	adds	r5, #4
 8013bfe:	e799      	b.n	8013b34 <__multiply+0x7c>
 8013c00:	3e01      	subs	r6, #1
 8013c02:	e79b      	b.n	8013b3c <__multiply+0x84>
 8013c04:	080184cd 	.word	0x080184cd
 8013c08:	080184de 	.word	0x080184de

08013c0c <__pow5mult>:
 8013c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c10:	4615      	mov	r5, r2
 8013c12:	f012 0203 	ands.w	r2, r2, #3
 8013c16:	4606      	mov	r6, r0
 8013c18:	460f      	mov	r7, r1
 8013c1a:	d007      	beq.n	8013c2c <__pow5mult+0x20>
 8013c1c:	4c25      	ldr	r4, [pc, #148]	; (8013cb4 <__pow5mult+0xa8>)
 8013c1e:	3a01      	subs	r2, #1
 8013c20:	2300      	movs	r3, #0
 8013c22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013c26:	f7ff fe53 	bl	80138d0 <__multadd>
 8013c2a:	4607      	mov	r7, r0
 8013c2c:	10ad      	asrs	r5, r5, #2
 8013c2e:	d03d      	beq.n	8013cac <__pow5mult+0xa0>
 8013c30:	69f4      	ldr	r4, [r6, #28]
 8013c32:	b97c      	cbnz	r4, 8013c54 <__pow5mult+0x48>
 8013c34:	2010      	movs	r0, #16
 8013c36:	f7ff fd35 	bl	80136a4 <malloc>
 8013c3a:	4602      	mov	r2, r0
 8013c3c:	61f0      	str	r0, [r6, #28]
 8013c3e:	b928      	cbnz	r0, 8013c4c <__pow5mult+0x40>
 8013c40:	4b1d      	ldr	r3, [pc, #116]	; (8013cb8 <__pow5mult+0xac>)
 8013c42:	481e      	ldr	r0, [pc, #120]	; (8013cbc <__pow5mult+0xb0>)
 8013c44:	f240 11b3 	movw	r1, #435	; 0x1b3
 8013c48:	f001 fd7a 	bl	8015740 <__assert_func>
 8013c4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013c50:	6004      	str	r4, [r0, #0]
 8013c52:	60c4      	str	r4, [r0, #12]
 8013c54:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8013c58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013c5c:	b94c      	cbnz	r4, 8013c72 <__pow5mult+0x66>
 8013c5e:	f240 2171 	movw	r1, #625	; 0x271
 8013c62:	4630      	mov	r0, r6
 8013c64:	f7ff ff12 	bl	8013a8c <__i2b>
 8013c68:	2300      	movs	r3, #0
 8013c6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8013c6e:	4604      	mov	r4, r0
 8013c70:	6003      	str	r3, [r0, #0]
 8013c72:	f04f 0900 	mov.w	r9, #0
 8013c76:	07eb      	lsls	r3, r5, #31
 8013c78:	d50a      	bpl.n	8013c90 <__pow5mult+0x84>
 8013c7a:	4639      	mov	r1, r7
 8013c7c:	4622      	mov	r2, r4
 8013c7e:	4630      	mov	r0, r6
 8013c80:	f7ff ff1a 	bl	8013ab8 <__multiply>
 8013c84:	4639      	mov	r1, r7
 8013c86:	4680      	mov	r8, r0
 8013c88:	4630      	mov	r0, r6
 8013c8a:	f7ff fdff 	bl	801388c <_Bfree>
 8013c8e:	4647      	mov	r7, r8
 8013c90:	106d      	asrs	r5, r5, #1
 8013c92:	d00b      	beq.n	8013cac <__pow5mult+0xa0>
 8013c94:	6820      	ldr	r0, [r4, #0]
 8013c96:	b938      	cbnz	r0, 8013ca8 <__pow5mult+0x9c>
 8013c98:	4622      	mov	r2, r4
 8013c9a:	4621      	mov	r1, r4
 8013c9c:	4630      	mov	r0, r6
 8013c9e:	f7ff ff0b 	bl	8013ab8 <__multiply>
 8013ca2:	6020      	str	r0, [r4, #0]
 8013ca4:	f8c0 9000 	str.w	r9, [r0]
 8013ca8:	4604      	mov	r4, r0
 8013caa:	e7e4      	b.n	8013c76 <__pow5mult+0x6a>
 8013cac:	4638      	mov	r0, r7
 8013cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cb2:	bf00      	nop
 8013cb4:	08018628 	.word	0x08018628
 8013cb8:	0801845e 	.word	0x0801845e
 8013cbc:	080184de 	.word	0x080184de

08013cc0 <__lshift>:
 8013cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013cc4:	460c      	mov	r4, r1
 8013cc6:	6849      	ldr	r1, [r1, #4]
 8013cc8:	6923      	ldr	r3, [r4, #16]
 8013cca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013cce:	68a3      	ldr	r3, [r4, #8]
 8013cd0:	4607      	mov	r7, r0
 8013cd2:	4691      	mov	r9, r2
 8013cd4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013cd8:	f108 0601 	add.w	r6, r8, #1
 8013cdc:	42b3      	cmp	r3, r6
 8013cde:	db0b      	blt.n	8013cf8 <__lshift+0x38>
 8013ce0:	4638      	mov	r0, r7
 8013ce2:	f7ff fd93 	bl	801380c <_Balloc>
 8013ce6:	4605      	mov	r5, r0
 8013ce8:	b948      	cbnz	r0, 8013cfe <__lshift+0x3e>
 8013cea:	4602      	mov	r2, r0
 8013cec:	4b28      	ldr	r3, [pc, #160]	; (8013d90 <__lshift+0xd0>)
 8013cee:	4829      	ldr	r0, [pc, #164]	; (8013d94 <__lshift+0xd4>)
 8013cf0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8013cf4:	f001 fd24 	bl	8015740 <__assert_func>
 8013cf8:	3101      	adds	r1, #1
 8013cfa:	005b      	lsls	r3, r3, #1
 8013cfc:	e7ee      	b.n	8013cdc <__lshift+0x1c>
 8013cfe:	2300      	movs	r3, #0
 8013d00:	f100 0114 	add.w	r1, r0, #20
 8013d04:	f100 0210 	add.w	r2, r0, #16
 8013d08:	4618      	mov	r0, r3
 8013d0a:	4553      	cmp	r3, sl
 8013d0c:	db33      	blt.n	8013d76 <__lshift+0xb6>
 8013d0e:	6920      	ldr	r0, [r4, #16]
 8013d10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013d14:	f104 0314 	add.w	r3, r4, #20
 8013d18:	f019 091f 	ands.w	r9, r9, #31
 8013d1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013d20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013d24:	d02b      	beq.n	8013d7e <__lshift+0xbe>
 8013d26:	f1c9 0e20 	rsb	lr, r9, #32
 8013d2a:	468a      	mov	sl, r1
 8013d2c:	2200      	movs	r2, #0
 8013d2e:	6818      	ldr	r0, [r3, #0]
 8013d30:	fa00 f009 	lsl.w	r0, r0, r9
 8013d34:	4310      	orrs	r0, r2
 8013d36:	f84a 0b04 	str.w	r0, [sl], #4
 8013d3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d3e:	459c      	cmp	ip, r3
 8013d40:	fa22 f20e 	lsr.w	r2, r2, lr
 8013d44:	d8f3      	bhi.n	8013d2e <__lshift+0x6e>
 8013d46:	ebac 0304 	sub.w	r3, ip, r4
 8013d4a:	3b15      	subs	r3, #21
 8013d4c:	f023 0303 	bic.w	r3, r3, #3
 8013d50:	3304      	adds	r3, #4
 8013d52:	f104 0015 	add.w	r0, r4, #21
 8013d56:	4584      	cmp	ip, r0
 8013d58:	bf38      	it	cc
 8013d5a:	2304      	movcc	r3, #4
 8013d5c:	50ca      	str	r2, [r1, r3]
 8013d5e:	b10a      	cbz	r2, 8013d64 <__lshift+0xa4>
 8013d60:	f108 0602 	add.w	r6, r8, #2
 8013d64:	3e01      	subs	r6, #1
 8013d66:	4638      	mov	r0, r7
 8013d68:	612e      	str	r6, [r5, #16]
 8013d6a:	4621      	mov	r1, r4
 8013d6c:	f7ff fd8e 	bl	801388c <_Bfree>
 8013d70:	4628      	mov	r0, r5
 8013d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d76:	f842 0f04 	str.w	r0, [r2, #4]!
 8013d7a:	3301      	adds	r3, #1
 8013d7c:	e7c5      	b.n	8013d0a <__lshift+0x4a>
 8013d7e:	3904      	subs	r1, #4
 8013d80:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d84:	f841 2f04 	str.w	r2, [r1, #4]!
 8013d88:	459c      	cmp	ip, r3
 8013d8a:	d8f9      	bhi.n	8013d80 <__lshift+0xc0>
 8013d8c:	e7ea      	b.n	8013d64 <__lshift+0xa4>
 8013d8e:	bf00      	nop
 8013d90:	080184cd 	.word	0x080184cd
 8013d94:	080184de 	.word	0x080184de

08013d98 <__mcmp>:
 8013d98:	b530      	push	{r4, r5, lr}
 8013d9a:	6902      	ldr	r2, [r0, #16]
 8013d9c:	690c      	ldr	r4, [r1, #16]
 8013d9e:	1b12      	subs	r2, r2, r4
 8013da0:	d10e      	bne.n	8013dc0 <__mcmp+0x28>
 8013da2:	f100 0314 	add.w	r3, r0, #20
 8013da6:	3114      	adds	r1, #20
 8013da8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013dac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013db0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013db4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013db8:	42a5      	cmp	r5, r4
 8013dba:	d003      	beq.n	8013dc4 <__mcmp+0x2c>
 8013dbc:	d305      	bcc.n	8013dca <__mcmp+0x32>
 8013dbe:	2201      	movs	r2, #1
 8013dc0:	4610      	mov	r0, r2
 8013dc2:	bd30      	pop	{r4, r5, pc}
 8013dc4:	4283      	cmp	r3, r0
 8013dc6:	d3f3      	bcc.n	8013db0 <__mcmp+0x18>
 8013dc8:	e7fa      	b.n	8013dc0 <__mcmp+0x28>
 8013dca:	f04f 32ff 	mov.w	r2, #4294967295
 8013dce:	e7f7      	b.n	8013dc0 <__mcmp+0x28>

08013dd0 <__mdiff>:
 8013dd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dd4:	460c      	mov	r4, r1
 8013dd6:	4606      	mov	r6, r0
 8013dd8:	4611      	mov	r1, r2
 8013dda:	4620      	mov	r0, r4
 8013ddc:	4690      	mov	r8, r2
 8013dde:	f7ff ffdb 	bl	8013d98 <__mcmp>
 8013de2:	1e05      	subs	r5, r0, #0
 8013de4:	d110      	bne.n	8013e08 <__mdiff+0x38>
 8013de6:	4629      	mov	r1, r5
 8013de8:	4630      	mov	r0, r6
 8013dea:	f7ff fd0f 	bl	801380c <_Balloc>
 8013dee:	b930      	cbnz	r0, 8013dfe <__mdiff+0x2e>
 8013df0:	4b3a      	ldr	r3, [pc, #232]	; (8013edc <__mdiff+0x10c>)
 8013df2:	4602      	mov	r2, r0
 8013df4:	f240 2137 	movw	r1, #567	; 0x237
 8013df8:	4839      	ldr	r0, [pc, #228]	; (8013ee0 <__mdiff+0x110>)
 8013dfa:	f001 fca1 	bl	8015740 <__assert_func>
 8013dfe:	2301      	movs	r3, #1
 8013e00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013e04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e08:	bfa4      	itt	ge
 8013e0a:	4643      	movge	r3, r8
 8013e0c:	46a0      	movge	r8, r4
 8013e0e:	4630      	mov	r0, r6
 8013e10:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013e14:	bfa6      	itte	ge
 8013e16:	461c      	movge	r4, r3
 8013e18:	2500      	movge	r5, #0
 8013e1a:	2501      	movlt	r5, #1
 8013e1c:	f7ff fcf6 	bl	801380c <_Balloc>
 8013e20:	b920      	cbnz	r0, 8013e2c <__mdiff+0x5c>
 8013e22:	4b2e      	ldr	r3, [pc, #184]	; (8013edc <__mdiff+0x10c>)
 8013e24:	4602      	mov	r2, r0
 8013e26:	f240 2145 	movw	r1, #581	; 0x245
 8013e2a:	e7e5      	b.n	8013df8 <__mdiff+0x28>
 8013e2c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013e30:	6926      	ldr	r6, [r4, #16]
 8013e32:	60c5      	str	r5, [r0, #12]
 8013e34:	f104 0914 	add.w	r9, r4, #20
 8013e38:	f108 0514 	add.w	r5, r8, #20
 8013e3c:	f100 0e14 	add.w	lr, r0, #20
 8013e40:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013e44:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013e48:	f108 0210 	add.w	r2, r8, #16
 8013e4c:	46f2      	mov	sl, lr
 8013e4e:	2100      	movs	r1, #0
 8013e50:	f859 3b04 	ldr.w	r3, [r9], #4
 8013e54:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013e58:	fa11 f88b 	uxtah	r8, r1, fp
 8013e5c:	b299      	uxth	r1, r3
 8013e5e:	0c1b      	lsrs	r3, r3, #16
 8013e60:	eba8 0801 	sub.w	r8, r8, r1
 8013e64:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013e68:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013e6c:	fa1f f888 	uxth.w	r8, r8
 8013e70:	1419      	asrs	r1, r3, #16
 8013e72:	454e      	cmp	r6, r9
 8013e74:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013e78:	f84a 3b04 	str.w	r3, [sl], #4
 8013e7c:	d8e8      	bhi.n	8013e50 <__mdiff+0x80>
 8013e7e:	1b33      	subs	r3, r6, r4
 8013e80:	3b15      	subs	r3, #21
 8013e82:	f023 0303 	bic.w	r3, r3, #3
 8013e86:	3304      	adds	r3, #4
 8013e88:	3415      	adds	r4, #21
 8013e8a:	42a6      	cmp	r6, r4
 8013e8c:	bf38      	it	cc
 8013e8e:	2304      	movcc	r3, #4
 8013e90:	441d      	add	r5, r3
 8013e92:	4473      	add	r3, lr
 8013e94:	469e      	mov	lr, r3
 8013e96:	462e      	mov	r6, r5
 8013e98:	4566      	cmp	r6, ip
 8013e9a:	d30e      	bcc.n	8013eba <__mdiff+0xea>
 8013e9c:	f10c 0203 	add.w	r2, ip, #3
 8013ea0:	1b52      	subs	r2, r2, r5
 8013ea2:	f022 0203 	bic.w	r2, r2, #3
 8013ea6:	3d03      	subs	r5, #3
 8013ea8:	45ac      	cmp	ip, r5
 8013eaa:	bf38      	it	cc
 8013eac:	2200      	movcc	r2, #0
 8013eae:	4413      	add	r3, r2
 8013eb0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8013eb4:	b17a      	cbz	r2, 8013ed6 <__mdiff+0x106>
 8013eb6:	6107      	str	r7, [r0, #16]
 8013eb8:	e7a4      	b.n	8013e04 <__mdiff+0x34>
 8013eba:	f856 8b04 	ldr.w	r8, [r6], #4
 8013ebe:	fa11 f288 	uxtah	r2, r1, r8
 8013ec2:	1414      	asrs	r4, r2, #16
 8013ec4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013ec8:	b292      	uxth	r2, r2
 8013eca:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013ece:	f84e 2b04 	str.w	r2, [lr], #4
 8013ed2:	1421      	asrs	r1, r4, #16
 8013ed4:	e7e0      	b.n	8013e98 <__mdiff+0xc8>
 8013ed6:	3f01      	subs	r7, #1
 8013ed8:	e7ea      	b.n	8013eb0 <__mdiff+0xe0>
 8013eda:	bf00      	nop
 8013edc:	080184cd 	.word	0x080184cd
 8013ee0:	080184de 	.word	0x080184de

08013ee4 <__ulp>:
 8013ee4:	b082      	sub	sp, #8
 8013ee6:	ed8d 0b00 	vstr	d0, [sp]
 8013eea:	9a01      	ldr	r2, [sp, #4]
 8013eec:	4b0f      	ldr	r3, [pc, #60]	; (8013f2c <__ulp+0x48>)
 8013eee:	4013      	ands	r3, r2
 8013ef0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	dc08      	bgt.n	8013f0a <__ulp+0x26>
 8013ef8:	425b      	negs	r3, r3
 8013efa:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8013efe:	ea4f 5223 	mov.w	r2, r3, asr #20
 8013f02:	da04      	bge.n	8013f0e <__ulp+0x2a>
 8013f04:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013f08:	4113      	asrs	r3, r2
 8013f0a:	2200      	movs	r2, #0
 8013f0c:	e008      	b.n	8013f20 <__ulp+0x3c>
 8013f0e:	f1a2 0314 	sub.w	r3, r2, #20
 8013f12:	2b1e      	cmp	r3, #30
 8013f14:	bfda      	itte	le
 8013f16:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8013f1a:	40da      	lsrle	r2, r3
 8013f1c:	2201      	movgt	r2, #1
 8013f1e:	2300      	movs	r3, #0
 8013f20:	4619      	mov	r1, r3
 8013f22:	4610      	mov	r0, r2
 8013f24:	ec41 0b10 	vmov	d0, r0, r1
 8013f28:	b002      	add	sp, #8
 8013f2a:	4770      	bx	lr
 8013f2c:	7ff00000 	.word	0x7ff00000

08013f30 <__b2d>:
 8013f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f34:	6906      	ldr	r6, [r0, #16]
 8013f36:	f100 0814 	add.w	r8, r0, #20
 8013f3a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8013f3e:	1f37      	subs	r7, r6, #4
 8013f40:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013f44:	4610      	mov	r0, r2
 8013f46:	f7ff fd53 	bl	80139f0 <__hi0bits>
 8013f4a:	f1c0 0320 	rsb	r3, r0, #32
 8013f4e:	280a      	cmp	r0, #10
 8013f50:	600b      	str	r3, [r1, #0]
 8013f52:	491b      	ldr	r1, [pc, #108]	; (8013fc0 <__b2d+0x90>)
 8013f54:	dc15      	bgt.n	8013f82 <__b2d+0x52>
 8013f56:	f1c0 0c0b 	rsb	ip, r0, #11
 8013f5a:	fa22 f30c 	lsr.w	r3, r2, ip
 8013f5e:	45b8      	cmp	r8, r7
 8013f60:	ea43 0501 	orr.w	r5, r3, r1
 8013f64:	bf34      	ite	cc
 8013f66:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013f6a:	2300      	movcs	r3, #0
 8013f6c:	3015      	adds	r0, #21
 8013f6e:	fa02 f000 	lsl.w	r0, r2, r0
 8013f72:	fa23 f30c 	lsr.w	r3, r3, ip
 8013f76:	4303      	orrs	r3, r0
 8013f78:	461c      	mov	r4, r3
 8013f7a:	ec45 4b10 	vmov	d0, r4, r5
 8013f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f82:	45b8      	cmp	r8, r7
 8013f84:	bf3a      	itte	cc
 8013f86:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013f8a:	f1a6 0708 	subcc.w	r7, r6, #8
 8013f8e:	2300      	movcs	r3, #0
 8013f90:	380b      	subs	r0, #11
 8013f92:	d012      	beq.n	8013fba <__b2d+0x8a>
 8013f94:	f1c0 0120 	rsb	r1, r0, #32
 8013f98:	fa23 f401 	lsr.w	r4, r3, r1
 8013f9c:	4082      	lsls	r2, r0
 8013f9e:	4322      	orrs	r2, r4
 8013fa0:	4547      	cmp	r7, r8
 8013fa2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8013fa6:	bf8c      	ite	hi
 8013fa8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8013fac:	2200      	movls	r2, #0
 8013fae:	4083      	lsls	r3, r0
 8013fb0:	40ca      	lsrs	r2, r1
 8013fb2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8013fb6:	4313      	orrs	r3, r2
 8013fb8:	e7de      	b.n	8013f78 <__b2d+0x48>
 8013fba:	ea42 0501 	orr.w	r5, r2, r1
 8013fbe:	e7db      	b.n	8013f78 <__b2d+0x48>
 8013fc0:	3ff00000 	.word	0x3ff00000

08013fc4 <__d2b>:
 8013fc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013fc8:	460f      	mov	r7, r1
 8013fca:	2101      	movs	r1, #1
 8013fcc:	ec59 8b10 	vmov	r8, r9, d0
 8013fd0:	4616      	mov	r6, r2
 8013fd2:	f7ff fc1b 	bl	801380c <_Balloc>
 8013fd6:	4604      	mov	r4, r0
 8013fd8:	b930      	cbnz	r0, 8013fe8 <__d2b+0x24>
 8013fda:	4602      	mov	r2, r0
 8013fdc:	4b24      	ldr	r3, [pc, #144]	; (8014070 <__d2b+0xac>)
 8013fde:	4825      	ldr	r0, [pc, #148]	; (8014074 <__d2b+0xb0>)
 8013fe0:	f240 310f 	movw	r1, #783	; 0x30f
 8013fe4:	f001 fbac 	bl	8015740 <__assert_func>
 8013fe8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013fec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013ff0:	bb2d      	cbnz	r5, 801403e <__d2b+0x7a>
 8013ff2:	9301      	str	r3, [sp, #4]
 8013ff4:	f1b8 0300 	subs.w	r3, r8, #0
 8013ff8:	d026      	beq.n	8014048 <__d2b+0x84>
 8013ffa:	4668      	mov	r0, sp
 8013ffc:	9300      	str	r3, [sp, #0]
 8013ffe:	f7ff fd17 	bl	8013a30 <__lo0bits>
 8014002:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014006:	b1e8      	cbz	r0, 8014044 <__d2b+0x80>
 8014008:	f1c0 0320 	rsb	r3, r0, #32
 801400c:	fa02 f303 	lsl.w	r3, r2, r3
 8014010:	430b      	orrs	r3, r1
 8014012:	40c2      	lsrs	r2, r0
 8014014:	6163      	str	r3, [r4, #20]
 8014016:	9201      	str	r2, [sp, #4]
 8014018:	9b01      	ldr	r3, [sp, #4]
 801401a:	61a3      	str	r3, [r4, #24]
 801401c:	2b00      	cmp	r3, #0
 801401e:	bf14      	ite	ne
 8014020:	2202      	movne	r2, #2
 8014022:	2201      	moveq	r2, #1
 8014024:	6122      	str	r2, [r4, #16]
 8014026:	b1bd      	cbz	r5, 8014058 <__d2b+0x94>
 8014028:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801402c:	4405      	add	r5, r0
 801402e:	603d      	str	r5, [r7, #0]
 8014030:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014034:	6030      	str	r0, [r6, #0]
 8014036:	4620      	mov	r0, r4
 8014038:	b003      	add	sp, #12
 801403a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801403e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014042:	e7d6      	b.n	8013ff2 <__d2b+0x2e>
 8014044:	6161      	str	r1, [r4, #20]
 8014046:	e7e7      	b.n	8014018 <__d2b+0x54>
 8014048:	a801      	add	r0, sp, #4
 801404a:	f7ff fcf1 	bl	8013a30 <__lo0bits>
 801404e:	9b01      	ldr	r3, [sp, #4]
 8014050:	6163      	str	r3, [r4, #20]
 8014052:	3020      	adds	r0, #32
 8014054:	2201      	movs	r2, #1
 8014056:	e7e5      	b.n	8014024 <__d2b+0x60>
 8014058:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801405c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014060:	6038      	str	r0, [r7, #0]
 8014062:	6918      	ldr	r0, [r3, #16]
 8014064:	f7ff fcc4 	bl	80139f0 <__hi0bits>
 8014068:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801406c:	e7e2      	b.n	8014034 <__d2b+0x70>
 801406e:	bf00      	nop
 8014070:	080184cd 	.word	0x080184cd
 8014074:	080184de 	.word	0x080184de

08014078 <__ratio>:
 8014078:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801407c:	4688      	mov	r8, r1
 801407e:	4669      	mov	r1, sp
 8014080:	4681      	mov	r9, r0
 8014082:	f7ff ff55 	bl	8013f30 <__b2d>
 8014086:	a901      	add	r1, sp, #4
 8014088:	4640      	mov	r0, r8
 801408a:	ec55 4b10 	vmov	r4, r5, d0
 801408e:	f7ff ff4f 	bl	8013f30 <__b2d>
 8014092:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014096:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801409a:	eba3 0c02 	sub.w	ip, r3, r2
 801409e:	e9dd 3200 	ldrd	r3, r2, [sp]
 80140a2:	1a9b      	subs	r3, r3, r2
 80140a4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80140a8:	ec51 0b10 	vmov	r0, r1, d0
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	bfd6      	itet	le
 80140b0:	460a      	movle	r2, r1
 80140b2:	462a      	movgt	r2, r5
 80140b4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80140b8:	468b      	mov	fp, r1
 80140ba:	462f      	mov	r7, r5
 80140bc:	bfd4      	ite	le
 80140be:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80140c2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80140c6:	4620      	mov	r0, r4
 80140c8:	ee10 2a10 	vmov	r2, s0
 80140cc:	465b      	mov	r3, fp
 80140ce:	4639      	mov	r1, r7
 80140d0:	f7ec fb94 	bl	80007fc <__aeabi_ddiv>
 80140d4:	ec41 0b10 	vmov	d0, r0, r1
 80140d8:	b003      	add	sp, #12
 80140da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080140de <__copybits>:
 80140de:	3901      	subs	r1, #1
 80140e0:	b570      	push	{r4, r5, r6, lr}
 80140e2:	1149      	asrs	r1, r1, #5
 80140e4:	6914      	ldr	r4, [r2, #16]
 80140e6:	3101      	adds	r1, #1
 80140e8:	f102 0314 	add.w	r3, r2, #20
 80140ec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80140f0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80140f4:	1f05      	subs	r5, r0, #4
 80140f6:	42a3      	cmp	r3, r4
 80140f8:	d30c      	bcc.n	8014114 <__copybits+0x36>
 80140fa:	1aa3      	subs	r3, r4, r2
 80140fc:	3b11      	subs	r3, #17
 80140fe:	f023 0303 	bic.w	r3, r3, #3
 8014102:	3211      	adds	r2, #17
 8014104:	42a2      	cmp	r2, r4
 8014106:	bf88      	it	hi
 8014108:	2300      	movhi	r3, #0
 801410a:	4418      	add	r0, r3
 801410c:	2300      	movs	r3, #0
 801410e:	4288      	cmp	r0, r1
 8014110:	d305      	bcc.n	801411e <__copybits+0x40>
 8014112:	bd70      	pop	{r4, r5, r6, pc}
 8014114:	f853 6b04 	ldr.w	r6, [r3], #4
 8014118:	f845 6f04 	str.w	r6, [r5, #4]!
 801411c:	e7eb      	b.n	80140f6 <__copybits+0x18>
 801411e:	f840 3b04 	str.w	r3, [r0], #4
 8014122:	e7f4      	b.n	801410e <__copybits+0x30>

08014124 <__any_on>:
 8014124:	f100 0214 	add.w	r2, r0, #20
 8014128:	6900      	ldr	r0, [r0, #16]
 801412a:	114b      	asrs	r3, r1, #5
 801412c:	4298      	cmp	r0, r3
 801412e:	b510      	push	{r4, lr}
 8014130:	db11      	blt.n	8014156 <__any_on+0x32>
 8014132:	dd0a      	ble.n	801414a <__any_on+0x26>
 8014134:	f011 011f 	ands.w	r1, r1, #31
 8014138:	d007      	beq.n	801414a <__any_on+0x26>
 801413a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801413e:	fa24 f001 	lsr.w	r0, r4, r1
 8014142:	fa00 f101 	lsl.w	r1, r0, r1
 8014146:	428c      	cmp	r4, r1
 8014148:	d10b      	bne.n	8014162 <__any_on+0x3e>
 801414a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801414e:	4293      	cmp	r3, r2
 8014150:	d803      	bhi.n	801415a <__any_on+0x36>
 8014152:	2000      	movs	r0, #0
 8014154:	bd10      	pop	{r4, pc}
 8014156:	4603      	mov	r3, r0
 8014158:	e7f7      	b.n	801414a <__any_on+0x26>
 801415a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801415e:	2900      	cmp	r1, #0
 8014160:	d0f5      	beq.n	801414e <__any_on+0x2a>
 8014162:	2001      	movs	r0, #1
 8014164:	e7f6      	b.n	8014154 <__any_on+0x30>

08014166 <sulp>:
 8014166:	b570      	push	{r4, r5, r6, lr}
 8014168:	4604      	mov	r4, r0
 801416a:	460d      	mov	r5, r1
 801416c:	ec45 4b10 	vmov	d0, r4, r5
 8014170:	4616      	mov	r6, r2
 8014172:	f7ff feb7 	bl	8013ee4 <__ulp>
 8014176:	ec51 0b10 	vmov	r0, r1, d0
 801417a:	b17e      	cbz	r6, 801419c <sulp+0x36>
 801417c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014180:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014184:	2b00      	cmp	r3, #0
 8014186:	dd09      	ble.n	801419c <sulp+0x36>
 8014188:	051b      	lsls	r3, r3, #20
 801418a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801418e:	2400      	movs	r4, #0
 8014190:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8014194:	4622      	mov	r2, r4
 8014196:	462b      	mov	r3, r5
 8014198:	f7ec fa06 	bl	80005a8 <__aeabi_dmul>
 801419c:	bd70      	pop	{r4, r5, r6, pc}
	...

080141a0 <_strtod_l>:
 80141a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141a4:	ed2d 8b02 	vpush	{d8}
 80141a8:	b09b      	sub	sp, #108	; 0x6c
 80141aa:	4604      	mov	r4, r0
 80141ac:	9213      	str	r2, [sp, #76]	; 0x4c
 80141ae:	2200      	movs	r2, #0
 80141b0:	9216      	str	r2, [sp, #88]	; 0x58
 80141b2:	460d      	mov	r5, r1
 80141b4:	f04f 0800 	mov.w	r8, #0
 80141b8:	f04f 0900 	mov.w	r9, #0
 80141bc:	460a      	mov	r2, r1
 80141be:	9215      	str	r2, [sp, #84]	; 0x54
 80141c0:	7811      	ldrb	r1, [r2, #0]
 80141c2:	292b      	cmp	r1, #43	; 0x2b
 80141c4:	d04c      	beq.n	8014260 <_strtod_l+0xc0>
 80141c6:	d83a      	bhi.n	801423e <_strtod_l+0x9e>
 80141c8:	290d      	cmp	r1, #13
 80141ca:	d834      	bhi.n	8014236 <_strtod_l+0x96>
 80141cc:	2908      	cmp	r1, #8
 80141ce:	d834      	bhi.n	801423a <_strtod_l+0x9a>
 80141d0:	2900      	cmp	r1, #0
 80141d2:	d03d      	beq.n	8014250 <_strtod_l+0xb0>
 80141d4:	2200      	movs	r2, #0
 80141d6:	920a      	str	r2, [sp, #40]	; 0x28
 80141d8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80141da:	7832      	ldrb	r2, [r6, #0]
 80141dc:	2a30      	cmp	r2, #48	; 0x30
 80141de:	f040 80b4 	bne.w	801434a <_strtod_l+0x1aa>
 80141e2:	7872      	ldrb	r2, [r6, #1]
 80141e4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80141e8:	2a58      	cmp	r2, #88	; 0x58
 80141ea:	d170      	bne.n	80142ce <_strtod_l+0x12e>
 80141ec:	9302      	str	r3, [sp, #8]
 80141ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80141f0:	9301      	str	r3, [sp, #4]
 80141f2:	ab16      	add	r3, sp, #88	; 0x58
 80141f4:	9300      	str	r3, [sp, #0]
 80141f6:	4a8e      	ldr	r2, [pc, #568]	; (8014430 <_strtod_l+0x290>)
 80141f8:	ab17      	add	r3, sp, #92	; 0x5c
 80141fa:	a915      	add	r1, sp, #84	; 0x54
 80141fc:	4620      	mov	r0, r4
 80141fe:	f001 fb3b 	bl	8015878 <__gethex>
 8014202:	f010 070f 	ands.w	r7, r0, #15
 8014206:	4605      	mov	r5, r0
 8014208:	d005      	beq.n	8014216 <_strtod_l+0x76>
 801420a:	2f06      	cmp	r7, #6
 801420c:	d12a      	bne.n	8014264 <_strtod_l+0xc4>
 801420e:	3601      	adds	r6, #1
 8014210:	2300      	movs	r3, #0
 8014212:	9615      	str	r6, [sp, #84]	; 0x54
 8014214:	930a      	str	r3, [sp, #40]	; 0x28
 8014216:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014218:	2b00      	cmp	r3, #0
 801421a:	f040 857f 	bne.w	8014d1c <_strtod_l+0xb7c>
 801421e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014220:	b1db      	cbz	r3, 801425a <_strtod_l+0xba>
 8014222:	4642      	mov	r2, r8
 8014224:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014228:	ec43 2b10 	vmov	d0, r2, r3
 801422c:	b01b      	add	sp, #108	; 0x6c
 801422e:	ecbd 8b02 	vpop	{d8}
 8014232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014236:	2920      	cmp	r1, #32
 8014238:	d1cc      	bne.n	80141d4 <_strtod_l+0x34>
 801423a:	3201      	adds	r2, #1
 801423c:	e7bf      	b.n	80141be <_strtod_l+0x1e>
 801423e:	292d      	cmp	r1, #45	; 0x2d
 8014240:	d1c8      	bne.n	80141d4 <_strtod_l+0x34>
 8014242:	2101      	movs	r1, #1
 8014244:	910a      	str	r1, [sp, #40]	; 0x28
 8014246:	1c51      	adds	r1, r2, #1
 8014248:	9115      	str	r1, [sp, #84]	; 0x54
 801424a:	7852      	ldrb	r2, [r2, #1]
 801424c:	2a00      	cmp	r2, #0
 801424e:	d1c3      	bne.n	80141d8 <_strtod_l+0x38>
 8014250:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014252:	9515      	str	r5, [sp, #84]	; 0x54
 8014254:	2b00      	cmp	r3, #0
 8014256:	f040 855f 	bne.w	8014d18 <_strtod_l+0xb78>
 801425a:	4642      	mov	r2, r8
 801425c:	464b      	mov	r3, r9
 801425e:	e7e3      	b.n	8014228 <_strtod_l+0x88>
 8014260:	2100      	movs	r1, #0
 8014262:	e7ef      	b.n	8014244 <_strtod_l+0xa4>
 8014264:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014266:	b13a      	cbz	r2, 8014278 <_strtod_l+0xd8>
 8014268:	2135      	movs	r1, #53	; 0x35
 801426a:	a818      	add	r0, sp, #96	; 0x60
 801426c:	f7ff ff37 	bl	80140de <__copybits>
 8014270:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014272:	4620      	mov	r0, r4
 8014274:	f7ff fb0a 	bl	801388c <_Bfree>
 8014278:	3f01      	subs	r7, #1
 801427a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801427c:	2f04      	cmp	r7, #4
 801427e:	d806      	bhi.n	801428e <_strtod_l+0xee>
 8014280:	e8df f007 	tbb	[pc, r7]
 8014284:	201d0314 	.word	0x201d0314
 8014288:	14          	.byte	0x14
 8014289:	00          	.byte	0x00
 801428a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801428e:	05e9      	lsls	r1, r5, #23
 8014290:	bf48      	it	mi
 8014292:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8014296:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801429a:	0d1b      	lsrs	r3, r3, #20
 801429c:	051b      	lsls	r3, r3, #20
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d1b9      	bne.n	8014216 <_strtod_l+0x76>
 80142a2:	f7fe faf7 	bl	8012894 <__errno>
 80142a6:	2322      	movs	r3, #34	; 0x22
 80142a8:	6003      	str	r3, [r0, #0]
 80142aa:	e7b4      	b.n	8014216 <_strtod_l+0x76>
 80142ac:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80142b0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80142b4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80142b8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80142bc:	e7e7      	b.n	801428e <_strtod_l+0xee>
 80142be:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8014438 <_strtod_l+0x298>
 80142c2:	e7e4      	b.n	801428e <_strtod_l+0xee>
 80142c4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80142c8:	f04f 38ff 	mov.w	r8, #4294967295
 80142cc:	e7df      	b.n	801428e <_strtod_l+0xee>
 80142ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80142d0:	1c5a      	adds	r2, r3, #1
 80142d2:	9215      	str	r2, [sp, #84]	; 0x54
 80142d4:	785b      	ldrb	r3, [r3, #1]
 80142d6:	2b30      	cmp	r3, #48	; 0x30
 80142d8:	d0f9      	beq.n	80142ce <_strtod_l+0x12e>
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d09b      	beq.n	8014216 <_strtod_l+0x76>
 80142de:	2301      	movs	r3, #1
 80142e0:	f04f 0a00 	mov.w	sl, #0
 80142e4:	9304      	str	r3, [sp, #16]
 80142e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80142e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80142ea:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80142ee:	46d3      	mov	fp, sl
 80142f0:	220a      	movs	r2, #10
 80142f2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80142f4:	7806      	ldrb	r6, [r0, #0]
 80142f6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80142fa:	b2d9      	uxtb	r1, r3
 80142fc:	2909      	cmp	r1, #9
 80142fe:	d926      	bls.n	801434e <_strtod_l+0x1ae>
 8014300:	494c      	ldr	r1, [pc, #304]	; (8014434 <_strtod_l+0x294>)
 8014302:	2201      	movs	r2, #1
 8014304:	f001 f9cd 	bl	80156a2 <strncmp>
 8014308:	2800      	cmp	r0, #0
 801430a:	d030      	beq.n	801436e <_strtod_l+0x1ce>
 801430c:	2000      	movs	r0, #0
 801430e:	4632      	mov	r2, r6
 8014310:	9005      	str	r0, [sp, #20]
 8014312:	465e      	mov	r6, fp
 8014314:	4603      	mov	r3, r0
 8014316:	2a65      	cmp	r2, #101	; 0x65
 8014318:	d001      	beq.n	801431e <_strtod_l+0x17e>
 801431a:	2a45      	cmp	r2, #69	; 0x45
 801431c:	d113      	bne.n	8014346 <_strtod_l+0x1a6>
 801431e:	b91e      	cbnz	r6, 8014328 <_strtod_l+0x188>
 8014320:	9a04      	ldr	r2, [sp, #16]
 8014322:	4302      	orrs	r2, r0
 8014324:	d094      	beq.n	8014250 <_strtod_l+0xb0>
 8014326:	2600      	movs	r6, #0
 8014328:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801432a:	1c6a      	adds	r2, r5, #1
 801432c:	9215      	str	r2, [sp, #84]	; 0x54
 801432e:	786a      	ldrb	r2, [r5, #1]
 8014330:	2a2b      	cmp	r2, #43	; 0x2b
 8014332:	d074      	beq.n	801441e <_strtod_l+0x27e>
 8014334:	2a2d      	cmp	r2, #45	; 0x2d
 8014336:	d078      	beq.n	801442a <_strtod_l+0x28a>
 8014338:	f04f 0c00 	mov.w	ip, #0
 801433c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8014340:	2909      	cmp	r1, #9
 8014342:	d97f      	bls.n	8014444 <_strtod_l+0x2a4>
 8014344:	9515      	str	r5, [sp, #84]	; 0x54
 8014346:	2700      	movs	r7, #0
 8014348:	e09e      	b.n	8014488 <_strtod_l+0x2e8>
 801434a:	2300      	movs	r3, #0
 801434c:	e7c8      	b.n	80142e0 <_strtod_l+0x140>
 801434e:	f1bb 0f08 	cmp.w	fp, #8
 8014352:	bfd8      	it	le
 8014354:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8014356:	f100 0001 	add.w	r0, r0, #1
 801435a:	bfda      	itte	le
 801435c:	fb02 3301 	mlale	r3, r2, r1, r3
 8014360:	9309      	strle	r3, [sp, #36]	; 0x24
 8014362:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8014366:	f10b 0b01 	add.w	fp, fp, #1
 801436a:	9015      	str	r0, [sp, #84]	; 0x54
 801436c:	e7c1      	b.n	80142f2 <_strtod_l+0x152>
 801436e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014370:	1c5a      	adds	r2, r3, #1
 8014372:	9215      	str	r2, [sp, #84]	; 0x54
 8014374:	785a      	ldrb	r2, [r3, #1]
 8014376:	f1bb 0f00 	cmp.w	fp, #0
 801437a:	d037      	beq.n	80143ec <_strtod_l+0x24c>
 801437c:	9005      	str	r0, [sp, #20]
 801437e:	465e      	mov	r6, fp
 8014380:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8014384:	2b09      	cmp	r3, #9
 8014386:	d912      	bls.n	80143ae <_strtod_l+0x20e>
 8014388:	2301      	movs	r3, #1
 801438a:	e7c4      	b.n	8014316 <_strtod_l+0x176>
 801438c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801438e:	1c5a      	adds	r2, r3, #1
 8014390:	9215      	str	r2, [sp, #84]	; 0x54
 8014392:	785a      	ldrb	r2, [r3, #1]
 8014394:	3001      	adds	r0, #1
 8014396:	2a30      	cmp	r2, #48	; 0x30
 8014398:	d0f8      	beq.n	801438c <_strtod_l+0x1ec>
 801439a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801439e:	2b08      	cmp	r3, #8
 80143a0:	f200 84c1 	bhi.w	8014d26 <_strtod_l+0xb86>
 80143a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80143a6:	9005      	str	r0, [sp, #20]
 80143a8:	2000      	movs	r0, #0
 80143aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80143ac:	4606      	mov	r6, r0
 80143ae:	3a30      	subs	r2, #48	; 0x30
 80143b0:	f100 0301 	add.w	r3, r0, #1
 80143b4:	d014      	beq.n	80143e0 <_strtod_l+0x240>
 80143b6:	9905      	ldr	r1, [sp, #20]
 80143b8:	4419      	add	r1, r3
 80143ba:	9105      	str	r1, [sp, #20]
 80143bc:	4633      	mov	r3, r6
 80143be:	eb00 0c06 	add.w	ip, r0, r6
 80143c2:	210a      	movs	r1, #10
 80143c4:	4563      	cmp	r3, ip
 80143c6:	d113      	bne.n	80143f0 <_strtod_l+0x250>
 80143c8:	1833      	adds	r3, r6, r0
 80143ca:	2b08      	cmp	r3, #8
 80143cc:	f106 0601 	add.w	r6, r6, #1
 80143d0:	4406      	add	r6, r0
 80143d2:	dc1a      	bgt.n	801440a <_strtod_l+0x26a>
 80143d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80143d6:	230a      	movs	r3, #10
 80143d8:	fb03 2301 	mla	r3, r3, r1, r2
 80143dc:	9309      	str	r3, [sp, #36]	; 0x24
 80143de:	2300      	movs	r3, #0
 80143e0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80143e2:	1c51      	adds	r1, r2, #1
 80143e4:	9115      	str	r1, [sp, #84]	; 0x54
 80143e6:	7852      	ldrb	r2, [r2, #1]
 80143e8:	4618      	mov	r0, r3
 80143ea:	e7c9      	b.n	8014380 <_strtod_l+0x1e0>
 80143ec:	4658      	mov	r0, fp
 80143ee:	e7d2      	b.n	8014396 <_strtod_l+0x1f6>
 80143f0:	2b08      	cmp	r3, #8
 80143f2:	f103 0301 	add.w	r3, r3, #1
 80143f6:	dc03      	bgt.n	8014400 <_strtod_l+0x260>
 80143f8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80143fa:	434f      	muls	r7, r1
 80143fc:	9709      	str	r7, [sp, #36]	; 0x24
 80143fe:	e7e1      	b.n	80143c4 <_strtod_l+0x224>
 8014400:	2b10      	cmp	r3, #16
 8014402:	bfd8      	it	le
 8014404:	fb01 fa0a 	mulle.w	sl, r1, sl
 8014408:	e7dc      	b.n	80143c4 <_strtod_l+0x224>
 801440a:	2e10      	cmp	r6, #16
 801440c:	bfdc      	itt	le
 801440e:	230a      	movle	r3, #10
 8014410:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8014414:	e7e3      	b.n	80143de <_strtod_l+0x23e>
 8014416:	2300      	movs	r3, #0
 8014418:	9305      	str	r3, [sp, #20]
 801441a:	2301      	movs	r3, #1
 801441c:	e780      	b.n	8014320 <_strtod_l+0x180>
 801441e:	f04f 0c00 	mov.w	ip, #0
 8014422:	1caa      	adds	r2, r5, #2
 8014424:	9215      	str	r2, [sp, #84]	; 0x54
 8014426:	78aa      	ldrb	r2, [r5, #2]
 8014428:	e788      	b.n	801433c <_strtod_l+0x19c>
 801442a:	f04f 0c01 	mov.w	ip, #1
 801442e:	e7f8      	b.n	8014422 <_strtod_l+0x282>
 8014430:	08018638 	.word	0x08018638
 8014434:	08018634 	.word	0x08018634
 8014438:	7ff00000 	.word	0x7ff00000
 801443c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801443e:	1c51      	adds	r1, r2, #1
 8014440:	9115      	str	r1, [sp, #84]	; 0x54
 8014442:	7852      	ldrb	r2, [r2, #1]
 8014444:	2a30      	cmp	r2, #48	; 0x30
 8014446:	d0f9      	beq.n	801443c <_strtod_l+0x29c>
 8014448:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801444c:	2908      	cmp	r1, #8
 801444e:	f63f af7a 	bhi.w	8014346 <_strtod_l+0x1a6>
 8014452:	3a30      	subs	r2, #48	; 0x30
 8014454:	9208      	str	r2, [sp, #32]
 8014456:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014458:	920c      	str	r2, [sp, #48]	; 0x30
 801445a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801445c:	1c57      	adds	r7, r2, #1
 801445e:	9715      	str	r7, [sp, #84]	; 0x54
 8014460:	7852      	ldrb	r2, [r2, #1]
 8014462:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8014466:	f1be 0f09 	cmp.w	lr, #9
 801446a:	d938      	bls.n	80144de <_strtod_l+0x33e>
 801446c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801446e:	1a7f      	subs	r7, r7, r1
 8014470:	2f08      	cmp	r7, #8
 8014472:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8014476:	dc03      	bgt.n	8014480 <_strtod_l+0x2e0>
 8014478:	9908      	ldr	r1, [sp, #32]
 801447a:	428f      	cmp	r7, r1
 801447c:	bfa8      	it	ge
 801447e:	460f      	movge	r7, r1
 8014480:	f1bc 0f00 	cmp.w	ip, #0
 8014484:	d000      	beq.n	8014488 <_strtod_l+0x2e8>
 8014486:	427f      	negs	r7, r7
 8014488:	2e00      	cmp	r6, #0
 801448a:	d14f      	bne.n	801452c <_strtod_l+0x38c>
 801448c:	9904      	ldr	r1, [sp, #16]
 801448e:	4301      	orrs	r1, r0
 8014490:	f47f aec1 	bne.w	8014216 <_strtod_l+0x76>
 8014494:	2b00      	cmp	r3, #0
 8014496:	f47f aedb 	bne.w	8014250 <_strtod_l+0xb0>
 801449a:	2a69      	cmp	r2, #105	; 0x69
 801449c:	d029      	beq.n	80144f2 <_strtod_l+0x352>
 801449e:	dc26      	bgt.n	80144ee <_strtod_l+0x34e>
 80144a0:	2a49      	cmp	r2, #73	; 0x49
 80144a2:	d026      	beq.n	80144f2 <_strtod_l+0x352>
 80144a4:	2a4e      	cmp	r2, #78	; 0x4e
 80144a6:	f47f aed3 	bne.w	8014250 <_strtod_l+0xb0>
 80144aa:	499b      	ldr	r1, [pc, #620]	; (8014718 <_strtod_l+0x578>)
 80144ac:	a815      	add	r0, sp, #84	; 0x54
 80144ae:	f001 fc23 	bl	8015cf8 <__match>
 80144b2:	2800      	cmp	r0, #0
 80144b4:	f43f aecc 	beq.w	8014250 <_strtod_l+0xb0>
 80144b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80144ba:	781b      	ldrb	r3, [r3, #0]
 80144bc:	2b28      	cmp	r3, #40	; 0x28
 80144be:	d12f      	bne.n	8014520 <_strtod_l+0x380>
 80144c0:	4996      	ldr	r1, [pc, #600]	; (801471c <_strtod_l+0x57c>)
 80144c2:	aa18      	add	r2, sp, #96	; 0x60
 80144c4:	a815      	add	r0, sp, #84	; 0x54
 80144c6:	f001 fc2b 	bl	8015d20 <__hexnan>
 80144ca:	2805      	cmp	r0, #5
 80144cc:	d128      	bne.n	8014520 <_strtod_l+0x380>
 80144ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80144d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80144d4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80144d8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80144dc:	e69b      	b.n	8014216 <_strtod_l+0x76>
 80144de:	9f08      	ldr	r7, [sp, #32]
 80144e0:	210a      	movs	r1, #10
 80144e2:	fb01 2107 	mla	r1, r1, r7, r2
 80144e6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80144ea:	9208      	str	r2, [sp, #32]
 80144ec:	e7b5      	b.n	801445a <_strtod_l+0x2ba>
 80144ee:	2a6e      	cmp	r2, #110	; 0x6e
 80144f0:	e7d9      	b.n	80144a6 <_strtod_l+0x306>
 80144f2:	498b      	ldr	r1, [pc, #556]	; (8014720 <_strtod_l+0x580>)
 80144f4:	a815      	add	r0, sp, #84	; 0x54
 80144f6:	f001 fbff 	bl	8015cf8 <__match>
 80144fa:	2800      	cmp	r0, #0
 80144fc:	f43f aea8 	beq.w	8014250 <_strtod_l+0xb0>
 8014500:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014502:	4988      	ldr	r1, [pc, #544]	; (8014724 <_strtod_l+0x584>)
 8014504:	3b01      	subs	r3, #1
 8014506:	a815      	add	r0, sp, #84	; 0x54
 8014508:	9315      	str	r3, [sp, #84]	; 0x54
 801450a:	f001 fbf5 	bl	8015cf8 <__match>
 801450e:	b910      	cbnz	r0, 8014516 <_strtod_l+0x376>
 8014510:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014512:	3301      	adds	r3, #1
 8014514:	9315      	str	r3, [sp, #84]	; 0x54
 8014516:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8014734 <_strtod_l+0x594>
 801451a:	f04f 0800 	mov.w	r8, #0
 801451e:	e67a      	b.n	8014216 <_strtod_l+0x76>
 8014520:	4881      	ldr	r0, [pc, #516]	; (8014728 <_strtod_l+0x588>)
 8014522:	f001 f905 	bl	8015730 <nan>
 8014526:	ec59 8b10 	vmov	r8, r9, d0
 801452a:	e674      	b.n	8014216 <_strtod_l+0x76>
 801452c:	9b05      	ldr	r3, [sp, #20]
 801452e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014530:	1afb      	subs	r3, r7, r3
 8014532:	f1bb 0f00 	cmp.w	fp, #0
 8014536:	bf08      	it	eq
 8014538:	46b3      	moveq	fp, r6
 801453a:	2e10      	cmp	r6, #16
 801453c:	9308      	str	r3, [sp, #32]
 801453e:	4635      	mov	r5, r6
 8014540:	bfa8      	it	ge
 8014542:	2510      	movge	r5, #16
 8014544:	f7eb ffb6 	bl	80004b4 <__aeabi_ui2d>
 8014548:	2e09      	cmp	r6, #9
 801454a:	4680      	mov	r8, r0
 801454c:	4689      	mov	r9, r1
 801454e:	dd13      	ble.n	8014578 <_strtod_l+0x3d8>
 8014550:	4b76      	ldr	r3, [pc, #472]	; (801472c <_strtod_l+0x58c>)
 8014552:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014556:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801455a:	f7ec f825 	bl	80005a8 <__aeabi_dmul>
 801455e:	4680      	mov	r8, r0
 8014560:	4650      	mov	r0, sl
 8014562:	4689      	mov	r9, r1
 8014564:	f7eb ffa6 	bl	80004b4 <__aeabi_ui2d>
 8014568:	4602      	mov	r2, r0
 801456a:	460b      	mov	r3, r1
 801456c:	4640      	mov	r0, r8
 801456e:	4649      	mov	r1, r9
 8014570:	f7eb fe64 	bl	800023c <__adddf3>
 8014574:	4680      	mov	r8, r0
 8014576:	4689      	mov	r9, r1
 8014578:	2e0f      	cmp	r6, #15
 801457a:	dc38      	bgt.n	80145ee <_strtod_l+0x44e>
 801457c:	9b08      	ldr	r3, [sp, #32]
 801457e:	2b00      	cmp	r3, #0
 8014580:	f43f ae49 	beq.w	8014216 <_strtod_l+0x76>
 8014584:	dd24      	ble.n	80145d0 <_strtod_l+0x430>
 8014586:	2b16      	cmp	r3, #22
 8014588:	dc0b      	bgt.n	80145a2 <_strtod_l+0x402>
 801458a:	4968      	ldr	r1, [pc, #416]	; (801472c <_strtod_l+0x58c>)
 801458c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014590:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014594:	4642      	mov	r2, r8
 8014596:	464b      	mov	r3, r9
 8014598:	f7ec f806 	bl	80005a8 <__aeabi_dmul>
 801459c:	4680      	mov	r8, r0
 801459e:	4689      	mov	r9, r1
 80145a0:	e639      	b.n	8014216 <_strtod_l+0x76>
 80145a2:	9a08      	ldr	r2, [sp, #32]
 80145a4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80145a8:	4293      	cmp	r3, r2
 80145aa:	db20      	blt.n	80145ee <_strtod_l+0x44e>
 80145ac:	4c5f      	ldr	r4, [pc, #380]	; (801472c <_strtod_l+0x58c>)
 80145ae:	f1c6 060f 	rsb	r6, r6, #15
 80145b2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80145b6:	4642      	mov	r2, r8
 80145b8:	464b      	mov	r3, r9
 80145ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80145be:	f7eb fff3 	bl	80005a8 <__aeabi_dmul>
 80145c2:	9b08      	ldr	r3, [sp, #32]
 80145c4:	1b9e      	subs	r6, r3, r6
 80145c6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80145ca:	e9d4 2300 	ldrd	r2, r3, [r4]
 80145ce:	e7e3      	b.n	8014598 <_strtod_l+0x3f8>
 80145d0:	9b08      	ldr	r3, [sp, #32]
 80145d2:	3316      	adds	r3, #22
 80145d4:	db0b      	blt.n	80145ee <_strtod_l+0x44e>
 80145d6:	9b05      	ldr	r3, [sp, #20]
 80145d8:	1bdf      	subs	r7, r3, r7
 80145da:	4b54      	ldr	r3, [pc, #336]	; (801472c <_strtod_l+0x58c>)
 80145dc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80145e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80145e4:	4640      	mov	r0, r8
 80145e6:	4649      	mov	r1, r9
 80145e8:	f7ec f908 	bl	80007fc <__aeabi_ddiv>
 80145ec:	e7d6      	b.n	801459c <_strtod_l+0x3fc>
 80145ee:	9b08      	ldr	r3, [sp, #32]
 80145f0:	1b75      	subs	r5, r6, r5
 80145f2:	441d      	add	r5, r3
 80145f4:	2d00      	cmp	r5, #0
 80145f6:	dd70      	ble.n	80146da <_strtod_l+0x53a>
 80145f8:	f015 030f 	ands.w	r3, r5, #15
 80145fc:	d00a      	beq.n	8014614 <_strtod_l+0x474>
 80145fe:	494b      	ldr	r1, [pc, #300]	; (801472c <_strtod_l+0x58c>)
 8014600:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014604:	4642      	mov	r2, r8
 8014606:	464b      	mov	r3, r9
 8014608:	e9d1 0100 	ldrd	r0, r1, [r1]
 801460c:	f7eb ffcc 	bl	80005a8 <__aeabi_dmul>
 8014610:	4680      	mov	r8, r0
 8014612:	4689      	mov	r9, r1
 8014614:	f035 050f 	bics.w	r5, r5, #15
 8014618:	d04d      	beq.n	80146b6 <_strtod_l+0x516>
 801461a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801461e:	dd22      	ble.n	8014666 <_strtod_l+0x4c6>
 8014620:	2500      	movs	r5, #0
 8014622:	46ab      	mov	fp, r5
 8014624:	9509      	str	r5, [sp, #36]	; 0x24
 8014626:	9505      	str	r5, [sp, #20]
 8014628:	2322      	movs	r3, #34	; 0x22
 801462a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8014734 <_strtod_l+0x594>
 801462e:	6023      	str	r3, [r4, #0]
 8014630:	f04f 0800 	mov.w	r8, #0
 8014634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014636:	2b00      	cmp	r3, #0
 8014638:	f43f aded 	beq.w	8014216 <_strtod_l+0x76>
 801463c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801463e:	4620      	mov	r0, r4
 8014640:	f7ff f924 	bl	801388c <_Bfree>
 8014644:	9905      	ldr	r1, [sp, #20]
 8014646:	4620      	mov	r0, r4
 8014648:	f7ff f920 	bl	801388c <_Bfree>
 801464c:	4659      	mov	r1, fp
 801464e:	4620      	mov	r0, r4
 8014650:	f7ff f91c 	bl	801388c <_Bfree>
 8014654:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014656:	4620      	mov	r0, r4
 8014658:	f7ff f918 	bl	801388c <_Bfree>
 801465c:	4629      	mov	r1, r5
 801465e:	4620      	mov	r0, r4
 8014660:	f7ff f914 	bl	801388c <_Bfree>
 8014664:	e5d7      	b.n	8014216 <_strtod_l+0x76>
 8014666:	4b32      	ldr	r3, [pc, #200]	; (8014730 <_strtod_l+0x590>)
 8014668:	9304      	str	r3, [sp, #16]
 801466a:	2300      	movs	r3, #0
 801466c:	112d      	asrs	r5, r5, #4
 801466e:	4640      	mov	r0, r8
 8014670:	4649      	mov	r1, r9
 8014672:	469a      	mov	sl, r3
 8014674:	2d01      	cmp	r5, #1
 8014676:	dc21      	bgt.n	80146bc <_strtod_l+0x51c>
 8014678:	b10b      	cbz	r3, 801467e <_strtod_l+0x4de>
 801467a:	4680      	mov	r8, r0
 801467c:	4689      	mov	r9, r1
 801467e:	492c      	ldr	r1, [pc, #176]	; (8014730 <_strtod_l+0x590>)
 8014680:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8014684:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014688:	4642      	mov	r2, r8
 801468a:	464b      	mov	r3, r9
 801468c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014690:	f7eb ff8a 	bl	80005a8 <__aeabi_dmul>
 8014694:	4b27      	ldr	r3, [pc, #156]	; (8014734 <_strtod_l+0x594>)
 8014696:	460a      	mov	r2, r1
 8014698:	400b      	ands	r3, r1
 801469a:	4927      	ldr	r1, [pc, #156]	; (8014738 <_strtod_l+0x598>)
 801469c:	428b      	cmp	r3, r1
 801469e:	4680      	mov	r8, r0
 80146a0:	d8be      	bhi.n	8014620 <_strtod_l+0x480>
 80146a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80146a6:	428b      	cmp	r3, r1
 80146a8:	bf86      	itte	hi
 80146aa:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801473c <_strtod_l+0x59c>
 80146ae:	f04f 38ff 	movhi.w	r8, #4294967295
 80146b2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80146b6:	2300      	movs	r3, #0
 80146b8:	9304      	str	r3, [sp, #16]
 80146ba:	e07b      	b.n	80147b4 <_strtod_l+0x614>
 80146bc:	07ea      	lsls	r2, r5, #31
 80146be:	d505      	bpl.n	80146cc <_strtod_l+0x52c>
 80146c0:	9b04      	ldr	r3, [sp, #16]
 80146c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146c6:	f7eb ff6f 	bl	80005a8 <__aeabi_dmul>
 80146ca:	2301      	movs	r3, #1
 80146cc:	9a04      	ldr	r2, [sp, #16]
 80146ce:	3208      	adds	r2, #8
 80146d0:	f10a 0a01 	add.w	sl, sl, #1
 80146d4:	106d      	asrs	r5, r5, #1
 80146d6:	9204      	str	r2, [sp, #16]
 80146d8:	e7cc      	b.n	8014674 <_strtod_l+0x4d4>
 80146da:	d0ec      	beq.n	80146b6 <_strtod_l+0x516>
 80146dc:	426d      	negs	r5, r5
 80146de:	f015 020f 	ands.w	r2, r5, #15
 80146e2:	d00a      	beq.n	80146fa <_strtod_l+0x55a>
 80146e4:	4b11      	ldr	r3, [pc, #68]	; (801472c <_strtod_l+0x58c>)
 80146e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80146ea:	4640      	mov	r0, r8
 80146ec:	4649      	mov	r1, r9
 80146ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146f2:	f7ec f883 	bl	80007fc <__aeabi_ddiv>
 80146f6:	4680      	mov	r8, r0
 80146f8:	4689      	mov	r9, r1
 80146fa:	112d      	asrs	r5, r5, #4
 80146fc:	d0db      	beq.n	80146b6 <_strtod_l+0x516>
 80146fe:	2d1f      	cmp	r5, #31
 8014700:	dd1e      	ble.n	8014740 <_strtod_l+0x5a0>
 8014702:	2500      	movs	r5, #0
 8014704:	46ab      	mov	fp, r5
 8014706:	9509      	str	r5, [sp, #36]	; 0x24
 8014708:	9505      	str	r5, [sp, #20]
 801470a:	2322      	movs	r3, #34	; 0x22
 801470c:	f04f 0800 	mov.w	r8, #0
 8014710:	f04f 0900 	mov.w	r9, #0
 8014714:	6023      	str	r3, [r4, #0]
 8014716:	e78d      	b.n	8014634 <_strtod_l+0x494>
 8014718:	08018425 	.word	0x08018425
 801471c:	0801864c 	.word	0x0801864c
 8014720:	0801841d 	.word	0x0801841d
 8014724:	08018454 	.word	0x08018454
 8014728:	080187dd 	.word	0x080187dd
 801472c:	08018560 	.word	0x08018560
 8014730:	08018538 	.word	0x08018538
 8014734:	7ff00000 	.word	0x7ff00000
 8014738:	7ca00000 	.word	0x7ca00000
 801473c:	7fefffff 	.word	0x7fefffff
 8014740:	f015 0310 	ands.w	r3, r5, #16
 8014744:	bf18      	it	ne
 8014746:	236a      	movne	r3, #106	; 0x6a
 8014748:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8014aec <_strtod_l+0x94c>
 801474c:	9304      	str	r3, [sp, #16]
 801474e:	4640      	mov	r0, r8
 8014750:	4649      	mov	r1, r9
 8014752:	2300      	movs	r3, #0
 8014754:	07ea      	lsls	r2, r5, #31
 8014756:	d504      	bpl.n	8014762 <_strtod_l+0x5c2>
 8014758:	e9da 2300 	ldrd	r2, r3, [sl]
 801475c:	f7eb ff24 	bl	80005a8 <__aeabi_dmul>
 8014760:	2301      	movs	r3, #1
 8014762:	106d      	asrs	r5, r5, #1
 8014764:	f10a 0a08 	add.w	sl, sl, #8
 8014768:	d1f4      	bne.n	8014754 <_strtod_l+0x5b4>
 801476a:	b10b      	cbz	r3, 8014770 <_strtod_l+0x5d0>
 801476c:	4680      	mov	r8, r0
 801476e:	4689      	mov	r9, r1
 8014770:	9b04      	ldr	r3, [sp, #16]
 8014772:	b1bb      	cbz	r3, 80147a4 <_strtod_l+0x604>
 8014774:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8014778:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801477c:	2b00      	cmp	r3, #0
 801477e:	4649      	mov	r1, r9
 8014780:	dd10      	ble.n	80147a4 <_strtod_l+0x604>
 8014782:	2b1f      	cmp	r3, #31
 8014784:	f340 811e 	ble.w	80149c4 <_strtod_l+0x824>
 8014788:	2b34      	cmp	r3, #52	; 0x34
 801478a:	bfde      	ittt	le
 801478c:	f04f 33ff 	movle.w	r3, #4294967295
 8014790:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8014794:	4093      	lslle	r3, r2
 8014796:	f04f 0800 	mov.w	r8, #0
 801479a:	bfcc      	ite	gt
 801479c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80147a0:	ea03 0901 	andle.w	r9, r3, r1
 80147a4:	2200      	movs	r2, #0
 80147a6:	2300      	movs	r3, #0
 80147a8:	4640      	mov	r0, r8
 80147aa:	4649      	mov	r1, r9
 80147ac:	f7ec f964 	bl	8000a78 <__aeabi_dcmpeq>
 80147b0:	2800      	cmp	r0, #0
 80147b2:	d1a6      	bne.n	8014702 <_strtod_l+0x562>
 80147b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147b6:	9300      	str	r3, [sp, #0]
 80147b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80147ba:	4633      	mov	r3, r6
 80147bc:	465a      	mov	r2, fp
 80147be:	4620      	mov	r0, r4
 80147c0:	f7ff f8cc 	bl	801395c <__s2b>
 80147c4:	9009      	str	r0, [sp, #36]	; 0x24
 80147c6:	2800      	cmp	r0, #0
 80147c8:	f43f af2a 	beq.w	8014620 <_strtod_l+0x480>
 80147cc:	9a08      	ldr	r2, [sp, #32]
 80147ce:	9b05      	ldr	r3, [sp, #20]
 80147d0:	2a00      	cmp	r2, #0
 80147d2:	eba3 0307 	sub.w	r3, r3, r7
 80147d6:	bfa8      	it	ge
 80147d8:	2300      	movge	r3, #0
 80147da:	930c      	str	r3, [sp, #48]	; 0x30
 80147dc:	2500      	movs	r5, #0
 80147de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80147e2:	9312      	str	r3, [sp, #72]	; 0x48
 80147e4:	46ab      	mov	fp, r5
 80147e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147e8:	4620      	mov	r0, r4
 80147ea:	6859      	ldr	r1, [r3, #4]
 80147ec:	f7ff f80e 	bl	801380c <_Balloc>
 80147f0:	9005      	str	r0, [sp, #20]
 80147f2:	2800      	cmp	r0, #0
 80147f4:	f43f af18 	beq.w	8014628 <_strtod_l+0x488>
 80147f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147fa:	691a      	ldr	r2, [r3, #16]
 80147fc:	3202      	adds	r2, #2
 80147fe:	f103 010c 	add.w	r1, r3, #12
 8014802:	0092      	lsls	r2, r2, #2
 8014804:	300c      	adds	r0, #12
 8014806:	f7fe f871 	bl	80128ec <memcpy>
 801480a:	ec49 8b10 	vmov	d0, r8, r9
 801480e:	aa18      	add	r2, sp, #96	; 0x60
 8014810:	a917      	add	r1, sp, #92	; 0x5c
 8014812:	4620      	mov	r0, r4
 8014814:	f7ff fbd6 	bl	8013fc4 <__d2b>
 8014818:	ec49 8b18 	vmov	d8, r8, r9
 801481c:	9016      	str	r0, [sp, #88]	; 0x58
 801481e:	2800      	cmp	r0, #0
 8014820:	f43f af02 	beq.w	8014628 <_strtod_l+0x488>
 8014824:	2101      	movs	r1, #1
 8014826:	4620      	mov	r0, r4
 8014828:	f7ff f930 	bl	8013a8c <__i2b>
 801482c:	4683      	mov	fp, r0
 801482e:	2800      	cmp	r0, #0
 8014830:	f43f aefa 	beq.w	8014628 <_strtod_l+0x488>
 8014834:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8014836:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014838:	2e00      	cmp	r6, #0
 801483a:	bfab      	itete	ge
 801483c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801483e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8014840:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8014842:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8014846:	bfac      	ite	ge
 8014848:	eb06 0a03 	addge.w	sl, r6, r3
 801484c:	1b9f      	sublt	r7, r3, r6
 801484e:	9b04      	ldr	r3, [sp, #16]
 8014850:	1af6      	subs	r6, r6, r3
 8014852:	4416      	add	r6, r2
 8014854:	4ba0      	ldr	r3, [pc, #640]	; (8014ad8 <_strtod_l+0x938>)
 8014856:	3e01      	subs	r6, #1
 8014858:	429e      	cmp	r6, r3
 801485a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801485e:	f280 80c4 	bge.w	80149ea <_strtod_l+0x84a>
 8014862:	1b9b      	subs	r3, r3, r6
 8014864:	2b1f      	cmp	r3, #31
 8014866:	eba2 0203 	sub.w	r2, r2, r3
 801486a:	f04f 0101 	mov.w	r1, #1
 801486e:	f300 80b0 	bgt.w	80149d2 <_strtod_l+0x832>
 8014872:	fa01 f303 	lsl.w	r3, r1, r3
 8014876:	930e      	str	r3, [sp, #56]	; 0x38
 8014878:	2300      	movs	r3, #0
 801487a:	930d      	str	r3, [sp, #52]	; 0x34
 801487c:	eb0a 0602 	add.w	r6, sl, r2
 8014880:	9b04      	ldr	r3, [sp, #16]
 8014882:	45b2      	cmp	sl, r6
 8014884:	4417      	add	r7, r2
 8014886:	441f      	add	r7, r3
 8014888:	4653      	mov	r3, sl
 801488a:	bfa8      	it	ge
 801488c:	4633      	movge	r3, r6
 801488e:	42bb      	cmp	r3, r7
 8014890:	bfa8      	it	ge
 8014892:	463b      	movge	r3, r7
 8014894:	2b00      	cmp	r3, #0
 8014896:	bfc2      	ittt	gt
 8014898:	1af6      	subgt	r6, r6, r3
 801489a:	1aff      	subgt	r7, r7, r3
 801489c:	ebaa 0a03 	subgt.w	sl, sl, r3
 80148a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	dd17      	ble.n	80148d6 <_strtod_l+0x736>
 80148a6:	4659      	mov	r1, fp
 80148a8:	461a      	mov	r2, r3
 80148aa:	4620      	mov	r0, r4
 80148ac:	f7ff f9ae 	bl	8013c0c <__pow5mult>
 80148b0:	4683      	mov	fp, r0
 80148b2:	2800      	cmp	r0, #0
 80148b4:	f43f aeb8 	beq.w	8014628 <_strtod_l+0x488>
 80148b8:	4601      	mov	r1, r0
 80148ba:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80148bc:	4620      	mov	r0, r4
 80148be:	f7ff f8fb 	bl	8013ab8 <__multiply>
 80148c2:	900b      	str	r0, [sp, #44]	; 0x2c
 80148c4:	2800      	cmp	r0, #0
 80148c6:	f43f aeaf 	beq.w	8014628 <_strtod_l+0x488>
 80148ca:	9916      	ldr	r1, [sp, #88]	; 0x58
 80148cc:	4620      	mov	r0, r4
 80148ce:	f7fe ffdd 	bl	801388c <_Bfree>
 80148d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80148d4:	9316      	str	r3, [sp, #88]	; 0x58
 80148d6:	2e00      	cmp	r6, #0
 80148d8:	f300 808c 	bgt.w	80149f4 <_strtod_l+0x854>
 80148dc:	9b08      	ldr	r3, [sp, #32]
 80148de:	2b00      	cmp	r3, #0
 80148e0:	dd08      	ble.n	80148f4 <_strtod_l+0x754>
 80148e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80148e4:	9905      	ldr	r1, [sp, #20]
 80148e6:	4620      	mov	r0, r4
 80148e8:	f7ff f990 	bl	8013c0c <__pow5mult>
 80148ec:	9005      	str	r0, [sp, #20]
 80148ee:	2800      	cmp	r0, #0
 80148f0:	f43f ae9a 	beq.w	8014628 <_strtod_l+0x488>
 80148f4:	2f00      	cmp	r7, #0
 80148f6:	dd08      	ble.n	801490a <_strtod_l+0x76a>
 80148f8:	9905      	ldr	r1, [sp, #20]
 80148fa:	463a      	mov	r2, r7
 80148fc:	4620      	mov	r0, r4
 80148fe:	f7ff f9df 	bl	8013cc0 <__lshift>
 8014902:	9005      	str	r0, [sp, #20]
 8014904:	2800      	cmp	r0, #0
 8014906:	f43f ae8f 	beq.w	8014628 <_strtod_l+0x488>
 801490a:	f1ba 0f00 	cmp.w	sl, #0
 801490e:	dd08      	ble.n	8014922 <_strtod_l+0x782>
 8014910:	4659      	mov	r1, fp
 8014912:	4652      	mov	r2, sl
 8014914:	4620      	mov	r0, r4
 8014916:	f7ff f9d3 	bl	8013cc0 <__lshift>
 801491a:	4683      	mov	fp, r0
 801491c:	2800      	cmp	r0, #0
 801491e:	f43f ae83 	beq.w	8014628 <_strtod_l+0x488>
 8014922:	9a05      	ldr	r2, [sp, #20]
 8014924:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014926:	4620      	mov	r0, r4
 8014928:	f7ff fa52 	bl	8013dd0 <__mdiff>
 801492c:	4605      	mov	r5, r0
 801492e:	2800      	cmp	r0, #0
 8014930:	f43f ae7a 	beq.w	8014628 <_strtod_l+0x488>
 8014934:	68c3      	ldr	r3, [r0, #12]
 8014936:	930b      	str	r3, [sp, #44]	; 0x2c
 8014938:	2300      	movs	r3, #0
 801493a:	60c3      	str	r3, [r0, #12]
 801493c:	4659      	mov	r1, fp
 801493e:	f7ff fa2b 	bl	8013d98 <__mcmp>
 8014942:	2800      	cmp	r0, #0
 8014944:	da60      	bge.n	8014a08 <_strtod_l+0x868>
 8014946:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014948:	ea53 0308 	orrs.w	r3, r3, r8
 801494c:	f040 8084 	bne.w	8014a58 <_strtod_l+0x8b8>
 8014950:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014954:	2b00      	cmp	r3, #0
 8014956:	d17f      	bne.n	8014a58 <_strtod_l+0x8b8>
 8014958:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801495c:	0d1b      	lsrs	r3, r3, #20
 801495e:	051b      	lsls	r3, r3, #20
 8014960:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8014964:	d978      	bls.n	8014a58 <_strtod_l+0x8b8>
 8014966:	696b      	ldr	r3, [r5, #20]
 8014968:	b913      	cbnz	r3, 8014970 <_strtod_l+0x7d0>
 801496a:	692b      	ldr	r3, [r5, #16]
 801496c:	2b01      	cmp	r3, #1
 801496e:	dd73      	ble.n	8014a58 <_strtod_l+0x8b8>
 8014970:	4629      	mov	r1, r5
 8014972:	2201      	movs	r2, #1
 8014974:	4620      	mov	r0, r4
 8014976:	f7ff f9a3 	bl	8013cc0 <__lshift>
 801497a:	4659      	mov	r1, fp
 801497c:	4605      	mov	r5, r0
 801497e:	f7ff fa0b 	bl	8013d98 <__mcmp>
 8014982:	2800      	cmp	r0, #0
 8014984:	dd68      	ble.n	8014a58 <_strtod_l+0x8b8>
 8014986:	9904      	ldr	r1, [sp, #16]
 8014988:	4a54      	ldr	r2, [pc, #336]	; (8014adc <_strtod_l+0x93c>)
 801498a:	464b      	mov	r3, r9
 801498c:	2900      	cmp	r1, #0
 801498e:	f000 8084 	beq.w	8014a9a <_strtod_l+0x8fa>
 8014992:	ea02 0109 	and.w	r1, r2, r9
 8014996:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801499a:	dc7e      	bgt.n	8014a9a <_strtod_l+0x8fa>
 801499c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80149a0:	f77f aeb3 	ble.w	801470a <_strtod_l+0x56a>
 80149a4:	4b4e      	ldr	r3, [pc, #312]	; (8014ae0 <_strtod_l+0x940>)
 80149a6:	4640      	mov	r0, r8
 80149a8:	4649      	mov	r1, r9
 80149aa:	2200      	movs	r2, #0
 80149ac:	f7eb fdfc 	bl	80005a8 <__aeabi_dmul>
 80149b0:	4b4a      	ldr	r3, [pc, #296]	; (8014adc <_strtod_l+0x93c>)
 80149b2:	400b      	ands	r3, r1
 80149b4:	4680      	mov	r8, r0
 80149b6:	4689      	mov	r9, r1
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	f47f ae3f 	bne.w	801463c <_strtod_l+0x49c>
 80149be:	2322      	movs	r3, #34	; 0x22
 80149c0:	6023      	str	r3, [r4, #0]
 80149c2:	e63b      	b.n	801463c <_strtod_l+0x49c>
 80149c4:	f04f 32ff 	mov.w	r2, #4294967295
 80149c8:	fa02 f303 	lsl.w	r3, r2, r3
 80149cc:	ea03 0808 	and.w	r8, r3, r8
 80149d0:	e6e8      	b.n	80147a4 <_strtod_l+0x604>
 80149d2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80149d6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80149da:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80149de:	36e2      	adds	r6, #226	; 0xe2
 80149e0:	fa01 f306 	lsl.w	r3, r1, r6
 80149e4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80149e8:	e748      	b.n	801487c <_strtod_l+0x6dc>
 80149ea:	2100      	movs	r1, #0
 80149ec:	2301      	movs	r3, #1
 80149ee:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80149f2:	e743      	b.n	801487c <_strtod_l+0x6dc>
 80149f4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80149f6:	4632      	mov	r2, r6
 80149f8:	4620      	mov	r0, r4
 80149fa:	f7ff f961 	bl	8013cc0 <__lshift>
 80149fe:	9016      	str	r0, [sp, #88]	; 0x58
 8014a00:	2800      	cmp	r0, #0
 8014a02:	f47f af6b 	bne.w	80148dc <_strtod_l+0x73c>
 8014a06:	e60f      	b.n	8014628 <_strtod_l+0x488>
 8014a08:	46ca      	mov	sl, r9
 8014a0a:	d171      	bne.n	8014af0 <_strtod_l+0x950>
 8014a0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014a0e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014a12:	b352      	cbz	r2, 8014a6a <_strtod_l+0x8ca>
 8014a14:	4a33      	ldr	r2, [pc, #204]	; (8014ae4 <_strtod_l+0x944>)
 8014a16:	4293      	cmp	r3, r2
 8014a18:	d12a      	bne.n	8014a70 <_strtod_l+0x8d0>
 8014a1a:	9b04      	ldr	r3, [sp, #16]
 8014a1c:	4641      	mov	r1, r8
 8014a1e:	b1fb      	cbz	r3, 8014a60 <_strtod_l+0x8c0>
 8014a20:	4b2e      	ldr	r3, [pc, #184]	; (8014adc <_strtod_l+0x93c>)
 8014a22:	ea09 0303 	and.w	r3, r9, r3
 8014a26:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8014a2e:	d81a      	bhi.n	8014a66 <_strtod_l+0x8c6>
 8014a30:	0d1b      	lsrs	r3, r3, #20
 8014a32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014a36:	fa02 f303 	lsl.w	r3, r2, r3
 8014a3a:	4299      	cmp	r1, r3
 8014a3c:	d118      	bne.n	8014a70 <_strtod_l+0x8d0>
 8014a3e:	4b2a      	ldr	r3, [pc, #168]	; (8014ae8 <_strtod_l+0x948>)
 8014a40:	459a      	cmp	sl, r3
 8014a42:	d102      	bne.n	8014a4a <_strtod_l+0x8aa>
 8014a44:	3101      	adds	r1, #1
 8014a46:	f43f adef 	beq.w	8014628 <_strtod_l+0x488>
 8014a4a:	4b24      	ldr	r3, [pc, #144]	; (8014adc <_strtod_l+0x93c>)
 8014a4c:	ea0a 0303 	and.w	r3, sl, r3
 8014a50:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8014a54:	f04f 0800 	mov.w	r8, #0
 8014a58:	9b04      	ldr	r3, [sp, #16]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d1a2      	bne.n	80149a4 <_strtod_l+0x804>
 8014a5e:	e5ed      	b.n	801463c <_strtod_l+0x49c>
 8014a60:	f04f 33ff 	mov.w	r3, #4294967295
 8014a64:	e7e9      	b.n	8014a3a <_strtod_l+0x89a>
 8014a66:	4613      	mov	r3, r2
 8014a68:	e7e7      	b.n	8014a3a <_strtod_l+0x89a>
 8014a6a:	ea53 0308 	orrs.w	r3, r3, r8
 8014a6e:	d08a      	beq.n	8014986 <_strtod_l+0x7e6>
 8014a70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a72:	b1e3      	cbz	r3, 8014aae <_strtod_l+0x90e>
 8014a74:	ea13 0f0a 	tst.w	r3, sl
 8014a78:	d0ee      	beq.n	8014a58 <_strtod_l+0x8b8>
 8014a7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014a7c:	9a04      	ldr	r2, [sp, #16]
 8014a7e:	4640      	mov	r0, r8
 8014a80:	4649      	mov	r1, r9
 8014a82:	b1c3      	cbz	r3, 8014ab6 <_strtod_l+0x916>
 8014a84:	f7ff fb6f 	bl	8014166 <sulp>
 8014a88:	4602      	mov	r2, r0
 8014a8a:	460b      	mov	r3, r1
 8014a8c:	ec51 0b18 	vmov	r0, r1, d8
 8014a90:	f7eb fbd4 	bl	800023c <__adddf3>
 8014a94:	4680      	mov	r8, r0
 8014a96:	4689      	mov	r9, r1
 8014a98:	e7de      	b.n	8014a58 <_strtod_l+0x8b8>
 8014a9a:	4013      	ands	r3, r2
 8014a9c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014aa0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8014aa4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8014aa8:	f04f 38ff 	mov.w	r8, #4294967295
 8014aac:	e7d4      	b.n	8014a58 <_strtod_l+0x8b8>
 8014aae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014ab0:	ea13 0f08 	tst.w	r3, r8
 8014ab4:	e7e0      	b.n	8014a78 <_strtod_l+0x8d8>
 8014ab6:	f7ff fb56 	bl	8014166 <sulp>
 8014aba:	4602      	mov	r2, r0
 8014abc:	460b      	mov	r3, r1
 8014abe:	ec51 0b18 	vmov	r0, r1, d8
 8014ac2:	f7eb fbb9 	bl	8000238 <__aeabi_dsub>
 8014ac6:	2200      	movs	r2, #0
 8014ac8:	2300      	movs	r3, #0
 8014aca:	4680      	mov	r8, r0
 8014acc:	4689      	mov	r9, r1
 8014ace:	f7eb ffd3 	bl	8000a78 <__aeabi_dcmpeq>
 8014ad2:	2800      	cmp	r0, #0
 8014ad4:	d0c0      	beq.n	8014a58 <_strtod_l+0x8b8>
 8014ad6:	e618      	b.n	801470a <_strtod_l+0x56a>
 8014ad8:	fffffc02 	.word	0xfffffc02
 8014adc:	7ff00000 	.word	0x7ff00000
 8014ae0:	39500000 	.word	0x39500000
 8014ae4:	000fffff 	.word	0x000fffff
 8014ae8:	7fefffff 	.word	0x7fefffff
 8014aec:	08018660 	.word	0x08018660
 8014af0:	4659      	mov	r1, fp
 8014af2:	4628      	mov	r0, r5
 8014af4:	f7ff fac0 	bl	8014078 <__ratio>
 8014af8:	ec57 6b10 	vmov	r6, r7, d0
 8014afc:	ee10 0a10 	vmov	r0, s0
 8014b00:	2200      	movs	r2, #0
 8014b02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014b06:	4639      	mov	r1, r7
 8014b08:	f7eb ffca 	bl	8000aa0 <__aeabi_dcmple>
 8014b0c:	2800      	cmp	r0, #0
 8014b0e:	d071      	beq.n	8014bf4 <_strtod_l+0xa54>
 8014b10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d17c      	bne.n	8014c10 <_strtod_l+0xa70>
 8014b16:	f1b8 0f00 	cmp.w	r8, #0
 8014b1a:	d15a      	bne.n	8014bd2 <_strtod_l+0xa32>
 8014b1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d15d      	bne.n	8014be0 <_strtod_l+0xa40>
 8014b24:	4b90      	ldr	r3, [pc, #576]	; (8014d68 <_strtod_l+0xbc8>)
 8014b26:	2200      	movs	r2, #0
 8014b28:	4630      	mov	r0, r6
 8014b2a:	4639      	mov	r1, r7
 8014b2c:	f7eb ffae 	bl	8000a8c <__aeabi_dcmplt>
 8014b30:	2800      	cmp	r0, #0
 8014b32:	d15c      	bne.n	8014bee <_strtod_l+0xa4e>
 8014b34:	4630      	mov	r0, r6
 8014b36:	4639      	mov	r1, r7
 8014b38:	4b8c      	ldr	r3, [pc, #560]	; (8014d6c <_strtod_l+0xbcc>)
 8014b3a:	2200      	movs	r2, #0
 8014b3c:	f7eb fd34 	bl	80005a8 <__aeabi_dmul>
 8014b40:	4606      	mov	r6, r0
 8014b42:	460f      	mov	r7, r1
 8014b44:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8014b48:	9606      	str	r6, [sp, #24]
 8014b4a:	9307      	str	r3, [sp, #28]
 8014b4c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014b50:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8014b54:	4b86      	ldr	r3, [pc, #536]	; (8014d70 <_strtod_l+0xbd0>)
 8014b56:	ea0a 0303 	and.w	r3, sl, r3
 8014b5a:	930d      	str	r3, [sp, #52]	; 0x34
 8014b5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014b5e:	4b85      	ldr	r3, [pc, #532]	; (8014d74 <_strtod_l+0xbd4>)
 8014b60:	429a      	cmp	r2, r3
 8014b62:	f040 8090 	bne.w	8014c86 <_strtod_l+0xae6>
 8014b66:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8014b6a:	ec49 8b10 	vmov	d0, r8, r9
 8014b6e:	f7ff f9b9 	bl	8013ee4 <__ulp>
 8014b72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014b76:	ec51 0b10 	vmov	r0, r1, d0
 8014b7a:	f7eb fd15 	bl	80005a8 <__aeabi_dmul>
 8014b7e:	4642      	mov	r2, r8
 8014b80:	464b      	mov	r3, r9
 8014b82:	f7eb fb5b 	bl	800023c <__adddf3>
 8014b86:	460b      	mov	r3, r1
 8014b88:	4979      	ldr	r1, [pc, #484]	; (8014d70 <_strtod_l+0xbd0>)
 8014b8a:	4a7b      	ldr	r2, [pc, #492]	; (8014d78 <_strtod_l+0xbd8>)
 8014b8c:	4019      	ands	r1, r3
 8014b8e:	4291      	cmp	r1, r2
 8014b90:	4680      	mov	r8, r0
 8014b92:	d944      	bls.n	8014c1e <_strtod_l+0xa7e>
 8014b94:	ee18 2a90 	vmov	r2, s17
 8014b98:	4b78      	ldr	r3, [pc, #480]	; (8014d7c <_strtod_l+0xbdc>)
 8014b9a:	429a      	cmp	r2, r3
 8014b9c:	d104      	bne.n	8014ba8 <_strtod_l+0xa08>
 8014b9e:	ee18 3a10 	vmov	r3, s16
 8014ba2:	3301      	adds	r3, #1
 8014ba4:	f43f ad40 	beq.w	8014628 <_strtod_l+0x488>
 8014ba8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8014d7c <_strtod_l+0xbdc>
 8014bac:	f04f 38ff 	mov.w	r8, #4294967295
 8014bb0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014bb2:	4620      	mov	r0, r4
 8014bb4:	f7fe fe6a 	bl	801388c <_Bfree>
 8014bb8:	9905      	ldr	r1, [sp, #20]
 8014bba:	4620      	mov	r0, r4
 8014bbc:	f7fe fe66 	bl	801388c <_Bfree>
 8014bc0:	4659      	mov	r1, fp
 8014bc2:	4620      	mov	r0, r4
 8014bc4:	f7fe fe62 	bl	801388c <_Bfree>
 8014bc8:	4629      	mov	r1, r5
 8014bca:	4620      	mov	r0, r4
 8014bcc:	f7fe fe5e 	bl	801388c <_Bfree>
 8014bd0:	e609      	b.n	80147e6 <_strtod_l+0x646>
 8014bd2:	f1b8 0f01 	cmp.w	r8, #1
 8014bd6:	d103      	bne.n	8014be0 <_strtod_l+0xa40>
 8014bd8:	f1b9 0f00 	cmp.w	r9, #0
 8014bdc:	f43f ad95 	beq.w	801470a <_strtod_l+0x56a>
 8014be0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8014d38 <_strtod_l+0xb98>
 8014be4:	4f60      	ldr	r7, [pc, #384]	; (8014d68 <_strtod_l+0xbc8>)
 8014be6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014bea:	2600      	movs	r6, #0
 8014bec:	e7ae      	b.n	8014b4c <_strtod_l+0x9ac>
 8014bee:	4f5f      	ldr	r7, [pc, #380]	; (8014d6c <_strtod_l+0xbcc>)
 8014bf0:	2600      	movs	r6, #0
 8014bf2:	e7a7      	b.n	8014b44 <_strtod_l+0x9a4>
 8014bf4:	4b5d      	ldr	r3, [pc, #372]	; (8014d6c <_strtod_l+0xbcc>)
 8014bf6:	4630      	mov	r0, r6
 8014bf8:	4639      	mov	r1, r7
 8014bfa:	2200      	movs	r2, #0
 8014bfc:	f7eb fcd4 	bl	80005a8 <__aeabi_dmul>
 8014c00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014c02:	4606      	mov	r6, r0
 8014c04:	460f      	mov	r7, r1
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d09c      	beq.n	8014b44 <_strtod_l+0x9a4>
 8014c0a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8014c0e:	e79d      	b.n	8014b4c <_strtod_l+0x9ac>
 8014c10:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8014d40 <_strtod_l+0xba0>
 8014c14:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014c18:	ec57 6b17 	vmov	r6, r7, d7
 8014c1c:	e796      	b.n	8014b4c <_strtod_l+0x9ac>
 8014c1e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8014c22:	9b04      	ldr	r3, [sp, #16]
 8014c24:	46ca      	mov	sl, r9
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d1c2      	bne.n	8014bb0 <_strtod_l+0xa10>
 8014c2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014c2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014c30:	0d1b      	lsrs	r3, r3, #20
 8014c32:	051b      	lsls	r3, r3, #20
 8014c34:	429a      	cmp	r2, r3
 8014c36:	d1bb      	bne.n	8014bb0 <_strtod_l+0xa10>
 8014c38:	4630      	mov	r0, r6
 8014c3a:	4639      	mov	r1, r7
 8014c3c:	f7ec f814 	bl	8000c68 <__aeabi_d2lz>
 8014c40:	f7eb fc84 	bl	800054c <__aeabi_l2d>
 8014c44:	4602      	mov	r2, r0
 8014c46:	460b      	mov	r3, r1
 8014c48:	4630      	mov	r0, r6
 8014c4a:	4639      	mov	r1, r7
 8014c4c:	f7eb faf4 	bl	8000238 <__aeabi_dsub>
 8014c50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014c52:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014c56:	ea43 0308 	orr.w	r3, r3, r8
 8014c5a:	4313      	orrs	r3, r2
 8014c5c:	4606      	mov	r6, r0
 8014c5e:	460f      	mov	r7, r1
 8014c60:	d054      	beq.n	8014d0c <_strtod_l+0xb6c>
 8014c62:	a339      	add	r3, pc, #228	; (adr r3, 8014d48 <_strtod_l+0xba8>)
 8014c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c68:	f7eb ff10 	bl	8000a8c <__aeabi_dcmplt>
 8014c6c:	2800      	cmp	r0, #0
 8014c6e:	f47f ace5 	bne.w	801463c <_strtod_l+0x49c>
 8014c72:	a337      	add	r3, pc, #220	; (adr r3, 8014d50 <_strtod_l+0xbb0>)
 8014c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c78:	4630      	mov	r0, r6
 8014c7a:	4639      	mov	r1, r7
 8014c7c:	f7eb ff24 	bl	8000ac8 <__aeabi_dcmpgt>
 8014c80:	2800      	cmp	r0, #0
 8014c82:	d095      	beq.n	8014bb0 <_strtod_l+0xa10>
 8014c84:	e4da      	b.n	801463c <_strtod_l+0x49c>
 8014c86:	9b04      	ldr	r3, [sp, #16]
 8014c88:	b333      	cbz	r3, 8014cd8 <_strtod_l+0xb38>
 8014c8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014c8c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014c90:	d822      	bhi.n	8014cd8 <_strtod_l+0xb38>
 8014c92:	a331      	add	r3, pc, #196	; (adr r3, 8014d58 <_strtod_l+0xbb8>)
 8014c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c98:	4630      	mov	r0, r6
 8014c9a:	4639      	mov	r1, r7
 8014c9c:	f7eb ff00 	bl	8000aa0 <__aeabi_dcmple>
 8014ca0:	b1a0      	cbz	r0, 8014ccc <_strtod_l+0xb2c>
 8014ca2:	4639      	mov	r1, r7
 8014ca4:	4630      	mov	r0, r6
 8014ca6:	f7eb ff57 	bl	8000b58 <__aeabi_d2uiz>
 8014caa:	2801      	cmp	r0, #1
 8014cac:	bf38      	it	cc
 8014cae:	2001      	movcc	r0, #1
 8014cb0:	f7eb fc00 	bl	80004b4 <__aeabi_ui2d>
 8014cb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014cb6:	4606      	mov	r6, r0
 8014cb8:	460f      	mov	r7, r1
 8014cba:	bb23      	cbnz	r3, 8014d06 <_strtod_l+0xb66>
 8014cbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014cc0:	9010      	str	r0, [sp, #64]	; 0x40
 8014cc2:	9311      	str	r3, [sp, #68]	; 0x44
 8014cc4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014cc8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8014ccc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014cce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014cd0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014cd4:	1a9b      	subs	r3, r3, r2
 8014cd6:	930f      	str	r3, [sp, #60]	; 0x3c
 8014cd8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8014cdc:	eeb0 0a48 	vmov.f32	s0, s16
 8014ce0:	eef0 0a68 	vmov.f32	s1, s17
 8014ce4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8014ce8:	f7ff f8fc 	bl	8013ee4 <__ulp>
 8014cec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8014cf0:	ec53 2b10 	vmov	r2, r3, d0
 8014cf4:	f7eb fc58 	bl	80005a8 <__aeabi_dmul>
 8014cf8:	ec53 2b18 	vmov	r2, r3, d8
 8014cfc:	f7eb fa9e 	bl	800023c <__adddf3>
 8014d00:	4680      	mov	r8, r0
 8014d02:	4689      	mov	r9, r1
 8014d04:	e78d      	b.n	8014c22 <_strtod_l+0xa82>
 8014d06:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8014d0a:	e7db      	b.n	8014cc4 <_strtod_l+0xb24>
 8014d0c:	a314      	add	r3, pc, #80	; (adr r3, 8014d60 <_strtod_l+0xbc0>)
 8014d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d12:	f7eb febb 	bl	8000a8c <__aeabi_dcmplt>
 8014d16:	e7b3      	b.n	8014c80 <_strtod_l+0xae0>
 8014d18:	2300      	movs	r3, #0
 8014d1a:	930a      	str	r3, [sp, #40]	; 0x28
 8014d1c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014d1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014d20:	6013      	str	r3, [r2, #0]
 8014d22:	f7ff ba7c 	b.w	801421e <_strtod_l+0x7e>
 8014d26:	2a65      	cmp	r2, #101	; 0x65
 8014d28:	f43f ab75 	beq.w	8014416 <_strtod_l+0x276>
 8014d2c:	2a45      	cmp	r2, #69	; 0x45
 8014d2e:	f43f ab72 	beq.w	8014416 <_strtod_l+0x276>
 8014d32:	2301      	movs	r3, #1
 8014d34:	f7ff bbaa 	b.w	801448c <_strtod_l+0x2ec>
 8014d38:	00000000 	.word	0x00000000
 8014d3c:	bff00000 	.word	0xbff00000
 8014d40:	00000000 	.word	0x00000000
 8014d44:	3ff00000 	.word	0x3ff00000
 8014d48:	94a03595 	.word	0x94a03595
 8014d4c:	3fdfffff 	.word	0x3fdfffff
 8014d50:	35afe535 	.word	0x35afe535
 8014d54:	3fe00000 	.word	0x3fe00000
 8014d58:	ffc00000 	.word	0xffc00000
 8014d5c:	41dfffff 	.word	0x41dfffff
 8014d60:	94a03595 	.word	0x94a03595
 8014d64:	3fcfffff 	.word	0x3fcfffff
 8014d68:	3ff00000 	.word	0x3ff00000
 8014d6c:	3fe00000 	.word	0x3fe00000
 8014d70:	7ff00000 	.word	0x7ff00000
 8014d74:	7fe00000 	.word	0x7fe00000
 8014d78:	7c9fffff 	.word	0x7c9fffff
 8014d7c:	7fefffff 	.word	0x7fefffff

08014d80 <_strtod_r>:
 8014d80:	4b01      	ldr	r3, [pc, #4]	; (8014d88 <_strtod_r+0x8>)
 8014d82:	f7ff ba0d 	b.w	80141a0 <_strtod_l>
 8014d86:	bf00      	nop
 8014d88:	200000cc 	.word	0x200000cc

08014d8c <_strtol_l.constprop.0>:
 8014d8c:	2b01      	cmp	r3, #1
 8014d8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d92:	d001      	beq.n	8014d98 <_strtol_l.constprop.0+0xc>
 8014d94:	2b24      	cmp	r3, #36	; 0x24
 8014d96:	d906      	bls.n	8014da6 <_strtol_l.constprop.0+0x1a>
 8014d98:	f7fd fd7c 	bl	8012894 <__errno>
 8014d9c:	2316      	movs	r3, #22
 8014d9e:	6003      	str	r3, [r0, #0]
 8014da0:	2000      	movs	r0, #0
 8014da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014da6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8014e8c <_strtol_l.constprop.0+0x100>
 8014daa:	460d      	mov	r5, r1
 8014dac:	462e      	mov	r6, r5
 8014dae:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014db2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8014db6:	f017 0708 	ands.w	r7, r7, #8
 8014dba:	d1f7      	bne.n	8014dac <_strtol_l.constprop.0+0x20>
 8014dbc:	2c2d      	cmp	r4, #45	; 0x2d
 8014dbe:	d132      	bne.n	8014e26 <_strtol_l.constprop.0+0x9a>
 8014dc0:	782c      	ldrb	r4, [r5, #0]
 8014dc2:	2701      	movs	r7, #1
 8014dc4:	1cb5      	adds	r5, r6, #2
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d05b      	beq.n	8014e82 <_strtol_l.constprop.0+0xf6>
 8014dca:	2b10      	cmp	r3, #16
 8014dcc:	d109      	bne.n	8014de2 <_strtol_l.constprop.0+0x56>
 8014dce:	2c30      	cmp	r4, #48	; 0x30
 8014dd0:	d107      	bne.n	8014de2 <_strtol_l.constprop.0+0x56>
 8014dd2:	782c      	ldrb	r4, [r5, #0]
 8014dd4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014dd8:	2c58      	cmp	r4, #88	; 0x58
 8014dda:	d14d      	bne.n	8014e78 <_strtol_l.constprop.0+0xec>
 8014ddc:	786c      	ldrb	r4, [r5, #1]
 8014dde:	2310      	movs	r3, #16
 8014de0:	3502      	adds	r5, #2
 8014de2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8014de6:	f108 38ff 	add.w	r8, r8, #4294967295
 8014dea:	f04f 0e00 	mov.w	lr, #0
 8014dee:	fbb8 f9f3 	udiv	r9, r8, r3
 8014df2:	4676      	mov	r6, lr
 8014df4:	fb03 8a19 	mls	sl, r3, r9, r8
 8014df8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8014dfc:	f1bc 0f09 	cmp.w	ip, #9
 8014e00:	d816      	bhi.n	8014e30 <_strtol_l.constprop.0+0xa4>
 8014e02:	4664      	mov	r4, ip
 8014e04:	42a3      	cmp	r3, r4
 8014e06:	dd24      	ble.n	8014e52 <_strtol_l.constprop.0+0xc6>
 8014e08:	f1be 3fff 	cmp.w	lr, #4294967295
 8014e0c:	d008      	beq.n	8014e20 <_strtol_l.constprop.0+0x94>
 8014e0e:	45b1      	cmp	r9, r6
 8014e10:	d31c      	bcc.n	8014e4c <_strtol_l.constprop.0+0xc0>
 8014e12:	d101      	bne.n	8014e18 <_strtol_l.constprop.0+0x8c>
 8014e14:	45a2      	cmp	sl, r4
 8014e16:	db19      	blt.n	8014e4c <_strtol_l.constprop.0+0xc0>
 8014e18:	fb06 4603 	mla	r6, r6, r3, r4
 8014e1c:	f04f 0e01 	mov.w	lr, #1
 8014e20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014e24:	e7e8      	b.n	8014df8 <_strtol_l.constprop.0+0x6c>
 8014e26:	2c2b      	cmp	r4, #43	; 0x2b
 8014e28:	bf04      	itt	eq
 8014e2a:	782c      	ldrbeq	r4, [r5, #0]
 8014e2c:	1cb5      	addeq	r5, r6, #2
 8014e2e:	e7ca      	b.n	8014dc6 <_strtol_l.constprop.0+0x3a>
 8014e30:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8014e34:	f1bc 0f19 	cmp.w	ip, #25
 8014e38:	d801      	bhi.n	8014e3e <_strtol_l.constprop.0+0xb2>
 8014e3a:	3c37      	subs	r4, #55	; 0x37
 8014e3c:	e7e2      	b.n	8014e04 <_strtol_l.constprop.0+0x78>
 8014e3e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8014e42:	f1bc 0f19 	cmp.w	ip, #25
 8014e46:	d804      	bhi.n	8014e52 <_strtol_l.constprop.0+0xc6>
 8014e48:	3c57      	subs	r4, #87	; 0x57
 8014e4a:	e7db      	b.n	8014e04 <_strtol_l.constprop.0+0x78>
 8014e4c:	f04f 3eff 	mov.w	lr, #4294967295
 8014e50:	e7e6      	b.n	8014e20 <_strtol_l.constprop.0+0x94>
 8014e52:	f1be 3fff 	cmp.w	lr, #4294967295
 8014e56:	d105      	bne.n	8014e64 <_strtol_l.constprop.0+0xd8>
 8014e58:	2322      	movs	r3, #34	; 0x22
 8014e5a:	6003      	str	r3, [r0, #0]
 8014e5c:	4646      	mov	r6, r8
 8014e5e:	b942      	cbnz	r2, 8014e72 <_strtol_l.constprop.0+0xe6>
 8014e60:	4630      	mov	r0, r6
 8014e62:	e79e      	b.n	8014da2 <_strtol_l.constprop.0+0x16>
 8014e64:	b107      	cbz	r7, 8014e68 <_strtol_l.constprop.0+0xdc>
 8014e66:	4276      	negs	r6, r6
 8014e68:	2a00      	cmp	r2, #0
 8014e6a:	d0f9      	beq.n	8014e60 <_strtol_l.constprop.0+0xd4>
 8014e6c:	f1be 0f00 	cmp.w	lr, #0
 8014e70:	d000      	beq.n	8014e74 <_strtol_l.constprop.0+0xe8>
 8014e72:	1e69      	subs	r1, r5, #1
 8014e74:	6011      	str	r1, [r2, #0]
 8014e76:	e7f3      	b.n	8014e60 <_strtol_l.constprop.0+0xd4>
 8014e78:	2430      	movs	r4, #48	; 0x30
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d1b1      	bne.n	8014de2 <_strtol_l.constprop.0+0x56>
 8014e7e:	2308      	movs	r3, #8
 8014e80:	e7af      	b.n	8014de2 <_strtol_l.constprop.0+0x56>
 8014e82:	2c30      	cmp	r4, #48	; 0x30
 8014e84:	d0a5      	beq.n	8014dd2 <_strtol_l.constprop.0+0x46>
 8014e86:	230a      	movs	r3, #10
 8014e88:	e7ab      	b.n	8014de2 <_strtol_l.constprop.0+0x56>
 8014e8a:	bf00      	nop
 8014e8c:	08018689 	.word	0x08018689

08014e90 <_strtol_r>:
 8014e90:	f7ff bf7c 	b.w	8014d8c <_strtol_l.constprop.0>

08014e94 <__ssputs_r>:
 8014e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e98:	688e      	ldr	r6, [r1, #8]
 8014e9a:	461f      	mov	r7, r3
 8014e9c:	42be      	cmp	r6, r7
 8014e9e:	680b      	ldr	r3, [r1, #0]
 8014ea0:	4682      	mov	sl, r0
 8014ea2:	460c      	mov	r4, r1
 8014ea4:	4690      	mov	r8, r2
 8014ea6:	d82c      	bhi.n	8014f02 <__ssputs_r+0x6e>
 8014ea8:	898a      	ldrh	r2, [r1, #12]
 8014eaa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014eae:	d026      	beq.n	8014efe <__ssputs_r+0x6a>
 8014eb0:	6965      	ldr	r5, [r4, #20]
 8014eb2:	6909      	ldr	r1, [r1, #16]
 8014eb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014eb8:	eba3 0901 	sub.w	r9, r3, r1
 8014ebc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014ec0:	1c7b      	adds	r3, r7, #1
 8014ec2:	444b      	add	r3, r9
 8014ec4:	106d      	asrs	r5, r5, #1
 8014ec6:	429d      	cmp	r5, r3
 8014ec8:	bf38      	it	cc
 8014eca:	461d      	movcc	r5, r3
 8014ecc:	0553      	lsls	r3, r2, #21
 8014ece:	d527      	bpl.n	8014f20 <__ssputs_r+0x8c>
 8014ed0:	4629      	mov	r1, r5
 8014ed2:	f7fe fc0f 	bl	80136f4 <_malloc_r>
 8014ed6:	4606      	mov	r6, r0
 8014ed8:	b360      	cbz	r0, 8014f34 <__ssputs_r+0xa0>
 8014eda:	6921      	ldr	r1, [r4, #16]
 8014edc:	464a      	mov	r2, r9
 8014ede:	f7fd fd05 	bl	80128ec <memcpy>
 8014ee2:	89a3      	ldrh	r3, [r4, #12]
 8014ee4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014eec:	81a3      	strh	r3, [r4, #12]
 8014eee:	6126      	str	r6, [r4, #16]
 8014ef0:	6165      	str	r5, [r4, #20]
 8014ef2:	444e      	add	r6, r9
 8014ef4:	eba5 0509 	sub.w	r5, r5, r9
 8014ef8:	6026      	str	r6, [r4, #0]
 8014efa:	60a5      	str	r5, [r4, #8]
 8014efc:	463e      	mov	r6, r7
 8014efe:	42be      	cmp	r6, r7
 8014f00:	d900      	bls.n	8014f04 <__ssputs_r+0x70>
 8014f02:	463e      	mov	r6, r7
 8014f04:	6820      	ldr	r0, [r4, #0]
 8014f06:	4632      	mov	r2, r6
 8014f08:	4641      	mov	r1, r8
 8014f0a:	f000 fba3 	bl	8015654 <memmove>
 8014f0e:	68a3      	ldr	r3, [r4, #8]
 8014f10:	1b9b      	subs	r3, r3, r6
 8014f12:	60a3      	str	r3, [r4, #8]
 8014f14:	6823      	ldr	r3, [r4, #0]
 8014f16:	4433      	add	r3, r6
 8014f18:	6023      	str	r3, [r4, #0]
 8014f1a:	2000      	movs	r0, #0
 8014f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f20:	462a      	mov	r2, r5
 8014f22:	f000 ffaa 	bl	8015e7a <_realloc_r>
 8014f26:	4606      	mov	r6, r0
 8014f28:	2800      	cmp	r0, #0
 8014f2a:	d1e0      	bne.n	8014eee <__ssputs_r+0x5a>
 8014f2c:	6921      	ldr	r1, [r4, #16]
 8014f2e:	4650      	mov	r0, sl
 8014f30:	f7fe fb6c 	bl	801360c <_free_r>
 8014f34:	230c      	movs	r3, #12
 8014f36:	f8ca 3000 	str.w	r3, [sl]
 8014f3a:	89a3      	ldrh	r3, [r4, #12]
 8014f3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f40:	81a3      	strh	r3, [r4, #12]
 8014f42:	f04f 30ff 	mov.w	r0, #4294967295
 8014f46:	e7e9      	b.n	8014f1c <__ssputs_r+0x88>

08014f48 <_svfiprintf_r>:
 8014f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f4c:	4698      	mov	r8, r3
 8014f4e:	898b      	ldrh	r3, [r1, #12]
 8014f50:	061b      	lsls	r3, r3, #24
 8014f52:	b09d      	sub	sp, #116	; 0x74
 8014f54:	4607      	mov	r7, r0
 8014f56:	460d      	mov	r5, r1
 8014f58:	4614      	mov	r4, r2
 8014f5a:	d50e      	bpl.n	8014f7a <_svfiprintf_r+0x32>
 8014f5c:	690b      	ldr	r3, [r1, #16]
 8014f5e:	b963      	cbnz	r3, 8014f7a <_svfiprintf_r+0x32>
 8014f60:	2140      	movs	r1, #64	; 0x40
 8014f62:	f7fe fbc7 	bl	80136f4 <_malloc_r>
 8014f66:	6028      	str	r0, [r5, #0]
 8014f68:	6128      	str	r0, [r5, #16]
 8014f6a:	b920      	cbnz	r0, 8014f76 <_svfiprintf_r+0x2e>
 8014f6c:	230c      	movs	r3, #12
 8014f6e:	603b      	str	r3, [r7, #0]
 8014f70:	f04f 30ff 	mov.w	r0, #4294967295
 8014f74:	e0d0      	b.n	8015118 <_svfiprintf_r+0x1d0>
 8014f76:	2340      	movs	r3, #64	; 0x40
 8014f78:	616b      	str	r3, [r5, #20]
 8014f7a:	2300      	movs	r3, #0
 8014f7c:	9309      	str	r3, [sp, #36]	; 0x24
 8014f7e:	2320      	movs	r3, #32
 8014f80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014f84:	f8cd 800c 	str.w	r8, [sp, #12]
 8014f88:	2330      	movs	r3, #48	; 0x30
 8014f8a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8015130 <_svfiprintf_r+0x1e8>
 8014f8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014f92:	f04f 0901 	mov.w	r9, #1
 8014f96:	4623      	mov	r3, r4
 8014f98:	469a      	mov	sl, r3
 8014f9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014f9e:	b10a      	cbz	r2, 8014fa4 <_svfiprintf_r+0x5c>
 8014fa0:	2a25      	cmp	r2, #37	; 0x25
 8014fa2:	d1f9      	bne.n	8014f98 <_svfiprintf_r+0x50>
 8014fa4:	ebba 0b04 	subs.w	fp, sl, r4
 8014fa8:	d00b      	beq.n	8014fc2 <_svfiprintf_r+0x7a>
 8014faa:	465b      	mov	r3, fp
 8014fac:	4622      	mov	r2, r4
 8014fae:	4629      	mov	r1, r5
 8014fb0:	4638      	mov	r0, r7
 8014fb2:	f7ff ff6f 	bl	8014e94 <__ssputs_r>
 8014fb6:	3001      	adds	r0, #1
 8014fb8:	f000 80a9 	beq.w	801510e <_svfiprintf_r+0x1c6>
 8014fbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014fbe:	445a      	add	r2, fp
 8014fc0:	9209      	str	r2, [sp, #36]	; 0x24
 8014fc2:	f89a 3000 	ldrb.w	r3, [sl]
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	f000 80a1 	beq.w	801510e <_svfiprintf_r+0x1c6>
 8014fcc:	2300      	movs	r3, #0
 8014fce:	f04f 32ff 	mov.w	r2, #4294967295
 8014fd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014fd6:	f10a 0a01 	add.w	sl, sl, #1
 8014fda:	9304      	str	r3, [sp, #16]
 8014fdc:	9307      	str	r3, [sp, #28]
 8014fde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014fe2:	931a      	str	r3, [sp, #104]	; 0x68
 8014fe4:	4654      	mov	r4, sl
 8014fe6:	2205      	movs	r2, #5
 8014fe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014fec:	4850      	ldr	r0, [pc, #320]	; (8015130 <_svfiprintf_r+0x1e8>)
 8014fee:	f7eb f8c7 	bl	8000180 <memchr>
 8014ff2:	9a04      	ldr	r2, [sp, #16]
 8014ff4:	b9d8      	cbnz	r0, 801502e <_svfiprintf_r+0xe6>
 8014ff6:	06d0      	lsls	r0, r2, #27
 8014ff8:	bf44      	itt	mi
 8014ffa:	2320      	movmi	r3, #32
 8014ffc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015000:	0711      	lsls	r1, r2, #28
 8015002:	bf44      	itt	mi
 8015004:	232b      	movmi	r3, #43	; 0x2b
 8015006:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801500a:	f89a 3000 	ldrb.w	r3, [sl]
 801500e:	2b2a      	cmp	r3, #42	; 0x2a
 8015010:	d015      	beq.n	801503e <_svfiprintf_r+0xf6>
 8015012:	9a07      	ldr	r2, [sp, #28]
 8015014:	4654      	mov	r4, sl
 8015016:	2000      	movs	r0, #0
 8015018:	f04f 0c0a 	mov.w	ip, #10
 801501c:	4621      	mov	r1, r4
 801501e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015022:	3b30      	subs	r3, #48	; 0x30
 8015024:	2b09      	cmp	r3, #9
 8015026:	d94d      	bls.n	80150c4 <_svfiprintf_r+0x17c>
 8015028:	b1b0      	cbz	r0, 8015058 <_svfiprintf_r+0x110>
 801502a:	9207      	str	r2, [sp, #28]
 801502c:	e014      	b.n	8015058 <_svfiprintf_r+0x110>
 801502e:	eba0 0308 	sub.w	r3, r0, r8
 8015032:	fa09 f303 	lsl.w	r3, r9, r3
 8015036:	4313      	orrs	r3, r2
 8015038:	9304      	str	r3, [sp, #16]
 801503a:	46a2      	mov	sl, r4
 801503c:	e7d2      	b.n	8014fe4 <_svfiprintf_r+0x9c>
 801503e:	9b03      	ldr	r3, [sp, #12]
 8015040:	1d19      	adds	r1, r3, #4
 8015042:	681b      	ldr	r3, [r3, #0]
 8015044:	9103      	str	r1, [sp, #12]
 8015046:	2b00      	cmp	r3, #0
 8015048:	bfbb      	ittet	lt
 801504a:	425b      	neglt	r3, r3
 801504c:	f042 0202 	orrlt.w	r2, r2, #2
 8015050:	9307      	strge	r3, [sp, #28]
 8015052:	9307      	strlt	r3, [sp, #28]
 8015054:	bfb8      	it	lt
 8015056:	9204      	strlt	r2, [sp, #16]
 8015058:	7823      	ldrb	r3, [r4, #0]
 801505a:	2b2e      	cmp	r3, #46	; 0x2e
 801505c:	d10c      	bne.n	8015078 <_svfiprintf_r+0x130>
 801505e:	7863      	ldrb	r3, [r4, #1]
 8015060:	2b2a      	cmp	r3, #42	; 0x2a
 8015062:	d134      	bne.n	80150ce <_svfiprintf_r+0x186>
 8015064:	9b03      	ldr	r3, [sp, #12]
 8015066:	1d1a      	adds	r2, r3, #4
 8015068:	681b      	ldr	r3, [r3, #0]
 801506a:	9203      	str	r2, [sp, #12]
 801506c:	2b00      	cmp	r3, #0
 801506e:	bfb8      	it	lt
 8015070:	f04f 33ff 	movlt.w	r3, #4294967295
 8015074:	3402      	adds	r4, #2
 8015076:	9305      	str	r3, [sp, #20]
 8015078:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8015140 <_svfiprintf_r+0x1f8>
 801507c:	7821      	ldrb	r1, [r4, #0]
 801507e:	2203      	movs	r2, #3
 8015080:	4650      	mov	r0, sl
 8015082:	f7eb f87d 	bl	8000180 <memchr>
 8015086:	b138      	cbz	r0, 8015098 <_svfiprintf_r+0x150>
 8015088:	9b04      	ldr	r3, [sp, #16]
 801508a:	eba0 000a 	sub.w	r0, r0, sl
 801508e:	2240      	movs	r2, #64	; 0x40
 8015090:	4082      	lsls	r2, r0
 8015092:	4313      	orrs	r3, r2
 8015094:	3401      	adds	r4, #1
 8015096:	9304      	str	r3, [sp, #16]
 8015098:	f814 1b01 	ldrb.w	r1, [r4], #1
 801509c:	4825      	ldr	r0, [pc, #148]	; (8015134 <_svfiprintf_r+0x1ec>)
 801509e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80150a2:	2206      	movs	r2, #6
 80150a4:	f7eb f86c 	bl	8000180 <memchr>
 80150a8:	2800      	cmp	r0, #0
 80150aa:	d038      	beq.n	801511e <_svfiprintf_r+0x1d6>
 80150ac:	4b22      	ldr	r3, [pc, #136]	; (8015138 <_svfiprintf_r+0x1f0>)
 80150ae:	bb1b      	cbnz	r3, 80150f8 <_svfiprintf_r+0x1b0>
 80150b0:	9b03      	ldr	r3, [sp, #12]
 80150b2:	3307      	adds	r3, #7
 80150b4:	f023 0307 	bic.w	r3, r3, #7
 80150b8:	3308      	adds	r3, #8
 80150ba:	9303      	str	r3, [sp, #12]
 80150bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150be:	4433      	add	r3, r6
 80150c0:	9309      	str	r3, [sp, #36]	; 0x24
 80150c2:	e768      	b.n	8014f96 <_svfiprintf_r+0x4e>
 80150c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80150c8:	460c      	mov	r4, r1
 80150ca:	2001      	movs	r0, #1
 80150cc:	e7a6      	b.n	801501c <_svfiprintf_r+0xd4>
 80150ce:	2300      	movs	r3, #0
 80150d0:	3401      	adds	r4, #1
 80150d2:	9305      	str	r3, [sp, #20]
 80150d4:	4619      	mov	r1, r3
 80150d6:	f04f 0c0a 	mov.w	ip, #10
 80150da:	4620      	mov	r0, r4
 80150dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80150e0:	3a30      	subs	r2, #48	; 0x30
 80150e2:	2a09      	cmp	r2, #9
 80150e4:	d903      	bls.n	80150ee <_svfiprintf_r+0x1a6>
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d0c6      	beq.n	8015078 <_svfiprintf_r+0x130>
 80150ea:	9105      	str	r1, [sp, #20]
 80150ec:	e7c4      	b.n	8015078 <_svfiprintf_r+0x130>
 80150ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80150f2:	4604      	mov	r4, r0
 80150f4:	2301      	movs	r3, #1
 80150f6:	e7f0      	b.n	80150da <_svfiprintf_r+0x192>
 80150f8:	ab03      	add	r3, sp, #12
 80150fa:	9300      	str	r3, [sp, #0]
 80150fc:	462a      	mov	r2, r5
 80150fe:	4b0f      	ldr	r3, [pc, #60]	; (801513c <_svfiprintf_r+0x1f4>)
 8015100:	a904      	add	r1, sp, #16
 8015102:	4638      	mov	r0, r7
 8015104:	f7fc fb68 	bl	80117d8 <_printf_float>
 8015108:	1c42      	adds	r2, r0, #1
 801510a:	4606      	mov	r6, r0
 801510c:	d1d6      	bne.n	80150bc <_svfiprintf_r+0x174>
 801510e:	89ab      	ldrh	r3, [r5, #12]
 8015110:	065b      	lsls	r3, r3, #25
 8015112:	f53f af2d 	bmi.w	8014f70 <_svfiprintf_r+0x28>
 8015116:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015118:	b01d      	add	sp, #116	; 0x74
 801511a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801511e:	ab03      	add	r3, sp, #12
 8015120:	9300      	str	r3, [sp, #0]
 8015122:	462a      	mov	r2, r5
 8015124:	4b05      	ldr	r3, [pc, #20]	; (801513c <_svfiprintf_r+0x1f4>)
 8015126:	a904      	add	r1, sp, #16
 8015128:	4638      	mov	r0, r7
 801512a:	f7fc fdf9 	bl	8011d20 <_printf_i>
 801512e:	e7eb      	b.n	8015108 <_svfiprintf_r+0x1c0>
 8015130:	08018789 	.word	0x08018789
 8015134:	08018793 	.word	0x08018793
 8015138:	080117d9 	.word	0x080117d9
 801513c:	08014e95 	.word	0x08014e95
 8015140:	0801878f 	.word	0x0801878f

08015144 <__sfputc_r>:
 8015144:	6893      	ldr	r3, [r2, #8]
 8015146:	3b01      	subs	r3, #1
 8015148:	2b00      	cmp	r3, #0
 801514a:	b410      	push	{r4}
 801514c:	6093      	str	r3, [r2, #8]
 801514e:	da08      	bge.n	8015162 <__sfputc_r+0x1e>
 8015150:	6994      	ldr	r4, [r2, #24]
 8015152:	42a3      	cmp	r3, r4
 8015154:	db01      	blt.n	801515a <__sfputc_r+0x16>
 8015156:	290a      	cmp	r1, #10
 8015158:	d103      	bne.n	8015162 <__sfputc_r+0x1e>
 801515a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801515e:	f7fd ba9a 	b.w	8012696 <__swbuf_r>
 8015162:	6813      	ldr	r3, [r2, #0]
 8015164:	1c58      	adds	r0, r3, #1
 8015166:	6010      	str	r0, [r2, #0]
 8015168:	7019      	strb	r1, [r3, #0]
 801516a:	4608      	mov	r0, r1
 801516c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015170:	4770      	bx	lr

08015172 <__sfputs_r>:
 8015172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015174:	4606      	mov	r6, r0
 8015176:	460f      	mov	r7, r1
 8015178:	4614      	mov	r4, r2
 801517a:	18d5      	adds	r5, r2, r3
 801517c:	42ac      	cmp	r4, r5
 801517e:	d101      	bne.n	8015184 <__sfputs_r+0x12>
 8015180:	2000      	movs	r0, #0
 8015182:	e007      	b.n	8015194 <__sfputs_r+0x22>
 8015184:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015188:	463a      	mov	r2, r7
 801518a:	4630      	mov	r0, r6
 801518c:	f7ff ffda 	bl	8015144 <__sfputc_r>
 8015190:	1c43      	adds	r3, r0, #1
 8015192:	d1f3      	bne.n	801517c <__sfputs_r+0xa>
 8015194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015198 <_vfiprintf_r>:
 8015198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801519c:	460d      	mov	r5, r1
 801519e:	b09d      	sub	sp, #116	; 0x74
 80151a0:	4614      	mov	r4, r2
 80151a2:	4698      	mov	r8, r3
 80151a4:	4606      	mov	r6, r0
 80151a6:	b118      	cbz	r0, 80151b0 <_vfiprintf_r+0x18>
 80151a8:	6a03      	ldr	r3, [r0, #32]
 80151aa:	b90b      	cbnz	r3, 80151b0 <_vfiprintf_r+0x18>
 80151ac:	f7fd f964 	bl	8012478 <__sinit>
 80151b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80151b2:	07d9      	lsls	r1, r3, #31
 80151b4:	d405      	bmi.n	80151c2 <_vfiprintf_r+0x2a>
 80151b6:	89ab      	ldrh	r3, [r5, #12]
 80151b8:	059a      	lsls	r2, r3, #22
 80151ba:	d402      	bmi.n	80151c2 <_vfiprintf_r+0x2a>
 80151bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80151be:	f7fd fb93 	bl	80128e8 <__retarget_lock_acquire_recursive>
 80151c2:	89ab      	ldrh	r3, [r5, #12]
 80151c4:	071b      	lsls	r3, r3, #28
 80151c6:	d501      	bpl.n	80151cc <_vfiprintf_r+0x34>
 80151c8:	692b      	ldr	r3, [r5, #16]
 80151ca:	b99b      	cbnz	r3, 80151f4 <_vfiprintf_r+0x5c>
 80151cc:	4629      	mov	r1, r5
 80151ce:	4630      	mov	r0, r6
 80151d0:	f7fd fa9e 	bl	8012710 <__swsetup_r>
 80151d4:	b170      	cbz	r0, 80151f4 <_vfiprintf_r+0x5c>
 80151d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80151d8:	07dc      	lsls	r4, r3, #31
 80151da:	d504      	bpl.n	80151e6 <_vfiprintf_r+0x4e>
 80151dc:	f04f 30ff 	mov.w	r0, #4294967295
 80151e0:	b01d      	add	sp, #116	; 0x74
 80151e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151e6:	89ab      	ldrh	r3, [r5, #12]
 80151e8:	0598      	lsls	r0, r3, #22
 80151ea:	d4f7      	bmi.n	80151dc <_vfiprintf_r+0x44>
 80151ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80151ee:	f7fd fb7c 	bl	80128ea <__retarget_lock_release_recursive>
 80151f2:	e7f3      	b.n	80151dc <_vfiprintf_r+0x44>
 80151f4:	2300      	movs	r3, #0
 80151f6:	9309      	str	r3, [sp, #36]	; 0x24
 80151f8:	2320      	movs	r3, #32
 80151fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80151fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8015202:	2330      	movs	r3, #48	; 0x30
 8015204:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80153b8 <_vfiprintf_r+0x220>
 8015208:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801520c:	f04f 0901 	mov.w	r9, #1
 8015210:	4623      	mov	r3, r4
 8015212:	469a      	mov	sl, r3
 8015214:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015218:	b10a      	cbz	r2, 801521e <_vfiprintf_r+0x86>
 801521a:	2a25      	cmp	r2, #37	; 0x25
 801521c:	d1f9      	bne.n	8015212 <_vfiprintf_r+0x7a>
 801521e:	ebba 0b04 	subs.w	fp, sl, r4
 8015222:	d00b      	beq.n	801523c <_vfiprintf_r+0xa4>
 8015224:	465b      	mov	r3, fp
 8015226:	4622      	mov	r2, r4
 8015228:	4629      	mov	r1, r5
 801522a:	4630      	mov	r0, r6
 801522c:	f7ff ffa1 	bl	8015172 <__sfputs_r>
 8015230:	3001      	adds	r0, #1
 8015232:	f000 80a9 	beq.w	8015388 <_vfiprintf_r+0x1f0>
 8015236:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015238:	445a      	add	r2, fp
 801523a:	9209      	str	r2, [sp, #36]	; 0x24
 801523c:	f89a 3000 	ldrb.w	r3, [sl]
 8015240:	2b00      	cmp	r3, #0
 8015242:	f000 80a1 	beq.w	8015388 <_vfiprintf_r+0x1f0>
 8015246:	2300      	movs	r3, #0
 8015248:	f04f 32ff 	mov.w	r2, #4294967295
 801524c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015250:	f10a 0a01 	add.w	sl, sl, #1
 8015254:	9304      	str	r3, [sp, #16]
 8015256:	9307      	str	r3, [sp, #28]
 8015258:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801525c:	931a      	str	r3, [sp, #104]	; 0x68
 801525e:	4654      	mov	r4, sl
 8015260:	2205      	movs	r2, #5
 8015262:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015266:	4854      	ldr	r0, [pc, #336]	; (80153b8 <_vfiprintf_r+0x220>)
 8015268:	f7ea ff8a 	bl	8000180 <memchr>
 801526c:	9a04      	ldr	r2, [sp, #16]
 801526e:	b9d8      	cbnz	r0, 80152a8 <_vfiprintf_r+0x110>
 8015270:	06d1      	lsls	r1, r2, #27
 8015272:	bf44      	itt	mi
 8015274:	2320      	movmi	r3, #32
 8015276:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801527a:	0713      	lsls	r3, r2, #28
 801527c:	bf44      	itt	mi
 801527e:	232b      	movmi	r3, #43	; 0x2b
 8015280:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015284:	f89a 3000 	ldrb.w	r3, [sl]
 8015288:	2b2a      	cmp	r3, #42	; 0x2a
 801528a:	d015      	beq.n	80152b8 <_vfiprintf_r+0x120>
 801528c:	9a07      	ldr	r2, [sp, #28]
 801528e:	4654      	mov	r4, sl
 8015290:	2000      	movs	r0, #0
 8015292:	f04f 0c0a 	mov.w	ip, #10
 8015296:	4621      	mov	r1, r4
 8015298:	f811 3b01 	ldrb.w	r3, [r1], #1
 801529c:	3b30      	subs	r3, #48	; 0x30
 801529e:	2b09      	cmp	r3, #9
 80152a0:	d94d      	bls.n	801533e <_vfiprintf_r+0x1a6>
 80152a2:	b1b0      	cbz	r0, 80152d2 <_vfiprintf_r+0x13a>
 80152a4:	9207      	str	r2, [sp, #28]
 80152a6:	e014      	b.n	80152d2 <_vfiprintf_r+0x13a>
 80152a8:	eba0 0308 	sub.w	r3, r0, r8
 80152ac:	fa09 f303 	lsl.w	r3, r9, r3
 80152b0:	4313      	orrs	r3, r2
 80152b2:	9304      	str	r3, [sp, #16]
 80152b4:	46a2      	mov	sl, r4
 80152b6:	e7d2      	b.n	801525e <_vfiprintf_r+0xc6>
 80152b8:	9b03      	ldr	r3, [sp, #12]
 80152ba:	1d19      	adds	r1, r3, #4
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	9103      	str	r1, [sp, #12]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	bfbb      	ittet	lt
 80152c4:	425b      	neglt	r3, r3
 80152c6:	f042 0202 	orrlt.w	r2, r2, #2
 80152ca:	9307      	strge	r3, [sp, #28]
 80152cc:	9307      	strlt	r3, [sp, #28]
 80152ce:	bfb8      	it	lt
 80152d0:	9204      	strlt	r2, [sp, #16]
 80152d2:	7823      	ldrb	r3, [r4, #0]
 80152d4:	2b2e      	cmp	r3, #46	; 0x2e
 80152d6:	d10c      	bne.n	80152f2 <_vfiprintf_r+0x15a>
 80152d8:	7863      	ldrb	r3, [r4, #1]
 80152da:	2b2a      	cmp	r3, #42	; 0x2a
 80152dc:	d134      	bne.n	8015348 <_vfiprintf_r+0x1b0>
 80152de:	9b03      	ldr	r3, [sp, #12]
 80152e0:	1d1a      	adds	r2, r3, #4
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	9203      	str	r2, [sp, #12]
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	bfb8      	it	lt
 80152ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80152ee:	3402      	adds	r4, #2
 80152f0:	9305      	str	r3, [sp, #20]
 80152f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80153c8 <_vfiprintf_r+0x230>
 80152f6:	7821      	ldrb	r1, [r4, #0]
 80152f8:	2203      	movs	r2, #3
 80152fa:	4650      	mov	r0, sl
 80152fc:	f7ea ff40 	bl	8000180 <memchr>
 8015300:	b138      	cbz	r0, 8015312 <_vfiprintf_r+0x17a>
 8015302:	9b04      	ldr	r3, [sp, #16]
 8015304:	eba0 000a 	sub.w	r0, r0, sl
 8015308:	2240      	movs	r2, #64	; 0x40
 801530a:	4082      	lsls	r2, r0
 801530c:	4313      	orrs	r3, r2
 801530e:	3401      	adds	r4, #1
 8015310:	9304      	str	r3, [sp, #16]
 8015312:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015316:	4829      	ldr	r0, [pc, #164]	; (80153bc <_vfiprintf_r+0x224>)
 8015318:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801531c:	2206      	movs	r2, #6
 801531e:	f7ea ff2f 	bl	8000180 <memchr>
 8015322:	2800      	cmp	r0, #0
 8015324:	d03f      	beq.n	80153a6 <_vfiprintf_r+0x20e>
 8015326:	4b26      	ldr	r3, [pc, #152]	; (80153c0 <_vfiprintf_r+0x228>)
 8015328:	bb1b      	cbnz	r3, 8015372 <_vfiprintf_r+0x1da>
 801532a:	9b03      	ldr	r3, [sp, #12]
 801532c:	3307      	adds	r3, #7
 801532e:	f023 0307 	bic.w	r3, r3, #7
 8015332:	3308      	adds	r3, #8
 8015334:	9303      	str	r3, [sp, #12]
 8015336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015338:	443b      	add	r3, r7
 801533a:	9309      	str	r3, [sp, #36]	; 0x24
 801533c:	e768      	b.n	8015210 <_vfiprintf_r+0x78>
 801533e:	fb0c 3202 	mla	r2, ip, r2, r3
 8015342:	460c      	mov	r4, r1
 8015344:	2001      	movs	r0, #1
 8015346:	e7a6      	b.n	8015296 <_vfiprintf_r+0xfe>
 8015348:	2300      	movs	r3, #0
 801534a:	3401      	adds	r4, #1
 801534c:	9305      	str	r3, [sp, #20]
 801534e:	4619      	mov	r1, r3
 8015350:	f04f 0c0a 	mov.w	ip, #10
 8015354:	4620      	mov	r0, r4
 8015356:	f810 2b01 	ldrb.w	r2, [r0], #1
 801535a:	3a30      	subs	r2, #48	; 0x30
 801535c:	2a09      	cmp	r2, #9
 801535e:	d903      	bls.n	8015368 <_vfiprintf_r+0x1d0>
 8015360:	2b00      	cmp	r3, #0
 8015362:	d0c6      	beq.n	80152f2 <_vfiprintf_r+0x15a>
 8015364:	9105      	str	r1, [sp, #20]
 8015366:	e7c4      	b.n	80152f2 <_vfiprintf_r+0x15a>
 8015368:	fb0c 2101 	mla	r1, ip, r1, r2
 801536c:	4604      	mov	r4, r0
 801536e:	2301      	movs	r3, #1
 8015370:	e7f0      	b.n	8015354 <_vfiprintf_r+0x1bc>
 8015372:	ab03      	add	r3, sp, #12
 8015374:	9300      	str	r3, [sp, #0]
 8015376:	462a      	mov	r2, r5
 8015378:	4b12      	ldr	r3, [pc, #72]	; (80153c4 <_vfiprintf_r+0x22c>)
 801537a:	a904      	add	r1, sp, #16
 801537c:	4630      	mov	r0, r6
 801537e:	f7fc fa2b 	bl	80117d8 <_printf_float>
 8015382:	4607      	mov	r7, r0
 8015384:	1c78      	adds	r0, r7, #1
 8015386:	d1d6      	bne.n	8015336 <_vfiprintf_r+0x19e>
 8015388:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801538a:	07d9      	lsls	r1, r3, #31
 801538c:	d405      	bmi.n	801539a <_vfiprintf_r+0x202>
 801538e:	89ab      	ldrh	r3, [r5, #12]
 8015390:	059a      	lsls	r2, r3, #22
 8015392:	d402      	bmi.n	801539a <_vfiprintf_r+0x202>
 8015394:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015396:	f7fd faa8 	bl	80128ea <__retarget_lock_release_recursive>
 801539a:	89ab      	ldrh	r3, [r5, #12]
 801539c:	065b      	lsls	r3, r3, #25
 801539e:	f53f af1d 	bmi.w	80151dc <_vfiprintf_r+0x44>
 80153a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80153a4:	e71c      	b.n	80151e0 <_vfiprintf_r+0x48>
 80153a6:	ab03      	add	r3, sp, #12
 80153a8:	9300      	str	r3, [sp, #0]
 80153aa:	462a      	mov	r2, r5
 80153ac:	4b05      	ldr	r3, [pc, #20]	; (80153c4 <_vfiprintf_r+0x22c>)
 80153ae:	a904      	add	r1, sp, #16
 80153b0:	4630      	mov	r0, r6
 80153b2:	f7fc fcb5 	bl	8011d20 <_printf_i>
 80153b6:	e7e4      	b.n	8015382 <_vfiprintf_r+0x1ea>
 80153b8:	08018789 	.word	0x08018789
 80153bc:	08018793 	.word	0x08018793
 80153c0:	080117d9 	.word	0x080117d9
 80153c4:	08015173 	.word	0x08015173
 80153c8:	0801878f 	.word	0x0801878f

080153cc <__sflush_r>:
 80153cc:	898a      	ldrh	r2, [r1, #12]
 80153ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153d2:	4605      	mov	r5, r0
 80153d4:	0710      	lsls	r0, r2, #28
 80153d6:	460c      	mov	r4, r1
 80153d8:	d458      	bmi.n	801548c <__sflush_r+0xc0>
 80153da:	684b      	ldr	r3, [r1, #4]
 80153dc:	2b00      	cmp	r3, #0
 80153de:	dc05      	bgt.n	80153ec <__sflush_r+0x20>
 80153e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	dc02      	bgt.n	80153ec <__sflush_r+0x20>
 80153e6:	2000      	movs	r0, #0
 80153e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80153ee:	2e00      	cmp	r6, #0
 80153f0:	d0f9      	beq.n	80153e6 <__sflush_r+0x1a>
 80153f2:	2300      	movs	r3, #0
 80153f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80153f8:	682f      	ldr	r7, [r5, #0]
 80153fa:	6a21      	ldr	r1, [r4, #32]
 80153fc:	602b      	str	r3, [r5, #0]
 80153fe:	d032      	beq.n	8015466 <__sflush_r+0x9a>
 8015400:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015402:	89a3      	ldrh	r3, [r4, #12]
 8015404:	075a      	lsls	r2, r3, #29
 8015406:	d505      	bpl.n	8015414 <__sflush_r+0x48>
 8015408:	6863      	ldr	r3, [r4, #4]
 801540a:	1ac0      	subs	r0, r0, r3
 801540c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801540e:	b10b      	cbz	r3, 8015414 <__sflush_r+0x48>
 8015410:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015412:	1ac0      	subs	r0, r0, r3
 8015414:	2300      	movs	r3, #0
 8015416:	4602      	mov	r2, r0
 8015418:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801541a:	6a21      	ldr	r1, [r4, #32]
 801541c:	4628      	mov	r0, r5
 801541e:	47b0      	blx	r6
 8015420:	1c43      	adds	r3, r0, #1
 8015422:	89a3      	ldrh	r3, [r4, #12]
 8015424:	d106      	bne.n	8015434 <__sflush_r+0x68>
 8015426:	6829      	ldr	r1, [r5, #0]
 8015428:	291d      	cmp	r1, #29
 801542a:	d82b      	bhi.n	8015484 <__sflush_r+0xb8>
 801542c:	4a29      	ldr	r2, [pc, #164]	; (80154d4 <__sflush_r+0x108>)
 801542e:	410a      	asrs	r2, r1
 8015430:	07d6      	lsls	r6, r2, #31
 8015432:	d427      	bmi.n	8015484 <__sflush_r+0xb8>
 8015434:	2200      	movs	r2, #0
 8015436:	6062      	str	r2, [r4, #4]
 8015438:	04d9      	lsls	r1, r3, #19
 801543a:	6922      	ldr	r2, [r4, #16]
 801543c:	6022      	str	r2, [r4, #0]
 801543e:	d504      	bpl.n	801544a <__sflush_r+0x7e>
 8015440:	1c42      	adds	r2, r0, #1
 8015442:	d101      	bne.n	8015448 <__sflush_r+0x7c>
 8015444:	682b      	ldr	r3, [r5, #0]
 8015446:	b903      	cbnz	r3, 801544a <__sflush_r+0x7e>
 8015448:	6560      	str	r0, [r4, #84]	; 0x54
 801544a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801544c:	602f      	str	r7, [r5, #0]
 801544e:	2900      	cmp	r1, #0
 8015450:	d0c9      	beq.n	80153e6 <__sflush_r+0x1a>
 8015452:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015456:	4299      	cmp	r1, r3
 8015458:	d002      	beq.n	8015460 <__sflush_r+0x94>
 801545a:	4628      	mov	r0, r5
 801545c:	f7fe f8d6 	bl	801360c <_free_r>
 8015460:	2000      	movs	r0, #0
 8015462:	6360      	str	r0, [r4, #52]	; 0x34
 8015464:	e7c0      	b.n	80153e8 <__sflush_r+0x1c>
 8015466:	2301      	movs	r3, #1
 8015468:	4628      	mov	r0, r5
 801546a:	47b0      	blx	r6
 801546c:	1c41      	adds	r1, r0, #1
 801546e:	d1c8      	bne.n	8015402 <__sflush_r+0x36>
 8015470:	682b      	ldr	r3, [r5, #0]
 8015472:	2b00      	cmp	r3, #0
 8015474:	d0c5      	beq.n	8015402 <__sflush_r+0x36>
 8015476:	2b1d      	cmp	r3, #29
 8015478:	d001      	beq.n	801547e <__sflush_r+0xb2>
 801547a:	2b16      	cmp	r3, #22
 801547c:	d101      	bne.n	8015482 <__sflush_r+0xb6>
 801547e:	602f      	str	r7, [r5, #0]
 8015480:	e7b1      	b.n	80153e6 <__sflush_r+0x1a>
 8015482:	89a3      	ldrh	r3, [r4, #12]
 8015484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015488:	81a3      	strh	r3, [r4, #12]
 801548a:	e7ad      	b.n	80153e8 <__sflush_r+0x1c>
 801548c:	690f      	ldr	r7, [r1, #16]
 801548e:	2f00      	cmp	r7, #0
 8015490:	d0a9      	beq.n	80153e6 <__sflush_r+0x1a>
 8015492:	0793      	lsls	r3, r2, #30
 8015494:	680e      	ldr	r6, [r1, #0]
 8015496:	bf08      	it	eq
 8015498:	694b      	ldreq	r3, [r1, #20]
 801549a:	600f      	str	r7, [r1, #0]
 801549c:	bf18      	it	ne
 801549e:	2300      	movne	r3, #0
 80154a0:	eba6 0807 	sub.w	r8, r6, r7
 80154a4:	608b      	str	r3, [r1, #8]
 80154a6:	f1b8 0f00 	cmp.w	r8, #0
 80154aa:	dd9c      	ble.n	80153e6 <__sflush_r+0x1a>
 80154ac:	6a21      	ldr	r1, [r4, #32]
 80154ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80154b0:	4643      	mov	r3, r8
 80154b2:	463a      	mov	r2, r7
 80154b4:	4628      	mov	r0, r5
 80154b6:	47b0      	blx	r6
 80154b8:	2800      	cmp	r0, #0
 80154ba:	dc06      	bgt.n	80154ca <__sflush_r+0xfe>
 80154bc:	89a3      	ldrh	r3, [r4, #12]
 80154be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80154c2:	81a3      	strh	r3, [r4, #12]
 80154c4:	f04f 30ff 	mov.w	r0, #4294967295
 80154c8:	e78e      	b.n	80153e8 <__sflush_r+0x1c>
 80154ca:	4407      	add	r7, r0
 80154cc:	eba8 0800 	sub.w	r8, r8, r0
 80154d0:	e7e9      	b.n	80154a6 <__sflush_r+0xda>
 80154d2:	bf00      	nop
 80154d4:	dfbffffe 	.word	0xdfbffffe

080154d8 <_fflush_r>:
 80154d8:	b538      	push	{r3, r4, r5, lr}
 80154da:	690b      	ldr	r3, [r1, #16]
 80154dc:	4605      	mov	r5, r0
 80154de:	460c      	mov	r4, r1
 80154e0:	b913      	cbnz	r3, 80154e8 <_fflush_r+0x10>
 80154e2:	2500      	movs	r5, #0
 80154e4:	4628      	mov	r0, r5
 80154e6:	bd38      	pop	{r3, r4, r5, pc}
 80154e8:	b118      	cbz	r0, 80154f2 <_fflush_r+0x1a>
 80154ea:	6a03      	ldr	r3, [r0, #32]
 80154ec:	b90b      	cbnz	r3, 80154f2 <_fflush_r+0x1a>
 80154ee:	f7fc ffc3 	bl	8012478 <__sinit>
 80154f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d0f3      	beq.n	80154e2 <_fflush_r+0xa>
 80154fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80154fc:	07d0      	lsls	r0, r2, #31
 80154fe:	d404      	bmi.n	801550a <_fflush_r+0x32>
 8015500:	0599      	lsls	r1, r3, #22
 8015502:	d402      	bmi.n	801550a <_fflush_r+0x32>
 8015504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015506:	f7fd f9ef 	bl	80128e8 <__retarget_lock_acquire_recursive>
 801550a:	4628      	mov	r0, r5
 801550c:	4621      	mov	r1, r4
 801550e:	f7ff ff5d 	bl	80153cc <__sflush_r>
 8015512:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015514:	07da      	lsls	r2, r3, #31
 8015516:	4605      	mov	r5, r0
 8015518:	d4e4      	bmi.n	80154e4 <_fflush_r+0xc>
 801551a:	89a3      	ldrh	r3, [r4, #12]
 801551c:	059b      	lsls	r3, r3, #22
 801551e:	d4e1      	bmi.n	80154e4 <_fflush_r+0xc>
 8015520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015522:	f7fd f9e2 	bl	80128ea <__retarget_lock_release_recursive>
 8015526:	e7dd      	b.n	80154e4 <_fflush_r+0xc>

08015528 <__swhatbuf_r>:
 8015528:	b570      	push	{r4, r5, r6, lr}
 801552a:	460c      	mov	r4, r1
 801552c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015530:	2900      	cmp	r1, #0
 8015532:	b096      	sub	sp, #88	; 0x58
 8015534:	4615      	mov	r5, r2
 8015536:	461e      	mov	r6, r3
 8015538:	da0d      	bge.n	8015556 <__swhatbuf_r+0x2e>
 801553a:	89a3      	ldrh	r3, [r4, #12]
 801553c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8015540:	f04f 0100 	mov.w	r1, #0
 8015544:	bf0c      	ite	eq
 8015546:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801554a:	2340      	movne	r3, #64	; 0x40
 801554c:	2000      	movs	r0, #0
 801554e:	6031      	str	r1, [r6, #0]
 8015550:	602b      	str	r3, [r5, #0]
 8015552:	b016      	add	sp, #88	; 0x58
 8015554:	bd70      	pop	{r4, r5, r6, pc}
 8015556:	466a      	mov	r2, sp
 8015558:	f000 f8b6 	bl	80156c8 <_fstat_r>
 801555c:	2800      	cmp	r0, #0
 801555e:	dbec      	blt.n	801553a <__swhatbuf_r+0x12>
 8015560:	9901      	ldr	r1, [sp, #4]
 8015562:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8015566:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801556a:	4259      	negs	r1, r3
 801556c:	4159      	adcs	r1, r3
 801556e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015572:	e7eb      	b.n	801554c <__swhatbuf_r+0x24>

08015574 <__smakebuf_r>:
 8015574:	898b      	ldrh	r3, [r1, #12]
 8015576:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015578:	079d      	lsls	r5, r3, #30
 801557a:	4606      	mov	r6, r0
 801557c:	460c      	mov	r4, r1
 801557e:	d507      	bpl.n	8015590 <__smakebuf_r+0x1c>
 8015580:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015584:	6023      	str	r3, [r4, #0]
 8015586:	6123      	str	r3, [r4, #16]
 8015588:	2301      	movs	r3, #1
 801558a:	6163      	str	r3, [r4, #20]
 801558c:	b002      	add	sp, #8
 801558e:	bd70      	pop	{r4, r5, r6, pc}
 8015590:	ab01      	add	r3, sp, #4
 8015592:	466a      	mov	r2, sp
 8015594:	f7ff ffc8 	bl	8015528 <__swhatbuf_r>
 8015598:	9900      	ldr	r1, [sp, #0]
 801559a:	4605      	mov	r5, r0
 801559c:	4630      	mov	r0, r6
 801559e:	f7fe f8a9 	bl	80136f4 <_malloc_r>
 80155a2:	b948      	cbnz	r0, 80155b8 <__smakebuf_r+0x44>
 80155a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80155a8:	059a      	lsls	r2, r3, #22
 80155aa:	d4ef      	bmi.n	801558c <__smakebuf_r+0x18>
 80155ac:	f023 0303 	bic.w	r3, r3, #3
 80155b0:	f043 0302 	orr.w	r3, r3, #2
 80155b4:	81a3      	strh	r3, [r4, #12]
 80155b6:	e7e3      	b.n	8015580 <__smakebuf_r+0xc>
 80155b8:	89a3      	ldrh	r3, [r4, #12]
 80155ba:	6020      	str	r0, [r4, #0]
 80155bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80155c0:	81a3      	strh	r3, [r4, #12]
 80155c2:	9b00      	ldr	r3, [sp, #0]
 80155c4:	6163      	str	r3, [r4, #20]
 80155c6:	9b01      	ldr	r3, [sp, #4]
 80155c8:	6120      	str	r0, [r4, #16]
 80155ca:	b15b      	cbz	r3, 80155e4 <__smakebuf_r+0x70>
 80155cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80155d0:	4630      	mov	r0, r6
 80155d2:	f000 f88b 	bl	80156ec <_isatty_r>
 80155d6:	b128      	cbz	r0, 80155e4 <__smakebuf_r+0x70>
 80155d8:	89a3      	ldrh	r3, [r4, #12]
 80155da:	f023 0303 	bic.w	r3, r3, #3
 80155de:	f043 0301 	orr.w	r3, r3, #1
 80155e2:	81a3      	strh	r3, [r4, #12]
 80155e4:	89a3      	ldrh	r3, [r4, #12]
 80155e6:	431d      	orrs	r5, r3
 80155e8:	81a5      	strh	r5, [r4, #12]
 80155ea:	e7cf      	b.n	801558c <__smakebuf_r+0x18>

080155ec <_putc_r>:
 80155ec:	b570      	push	{r4, r5, r6, lr}
 80155ee:	460d      	mov	r5, r1
 80155f0:	4614      	mov	r4, r2
 80155f2:	4606      	mov	r6, r0
 80155f4:	b118      	cbz	r0, 80155fe <_putc_r+0x12>
 80155f6:	6a03      	ldr	r3, [r0, #32]
 80155f8:	b90b      	cbnz	r3, 80155fe <_putc_r+0x12>
 80155fa:	f7fc ff3d 	bl	8012478 <__sinit>
 80155fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015600:	07d8      	lsls	r0, r3, #31
 8015602:	d405      	bmi.n	8015610 <_putc_r+0x24>
 8015604:	89a3      	ldrh	r3, [r4, #12]
 8015606:	0599      	lsls	r1, r3, #22
 8015608:	d402      	bmi.n	8015610 <_putc_r+0x24>
 801560a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801560c:	f7fd f96c 	bl	80128e8 <__retarget_lock_acquire_recursive>
 8015610:	68a3      	ldr	r3, [r4, #8]
 8015612:	3b01      	subs	r3, #1
 8015614:	2b00      	cmp	r3, #0
 8015616:	60a3      	str	r3, [r4, #8]
 8015618:	da05      	bge.n	8015626 <_putc_r+0x3a>
 801561a:	69a2      	ldr	r2, [r4, #24]
 801561c:	4293      	cmp	r3, r2
 801561e:	db12      	blt.n	8015646 <_putc_r+0x5a>
 8015620:	b2eb      	uxtb	r3, r5
 8015622:	2b0a      	cmp	r3, #10
 8015624:	d00f      	beq.n	8015646 <_putc_r+0x5a>
 8015626:	6823      	ldr	r3, [r4, #0]
 8015628:	1c5a      	adds	r2, r3, #1
 801562a:	6022      	str	r2, [r4, #0]
 801562c:	701d      	strb	r5, [r3, #0]
 801562e:	b2ed      	uxtb	r5, r5
 8015630:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015632:	07da      	lsls	r2, r3, #31
 8015634:	d405      	bmi.n	8015642 <_putc_r+0x56>
 8015636:	89a3      	ldrh	r3, [r4, #12]
 8015638:	059b      	lsls	r3, r3, #22
 801563a:	d402      	bmi.n	8015642 <_putc_r+0x56>
 801563c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801563e:	f7fd f954 	bl	80128ea <__retarget_lock_release_recursive>
 8015642:	4628      	mov	r0, r5
 8015644:	bd70      	pop	{r4, r5, r6, pc}
 8015646:	4629      	mov	r1, r5
 8015648:	4622      	mov	r2, r4
 801564a:	4630      	mov	r0, r6
 801564c:	f7fd f823 	bl	8012696 <__swbuf_r>
 8015650:	4605      	mov	r5, r0
 8015652:	e7ed      	b.n	8015630 <_putc_r+0x44>

08015654 <memmove>:
 8015654:	4288      	cmp	r0, r1
 8015656:	b510      	push	{r4, lr}
 8015658:	eb01 0402 	add.w	r4, r1, r2
 801565c:	d902      	bls.n	8015664 <memmove+0x10>
 801565e:	4284      	cmp	r4, r0
 8015660:	4623      	mov	r3, r4
 8015662:	d807      	bhi.n	8015674 <memmove+0x20>
 8015664:	1e43      	subs	r3, r0, #1
 8015666:	42a1      	cmp	r1, r4
 8015668:	d008      	beq.n	801567c <memmove+0x28>
 801566a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801566e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015672:	e7f8      	b.n	8015666 <memmove+0x12>
 8015674:	4402      	add	r2, r0
 8015676:	4601      	mov	r1, r0
 8015678:	428a      	cmp	r2, r1
 801567a:	d100      	bne.n	801567e <memmove+0x2a>
 801567c:	bd10      	pop	{r4, pc}
 801567e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015682:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015686:	e7f7      	b.n	8015678 <memmove+0x24>

08015688 <strchr>:
 8015688:	b2c9      	uxtb	r1, r1
 801568a:	4603      	mov	r3, r0
 801568c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015690:	b11a      	cbz	r2, 801569a <strchr+0x12>
 8015692:	428a      	cmp	r2, r1
 8015694:	d1f9      	bne.n	801568a <strchr+0x2>
 8015696:	4618      	mov	r0, r3
 8015698:	4770      	bx	lr
 801569a:	2900      	cmp	r1, #0
 801569c:	bf18      	it	ne
 801569e:	2300      	movne	r3, #0
 80156a0:	e7f9      	b.n	8015696 <strchr+0xe>

080156a2 <strncmp>:
 80156a2:	b510      	push	{r4, lr}
 80156a4:	b16a      	cbz	r2, 80156c2 <strncmp+0x20>
 80156a6:	3901      	subs	r1, #1
 80156a8:	1884      	adds	r4, r0, r2
 80156aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80156ae:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80156b2:	429a      	cmp	r2, r3
 80156b4:	d103      	bne.n	80156be <strncmp+0x1c>
 80156b6:	42a0      	cmp	r0, r4
 80156b8:	d001      	beq.n	80156be <strncmp+0x1c>
 80156ba:	2a00      	cmp	r2, #0
 80156bc:	d1f5      	bne.n	80156aa <strncmp+0x8>
 80156be:	1ad0      	subs	r0, r2, r3
 80156c0:	bd10      	pop	{r4, pc}
 80156c2:	4610      	mov	r0, r2
 80156c4:	e7fc      	b.n	80156c0 <strncmp+0x1e>
	...

080156c8 <_fstat_r>:
 80156c8:	b538      	push	{r3, r4, r5, lr}
 80156ca:	4d07      	ldr	r5, [pc, #28]	; (80156e8 <_fstat_r+0x20>)
 80156cc:	2300      	movs	r3, #0
 80156ce:	4604      	mov	r4, r0
 80156d0:	4608      	mov	r0, r1
 80156d2:	4611      	mov	r1, r2
 80156d4:	602b      	str	r3, [r5, #0]
 80156d6:	f7ef f888 	bl	80047ea <_fstat>
 80156da:	1c43      	adds	r3, r0, #1
 80156dc:	d102      	bne.n	80156e4 <_fstat_r+0x1c>
 80156de:	682b      	ldr	r3, [r5, #0]
 80156e0:	b103      	cbz	r3, 80156e4 <_fstat_r+0x1c>
 80156e2:	6023      	str	r3, [r4, #0]
 80156e4:	bd38      	pop	{r3, r4, r5, pc}
 80156e6:	bf00      	nop
 80156e8:	200008fc 	.word	0x200008fc

080156ec <_isatty_r>:
 80156ec:	b538      	push	{r3, r4, r5, lr}
 80156ee:	4d06      	ldr	r5, [pc, #24]	; (8015708 <_isatty_r+0x1c>)
 80156f0:	2300      	movs	r3, #0
 80156f2:	4604      	mov	r4, r0
 80156f4:	4608      	mov	r0, r1
 80156f6:	602b      	str	r3, [r5, #0]
 80156f8:	f7ef f887 	bl	800480a <_isatty>
 80156fc:	1c43      	adds	r3, r0, #1
 80156fe:	d102      	bne.n	8015706 <_isatty_r+0x1a>
 8015700:	682b      	ldr	r3, [r5, #0]
 8015702:	b103      	cbz	r3, 8015706 <_isatty_r+0x1a>
 8015704:	6023      	str	r3, [r4, #0]
 8015706:	bd38      	pop	{r3, r4, r5, pc}
 8015708:	200008fc 	.word	0x200008fc

0801570c <_sbrk_r>:
 801570c:	b538      	push	{r3, r4, r5, lr}
 801570e:	4d06      	ldr	r5, [pc, #24]	; (8015728 <_sbrk_r+0x1c>)
 8015710:	2300      	movs	r3, #0
 8015712:	4604      	mov	r4, r0
 8015714:	4608      	mov	r0, r1
 8015716:	602b      	str	r3, [r5, #0]
 8015718:	f7ef f890 	bl	800483c <_sbrk>
 801571c:	1c43      	adds	r3, r0, #1
 801571e:	d102      	bne.n	8015726 <_sbrk_r+0x1a>
 8015720:	682b      	ldr	r3, [r5, #0]
 8015722:	b103      	cbz	r3, 8015726 <_sbrk_r+0x1a>
 8015724:	6023      	str	r3, [r4, #0]
 8015726:	bd38      	pop	{r3, r4, r5, pc}
 8015728:	200008fc 	.word	0x200008fc
 801572c:	00000000 	.word	0x00000000

08015730 <nan>:
 8015730:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015738 <nan+0x8>
 8015734:	4770      	bx	lr
 8015736:	bf00      	nop
 8015738:	00000000 	.word	0x00000000
 801573c:	7ff80000 	.word	0x7ff80000

08015740 <__assert_func>:
 8015740:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015742:	4614      	mov	r4, r2
 8015744:	461a      	mov	r2, r3
 8015746:	4b09      	ldr	r3, [pc, #36]	; (801576c <__assert_func+0x2c>)
 8015748:	681b      	ldr	r3, [r3, #0]
 801574a:	4605      	mov	r5, r0
 801574c:	68d8      	ldr	r0, [r3, #12]
 801574e:	b14c      	cbz	r4, 8015764 <__assert_func+0x24>
 8015750:	4b07      	ldr	r3, [pc, #28]	; (8015770 <__assert_func+0x30>)
 8015752:	9100      	str	r1, [sp, #0]
 8015754:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015758:	4906      	ldr	r1, [pc, #24]	; (8015774 <__assert_func+0x34>)
 801575a:	462b      	mov	r3, r5
 801575c:	f000 fbca 	bl	8015ef4 <fiprintf>
 8015760:	f000 fbda 	bl	8015f18 <abort>
 8015764:	4b04      	ldr	r3, [pc, #16]	; (8015778 <__assert_func+0x38>)
 8015766:	461c      	mov	r4, r3
 8015768:	e7f3      	b.n	8015752 <__assert_func+0x12>
 801576a:	bf00      	nop
 801576c:	200000c8 	.word	0x200000c8
 8015770:	080187a2 	.word	0x080187a2
 8015774:	080187af 	.word	0x080187af
 8015778:	080187dd 	.word	0x080187dd

0801577c <_calloc_r>:
 801577c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801577e:	fba1 2402 	umull	r2, r4, r1, r2
 8015782:	b94c      	cbnz	r4, 8015798 <_calloc_r+0x1c>
 8015784:	4611      	mov	r1, r2
 8015786:	9201      	str	r2, [sp, #4]
 8015788:	f7fd ffb4 	bl	80136f4 <_malloc_r>
 801578c:	9a01      	ldr	r2, [sp, #4]
 801578e:	4605      	mov	r5, r0
 8015790:	b930      	cbnz	r0, 80157a0 <_calloc_r+0x24>
 8015792:	4628      	mov	r0, r5
 8015794:	b003      	add	sp, #12
 8015796:	bd30      	pop	{r4, r5, pc}
 8015798:	220c      	movs	r2, #12
 801579a:	6002      	str	r2, [r0, #0]
 801579c:	2500      	movs	r5, #0
 801579e:	e7f8      	b.n	8015792 <_calloc_r+0x16>
 80157a0:	4621      	mov	r1, r4
 80157a2:	f7fd f80d 	bl	80127c0 <memset>
 80157a6:	e7f4      	b.n	8015792 <_calloc_r+0x16>

080157a8 <rshift>:
 80157a8:	6903      	ldr	r3, [r0, #16]
 80157aa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80157ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80157b2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80157b6:	f100 0414 	add.w	r4, r0, #20
 80157ba:	dd45      	ble.n	8015848 <rshift+0xa0>
 80157bc:	f011 011f 	ands.w	r1, r1, #31
 80157c0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80157c4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80157c8:	d10c      	bne.n	80157e4 <rshift+0x3c>
 80157ca:	f100 0710 	add.w	r7, r0, #16
 80157ce:	4629      	mov	r1, r5
 80157d0:	42b1      	cmp	r1, r6
 80157d2:	d334      	bcc.n	801583e <rshift+0x96>
 80157d4:	1a9b      	subs	r3, r3, r2
 80157d6:	009b      	lsls	r3, r3, #2
 80157d8:	1eea      	subs	r2, r5, #3
 80157da:	4296      	cmp	r6, r2
 80157dc:	bf38      	it	cc
 80157de:	2300      	movcc	r3, #0
 80157e0:	4423      	add	r3, r4
 80157e2:	e015      	b.n	8015810 <rshift+0x68>
 80157e4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80157e8:	f1c1 0820 	rsb	r8, r1, #32
 80157ec:	40cf      	lsrs	r7, r1
 80157ee:	f105 0e04 	add.w	lr, r5, #4
 80157f2:	46a1      	mov	r9, r4
 80157f4:	4576      	cmp	r6, lr
 80157f6:	46f4      	mov	ip, lr
 80157f8:	d815      	bhi.n	8015826 <rshift+0x7e>
 80157fa:	1a9a      	subs	r2, r3, r2
 80157fc:	0092      	lsls	r2, r2, #2
 80157fe:	3a04      	subs	r2, #4
 8015800:	3501      	adds	r5, #1
 8015802:	42ae      	cmp	r6, r5
 8015804:	bf38      	it	cc
 8015806:	2200      	movcc	r2, #0
 8015808:	18a3      	adds	r3, r4, r2
 801580a:	50a7      	str	r7, [r4, r2]
 801580c:	b107      	cbz	r7, 8015810 <rshift+0x68>
 801580e:	3304      	adds	r3, #4
 8015810:	1b1a      	subs	r2, r3, r4
 8015812:	42a3      	cmp	r3, r4
 8015814:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015818:	bf08      	it	eq
 801581a:	2300      	moveq	r3, #0
 801581c:	6102      	str	r2, [r0, #16]
 801581e:	bf08      	it	eq
 8015820:	6143      	streq	r3, [r0, #20]
 8015822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015826:	f8dc c000 	ldr.w	ip, [ip]
 801582a:	fa0c fc08 	lsl.w	ip, ip, r8
 801582e:	ea4c 0707 	orr.w	r7, ip, r7
 8015832:	f849 7b04 	str.w	r7, [r9], #4
 8015836:	f85e 7b04 	ldr.w	r7, [lr], #4
 801583a:	40cf      	lsrs	r7, r1
 801583c:	e7da      	b.n	80157f4 <rshift+0x4c>
 801583e:	f851 cb04 	ldr.w	ip, [r1], #4
 8015842:	f847 cf04 	str.w	ip, [r7, #4]!
 8015846:	e7c3      	b.n	80157d0 <rshift+0x28>
 8015848:	4623      	mov	r3, r4
 801584a:	e7e1      	b.n	8015810 <rshift+0x68>

0801584c <__hexdig_fun>:
 801584c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015850:	2b09      	cmp	r3, #9
 8015852:	d802      	bhi.n	801585a <__hexdig_fun+0xe>
 8015854:	3820      	subs	r0, #32
 8015856:	b2c0      	uxtb	r0, r0
 8015858:	4770      	bx	lr
 801585a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801585e:	2b05      	cmp	r3, #5
 8015860:	d801      	bhi.n	8015866 <__hexdig_fun+0x1a>
 8015862:	3847      	subs	r0, #71	; 0x47
 8015864:	e7f7      	b.n	8015856 <__hexdig_fun+0xa>
 8015866:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801586a:	2b05      	cmp	r3, #5
 801586c:	d801      	bhi.n	8015872 <__hexdig_fun+0x26>
 801586e:	3827      	subs	r0, #39	; 0x27
 8015870:	e7f1      	b.n	8015856 <__hexdig_fun+0xa>
 8015872:	2000      	movs	r0, #0
 8015874:	4770      	bx	lr
	...

08015878 <__gethex>:
 8015878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801587c:	4617      	mov	r7, r2
 801587e:	680a      	ldr	r2, [r1, #0]
 8015880:	b085      	sub	sp, #20
 8015882:	f102 0b02 	add.w	fp, r2, #2
 8015886:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801588a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801588e:	4681      	mov	r9, r0
 8015890:	468a      	mov	sl, r1
 8015892:	9302      	str	r3, [sp, #8]
 8015894:	32fe      	adds	r2, #254	; 0xfe
 8015896:	eb02 030b 	add.w	r3, r2, fp
 801589a:	46d8      	mov	r8, fp
 801589c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80158a0:	9301      	str	r3, [sp, #4]
 80158a2:	2830      	cmp	r0, #48	; 0x30
 80158a4:	d0f7      	beq.n	8015896 <__gethex+0x1e>
 80158a6:	f7ff ffd1 	bl	801584c <__hexdig_fun>
 80158aa:	4604      	mov	r4, r0
 80158ac:	2800      	cmp	r0, #0
 80158ae:	d138      	bne.n	8015922 <__gethex+0xaa>
 80158b0:	49a7      	ldr	r1, [pc, #668]	; (8015b50 <__gethex+0x2d8>)
 80158b2:	2201      	movs	r2, #1
 80158b4:	4640      	mov	r0, r8
 80158b6:	f7ff fef4 	bl	80156a2 <strncmp>
 80158ba:	4606      	mov	r6, r0
 80158bc:	2800      	cmp	r0, #0
 80158be:	d169      	bne.n	8015994 <__gethex+0x11c>
 80158c0:	f898 0001 	ldrb.w	r0, [r8, #1]
 80158c4:	465d      	mov	r5, fp
 80158c6:	f7ff ffc1 	bl	801584c <__hexdig_fun>
 80158ca:	2800      	cmp	r0, #0
 80158cc:	d064      	beq.n	8015998 <__gethex+0x120>
 80158ce:	465a      	mov	r2, fp
 80158d0:	7810      	ldrb	r0, [r2, #0]
 80158d2:	2830      	cmp	r0, #48	; 0x30
 80158d4:	4690      	mov	r8, r2
 80158d6:	f102 0201 	add.w	r2, r2, #1
 80158da:	d0f9      	beq.n	80158d0 <__gethex+0x58>
 80158dc:	f7ff ffb6 	bl	801584c <__hexdig_fun>
 80158e0:	2301      	movs	r3, #1
 80158e2:	fab0 f480 	clz	r4, r0
 80158e6:	0964      	lsrs	r4, r4, #5
 80158e8:	465e      	mov	r6, fp
 80158ea:	9301      	str	r3, [sp, #4]
 80158ec:	4642      	mov	r2, r8
 80158ee:	4615      	mov	r5, r2
 80158f0:	3201      	adds	r2, #1
 80158f2:	7828      	ldrb	r0, [r5, #0]
 80158f4:	f7ff ffaa 	bl	801584c <__hexdig_fun>
 80158f8:	2800      	cmp	r0, #0
 80158fa:	d1f8      	bne.n	80158ee <__gethex+0x76>
 80158fc:	4994      	ldr	r1, [pc, #592]	; (8015b50 <__gethex+0x2d8>)
 80158fe:	2201      	movs	r2, #1
 8015900:	4628      	mov	r0, r5
 8015902:	f7ff fece 	bl	80156a2 <strncmp>
 8015906:	b978      	cbnz	r0, 8015928 <__gethex+0xb0>
 8015908:	b946      	cbnz	r6, 801591c <__gethex+0xa4>
 801590a:	1c6e      	adds	r6, r5, #1
 801590c:	4632      	mov	r2, r6
 801590e:	4615      	mov	r5, r2
 8015910:	3201      	adds	r2, #1
 8015912:	7828      	ldrb	r0, [r5, #0]
 8015914:	f7ff ff9a 	bl	801584c <__hexdig_fun>
 8015918:	2800      	cmp	r0, #0
 801591a:	d1f8      	bne.n	801590e <__gethex+0x96>
 801591c:	1b73      	subs	r3, r6, r5
 801591e:	009e      	lsls	r6, r3, #2
 8015920:	e004      	b.n	801592c <__gethex+0xb4>
 8015922:	2400      	movs	r4, #0
 8015924:	4626      	mov	r6, r4
 8015926:	e7e1      	b.n	80158ec <__gethex+0x74>
 8015928:	2e00      	cmp	r6, #0
 801592a:	d1f7      	bne.n	801591c <__gethex+0xa4>
 801592c:	782b      	ldrb	r3, [r5, #0]
 801592e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015932:	2b50      	cmp	r3, #80	; 0x50
 8015934:	d13d      	bne.n	80159b2 <__gethex+0x13a>
 8015936:	786b      	ldrb	r3, [r5, #1]
 8015938:	2b2b      	cmp	r3, #43	; 0x2b
 801593a:	d02f      	beq.n	801599c <__gethex+0x124>
 801593c:	2b2d      	cmp	r3, #45	; 0x2d
 801593e:	d031      	beq.n	80159a4 <__gethex+0x12c>
 8015940:	1c69      	adds	r1, r5, #1
 8015942:	f04f 0b00 	mov.w	fp, #0
 8015946:	7808      	ldrb	r0, [r1, #0]
 8015948:	f7ff ff80 	bl	801584c <__hexdig_fun>
 801594c:	1e42      	subs	r2, r0, #1
 801594e:	b2d2      	uxtb	r2, r2
 8015950:	2a18      	cmp	r2, #24
 8015952:	d82e      	bhi.n	80159b2 <__gethex+0x13a>
 8015954:	f1a0 0210 	sub.w	r2, r0, #16
 8015958:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801595c:	f7ff ff76 	bl	801584c <__hexdig_fun>
 8015960:	f100 3cff 	add.w	ip, r0, #4294967295
 8015964:	fa5f fc8c 	uxtb.w	ip, ip
 8015968:	f1bc 0f18 	cmp.w	ip, #24
 801596c:	d91d      	bls.n	80159aa <__gethex+0x132>
 801596e:	f1bb 0f00 	cmp.w	fp, #0
 8015972:	d000      	beq.n	8015976 <__gethex+0xfe>
 8015974:	4252      	negs	r2, r2
 8015976:	4416      	add	r6, r2
 8015978:	f8ca 1000 	str.w	r1, [sl]
 801597c:	b1dc      	cbz	r4, 80159b6 <__gethex+0x13e>
 801597e:	9b01      	ldr	r3, [sp, #4]
 8015980:	2b00      	cmp	r3, #0
 8015982:	bf14      	ite	ne
 8015984:	f04f 0800 	movne.w	r8, #0
 8015988:	f04f 0806 	moveq.w	r8, #6
 801598c:	4640      	mov	r0, r8
 801598e:	b005      	add	sp, #20
 8015990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015994:	4645      	mov	r5, r8
 8015996:	4626      	mov	r6, r4
 8015998:	2401      	movs	r4, #1
 801599a:	e7c7      	b.n	801592c <__gethex+0xb4>
 801599c:	f04f 0b00 	mov.w	fp, #0
 80159a0:	1ca9      	adds	r1, r5, #2
 80159a2:	e7d0      	b.n	8015946 <__gethex+0xce>
 80159a4:	f04f 0b01 	mov.w	fp, #1
 80159a8:	e7fa      	b.n	80159a0 <__gethex+0x128>
 80159aa:	230a      	movs	r3, #10
 80159ac:	fb03 0002 	mla	r0, r3, r2, r0
 80159b0:	e7d0      	b.n	8015954 <__gethex+0xdc>
 80159b2:	4629      	mov	r1, r5
 80159b4:	e7e0      	b.n	8015978 <__gethex+0x100>
 80159b6:	eba5 0308 	sub.w	r3, r5, r8
 80159ba:	3b01      	subs	r3, #1
 80159bc:	4621      	mov	r1, r4
 80159be:	2b07      	cmp	r3, #7
 80159c0:	dc0a      	bgt.n	80159d8 <__gethex+0x160>
 80159c2:	4648      	mov	r0, r9
 80159c4:	f7fd ff22 	bl	801380c <_Balloc>
 80159c8:	4604      	mov	r4, r0
 80159ca:	b940      	cbnz	r0, 80159de <__gethex+0x166>
 80159cc:	4b61      	ldr	r3, [pc, #388]	; (8015b54 <__gethex+0x2dc>)
 80159ce:	4602      	mov	r2, r0
 80159d0:	21e4      	movs	r1, #228	; 0xe4
 80159d2:	4861      	ldr	r0, [pc, #388]	; (8015b58 <__gethex+0x2e0>)
 80159d4:	f7ff feb4 	bl	8015740 <__assert_func>
 80159d8:	3101      	adds	r1, #1
 80159da:	105b      	asrs	r3, r3, #1
 80159dc:	e7ef      	b.n	80159be <__gethex+0x146>
 80159de:	f100 0a14 	add.w	sl, r0, #20
 80159e2:	2300      	movs	r3, #0
 80159e4:	495a      	ldr	r1, [pc, #360]	; (8015b50 <__gethex+0x2d8>)
 80159e6:	f8cd a004 	str.w	sl, [sp, #4]
 80159ea:	469b      	mov	fp, r3
 80159ec:	45a8      	cmp	r8, r5
 80159ee:	d342      	bcc.n	8015a76 <__gethex+0x1fe>
 80159f0:	9801      	ldr	r0, [sp, #4]
 80159f2:	f840 bb04 	str.w	fp, [r0], #4
 80159f6:	eba0 000a 	sub.w	r0, r0, sl
 80159fa:	1080      	asrs	r0, r0, #2
 80159fc:	6120      	str	r0, [r4, #16]
 80159fe:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8015a02:	4658      	mov	r0, fp
 8015a04:	f7fd fff4 	bl	80139f0 <__hi0bits>
 8015a08:	683d      	ldr	r5, [r7, #0]
 8015a0a:	eba8 0000 	sub.w	r0, r8, r0
 8015a0e:	42a8      	cmp	r0, r5
 8015a10:	dd59      	ble.n	8015ac6 <__gethex+0x24e>
 8015a12:	eba0 0805 	sub.w	r8, r0, r5
 8015a16:	4641      	mov	r1, r8
 8015a18:	4620      	mov	r0, r4
 8015a1a:	f7fe fb83 	bl	8014124 <__any_on>
 8015a1e:	4683      	mov	fp, r0
 8015a20:	b1b8      	cbz	r0, 8015a52 <__gethex+0x1da>
 8015a22:	f108 33ff 	add.w	r3, r8, #4294967295
 8015a26:	1159      	asrs	r1, r3, #5
 8015a28:	f003 021f 	and.w	r2, r3, #31
 8015a2c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8015a30:	f04f 0b01 	mov.w	fp, #1
 8015a34:	fa0b f202 	lsl.w	r2, fp, r2
 8015a38:	420a      	tst	r2, r1
 8015a3a:	d00a      	beq.n	8015a52 <__gethex+0x1da>
 8015a3c:	455b      	cmp	r3, fp
 8015a3e:	dd06      	ble.n	8015a4e <__gethex+0x1d6>
 8015a40:	f1a8 0102 	sub.w	r1, r8, #2
 8015a44:	4620      	mov	r0, r4
 8015a46:	f7fe fb6d 	bl	8014124 <__any_on>
 8015a4a:	2800      	cmp	r0, #0
 8015a4c:	d138      	bne.n	8015ac0 <__gethex+0x248>
 8015a4e:	f04f 0b02 	mov.w	fp, #2
 8015a52:	4641      	mov	r1, r8
 8015a54:	4620      	mov	r0, r4
 8015a56:	f7ff fea7 	bl	80157a8 <rshift>
 8015a5a:	4446      	add	r6, r8
 8015a5c:	68bb      	ldr	r3, [r7, #8]
 8015a5e:	42b3      	cmp	r3, r6
 8015a60:	da41      	bge.n	8015ae6 <__gethex+0x26e>
 8015a62:	4621      	mov	r1, r4
 8015a64:	4648      	mov	r0, r9
 8015a66:	f7fd ff11 	bl	801388c <_Bfree>
 8015a6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015a6c:	2300      	movs	r3, #0
 8015a6e:	6013      	str	r3, [r2, #0]
 8015a70:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8015a74:	e78a      	b.n	801598c <__gethex+0x114>
 8015a76:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8015a7a:	2a2e      	cmp	r2, #46	; 0x2e
 8015a7c:	d014      	beq.n	8015aa8 <__gethex+0x230>
 8015a7e:	2b20      	cmp	r3, #32
 8015a80:	d106      	bne.n	8015a90 <__gethex+0x218>
 8015a82:	9b01      	ldr	r3, [sp, #4]
 8015a84:	f843 bb04 	str.w	fp, [r3], #4
 8015a88:	f04f 0b00 	mov.w	fp, #0
 8015a8c:	9301      	str	r3, [sp, #4]
 8015a8e:	465b      	mov	r3, fp
 8015a90:	7828      	ldrb	r0, [r5, #0]
 8015a92:	9303      	str	r3, [sp, #12]
 8015a94:	f7ff feda 	bl	801584c <__hexdig_fun>
 8015a98:	9b03      	ldr	r3, [sp, #12]
 8015a9a:	f000 000f 	and.w	r0, r0, #15
 8015a9e:	4098      	lsls	r0, r3
 8015aa0:	ea4b 0b00 	orr.w	fp, fp, r0
 8015aa4:	3304      	adds	r3, #4
 8015aa6:	e7a1      	b.n	80159ec <__gethex+0x174>
 8015aa8:	45a8      	cmp	r8, r5
 8015aaa:	d8e8      	bhi.n	8015a7e <__gethex+0x206>
 8015aac:	2201      	movs	r2, #1
 8015aae:	4628      	mov	r0, r5
 8015ab0:	9303      	str	r3, [sp, #12]
 8015ab2:	f7ff fdf6 	bl	80156a2 <strncmp>
 8015ab6:	4926      	ldr	r1, [pc, #152]	; (8015b50 <__gethex+0x2d8>)
 8015ab8:	9b03      	ldr	r3, [sp, #12]
 8015aba:	2800      	cmp	r0, #0
 8015abc:	d1df      	bne.n	8015a7e <__gethex+0x206>
 8015abe:	e795      	b.n	80159ec <__gethex+0x174>
 8015ac0:	f04f 0b03 	mov.w	fp, #3
 8015ac4:	e7c5      	b.n	8015a52 <__gethex+0x1da>
 8015ac6:	da0b      	bge.n	8015ae0 <__gethex+0x268>
 8015ac8:	eba5 0800 	sub.w	r8, r5, r0
 8015acc:	4621      	mov	r1, r4
 8015ace:	4642      	mov	r2, r8
 8015ad0:	4648      	mov	r0, r9
 8015ad2:	f7fe f8f5 	bl	8013cc0 <__lshift>
 8015ad6:	eba6 0608 	sub.w	r6, r6, r8
 8015ada:	4604      	mov	r4, r0
 8015adc:	f100 0a14 	add.w	sl, r0, #20
 8015ae0:	f04f 0b00 	mov.w	fp, #0
 8015ae4:	e7ba      	b.n	8015a5c <__gethex+0x1e4>
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	42b3      	cmp	r3, r6
 8015aea:	dd73      	ble.n	8015bd4 <__gethex+0x35c>
 8015aec:	1b9e      	subs	r6, r3, r6
 8015aee:	42b5      	cmp	r5, r6
 8015af0:	dc34      	bgt.n	8015b5c <__gethex+0x2e4>
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	2b02      	cmp	r3, #2
 8015af6:	d023      	beq.n	8015b40 <__gethex+0x2c8>
 8015af8:	2b03      	cmp	r3, #3
 8015afa:	d025      	beq.n	8015b48 <__gethex+0x2d0>
 8015afc:	2b01      	cmp	r3, #1
 8015afe:	d115      	bne.n	8015b2c <__gethex+0x2b4>
 8015b00:	42b5      	cmp	r5, r6
 8015b02:	d113      	bne.n	8015b2c <__gethex+0x2b4>
 8015b04:	2d01      	cmp	r5, #1
 8015b06:	d10b      	bne.n	8015b20 <__gethex+0x2a8>
 8015b08:	9a02      	ldr	r2, [sp, #8]
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	6013      	str	r3, [r2, #0]
 8015b0e:	2301      	movs	r3, #1
 8015b10:	6123      	str	r3, [r4, #16]
 8015b12:	f8ca 3000 	str.w	r3, [sl]
 8015b16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b18:	f04f 0862 	mov.w	r8, #98	; 0x62
 8015b1c:	601c      	str	r4, [r3, #0]
 8015b1e:	e735      	b.n	801598c <__gethex+0x114>
 8015b20:	1e69      	subs	r1, r5, #1
 8015b22:	4620      	mov	r0, r4
 8015b24:	f7fe fafe 	bl	8014124 <__any_on>
 8015b28:	2800      	cmp	r0, #0
 8015b2a:	d1ed      	bne.n	8015b08 <__gethex+0x290>
 8015b2c:	4621      	mov	r1, r4
 8015b2e:	4648      	mov	r0, r9
 8015b30:	f7fd feac 	bl	801388c <_Bfree>
 8015b34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015b36:	2300      	movs	r3, #0
 8015b38:	6013      	str	r3, [r2, #0]
 8015b3a:	f04f 0850 	mov.w	r8, #80	; 0x50
 8015b3e:	e725      	b.n	801598c <__gethex+0x114>
 8015b40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d1f2      	bne.n	8015b2c <__gethex+0x2b4>
 8015b46:	e7df      	b.n	8015b08 <__gethex+0x290>
 8015b48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d1dc      	bne.n	8015b08 <__gethex+0x290>
 8015b4e:	e7ed      	b.n	8015b2c <__gethex+0x2b4>
 8015b50:	08018634 	.word	0x08018634
 8015b54:	080184cd 	.word	0x080184cd
 8015b58:	080187de 	.word	0x080187de
 8015b5c:	f106 38ff 	add.w	r8, r6, #4294967295
 8015b60:	f1bb 0f00 	cmp.w	fp, #0
 8015b64:	d133      	bne.n	8015bce <__gethex+0x356>
 8015b66:	f1b8 0f00 	cmp.w	r8, #0
 8015b6a:	d004      	beq.n	8015b76 <__gethex+0x2fe>
 8015b6c:	4641      	mov	r1, r8
 8015b6e:	4620      	mov	r0, r4
 8015b70:	f7fe fad8 	bl	8014124 <__any_on>
 8015b74:	4683      	mov	fp, r0
 8015b76:	ea4f 1268 	mov.w	r2, r8, asr #5
 8015b7a:	2301      	movs	r3, #1
 8015b7c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8015b80:	f008 081f 	and.w	r8, r8, #31
 8015b84:	fa03 f308 	lsl.w	r3, r3, r8
 8015b88:	4213      	tst	r3, r2
 8015b8a:	4631      	mov	r1, r6
 8015b8c:	4620      	mov	r0, r4
 8015b8e:	bf18      	it	ne
 8015b90:	f04b 0b02 	orrne.w	fp, fp, #2
 8015b94:	1bad      	subs	r5, r5, r6
 8015b96:	f7ff fe07 	bl	80157a8 <rshift>
 8015b9a:	687e      	ldr	r6, [r7, #4]
 8015b9c:	f04f 0802 	mov.w	r8, #2
 8015ba0:	f1bb 0f00 	cmp.w	fp, #0
 8015ba4:	d04a      	beq.n	8015c3c <__gethex+0x3c4>
 8015ba6:	68fb      	ldr	r3, [r7, #12]
 8015ba8:	2b02      	cmp	r3, #2
 8015baa:	d016      	beq.n	8015bda <__gethex+0x362>
 8015bac:	2b03      	cmp	r3, #3
 8015bae:	d018      	beq.n	8015be2 <__gethex+0x36a>
 8015bb0:	2b01      	cmp	r3, #1
 8015bb2:	d109      	bne.n	8015bc8 <__gethex+0x350>
 8015bb4:	f01b 0f02 	tst.w	fp, #2
 8015bb8:	d006      	beq.n	8015bc8 <__gethex+0x350>
 8015bba:	f8da 3000 	ldr.w	r3, [sl]
 8015bbe:	ea4b 0b03 	orr.w	fp, fp, r3
 8015bc2:	f01b 0f01 	tst.w	fp, #1
 8015bc6:	d10f      	bne.n	8015be8 <__gethex+0x370>
 8015bc8:	f048 0810 	orr.w	r8, r8, #16
 8015bcc:	e036      	b.n	8015c3c <__gethex+0x3c4>
 8015bce:	f04f 0b01 	mov.w	fp, #1
 8015bd2:	e7d0      	b.n	8015b76 <__gethex+0x2fe>
 8015bd4:	f04f 0801 	mov.w	r8, #1
 8015bd8:	e7e2      	b.n	8015ba0 <__gethex+0x328>
 8015bda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015bdc:	f1c3 0301 	rsb	r3, r3, #1
 8015be0:	930f      	str	r3, [sp, #60]	; 0x3c
 8015be2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d0ef      	beq.n	8015bc8 <__gethex+0x350>
 8015be8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015bec:	f104 0214 	add.w	r2, r4, #20
 8015bf0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8015bf4:	9301      	str	r3, [sp, #4]
 8015bf6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8015bfa:	2300      	movs	r3, #0
 8015bfc:	4694      	mov	ip, r2
 8015bfe:	f852 1b04 	ldr.w	r1, [r2], #4
 8015c02:	f1b1 3fff 	cmp.w	r1, #4294967295
 8015c06:	d01e      	beq.n	8015c46 <__gethex+0x3ce>
 8015c08:	3101      	adds	r1, #1
 8015c0a:	f8cc 1000 	str.w	r1, [ip]
 8015c0e:	f1b8 0f02 	cmp.w	r8, #2
 8015c12:	f104 0214 	add.w	r2, r4, #20
 8015c16:	d13d      	bne.n	8015c94 <__gethex+0x41c>
 8015c18:	683b      	ldr	r3, [r7, #0]
 8015c1a:	3b01      	subs	r3, #1
 8015c1c:	42ab      	cmp	r3, r5
 8015c1e:	d10b      	bne.n	8015c38 <__gethex+0x3c0>
 8015c20:	1169      	asrs	r1, r5, #5
 8015c22:	2301      	movs	r3, #1
 8015c24:	f005 051f 	and.w	r5, r5, #31
 8015c28:	fa03 f505 	lsl.w	r5, r3, r5
 8015c2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015c30:	421d      	tst	r5, r3
 8015c32:	bf18      	it	ne
 8015c34:	f04f 0801 	movne.w	r8, #1
 8015c38:	f048 0820 	orr.w	r8, r8, #32
 8015c3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015c3e:	601c      	str	r4, [r3, #0]
 8015c40:	9b02      	ldr	r3, [sp, #8]
 8015c42:	601e      	str	r6, [r3, #0]
 8015c44:	e6a2      	b.n	801598c <__gethex+0x114>
 8015c46:	4290      	cmp	r0, r2
 8015c48:	f842 3c04 	str.w	r3, [r2, #-4]
 8015c4c:	d8d6      	bhi.n	8015bfc <__gethex+0x384>
 8015c4e:	68a2      	ldr	r2, [r4, #8]
 8015c50:	4593      	cmp	fp, r2
 8015c52:	db17      	blt.n	8015c84 <__gethex+0x40c>
 8015c54:	6861      	ldr	r1, [r4, #4]
 8015c56:	4648      	mov	r0, r9
 8015c58:	3101      	adds	r1, #1
 8015c5a:	f7fd fdd7 	bl	801380c <_Balloc>
 8015c5e:	4682      	mov	sl, r0
 8015c60:	b918      	cbnz	r0, 8015c6a <__gethex+0x3f2>
 8015c62:	4b1b      	ldr	r3, [pc, #108]	; (8015cd0 <__gethex+0x458>)
 8015c64:	4602      	mov	r2, r0
 8015c66:	2184      	movs	r1, #132	; 0x84
 8015c68:	e6b3      	b.n	80159d2 <__gethex+0x15a>
 8015c6a:	6922      	ldr	r2, [r4, #16]
 8015c6c:	3202      	adds	r2, #2
 8015c6e:	f104 010c 	add.w	r1, r4, #12
 8015c72:	0092      	lsls	r2, r2, #2
 8015c74:	300c      	adds	r0, #12
 8015c76:	f7fc fe39 	bl	80128ec <memcpy>
 8015c7a:	4621      	mov	r1, r4
 8015c7c:	4648      	mov	r0, r9
 8015c7e:	f7fd fe05 	bl	801388c <_Bfree>
 8015c82:	4654      	mov	r4, sl
 8015c84:	6922      	ldr	r2, [r4, #16]
 8015c86:	1c51      	adds	r1, r2, #1
 8015c88:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8015c8c:	6121      	str	r1, [r4, #16]
 8015c8e:	2101      	movs	r1, #1
 8015c90:	6151      	str	r1, [r2, #20]
 8015c92:	e7bc      	b.n	8015c0e <__gethex+0x396>
 8015c94:	6921      	ldr	r1, [r4, #16]
 8015c96:	4559      	cmp	r1, fp
 8015c98:	dd0b      	ble.n	8015cb2 <__gethex+0x43a>
 8015c9a:	2101      	movs	r1, #1
 8015c9c:	4620      	mov	r0, r4
 8015c9e:	f7ff fd83 	bl	80157a8 <rshift>
 8015ca2:	68bb      	ldr	r3, [r7, #8]
 8015ca4:	3601      	adds	r6, #1
 8015ca6:	42b3      	cmp	r3, r6
 8015ca8:	f6ff aedb 	blt.w	8015a62 <__gethex+0x1ea>
 8015cac:	f04f 0801 	mov.w	r8, #1
 8015cb0:	e7c2      	b.n	8015c38 <__gethex+0x3c0>
 8015cb2:	f015 051f 	ands.w	r5, r5, #31
 8015cb6:	d0f9      	beq.n	8015cac <__gethex+0x434>
 8015cb8:	9b01      	ldr	r3, [sp, #4]
 8015cba:	441a      	add	r2, r3
 8015cbc:	f1c5 0520 	rsb	r5, r5, #32
 8015cc0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8015cc4:	f7fd fe94 	bl	80139f0 <__hi0bits>
 8015cc8:	42a8      	cmp	r0, r5
 8015cca:	dbe6      	blt.n	8015c9a <__gethex+0x422>
 8015ccc:	e7ee      	b.n	8015cac <__gethex+0x434>
 8015cce:	bf00      	nop
 8015cd0:	080184cd 	.word	0x080184cd

08015cd4 <L_shift>:
 8015cd4:	f1c2 0208 	rsb	r2, r2, #8
 8015cd8:	0092      	lsls	r2, r2, #2
 8015cda:	b570      	push	{r4, r5, r6, lr}
 8015cdc:	f1c2 0620 	rsb	r6, r2, #32
 8015ce0:	6843      	ldr	r3, [r0, #4]
 8015ce2:	6804      	ldr	r4, [r0, #0]
 8015ce4:	fa03 f506 	lsl.w	r5, r3, r6
 8015ce8:	432c      	orrs	r4, r5
 8015cea:	40d3      	lsrs	r3, r2
 8015cec:	6004      	str	r4, [r0, #0]
 8015cee:	f840 3f04 	str.w	r3, [r0, #4]!
 8015cf2:	4288      	cmp	r0, r1
 8015cf4:	d3f4      	bcc.n	8015ce0 <L_shift+0xc>
 8015cf6:	bd70      	pop	{r4, r5, r6, pc}

08015cf8 <__match>:
 8015cf8:	b530      	push	{r4, r5, lr}
 8015cfa:	6803      	ldr	r3, [r0, #0]
 8015cfc:	3301      	adds	r3, #1
 8015cfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015d02:	b914      	cbnz	r4, 8015d0a <__match+0x12>
 8015d04:	6003      	str	r3, [r0, #0]
 8015d06:	2001      	movs	r0, #1
 8015d08:	bd30      	pop	{r4, r5, pc}
 8015d0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015d0e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015d12:	2d19      	cmp	r5, #25
 8015d14:	bf98      	it	ls
 8015d16:	3220      	addls	r2, #32
 8015d18:	42a2      	cmp	r2, r4
 8015d1a:	d0f0      	beq.n	8015cfe <__match+0x6>
 8015d1c:	2000      	movs	r0, #0
 8015d1e:	e7f3      	b.n	8015d08 <__match+0x10>

08015d20 <__hexnan>:
 8015d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d24:	680b      	ldr	r3, [r1, #0]
 8015d26:	6801      	ldr	r1, [r0, #0]
 8015d28:	115e      	asrs	r6, r3, #5
 8015d2a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015d2e:	f013 031f 	ands.w	r3, r3, #31
 8015d32:	b087      	sub	sp, #28
 8015d34:	bf18      	it	ne
 8015d36:	3604      	addne	r6, #4
 8015d38:	2500      	movs	r5, #0
 8015d3a:	1f37      	subs	r7, r6, #4
 8015d3c:	4682      	mov	sl, r0
 8015d3e:	4690      	mov	r8, r2
 8015d40:	9301      	str	r3, [sp, #4]
 8015d42:	f846 5c04 	str.w	r5, [r6, #-4]
 8015d46:	46b9      	mov	r9, r7
 8015d48:	463c      	mov	r4, r7
 8015d4a:	9502      	str	r5, [sp, #8]
 8015d4c:	46ab      	mov	fp, r5
 8015d4e:	784a      	ldrb	r2, [r1, #1]
 8015d50:	1c4b      	adds	r3, r1, #1
 8015d52:	9303      	str	r3, [sp, #12]
 8015d54:	b342      	cbz	r2, 8015da8 <__hexnan+0x88>
 8015d56:	4610      	mov	r0, r2
 8015d58:	9105      	str	r1, [sp, #20]
 8015d5a:	9204      	str	r2, [sp, #16]
 8015d5c:	f7ff fd76 	bl	801584c <__hexdig_fun>
 8015d60:	2800      	cmp	r0, #0
 8015d62:	d14f      	bne.n	8015e04 <__hexnan+0xe4>
 8015d64:	9a04      	ldr	r2, [sp, #16]
 8015d66:	9905      	ldr	r1, [sp, #20]
 8015d68:	2a20      	cmp	r2, #32
 8015d6a:	d818      	bhi.n	8015d9e <__hexnan+0x7e>
 8015d6c:	9b02      	ldr	r3, [sp, #8]
 8015d6e:	459b      	cmp	fp, r3
 8015d70:	dd13      	ble.n	8015d9a <__hexnan+0x7a>
 8015d72:	454c      	cmp	r4, r9
 8015d74:	d206      	bcs.n	8015d84 <__hexnan+0x64>
 8015d76:	2d07      	cmp	r5, #7
 8015d78:	dc04      	bgt.n	8015d84 <__hexnan+0x64>
 8015d7a:	462a      	mov	r2, r5
 8015d7c:	4649      	mov	r1, r9
 8015d7e:	4620      	mov	r0, r4
 8015d80:	f7ff ffa8 	bl	8015cd4 <L_shift>
 8015d84:	4544      	cmp	r4, r8
 8015d86:	d950      	bls.n	8015e2a <__hexnan+0x10a>
 8015d88:	2300      	movs	r3, #0
 8015d8a:	f1a4 0904 	sub.w	r9, r4, #4
 8015d8e:	f844 3c04 	str.w	r3, [r4, #-4]
 8015d92:	f8cd b008 	str.w	fp, [sp, #8]
 8015d96:	464c      	mov	r4, r9
 8015d98:	461d      	mov	r5, r3
 8015d9a:	9903      	ldr	r1, [sp, #12]
 8015d9c:	e7d7      	b.n	8015d4e <__hexnan+0x2e>
 8015d9e:	2a29      	cmp	r2, #41	; 0x29
 8015da0:	d155      	bne.n	8015e4e <__hexnan+0x12e>
 8015da2:	3102      	adds	r1, #2
 8015da4:	f8ca 1000 	str.w	r1, [sl]
 8015da8:	f1bb 0f00 	cmp.w	fp, #0
 8015dac:	d04f      	beq.n	8015e4e <__hexnan+0x12e>
 8015dae:	454c      	cmp	r4, r9
 8015db0:	d206      	bcs.n	8015dc0 <__hexnan+0xa0>
 8015db2:	2d07      	cmp	r5, #7
 8015db4:	dc04      	bgt.n	8015dc0 <__hexnan+0xa0>
 8015db6:	462a      	mov	r2, r5
 8015db8:	4649      	mov	r1, r9
 8015dba:	4620      	mov	r0, r4
 8015dbc:	f7ff ff8a 	bl	8015cd4 <L_shift>
 8015dc0:	4544      	cmp	r4, r8
 8015dc2:	d934      	bls.n	8015e2e <__hexnan+0x10e>
 8015dc4:	f1a8 0204 	sub.w	r2, r8, #4
 8015dc8:	4623      	mov	r3, r4
 8015dca:	f853 1b04 	ldr.w	r1, [r3], #4
 8015dce:	f842 1f04 	str.w	r1, [r2, #4]!
 8015dd2:	429f      	cmp	r7, r3
 8015dd4:	d2f9      	bcs.n	8015dca <__hexnan+0xaa>
 8015dd6:	1b3b      	subs	r3, r7, r4
 8015dd8:	f023 0303 	bic.w	r3, r3, #3
 8015ddc:	3304      	adds	r3, #4
 8015dde:	3e03      	subs	r6, #3
 8015de0:	3401      	adds	r4, #1
 8015de2:	42a6      	cmp	r6, r4
 8015de4:	bf38      	it	cc
 8015de6:	2304      	movcc	r3, #4
 8015de8:	4443      	add	r3, r8
 8015dea:	2200      	movs	r2, #0
 8015dec:	f843 2b04 	str.w	r2, [r3], #4
 8015df0:	429f      	cmp	r7, r3
 8015df2:	d2fb      	bcs.n	8015dec <__hexnan+0xcc>
 8015df4:	683b      	ldr	r3, [r7, #0]
 8015df6:	b91b      	cbnz	r3, 8015e00 <__hexnan+0xe0>
 8015df8:	4547      	cmp	r7, r8
 8015dfa:	d126      	bne.n	8015e4a <__hexnan+0x12a>
 8015dfc:	2301      	movs	r3, #1
 8015dfe:	603b      	str	r3, [r7, #0]
 8015e00:	2005      	movs	r0, #5
 8015e02:	e025      	b.n	8015e50 <__hexnan+0x130>
 8015e04:	3501      	adds	r5, #1
 8015e06:	2d08      	cmp	r5, #8
 8015e08:	f10b 0b01 	add.w	fp, fp, #1
 8015e0c:	dd06      	ble.n	8015e1c <__hexnan+0xfc>
 8015e0e:	4544      	cmp	r4, r8
 8015e10:	d9c3      	bls.n	8015d9a <__hexnan+0x7a>
 8015e12:	2300      	movs	r3, #0
 8015e14:	f844 3c04 	str.w	r3, [r4, #-4]
 8015e18:	2501      	movs	r5, #1
 8015e1a:	3c04      	subs	r4, #4
 8015e1c:	6822      	ldr	r2, [r4, #0]
 8015e1e:	f000 000f 	and.w	r0, r0, #15
 8015e22:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8015e26:	6020      	str	r0, [r4, #0]
 8015e28:	e7b7      	b.n	8015d9a <__hexnan+0x7a>
 8015e2a:	2508      	movs	r5, #8
 8015e2c:	e7b5      	b.n	8015d9a <__hexnan+0x7a>
 8015e2e:	9b01      	ldr	r3, [sp, #4]
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d0df      	beq.n	8015df4 <__hexnan+0xd4>
 8015e34:	f1c3 0320 	rsb	r3, r3, #32
 8015e38:	f04f 32ff 	mov.w	r2, #4294967295
 8015e3c:	40da      	lsrs	r2, r3
 8015e3e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8015e42:	4013      	ands	r3, r2
 8015e44:	f846 3c04 	str.w	r3, [r6, #-4]
 8015e48:	e7d4      	b.n	8015df4 <__hexnan+0xd4>
 8015e4a:	3f04      	subs	r7, #4
 8015e4c:	e7d2      	b.n	8015df4 <__hexnan+0xd4>
 8015e4e:	2004      	movs	r0, #4
 8015e50:	b007      	add	sp, #28
 8015e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015e56 <__ascii_mbtowc>:
 8015e56:	b082      	sub	sp, #8
 8015e58:	b901      	cbnz	r1, 8015e5c <__ascii_mbtowc+0x6>
 8015e5a:	a901      	add	r1, sp, #4
 8015e5c:	b142      	cbz	r2, 8015e70 <__ascii_mbtowc+0x1a>
 8015e5e:	b14b      	cbz	r3, 8015e74 <__ascii_mbtowc+0x1e>
 8015e60:	7813      	ldrb	r3, [r2, #0]
 8015e62:	600b      	str	r3, [r1, #0]
 8015e64:	7812      	ldrb	r2, [r2, #0]
 8015e66:	1e10      	subs	r0, r2, #0
 8015e68:	bf18      	it	ne
 8015e6a:	2001      	movne	r0, #1
 8015e6c:	b002      	add	sp, #8
 8015e6e:	4770      	bx	lr
 8015e70:	4610      	mov	r0, r2
 8015e72:	e7fb      	b.n	8015e6c <__ascii_mbtowc+0x16>
 8015e74:	f06f 0001 	mvn.w	r0, #1
 8015e78:	e7f8      	b.n	8015e6c <__ascii_mbtowc+0x16>

08015e7a <_realloc_r>:
 8015e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e7e:	4680      	mov	r8, r0
 8015e80:	4614      	mov	r4, r2
 8015e82:	460e      	mov	r6, r1
 8015e84:	b921      	cbnz	r1, 8015e90 <_realloc_r+0x16>
 8015e86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015e8a:	4611      	mov	r1, r2
 8015e8c:	f7fd bc32 	b.w	80136f4 <_malloc_r>
 8015e90:	b92a      	cbnz	r2, 8015e9e <_realloc_r+0x24>
 8015e92:	f7fd fbbb 	bl	801360c <_free_r>
 8015e96:	4625      	mov	r5, r4
 8015e98:	4628      	mov	r0, r5
 8015e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e9e:	f000 f842 	bl	8015f26 <_malloc_usable_size_r>
 8015ea2:	4284      	cmp	r4, r0
 8015ea4:	4607      	mov	r7, r0
 8015ea6:	d802      	bhi.n	8015eae <_realloc_r+0x34>
 8015ea8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015eac:	d812      	bhi.n	8015ed4 <_realloc_r+0x5a>
 8015eae:	4621      	mov	r1, r4
 8015eb0:	4640      	mov	r0, r8
 8015eb2:	f7fd fc1f 	bl	80136f4 <_malloc_r>
 8015eb6:	4605      	mov	r5, r0
 8015eb8:	2800      	cmp	r0, #0
 8015eba:	d0ed      	beq.n	8015e98 <_realloc_r+0x1e>
 8015ebc:	42bc      	cmp	r4, r7
 8015ebe:	4622      	mov	r2, r4
 8015ec0:	4631      	mov	r1, r6
 8015ec2:	bf28      	it	cs
 8015ec4:	463a      	movcs	r2, r7
 8015ec6:	f7fc fd11 	bl	80128ec <memcpy>
 8015eca:	4631      	mov	r1, r6
 8015ecc:	4640      	mov	r0, r8
 8015ece:	f7fd fb9d 	bl	801360c <_free_r>
 8015ed2:	e7e1      	b.n	8015e98 <_realloc_r+0x1e>
 8015ed4:	4635      	mov	r5, r6
 8015ed6:	e7df      	b.n	8015e98 <_realloc_r+0x1e>

08015ed8 <__ascii_wctomb>:
 8015ed8:	b149      	cbz	r1, 8015eee <__ascii_wctomb+0x16>
 8015eda:	2aff      	cmp	r2, #255	; 0xff
 8015edc:	bf85      	ittet	hi
 8015ede:	238a      	movhi	r3, #138	; 0x8a
 8015ee0:	6003      	strhi	r3, [r0, #0]
 8015ee2:	700a      	strbls	r2, [r1, #0]
 8015ee4:	f04f 30ff 	movhi.w	r0, #4294967295
 8015ee8:	bf98      	it	ls
 8015eea:	2001      	movls	r0, #1
 8015eec:	4770      	bx	lr
 8015eee:	4608      	mov	r0, r1
 8015ef0:	4770      	bx	lr
	...

08015ef4 <fiprintf>:
 8015ef4:	b40e      	push	{r1, r2, r3}
 8015ef6:	b503      	push	{r0, r1, lr}
 8015ef8:	4601      	mov	r1, r0
 8015efa:	ab03      	add	r3, sp, #12
 8015efc:	4805      	ldr	r0, [pc, #20]	; (8015f14 <fiprintf+0x20>)
 8015efe:	f853 2b04 	ldr.w	r2, [r3], #4
 8015f02:	6800      	ldr	r0, [r0, #0]
 8015f04:	9301      	str	r3, [sp, #4]
 8015f06:	f7ff f947 	bl	8015198 <_vfiprintf_r>
 8015f0a:	b002      	add	sp, #8
 8015f0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015f10:	b003      	add	sp, #12
 8015f12:	4770      	bx	lr
 8015f14:	200000c8 	.word	0x200000c8

08015f18 <abort>:
 8015f18:	b508      	push	{r3, lr}
 8015f1a:	2006      	movs	r0, #6
 8015f1c:	f000 f834 	bl	8015f88 <raise>
 8015f20:	2001      	movs	r0, #1
 8015f22:	f7ee fc2f 	bl	8004784 <_exit>

08015f26 <_malloc_usable_size_r>:
 8015f26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015f2a:	1f18      	subs	r0, r3, #4
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	bfbc      	itt	lt
 8015f30:	580b      	ldrlt	r3, [r1, r0]
 8015f32:	18c0      	addlt	r0, r0, r3
 8015f34:	4770      	bx	lr

08015f36 <_raise_r>:
 8015f36:	291f      	cmp	r1, #31
 8015f38:	b538      	push	{r3, r4, r5, lr}
 8015f3a:	4604      	mov	r4, r0
 8015f3c:	460d      	mov	r5, r1
 8015f3e:	d904      	bls.n	8015f4a <_raise_r+0x14>
 8015f40:	2316      	movs	r3, #22
 8015f42:	6003      	str	r3, [r0, #0]
 8015f44:	f04f 30ff 	mov.w	r0, #4294967295
 8015f48:	bd38      	pop	{r3, r4, r5, pc}
 8015f4a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8015f4c:	b112      	cbz	r2, 8015f54 <_raise_r+0x1e>
 8015f4e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015f52:	b94b      	cbnz	r3, 8015f68 <_raise_r+0x32>
 8015f54:	4620      	mov	r0, r4
 8015f56:	f000 f831 	bl	8015fbc <_getpid_r>
 8015f5a:	462a      	mov	r2, r5
 8015f5c:	4601      	mov	r1, r0
 8015f5e:	4620      	mov	r0, r4
 8015f60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015f64:	f000 b818 	b.w	8015f98 <_kill_r>
 8015f68:	2b01      	cmp	r3, #1
 8015f6a:	d00a      	beq.n	8015f82 <_raise_r+0x4c>
 8015f6c:	1c59      	adds	r1, r3, #1
 8015f6e:	d103      	bne.n	8015f78 <_raise_r+0x42>
 8015f70:	2316      	movs	r3, #22
 8015f72:	6003      	str	r3, [r0, #0]
 8015f74:	2001      	movs	r0, #1
 8015f76:	e7e7      	b.n	8015f48 <_raise_r+0x12>
 8015f78:	2400      	movs	r4, #0
 8015f7a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015f7e:	4628      	mov	r0, r5
 8015f80:	4798      	blx	r3
 8015f82:	2000      	movs	r0, #0
 8015f84:	e7e0      	b.n	8015f48 <_raise_r+0x12>
	...

08015f88 <raise>:
 8015f88:	4b02      	ldr	r3, [pc, #8]	; (8015f94 <raise+0xc>)
 8015f8a:	4601      	mov	r1, r0
 8015f8c:	6818      	ldr	r0, [r3, #0]
 8015f8e:	f7ff bfd2 	b.w	8015f36 <_raise_r>
 8015f92:	bf00      	nop
 8015f94:	200000c8 	.word	0x200000c8

08015f98 <_kill_r>:
 8015f98:	b538      	push	{r3, r4, r5, lr}
 8015f9a:	4d07      	ldr	r5, [pc, #28]	; (8015fb8 <_kill_r+0x20>)
 8015f9c:	2300      	movs	r3, #0
 8015f9e:	4604      	mov	r4, r0
 8015fa0:	4608      	mov	r0, r1
 8015fa2:	4611      	mov	r1, r2
 8015fa4:	602b      	str	r3, [r5, #0]
 8015fa6:	f7ee fbdd 	bl	8004764 <_kill>
 8015faa:	1c43      	adds	r3, r0, #1
 8015fac:	d102      	bne.n	8015fb4 <_kill_r+0x1c>
 8015fae:	682b      	ldr	r3, [r5, #0]
 8015fb0:	b103      	cbz	r3, 8015fb4 <_kill_r+0x1c>
 8015fb2:	6023      	str	r3, [r4, #0]
 8015fb4:	bd38      	pop	{r3, r4, r5, pc}
 8015fb6:	bf00      	nop
 8015fb8:	200008fc 	.word	0x200008fc

08015fbc <_getpid_r>:
 8015fbc:	f7ee bbca 	b.w	8004754 <_getpid>

08015fc0 <sqrt>:
 8015fc0:	b538      	push	{r3, r4, r5, lr}
 8015fc2:	ed2d 8b02 	vpush	{d8}
 8015fc6:	ec55 4b10 	vmov	r4, r5, d0
 8015fca:	f000 f825 	bl	8016018 <__ieee754_sqrt>
 8015fce:	4622      	mov	r2, r4
 8015fd0:	462b      	mov	r3, r5
 8015fd2:	4620      	mov	r0, r4
 8015fd4:	4629      	mov	r1, r5
 8015fd6:	eeb0 8a40 	vmov.f32	s16, s0
 8015fda:	eef0 8a60 	vmov.f32	s17, s1
 8015fde:	f7ea fd7d 	bl	8000adc <__aeabi_dcmpun>
 8015fe2:	b990      	cbnz	r0, 801600a <sqrt+0x4a>
 8015fe4:	2200      	movs	r2, #0
 8015fe6:	2300      	movs	r3, #0
 8015fe8:	4620      	mov	r0, r4
 8015fea:	4629      	mov	r1, r5
 8015fec:	f7ea fd4e 	bl	8000a8c <__aeabi_dcmplt>
 8015ff0:	b158      	cbz	r0, 801600a <sqrt+0x4a>
 8015ff2:	f7fc fc4f 	bl	8012894 <__errno>
 8015ff6:	2321      	movs	r3, #33	; 0x21
 8015ff8:	6003      	str	r3, [r0, #0]
 8015ffa:	2200      	movs	r2, #0
 8015ffc:	2300      	movs	r3, #0
 8015ffe:	4610      	mov	r0, r2
 8016000:	4619      	mov	r1, r3
 8016002:	f7ea fbfb 	bl	80007fc <__aeabi_ddiv>
 8016006:	ec41 0b18 	vmov	d8, r0, r1
 801600a:	eeb0 0a48 	vmov.f32	s0, s16
 801600e:	eef0 0a68 	vmov.f32	s1, s17
 8016012:	ecbd 8b02 	vpop	{d8}
 8016016:	bd38      	pop	{r3, r4, r5, pc}

08016018 <__ieee754_sqrt>:
 8016018:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801601c:	ec55 4b10 	vmov	r4, r5, d0
 8016020:	4e67      	ldr	r6, [pc, #412]	; (80161c0 <__ieee754_sqrt+0x1a8>)
 8016022:	43ae      	bics	r6, r5
 8016024:	ee10 0a10 	vmov	r0, s0
 8016028:	ee10 2a10 	vmov	r2, s0
 801602c:	4629      	mov	r1, r5
 801602e:	462b      	mov	r3, r5
 8016030:	d10d      	bne.n	801604e <__ieee754_sqrt+0x36>
 8016032:	f7ea fab9 	bl	80005a8 <__aeabi_dmul>
 8016036:	4602      	mov	r2, r0
 8016038:	460b      	mov	r3, r1
 801603a:	4620      	mov	r0, r4
 801603c:	4629      	mov	r1, r5
 801603e:	f7ea f8fd 	bl	800023c <__adddf3>
 8016042:	4604      	mov	r4, r0
 8016044:	460d      	mov	r5, r1
 8016046:	ec45 4b10 	vmov	d0, r4, r5
 801604a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801604e:	2d00      	cmp	r5, #0
 8016050:	dc0b      	bgt.n	801606a <__ieee754_sqrt+0x52>
 8016052:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016056:	4326      	orrs	r6, r4
 8016058:	d0f5      	beq.n	8016046 <__ieee754_sqrt+0x2e>
 801605a:	b135      	cbz	r5, 801606a <__ieee754_sqrt+0x52>
 801605c:	f7ea f8ec 	bl	8000238 <__aeabi_dsub>
 8016060:	4602      	mov	r2, r0
 8016062:	460b      	mov	r3, r1
 8016064:	f7ea fbca 	bl	80007fc <__aeabi_ddiv>
 8016068:	e7eb      	b.n	8016042 <__ieee754_sqrt+0x2a>
 801606a:	1509      	asrs	r1, r1, #20
 801606c:	f000 808d 	beq.w	801618a <__ieee754_sqrt+0x172>
 8016070:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016074:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8016078:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801607c:	07c9      	lsls	r1, r1, #31
 801607e:	bf5c      	itt	pl
 8016080:	005b      	lslpl	r3, r3, #1
 8016082:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8016086:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801608a:	bf58      	it	pl
 801608c:	0052      	lslpl	r2, r2, #1
 801608e:	2500      	movs	r5, #0
 8016090:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8016094:	1076      	asrs	r6, r6, #1
 8016096:	0052      	lsls	r2, r2, #1
 8016098:	f04f 0e16 	mov.w	lr, #22
 801609c:	46ac      	mov	ip, r5
 801609e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80160a2:	eb0c 0001 	add.w	r0, ip, r1
 80160a6:	4298      	cmp	r0, r3
 80160a8:	bfde      	ittt	le
 80160aa:	1a1b      	suble	r3, r3, r0
 80160ac:	eb00 0c01 	addle.w	ip, r0, r1
 80160b0:	186d      	addle	r5, r5, r1
 80160b2:	005b      	lsls	r3, r3, #1
 80160b4:	f1be 0e01 	subs.w	lr, lr, #1
 80160b8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80160bc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80160c0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80160c4:	d1ed      	bne.n	80160a2 <__ieee754_sqrt+0x8a>
 80160c6:	4674      	mov	r4, lr
 80160c8:	2720      	movs	r7, #32
 80160ca:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80160ce:	4563      	cmp	r3, ip
 80160d0:	eb01 000e 	add.w	r0, r1, lr
 80160d4:	dc02      	bgt.n	80160dc <__ieee754_sqrt+0xc4>
 80160d6:	d113      	bne.n	8016100 <__ieee754_sqrt+0xe8>
 80160d8:	4290      	cmp	r0, r2
 80160da:	d811      	bhi.n	8016100 <__ieee754_sqrt+0xe8>
 80160dc:	2800      	cmp	r0, #0
 80160de:	eb00 0e01 	add.w	lr, r0, r1
 80160e2:	da57      	bge.n	8016194 <__ieee754_sqrt+0x17c>
 80160e4:	f1be 0f00 	cmp.w	lr, #0
 80160e8:	db54      	blt.n	8016194 <__ieee754_sqrt+0x17c>
 80160ea:	f10c 0801 	add.w	r8, ip, #1
 80160ee:	eba3 030c 	sub.w	r3, r3, ip
 80160f2:	4290      	cmp	r0, r2
 80160f4:	bf88      	it	hi
 80160f6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80160fa:	1a12      	subs	r2, r2, r0
 80160fc:	440c      	add	r4, r1
 80160fe:	46c4      	mov	ip, r8
 8016100:	005b      	lsls	r3, r3, #1
 8016102:	3f01      	subs	r7, #1
 8016104:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8016108:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801610c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8016110:	d1dd      	bne.n	80160ce <__ieee754_sqrt+0xb6>
 8016112:	4313      	orrs	r3, r2
 8016114:	d01b      	beq.n	801614e <__ieee754_sqrt+0x136>
 8016116:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80161c4 <__ieee754_sqrt+0x1ac>
 801611a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80161c8 <__ieee754_sqrt+0x1b0>
 801611e:	e9da 0100 	ldrd	r0, r1, [sl]
 8016122:	e9db 2300 	ldrd	r2, r3, [fp]
 8016126:	f7ea f887 	bl	8000238 <__aeabi_dsub>
 801612a:	e9da 8900 	ldrd	r8, r9, [sl]
 801612e:	4602      	mov	r2, r0
 8016130:	460b      	mov	r3, r1
 8016132:	4640      	mov	r0, r8
 8016134:	4649      	mov	r1, r9
 8016136:	f7ea fcb3 	bl	8000aa0 <__aeabi_dcmple>
 801613a:	b140      	cbz	r0, 801614e <__ieee754_sqrt+0x136>
 801613c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8016140:	e9da 0100 	ldrd	r0, r1, [sl]
 8016144:	e9db 2300 	ldrd	r2, r3, [fp]
 8016148:	d126      	bne.n	8016198 <__ieee754_sqrt+0x180>
 801614a:	3501      	adds	r5, #1
 801614c:	463c      	mov	r4, r7
 801614e:	106a      	asrs	r2, r5, #1
 8016150:	0863      	lsrs	r3, r4, #1
 8016152:	07e9      	lsls	r1, r5, #31
 8016154:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8016158:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801615c:	bf48      	it	mi
 801615e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8016162:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8016166:	461c      	mov	r4, r3
 8016168:	e76d      	b.n	8016046 <__ieee754_sqrt+0x2e>
 801616a:	0ad3      	lsrs	r3, r2, #11
 801616c:	3815      	subs	r0, #21
 801616e:	0552      	lsls	r2, r2, #21
 8016170:	2b00      	cmp	r3, #0
 8016172:	d0fa      	beq.n	801616a <__ieee754_sqrt+0x152>
 8016174:	02dc      	lsls	r4, r3, #11
 8016176:	d50a      	bpl.n	801618e <__ieee754_sqrt+0x176>
 8016178:	f1c1 0420 	rsb	r4, r1, #32
 801617c:	fa22 f404 	lsr.w	r4, r2, r4
 8016180:	1e4d      	subs	r5, r1, #1
 8016182:	408a      	lsls	r2, r1
 8016184:	4323      	orrs	r3, r4
 8016186:	1b41      	subs	r1, r0, r5
 8016188:	e772      	b.n	8016070 <__ieee754_sqrt+0x58>
 801618a:	4608      	mov	r0, r1
 801618c:	e7f0      	b.n	8016170 <__ieee754_sqrt+0x158>
 801618e:	005b      	lsls	r3, r3, #1
 8016190:	3101      	adds	r1, #1
 8016192:	e7ef      	b.n	8016174 <__ieee754_sqrt+0x15c>
 8016194:	46e0      	mov	r8, ip
 8016196:	e7aa      	b.n	80160ee <__ieee754_sqrt+0xd6>
 8016198:	f7ea f850 	bl	800023c <__adddf3>
 801619c:	e9da 8900 	ldrd	r8, r9, [sl]
 80161a0:	4602      	mov	r2, r0
 80161a2:	460b      	mov	r3, r1
 80161a4:	4640      	mov	r0, r8
 80161a6:	4649      	mov	r1, r9
 80161a8:	f7ea fc70 	bl	8000a8c <__aeabi_dcmplt>
 80161ac:	b120      	cbz	r0, 80161b8 <__ieee754_sqrt+0x1a0>
 80161ae:	1ca0      	adds	r0, r4, #2
 80161b0:	bf08      	it	eq
 80161b2:	3501      	addeq	r5, #1
 80161b4:	3402      	adds	r4, #2
 80161b6:	e7ca      	b.n	801614e <__ieee754_sqrt+0x136>
 80161b8:	3401      	adds	r4, #1
 80161ba:	f024 0401 	bic.w	r4, r4, #1
 80161be:	e7c6      	b.n	801614e <__ieee754_sqrt+0x136>
 80161c0:	7ff00000 	.word	0x7ff00000
 80161c4:	20000238 	.word	0x20000238
 80161c8:	20000240 	.word	0x20000240

080161cc <_init>:
 80161cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161ce:	bf00      	nop
 80161d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80161d2:	bc08      	pop	{r3}
 80161d4:	469e      	mov	lr, r3
 80161d6:	4770      	bx	lr

080161d8 <_fini>:
 80161d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161da:	bf00      	nop
 80161dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80161de:	bc08      	pop	{r3}
 80161e0:	469e      	mov	lr, r3
 80161e2:	4770      	bx	lr
