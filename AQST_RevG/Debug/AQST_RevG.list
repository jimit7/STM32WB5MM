
AQST_RevG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08007000  08007000  00007000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .ota_region   00000004  08007140  08007140  00007140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00019834  08007150  08007150  00007150  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001018  08020988  08020988  00020988  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  080219a0  080219a0  000219a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  080219a8  080219a8  000219a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  080219ac  080219ac  000219ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ota_region_end 00000004  080219b0  080219b0  000219b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c8  20000008  080219b4  00030008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_DRIVER_CONTEXT 00000035  200002d0  08021c7c  000302d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 SYSTEM_DRIVER_CONTEXT 00000011  20000308  08021cb1  00030308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000a24  2000031c  08021cc2  0003031c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000d40  08021cc2  00030d40  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030319  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 15 MB_MEM1       000001bb  20030028  20030028  00040000  2**2
                  ALLOC
 16 MB_MEM2       00000883  200301e4  200301e4  00040000  2**2
                  ALLOC
 17 .comment      000000c2  00000000  00000000  00030349  2**0
                  CONTENTS, READONLY
 18 .debug_info   0003f617  00000000  00000000  0003040b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 00008e3b  00000000  00000000  0006fa22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00003660  00000000  00000000  00078860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 00002970  00000000  00000000  0007bec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  00033e7c  00000000  00000000  0007e830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   00044555  00000000  00000000  000b26ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    001101ed  00000000  00000000  000f6c01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_frame  0000fc94  00000000  00000000  00206df0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 00000066  00000000  00000000  00216a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08007150 <__do_global_dtors_aux>:
 8007150:	b510      	push	{r4, lr}
 8007152:	4c05      	ldr	r4, [pc, #20]	; (8007168 <__do_global_dtors_aux+0x18>)
 8007154:	7823      	ldrb	r3, [r4, #0]
 8007156:	b933      	cbnz	r3, 8007166 <__do_global_dtors_aux+0x16>
 8007158:	4b04      	ldr	r3, [pc, #16]	; (800716c <__do_global_dtors_aux+0x1c>)
 800715a:	b113      	cbz	r3, 8007162 <__do_global_dtors_aux+0x12>
 800715c:	4804      	ldr	r0, [pc, #16]	; (8007170 <__do_global_dtors_aux+0x20>)
 800715e:	f3af 8000 	nop.w
 8007162:	2301      	movs	r3, #1
 8007164:	7023      	strb	r3, [r4, #0]
 8007166:	bd10      	pop	{r4, pc}
 8007168:	2000031c 	.word	0x2000031c
 800716c:	00000000 	.word	0x00000000
 8007170:	0802096c 	.word	0x0802096c

08007174 <frame_dummy>:
 8007174:	b508      	push	{r3, lr}
 8007176:	4b03      	ldr	r3, [pc, #12]	; (8007184 <frame_dummy+0x10>)
 8007178:	b11b      	cbz	r3, 8007182 <frame_dummy+0xe>
 800717a:	4903      	ldr	r1, [pc, #12]	; (8007188 <frame_dummy+0x14>)
 800717c:	4803      	ldr	r0, [pc, #12]	; (800718c <frame_dummy+0x18>)
 800717e:	f3af 8000 	nop.w
 8007182:	bd08      	pop	{r3, pc}
 8007184:	00000000 	.word	0x00000000
 8007188:	20000320 	.word	0x20000320
 800718c:	0802096c 	.word	0x0802096c

08007190 <init_iaq_2nd_gen_ulp_internal>:
 8007190:	b430      	push	{r4, r5}
 8007192:	4603      	mov	r3, r0
 8007194:	480d      	ldr	r0, [pc, #52]	; (80071cc <init_iaq_2nd_gen_ulp_internal+0x3c>)
 8007196:	4d0e      	ldr	r5, [pc, #56]	; (80071d0 <init_iaq_2nd_gen_ulp_internal+0x40>)
 8007198:	6258      	str	r0, [r3, #36]	; 0x24
 800719a:	2001      	movs	r0, #1
 800719c:	2200      	movs	r2, #0
 800719e:	4c0d      	ldr	r4, [pc, #52]	; (80071d4 <init_iaq_2nd_gen_ulp_internal+0x44>)
 80071a0:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
 80071a4:	490c      	ldr	r1, [pc, #48]	; (80071d8 <init_iaq_2nd_gen_ulp_internal+0x48>)
 80071a6:	621d      	str	r5, [r3, #32]
 80071a8:	2000      	movs	r0, #0
 80071aa:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 80071ae:	62dd      	str	r5, [r3, #44]	; 0x2c
 80071b0:	635c      	str	r4, [r3, #52]	; 0x34
 80071b2:	6399      	str	r1, [r3, #56]	; 0x38
 80071b4:	601a      	str	r2, [r3, #0]
 80071b6:	605a      	str	r2, [r3, #4]
 80071b8:	609a      	str	r2, [r3, #8]
 80071ba:	611a      	str	r2, [r3, #16]
 80071bc:	615a      	str	r2, [r3, #20]
 80071be:	619a      	str	r2, [r3, #24]
 80071c0:	61da      	str	r2, [r3, #28]
 80071c2:	629a      	str	r2, [r3, #40]	; 0x28
 80071c4:	631a      	str	r2, [r3, #48]	; 0x30
 80071c6:	60d8      	str	r0, [r3, #12]
 80071c8:	bc30      	pop	{r4, r5}
 80071ca:	4770      	bx	lr
 80071cc:	3c09a027 	.word	0x3c09a027
 80071d0:	43c80000 	.word	0x43c80000
 80071d4:	3cf5c28f 	.word	0x3cf5c28f
 80071d8:	3f1a209b 	.word	0x3f1a209b

080071dc <init_iaq_2nd_gen_ulp>:
 80071dc:	b430      	push	{r4, r5}
 80071de:	4603      	mov	r3, r0
 80071e0:	480d      	ldr	r0, [pc, #52]	; (8007218 <init_iaq_2nd_gen_ulp+0x3c>)
 80071e2:	4d0e      	ldr	r5, [pc, #56]	; (800721c <init_iaq_2nd_gen_ulp+0x40>)
 80071e4:	6258      	str	r0, [r3, #36]	; 0x24
 80071e6:	2001      	movs	r0, #1
 80071e8:	2200      	movs	r2, #0
 80071ea:	4c0d      	ldr	r4, [pc, #52]	; (8007220 <init_iaq_2nd_gen_ulp+0x44>)
 80071ec:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
 80071f0:	490c      	ldr	r1, [pc, #48]	; (8007224 <init_iaq_2nd_gen_ulp+0x48>)
 80071f2:	621d      	str	r5, [r3, #32]
 80071f4:	2000      	movs	r0, #0
 80071f6:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 80071fa:	62dd      	str	r5, [r3, #44]	; 0x2c
 80071fc:	635c      	str	r4, [r3, #52]	; 0x34
 80071fe:	6399      	str	r1, [r3, #56]	; 0x38
 8007200:	601a      	str	r2, [r3, #0]
 8007202:	605a      	str	r2, [r3, #4]
 8007204:	609a      	str	r2, [r3, #8]
 8007206:	611a      	str	r2, [r3, #16]
 8007208:	615a      	str	r2, [r3, #20]
 800720a:	619a      	str	r2, [r3, #24]
 800720c:	61da      	str	r2, [r3, #28]
 800720e:	629a      	str	r2, [r3, #40]	; 0x28
 8007210:	631a      	str	r2, [r3, #48]	; 0x30
 8007212:	60d8      	str	r0, [r3, #12]
 8007214:	bc30      	pop	{r4, r5}
 8007216:	4770      	bx	lr
 8007218:	3c09a027 	.word	0x3c09a027
 800721c:	43c80000 	.word	0x43c80000
 8007220:	3cf5c28f 	.word	0x3cf5c28f
 8007224:	3f1a209b 	.word	0x3f1a209b

08007228 <calc_rel_iaq_ulp_internal>:
 8007228:	b570      	push	{r4, r5, r6, lr}
 800722a:	68c3      	ldr	r3, [r0, #12]
 800722c:	2b01      	cmp	r3, #1
 800722e:	ed2d 8b04 	vpush	{d8-d9}
 8007232:	4604      	mov	r4, r0
 8007234:	eeb0 8a40 	vmov.f32	s16, s0
 8007238:	eef0 8a60 	vmov.f32	s17, s1
 800723c:	460d      	mov	r5, r1
 800723e:	f240 817b 	bls.w	8007538 <calc_rel_iaq_ulp_internal+0x310>
 8007242:	2b0a      	cmp	r3, #10
 8007244:	f240 817b 	bls.w	800753e <calc_rel_iaq_ulp_internal+0x316>
 8007248:	2b28      	cmp	r3, #40	; 0x28
 800724a:	f240 8198 	bls.w	800757e <calc_rel_iaq_ulp_internal+0x356>
 800724e:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8007252:	f240 8198 	bls.w	8007586 <calc_rel_iaq_ulp_internal+0x35e>
 8007256:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 800725a:	f240 8199 	bls.w	8007590 <calc_rel_iaq_ulp_internal+0x368>
 800725e:	ed9f 7adc 	vldr	s14, [pc, #880]	; 80075d0 <calc_rel_iaq_ulp_internal+0x3a8>
 8007262:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8007266:	ee78 6a67 	vsub.f32	s13, s16, s15
 800726a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800726e:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
 8007272:	eec7 7a88 	vdiv.f32	s15, s15, s16
 8007276:	ee17 0a90 	vmov	r0, s15
 800727a:	f001 fb75 	bl	8008968 <__aeabi_f2d>
 800727e:	ec41 0b10 	vmov	d0, r0, r1
 8007282:	f018 f805 	bl	801f290 <log10>
 8007286:	ec51 0b10 	vmov	r0, r1, d0
 800728a:	f001 febd 	bl	8009008 <__aeabi_d2f>
 800728e:	eddf 6ad1 	vldr	s13, [pc, #836]	; 80075d4 <calc_rel_iaq_ulp_internal+0x3ac>
 8007292:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 8007296:	ed9f 6ad0 	vldr	s12, [pc, #832]	; 80075d8 <calc_rel_iaq_ulp_internal+0x3b0>
 800729a:	ee07 0a10 	vmov	s14, r0
 800729e:	ee87 7a26 	vdiv.f32	s14, s14, s13
 80072a2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80072a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80072aa:	eee7 7a06 	vfma.f32	s15, s14, s12
 80072ae:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
 80072b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072b6:	ee17 0a90 	vmov	r0, s15
 80072ba:	f001 fb55 	bl	8008968 <__aeabi_f2d>
 80072be:	ed9f 0bbe 	vldr	d0, [pc, #760]	; 80075b8 <calc_rel_iaq_ulp_internal+0x390>
 80072c2:	ec41 0b11 	vmov	d1, r0, r1
 80072c6:	f018 f821 	bl	801f30c <pow>
 80072ca:	ec51 0b10 	vmov	r0, r1, d0
 80072ce:	f001 fe9b 	bl	8009008 <__aeabi_d2f>
 80072d2:	ee07 0a90 	vmov	s15, r0
 80072d6:	eddf 6ac1 	vldr	s13, [pc, #772]	; 80075dc <calc_rel_iaq_ulp_internal+0x3b4>
 80072da:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 80075e0 <calc_rel_iaq_ulp_internal+0x3b8>
 80072de:	eeb1 6a67 	vneg.f32	s12, s15
 80072e2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80072e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ee:	dd0e      	ble.n	800730e <calc_rel_iaq_ulp_internal+0xe6>
 80072f0:	ed9f 7abc 	vldr	s14, [pc, #752]	; 80075e4 <calc_rel_iaq_ulp_internal+0x3bc>
 80072f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072fc:	f300 8108 	bgt.w	8007510 <calc_rel_iaq_ulp_internal+0x2e8>
 8007300:	ee17 0a90 	vmov	r0, s15
 8007304:	f001 fb30 	bl	8008968 <__aeabi_f2d>
 8007308:	ec41 0b10 	vmov	d0, r0, r1
 800730c:	e001      	b.n	8007312 <calc_rel_iaq_ulp_internal+0xea>
 800730e:	ed9f 0bac 	vldr	d0, [pc, #688]	; 80075c0 <calc_rel_iaq_ulp_internal+0x398>
 8007312:	f017 ff75 	bl	801f200 <exp>
 8007316:	ec51 0b10 	vmov	r0, r1, d0
 800731a:	f001 fe75 	bl	8009008 <__aeabi_d2f>
 800731e:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8007322:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8007326:	eddf 5ab0 	vldr	s11, [pc, #704]	; 80075e8 <calc_rel_iaq_ulp_internal+0x3c0>
 800732a:	ed9f 6ab0 	vldr	s12, [pc, #704]	; 80075ec <calc_rel_iaq_ulp_internal+0x3c4>
 800732e:	edd4 9a0e 	vldr	s19, [r4, #56]	; 0x38
 8007332:	eeb0 7a67 	vmov.f32	s14, s15
 8007336:	ee96 7aa6 	vfnms.f32	s14, s13, s13
 800733a:	ee05 0a10 	vmov	s10, r0
 800733e:	eef0 6a47 	vmov.f32	s13, s14
 8007342:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007346:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800734a:	ee37 7a45 	vsub.f32	s14, s14, s10
 800734e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8007352:	ee27 7a06 	vmul.f32	s14, s14, s12
 8007356:	ee17 0a90 	vmov	r0, s15
 800735a:	ed84 7a0b 	vstr	s14, [r4, #44]	; 0x2c
 800735e:	f001 fb03 	bl	8008968 <__aeabi_f2d>
 8007362:	ec41 0b10 	vmov	d0, r0, r1
 8007366:	f018 f841 	bl	801f3ec <sqrt>
 800736a:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
 800736e:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8007372:	ee87 9a27 	vdiv.f32	s18, s14, s15
 8007376:	ec51 0b10 	vmov	r0, r1, d0
 800737a:	f001 fe45 	bl	8009008 <__aeabi_d2f>
 800737e:	ee07 0a90 	vmov	s15, r0
 8007382:	eef4 7ac9 	vcmpe.f32	s15, s18
 8007386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800738a:	f300 80c7 	bgt.w	800751c <calc_rel_iaq_ulp_internal+0x2f4>
 800738e:	eec9 7a89 	vdiv.f32	s15, s19, s18
 8007392:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8007396:	ed9f 9a93 	vldr	s18, [pc, #588]	; 80075e4 <calc_rel_iaq_ulp_internal+0x3bc>
 800739a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800739e:	eef4 7ac9 	vcmpe.f32	s15, s18
 80073a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073a6:	d54a      	bpl.n	800743e <calc_rel_iaq_ulp_internal+0x216>
 80073a8:	eddf 9a8d 	vldr	s19, [pc, #564]	; 80075e0 <calc_rel_iaq_ulp_internal+0x3b8>
 80073ac:	eef4 7ae9 	vcmpe.f32	s15, s19
 80073b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073b4:	f100 80af 	bmi.w	8007516 <calc_rel_iaq_ulp_internal+0x2ee>
 80073b8:	eef1 7a67 	vneg.f32	s15, s15
 80073bc:	ee17 0a90 	vmov	r0, s15
 80073c0:	f001 fad2 	bl	8008968 <__aeabi_f2d>
 80073c4:	ec41 0b10 	vmov	d0, r0, r1
 80073c8:	f017 ff1a 	bl	801f200 <exp>
 80073cc:	ec51 0b10 	vmov	r0, r1, d0
 80073d0:	f001 fe1a 	bl	8009008 <__aeabi_d2f>
 80073d4:	ee07 0a10 	vmov	s14, r0
 80073d8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80073dc:	ee37 6a27 	vadd.f32	s12, s14, s15
 80073e0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80073e4:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80073e8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80073ec:	ee17 0a90 	vmov	r0, s15
 80073f0:	f001 faba 	bl	8008968 <__aeabi_f2d>
 80073f4:	ed9f 0b70 	vldr	d0, [pc, #448]	; 80075b8 <calc_rel_iaq_ulp_internal+0x390>
 80073f8:	ec41 0b11 	vmov	d1, r0, r1
 80073fc:	f017 ff86 	bl	801f30c <pow>
 8007400:	ec51 0b10 	vmov	r0, r1, d0
 8007404:	f001 fe00 	bl	8009008 <__aeabi_d2f>
 8007408:	ee07 0a90 	vmov	s15, r0
 800740c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80075dc <calc_rel_iaq_ulp_internal+0x3b4>
 8007410:	eef1 6a67 	vneg.f32	s13, s15
 8007414:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007418:	eef4 7ae9 	vcmpe.f32	s15, s19
 800741c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007420:	f300 80bb 	bgt.w	800759a <calc_rel_iaq_ulp_internal+0x372>
 8007424:	68e3      	ldr	r3, [r4, #12]
 8007426:	eddf 7a72 	vldr	s15, [pc, #456]	; 80075f0 <calc_rel_iaq_ulp_internal+0x3c8>
 800742a:	edc5 8a10 	vstr	s17, [r5, #64]	; 0x40
 800742e:	2b0a      	cmp	r3, #10
 8007430:	edc5 7a16 	vstr	s15, [r5, #88]	; 0x58
 8007434:	d851      	bhi.n	80074da <calc_rel_iaq_ulp_internal+0x2b2>
 8007436:	ecbd 8b04 	vpop	{d8-d9}
 800743a:	2001      	movs	r0, #1
 800743c:	bd70      	pop	{r4, r5, r6, pc}
 800743e:	ed9f 0b60 	vldr	d0, [pc, #384]	; 80075c0 <calc_rel_iaq_ulp_internal+0x398>
 8007442:	f017 fedd 	bl	801f200 <exp>
 8007446:	ec51 0b10 	vmov	r0, r1, d0
 800744a:	f001 fddd 	bl	8009008 <__aeabi_d2f>
 800744e:	ee07 0a10 	vmov	s14, r0
 8007452:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007456:	ee37 6a27 	vadd.f32	s12, s14, s15
 800745a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800745e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8007462:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007466:	ee17 0a90 	vmov	r0, s15
 800746a:	f001 fa7d 	bl	8008968 <__aeabi_f2d>
 800746e:	ed9f 0b52 	vldr	d0, [pc, #328]	; 80075b8 <calc_rel_iaq_ulp_internal+0x390>
 8007472:	ec41 0b11 	vmov	d1, r0, r1
 8007476:	f017 ff49 	bl	801f30c <pow>
 800747a:	ec51 0b10 	vmov	r0, r1, d0
 800747e:	f001 fdc3 	bl	8009008 <__aeabi_d2f>
 8007482:	ee07 0a90 	vmov	s15, r0
 8007486:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80075dc <calc_rel_iaq_ulp_internal+0x3b4>
 800748a:	eef1 6a67 	vneg.f32	s13, s15
 800748e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007492:	ee17 0a90 	vmov	r0, s15
 8007496:	f001 fa67 	bl	8008968 <__aeabi_f2d>
 800749a:	ec41 0b10 	vmov	d0, r0, r1
 800749e:	f017 feaf 	bl	801f200 <exp>
 80074a2:	ec51 0b10 	vmov	r0, r1, d0
 80074a6:	f001 fdaf 	bl	8009008 <__aeabi_d2f>
 80074aa:	ee07 0a10 	vmov	s14, r0
 80074ae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80074b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80074b6:	eddf 6a4d 	vldr	s13, [pc, #308]	; 80075ec <calc_rel_iaq_ulp_internal+0x3c4>
 80074ba:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80075f0 <calc_rel_iaq_ulp_internal+0x3c8>
 80074be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80074c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ca:	dcab      	bgt.n	8007424 <calc_rel_iaq_ulp_internal+0x1fc>
 80074cc:	68e3      	ldr	r3, [r4, #12]
 80074ce:	edc5 7a16 	vstr	s15, [r5, #88]	; 0x58
 80074d2:	2b0a      	cmp	r3, #10
 80074d4:	edc5 8a10 	vstr	s17, [r5, #64]	; 0x40
 80074d8:	d9ad      	bls.n	8007436 <calc_rel_iaq_ulp_internal+0x20e>
 80074da:	eddf 7a46 	vldr	s15, [pc, #280]	; 80075f4 <calc_rel_iaq_ulp_internal+0x3cc>
 80074de:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80074e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074e6:	d461      	bmi.n	80075ac <calc_rel_iaq_ulp_internal+0x384>
 80074e8:	eddf 7a43 	vldr	s15, [pc, #268]	; 80075f8 <calc_rel_iaq_ulp_internal+0x3d0>
 80074ec:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80074f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074f4:	dc5a      	bgt.n	80075ac <calc_rel_iaq_ulp_internal+0x384>
 80074f6:	eddf 7a41 	vldr	s15, [pc, #260]	; 80075fc <calc_rel_iaq_ulp_internal+0x3d4>
 80074fa:	eef4 8ae7 	vcmpe.f32	s17, s15
 80074fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007502:	bfcc      	ite	gt
 8007504:	f06f 0065 	mvngt.w	r0, #101	; 0x65
 8007508:	2000      	movle	r0, #0
 800750a:	ecbd 8b04 	vpop	{d8-d9}
 800750e:	bd70      	pop	{r4, r5, r6, pc}
 8007510:	ed9f 0b2d 	vldr	d0, [pc, #180]	; 80075c8 <calc_rel_iaq_ulp_internal+0x3a0>
 8007514:	e6fd      	b.n	8007312 <calc_rel_iaq_ulp_internal+0xea>
 8007516:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 80075c8 <calc_rel_iaq_ulp_internal+0x3a0>
 800751a:	e792      	b.n	8007442 <calc_rel_iaq_ulp_internal+0x21a>
 800751c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800751e:	f001 fa23 	bl	8008968 <__aeabi_f2d>
 8007522:	ec41 0b10 	vmov	d0, r0, r1
 8007526:	f017 ff61 	bl	801f3ec <sqrt>
 800752a:	ec51 0b10 	vmov	r0, r1, d0
 800752e:	f001 fd6b 	bl	8009008 <__aeabi_d2f>
 8007532:	ee09 0a10 	vmov	s18, r0
 8007536:	e72a      	b.n	800738e <calc_rel_iaq_ulp_internal+0x166>
 8007538:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800753c:	e691      	b.n	8007262 <calc_rel_iaq_ulp_internal+0x3a>
 800753e:	210a      	movs	r1, #10
 8007540:	2201      	movs	r2, #1
 8007542:	2604      	movs	r6, #4
 8007544:	482e      	ldr	r0, [pc, #184]	; (8007600 <calc_rel_iaq_ulp_internal+0x3d8>)
 8007546:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800754a:	3a01      	subs	r2, #1
 800754c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007550:	4430      	add	r0, r6
 8007552:	6956      	ldr	r6, [r2, #20]
 8007554:	ed92 7a00 	vldr	s14, [r2]
 8007558:	edd0 6a00 	vldr	s13, [r0]
 800755c:	1b89      	subs	r1, r1, r6
 800755e:	ee07 1a90 	vmov	s15, r1
 8007562:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8007566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800756a:	1b9b      	subs	r3, r3, r6
 800756c:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8007570:	ee07 3a90 	vmov	s15, r3
 8007574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007578:	eea6 7a27 	vfma.f32	s14, s12, s15
 800757c:	e671      	b.n	8007262 <calc_rel_iaq_ulp_internal+0x3a>
 800757e:	2128      	movs	r1, #40	; 0x28
 8007580:	2608      	movs	r6, #8
 8007582:	2202      	movs	r2, #2
 8007584:	e7de      	b.n	8007544 <calc_rel_iaq_ulp_internal+0x31c>
 8007586:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800758a:	260c      	movs	r6, #12
 800758c:	2203      	movs	r2, #3
 800758e:	e7d9      	b.n	8007544 <calc_rel_iaq_ulp_internal+0x31c>
 8007590:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 8007594:	2610      	movs	r6, #16
 8007596:	2204      	movs	r2, #4
 8007598:	e7d4      	b.n	8007544 <calc_rel_iaq_ulp_internal+0x31c>
 800759a:	eef4 7ac9 	vcmpe.f32	s15, s18
 800759e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075a2:	f77f af76 	ble.w	8007492 <calc_rel_iaq_ulp_internal+0x26a>
 80075a6:	ed9f 0b08 	vldr	d0, [pc, #32]	; 80075c8 <calc_rel_iaq_ulp_internal+0x3a0>
 80075aa:	e778      	b.n	800749e <calc_rel_iaq_ulp_internal+0x276>
 80075ac:	f06f 0065 	mvn.w	r0, #101	; 0x65
 80075b0:	e7ab      	b.n	800750a <calc_rel_iaq_ulp_internal+0x2e2>
 80075b2:	bf00      	nop
 80075b4:	f3af 8000 	nop.w
 80075b8:	00000000 	.word	0x00000000
 80075bc:	40240000 	.word	0x40240000
 80075c0:	00000000 	.word	0x00000000
 80075c4:	c0548000 	.word	0xc0548000
 80075c8:	00000000 	.word	0x00000000
 80075cc:	40548000 	.word	0x40548000
 80075d0:	3a887631 	.word	0x3a887631
 80075d4:	3f333333 	.word	0x3f333333
 80075d8:	3f734128 	.word	0x3f734128
 80075dc:	446d47d1 	.word	0x446d47d1
 80075e0:	c2a40000 	.word	0xc2a40000
 80075e4:	42a40000 	.word	0x42a40000
 80075e8:	3b086426 	.word	0x3b086426
 80075ec:	447a0000 	.word	0x447a0000
 80075f0:	43fa0000 	.word	0x43fa0000
 80075f4:	437a0000 	.word	0x437a0000
 80075f8:	501502f9 	.word	0x501502f9
 80075fc:	42763886 	.word	0x42763886
 8007600:	080212a8 	.word	0x080212a8

08007604 <calc_iaq_2nd_gen_ulp_internal>:
 8007604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007606:	eddf 7af6 	vldr	s15, [pc, #984]	; 80079e0 <calc_iaq_2nd_gen_ulp_internal+0x3dc>
 800760a:	eeb4 2ae7 	vcmpe.f32	s4, s15
 800760e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007612:	ed2d 8b06 	vpush	{d8-d10}
 8007616:	4604      	mov	r4, r0
 8007618:	460e      	mov	r6, r1
 800761a:	eeb0 9a40 	vmov.f32	s18, s0
 800761e:	eef0 aa61 	vmov.f32	s21, s3
 8007622:	4617      	mov	r7, r2
 8007624:	461d      	mov	r5, r3
 8007626:	f340 82f5 	ble.w	8007c14 <calc_iaq_2nd_gen_ulp_internal+0x610>
 800762a:	eddf 7aee 	vldr	s15, [pc, #952]	; 80079e4 <calc_iaq_2nd_gen_ulp_internal+0x3e0>
 800762e:	eeb4 2ae7 	vcmpe.f32	s4, s15
 8007632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007636:	eef0 8a42 	vmov.f32	s17, s4
 800763a:	f140 82eb 	bpl.w	8007c14 <calc_iaq_2nd_gen_ulp_internal+0x610>
 800763e:	eddf 7aea 	vldr	s15, [pc, #936]	; 80079e8 <calc_iaq_2nd_gen_ulp_internal+0x3e4>
 8007642:	edc5 8a11 	vstr	s17, [r5, #68]	; 0x44
 8007646:	eef4 8ae7 	vcmpe.f32	s17, s15
 800764a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800764e:	f300 82f2 	bgt.w	8007c36 <calc_iaq_2nd_gen_ulp_internal+0x632>
 8007652:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8007656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800765a:	f340 8382 	ble.w	8007d62 <calc_iaq_2nd_gen_ulp_internal+0x75e>
 800765e:	68e3      	ldr	r3, [r4, #12]
 8007660:	2b01      	cmp	r3, #1
 8007662:	f240 82ee 	bls.w	8007c42 <calc_iaq_2nd_gen_ulp_internal+0x63e>
 8007666:	eef5 aac0 	vcmpe.f32	s21, #0.0
 800766a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800766e:	f340 82f1 	ble.w	8007c54 <calc_iaq_2nd_gen_ulp_internal+0x650>
 8007672:	eddf 7add 	vldr	s15, [pc, #884]	; 80079e8 <calc_iaq_2nd_gen_ulp_internal+0x3e4>
 8007676:	eef4 aa67 	vcmp.f32	s21, s15
 800767a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800767e:	bfc8      	it	gt
 8007680:	eef0 aa67 	vmovgt.f32	s21, s15
 8007684:	6830      	ldr	r0, [r6, #0]
 8007686:	f001 f96f 	bl	8008968 <__aeabi_f2d>
 800768a:	ec41 0b10 	vmov	d0, r0, r1
 800768e:	f017 fdff 	bl	801f290 <log10>
 8007692:	ec51 0b10 	vmov	r0, r1, d0
 8007696:	f001 fcb7 	bl	8009008 <__aeabi_d2f>
 800769a:	ee09 0a90 	vmov	s19, r0
 800769e:	6870      	ldr	r0, [r6, #4]
 80076a0:	f001 f962 	bl	8008968 <__aeabi_f2d>
 80076a4:	ec41 0b10 	vmov	d0, r0, r1
 80076a8:	f017 fdf2 	bl	801f290 <log10>
 80076ac:	ec51 0b10 	vmov	r0, r1, d0
 80076b0:	f001 fcaa 	bl	8009008 <__aeabi_d2f>
 80076b4:	ee07 0a90 	vmov	s15, r0
 80076b8:	ee87 6aa9 	vdiv.f32	s12, s15, s19
 80076bc:	eddf 6acb 	vldr	s13, [pc, #812]	; 80079ec <calc_iaq_2nd_gen_ulp_internal+0x3e8>
 80076c0:	eddf 7acb 	vldr	s15, [pc, #812]	; 80079f0 <calc_iaq_2nd_gen_ulp_internal+0x3ec>
 80076c4:	ed9f 7acb 	vldr	s14, [pc, #812]	; 80079f4 <calc_iaq_2nd_gen_ulp_internal+0x3f0>
 80076c8:	eee6 7a66 	vfms.f32	s15, s12, s13
 80076cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076d4:	f140 82c1 	bpl.w	8007c5a <calc_iaq_2nd_gen_ulp_internal+0x656>
 80076d8:	ed9f 7ac7 	vldr	s14, [pc, #796]	; 80079f8 <calc_iaq_2nd_gen_ulp_internal+0x3f4>
 80076dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076e4:	f100 8350 	bmi.w	8007d88 <calc_iaq_2nd_gen_ulp_internal+0x784>
 80076e8:	eef1 7a67 	vneg.f32	s15, s15
 80076ec:	ee17 0a90 	vmov	r0, s15
 80076f0:	f001 f93a 	bl	8008968 <__aeabi_f2d>
 80076f4:	ec41 0b10 	vmov	d0, r0, r1
 80076f8:	f017 fd82 	bl	801f200 <exp>
 80076fc:	ec51 0b10 	vmov	r0, r1, d0
 8007700:	f001 fc82 	bl	8009008 <__aeabi_d2f>
 8007704:	ee07 0a10 	vmov	s14, r0
 8007708:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800770c:	ee37 6a27 	vadd.f32	s12, s14, s15
 8007710:	ed9f aaba 	vldr	s20, [pc, #744]	; 80079fc <calc_iaq_2nd_gen_ulp_internal+0x3f8>
 8007714:	ed9f 7aba 	vldr	s14, [pc, #744]	; 8007a00 <calc_iaq_2nd_gen_ulp_internal+0x3fc>
 8007718:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800771c:	eea6 aac7 	vfms.f32	s20, s13, s14
 8007720:	eeb4 aae7 	vcmpe.f32	s20, s15
 8007724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007728:	f300 82ad 	bgt.w	8007c86 <calc_iaq_2nd_gen_ulp_internal+0x682>
 800772c:	eeb0 aa67 	vmov.f32	s20, s15
 8007730:	edd4 7a00 	vldr	s15, [r4]
 8007734:	eef4 7ae9 	vcmpe.f32	s15, s19
 8007738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800773c:	f200 82b4 	bhi.w	8007ca8 <calc_iaq_2nd_gen_ulp_internal+0x6a4>
 8007740:	edc4 9a00 	vstr	s19, [r4]
 8007744:	edc4 aa01 	vstr	s21, [r4, #4]
 8007748:	edc4 8a02 	vstr	s17, [r4, #8]
 800774c:	eef0 7a69 	vmov.f32	s15, s19
 8007750:	ee77 9ae9 	vsub.f32	s19, s15, s19
 8007754:	eddf 7aab 	vldr	s15, [pc, #684]	; 8007a04 <calc_iaq_2nd_gen_ulp_internal+0x400>
 8007758:	eef4 9ae7 	vcmpe.f32	s19, s15
 800775c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007760:	f340 80d8 	ble.w	8007914 <calc_iaq_2nd_gen_ulp_internal+0x310>
 8007764:	edd4 1a01 	vldr	s3, [r4, #4]
 8007768:	ed94 2a02 	vldr	s4, [r4, #8]
 800776c:	ee71 aaea 	vsub.f32	s21, s3, s21
 8007770:	ee72 8a68 	vsub.f32	s17, s4, s17
 8007774:	eef5 aac0 	vcmpe.f32	s21, #0.0
 8007778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800777c:	f100 8353 	bmi.w	8007e26 <calc_iaq_2nd_gen_ulp_internal+0x822>
 8007780:	ed9f 7abc 	vldr	s14, [pc, #752]	; 8007a74 <calc_iaq_2nd_gen_ulp_internal+0x470>
 8007784:	eef0 7a69 	vmov.f32	s15, s19
 8007788:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800778c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007790:	bf48      	it	mi
 8007792:	ed9f 7a9d 	vldrmi	s14, [pc, #628]	; 8007a08 <calc_iaq_2nd_gen_ulp_internal+0x404>
 8007796:	eddf 6a9d 	vldr	s13, [pc, #628]	; 8007a0c <calc_iaq_2nd_gen_ulp_internal+0x408>
 800779a:	bf48      	it	mi
 800779c:	ee28 7ac7 	vnmulmi.f32	s14, s17, s14
 80077a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80077a4:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80079f4 <calc_iaq_2nd_gen_ulp_internal+0x3f0>
 80077a8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80077ac:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80077b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80077b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077bc:	f100 82d4 	bmi.w	8007d68 <calc_iaq_2nd_gen_ulp_internal+0x764>
 80077c0:	ed9f 0b83 	vldr	d0, [pc, #524]	; 80079d0 <calc_iaq_2nd_gen_ulp_internal+0x3cc>
 80077c4:	f017 fd1c 	bl	801f200 <exp>
 80077c8:	ec51 0b10 	vmov	r0, r1, d0
 80077cc:	f001 fc1c 	bl	8009008 <__aeabi_d2f>
 80077d0:	ee07 0a10 	vmov	s14, r0
 80077d4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80077d8:	ee77 6a27 	vadd.f32	s13, s14, s15
 80077dc:	eef5 aac0 	vcmpe.f32	s21, #0.0
 80077e0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80077e4:	ed9f 8a8a 	vldr	s16, [pc, #552]	; 8007a10 <calc_iaq_2nd_gen_ulp_internal+0x40c>
 80077e8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80077ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077f0:	eea7 8a27 	vfma.f32	s16, s14, s15
 80077f4:	bfcb      	itete	gt
 80077f6:	eef0 7a08 	vmovgt.f32	s15, #8	; 0x40400000  3.0
 80077fa:	eef8 7a08 	vmovle.f32	s15, #136	; 0xc0400000 -3.0
 80077fe:	ee7a aae7 	vsubgt.f32	s21, s21, s15
 8007802:	ee77 aaea 	vsuble.f32	s21, s15, s21
 8007806:	eddf 7a7b 	vldr	s15, [pc, #492]	; 80079f4 <calc_iaq_2nd_gen_ulp_internal+0x3f0>
 800780a:	eef1 aa6a 	vneg.f32	s21, s21
 800780e:	eef4 aae7 	vcmpe.f32	s21, s15
 8007812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007816:	f140 82f8 	bpl.w	8007e0a <calc_iaq_2nd_gen_ulp_internal+0x806>
 800781a:	eddf 7a77 	vldr	s15, [pc, #476]	; 80079f8 <calc_iaq_2nd_gen_ulp_internal+0x3f4>
 800781e:	eef4 aae7 	vcmpe.f32	s21, s15
 8007822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007826:	f100 8312 	bmi.w	8007e4e <calc_iaq_2nd_gen_ulp_internal+0x84a>
 800782a:	eef1 7a6a 	vneg.f32	s15, s21
 800782e:	ee17 0a90 	vmov	r0, s15
 8007832:	f001 f899 	bl	8008968 <__aeabi_f2d>
 8007836:	ec41 0b10 	vmov	d0, r0, r1
 800783a:	f017 fce1 	bl	801f200 <exp>
 800783e:	ec51 0b10 	vmov	r0, r1, d0
 8007842:	f001 fbe1 	bl	8009008 <__aeabi_d2f>
 8007846:	ee07 0a10 	vmov	s14, r0
 800784a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800784e:	ee37 6a27 	vadd.f32	s12, s14, s15
 8007852:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8007856:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800785a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800785e:	bfcc      	ite	gt
 8007860:	eef0 7a08 	vmovgt.f32	s15, #8	; 0x40400000  3.0
 8007864:	eef8 7a08 	vmovle.f32	s15, #136	; 0xc0400000 -3.0
 8007868:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8007a14 <calc_iaq_2nd_gen_ulp_internal+0x410>
 800786c:	eddf aa6a 	vldr	s21, [pc, #424]	; 8007a18 <calc_iaq_2nd_gen_ulp_internal+0x414>
 8007870:	bfcc      	ite	gt
 8007872:	ee78 8ae7 	vsubgt.f32	s17, s17, s15
 8007876:	ee77 8ae8 	vsuble.f32	s17, s15, s17
 800787a:	eee6 aa87 	vfma.f32	s21, s13, s14
 800787e:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80079f4 <calc_iaq_2nd_gen_ulp_internal+0x3f0>
 8007882:	eef1 8a68 	vneg.f32	s17, s17
 8007886:	eef4 8ae7 	vcmpe.f32	s17, s15
 800788a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800788e:	ee6a aa8a 	vmul.f32	s21, s21, s20
 8007892:	f140 82b7 	bpl.w	8007e04 <calc_iaq_2nd_gen_ulp_internal+0x800>
 8007896:	eddf 7a58 	vldr	s15, [pc, #352]	; 80079f8 <calc_iaq_2nd_gen_ulp_internal+0x3f4>
 800789a:	eef4 8ae7 	vcmpe.f32	s17, s15
 800789e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078a2:	f100 82d1 	bmi.w	8007e48 <calc_iaq_2nd_gen_ulp_internal+0x844>
 80078a6:	eef1 7a68 	vneg.f32	s15, s17
 80078aa:	ee17 0a90 	vmov	r0, s15
 80078ae:	f001 f85b 	bl	8008968 <__aeabi_f2d>
 80078b2:	ec41 0b10 	vmov	d0, r0, r1
 80078b6:	f017 fca3 	bl	801f200 <exp>
 80078ba:	ec51 0b10 	vmov	r0, r1, d0
 80078be:	f001 fba3 	bl	8009008 <__aeabi_d2f>
 80078c2:	ee07 0a10 	vmov	s14, r0
 80078c6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80078ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80078ce:	eddf 6a51 	vldr	s13, [pc, #324]	; 8007a14 <calc_iaq_2nd_gen_ulp_internal+0x410>
 80078d2:	ed9f aa51 	vldr	s20, [pc, #324]	; 8007a18 <calc_iaq_2nd_gen_ulp_internal+0x414>
 80078d6:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80078da:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80078de:	eea6 aa26 	vfma.f32	s20, s12, s13
 80078e2:	ee2a aa2a 	vmul.f32	s20, s20, s21
 80078e6:	eeb4 aac7 	vcmpe.f32	s20, s14
 80078ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078ee:	f340 8292 	ble.w	8007e16 <calc_iaq_2nd_gen_ulp_internal+0x812>
 80078f2:	ee28 8a07 	vmul.f32	s16, s16, s14
 80078f6:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80078fa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80078fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007902:	f300 8285 	bgt.w	8007e10 <calc_iaq_2nd_gen_ulp_internal+0x80c>
 8007906:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8007a70 <calc_iaq_2nd_gen_ulp_internal+0x46c>
 800790a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800790e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007912:	dc01      	bgt.n	8007918 <calc_iaq_2nd_gen_ulp_internal+0x314>
 8007914:	ed9f 8a56 	vldr	s16, [pc, #344]	; 8007a70 <calc_iaq_2nd_gen_ulp_internal+0x46c>
 8007918:	eddf 7a40 	vldr	s15, [pc, #256]	; 8007a1c <calc_iaq_2nd_gen_ulp_internal+0x418>
 800791c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8007a20 <calc_iaq_2nd_gen_ulp_internal+0x41c>
 8007920:	ee69 7aa7 	vmul.f32	s15, s19, s15
 8007924:	eef4 7a47 	vcmp.f32	s15, s14
 8007928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800792c:	bfc8      	it	gt
 800792e:	eef0 7a47 	vmovgt.f32	s15, s14
 8007932:	063b      	lsls	r3, r7, #24
 8007934:	ee38 8a27 	vadd.f32	s16, s16, s15
 8007938:	f100 81ff 	bmi.w	8007d3a <calc_iaq_2nd_gen_ulp_internal+0x736>
 800793c:	4638      	mov	r0, r7
 800793e:	f000 fff1 	bl	8008924 <__aeabi_ui2d>
 8007942:	ec41 0b11 	vmov	d1, r0, r1
 8007946:	ed9f 0b24 	vldr	d0, [pc, #144]	; 80079d8 <calc_iaq_2nd_gen_ulp_internal+0x3d4>
 800794a:	f017 fcdf 	bl	801f30c <pow>
 800794e:	ec51 0b10 	vmov	r0, r1, d0
 8007952:	f001 fb59 	bl	8009008 <__aeabi_d2f>
 8007956:	ee07 0a90 	vmov	s15, r0
 800795a:	ee27 8a88 	vmul.f32	s16, s15, s16
 800795e:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8007962:	eeb4 8a67 	vcmp.f32	s16, s15
 8007966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800796a:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 800796e:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8007a24 <calc_iaq_2nd_gen_ulp_internal+0x420>
 8007972:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8007a70 <calc_iaq_2nd_gen_ulp_internal+0x46c>
 8007976:	bfc8      	it	gt
 8007978:	eeb0 8a67 	vmovgt.f32	s16, s15
 800797c:	ee78 7a47 	vsub.f32	s15, s16, s14
 8007980:	eea7 7a86 	vfma.f32	s14, s15, s12
 8007984:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8007988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800798c:	bfcd      	iteet	gt
 800798e:	eddf 7a37 	vldrgt	s15, [pc, #220]	; 8007a6c <calc_iaq_2nd_gen_ulp_internal+0x468>
 8007992:	eddf 7a25 	vldrle	s15, [pc, #148]	; 8007a28 <calc_iaq_2nd_gen_ulp_internal+0x424>
 8007996:	eeb0 7a66 	vmovle.f32	s14, s13
 800799a:	ee67 7a27 	vmulgt.f32	s15, s14, s15
 800799e:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
 80079a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079a6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80079aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079ae:	ed85 7a14 	vstr	s14, [r5, #80]	; 0x50
 80079b2:	edc5 7a13 	vstr	s15, [r5, #76]	; 0x4c
 80079b6:	f100 8192 	bmi.w	8007cde <calc_iaq_2nd_gen_ulp_internal+0x6da>
 80079ba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80079be:	ed9f aa1b 	vldr	s20, [pc, #108]	; 8007a2c <calc_iaq_2nd_gen_ulp_internal+0x428>
 80079c2:	eef0 8a08 	vmov.f32	s17, #8	; 0x40400000  3.0
 80079c6:	eeb7 7a04 	vmov.f32	s14, #116	; 0x3fa00000  1.250
 80079ca:	e055      	b.n	8007a78 <calc_iaq_2nd_gen_ulp_internal+0x474>
 80079cc:	f3af 8000 	nop.w
 80079d0:	00000000 	.word	0x00000000
 80079d4:	c0548000 	.word	0xc0548000
 80079d8:	e0000000 	.word	0xe0000000
 80079dc:	3ff0ae7e 	.word	0x3ff0ae7e
 80079e0:	c38c0000 	.word	0xc38c0000
 80079e4:	49742400 	.word	0x49742400
 80079e8:	42c80000 	.word	0x42c80000
 80079ec:	4246f073 	.word	0x4246f073
 80079f0:	428e43aa 	.word	0x428e43aa
 80079f4:	42a40000 	.word	0x42a40000
 80079f8:	c2a40000 	.word	0xc2a40000
 80079fc:	41810aec 	.word	0x41810aec
 8007a00:	416e8236 	.word	0x416e8236
 8007a04:	ab8cbccc 	.word	0xab8cbccc
 8007a08:	3ca3d70a 	.word	0x3ca3d70a
 8007a0c:	3eb33333 	.word	0x3eb33333
 8007a10:	be99999a 	.word	0xbe99999a
 8007a14:	3f4ccccd 	.word	0x3f4ccccd
 8007a18:	3e4ccccd 	.word	0x3e4ccccd
 8007a1c:	3eaa7efa 	.word	0x3eaa7efa
 8007a20:	3dcccccd 	.word	0x3dcccccd
 8007a24:	3f21d2a7 	.word	0x3f21d2a7
 8007a28:	3c815e39 	.word	0x3c815e39
 8007a2c:	3feb43c3 	.word	0x3feb43c3
 8007a30:	3df8067a 	.word	0x3df8067a
 8007a34:	3eb46175 	.word	0x3eb46175
 8007a38:	2e83f0ff 	.word	0x2e83f0ff
 8007a3c:	3ab7f56b 	.word	0x3ab7f56b
 8007a40:	3de24de6 	.word	0x3de24de6
 8007a44:	2cd31b32 	.word	0x2cd31b32
 8007a48:	43c80000 	.word	0x43c80000
 8007a4c:	47504650 	.word	0x47504650
 8007a50:	459c4000 	.word	0x459c4000
 8007a54:	437a0000 	.word	0x437a0000
 8007a58:	501502f9 	.word	0x501502f9
 8007a5c:	42763886 	.word	0x42763886
 8007a60:	3b5306a3 	.word	0x3b5306a3
 8007a64:	439b478d 	.word	0x439b478d
 8007a68:	40b851ec 	.word	0x40b851ec
 8007a6c:	3ff0a3d7 	.word	0x3ff0a3d7
 8007a70:	3c09a027 	.word	0x3c09a027
 8007a74:	00000000 	.word	0x00000000
 8007a78:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 8007a7c:	eef0 6a69 	vmov.f32	s13, s19
 8007a80:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007a84:	ee16 0a90 	vmov	r0, s13
 8007a88:	f000 ff6e 	bl	8008968 <__aeabi_f2d>
 8007a8c:	ec41 0b10 	vmov	d0, r0, r1
 8007a90:	f017 fbfe 	bl	801f290 <log10>
 8007a94:	ec51 0b10 	vmov	r0, r1, d0
 8007a98:	f001 fab6 	bl	8009008 <__aeabi_d2f>
 8007a9c:	ee07 0a10 	vmov	s14, r0
 8007aa0:	eef0 7a68 	vmov.f32	s15, s17
 8007aa4:	eee7 7a0a 	vfma.f32	s15, s14, s20
 8007aa8:	eef4 7ae9 	vcmpe.f32	s15, s19
 8007aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ab0:	f340 813a 	ble.w	8007d28 <calc_iaq_2nd_gen_ulp_internal+0x724>
 8007ab4:	edc5 7a12 	vstr	s15, [r5, #72]	; 0x48
 8007ab8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8007abc:	ed5f 7a15 	vldr	s15, [pc, #-84]	; 8007a6c <calc_iaq_2nd_gen_ulp_internal+0x468>
 8007ac0:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f040 811a 	bne.w	8007cfe <calc_iaq_2nd_gen_ulp_internal+0x6fa>
 8007aca:	ed94 5a04 	vldr	s10, [r4, #16]
 8007ace:	edd4 5a05 	vldr	s11, [r4, #20]
 8007ad2:	ed1f 7a29 	vldr	s14, [pc, #-164]	; 8007a30 <calc_iaq_2nd_gen_ulp_internal+0x42c>
 8007ad6:	ed5f 4a29 	vldr	s9, [pc, #-164]	; 8007a34 <calc_iaq_2nd_gen_ulp_internal+0x430>
 8007ada:	ed5f 6a27 	vldr	s13, [pc, #-156]	; 8007a40 <calc_iaq_2nd_gen_ulp_internal+0x43c>
 8007ade:	edd4 7a06 	vldr	s15, [r4, #24]
 8007ae2:	ee38 4a45 	vsub.f32	s8, s16, s10
 8007ae6:	ee38 6a65 	vsub.f32	s12, s16, s11
 8007aea:	eea4 5a24 	vfma.f32	s10, s8, s9
 8007aee:	eee6 5a07 	vfma.f32	s11, s12, s14
 8007af2:	ed84 5a04 	vstr	s10, [r4, #16]
 8007af6:	ee35 7a65 	vsub.f32	s14, s10, s11
 8007afa:	edc4 5a05 	vstr	s11, [r4, #20]
 8007afe:	ee77 6a66 	vsub.f32	s13, s14, s13
 8007b02:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8007b06:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8007b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b0e:	f340 8176 	ble.w	8007dfe <calc_iaq_2nd_gen_ulp_internal+0x7fa>
 8007b12:	ed5f 7a37 	vldr	s15, [pc, #-220]	; 8007a38 <calc_iaq_2nd_gen_ulp_internal+0x434>
 8007b16:	eef4 6a67 	vcmp.f32	s13, s15
 8007b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b1e:	bfc8      	it	gt
 8007b20:	eef0 6a67 	vmovgt.f32	s13, s15
 8007b24:	ed1f 6a3b 	vldr	s12, [pc, #-236]	; 8007a3c <calc_iaq_2nd_gen_ulp_internal+0x438>
 8007b28:	edd4 7a07 	vldr	s15, [r4, #28]
 8007b2c:	edc4 6a06 	vstr	s13, [r4, #24]
 8007b30:	ee37 6a06 	vadd.f32	s12, s14, s12
 8007b34:	ee36 6a27 	vadd.f32	s12, s12, s15
 8007b38:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8007b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b40:	f340 8153 	ble.w	8007dea <calc_iaq_2nd_gen_ulp_internal+0x7e6>
 8007b44:	ed1f 6a35 	vldr	s12, [pc, #-212]	; 8007a74 <calc_iaq_2nd_gen_ulp_internal+0x470>
 8007b48:	ed5f 7a43 	vldr	s15, [pc, #-268]	; 8007a40 <calc_iaq_2nd_gen_ulp_internal+0x43c>
 8007b4c:	ed84 6a07 	vstr	s12, [r4, #28]
 8007b50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b58:	edd4 4a08 	vldr	s9, [r4, #32]
 8007b5c:	dc07      	bgt.n	8007b6e <calc_iaq_2nd_gen_ulp_internal+0x56a>
 8007b5e:	ed5f 7a47 	vldr	s15, [pc, #-284]	; 8007a44 <calc_iaq_2nd_gen_ulp_internal+0x440>
 8007b62:	eef4 6ae7 	vcmpe.f32	s13, s15
 8007b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b6a:	f340 8110 	ble.w	8007d8e <calc_iaq_2nd_gen_ulp_internal+0x78a>
 8007b6e:	ed5f 7a3f 	vldr	s15, [pc, #-252]	; 8007a74 <calc_iaq_2nd_gen_ulp_internal+0x470>
 8007b72:	ed5f 6a4b 	vldr	s13, [pc, #-300]	; 8007a48 <calc_iaq_2nd_gen_ulp_internal+0x444>
 8007b76:	ed1f 7a4b 	vldr	s14, [pc, #-300]	; 8007a4c <calc_iaq_2nd_gen_ulp_internal+0x448>
 8007b7a:	ed1f 6a4b 	vldr	s12, [pc, #-300]	; 8007a50 <calc_iaq_2nd_gen_ulp_internal+0x44c>
 8007b7e:	eef0 5a66 	vmov.f32	s11, s13
 8007b82:	eee8 5a07 	vfma.f32	s11, s16, s14
 8007b86:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8007b8a:	eef4 5ac6 	vcmpe.f32	s11, s12
 8007b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b92:	eeb0 7a65 	vmov.f32	s14, s11
 8007b96:	eef4 7ae6 	vcmpe.f32	s15, s13
 8007b9a:	f300 80c8 	bgt.w	8007d2e <calc_iaq_2nd_gen_ulp_internal+0x72a>
 8007b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ba2:	bfd8      	it	le
 8007ba4:	eef0 7a66 	vmovle.f32	s15, s13
 8007ba8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bb0:	bf58      	it	pl
 8007bb2:	eeb0 7a67 	vmovpl.f32	s14, s15
 8007bb6:	ed84 7a08 	vstr	s14, [r4, #32]
 8007bba:	68e3      	ldr	r3, [r4, #12]
 8007bbc:	6820      	ldr	r0, [r4, #0]
 8007bbe:	6861      	ldr	r1, [r4, #4]
 8007bc0:	68a2      	ldr	r2, [r4, #8]
 8007bc2:	63ea      	str	r2, [r5, #60]	; 0x3c
 8007bc4:	2b0a      	cmp	r3, #10
 8007bc6:	ed85 7a15 	vstr	s14, [r5, #84]	; 0x54
 8007bca:	6368      	str	r0, [r5, #52]	; 0x34
 8007bcc:	63a9      	str	r1, [r5, #56]	; 0x38
 8007bce:	ed85 9a10 	vstr	s18, [r5, #64]	; 0x40
 8007bd2:	f240 80a0 	bls.w	8007d16 <calc_iaq_2nd_gen_ulp_internal+0x712>
 8007bd6:	edd6 7a00 	vldr	s15, [r6]
 8007bda:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 8007a54 <calc_iaq_2nd_gen_ulp_internal+0x450>
 8007bde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007be6:	f100 8161 	bmi.w	8007eac <calc_iaq_2nd_gen_ulp_internal+0x8a8>
 8007bea:	ed1f 7a65 	vldr	s14, [pc, #-404]	; 8007a58 <calc_iaq_2nd_gen_ulp_internal+0x454>
 8007bee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bf6:	f300 8159 	bgt.w	8007eac <calc_iaq_2nd_gen_ulp_internal+0x8a8>
 8007bfa:	ed5f 7a68 	vldr	s15, [pc, #-416]	; 8007a5c <calc_iaq_2nd_gen_ulp_internal+0x458>
 8007bfe:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8007c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c06:	bfcc      	ite	gt
 8007c08:	f06f 0065 	mvngt.w	r0, #101	; 0x65
 8007c0c:	2000      	movle	r0, #0
 8007c0e:	ecbd 8b06 	vpop	{d8-d10}
 8007c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c14:	eec9 6a20 	vdiv.f32	s13, s18, s1
 8007c18:	ed1f 7a6f 	vldr	s14, [pc, #-444]	; 8007a60 <calc_iaq_2nd_gen_ulp_internal+0x45c>
 8007c1c:	ed5f 7a6f 	vldr	s15, [pc, #-444]	; 8007a64 <calc_iaq_2nd_gen_ulp_internal+0x460>
 8007c20:	ed1f 2a6f 	vldr	s4, [pc, #-444]	; 8007a68 <calc_iaq_2nd_gen_ulp_internal+0x464>
 8007c24:	eec6 8a87 	vdiv.f32	s17, s13, s14
 8007c28:	ee78 8ae7 	vsub.f32	s17, s17, s15
 8007c2c:	ee78 8a81 	vadd.f32	s17, s17, s2
 8007c30:	ee78 8ac2 	vsub.f32	s17, s17, s4
 8007c34:	e503      	b.n	800763e <calc_iaq_2nd_gen_ulp_internal+0x3a>
 8007c36:	68e3      	ldr	r3, [r4, #12]
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	eef0 8a67 	vmov.f32	s17, s15
 8007c3e:	f63f ad12 	bhi.w	8007666 <calc_iaq_2nd_gen_ulp_internal+0x62>
 8007c42:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 8007c46:	ed5f 7a77 	vldr	s15, [pc, #-476]	; 8007a6c <calc_iaq_2nd_gen_ulp_internal+0x468>
 8007c4a:	ed1f 8a77 	vldr	s16, [pc, #-476]	; 8007a70 <calc_iaq_2nd_gen_ulp_internal+0x46c>
 8007c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c52:	e6a6      	b.n	80079a2 <calc_iaq_2nd_gen_ulp_internal+0x39e>
 8007c54:	ed5f aa79 	vldr	s21, [pc, #-484]	; 8007a74 <calc_iaq_2nd_gen_ulp_internal+0x470>
 8007c58:	e514      	b.n	8007684 <calc_iaq_2nd_gen_ulp_internal+0x80>
 8007c5a:	ed9f 0b9f 	vldr	d0, [pc, #636]	; 8007ed8 <calc_iaq_2nd_gen_ulp_internal+0x8d4>
 8007c5e:	f017 facf 	bl	801f200 <exp>
 8007c62:	ec51 0b10 	vmov	r0, r1, d0
 8007c66:	f001 f9cf 	bl	8009008 <__aeabi_d2f>
 8007c6a:	ee07 0a10 	vmov	s14, r0
 8007c6e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007c72:	ee37 6a27 	vadd.f32	s12, s14, s15
 8007c76:	ed9f aa9c 	vldr	s20, [pc, #624]	; 8007ee8 <calc_iaq_2nd_gen_ulp_internal+0x8e4>
 8007c7a:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8007eec <calc_iaq_2nd_gen_ulp_internal+0x8e8>
 8007c7e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8007c82:	eea6 aac7 	vfms.f32	s20, s13, s14
 8007c86:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8007c8a:	eeb4 aa67 	vcmp.f32	s20, s15
 8007c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c92:	bfc8      	it	gt
 8007c94:	eeb0 aa67 	vmovgt.f32	s20, s15
 8007c98:	edd4 7a00 	vldr	s15, [r4]
 8007c9c:	eef4 7ae9 	vcmpe.f32	s15, s19
 8007ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ca4:	f67f ad4c 	bls.w	8007740 <calc_iaq_2nd_gen_ulp_internal+0x13c>
 8007ca8:	68e3      	ldr	r3, [r4, #12]
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	f240 80d5 	bls.w	8007e5a <calc_iaq_2nd_gen_ulp_internal+0x856>
 8007cb0:	2b0a      	cmp	r3, #10
 8007cb2:	f240 80d5 	bls.w	8007e60 <calc_iaq_2nd_gen_ulp_internal+0x85c>
 8007cb6:	2b28      	cmp	r3, #40	; 0x28
 8007cb8:	f240 80fb 	bls.w	8007eb2 <calc_iaq_2nd_gen_ulp_internal+0x8ae>
 8007cbc:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8007cc0:	f240 80fc 	bls.w	8007ebc <calc_iaq_2nd_gen_ulp_internal+0x8b8>
 8007cc4:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 8007cc8:	f240 80fe 	bls.w	8007ec8 <calc_iaq_2nd_gen_ulp_internal+0x8c4>
 8007ccc:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8007ef0 <calc_iaq_2nd_gen_ulp_internal+0x8ec>
 8007cd0:	ee79 6ae7 	vsub.f32	s13, s19, s15
 8007cd4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007cd8:	edc4 7a00 	vstr	s15, [r4]
 8007cdc:	e538      	b.n	8007750 <calc_iaq_2nd_gen_ulp_internal+0x14c>
 8007cde:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8007ef4 <calc_iaq_2nd_gen_ulp_internal+0x8f0>
 8007ce2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cea:	d418      	bmi.n	8007d1e <calc_iaq_2nd_gen_ulp_internal+0x71a>
 8007cec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007cf0:	eef0 8a00 	vmov.f32	s17, #0	; 0x40000000  2.0
 8007cf4:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8007ef8 <calc_iaq_2nd_gen_ulp_internal+0x8f4>
 8007cf8:	ed9f aa80 	vldr	s20, [pc, #512]	; 8007efc <calc_iaq_2nd_gen_ulp_internal+0x8f8>
 8007cfc:	e6bc      	b.n	8007a78 <calc_iaq_2nd_gen_ulp_internal+0x474>
 8007cfe:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8007f00 <calc_iaq_2nd_gen_ulp_internal+0x8fc>
 8007d02:	ed84 8a04 	vstr	s16, [r4, #16]
 8007d06:	2300      	movs	r3, #0
 8007d08:	ed84 8a05 	vstr	s16, [r4, #20]
 8007d0c:	ed84 7a08 	vstr	s14, [r4, #32]
 8007d10:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8007d14:	e751      	b.n	8007bba <calc_iaq_2nd_gen_ulp_internal+0x5b6>
 8007d16:	ecbd 8b06 	vpop	{d8-d10}
 8007d1a:	2001      	movs	r0, #1
 8007d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d26:	d515      	bpl.n	8007d54 <calc_iaq_2nd_gen_ulp_internal+0x750>
 8007d28:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007d2c:	e6c2      	b.n	8007ab4 <calc_iaq_2nd_gen_ulp_internal+0x4b0>
 8007d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d32:	dd52      	ble.n	8007dda <calc_iaq_2nd_gen_ulp_internal+0x7d6>
 8007d34:	eeb0 7a46 	vmov.f32	s14, s12
 8007d38:	e736      	b.n	8007ba8 <calc_iaq_2nd_gen_ulp_internal+0x5a4>
 8007d3a:	ee07 7a90 	vmov	s15, r7
 8007d3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007d42:	eddf 7a70 	vldr	s15, [pc, #448]	; 8007f04 <calc_iaq_2nd_gen_ulp_internal+0x900>
 8007d46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d4a:	ee17 0a90 	vmov	r0, s15
 8007d4e:	f000 fe0b 	bl	8008968 <__aeabi_f2d>
 8007d52:	e5f6      	b.n	8007942 <calc_iaq_2nd_gen_ulp_internal+0x33e>
 8007d54:	eddf 8a6c 	vldr	s17, [pc, #432]	; 8007f08 <calc_iaq_2nd_gen_ulp_internal+0x904>
 8007d58:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8007f0c <calc_iaq_2nd_gen_ulp_internal+0x908>
 8007d5c:	ed9f aa6c 	vldr	s20, [pc, #432]	; 8007f10 <calc_iaq_2nd_gen_ulp_internal+0x90c>
 8007d60:	e68a      	b.n	8007a78 <calc_iaq_2nd_gen_ulp_internal+0x474>
 8007d62:	eddf 8a69 	vldr	s17, [pc, #420]	; 8007f08 <calc_iaq_2nd_gen_ulp_internal+0x904>
 8007d66:	e47a      	b.n	800765e <calc_iaq_2nd_gen_ulp_internal+0x5a>
 8007d68:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8007f14 <calc_iaq_2nd_gen_ulp_internal+0x910>
 8007d6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d74:	d465      	bmi.n	8007e42 <calc_iaq_2nd_gen_ulp_internal+0x83e>
 8007d76:	eef1 7a67 	vneg.f32	s15, s15
 8007d7a:	ee17 0a90 	vmov	r0, s15
 8007d7e:	f000 fdf3 	bl	8008968 <__aeabi_f2d>
 8007d82:	ec41 0b10 	vmov	d0, r0, r1
 8007d86:	e51d      	b.n	80077c4 <calc_iaq_2nd_gen_ulp_internal+0x1c0>
 8007d88:	ed9f 0b55 	vldr	d0, [pc, #340]	; 8007ee0 <calc_iaq_2nd_gen_ulp_internal+0x8dc>
 8007d8c:	e767      	b.n	8007c5e <calc_iaq_2nd_gen_ulp_internal+0x65a>
 8007d8e:	eddf 7a62 	vldr	s15, [pc, #392]	; 8007f18 <calc_iaq_2nd_gen_ulp_internal+0x914>
 8007d92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d9a:	dd06      	ble.n	8007daa <calc_iaq_2nd_gen_ulp_internal+0x7a6>
 8007d9c:	eddf 7a5f 	vldr	s15, [pc, #380]	; 8007f1c <calc_iaq_2nd_gen_ulp_internal+0x918>
 8007da0:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8007da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007da8:	dc1a      	bgt.n	8007de0 <calc_iaq_2nd_gen_ulp_internal+0x7dc>
 8007daa:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8007f20 <calc_iaq_2nd_gen_ulp_internal+0x91c>
 8007dae:	eef4 5ae7 	vcmpe.f32	s11, s15
 8007db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007db6:	dd13      	ble.n	8007de0 <calc_iaq_2nd_gen_ulp_internal+0x7dc>
 8007db8:	ee85 7a25 	vdiv.f32	s14, s10, s11
 8007dbc:	eddf 7a50 	vldr	s15, [pc, #320]	; 8007f00 <calc_iaq_2nd_gen_ulp_internal+0x8fc>
 8007dc0:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007f24 <calc_iaq_2nd_gen_ulp_internal+0x920>
 8007dc4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007dc8:	ee74 7ae7 	vsub.f32	s15, s9, s15
 8007dcc:	ee37 7a46 	vsub.f32	s14, s14, s12
 8007dd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007dd4:	ee67 7a26 	vmul.f32	s15, s14, s13
 8007dd8:	e6cb      	b.n	8007b72 <calc_iaq_2nd_gen_ulp_internal+0x56e>
 8007dda:	eeb0 7a66 	vmov.f32	s14, s13
 8007dde:	e6ea      	b.n	8007bb6 <calc_iaq_2nd_gen_ulp_internal+0x5b2>
 8007de0:	eddf 7a51 	vldr	s15, [pc, #324]	; 8007f28 <calc_iaq_2nd_gen_ulp_internal+0x924>
 8007de4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007de8:	e6c3      	b.n	8007b72 <calc_iaq_2nd_gen_ulp_internal+0x56e>
 8007dea:	eddf 7a50 	vldr	s15, [pc, #320]	; 8007f2c <calc_iaq_2nd_gen_ulp_internal+0x928>
 8007dee:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8007df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007df6:	bfd8      	it	le
 8007df8:	eeb0 6a67 	vmovle.f32	s12, s15
 8007dfc:	e6a4      	b.n	8007b48 <calc_iaq_2nd_gen_ulp_internal+0x544>
 8007dfe:	eddf 6a42 	vldr	s13, [pc, #264]	; 8007f08 <calc_iaq_2nd_gen_ulp_internal+0x904>
 8007e02:	e68f      	b.n	8007b24 <calc_iaq_2nd_gen_ulp_internal+0x520>
 8007e04:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8007ed8 <calc_iaq_2nd_gen_ulp_internal+0x8d4>
 8007e08:	e555      	b.n	80078b6 <calc_iaq_2nd_gen_ulp_internal+0x2b2>
 8007e0a:	ed9f 0b33 	vldr	d0, [pc, #204]	; 8007ed8 <calc_iaq_2nd_gen_ulp_internal+0x8d4>
 8007e0e:	e514      	b.n	800783a <calc_iaq_2nd_gen_ulp_internal+0x236>
 8007e10:	eeb0 8a67 	vmov.f32	s16, s15
 8007e14:	e580      	b.n	8007918 <calc_iaq_2nd_gen_ulp_internal+0x314>
 8007e16:	eeb4 aae7 	vcmpe.f32	s20, s15
 8007e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e1e:	bfc8      	it	gt
 8007e20:	ee28 8a0a 	vmulgt.f32	s16, s16, s20
 8007e24:	e567      	b.n	80078f6 <calc_iaq_2nd_gen_ulp_internal+0x2f2>
 8007e26:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8007f30 <calc_iaq_2nd_gen_ulp_internal+0x92c>
 8007e2a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8007e2e:	eef0 7a69 	vmov.f32	s15, s19
 8007e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e36:	eeea 7a87 	vfma.f32	s15, s21, s14
 8007e3a:	dd0b      	ble.n	8007e54 <calc_iaq_2nd_gen_ulp_internal+0x850>
 8007e3c:	ee28 7a87 	vmul.f32	s14, s17, s14
 8007e40:	e4a2      	b.n	8007788 <calc_iaq_2nd_gen_ulp_internal+0x184>
 8007e42:	ed9f 0b27 	vldr	d0, [pc, #156]	; 8007ee0 <calc_iaq_2nd_gen_ulp_internal+0x8dc>
 8007e46:	e4bd      	b.n	80077c4 <calc_iaq_2nd_gen_ulp_internal+0x1c0>
 8007e48:	ed9f 0b25 	vldr	d0, [pc, #148]	; 8007ee0 <calc_iaq_2nd_gen_ulp_internal+0x8dc>
 8007e4c:	e533      	b.n	80078b6 <calc_iaq_2nd_gen_ulp_internal+0x2b2>
 8007e4e:	ed9f 0b24 	vldr	d0, [pc, #144]	; 8007ee0 <calc_iaq_2nd_gen_ulp_internal+0x8dc>
 8007e52:	e4f2      	b.n	800783a <calc_iaq_2nd_gen_ulp_internal+0x236>
 8007e54:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8007f08 <calc_iaq_2nd_gen_ulp_internal+0x904>
 8007e58:	e496      	b.n	8007788 <calc_iaq_2nd_gen_ulp_internal+0x184>
 8007e5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e5e:	e737      	b.n	8007cd0 <calc_iaq_2nd_gen_ulp_internal+0x6cc>
 8007e60:	2201      	movs	r2, #1
 8007e62:	f04f 0c04 	mov.w	ip, #4
 8007e66:	210a      	movs	r1, #10
 8007e68:	4832      	ldr	r0, [pc, #200]	; (8007f34 <calc_iaq_2nd_gen_ulp_internal+0x930>)
 8007e6a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8007e6e:	3a01      	subs	r2, #1
 8007e70:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007e74:	4460      	add	r0, ip
 8007e76:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8007e7a:	edd2 6a00 	vldr	s13, [r2]
 8007e7e:	ed90 6a00 	vldr	s12, [r0]
 8007e82:	eba1 020c 	sub.w	r2, r1, ip
 8007e86:	ee07 2a10 	vmov	s14, r2
 8007e8a:	ee36 6a66 	vsub.f32	s12, s12, s13
 8007e8e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007e92:	eba3 030c 	sub.w	r3, r3, ip
 8007e96:	eec6 5a07 	vdiv.f32	s11, s12, s14
 8007e9a:	ee07 3a10 	vmov	s14, r3
 8007e9e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007ea2:	eee5 6a87 	vfma.f32	s13, s11, s14
 8007ea6:	eeb0 7a66 	vmov.f32	s14, s13
 8007eaa:	e711      	b.n	8007cd0 <calc_iaq_2nd_gen_ulp_internal+0x6cc>
 8007eac:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8007eb0:	e6ad      	b.n	8007c0e <calc_iaq_2nd_gen_ulp_internal+0x60a>
 8007eb2:	2128      	movs	r1, #40	; 0x28
 8007eb4:	f04f 0c08 	mov.w	ip, #8
 8007eb8:	2202      	movs	r2, #2
 8007eba:	e7d5      	b.n	8007e68 <calc_iaq_2nd_gen_ulp_internal+0x864>
 8007ebc:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8007ec0:	f04f 0c0c 	mov.w	ip, #12
 8007ec4:	2203      	movs	r2, #3
 8007ec6:	e7cf      	b.n	8007e68 <calc_iaq_2nd_gen_ulp_internal+0x864>
 8007ec8:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 8007ecc:	f04f 0c10 	mov.w	ip, #16
 8007ed0:	2204      	movs	r2, #4
 8007ed2:	e7c9      	b.n	8007e68 <calc_iaq_2nd_gen_ulp_internal+0x864>
 8007ed4:	f3af 8000 	nop.w
 8007ed8:	00000000 	.word	0x00000000
 8007edc:	c0548000 	.word	0xc0548000
 8007ee0:	00000000 	.word	0x00000000
 8007ee4:	40548000 	.word	0x40548000
 8007ee8:	41810aec 	.word	0x41810aec
 8007eec:	416e8236 	.word	0x416e8236
 8007ef0:	3a887631 	.word	0x3a887631
 8007ef4:	3e99999a 	.word	0x3e99999a
 8007ef8:	4029cbc1 	.word	0x4029cbc1
 8007efc:	400c5f30 	.word	0x400c5f30
 8007f00:	43c80000 	.word	0x43c80000
 8007f04:	43800000 	.word	0x43800000
 8007f08:	00000000 	.word	0x00000000
 8007f0c:	41e3bebe 	.word	0x41e3bebe
 8007f10:	4002ab77 	.word	0x4002ab77
 8007f14:	c2a40000 	.word	0xc2a40000
 8007f18:	bab7f56b 	.word	0xbab7f56b
 8007f1c:	b89a77b2 	.word	0xb89a77b2
 8007f20:	3a83126f 	.word	0x3a83126f
 8007f24:	3cf87865 	.word	0x3cf87865
 8007f28:	427c8e74 	.word	0x427c8e74
 8007f2c:	bc69a9e2 	.word	0xbc69a9e2
 8007f30:	3c23d70a 	.word	0x3c23d70a
 8007f34:	080212a8 	.word	0x080212a8

08007f38 <calc_iaq_2nd_gen_ulp>:
 8007f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f3c:	ed2d 8b02 	vpush	{d8}
 8007f40:	460c      	mov	r4, r1
 8007f42:	6811      	ldr	r1, [r2, #0]
 8007f44:	8926      	ldrh	r6, [r4, #8]
 8007f46:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 8007f4a:	f894 e001 	ldrb.w	lr, [r4, #1]
 8007f4e:	4690      	mov	r8, r2
 8007f50:	fa9c fc9c 	rev16.w	ip, ip
 8007f54:	8962      	ldrh	r2, [r4, #10]
 8007f56:	fa1f fc8c 	uxth.w	ip, ip
 8007f5a:	4562      	cmp	r2, ip
 8007f5c:	b082      	sub	sp, #8
 8007f5e:	4607      	mov	r7, r0
 8007f60:	461d      	mov	r5, r3
 8007f62:	d205      	bcs.n	8007f70 <calc_iaq_2nd_gen_ulp+0x38>
 8007f64:	4566      	cmp	r6, ip
 8007f66:	f200 8299 	bhi.w	800849c <calc_iaq_2nd_gen_ulp+0x564>
 8007f6a:	eddf 6ad8 	vldr	s13, [pc, #864]	; 80082cc <calc_iaq_2nd_gen_ulp+0x394>
 8007f6e:	e001      	b.n	8007f74 <calc_iaq_2nd_gen_ulp+0x3c>
 8007f70:	eddf 6ad7 	vldr	s13, [pc, #860]	; 80082d0 <calc_iaq_2nd_gen_ulp+0x398>
 8007f74:	edc5 6a00 	vstr	s13, [r5]
 8007f78:	888b      	ldrh	r3, [r1, #4]
 8007f7a:	7860      	ldrb	r0, [r4, #1]
 8007f7c:	ba5b      	rev16	r3, r3
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d205      	bcs.n	8007f90 <calc_iaq_2nd_gen_ulp+0x58>
 8007f84:	429e      	cmp	r6, r3
 8007f86:	f200 8269 	bhi.w	800845c <calc_iaq_2nd_gen_ulp+0x524>
 8007f8a:	eddf 6ad0 	vldr	s13, [pc, #832]	; 80082cc <calc_iaq_2nd_gen_ulp+0x394>
 8007f8e:	e001      	b.n	8007f94 <calc_iaq_2nd_gen_ulp+0x5c>
 8007f90:	eddf 6acf 	vldr	s13, [pc, #828]	; 80082d0 <calc_iaq_2nd_gen_ulp+0x398>
 8007f94:	edc5 6a01 	vstr	s13, [r5, #4]
 8007f98:	88cb      	ldrh	r3, [r1, #6]
 8007f9a:	7860      	ldrb	r0, [r4, #1]
 8007f9c:	ba5b      	rev16	r3, r3
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d205      	bcs.n	8007fb0 <calc_iaq_2nd_gen_ulp+0x78>
 8007fa4:	429e      	cmp	r6, r3
 8007fa6:	f200 8239 	bhi.w	800841c <calc_iaq_2nd_gen_ulp+0x4e4>
 8007faa:	eddf 6ac8 	vldr	s13, [pc, #800]	; 80082cc <calc_iaq_2nd_gen_ulp+0x394>
 8007fae:	e001      	b.n	8007fb4 <calc_iaq_2nd_gen_ulp+0x7c>
 8007fb0:	eddf 6ac7 	vldr	s13, [pc, #796]	; 80082d0 <calc_iaq_2nd_gen_ulp+0x398>
 8007fb4:	edc5 6a02 	vstr	s13, [r5, #8]
 8007fb8:	890b      	ldrh	r3, [r1, #8]
 8007fba:	7860      	ldrb	r0, [r4, #1]
 8007fbc:	ba5b      	rev16	r3, r3
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d205      	bcs.n	8007fd0 <calc_iaq_2nd_gen_ulp+0x98>
 8007fc4:	429e      	cmp	r6, r3
 8007fc6:	f200 8209 	bhi.w	80083dc <calc_iaq_2nd_gen_ulp+0x4a4>
 8007fca:	eddf 6ac0 	vldr	s13, [pc, #768]	; 80082cc <calc_iaq_2nd_gen_ulp+0x394>
 8007fce:	e001      	b.n	8007fd4 <calc_iaq_2nd_gen_ulp+0x9c>
 8007fd0:	eddf 6abf 	vldr	s13, [pc, #764]	; 80082d0 <calc_iaq_2nd_gen_ulp+0x398>
 8007fd4:	edc5 6a03 	vstr	s13, [r5, #12]
 8007fd8:	894b      	ldrh	r3, [r1, #10]
 8007fda:	7860      	ldrb	r0, [r4, #1]
 8007fdc:	ba5b      	rev16	r3, r3
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d205      	bcs.n	8007ff0 <calc_iaq_2nd_gen_ulp+0xb8>
 8007fe4:	429e      	cmp	r6, r3
 8007fe6:	f200 81d8 	bhi.w	800839a <calc_iaq_2nd_gen_ulp+0x462>
 8007fea:	eddf 6ab8 	vldr	s13, [pc, #736]	; 80082cc <calc_iaq_2nd_gen_ulp+0x394>
 8007fee:	e001      	b.n	8007ff4 <calc_iaq_2nd_gen_ulp+0xbc>
 8007ff0:	eddf 6ab7 	vldr	s13, [pc, #732]	; 80082d0 <calc_iaq_2nd_gen_ulp+0x398>
 8007ff4:	edc5 6a04 	vstr	s13, [r5, #16]
 8007ff8:	898b      	ldrh	r3, [r1, #12]
 8007ffa:	7860      	ldrb	r0, [r4, #1]
 8007ffc:	ba5b      	rev16	r3, r3
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	429a      	cmp	r2, r3
 8008002:	d205      	bcs.n	8008010 <calc_iaq_2nd_gen_ulp+0xd8>
 8008004:	429e      	cmp	r6, r3
 8008006:	f200 81a7 	bhi.w	8008358 <calc_iaq_2nd_gen_ulp+0x420>
 800800a:	eddf 6ab0 	vldr	s13, [pc, #704]	; 80082cc <calc_iaq_2nd_gen_ulp+0x394>
 800800e:	e001      	b.n	8008014 <calc_iaq_2nd_gen_ulp+0xdc>
 8008010:	eddf 6aaf 	vldr	s13, [pc, #700]	; 80082d0 <calc_iaq_2nd_gen_ulp+0x398>
 8008014:	edc5 6a05 	vstr	s13, [r5, #20]
 8008018:	8a4b      	ldrh	r3, [r1, #18]
 800801a:	7860      	ldrb	r0, [r4, #1]
 800801c:	ba5b      	rev16	r3, r3
 800801e:	b29b      	uxth	r3, r3
 8008020:	4293      	cmp	r3, r2
 8008022:	d905      	bls.n	8008030 <calc_iaq_2nd_gen_ulp+0xf8>
 8008024:	42b3      	cmp	r3, r6
 8008026:	f0c0 8176 	bcc.w	8008316 <calc_iaq_2nd_gen_ulp+0x3de>
 800802a:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 80082cc <calc_iaq_2nd_gen_ulp+0x394>
 800802e:	e001      	b.n	8008034 <calc_iaq_2nd_gen_ulp+0xfc>
 8008030:	ed9f 0aa7 	vldr	s0, [pc, #668]	; 80082d0 <calc_iaq_2nd_gen_ulp+0x398>
 8008034:	ed85 0a06 	vstr	s0, [r5, #24]
 8008038:	8a8b      	ldrh	r3, [r1, #20]
 800803a:	7860      	ldrb	r0, [r4, #1]
 800803c:	ba5b      	rev16	r3, r3
 800803e:	b29b      	uxth	r3, r3
 8008040:	429a      	cmp	r2, r3
 8008042:	d205      	bcs.n	8008050 <calc_iaq_2nd_gen_ulp+0x118>
 8008044:	429e      	cmp	r6, r3
 8008046:	f200 8145 	bhi.w	80082d4 <calc_iaq_2nd_gen_ulp+0x39c>
 800804a:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 80082cc <calc_iaq_2nd_gen_ulp+0x394>
 800804e:	e001      	b.n	8008054 <calc_iaq_2nd_gen_ulp+0x11c>
 8008050:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 80082d0 <calc_iaq_2nd_gen_ulp+0x398>
 8008054:	ed85 7a07 	vstr	s14, [r5, #28]
 8008058:	8acb      	ldrh	r3, [r1, #22]
 800805a:	7860      	ldrb	r0, [r4, #1]
 800805c:	ba5b      	rev16	r3, r3
 800805e:	b29b      	uxth	r3, r3
 8008060:	429a      	cmp	r2, r3
 8008062:	d205      	bcs.n	8008070 <calc_iaq_2nd_gen_ulp+0x138>
 8008064:	429e      	cmp	r6, r3
 8008066:	f200 8108 	bhi.w	800827a <calc_iaq_2nd_gen_ulp+0x342>
 800806a:	eddf 6a98 	vldr	s13, [pc, #608]	; 80082cc <calc_iaq_2nd_gen_ulp+0x394>
 800806e:	e001      	b.n	8008074 <calc_iaq_2nd_gen_ulp+0x13c>
 8008070:	eddf 6a97 	vldr	s13, [pc, #604]	; 80082d0 <calc_iaq_2nd_gen_ulp+0x398>
 8008074:	edc5 6a08 	vstr	s13, [r5, #32]
 8008078:	8b0b      	ldrh	r3, [r1, #24]
 800807a:	7860      	ldrb	r0, [r4, #1]
 800807c:	ba5b      	rev16	r3, r3
 800807e:	b29b      	uxth	r3, r3
 8008080:	429a      	cmp	r2, r3
 8008082:	d205      	bcs.n	8008090 <calc_iaq_2nd_gen_ulp+0x158>
 8008084:	429e      	cmp	r6, r3
 8008086:	f200 80d7 	bhi.w	8008238 <calc_iaq_2nd_gen_ulp+0x300>
 800808a:	eddf 6a90 	vldr	s13, [pc, #576]	; 80082cc <calc_iaq_2nd_gen_ulp+0x394>
 800808e:	e001      	b.n	8008094 <calc_iaq_2nd_gen_ulp+0x15c>
 8008090:	eddf 6a8f 	vldr	s13, [pc, #572]	; 80082d0 <calc_iaq_2nd_gen_ulp+0x398>
 8008094:	edc5 6a09 	vstr	s13, [r5, #36]	; 0x24
 8008098:	8b4b      	ldrh	r3, [r1, #26]
 800809a:	7860      	ldrb	r0, [r4, #1]
 800809c:	ba5b      	rev16	r3, r3
 800809e:	b29b      	uxth	r3, r3
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d205      	bcs.n	80080b0 <calc_iaq_2nd_gen_ulp+0x178>
 80080a4:	429e      	cmp	r6, r3
 80080a6:	f200 80a6 	bhi.w	80081f6 <calc_iaq_2nd_gen_ulp+0x2be>
 80080aa:	eddf 6a88 	vldr	s13, [pc, #544]	; 80082cc <calc_iaq_2nd_gen_ulp+0x394>
 80080ae:	e001      	b.n	80080b4 <calc_iaq_2nd_gen_ulp+0x17c>
 80080b0:	eddf 6a87 	vldr	s13, [pc, #540]	; 80082d0 <calc_iaq_2nd_gen_ulp+0x398>
 80080b4:	edc5 6a0a 	vstr	s13, [r5, #40]	; 0x28
 80080b8:	8b8b      	ldrh	r3, [r1, #28]
 80080ba:	7860      	ldrb	r0, [r4, #1]
 80080bc:	ba5b      	rev16	r3, r3
 80080be:	b29b      	uxth	r3, r3
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d204      	bcs.n	80080ce <calc_iaq_2nd_gen_ulp+0x196>
 80080c4:	429e      	cmp	r6, r3
 80080c6:	d875      	bhi.n	80081b4 <calc_iaq_2nd_gen_ulp+0x27c>
 80080c8:	ed9f 6a80 	vldr	s12, [pc, #512]	; 80082cc <calc_iaq_2nd_gen_ulp+0x394>
 80080cc:	e001      	b.n	80080d2 <calc_iaq_2nd_gen_ulp+0x19a>
 80080ce:	ed9f 6a80 	vldr	s12, [pc, #512]	; 80082d0 <calc_iaq_2nd_gen_ulp+0x398>
 80080d2:	ed85 6a0b 	vstr	s12, [r5, #44]	; 0x2c
 80080d6:	8bcb      	ldrh	r3, [r1, #30]
 80080d8:	7860      	ldrb	r0, [r4, #1]
 80080da:	ba5b      	rev16	r3, r3
 80080dc:	b29b      	uxth	r3, r3
 80080de:	429a      	cmp	r2, r3
 80080e0:	d204      	bcs.n	80080ec <calc_iaq_2nd_gen_ulp+0x1b4>
 80080e2:	429e      	cmp	r6, r3
 80080e4:	d845      	bhi.n	8008172 <calc_iaq_2nd_gen_ulp+0x23a>
 80080e6:	ed9f 6a79 	vldr	s12, [pc, #484]	; 80082cc <calc_iaq_2nd_gen_ulp+0x394>
 80080ea:	e001      	b.n	80080f0 <calc_iaq_2nd_gen_ulp+0x1b8>
 80080ec:	ed9f 6a78 	vldr	s12, [pc, #480]	; 80082d0 <calc_iaq_2nd_gen_ulp+0x398>
 80080f0:	ed85 6a0c 	vstr	s12, [r5, #48]	; 0x30
 80080f4:	ed8d 0a00 	vstr	s0, [sp]
 80080f8:	edcd 6a01 	vstr	s13, [sp, #4]
 80080fc:	880b      	ldrh	r3, [r1, #0]
 80080fe:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80082bc <calc_iaq_2nd_gen_ulp+0x384>
 8008102:	ed9f 8a6f 	vldr	s16, [pc, #444]	; 80082c0 <calc_iaq_2nd_gen_ulp+0x388>
 8008106:	68fa      	ldr	r2, [r7, #12]
 8008108:	ba5b      	rev16	r3, r3
 800810a:	b29b      	uxth	r3, r3
 800810c:	ee07 3a90 	vmov	s15, r3
 8008110:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008114:	1c53      	adds	r3, r2, #1
 8008116:	eea7 8a87 	vfma.f32	s16, s15, s14
 800811a:	bf1c      	itt	ne
 800811c:	3201      	addne	r2, #1
 800811e:	60fa      	strne	r2, [r7, #12]
 8008120:	4629      	mov	r1, r5
 8008122:	eef0 0a48 	vmov.f32	s1, s16
 8008126:	4638      	mov	r0, r7
 8008128:	f7ff f87e 	bl	8007228 <calc_rel_iaq_ulp_internal>
 800812c:	f8b4 3003 	ldrh.w	r3, [r4, #3]
 8008130:	eddf 0a64 	vldr	s1, [pc, #400]	; 80082c4 <calc_iaq_2nd_gen_ulp+0x38c>
 8008134:	79a1      	ldrb	r1, [r4, #6]
 8008136:	6922      	ldr	r2, [r4, #16]
 8008138:	ed98 2a02 	vldr	s4, [r8, #8]
 800813c:	7992      	ldrb	r2, [r2, #6]
 800813e:	edd8 1a01 	vldr	s3, [r8, #4]
 8008142:	ba5b      	rev16	r3, r3
 8008144:	b29b      	uxth	r3, r3
 8008146:	ee07 3a90 	vmov	s15, r3
 800814a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800814e:	ee01 1a10 	vmov	s2, r1
 8008152:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 8008156:	462b      	mov	r3, r5
 8008158:	4638      	mov	r0, r7
 800815a:	4669      	mov	r1, sp
 800815c:	eeb0 0a48 	vmov.f32	s0, s16
 8008160:	eebb 1aef 	vcvt.f32.u32	s2, s2, #1
 8008164:	f7ff fa4e 	bl	8007604 <calc_iaq_2nd_gen_ulp_internal>
 8008168:	b002      	add	sp, #8
 800816a:	ecbd 8b02 	vpop	{d8}
 800816e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008172:	ee07 0a90 	vmov	s15, r0
 8008176:	1a9a      	subs	r2, r3, r2
 8008178:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800817c:	ed9f 6a52 	vldr	s12, [pc, #328]	; 80082c8 <calc_iaq_2nd_gen_ulp+0x390>
 8008180:	eddf 5a52 	vldr	s11, [pc, #328]	; 80082cc <calc_iaq_2nd_gen_ulp+0x394>
 8008184:	ee07 2a90 	vmov	s15, r2
 8008188:	ee27 7a06 	vmul.f32	s14, s14, s12
 800818c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008190:	1af6      	subs	r6, r6, r3
 8008192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008196:	ee07 6a10 	vmov	s14, r6
 800819a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800819e:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80081a2:	eeb4 6ae5 	vcmpe.f32	s12, s11
 80081a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081aa:	f340 81f3 	ble.w	8008594 <calc_iaq_2nd_gen_ulp+0x65c>
 80081ae:	eeb0 6a65 	vmov.f32	s12, s11
 80081b2:	e79d      	b.n	80080f0 <calc_iaq_2nd_gen_ulp+0x1b8>
 80081b4:	ee07 0a90 	vmov	s15, r0
 80081b8:	1a98      	subs	r0, r3, r2
 80081ba:	ed9f 6a43 	vldr	s12, [pc, #268]	; 80082c8 <calc_iaq_2nd_gen_ulp+0x390>
 80081be:	eddf 5a43 	vldr	s11, [pc, #268]	; 80082cc <calc_iaq_2nd_gen_ulp+0x394>
 80081c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80081c6:	ee07 0a10 	vmov	s14, r0
 80081ca:	ee67 7a86 	vmul.f32	s15, s15, s12
 80081ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80081d2:	1af3      	subs	r3, r6, r3
 80081d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80081d8:	ee07 3a90 	vmov	s15, r3
 80081dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80081e0:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80081e4:	eeb4 6ae5 	vcmpe.f32	s12, s11
 80081e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081ec:	f340 81dc 	ble.w	80085a8 <calc_iaq_2nd_gen_ulp+0x670>
 80081f0:	eeb0 6a65 	vmov.f32	s12, s11
 80081f4:	e76d      	b.n	80080d2 <calc_iaq_2nd_gen_ulp+0x19a>
 80081f6:	ee07 0a90 	vmov	s15, r0
 80081fa:	1a98      	subs	r0, r3, r2
 80081fc:	eddf 6a32 	vldr	s13, [pc, #200]	; 80082c8 <calc_iaq_2nd_gen_ulp+0x390>
 8008200:	ed9f 6a32 	vldr	s12, [pc, #200]	; 80082cc <calc_iaq_2nd_gen_ulp+0x394>
 8008204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008208:	ee07 0a10 	vmov	s14, r0
 800820c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008210:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008214:	1af3      	subs	r3, r6, r3
 8008216:	ee27 7a87 	vmul.f32	s14, s15, s14
 800821a:	ee07 3a90 	vmov	s15, r3
 800821e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008222:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008226:	eef4 6ac6 	vcmpe.f32	s13, s12
 800822a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800822e:	f340 81c5 	ble.w	80085bc <calc_iaq_2nd_gen_ulp+0x684>
 8008232:	eef0 6a46 	vmov.f32	s13, s12
 8008236:	e73d      	b.n	80080b4 <calc_iaq_2nd_gen_ulp+0x17c>
 8008238:	ee07 0a90 	vmov	s15, r0
 800823c:	1a98      	subs	r0, r3, r2
 800823e:	eddf 6a22 	vldr	s13, [pc, #136]	; 80082c8 <calc_iaq_2nd_gen_ulp+0x390>
 8008242:	ed9f 6a22 	vldr	s12, [pc, #136]	; 80082cc <calc_iaq_2nd_gen_ulp+0x394>
 8008246:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800824a:	ee07 0a10 	vmov	s14, r0
 800824e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008252:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008256:	1af3      	subs	r3, r6, r3
 8008258:	ee27 7a87 	vmul.f32	s14, s15, s14
 800825c:	ee07 3a90 	vmov	s15, r3
 8008260:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008264:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008268:	eef4 6ac6 	vcmpe.f32	s13, s12
 800826c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008270:	f340 81ae 	ble.w	80085d0 <calc_iaq_2nd_gen_ulp+0x698>
 8008274:	eef0 6a46 	vmov.f32	s13, s12
 8008278:	e70c      	b.n	8008094 <calc_iaq_2nd_gen_ulp+0x15c>
 800827a:	ee07 0a90 	vmov	s15, r0
 800827e:	1a98      	subs	r0, r3, r2
 8008280:	eddf 6a11 	vldr	s13, [pc, #68]	; 80082c8 <calc_iaq_2nd_gen_ulp+0x390>
 8008284:	ed9f 6a11 	vldr	s12, [pc, #68]	; 80082cc <calc_iaq_2nd_gen_ulp+0x394>
 8008288:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800828c:	ee07 0a10 	vmov	s14, r0
 8008290:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008294:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008298:	1af3      	subs	r3, r6, r3
 800829a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800829e:	ee07 3a90 	vmov	s15, r3
 80082a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80082aa:	eef4 6ac6 	vcmpe.f32	s13, s12
 80082ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082b2:	f340 8147 	ble.w	8008544 <calc_iaq_2nd_gen_ulp+0x60c>
 80082b6:	eef0 6a46 	vmov.f32	s13, s12
 80082ba:	e6db      	b.n	8008074 <calc_iaq_2nd_gen_ulp+0x13c>
 80082bc:	3abf1746 	.word	0x3abf1746
 80082c0:	417e8ba3 	.word	0x417e8ba3
 80082c4:	4423d70a 	.word	0x4423d70a
 80082c8:	447a0000 	.word	0x447a0000
 80082cc:	5368d4a5 	.word	0x5368d4a5
 80082d0:	42c80000 	.word	0x42c80000
 80082d4:	ee07 0a90 	vmov	s15, r0
 80082d8:	1a98      	subs	r0, r3, r2
 80082da:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 80082c8 <calc_iaq_2nd_gen_ulp+0x390>
 80082de:	ed1f 6a05 	vldr	s12, [pc, #-20]	; 80082cc <calc_iaq_2nd_gen_ulp+0x394>
 80082e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082e6:	ee06 0a90 	vmov	s13, r0
 80082ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80082ee:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80082f2:	1af3      	subs	r3, r6, r3
 80082f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80082f8:	ee07 3a90 	vmov	s15, r3
 80082fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008300:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008304:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8008308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800830c:	f340 8124 	ble.w	8008558 <calc_iaq_2nd_gen_ulp+0x620>
 8008310:	eeb0 7a46 	vmov.f32	s14, s12
 8008314:	e69e      	b.n	8008054 <calc_iaq_2nd_gen_ulp+0x11c>
 8008316:	ee07 0a90 	vmov	s15, r0
 800831a:	1a98      	subs	r0, r3, r2
 800831c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008320:	ed1f 6a17 	vldr	s12, [pc, #-92]	; 80082c8 <calc_iaq_2nd_gen_ulp+0x390>
 8008324:	ed5f 6a17 	vldr	s13, [pc, #-92]	; 80082cc <calc_iaq_2nd_gen_ulp+0x394>
 8008328:	ee07 0a10 	vmov	s14, r0
 800832c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008330:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008334:	1af3      	subs	r3, r6, r3
 8008336:	ee27 7a87 	vmul.f32	s14, s15, s14
 800833a:	ee07 3a90 	vmov	s15, r3
 800833e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008342:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8008346:	eeb4 0ae6 	vcmpe.f32	s0, s13
 800834a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800834e:	f340 810d 	ble.w	800856c <calc_iaq_2nd_gen_ulp+0x634>
 8008352:	eeb0 0a66 	vmov.f32	s0, s13
 8008356:	e66d      	b.n	8008034 <calc_iaq_2nd_gen_ulp+0xfc>
 8008358:	ee07 0a90 	vmov	s15, r0
 800835c:	1a98      	subs	r0, r3, r2
 800835e:	ed5f 6a26 	vldr	s13, [pc, #-152]	; 80082c8 <calc_iaq_2nd_gen_ulp+0x390>
 8008362:	ed1f 6a26 	vldr	s12, [pc, #-152]	; 80082cc <calc_iaq_2nd_gen_ulp+0x394>
 8008366:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800836a:	ee07 0a10 	vmov	s14, r0
 800836e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008372:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008376:	1af3      	subs	r3, r6, r3
 8008378:	ee27 7a87 	vmul.f32	s14, s15, s14
 800837c:	ee07 3a90 	vmov	s15, r3
 8008380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008384:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008388:	eef4 6ac6 	vcmpe.f32	s13, s12
 800838c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008390:	f340 80f6 	ble.w	8008580 <calc_iaq_2nd_gen_ulp+0x648>
 8008394:	eef0 6a46 	vmov.f32	s13, s12
 8008398:	e63c      	b.n	8008014 <calc_iaq_2nd_gen_ulp+0xdc>
 800839a:	ee07 0a90 	vmov	s15, r0
 800839e:	1a98      	subs	r0, r3, r2
 80083a0:	ed5f 6a37 	vldr	s13, [pc, #-220]	; 80082c8 <calc_iaq_2nd_gen_ulp+0x390>
 80083a4:	ed1f 6a37 	vldr	s12, [pc, #-220]	; 80082cc <calc_iaq_2nd_gen_ulp+0x394>
 80083a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083ac:	ee07 0a10 	vmov	s14, r0
 80083b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80083b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80083b8:	1af3      	subs	r3, r6, r3
 80083ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80083be:	ee07 3a90 	vmov	s15, r3
 80083c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083c6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80083ca:	eef4 6ac6 	vcmpe.f32	s13, s12
 80083ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083d2:	f340 808f 	ble.w	80084f4 <calc_iaq_2nd_gen_ulp+0x5bc>
 80083d6:	eef0 6a46 	vmov.f32	s13, s12
 80083da:	e60b      	b.n	8007ff4 <calc_iaq_2nd_gen_ulp+0xbc>
 80083dc:	ee07 0a90 	vmov	s15, r0
 80083e0:	1a98      	subs	r0, r3, r2
 80083e2:	ed5f 6a47 	vldr	s13, [pc, #-284]	; 80082c8 <calc_iaq_2nd_gen_ulp+0x390>
 80083e6:	ed1f 6a47 	vldr	s12, [pc, #-284]	; 80082cc <calc_iaq_2nd_gen_ulp+0x394>
 80083ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083ee:	ee07 0a10 	vmov	s14, r0
 80083f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80083f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80083fa:	1af3      	subs	r3, r6, r3
 80083fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008400:	ee07 3a90 	vmov	s15, r3
 8008404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008408:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800840c:	eef4 6ac6 	vcmpe.f32	s13, s12
 8008410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008414:	dd78      	ble.n	8008508 <calc_iaq_2nd_gen_ulp+0x5d0>
 8008416:	eef0 6a46 	vmov.f32	s13, s12
 800841a:	e5db      	b.n	8007fd4 <calc_iaq_2nd_gen_ulp+0x9c>
 800841c:	ee07 0a90 	vmov	s15, r0
 8008420:	1a98      	subs	r0, r3, r2
 8008422:	ed5f 6a57 	vldr	s13, [pc, #-348]	; 80082c8 <calc_iaq_2nd_gen_ulp+0x390>
 8008426:	ed1f 6a57 	vldr	s12, [pc, #-348]	; 80082cc <calc_iaq_2nd_gen_ulp+0x394>
 800842a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800842e:	ee07 0a10 	vmov	s14, r0
 8008432:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008436:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800843a:	1af3      	subs	r3, r6, r3
 800843c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008440:	ee07 3a90 	vmov	s15, r3
 8008444:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008448:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800844c:	eef4 6ac6 	vcmpe.f32	s13, s12
 8008450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008454:	dd62      	ble.n	800851c <calc_iaq_2nd_gen_ulp+0x5e4>
 8008456:	eef0 6a46 	vmov.f32	s13, s12
 800845a:	e5ab      	b.n	8007fb4 <calc_iaq_2nd_gen_ulp+0x7c>
 800845c:	ee07 0a90 	vmov	s15, r0
 8008460:	1a98      	subs	r0, r3, r2
 8008462:	ed5f 6a67 	vldr	s13, [pc, #-412]	; 80082c8 <calc_iaq_2nd_gen_ulp+0x390>
 8008466:	ed1f 6a67 	vldr	s12, [pc, #-412]	; 80082cc <calc_iaq_2nd_gen_ulp+0x394>
 800846a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800846e:	ee07 0a10 	vmov	s14, r0
 8008472:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008476:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800847a:	1af3      	subs	r3, r6, r3
 800847c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008480:	ee07 3a90 	vmov	s15, r3
 8008484:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008488:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800848c:	eef4 6ac6 	vcmpe.f32	s13, s12
 8008490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008494:	dd4c      	ble.n	8008530 <calc_iaq_2nd_gen_ulp+0x5f8>
 8008496:	eef0 6a46 	vmov.f32	s13, s12
 800849a:	e57b      	b.n	8007f94 <calc_iaq_2nd_gen_ulp+0x5c>
 800849c:	ee07 ea90 	vmov	s15, lr
 80084a0:	ebac 0302 	sub.w	r3, ip, r2
 80084a4:	ed5f 6a78 	vldr	s13, [pc, #-480]	; 80082c8 <calc_iaq_2nd_gen_ulp+0x390>
 80084a8:	ed1f 6a78 	vldr	s12, [pc, #-480]	; 80082cc <calc_iaq_2nd_gen_ulp+0x394>
 80084ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80084b0:	ee07 3a10 	vmov	s14, r3
 80084b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80084b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80084bc:	eba6 0c0c 	sub.w	ip, r6, ip
 80084c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80084c4:	ee07 ca90 	vmov	s15, ip
 80084c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80084cc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80084d0:	eef4 6ac6 	vcmpe.f32	s13, s12
 80084d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084d8:	dd02      	ble.n	80084e0 <calc_iaq_2nd_gen_ulp+0x5a8>
 80084da:	eef0 6a46 	vmov.f32	s13, s12
 80084de:	e549      	b.n	8007f74 <calc_iaq_2nd_gen_ulp+0x3c>
 80084e0:	ed5f 7a85 	vldr	s15, [pc, #-532]	; 80082d0 <calc_iaq_2nd_gen_ulp+0x398>
 80084e4:	eef4 6a67 	vcmp.f32	s13, s15
 80084e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084ec:	bf48      	it	mi
 80084ee:	eef0 6a67 	vmovmi.f32	s13, s15
 80084f2:	e53f      	b.n	8007f74 <calc_iaq_2nd_gen_ulp+0x3c>
 80084f4:	ed5f 7a8a 	vldr	s15, [pc, #-552]	; 80082d0 <calc_iaq_2nd_gen_ulp+0x398>
 80084f8:	eef4 6a67 	vcmp.f32	s13, s15
 80084fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008500:	bf48      	it	mi
 8008502:	eef0 6a67 	vmovmi.f32	s13, s15
 8008506:	e575      	b.n	8007ff4 <calc_iaq_2nd_gen_ulp+0xbc>
 8008508:	ed5f 7a8f 	vldr	s15, [pc, #-572]	; 80082d0 <calc_iaq_2nd_gen_ulp+0x398>
 800850c:	eef4 6a67 	vcmp.f32	s13, s15
 8008510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008514:	bf48      	it	mi
 8008516:	eef0 6a67 	vmovmi.f32	s13, s15
 800851a:	e55b      	b.n	8007fd4 <calc_iaq_2nd_gen_ulp+0x9c>
 800851c:	ed5f 7a94 	vldr	s15, [pc, #-592]	; 80082d0 <calc_iaq_2nd_gen_ulp+0x398>
 8008520:	eef4 6a67 	vcmp.f32	s13, s15
 8008524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008528:	bf48      	it	mi
 800852a:	eef0 6a67 	vmovmi.f32	s13, s15
 800852e:	e541      	b.n	8007fb4 <calc_iaq_2nd_gen_ulp+0x7c>
 8008530:	ed5f 7a99 	vldr	s15, [pc, #-612]	; 80082d0 <calc_iaq_2nd_gen_ulp+0x398>
 8008534:	eef4 6a67 	vcmp.f32	s13, s15
 8008538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800853c:	bf48      	it	mi
 800853e:	eef0 6a67 	vmovmi.f32	s13, s15
 8008542:	e527      	b.n	8007f94 <calc_iaq_2nd_gen_ulp+0x5c>
 8008544:	ed5f 7a9e 	vldr	s15, [pc, #-632]	; 80082d0 <calc_iaq_2nd_gen_ulp+0x398>
 8008548:	eef4 6a67 	vcmp.f32	s13, s15
 800854c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008550:	bf48      	it	mi
 8008552:	eef0 6a67 	vmovmi.f32	s13, s15
 8008556:	e58d      	b.n	8008074 <calc_iaq_2nd_gen_ulp+0x13c>
 8008558:	ed5f 7aa3 	vldr	s15, [pc, #-652]	; 80082d0 <calc_iaq_2nd_gen_ulp+0x398>
 800855c:	eeb4 7a67 	vcmp.f32	s14, s15
 8008560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008564:	bf48      	it	mi
 8008566:	eeb0 7a67 	vmovmi.f32	s14, s15
 800856a:	e573      	b.n	8008054 <calc_iaq_2nd_gen_ulp+0x11c>
 800856c:	ed5f 7aa8 	vldr	s15, [pc, #-672]	; 80082d0 <calc_iaq_2nd_gen_ulp+0x398>
 8008570:	eeb4 0a67 	vcmp.f32	s0, s15
 8008574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008578:	bf48      	it	mi
 800857a:	eeb0 0a67 	vmovmi.f32	s0, s15
 800857e:	e559      	b.n	8008034 <calc_iaq_2nd_gen_ulp+0xfc>
 8008580:	ed5f 7aad 	vldr	s15, [pc, #-692]	; 80082d0 <calc_iaq_2nd_gen_ulp+0x398>
 8008584:	eef4 6a67 	vcmp.f32	s13, s15
 8008588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800858c:	bf48      	it	mi
 800858e:	eef0 6a67 	vmovmi.f32	s13, s15
 8008592:	e53f      	b.n	8008014 <calc_iaq_2nd_gen_ulp+0xdc>
 8008594:	ed5f 7ab2 	vldr	s15, [pc, #-712]	; 80082d0 <calc_iaq_2nd_gen_ulp+0x398>
 8008598:	eeb4 6a67 	vcmp.f32	s12, s15
 800859c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085a0:	bf48      	it	mi
 80085a2:	eeb0 6a67 	vmovmi.f32	s12, s15
 80085a6:	e5a3      	b.n	80080f0 <calc_iaq_2nd_gen_ulp+0x1b8>
 80085a8:	ed5f 7ab7 	vldr	s15, [pc, #-732]	; 80082d0 <calc_iaq_2nd_gen_ulp+0x398>
 80085ac:	eeb4 6a67 	vcmp.f32	s12, s15
 80085b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085b4:	bf48      	it	mi
 80085b6:	eeb0 6a67 	vmovmi.f32	s12, s15
 80085ba:	e58a      	b.n	80080d2 <calc_iaq_2nd_gen_ulp+0x19a>
 80085bc:	ed5f 7abc 	vldr	s15, [pc, #-752]	; 80082d0 <calc_iaq_2nd_gen_ulp+0x398>
 80085c0:	eef4 6a67 	vcmp.f32	s13, s15
 80085c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085c8:	bf48      	it	mi
 80085ca:	eef0 6a67 	vmovmi.f32	s13, s15
 80085ce:	e571      	b.n	80080b4 <calc_iaq_2nd_gen_ulp+0x17c>
 80085d0:	ed5f 7ac1 	vldr	s15, [pc, #-772]	; 80082d0 <calc_iaq_2nd_gen_ulp+0x398>
 80085d4:	eef4 6a67 	vcmp.f32	s13, s15
 80085d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085dc:	bf48      	it	mi
 80085de:	eef0 6a67 	vmovmi.f32	s13, s15
 80085e2:	e557      	b.n	8008094 <calc_iaq_2nd_gen_ulp+0x15c>
	...

080085f0 <memchr>:
 80085f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80085f4:	2a10      	cmp	r2, #16
 80085f6:	db2b      	blt.n	8008650 <memchr+0x60>
 80085f8:	f010 0f07 	tst.w	r0, #7
 80085fc:	d008      	beq.n	8008610 <memchr+0x20>
 80085fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008602:	3a01      	subs	r2, #1
 8008604:	428b      	cmp	r3, r1
 8008606:	d02d      	beq.n	8008664 <memchr+0x74>
 8008608:	f010 0f07 	tst.w	r0, #7
 800860c:	b342      	cbz	r2, 8008660 <memchr+0x70>
 800860e:	d1f6      	bne.n	80085fe <memchr+0xe>
 8008610:	b4f0      	push	{r4, r5, r6, r7}
 8008612:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008616:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800861a:	f022 0407 	bic.w	r4, r2, #7
 800861e:	f07f 0700 	mvns.w	r7, #0
 8008622:	2300      	movs	r3, #0
 8008624:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008628:	3c08      	subs	r4, #8
 800862a:	ea85 0501 	eor.w	r5, r5, r1
 800862e:	ea86 0601 	eor.w	r6, r6, r1
 8008632:	fa85 f547 	uadd8	r5, r5, r7
 8008636:	faa3 f587 	sel	r5, r3, r7
 800863a:	fa86 f647 	uadd8	r6, r6, r7
 800863e:	faa5 f687 	sel	r6, r5, r7
 8008642:	b98e      	cbnz	r6, 8008668 <memchr+0x78>
 8008644:	d1ee      	bne.n	8008624 <memchr+0x34>
 8008646:	bcf0      	pop	{r4, r5, r6, r7}
 8008648:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800864c:	f002 0207 	and.w	r2, r2, #7
 8008650:	b132      	cbz	r2, 8008660 <memchr+0x70>
 8008652:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008656:	3a01      	subs	r2, #1
 8008658:	ea83 0301 	eor.w	r3, r3, r1
 800865c:	b113      	cbz	r3, 8008664 <memchr+0x74>
 800865e:	d1f8      	bne.n	8008652 <memchr+0x62>
 8008660:	2000      	movs	r0, #0
 8008662:	4770      	bx	lr
 8008664:	3801      	subs	r0, #1
 8008666:	4770      	bx	lr
 8008668:	2d00      	cmp	r5, #0
 800866a:	bf06      	itte	eq
 800866c:	4635      	moveq	r5, r6
 800866e:	3803      	subeq	r0, #3
 8008670:	3807      	subne	r0, #7
 8008672:	f015 0f01 	tst.w	r5, #1
 8008676:	d107      	bne.n	8008688 <memchr+0x98>
 8008678:	3001      	adds	r0, #1
 800867a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800867e:	bf02      	ittt	eq
 8008680:	3001      	addeq	r0, #1
 8008682:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8008686:	3001      	addeq	r0, #1
 8008688:	bcf0      	pop	{r4, r5, r6, r7}
 800868a:	3801      	subs	r0, #1
 800868c:	4770      	bx	lr
 800868e:	bf00      	nop

08008690 <strlen>:
 8008690:	4603      	mov	r3, r0
 8008692:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008696:	2a00      	cmp	r2, #0
 8008698:	d1fb      	bne.n	8008692 <strlen+0x2>
 800869a:	1a18      	subs	r0, r3, r0
 800869c:	3801      	subs	r0, #1
 800869e:	4770      	bx	lr

080086a0 <__aeabi_drsub>:
 80086a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	e002      	b.n	80086ac <__adddf3>
 80086a6:	bf00      	nop

080086a8 <__aeabi_dsub>:
 80086a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080086ac <__adddf3>:
 80086ac:	b530      	push	{r4, r5, lr}
 80086ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80086b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80086b6:	ea94 0f05 	teq	r4, r5
 80086ba:	bf08      	it	eq
 80086bc:	ea90 0f02 	teqeq	r0, r2
 80086c0:	bf1f      	itttt	ne
 80086c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80086c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80086ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80086ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80086d2:	f000 80e2 	beq.w	800889a <__adddf3+0x1ee>
 80086d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80086da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80086de:	bfb8      	it	lt
 80086e0:	426d      	neglt	r5, r5
 80086e2:	dd0c      	ble.n	80086fe <__adddf3+0x52>
 80086e4:	442c      	add	r4, r5
 80086e6:	ea80 0202 	eor.w	r2, r0, r2
 80086ea:	ea81 0303 	eor.w	r3, r1, r3
 80086ee:	ea82 0000 	eor.w	r0, r2, r0
 80086f2:	ea83 0101 	eor.w	r1, r3, r1
 80086f6:	ea80 0202 	eor.w	r2, r0, r2
 80086fa:	ea81 0303 	eor.w	r3, r1, r3
 80086fe:	2d36      	cmp	r5, #54	; 0x36
 8008700:	bf88      	it	hi
 8008702:	bd30      	pophi	{r4, r5, pc}
 8008704:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008708:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800870c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008710:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008714:	d002      	beq.n	800871c <__adddf3+0x70>
 8008716:	4240      	negs	r0, r0
 8008718:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800871c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008720:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008724:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008728:	d002      	beq.n	8008730 <__adddf3+0x84>
 800872a:	4252      	negs	r2, r2
 800872c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008730:	ea94 0f05 	teq	r4, r5
 8008734:	f000 80a7 	beq.w	8008886 <__adddf3+0x1da>
 8008738:	f1a4 0401 	sub.w	r4, r4, #1
 800873c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008740:	db0d      	blt.n	800875e <__adddf3+0xb2>
 8008742:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008746:	fa22 f205 	lsr.w	r2, r2, r5
 800874a:	1880      	adds	r0, r0, r2
 800874c:	f141 0100 	adc.w	r1, r1, #0
 8008750:	fa03 f20e 	lsl.w	r2, r3, lr
 8008754:	1880      	adds	r0, r0, r2
 8008756:	fa43 f305 	asr.w	r3, r3, r5
 800875a:	4159      	adcs	r1, r3
 800875c:	e00e      	b.n	800877c <__adddf3+0xd0>
 800875e:	f1a5 0520 	sub.w	r5, r5, #32
 8008762:	f10e 0e20 	add.w	lr, lr, #32
 8008766:	2a01      	cmp	r2, #1
 8008768:	fa03 fc0e 	lsl.w	ip, r3, lr
 800876c:	bf28      	it	cs
 800876e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8008772:	fa43 f305 	asr.w	r3, r3, r5
 8008776:	18c0      	adds	r0, r0, r3
 8008778:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800877c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008780:	d507      	bpl.n	8008792 <__adddf3+0xe6>
 8008782:	f04f 0e00 	mov.w	lr, #0
 8008786:	f1dc 0c00 	rsbs	ip, ip, #0
 800878a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800878e:	eb6e 0101 	sbc.w	r1, lr, r1
 8008792:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008796:	d31b      	bcc.n	80087d0 <__adddf3+0x124>
 8008798:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800879c:	d30c      	bcc.n	80087b8 <__adddf3+0x10c>
 800879e:	0849      	lsrs	r1, r1, #1
 80087a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80087a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80087a8:	f104 0401 	add.w	r4, r4, #1
 80087ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80087b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80087b4:	f080 809a 	bcs.w	80088ec <__adddf3+0x240>
 80087b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80087bc:	bf08      	it	eq
 80087be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087c2:	f150 0000 	adcs.w	r0, r0, #0
 80087c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087ca:	ea41 0105 	orr.w	r1, r1, r5
 80087ce:	bd30      	pop	{r4, r5, pc}
 80087d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80087d4:	4140      	adcs	r0, r0
 80087d6:	eb41 0101 	adc.w	r1, r1, r1
 80087da:	3c01      	subs	r4, #1
 80087dc:	bf28      	it	cs
 80087de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80087e2:	d2e9      	bcs.n	80087b8 <__adddf3+0x10c>
 80087e4:	f091 0f00 	teq	r1, #0
 80087e8:	bf04      	itt	eq
 80087ea:	4601      	moveq	r1, r0
 80087ec:	2000      	moveq	r0, #0
 80087ee:	fab1 f381 	clz	r3, r1
 80087f2:	bf08      	it	eq
 80087f4:	3320      	addeq	r3, #32
 80087f6:	f1a3 030b 	sub.w	r3, r3, #11
 80087fa:	f1b3 0220 	subs.w	r2, r3, #32
 80087fe:	da0c      	bge.n	800881a <__adddf3+0x16e>
 8008800:	320c      	adds	r2, #12
 8008802:	dd08      	ble.n	8008816 <__adddf3+0x16a>
 8008804:	f102 0c14 	add.w	ip, r2, #20
 8008808:	f1c2 020c 	rsb	r2, r2, #12
 800880c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008810:	fa21 f102 	lsr.w	r1, r1, r2
 8008814:	e00c      	b.n	8008830 <__adddf3+0x184>
 8008816:	f102 0214 	add.w	r2, r2, #20
 800881a:	bfd8      	it	le
 800881c:	f1c2 0c20 	rsble	ip, r2, #32
 8008820:	fa01 f102 	lsl.w	r1, r1, r2
 8008824:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008828:	bfdc      	itt	le
 800882a:	ea41 010c 	orrle.w	r1, r1, ip
 800882e:	4090      	lslle	r0, r2
 8008830:	1ae4      	subs	r4, r4, r3
 8008832:	bfa2      	ittt	ge
 8008834:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008838:	4329      	orrge	r1, r5
 800883a:	bd30      	popge	{r4, r5, pc}
 800883c:	ea6f 0404 	mvn.w	r4, r4
 8008840:	3c1f      	subs	r4, #31
 8008842:	da1c      	bge.n	800887e <__adddf3+0x1d2>
 8008844:	340c      	adds	r4, #12
 8008846:	dc0e      	bgt.n	8008866 <__adddf3+0x1ba>
 8008848:	f104 0414 	add.w	r4, r4, #20
 800884c:	f1c4 0220 	rsb	r2, r4, #32
 8008850:	fa20 f004 	lsr.w	r0, r0, r4
 8008854:	fa01 f302 	lsl.w	r3, r1, r2
 8008858:	ea40 0003 	orr.w	r0, r0, r3
 800885c:	fa21 f304 	lsr.w	r3, r1, r4
 8008860:	ea45 0103 	orr.w	r1, r5, r3
 8008864:	bd30      	pop	{r4, r5, pc}
 8008866:	f1c4 040c 	rsb	r4, r4, #12
 800886a:	f1c4 0220 	rsb	r2, r4, #32
 800886e:	fa20 f002 	lsr.w	r0, r0, r2
 8008872:	fa01 f304 	lsl.w	r3, r1, r4
 8008876:	ea40 0003 	orr.w	r0, r0, r3
 800887a:	4629      	mov	r1, r5
 800887c:	bd30      	pop	{r4, r5, pc}
 800887e:	fa21 f004 	lsr.w	r0, r1, r4
 8008882:	4629      	mov	r1, r5
 8008884:	bd30      	pop	{r4, r5, pc}
 8008886:	f094 0f00 	teq	r4, #0
 800888a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800888e:	bf06      	itte	eq
 8008890:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8008894:	3401      	addeq	r4, #1
 8008896:	3d01      	subne	r5, #1
 8008898:	e74e      	b.n	8008738 <__adddf3+0x8c>
 800889a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800889e:	bf18      	it	ne
 80088a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80088a4:	d029      	beq.n	80088fa <__adddf3+0x24e>
 80088a6:	ea94 0f05 	teq	r4, r5
 80088aa:	bf08      	it	eq
 80088ac:	ea90 0f02 	teqeq	r0, r2
 80088b0:	d005      	beq.n	80088be <__adddf3+0x212>
 80088b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80088b6:	bf04      	itt	eq
 80088b8:	4619      	moveq	r1, r3
 80088ba:	4610      	moveq	r0, r2
 80088bc:	bd30      	pop	{r4, r5, pc}
 80088be:	ea91 0f03 	teq	r1, r3
 80088c2:	bf1e      	ittt	ne
 80088c4:	2100      	movne	r1, #0
 80088c6:	2000      	movne	r0, #0
 80088c8:	bd30      	popne	{r4, r5, pc}
 80088ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80088ce:	d105      	bne.n	80088dc <__adddf3+0x230>
 80088d0:	0040      	lsls	r0, r0, #1
 80088d2:	4149      	adcs	r1, r1
 80088d4:	bf28      	it	cs
 80088d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80088da:	bd30      	pop	{r4, r5, pc}
 80088dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80088e0:	bf3c      	itt	cc
 80088e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80088e6:	bd30      	popcc	{r4, r5, pc}
 80088e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80088ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80088f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80088f4:	f04f 0000 	mov.w	r0, #0
 80088f8:	bd30      	pop	{r4, r5, pc}
 80088fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80088fe:	bf1a      	itte	ne
 8008900:	4619      	movne	r1, r3
 8008902:	4610      	movne	r0, r2
 8008904:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008908:	bf1c      	itt	ne
 800890a:	460b      	movne	r3, r1
 800890c:	4602      	movne	r2, r0
 800890e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008912:	bf06      	itte	eq
 8008914:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008918:	ea91 0f03 	teqeq	r1, r3
 800891c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008920:	bd30      	pop	{r4, r5, pc}
 8008922:	bf00      	nop

08008924 <__aeabi_ui2d>:
 8008924:	f090 0f00 	teq	r0, #0
 8008928:	bf04      	itt	eq
 800892a:	2100      	moveq	r1, #0
 800892c:	4770      	bxeq	lr
 800892e:	b530      	push	{r4, r5, lr}
 8008930:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008934:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008938:	f04f 0500 	mov.w	r5, #0
 800893c:	f04f 0100 	mov.w	r1, #0
 8008940:	e750      	b.n	80087e4 <__adddf3+0x138>
 8008942:	bf00      	nop

08008944 <__aeabi_i2d>:
 8008944:	f090 0f00 	teq	r0, #0
 8008948:	bf04      	itt	eq
 800894a:	2100      	moveq	r1, #0
 800894c:	4770      	bxeq	lr
 800894e:	b530      	push	{r4, r5, lr}
 8008950:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008954:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008958:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800895c:	bf48      	it	mi
 800895e:	4240      	negmi	r0, r0
 8008960:	f04f 0100 	mov.w	r1, #0
 8008964:	e73e      	b.n	80087e4 <__adddf3+0x138>
 8008966:	bf00      	nop

08008968 <__aeabi_f2d>:
 8008968:	0042      	lsls	r2, r0, #1
 800896a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800896e:	ea4f 0131 	mov.w	r1, r1, rrx
 8008972:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8008976:	bf1f      	itttt	ne
 8008978:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800897c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008980:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8008984:	4770      	bxne	lr
 8008986:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800898a:	bf08      	it	eq
 800898c:	4770      	bxeq	lr
 800898e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8008992:	bf04      	itt	eq
 8008994:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8008998:	4770      	bxeq	lr
 800899a:	b530      	push	{r4, r5, lr}
 800899c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80089a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80089a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80089a8:	e71c      	b.n	80087e4 <__adddf3+0x138>
 80089aa:	bf00      	nop

080089ac <__aeabi_ul2d>:
 80089ac:	ea50 0201 	orrs.w	r2, r0, r1
 80089b0:	bf08      	it	eq
 80089b2:	4770      	bxeq	lr
 80089b4:	b530      	push	{r4, r5, lr}
 80089b6:	f04f 0500 	mov.w	r5, #0
 80089ba:	e00a      	b.n	80089d2 <__aeabi_l2d+0x16>

080089bc <__aeabi_l2d>:
 80089bc:	ea50 0201 	orrs.w	r2, r0, r1
 80089c0:	bf08      	it	eq
 80089c2:	4770      	bxeq	lr
 80089c4:	b530      	push	{r4, r5, lr}
 80089c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80089ca:	d502      	bpl.n	80089d2 <__aeabi_l2d+0x16>
 80089cc:	4240      	negs	r0, r0
 80089ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80089d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80089d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80089da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80089de:	f43f aed8 	beq.w	8008792 <__adddf3+0xe6>
 80089e2:	f04f 0203 	mov.w	r2, #3
 80089e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80089ea:	bf18      	it	ne
 80089ec:	3203      	addne	r2, #3
 80089ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80089f2:	bf18      	it	ne
 80089f4:	3203      	addne	r2, #3
 80089f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80089fa:	f1c2 0320 	rsb	r3, r2, #32
 80089fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8008a02:	fa20 f002 	lsr.w	r0, r0, r2
 8008a06:	fa01 fe03 	lsl.w	lr, r1, r3
 8008a0a:	ea40 000e 	orr.w	r0, r0, lr
 8008a0e:	fa21 f102 	lsr.w	r1, r1, r2
 8008a12:	4414      	add	r4, r2
 8008a14:	e6bd      	b.n	8008792 <__adddf3+0xe6>
 8008a16:	bf00      	nop

08008a18 <__aeabi_dmul>:
 8008a18:	b570      	push	{r4, r5, r6, lr}
 8008a1a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008a1e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008a22:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008a26:	bf1d      	ittte	ne
 8008a28:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008a2c:	ea94 0f0c 	teqne	r4, ip
 8008a30:	ea95 0f0c 	teqne	r5, ip
 8008a34:	f000 f8de 	bleq	8008bf4 <__aeabi_dmul+0x1dc>
 8008a38:	442c      	add	r4, r5
 8008a3a:	ea81 0603 	eor.w	r6, r1, r3
 8008a3e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008a42:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008a46:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8008a4a:	bf18      	it	ne
 8008a4c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008a50:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a58:	d038      	beq.n	8008acc <__aeabi_dmul+0xb4>
 8008a5a:	fba0 ce02 	umull	ip, lr, r0, r2
 8008a5e:	f04f 0500 	mov.w	r5, #0
 8008a62:	fbe1 e502 	umlal	lr, r5, r1, r2
 8008a66:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8008a6a:	fbe0 e503 	umlal	lr, r5, r0, r3
 8008a6e:	f04f 0600 	mov.w	r6, #0
 8008a72:	fbe1 5603 	umlal	r5, r6, r1, r3
 8008a76:	f09c 0f00 	teq	ip, #0
 8008a7a:	bf18      	it	ne
 8008a7c:	f04e 0e01 	orrne.w	lr, lr, #1
 8008a80:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8008a84:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8008a88:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8008a8c:	d204      	bcs.n	8008a98 <__aeabi_dmul+0x80>
 8008a8e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8008a92:	416d      	adcs	r5, r5
 8008a94:	eb46 0606 	adc.w	r6, r6, r6
 8008a98:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8008a9c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8008aa0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8008aa4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8008aa8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8008aac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008ab0:	bf88      	it	hi
 8008ab2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008ab6:	d81e      	bhi.n	8008af6 <__aeabi_dmul+0xde>
 8008ab8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8008abc:	bf08      	it	eq
 8008abe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008ac2:	f150 0000 	adcs.w	r0, r0, #0
 8008ac6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008aca:	bd70      	pop	{r4, r5, r6, pc}
 8008acc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008ad0:	ea46 0101 	orr.w	r1, r6, r1
 8008ad4:	ea40 0002 	orr.w	r0, r0, r2
 8008ad8:	ea81 0103 	eor.w	r1, r1, r3
 8008adc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008ae0:	bfc2      	ittt	gt
 8008ae2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008ae6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008aea:	bd70      	popgt	{r4, r5, r6, pc}
 8008aec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008af0:	f04f 0e00 	mov.w	lr, #0
 8008af4:	3c01      	subs	r4, #1
 8008af6:	f300 80ab 	bgt.w	8008c50 <__aeabi_dmul+0x238>
 8008afa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8008afe:	bfde      	ittt	le
 8008b00:	2000      	movle	r0, #0
 8008b02:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008b06:	bd70      	pople	{r4, r5, r6, pc}
 8008b08:	f1c4 0400 	rsb	r4, r4, #0
 8008b0c:	3c20      	subs	r4, #32
 8008b0e:	da35      	bge.n	8008b7c <__aeabi_dmul+0x164>
 8008b10:	340c      	adds	r4, #12
 8008b12:	dc1b      	bgt.n	8008b4c <__aeabi_dmul+0x134>
 8008b14:	f104 0414 	add.w	r4, r4, #20
 8008b18:	f1c4 0520 	rsb	r5, r4, #32
 8008b1c:	fa00 f305 	lsl.w	r3, r0, r5
 8008b20:	fa20 f004 	lsr.w	r0, r0, r4
 8008b24:	fa01 f205 	lsl.w	r2, r1, r5
 8008b28:	ea40 0002 	orr.w	r0, r0, r2
 8008b2c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008b30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008b34:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008b38:	fa21 f604 	lsr.w	r6, r1, r4
 8008b3c:	eb42 0106 	adc.w	r1, r2, r6
 8008b40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008b44:	bf08      	it	eq
 8008b46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008b4a:	bd70      	pop	{r4, r5, r6, pc}
 8008b4c:	f1c4 040c 	rsb	r4, r4, #12
 8008b50:	f1c4 0520 	rsb	r5, r4, #32
 8008b54:	fa00 f304 	lsl.w	r3, r0, r4
 8008b58:	fa20 f005 	lsr.w	r0, r0, r5
 8008b5c:	fa01 f204 	lsl.w	r2, r1, r4
 8008b60:	ea40 0002 	orr.w	r0, r0, r2
 8008b64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008b68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008b6c:	f141 0100 	adc.w	r1, r1, #0
 8008b70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008b74:	bf08      	it	eq
 8008b76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008b7a:	bd70      	pop	{r4, r5, r6, pc}
 8008b7c:	f1c4 0520 	rsb	r5, r4, #32
 8008b80:	fa00 f205 	lsl.w	r2, r0, r5
 8008b84:	ea4e 0e02 	orr.w	lr, lr, r2
 8008b88:	fa20 f304 	lsr.w	r3, r0, r4
 8008b8c:	fa01 f205 	lsl.w	r2, r1, r5
 8008b90:	ea43 0302 	orr.w	r3, r3, r2
 8008b94:	fa21 f004 	lsr.w	r0, r1, r4
 8008b98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008b9c:	fa21 f204 	lsr.w	r2, r1, r4
 8008ba0:	ea20 0002 	bic.w	r0, r0, r2
 8008ba4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8008ba8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008bac:	bf08      	it	eq
 8008bae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008bb2:	bd70      	pop	{r4, r5, r6, pc}
 8008bb4:	f094 0f00 	teq	r4, #0
 8008bb8:	d10f      	bne.n	8008bda <__aeabi_dmul+0x1c2>
 8008bba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8008bbe:	0040      	lsls	r0, r0, #1
 8008bc0:	eb41 0101 	adc.w	r1, r1, r1
 8008bc4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008bc8:	bf08      	it	eq
 8008bca:	3c01      	subeq	r4, #1
 8008bcc:	d0f7      	beq.n	8008bbe <__aeabi_dmul+0x1a6>
 8008bce:	ea41 0106 	orr.w	r1, r1, r6
 8008bd2:	f095 0f00 	teq	r5, #0
 8008bd6:	bf18      	it	ne
 8008bd8:	4770      	bxne	lr
 8008bda:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8008bde:	0052      	lsls	r2, r2, #1
 8008be0:	eb43 0303 	adc.w	r3, r3, r3
 8008be4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008be8:	bf08      	it	eq
 8008bea:	3d01      	subeq	r5, #1
 8008bec:	d0f7      	beq.n	8008bde <__aeabi_dmul+0x1c6>
 8008bee:	ea43 0306 	orr.w	r3, r3, r6
 8008bf2:	4770      	bx	lr
 8008bf4:	ea94 0f0c 	teq	r4, ip
 8008bf8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008bfc:	bf18      	it	ne
 8008bfe:	ea95 0f0c 	teqne	r5, ip
 8008c02:	d00c      	beq.n	8008c1e <__aeabi_dmul+0x206>
 8008c04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008c08:	bf18      	it	ne
 8008c0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008c0e:	d1d1      	bne.n	8008bb4 <__aeabi_dmul+0x19c>
 8008c10:	ea81 0103 	eor.w	r1, r1, r3
 8008c14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008c18:	f04f 0000 	mov.w	r0, #0
 8008c1c:	bd70      	pop	{r4, r5, r6, pc}
 8008c1e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008c22:	bf06      	itte	eq
 8008c24:	4610      	moveq	r0, r2
 8008c26:	4619      	moveq	r1, r3
 8008c28:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008c2c:	d019      	beq.n	8008c62 <__aeabi_dmul+0x24a>
 8008c2e:	ea94 0f0c 	teq	r4, ip
 8008c32:	d102      	bne.n	8008c3a <__aeabi_dmul+0x222>
 8008c34:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008c38:	d113      	bne.n	8008c62 <__aeabi_dmul+0x24a>
 8008c3a:	ea95 0f0c 	teq	r5, ip
 8008c3e:	d105      	bne.n	8008c4c <__aeabi_dmul+0x234>
 8008c40:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008c44:	bf1c      	itt	ne
 8008c46:	4610      	movne	r0, r2
 8008c48:	4619      	movne	r1, r3
 8008c4a:	d10a      	bne.n	8008c62 <__aeabi_dmul+0x24a>
 8008c4c:	ea81 0103 	eor.w	r1, r1, r3
 8008c50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008c54:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008c58:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008c5c:	f04f 0000 	mov.w	r0, #0
 8008c60:	bd70      	pop	{r4, r5, r6, pc}
 8008c62:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008c66:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8008c6a:	bd70      	pop	{r4, r5, r6, pc}

08008c6c <__aeabi_ddiv>:
 8008c6c:	b570      	push	{r4, r5, r6, lr}
 8008c6e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008c72:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008c76:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008c7a:	bf1d      	ittte	ne
 8008c7c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008c80:	ea94 0f0c 	teqne	r4, ip
 8008c84:	ea95 0f0c 	teqne	r5, ip
 8008c88:	f000 f8a7 	bleq	8008dda <__aeabi_ddiv+0x16e>
 8008c8c:	eba4 0405 	sub.w	r4, r4, r5
 8008c90:	ea81 0e03 	eor.w	lr, r1, r3
 8008c94:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008c98:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008c9c:	f000 8088 	beq.w	8008db0 <__aeabi_ddiv+0x144>
 8008ca0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008ca4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8008ca8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8008cac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008cb0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008cb4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008cb8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8008cbc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008cc0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008cc4:	429d      	cmp	r5, r3
 8008cc6:	bf08      	it	eq
 8008cc8:	4296      	cmpeq	r6, r2
 8008cca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8008cce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008cd2:	d202      	bcs.n	8008cda <__aeabi_ddiv+0x6e>
 8008cd4:	085b      	lsrs	r3, r3, #1
 8008cd6:	ea4f 0232 	mov.w	r2, r2, rrx
 8008cda:	1ab6      	subs	r6, r6, r2
 8008cdc:	eb65 0503 	sbc.w	r5, r5, r3
 8008ce0:	085b      	lsrs	r3, r3, #1
 8008ce2:	ea4f 0232 	mov.w	r2, r2, rrx
 8008ce6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008cea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8008cee:	ebb6 0e02 	subs.w	lr, r6, r2
 8008cf2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008cf6:	bf22      	ittt	cs
 8008cf8:	1ab6      	subcs	r6, r6, r2
 8008cfa:	4675      	movcs	r5, lr
 8008cfc:	ea40 000c 	orrcs.w	r0, r0, ip
 8008d00:	085b      	lsrs	r3, r3, #1
 8008d02:	ea4f 0232 	mov.w	r2, r2, rrx
 8008d06:	ebb6 0e02 	subs.w	lr, r6, r2
 8008d0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008d0e:	bf22      	ittt	cs
 8008d10:	1ab6      	subcs	r6, r6, r2
 8008d12:	4675      	movcs	r5, lr
 8008d14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008d18:	085b      	lsrs	r3, r3, #1
 8008d1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8008d1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008d22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008d26:	bf22      	ittt	cs
 8008d28:	1ab6      	subcs	r6, r6, r2
 8008d2a:	4675      	movcs	r5, lr
 8008d2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008d30:	085b      	lsrs	r3, r3, #1
 8008d32:	ea4f 0232 	mov.w	r2, r2, rrx
 8008d36:	ebb6 0e02 	subs.w	lr, r6, r2
 8008d3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008d3e:	bf22      	ittt	cs
 8008d40:	1ab6      	subcs	r6, r6, r2
 8008d42:	4675      	movcs	r5, lr
 8008d44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008d48:	ea55 0e06 	orrs.w	lr, r5, r6
 8008d4c:	d018      	beq.n	8008d80 <__aeabi_ddiv+0x114>
 8008d4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008d52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008d56:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8008d5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8008d5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8008d62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8008d66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8008d6a:	d1c0      	bne.n	8008cee <__aeabi_ddiv+0x82>
 8008d6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008d70:	d10b      	bne.n	8008d8a <__aeabi_ddiv+0x11e>
 8008d72:	ea41 0100 	orr.w	r1, r1, r0
 8008d76:	f04f 0000 	mov.w	r0, #0
 8008d7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8008d7e:	e7b6      	b.n	8008cee <__aeabi_ddiv+0x82>
 8008d80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008d84:	bf04      	itt	eq
 8008d86:	4301      	orreq	r1, r0
 8008d88:	2000      	moveq	r0, #0
 8008d8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008d8e:	bf88      	it	hi
 8008d90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008d94:	f63f aeaf 	bhi.w	8008af6 <__aeabi_dmul+0xde>
 8008d98:	ebb5 0c03 	subs.w	ip, r5, r3
 8008d9c:	bf04      	itt	eq
 8008d9e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8008da2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008da6:	f150 0000 	adcs.w	r0, r0, #0
 8008daa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008dae:	bd70      	pop	{r4, r5, r6, pc}
 8008db0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008db4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008db8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8008dbc:	bfc2      	ittt	gt
 8008dbe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008dc2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008dc6:	bd70      	popgt	{r4, r5, r6, pc}
 8008dc8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008dcc:	f04f 0e00 	mov.w	lr, #0
 8008dd0:	3c01      	subs	r4, #1
 8008dd2:	e690      	b.n	8008af6 <__aeabi_dmul+0xde>
 8008dd4:	ea45 0e06 	orr.w	lr, r5, r6
 8008dd8:	e68d      	b.n	8008af6 <__aeabi_dmul+0xde>
 8008dda:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008dde:	ea94 0f0c 	teq	r4, ip
 8008de2:	bf08      	it	eq
 8008de4:	ea95 0f0c 	teqeq	r5, ip
 8008de8:	f43f af3b 	beq.w	8008c62 <__aeabi_dmul+0x24a>
 8008dec:	ea94 0f0c 	teq	r4, ip
 8008df0:	d10a      	bne.n	8008e08 <__aeabi_ddiv+0x19c>
 8008df2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008df6:	f47f af34 	bne.w	8008c62 <__aeabi_dmul+0x24a>
 8008dfa:	ea95 0f0c 	teq	r5, ip
 8008dfe:	f47f af25 	bne.w	8008c4c <__aeabi_dmul+0x234>
 8008e02:	4610      	mov	r0, r2
 8008e04:	4619      	mov	r1, r3
 8008e06:	e72c      	b.n	8008c62 <__aeabi_dmul+0x24a>
 8008e08:	ea95 0f0c 	teq	r5, ip
 8008e0c:	d106      	bne.n	8008e1c <__aeabi_ddiv+0x1b0>
 8008e0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008e12:	f43f aefd 	beq.w	8008c10 <__aeabi_dmul+0x1f8>
 8008e16:	4610      	mov	r0, r2
 8008e18:	4619      	mov	r1, r3
 8008e1a:	e722      	b.n	8008c62 <__aeabi_dmul+0x24a>
 8008e1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008e20:	bf18      	it	ne
 8008e22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008e26:	f47f aec5 	bne.w	8008bb4 <__aeabi_dmul+0x19c>
 8008e2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8008e2e:	f47f af0d 	bne.w	8008c4c <__aeabi_dmul+0x234>
 8008e32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008e36:	f47f aeeb 	bne.w	8008c10 <__aeabi_dmul+0x1f8>
 8008e3a:	e712      	b.n	8008c62 <__aeabi_dmul+0x24a>

08008e3c <__gedf2>:
 8008e3c:	f04f 3cff 	mov.w	ip, #4294967295
 8008e40:	e006      	b.n	8008e50 <__cmpdf2+0x4>
 8008e42:	bf00      	nop

08008e44 <__ledf2>:
 8008e44:	f04f 0c01 	mov.w	ip, #1
 8008e48:	e002      	b.n	8008e50 <__cmpdf2+0x4>
 8008e4a:	bf00      	nop

08008e4c <__cmpdf2>:
 8008e4c:	f04f 0c01 	mov.w	ip, #1
 8008e50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008e54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008e58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008e5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008e60:	bf18      	it	ne
 8008e62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8008e66:	d01b      	beq.n	8008ea0 <__cmpdf2+0x54>
 8008e68:	b001      	add	sp, #4
 8008e6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8008e6e:	bf0c      	ite	eq
 8008e70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8008e74:	ea91 0f03 	teqne	r1, r3
 8008e78:	bf02      	ittt	eq
 8008e7a:	ea90 0f02 	teqeq	r0, r2
 8008e7e:	2000      	moveq	r0, #0
 8008e80:	4770      	bxeq	lr
 8008e82:	f110 0f00 	cmn.w	r0, #0
 8008e86:	ea91 0f03 	teq	r1, r3
 8008e8a:	bf58      	it	pl
 8008e8c:	4299      	cmppl	r1, r3
 8008e8e:	bf08      	it	eq
 8008e90:	4290      	cmpeq	r0, r2
 8008e92:	bf2c      	ite	cs
 8008e94:	17d8      	asrcs	r0, r3, #31
 8008e96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8008e9a:	f040 0001 	orr.w	r0, r0, #1
 8008e9e:	4770      	bx	lr
 8008ea0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008ea4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008ea8:	d102      	bne.n	8008eb0 <__cmpdf2+0x64>
 8008eaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008eae:	d107      	bne.n	8008ec0 <__cmpdf2+0x74>
 8008eb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008eb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008eb8:	d1d6      	bne.n	8008e68 <__cmpdf2+0x1c>
 8008eba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008ebe:	d0d3      	beq.n	8008e68 <__cmpdf2+0x1c>
 8008ec0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop

08008ec8 <__aeabi_cdrcmple>:
 8008ec8:	4684      	mov	ip, r0
 8008eca:	4610      	mov	r0, r2
 8008ecc:	4662      	mov	r2, ip
 8008ece:	468c      	mov	ip, r1
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	4663      	mov	r3, ip
 8008ed4:	e000      	b.n	8008ed8 <__aeabi_cdcmpeq>
 8008ed6:	bf00      	nop

08008ed8 <__aeabi_cdcmpeq>:
 8008ed8:	b501      	push	{r0, lr}
 8008eda:	f7ff ffb7 	bl	8008e4c <__cmpdf2>
 8008ede:	2800      	cmp	r0, #0
 8008ee0:	bf48      	it	mi
 8008ee2:	f110 0f00 	cmnmi.w	r0, #0
 8008ee6:	bd01      	pop	{r0, pc}

08008ee8 <__aeabi_dcmpeq>:
 8008ee8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008eec:	f7ff fff4 	bl	8008ed8 <__aeabi_cdcmpeq>
 8008ef0:	bf0c      	ite	eq
 8008ef2:	2001      	moveq	r0, #1
 8008ef4:	2000      	movne	r0, #0
 8008ef6:	f85d fb08 	ldr.w	pc, [sp], #8
 8008efa:	bf00      	nop

08008efc <__aeabi_dcmplt>:
 8008efc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008f00:	f7ff ffea 	bl	8008ed8 <__aeabi_cdcmpeq>
 8008f04:	bf34      	ite	cc
 8008f06:	2001      	movcc	r0, #1
 8008f08:	2000      	movcs	r0, #0
 8008f0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8008f0e:	bf00      	nop

08008f10 <__aeabi_dcmple>:
 8008f10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008f14:	f7ff ffe0 	bl	8008ed8 <__aeabi_cdcmpeq>
 8008f18:	bf94      	ite	ls
 8008f1a:	2001      	movls	r0, #1
 8008f1c:	2000      	movhi	r0, #0
 8008f1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008f22:	bf00      	nop

08008f24 <__aeabi_dcmpge>:
 8008f24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008f28:	f7ff ffce 	bl	8008ec8 <__aeabi_cdrcmple>
 8008f2c:	bf94      	ite	ls
 8008f2e:	2001      	movls	r0, #1
 8008f30:	2000      	movhi	r0, #0
 8008f32:	f85d fb08 	ldr.w	pc, [sp], #8
 8008f36:	bf00      	nop

08008f38 <__aeabi_dcmpgt>:
 8008f38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008f3c:	f7ff ffc4 	bl	8008ec8 <__aeabi_cdrcmple>
 8008f40:	bf34      	ite	cc
 8008f42:	2001      	movcc	r0, #1
 8008f44:	2000      	movcs	r0, #0
 8008f46:	f85d fb08 	ldr.w	pc, [sp], #8
 8008f4a:	bf00      	nop

08008f4c <__aeabi_dcmpun>:
 8008f4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008f50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008f54:	d102      	bne.n	8008f5c <__aeabi_dcmpun+0x10>
 8008f56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008f5a:	d10a      	bne.n	8008f72 <__aeabi_dcmpun+0x26>
 8008f5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008f60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008f64:	d102      	bne.n	8008f6c <__aeabi_dcmpun+0x20>
 8008f66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008f6a:	d102      	bne.n	8008f72 <__aeabi_dcmpun+0x26>
 8008f6c:	f04f 0000 	mov.w	r0, #0
 8008f70:	4770      	bx	lr
 8008f72:	f04f 0001 	mov.w	r0, #1
 8008f76:	4770      	bx	lr

08008f78 <__aeabi_d2iz>:
 8008f78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008f7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008f80:	d215      	bcs.n	8008fae <__aeabi_d2iz+0x36>
 8008f82:	d511      	bpl.n	8008fa8 <__aeabi_d2iz+0x30>
 8008f84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008f88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008f8c:	d912      	bls.n	8008fb4 <__aeabi_d2iz+0x3c>
 8008f8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008f92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008f96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008f9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008f9e:	fa23 f002 	lsr.w	r0, r3, r2
 8008fa2:	bf18      	it	ne
 8008fa4:	4240      	negne	r0, r0
 8008fa6:	4770      	bx	lr
 8008fa8:	f04f 0000 	mov.w	r0, #0
 8008fac:	4770      	bx	lr
 8008fae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008fb2:	d105      	bne.n	8008fc0 <__aeabi_d2iz+0x48>
 8008fb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008fb8:	bf08      	it	eq
 8008fba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008fbe:	4770      	bx	lr
 8008fc0:	f04f 0000 	mov.w	r0, #0
 8008fc4:	4770      	bx	lr
 8008fc6:	bf00      	nop

08008fc8 <__aeabi_d2uiz>:
 8008fc8:	004a      	lsls	r2, r1, #1
 8008fca:	d211      	bcs.n	8008ff0 <__aeabi_d2uiz+0x28>
 8008fcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008fd0:	d211      	bcs.n	8008ff6 <__aeabi_d2uiz+0x2e>
 8008fd2:	d50d      	bpl.n	8008ff0 <__aeabi_d2uiz+0x28>
 8008fd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008fd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008fdc:	d40e      	bmi.n	8008ffc <__aeabi_d2uiz+0x34>
 8008fde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008fe2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008fe6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008fea:	fa23 f002 	lsr.w	r0, r3, r2
 8008fee:	4770      	bx	lr
 8008ff0:	f04f 0000 	mov.w	r0, #0
 8008ff4:	4770      	bx	lr
 8008ff6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008ffa:	d102      	bne.n	8009002 <__aeabi_d2uiz+0x3a>
 8008ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8009000:	4770      	bx	lr
 8009002:	f04f 0000 	mov.w	r0, #0
 8009006:	4770      	bx	lr

08009008 <__aeabi_d2f>:
 8009008:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800900c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8009010:	bf24      	itt	cs
 8009012:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8009016:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800901a:	d90d      	bls.n	8009038 <__aeabi_d2f+0x30>
 800901c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8009020:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8009024:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8009028:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800902c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8009030:	bf08      	it	eq
 8009032:	f020 0001 	biceq.w	r0, r0, #1
 8009036:	4770      	bx	lr
 8009038:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800903c:	d121      	bne.n	8009082 <__aeabi_d2f+0x7a>
 800903e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8009042:	bfbc      	itt	lt
 8009044:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8009048:	4770      	bxlt	lr
 800904a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800904e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8009052:	f1c2 0218 	rsb	r2, r2, #24
 8009056:	f1c2 0c20 	rsb	ip, r2, #32
 800905a:	fa10 f30c 	lsls.w	r3, r0, ip
 800905e:	fa20 f002 	lsr.w	r0, r0, r2
 8009062:	bf18      	it	ne
 8009064:	f040 0001 	orrne.w	r0, r0, #1
 8009068:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800906c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8009070:	fa03 fc0c 	lsl.w	ip, r3, ip
 8009074:	ea40 000c 	orr.w	r0, r0, ip
 8009078:	fa23 f302 	lsr.w	r3, r3, r2
 800907c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009080:	e7cc      	b.n	800901c <__aeabi_d2f+0x14>
 8009082:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8009086:	d107      	bne.n	8009098 <__aeabi_d2f+0x90>
 8009088:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800908c:	bf1e      	ittt	ne
 800908e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8009092:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8009096:	4770      	bxne	lr
 8009098:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800909c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80090a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80090a4:	4770      	bx	lr
 80090a6:	bf00      	nop

080090a8 <__aeabi_uldivmod>:
 80090a8:	b953      	cbnz	r3, 80090c0 <__aeabi_uldivmod+0x18>
 80090aa:	b94a      	cbnz	r2, 80090c0 <__aeabi_uldivmod+0x18>
 80090ac:	2900      	cmp	r1, #0
 80090ae:	bf08      	it	eq
 80090b0:	2800      	cmpeq	r0, #0
 80090b2:	bf1c      	itt	ne
 80090b4:	f04f 31ff 	movne.w	r1, #4294967295
 80090b8:	f04f 30ff 	movne.w	r0, #4294967295
 80090bc:	f000 b9a6 	b.w	800940c <__aeabi_idiv0>
 80090c0:	f1ad 0c08 	sub.w	ip, sp, #8
 80090c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80090c8:	f000 f83c 	bl	8009144 <__udivmoddi4>
 80090cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80090d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090d4:	b004      	add	sp, #16
 80090d6:	4770      	bx	lr

080090d8 <__aeabi_d2lz>:
 80090d8:	b538      	push	{r3, r4, r5, lr}
 80090da:	2200      	movs	r2, #0
 80090dc:	2300      	movs	r3, #0
 80090de:	4604      	mov	r4, r0
 80090e0:	460d      	mov	r5, r1
 80090e2:	f7ff ff0b 	bl	8008efc <__aeabi_dcmplt>
 80090e6:	b928      	cbnz	r0, 80090f4 <__aeabi_d2lz+0x1c>
 80090e8:	4620      	mov	r0, r4
 80090ea:	4629      	mov	r1, r5
 80090ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090f0:	f000 b80a 	b.w	8009108 <__aeabi_d2ulz>
 80090f4:	4620      	mov	r0, r4
 80090f6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 80090fa:	f000 f805 	bl	8009108 <__aeabi_d2ulz>
 80090fe:	4240      	negs	r0, r0
 8009100:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8009104:	bd38      	pop	{r3, r4, r5, pc}
 8009106:	bf00      	nop

08009108 <__aeabi_d2ulz>:
 8009108:	b5d0      	push	{r4, r6, r7, lr}
 800910a:	4b0c      	ldr	r3, [pc, #48]	; (800913c <__aeabi_d2ulz+0x34>)
 800910c:	2200      	movs	r2, #0
 800910e:	4606      	mov	r6, r0
 8009110:	460f      	mov	r7, r1
 8009112:	f7ff fc81 	bl	8008a18 <__aeabi_dmul>
 8009116:	f7ff ff57 	bl	8008fc8 <__aeabi_d2uiz>
 800911a:	4604      	mov	r4, r0
 800911c:	f7ff fc02 	bl	8008924 <__aeabi_ui2d>
 8009120:	4b07      	ldr	r3, [pc, #28]	; (8009140 <__aeabi_d2ulz+0x38>)
 8009122:	2200      	movs	r2, #0
 8009124:	f7ff fc78 	bl	8008a18 <__aeabi_dmul>
 8009128:	4602      	mov	r2, r0
 800912a:	460b      	mov	r3, r1
 800912c:	4630      	mov	r0, r6
 800912e:	4639      	mov	r1, r7
 8009130:	f7ff faba 	bl	80086a8 <__aeabi_dsub>
 8009134:	f7ff ff48 	bl	8008fc8 <__aeabi_d2uiz>
 8009138:	4621      	mov	r1, r4
 800913a:	bdd0      	pop	{r4, r6, r7, pc}
 800913c:	3df00000 	.word	0x3df00000
 8009140:	41f00000 	.word	0x41f00000

08009144 <__udivmoddi4>:
 8009144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009148:	9e08      	ldr	r6, [sp, #32]
 800914a:	460d      	mov	r5, r1
 800914c:	4604      	mov	r4, r0
 800914e:	460f      	mov	r7, r1
 8009150:	2b00      	cmp	r3, #0
 8009152:	d14a      	bne.n	80091ea <__udivmoddi4+0xa6>
 8009154:	428a      	cmp	r2, r1
 8009156:	4694      	mov	ip, r2
 8009158:	d965      	bls.n	8009226 <__udivmoddi4+0xe2>
 800915a:	fab2 f382 	clz	r3, r2
 800915e:	b143      	cbz	r3, 8009172 <__udivmoddi4+0x2e>
 8009160:	fa02 fc03 	lsl.w	ip, r2, r3
 8009164:	f1c3 0220 	rsb	r2, r3, #32
 8009168:	409f      	lsls	r7, r3
 800916a:	fa20 f202 	lsr.w	r2, r0, r2
 800916e:	4317      	orrs	r7, r2
 8009170:	409c      	lsls	r4, r3
 8009172:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8009176:	fa1f f58c 	uxth.w	r5, ip
 800917a:	fbb7 f1fe 	udiv	r1, r7, lr
 800917e:	0c22      	lsrs	r2, r4, #16
 8009180:	fb0e 7711 	mls	r7, lr, r1, r7
 8009184:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8009188:	fb01 f005 	mul.w	r0, r1, r5
 800918c:	4290      	cmp	r0, r2
 800918e:	d90a      	bls.n	80091a6 <__udivmoddi4+0x62>
 8009190:	eb1c 0202 	adds.w	r2, ip, r2
 8009194:	f101 37ff 	add.w	r7, r1, #4294967295
 8009198:	f080 811c 	bcs.w	80093d4 <__udivmoddi4+0x290>
 800919c:	4290      	cmp	r0, r2
 800919e:	f240 8119 	bls.w	80093d4 <__udivmoddi4+0x290>
 80091a2:	3902      	subs	r1, #2
 80091a4:	4462      	add	r2, ip
 80091a6:	1a12      	subs	r2, r2, r0
 80091a8:	b2a4      	uxth	r4, r4
 80091aa:	fbb2 f0fe 	udiv	r0, r2, lr
 80091ae:	fb0e 2210 	mls	r2, lr, r0, r2
 80091b2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80091b6:	fb00 f505 	mul.w	r5, r0, r5
 80091ba:	42a5      	cmp	r5, r4
 80091bc:	d90a      	bls.n	80091d4 <__udivmoddi4+0x90>
 80091be:	eb1c 0404 	adds.w	r4, ip, r4
 80091c2:	f100 32ff 	add.w	r2, r0, #4294967295
 80091c6:	f080 8107 	bcs.w	80093d8 <__udivmoddi4+0x294>
 80091ca:	42a5      	cmp	r5, r4
 80091cc:	f240 8104 	bls.w	80093d8 <__udivmoddi4+0x294>
 80091d0:	4464      	add	r4, ip
 80091d2:	3802      	subs	r0, #2
 80091d4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80091d8:	1b64      	subs	r4, r4, r5
 80091da:	2100      	movs	r1, #0
 80091dc:	b11e      	cbz	r6, 80091e6 <__udivmoddi4+0xa2>
 80091de:	40dc      	lsrs	r4, r3
 80091e0:	2300      	movs	r3, #0
 80091e2:	e9c6 4300 	strd	r4, r3, [r6]
 80091e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091ea:	428b      	cmp	r3, r1
 80091ec:	d908      	bls.n	8009200 <__udivmoddi4+0xbc>
 80091ee:	2e00      	cmp	r6, #0
 80091f0:	f000 80ed 	beq.w	80093ce <__udivmoddi4+0x28a>
 80091f4:	2100      	movs	r1, #0
 80091f6:	e9c6 0500 	strd	r0, r5, [r6]
 80091fa:	4608      	mov	r0, r1
 80091fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009200:	fab3 f183 	clz	r1, r3
 8009204:	2900      	cmp	r1, #0
 8009206:	d149      	bne.n	800929c <__udivmoddi4+0x158>
 8009208:	42ab      	cmp	r3, r5
 800920a:	d302      	bcc.n	8009212 <__udivmoddi4+0xce>
 800920c:	4282      	cmp	r2, r0
 800920e:	f200 80f8 	bhi.w	8009402 <__udivmoddi4+0x2be>
 8009212:	1a84      	subs	r4, r0, r2
 8009214:	eb65 0203 	sbc.w	r2, r5, r3
 8009218:	2001      	movs	r0, #1
 800921a:	4617      	mov	r7, r2
 800921c:	2e00      	cmp	r6, #0
 800921e:	d0e2      	beq.n	80091e6 <__udivmoddi4+0xa2>
 8009220:	e9c6 4700 	strd	r4, r7, [r6]
 8009224:	e7df      	b.n	80091e6 <__udivmoddi4+0xa2>
 8009226:	b902      	cbnz	r2, 800922a <__udivmoddi4+0xe6>
 8009228:	deff      	udf	#255	; 0xff
 800922a:	fab2 f382 	clz	r3, r2
 800922e:	2b00      	cmp	r3, #0
 8009230:	f040 8090 	bne.w	8009354 <__udivmoddi4+0x210>
 8009234:	1a8a      	subs	r2, r1, r2
 8009236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800923a:	fa1f fe8c 	uxth.w	lr, ip
 800923e:	2101      	movs	r1, #1
 8009240:	fbb2 f5f7 	udiv	r5, r2, r7
 8009244:	fb07 2015 	mls	r0, r7, r5, r2
 8009248:	0c22      	lsrs	r2, r4, #16
 800924a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800924e:	fb0e f005 	mul.w	r0, lr, r5
 8009252:	4290      	cmp	r0, r2
 8009254:	d908      	bls.n	8009268 <__udivmoddi4+0x124>
 8009256:	eb1c 0202 	adds.w	r2, ip, r2
 800925a:	f105 38ff 	add.w	r8, r5, #4294967295
 800925e:	d202      	bcs.n	8009266 <__udivmoddi4+0x122>
 8009260:	4290      	cmp	r0, r2
 8009262:	f200 80cb 	bhi.w	80093fc <__udivmoddi4+0x2b8>
 8009266:	4645      	mov	r5, r8
 8009268:	1a12      	subs	r2, r2, r0
 800926a:	b2a4      	uxth	r4, r4
 800926c:	fbb2 f0f7 	udiv	r0, r2, r7
 8009270:	fb07 2210 	mls	r2, r7, r0, r2
 8009274:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009278:	fb0e fe00 	mul.w	lr, lr, r0
 800927c:	45a6      	cmp	lr, r4
 800927e:	d908      	bls.n	8009292 <__udivmoddi4+0x14e>
 8009280:	eb1c 0404 	adds.w	r4, ip, r4
 8009284:	f100 32ff 	add.w	r2, r0, #4294967295
 8009288:	d202      	bcs.n	8009290 <__udivmoddi4+0x14c>
 800928a:	45a6      	cmp	lr, r4
 800928c:	f200 80bb 	bhi.w	8009406 <__udivmoddi4+0x2c2>
 8009290:	4610      	mov	r0, r2
 8009292:	eba4 040e 	sub.w	r4, r4, lr
 8009296:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800929a:	e79f      	b.n	80091dc <__udivmoddi4+0x98>
 800929c:	f1c1 0720 	rsb	r7, r1, #32
 80092a0:	408b      	lsls	r3, r1
 80092a2:	fa22 fc07 	lsr.w	ip, r2, r7
 80092a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80092aa:	fa05 f401 	lsl.w	r4, r5, r1
 80092ae:	fa20 f307 	lsr.w	r3, r0, r7
 80092b2:	40fd      	lsrs	r5, r7
 80092b4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80092b8:	4323      	orrs	r3, r4
 80092ba:	fbb5 f8f9 	udiv	r8, r5, r9
 80092be:	fa1f fe8c 	uxth.w	lr, ip
 80092c2:	fb09 5518 	mls	r5, r9, r8, r5
 80092c6:	0c1c      	lsrs	r4, r3, #16
 80092c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80092cc:	fb08 f50e 	mul.w	r5, r8, lr
 80092d0:	42a5      	cmp	r5, r4
 80092d2:	fa02 f201 	lsl.w	r2, r2, r1
 80092d6:	fa00 f001 	lsl.w	r0, r0, r1
 80092da:	d90b      	bls.n	80092f4 <__udivmoddi4+0x1b0>
 80092dc:	eb1c 0404 	adds.w	r4, ip, r4
 80092e0:	f108 3aff 	add.w	sl, r8, #4294967295
 80092e4:	f080 8088 	bcs.w	80093f8 <__udivmoddi4+0x2b4>
 80092e8:	42a5      	cmp	r5, r4
 80092ea:	f240 8085 	bls.w	80093f8 <__udivmoddi4+0x2b4>
 80092ee:	f1a8 0802 	sub.w	r8, r8, #2
 80092f2:	4464      	add	r4, ip
 80092f4:	1b64      	subs	r4, r4, r5
 80092f6:	b29d      	uxth	r5, r3
 80092f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80092fc:	fb09 4413 	mls	r4, r9, r3, r4
 8009300:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8009304:	fb03 fe0e 	mul.w	lr, r3, lr
 8009308:	45a6      	cmp	lr, r4
 800930a:	d908      	bls.n	800931e <__udivmoddi4+0x1da>
 800930c:	eb1c 0404 	adds.w	r4, ip, r4
 8009310:	f103 35ff 	add.w	r5, r3, #4294967295
 8009314:	d26c      	bcs.n	80093f0 <__udivmoddi4+0x2ac>
 8009316:	45a6      	cmp	lr, r4
 8009318:	d96a      	bls.n	80093f0 <__udivmoddi4+0x2ac>
 800931a:	3b02      	subs	r3, #2
 800931c:	4464      	add	r4, ip
 800931e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8009322:	fba3 9502 	umull	r9, r5, r3, r2
 8009326:	eba4 040e 	sub.w	r4, r4, lr
 800932a:	42ac      	cmp	r4, r5
 800932c:	46c8      	mov	r8, r9
 800932e:	46ae      	mov	lr, r5
 8009330:	d356      	bcc.n	80093e0 <__udivmoddi4+0x29c>
 8009332:	d053      	beq.n	80093dc <__udivmoddi4+0x298>
 8009334:	b156      	cbz	r6, 800934c <__udivmoddi4+0x208>
 8009336:	ebb0 0208 	subs.w	r2, r0, r8
 800933a:	eb64 040e 	sbc.w	r4, r4, lr
 800933e:	fa04 f707 	lsl.w	r7, r4, r7
 8009342:	40ca      	lsrs	r2, r1
 8009344:	40cc      	lsrs	r4, r1
 8009346:	4317      	orrs	r7, r2
 8009348:	e9c6 7400 	strd	r7, r4, [r6]
 800934c:	4618      	mov	r0, r3
 800934e:	2100      	movs	r1, #0
 8009350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009354:	f1c3 0120 	rsb	r1, r3, #32
 8009358:	fa02 fc03 	lsl.w	ip, r2, r3
 800935c:	fa20 f201 	lsr.w	r2, r0, r1
 8009360:	fa25 f101 	lsr.w	r1, r5, r1
 8009364:	409d      	lsls	r5, r3
 8009366:	432a      	orrs	r2, r5
 8009368:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800936c:	fa1f fe8c 	uxth.w	lr, ip
 8009370:	fbb1 f0f7 	udiv	r0, r1, r7
 8009374:	fb07 1510 	mls	r5, r7, r0, r1
 8009378:	0c11      	lsrs	r1, r2, #16
 800937a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800937e:	fb00 f50e 	mul.w	r5, r0, lr
 8009382:	428d      	cmp	r5, r1
 8009384:	fa04 f403 	lsl.w	r4, r4, r3
 8009388:	d908      	bls.n	800939c <__udivmoddi4+0x258>
 800938a:	eb1c 0101 	adds.w	r1, ip, r1
 800938e:	f100 38ff 	add.w	r8, r0, #4294967295
 8009392:	d22f      	bcs.n	80093f4 <__udivmoddi4+0x2b0>
 8009394:	428d      	cmp	r5, r1
 8009396:	d92d      	bls.n	80093f4 <__udivmoddi4+0x2b0>
 8009398:	3802      	subs	r0, #2
 800939a:	4461      	add	r1, ip
 800939c:	1b49      	subs	r1, r1, r5
 800939e:	b292      	uxth	r2, r2
 80093a0:	fbb1 f5f7 	udiv	r5, r1, r7
 80093a4:	fb07 1115 	mls	r1, r7, r5, r1
 80093a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80093ac:	fb05 f10e 	mul.w	r1, r5, lr
 80093b0:	4291      	cmp	r1, r2
 80093b2:	d908      	bls.n	80093c6 <__udivmoddi4+0x282>
 80093b4:	eb1c 0202 	adds.w	r2, ip, r2
 80093b8:	f105 38ff 	add.w	r8, r5, #4294967295
 80093bc:	d216      	bcs.n	80093ec <__udivmoddi4+0x2a8>
 80093be:	4291      	cmp	r1, r2
 80093c0:	d914      	bls.n	80093ec <__udivmoddi4+0x2a8>
 80093c2:	3d02      	subs	r5, #2
 80093c4:	4462      	add	r2, ip
 80093c6:	1a52      	subs	r2, r2, r1
 80093c8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80093cc:	e738      	b.n	8009240 <__udivmoddi4+0xfc>
 80093ce:	4631      	mov	r1, r6
 80093d0:	4630      	mov	r0, r6
 80093d2:	e708      	b.n	80091e6 <__udivmoddi4+0xa2>
 80093d4:	4639      	mov	r1, r7
 80093d6:	e6e6      	b.n	80091a6 <__udivmoddi4+0x62>
 80093d8:	4610      	mov	r0, r2
 80093da:	e6fb      	b.n	80091d4 <__udivmoddi4+0x90>
 80093dc:	4548      	cmp	r0, r9
 80093de:	d2a9      	bcs.n	8009334 <__udivmoddi4+0x1f0>
 80093e0:	ebb9 0802 	subs.w	r8, r9, r2
 80093e4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80093e8:	3b01      	subs	r3, #1
 80093ea:	e7a3      	b.n	8009334 <__udivmoddi4+0x1f0>
 80093ec:	4645      	mov	r5, r8
 80093ee:	e7ea      	b.n	80093c6 <__udivmoddi4+0x282>
 80093f0:	462b      	mov	r3, r5
 80093f2:	e794      	b.n	800931e <__udivmoddi4+0x1da>
 80093f4:	4640      	mov	r0, r8
 80093f6:	e7d1      	b.n	800939c <__udivmoddi4+0x258>
 80093f8:	46d0      	mov	r8, sl
 80093fa:	e77b      	b.n	80092f4 <__udivmoddi4+0x1b0>
 80093fc:	3d02      	subs	r5, #2
 80093fe:	4462      	add	r2, ip
 8009400:	e732      	b.n	8009268 <__udivmoddi4+0x124>
 8009402:	4608      	mov	r0, r1
 8009404:	e70a      	b.n	800921c <__udivmoddi4+0xd8>
 8009406:	4464      	add	r4, ip
 8009408:	3802      	subs	r0, #2
 800940a:	e742      	b.n	8009292 <__udivmoddi4+0x14e>

0800940c <__aeabi_idiv0>:
 800940c:	4770      	bx	lr
 800940e:	bf00      	nop

08009410 <write_i2c_rw>:
 *      Author: Jimitp
 */
#include "AS3935.h"

void write_i2c_rw(uint8_t Wreg,uint8_t mask,uint8_t wbit,uint8_t position)
{
 8009410:	b590      	push	{r4, r7, lr}
 8009412:	b089      	sub	sp, #36	; 0x24
 8009414:	af04      	add	r7, sp, #16
 8009416:	4604      	mov	r4, r0
 8009418:	4608      	mov	r0, r1
 800941a:	4611      	mov	r1, r2
 800941c:	461a      	mov	r2, r3
 800941e:	4623      	mov	r3, r4
 8009420:	71fb      	strb	r3, [r7, #7]
 8009422:	4603      	mov	r3, r0
 8009424:	71bb      	strb	r3, [r7, #6]
 8009426:	460b      	mov	r3, r1
 8009428:	717b      	strb	r3, [r7, #5]
 800942a:	4613      	mov	r3, r2
 800942c:	713b      	strb	r3, [r7, #4]
	uint8_t reg_data_ptr;
//	HAL_I2C_Mem_Write(&hi2c1,AS3935_IC_ADDRESS,Wreg,I2C_MEMADD_SIZE_8BIT,reg_data_ptr,1,HAL_MAX_DELAY);
	HAL_I2C_Mem_Read(&hi2c3,AS3935_IC_ADDRESS,Wreg,I2C_MEMADD_SIZE_8BIT,&reg_data_ptr,1,HAL_MAX_DELAY);
 800942e:	79fb      	ldrb	r3, [r7, #7]
 8009430:	b29a      	uxth	r2, r3
 8009432:	f04f 33ff 	mov.w	r3, #4294967295
 8009436:	9302      	str	r3, [sp, #8]
 8009438:	2301      	movs	r3, #1
 800943a:	9301      	str	r3, [sp, #4]
 800943c:	f107 030f 	add.w	r3, r7, #15
 8009440:	9300      	str	r3, [sp, #0]
 8009442:	2301      	movs	r3, #1
 8009444:	2100      	movs	r1, #0
 8009446:	4813      	ldr	r0, [pc, #76]	; (8009494 <write_i2c_rw+0x84>)
 8009448:	f006 fe82 	bl	8010150 <HAL_I2C_Mem_Read>
	reg_data_ptr &=mask;
 800944c:	7bfa      	ldrb	r2, [r7, #15]
 800944e:	79bb      	ldrb	r3, [r7, #6]
 8009450:	4013      	ands	r3, r2
 8009452:	b2db      	uxtb	r3, r3
 8009454:	73fb      	strb	r3, [r7, #15]
	reg_data_ptr |=(wbit<<position);
 8009456:	797a      	ldrb	r2, [r7, #5]
 8009458:	793b      	ldrb	r3, [r7, #4]
 800945a:	fa02 f303 	lsl.w	r3, r2, r3
 800945e:	b25a      	sxtb	r2, r3
 8009460:	7bfb      	ldrb	r3, [r7, #15]
 8009462:	b25b      	sxtb	r3, r3
 8009464:	4313      	orrs	r3, r2
 8009466:	b25b      	sxtb	r3, r3
 8009468:	b2db      	uxtb	r3, r3
 800946a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c3,AS3935_IC_ADDRESS,Wreg,I2C_MEMADD_SIZE_8BIT,&reg_data_ptr,1,HAL_MAX_DELAY);
 800946c:	79fb      	ldrb	r3, [r7, #7]
 800946e:	b29a      	uxth	r2, r3
 8009470:	f04f 33ff 	mov.w	r3, #4294967295
 8009474:	9302      	str	r3, [sp, #8]
 8009476:	2301      	movs	r3, #1
 8009478:	9301      	str	r3, [sp, #4]
 800947a:	f107 030f 	add.w	r3, r7, #15
 800947e:	9300      	str	r3, [sp, #0]
 8009480:	2301      	movs	r3, #1
 8009482:	2100      	movs	r1, #0
 8009484:	4803      	ldr	r0, [pc, #12]	; (8009494 <write_i2c_rw+0x84>)
 8009486:	f006 fd4f 	bl	800ff28 <HAL_I2C_Mem_Write>
}
 800948a:	bf00      	nop
 800948c:	3714      	adds	r7, #20
 800948e:	46bd      	mov	sp, r7
 8009490:	bd90      	pop	{r4, r7, pc}
 8009492:	bf00      	nop
 8009494:	200005fc 	.word	0x200005fc

08009498 <AS3935_Init>:
void AS3935_Init(void)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	af00      	add	r7, sp, #0
	write_i2c_rw(RESET_LIGHT,Wip_all, DIRECT_COMMAND, 0);  //preset to default setting
 800949c:	2300      	movs	r3, #0
 800949e:	2296      	movs	r2, #150	; 0x96
 80094a0:	2100      	movs	r1, #0
 80094a2:	203c      	movs	r0, #60	; 0x3c
 80094a4:	f7ff ffb4 	bl	8009410 <write_i2c_rw>
	  write_i2c_rw(AS3935_REG_TUNE, OSC_mask,0,7);   //LCO route to intr pin 0-no/1-yes
 80094a8:	2307      	movs	r3, #7
 80094aa:	2200      	movs	r2, #0
 80094ac:	211f      	movs	r1, #31
 80094ae:	2008      	movs	r0, #8
 80094b0:	f7ff ffae 	bl	8009410 <write_i2c_rw>
	  write_i2c_rw(AS3935_REG_TUNE, CAP_mask,0,0);   // internal cap value =7 (0-15) value vary board to board
 80094b4:	2300      	movs	r3, #0
 80094b6:	2200      	movs	r2, #0
 80094b8:	21f0      	movs	r1, #240	; 0xf0
 80094ba:	2008      	movs	r0, #8
 80094bc:	f7ff ffa8 	bl	8009410 <write_i2c_rw>
	  write_i2c_rw(CALIB_RCO, Wip_all, DIRECT_COMMAND, 0); //calibrate RCO
 80094c0:	2300      	movs	r3, #0
 80094c2:	2296      	movs	r2, #150	; 0x96
 80094c4:	2100      	movs	r1, #0
 80094c6:	203d      	movs	r0, #61	; 0x3d
 80094c8:	f7ff ffa2 	bl	8009410 <write_i2c_rw>
	  write_i2c_rw(AS3935_REG_TUNE, OSC_mask,1,6);
 80094cc:	2306      	movs	r3, #6
 80094ce:	2201      	movs	r2, #1
 80094d0:	211f      	movs	r1, #31
 80094d2:	2008      	movs	r0, #8
 80094d4:	f7ff ff9c 	bl	8009410 <write_i2c_rw>
	  HAL_Delay(2);             // calibration
 80094d8:	2002      	movs	r0, #2
 80094da:	f000 ffa2 	bl	800a422 <HAL_Delay>
	  write_i2c_rw(AS3935_REG_TUNE, OSC_mask,0, 6);
 80094de:	2306      	movs	r3, #6
 80094e0:	2200      	movs	r2, #0
 80094e2:	211f      	movs	r1, #31
 80094e4:	2008      	movs	r0, #8
 80094e6:	f7ff ff93 	bl	8009410 <write_i2c_rw>
	  write_i2c_rw(AFE_Gain,Gain_mask,Outdoor,1);//  Indoor/Outdoor
 80094ea:	2301      	movs	r3, #1
 80094ec:	220e      	movs	r2, #14
 80094ee:	21c1      	movs	r1, #193	; 0xc1
 80094f0:	2000      	movs	r0, #0
 80094f2:	f7ff ff8d 	bl	8009410 <write_i2c_rw>

	  write_i2c_rw(Wdog_thrsld,Thrsld_mask,1,0);//watch_dog_thersold =4
 80094f6:	2300      	movs	r3, #0
 80094f8:	2201      	movs	r2, #1
 80094fa:	21f0      	movs	r1, #240	; 0xf0
 80094fc:	2001      	movs	r0, #1
 80094fe:	f7ff ff87 	bl	8009410 <write_i2c_rw>
	  write_i2c_rw(Wdog_thrsld,Noise_mask,1,4);// Noise=2
 8009502:	2304      	movs	r3, #4
 8009504:	2201      	movs	r2, #1
 8009506:	218f      	movs	r1, #143	; 0x8f
 8009508:	2001      	movs	r0, #1
 800950a:	f7ff ff81 	bl	8009410 <write_i2c_rw>
	  write_i2c_rw(Lightning_reg,Srej_mask,1,0);//spike_rejection= 2
 800950e:	2300      	movs	r3, #0
 8009510:	2201      	movs	r2, #1
 8009512:	21f0      	movs	r1, #240	; 0xf0
 8009514:	2002      	movs	r0, #2
 8009516:	f7ff ff7b 	bl	8009410 <write_i2c_rw>
	  write_i2c_rw(Lightning_reg,Light_mask,0,4); // limit no of lightning strike to issue a interrupt =1
 800951a:	2304      	movs	r3, #4
 800951c:	2200      	movs	r2, #0
 800951e:	21cf      	movs	r1, #207	; 0xcf
 8009520:	2002      	movs	r0, #2
 8009522:	f7ff ff75 	bl	8009410 <write_i2c_rw>
	  write_i2c_rw(AS3935_REG_INT,Disturb_mask,1,5);    //enable 1/ disable 0
 8009526:	2305      	movs	r3, #5
 8009528:	2201      	movs	r2, #1
 800952a:	21df      	movs	r1, #223	; 0xdf
 800952c:	2003      	movs	r0, #3
 800952e:	f7ff ff6f 	bl	8009410 <write_i2c_rw>




  write_i2c_rw(RESET_LIGHT,Wip_all, DIRECT_COMMAND, 0);  //preset to default setting
 8009532:	2300      	movs	r3, #0
 8009534:	2296      	movs	r2, #150	; 0x96
 8009536:	2100      	movs	r1, #0
 8009538:	203c      	movs	r0, #60	; 0x3c
 800953a:	f7ff ff69 	bl	8009410 <write_i2c_rw>
  write_i2c_rw(AFE_Gain,PWD_mask,1,0);
 800953e:	2300      	movs	r3, #0
 8009540:	2201      	movs	r2, #1
 8009542:	21fe      	movs	r1, #254	; 0xfe
 8009544:	2000      	movs	r0, #0
 8009546:	f7ff ff63 	bl	8009410 <write_i2c_rw>
  HAL_Delay(1000);
 800954a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800954e:	f000 ff68 	bl	800a422 <HAL_Delay>
  write_i2c_rw(AFE_Gain,PWD_mask,0,0);
 8009552:	2300      	movs	r3, #0
 8009554:	2200      	movs	r2, #0
 8009556:	21fe      	movs	r1, #254	; 0xfe
 8009558:	2000      	movs	r0, #0
 800955a:	f7ff ff59 	bl	8009410 <write_i2c_rw>
  write_i2c_rw(AS3935_REG_TUNE, OSC_mask,0,7);   //LCO route to intr pin 0-no/1-yes
 800955e:	2307      	movs	r3, #7
 8009560:	2200      	movs	r2, #0
 8009562:	211f      	movs	r1, #31
 8009564:	2008      	movs	r0, #8
 8009566:	f7ff ff53 	bl	8009410 <write_i2c_rw>
  write_i2c_rw(AS3935_REG_TUNE, CAP_mask,7,0);
 800956a:	2300      	movs	r3, #0
 800956c:	2207      	movs	r2, #7
 800956e:	21f0      	movs	r1, #240	; 0xf0
 8009570:	2008      	movs	r0, #8
 8009572:	f7ff ff4d 	bl	8009410 <write_i2c_rw>
  write_i2c_rw(CALIB_RCO, Wip_all, DIRECT_COMMAND, 0); //calibrate RCO
 8009576:	2300      	movs	r3, #0
 8009578:	2296      	movs	r2, #150	; 0x96
 800957a:	2100      	movs	r1, #0
 800957c:	203d      	movs	r0, #61	; 0x3d
 800957e:	f7ff ff47 	bl	8009410 <write_i2c_rw>
  write_i2c_rw(AS3935_REG_TUNE, OSC_mask,1,6);
 8009582:	2306      	movs	r3, #6
 8009584:	2201      	movs	r2, #1
 8009586:	211f      	movs	r1, #31
 8009588:	2008      	movs	r0, #8
 800958a:	f7ff ff41 	bl	8009410 <write_i2c_rw>
  HAL_Delay(2);             // calibration
 800958e:	2002      	movs	r0, #2
 8009590:	f000 ff47 	bl	800a422 <HAL_Delay>
  write_i2c_rw(AS3935_REG_TUNE, OSC_mask,0, 6);
 8009594:	2306      	movs	r3, #6
 8009596:	2200      	movs	r2, #0
 8009598:	211f      	movs	r1, #31
 800959a:	2008      	movs	r0, #8
 800959c:	f7ff ff38 	bl	8009410 <write_i2c_rw>
  write_i2c_rw(AFE_Gain,Gain_mask,Outdoor,1);//  Indoor/Outdoor
 80095a0:	2301      	movs	r3, #1
 80095a2:	220e      	movs	r2, #14
 80095a4:	21c1      	movs	r1, #193	; 0xc1
 80095a6:	2000      	movs	r0, #0
 80095a8:	f7ff ff32 	bl	8009410 <write_i2c_rw>
//  write_i2c_rw(AS3935_REG_TUNE, OSC_mask,0,7);   //LCO route to intr pin 0-no/1-yes
//  write_i2c_rw(AS3935_REG_TUNE, CAP_mask,7,0);   // internal cap value =7 (0-15) value vary board to board
  write_i2c_rw(Wdog_thrsld,Thrsld_mask,2,0);//watch_dog_thersold =4
 80095ac:	2300      	movs	r3, #0
 80095ae:	2202      	movs	r2, #2
 80095b0:	21f0      	movs	r1, #240	; 0xf0
 80095b2:	2001      	movs	r0, #1
 80095b4:	f7ff ff2c 	bl	8009410 <write_i2c_rw>
  write_i2c_rw(Wdog_thrsld,Noise_mask,1,4);// Noise=2
 80095b8:	2304      	movs	r3, #4
 80095ba:	2201      	movs	r2, #1
 80095bc:	218f      	movs	r1, #143	; 0x8f
 80095be:	2001      	movs	r0, #1
 80095c0:	f7ff ff26 	bl	8009410 <write_i2c_rw>
  write_i2c_rw(Lightning_reg,Srej_mask,1,0);//spike_rejection= 2
 80095c4:	2300      	movs	r3, #0
 80095c6:	2201      	movs	r2, #1
 80095c8:	21f0      	movs	r1, #240	; 0xf0
 80095ca:	2002      	movs	r0, #2
 80095cc:	f7ff ff20 	bl	8009410 <write_i2c_rw>
  write_i2c_rw(Lightning_reg,Light_mask,1,4); // limit no of lightning strike to issue a interrupt =1
 80095d0:	2304      	movs	r3, #4
 80095d2:	2201      	movs	r2, #1
 80095d4:	21cf      	movs	r1, #207	; 0xcf
 80095d6:	2002      	movs	r0, #2
 80095d8:	f7ff ff1a 	bl	8009410 <write_i2c_rw>
  write_i2c_rw(AS3935_REG_INT,Disturb_mask,1,5);    //enable 1/ disable 0
 80095dc:	2305      	movs	r3, #5
 80095de:	2201      	movs	r2, #1
 80095e0:	21df      	movs	r1, #223	; 0xdf
 80095e2:	2003      	movs	r0, #3
 80095e4:	f7ff ff14 	bl	8009410 <write_i2c_rw>

}
 80095e8:	bf00      	nop
 80095ea:	bd80      	pop	{r7, pc}

080095ec <AS3935_reading_distance>:

uint8_t AS3935_reading_distance(void)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b086      	sub	sp, #24
 80095f0:	af04      	add	r7, sp, #16
	uint8_t Intr_lightning, lightning=0xff;
 80095f2:	23ff      	movs	r3, #255	; 0xff
 80095f4:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Read(&hi2c3,AS3935_IC_ADDRESS,AS3935_REG_INT,I2C_MEMADD_SIZE_8BIT,&Intr_lightning,1,HAL_MAX_DELAY);
 80095f6:	f04f 33ff 	mov.w	r3, #4294967295
 80095fa:	9302      	str	r3, [sp, #8]
 80095fc:	2301      	movs	r3, #1
 80095fe:	9301      	str	r3, [sp, #4]
 8009600:	1dfb      	adds	r3, r7, #7
 8009602:	9300      	str	r3, [sp, #0]
 8009604:	2301      	movs	r3, #1
 8009606:	2203      	movs	r2, #3
 8009608:	2100      	movs	r1, #0
 800960a:	481d      	ldr	r0, [pc, #116]	; (8009680 <AS3935_reading_distance+0x94>)
 800960c:	f006 fda0 	bl	8010150 <HAL_I2C_Mem_Read>
	 printf("lightining_intr: %d \n",Intr_lightning);
 8009610:	79fb      	ldrb	r3, [r7, #7]
 8009612:	4619      	mov	r1, r3
 8009614:	481b      	ldr	r0, [pc, #108]	; (8009684 <AS3935_reading_distance+0x98>)
 8009616:	f012 f877 	bl	801b708 <iprintf>
	 if((Intr_lightning & 0x08)==0x08)
 800961a:	79fb      	ldrb	r3, [r7, #7]
 800961c:	f003 0308 	and.w	r3, r3, #8
 8009620:	2b00      	cmp	r3, #0
 8009622:	d017      	beq.n	8009654 <AS3935_reading_distance+0x68>
	    {
		 HAL_I2C_Mem_Read(&hi2c3,AS3935_IC_ADDRESS,AS3935_REG_DIST,I2C_MEMADD_SIZE_8BIT,&lightning,1,HAL_MAX_DELAY);
 8009624:	f04f 33ff 	mov.w	r3, #4294967295
 8009628:	9302      	str	r3, [sp, #8]
 800962a:	2301      	movs	r3, #1
 800962c:	9301      	str	r3, [sp, #4]
 800962e:	1dbb      	adds	r3, r7, #6
 8009630:	9300      	str	r3, [sp, #0]
 8009632:	2301      	movs	r3, #1
 8009634:	2207      	movs	r2, #7
 8009636:	2100      	movs	r1, #0
 8009638:	4811      	ldr	r0, [pc, #68]	; (8009680 <AS3935_reading_distance+0x94>)
 800963a:	f006 fd89 	bl	8010150 <HAL_I2C_Mem_Read>
		 printf("lightining_data: %d \n",lightning);
 800963e:	79bb      	ldrb	r3, [r7, #6]
 8009640:	4619      	mov	r1, r3
 8009642:	4811      	ldr	r0, [pc, #68]	; (8009688 <AS3935_reading_distance+0x9c>)
 8009644:	f012 f860 	bl	801b708 <iprintf>
		 lightning &=Distance_mask;
 8009648:	79bb      	ldrb	r3, [r7, #6]
 800964a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800964e:	b2db      	uxtb	r3, r3
 8009650:	71bb      	strb	r3, [r7, #6]
 8009652:	e010      	b.n	8009676 <AS3935_reading_distance+0x8a>
	    }
	 else if((Intr_lightning & 0x04)==0x04)
 8009654:	79fb      	ldrb	r3, [r7, #7]
 8009656:	f003 0304 	and.w	r3, r3, #4
 800965a:	2b00      	cmp	r3, #0
 800965c:	d003      	beq.n	8009666 <AS3935_reading_distance+0x7a>
	           {
	             printf("Disturber Detected"); //debug
 800965e:	480b      	ldr	r0, [pc, #44]	; (800968c <AS3935_reading_distance+0xa0>)
 8009660:	f012 f852 	bl	801b708 <iprintf>
 8009664:	e007      	b.n	8009676 <AS3935_reading_distance+0x8a>
	           }
	         else if((Intr_lightning&0x01)==0x01)
 8009666:	79fb      	ldrb	r3, [r7, #7]
 8009668:	f003 0301 	and.w	r3, r3, #1
 800966c:	2b00      	cmp	r3, #0
 800966e:	d002      	beq.n	8009676 <AS3935_reading_distance+0x8a>
	           {
	             printf("\nNoise level to high\n");//debug
 8009670:	4807      	ldr	r0, [pc, #28]	; (8009690 <AS3935_reading_distance+0xa4>)
 8009672:	f012 f8b7 	bl	801b7e4 <puts>
	           }
	 return lightning;
 8009676:	79bb      	ldrb	r3, [r7, #6]

}
 8009678:	4618      	mov	r0, r3
 800967a:	3708      	adds	r7, #8
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}
 8009680:	200005fc 	.word	0x200005fc
 8009684:	08020988 	.word	0x08020988
 8009688:	080209a0 	.word	0x080209a0
 800968c:	080209b8 	.word	0x080209b8
 8009690:	080209cc 	.word	0x080209cc

08009694 <_Sleep>:
	  int                     scope;
	  ErrorStringGenerator_t  errStrFn;
	} lastError;

static void
_Sleep ( uint32_t  ms ) {
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f000 fec0 	bl	800a422 <HAL_Delay>
  /** This function should do nothing but returning after the number of
   *  milliseconds passed in the 'ms' argument. */
}
 80096a2:	bf00      	nop
 80096a4:	3708      	adds	r7, #8
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <_I2CRead>:


static int
_I2CRead ( void*     handle, uint8_t  slAddr, 
           uint8_t*  wrData, int      wrLen, 
           uint8_t*  rdData, int      rdLen ) {
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b086      	sub	sp, #24
 80096ae:	af02      	add	r7, sp, #8
 80096b0:	60f8      	str	r0, [r7, #12]
 80096b2:	607a      	str	r2, [r7, #4]
 80096b4:	603b      	str	r3, [r7, #0]
 80096b6:	460b      	mov	r3, r1
 80096b8:	72fb      	strb	r3, [r7, #11]
   *    - I2C Restart  ( no stop before this start condition! )
   *  - Send: SlaveAddres + READ
   *  - Receive: rdLen bytes into rdData
   *  - I2CStop
   */
	 if (wrLen != 0) {
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d00c      	beq.n	80096da <_I2CRead+0x30>
	        // Send: slAddr + WRITE
	        HAL_I2C_Master_Transmit(handle, slAddr << 1, wrData, wrLen, HAL_MAX_DELAY);
 80096c0:	7afb      	ldrb	r3, [r7, #11]
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	005b      	lsls	r3, r3, #1
 80096c6:	b299      	uxth	r1, r3
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	f04f 32ff 	mov.w	r2, #4294967295
 80096d0:	9200      	str	r2, [sp, #0]
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	68f8      	ldr	r0, [r7, #12]
 80096d6:	f006 fa19 	bl	800fb0c <HAL_I2C_Master_Transmit>
	        // I2C Restart (no stop before this start condition!)
	        // Note: STM32 HAL handles restart condition automatically
	    }

	    // Send: SlaveAddress + READ
	    HAL_I2C_Master_Receive(handle, ((slAddr << 1) | 1), rdData, rdLen, HAL_MAX_DELAY);
 80096da:	7afb      	ldrb	r3, [r7, #11]
 80096dc:	005b      	lsls	r3, r3, #1
 80096de:	b21b      	sxth	r3, r3
 80096e0:	f043 0301 	orr.w	r3, r3, #1
 80096e4:	b21b      	sxth	r3, r3
 80096e6:	b299      	uxth	r1, r3
 80096e8:	69fb      	ldr	r3, [r7, #28]
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	f04f 32ff 	mov.w	r2, #4294967295
 80096f0:	9200      	str	r2, [sp, #0]
 80096f2:	69ba      	ldr	r2, [r7, #24]
 80096f4:	68f8      	ldr	r0, [r7, #12]
 80096f6:	f006 fb21 	bl	800fd3c <HAL_I2C_Master_Receive>

	    // I2C Stop
	    // Note: STM32 HAL handles stop condition automatically

	    return 0; // Return success status (you can customize this)
 80096fa:	2300      	movs	r3, #0
	}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3710      	adds	r7, #16
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <_I2CWrite>:


static int
_I2CWrite ( void*     handle,  uint8_t  slAddr, 
            uint8_t*  wrData1, int      wrLen1, 
            uint8_t*  wrData2, int      wrLen2 ) {
 8009704:	b580      	push	{r7, lr}
 8009706:	b086      	sub	sp, #24
 8009708:	af02      	add	r7, sp, #8
 800970a:	60f8      	str	r0, [r7, #12]
 800970c:	607a      	str	r2, [r7, #4]
 800970e:	603b      	str	r3, [r7, #0]
 8009710:	460b      	mov	r3, r1
 8009712:	72fb      	strb	r3, [r7, #11]
   *  - if wrLen2 != 0;
   *    - Send: wrLen2 bytes from wrData2
   *  - I2CStop
   */

	 if (wrLen1 != 0) {
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d00c      	beq.n	8009734 <_I2CWrite+0x30>
	        // Send: slAddr + WRITE
	        HAL_I2C_Master_Transmit(handle, slAddr << 1, wrData1, wrLen1, HAL_MAX_DELAY);
 800971a:	7afb      	ldrb	r3, [r7, #11]
 800971c:	b29b      	uxth	r3, r3
 800971e:	005b      	lsls	r3, r3, #1
 8009720:	b299      	uxth	r1, r3
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	b29b      	uxth	r3, r3
 8009726:	f04f 32ff 	mov.w	r2, #4294967295
 800972a:	9200      	str	r2, [sp, #0]
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	68f8      	ldr	r0, [r7, #12]
 8009730:	f006 f9ec 	bl	800fb0c <HAL_I2C_Master_Transmit>
	        // I2C Restart (no stop before this start condition!)
	        // Note: STM32 HAL handles restart condition automatically
	    }
	 if (wrLen2 != 0) {
 8009734:	69fb      	ldr	r3, [r7, #28]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d00c      	beq.n	8009754 <_I2CWrite+0x50>
	 	        // Send: slAddr + WRITE
	 	        HAL_I2C_Master_Transmit(handle, slAddr << 1, wrData2, wrLen2, HAL_MAX_DELAY);
 800973a:	7afb      	ldrb	r3, [r7, #11]
 800973c:	b29b      	uxth	r3, r3
 800973e:	005b      	lsls	r3, r3, #1
 8009740:	b299      	uxth	r1, r3
 8009742:	69fb      	ldr	r3, [r7, #28]
 8009744:	b29b      	uxth	r3, r3
 8009746:	f04f 32ff 	mov.w	r2, #4294967295
 800974a:	9200      	str	r2, [sp, #0]
 800974c:	69ba      	ldr	r2, [r7, #24]
 800974e:	68f8      	ldr	r0, [r7, #12]
 8009750:	f006 f9dc 	bl	800fb0c <HAL_I2C_Master_Transmit>
	 	        // I2C Restart (no stop before this start condition!)
	 	        // Note: STM32 HAL handles restart condition automatically
	 	    }
}
 8009754:	bf00      	nop
 8009756:	4618      	mov	r0, r3
 8009758:	3710      	adds	r7, #16
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}

0800975e <_Reset>:


static int
_Reset ( ) {
 800975e:	b480      	push	{r7}
 8009760:	af00      	add	r7, sp, #0
  /** This function shall pulse the reset pin of the sensor. 
   * @note Refer to the datasheet of the sensor(s) being interfaced for reset
   * timing requirements.
   */
}
 8009762:	bf00      	nop
 8009764:	4618      	mov	r0, r3
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr
	...

08009770 <HAL__Init>:


int HAL__Init ( Interface_t*  hal ) {
 8009770:	b480      	push	{r7}
 8009772:	b085      	sub	sp, #20
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  int  errorCode = 0;
 8009778:	2300      	movs	r3, #0
 800977a:	60fb      	str	r3, [r7, #12]

  /* Initialze your hardware: */
 // errorCode = Error_Handler( );

  /* The handle assigned below will be passed to _I2Cxxx functions */
  hal -> handle =&hi2c3;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	4a0a      	ldr	r2, [pc, #40]	; (80097a8 <HAL__Init+0x38>)
 8009780:	601a      	str	r2, [r3, #0]

  /* Populate the hal object. Some of the functions may be optional
   *  for the product you're trying to interface. Please check the
   *  firmware documentation of your product.
   * If a function is not used, it must be set to NULL. */
  hal -> msSleep  = _Sleep;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	4a09      	ldr	r2, [pc, #36]	; (80097ac <HAL__Init+0x3c>)
 8009786:	60da      	str	r2, [r3, #12]
  hal -> i2cRead  = _I2CRead;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	4a09      	ldr	r2, [pc, #36]	; (80097b0 <HAL__Init+0x40>)
 800978c:	605a      	str	r2, [r3, #4]
  hal -> i2cWrite = _I2CWrite;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	4a08      	ldr	r2, [pc, #32]	; (80097b4 <HAL__Init+0x44>)
 8009792:	609a      	str	r2, [r3, #8]
  hal -> reset    = _Reset;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	4a08      	ldr	r2, [pc, #32]	; (80097b8 <HAL__Init+0x48>)
 8009798:	611a      	str	r2, [r3, #16]

  return errorCode;
 800979a:	68fb      	ldr	r3, [r7, #12]
}
 800979c:	4618      	mov	r0, r3
 800979e:	3714      	adds	r7, #20
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr
 80097a8:	200005fc 	.word	0x200005fc
 80097ac:	08009695 	.word	0x08009695
 80097b0:	080096ab 	.word	0x080096ab
 80097b4:	08009705 	.word	0x08009705
 80097b8:	0800975f 	.word	0x0800975f

080097bc <HAL_HandleError>:

  return errorCode;
}

void
HAL_HandleError ( int  errorCode, void const*  context ) {
 80097bc:	b580      	push	{r7, lr}
 80097be:	b0b8      	sub	sp, #224	; 0xe0
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
  /** Define what happens in case of error */
	char const* contextV = ( char const* ) context;
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	  int  error, scope;
	  char  msg [ 200 ];
	  if ( errorCode ) {
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d023      	beq.n	800981a <HAL_HandleError+0x5e>
	   printf ( "Error %d\n",errorCode );
 80097d2:	6879      	ldr	r1, [r7, #4]
 80097d4:	4813      	ldr	r0, [pc, #76]	; (8009824 <HAL_HandleError+0x68>)
 80097d6:	f011 ff97 	bl	801b708 <iprintf>
	   printf(" received during " );
 80097da:	4813      	ldr	r0, [pc, #76]	; (8009828 <HAL_HandleError+0x6c>)
 80097dc:	f011 ff94 	bl	801b708 <iprintf>
	   printf( ( char const* ) contextV );
 80097e0:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80097e4:	f011 ff90 	bl	801b708 <iprintf>
	   printf( "  " );
 80097e8:	4810      	ldr	r0, [pc, #64]	; (800982c <HAL_HandleError+0x70>)
 80097ea:	f011 ff8d 	bl	801b708 <iprintf>
	   HAL_GetErrorInfo (  &error, &scope, msg, 200 );
 80097ee:	f107 020c 	add.w	r2, r7, #12
 80097f2:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 80097f6:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 80097fa:	23c8      	movs	r3, #200	; 0xc8
 80097fc:	f000 f836 	bl	800986c <HAL_GetErrorInfo>
	   printf( HAL_GetErrorInfo (  &error, &scope, msg, 200 ) );
 8009800:	f107 020c 	add.w	r2, r7, #12
 8009804:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 8009808:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 800980c:	23c8      	movs	r3, #200	; 0xc8
 800980e:	f000 f82d 	bl	800986c <HAL_GetErrorInfo>
 8009812:	4603      	mov	r3, r0
 8009814:	4618      	mov	r0, r3
 8009816:	f011 ff77 	bl	801b708 <iprintf>
	  }
	//  while ( 1 );
}
 800981a:	bf00      	nop
 800981c:	37e0      	adds	r7, #224	; 0xe0
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	080209e4 	.word	0x080209e4
 8009828:	080209f0 	.word	0x080209f0
 800982c:	08020a04 	.word	0x08020a04

08009830 <HAL_SetError>:


	int
	HAL_SetError ( int  error, int  scope, ErrorStringGenerator_t  fn ) {
 8009830:	b480      	push	{r7}
 8009832:	b085      	sub	sp, #20
 8009834:	af00      	add	r7, sp, #0
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	60b9      	str	r1, [r7, #8]
 800983a:	607a      	str	r2, [r7, #4]
	  lastError . error    = error;
 800983c:	4a0a      	ldr	r2, [pc, #40]	; (8009868 <HAL_SetError+0x38>)
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	6013      	str	r3, [r2, #0]
	  lastError . scope    = scope;
 8009842:	4a09      	ldr	r2, [pc, #36]	; (8009868 <HAL_SetError+0x38>)
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	6053      	str	r3, [r2, #4]
	  lastError . errStrFn = fn;
 8009848:	4a07      	ldr	r2, [pc, #28]	; (8009868 <HAL_SetError+0x38>)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6093      	str	r3, [r2, #8]

	  if ( scope == esSensor )
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d101      	bne.n	8009858 <HAL_SetError+0x28>
	    return error;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	e001      	b.n	800985c <HAL_SetError+0x2c>
	  else
	    return ecHALError;
 8009858:	f44f 7380 	mov.w	r3, #256	; 0x100
	}
 800985c:	4618      	mov	r0, r3
 800985e:	3714      	adds	r7, #20
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr
 8009868:	20000338 	.word	0x20000338

0800986c <HAL_GetErrorInfo>:

	char const*
	HAL_GetErrorInfo ( int*  error, int*  scope, char*  str, int  bufLen ) {
 800986c:	b590      	push	{r4, r7, lr}
 800986e:	b085      	sub	sp, #20
 8009870:	af00      	add	r7, sp, #0
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	60b9      	str	r1, [r7, #8]
 8009876:	607a      	str	r2, [r7, #4]
 8009878:	603b      	str	r3, [r7, #0]
	  *error = lastError . error;
 800987a:	4b14      	ldr	r3, [pc, #80]	; (80098cc <HAL_GetErrorInfo+0x60>)
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	601a      	str	r2, [r3, #0]
	  *scope = lastError . scope;
 8009882:	4b12      	ldr	r3, [pc, #72]	; (80098cc <HAL_GetErrorInfo+0x60>)
 8009884:	685a      	ldr	r2, [r3, #4]
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	601a      	str	r2, [r3, #0]
	  if ( str && bufLen ) {
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d017      	beq.n	80098c0 <HAL_GetErrorInfo+0x54>
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d014      	beq.n	80098c0 <HAL_GetErrorInfo+0x54>
	    if ( lastError . errStrFn )
 8009896:	4b0d      	ldr	r3, [pc, #52]	; (80098cc <HAL_GetErrorInfo+0x60>)
 8009898:	689b      	ldr	r3, [r3, #8]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d009      	beq.n	80098b2 <HAL_GetErrorInfo+0x46>
	      lastError . errStrFn ( lastError . error, lastError . scope, str, bufLen );
 800989e:	4b0b      	ldr	r3, [pc, #44]	; (80098cc <HAL_GetErrorInfo+0x60>)
 80098a0:	689c      	ldr	r4, [r3, #8]
 80098a2:	4b0a      	ldr	r3, [pc, #40]	; (80098cc <HAL_GetErrorInfo+0x60>)
 80098a4:	6818      	ldr	r0, [r3, #0]
 80098a6:	4b09      	ldr	r3, [pc, #36]	; (80098cc <HAL_GetErrorInfo+0x60>)
 80098a8:	6859      	ldr	r1, [r3, #4]
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	47a0      	blx	r4
 80098b0:	e004      	b.n	80098bc <HAL_GetErrorInfo+0x50>
	    else
	      printf ( str, bufLen, "No additional error information available" );
 80098b2:	4a07      	ldr	r2, [pc, #28]	; (80098d0 <HAL_GetErrorInfo+0x64>)
 80098b4:	6839      	ldr	r1, [r7, #0]
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f011 ff26 	bl	801b708 <iprintf>
	    return str;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	e000      	b.n	80098c2 <HAL_GetErrorInfo+0x56>
	  }
	  else
	    return NULL;
 80098c0:	2300      	movs	r3, #0
	}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3714      	adds	r7, #20
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd90      	pop	{r4, r7, pc}
 80098ca:	bf00      	nop
 80098cc:	20000338 	.word	0x20000338
 80098d0:	08020a08 	.word	0x08020a08

080098d4 <HAL_GetErrorString>:


	char const*
	HAL_GetErrorString ( int  error, int scope, char*  str, int  bufLen ) {
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b09e      	sub	sp, #120	; 0x78
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	607a      	str	r2, [r7, #4]
 80098e0:	603b      	str	r3, [r7, #0]
	  char buf [ 100 ];
	  char const*  msg;
	  switch ( error ) {
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	3b01      	subs	r3, #1
 80098e6:	2b05      	cmp	r3, #5
 80098e8:	d820      	bhi.n	800992c <HAL_GetErrorString+0x58>
 80098ea:	a201      	add	r2, pc, #4	; (adr r2, 80098f0 <HAL_GetErrorString+0x1c>)
 80098ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f0:	08009909 	.word	0x08009909
 80098f4:	0800990f 	.word	0x0800990f
 80098f8:	08009915 	.word	0x08009915
 80098fc:	0800991b 	.word	0x0800991b
 8009900:	08009921 	.word	0x08009921
 8009904:	08009927 	.word	0x08009927
	  case  heNoInterface:
	    msg = "Interface not found";
 8009908:	4b13      	ldr	r3, [pc, #76]	; (8009958 <HAL_GetErrorString+0x84>)
 800990a:	677b      	str	r3, [r7, #116]	; 0x74
	    break;
 800990c:	e018      	b.n	8009940 <HAL_GetErrorString+0x6c>
	  case  heNotImplemented:
	    msg = "Function not implemented";
 800990e:	4b13      	ldr	r3, [pc, #76]	; (800995c <HAL_GetErrorString+0x88>)
 8009910:	677b      	str	r3, [r7, #116]	; 0x74
	    break;
 8009912:	e015      	b.n	8009940 <HAL_GetErrorString+0x6c>
	  case  heI2CReadMissing:
	    msg = "I2CRead function pointer not set in interface object.";
 8009914:	4b12      	ldr	r3, [pc, #72]	; (8009960 <HAL_GetErrorString+0x8c>)
 8009916:	677b      	str	r3, [r7, #116]	; 0x74
	    break;
 8009918:	e012      	b.n	8009940 <HAL_GetErrorString+0x6c>
	  case  heI2CWriteMissing:
	    msg = "I2CWrite function pointer not set in interface object.";
 800991a:	4b12      	ldr	r3, [pc, #72]	; (8009964 <HAL_GetErrorString+0x90>)
 800991c:	677b      	str	r3, [r7, #116]	; 0x74
	    break;
 800991e:	e00f      	b.n	8009940 <HAL_GetErrorString+0x6c>
	  case  heSleepMissing:
	    msg = "msSleep function pointer not set in interface object.";
 8009920:	4b11      	ldr	r3, [pc, #68]	; (8009968 <HAL_GetErrorString+0x94>)
 8009922:	677b      	str	r3, [r7, #116]	; 0x74
	    break;
 8009924:	e00c      	b.n	8009940 <HAL_GetErrorString+0x6c>
	  case  heResetMissing:
	    msg = "reset function pointer not set in interface object.";
 8009926:	4b11      	ldr	r3, [pc, #68]	; (800996c <HAL_GetErrorString+0x98>)
 8009928:	677b      	str	r3, [r7, #116]	; 0x74
	    break;
 800992a:	e009      	b.n	8009940 <HAL_GetErrorString+0x6c>
	  default:
	    printf ( buf, "Unknown error %d", error );
 800992c:	f107 0310 	add.w	r3, r7, #16
 8009930:	68fa      	ldr	r2, [r7, #12]
 8009932:	490f      	ldr	r1, [pc, #60]	; (8009970 <HAL_GetErrorString+0x9c>)
 8009934:	4618      	mov	r0, r3
 8009936:	f011 fee7 	bl	801b708 <iprintf>
	    msg = buf;
 800993a:	f107 0310 	add.w	r3, r7, #16
 800993e:	677b      	str	r3, [r7, #116]	; 0x74
	  }
	  printf ( str, bufLen, "HAL Error: %s", msg );
 8009940:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009942:	4a0c      	ldr	r2, [pc, #48]	; (8009974 <HAL_GetErrorString+0xa0>)
 8009944:	6839      	ldr	r1, [r7, #0]
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f011 fede 	bl	801b708 <iprintf>
	  return str;
 800994c:	687b      	ldr	r3, [r7, #4]
	}
 800994e:	4618      	mov	r0, r3
 8009950:	3778      	adds	r7, #120	; 0x78
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop
 8009958:	08020a34 	.word	0x08020a34
 800995c:	08020a48 	.word	0x08020a48
 8009960:	08020a64 	.word	0x08020a64
 8009964:	08020a9c 	.word	0x08020a9c
 8009968:	08020ad4 	.word	0x08020ad4
 800996c:	08020b0c 	.word	0x08020b0c
 8009970:	08020b40 	.word	0x08020b40
 8009974:	08020b54 	.word	0x08020b54

08009978 <LPS25HB_INIT>:
 */
#include "LPS25hb.h"
#include "string.h"
#include "i2c.h"
void LPS25HB_INIT(void)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b086      	sub	sp, #24
 800997c:	af04      	add	r7, sp, #16
	uint8_t cmd  =0x04;
 800997e:	2304      	movs	r3, #4
 8009980:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c3,LPS25HB_I2C_ADD_L, LPS25HB_CTRL2 ,I2C_MEMADD_SIZE_8BIT, &cmd,1,1000);
 8009982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009986:	9302      	str	r3, [sp, #8]
 8009988:	2301      	movs	r3, #1
 800998a:	9301      	str	r3, [sp, #4]
 800998c:	1dfb      	adds	r3, r7, #7
 800998e:	9300      	str	r3, [sp, #0]
 8009990:	2301      	movs	r3, #1
 8009992:	2221      	movs	r2, #33	; 0x21
 8009994:	21b8      	movs	r1, #184	; 0xb8
 8009996:	480c      	ldr	r0, [pc, #48]	; (80099c8 <LPS25HB_INIT+0x50>)
 8009998:	f006 fac6 	bl	800ff28 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 800999c:	200a      	movs	r0, #10
 800999e:	f000 fd40 	bl	800a422 <HAL_Delay>
	cmd = 0x84;
 80099a2:	2384      	movs	r3, #132	; 0x84
 80099a4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c3,LPS25HB_I2C_ADD_L, LPS25HB_CTRL1 ,I2C_MEMADD_SIZE_8BIT, &cmd,1,1000);
 80099a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80099aa:	9302      	str	r3, [sp, #8]
 80099ac:	2301      	movs	r3, #1
 80099ae:	9301      	str	r3, [sp, #4]
 80099b0:	1dfb      	adds	r3, r7, #7
 80099b2:	9300      	str	r3, [sp, #0]
 80099b4:	2301      	movs	r3, #1
 80099b6:	2220      	movs	r2, #32
 80099b8:	21b8      	movs	r1, #184	; 0xb8
 80099ba:	4803      	ldr	r0, [pc, #12]	; (80099c8 <LPS25HB_INIT+0x50>)
 80099bc:	f006 fab4 	bl	800ff28 <HAL_I2C_Mem_Write>
}
 80099c0:	bf00      	nop
 80099c2:	3708      	adds	r7, #8
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}
 80099c8:	200005fc 	.word	0x200005fc

080099cc <LPS25HB_GET_DATA>:

uint8_t LPS25HB_GET_DATA(float *data)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b08a      	sub	sp, #40	; 0x28
 80099d0:	af04      	add	r7, sp, #16
 80099d2:	6078      	str	r0, [r7, #4]
	uint8_t reg,cmd  =0x01;
 80099d4:	2301      	movs	r3, #1
 80099d6:	74bb      	strb	r3, [r7, #18]
	uint8_t Raw_data[3];
	int32_t temp;
	HAL_I2C_Mem_Write(&hi2c3,LPS25HB_I2C_ADD_L, LPS25HB_CTRL2 ,I2C_MEMADD_SIZE_8BIT, &cmd,1,1000);
 80099d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80099dc:	9302      	str	r3, [sp, #8]
 80099de:	2301      	movs	r3, #1
 80099e0:	9301      	str	r3, [sp, #4]
 80099e2:	f107 0312 	add.w	r3, r7, #18
 80099e6:	9300      	str	r3, [sp, #0]
 80099e8:	2301      	movs	r3, #1
 80099ea:	2221      	movs	r2, #33	; 0x21
 80099ec:	21b8      	movs	r1, #184	; 0xb8
 80099ee:	4851      	ldr	r0, [pc, #324]	; (8009b34 <LPS25HB_GET_DATA+0x168>)
 80099f0:	f006 fa9a 	bl	800ff28 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(&hi2c3, LPS25HB_I2C_ADD_H, LPS25HB_STATUS,I2C_MEMADD_SIZE_8BIT,&reg, 1,1000);
 80099f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80099f8:	9302      	str	r3, [sp, #8]
 80099fa:	2301      	movs	r3, #1
 80099fc:	9301      	str	r3, [sp, #4]
 80099fe:	f107 0313 	add.w	r3, r7, #19
 8009a02:	9300      	str	r3, [sp, #0]
 8009a04:	2301      	movs	r3, #1
 8009a06:	2227      	movs	r2, #39	; 0x27
 8009a08:	21b9      	movs	r1, #185	; 0xb9
 8009a0a:	484a      	ldr	r0, [pc, #296]	; (8009b34 <LPS25HB_GET_DATA+0x168>)
 8009a0c:	f006 fba0 	bl	8010150 <HAL_I2C_Mem_Read>
	if(reg==0x03||0x33)
	{
		HAL_I2C_Mem_Read(&hi2c3,LPS25HB_I2C_ADD_H, LPS25HB_PRESS_OUT_XL,I2C_MEMADD_SIZE_8BIT,&Raw_data[0],1,1000);
 8009a10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009a14:	9302      	str	r3, [sp, #8]
 8009a16:	2301      	movs	r3, #1
 8009a18:	9301      	str	r3, [sp, #4]
 8009a1a:	f107 030c 	add.w	r3, r7, #12
 8009a1e:	9300      	str	r3, [sp, #0]
 8009a20:	2301      	movs	r3, #1
 8009a22:	2228      	movs	r2, #40	; 0x28
 8009a24:	21b9      	movs	r1, #185	; 0xb9
 8009a26:	4843      	ldr	r0, [pc, #268]	; (8009b34 <LPS25HB_GET_DATA+0x168>)
 8009a28:	f006 fb92 	bl	8010150 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&hi2c3,LPS25HB_I2C_ADD_H, LPS25HB_PRESS_OUT_L,I2C_MEMADD_SIZE_8BIT,&Raw_data[1], 1,1000);
 8009a2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009a30:	9302      	str	r3, [sp, #8]
 8009a32:	2301      	movs	r3, #1
 8009a34:	9301      	str	r3, [sp, #4]
 8009a36:	f107 030c 	add.w	r3, r7, #12
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	9300      	str	r3, [sp, #0]
 8009a3e:	2301      	movs	r3, #1
 8009a40:	2229      	movs	r2, #41	; 0x29
 8009a42:	21b9      	movs	r1, #185	; 0xb9
 8009a44:	483b      	ldr	r0, [pc, #236]	; (8009b34 <LPS25HB_GET_DATA+0x168>)
 8009a46:	f006 fb83 	bl	8010150 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&hi2c3,LPS25HB_I2C_ADD_H, LPS25HB_PRESS_OUT_H,I2C_MEMADD_SIZE_8BIT,&Raw_data[2], 1,1000);
 8009a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009a4e:	9302      	str	r3, [sp, #8]
 8009a50:	2301      	movs	r3, #1
 8009a52:	9301      	str	r3, [sp, #4]
 8009a54:	f107 030c 	add.w	r3, r7, #12
 8009a58:	3302      	adds	r3, #2
 8009a5a:	9300      	str	r3, [sp, #0]
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	222a      	movs	r2, #42	; 0x2a
 8009a60:	21b9      	movs	r1, #185	; 0xb9
 8009a62:	4834      	ldr	r0, [pc, #208]	; (8009b34 <LPS25HB_GET_DATA+0x168>)
 8009a64:	f006 fb74 	bl	8010150 <HAL_I2C_Mem_Read>
		if(Raw_data[2]>>7 == 0x01){
 8009a68:	7bbb      	ldrb	r3, [r7, #14]
 8009a6a:	09db      	lsrs	r3, r3, #7
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d101      	bne.n	8009a76 <LPS25HB_GET_DATA+0xaa>
			return 0x01;
 8009a72:	2301      	movs	r3, #1
 8009a74:	e05a      	b.n	8009b2c <LPS25HB_GET_DATA+0x160>
		}
		//printf("data %x\n\r",((Raw_data[2]<<16)|(Raw_data[1]<<8)|(Raw_data[0])));
		temp = ((Raw_data[2]<<16)|(Raw_data[1]<<8)|(Raw_data[0]));
 8009a76:	7bbb      	ldrb	r3, [r7, #14]
 8009a78:	041a      	lsls	r2, r3, #16
 8009a7a:	7b7b      	ldrb	r3, [r7, #13]
 8009a7c:	021b      	lsls	r3, r3, #8
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	7b3a      	ldrb	r2, [r7, #12]
 8009a82:	4313      	orrs	r3, r2
 8009a84:	617b      	str	r3, [r7, #20]
		data[0]=(float)temp/(float)4096.0;
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	ee07 3a90 	vmov	s15, r3
 8009a8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009a90:	eddf 6a29 	vldr	s13, [pc, #164]	; 8009b38 <LPS25HB_GET_DATA+0x16c>
 8009a94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	edc3 7a00 	vstr	s15, [r3]
		//printf("pressure %f \n",data[0]);
		memset(&Raw_data,0x00,sizeof(int32_t));
 8009a9e:	f107 030c 	add.w	r3, r7, #12
 8009aa2:	2204      	movs	r2, #4
 8009aa4:	2100      	movs	r1, #0
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f011 ffd0 	bl	801ba4c <memset>
		temp=0x00;
 8009aac:	2300      	movs	r3, #0
 8009aae:	617b      	str	r3, [r7, #20]
		HAL_I2C_Mem_Read(&hi2c3,LPS25HB_I2C_ADD_H, LPS25HB_TEMP_OUT_L,I2C_MEMADD_SIZE_8BIT,&Raw_data[0],1,1000);
 8009ab0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009ab4:	9302      	str	r3, [sp, #8]
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	9301      	str	r3, [sp, #4]
 8009aba:	f107 030c 	add.w	r3, r7, #12
 8009abe:	9300      	str	r3, [sp, #0]
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	222b      	movs	r2, #43	; 0x2b
 8009ac4:	21b9      	movs	r1, #185	; 0xb9
 8009ac6:	481b      	ldr	r0, [pc, #108]	; (8009b34 <LPS25HB_GET_DATA+0x168>)
 8009ac8:	f006 fb42 	bl	8010150 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&hi2c3,LPS25HB_I2C_ADD_H, LPS25HB_TEMP_OUT_H,I2C_MEMADD_SIZE_8BIT,&Raw_data[1], 1,1000);
 8009acc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009ad0:	9302      	str	r3, [sp, #8]
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	9301      	str	r3, [sp, #4]
 8009ad6:	f107 030c 	add.w	r3, r7, #12
 8009ada:	3301      	adds	r3, #1
 8009adc:	9300      	str	r3, [sp, #0]
 8009ade:	2301      	movs	r3, #1
 8009ae0:	222c      	movs	r2, #44	; 0x2c
 8009ae2:	21b9      	movs	r1, #185	; 0xb9
 8009ae4:	4813      	ldr	r0, [pc, #76]	; (8009b34 <LPS25HB_GET_DATA+0x168>)
 8009ae6:	f006 fb33 	bl	8010150 <HAL_I2C_Mem_Read>
	    temp= ((Raw_data[1]<<8)|(Raw_data[0]));
 8009aea:	7b7b      	ldrb	r3, [r7, #13]
 8009aec:	021b      	lsls	r3, r3, #8
 8009aee:	7b3a      	ldrb	r2, [r7, #12]
 8009af0:	4313      	orrs	r3, r2
 8009af2:	617b      	str	r3, [r7, #20]
	    if(Raw_data[1]>>7 == 0x01)
 8009af4:	7b7b      	ldrb	r3, [r7, #13]
 8009af6:	09db      	lsrs	r3, r3, #7
 8009af8:	b2db      	uxtb	r3, r3
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d104      	bne.n	8009b08 <LPS25HB_GET_DATA+0x13c>
	    {
	    	 //printf("temp %x \n",temp);
	    	temp = ((~temp)&0x0000ffff) + 1;
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	43db      	mvns	r3, r3
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	3301      	adds	r3, #1
 8009b06:	617b      	str	r3, [r7, #20]
	    	// printf("temp %d \n",temp);
	    }
	    data[1]= (float)((float)temp/(float)480) + 42.5;
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	ee07 3a90 	vmov	s15, r3
 8009b0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009b12:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8009b3c <LPS25HB_GET_DATA+0x170>
 8009b16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	3304      	adds	r3, #4
 8009b1e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8009b40 <LPS25HB_GET_DATA+0x174>
 8009b22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009b26:	edc3 7a00 	vstr	s15, [r3]
	}
	else
	{
		return 0x02;
	}
 return 0;
 8009b2a:	2300      	movs	r3, #0
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3718      	adds	r7, #24
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}
 8009b34:	200005fc 	.word	0x200005fc
 8009b38:	45800000 	.word	0x45800000
 8009b3c:	43f00000 	.word	0x43f00000
 8009b40:	422a0000 	.word	0x422a0000

08009b44 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b085      	sub	sp, #20
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8009b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8009b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	4013      	ands	r3, r2
 8009b66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009b68:	68fb      	ldr	r3, [r7, #12]
}
 8009b6a:	bf00      	nop
 8009b6c:	3714      	adds	r7, #20
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr
	...

08009b78 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b086      	sub	sp, #24
 8009b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8009b7e:	463b      	mov	r3, r7
 8009b80:	2200      	movs	r2, #0
 8009b82:	601a      	str	r2, [r3, #0]
 8009b84:	605a      	str	r2, [r3, #4]
 8009b86:	609a      	str	r2, [r3, #8]
 8009b88:	60da      	str	r2, [r3, #12]
 8009b8a:	611a      	str	r2, [r3, #16]
 8009b8c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8009b8e:	4b29      	ldr	r3, [pc, #164]	; (8009c34 <MX_ADC1_Init+0xbc>)
 8009b90:	4a29      	ldr	r2, [pc, #164]	; (8009c38 <MX_ADC1_Init+0xc0>)
 8009b92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8009b94:	4b27      	ldr	r3, [pc, #156]	; (8009c34 <MX_ADC1_Init+0xbc>)
 8009b96:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8009b9a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8009b9c:	4b25      	ldr	r3, [pc, #148]	; (8009c34 <MX_ADC1_Init+0xbc>)
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009ba2:	4b24      	ldr	r3, [pc, #144]	; (8009c34 <MX_ADC1_Init+0xbc>)
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8009ba8:	4b22      	ldr	r3, [pc, #136]	; (8009c34 <MX_ADC1_Init+0xbc>)
 8009baa:	2200      	movs	r2, #0
 8009bac:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009bae:	4b21      	ldr	r3, [pc, #132]	; (8009c34 <MX_ADC1_Init+0xbc>)
 8009bb0:	2204      	movs	r2, #4
 8009bb2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8009bb4:	4b1f      	ldr	r3, [pc, #124]	; (8009c34 <MX_ADC1_Init+0xbc>)
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8009bba:	4b1e      	ldr	r3, [pc, #120]	; (8009c34 <MX_ADC1_Init+0xbc>)
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8009bc0:	4b1c      	ldr	r3, [pc, #112]	; (8009c34 <MX_ADC1_Init+0xbc>)
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8009bc6:	4b1b      	ldr	r3, [pc, #108]	; (8009c34 <MX_ADC1_Init+0xbc>)
 8009bc8:	2200      	movs	r2, #0
 8009bca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009bce:	4b19      	ldr	r3, [pc, #100]	; (8009c34 <MX_ADC1_Init+0xbc>)
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009bd4:	4b17      	ldr	r3, [pc, #92]	; (8009c34 <MX_ADC1_Init+0xbc>)
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8009bda:	4b16      	ldr	r3, [pc, #88]	; (8009c34 <MX_ADC1_Init+0xbc>)
 8009bdc:	2200      	movs	r2, #0
 8009bde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8009be2:	4b14      	ldr	r3, [pc, #80]	; (8009c34 <MX_ADC1_Init+0xbc>)
 8009be4:	2200      	movs	r2, #0
 8009be6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8009be8:	4b12      	ldr	r3, [pc, #72]	; (8009c34 <MX_ADC1_Init+0xbc>)
 8009bea:	2200      	movs	r2, #0
 8009bec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8009bf0:	4810      	ldr	r0, [pc, #64]	; (8009c34 <MX_ADC1_Init+0xbc>)
 8009bf2:	f004 f8f5 	bl	800dde0 <HAL_ADC_Init>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d001      	beq.n	8009c00 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8009bfc:	f002 fc28 	bl	800c450 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8009c00:	4b0e      	ldr	r3, [pc, #56]	; (8009c3c <MX_ADC1_Init+0xc4>)
 8009c02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8009c04:	2306      	movs	r3, #6
 8009c06:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8009c08:	2305      	movs	r3, #5
 8009c0a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8009c0c:	237f      	movs	r3, #127	; 0x7f
 8009c0e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8009c10:	2304      	movs	r3, #4
 8009c12:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8009c14:	2300      	movs	r3, #0
 8009c16:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009c18:	463b      	mov	r3, r7
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	4805      	ldr	r0, [pc, #20]	; (8009c34 <MX_ADC1_Init+0xbc>)
 8009c1e:	f004 facd 	bl	800e1bc <HAL_ADC_ConfigChannel>
 8009c22:	4603      	mov	r3, r0
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d001      	beq.n	8009c2c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8009c28:	f002 fc12 	bl	800c450 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8009c2c:	bf00      	nop
 8009c2e:	3718      	adds	r7, #24
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	20000344 	.word	0x20000344
 8009c38:	50040000 	.word	0x50040000
 8009c3c:	10c00010 	.word	0x10c00010

08009c40 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b09c      	sub	sp, #112	; 0x70
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c48:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	601a      	str	r2, [r3, #0]
 8009c50:	605a      	str	r2, [r3, #4]
 8009c52:	609a      	str	r2, [r3, #8]
 8009c54:	60da      	str	r2, [r3, #12]
 8009c56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009c58:	f107 030c 	add.w	r3, r7, #12
 8009c5c:	2250      	movs	r2, #80	; 0x50
 8009c5e:	2100      	movs	r1, #0
 8009c60:	4618      	mov	r0, r3
 8009c62:	f011 fef3 	bl	801ba4c <memset>
  if(adcHandle->Instance==ADC1)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a32      	ldr	r2, [pc, #200]	; (8009d34 <HAL_ADC_MspInit+0xf4>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d15c      	bne.n	8009d2a <HAL_ADC_MspInit+0xea>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8009c70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c74:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8009c76:	2318      	movs	r3, #24
 8009c78:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8009c7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009c7e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8009c80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009c84:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8009c86:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009c8a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 8009c8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c90:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8009c92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c96:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009c98:	f107 030c 	add.w	r3, r7, #12
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f009 f98c 	bl	8012fba <HAL_RCCEx_PeriphCLKConfig>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d001      	beq.n	8009cac <HAL_ADC_MspInit+0x6c>
    {
      Error_Handler();
 8009ca8:	f002 fbd2 	bl	800c450 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8009cac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8009cb0:	f7ff ff48 	bl	8009b44 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009cb4:	2004      	movs	r0, #4
 8009cb6:	f7ff ff45 	bl	8009b44 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8009cba:	2308      	movs	r3, #8
 8009cbc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009cbe:	2303      	movs	r3, #3
 8009cc0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009cc6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009cca:	4619      	mov	r1, r3
 8009ccc:	481a      	ldr	r0, [pc, #104]	; (8009d38 <HAL_ADC_MspInit+0xf8>)
 8009cce:	f005 fca5 	bl	800f61c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8009cd2:	4b1a      	ldr	r3, [pc, #104]	; (8009d3c <HAL_ADC_MspInit+0xfc>)
 8009cd4:	4a1a      	ldr	r2, [pc, #104]	; (8009d40 <HAL_ADC_MspInit+0x100>)
 8009cd6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8009cd8:	4b18      	ldr	r3, [pc, #96]	; (8009d3c <HAL_ADC_MspInit+0xfc>)
 8009cda:	2205      	movs	r2, #5
 8009cdc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009cde:	4b17      	ldr	r3, [pc, #92]	; (8009d3c <HAL_ADC_MspInit+0xfc>)
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8009ce4:	4b15      	ldr	r3, [pc, #84]	; (8009d3c <HAL_ADC_MspInit+0xfc>)
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8009cea:	4b14      	ldr	r3, [pc, #80]	; (8009d3c <HAL_ADC_MspInit+0xfc>)
 8009cec:	2280      	movs	r2, #128	; 0x80
 8009cee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009cf0:	4b12      	ldr	r3, [pc, #72]	; (8009d3c <HAL_ADC_MspInit+0xfc>)
 8009cf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009cf6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009cf8:	4b10      	ldr	r3, [pc, #64]	; (8009d3c <HAL_ADC_MspInit+0xfc>)
 8009cfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009cfe:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8009d00:	4b0e      	ldr	r3, [pc, #56]	; (8009d3c <HAL_ADC_MspInit+0xfc>)
 8009d02:	2220      	movs	r2, #32
 8009d04:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8009d06:	4b0d      	ldr	r3, [pc, #52]	; (8009d3c <HAL_ADC_MspInit+0xfc>)
 8009d08:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009d0c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8009d0e:	480b      	ldr	r0, [pc, #44]	; (8009d3c <HAL_ADC_MspInit+0xfc>)
 8009d10:	f005 f9b0 	bl	800f074 <HAL_DMA_Init>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d001      	beq.n	8009d1e <HAL_ADC_MspInit+0xde>
    {
      Error_Handler();
 8009d1a:	f002 fb99 	bl	800c450 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	4a06      	ldr	r2, [pc, #24]	; (8009d3c <HAL_ADC_MspInit+0xfc>)
 8009d22:	64da      	str	r2, [r3, #76]	; 0x4c
 8009d24:	4a05      	ldr	r2, [pc, #20]	; (8009d3c <HAL_ADC_MspInit+0xfc>)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8009d2a:	bf00      	nop
 8009d2c:	3770      	adds	r7, #112	; 0x70
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	50040000 	.word	0x50040000
 8009d38:	48000800 	.word	0x48000800
 8009d3c:	200003a8 	.word	0x200003a8
 8009d40:	40020008 	.word	0x40020008

08009d44 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8009d44:	b5b0      	push	{r4, r5, r7, lr}
 8009d46:	b088      	sub	sp, #32
 8009d48:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8009d4a:	4b0b      	ldr	r3, [pc, #44]	; (8009d78 <APPD_EnableCPU2+0x34>)
 8009d4c:	1d3c      	adds	r4, r7, #4
 8009d4e:	461d      	mov	r5, r3
 8009d50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009d52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009d54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009d58:	c403      	stmia	r4!, {r0, r1}
 8009d5a:	8022      	strh	r2, [r4, #0]
 8009d5c:	3402      	adds	r4, #2
 8009d5e:	0c13      	lsrs	r3, r2, #16
 8009d60:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8009d62:	f00c ffd9 	bl	8016d18 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8009d66:	1d3b      	adds	r3, r7, #4
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f00c fa6a 	bl	8016242 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8009d6e:	bf00      	nop
}
 8009d70:	3720      	adds	r7, #32
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bdb0      	pop	{r4, r5, r7, pc}
 8009d76:	bf00      	nop
 8009d78:	08020b64 	.word	0x08020b64

08009d7c <LL_PWR_SMPS_Enable>:
  *         @ref LL_PWR_SMPS_SetMode() should be used instead.
  * @rmtoll CR5          SMPSEN        LL_PWR_SMPS_Enable
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_Enable(void)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
 8009d80:	4b05      	ldr	r3, [pc, #20]	; (8009d98 <LL_PWR_SMPS_Enable+0x1c>)
 8009d82:	69db      	ldr	r3, [r3, #28]
 8009d84:	4a04      	ldr	r2, [pc, #16]	; (8009d98 <LL_PWR_SMPS_Enable+0x1c>)
 8009d86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d8a:	61d3      	str	r3, [r2, #28]
}
 8009d8c:	bf00      	nop
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr
 8009d96:	bf00      	nop
 8009d98:	58000400 	.word	0x58000400

08009d9c <LL_PWR_SMPS_SetStartupCurrent>:
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_200MA
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_220MA
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetStartupCurrent(uint32_t StartupCurrent)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSSC, StartupCurrent);
 8009da4:	4b06      	ldr	r3, [pc, #24]	; (8009dc0 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 8009da6:	69db      	ldr	r3, [r3, #28]
 8009da8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009dac:	4904      	ldr	r1, [pc, #16]	; (8009dc0 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	4313      	orrs	r3, r2
 8009db2:	61cb      	str	r3, [r1, #28]
}
 8009db4:	bf00      	nop
 8009db6:	370c      	adds	r7, #12
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr
 8009dc0:	58000400 	.word	0x58000400

08009dc4 <LL_PWR_SMPS_SetOutputVoltageLevel>:
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V85
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V90
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetOutputVoltageLevel(uint32_t OutputVoltageLevel)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b087      	sub	sp, #28
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  __IO const uint32_t OutputVoltageLevel_calibration = (((*SMPS_VOLTAGE_CAL_ADDR) & SMPS_VOLTAGE_CAL) >> SMPS_VOLTAGE_CAL_POS);  /* SMPS output voltage level calibrated in production */
 8009dcc:	4b18      	ldr	r3, [pc, #96]	; (8009e30 <LL_PWR_SMPS_SetOutputVoltageLevel+0x6c>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	0a1b      	lsrs	r3, r3, #8
 8009dd2:	f003 030f 	and.w	r3, r3, #15
 8009dd6:	60fb      	str	r3, [r7, #12]
  int32_t TrimmingSteps;                               /* Trimming steps between theoretical output voltage and calibrated output voltage */
  int32_t OutputVoltageLevelTrimmed;                   /* SMPS output voltage level after calibration: trimming value added to required level */

  if (OutputVoltageLevel_calibration == 0UL)
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d108      	bne.n	8009df0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x2c>
  {
    /* Device with SMPS output voltage not calibrated in production: Apply output voltage value directly */

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, OutputVoltageLevel);
 8009dde:	4b15      	ldr	r3, [pc, #84]	; (8009e34 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8009de0:	69db      	ldr	r3, [r3, #28]
 8009de2:	f023 020f 	bic.w	r2, r3, #15
 8009de6:	4913      	ldr	r1, [pc, #76]	; (8009e34 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	4313      	orrs	r3, r2
 8009dec:	61cb      	str	r3, [r1, #28]
    }

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
  }
}
 8009dee:	e019      	b.n	8009e24 <LL_PWR_SMPS_SetOutputVoltageLevel+0x60>
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 >> PWR_CR5_SMPSVOS_Pos));
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	3b06      	subs	r3, #6
 8009df4:	613b      	str	r3, [r7, #16]
    OutputVoltageLevelTrimmed = ((int32_t)((uint32_t)(OutputVoltageLevel >> PWR_CR5_SMPSVOS_Pos)) + (int32_t)TrimmingSteps);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	693a      	ldr	r2, [r7, #16]
 8009dfa:	4413      	add	r3, r2
 8009dfc:	617b      	str	r3, [r7, #20]
    if (OutputVoltageLevelTrimmed < 0)
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	da02      	bge.n	8009e0a <LL_PWR_SMPS_SetOutputVoltageLevel+0x46>
      OutputVoltageLevelTrimmed = 0;
 8009e04:	2300      	movs	r3, #0
 8009e06:	617b      	str	r3, [r7, #20]
 8009e08:	e004      	b.n	8009e14 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
      if (OutputVoltageLevelTrimmed > (int32_t)PWR_CR5_SMPSVOS)
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	2b0f      	cmp	r3, #15
 8009e0e:	dd01      	ble.n	8009e14 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
        OutputVoltageLevelTrimmed = (int32_t)PWR_CR5_SMPSVOS;
 8009e10:	230f      	movs	r3, #15
 8009e12:	617b      	str	r3, [r7, #20]
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
 8009e14:	4b07      	ldr	r3, [pc, #28]	; (8009e34 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8009e16:	69db      	ldr	r3, [r3, #28]
 8009e18:	f023 020f 	bic.w	r2, r3, #15
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	4905      	ldr	r1, [pc, #20]	; (8009e34 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8009e20:	4313      	orrs	r3, r2
 8009e22:	61cb      	str	r3, [r1, #28]
}
 8009e24:	bf00      	nop
 8009e26:	371c      	adds	r7, #28
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr
 8009e30:	1fff7558 	.word	0x1fff7558
 8009e34:	58000400 	.word	0x58000400

08009e38 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b083      	sub	sp, #12
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8009e40:	4b07      	ldr	r3, [pc, #28]	; (8009e60 <LL_C2_PWR_SetPowerMode+0x28>)
 8009e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e46:	f023 0207 	bic.w	r2, r3, #7
 8009e4a:	4905      	ldr	r1, [pc, #20]	; (8009e60 <LL_C2_PWR_SetPowerMode+0x28>)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8009e54:	bf00      	nop
 8009e56:	370c      	adds	r7, #12
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr
 8009e60:	58000400 	.word	0x58000400

08009e64 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8009e6c:	4b06      	ldr	r3, [pc, #24]	; (8009e88 <LL_EXTI_EnableIT_32_63+0x24>)
 8009e6e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8009e72:	4905      	ldr	r1, [pc, #20]	; (8009e88 <LL_EXTI_EnableIT_32_63+0x24>)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	4313      	orrs	r3, r2
 8009e78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8009e7c:	bf00      	nop
 8009e7e:	370c      	adds	r7, #12
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr
 8009e88:	58000800 	.word	0x58000800

08009e8c <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8009e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e98:	4a0a      	ldr	r2, [pc, #40]	; (8009ec4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8009e9a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8009e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ea2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009ea6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	021b      	lsls	r3, r3, #8
 8009eae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8009eb8:	bf00      	nop
 8009eba:	370c      	adds	r7, #12
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr
 8009ec4:	cafecafe 	.word	0xcafecafe

08009ec8 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b083      	sub	sp, #12
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8009ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ed4:	689b      	ldr	r3, [r3, #8]
 8009ed6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8009eda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	608b      	str	r3, [r1, #8]
}
 8009ee4:	bf00      	nop
 8009ee6:	370c      	adds	r7, #12
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr

08009ef0 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009efc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009f08:	bf00      	nop
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr

08009f12 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8009f12:	b480      	push	{r7}
 8009f14:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009f2a:	bf00      	nop
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8009f34:	b480      	push	{r7}
 8009f36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8009f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009f44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009f48:	d101      	bne.n	8009f4e <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	e000      	b.n	8009f50 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8009f4e:	2300      	movs	r3, #0
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr

08009f5a <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8009f5a:	b480      	push	{r7}
 8009f5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8009f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f6e:	d101      	bne.n	8009f74 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8009f70:	2301      	movs	r3, #1
 8009f72:	e000      	b.n	8009f76 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8009f74:	2300      	movs	r3, #0
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b085      	sub	sp, #20
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8009f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009f8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	4313      	orrs	r3, r2
 8009f96:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8009f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	4013      	ands	r3, r2
 8009fa2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
}
 8009fa6:	bf00      	nop
 8009fa8:	3714      	adds	r7, #20
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr
	...

08009fb4 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8009fb8:	4b04      	ldr	r3, [pc, #16]	; (8009fcc <LL_DBGMCU_GetDeviceID+0x18>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr
 8009fca:	bf00      	nop
 8009fcc:	e0042000 	.word	0xe0042000

08009fd0 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8009fd4:	4b04      	ldr	r3, [pc, #16]	; (8009fe8 <LL_DBGMCU_GetRevisionID+0x18>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	0c1b      	lsrs	r3, r3, #16
 8009fda:	b29b      	uxth	r3, r3
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe4:	4770      	bx	lr
 8009fe6:	bf00      	nop
 8009fe8:	e0042000 	.word	0xe0042000

08009fec <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b083      	sub	sp, #12
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	685a      	ldr	r2, [r3, #4]
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	041b      	lsls	r3, r3, #16
 8009ffe:	431a      	orrs	r2, r3
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	605a      	str	r2, [r3, #4]
}
 800a004:	bf00      	nop
 800a006:	370c      	adds	r7, #12
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr

0800a010 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800a010:	b480      	push	{r7}
 800a012:	b083      	sub	sp, #12
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	685a      	ldr	r2, [r3, #4]
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	431a      	orrs	r2, r3
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	605a      	str	r2, [r3, #4]
}
 800a026:	bf00      	nop
 800a028:	370c      	adds	r7, #12
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr

0800a032 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800a032:	b480      	push	{r7}
 800a034:	b083      	sub	sp, #12
 800a036:	af00      	add	r7, sp, #0
 800a038:	6078      	str	r0, [r7, #4]
 800a03a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	695a      	ldr	r2, [r3, #20]
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	041b      	lsls	r3, r3, #16
 800a044:	431a      	orrs	r2, r3
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	615a      	str	r2, [r3, #20]
}
 800a04a:	bf00      	nop
 800a04c:	370c      	adds	r7, #12
 800a04e:	46bd      	mov	sp, r7
 800a050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a054:	4770      	bx	lr

0800a056 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800a056:	b480      	push	{r7}
 800a058:	b083      	sub	sp, #12
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
 800a05e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	695a      	ldr	r2, [r3, #20]
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	431a      	orrs	r2, r3
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	615a      	str	r2, [r3, #20]
}
 800a06c:	bf00      	nop
 800a06e:	370c      	adds	r7, #12
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr

0800a078 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800a078:	b480      	push	{r7}
 800a07a:	b083      	sub	sp, #12
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	683a      	ldr	r2, [r7, #0]
 800a086:	609a      	str	r2, [r3, #8]
}
 800a088:	bf00      	nop
 800a08a:	370c      	adds	r7, #12
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr

0800a094 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800a094:	b480      	push	{r7}
 800a096:	b083      	sub	sp, #12
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	683a      	ldr	r2, [r7, #0]
 800a0a2:	619a      	str	r2, [r3, #24]
}
 800a0a4:	bf00      	nop
 800a0a6:	370c      	adds	r7, #12
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr

0800a0b0 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800a0b4:	4b05      	ldr	r3, [pc, #20]	; (800a0cc <LL_LPM_EnableSleep+0x1c>)
 800a0b6:	691b      	ldr	r3, [r3, #16]
 800a0b8:	4a04      	ldr	r2, [pc, #16]	; (800a0cc <LL_LPM_EnableSleep+0x1c>)
 800a0ba:	f023 0304 	bic.w	r3, r3, #4
 800a0be:	6113      	str	r3, [r2, #16]
}
 800a0c0:	bf00      	nop
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr
 800a0ca:	bf00      	nop
 800a0cc:	e000ed00 	.word	0xe000ed00

0800a0d0 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b083      	sub	sp, #12
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	22ff      	movs	r2, #255	; 0xff
 800a0dc:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a0de:	bf00      	nop
 800a0e0:	370c      	adds	r7, #12
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr

0800a0ea <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800a0ea:	b480      	push	{r7}
 800a0ec:	b083      	sub	sp, #12
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	22ca      	movs	r2, #202	; 0xca
 800a0f6:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2253      	movs	r2, #83	; 0x53
 800a0fc:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a0fe:	bf00      	nop
 800a100:	370c      	adds	r7, #12
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr

0800a10a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800a10a:	b480      	push	{r7}
 800a10c:	b083      	sub	sp, #12
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
 800a112:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	689b      	ldr	r3, [r3, #8]
 800a118:	f023 0207 	bic.w	r2, r3, #7
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	431a      	orrs	r2, r3
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	609a      	str	r2, [r3, #8]
}
 800a124:	bf00      	nop
 800a126:	370c      	adds	r7, #12
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr

0800a130 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800a134:	4b04      	ldr	r3, [pc, #16]	; (800a148 <MX_APPE_Config+0x18>)
 800a136:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a13a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 800a13c:	f000 f829 	bl	800a192 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 800a140:	f000 f868 	bl	800a214 <Config_HSE>

  return;
 800a144:	bf00      	nop
}
 800a146:	bd80      	pop	{r7, pc}
 800a148:	58004000 	.word	0x58004000

0800a14c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 800a150:	f000 f874 	bl	800a23c <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 800a154:	f000 f88c 	bl	800a270 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800a158:	4903      	ldr	r1, [pc, #12]	; (800a168 <MX_APPE_Init+0x1c>)
 800a15a:	2000      	movs	r0, #0
 800a15c:	f001 fcfc 	bl	800bb58 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800a160:	f000 f894 	bl	800a28c <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 800a164:	bf00      	nop
}
 800a166:	bd80      	pop	{r7, pc}
 800a168:	200006d0 	.word	0x200006d0

0800a16c <Init_Smps>:

void Init_Smps(void)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	af00      	add	r7, sp, #0
   *
   *  The SMPS configuration is not yet supported by CubeMx
   *  when SMPS output voltage is set to 1.4V, the RF output power is limited to 3.7dBm
   *  the SMPS output voltage shall be increased for higher RF output power
   */
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
 800a170:	2000      	movs	r0, #0
 800a172:	f7ff fe13 	bl	8009d9c <LL_PWR_SMPS_SetStartupCurrent>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
 800a176:	2004      	movs	r0, #4
 800a178:	f7ff fe24 	bl	8009dc4 <LL_PWR_SMPS_SetOutputVoltageLevel>
  LL_PWR_SMPS_Enable();
 800a17c:	f7ff fdfe 	bl	8009d7c <LL_PWR_SMPS_Enable>
#endif /* CFG_USE_SMPS != 0 */

  return;
 800a180:	bf00      	nop
}
 800a182:	bd80      	pop	{r7, pc}

0800a184 <Init_Exti>:

void Init_Exti(void)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800a188:	2050      	movs	r0, #80	; 0x50
 800a18a:	f7ff fe6b 	bl	8009e64 <LL_EXTI_EnableIT_32_63>

  return;
 800a18e:	bf00      	nop
}
 800a190:	bd80      	pop	{r7, pc}

0800a192 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 800a192:	b580      	push	{r7, lr}
 800a194:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 800a196:	f000 f804 	bl	800a1a2 <Reset_BackupDomain>

  Reset_IPCC();
 800a19a:	f000 f819 	bl	800a1d0 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 800a19e:	bf00      	nop
}
 800a1a0:	bd80      	pop	{r7, pc}

0800a1a2 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 800a1a2:	b580      	push	{r7, lr}
 800a1a4:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 800a1a6:	f7ff fec5 	bl	8009f34 <LL_RCC_IsActiveFlag_PINRST>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d00d      	beq.n	800a1cc <Reset_BackupDomain+0x2a>
 800a1b0:	f7ff fed3 	bl	8009f5a <LL_RCC_IsActiveFlag_SFTRST>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d108      	bne.n	800a1cc <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 800a1ba:	f006 fd4f 	bl	8010c5c <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 800a1be:	f006 fd4d 	bl	8010c5c <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 800a1c2:	f7ff fe95 	bl	8009ef0 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 800a1c6:	f7ff fea4 	bl	8009f12 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 800a1ca:	bf00      	nop
 800a1cc:	bf00      	nop
}
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 800a1d4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a1d8:	f7ff fed2 	bl	8009f80 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 800a1dc:	213f      	movs	r1, #63	; 0x3f
 800a1de:	480c      	ldr	r0, [pc, #48]	; (800a210 <Reset_IPCC+0x40>)
 800a1e0:	f7ff ff4a 	bl	800a078 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 800a1e4:	213f      	movs	r1, #63	; 0x3f
 800a1e6:	480a      	ldr	r0, [pc, #40]	; (800a210 <Reset_IPCC+0x40>)
 800a1e8:	f7ff ff54 	bl	800a094 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 800a1ec:	213f      	movs	r1, #63	; 0x3f
 800a1ee:	4808      	ldr	r0, [pc, #32]	; (800a210 <Reset_IPCC+0x40>)
 800a1f0:	f7ff fefc 	bl	8009fec <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 800a1f4:	213f      	movs	r1, #63	; 0x3f
 800a1f6:	4806      	ldr	r0, [pc, #24]	; (800a210 <Reset_IPCC+0x40>)
 800a1f8:	f7ff ff1b 	bl	800a032 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 800a1fc:	213f      	movs	r1, #63	; 0x3f
 800a1fe:	4804      	ldr	r0, [pc, #16]	; (800a210 <Reset_IPCC+0x40>)
 800a200:	f7ff ff06 	bl	800a010 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 800a204:	213f      	movs	r1, #63	; 0x3f
 800a206:	4802      	ldr	r0, [pc, #8]	; (800a210 <Reset_IPCC+0x40>)
 800a208:	f7ff ff25 	bl	800a056 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 800a20c:	bf00      	nop
}
 800a20e:	bd80      	pop	{r7, pc}
 800a210:	58000c00 	.word	0x58000c00

0800a214 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800a21a:	2000      	movs	r0, #0
 800a21c:	f00c fe08 	bl	8016e30 <OTP_Read>
 800a220:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d005      	beq.n	800a234 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	799b      	ldrb	r3, [r3, #6]
 800a22c:	4618      	mov	r0, r3
 800a22e:	f7ff fe2d 	bl	8009e8c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800a232:	bf00      	nop
 800a234:	bf00      	nop
}
 800a236:	3708      	adds	r7, #8
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <System_Init>:

static void System_Init(void)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	af00      	add	r7, sp, #0
  Init_Smps();
 800a240:	f7ff ff94 	bl	800a16c <Init_Smps>

  Init_Exti();
 800a244:	f7ff ff9e 	bl	800a184 <Init_Exti>

  Init_Rtc();
 800a248:	f000 f802 	bl	800a250 <Init_Rtc>

  return;
 800a24c:	bf00      	nop
}
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <Init_Rtc>:

static void Init_Rtc(void)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 800a254:	4805      	ldr	r0, [pc, #20]	; (800a26c <Init_Rtc+0x1c>)
 800a256:	f7ff ff48 	bl	800a0ea <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800a25a:	2100      	movs	r1, #0
 800a25c:	4803      	ldr	r0, [pc, #12]	; (800a26c <Init_Rtc+0x1c>)
 800a25e:	f7ff ff54 	bl	800a10a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800a262:	4802      	ldr	r0, [pc, #8]	; (800a26c <Init_Rtc+0x1c>)
 800a264:	f7ff ff34 	bl	800a0d0 <LL_RTC_EnableWriteProtection>

  return;
 800a268:	bf00      	nop
}
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	40002800 	.word	0x40002800

0800a270 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 800a274:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a278:	f7ff fe26 	bl	8009ec8 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800a27c:	f010 f830 	bl	801a2e0 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800a280:	2004      	movs	r0, #4
 800a282:	f7ff fdd9 	bl	8009e38 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 800a286:	bf00      	nop
}
 800a288:	bd80      	pop	{r7, pc}
	...

0800a28c <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b088      	sub	sp, #32
 800a290:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 800a292:	f00c fb8b 	bl	80169ac <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 800a296:	4a11      	ldr	r2, [pc, #68]	; (800a2dc <appe_Tl_Init+0x50>)
 800a298:	2100      	movs	r1, #0
 800a29a:	2020      	movs	r0, #32
 800a29c:	f010 f994 	bl	801a5c8 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800a2a0:	4b0f      	ldr	r3, [pc, #60]	; (800a2e0 <appe_Tl_Init+0x54>)
 800a2a2:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 800a2a4:	4b0f      	ldr	r3, [pc, #60]	; (800a2e4 <appe_Tl_Init+0x58>)
 800a2a6:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800a2a8:	463b      	mov	r3, r7
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	480e      	ldr	r0, [pc, #56]	; (800a2e8 <appe_Tl_Init+0x5c>)
 800a2ae:	f00c fa3f 	bl	8016730 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800a2b2:	4b0e      	ldr	r3, [pc, #56]	; (800a2ec <appe_Tl_Init+0x60>)
 800a2b4:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800a2b6:	4b0e      	ldr	r3, [pc, #56]	; (800a2f0 <appe_Tl_Init+0x64>)
 800a2b8:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800a2ba:	4b0e      	ldr	r3, [pc, #56]	; (800a2f4 <appe_Tl_Init+0x68>)
 800a2bc:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800a2be:	f240 533c 	movw	r3, #1340	; 0x53c
 800a2c2:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 800a2c4:	f107 0308 	add.w	r3, r7, #8
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f00c fcb1 	bl	8016c30 <TL_MM_Init>

  TL_Enable();
 800a2ce:	f00c fb67 	bl	80169a0 <TL_Enable>

  return;
 800a2d2:	bf00      	nop
}
 800a2d4:	3720      	adds	r7, #32
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
 800a2da:	bf00      	nop
 800a2dc:	08016769 	.word	0x08016769
 800a2e0:	20030734 	.word	0x20030734
 800a2e4:	0800a2f9 	.word	0x0800a2f9
 800a2e8:	0800a311 	.word	0x0800a311
 800a2ec:	2003094c 	.word	0x2003094c
 800a2f0:	20030840 	.word	0x20030840
 800a2f4:	200301f8 	.word	0x200301f8

0800a2f8 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b083      	sub	sp, #12
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	4603      	mov	r3, r0
 800a300:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800a302:	bf00      	nop
}
 800a304:	370c      	adds	r7, #12
 800a306:	46bd      	mov	sp, r7
 800a308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30c:	4770      	bx	lr
	...

0800a310 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b088      	sub	sp, #32
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	685b      	ldr	r3, [r3, #4]
 800a31c:	330b      	adds	r3, #11
 800a31e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 800a320:	69fb      	ldr	r3, [r7, #28]
 800a322:	881b      	ldrh	r3, [r3, #0]
 800a324:	b29b      	uxth	r3, r3
 800a326:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800a32a:	2b07      	cmp	r3, #7
 800a32c:	d81f      	bhi.n	800a36e <APPE_SysUserEvtRx+0x5e>
 800a32e:	a201      	add	r2, pc, #4	; (adr r2, 800a334 <APPE_SysUserEvtRx+0x24>)
 800a330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a334:	0800a355 	.word	0x0800a355
 800a338:	0800a367 	.word	0x0800a367
 800a33c:	0800a36f 	.word	0x0800a36f
 800a340:	0800a36f 	.word	0x0800a36f
 800a344:	0800a36f 	.word	0x0800a36f
 800a348:	0800a36f 	.word	0x0800a36f
 800a34c:	0800a36f 	.word	0x0800a36f
 800a350:	0800a36f 	.word	0x0800a36f
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 800a354:	f107 030c 	add.w	r3, r7, #12
 800a358:	4618      	mov	r0, r3
 800a35a:	f00b ff9f 	bl	801629c <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 f81b 	bl	800a39a <APPE_SysEvtReadyProcessing>
    break;
 800a364:	e004      	b.n	800a370 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 f806 	bl	800a378 <APPE_SysEvtError>
    break;
 800a36c:	e000      	b.n	800a370 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 800a36e:	bf00      	nop
  }

  return;
 800a370:	bf00      	nop
}
 800a372:	3720      	adds	r7, #32
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 800a378:	b480      	push	{r7}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	330b      	adds	r3, #11
 800a386:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	3302      	adds	r3, #2
 800a38c:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800a38e:	bf00      	nop
}
 800a390:	3714      	adds	r7, #20
 800a392:	46bd      	mov	sp, r7
 800a394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a398:	4770      	bx	lr

0800a39a <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 800a39a:	b580      	push	{r7, lr}
 800a39c:	b08a      	sub	sp, #40	; 0x28
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 800a3a2:	f107 0308 	add.w	r3, r7, #8
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	601a      	str	r2, [r3, #0]
 800a3aa:	605a      	str	r2, [r3, #4]
 800a3ac:	609a      	str	r2, [r3, #8]
 800a3ae:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	685b      	ldr	r3, [r3, #4]
 800a3bc:	330b      	adds	r3, #11
 800a3be:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 800a3c0:	69fb      	ldr	r3, [r7, #28]
 800a3c2:	3302      	adds	r3, #2
 800a3c4:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800a3c6:	69bb      	ldr	r3, [r7, #24]
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d11d      	bne.n	800a40a <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800a3ce:	f7ff fcb9 	bl	8009d44 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800a3d2:	230f      	movs	r3, #15
 800a3d4:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800a3d6:	237f      	movs	r3, #127	; 0x7f
 800a3d8:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800a3da:	f7ff fdf9 	bl	8009fd0 <LL_DBGMCU_GetRevisionID>
 800a3de:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 800a3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800a3e6:	f7ff fde5 	bl	8009fb4 <LL_DBGMCU_GetDeviceID>
 800a3ea:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 800a3ec:	6a3b      	ldr	r3, [r7, #32]
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800a3f2:	f107 0308 	add.w	r3, r7, #8
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f00b ff3a 	bl	8016270 <SHCI_C2_Config>

    APP_BLE_Init();
 800a3fc:	f00c fe22 	bl	8017044 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800a400:	2100      	movs	r1, #0
 800a402:	2001      	movs	r0, #1
 800a404:	f00f ff7e 	bl	801a304 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 800a408:	e007      	b.n	800a41a <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800a40a:	69bb      	ldr	r3, [r7, #24]
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	2b01      	cmp	r3, #1
 800a410:	d103      	bne.n	800a41a <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2200      	movs	r2, #0
 800a416:	701a      	strb	r2, [r3, #0]
  return;
 800a418:	bf00      	nop
 800a41a:	bf00      	nop
}
 800a41c:	3728      	adds	r7, #40	; 0x28
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}

0800a422 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 800a422:	b580      	push	{r7, lr}
 800a424:	b084      	sub	sp, #16
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a42a:	f003 faa7 	bl	800d97c <HAL_GetTick>
 800a42e:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a43a:	d00a      	beq.n	800a452 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 800a43c:	f003 fab6 	bl	800d9ac <HAL_GetTickFreq>
 800a440:	4603      	mov	r3, r0
 800a442:	461a      	mov	r2, r3
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	4413      	add	r3, r2
 800a448:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a44a:	e002      	b.n	800a452 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800a44c:	f7ff fe30 	bl	800a0b0 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 800a450:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 800a452:	f003 fa93 	bl	800d97c <HAL_GetTick>
 800a456:	4602      	mov	r2, r0
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	1ad3      	subs	r3, r2, r3
 800a45c:	68fa      	ldr	r2, [r7, #12]
 800a45e:	429a      	cmp	r2, r3
 800a460:	d8f4      	bhi.n	800a44c <HAL_Delay+0x2a>
  }
}
 800a462:	bf00      	nop
 800a464:	bf00      	nop
 800a466:	3710      	adds	r7, #16
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800a470:	f04f 30ff 	mov.w	r0, #4294967295
 800a474:	f00f ffac 	bl	801a3d0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800a478:	bf00      	nop
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
 800a480:	f00f ff70 	bl	801a364 <UTIL_LPM_EnterLowPower>
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800a484:	bf00      	nop
}
 800a486:	bd80      	pop	{r7, pc}

0800a488 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800a492:	f04f 30ff 	mov.w	r0, #4294967295
 800a496:	f00f ff9b 	bl	801a3d0 <UTIL_SEQ_Run>
  return;
 800a49a:	bf00      	nop
}
 800a49c:	3708      	adds	r7, #8
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}

0800a4a2 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 800a4a2:	b580      	push	{r7, lr}
 800a4a4:	b082      	sub	sp, #8
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800a4aa:	2100      	movs	r1, #0
 800a4ac:	2020      	movs	r0, #32
 800a4ae:	f010 f8ad 	bl	801a60c <UTIL_SEQ_SetTask>
  return;
 800a4b2:	bf00      	nop
}
 800a4b4:	3708      	adds	r7, #8
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}

0800a4ba <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800a4ba:	b580      	push	{r7, lr}
 800a4bc:	b082      	sub	sp, #8
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800a4c2:	2002      	movs	r0, #2
 800a4c4:	f010 f934 	bl	801a730 <UTIL_SEQ_SetEvt>
  return;
 800a4c8:	bf00      	nop
}
 800a4ca:	3708      	adds	r7, #8
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b082      	sub	sp, #8
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800a4d8:	2002      	movs	r0, #2
 800a4da:	f010 f949 	bl	801a770 <UTIL_SEQ_WaitEvt>
  return;
 800a4de:	bf00      	nop
}
 800a4e0:	3708      	adds	r7, #8
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <LL_AHB1_GRP1_EnableClock>:
{
 800a4e6:	b480      	push	{r7}
 800a4e8:	b085      	sub	sp, #20
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800a4ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a4f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a4f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800a4fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a502:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	4013      	ands	r3, r2
 800a508:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a50a:	68fb      	ldr	r3, [r7, #12]
}
 800a50c:	bf00      	nop
 800a50e:	3714      	adds	r7, #20
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr

0800a518 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800a51c:	2004      	movs	r0, #4
 800a51e:	f7ff ffe2 	bl	800a4e6 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a522:	2001      	movs	r0, #1
 800a524:	f7ff ffdf 	bl	800a4e6 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800a528:	2200      	movs	r2, #0
 800a52a:	2100      	movs	r1, #0
 800a52c:	200b      	movs	r0, #11
 800a52e:	f004 fd42 	bl	800efb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800a532:	200b      	movs	r0, #11
 800a534:	f004 fd59 	bl	800efea <HAL_NVIC_EnableIRQ>

}
 800a538:	bf00      	nop
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <Write_Enable>:
		return ret;
	}
	return HAL_OK;
}
uint8_t Write_Enable(void)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b094      	sub	sp, #80	; 0x50
 800a540:	af00      	add	r7, sp, #0
	uint8_t ret;
	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;
	/* Enable write operations */
	sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800a542:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a546:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Instruction       = WRITE_ENABLE_CMD;
 800a548:	2306      	movs	r3, #6
 800a54a:	61bb      	str	r3, [r7, #24]
	sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 800a54c:	2300      	movs	r3, #0
 800a54e:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800a550:	2300      	movs	r3, #0
 800a552:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode          = QSPI_DATA_NONE;
 800a554:	2300      	movs	r3, #0
 800a556:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles       = 0;
 800a558:	2300      	movs	r3, #0
 800a55a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800a55c:	2300      	movs	r3, #0
 800a55e:	647b      	str	r3, [r7, #68]	; 0x44
	//sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800a560:	2300      	movs	r3, #0
 800a562:	64bb      	str	r3, [r7, #72]	; 0x48
	ret=HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a564:	f107 0318 	add.w	r3, r7, #24
 800a568:	f241 3288 	movw	r2, #5000	; 0x1388
 800a56c:	4619      	mov	r1, r3
 800a56e:	481b      	ldr	r0, [pc, #108]	; (800a5dc <Write_Enable+0xa0>)
 800a570:	f006 fdc2 	bl	80110f8 <HAL_QSPI_Command>
 800a574:	4603      	mov	r3, r0
 800a576:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (ret != HAL_OK) {
 800a57a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d002      	beq.n	800a588 <Write_Enable+0x4c>
		return ret;
 800a582:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a586:	e024      	b.n	800a5d2 <Write_Enable+0x96>
	}

	/* Configure automatic polling mode to wait for write enabling */
	sConfig.Match           = MX25R6435F_SR_WEL;
 800a588:	2302      	movs	r3, #2
 800a58a:	603b      	str	r3, [r7, #0]
	sConfig.Mask            = MX25R6435F_SR_WEL;
 800a58c:	2302      	movs	r3, #2
 800a58e:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 800a590:	2300      	movs	r3, #0
 800a592:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 800a594:	2301      	movs	r3, #1
 800a596:	60fb      	str	r3, [r7, #12]
	sConfig.Interval        = 0x10;
 800a598:	2310      	movs	r3, #16
 800a59a:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800a59c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a5a0:	617b      	str	r3, [r7, #20]

	sCommand.Instruction    = READ_STATUS_REG_CMD;
 800a5a2:	2305      	movs	r3, #5
 800a5a4:	61bb      	str	r3, [r7, #24]
	sCommand.DataMode       = QSPI_DATA_1_LINE;
 800a5a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
	ret=HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a5ac:	463a      	mov	r2, r7
 800a5ae:	f107 0118 	add.w	r1, r7, #24
 800a5b2:	f241 3388 	movw	r3, #5000	; 0x1388
 800a5b6:	4809      	ldr	r0, [pc, #36]	; (800a5dc <Write_Enable+0xa0>)
 800a5b8:	f006 ff2b 	bl	8011412 <HAL_QSPI_AutoPolling>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (ret != HAL_OK) {
 800a5c2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d002      	beq.n	800a5d0 <Write_Enable+0x94>
		return ret;
 800a5ca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a5ce:	e000      	b.n	800a5d2 <Write_Enable+0x96>
	}


	return HAL_OK;
 800a5d0:	2300      	movs	r3, #0
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3750      	adds	r7, #80	; 0x50
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}
 800a5da:	bf00      	nop
 800a5dc:	2000068c 	.word	0x2000068c

0800a5e0 <Quad_Enable>:
	}
	return HAL_OK;
}

uint8_t Quad_Enable(void)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b08e      	sub	sp, #56	; 0x38
 800a5e4:	af00      	add	r7, sp, #0
	uint8_t ret,reg;
	QSPI_CommandTypeDef sCommand;
	sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800a5e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a5ea:	61bb      	str	r3, [r7, #24]
	sCommand.Instruction       = READ_STATUS_REG_CMD;
 800a5ec:	2305      	movs	r3, #5
 800a5ee:	603b      	str	r3, [r7, #0]
	sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	61fb      	str	r3, [r7, #28]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	623b      	str	r3, [r7, #32]
	sCommand.DataMode          = QSPI_DATA_1_LINE;
 800a5f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a5fc:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DummyCycles       = 0;
 800a5fe:	2300      	movs	r3, #0
 800a600:	617b      	str	r3, [r7, #20]
	sCommand.NbData            = 1;
 800a602:	2301      	movs	r3, #1
 800a604:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800a606:	2300      	movs	r3, #0
 800a608:	62fb      	str	r3, [r7, #44]	; 0x2c
	//sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800a60a:	2300      	movs	r3, #0
 800a60c:	633b      	str	r3, [r7, #48]	; 0x30
	ret=HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a60e:	463b      	mov	r3, r7
 800a610:	f241 3288 	movw	r2, #5000	; 0x1388
 800a614:	4619      	mov	r1, r3
 800a616:	4849      	ldr	r0, [pc, #292]	; (800a73c <Quad_Enable+0x15c>)
 800a618:	f006 fd6e 	bl	80110f8 <HAL_QSPI_Command>
 800a61c:	4603      	mov	r3, r0
 800a61e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (ret != HAL_OK) {
 800a622:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a626:	2b00      	cmp	r3, #0
 800a628:	d002      	beq.n	800a630 <Quad_Enable+0x50>
		return ret;
 800a62a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a62e:	e081      	b.n	800a734 <Quad_Enable+0x154>
	}
	ret=HAL_QSPI_Receive(&hqspi, &reg, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a630:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800a634:	f241 3288 	movw	r2, #5000	; 0x1388
 800a638:	4619      	mov	r1, r3
 800a63a:	4840      	ldr	r0, [pc, #256]	; (800a73c <Quad_Enable+0x15c>)
 800a63c:	f006 fe4c 	bl	80112d8 <HAL_QSPI_Receive>
 800a640:	4603      	mov	r3, r0
 800a642:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (ret != HAL_OK) {
 800a646:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d002      	beq.n	800a654 <Quad_Enable+0x74>
		return ret;
 800a64e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a652:	e06f      	b.n	800a734 <Quad_Enable+0x154>
	}
	if(Write_Enable()!=HAL_OK)
 800a654:	f7ff ff72 	bl	800a53c <Write_Enable>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d002      	beq.n	800a664 <Quad_Enable+0x84>
	{
		return ret;
 800a65e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a662:	e067      	b.n	800a734 <Quad_Enable+0x154>
	}
	SET_BIT(reg, MX25R6435F_SR_QE);
 800a664:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a66c:	b2db      	uxtb	r3, r3
 800a66e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 800a672:	2301      	movs	r3, #1
 800a674:	603b      	str	r3, [r7, #0]
	ret=HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a676:	463b      	mov	r3, r7
 800a678:	f241 3288 	movw	r2, #5000	; 0x1388
 800a67c:	4619      	mov	r1, r3
 800a67e:	482f      	ldr	r0, [pc, #188]	; (800a73c <Quad_Enable+0x15c>)
 800a680:	f006 fd3a 	bl	80110f8 <HAL_QSPI_Command>
 800a684:	4603      	mov	r3, r0
 800a686:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (ret != HAL_OK) {
 800a68a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d002      	beq.n	800a698 <Quad_Enable+0xb8>
		return ret;
 800a692:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a696:	e04d      	b.n	800a734 <Quad_Enable+0x154>
	}
	ret=HAL_QSPI_Transmit(&hqspi, &reg, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a698:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800a69c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	4826      	ldr	r0, [pc, #152]	; (800a73c <Quad_Enable+0x15c>)
 800a6a4:	f006 fd86 	bl	80111b4 <HAL_QSPI_Transmit>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (ret != HAL_OK) {
 800a6ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d002      	beq.n	800a6bc <Quad_Enable+0xdc>
		return ret;
 800a6b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a6ba:	e03b      	b.n	800a734 <Quad_Enable+0x154>
	}
	ret=QSPI_AutoPollingMemReady();
 800a6bc:	f000 f842 	bl	800a744 <QSPI_AutoPollingMemReady>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (ret != HAL_OK) {
 800a6c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d002      	beq.n	800a6d4 <Quad_Enable+0xf4>
		return ret;
 800a6ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a6d2:	e02f      	b.n	800a734 <Quad_Enable+0x154>
	}
	sCommand.Instruction = READ_STATUS_REG_CMD;
 800a6d4:	2305      	movs	r3, #5
 800a6d6:	603b      	str	r3, [r7, #0]
	ret=HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a6d8:	463b      	mov	r3, r7
 800a6da:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6de:	4619      	mov	r1, r3
 800a6e0:	4816      	ldr	r0, [pc, #88]	; (800a73c <Quad_Enable+0x15c>)
 800a6e2:	f006 fd09 	bl	80110f8 <HAL_QSPI_Command>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (ret != HAL_OK) {
 800a6ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d002      	beq.n	800a6fa <Quad_Enable+0x11a>
		return ret;
 800a6f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a6f8:	e01c      	b.n	800a734 <Quad_Enable+0x154>
	}
	ret=HAL_QSPI_Receive(&hqspi, &reg, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a6fa:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800a6fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800a702:	4619      	mov	r1, r3
 800a704:	480d      	ldr	r0, [pc, #52]	; (800a73c <Quad_Enable+0x15c>)
 800a706:	f006 fde7 	bl	80112d8 <HAL_QSPI_Receive>
 800a70a:	4603      	mov	r3, r0
 800a70c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (ret != HAL_OK) {
 800a710:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a714:	2b00      	cmp	r3, #0
 800a716:	d002      	beq.n	800a71e <Quad_Enable+0x13e>
		return ret;
 800a718:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a71c:	e00a      	b.n	800a734 <Quad_Enable+0x154>
	}
	if((reg & MX25R6435F_SR_QE) == 0){
 800a71e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a726:	2b00      	cmp	r3, #0
 800a728:	d102      	bne.n	800a730 <Quad_Enable+0x150>
		printf("QUAD enable\n");
 800a72a:	4805      	ldr	r0, [pc, #20]	; (800a740 <Quad_Enable+0x160>)
 800a72c:	f011 f85a 	bl	801b7e4 <puts>
	}
	return ret;
 800a730:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800a734:	4618      	mov	r0, r3
 800a736:	3738      	adds	r7, #56	; 0x38
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}
 800a73c:	2000068c 	.word	0x2000068c
 800a740:	08020b94 	.word	0x08020b94

0800a744 <QSPI_AutoPollingMemReady>:

uint8_t QSPI_AutoPollingMemReady(void)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b094      	sub	sp, #80	; 0x50
 800a748:	af00      	add	r7, sp, #0
	uint8_t ret;
	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;
	sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800a74a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a74e:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Instruction       = READ_STATUS_REG_CMD;
 800a750:	2305      	movs	r3, #5
 800a752:	61bb      	str	r3, [r7, #24]
	sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 800a754:	2300      	movs	r3, #0
 800a756:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800a758:	2300      	movs	r3, #0
 800a75a:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode          = QSPI_DATA_1_LINE;
 800a75c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a760:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles       = 0;
 800a762:	2300      	movs	r3, #0
 800a764:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800a766:	2300      	movs	r3, #0
 800a768:	647b      	str	r3, [r7, #68]	; 0x44

	//sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800a76a:	2300      	movs	r3, #0
 800a76c:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfig.Match           = 0;
 800a76e:	2300      	movs	r3, #0
 800a770:	603b      	str	r3, [r7, #0]
	sConfig.Mask            = MX25R6435F_SR_WIP;
 800a772:	2301      	movs	r3, #1
 800a774:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 800a776:	2300      	movs	r3, #0
 800a778:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 800a77a:	2301      	movs	r3, #1
 800a77c:	60fb      	str	r3, [r7, #12]
	sConfig.Interval        = 0x10;
 800a77e:	2310      	movs	r3, #16
 800a780:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800a782:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a786:	617b      	str	r3, [r7, #20]
	ret=HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a788:	463a      	mov	r2, r7
 800a78a:	f107 0118 	add.w	r1, r7, #24
 800a78e:	f241 3388 	movw	r3, #5000	; 0x1388
 800a792:	4809      	ldr	r0, [pc, #36]	; (800a7b8 <QSPI_AutoPollingMemReady+0x74>)
 800a794:	f006 fe3d 	bl	8011412 <HAL_QSPI_AutoPolling>
 800a798:	4603      	mov	r3, r0
 800a79a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if(ret != HAL_OK)
 800a79e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d002      	beq.n	800a7ac <QSPI_AutoPollingMemReady+0x68>
	{
		return ret;
 800a7a6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a7aa:	e000      	b.n	800a7ae <QSPI_AutoPollingMemReady+0x6a>

	}
	return HAL_OK;
 800a7ac:	2300      	movs	r3, #0
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3750      	adds	r7, #80	; 0x50
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}
 800a7b6:	bf00      	nop
 800a7b8:	2000068c 	.word	0x2000068c

0800a7bc <Quad_Read>:
uint8_t Quad_Read(uint8_t *pData,uint32_t Read_ADDr,uint32_t Size)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b092      	sub	sp, #72	; 0x48
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	60f8      	str	r0, [r7, #12]
 800a7c4:	60b9      	str	r1, [r7, #8]
 800a7c6:	607a      	str	r2, [r7, #4]
	//	{
	//		printf("Quad_enable");
	//
	//	}
	QSPI_CommandTypeDef sCommand;
	sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800a7c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7cc:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.Instruction       = QUAD_READ;
 800a7ce:	23eb      	movs	r3, #235	; 0xeb
 800a7d0:	613b      	str	r3, [r7, #16]
	sCommand.AddressMode       = QSPI_ADDRESS_4_LINES ;
 800a7d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a7d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Address           = Read_ADDr;
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	617b      	str	r3, [r7, #20]
	sCommand.AddressSize 	   = QSPI_ADDRESS_24_BITS;
 800a7e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a7e4:	61fb      	str	r3, [r7, #28]
	//sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
	sCommand.DataMode          = QSPI_DATA_4_LINES;
 800a7e6:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800a7ea:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DummyCycles       = 6;//8
 800a7ec:	2306      	movs	r3, #6
 800a7ee:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.NbData            = Size;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	643b      	str	r3, [r7, #64]	; 0x40

	ret=Quad_Enable();
 800a7fc:	f7ff fef0 	bl	800a5e0 <Quad_Enable>
 800a800:	4603      	mov	r3, r0
 800a802:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if(ret==HAL_OK)
 800a806:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d102      	bne.n	800a814 <Quad_Read+0x58>
	{
		printf("Quad_enable\n");
 800a80e:	481f      	ldr	r0, [pc, #124]	; (800a88c <Quad_Read+0xd0>)
 800a810:	f010 ffe8 	bl	801b7e4 <puts>

	}
	ret=HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a814:	f107 0310 	add.w	r3, r7, #16
 800a818:	f241 3288 	movw	r2, #5000	; 0x1388
 800a81c:	4619      	mov	r1, r3
 800a81e:	481c      	ldr	r0, [pc, #112]	; (800a890 <Quad_Read+0xd4>)
 800a820:	f006 fc6a 	bl	80110f8 <HAL_QSPI_Command>
 800a824:	4603      	mov	r3, r0
 800a826:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (ret != HAL_OK) {
 800a82a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d005      	beq.n	800a83e <Quad_Read+0x82>
		printf("Read_command fail \n");
 800a832:	4818      	ldr	r0, [pc, #96]	; (800a894 <Quad_Read+0xd8>)
 800a834:	f010 ffd6 	bl	801b7e4 <puts>
		return ret;
 800a838:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a83c:	e022      	b.n	800a884 <Quad_Read+0xc8>
	}
	ret=HAL_QSPI_Receive(&hqspi,pData, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a83e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a842:	68f9      	ldr	r1, [r7, #12]
 800a844:	4812      	ldr	r0, [pc, #72]	; (800a890 <Quad_Read+0xd4>)
 800a846:	f006 fd47 	bl	80112d8 <HAL_QSPI_Receive>
 800a84a:	4603      	mov	r3, r0
 800a84c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (ret != HAL_OK) {
 800a850:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a854:	2b00      	cmp	r3, #0
 800a856:	d005      	beq.n	800a864 <Quad_Read+0xa8>
		printf("Read_rx_fail \n");
 800a858:	480f      	ldr	r0, [pc, #60]	; (800a898 <Quad_Read+0xdc>)
 800a85a:	f010 ffc3 	bl	801b7e4 <puts>
		return ret;
 800a85e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a862:	e00f      	b.n	800a884 <Quad_Read+0xc8>
	}
	ret=QSPI_AutoPollingMemReady();
 800a864:	f7ff ff6e 	bl	800a744 <QSPI_AutoPollingMemReady>
 800a868:	4603      	mov	r3, r0
 800a86a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (ret != HAL_OK)
 800a86e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a872:	2b00      	cmp	r3, #0
 800a874:	d005      	beq.n	800a882 <Quad_Read+0xc6>
	{
		printf("Read_command polling \n");
 800a876:	4809      	ldr	r0, [pc, #36]	; (800a89c <Quad_Read+0xe0>)
 800a878:	f010 ffb4 	bl	801b7e4 <puts>
		return ret;
 800a87c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a880:	e000      	b.n	800a884 <Quad_Read+0xc8>
	}

	return HAL_OK;
 800a882:	2300      	movs	r3, #0
}
 800a884:	4618      	mov	r0, r3
 800a886:	3748      	adds	r7, #72	; 0x48
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}
 800a88c:	08020ba0 	.word	0x08020ba0
 800a890:	2000068c 	.word	0x2000068c
 800a894:	08020bac 	.word	0x08020bac
 800a898:	08020bc0 	.word	0x08020bc0
 800a89c:	08020bd0 	.word	0x08020bd0

0800a8a0 <Quad_Write>:
uint8_t Quad_Write(uint8_t *pData,uint32_t Write_ADDr,uint32_t Size)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b092      	sub	sp, #72	; 0x48
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	60f8      	str	r0, [r7, #12]
 800a8a8:	60b9      	str	r1, [r7, #8]
 800a8aa:	607a      	str	r2, [r7, #4]
	//	if(ret==HAL_OK)
	//		{
	//		printf("Quad_enable");
	//		}
	//uint8_t aT[] = " ****QSPI communication based on IT****  ****QSPI communication based on IT****  ****QSPI communication based on IT****  ****QSPI communication based on IT****  ****QSPI communication based on IT****  ****QSPI communication based on IT**** ";
	sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800a8ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8b0:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.Instruction       = QUAD_PAGE_PROG_CMD;
 800a8b2:	2338      	movs	r3, #56	; 0x38
 800a8b4:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Address           = Write_ADDr;
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	617b      	str	r3, [r7, #20]
	sCommand.AddressSize 	   = QSPI_ADDRESS_24_BITS;
 800a8be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a8c2:	61fb      	str	r3, [r7, #28]
	sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 800a8c4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a8c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DataMode          = QSPI_DATA_4_LINES;
 800a8ca:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800a8ce:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DummyCycles       = 0;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.NbData            = Size;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	643b      	str	r3, [r7, #64]	; 0x40
	if (Write_Enable() != HAL_OK) {
 800a8e0:	f7ff fe2c 	bl	800a53c <Write_Enable>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d004      	beq.n	800a8f4 <Quad_Write+0x54>
		printf("writ_en fail \n");
 800a8ea:	4820      	ldr	r0, [pc, #128]	; (800a96c <Quad_Write+0xcc>)
 800a8ec:	f010 ff7a 	bl	801b7e4 <puts>
		return HAL_ERROR;
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	e037      	b.n	800a964 <Quad_Write+0xc4>
	}
	ret=HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a8f4:	f107 0310 	add.w	r3, r7, #16
 800a8f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	481c      	ldr	r0, [pc, #112]	; (800a970 <Quad_Write+0xd0>)
 800a900:	f006 fbfa 	bl	80110f8 <HAL_QSPI_Command>
 800a904:	4603      	mov	r3, r0
 800a906:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (ret != HAL_OK) {
 800a90a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d005      	beq.n	800a91e <Quad_Write+0x7e>
		printf("write_command fail \n");
 800a912:	4818      	ldr	r0, [pc, #96]	; (800a974 <Quad_Write+0xd4>)
 800a914:	f010 ff66 	bl	801b7e4 <puts>
		return ret;
 800a918:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a91c:	e022      	b.n	800a964 <Quad_Write+0xc4>
	}
	ret=HAL_QSPI_Transmit(&hqspi, pData, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a91e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a922:	68f9      	ldr	r1, [r7, #12]
 800a924:	4812      	ldr	r0, [pc, #72]	; (800a970 <Quad_Write+0xd0>)
 800a926:	f006 fc45 	bl	80111b4 <HAL_QSPI_Transmit>
 800a92a:	4603      	mov	r3, r0
 800a92c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (ret != HAL_OK) {
 800a930:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a934:	2b00      	cmp	r3, #0
 800a936:	d005      	beq.n	800a944 <Quad_Write+0xa4>
		printf("write_tx fail \n");
 800a938:	480f      	ldr	r0, [pc, #60]	; (800a978 <Quad_Write+0xd8>)
 800a93a:	f010 ff53 	bl	801b7e4 <puts>
		return ret;
 800a93e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a942:	e00f      	b.n	800a964 <Quad_Write+0xc4>
	}
	ret=QSPI_AutoPollingMemReady();
 800a944:	f7ff fefe 	bl	800a744 <QSPI_AutoPollingMemReady>
 800a948:	4603      	mov	r3, r0
 800a94a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (ret != HAL_OK)
 800a94e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a952:	2b00      	cmp	r3, #0
 800a954:	d005      	beq.n	800a962 <Quad_Write+0xc2>
	{printf("write_polling fail \n");
 800a956:	4809      	ldr	r0, [pc, #36]	; (800a97c <Quad_Write+0xdc>)
 800a958:	f010 ff44 	bl	801b7e4 <puts>
		return ret;
 800a95c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a960:	e000      	b.n	800a964 <Quad_Write+0xc4>
	}
	return HAL_OK;
 800a962:	2300      	movs	r3, #0
}
 800a964:	4618      	mov	r0, r3
 800a966:	3748      	adds	r7, #72	; 0x48
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}
 800a96c:	08020be8 	.word	0x08020be8
 800a970:	2000068c 	.word	0x2000068c
 800a974:	08020bf8 	.word	0x08020bf8
 800a978:	08020c0c 	.word	0x08020c0c
 800a97c:	08020c1c 	.word	0x08020c1c

0800a980 <QSPI_Sector_Erase>:
uint8_t QSPI_Sector_Erase(uint32_t Address)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b090      	sub	sp, #64	; 0x40
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
	uint8_t ret;

	if(Write_Enable()!=HAL_OK)
 800a988:	f7ff fdd8 	bl	800a53c <Write_Enable>
 800a98c:	4603      	mov	r3, r0
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d002      	beq.n	800a998 <QSPI_Sector_Erase+0x18>
	{
		printf("Write_enable");
 800a992:	4827      	ldr	r0, [pc, #156]	; (800aa30 <QSPI_Sector_Erase+0xb0>)
 800a994:	f010 feb8 	bl	801b708 <iprintf>
	}

	QSPI_CommandTypeDef sCommand;
	sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800a998:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a99c:	623b      	str	r3, [r7, #32]
	sCommand.Instruction       = SECTOR_ERASE_CMD;
 800a99e:	2320      	movs	r3, #32
 800a9a0:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
 800a9a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9a6:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 800a9a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a9ac:	617b      	str	r3, [r7, #20]
	sCommand.Address           = Address;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	60fb      	str	r3, [r7, #12]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DataMode          = QSPI_DATA_NONE;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles       = 0;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	61fb      	str	r3, [r7, #28]
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	637b      	str	r3, [r7, #52]	; 0x34

	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	63bb      	str	r3, [r7, #56]	; 0x38
	//	  sCommand.DataMode          = QSPI_DATA_NONE;
	//	  sCommand.DummyCycles       = 0;
	//	  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
	//	  //sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
	//	  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
	if(Write_Enable()!=HAL_OK)
 800a9c6:	f7ff fdb9 	bl	800a53c <Write_Enable>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d005      	beq.n	800a9dc <QSPI_Sector_Erase+0x5c>
	{
		printf("ER_Write_enable_fail\n");
 800a9d0:	4818      	ldr	r0, [pc, #96]	; (800aa34 <QSPI_Sector_Erase+0xb4>)
 800a9d2:	f010 ff07 	bl	801b7e4 <puts>
		return ret;
 800a9d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a9da:	e024      	b.n	800aa26 <QSPI_Sector_Erase+0xa6>
	}
	ret=HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a9dc:	f107 0308 	add.w	r3, r7, #8
 800a9e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9e4:	4619      	mov	r1, r3
 800a9e6:	4814      	ldr	r0, [pc, #80]	; (800aa38 <QSPI_Sector_Erase+0xb8>)
 800a9e8:	f006 fb86 	bl	80110f8 <HAL_QSPI_Command>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (ret != HAL_OK) {
 800a9f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d005      	beq.n	800aa06 <QSPI_Sector_Erase+0x86>
		printf("ER_Write_command_fail\n");
 800a9fa:	4810      	ldr	r0, [pc, #64]	; (800aa3c <QSPI_Sector_Erase+0xbc>)
 800a9fc:	f010 fef2 	bl	801b7e4 <puts>
		return ret;
 800aa00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aa04:	e00f      	b.n	800aa26 <QSPI_Sector_Erase+0xa6>
	}
	ret=QSPI_AutoPollingMemReady();
 800aa06:	f7ff fe9d 	bl	800a744 <QSPI_AutoPollingMemReady>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (ret != HAL_OK)
 800aa10:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d005      	beq.n	800aa24 <QSPI_Sector_Erase+0xa4>
	{

		printf("Write_poll_fail\n");
 800aa18:	4809      	ldr	r0, [pc, #36]	; (800aa40 <QSPI_Sector_Erase+0xc0>)
 800aa1a:	f010 fee3 	bl	801b7e4 <puts>
		return ret;
 800aa1e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aa22:	e000      	b.n	800aa26 <QSPI_Sector_Erase+0xa6>
	}
	return HAL_OK;
 800aa24:	2300      	movs	r3, #0

}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3740      	adds	r7, #64	; 0x40
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
 800aa2e:	bf00      	nop
 800aa30:	08020c30 	.word	0x08020c30
 800aa34:	08020c40 	.word	0x08020c40
 800aa38:	2000068c 	.word	0x2000068c
 800aa3c:	08020c58 	.word	0x08020c58
 800aa40:	08020c70 	.word	0x08020c70

0800aa44 <update_address>:

void update_address(uint32_t add,uint8_t select)
{
 800aa44:	b5b0      	push	{r4, r5, r7, lr}
 800aa46:	b088      	sub	sp, #32
 800aa48:	af04      	add	r7, sp, #16
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	70fb      	strb	r3, [r7, #3]
	uint8_t current_address[6];
	Byte_4_conv.Byte_32=add;
 800aa50:	4a46      	ldr	r2, [pc, #280]	; (800ab6c <update_address+0x128>)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6013      	str	r3, [r2, #0]
	Quad_Read(current_address,flash_address_map,6);
 800aa56:	f107 0308 	add.w	r3, r7, #8
 800aa5a:	2206      	movs	r2, #6
 800aa5c:	4944      	ldr	r1, [pc, #272]	; (800ab70 <update_address+0x12c>)
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f7ff feac 	bl	800a7bc <Quad_Read>
	printf("Update address  %x %x %x %x %x %x \n",current_address[0],current_address[1],current_address[2],current_address[3],current_address[4],current_address[5]);
 800aa64:	7a3b      	ldrb	r3, [r7, #8]
 800aa66:	4618      	mov	r0, r3
 800aa68:	7a7b      	ldrb	r3, [r7, #9]
 800aa6a:	461c      	mov	r4, r3
 800aa6c:	7abb      	ldrb	r3, [r7, #10]
 800aa6e:	461d      	mov	r5, r3
 800aa70:	7afb      	ldrb	r3, [r7, #11]
 800aa72:	7b3a      	ldrb	r2, [r7, #12]
 800aa74:	7b79      	ldrb	r1, [r7, #13]
 800aa76:	9102      	str	r1, [sp, #8]
 800aa78:	9201      	str	r2, [sp, #4]
 800aa7a:	9300      	str	r3, [sp, #0]
 800aa7c:	462b      	mov	r3, r5
 800aa7e:	4622      	mov	r2, r4
 800aa80:	4601      	mov	r1, r0
 800aa82:	483c      	ldr	r0, [pc, #240]	; (800ab74 <update_address+0x130>)
 800aa84:	f010 fe40 	bl	801b708 <iprintf>
	if(select==1)
 800aa88:	78fb      	ldrb	r3, [r7, #3]
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	d12b      	bne.n	800aae6 <update_address+0xa2>
	{
		if(((add+1)%0x1000)==0)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	3301      	adds	r3, #1
 800aa92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d114      	bne.n	800aac4 <update_address+0x80>
		{
			if((add+1)>=flash_end_address_Env)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	4a36      	ldr	r2, [pc, #216]	; (800ab78 <update_address+0x134>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d906      	bls.n	800aab2 <update_address+0x6e>
			{
				QSPI_Sector_Erase(flash_start_address_Env);
 800aaa4:	2000      	movs	r0, #0
 800aaa6:	f7ff ff6b 	bl	800a980 <QSPI_Sector_Erase>
				Byte_4_conv.Byte_32=flash_start_address_Env;
 800aaaa:	4b30      	ldr	r3, [pc, #192]	; (800ab6c <update_address+0x128>)
 800aaac:	2200      	movs	r2, #0
 800aaae:	601a      	str	r2, [r3, #0]
 800aab0:	e008      	b.n	800aac4 <update_address+0x80>
				//break;
			}
			else
			{
				QSPI_Sector_Erase(add+1);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	3301      	adds	r3, #1
 800aab6:	4618      	mov	r0, r3
 800aab8:	f7ff ff62 	bl	800a980 <QSPI_Sector_Erase>
				Byte_4_conv.Byte_32=(add+1);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	3301      	adds	r3, #1
 800aac0:	4a2a      	ldr	r2, [pc, #168]	; (800ab6c <update_address+0x128>)
 800aac2:	6013      	str	r3, [r2, #0]
				//break;
			}
		}
		current_address[0]=Byte_4_conv.Byte_8[2];
 800aac4:	4b29      	ldr	r3, [pc, #164]	; (800ab6c <update_address+0x128>)
 800aac6:	789b      	ldrb	r3, [r3, #2]
 800aac8:	723b      	strb	r3, [r7, #8]
		current_address[1]=Byte_4_conv.Byte_8[1];
 800aaca:	4b28      	ldr	r3, [pc, #160]	; (800ab6c <update_address+0x128>)
 800aacc:	785b      	ldrb	r3, [r3, #1]
 800aace:	727b      	strb	r3, [r7, #9]
		current_address[2]=Byte_4_conv.Byte_8[0];
 800aad0:	4b26      	ldr	r3, [pc, #152]	; (800ab6c <update_address+0x128>)
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	72bb      	strb	r3, [r7, #10]
		printf("upDATED_address %x %x %x",current_address[0],current_address[1],current_address[2]);
 800aad6:	7a3b      	ldrb	r3, [r7, #8]
 800aad8:	4619      	mov	r1, r3
 800aada:	7a7b      	ldrb	r3, [r7, #9]
 800aadc:	461a      	mov	r2, r3
 800aade:	7abb      	ldrb	r3, [r7, #10]
 800aae0:	4826      	ldr	r0, [pc, #152]	; (800ab7c <update_address+0x138>)
 800aae2:	f010 fe11 	bl	801b708 <iprintf>
	}
	if(select==2)
 800aae6:	78fb      	ldrb	r3, [r7, #3]
 800aae8:	2b02      	cmp	r3, #2
 800aaea:	d11f      	bne.n	800ab2c <update_address+0xe8>
	{
		if((add % 0x1000)==0)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d111      	bne.n	800ab1a <update_address+0xd6>
		{
			if(add>=flash_end_address_LT)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	4a21      	ldr	r2, [pc, #132]	; (800ab80 <update_address+0x13c>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d907      	bls.n	800ab0e <update_address+0xca>
			{
				QSPI_Sector_Erase(flash_end_address_LT);
 800aafe:	4821      	ldr	r0, [pc, #132]	; (800ab84 <update_address+0x140>)
 800ab00:	f7ff ff3e 	bl	800a980 <QSPI_Sector_Erase>
				Byte_4_conv.Byte_32=flash_start_address_LT;
 800ab04:	4b19      	ldr	r3, [pc, #100]	; (800ab6c <update_address+0x128>)
 800ab06:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ab0a:	601a      	str	r2, [r3, #0]
 800ab0c:	e005      	b.n	800ab1a <update_address+0xd6>
			}
			else
			{
				QSPI_Sector_Erase(add);
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f7ff ff36 	bl	800a980 <QSPI_Sector_Erase>
				Byte_4_conv.Byte_32=(add);
 800ab14:	4a15      	ldr	r2, [pc, #84]	; (800ab6c <update_address+0x128>)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6013      	str	r3, [r2, #0]
				//break;
			}
		}
		current_address[3]=Byte_4_conv.Byte_8[2];
 800ab1a:	4b14      	ldr	r3, [pc, #80]	; (800ab6c <update_address+0x128>)
 800ab1c:	789b      	ldrb	r3, [r3, #2]
 800ab1e:	72fb      	strb	r3, [r7, #11]
		current_address[4]=Byte_4_conv.Byte_8[1];
 800ab20:	4b12      	ldr	r3, [pc, #72]	; (800ab6c <update_address+0x128>)
 800ab22:	785b      	ldrb	r3, [r3, #1]
 800ab24:	733b      	strb	r3, [r7, #12]
		current_address[5]=Byte_4_conv.Byte_8[0];
 800ab26:	4b11      	ldr	r3, [pc, #68]	; (800ab6c <update_address+0x128>)
 800ab28:	781b      	ldrb	r3, [r3, #0]
 800ab2a:	737b      	strb	r3, [r7, #13]
	}
	QSPI_Sector_Erase(flash_address_map);
 800ab2c:	4810      	ldr	r0, [pc, #64]	; (800ab70 <update_address+0x12c>)
 800ab2e:	f7ff ff27 	bl	800a980 <QSPI_Sector_Erase>
	//	uint8_t current_add[6];
	//	Quad_Read(current_add,flash_address_map,6);
	//	printf("CHANGED_Add  %x %x %x %x %x %x \n",current_add[0],current_add[1],current_add[2],current_add[3],current_add[4],current_add[5]);

	Quad_Write(current_address,flash_address_map,6);
 800ab32:	f107 0308 	add.w	r3, r7, #8
 800ab36:	2206      	movs	r2, #6
 800ab38:	490d      	ldr	r1, [pc, #52]	; (800ab70 <update_address+0x12c>)
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f7ff feb0 	bl	800a8a0 <Quad_Write>
	printf("CHANGED_Address  %x %x %x %x %x %x \n",current_address[0],current_address[1],current_address[2],current_address[3],current_address[4],current_address[5]);
 800ab40:	7a3b      	ldrb	r3, [r7, #8]
 800ab42:	4618      	mov	r0, r3
 800ab44:	7a7b      	ldrb	r3, [r7, #9]
 800ab46:	461c      	mov	r4, r3
 800ab48:	7abb      	ldrb	r3, [r7, #10]
 800ab4a:	461d      	mov	r5, r3
 800ab4c:	7afb      	ldrb	r3, [r7, #11]
 800ab4e:	7b3a      	ldrb	r2, [r7, #12]
 800ab50:	7b79      	ldrb	r1, [r7, #13]
 800ab52:	9102      	str	r1, [sp, #8]
 800ab54:	9201      	str	r2, [sp, #4]
 800ab56:	9300      	str	r3, [sp, #0]
 800ab58:	462b      	mov	r3, r5
 800ab5a:	4622      	mov	r2, r4
 800ab5c:	4601      	mov	r1, r0
 800ab5e:	480a      	ldr	r0, [pc, #40]	; (800ab88 <update_address+0x144>)
 800ab60:	f010 fdd2 	bl	801b708 <iprintf>


}
 800ab64:	bf00      	nop
 800ab66:	3710      	adds	r7, #16
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bdb0      	pop	{r4, r5, r7, pc}
 800ab6c:	20000408 	.word	0x20000408
 800ab70:	001ff000 	.word	0x001ff000
 800ab74:	08020c80 	.word	0x08020c80
 800ab78:	000ffffe 	.word	0x000ffffe
 800ab7c:	08020ca4 	.word	0x08020ca4
 800ab80:	001feffe 	.word	0x001feffe
 800ab84:	001fefff 	.word	0x001fefff
 800ab88:	08020cc0 	.word	0x08020cc0

0800ab8c <Read_flash_address>:
uint32_t Read_flash_address(uint8_t select)
{
 800ab8c:	b5b0      	push	{r4, r5, r7, lr}
 800ab8e:	b08a      	sub	sp, #40	; 0x28
 800ab90:	af04      	add	r7, sp, #16
 800ab92:	4603      	mov	r3, r0
 800ab94:	71fb      	strb	r3, [r7, #7]
	uint8_t current_address[6];

	uint32_t add;
	Quad_Read(current_address,flash_address_map,6);
 800ab96:	f107 030c 	add.w	r3, r7, #12
 800ab9a:	2206      	movs	r2, #6
 800ab9c:	4934      	ldr	r1, [pc, #208]	; (800ac70 <Read_flash_address+0xe4>)
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f7ff fe0c 	bl	800a7bc <Quad_Read>
	printf("current_add %x %x %x %x %x %x \n",current_address[0],current_address[1],current_address[2],current_address[3],current_address[4],current_address[5]);
 800aba4:	7b3b      	ldrb	r3, [r7, #12]
 800aba6:	4618      	mov	r0, r3
 800aba8:	7b7b      	ldrb	r3, [r7, #13]
 800abaa:	461c      	mov	r4, r3
 800abac:	7bbb      	ldrb	r3, [r7, #14]
 800abae:	461d      	mov	r5, r3
 800abb0:	7bfb      	ldrb	r3, [r7, #15]
 800abb2:	7c3a      	ldrb	r2, [r7, #16]
 800abb4:	7c79      	ldrb	r1, [r7, #17]
 800abb6:	9102      	str	r1, [sp, #8]
 800abb8:	9201      	str	r2, [sp, #4]
 800abba:	9300      	str	r3, [sp, #0]
 800abbc:	462b      	mov	r3, r5
 800abbe:	4622      	mov	r2, r4
 800abc0:	4601      	mov	r1, r0
 800abc2:	482c      	ldr	r0, [pc, #176]	; (800ac74 <Read_flash_address+0xe8>)
 800abc4:	f010 fda0 	bl	801b708 <iprintf>
	// printf("select %x \n",select);
	if(select==1)
 800abc8:	79fb      	ldrb	r3, [r7, #7]
 800abca:	2b01      	cmp	r3, #1
 800abcc:	d122      	bne.n	800ac14 <Read_flash_address+0x88>
	{
		Byte_4_conv.Byte_8[0]=current_address[2];
 800abce:	7bba      	ldrb	r2, [r7, #14]
 800abd0:	4b29      	ldr	r3, [pc, #164]	; (800ac78 <Read_flash_address+0xec>)
 800abd2:	701a      	strb	r2, [r3, #0]
		Byte_4_conv.Byte_8[1]=current_address[1];
 800abd4:	7b7a      	ldrb	r2, [r7, #13]
 800abd6:	4b28      	ldr	r3, [pc, #160]	; (800ac78 <Read_flash_address+0xec>)
 800abd8:	705a      	strb	r2, [r3, #1]
		Byte_4_conv.Byte_8[2]=current_address[0];
 800abda:	7b3a      	ldrb	r2, [r7, #12]
 800abdc:	4b26      	ldr	r3, [pc, #152]	; (800ac78 <Read_flash_address+0xec>)
 800abde:	709a      	strb	r2, [r3, #2]
		Byte_4_conv.Byte_8[3]=0;
 800abe0:	4b25      	ldr	r3, [pc, #148]	; (800ac78 <Read_flash_address+0xec>)
 800abe2:	2200      	movs	r2, #0
 800abe4:	70da      	strb	r2, [r3, #3]
		add=Byte_4_conv.Byte_32;
 800abe6:	4b24      	ldr	r3, [pc, #144]	; (800ac78 <Read_flash_address+0xec>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	617b      	str	r3, [r7, #20]
		printf("address_1: %ld \n\n",add);
 800abec:	6979      	ldr	r1, [r7, #20]
 800abee:	4823      	ldr	r0, [pc, #140]	; (800ac7c <Read_flash_address+0xf0>)
 800abf0:	f010 fd8a 	bl	801b708 <iprintf>
		if(add==0xffffff || add>=flash_end_address_Env||add<=flash_start_address_Env)
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d006      	beq.n	800ac0c <Read_flash_address+0x80>
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	4a1f      	ldr	r2, [pc, #124]	; (800ac80 <Read_flash_address+0xf4>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d802      	bhi.n	800ac0c <Read_flash_address+0x80>
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d101      	bne.n	800ac10 <Read_flash_address+0x84>
		{
			//update_address(start_address_Temp,1);
			add=flash_start_address_Env;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	617b      	str	r3, [r7, #20]
		}
		return add;
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	e029      	b.n	800ac68 <Read_flash_address+0xdc>
	}
	else if(select==2)
 800ac14:	79fb      	ldrb	r3, [r7, #7]
 800ac16:	2b02      	cmp	r3, #2
 800ac18:	d124      	bne.n	800ac64 <Read_flash_address+0xd8>
	{
		Byte_4_conv.Byte_8[0]=current_address[5];
 800ac1a:	7c7a      	ldrb	r2, [r7, #17]
 800ac1c:	4b16      	ldr	r3, [pc, #88]	; (800ac78 <Read_flash_address+0xec>)
 800ac1e:	701a      	strb	r2, [r3, #0]
		Byte_4_conv.Byte_8[1]=current_address[4];
 800ac20:	7c3a      	ldrb	r2, [r7, #16]
 800ac22:	4b15      	ldr	r3, [pc, #84]	; (800ac78 <Read_flash_address+0xec>)
 800ac24:	705a      	strb	r2, [r3, #1]
		Byte_4_conv.Byte_8[2]=current_address[3];
 800ac26:	7bfa      	ldrb	r2, [r7, #15]
 800ac28:	4b13      	ldr	r3, [pc, #76]	; (800ac78 <Read_flash_address+0xec>)
 800ac2a:	709a      	strb	r2, [r3, #2]
		Byte_4_conv.Byte_8[3]=0;
 800ac2c:	4b12      	ldr	r3, [pc, #72]	; (800ac78 <Read_flash_address+0xec>)
 800ac2e:	2200      	movs	r2, #0
 800ac30:	70da      	strb	r2, [r3, #3]
		add=Byte_4_conv.Byte_32;
 800ac32:	4b11      	ldr	r3, [pc, #68]	; (800ac78 <Read_flash_address+0xec>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	617b      	str	r3, [r7, #20]
		printf("address_1: %ld \n\n",add);
 800ac38:	6979      	ldr	r1, [r7, #20]
 800ac3a:	4810      	ldr	r0, [pc, #64]	; (800ac7c <Read_flash_address+0xf0>)
 800ac3c:	f010 fd64 	bl	801b708 <iprintf>
		if(add==0xffffff || add>=flash_end_address_LT || add<=flash_start_address_LT)
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d007      	beq.n	800ac5a <Read_flash_address+0xce>
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	4a0d      	ldr	r2, [pc, #52]	; (800ac84 <Read_flash_address+0xf8>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d803      	bhi.n	800ac5a <Read_flash_address+0xce>
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac58:	d802      	bhi.n	800ac60 <Read_flash_address+0xd4>
		{
			//update_address(start_address_Temp,2);
			add=flash_start_address_LT;
 800ac5a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ac5e:	617b      	str	r3, [r7, #20]
		}
		return add;
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	e001      	b.n	800ac68 <Read_flash_address+0xdc>
	}
	else
	{
		return(0xffffff);
 800ac64:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
	}
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3718      	adds	r7, #24
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bdb0      	pop	{r4, r5, r7, pc}
 800ac70:	001ff000 	.word	0x001ff000
 800ac74:	08020ce8 	.word	0x08020ce8
 800ac78:	20000408 	.word	0x20000408
 800ac7c:	08020d08 	.word	0x08020d08
 800ac80:	000ffffe 	.word	0x000ffffe
 800ac84:	001feffe 	.word	0x001feffe

0800ac88 <LL_AHB2_GRP1_EnableClock>:
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b085      	sub	sp, #20
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800ac90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ac96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800aca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aca4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	4013      	ands	r3, r2
 800acaa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800acac:	68fb      	ldr	r3, [r7, #12]
}
 800acae:	bf00      	nop
 800acb0:	3714      	adds	r7, #20
 800acb2:	46bd      	mov	sp, r7
 800acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb8:	4770      	bx	lr
	...

0800acbc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b086      	sub	sp, #24
 800acc0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800acc2:	1d3b      	adds	r3, r7, #4
 800acc4:	2200      	movs	r2, #0
 800acc6:	601a      	str	r2, [r3, #0]
 800acc8:	605a      	str	r2, [r3, #4]
 800acca:	609a      	str	r2, [r3, #8]
 800accc:	60da      	str	r2, [r3, #12]
 800acce:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800acd0:	2004      	movs	r0, #4
 800acd2:	f7ff ffd9 	bl	800ac88 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800acd6:	2002      	movs	r0, #2
 800acd8:	f7ff ffd6 	bl	800ac88 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800acdc:	2001      	movs	r0, #1
 800acde:	f7ff ffd3 	bl	800ac88 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800ace2:	2008      	movs	r0, #8
 800ace4:	f7ff ffd0 	bl	800ac88 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TS_GPIO_Port, TS_Pin, GPIO_PIN_SET);
 800ace8:	2201      	movs	r2, #1
 800acea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800acee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800acf2:	f004 fe1b 	bl	800f92c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GRN_Pin|YEL_Pin|RED_Pin, GPIO_PIN_SET);
 800acf6:	2201      	movs	r2, #1
 800acf8:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800acfc:	4834      	ldr	r0, [pc, #208]	; (800add0 <MX_GPIO_Init+0x114>)
 800acfe:	f004 fe15 	bl	800f92c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WHT_GPIO_Port, WHT_Pin, GPIO_PIN_RESET);
 800ad02:	2200      	movs	r2, #0
 800ad04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ad08:	4831      	ldr	r0, [pc, #196]	; (800add0 <MX_GPIO_Init+0x114>)
 800ad0a:	f004 fe0f 	bl	800f92c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = PWR_GD_Pin|EOC_Pin;
 800ad0e:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 800ad12:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800ad14:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800ad18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ad1e:	1d3b      	adds	r3, r7, #4
 800ad20:	4619      	mov	r1, r3
 800ad22:	482c      	ldr	r0, [pc, #176]	; (800add4 <MX_GPIO_Init+0x118>)
 800ad24:	f004 fc7a 	bl	800f61c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TS_Pin;
 800ad28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ad2c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800ad2e:	2311      	movs	r3, #17
 800ad30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad32:	2300      	movs	r3, #0
 800ad34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad36:	2303      	movs	r3, #3
 800ad38:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(TS_GPIO_Port, &GPIO_InitStruct);
 800ad3a:	1d3b      	adds	r3, r7, #4
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ad42:	f004 fc6b 	bl	800f61c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Lightining_intr_Pin;
 800ad46:	2301      	movs	r3, #1
 800ad48:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800ad4a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800ad4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800ad50:	2302      	movs	r3, #2
 800ad52:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(Lightining_intr_GPIO_Port, &GPIO_InitStruct);
 800ad54:	1d3b      	adds	r3, r7, #4
 800ad56:	4619      	mov	r1, r3
 800ad58:	481f      	ldr	r0, [pc, #124]	; (800add8 <MX_GPIO_Init+0x11c>)
 800ad5a:	f004 fc5f 	bl	800f61c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GRN_Pin;
 800ad5e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ad62:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ad64:	2301      	movs	r3, #1
 800ad66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GRN_GPIO_Port, &GPIO_InitStruct);
 800ad70:	1d3b      	adds	r3, r7, #4
 800ad72:	4619      	mov	r1, r3
 800ad74:	4816      	ldr	r0, [pc, #88]	; (800add0 <MX_GPIO_Init+0x114>)
 800ad76:	f004 fc51 	bl	800f61c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = YEL_Pin|WHT_Pin|RED_Pin;
 800ad7a:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800ad7e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ad80:	2301      	movs	r3, #1
 800ad82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad84:	2300      	movs	r3, #0
 800ad86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad88:	2303      	movs	r3, #3
 800ad8a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ad8c:	1d3b      	adds	r3, r7, #4
 800ad8e:	4619      	mov	r1, r3
 800ad90:	480f      	ldr	r0, [pc, #60]	; (800add0 <MX_GPIO_Init+0x114>)
 800ad92:	f004 fc43 	bl	800f61c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800ad96:	2200      	movs	r2, #0
 800ad98:	2100      	movs	r1, #0
 800ad9a:	2006      	movs	r0, #6
 800ad9c:	f004 f90b 	bl	800efb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800ada0:	2006      	movs	r0, #6
 800ada2:	f004 f922 	bl	800efea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800ada6:	2200      	movs	r2, #0
 800ada8:	2100      	movs	r1, #0
 800adaa:	2017      	movs	r0, #23
 800adac:	f004 f903 	bl	800efb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800adb0:	2017      	movs	r0, #23
 800adb2:	f004 f91a 	bl	800efea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800adb6:	2200      	movs	r2, #0
 800adb8:	2100      	movs	r1, #0
 800adba:	2028      	movs	r0, #40	; 0x28
 800adbc:	f004 f8fb 	bl	800efb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800adc0:	2028      	movs	r0, #40	; 0x28
 800adc2:	f004 f912 	bl	800efea <HAL_NVIC_EnableIRQ>

}
 800adc6:	bf00      	nop
 800adc8:	3718      	adds	r7, #24
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	48000c00 	.word	0x48000c00
 800add4:	48000800 	.word	0x48000800
 800add8:	48000400 	.word	0x48000400

0800addc <_GetErrorString>:
#include <stdio.h>
#include "hs3xxx.h"


static char const*
_GetErrorString ( int  error, int  scope,  char*  buf, int  bufLen ) {
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	60f8      	str	r0, [r7, #12]
 800ade4:	60b9      	str	r1, [r7, #8]
 800ade6:	607a      	str	r2, [r7, #4]
 800ade8:	603b      	str	r3, [r7, #0]
  if ( error == hteStaleData )
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	2b01      	cmp	r3, #1
 800adee:	d105      	bne.n	800adfc <_GetErrorString+0x20>
    printf ( buf, bufLen, "HS3xxx Error: Stale data - new data is not yet ready for readout." );
 800adf0:	4a08      	ldr	r2, [pc, #32]	; (800ae14 <_GetErrorString+0x38>)
 800adf2:	6839      	ldr	r1, [r7, #0]
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f010 fc87 	bl	801b708 <iprintf>
 800adfa:	e005      	b.n	800ae08 <_GetErrorString+0x2c>
  else
    printf ( buf, bufLen, "HS3xxx Error: Unkown error code %d", error );
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	4a06      	ldr	r2, [pc, #24]	; (800ae18 <_GetErrorString+0x3c>)
 800ae00:	6839      	ldr	r1, [r7, #0]
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f010 fc80 	bl	801b708 <iprintf>
  
  return buf;
 800ae08:	687b      	ldr	r3, [r7, #4]
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3710      	adds	r7, #16
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}
 800ae12:	bf00      	nop
 800ae14:	08020d1c 	.word	0x08020d1c
 800ae18:	08020d60 	.word	0x08020d60

0800ae1c <HS3xxx_Init>:

int
HS3xxx_Init ( HSxxxx_t*  sensor, Interface_t*  hal ) {
 800ae1c:	b590      	push	{r4, r7, lr}
 800ae1e:	b087      	sub	sp, #28
 800ae20:	af02      	add	r7, sp, #8
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
  int err;

  uint8_t  dummy[1];

  sensor -> interface = NULL;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	601a      	str	r2, [r3, #0]
  sensor -> i2cAddress = 0;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	711a      	strb	r2, [r3, #4]

  /* Ensure the HAL is appropriately initialized. */
  if ( !hal -> i2cWrite ) return HAL_SetError ( heI2CWriteMissing, 0x44, HAL_GetErrorString );
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d106      	bne.n	800ae48 <HS3xxx_Init+0x2c>
 800ae3a:	4a1a      	ldr	r2, [pc, #104]	; (800aea4 <HS3xxx_Init+0x88>)
 800ae3c:	2144      	movs	r1, #68	; 0x44
 800ae3e:	2004      	movs	r0, #4
 800ae40:	f7fe fcf6 	bl	8009830 <HAL_SetError>
 800ae44:	4603      	mov	r3, r0
 800ae46:	e029      	b.n	800ae9c <HS3xxx_Init+0x80>
  if ( !hal -> i2cRead )  return HAL_SetError ( heI2CReadMissing,  0x44, HAL_GetErrorString );
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	685b      	ldr	r3, [r3, #4]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d106      	bne.n	800ae5e <HS3xxx_Init+0x42>
 800ae50:	4a14      	ldr	r2, [pc, #80]	; (800aea4 <HS3xxx_Init+0x88>)
 800ae52:	2144      	movs	r1, #68	; 0x44
 800ae54:	2003      	movs	r0, #3
 800ae56:	f7fe fceb 	bl	8009830 <HAL_SetError>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	e01e      	b.n	800ae9c <HS3xxx_Init+0x80>

  /* HAL is appropriate - try to access sensor */
  sensor -> i2cAddress = 0x44;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2244      	movs	r2, #68	; 0x44
 800ae62:	711a      	strb	r2, [r3, #4]
  sensor -> interface = hal;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	683a      	ldr	r2, [r7, #0]
 800ae68:	601a      	str	r2, [r3, #0]
  err = sensor -> interface -> i2cWrite ( sensor -> interface -> handle, 
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	689c      	ldr	r4, [r3, #8]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	6818      	ldr	r0, [r3, #0]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	7919      	ldrb	r1, [r3, #4]
 800ae7a:	f107 0208 	add.w	r2, r7, #8
 800ae7e:	2300      	movs	r3, #0
 800ae80:	9301      	str	r3, [sp, #4]
 800ae82:	f107 0308 	add.w	r3, r7, #8
 800ae86:	9300      	str	r3, [sp, #0]
 800ae88:	2300      	movs	r3, #0
 800ae8a:	47a0      	blx	r4
 800ae8c:	60f8      	str	r0, [r7, #12]
                                          sensor -> i2cAddress,
                                          dummy, 0, dummy, 0 );

  if ( err )
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d002      	beq.n	800ae9a <HS3xxx_Init+0x7e>
    sensor -> interface = NULL;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2200      	movs	r2, #0
 800ae98:	601a      	str	r2, [r3, #0]

  return err;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3714      	adds	r7, #20
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd90      	pop	{r4, r7, pc}
 800aea4:	080098d5 	.word	0x080098d5

0800aea8 <HS3xxx_Measure>:
HS3xxx_ReadID ( HSxxxx_t*  sensor, uint32_t*  id ) {
  return  HAL_SetError ( heNotImplemented, 0x44, HAL_GetErrorString );
}

int
HS3xxx_Measure ( HSxxxx_t*  sensor, HSxxxx_Results_t*  results ) {
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	6039      	str	r1, [r7, #0]
  int error;

  if ( !sensor -> interface -> msSleep ) 
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	68db      	ldr	r3, [r3, #12]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d106      	bne.n	800aeca <HS3xxx_Measure+0x22>
    return HAL_SetError ( heSleepMissing, 0x44, HAL_GetErrorString );
 800aebc:	4a0e      	ldr	r2, [pc, #56]	; (800aef8 <HS3xxx_Measure+0x50>)
 800aebe:	2144      	movs	r1, #68	; 0x44
 800aec0:	2005      	movs	r0, #5
 800aec2:	f7fe fcb5 	bl	8009830 <HAL_SetError>
 800aec6:	4603      	mov	r3, r0
 800aec8:	e012      	b.n	800aef0 <HS3xxx_Measure+0x48>

  error = HS3xxx_MeasureStart ( sensor );
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 f816 	bl	800aefc <HS3xxx_MeasureStart>
 800aed0:	60f8      	str	r0, [r7, #12]
  if ( error )
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d001      	beq.n	800aedc <HS3xxx_Measure+0x34>
    return error;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	e009      	b.n	800aef0 <HS3xxx_Measure+0x48>

  sensor -> interface -> msSleep ( 35 );
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	68db      	ldr	r3, [r3, #12]
 800aee2:	2023      	movs	r0, #35	; 0x23
 800aee4:	4798      	blx	r3

  return HS3xxx_MeasureRead ( sensor, results );
 800aee6:	6839      	ldr	r1, [r7, #0]
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f000 f823 	bl	800af34 <HS3xxx_MeasureRead>
 800aeee:	4603      	mov	r3, r0
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3710      	adds	r7, #16
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}
 800aef8:	080098d5 	.word	0x080098d5

0800aefc <HS3xxx_MeasureStart>:

int
HS3xxx_MeasureStart ( HSxxxx_t*  sensor ) {
 800aefc:	b590      	push	{r4, r7, lr}
 800aefe:	b087      	sub	sp, #28
 800af00:	af02      	add	r7, sp, #8
 800af02:	6078      	str	r0, [r7, #4]
  /* Issue meausurement request (write without data). */
  uint8_t  dummy=00;
 800af04:	2300      	movs	r3, #0
 800af06:	73fb      	strb	r3, [r7, #15]
  return sensor -> interface -> i2cWrite ( sensor -> interface -> handle, 
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	689c      	ldr	r4, [r3, #8]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	6818      	ldr	r0, [r3, #0]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	7919      	ldrb	r1, [r3, #4]
 800af18:	f107 020f 	add.w	r2, r7, #15
 800af1c:	2300      	movs	r3, #0
 800af1e:	9301      	str	r3, [sp, #4]
 800af20:	2300      	movs	r3, #0
 800af22:	9300      	str	r3, [sp, #0]
 800af24:	2301      	movs	r3, #1
 800af26:	47a0      	blx	r4
 800af28:	4603      	mov	r3, r0
                                           sensor -> i2cAddress,
                                           &dummy,1, NULL, 0 );
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3714      	adds	r7, #20
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd90      	pop	{r4, r7, pc}
	...

0800af34 <HS3xxx_MeasureRead>:

int
HS3xxx_MeasureRead ( HSxxxx_t*  sensor, HSxxxx_Results_t*  results ) {
 800af34:	b590      	push	{r4, r7, lr}
 800af36:	b089      	sub	sp, #36	; 0x24
 800af38:	af02      	add	r7, sp, #8
 800af3a:	6078      	str	r0, [r7, #4]
 800af3c:	6039      	str	r1, [r7, #0]
  int  error;
  uint8_t  buf [ 4 ];

  error = sensor -> interface -> i2cRead ( sensor -> interface -> handle,
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	685c      	ldr	r4, [r3, #4]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	6818      	ldr	r0, [r3, #0]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	7919      	ldrb	r1, [r3, #4]
 800af4e:	2304      	movs	r3, #4
 800af50:	9301      	str	r3, [sp, #4]
 800af52:	f107 0308 	add.w	r3, r7, #8
 800af56:	9300      	str	r3, [sp, #0]
 800af58:	2300      	movs	r3, #0
 800af5a:	2200      	movs	r2, #0
 800af5c:	47a0      	blx	r4
 800af5e:	6178      	str	r0, [r7, #20]
                                           sensor -> i2cAddress,
                                           NULL, 0, buf, 4 );
  if ( error )
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d001      	beq.n	800af6a <HS3xxx_MeasureRead+0x36>
    return error;
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	e043      	b.n	800aff2 <HS3xxx_MeasureRead+0xbe>

  if ( buf [ 3 ] & 0x01 ) 
 800af6a:	7afb      	ldrb	r3, [r7, #11]
 800af6c:	f003 0301 	and.w	r3, r3, #1
 800af70:	2b00      	cmp	r3, #0
 800af72:	d006      	beq.n	800af82 <HS3xxx_MeasureRead+0x4e>
    return HAL_SetError(hteStaleData,0x44, _GetErrorString );
 800af74:	4a21      	ldr	r2, [pc, #132]	; (800affc <HS3xxx_MeasureRead+0xc8>)
 800af76:	2144      	movs	r1, #68	; 0x44
 800af78:	2001      	movs	r0, #1
 800af7a:	f7fe fc59 	bl	8009830 <HAL_SetError>
 800af7e:	4603      	mov	r3, r0
 800af80:	e037      	b.n	800aff2 <HS3xxx_MeasureRead+0xbe>

  float  rawHumidity    = ( ( buf [ 0 ] & 0x3f ) << 8 ) | buf [ 1 ];
 800af82:	7a3b      	ldrb	r3, [r7, #8]
 800af84:	021b      	lsls	r3, r3, #8
 800af86:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800af8a:	7a7a      	ldrb	r2, [r7, #9]
 800af8c:	4313      	orrs	r3, r2
 800af8e:	ee07 3a90 	vmov	s15, r3
 800af92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af96:	edc7 7a04 	vstr	s15, [r7, #16]
  float  rawTemperature = ( ( buf [ 2 ] << 8 ) | ( buf [ 3 ] & 0xfc ) ) >> 2;
 800af9a:	7abb      	ldrb	r3, [r7, #10]
 800af9c:	021a      	lsls	r2, r3, #8
 800af9e:	7afb      	ldrb	r3, [r7, #11]
 800afa0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 800afa4:	4313      	orrs	r3, r2
 800afa6:	109b      	asrs	r3, r3, #2
 800afa8:	ee07 3a90 	vmov	s15, r3
 800afac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800afb0:	edc7 7a03 	vstr	s15, [r7, #12]
  
  results -> humidity    = 100 * rawHumidity    / 0x3fff;
 800afb4:	edd7 7a04 	vldr	s15, [r7, #16]
 800afb8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800b000 <HS3xxx_MeasureRead+0xcc>
 800afbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800afc0:	eddf 6a10 	vldr	s13, [pc, #64]	; 800b004 <HS3xxx_MeasureRead+0xd0>
 800afc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	edc3 7a01 	vstr	s15, [r3, #4]
  results -> temperature = 165 * rawTemperature / 0x3fff - 40;
 800afce:	edd7 7a03 	vldr	s15, [r7, #12]
 800afd2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800b008 <HS3xxx_MeasureRead+0xd4>
 800afd6:	ee27 7a87 	vmul.f32	s14, s15, s14
 800afda:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800b004 <HS3xxx_MeasureRead+0xd0>
 800afde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800afe2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800b00c <HS3xxx_MeasureRead+0xd8>
 800afe6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	edc3 7a00 	vstr	s15, [r3]
//  printf("results -> humidity %d \n",results -> humidity);
//  printf("results -> temperature %d \n,results -> temperature");
  return ecSuccess;
 800aff0:	2300      	movs	r3, #0
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	371c      	adds	r7, #28
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd90      	pop	{r4, r7, pc}
 800affa:	bf00      	nop
 800affc:	0800addd 	.word	0x0800addd
 800b000:	42c80000 	.word	0x42c80000
 800b004:	467ffc00 	.word	0x467ffc00
 800b008:	43250000 	.word	0x43250000
 800b00c:	42200000 	.word	0x42200000

0800b010 <_GetErrorString>:
#include <stdio.h>
#include "hs4xxx.h"


static char const*
_GetErrorString ( int  error, int  scope, char*  str, int  bufSize ) {
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	60f8      	str	r0, [r7, #12]
 800b018:	60b9      	str	r1, [r7, #8]
 800b01a:	607a      	str	r2, [r7, #4]
 800b01c:	603b      	str	r3, [r7, #0]
  if ( error == hteHS4xxxCRCError )
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	2b01      	cmp	r3, #1
 800b022:	d106      	bne.n	800b032 <_GetErrorString+0x22>
    snprintf ( str, bufSize, "HS4xxx ERROR: Checksum verification failed" );
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	4a08      	ldr	r2, [pc, #32]	; (800b048 <_GetErrorString+0x38>)
 800b028:	4619      	mov	r1, r3
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f010 fbe2 	bl	801b7f4 <sniprintf>
 800b030:	e005      	b.n	800b03e <_GetErrorString+0x2e>
  else
    snprintf ( str, bufSize, "HS4xxx ERROR: Unkown error %d", error );
 800b032:	6839      	ldr	r1, [r7, #0]
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	4a05      	ldr	r2, [pc, #20]	; (800b04c <_GetErrorString+0x3c>)
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f010 fbdb 	bl	801b7f4 <sniprintf>

  return str;
 800b03e:	687b      	ldr	r3, [r7, #4]
}
 800b040:	4618      	mov	r0, r3
 800b042:	3710      	adds	r7, #16
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}
 800b048:	08020d84 	.word	0x08020d84
 800b04c:	08020db0 	.word	0x08020db0

0800b050 <_ComputeCRC>:


static uint8_t
_ComputeCRC ( uint8_t*  data, int  len ) {
 800b050:	b480      	push	{r7}
 800b052:	b087      	sub	sp, #28
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	6039      	str	r1, [r7, #0]
  uint16_t  g   = 0x11d;
 800b05a:	f240 131d 	movw	r3, #285	; 0x11d
 800b05e:	817b      	strh	r3, [r7, #10]
  uint16_t  crc = 0xff;
 800b060:	23ff      	movs	r3, #255	; 0xff
 800b062:	82fb      	strh	r3, [r7, #22]

  for ( int i = 0; i < len; ++ i ) {
 800b064:	2300      	movs	r3, #0
 800b066:	613b      	str	r3, [r7, #16]
 800b068:	e01f      	b.n	800b0aa <_ComputeCRC+0x5a>
    crc ^= data [ i ];
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	687a      	ldr	r2, [r7, #4]
 800b06e:	4413      	add	r3, r2
 800b070:	781b      	ldrb	r3, [r3, #0]
 800b072:	b29a      	uxth	r2, r3
 800b074:	8afb      	ldrh	r3, [r7, #22]
 800b076:	4053      	eors	r3, r2
 800b078:	82fb      	strh	r3, [r7, #22]

    for ( int j = 0; j < 8; ++ j ) {
 800b07a:	2300      	movs	r3, #0
 800b07c:	60fb      	str	r3, [r7, #12]
 800b07e:	e00e      	b.n	800b09e <_ComputeCRC+0x4e>
      crc <<= 1;
 800b080:	8afb      	ldrh	r3, [r7, #22]
 800b082:	005b      	lsls	r3, r3, #1
 800b084:	82fb      	strh	r3, [r7, #22]
      if ( crc & ( 1 << 8 ) )
 800b086:	8afb      	ldrh	r3, [r7, #22]
 800b088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d003      	beq.n	800b098 <_ComputeCRC+0x48>
        crc ^= g;
 800b090:	8afa      	ldrh	r2, [r7, #22]
 800b092:	897b      	ldrh	r3, [r7, #10]
 800b094:	4053      	eors	r3, r2
 800b096:	82fb      	strh	r3, [r7, #22]
    for ( int j = 0; j < 8; ++ j ) {
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	3301      	adds	r3, #1
 800b09c:	60fb      	str	r3, [r7, #12]
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2b07      	cmp	r3, #7
 800b0a2:	dded      	ble.n	800b080 <_ComputeCRC+0x30>
  for ( int i = 0; i < len; ++ i ) {
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	613b      	str	r3, [r7, #16]
 800b0aa:	693a      	ldr	r2, [r7, #16]
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	dbdb      	blt.n	800b06a <_ComputeCRC+0x1a>
    }
  }

  return crc & 0xff;
 800b0b2:	8afb      	ldrh	r3, [r7, #22]
 800b0b4:	b2db      	uxtb	r3, r3
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	371c      	adds	r7, #28
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c0:	4770      	bx	lr
	...

0800b0c4 <_ProcessRawResult>:
  return  ecSuccess;
}


static inline int
_ProcessRawResult ( uint8_t*  raw, HSxxxx_Results_t*  results ) {
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b084      	sub	sp, #16
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	6039      	str	r1, [r7, #0]

  if ( _ComputeCRC ( raw, 4 ) != raw [ 4 ] )
 800b0ce:	2104      	movs	r1, #4
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f7ff ffbd 	bl	800b050 <_ComputeCRC>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	461a      	mov	r2, r3
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	3304      	adds	r3, #4
 800b0de:	781b      	ldrb	r3, [r3, #0]
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	d006      	beq.n	800b0f2 <_ProcessRawResult+0x2e>
    return HAL_SetError ( hteHS4xxxCRCError, esSensor, _GetErrorString );
 800b0e4:	4a24      	ldr	r2, [pc, #144]	; (800b178 <_ProcessRawResult+0xb4>)
 800b0e6:	2100      	movs	r1, #0
 800b0e8:	2001      	movs	r0, #1
 800b0ea:	f7fe fba1 	bl	8009830 <HAL_SetError>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	e03d      	b.n	800b16e <_ProcessRawResult+0xaa>

  float  humidity    = ( ( raw [ 0 ] & 0x3f ) << 8 ) | raw [ 1 ];
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	021b      	lsls	r3, r3, #8
 800b0f8:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800b0fc:	687a      	ldr	r2, [r7, #4]
 800b0fe:	3201      	adds	r2, #1
 800b100:	7812      	ldrb	r2, [r2, #0]
 800b102:	4313      	orrs	r3, r2
 800b104:	ee07 3a90 	vmov	s15, r3
 800b108:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b10c:	edc7 7a03 	vstr	s15, [r7, #12]
  float  temperature = ( ( raw [ 2 ] & 0x3f ) << 8 ) | raw [ 3 ];
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	3302      	adds	r3, #2
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	021b      	lsls	r3, r3, #8
 800b118:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800b11c:	687a      	ldr	r2, [r7, #4]
 800b11e:	3203      	adds	r2, #3
 800b120:	7812      	ldrb	r2, [r2, #0]
 800b122:	4313      	orrs	r3, r2
 800b124:	ee07 3a90 	vmov	s15, r3
 800b128:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b12c:	edc7 7a02 	vstr	s15, [r7, #8]

  results -> humidity    = 100 * humidity / 0x3fff;
 800b130:	edd7 7a03 	vldr	s15, [r7, #12]
 800b134:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800b17c <_ProcessRawResult+0xb8>
 800b138:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b13c:	eddf 6a10 	vldr	s13, [pc, #64]	; 800b180 <_ProcessRawResult+0xbc>
 800b140:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	edc3 7a01 	vstr	s15, [r3, #4]
  results -> temperature = 165 * temperature / 0x3fff - 40;
 800b14a:	edd7 7a02 	vldr	s15, [r7, #8]
 800b14e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800b184 <_ProcessRawResult+0xc0>
 800b152:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b156:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800b180 <_ProcessRawResult+0xbc>
 800b15a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b15e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800b188 <_ProcessRawResult+0xc4>
 800b162:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	edc3 7a00 	vstr	s15, [r3]
  
  return ecSuccess;
 800b16c:	2300      	movs	r3, #0
}
 800b16e:	4618      	mov	r0, r3
 800b170:	3710      	adds	r7, #16
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}
 800b176:	bf00      	nop
 800b178:	0800b011 	.word	0x0800b011
 800b17c:	42c80000 	.word	0x42c80000
 800b180:	467ffc00 	.word	0x467ffc00
 800b184:	43250000 	.word	0x43250000
 800b188:	42200000 	.word	0x42200000

0800b18c <HS4xxx_Measure>:


int
HS4xxx_Measure ( HSxxxx_t*          sensor, 
                 HSxxxx_Results_t*  results ) {
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b084      	sub	sp, #16
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	6039      	str	r1, [r7, #0]

  /* this function requires the msSleep function of the HAL */
  if ( ! sensor -> interface -> msSleep )
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	68db      	ldr	r3, [r3, #12]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d108      	bne.n	800b1b2 <HS4xxx_Measure+0x26>
    return HAL_SetError ( heSleepMissing, sensor -> i2cAddress,
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	791b      	ldrb	r3, [r3, #4]
 800b1a4:	4a0e      	ldr	r2, [pc, #56]	; (800b1e0 <HS4xxx_Measure+0x54>)
 800b1a6:	4619      	mov	r1, r3
 800b1a8:	2005      	movs	r0, #5
 800b1aa:	f7fe fb41 	bl	8009830 <HAL_SetError>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	e012      	b.n	800b1d8 <HS4xxx_Measure+0x4c>
                          HAL_GetErrorString );

  int errorCode = HS4xxx_MeasureStart ( sensor );
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f000 f816 	bl	800b1e4 <HS4xxx_MeasureStart>
 800b1b8:	60f8      	str	r0, [r7, #12]
  if ( errorCode )
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d001      	beq.n	800b1c4 <HS4xxx_Measure+0x38>
    return errorCode;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	e009      	b.n	800b1d8 <HS4xxx_Measure+0x4c>

  /* wait for result to be available */
  sensor -> interface -> msSleep ( 2 );
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	68db      	ldr	r3, [r3, #12]
 800b1ca:	2002      	movs	r0, #2
 800b1cc:	4798      	blx	r3

  return HS4xxx_MeasureRead ( sensor, results );
 800b1ce:	6839      	ldr	r1, [r7, #0]
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f000 f833 	bl	800b23c <HS4xxx_MeasureRead>
 800b1d6:	4603      	mov	r3, r0
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3710      	adds	r7, #16
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}
 800b1e0:	080098d5 	.word	0x080098d5

0800b1e4 <HS4xxx_MeasureStart>:


int
HS4xxx_MeasureStart ( HSxxxx_t*  sensor ) {
 800b1e4:	b590      	push	{r4, r7, lr}
 800b1e6:	b087      	sub	sp, #28
 800b1e8:	af02      	add	r7, sp, #8
 800b1ea:	6078      	str	r0, [r7, #4]
  uint8_t  cmd = 0xf5;
 800b1ec:	23f5      	movs	r3, #245	; 0xf5
 800b1ee:	73fb      	strb	r3, [r7, #15]

  /* this function requires the i2cWrite function of the HAL */
  if ( ! sensor -> interface -> i2cWrite )
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	689b      	ldr	r3, [r3, #8]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d108      	bne.n	800b20c <HS4xxx_MeasureStart+0x28>
    return HAL_SetError ( heI2CWriteMissing, sensor -> i2cAddress, 
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	791b      	ldrb	r3, [r3, #4]
 800b1fe:	4a0e      	ldr	r2, [pc, #56]	; (800b238 <HS4xxx_MeasureStart+0x54>)
 800b200:	4619      	mov	r1, r3
 800b202:	2004      	movs	r0, #4
 800b204:	f7fe fb14 	bl	8009830 <HAL_SetError>
 800b208:	4603      	mov	r3, r0
 800b20a:	e010      	b.n	800b22e <HS4xxx_MeasureStart+0x4a>
                          HAL_GetErrorString );

  return sensor -> interface -> i2cWrite ( sensor -> interface -> handle,
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	689c      	ldr	r4, [r3, #8]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	6818      	ldr	r0, [r3, #0]
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	7919      	ldrb	r1, [r3, #4]
 800b21c:	f107 020f 	add.w	r2, r7, #15
 800b220:	2300      	movs	r3, #0
 800b222:	9301      	str	r3, [sp, #4]
 800b224:	2300      	movs	r3, #0
 800b226:	9300      	str	r3, [sp, #0]
 800b228:	2301      	movs	r3, #1
 800b22a:	47a0      	blx	r4
 800b22c:	4603      	mov	r3, r0
                                           sensor -> i2cAddress,
                                           &cmd, 1, NULL, 0 );
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3714      	adds	r7, #20
 800b232:	46bd      	mov	sp, r7
 800b234:	bd90      	pop	{r4, r7, pc}
 800b236:	bf00      	nop
 800b238:	080098d5 	.word	0x080098d5

0800b23c <HS4xxx_MeasureRead>:


int
HS4xxx_MeasureRead ( HSxxxx_t*          sensor, 
                     HSxxxx_Results_t*  results ) {
 800b23c:	b590      	push	{r4, r7, lr}
 800b23e:	b089      	sub	sp, #36	; 0x24
 800b240:	af02      	add	r7, sp, #8
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	6039      	str	r1, [r7, #0]
  uint8_t  buf [ 5 ];

  int errorCode = 
    sensor -> interface -> i2cRead ( sensor -> interface -> handle,
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	685c      	ldr	r4, [r3, #4]
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	6818      	ldr	r0, [r3, #0]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	7919      	ldrb	r1, [r3, #4]
 800b256:	f107 020c 	add.w	r2, r7, #12
 800b25a:	2305      	movs	r3, #5
 800b25c:	9301      	str	r3, [sp, #4]
 800b25e:	f107 030c 	add.w	r3, r7, #12
 800b262:	9300      	str	r3, [sp, #0]
 800b264:	2300      	movs	r3, #0
 800b266:	47a0      	blx	r4
 800b268:	6178      	str	r0, [r7, #20]
                                     sensor -> i2cAddress,
                                     buf, 0, buf, 5 );
  if ( errorCode )
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d001      	beq.n	800b274 <HS4xxx_MeasureRead+0x38>
    return errorCode;
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	e006      	b.n	800b282 <HS4xxx_MeasureRead+0x46>

  return _ProcessRawResult ( buf, results );
 800b274:	f107 030c 	add.w	r3, r7, #12
 800b278:	6839      	ldr	r1, [r7, #0]
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7ff ff22 	bl	800b0c4 <_ProcessRawResult>
 800b280:	4603      	mov	r3, r0
}
 800b282:	4618      	mov	r0, r3
 800b284:	371c      	adds	r7, #28
 800b286:	46bd      	mov	sp, r7
 800b288:	bd90      	pop	{r4, r7, pc}

0800b28a <HSxxxx_Init>:
#include "hsxxxx.h"
#include "hs3xxx.h"
#include "hs4xxx.h"

int
HSxxxx_Init ( HSxxxx_t*  sensor, Interface_t*  hal ) {
 800b28a:	b580      	push	{r7, lr}
 800b28c:	b084      	sub	sp, #16
 800b28e:	af00      	add	r7, sp, #0
 800b290:	6078      	str	r0, [r7, #4]
 800b292:	6039      	str	r1, [r7, #0]
  int err;

//  err = HS4xxx_Init ( sensor, hal );
//  if ( ! err )  return  err;
  
  err = HS3xxx_Init ( sensor, hal );
 800b294:	6839      	ldr	r1, [r7, #0]
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f7ff fdc0 	bl	800ae1c <HS3xxx_Init>
 800b29c:	60f8      	str	r0, [r7, #12]
  if ( ! err )  return  err;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d101      	bne.n	800b2a8 <HSxxxx_Init+0x1e>
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	e003      	b.n	800b2b0 <HSxxxx_Init+0x26>

  sensor -> i2cAddress = 0;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	711a      	strb	r2, [r3, #4]
  return err;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3710      	adds	r7, #16
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}

0800b2b8 <HSxxxx_Measure>:


int
HSxxxx_Measure ( HSxxxx_t*  sensor, HSxxxx_Results_t*  results ) {
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b084      	sub	sp, #16
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	6039      	str	r1, [r7, #0]
  int err = 0;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	60fb      	str	r3, [r7, #12]
 // printf("sensor -> i2cAddress %x \n",sensor -> i2cAddress);
  switch ( sensor -> i2cAddress ) {
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	791b      	ldrb	r3, [r3, #4]
 800b2ca:	2b44      	cmp	r3, #68	; 0x44
 800b2cc:	d007      	beq.n	800b2de <HSxxxx_Measure+0x26>
 800b2ce:	2b54      	cmp	r3, #84	; 0x54
 800b2d0:	d10b      	bne.n	800b2ea <HSxxxx_Measure+0x32>
  
  case 0x54:
    err = HS4xxx_Measure ( sensor, results );
 800b2d2:	6839      	ldr	r1, [r7, #0]
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f7ff ff59 	bl	800b18c <HS4xxx_Measure>
 800b2da:	60f8      	str	r0, [r7, #12]

    break;
 800b2dc:	e007      	b.n	800b2ee <HSxxxx_Measure+0x36>

  case 0x44:
    err = HS3xxx_Measure ( sensor, results );
 800b2de:	6839      	ldr	r1, [r7, #0]
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f7ff fde1 	bl	800aea8 <HS3xxx_Measure>
 800b2e6:	60f8      	str	r0, [r7, #12]
    break;
 800b2e8:	e001      	b.n	800b2ee <HSxxxx_Measure+0x36>

  default:
    err = 42;
 800b2ea:	232a      	movs	r3, #42	; 0x2a
 800b2ec:	60fb      	str	r3, [r7, #12]
  }

  return err;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3710      	adds	r7, #16
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <HSxxxx_Name>:


char const*
HSxxxx_Name ( HSxxxx_t*  sensor ) {
 800b2f8:	b480      	push	{r7}
 800b2fa:	b083      	sub	sp, #12
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  switch ( sensor -> i2cAddress ) {
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	791b      	ldrb	r3, [r3, #4]
 800b304:	2b44      	cmp	r3, #68	; 0x44
 800b306:	d003      	beq.n	800b310 <HSxxxx_Name+0x18>
 800b308:	2b54      	cmp	r3, #84	; 0x54
 800b30a:	d103      	bne.n	800b314 <HSxxxx_Name+0x1c>
  case 0x54:
    return "HS4xxx";
 800b30c:	4b05      	ldr	r3, [pc, #20]	; (800b324 <HSxxxx_Name+0x2c>)
 800b30e:	e002      	b.n	800b316 <HSxxxx_Name+0x1e>
  case 0x44:
    return "HS3xxx";
 800b310:	4b05      	ldr	r3, [pc, #20]	; (800b328 <HSxxxx_Name+0x30>)
 800b312:	e000      	b.n	800b316 <HSxxxx_Name+0x1e>
  default:
    return "Unknown";
 800b314:	4b05      	ldr	r3, [pc, #20]	; (800b32c <HSxxxx_Name+0x34>)
  }
}
 800b316:	4618      	mov	r0, r3
 800b318:	370c      	adds	r7, #12
 800b31a:	46bd      	mov	sp, r7
 800b31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b320:	4770      	bx	lr
 800b322:	bf00      	nop
 800b324:	08020dd0 	.word	0x08020dd0
 800b328:	08020dd8 	.word	0x08020dd8
 800b32c:	08020de0 	.word	0x08020de0

0800b330 <LL_EXTI_EnableIT_0_31>:
{
 800b330:	b480      	push	{r7}
 800b332:	b083      	sub	sp, #12
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800b338:	4b06      	ldr	r3, [pc, #24]	; (800b354 <LL_EXTI_EnableIT_0_31+0x24>)
 800b33a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800b33e:	4905      	ldr	r1, [pc, #20]	; (800b354 <LL_EXTI_EnableIT_0_31+0x24>)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	4313      	orrs	r3, r2
 800b344:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800b348:	bf00      	nop
 800b34a:	370c      	adds	r7, #12
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr
 800b354:	58000800 	.word	0x58000800

0800b358 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800b358:	b480      	push	{r7}
 800b35a:	b083      	sub	sp, #12
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800b360:	4b05      	ldr	r3, [pc, #20]	; (800b378 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800b362:	681a      	ldr	r2, [r3, #0]
 800b364:	4904      	ldr	r1, [pc, #16]	; (800b378 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	4313      	orrs	r3, r2
 800b36a:	600b      	str	r3, [r1, #0]

}
 800b36c:	bf00      	nop
 800b36e:	370c      	adds	r7, #12
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr
 800b378:	58000800 	.word	0x58000800

0800b37c <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b083      	sub	sp, #12
 800b380:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800b382:	4b0d      	ldr	r3, [pc, #52]	; (800b3b8 <ReadRtcSsrValue+0x3c>)
 800b384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b386:	b29b      	uxth	r3, r3
 800b388:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800b38a:	4b0b      	ldr	r3, [pc, #44]	; (800b3b8 <ReadRtcSsrValue+0x3c>)
 800b38c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b38e:	b29b      	uxth	r3, r3
 800b390:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800b392:	e005      	b.n	800b3a0 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800b398:	4b07      	ldr	r3, [pc, #28]	; (800b3b8 <ReadRtcSsrValue+0x3c>)
 800b39a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b39c:	b29b      	uxth	r3, r3
 800b39e:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 800b3a0:	687a      	ldr	r2, [r7, #4]
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d1f5      	bne.n	800b394 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 800b3a8:	683b      	ldr	r3, [r7, #0]
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	370c      	adds	r7, #12
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr
 800b3b6:	bf00      	nop
 800b3b8:	40002800 	.word	0x40002800

0800b3bc <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b085      	sub	sp, #20
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	460a      	mov	r2, r1
 800b3c6:	71fb      	strb	r3, [r7, #7]
 800b3c8:	4613      	mov	r3, r2
 800b3ca:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 800b3cc:	79ba      	ldrb	r2, [r7, #6]
 800b3ce:	491d      	ldr	r1, [pc, #116]	; (800b444 <LinkTimerAfter+0x88>)
 800b3d0:	4613      	mov	r3, r2
 800b3d2:	005b      	lsls	r3, r3, #1
 800b3d4:	4413      	add	r3, r2
 800b3d6:	00db      	lsls	r3, r3, #3
 800b3d8:	440b      	add	r3, r1
 800b3da:	3315      	adds	r3, #21
 800b3dc:	781b      	ldrb	r3, [r3, #0]
 800b3de:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800b3e0:	7bfb      	ldrb	r3, [r7, #15]
 800b3e2:	2b14      	cmp	r3, #20
 800b3e4:	d009      	beq.n	800b3fa <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800b3e6:	7bfa      	ldrb	r2, [r7, #15]
 800b3e8:	4916      	ldr	r1, [pc, #88]	; (800b444 <LinkTimerAfter+0x88>)
 800b3ea:	4613      	mov	r3, r2
 800b3ec:	005b      	lsls	r3, r3, #1
 800b3ee:	4413      	add	r3, r2
 800b3f0:	00db      	lsls	r3, r3, #3
 800b3f2:	440b      	add	r3, r1
 800b3f4:	3314      	adds	r3, #20
 800b3f6:	79fa      	ldrb	r2, [r7, #7]
 800b3f8:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800b3fa:	79fa      	ldrb	r2, [r7, #7]
 800b3fc:	4911      	ldr	r1, [pc, #68]	; (800b444 <LinkTimerAfter+0x88>)
 800b3fe:	4613      	mov	r3, r2
 800b400:	005b      	lsls	r3, r3, #1
 800b402:	4413      	add	r3, r2
 800b404:	00db      	lsls	r3, r3, #3
 800b406:	440b      	add	r3, r1
 800b408:	3315      	adds	r3, #21
 800b40a:	7bfa      	ldrb	r2, [r7, #15]
 800b40c:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800b40e:	79fa      	ldrb	r2, [r7, #7]
 800b410:	490c      	ldr	r1, [pc, #48]	; (800b444 <LinkTimerAfter+0x88>)
 800b412:	4613      	mov	r3, r2
 800b414:	005b      	lsls	r3, r3, #1
 800b416:	4413      	add	r3, r2
 800b418:	00db      	lsls	r3, r3, #3
 800b41a:	440b      	add	r3, r1
 800b41c:	3314      	adds	r3, #20
 800b41e:	79ba      	ldrb	r2, [r7, #6]
 800b420:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800b422:	79ba      	ldrb	r2, [r7, #6]
 800b424:	4907      	ldr	r1, [pc, #28]	; (800b444 <LinkTimerAfter+0x88>)
 800b426:	4613      	mov	r3, r2
 800b428:	005b      	lsls	r3, r3, #1
 800b42a:	4413      	add	r3, r2
 800b42c:	00db      	lsls	r3, r3, #3
 800b42e:	440b      	add	r3, r1
 800b430:	3315      	adds	r3, #21
 800b432:	79fa      	ldrb	r2, [r7, #7]
 800b434:	701a      	strb	r2, [r3, #0]

  return;
 800b436:	bf00      	nop
}
 800b438:	3714      	adds	r7, #20
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr
 800b442:	bf00      	nop
 800b444:	2000040c 	.word	0x2000040c

0800b448 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 800b448:	b480      	push	{r7}
 800b44a:	b085      	sub	sp, #20
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	4603      	mov	r3, r0
 800b450:	460a      	mov	r2, r1
 800b452:	71fb      	strb	r3, [r7, #7]
 800b454:	4613      	mov	r3, r2
 800b456:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 800b458:	4b29      	ldr	r3, [pc, #164]	; (800b500 <LinkTimerBefore+0xb8>)
 800b45a:	781b      	ldrb	r3, [r3, #0]
 800b45c:	b2db      	uxtb	r3, r3
 800b45e:	79ba      	ldrb	r2, [r7, #6]
 800b460:	429a      	cmp	r2, r3
 800b462:	d032      	beq.n	800b4ca <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 800b464:	79ba      	ldrb	r2, [r7, #6]
 800b466:	4927      	ldr	r1, [pc, #156]	; (800b504 <LinkTimerBefore+0xbc>)
 800b468:	4613      	mov	r3, r2
 800b46a:	005b      	lsls	r3, r3, #1
 800b46c:	4413      	add	r3, r2
 800b46e:	00db      	lsls	r3, r3, #3
 800b470:	440b      	add	r3, r1
 800b472:	3314      	adds	r3, #20
 800b474:	781b      	ldrb	r3, [r3, #0]
 800b476:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 800b478:	7bfa      	ldrb	r2, [r7, #15]
 800b47a:	4922      	ldr	r1, [pc, #136]	; (800b504 <LinkTimerBefore+0xbc>)
 800b47c:	4613      	mov	r3, r2
 800b47e:	005b      	lsls	r3, r3, #1
 800b480:	4413      	add	r3, r2
 800b482:	00db      	lsls	r3, r3, #3
 800b484:	440b      	add	r3, r1
 800b486:	3315      	adds	r3, #21
 800b488:	79fa      	ldrb	r2, [r7, #7]
 800b48a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 800b48c:	79fa      	ldrb	r2, [r7, #7]
 800b48e:	491d      	ldr	r1, [pc, #116]	; (800b504 <LinkTimerBefore+0xbc>)
 800b490:	4613      	mov	r3, r2
 800b492:	005b      	lsls	r3, r3, #1
 800b494:	4413      	add	r3, r2
 800b496:	00db      	lsls	r3, r3, #3
 800b498:	440b      	add	r3, r1
 800b49a:	3315      	adds	r3, #21
 800b49c:	79ba      	ldrb	r2, [r7, #6]
 800b49e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 800b4a0:	79fa      	ldrb	r2, [r7, #7]
 800b4a2:	4918      	ldr	r1, [pc, #96]	; (800b504 <LinkTimerBefore+0xbc>)
 800b4a4:	4613      	mov	r3, r2
 800b4a6:	005b      	lsls	r3, r3, #1
 800b4a8:	4413      	add	r3, r2
 800b4aa:	00db      	lsls	r3, r3, #3
 800b4ac:	440b      	add	r3, r1
 800b4ae:	3314      	adds	r3, #20
 800b4b0:	7bfa      	ldrb	r2, [r7, #15]
 800b4b2:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800b4b4:	79ba      	ldrb	r2, [r7, #6]
 800b4b6:	4913      	ldr	r1, [pc, #76]	; (800b504 <LinkTimerBefore+0xbc>)
 800b4b8:	4613      	mov	r3, r2
 800b4ba:	005b      	lsls	r3, r3, #1
 800b4bc:	4413      	add	r3, r2
 800b4be:	00db      	lsls	r3, r3, #3
 800b4c0:	440b      	add	r3, r1
 800b4c2:	3314      	adds	r3, #20
 800b4c4:	79fa      	ldrb	r2, [r7, #7]
 800b4c6:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 800b4c8:	e014      	b.n	800b4f4 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800b4ca:	79fa      	ldrb	r2, [r7, #7]
 800b4cc:	490d      	ldr	r1, [pc, #52]	; (800b504 <LinkTimerBefore+0xbc>)
 800b4ce:	4613      	mov	r3, r2
 800b4d0:	005b      	lsls	r3, r3, #1
 800b4d2:	4413      	add	r3, r2
 800b4d4:	00db      	lsls	r3, r3, #3
 800b4d6:	440b      	add	r3, r1
 800b4d8:	3315      	adds	r3, #21
 800b4da:	79ba      	ldrb	r2, [r7, #6]
 800b4dc:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800b4de:	79ba      	ldrb	r2, [r7, #6]
 800b4e0:	4908      	ldr	r1, [pc, #32]	; (800b504 <LinkTimerBefore+0xbc>)
 800b4e2:	4613      	mov	r3, r2
 800b4e4:	005b      	lsls	r3, r3, #1
 800b4e6:	4413      	add	r3, r2
 800b4e8:	00db      	lsls	r3, r3, #3
 800b4ea:	440b      	add	r3, r1
 800b4ec:	3314      	adds	r3, #20
 800b4ee:	79fa      	ldrb	r2, [r7, #7]
 800b4f0:	701a      	strb	r2, [r3, #0]
  return;
 800b4f2:	bf00      	nop
}
 800b4f4:	3714      	adds	r7, #20
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr
 800b4fe:	bf00      	nop
 800b500:	200005ec 	.word	0x200005ec
 800b504:	2000040c 	.word	0x2000040c

0800b508 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b084      	sub	sp, #16
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	4603      	mov	r3, r0
 800b510:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800b512:	4b4e      	ldr	r3, [pc, #312]	; (800b64c <linkTimer+0x144>)
 800b514:	781b      	ldrb	r3, [r3, #0]
 800b516:	b2db      	uxtb	r3, r3
 800b518:	2b14      	cmp	r3, #20
 800b51a:	d118      	bne.n	800b54e <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 800b51c:	4b4b      	ldr	r3, [pc, #300]	; (800b64c <linkTimer+0x144>)
 800b51e:	781b      	ldrb	r3, [r3, #0]
 800b520:	b2da      	uxtb	r2, r3
 800b522:	4b4b      	ldr	r3, [pc, #300]	; (800b650 <linkTimer+0x148>)
 800b524:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800b526:	4a49      	ldr	r2, [pc, #292]	; (800b64c <linkTimer+0x144>)
 800b528:	79fb      	ldrb	r3, [r7, #7]
 800b52a:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 800b52c:	79fa      	ldrb	r2, [r7, #7]
 800b52e:	4949      	ldr	r1, [pc, #292]	; (800b654 <linkTimer+0x14c>)
 800b530:	4613      	mov	r3, r2
 800b532:	005b      	lsls	r3, r3, #1
 800b534:	4413      	add	r3, r2
 800b536:	00db      	lsls	r3, r3, #3
 800b538:	440b      	add	r3, r1
 800b53a:	3315      	adds	r3, #21
 800b53c:	2214      	movs	r2, #20
 800b53e:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800b540:	4b45      	ldr	r3, [pc, #276]	; (800b658 <linkTimer+0x150>)
 800b542:	f04f 32ff 	mov.w	r2, #4294967295
 800b546:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 800b548:	2300      	movs	r3, #0
 800b54a:	81fb      	strh	r3, [r7, #14]
 800b54c:	e078      	b.n	800b640 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800b54e:	f000 f909 	bl	800b764 <ReturnTimeElapsed>
 800b552:	4603      	mov	r3, r0
 800b554:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800b556:	79fa      	ldrb	r2, [r7, #7]
 800b558:	493e      	ldr	r1, [pc, #248]	; (800b654 <linkTimer+0x14c>)
 800b55a:	4613      	mov	r3, r2
 800b55c:	005b      	lsls	r3, r3, #1
 800b55e:	4413      	add	r3, r2
 800b560:	00db      	lsls	r3, r3, #3
 800b562:	440b      	add	r3, r1
 800b564:	3308      	adds	r3, #8
 800b566:	6819      	ldr	r1, [r3, #0]
 800b568:	89fb      	ldrh	r3, [r7, #14]
 800b56a:	79fa      	ldrb	r2, [r7, #7]
 800b56c:	4419      	add	r1, r3
 800b56e:	4839      	ldr	r0, [pc, #228]	; (800b654 <linkTimer+0x14c>)
 800b570:	4613      	mov	r3, r2
 800b572:	005b      	lsls	r3, r3, #1
 800b574:	4413      	add	r3, r2
 800b576:	00db      	lsls	r3, r3, #3
 800b578:	4403      	add	r3, r0
 800b57a:	3308      	adds	r3, #8
 800b57c:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800b57e:	79fa      	ldrb	r2, [r7, #7]
 800b580:	4934      	ldr	r1, [pc, #208]	; (800b654 <linkTimer+0x14c>)
 800b582:	4613      	mov	r3, r2
 800b584:	005b      	lsls	r3, r3, #1
 800b586:	4413      	add	r3, r2
 800b588:	00db      	lsls	r3, r3, #3
 800b58a:	440b      	add	r3, r1
 800b58c:	3308      	adds	r3, #8
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800b592:	4b2e      	ldr	r3, [pc, #184]	; (800b64c <linkTimer+0x144>)
 800b594:	781b      	ldrb	r3, [r3, #0]
 800b596:	b2db      	uxtb	r3, r3
 800b598:	4619      	mov	r1, r3
 800b59a:	4a2e      	ldr	r2, [pc, #184]	; (800b654 <linkTimer+0x14c>)
 800b59c:	460b      	mov	r3, r1
 800b59e:	005b      	lsls	r3, r3, #1
 800b5a0:	440b      	add	r3, r1
 800b5a2:	00db      	lsls	r3, r3, #3
 800b5a4:	4413      	add	r3, r2
 800b5a6:	3308      	adds	r3, #8
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	68ba      	ldr	r2, [r7, #8]
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d337      	bcc.n	800b620 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 800b5b0:	4b26      	ldr	r3, [pc, #152]	; (800b64c <linkTimer+0x144>)
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800b5b6:	7b7a      	ldrb	r2, [r7, #13]
 800b5b8:	4926      	ldr	r1, [pc, #152]	; (800b654 <linkTimer+0x14c>)
 800b5ba:	4613      	mov	r3, r2
 800b5bc:	005b      	lsls	r3, r3, #1
 800b5be:	4413      	add	r3, r2
 800b5c0:	00db      	lsls	r3, r3, #3
 800b5c2:	440b      	add	r3, r1
 800b5c4:	3315      	adds	r3, #21
 800b5c6:	781b      	ldrb	r3, [r3, #0]
 800b5c8:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800b5ca:	e013      	b.n	800b5f4 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 800b5cc:	7b7a      	ldrb	r2, [r7, #13]
 800b5ce:	4921      	ldr	r1, [pc, #132]	; (800b654 <linkTimer+0x14c>)
 800b5d0:	4613      	mov	r3, r2
 800b5d2:	005b      	lsls	r3, r3, #1
 800b5d4:	4413      	add	r3, r2
 800b5d6:	00db      	lsls	r3, r3, #3
 800b5d8:	440b      	add	r3, r1
 800b5da:	3315      	adds	r3, #21
 800b5dc:	781b      	ldrb	r3, [r3, #0]
 800b5de:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 800b5e0:	7b7a      	ldrb	r2, [r7, #13]
 800b5e2:	491c      	ldr	r1, [pc, #112]	; (800b654 <linkTimer+0x14c>)
 800b5e4:	4613      	mov	r3, r2
 800b5e6:	005b      	lsls	r3, r3, #1
 800b5e8:	4413      	add	r3, r2
 800b5ea:	00db      	lsls	r3, r3, #3
 800b5ec:	440b      	add	r3, r1
 800b5ee:	3315      	adds	r3, #21
 800b5f0:	781b      	ldrb	r3, [r3, #0]
 800b5f2:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800b5f4:	7b3b      	ldrb	r3, [r7, #12]
 800b5f6:	2b14      	cmp	r3, #20
 800b5f8:	d00b      	beq.n	800b612 <linkTimer+0x10a>
 800b5fa:	7b3a      	ldrb	r2, [r7, #12]
 800b5fc:	4915      	ldr	r1, [pc, #84]	; (800b654 <linkTimer+0x14c>)
 800b5fe:	4613      	mov	r3, r2
 800b600:	005b      	lsls	r3, r3, #1
 800b602:	4413      	add	r3, r2
 800b604:	00db      	lsls	r3, r3, #3
 800b606:	440b      	add	r3, r1
 800b608:	3308      	adds	r3, #8
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	68ba      	ldr	r2, [r7, #8]
 800b60e:	429a      	cmp	r2, r3
 800b610:	d2dc      	bcs.n	800b5cc <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800b612:	7b7a      	ldrb	r2, [r7, #13]
 800b614:	79fb      	ldrb	r3, [r7, #7]
 800b616:	4611      	mov	r1, r2
 800b618:	4618      	mov	r0, r3
 800b61a:	f7ff fecf 	bl	800b3bc <LinkTimerAfter>
 800b61e:	e00f      	b.n	800b640 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 800b620:	4b0a      	ldr	r3, [pc, #40]	; (800b64c <linkTimer+0x144>)
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	b2da      	uxtb	r2, r3
 800b626:	79fb      	ldrb	r3, [r7, #7]
 800b628:	4611      	mov	r1, r2
 800b62a:	4618      	mov	r0, r3
 800b62c:	f7ff ff0c 	bl	800b448 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 800b630:	4b06      	ldr	r3, [pc, #24]	; (800b64c <linkTimer+0x144>)
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	b2da      	uxtb	r2, r3
 800b636:	4b06      	ldr	r3, [pc, #24]	; (800b650 <linkTimer+0x148>)
 800b638:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800b63a:	4a04      	ldr	r2, [pc, #16]	; (800b64c <linkTimer+0x144>)
 800b63c:	79fb      	ldrb	r3, [r7, #7]
 800b63e:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 800b640:	89fb      	ldrh	r3, [r7, #14]
}
 800b642:	4618      	mov	r0, r3
 800b644:	3710      	adds	r7, #16
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}
 800b64a:	bf00      	nop
 800b64c:	200005ec 	.word	0x200005ec
 800b650:	200005ed 	.word	0x200005ed
 800b654:	2000040c 	.word	0x2000040c
 800b658:	200005f0 	.word	0x200005f0

0800b65c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 800b65c:	b480      	push	{r7}
 800b65e:	b085      	sub	sp, #20
 800b660:	af00      	add	r7, sp, #0
 800b662:	4603      	mov	r3, r0
 800b664:	460a      	mov	r2, r1
 800b666:	71fb      	strb	r3, [r7, #7]
 800b668:	4613      	mov	r3, r2
 800b66a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 800b66c:	4b39      	ldr	r3, [pc, #228]	; (800b754 <UnlinkTimer+0xf8>)
 800b66e:	781b      	ldrb	r3, [r3, #0]
 800b670:	b2db      	uxtb	r3, r3
 800b672:	79fa      	ldrb	r2, [r7, #7]
 800b674:	429a      	cmp	r2, r3
 800b676:	d111      	bne.n	800b69c <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 800b678:	4b36      	ldr	r3, [pc, #216]	; (800b754 <UnlinkTimer+0xf8>)
 800b67a:	781b      	ldrb	r3, [r3, #0]
 800b67c:	b2da      	uxtb	r2, r3
 800b67e:	4b36      	ldr	r3, [pc, #216]	; (800b758 <UnlinkTimer+0xfc>)
 800b680:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800b682:	79fa      	ldrb	r2, [r7, #7]
 800b684:	4935      	ldr	r1, [pc, #212]	; (800b75c <UnlinkTimer+0x100>)
 800b686:	4613      	mov	r3, r2
 800b688:	005b      	lsls	r3, r3, #1
 800b68a:	4413      	add	r3, r2
 800b68c:	00db      	lsls	r3, r3, #3
 800b68e:	440b      	add	r3, r1
 800b690:	3315      	adds	r3, #21
 800b692:	781b      	ldrb	r3, [r3, #0]
 800b694:	b2da      	uxtb	r2, r3
 800b696:	4b2f      	ldr	r3, [pc, #188]	; (800b754 <UnlinkTimer+0xf8>)
 800b698:	701a      	strb	r2, [r3, #0]
 800b69a:	e03e      	b.n	800b71a <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 800b69c:	79fa      	ldrb	r2, [r7, #7]
 800b69e:	492f      	ldr	r1, [pc, #188]	; (800b75c <UnlinkTimer+0x100>)
 800b6a0:	4613      	mov	r3, r2
 800b6a2:	005b      	lsls	r3, r3, #1
 800b6a4:	4413      	add	r3, r2
 800b6a6:	00db      	lsls	r3, r3, #3
 800b6a8:	440b      	add	r3, r1
 800b6aa:	3314      	adds	r3, #20
 800b6ac:	781b      	ldrb	r3, [r3, #0]
 800b6ae:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 800b6b0:	79fa      	ldrb	r2, [r7, #7]
 800b6b2:	492a      	ldr	r1, [pc, #168]	; (800b75c <UnlinkTimer+0x100>)
 800b6b4:	4613      	mov	r3, r2
 800b6b6:	005b      	lsls	r3, r3, #1
 800b6b8:	4413      	add	r3, r2
 800b6ba:	00db      	lsls	r3, r3, #3
 800b6bc:	440b      	add	r3, r1
 800b6be:	3315      	adds	r3, #21
 800b6c0:	781b      	ldrb	r3, [r3, #0]
 800b6c2:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800b6c4:	79f9      	ldrb	r1, [r7, #7]
 800b6c6:	7bfa      	ldrb	r2, [r7, #15]
 800b6c8:	4824      	ldr	r0, [pc, #144]	; (800b75c <UnlinkTimer+0x100>)
 800b6ca:	460b      	mov	r3, r1
 800b6cc:	005b      	lsls	r3, r3, #1
 800b6ce:	440b      	add	r3, r1
 800b6d0:	00db      	lsls	r3, r3, #3
 800b6d2:	4403      	add	r3, r0
 800b6d4:	3315      	adds	r3, #21
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	b2d8      	uxtb	r0, r3
 800b6da:	4920      	ldr	r1, [pc, #128]	; (800b75c <UnlinkTimer+0x100>)
 800b6dc:	4613      	mov	r3, r2
 800b6de:	005b      	lsls	r3, r3, #1
 800b6e0:	4413      	add	r3, r2
 800b6e2:	00db      	lsls	r3, r3, #3
 800b6e4:	440b      	add	r3, r1
 800b6e6:	3315      	adds	r3, #21
 800b6e8:	4602      	mov	r2, r0
 800b6ea:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800b6ec:	7bbb      	ldrb	r3, [r7, #14]
 800b6ee:	2b14      	cmp	r3, #20
 800b6f0:	d013      	beq.n	800b71a <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800b6f2:	79f9      	ldrb	r1, [r7, #7]
 800b6f4:	7bba      	ldrb	r2, [r7, #14]
 800b6f6:	4819      	ldr	r0, [pc, #100]	; (800b75c <UnlinkTimer+0x100>)
 800b6f8:	460b      	mov	r3, r1
 800b6fa:	005b      	lsls	r3, r3, #1
 800b6fc:	440b      	add	r3, r1
 800b6fe:	00db      	lsls	r3, r3, #3
 800b700:	4403      	add	r3, r0
 800b702:	3314      	adds	r3, #20
 800b704:	781b      	ldrb	r3, [r3, #0]
 800b706:	b2d8      	uxtb	r0, r3
 800b708:	4914      	ldr	r1, [pc, #80]	; (800b75c <UnlinkTimer+0x100>)
 800b70a:	4613      	mov	r3, r2
 800b70c:	005b      	lsls	r3, r3, #1
 800b70e:	4413      	add	r3, r2
 800b710:	00db      	lsls	r3, r3, #3
 800b712:	440b      	add	r3, r1
 800b714:	3314      	adds	r3, #20
 800b716:	4602      	mov	r2, r0
 800b718:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800b71a:	79fa      	ldrb	r2, [r7, #7]
 800b71c:	490f      	ldr	r1, [pc, #60]	; (800b75c <UnlinkTimer+0x100>)
 800b71e:	4613      	mov	r3, r2
 800b720:	005b      	lsls	r3, r3, #1
 800b722:	4413      	add	r3, r2
 800b724:	00db      	lsls	r3, r3, #3
 800b726:	440b      	add	r3, r1
 800b728:	330c      	adds	r3, #12
 800b72a:	2201      	movs	r2, #1
 800b72c:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800b72e:	4b09      	ldr	r3, [pc, #36]	; (800b754 <UnlinkTimer+0xf8>)
 800b730:	781b      	ldrb	r3, [r3, #0]
 800b732:	b2db      	uxtb	r3, r3
 800b734:	2b14      	cmp	r3, #20
 800b736:	d107      	bne.n	800b748 <UnlinkTimer+0xec>
 800b738:	79bb      	ldrb	r3, [r7, #6]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d104      	bne.n	800b748 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800b73e:	4b08      	ldr	r3, [pc, #32]	; (800b760 <UnlinkTimer+0x104>)
 800b740:	f04f 32ff 	mov.w	r2, #4294967295
 800b744:	601a      	str	r2, [r3, #0]
  }

  return;
 800b746:	bf00      	nop
 800b748:	bf00      	nop
}
 800b74a:	3714      	adds	r7, #20
 800b74c:	46bd      	mov	sp, r7
 800b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b752:	4770      	bx	lr
 800b754:	200005ec 	.word	0x200005ec
 800b758:	200005ed 	.word	0x200005ed
 800b75c:	2000040c 	.word	0x2000040c
 800b760:	200005f0 	.word	0x200005f0

0800b764 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b082      	sub	sp, #8
 800b768:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800b76a:	4b1a      	ldr	r3, [pc, #104]	; (800b7d4 <ReturnTimeElapsed+0x70>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b772:	d026      	beq.n	800b7c2 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 800b774:	f7ff fe02 	bl	800b37c <ReadRtcSsrValue>
 800b778:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800b77a:	4b16      	ldr	r3, [pc, #88]	; (800b7d4 <ReturnTimeElapsed+0x70>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	687a      	ldr	r2, [r7, #4]
 800b780:	429a      	cmp	r2, r3
 800b782:	d805      	bhi.n	800b790 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 800b784:	4b13      	ldr	r3, [pc, #76]	; (800b7d4 <ReturnTimeElapsed+0x70>)
 800b786:	681a      	ldr	r2, [r3, #0]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	1ad3      	subs	r3, r2, r3
 800b78c:	607b      	str	r3, [r7, #4]
 800b78e:	e00a      	b.n	800b7a6 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 800b790:	4b11      	ldr	r3, [pc, #68]	; (800b7d8 <ReturnTimeElapsed+0x74>)
 800b792:	881b      	ldrh	r3, [r3, #0]
 800b794:	461a      	mov	r2, r3
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	1ad3      	subs	r3, r2, r3
 800b79a:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 800b79c:	4b0d      	ldr	r3, [pc, #52]	; (800b7d4 <ReturnTimeElapsed+0x70>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	683a      	ldr	r2, [r7, #0]
 800b7a2:	4413      	add	r3, r2
 800b7a4:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800b7a6:	4b0d      	ldr	r3, [pc, #52]	; (800b7dc <ReturnTimeElapsed+0x78>)
 800b7a8:	781b      	ldrb	r3, [r3, #0]
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	fb02 f303 	mul.w	r3, r2, r3
 800b7b2:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 800b7b4:	4b0a      	ldr	r3, [pc, #40]	; (800b7e0 <ReturnTimeElapsed+0x7c>)
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	40d3      	lsrs	r3, r2
 800b7be:	607b      	str	r3, [r7, #4]
 800b7c0:	e001      	b.n	800b7c6 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	b29b      	uxth	r3, r3
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3708      	adds	r7, #8
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}
 800b7d2:	bf00      	nop
 800b7d4:	200005f0 	.word	0x200005f0
 800b7d8:	200005f8 	.word	0x200005f8
 800b7dc:	200005f6 	.word	0x200005f6
 800b7e0:	200005f5 	.word	0x200005f5

0800b7e4 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b082      	sub	sp, #8
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 800b7ee:	88fb      	ldrh	r3, [r7, #6]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d108      	bne.n	800b806 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800b7f4:	f7ff fdc2 	bl	800b37c <ReadRtcSsrValue>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	4a21      	ldr	r2, [pc, #132]	; (800b880 <RestartWakeupCounter+0x9c>)
 800b7fc:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800b7fe:	2003      	movs	r0, #3
 800b800:	f003 fc1b 	bl	800f03a <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 800b804:	e039      	b.n	800b87a <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800b806:	88fb      	ldrh	r3, [r7, #6]
 800b808:	2b01      	cmp	r3, #1
 800b80a:	d803      	bhi.n	800b814 <RestartWakeupCounter+0x30>
 800b80c:	4b1d      	ldr	r3, [pc, #116]	; (800b884 <RestartWakeupCounter+0xa0>)
 800b80e:	781b      	ldrb	r3, [r3, #0]
 800b810:	2b01      	cmp	r3, #1
 800b812:	d002      	beq.n	800b81a <RestartWakeupCounter+0x36>
      Value -= 1;
 800b814:	88fb      	ldrh	r3, [r7, #6]
 800b816:	3b01      	subs	r3, #1
 800b818:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800b81a:	bf00      	nop
 800b81c:	4b1a      	ldr	r3, [pc, #104]	; (800b888 <RestartWakeupCounter+0xa4>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	68db      	ldr	r3, [r3, #12]
 800b822:	f003 0304 	and.w	r3, r3, #4
 800b826:	2b00      	cmp	r3, #0
 800b828:	d0f8      	beq.n	800b81c <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800b82a:	4b17      	ldr	r3, [pc, #92]	; (800b888 <RestartWakeupCounter+0xa4>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	68db      	ldr	r3, [r3, #12]
 800b830:	b2da      	uxtb	r2, r3
 800b832:	4b15      	ldr	r3, [pc, #84]	; (800b888 <RestartWakeupCounter+0xa4>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800b83a:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800b83c:	4b13      	ldr	r3, [pc, #76]	; (800b88c <RestartWakeupCounter+0xa8>)
 800b83e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b842:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800b844:	2003      	movs	r0, #3
 800b846:	f003 fc06 	bl	800f056 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800b84a:	4b11      	ldr	r3, [pc, #68]	; (800b890 <RestartWakeupCounter+0xac>)
 800b84c:	695b      	ldr	r3, [r3, #20]
 800b84e:	0c1b      	lsrs	r3, r3, #16
 800b850:	041b      	lsls	r3, r3, #16
 800b852:	88fa      	ldrh	r2, [r7, #6]
 800b854:	490e      	ldr	r1, [pc, #56]	; (800b890 <RestartWakeupCounter+0xac>)
 800b856:	4313      	orrs	r3, r2
 800b858:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800b85a:	f7ff fd8f 	bl	800b37c <ReadRtcSsrValue>
 800b85e:	4603      	mov	r3, r0
 800b860:	4a07      	ldr	r2, [pc, #28]	; (800b880 <RestartWakeupCounter+0x9c>)
 800b862:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 800b864:	4b08      	ldr	r3, [pc, #32]	; (800b888 <RestartWakeupCounter+0xa4>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	689a      	ldr	r2, [r3, #8]
 800b86a:	4b07      	ldr	r3, [pc, #28]	; (800b888 <RestartWakeupCounter+0xa4>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b872:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 800b874:	f3af 8000 	nop.w
  return ;
 800b878:	bf00      	nop
}
 800b87a:	3708      	adds	r7, #8
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}
 800b880:	200005f0 	.word	0x200005f0
 800b884:	200005f5 	.word	0x200005f5
 800b888:	200006d0 	.word	0x200006d0
 800b88c:	58000800 	.word	0x58000800
 800b890:	40002800 	.word	0x40002800

0800b894 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b084      	sub	sp, #16
 800b898:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800b89a:	4b45      	ldr	r3, [pc, #276]	; (800b9b0 <RescheduleTimerList+0x11c>)
 800b89c:	689b      	ldr	r3, [r3, #8]
 800b89e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8a6:	d107      	bne.n	800b8b8 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800b8a8:	bf00      	nop
 800b8aa:	4b42      	ldr	r3, [pc, #264]	; (800b9b4 <RescheduleTimerList+0x120>)
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	68db      	ldr	r3, [r3, #12]
 800b8b0:	f003 0304 	and.w	r3, r3, #4
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d1f8      	bne.n	800b8aa <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800b8b8:	4b3e      	ldr	r3, [pc, #248]	; (800b9b4 <RescheduleTimerList+0x120>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	689a      	ldr	r2, [r3, #8]
 800b8be:	4b3d      	ldr	r3, [pc, #244]	; (800b9b4 <RescheduleTimerList+0x120>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b8c6:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800b8c8:	4b3b      	ldr	r3, [pc, #236]	; (800b9b8 <RescheduleTimerList+0x124>)
 800b8ca:	781b      	ldrb	r3, [r3, #0]
 800b8cc:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800b8ce:	7bfa      	ldrb	r2, [r7, #15]
 800b8d0:	493a      	ldr	r1, [pc, #232]	; (800b9bc <RescheduleTimerList+0x128>)
 800b8d2:	4613      	mov	r3, r2
 800b8d4:	005b      	lsls	r3, r3, #1
 800b8d6:	4413      	add	r3, r2
 800b8d8:	00db      	lsls	r3, r3, #3
 800b8da:	440b      	add	r3, r1
 800b8dc:	3308      	adds	r3, #8
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 800b8e2:	f7ff ff3f 	bl	800b764 <ReturnTimeElapsed>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 800b8ea:	88fb      	ldrh	r3, [r7, #6]
 800b8ec:	68ba      	ldr	r2, [r7, #8]
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	d205      	bcs.n	800b8fe <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800b8f6:	4b32      	ldr	r3, [pc, #200]	; (800b9c0 <RescheduleTimerList+0x12c>)
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	701a      	strb	r2, [r3, #0]
 800b8fc:	e04d      	b.n	800b99a <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800b8fe:	88fb      	ldrh	r3, [r7, #6]
 800b900:	4a30      	ldr	r2, [pc, #192]	; (800b9c4 <RescheduleTimerList+0x130>)
 800b902:	8812      	ldrh	r2, [r2, #0]
 800b904:	b292      	uxth	r2, r2
 800b906:	4413      	add	r3, r2
 800b908:	461a      	mov	r2, r3
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d906      	bls.n	800b91e <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 800b910:	4b2c      	ldr	r3, [pc, #176]	; (800b9c4 <RescheduleTimerList+0x130>)
 800b912:	881b      	ldrh	r3, [r3, #0]
 800b914:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800b916:	4b2a      	ldr	r3, [pc, #168]	; (800b9c0 <RescheduleTimerList+0x12c>)
 800b918:	2200      	movs	r2, #0
 800b91a:	701a      	strb	r2, [r3, #0]
 800b91c:	e03d      	b.n	800b99a <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	b29a      	uxth	r2, r3
 800b922:	88fb      	ldrh	r3, [r7, #6]
 800b924:	1ad3      	subs	r3, r2, r3
 800b926:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800b928:	4b25      	ldr	r3, [pc, #148]	; (800b9c0 <RescheduleTimerList+0x12c>)
 800b92a:	2201      	movs	r2, #1
 800b92c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800b92e:	e034      	b.n	800b99a <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800b930:	7bfa      	ldrb	r2, [r7, #15]
 800b932:	4922      	ldr	r1, [pc, #136]	; (800b9bc <RescheduleTimerList+0x128>)
 800b934:	4613      	mov	r3, r2
 800b936:	005b      	lsls	r3, r3, #1
 800b938:	4413      	add	r3, r2
 800b93a:	00db      	lsls	r3, r3, #3
 800b93c:	440b      	add	r3, r1
 800b93e:	3308      	adds	r3, #8
 800b940:	681a      	ldr	r2, [r3, #0]
 800b942:	88fb      	ldrh	r3, [r7, #6]
 800b944:	429a      	cmp	r2, r3
 800b946:	d20a      	bcs.n	800b95e <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800b948:	7bfa      	ldrb	r2, [r7, #15]
 800b94a:	491c      	ldr	r1, [pc, #112]	; (800b9bc <RescheduleTimerList+0x128>)
 800b94c:	4613      	mov	r3, r2
 800b94e:	005b      	lsls	r3, r3, #1
 800b950:	4413      	add	r3, r2
 800b952:	00db      	lsls	r3, r3, #3
 800b954:	440b      	add	r3, r1
 800b956:	3308      	adds	r3, #8
 800b958:	2200      	movs	r2, #0
 800b95a:	601a      	str	r2, [r3, #0]
 800b95c:	e013      	b.n	800b986 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800b95e:	7bfa      	ldrb	r2, [r7, #15]
 800b960:	4916      	ldr	r1, [pc, #88]	; (800b9bc <RescheduleTimerList+0x128>)
 800b962:	4613      	mov	r3, r2
 800b964:	005b      	lsls	r3, r3, #1
 800b966:	4413      	add	r3, r2
 800b968:	00db      	lsls	r3, r3, #3
 800b96a:	440b      	add	r3, r1
 800b96c:	3308      	adds	r3, #8
 800b96e:	6819      	ldr	r1, [r3, #0]
 800b970:	88fb      	ldrh	r3, [r7, #6]
 800b972:	7bfa      	ldrb	r2, [r7, #15]
 800b974:	1ac9      	subs	r1, r1, r3
 800b976:	4811      	ldr	r0, [pc, #68]	; (800b9bc <RescheduleTimerList+0x128>)
 800b978:	4613      	mov	r3, r2
 800b97a:	005b      	lsls	r3, r3, #1
 800b97c:	4413      	add	r3, r2
 800b97e:	00db      	lsls	r3, r3, #3
 800b980:	4403      	add	r3, r0
 800b982:	3308      	adds	r3, #8
 800b984:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800b986:	7bfa      	ldrb	r2, [r7, #15]
 800b988:	490c      	ldr	r1, [pc, #48]	; (800b9bc <RescheduleTimerList+0x128>)
 800b98a:	4613      	mov	r3, r2
 800b98c:	005b      	lsls	r3, r3, #1
 800b98e:	4413      	add	r3, r2
 800b990:	00db      	lsls	r3, r3, #3
 800b992:	440b      	add	r3, r1
 800b994:	3315      	adds	r3, #21
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800b99a:	7bfb      	ldrb	r3, [r7, #15]
 800b99c:	2b14      	cmp	r3, #20
 800b99e:	d1c7      	bne.n	800b930 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800b9a0:	89bb      	ldrh	r3, [r7, #12]
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f7ff ff1e 	bl	800b7e4 <RestartWakeupCounter>

  return ;
 800b9a8:	bf00      	nop
}
 800b9aa:	3710      	adds	r7, #16
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}
 800b9b0:	40002800 	.word	0x40002800
 800b9b4:	200006d0 	.word	0x200006d0
 800b9b8:	200005ec 	.word	0x200005ec
 800b9bc:	2000040c 	.word	0x2000040c
 800b9c0:	200005f4 	.word	0x200005f4
 800b9c4:	200005fa 	.word	0x200005fa

0800b9c8 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b08a      	sub	sp, #40	; 0x28
 800b9cc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9ce:	f3ef 8310 	mrs	r3, PRIMASK
 800b9d2:	617b      	str	r3, [r7, #20]
  return(result);
 800b9d4:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b9d6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800b9d8:	b672      	cpsid	i
}
 800b9da:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800b9dc:	4b59      	ldr	r3, [pc, #356]	; (800bb44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	22ca      	movs	r2, #202	; 0xca
 800b9e2:	625a      	str	r2, [r3, #36]	; 0x24
 800b9e4:	4b57      	ldr	r3, [pc, #348]	; (800bb44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	2253      	movs	r2, #83	; 0x53
 800b9ea:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 800b9ec:	4b55      	ldr	r3, [pc, #340]	; (800bb44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	689a      	ldr	r2, [r3, #8]
 800b9f2:	4b54      	ldr	r3, [pc, #336]	; (800bb44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b9fa:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 800b9fc:	4b52      	ldr	r3, [pc, #328]	; (800bb48 <HW_TS_RTC_Wakeup_Handler+0x180>)
 800b9fe:	781b      	ldrb	r3, [r3, #0]
 800ba00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 800ba04:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800ba08:	4950      	ldr	r1, [pc, #320]	; (800bb4c <HW_TS_RTC_Wakeup_Handler+0x184>)
 800ba0a:	4613      	mov	r3, r2
 800ba0c:	005b      	lsls	r3, r3, #1
 800ba0e:	4413      	add	r3, r2
 800ba10:	00db      	lsls	r3, r3, #3
 800ba12:	440b      	add	r3, r1
 800ba14:	330c      	adds	r3, #12
 800ba16:	781b      	ldrb	r3, [r3, #0]
 800ba18:	b2db      	uxtb	r3, r3
 800ba1a:	2b02      	cmp	r3, #2
 800ba1c:	d16e      	bne.n	800bafc <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800ba1e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800ba22:	494a      	ldr	r1, [pc, #296]	; (800bb4c <HW_TS_RTC_Wakeup_Handler+0x184>)
 800ba24:	4613      	mov	r3, r2
 800ba26:	005b      	lsls	r3, r3, #1
 800ba28:	4413      	add	r3, r2
 800ba2a:	00db      	lsls	r3, r3, #3
 800ba2c:	440b      	add	r3, r1
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800ba32:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800ba36:	4945      	ldr	r1, [pc, #276]	; (800bb4c <HW_TS_RTC_Wakeup_Handler+0x184>)
 800ba38:	4613      	mov	r3, r2
 800ba3a:	005b      	lsls	r3, r3, #1
 800ba3c:	4413      	add	r3, r2
 800ba3e:	00db      	lsls	r3, r3, #3
 800ba40:	440b      	add	r3, r1
 800ba42:	3310      	adds	r3, #16
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 800ba48:	4b41      	ldr	r3, [pc, #260]	; (800bb50 <HW_TS_RTC_Wakeup_Handler+0x188>)
 800ba4a:	781b      	ldrb	r3, [r3, #0]
 800ba4c:	b2db      	uxtb	r3, r3
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d04c      	beq.n	800baec <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800ba52:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800ba56:	493d      	ldr	r1, [pc, #244]	; (800bb4c <HW_TS_RTC_Wakeup_Handler+0x184>)
 800ba58:	4613      	mov	r3, r2
 800ba5a:	005b      	lsls	r3, r3, #1
 800ba5c:	4413      	add	r3, r2
 800ba5e:	00db      	lsls	r3, r3, #3
 800ba60:	440b      	add	r3, r1
 800ba62:	330d      	adds	r3, #13
 800ba64:	781b      	ldrb	r3, [r3, #0]
 800ba66:	b2db      	uxtb	r3, r3
 800ba68:	2b01      	cmp	r3, #1
 800ba6a:	d124      	bne.n	800bab6 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 800ba6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ba70:	2101      	movs	r1, #1
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7ff fdf2 	bl	800b65c <UnlinkTimer>
 800ba78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba7a:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	f383 8810 	msr	PRIMASK, r3
}
 800ba82:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800ba84:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800ba88:	4930      	ldr	r1, [pc, #192]	; (800bb4c <HW_TS_RTC_Wakeup_Handler+0x184>)
 800ba8a:	4613      	mov	r3, r2
 800ba8c:	005b      	lsls	r3, r3, #1
 800ba8e:	4413      	add	r3, r2
 800ba90:	00db      	lsls	r3, r3, #3
 800ba92:	440b      	add	r3, r1
 800ba94:	3304      	adds	r3, #4
 800ba96:	681a      	ldr	r2, [r3, #0]
 800ba98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ba9c:	4611      	mov	r1, r2
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f000 fa32 	bl	800bf08 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800baa4:	4b27      	ldr	r3, [pc, #156]	; (800bb44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	22ca      	movs	r2, #202	; 0xca
 800baaa:	625a      	str	r2, [r3, #36]	; 0x24
 800baac:	4b25      	ldr	r3, [pc, #148]	; (800bb44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	2253      	movs	r2, #83	; 0x53
 800bab2:	625a      	str	r2, [r3, #36]	; 0x24
 800bab4:	e012      	b.n	800badc <HW_TS_RTC_Wakeup_Handler+0x114>
 800bab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	f383 8810 	msr	PRIMASK, r3
}
 800bac0:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800bac2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bac6:	4618      	mov	r0, r3
 800bac8:	f000 f99a 	bl	800be00 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800bacc:	4b1d      	ldr	r3, [pc, #116]	; (800bb44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	22ca      	movs	r2, #202	; 0xca
 800bad2:	625a      	str	r2, [r3, #36]	; 0x24
 800bad4:	4b1b      	ldr	r3, [pc, #108]	; (800bb44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	2253      	movs	r2, #83	; 0x53
 800bada:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 800badc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bae0:	69fa      	ldr	r2, [r7, #28]
 800bae2:	4619      	mov	r1, r3
 800bae4:	69b8      	ldr	r0, [r7, #24]
 800bae6:	f000 fa95 	bl	800c014 <HW_TS_RTC_Int_AppNot>
 800baea:	e022      	b.n	800bb32 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 800baec:	f7ff fed2 	bl	800b894 <RescheduleTimerList>
 800baf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	f383 8810 	msr	PRIMASK, r3
}
 800bafa:	e01a      	b.n	800bb32 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800bafc:	bf00      	nop
 800bafe:	4b11      	ldr	r3, [pc, #68]	; (800bb44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	68db      	ldr	r3, [r3, #12]
 800bb04:	f003 0304 	and.w	r3, r3, #4
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d0f8      	beq.n	800bafe <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800bb0c:	4b0d      	ldr	r3, [pc, #52]	; (800bb44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	68db      	ldr	r3, [r3, #12]
 800bb12:	b2da      	uxtb	r2, r3
 800bb14:	4b0b      	ldr	r3, [pc, #44]	; (800bb44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800bb1c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800bb1e:	4b0d      	ldr	r3, [pc, #52]	; (800bb54 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800bb20:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800bb24:	60da      	str	r2, [r3, #12]
 800bb26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb28:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f383 8810 	msr	PRIMASK, r3
}
 800bb30:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800bb32:	4b04      	ldr	r3, [pc, #16]	; (800bb44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	22ff      	movs	r2, #255	; 0xff
 800bb38:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800bb3a:	bf00      	nop
}
 800bb3c:	3728      	adds	r7, #40	; 0x28
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}
 800bb42:	bf00      	nop
 800bb44:	200006d0 	.word	0x200006d0
 800bb48:	200005ec 	.word	0x200005ec
 800bb4c:	2000040c 	.word	0x2000040c
 800bb50:	200005f4 	.word	0x200005f4
 800bb54:	58000800 	.word	0x58000800

0800bb58 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b088      	sub	sp, #32
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	4603      	mov	r3, r0
 800bb60:	6039      	str	r1, [r7, #0]
 800bb62:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800bb64:	4b5e      	ldr	r3, [pc, #376]	; (800bce0 <HW_TS_Init+0x188>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	22ca      	movs	r2, #202	; 0xca
 800bb6a:	625a      	str	r2, [r3, #36]	; 0x24
 800bb6c:	4b5c      	ldr	r3, [pc, #368]	; (800bce0 <HW_TS_Init+0x188>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	2253      	movs	r2, #83	; 0x53
 800bb72:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800bb74:	4b5b      	ldr	r3, [pc, #364]	; (800bce4 <HW_TS_Init+0x18c>)
 800bb76:	689b      	ldr	r3, [r3, #8]
 800bb78:	4a5a      	ldr	r2, [pc, #360]	; (800bce4 <HW_TS_Init+0x18c>)
 800bb7a:	f043 0320 	orr.w	r3, r3, #32
 800bb7e:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800bb80:	4b58      	ldr	r3, [pc, #352]	; (800bce4 <HW_TS_Init+0x18c>)
 800bb82:	689b      	ldr	r3, [r3, #8]
 800bb84:	b2db      	uxtb	r3, r3
 800bb86:	f003 0307 	and.w	r3, r3, #7
 800bb8a:	b2db      	uxtb	r3, r3
 800bb8c:	f1c3 0304 	rsb	r3, r3, #4
 800bb90:	b2da      	uxtb	r2, r3
 800bb92:	4b55      	ldr	r3, [pc, #340]	; (800bce8 <HW_TS_Init+0x190>)
 800bb94:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800bb96:	4b53      	ldr	r3, [pc, #332]	; (800bce4 <HW_TS_Init+0x18c>)
 800bb98:	691b      	ldr	r3, [r3, #16]
 800bb9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bb9e:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800bba2:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bba4:	693a      	ldr	r2, [r7, #16]
 800bba6:	fa92 f2a2 	rbit	r2, r2
 800bbaa:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800bbac:	68fa      	ldr	r2, [r7, #12]
 800bbae:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800bbb0:	697a      	ldr	r2, [r7, #20]
 800bbb2:	2a00      	cmp	r2, #0
 800bbb4:	d101      	bne.n	800bbba <HW_TS_Init+0x62>
  {
    return 32U;
 800bbb6:	2220      	movs	r2, #32
 800bbb8:	e003      	b.n	800bbc2 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800bbba:	697a      	ldr	r2, [r7, #20]
 800bbbc:	fab2 f282 	clz	r2, r2
 800bbc0:	b2d2      	uxtb	r2, r2
 800bbc2:	40d3      	lsrs	r3, r2
 800bbc4:	b2db      	uxtb	r3, r3
 800bbc6:	3301      	adds	r3, #1
 800bbc8:	b2da      	uxtb	r2, r3
 800bbca:	4b48      	ldr	r3, [pc, #288]	; (800bcec <HW_TS_Init+0x194>)
 800bbcc:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800bbce:	4b45      	ldr	r3, [pc, #276]	; (800bce4 <HW_TS_Init+0x18c>)
 800bbd0:	691b      	ldr	r3, [r3, #16]
 800bbd2:	b29b      	uxth	r3, r3
 800bbd4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800bbd8:	b29b      	uxth	r3, r3
 800bbda:	3301      	adds	r3, #1
 800bbdc:	b29a      	uxth	r2, r3
 800bbde:	4b44      	ldr	r3, [pc, #272]	; (800bcf0 <HW_TS_Init+0x198>)
 800bbe0:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800bbe2:	4b43      	ldr	r3, [pc, #268]	; (800bcf0 <HW_TS_Init+0x198>)
 800bbe4:	881b      	ldrh	r3, [r3, #0]
 800bbe6:	3b01      	subs	r3, #1
 800bbe8:	4a40      	ldr	r2, [pc, #256]	; (800bcec <HW_TS_Init+0x194>)
 800bbea:	7812      	ldrb	r2, [r2, #0]
 800bbec:	fb02 f303 	mul.w	r3, r2, r3
 800bbf0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800bbf4:	4a3c      	ldr	r2, [pc, #240]	; (800bce8 <HW_TS_Init+0x190>)
 800bbf6:	7812      	ldrb	r2, [r2, #0]
 800bbf8:	40d3      	lsrs	r3, r2
 800bbfa:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 800bbfc:	69bb      	ldr	r3, [r7, #24]
 800bbfe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bc02:	4293      	cmp	r3, r2
 800bc04:	d904      	bls.n	800bc10 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800bc06:	4b3b      	ldr	r3, [pc, #236]	; (800bcf4 <HW_TS_Init+0x19c>)
 800bc08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc0c:	801a      	strh	r2, [r3, #0]
 800bc0e:	e003      	b.n	800bc18 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800bc10:	69bb      	ldr	r3, [r7, #24]
 800bc12:	b29a      	uxth	r2, r3
 800bc14:	4b37      	ldr	r3, [pc, #220]	; (800bcf4 <HW_TS_Init+0x19c>)
 800bc16:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800bc18:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800bc1c:	f7ff fb9c 	bl	800b358 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800bc20:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800bc24:	f7ff fb84 	bl	800b330 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800bc28:	79fb      	ldrb	r3, [r7, #7]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d13d      	bne.n	800bcaa <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800bc2e:	4b32      	ldr	r3, [pc, #200]	; (800bcf8 <HW_TS_Init+0x1a0>)
 800bc30:	2201      	movs	r2, #1
 800bc32:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800bc34:	4b31      	ldr	r3, [pc, #196]	; (800bcfc <HW_TS_Init+0x1a4>)
 800bc36:	f04f 32ff 	mov.w	r2, #4294967295
 800bc3a:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	77fb      	strb	r3, [r7, #31]
 800bc40:	e00c      	b.n	800bc5c <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800bc42:	7ffa      	ldrb	r2, [r7, #31]
 800bc44:	492e      	ldr	r1, [pc, #184]	; (800bd00 <HW_TS_Init+0x1a8>)
 800bc46:	4613      	mov	r3, r2
 800bc48:	005b      	lsls	r3, r3, #1
 800bc4a:	4413      	add	r3, r2
 800bc4c:	00db      	lsls	r3, r3, #3
 800bc4e:	440b      	add	r3, r1
 800bc50:	330c      	adds	r3, #12
 800bc52:	2200      	movs	r2, #0
 800bc54:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800bc56:	7ffb      	ldrb	r3, [r7, #31]
 800bc58:	3301      	adds	r3, #1
 800bc5a:	77fb      	strb	r3, [r7, #31]
 800bc5c:	7ffb      	ldrb	r3, [r7, #31]
 800bc5e:	2b13      	cmp	r3, #19
 800bc60:	d9ef      	bls.n	800bc42 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800bc62:	4b28      	ldr	r3, [pc, #160]	; (800bd04 <HW_TS_Init+0x1ac>)
 800bc64:	2214      	movs	r2, #20
 800bc66:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 800bc68:	4b1d      	ldr	r3, [pc, #116]	; (800bce0 <HW_TS_Init+0x188>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	689a      	ldr	r2, [r3, #8]
 800bc6e:	4b1c      	ldr	r3, [pc, #112]	; (800bce0 <HW_TS_Init+0x188>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc76:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800bc78:	4b19      	ldr	r3, [pc, #100]	; (800bce0 <HW_TS_Init+0x188>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	68db      	ldr	r3, [r3, #12]
 800bc7e:	b2da      	uxtb	r2, r3
 800bc80:	4b17      	ldr	r3, [pc, #92]	; (800bce0 <HW_TS_Init+0x188>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800bc88:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800bc8a:	4b1f      	ldr	r3, [pc, #124]	; (800bd08 <HW_TS_Init+0x1b0>)
 800bc8c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800bc90:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800bc92:	2003      	movs	r0, #3
 800bc94:	f003 f9df 	bl	800f056 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800bc98:	4b11      	ldr	r3, [pc, #68]	; (800bce0 <HW_TS_Init+0x188>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	689a      	ldr	r2, [r3, #8]
 800bc9e:	4b10      	ldr	r3, [pc, #64]	; (800bce0 <HW_TS_Init+0x188>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bca6:	609a      	str	r2, [r3, #8]
 800bca8:	e009      	b.n	800bcbe <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800bcaa:	4b0d      	ldr	r3, [pc, #52]	; (800bce0 <HW_TS_Init+0x188>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	68db      	ldr	r3, [r3, #12]
 800bcb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d002      	beq.n	800bcbe <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800bcb8:	2003      	movs	r0, #3
 800bcba:	f003 f9be 	bl	800f03a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800bcbe:	4b08      	ldr	r3, [pc, #32]	; (800bce0 <HW_TS_Init+0x188>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	22ff      	movs	r2, #255	; 0xff
 800bcc4:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	2103      	movs	r1, #3
 800bcca:	2003      	movs	r0, #3
 800bccc:	f003 f973 	bl	800efb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800bcd0:	2003      	movs	r0, #3
 800bcd2:	f003 f98a 	bl	800efea <HAL_NVIC_EnableIRQ>

  return;
 800bcd6:	bf00      	nop
}
 800bcd8:	3720      	adds	r7, #32
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
 800bcde:	bf00      	nop
 800bce0:	200006d0 	.word	0x200006d0
 800bce4:	40002800 	.word	0x40002800
 800bce8:	200005f5 	.word	0x200005f5
 800bcec:	200005f6 	.word	0x200005f6
 800bcf0:	200005f8 	.word	0x200005f8
 800bcf4:	200005fa 	.word	0x200005fa
 800bcf8:	200005f4 	.word	0x200005f4
 800bcfc:	200005f0 	.word	0x200005f0
 800bd00:	2000040c 	.word	0x2000040c
 800bd04:	200005ec 	.word	0x200005ec
 800bd08:	58000800 	.word	0x58000800

0800bd0c <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b08b      	sub	sp, #44	; 0x2c
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	60f8      	str	r0, [r7, #12]
 800bd14:	60b9      	str	r1, [r7, #8]
 800bd16:	603b      	str	r3, [r7, #0]
 800bd18:	4613      	mov	r3, r2
 800bd1a:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd22:	f3ef 8310 	mrs	r3, PRIMASK
 800bd26:	61fb      	str	r3, [r7, #28]
  return(result);
 800bd28:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bd2a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800bd2c:	b672      	cpsid	i
}
 800bd2e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800bd30:	e004      	b.n	800bd3c <HW_TS_Create+0x30>
  {
    loop++;
 800bd32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bd36:	3301      	adds	r3, #1
 800bd38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800bd3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bd40:	2b13      	cmp	r3, #19
 800bd42:	d80c      	bhi.n	800bd5e <HW_TS_Create+0x52>
 800bd44:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800bd48:	492c      	ldr	r1, [pc, #176]	; (800bdfc <HW_TS_Create+0xf0>)
 800bd4a:	4613      	mov	r3, r2
 800bd4c:	005b      	lsls	r3, r3, #1
 800bd4e:	4413      	add	r3, r2
 800bd50:	00db      	lsls	r3, r3, #3
 800bd52:	440b      	add	r3, r1
 800bd54:	330c      	adds	r3, #12
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	b2db      	uxtb	r3, r3
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d1e9      	bne.n	800bd32 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800bd5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bd62:	2b14      	cmp	r3, #20
 800bd64:	d038      	beq.n	800bdd8 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800bd66:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800bd6a:	4924      	ldr	r1, [pc, #144]	; (800bdfc <HW_TS_Create+0xf0>)
 800bd6c:	4613      	mov	r3, r2
 800bd6e:	005b      	lsls	r3, r3, #1
 800bd70:	4413      	add	r3, r2
 800bd72:	00db      	lsls	r3, r3, #3
 800bd74:	440b      	add	r3, r1
 800bd76:	330c      	adds	r3, #12
 800bd78:	2201      	movs	r2, #1
 800bd7a:	701a      	strb	r2, [r3, #0]
 800bd7c:	6a3b      	ldr	r3, [r7, #32]
 800bd7e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd80:	69bb      	ldr	r3, [r7, #24]
 800bd82:	f383 8810 	msr	PRIMASK, r3
}
 800bd86:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 800bd88:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800bd8c:	491b      	ldr	r1, [pc, #108]	; (800bdfc <HW_TS_Create+0xf0>)
 800bd8e:	4613      	mov	r3, r2
 800bd90:	005b      	lsls	r3, r3, #1
 800bd92:	4413      	add	r3, r2
 800bd94:	00db      	lsls	r3, r3, #3
 800bd96:	440b      	add	r3, r1
 800bd98:	3310      	adds	r3, #16
 800bd9a:	68fa      	ldr	r2, [r7, #12]
 800bd9c:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800bd9e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800bda2:	4916      	ldr	r1, [pc, #88]	; (800bdfc <HW_TS_Create+0xf0>)
 800bda4:	4613      	mov	r3, r2
 800bda6:	005b      	lsls	r3, r3, #1
 800bda8:	4413      	add	r3, r2
 800bdaa:	00db      	lsls	r3, r3, #3
 800bdac:	440b      	add	r3, r1
 800bdae:	330d      	adds	r3, #13
 800bdb0:	79fa      	ldrb	r2, [r7, #7]
 800bdb2:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 800bdb4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800bdb8:	4910      	ldr	r1, [pc, #64]	; (800bdfc <HW_TS_Create+0xf0>)
 800bdba:	4613      	mov	r3, r2
 800bdbc:	005b      	lsls	r3, r3, #1
 800bdbe:	4413      	add	r3, r2
 800bdc0:	00db      	lsls	r3, r3, #3
 800bdc2:	440b      	add	r3, r1
 800bdc4:	683a      	ldr	r2, [r7, #0]
 800bdc6:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800bdce:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bdd6:	e008      	b.n	800bdea <HW_TS_Create+0xde>
 800bdd8:	6a3b      	ldr	r3, [r7, #32]
 800bdda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	f383 8810 	msr	PRIMASK, r3
}
 800bde2:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 800bde4:	2301      	movs	r3, #1
 800bde6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 800bdea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	372c      	adds	r7, #44	; 0x2c
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf8:	4770      	bx	lr
 800bdfa:	bf00      	nop
 800bdfc:	2000040c 	.word	0x2000040c

0800be00 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b086      	sub	sp, #24
 800be04:	af00      	add	r7, sp, #0
 800be06:	4603      	mov	r3, r0
 800be08:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be0a:	f3ef 8310 	mrs	r3, PRIMASK
 800be0e:	60fb      	str	r3, [r7, #12]
  return(result);
 800be10:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800be12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800be14:	b672      	cpsid	i
}
 800be16:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800be18:	2003      	movs	r0, #3
 800be1a:	f003 f8f4 	bl	800f006 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800be1e:	4b34      	ldr	r3, [pc, #208]	; (800bef0 <HW_TS_Stop+0xf0>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	22ca      	movs	r2, #202	; 0xca
 800be24:	625a      	str	r2, [r3, #36]	; 0x24
 800be26:	4b32      	ldr	r3, [pc, #200]	; (800bef0 <HW_TS_Stop+0xf0>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	2253      	movs	r2, #83	; 0x53
 800be2c:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800be2e:	79fa      	ldrb	r2, [r7, #7]
 800be30:	4930      	ldr	r1, [pc, #192]	; (800bef4 <HW_TS_Stop+0xf4>)
 800be32:	4613      	mov	r3, r2
 800be34:	005b      	lsls	r3, r3, #1
 800be36:	4413      	add	r3, r2
 800be38:	00db      	lsls	r3, r3, #3
 800be3a:	440b      	add	r3, r1
 800be3c:	330c      	adds	r3, #12
 800be3e:	781b      	ldrb	r3, [r3, #0]
 800be40:	b2db      	uxtb	r3, r3
 800be42:	2b02      	cmp	r3, #2
 800be44:	d142      	bne.n	800becc <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800be46:	79fb      	ldrb	r3, [r7, #7]
 800be48:	2100      	movs	r1, #0
 800be4a:	4618      	mov	r0, r3
 800be4c:	f7ff fc06 	bl	800b65c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800be50:	4b29      	ldr	r3, [pc, #164]	; (800bef8 <HW_TS_Stop+0xf8>)
 800be52:	781b      	ldrb	r3, [r3, #0]
 800be54:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800be56:	7cfb      	ldrb	r3, [r7, #19]
 800be58:	2b14      	cmp	r3, #20
 800be5a:	d12f      	bne.n	800bebc <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800be5c:	4b27      	ldr	r3, [pc, #156]	; (800befc <HW_TS_Stop+0xfc>)
 800be5e:	689b      	ldr	r3, [r3, #8]
 800be60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be68:	d107      	bne.n	800be7a <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800be6a:	bf00      	nop
 800be6c:	4b20      	ldr	r3, [pc, #128]	; (800bef0 <HW_TS_Stop+0xf0>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	68db      	ldr	r3, [r3, #12]
 800be72:	f003 0304 	and.w	r3, r3, #4
 800be76:	2b00      	cmp	r3, #0
 800be78:	d1f8      	bne.n	800be6c <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800be7a:	4b1d      	ldr	r3, [pc, #116]	; (800bef0 <HW_TS_Stop+0xf0>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	689a      	ldr	r2, [r3, #8]
 800be80:	4b1b      	ldr	r3, [pc, #108]	; (800bef0 <HW_TS_Stop+0xf0>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be88:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800be8a:	bf00      	nop
 800be8c:	4b18      	ldr	r3, [pc, #96]	; (800bef0 <HW_TS_Stop+0xf0>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	68db      	ldr	r3, [r3, #12]
 800be92:	f003 0304 	and.w	r3, r3, #4
 800be96:	2b00      	cmp	r3, #0
 800be98:	d0f8      	beq.n	800be8c <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800be9a:	4b15      	ldr	r3, [pc, #84]	; (800bef0 <HW_TS_Stop+0xf0>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	68db      	ldr	r3, [r3, #12]
 800bea0:	b2da      	uxtb	r2, r3
 800bea2:	4b13      	ldr	r3, [pc, #76]	; (800bef0 <HW_TS_Stop+0xf0>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800beaa:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800beac:	4b14      	ldr	r3, [pc, #80]	; (800bf00 <HW_TS_Stop+0x100>)
 800beae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800beb2:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800beb4:	2003      	movs	r0, #3
 800beb6:	f003 f8ce 	bl	800f056 <HAL_NVIC_ClearPendingIRQ>
 800beba:	e007      	b.n	800becc <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800bebc:	4b11      	ldr	r3, [pc, #68]	; (800bf04 <HW_TS_Stop+0x104>)
 800bebe:	781b      	ldrb	r3, [r3, #0]
 800bec0:	b2db      	uxtb	r3, r3
 800bec2:	7cfa      	ldrb	r2, [r7, #19]
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d001      	beq.n	800becc <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 800bec8:	f7ff fce4 	bl	800b894 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800becc:	4b08      	ldr	r3, [pc, #32]	; (800bef0 <HW_TS_Stop+0xf0>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	22ff      	movs	r2, #255	; 0xff
 800bed2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800bed4:	2003      	movs	r0, #3
 800bed6:	f003 f888 	bl	800efea <HAL_NVIC_EnableIRQ>
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	f383 8810 	msr	PRIMASK, r3
}
 800bee4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800bee6:	bf00      	nop
}
 800bee8:	3718      	adds	r7, #24
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
 800beee:	bf00      	nop
 800bef0:	200006d0 	.word	0x200006d0
 800bef4:	2000040c 	.word	0x2000040c
 800bef8:	200005ec 	.word	0x200005ec
 800befc:	40002800 	.word	0x40002800
 800bf00:	58000800 	.word	0x58000800
 800bf04:	200005ed 	.word	0x200005ed

0800bf08 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b086      	sub	sp, #24
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	4603      	mov	r3, r0
 800bf10:	6039      	str	r1, [r7, #0]
 800bf12:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800bf14:	79fa      	ldrb	r2, [r7, #7]
 800bf16:	493b      	ldr	r1, [pc, #236]	; (800c004 <HW_TS_Start+0xfc>)
 800bf18:	4613      	mov	r3, r2
 800bf1a:	005b      	lsls	r3, r3, #1
 800bf1c:	4413      	add	r3, r2
 800bf1e:	00db      	lsls	r3, r3, #3
 800bf20:	440b      	add	r3, r1
 800bf22:	330c      	adds	r3, #12
 800bf24:	781b      	ldrb	r3, [r3, #0]
 800bf26:	b2db      	uxtb	r3, r3
 800bf28:	2b02      	cmp	r3, #2
 800bf2a:	d103      	bne.n	800bf34 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 800bf2c:	79fb      	ldrb	r3, [r7, #7]
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f7ff ff66 	bl	800be00 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf34:	f3ef 8310 	mrs	r3, PRIMASK
 800bf38:	60fb      	str	r3, [r7, #12]
  return(result);
 800bf3a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bf3c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bf3e:	b672      	cpsid	i
}
 800bf40:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800bf42:	2003      	movs	r0, #3
 800bf44:	f003 f85f 	bl	800f006 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800bf48:	4b2f      	ldr	r3, [pc, #188]	; (800c008 <HW_TS_Start+0x100>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	22ca      	movs	r2, #202	; 0xca
 800bf4e:	625a      	str	r2, [r3, #36]	; 0x24
 800bf50:	4b2d      	ldr	r3, [pc, #180]	; (800c008 <HW_TS_Start+0x100>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	2253      	movs	r2, #83	; 0x53
 800bf56:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800bf58:	79fa      	ldrb	r2, [r7, #7]
 800bf5a:	492a      	ldr	r1, [pc, #168]	; (800c004 <HW_TS_Start+0xfc>)
 800bf5c:	4613      	mov	r3, r2
 800bf5e:	005b      	lsls	r3, r3, #1
 800bf60:	4413      	add	r3, r2
 800bf62:	00db      	lsls	r3, r3, #3
 800bf64:	440b      	add	r3, r1
 800bf66:	330c      	adds	r3, #12
 800bf68:	2202      	movs	r2, #2
 800bf6a:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800bf6c:	79fa      	ldrb	r2, [r7, #7]
 800bf6e:	4925      	ldr	r1, [pc, #148]	; (800c004 <HW_TS_Start+0xfc>)
 800bf70:	4613      	mov	r3, r2
 800bf72:	005b      	lsls	r3, r3, #1
 800bf74:	4413      	add	r3, r2
 800bf76:	00db      	lsls	r3, r3, #3
 800bf78:	440b      	add	r3, r1
 800bf7a:	3308      	adds	r3, #8
 800bf7c:	683a      	ldr	r2, [r7, #0]
 800bf7e:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800bf80:	79fa      	ldrb	r2, [r7, #7]
 800bf82:	4920      	ldr	r1, [pc, #128]	; (800c004 <HW_TS_Start+0xfc>)
 800bf84:	4613      	mov	r3, r2
 800bf86:	005b      	lsls	r3, r3, #1
 800bf88:	4413      	add	r3, r2
 800bf8a:	00db      	lsls	r3, r3, #3
 800bf8c:	440b      	add	r3, r1
 800bf8e:	3304      	adds	r3, #4
 800bf90:	683a      	ldr	r2, [r7, #0]
 800bf92:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800bf94:	79fb      	ldrb	r3, [r7, #7]
 800bf96:	4618      	mov	r0, r3
 800bf98:	f7ff fab6 	bl	800b508 <linkTimer>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800bfa0:	4b1a      	ldr	r3, [pc, #104]	; (800c00c <HW_TS_Start+0x104>)
 800bfa2:	781b      	ldrb	r3, [r3, #0]
 800bfa4:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800bfa6:	4b1a      	ldr	r3, [pc, #104]	; (800c010 <HW_TS_Start+0x108>)
 800bfa8:	781b      	ldrb	r3, [r3, #0]
 800bfaa:	b2db      	uxtb	r3, r3
 800bfac:	7c7a      	ldrb	r2, [r7, #17]
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d002      	beq.n	800bfb8 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800bfb2:	f7ff fc6f 	bl	800b894 <RescheduleTimerList>
 800bfb6:	e013      	b.n	800bfe0 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800bfb8:	79fa      	ldrb	r2, [r7, #7]
 800bfba:	4912      	ldr	r1, [pc, #72]	; (800c004 <HW_TS_Start+0xfc>)
 800bfbc:	4613      	mov	r3, r2
 800bfbe:	005b      	lsls	r3, r3, #1
 800bfc0:	4413      	add	r3, r2
 800bfc2:	00db      	lsls	r3, r3, #3
 800bfc4:	440b      	add	r3, r1
 800bfc6:	3308      	adds	r3, #8
 800bfc8:	6819      	ldr	r1, [r3, #0]
 800bfca:	8a7b      	ldrh	r3, [r7, #18]
 800bfcc:	79fa      	ldrb	r2, [r7, #7]
 800bfce:	1ac9      	subs	r1, r1, r3
 800bfd0:	480c      	ldr	r0, [pc, #48]	; (800c004 <HW_TS_Start+0xfc>)
 800bfd2:	4613      	mov	r3, r2
 800bfd4:	005b      	lsls	r3, r3, #1
 800bfd6:	4413      	add	r3, r2
 800bfd8:	00db      	lsls	r3, r3, #3
 800bfda:	4403      	add	r3, r0
 800bfdc:	3308      	adds	r3, #8
 800bfde:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800bfe0:	4b09      	ldr	r3, [pc, #36]	; (800c008 <HW_TS_Start+0x100>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	22ff      	movs	r2, #255	; 0xff
 800bfe6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800bfe8:	2003      	movs	r0, #3
 800bfea:	f002 fffe 	bl	800efea <HAL_NVIC_EnableIRQ>
 800bfee:	697b      	ldr	r3, [r7, #20]
 800bff0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	f383 8810 	msr	PRIMASK, r3
}
 800bff8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800bffa:	bf00      	nop
}
 800bffc:	3718      	adds	r7, #24
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}
 800c002:	bf00      	nop
 800c004:	2000040c 	.word	0x2000040c
 800c008:	200006d0 	.word	0x200006d0
 800c00c:	200005ec 	.word	0x200005ec
 800c010:	200005ed 	.word	0x200005ed

0800c014 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b084      	sub	sp, #16
 800c018:	af00      	add	r7, sp, #0
 800c01a:	60f8      	str	r0, [r7, #12]
 800c01c:	460b      	mov	r3, r1
 800c01e:	607a      	str	r2, [r7, #4]
 800c020:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	4798      	blx	r3

  return;
 800c026:	bf00      	nop
}
 800c028:	3710      	adds	r7, #16
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}

0800c02e <LL_AHB2_GRP1_EnableClock>:
{
 800c02e:	b480      	push	{r7}
 800c030:	b085      	sub	sp, #20
 800c032:	af00      	add	r7, sp, #0
 800c034:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800c036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c03a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c03c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	4313      	orrs	r3, r2
 800c044:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800c046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c04a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	4013      	ands	r3, r2
 800c050:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c052:	68fb      	ldr	r3, [r7, #12]
}
 800c054:	bf00      	nop
 800c056:	3714      	adds	r7, #20
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr

0800c060 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800c060:	b480      	push	{r7}
 800c062:	b085      	sub	sp, #20
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800c068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c06c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c06e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	4313      	orrs	r3, r2
 800c076:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800c078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c07c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	4013      	ands	r3, r2
 800c082:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c084:	68fb      	ldr	r3, [r7, #12]
}
 800c086:	bf00      	nop
 800c088:	3714      	adds	r7, #20
 800c08a:	46bd      	mov	sp, r7
 800c08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c090:	4770      	bx	lr
	...

0800c094 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800c098:	4b1b      	ldr	r3, [pc, #108]	; (800c108 <MX_I2C3_Init+0x74>)
 800c09a:	4a1c      	ldr	r2, [pc, #112]	; (800c10c <MX_I2C3_Init+0x78>)
 800c09c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 800c09e:	4b1a      	ldr	r3, [pc, #104]	; (800c108 <MX_I2C3_Init+0x74>)
 800c0a0:	4a1b      	ldr	r2, [pc, #108]	; (800c110 <MX_I2C3_Init+0x7c>)
 800c0a2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800c0a4:	4b18      	ldr	r3, [pc, #96]	; (800c108 <MX_I2C3_Init+0x74>)
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c0aa:	4b17      	ldr	r3, [pc, #92]	; (800c108 <MX_I2C3_Init+0x74>)
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c0b0:	4b15      	ldr	r3, [pc, #84]	; (800c108 <MX_I2C3_Init+0x74>)
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800c0b6:	4b14      	ldr	r3, [pc, #80]	; (800c108 <MX_I2C3_Init+0x74>)
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800c0bc:	4b12      	ldr	r3, [pc, #72]	; (800c108 <MX_I2C3_Init+0x74>)
 800c0be:	2200      	movs	r2, #0
 800c0c0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c0c2:	4b11      	ldr	r3, [pc, #68]	; (800c108 <MX_I2C3_Init+0x74>)
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c0c8:	4b0f      	ldr	r3, [pc, #60]	; (800c108 <MX_I2C3_Init+0x74>)
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800c0ce:	480e      	ldr	r0, [pc, #56]	; (800c108 <MX_I2C3_Init+0x74>)
 800c0d0:	f003 fc80 	bl	800f9d4 <HAL_I2C_Init>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d001      	beq.n	800c0de <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800c0da:	f000 f9b9 	bl	800c450 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800c0de:	2100      	movs	r1, #0
 800c0e0:	4809      	ldr	r0, [pc, #36]	; (800c108 <MX_I2C3_Init+0x74>)
 800c0e2:	f004 fc9d 	bl	8010a20 <HAL_I2CEx_ConfigAnalogFilter>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d001      	beq.n	800c0f0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800c0ec:	f000 f9b0 	bl	800c450 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800c0f0:	2100      	movs	r1, #0
 800c0f2:	4805      	ldr	r0, [pc, #20]	; (800c108 <MX_I2C3_Init+0x74>)
 800c0f4:	f004 fcdf 	bl	8010ab6 <HAL_I2CEx_ConfigDigitalFilter>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d001      	beq.n	800c102 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800c0fe:	f000 f9a7 	bl	800c450 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800c102:	bf00      	nop
 800c104:	bd80      	pop	{r7, pc}
 800c106:	bf00      	nop
 800c108:	200005fc 	.word	0x200005fc
 800c10c:	40005c00 	.word	0x40005c00
 800c110:	00707cbb 	.word	0x00707cbb

0800c114 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b09c      	sub	sp, #112	; 0x70
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c11c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800c120:	2200      	movs	r2, #0
 800c122:	601a      	str	r2, [r3, #0]
 800c124:	605a      	str	r2, [r3, #4]
 800c126:	609a      	str	r2, [r3, #8]
 800c128:	60da      	str	r2, [r3, #12]
 800c12a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c12c:	f107 030c 	add.w	r3, r7, #12
 800c130:	2250      	movs	r2, #80	; 0x50
 800c132:	2100      	movs	r1, #0
 800c134:	4618      	mov	r0, r3
 800c136:	f00f fc89 	bl	801ba4c <memset>
  if(i2cHandle->Instance==I2C3)
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	4a17      	ldr	r2, [pc, #92]	; (800c19c <HAL_I2C_MspInit+0x88>)
 800c140:	4293      	cmp	r3, r2
 800c142:	d126      	bne.n	800c192 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800c144:	2308      	movs	r3, #8
 800c146:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800c148:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800c14c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c14e:	f107 030c 	add.w	r3, r7, #12
 800c152:	4618      	mov	r0, r3
 800c154:	f006 ff31 	bl	8012fba <HAL_RCCEx_PeriphCLKConfig>
 800c158:	4603      	mov	r3, r0
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d001      	beq.n	800c162 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800c15e:	f000 f977 	bl	800c450 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c162:	2002      	movs	r0, #2
 800c164:	f7ff ff63 	bl	800c02e <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration
    PB13     ------> I2C3_SCL
    PB14     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800c168:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800c16c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c16e:	2312      	movs	r3, #18
 800c170:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c172:	2300      	movs	r3, #0
 800c174:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c176:	2300      	movs	r3, #0
 800c178:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800c17a:	2304      	movs	r3, #4
 800c17c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c17e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800c182:	4619      	mov	r1, r3
 800c184:	4806      	ldr	r0, [pc, #24]	; (800c1a0 <HAL_I2C_MspInit+0x8c>)
 800c186:	f003 fa49 	bl	800f61c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800c18a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800c18e:	f7ff ff67 	bl	800c060 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800c192:	bf00      	nop
 800c194:	3770      	adds	r7, #112	; 0x70
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
 800c19a:	bf00      	nop
 800c19c:	40005c00 	.word	0x40005c00
 800c1a0:	48000400 	.word	0x48000400

0800c1a4 <LL_AHB3_GRP1_EnableClock>:
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b085      	sub	sp, #20
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800c1ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c1b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c1b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	4313      	orrs	r3, r2
 800c1ba:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800c1bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c1c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	4013      	ands	r3, r2
 800c1c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
}
 800c1ca:	bf00      	nop
 800c1cc:	3714      	adds	r7, #20
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d4:	4770      	bx	lr
	...

0800c1d8 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 800c1dc:	4b06      	ldr	r3, [pc, #24]	; (800c1f8 <MX_IPCC_Init+0x20>)
 800c1de:	4a07      	ldr	r2, [pc, #28]	; (800c1fc <MX_IPCC_Init+0x24>)
 800c1e0:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800c1e2:	4805      	ldr	r0, [pc, #20]	; (800c1f8 <MX_IPCC_Init+0x20>)
 800c1e4:	f004 fcb4 	bl	8010b50 <HAL_IPCC_Init>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d001      	beq.n	800c1f2 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800c1ee:	f000 f92f 	bl	800c450 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800c1f2:	bf00      	nop
 800c1f4:	bd80      	pop	{r7, pc}
 800c1f6:	bf00      	nop
 800c1f8:	20000650 	.word	0x20000650
 800c1fc:	58000c00 	.word	0x58000c00

0800c200 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b082      	sub	sp, #8
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	4a0d      	ldr	r2, [pc, #52]	; (800c244 <HAL_IPCC_MspInit+0x44>)
 800c20e:	4293      	cmp	r3, r2
 800c210:	d113      	bne.n	800c23a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800c212:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c216:	f7ff ffc5 	bl	800c1a4 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800c21a:	2200      	movs	r2, #0
 800c21c:	2100      	movs	r1, #0
 800c21e:	202c      	movs	r0, #44	; 0x2c
 800c220:	f002 fec9 	bl	800efb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800c224:	202c      	movs	r0, #44	; 0x2c
 800c226:	f002 fee0 	bl	800efea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800c22a:	2200      	movs	r2, #0
 800c22c:	2100      	movs	r1, #0
 800c22e:	202d      	movs	r0, #45	; 0x2d
 800c230:	f002 fec1 	bl	800efb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800c234:	202d      	movs	r0, #45	; 0x2d
 800c236:	f002 fed8 	bl	800efea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 800c23a:	bf00      	nop
 800c23c:	3708      	adds	r7, #8
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}
 800c242:	bf00      	nop
 800c244:	58000c00 	.word	0x58000c00

0800c248 <LL_RCC_LSE_SetDriveCapability>:
{
 800c248:	b480      	push	{r7}
 800c24a:	b083      	sub	sp, #12
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800c250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c258:	f023 0218 	bic.w	r2, r3, #24
 800c25c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	4313      	orrs	r3, r2
 800c264:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800c268:	bf00      	nop
 800c26a:	370c      	adds	r7, #12
 800c26c:	46bd      	mov	sp, r7
 800c26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c272:	4770      	bx	lr

0800c274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800c278:	f001 fb12 	bl	800d8a0 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 800c27c:	f7fd ff58 	bl	800a130 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800c280:	f000 f822 	bl	800c2c8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800c284:	f000 f894 	bl	800c3b0 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 800c288:	f7ff ffa6 	bl	800c1d8 <MX_IPCC_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  MX_DMA_Init();
 800c28c:	f7fe f944 	bl	800a518 <MX_DMA_Init>
  MX_RTC_Init();
 800c290:	f000 f9d0 	bl	800c634 <MX_RTC_Init>
  MX_I2C3_Init();
 800c294:	f7ff fefe 	bl	800c094 <MX_I2C3_Init>
  MX_QUADSPI_Init();
 800c298:	f000 f912 	bl	800c4c0 <MX_QUADSPI_Init>
  MX_ADC1_Init();
 800c29c:	f7fd fc6c 	bl	8009b78 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 800c2a0:	f000 fe34 	bl	800cf0c <MX_LPUART1_UART_Init>
  MX_RF_Init();
 800c2a4:	f000 f994 	bl	800c5d0 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  AS3935_Init();
 800c2a8:	f7fd f8f6 	bl	8009498 <AS3935_Init>
  MX_GPIO_Init();
 800c2ac:	f7fe fd06 	bl	800acbc <MX_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA,TS_Pin,GPIO_PIN_SET);
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c2b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c2ba:	f003 fb37 	bl	800f92c <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 800c2be:	f7fd ff45 	bl	800a14c <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 800c2c2:	f7fe f8d3 	bl	800a46c <MX_APPE_Process>
 800c2c6:	e7fc      	b.n	800c2c2 <main+0x4e>

0800c2c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b09a      	sub	sp, #104	; 0x68
 800c2cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c2ce:	f107 0320 	add.w	r3, r7, #32
 800c2d2:	2248      	movs	r2, #72	; 0x48
 800c2d4:	2100      	movs	r1, #0
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f00f fbb8 	bl	801ba4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c2dc:	1d3b      	adds	r3, r7, #4
 800c2de:	2200      	movs	r2, #0
 800c2e0:	601a      	str	r2, [r3, #0]
 800c2e2:	605a      	str	r2, [r3, #4]
 800c2e4:	609a      	str	r2, [r3, #8]
 800c2e6:	60da      	str	r2, [r3, #12]
 800c2e8:	611a      	str	r2, [r3, #16]
 800c2ea:	615a      	str	r2, [r3, #20]
 800c2ec:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800c2ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c2f2:	68db      	ldr	r3, [r3, #12]
 800c2f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c2f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2fc:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800c2fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c302:	68db      	ldr	r3, [r3, #12]
 800c304:	f023 0303 	bic.w	r3, r3, #3
 800c308:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c30c:	f043 0301 	orr.w	r3, r3, #1
 800c310:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800c312:	f004 fca3 	bl	8010c5c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800c316:	2010      	movs	r0, #16
 800c318:	f7ff ff96 	bl	800c248 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c31c:	4b23      	ldr	r3, [pc, #140]	; (800c3ac <SystemClock_Config+0xe4>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c324:	4a21      	ldr	r2, [pc, #132]	; (800c3ac <SystemClock_Config+0xe4>)
 800c326:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c32a:	6013      	str	r3, [r2, #0]
 800c32c:	4b1f      	ldr	r3, [pc, #124]	; (800c3ac <SystemClock_Config+0xe4>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c334:	603b      	str	r3, [r7, #0]
 800c336:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800c338:	2327      	movs	r3, #39	; 0x27
 800c33a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800c33c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c340:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800c342:	2301      	movs	r3, #1
 800c344:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800c346:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c34a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800c34c:	2301      	movs	r3, #1
 800c34e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800c350:	2340      	movs	r3, #64	; 0x40
 800c352:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800c354:	2300      	movs	r3, #0
 800c356:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800c358:	2360      	movs	r3, #96	; 0x60
 800c35a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800c35c:	2300      	movs	r3, #0
 800c35e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c360:	f107 0320 	add.w	r3, r7, #32
 800c364:	4618      	mov	r0, r3
 800c366:	f005 fe77 	bl	8012058 <HAL_RCC_OscConfig>
 800c36a:	4603      	mov	r3, r0
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d001      	beq.n	800c374 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800c370:	f000 f86e 	bl	800c450 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800c374:	236f      	movs	r3, #111	; 0x6f
 800c376:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800c378:	2302      	movs	r3, #2
 800c37a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c37c:	2300      	movs	r3, #0
 800c37e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800c380:	2300      	movs	r3, #0
 800c382:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800c384:	2300      	movs	r3, #0
 800c386:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800c388:	2300      	movs	r3, #0
 800c38a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800c38c:	2300      	movs	r3, #0
 800c38e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800c390:	1d3b      	adds	r3, r7, #4
 800c392:	2101      	movs	r1, #1
 800c394:	4618      	mov	r0, r3
 800c396:	f006 f9d3 	bl	8012740 <HAL_RCC_ClockConfig>
 800c39a:	4603      	mov	r3, r0
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d001      	beq.n	800c3a4 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 800c3a0:	f000 f856 	bl	800c450 <Error_Handler>
  }
}
 800c3a4:	bf00      	nop
 800c3a6:	3768      	adds	r7, #104	; 0x68
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}
 800c3ac:	58000400 	.word	0x58000400

0800c3b0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b094      	sub	sp, #80	; 0x50
 800c3b4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c3b6:	463b      	mov	r3, r7
 800c3b8:	2250      	movs	r2, #80	; 0x50
 800c3ba:	2100      	movs	r1, #0
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f00f fb45 	bl	801ba4c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800c3c2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800c3c6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 800c3c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c3cc:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 800c3ce:	2302      	movs	r3, #2
 800c3d0:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800c3d2:	2310      	movs	r3, #16
 800c3d4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c3d6:	463b      	mov	r3, r7
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f006 fdee 	bl	8012fba <HAL_RCCEx_PeriphCLKConfig>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d001      	beq.n	800c3e8 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800c3e4:	f000 f834 	bl	800c450 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800c3e8:	bf00      	nop
 800c3ea:	3750      	adds	r7, #80	; 0x50
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}

0800c3f0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b082      	sub	sp, #8
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 800c3f8:	1d39      	adds	r1, r7, #4
 800c3fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c3fe:	2201      	movs	r2, #1
 800c400:	4803      	ldr	r0, [pc, #12]	; (800c410 <__io_putchar+0x20>)
 800c402:	f007 fe01 	bl	8014008 <HAL_UART_Transmit>

  return ch;
 800c406:	687b      	ldr	r3, [r7, #4]
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3708      	adds	r7, #8
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}
 800c410:	200006f8 	.word	0x200006f8

0800c414 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b082      	sub	sp, #8
 800c418:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 800c41a:	2300      	movs	r3, #0
 800c41c:	71fb      	strb	r3, [r7, #7]
  /* Place your implementation of fgetc here */

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&hlpuart1);
 800c41e:	4b0b      	ldr	r3, [pc, #44]	; (800c44c <__io_getchar+0x38>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	2208      	movs	r2, #8
 800c424:	621a      	str	r2, [r3, #32]

  /* Wait for reception of a character on the USART1 RX line
     and echo this character on console */
  HAL_UART_Receive(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 800c426:	1df9      	adds	r1, r7, #7
 800c428:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c42c:	2201      	movs	r2, #1
 800c42e:	4807      	ldr	r0, [pc, #28]	; (800c44c <__io_getchar+0x38>)
 800c430:	f007 fe78 	bl	8014124 <HAL_UART_Receive>
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 800c434:	1df9      	adds	r1, r7, #7
 800c436:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c43a:	2201      	movs	r2, #1
 800c43c:	4803      	ldr	r0, [pc, #12]	; (800c44c <__io_getchar+0x38>)
 800c43e:	f007 fde3 	bl	8014008 <HAL_UART_Transmit>
  return ch;
 800c442:	79fb      	ldrb	r3, [r7, #7]
}
 800c444:	4618      	mov	r0, r3
 800c446:	3708      	adds	r7, #8
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}
 800c44c:	200006f8 	.word	0x200006f8

0800c450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c450:	b480      	push	{r7}
 800c452:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800c454:	b672      	cpsid	i
}
 800c456:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800c458:	e7fe      	b.n	800c458 <Error_Handler+0x8>

0800c45a <LL_AHB2_GRP1_EnableClock>:
{
 800c45a:	b480      	push	{r7}
 800c45c:	b085      	sub	sp, #20
 800c45e:	af00      	add	r7, sp, #0
 800c460:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800c462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c466:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c468:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	4313      	orrs	r3, r2
 800c470:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800c472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c476:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	4013      	ands	r3, r2
 800c47c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c47e:	68fb      	ldr	r3, [r7, #12]
}
 800c480:	bf00      	nop
 800c482:	3714      	adds	r7, #20
 800c484:	46bd      	mov	sp, r7
 800c486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48a:	4770      	bx	lr

0800c48c <LL_AHB3_GRP1_EnableClock>:
{
 800c48c:	b480      	push	{r7}
 800c48e:	b085      	sub	sp, #20
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800c494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c498:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c49a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	4313      	orrs	r3, r2
 800c4a2:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800c4a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c4a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	4013      	ands	r3, r2
 800c4ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
}
 800c4b2:	bf00      	nop
 800c4b4:	3714      	adds	r7, #20
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4bc:	4770      	bx	lr
	...

0800c4c0 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 800c4c4:	4b0f      	ldr	r3, [pc, #60]	; (800c504 <MX_QUADSPI_Init+0x44>)
 800c4c6:	4a10      	ldr	r2, [pc, #64]	; (800c508 <MX_QUADSPI_Init+0x48>)
 800c4c8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800c4ca:	4b0e      	ldr	r3, [pc, #56]	; (800c504 <MX_QUADSPI_Init+0x44>)
 800c4cc:	2202      	movs	r2, #2
 800c4ce:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800c4d0:	4b0c      	ldr	r3, [pc, #48]	; (800c504 <MX_QUADSPI_Init+0x44>)
 800c4d2:	2204      	movs	r2, #4
 800c4d4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800c4d6:	4b0b      	ldr	r3, [pc, #44]	; (800c504 <MX_QUADSPI_Init+0x44>)
 800c4d8:	2200      	movs	r2, #0
 800c4da:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 20;
 800c4dc:	4b09      	ldr	r3, [pc, #36]	; (800c504 <MX_QUADSPI_Init+0x44>)
 800c4de:	2214      	movs	r2, #20
 800c4e0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800c4e2:	4b08      	ldr	r3, [pc, #32]	; (800c504 <MX_QUADSPI_Init+0x44>)
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800c4e8:	4b06      	ldr	r3, [pc, #24]	; (800c504 <MX_QUADSPI_Init+0x44>)
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800c4ee:	4805      	ldr	r0, [pc, #20]	; (800c504 <MX_QUADSPI_Init+0x44>)
 800c4f0:	f004 fbd2 	bl	8010c98 <HAL_QSPI_Init>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d001      	beq.n	800c4fe <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800c4fa:	f7ff ffa9 	bl	800c450 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800c4fe:	bf00      	nop
 800c500:	bd80      	pop	{r7, pc}
 800c502:	bf00      	nop
 800c504:	2000068c 	.word	0x2000068c
 800c508:	a0001000 	.word	0xa0001000

0800c50c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b088      	sub	sp, #32
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c514:	f107 030c 	add.w	r3, r7, #12
 800c518:	2200      	movs	r2, #0
 800c51a:	601a      	str	r2, [r3, #0]
 800c51c:	605a      	str	r2, [r3, #4]
 800c51e:	609a      	str	r2, [r3, #8]
 800c520:	60da      	str	r2, [r3, #12]
 800c522:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	4a26      	ldr	r2, [pc, #152]	; (800c5c4 <HAL_QSPI_MspInit+0xb8>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d146      	bne.n	800c5bc <HAL_QSPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800c52e:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c532:	f7ff ffab 	bl	800c48c <LL_AHB3_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c536:	2002      	movs	r0, #2
 800c538:	f7ff ff8f 	bl	800c45a <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c53c:	2001      	movs	r0, #1
 800c53e:	f7ff ff8c 	bl	800c45a <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c542:	2008      	movs	r0, #8
 800c544:	f7ff ff89 	bl	800c45a <LL_AHB2_GRP1_EnableClock>
    PD7     ------> QUADSPI_BK1_IO3
    PD3     ------> QUADSPI_BK1_NCS
    PD5     ------> QUADSPI_BK1_IO1
    PD6     ------> QUADSPI_BK1_IO2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c548:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c54c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c54e:	2302      	movs	r3, #2
 800c550:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c552:	2300      	movs	r3, #0
 800c554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c556:	2300      	movs	r3, #0
 800c558:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800c55a:	230a      	movs	r3, #10
 800c55c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c55e:	f107 030c 	add.w	r3, r7, #12
 800c562:	4619      	mov	r1, r3
 800c564:	4818      	ldr	r0, [pc, #96]	; (800c5c8 <HAL_QSPI_MspInit+0xbc>)
 800c566:	f003 f859 	bl	800f61c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800c56a:	2308      	movs	r3, #8
 800c56c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c56e:	2302      	movs	r3, #2
 800c570:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c572:	2300      	movs	r3, #0
 800c574:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c576:	2300      	movs	r3, #0
 800c578:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800c57a:	230a      	movs	r3, #10
 800c57c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c57e:	f107 030c 	add.w	r3, r7, #12
 800c582:	4619      	mov	r1, r3
 800c584:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c588:	f003 f848 	bl	800f61c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 800c58c:	23e8      	movs	r3, #232	; 0xe8
 800c58e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c590:	2302      	movs	r3, #2
 800c592:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c594:	2300      	movs	r3, #0
 800c596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c598:	2300      	movs	r3, #0
 800c59a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800c59c:	230a      	movs	r3, #10
 800c59e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c5a0:	f107 030c 	add.w	r3, r7, #12
 800c5a4:	4619      	mov	r1, r3
 800c5a6:	4809      	ldr	r0, [pc, #36]	; (800c5cc <HAL_QSPI_MspInit+0xc0>)
 800c5a8:	f003 f838 	bl	800f61c <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 0, 0);
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	2100      	movs	r1, #0
 800c5b0:	2032      	movs	r0, #50	; 0x32
 800c5b2:	f002 fd00 	bl	800efb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800c5b6:	2032      	movs	r0, #50	; 0x32
 800c5b8:	f002 fd17 	bl	800efea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 800c5bc:	bf00      	nop
 800c5be:	3720      	adds	r7, #32
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}
 800c5c4:	a0001000 	.word	0xa0001000
 800c5c8:	48000400 	.word	0x48000400
 800c5cc:	48000c00 	.word	0x48000c00

0800c5d0 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 800c5d4:	bf00      	nop
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5dc:	4770      	bx	lr

0800c5de <LL_RCC_EnableRTC>:
{
 800c5de:	b480      	push	{r7}
 800c5e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800c5e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c5e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c5ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c5f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800c5f6:	bf00      	nop
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fe:	4770      	bx	lr

0800c600 <LL_APB1_GRP1_EnableClock>:
{
 800c600:	b480      	push	{r7}
 800c602:	b085      	sub	sp, #20
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800c608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c60c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c60e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	4313      	orrs	r3, r2
 800c616:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800c618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c61c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	4013      	ands	r3, r2
 800c622:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c624:	68fb      	ldr	r3, [r7, #12]
}
 800c626:	bf00      	nop
 800c628:	3714      	adds	r7, #20
 800c62a:	46bd      	mov	sp, r7
 800c62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c630:	4770      	bx	lr
	...

0800c634 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b086      	sub	sp, #24
 800c638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800c63a:	1d3b      	adds	r3, r7, #4
 800c63c:	2200      	movs	r2, #0
 800c63e:	601a      	str	r2, [r3, #0]
 800c640:	605a      	str	r2, [r3, #4]
 800c642:	609a      	str	r2, [r3, #8]
 800c644:	60da      	str	r2, [r3, #12]
 800c646:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800c648:	2300      	movs	r3, #0
 800c64a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800c64c:	4b31      	ldr	r3, [pc, #196]	; (800c714 <MX_RTC_Init+0xe0>)
 800c64e:	4a32      	ldr	r2, [pc, #200]	; (800c718 <MX_RTC_Init+0xe4>)
 800c650:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800c652:	4b30      	ldr	r3, [pc, #192]	; (800c714 <MX_RTC_Init+0xe0>)
 800c654:	2200      	movs	r2, #0
 800c656:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 800c658:	4b2e      	ldr	r3, [pc, #184]	; (800c714 <MX_RTC_Init+0xe0>)
 800c65a:	220f      	movs	r2, #15
 800c65c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800c65e:	4b2d      	ldr	r3, [pc, #180]	; (800c714 <MX_RTC_Init+0xe0>)
 800c660:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c664:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800c666:	4b2b      	ldr	r3, [pc, #172]	; (800c714 <MX_RTC_Init+0xe0>)
 800c668:	2200      	movs	r2, #0
 800c66a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800c66c:	4b29      	ldr	r3, [pc, #164]	; (800c714 <MX_RTC_Init+0xe0>)
 800c66e:	2200      	movs	r2, #0
 800c670:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800c672:	4b28      	ldr	r3, [pc, #160]	; (800c714 <MX_RTC_Init+0xe0>)
 800c674:	2200      	movs	r2, #0
 800c676:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800c678:	4b26      	ldr	r3, [pc, #152]	; (800c714 <MX_RTC_Init+0xe0>)
 800c67a:	2200      	movs	r2, #0
 800c67c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800c67e:	4825      	ldr	r0, [pc, #148]	; (800c714 <MX_RTC_Init+0xe0>)
 800c680:	f006 ff22 	bl	80134c8 <HAL_RTC_Init>
 800c684:	4603      	mov	r3, r0
 800c686:	2b00      	cmp	r3, #0
 800c688:	d001      	beq.n	800c68e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800c68a:	f7ff fee1 	bl	800c450 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800c68e:	2300      	movs	r3, #0
 800c690:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800c692:	2300      	movs	r3, #0
 800c694:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800c696:	2300      	movs	r3, #0
 800c698:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 800c69a:	2300      	movs	r3, #0
 800c69c:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800c6a6:	1d3b      	adds	r3, r7, #4
 800c6a8:	2201      	movs	r2, #1
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	4819      	ldr	r0, [pc, #100]	; (800c714 <MX_RTC_Init+0xe0>)
 800c6ae:	f006 ffbb 	bl	8013628 <HAL_RTC_SetTime>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d001      	beq.n	800c6bc <MX_RTC_Init+0x88>
  {
    Error_Handler();
 800c6b8:	f7ff feca 	bl	800c450 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800c6bc:	2301      	movs	r3, #1
 800c6be:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800c6c4:	2301      	movs	r3, #1
 800c6c6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	70fb      	strb	r3, [r7, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800c6cc:	463b      	mov	r3, r7
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	4619      	mov	r1, r3
 800c6d2:	4810      	ldr	r0, [pc, #64]	; (800c714 <MX_RTC_Init+0xe0>)
 800c6d4:	f007 f8c8 	bl	8013868 <HAL_RTC_SetDate>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d001      	beq.n	800c6e2 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 800c6de:	f7ff feb7 	bl	800c450 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp_IT(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_DEFAULT) != HAL_OK)
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	2100      	movs	r1, #0
 800c6e6:	480b      	ldr	r0, [pc, #44]	; (800c714 <MX_RTC_Init+0xe0>)
 800c6e8:	f007 fa46 	bl	8013b78 <HAL_RTCEx_SetTimeStamp_IT>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d001      	beq.n	800c6f6 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800c6f2:	f7ff fead 	bl	800c450 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	2100      	movs	r1, #0
 800c6fa:	4806      	ldr	r0, [pc, #24]	; (800c714 <MX_RTC_Init+0xe0>)
 800c6fc:	f007 fb58 	bl	8013db0 <HAL_RTCEx_SetWakeUpTimer_IT>
 800c700:	4603      	mov	r3, r0
 800c702:	2b00      	cmp	r3, #0
 800c704:	d001      	beq.n	800c70a <MX_RTC_Init+0xd6>
  {
    Error_Handler();
 800c706:	f7ff fea3 	bl	800c450 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800c70a:	bf00      	nop
 800c70c:	3718      	adds	r7, #24
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}
 800c712:	bf00      	nop
 800c714:	200006d0 	.word	0x200006d0
 800c718:	40002800 	.word	0x40002800

0800c71c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b096      	sub	sp, #88	; 0x58
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c724:	f107 0308 	add.w	r3, r7, #8
 800c728:	2250      	movs	r2, #80	; 0x50
 800c72a:	2100      	movs	r1, #0
 800c72c:	4618      	mov	r0, r3
 800c72e:	f00f f98d 	bl	801ba4c <memset>
  if(rtcHandle->Instance==RTC)
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	4a16      	ldr	r2, [pc, #88]	; (800c790 <HAL_RTC_MspInit+0x74>)
 800c738:	4293      	cmp	r3, r2
 800c73a:	d125      	bne.n	800c788 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800c73c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c740:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800c742:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c746:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c748:	f107 0308 	add.w	r3, r7, #8
 800c74c:	4618      	mov	r0, r3
 800c74e:	f006 fc34 	bl	8012fba <HAL_RCCEx_PeriphCLKConfig>
 800c752:	4603      	mov	r3, r0
 800c754:	2b00      	cmp	r3, #0
 800c756:	d001      	beq.n	800c75c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800c758:	f7ff fe7a 	bl	800c450 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800c75c:	f7ff ff3f 	bl	800c5de <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800c760:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c764:	f7ff ff4c 	bl	800c600 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_IRQn, 0, 0);
 800c768:	2200      	movs	r2, #0
 800c76a:	2100      	movs	r1, #0
 800c76c:	2002      	movs	r0, #2
 800c76e:	f002 fc22 	bl	800efb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_IRQn);
 800c772:	2002      	movs	r0, #2
 800c774:	f002 fc39 	bl	800efea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800c778:	2200      	movs	r2, #0
 800c77a:	2100      	movs	r1, #0
 800c77c:	2003      	movs	r0, #3
 800c77e:	f002 fc1a 	bl	800efb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800c782:	2003      	movs	r0, #3
 800c784:	f002 fc31 	bl	800efea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800c788:	bf00      	nop
 800c78a:	3758      	adds	r7, #88	; 0x58
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}
 800c790:	40002800 	.word	0x40002800

0800c794 <LL_PWR_SetPowerMode>:
{
 800c794:	b480      	push	{r7}
 800c796:	b083      	sub	sp, #12
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 800c79c:	4b06      	ldr	r3, [pc, #24]	; (800c7b8 <LL_PWR_SetPowerMode+0x24>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	f023 0207 	bic.w	r2, r3, #7
 800c7a4:	4904      	ldr	r1, [pc, #16]	; (800c7b8 <LL_PWR_SetPowerMode+0x24>)
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	4313      	orrs	r3, r2
 800c7aa:	600b      	str	r3, [r1, #0]
}
 800c7ac:	bf00      	nop
 800c7ae:	370c      	adds	r7, #12
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b6:	4770      	bx	lr
 800c7b8:	58000400 	.word	0x58000400

0800c7bc <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 800c7bc:	b480      	push	{r7}
 800c7be:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 800c7c0:	4b03      	ldr	r3, [pc, #12]	; (800c7d0 <LL_PWR_ClearFlag_WU+0x14>)
 800c7c2:	221f      	movs	r2, #31
 800c7c4:	619a      	str	r2, [r3, #24]
}
 800c7c6:	bf00      	nop
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ce:	4770      	bx	lr
 800c7d0:	58000400 	.word	0x58000400

0800c7d4 <LL_PWR_IsActiveFlag_C2SB>:
  * @brief  System standby flag for CPU2
  * @rmtoll EXTSCR       C2SBF         LL_PWR_IsActiveFlag_C2SB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2SB(void)
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
 800c7d8:	4b07      	ldr	r3, [pc, #28]	; (800c7f8 <LL_PWR_IsActiveFlag_C2SB+0x24>)
 800c7da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c7e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c7e6:	d101      	bne.n	800c7ec <LL_PWR_IsActiveFlag_C2SB+0x18>
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	e000      	b.n	800c7ee <LL_PWR_IsActiveFlag_C2SB+0x1a>
 800c7ec:	2300      	movs	r3, #0
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f6:	4770      	bx	lr
 800c7f8:	58000400 	.word	0x58000400

0800c7fc <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 800c7fc:	b480      	push	{r7}
 800c7fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 800c800:	4b07      	ldr	r3, [pc, #28]	; (800c820 <LL_PWR_IsActiveFlag_C2DS+0x24>)
 800c802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c806:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c80a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c80e:	d101      	bne.n	800c814 <LL_PWR_IsActiveFlag_C2DS+0x18>
 800c810:	2301      	movs	r3, #1
 800c812:	e000      	b.n	800c816 <LL_PWR_IsActiveFlag_C2DS+0x1a>
 800c814:	2300      	movs	r3, #0
}
 800c816:	4618      	mov	r0, r3
 800c818:	46bd      	mov	sp, r7
 800c81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81e:	4770      	bx	lr
 800c820:	58000400 	.word	0x58000400

0800c824 <LL_RCC_HSE_Enable>:
{
 800c824:	b480      	push	{r7}
 800c826:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800c828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c836:	6013      	str	r3, [r2, #0]
}
 800c838:	bf00      	nop
 800c83a:	46bd      	mov	sp, r7
 800c83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c840:	4770      	bx	lr

0800c842 <LL_RCC_HSE_IsReady>:
{
 800c842:	b480      	push	{r7}
 800c844:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800c846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c850:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c854:	d101      	bne.n	800c85a <LL_RCC_HSE_IsReady+0x18>
 800c856:	2301      	movs	r3, #1
 800c858:	e000      	b.n	800c85c <LL_RCC_HSE_IsReady+0x1a>
 800c85a:	2300      	movs	r3, #0
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	46bd      	mov	sp, r7
 800c860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c864:	4770      	bx	lr

0800c866 <LL_RCC_HSI_Enable>:
{
 800c866:	b480      	push	{r7}
 800c868:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800c86a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c878:	6013      	str	r3, [r2, #0]
}
 800c87a:	bf00      	nop
 800c87c:	46bd      	mov	sp, r7
 800c87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c882:	4770      	bx	lr

0800c884 <LL_RCC_HSI_IsReady>:
{
 800c884:	b480      	push	{r7}
 800c886:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800c888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c896:	d101      	bne.n	800c89c <LL_RCC_HSI_IsReady+0x18>
 800c898:	2301      	movs	r3, #1
 800c89a:	e000      	b.n	800c89e <LL_RCC_HSI_IsReady+0x1a>
 800c89c:	2300      	movs	r3, #0
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a6:	4770      	bx	lr

0800c8a8 <LL_RCC_SetSysClkSource>:
{
 800c8a8:	b480      	push	{r7}
 800c8aa:	b083      	sub	sp, #12
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800c8b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c8b4:	689b      	ldr	r3, [r3, #8]
 800c8b6:	f023 0203 	bic.w	r2, r3, #3
 800c8ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	4313      	orrs	r3, r2
 800c8c2:	608b      	str	r3, [r1, #8]
}
 800c8c4:	bf00      	nop
 800c8c6:	370c      	adds	r7, #12
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ce:	4770      	bx	lr

0800c8d0 <LL_RCC_GetSysClkSource>:
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c8d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c8d8:	689b      	ldr	r3, [r3, #8]
 800c8da:	f003 030c 	and.w	r3, r3, #12
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e6:	4770      	bx	lr

0800c8e8 <LL_RCC_SetSMPSClockSource>:
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b083      	sub	sp, #12
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800c8f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c8f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8f6:	f023 0203 	bic.w	r2, r3, #3
 800c8fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	4313      	orrs	r3, r2
 800c902:	624b      	str	r3, [r1, #36]	; 0x24
}
 800c904:	bf00      	nop
 800c906:	370c      	adds	r7, #12
 800c908:	46bd      	mov	sp, r7
 800c90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90e:	4770      	bx	lr

0800c910 <LL_LPM_EnableSleep>:
{
 800c910:	b480      	push	{r7}
 800c912:	af00      	add	r7, sp, #0
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800c914:	4b05      	ldr	r3, [pc, #20]	; (800c92c <LL_LPM_EnableSleep+0x1c>)
 800c916:	691b      	ldr	r3, [r3, #16]
 800c918:	4a04      	ldr	r2, [pc, #16]	; (800c92c <LL_LPM_EnableSleep+0x1c>)
 800c91a:	f023 0304 	bic.w	r3, r3, #4
 800c91e:	6113      	str	r3, [r2, #16]
}
 800c920:	bf00      	nop
 800c922:	46bd      	mov	sp, r7
 800c924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c928:	4770      	bx	lr
 800c92a:	bf00      	nop
 800c92c:	e000ed00 	.word	0xe000ed00

0800c930 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 800c930:	b480      	push	{r7}
 800c932:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800c934:	4b05      	ldr	r3, [pc, #20]	; (800c94c <LL_LPM_EnableDeepSleep+0x1c>)
 800c936:	691b      	ldr	r3, [r3, #16]
 800c938:	4a04      	ldr	r2, [pc, #16]	; (800c94c <LL_LPM_EnableDeepSleep+0x1c>)
 800c93a:	f043 0304 	orr.w	r3, r3, #4
 800c93e:	6113      	str	r3, [r2, #16]
}
 800c940:	bf00      	nop
 800c942:	46bd      	mov	sp, r7
 800c944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c948:	4770      	bx	lr
 800c94a:	bf00      	nop
 800c94c:	e000ed00 	.word	0xe000ed00

0800c950 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 800c950:	b480      	push	{r7}
 800c952:	b083      	sub	sp, #12
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
 800c958:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	683a      	ldr	r2, [r7, #0]
 800c95e:	3220      	adds	r2, #32
 800c960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c964:	4a05      	ldr	r2, [pc, #20]	; (800c97c <LL_HSEM_1StepLock+0x2c>)
 800c966:	4293      	cmp	r3, r2
 800c968:	d001      	beq.n	800c96e <LL_HSEM_1StepLock+0x1e>
 800c96a:	2301      	movs	r3, #1
 800c96c:	e000      	b.n	800c970 <LL_HSEM_1StepLock+0x20>
 800c96e:	2300      	movs	r3, #0
}
 800c970:	4618      	mov	r0, r3
 800c972:	370c      	adds	r7, #12
 800c974:	46bd      	mov	sp, r7
 800c976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97a:	4770      	bx	lr
 800c97c:	80000400 	.word	0x80000400

0800c980 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 800c980:	b480      	push	{r7}
 800c982:	b085      	sub	sp, #20
 800c984:	af00      	add	r7, sp, #0
 800c986:	60f8      	str	r0, [r7, #12]
 800c988:	60b9      	str	r1, [r7, #8]
 800c98a:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	68ba      	ldr	r2, [r7, #8]
 800c996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800c99a:	bf00      	nop
 800c99c:	3714      	adds	r7, #20
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a4:	4770      	bx	lr

0800c9a6 <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode(void)
{
 800c9a6:	b580      	push	{r7, lr}
 800c9a8:	af00      	add	r7, sp, #0
/* USER CODE END PWR_EnterOffMode_1 */
  /**
   * The systick should be disabled for the same reason than when the device enters stop mode because
   * at this time, the device may enter either OffMode or StopMode.
   */
  HAL_SuspendTick();
 800c9aa:	f001 f80b 	bl	800d9c4 <HAL_SuspendTick>

  EnterLowPower();
 800c9ae:	f000 f835 	bl	800ca1c <EnterLowPower>
   * in critical section. If an interrupt occurs while in that critical section before that point,
   * the flag is set and will be cleared here but the system will not enter Off Mode
   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
   * of this critical section
   */
  LL_PWR_ClearFlag_WU();
 800c9b2:	f7ff ff03 	bl	800c7bc <LL_PWR_ClearFlag_WU>

  LL_PWR_SetPowerMode(LL_PWR_MODE_STANDBY);
 800c9b6:	2003      	movs	r0, #3
 800c9b8:	f7ff feec 	bl	800c794 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 800c9bc:	f7ff ffb8 	bl	800c930 <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 800c9c0:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterOffMode_2 */

/* USER CODE END PWR_EnterOffMode_2 */
  return;
 800c9c2:	bf00      	nop
}
 800c9c4:	bd80      	pop	{r7, pc}

0800c9c6 <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode(void)
{
 800c9c6:	b580      	push	{r7, lr}
 800c9c8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitOffMode_1 */

/* USER CODE END PWR_ExitOffMode_1 */
  HAL_ResumeTick();
 800c9ca:	f001 f80b 	bl	800d9e4 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitOffMode_2 */

/* USER CODE END PWR_ExitOffMode_2 */
  return;
 800c9ce:	bf00      	nop
}
 800c9d0:	bd80      	pop	{r7, pc}

0800c9d2 <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode(void)
{
 800c9d2:	b580      	push	{r7, lr}
 800c9d4:	af00      	add	r7, sp, #0
   *
   * When in production, the HAL_DBGMCU_EnableDBGStopMode() is not called so that the device can reach best power consumption
   * However, the systick should be disabled anyway to avoid the case when it is about to expire at the same time the device enters
   * stop mode (this will abort the Stop Mode entry).
   */
  HAL_SuspendTick();
 800c9d6:	f000 fff5 	bl	800d9c4 <HAL_SuspendTick>

  /**
   * This function is called from CRITICAL SECTION
   */
  EnterLowPower();
 800c9da:	f000 f81f 	bl	800ca1c <EnterLowPower>

  /************************************************************************************
   * ENTER STOP MODE
   ***********************************************************************************/
  LL_PWR_SetPowerMode(LL_PWR_MODE_STOP2);
 800c9de:	2002      	movs	r0, #2
 800c9e0:	f7ff fed8 	bl	800c794 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 800c9e4:	f7ff ffa4 	bl	800c930 <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 800c9e8:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterStopMode_2 */

/* USER CODE END PWR_EnterStopMode_2 */
  return;
 800c9ea:	bf00      	nop
}
 800c9ec:	bd80      	pop	{r7, pc}

0800c9ee <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode(void)
{
 800c9ee:	b580      	push	{r7, lr}
 800c9f0:	af00      	add	r7, sp, #0

/* USER CODE END PWR_ExitStopMode_1 */
  /**
   * This function is called from CRITICAL SECTION
   */
  ExitLowPower();
 800c9f2:	f000 f84f 	bl	800ca94 <ExitLowPower>

  HAL_ResumeTick();
 800c9f6:	f000 fff5 	bl	800d9e4 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitStopMode_2 */

/* USER CODE END PWR_ExitStopMode_2 */
  return;
 800c9fa:	bf00      	nop
}
 800c9fc:	bd80      	pop	{r7, pc}

0800c9fe <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode(void)
{
 800c9fe:	b580      	push	{r7, lr}
 800ca00:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode_1 */

/* USER CODE END PWR_EnterSleepMode_1 */

  HAL_SuspendTick();
 800ca02:	f000 ffdf 	bl	800d9c4 <HAL_SuspendTick>

  /************************************************************************************
   * ENTER SLEEP MODE
   ***********************************************************************************/
  LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800ca06:	f7ff ff83 	bl	800c910 <LL_LPM_EnableSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 800ca0a:	bf30      	wfi
/* USER CODE BEGIN PWR_EnterSleepMode_2 */

/* USER CODE END PWR_EnterSleepMode_2 */
  return;
 800ca0c:	bf00      	nop
}
 800ca0e:	bd80      	pop	{r7, pc}

0800ca10 <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode(void)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode_1 */

/* USER CODE END PWR_ExitSleepMode_1 */
  HAL_ResumeTick();
 800ca14:	f000 ffe6 	bl	800d9e4 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitSleepMode_2 */

/* USER CODE END PWR_ExitSleepMode_2 */
  return;
 800ca18:	bf00      	nop
}
 800ca1a:	bd80      	pop	{r7, pc}

0800ca1c <EnterLowPower>:
  * @brief Setup the system to enter either stop or off mode
  * @param none
  * @retval none
  */
static void EnterLowPower(void)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 800ca20:	bf00      	nop
 800ca22:	2103      	movs	r1, #3
 800ca24:	4819      	ldr	r0, [pc, #100]	; (800ca8c <EnterLowPower+0x70>)
 800ca26:	f7ff ff93 	bl	800c950 <LL_HSEM_1StepLock>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d1f8      	bne.n	800ca22 <EnterLowPower+0x6>

  if (! LL_HSEM_1StepLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID))
 800ca30:	2104      	movs	r1, #4
 800ca32:	4816      	ldr	r0, [pc, #88]	; (800ca8c <EnterLowPower+0x70>)
 800ca34:	f7ff ff8c 	bl	800c950 <LL_HSEM_1StepLock>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d117      	bne.n	800ca6e <EnterLowPower+0x52>
  {
    if(LL_PWR_IsActiveFlag_C2DS() || LL_PWR_IsActiveFlag_C2SB())
 800ca3e:	f7ff fedd 	bl	800c7fc <LL_PWR_IsActiveFlag_C2DS>
 800ca42:	4603      	mov	r3, r0
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d104      	bne.n	800ca52 <EnterLowPower+0x36>
 800ca48:	f7ff fec4 	bl	800c7d4 <LL_PWR_IsActiveFlag_C2SB>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d015      	beq.n	800ca7e <EnterLowPower+0x62>
    {
      /* Release ENTRY_STOP_MODE semaphore */
      LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 800ca52:	2200      	movs	r2, #0
 800ca54:	2104      	movs	r1, #4
 800ca56:	480d      	ldr	r0, [pc, #52]	; (800ca8c <EnterLowPower+0x70>)
 800ca58:	f7ff ff92 	bl	800c980 <LL_HSEM_ReleaseLock>

      Switch_On_HSI();
 800ca5c:	f000 f852 	bl	800cb04 <Switch_On_HSI>
      __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 800ca60:	4b0b      	ldr	r3, [pc, #44]	; (800ca90 <EnterLowPower+0x74>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4a0a      	ldr	r2, [pc, #40]	; (800ca90 <EnterLowPower+0x74>)
 800ca66:	f023 0307 	bic.w	r3, r3, #7
 800ca6a:	6013      	str	r3, [r2, #0]
 800ca6c:	e007      	b.n	800ca7e <EnterLowPower+0x62>
    }
  }
  else
  {
    Switch_On_HSI();
 800ca6e:	f000 f849 	bl	800cb04 <Switch_On_HSI>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 800ca72:	4b07      	ldr	r3, [pc, #28]	; (800ca90 <EnterLowPower+0x74>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	4a06      	ldr	r2, [pc, #24]	; (800ca90 <EnterLowPower+0x74>)
 800ca78:	f023 0307 	bic.w	r3, r3, #7
 800ca7c:	6013      	str	r3, [r2, #0]
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 800ca7e:	2200      	movs	r2, #0
 800ca80:	2103      	movs	r1, #3
 800ca82:	4802      	ldr	r0, [pc, #8]	; (800ca8c <EnterLowPower+0x70>)
 800ca84:	f7ff ff7c 	bl	800c980 <LL_HSEM_ReleaseLock>

  return;
 800ca88:	bf00      	nop
}
 800ca8a:	bd80      	pop	{r7, pc}
 800ca8c:	58001400 	.word	0x58001400
 800ca90:	58004000 	.word	0x58004000

0800ca94 <ExitLowPower>:
  * @brief Restore the system to exit stop mode
  * @param none
  * @retval none
  */
static void ExitLowPower(void)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	af00      	add	r7, sp, #0
  /* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 800ca98:	2200      	movs	r2, #0
 800ca9a:	2104      	movs	r1, #4
 800ca9c:	4817      	ldr	r0, [pc, #92]	; (800cafc <ExitLowPower+0x68>)
 800ca9e:	f7ff ff6f 	bl	800c980 <LL_HSEM_ReleaseLock>

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 800caa2:	bf00      	nop
 800caa4:	2103      	movs	r1, #3
 800caa6:	4815      	ldr	r0, [pc, #84]	; (800cafc <ExitLowPower+0x68>)
 800caa8:	f7ff ff52 	bl	800c950 <LL_HSEM_1StepLock>
 800caac:	4603      	mov	r3, r0
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d1f8      	bne.n	800caa4 <ExitLowPower+0x10>

  if(LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800cab2:	f7ff ff0d 	bl	800c8d0 <LL_RCC_GetSysClkSource>
 800cab6:	4603      	mov	r3, r0
 800cab8:	2b04      	cmp	r3, #4
 800caba:	d118      	bne.n	800caee <ExitLowPower+0x5a>
  {
/* Restore the clock configuration of the application in this user section */
/* USER CODE BEGIN ExitLowPower_1 */
    LL_RCC_HSE_Enable( );
 800cabc:	f7ff feb2 	bl	800c824 <LL_RCC_HSE_Enable>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 800cac0:	4b0f      	ldr	r3, [pc, #60]	; (800cb00 <ExitLowPower+0x6c>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	f023 0307 	bic.w	r3, r3, #7
 800cac8:	4a0d      	ldr	r2, [pc, #52]	; (800cb00 <ExitLowPower+0x6c>)
 800caca:	f043 0301 	orr.w	r3, r3, #1
 800cace:	6013      	str	r3, [r2, #0]
    while(!LL_RCC_HSE_IsReady( ));
 800cad0:	bf00      	nop
 800cad2:	f7ff feb6 	bl	800c842 <LL_RCC_HSE_IsReady>
 800cad6:	4603      	mov	r3, r0
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d0fa      	beq.n	800cad2 <ExitLowPower+0x3e>
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 800cadc:	2002      	movs	r0, #2
 800cade:	f7ff fee3 	bl	800c8a8 <LL_RCC_SetSysClkSource>
    while (LL_RCC_GetSysClkSource( ) != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 800cae2:	bf00      	nop
 800cae4:	f7ff fef4 	bl	800c8d0 <LL_RCC_GetSysClkSource>
 800cae8:	4603      	mov	r3, r0
 800caea:	2b08      	cmp	r3, #8
 800caec:	d1fa      	bne.n	800cae4 <ExitLowPower+0x50>

/* USER CODE END ExitLowPower_2 */
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 800caee:	2200      	movs	r2, #0
 800caf0:	2103      	movs	r1, #3
 800caf2:	4802      	ldr	r0, [pc, #8]	; (800cafc <ExitLowPower+0x68>)
 800caf4:	f7ff ff44 	bl	800c980 <LL_HSEM_ReleaseLock>

  return;
 800caf8:	bf00      	nop
}
 800cafa:	bd80      	pop	{r7, pc}
 800cafc:	58001400 	.word	0x58001400
 800cb00:	58004000 	.word	0x58004000

0800cb04 <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI(void)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable();
 800cb08:	f7ff fead 	bl	800c866 <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady());
 800cb0c:	bf00      	nop
 800cb0e:	f7ff feb9 	bl	800c884 <LL_RCC_HSI_IsReady>
 800cb12:	4603      	mov	r3, r0
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d0fa      	beq.n	800cb0e <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800cb18:	2001      	movs	r0, #1
 800cb1a:	f7ff fec5 	bl	800c8a8 <LL_RCC_SetSysClkSource>
  LL_RCC_SetSMPSClockSource(LL_RCC_SMPS_CLKSOURCE_HSI);
 800cb1e:	2000      	movs	r0, #0
 800cb20:	f7ff fee2 	bl	800c8e8 <LL_RCC_SetSMPSClockSource>
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 800cb24:	bf00      	nop
 800cb26:	f7ff fed3 	bl	800c8d0 <LL_RCC_GetSysClkSource>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	2b04      	cmp	r3, #4
 800cb2e:	d1fa      	bne.n	800cb26 <Switch_On_HSI+0x22>
  return;
 800cb30:	bf00      	nop
}
 800cb32:	bd80      	pop	{r7, pc}

0800cb34 <LL_AHB3_GRP1_EnableClock>:
{
 800cb34:	b480      	push	{r7}
 800cb36:	b085      	sub	sp, #20
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800cb3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cb40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cb42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	4313      	orrs	r3, r2
 800cb4a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800cb4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cb50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	4013      	ands	r3, r2
 800cb56:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800cb58:	68fb      	ldr	r3, [r7, #12]
}
 800cb5a:	bf00      	nop
 800cb5c:	3714      	adds	r7, #20
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb64:	4770      	bx	lr

0800cb66 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800cb66:	b580      	push	{r7, lr}
 800cb68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800cb6a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800cb6e:	f7ff ffe1 	bl	800cb34 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800cb72:	2200      	movs	r2, #0
 800cb74:	2100      	movs	r1, #0
 800cb76:	202e      	movs	r0, #46	; 0x2e
 800cb78:	f002 fa1d 	bl	800efb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800cb7c:	202e      	movs	r0, #46	; 0x2e
 800cb7e:	f002 fa34 	bl	800efea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800cb82:	bf00      	nop
 800cb84:	bd80      	pop	{r7, pc}

0800cb86 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800cb86:	b480      	push	{r7}
 800cb88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800cb8a:	e7fe      	b.n	800cb8a <NMI_Handler+0x4>

0800cb8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800cb90:	e7fe      	b.n	800cb90 <HardFault_Handler+0x4>

0800cb92 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800cb92:	b480      	push	{r7}
 800cb94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800cb96:	e7fe      	b.n	800cb96 <MemManage_Handler+0x4>

0800cb98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800cb98:	b480      	push	{r7}
 800cb9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800cb9c:	e7fe      	b.n	800cb9c <BusFault_Handler+0x4>

0800cb9e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800cb9e:	b480      	push	{r7}
 800cba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800cba2:	e7fe      	b.n	800cba2 <UsageFault_Handler+0x4>

0800cba4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800cba4:	b480      	push	{r7}
 800cba6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800cba8:	bf00      	nop
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb0:	4770      	bx	lr

0800cbb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800cbb2:	b480      	push	{r7}
 800cbb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800cbb6:	bf00      	nop
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbe:	4770      	bx	lr

0800cbc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800cbc4:	bf00      	nop
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbcc:	4770      	bx	lr

0800cbce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800cbce:	b580      	push	{r7, lr}
 800cbd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800cbd2:	f000 febf 	bl	800d954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800cbd6:	bf00      	nop
 800cbd8:	bd80      	pop	{r7, pc}
	...

0800cbdc <TAMP_STAMP_LSECSS_IRQHandler>:

/**
  * @brief This function handles RTC tamper and time stamp, CSS on LSE interrupts through EXTI line 18.
  */
void TAMP_STAMP_LSECSS_IRQHandler(void)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_IRQn 0 */
  HAL_RTCEx_TamperTimeStampIRQHandler(&hrtc);
 800cbe0:	4802      	ldr	r0, [pc, #8]	; (800cbec <TAMP_STAMP_LSECSS_IRQHandler+0x10>)
 800cbe2:	f007 f83b 	bl	8013c5c <HAL_RTCEx_TamperTimeStampIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_IRQn 1 */
}
 800cbe6:	bf00      	nop
 800cbe8:	bd80      	pop	{r7, pc}
 800cbea:	bf00      	nop
 800cbec:	200006d0 	.word	0x200006d0

0800cbf0 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800cbf4:	f7fe fee8 	bl	800b9c8 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800cbf8:	bf00      	nop
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Lightining_intr_Pin);
 800cc00:	2001      	movs	r0, #1
 800cc02:	f002 feab 	bl	800f95c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800cc06:	bf00      	nop
 800cc08:	bd80      	pop	{r7, pc}
	...

0800cc0c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800cc10:	4802      	ldr	r0, [pc, #8]	; (800cc1c <DMA1_Channel1_IRQHandler+0x10>)
 800cc12:	f002 fbb1 	bl	800f378 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800cc16:	bf00      	nop
 800cc18:	bd80      	pop	{r7, pc}
 800cc1a:	bf00      	nop
 800cc1c:	200003a8 	.word	0x200003a8

0800cc20 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EOC_Pin);
 800cc24:	2040      	movs	r0, #64	; 0x40
 800cc26:	f002 fe99 	bl	800f95c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800cc2a:	bf00      	nop
 800cc2c:	bd80      	pop	{r7, pc}

0800cc2e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800cc2e:	b580      	push	{r7, lr}
 800cc30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PWR_GD_Pin);
 800cc32:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800cc36:	f002 fe91 	bl	800f95c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800cc3a:	bf00      	nop
 800cc3c:	bd80      	pop	{r7, pc}

0800cc3e <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 800cc3e:	b580      	push	{r7, lr}
 800cc40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 800cc42:	f00d fa0f 	bl	801a064 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800cc46:	bf00      	nop
 800cc48:	bd80      	pop	{r7, pc}

0800cc4a <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800cc4a:	b580      	push	{r7, lr}
 800cc4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800cc4e:	f00d fa3f 	bl	801a0d0 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 800cc52:	bf00      	nop
 800cc54:	bd80      	pop	{r7, pc}

0800cc56 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800cc56:	b580      	push	{r7, lr}
 800cc58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800cc5a:	f002 fe97 	bl	800f98c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800cc5e:	bf00      	nop
 800cc60:	bd80      	pop	{r7, pc}
	...

0800cc64 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 800cc68:	4802      	ldr	r0, [pc, #8]	; (800cc74 <QUADSPI_IRQHandler+0x10>)
 800cc6a:	f004 f88b 	bl	8010d84 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 800cc6e:	bf00      	nop
 800cc70:	bd80      	pop	{r7, pc}
 800cc72:	bf00      	nop
 800cc74:	2000068c 	.word	0x2000068c

0800cc78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	af00      	add	r7, sp, #0
  return 1;
 800cc7c:	2301      	movs	r3, #1
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	46bd      	mov	sp, r7
 800cc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc86:	4770      	bx	lr

0800cc88 <_kill>:

int _kill(int pid, int sig)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b082      	sub	sp, #8
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800cc92:	f00e ff2d 	bl	801baf0 <__errno>
 800cc96:	4603      	mov	r3, r0
 800cc98:	2216      	movs	r2, #22
 800cc9a:	601a      	str	r2, [r3, #0]
  return -1;
 800cc9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3708      	adds	r7, #8
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}

0800cca8 <_exit>:

void _exit (int status)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b082      	sub	sp, #8
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800ccb0:	f04f 31ff 	mov.w	r1, #4294967295
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	f7ff ffe7 	bl	800cc88 <_kill>
  while (1) {}    /* Make sure we hang here */
 800ccba:	e7fe      	b.n	800ccba <_exit+0x12>

0800ccbc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b086      	sub	sp, #24
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	60f8      	str	r0, [r7, #12]
 800ccc4:	60b9      	str	r1, [r7, #8]
 800ccc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ccc8:	2300      	movs	r3, #0
 800ccca:	617b      	str	r3, [r7, #20]
 800cccc:	e00a      	b.n	800cce4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800ccce:	f7ff fba1 	bl	800c414 <__io_getchar>
 800ccd2:	4601      	mov	r1, r0
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	1c5a      	adds	r2, r3, #1
 800ccd8:	60ba      	str	r2, [r7, #8]
 800ccda:	b2ca      	uxtb	r2, r1
 800ccdc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	3301      	adds	r3, #1
 800cce2:	617b      	str	r3, [r7, #20]
 800cce4:	697a      	ldr	r2, [r7, #20]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	429a      	cmp	r2, r3
 800ccea:	dbf0      	blt.n	800ccce <_read+0x12>
  }

  return len;
 800ccec:	687b      	ldr	r3, [r7, #4]
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3718      	adds	r7, #24
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}

0800ccf6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800ccf6:	b580      	push	{r7, lr}
 800ccf8:	b086      	sub	sp, #24
 800ccfa:	af00      	add	r7, sp, #0
 800ccfc:	60f8      	str	r0, [r7, #12]
 800ccfe:	60b9      	str	r1, [r7, #8]
 800cd00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cd02:	2300      	movs	r3, #0
 800cd04:	617b      	str	r3, [r7, #20]
 800cd06:	e009      	b.n	800cd1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	1c5a      	adds	r2, r3, #1
 800cd0c:	60ba      	str	r2, [r7, #8]
 800cd0e:	781b      	ldrb	r3, [r3, #0]
 800cd10:	4618      	mov	r0, r3
 800cd12:	f7ff fb6d 	bl	800c3f0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cd16:	697b      	ldr	r3, [r7, #20]
 800cd18:	3301      	adds	r3, #1
 800cd1a:	617b      	str	r3, [r7, #20]
 800cd1c:	697a      	ldr	r2, [r7, #20]
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	429a      	cmp	r2, r3
 800cd22:	dbf1      	blt.n	800cd08 <_write+0x12>
  }
  return len;
 800cd24:	687b      	ldr	r3, [r7, #4]
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	3718      	adds	r7, #24
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}

0800cd2e <_close>:

int _close(int file)
{
 800cd2e:	b480      	push	{r7}
 800cd30:	b083      	sub	sp, #12
 800cd32:	af00      	add	r7, sp, #0
 800cd34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800cd36:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	370c      	adds	r7, #12
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd44:	4770      	bx	lr

0800cd46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800cd46:	b480      	push	{r7}
 800cd48:	b083      	sub	sp, #12
 800cd4a:	af00      	add	r7, sp, #0
 800cd4c:	6078      	str	r0, [r7, #4]
 800cd4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800cd56:	605a      	str	r2, [r3, #4]
  return 0;
 800cd58:	2300      	movs	r3, #0
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	370c      	adds	r7, #12
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd64:	4770      	bx	lr

0800cd66 <_isatty>:

int _isatty(int file)
{
 800cd66:	b480      	push	{r7}
 800cd68:	b083      	sub	sp, #12
 800cd6a:	af00      	add	r7, sp, #0
 800cd6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800cd6e:	2301      	movs	r3, #1
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	370c      	adds	r7, #12
 800cd74:	46bd      	mov	sp, r7
 800cd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7a:	4770      	bx	lr

0800cd7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	b085      	sub	sp, #20
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	60f8      	str	r0, [r7, #12]
 800cd84:	60b9      	str	r1, [r7, #8]
 800cd86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800cd88:	2300      	movs	r3, #0
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	3714      	adds	r7, #20
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd94:	4770      	bx	lr
	...

0800cd98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b086      	sub	sp, #24
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800cda0:	4a14      	ldr	r2, [pc, #80]	; (800cdf4 <_sbrk+0x5c>)
 800cda2:	4b15      	ldr	r3, [pc, #84]	; (800cdf8 <_sbrk+0x60>)
 800cda4:	1ad3      	subs	r3, r2, r3
 800cda6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800cdac:	4b13      	ldr	r3, [pc, #76]	; (800cdfc <_sbrk+0x64>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d102      	bne.n	800cdba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800cdb4:	4b11      	ldr	r3, [pc, #68]	; (800cdfc <_sbrk+0x64>)
 800cdb6:	4a12      	ldr	r2, [pc, #72]	; (800ce00 <_sbrk+0x68>)
 800cdb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800cdba:	4b10      	ldr	r3, [pc, #64]	; (800cdfc <_sbrk+0x64>)
 800cdbc:	681a      	ldr	r2, [r3, #0]
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	4413      	add	r3, r2
 800cdc2:	693a      	ldr	r2, [r7, #16]
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	d207      	bcs.n	800cdd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800cdc8:	f00e fe92 	bl	801baf0 <__errno>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	220c      	movs	r2, #12
 800cdd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800cdd2:	f04f 33ff 	mov.w	r3, #4294967295
 800cdd6:	e009      	b.n	800cdec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800cdd8:	4b08      	ldr	r3, [pc, #32]	; (800cdfc <_sbrk+0x64>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800cdde:	4b07      	ldr	r3, [pc, #28]	; (800cdfc <_sbrk+0x64>)
 800cde0:	681a      	ldr	r2, [r3, #0]
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	4413      	add	r3, r2
 800cde6:	4a05      	ldr	r2, [pc, #20]	; (800cdfc <_sbrk+0x64>)
 800cde8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800cdea:	68fb      	ldr	r3, [r7, #12]
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3718      	adds	r7, #24
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}
 800cdf4:	20030000 	.word	0x20030000
 800cdf8:	00000400 	.word	0x00000400
 800cdfc:	200006f4 	.word	0x200006f4
 800ce00:	20000d40 	.word	0x20000d40

0800ce04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ce04:	b480      	push	{r7}
 800ce06:	af00      	add	r7, sp, #0


  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800ce08:	4b24      	ldr	r3, [pc, #144]	; (800ce9c <SystemInit+0x98>)
 800ce0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce0e:	4a23      	ldr	r2, [pc, #140]	; (800ce9c <SystemInit+0x98>)
 800ce10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ce14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800ce18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ce22:	f043 0301 	orr.w	r3, r3, #1
 800ce26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800ce28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ce2c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800ce30:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800ce32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ce36:	681a      	ldr	r2, [r3, #0]
 800ce38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ce3c:	4b18      	ldr	r3, [pc, #96]	; (800cea0 <SystemInit+0x9c>)
 800ce3e:	4013      	ands	r3, r2
 800ce40:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800ce42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ce46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ce4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ce4e:	f023 0305 	bic.w	r3, r3, #5
 800ce52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800ce56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ce5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ce5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ce62:	f023 0301 	bic.w	r3, r3, #1
 800ce66:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800ce6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ce6e:	4a0d      	ldr	r2, [pc, #52]	; (800cea4 <SystemInit+0xa0>)
 800ce70:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800ce72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ce76:	4a0b      	ldr	r2, [pc, #44]	; (800cea4 <SystemInit+0xa0>)
 800ce78:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800ce7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ce84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ce88:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800ce8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ce8e:	2200      	movs	r2, #0
 800ce90:	619a      	str	r2, [r3, #24]
}
 800ce92:	bf00      	nop
 800ce94:	46bd      	mov	sp, r7
 800ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9a:	4770      	bx	lr
 800ce9c:	e000ed00 	.word	0xe000ed00
 800cea0:	faf6fefb 	.word	0xfaf6fefb
 800cea4:	22041000 	.word	0x22041000

0800cea8 <LL_AHB2_GRP1_EnableClock>:
{
 800cea8:	b480      	push	{r7}
 800ceaa:	b085      	sub	sp, #20
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800ceb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ceb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ceb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	4313      	orrs	r3, r2
 800cebe:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800cec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cec4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	4013      	ands	r3, r2
 800ceca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800cecc:	68fb      	ldr	r3, [r7, #12]
}
 800cece:	bf00      	nop
 800ced0:	3714      	adds	r7, #20
 800ced2:	46bd      	mov	sp, r7
 800ced4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced8:	4770      	bx	lr

0800ceda <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800ceda:	b480      	push	{r7}
 800cedc:	b085      	sub	sp, #20
 800cede:	af00      	add	r7, sp, #0
 800cee0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800cee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cee6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cee8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	4313      	orrs	r3, r2
 800cef0:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800cef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cef6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	4013      	ands	r3, r2
 800cefc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800cefe:	68fb      	ldr	r3, [r7, #12]
}
 800cf00:	bf00      	nop
 800cf02:	3714      	adds	r7, #20
 800cf04:	46bd      	mov	sp, r7
 800cf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0a:	4770      	bx	lr

0800cf0c <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800cf10:	4b22      	ldr	r3, [pc, #136]	; (800cf9c <MX_LPUART1_UART_Init+0x90>)
 800cf12:	4a23      	ldr	r2, [pc, #140]	; (800cfa0 <MX_LPUART1_UART_Init+0x94>)
 800cf14:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 800cf16:	4b21      	ldr	r3, [pc, #132]	; (800cf9c <MX_LPUART1_UART_Init+0x90>)
 800cf18:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800cf1c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800cf1e:	4b1f      	ldr	r3, [pc, #124]	; (800cf9c <MX_LPUART1_UART_Init+0x90>)
 800cf20:	2200      	movs	r2, #0
 800cf22:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800cf24:	4b1d      	ldr	r3, [pc, #116]	; (800cf9c <MX_LPUART1_UART_Init+0x90>)
 800cf26:	2200      	movs	r2, #0
 800cf28:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800cf2a:	4b1c      	ldr	r3, [pc, #112]	; (800cf9c <MX_LPUART1_UART_Init+0x90>)
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800cf30:	4b1a      	ldr	r3, [pc, #104]	; (800cf9c <MX_LPUART1_UART_Init+0x90>)
 800cf32:	220c      	movs	r2, #12
 800cf34:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cf36:	4b19      	ldr	r3, [pc, #100]	; (800cf9c <MX_LPUART1_UART_Init+0x90>)
 800cf38:	2200      	movs	r2, #0
 800cf3a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800cf3c:	4b17      	ldr	r3, [pc, #92]	; (800cf9c <MX_LPUART1_UART_Init+0x90>)
 800cf3e:	2200      	movs	r2, #0
 800cf40:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800cf42:	4b16      	ldr	r3, [pc, #88]	; (800cf9c <MX_LPUART1_UART_Init+0x90>)
 800cf44:	2200      	movs	r2, #0
 800cf46:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800cf48:	4b14      	ldr	r3, [pc, #80]	; (800cf9c <MX_LPUART1_UART_Init+0x90>)
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800cf4e:	4b13      	ldr	r3, [pc, #76]	; (800cf9c <MX_LPUART1_UART_Init+0x90>)
 800cf50:	2200      	movs	r2, #0
 800cf52:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800cf54:	4811      	ldr	r0, [pc, #68]	; (800cf9c <MX_LPUART1_UART_Init+0x90>)
 800cf56:	f007 f807 	bl	8013f68 <HAL_UART_Init>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d001      	beq.n	800cf64 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800cf60:	f7ff fa76 	bl	800c450 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800cf64:	2100      	movs	r1, #0
 800cf66:	480d      	ldr	r0, [pc, #52]	; (800cf9c <MX_LPUART1_UART_Init+0x90>)
 800cf68:	f007 fe24 	bl	8014bb4 <HAL_UARTEx_SetTxFifoThreshold>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d001      	beq.n	800cf76 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800cf72:	f7ff fa6d 	bl	800c450 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800cf76:	2100      	movs	r1, #0
 800cf78:	4808      	ldr	r0, [pc, #32]	; (800cf9c <MX_LPUART1_UART_Init+0x90>)
 800cf7a:	f007 fe59 	bl	8014c30 <HAL_UARTEx_SetRxFifoThreshold>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d001      	beq.n	800cf88 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800cf84:	f7ff fa64 	bl	800c450 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800cf88:	4804      	ldr	r0, [pc, #16]	; (800cf9c <MX_LPUART1_UART_Init+0x90>)
 800cf8a:	f007 fdda 	bl	8014b42 <HAL_UARTEx_DisableFifoMode>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d001      	beq.n	800cf98 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800cf94:	f7ff fa5c 	bl	800c450 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800cf98:	bf00      	nop
 800cf9a:	bd80      	pop	{r7, pc}
 800cf9c:	200006f8 	.word	0x200006f8
 800cfa0:	40008000 	.word	0x40008000

0800cfa4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b09c      	sub	sp, #112	; 0x70
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cfac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	601a      	str	r2, [r3, #0]
 800cfb4:	605a      	str	r2, [r3, #4]
 800cfb6:	609a      	str	r2, [r3, #8]
 800cfb8:	60da      	str	r2, [r3, #12]
 800cfba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800cfbc:	f107 030c 	add.w	r3, r7, #12
 800cfc0:	2250      	movs	r2, #80	; 0x50
 800cfc2:	2100      	movs	r1, #0
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	f00e fd41 	bl	801ba4c <memset>
  if(uartHandle->Instance==LPUART1)
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	4a1f      	ldr	r2, [pc, #124]	; (800d04c <HAL_UART_MspInit+0xa8>)
 800cfd0:	4293      	cmp	r3, r2
 800cfd2:	d136      	bne.n	800d042 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800cfd4:	2302      	movs	r3, #2
 800cfd6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800cfdc:	f107 030c 	add.w	r3, r7, #12
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f005 ffea 	bl	8012fba <HAL_RCCEx_PeriphCLKConfig>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d001      	beq.n	800cff0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800cfec:	f7ff fa30 	bl	800c450 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800cff0:	2001      	movs	r0, #1
 800cff2:	f7ff ff72 	bl	800ceda <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cff6:	2004      	movs	r0, #4
 800cff8:	f7ff ff56 	bl	800cea8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cffc:	2002      	movs	r0, #2
 800cffe:	f7ff ff53 	bl	800cea8 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PB5     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800d002:	2301      	movs	r3, #1
 800d004:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d006:	2302      	movs	r3, #2
 800d008:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d00a:	2300      	movs	r3, #0
 800d00c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d00e:	2300      	movs	r3, #0
 800d010:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800d012:	2308      	movs	r3, #8
 800d014:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d016:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800d01a:	4619      	mov	r1, r3
 800d01c:	480c      	ldr	r0, [pc, #48]	; (800d050 <HAL_UART_MspInit+0xac>)
 800d01e:	f002 fafd 	bl	800f61c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800d022:	2320      	movs	r3, #32
 800d024:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d026:	2302      	movs	r3, #2
 800d028:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d02a:	2300      	movs	r3, #0
 800d02c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d02e:	2300      	movs	r3, #0
 800d030:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800d032:	2308      	movs	r3, #8
 800d034:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d036:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800d03a:	4619      	mov	r1, r3
 800d03c:	4805      	ldr	r0, [pc, #20]	; (800d054 <HAL_UART_MspInit+0xb0>)
 800d03e:	f002 faed 	bl	800f61c <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800d042:	bf00      	nop
 800d044:	3770      	adds	r7, #112	; 0x70
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}
 800d04a:	bf00      	nop
 800d04c:	40008000 	.word	0x40008000
 800d050:	48000800 	.word	0x48000800
 800d054:	48000400 	.word	0x48000400

0800d058 <zmod4xxx_read_status>:
 */

#include "zmod4xxx.h"

zmod4xxx_err zmod4xxx_read_status(zmod4xxx_dev_t *dev, uint8_t *status)
{
 800d058:	b590      	push	{r4, r7, lr}
 800d05a:	b085      	sub	sp, #20
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
 800d060:	6039      	str	r1, [r7, #0]
    int8_t ret;
    uint8_t st;

    ret = dev->read(dev->i2c_addr, ZMOD4XXX_ADDR_STATUS, &st, 1);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	695c      	ldr	r4, [r3, #20]
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	7818      	ldrb	r0, [r3, #0]
 800d06a:	f107 020e 	add.w	r2, r7, #14
 800d06e:	2301      	movs	r3, #1
 800d070:	2194      	movs	r1, #148	; 0x94
 800d072:	47a0      	blx	r4
 800d074:	4603      	mov	r3, r0
 800d076:	73fb      	strb	r3, [r7, #15]
    if (0 != ret) {
 800d078:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d002      	beq.n	800d086 <zmod4xxx_read_status+0x2e>
        return ERROR_I2C;
 800d080:	f06f 0302 	mvn.w	r3, #2
 800d084:	e003      	b.n	800d08e <zmod4xxx_read_status+0x36>
    }
    *status = st;
 800d086:	7bba      	ldrb	r2, [r7, #14]
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	701a      	strb	r2, [r3, #0]
    return ZMOD4XXX_OK;
 800d08c:	2300      	movs	r3, #0
}
 800d08e:	4618      	mov	r0, r3
 800d090:	3714      	adds	r7, #20
 800d092:	46bd      	mov	sp, r7
 800d094:	bd90      	pop	{r4, r7, pc}

0800d096 <zmod4xxx_check_error_event>:

zmod4xxx_err zmod4xxx_check_error_event(zmod4xxx_dev_t *dev)
{
 800d096:	b590      	push	{r4, r7, lr}
 800d098:	b085      	sub	sp, #20
 800d09a:	af00      	add	r7, sp, #0
 800d09c:	6078      	str	r0, [r7, #4]
    int8_t ret;
    uint8_t data_buf;

    ret = dev->read(dev->i2c_addr, 0xB7, &data_buf, 1);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	695c      	ldr	r4, [r3, #20]
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	7818      	ldrb	r0, [r3, #0]
 800d0a6:	f107 020e 	add.w	r2, r7, #14
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	21b7      	movs	r1, #183	; 0xb7
 800d0ae:	47a0      	blx	r4
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	73fb      	strb	r3, [r7, #15]
    if (ret) {
 800d0b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d002      	beq.n	800d0c2 <zmod4xxx_check_error_event+0x2c>
        return ERROR_I2C;
 800d0bc:	f06f 0302 	mvn.w	r3, #2
 800d0c0:	e013      	b.n	800d0ea <zmod4xxx_check_error_event+0x54>
    }

    if (0 != data_buf) {
 800d0c2:	7bbb      	ldrb	r3, [r7, #14]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d00f      	beq.n	800d0e8 <zmod4xxx_check_error_event+0x52>
        if (STATUS_POR_EVENT_MASK & data_buf) {
 800d0c8:	7bbb      	ldrb	r3, [r7, #14]
 800d0ca:	b25b      	sxtb	r3, r3
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	da02      	bge.n	800d0d6 <zmod4xxx_check_error_event+0x40>
            return ERROR_POR_EVENT;
 800d0d0:	f06f 0306 	mvn.w	r3, #6
 800d0d4:	e009      	b.n	800d0ea <zmod4xxx_check_error_event+0x54>
        } else if (STATUS_ACCESS_CONFLICT_MASK & data_buf) {
 800d0d6:	7bbb      	ldrb	r3, [r7, #14]
 800d0d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0dc:	b2db      	uxtb	r3, r3
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d002      	beq.n	800d0e8 <zmod4xxx_check_error_event+0x52>
            return ERROR_ACCESS_CONFLICT;
 800d0e2:	f06f 0305 	mvn.w	r3, #5
 800d0e6:	e000      	b.n	800d0ea <zmod4xxx_check_error_event+0x54>
        }
    }
    return ZMOD4XXX_OK;
 800d0e8:	2300      	movs	r3, #0
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3714      	adds	r7, #20
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd90      	pop	{r4, r7, pc}

0800d0f2 <zmod4xxx_null_ptr_check>:

zmod4xxx_err zmod4xxx_null_ptr_check(zmod4xxx_dev_t *dev)
{
 800d0f2:	b480      	push	{r7}
 800d0f4:	b085      	sub	sp, #20
 800d0f6:	af00      	add	r7, sp, #0
 800d0f8:	6078      	str	r0, [r7, #4]
    zmod4xxx_err ret;

    if ((dev->read == NULL) || (dev->write == NULL) ||
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	695b      	ldr	r3, [r3, #20]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d007      	beq.n	800d112 <zmod4xxx_null_ptr_check+0x20>
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	699b      	ldr	r3, [r3, #24]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d003      	beq.n	800d112 <zmod4xxx_null_ptr_check+0x20>
        (dev->delay_ms == NULL)) {
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	69db      	ldr	r3, [r3, #28]
    if ((dev->read == NULL) || (dev->write == NULL) ||
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d102      	bne.n	800d118 <zmod4xxx_null_ptr_check+0x26>
        ret = ERROR_NULL_PTR;
 800d112:	23f7      	movs	r3, #247	; 0xf7
 800d114:	73fb      	strb	r3, [r7, #15]
 800d116:	e001      	b.n	800d11c <zmod4xxx_null_ptr_check+0x2a>
    } else {
        ret = ZMOD4XXX_OK;
 800d118:	2300      	movs	r3, #0
 800d11a:	73fb      	strb	r3, [r7, #15]
    }
    return ret;
 800d11c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d120:	4618      	mov	r0, r3
 800d122:	3714      	adds	r7, #20
 800d124:	46bd      	mov	sp, r7
 800d126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12a:	4770      	bx	lr

0800d12c <zmod4xxx_read_sensor_info>:

zmod4xxx_err zmod4xxx_read_sensor_info(zmod4xxx_dev_t *dev)
{
 800d12c:	b590      	push	{r4, r7, lr}
 800d12e:	b087      	sub	sp, #28
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
    int8_t i2c_ret;
    zmod4xxx_err api_ret;
    uint8_t status = 0;
 800d134:	2300      	movs	r3, #0
 800d136:	747b      	strb	r3, [r7, #17]
    uint8_t data_buf[ZMOD4XXX_LEN_PID];
    uint16_t product_id;
    uint8_t cmd = 0;
 800d138:	2300      	movs	r3, #0
 800d13a:	72fb      	strb	r3, [r7, #11]
    uint16_t i = 0;
 800d13c:	2300      	movs	r3, #0
 800d13e:	82fb      	strh	r3, [r7, #22]

    api_ret = zmod4xxx_null_ptr_check(dev);
 800d140:	6878      	ldr	r0, [r7, #4]
 800d142:	f7ff ffd6 	bl	800d0f2 <zmod4xxx_null_ptr_check>
 800d146:	4603      	mov	r3, r0
 800d148:	757b      	strb	r3, [r7, #21]
    if (api_ret) {
 800d14a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d002      	beq.n	800d158 <zmod4xxx_read_sensor_info+0x2c>
        return api_ret;
 800d152:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800d156:	e080      	b.n	800d25a <zmod4xxx_read_sensor_info+0x12e>
    }

    do {
        i2c_ret = dev->write(dev->i2c_addr, ZMOD4XXX_ADDR_CMD, &cmd, 1);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	699c      	ldr	r4, [r3, #24]
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	7818      	ldrb	r0, [r3, #0]
 800d160:	f107 020b 	add.w	r2, r7, #11
 800d164:	2301      	movs	r3, #1
 800d166:	2193      	movs	r1, #147	; 0x93
 800d168:	47a0      	blx	r4
 800d16a:	4603      	mov	r3, r0
 800d16c:	753b      	strb	r3, [r7, #20]
        if (i2c_ret) {
 800d16e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d002      	beq.n	800d17c <zmod4xxx_read_sensor_info+0x50>
            return ERROR_I2C;
 800d176:	f06f 0302 	mvn.w	r3, #2
 800d17a:	e06e      	b.n	800d25a <zmod4xxx_read_sensor_info+0x12e>
        }
        api_ret = zmod4xxx_read_status(dev, &status);
 800d17c:	f107 0311 	add.w	r3, r7, #17
 800d180:	4619      	mov	r1, r3
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f7ff ff68 	bl	800d058 <zmod4xxx_read_status>
 800d188:	4603      	mov	r3, r0
 800d18a:	757b      	strb	r3, [r7, #21]
        if (api_ret) {
 800d18c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d002      	beq.n	800d19a <zmod4xxx_read_sensor_info+0x6e>
            return api_ret;
 800d194:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800d198:	e05f      	b.n	800d25a <zmod4xxx_read_sensor_info+0x12e>
        }
        i++;
 800d19a:	8afb      	ldrh	r3, [r7, #22]
 800d19c:	3301      	adds	r3, #1
 800d19e:	82fb      	strh	r3, [r7, #22]
        dev->delay_ms(200);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	69db      	ldr	r3, [r3, #28]
 800d1a4:	20c8      	movs	r0, #200	; 0xc8
 800d1a6:	4798      	blx	r3
    } while ((0x00 != (status & 0x80)) && (i < 1000));
 800d1a8:	7c7b      	ldrb	r3, [r7, #17]
 800d1aa:	b25b      	sxtb	r3, r3
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	da03      	bge.n	800d1b8 <zmod4xxx_read_sensor_info+0x8c>
 800d1b0:	8afb      	ldrh	r3, [r7, #22]
 800d1b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d1b6:	d3cf      	bcc.n	800d158 <zmod4xxx_read_sensor_info+0x2c>

    if (1000 <= i) {
 800d1b8:	8afb      	ldrh	r3, [r7, #22]
 800d1ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d1be:	d302      	bcc.n	800d1c6 <zmod4xxx_read_sensor_info+0x9a>
        return ERROR_GAS_TIMEOUT;
 800d1c0:	f06f 0301 	mvn.w	r3, #1
 800d1c4:	e049      	b.n	800d25a <zmod4xxx_read_sensor_info+0x12e>
    }

    i2c_ret =
        dev->read(dev->i2c_addr, ZMOD4XXX_ADDR_PID, data_buf, ZMOD4XXX_LEN_PID);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	695c      	ldr	r4, [r3, #20]
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	7818      	ldrb	r0, [r3, #0]
 800d1ce:	f107 020c 	add.w	r2, r7, #12
 800d1d2:	2302      	movs	r3, #2
 800d1d4:	2100      	movs	r1, #0
 800d1d6:	47a0      	blx	r4
 800d1d8:	4603      	mov	r3, r0
 800d1da:	753b      	strb	r3, [r7, #20]
    if (i2c_ret) {
 800d1dc:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d002      	beq.n	800d1ea <zmod4xxx_read_sensor_info+0xbe>
        return ERROR_I2C;
 800d1e4:	f06f 0302 	mvn.w	r3, #2
 800d1e8:	e037      	b.n	800d25a <zmod4xxx_read_sensor_info+0x12e>
    }
    product_id = ((data_buf[0] * 256) + data_buf[1]);
 800d1ea:	7b3b      	ldrb	r3, [r7, #12]
 800d1ec:	b29b      	uxth	r3, r3
 800d1ee:	021b      	lsls	r3, r3, #8
 800d1f0:	b29a      	uxth	r2, r3
 800d1f2:	7b7b      	ldrb	r3, [r7, #13]
 800d1f4:	b29b      	uxth	r3, r3
 800d1f6:	4413      	add	r3, r2
 800d1f8:	827b      	strh	r3, [r7, #18]

    if (dev->pid != product_id) {
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	899b      	ldrh	r3, [r3, #12]
 800d1fe:	8a7a      	ldrh	r2, [r7, #18]
 800d200:	429a      	cmp	r2, r3
 800d202:	d002      	beq.n	800d20a <zmod4xxx_read_sensor_info+0xde>
        return ERROR_SENSOR_UNSUPPORTED;
 800d204:	f06f 0303 	mvn.w	r3, #3
 800d208:	e027      	b.n	800d25a <zmod4xxx_read_sensor_info+0x12e>
    }

    i2c_ret = dev->read(dev->i2c_addr, ZMOD4XXX_ADDR_CONF, dev->config,
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	695c      	ldr	r4, [r3, #20]
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	7818      	ldrb	r0, [r3, #0]
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	1c5a      	adds	r2, r3, #1
 800d216:	2306      	movs	r3, #6
 800d218:	2120      	movs	r1, #32
 800d21a:	47a0      	blx	r4
 800d21c:	4603      	mov	r3, r0
 800d21e:	753b      	strb	r3, [r7, #20]
                        ZMOD4XXX_LEN_CONF);
    if (i2c_ret) {
 800d220:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d002      	beq.n	800d22e <zmod4xxx_read_sensor_info+0x102>
        return ERROR_I2C;
 800d228:	f06f 0302 	mvn.w	r3, #2
 800d22c:	e015      	b.n	800d25a <zmod4xxx_read_sensor_info+0x12e>
    }

    i2c_ret = dev->read(dev->i2c_addr, ZMOD4XXX_ADDR_PROD_DATA, dev->prod_data,
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	695c      	ldr	r4, [r3, #20]
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	7818      	ldrb	r0, [r3, #0]
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	691a      	ldr	r2, [r3, #16]
                        dev->meas_conf->prod_data_len);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    i2c_ret = dev->read(dev->i2c_addr, ZMOD4XXX_ADDR_PROD_DATA, dev->prod_data,
 800d23e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d242:	2126      	movs	r1, #38	; 0x26
 800d244:	47a0      	blx	r4
 800d246:	4603      	mov	r3, r0
 800d248:	753b      	strb	r3, [r7, #20]
    if (i2c_ret) {
 800d24a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d002      	beq.n	800d258 <zmod4xxx_read_sensor_info+0x12c>
        return ERROR_I2C;
 800d252:	f06f 0302 	mvn.w	r3, #2
 800d256:	e000      	b.n	800d25a <zmod4xxx_read_sensor_info+0x12e>
    }
    return ZMOD4XXX_OK;
 800d258:	2300      	movs	r3, #0
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	371c      	adds	r7, #28
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd90      	pop	{r4, r7, pc}

0800d262 <zmod4xxx_read_tracking_number>:

zmod4xxx_err zmod4xxx_read_tracking_number(zmod4xxx_dev_t *dev,
                                           uint8_t *track_num)
{
 800d262:	b590      	push	{r4, r7, lr}
 800d264:	b085      	sub	sp, #20
 800d266:	af00      	add	r7, sp, #0
 800d268:	6078      	str	r0, [r7, #4]
 800d26a:	6039      	str	r1, [r7, #0]
    int8_t ret;

    ret = dev->read(dev->i2c_addr, ZMOD4XXX_ADDR_TRACKING, track_num,
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	695c      	ldr	r4, [r3, #20]
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	7818      	ldrb	r0, [r3, #0]
 800d274:	2306      	movs	r3, #6
 800d276:	683a      	ldr	r2, [r7, #0]
 800d278:	213a      	movs	r1, #58	; 0x3a
 800d27a:	47a0      	blx	r4
 800d27c:	4603      	mov	r3, r0
 800d27e:	73fb      	strb	r3, [r7, #15]
                    ZMOD4XXX_LEN_TRACKING);
    if (ret) {
 800d280:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d002      	beq.n	800d28e <zmod4xxx_read_tracking_number+0x2c>
        return ERROR_I2C;
 800d288:	f06f 0302 	mvn.w	r3, #2
 800d28c:	e000      	b.n	800d290 <zmod4xxx_read_tracking_number+0x2e>
    }
    return ZMOD4XXX_OK;
 800d28e:	2300      	movs	r3, #0
}
 800d290:	4618      	mov	r0, r3
 800d292:	3714      	adds	r7, #20
 800d294:	46bd      	mov	sp, r7
 800d296:	bd90      	pop	{r4, r7, pc}

0800d298 <zmod4xxx_calc_factor>:

zmod4xxx_err zmod4xxx_calc_factor(zmod4xxx_conf *conf, uint8_t *hsp,
                                  uint8_t *config)
{
 800d298:	b480      	push	{r7}
 800d29a:	b08b      	sub	sp, #44	; 0x2c
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	60f8      	str	r0, [r7, #12]
 800d2a0:	60b9      	str	r1, [r7, #8]
 800d2a2:	607a      	str	r2, [r7, #4]
    int16_t hsp_temp[HSP_MAX];
    float hspf;
    uint8_t i;

    for (i = 0; i < conf->h.len; i = i + 2) {
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d2aa:	e07f      	b.n	800d3ac <zmod4xxx_calc_factor+0x114>
        hsp_temp[i / 2] =
            ((conf->h.data_buf[i] << 8) + conf->h.data_buf[i + 1]);
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	689a      	ldr	r2, [r3, #8]
 800d2b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2b4:	4413      	add	r3, r2
 800d2b6:	781b      	ldrb	r3, [r3, #0]
 800d2b8:	b29b      	uxth	r3, r3
 800d2ba:	021b      	lsls	r3, r3, #8
 800d2bc:	b29a      	uxth	r2, r3
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	6899      	ldr	r1, [r3, #8]
 800d2c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2c6:	3301      	adds	r3, #1
 800d2c8:	440b      	add	r3, r1
 800d2ca:	781b      	ldrb	r3, [r3, #0]
 800d2cc:	b29b      	uxth	r3, r3
 800d2ce:	4413      	add	r3, r2
 800d2d0:	b29a      	uxth	r2, r3
        hsp_temp[i / 2] =
 800d2d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2d6:	085b      	lsrs	r3, r3, #1
 800d2d8:	b2db      	uxtb	r3, r3
            ((conf->h.data_buf[i] << 8) + conf->h.data_buf[i + 1]);
 800d2da:	b212      	sxth	r2, r2
        hsp_temp[i / 2] =
 800d2dc:	005b      	lsls	r3, r3, #1
 800d2de:	3328      	adds	r3, #40	; 0x28
 800d2e0:	443b      	add	r3, r7
 800d2e2:	f823 2c18 	strh.w	r2, [r3, #-24]
        hspf = (-((float)config[2] * 256.0F + config[3]) *
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	3302      	adds	r3, #2
 800d2ea:	781b      	ldrb	r3, [r3, #0]
 800d2ec:	ee07 3a90 	vmov	s15, r3
 800d2f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2f4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800d3c8 <zmod4xxx_calc_factor+0x130>
 800d2f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	3303      	adds	r3, #3
 800d300:	781b      	ldrb	r3, [r3, #0]
 800d302:	ee07 3a90 	vmov	s15, r3
 800d306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d30a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d30e:	eeb1 7a67 	vneg.f32	s14, s15
                ((config[4] + 640.0F) * (config[5] + hsp_temp[i / 2]) -
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	3304      	adds	r3, #4
 800d316:	781b      	ldrb	r3, [r3, #0]
 800d318:	ee07 3a90 	vmov	s15, r3
 800d31c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d320:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800d3cc <zmod4xxx_calc_factor+0x134>
 800d324:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	3305      	adds	r3, #5
 800d32c:	781b      	ldrb	r3, [r3, #0]
 800d32e:	461a      	mov	r2, r3
 800d330:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d334:	085b      	lsrs	r3, r3, #1
 800d336:	b2db      	uxtb	r3, r3
 800d338:	005b      	lsls	r3, r3, #1
 800d33a:	3328      	adds	r3, #40	; 0x28
 800d33c:	443b      	add	r3, r7
 800d33e:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800d342:	4413      	add	r3, r2
 800d344:	ee07 3a90 	vmov	s15, r3
 800d348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d34c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d350:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800d3d0 <zmod4xxx_calc_factor+0x138>
 800d354:	ee77 7ae6 	vsub.f32	s15, s15, s13
        hspf = (-((float)config[2] * 256.0F + config[3]) *
 800d358:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d35c:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800d3d4 <zmod4xxx_calc_factor+0x13c>
 800d360:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d364:	edc7 7a08 	vstr	s15, [r7, #32]
                 512000.0F)) /
               12288000.0F;

        hsp[i] = (uint8_t)((uint16_t)hspf >> 8);
 800d368:	edd7 7a08 	vldr	s15, [r7, #32]
 800d36c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d370:	ee17 3a90 	vmov	r3, s15
 800d374:	b29b      	uxth	r3, r3
 800d376:	0a1b      	lsrs	r3, r3, #8
 800d378:	b299      	uxth	r1, r3
 800d37a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d37e:	68ba      	ldr	r2, [r7, #8]
 800d380:	4413      	add	r3, r2
 800d382:	b2ca      	uxtb	r2, r1
 800d384:	701a      	strb	r2, [r3, #0]
        hsp[i + 1] = (uint8_t)((uint16_t)hspf & 0x00FF);
 800d386:	edd7 7a08 	vldr	s15, [r7, #32]
 800d38a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d38e:	ee17 3a90 	vmov	r3, s15
 800d392:	b299      	uxth	r1, r3
 800d394:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d398:	3301      	adds	r3, #1
 800d39a:	68ba      	ldr	r2, [r7, #8]
 800d39c:	4413      	add	r3, r2
 800d39e:	b2ca      	uxtb	r2, r1
 800d3a0:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < conf->h.len; i = i + 2) {
 800d3a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d3a6:	3302      	adds	r3, #2
 800d3a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	795b      	ldrb	r3, [r3, #5]
 800d3b0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d3b4:	429a      	cmp	r2, r3
 800d3b6:	f4ff af79 	bcc.w	800d2ac <zmod4xxx_calc_factor+0x14>
    }
    return ZMOD4XXX_OK;
 800d3ba:	2300      	movs	r3, #0
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	372c      	adds	r7, #44	; 0x2c
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c6:	4770      	bx	lr
 800d3c8:	43800000 	.word	0x43800000
 800d3cc:	44200000 	.word	0x44200000
 800d3d0:	48fa0000 	.word	0x48fa0000
 800d3d4:	4b3b8000 	.word	0x4b3b8000

0800d3d8 <zmod4xxx_init_sensor>:

zmod4xxx_err zmod4xxx_init_sensor(zmod4xxx_dev_t *dev)
{
 800d3d8:	b590      	push	{r4, r7, lr}
 800d3da:	b091      	sub	sp, #68	; 0x44
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
    zmod4xxx_err api_ret;
    uint8_t hsp[HSP_MAX * 2];
    uint8_t data_r[RSLT_MAX];
    uint8_t zmod4xxx_status;

    i2c_ret = dev->read(dev->i2c_addr, 0xB7, data_r, 1);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	695c      	ldr	r4, [r3, #20]
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	7818      	ldrb	r0, [r3, #0]
 800d3e8:	f107 020c 	add.w	r2, r7, #12
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	21b7      	movs	r1, #183	; 0xb7
 800d3f0:	47a0      	blx	r4
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (i2c_ret) {
 800d3f8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d002      	beq.n	800d406 <zmod4xxx_init_sensor+0x2e>
        return ERROR_I2C;
 800d400:	f06f 0302 	mvn.w	r3, #2
 800d404:	e0cb      	b.n	800d59e <zmod4xxx_init_sensor+0x1c6>
    }

    api_ret = zmod4xxx_calc_factor(dev->init_conf, hsp, dev->config);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6a18      	ldr	r0, [r3, #32]
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	1c5a      	adds	r2, r3, #1
 800d40e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d412:	4619      	mov	r1, r3
 800d414:	f7ff ff40 	bl	800d298 <zmod4xxx_calc_factor>
 800d418:	4603      	mov	r3, r0
 800d41a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    if (api_ret) {
 800d41e:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 800d422:	2b00      	cmp	r3, #0
 800d424:	d002      	beq.n	800d42c <zmod4xxx_init_sensor+0x54>
        return api_ret;
 800d426:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 800d42a:	e0b8      	b.n	800d59e <zmod4xxx_init_sensor+0x1c6>
    }

    i2c_ret = dev->write(dev->i2c_addr, dev->init_conf->h.addr, hsp,
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	699c      	ldr	r4, [r3, #24]
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	7818      	ldrb	r0, [r3, #0]
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6a1b      	ldr	r3, [r3, #32]
 800d438:	7919      	ldrb	r1, [r3, #4]
                         dev->init_conf->h.len);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6a1b      	ldr	r3, [r3, #32]
    i2c_ret = dev->write(dev->i2c_addr, dev->init_conf->h.addr, hsp,
 800d43e:	795b      	ldrb	r3, [r3, #5]
 800d440:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800d444:	47a0      	blx	r4
 800d446:	4603      	mov	r3, r0
 800d448:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (i2c_ret) {
 800d44c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d450:	2b00      	cmp	r3, #0
 800d452:	d002      	beq.n	800d45a <zmod4xxx_init_sensor+0x82>
        return ERROR_I2C;
 800d454:	f06f 0302 	mvn.w	r3, #2
 800d458:	e0a1      	b.n	800d59e <zmod4xxx_init_sensor+0x1c6>
    }
    i2c_ret = dev->write(dev->i2c_addr, dev->init_conf->d.addr,
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	699c      	ldr	r4, [r3, #24]
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	7818      	ldrb	r0, [r3, #0]
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6a1b      	ldr	r3, [r3, #32]
 800d466:	7b19      	ldrb	r1, [r3, #12]
                         dev->init_conf->d.data_buf, dev->init_conf->d.len);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6a1b      	ldr	r3, [r3, #32]
    i2c_ret = dev->write(dev->i2c_addr, dev->init_conf->d.addr,
 800d46c:	691a      	ldr	r2, [r3, #16]
                         dev->init_conf->d.data_buf, dev->init_conf->d.len);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6a1b      	ldr	r3, [r3, #32]
    i2c_ret = dev->write(dev->i2c_addr, dev->init_conf->d.addr,
 800d472:	7b5b      	ldrb	r3, [r3, #13]
 800d474:	47a0      	blx	r4
 800d476:	4603      	mov	r3, r0
 800d478:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (i2c_ret) {
 800d47c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d480:	2b00      	cmp	r3, #0
 800d482:	d002      	beq.n	800d48a <zmod4xxx_init_sensor+0xb2>
        return ERROR_I2C;
 800d484:	f06f 0302 	mvn.w	r3, #2
 800d488:	e089      	b.n	800d59e <zmod4xxx_init_sensor+0x1c6>
    }
    i2c_ret = dev->write(dev->i2c_addr, dev->init_conf->m.addr,
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	699c      	ldr	r4, [r3, #24]
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	7818      	ldrb	r0, [r3, #0]
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6a1b      	ldr	r3, [r3, #32]
 800d496:	7d19      	ldrb	r1, [r3, #20]
                         dev->init_conf->m.data_buf, dev->init_conf->m.len);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	6a1b      	ldr	r3, [r3, #32]
    i2c_ret = dev->write(dev->i2c_addr, dev->init_conf->m.addr,
 800d49c:	699a      	ldr	r2, [r3, #24]
                         dev->init_conf->m.data_buf, dev->init_conf->m.len);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6a1b      	ldr	r3, [r3, #32]
    i2c_ret = dev->write(dev->i2c_addr, dev->init_conf->m.addr,
 800d4a2:	7d5b      	ldrb	r3, [r3, #21]
 800d4a4:	47a0      	blx	r4
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (i2c_ret) {
 800d4ac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d002      	beq.n	800d4ba <zmod4xxx_init_sensor+0xe2>
        return ERROR_I2C;
 800d4b4:	f06f 0302 	mvn.w	r3, #2
 800d4b8:	e071      	b.n	800d59e <zmod4xxx_init_sensor+0x1c6>
    }
    i2c_ret = dev->write(dev->i2c_addr, dev->init_conf->s.addr,
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	699c      	ldr	r4, [r3, #24]
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	7818      	ldrb	r0, [r3, #0]
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6a1b      	ldr	r3, [r3, #32]
 800d4c6:	7f19      	ldrb	r1, [r3, #28]
                         dev->init_conf->s.data_buf, dev->init_conf->s.len);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	6a1b      	ldr	r3, [r3, #32]
    i2c_ret = dev->write(dev->i2c_addr, dev->init_conf->s.addr,
 800d4cc:	6a1a      	ldr	r2, [r3, #32]
                         dev->init_conf->s.data_buf, dev->init_conf->s.len);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	6a1b      	ldr	r3, [r3, #32]
    i2c_ret = dev->write(dev->i2c_addr, dev->init_conf->s.addr,
 800d4d2:	7f5b      	ldrb	r3, [r3, #29]
 800d4d4:	47a0      	blx	r4
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (i2c_ret) {
 800d4dc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d002      	beq.n	800d4ea <zmod4xxx_init_sensor+0x112>
        return ERROR_I2C;
 800d4e4:	f06f 0302 	mvn.w	r3, #2
 800d4e8:	e059      	b.n	800d59e <zmod4xxx_init_sensor+0x1c6>
    }

    i2c_ret =
        dev->write(dev->i2c_addr, ZMOD4XXX_ADDR_CMD, &dev->init_conf->start, 1);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	699c      	ldr	r4, [r3, #24]
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	7818      	ldrb	r0, [r3, #0]
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6a1b      	ldr	r3, [r3, #32]
 800d4f6:	461a      	mov	r2, r3
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	2193      	movs	r1, #147	; 0x93
 800d4fc:	47a0      	blx	r4
 800d4fe:	4603      	mov	r3, r0
 800d500:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (i2c_ret) {
 800d504:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d002      	beq.n	800d512 <zmod4xxx_init_sensor+0x13a>
        return ERROR_I2C;
 800d50c:	f06f 0302 	mvn.w	r3, #2
 800d510:	e045      	b.n	800d59e <zmod4xxx_init_sensor+0x1c6>
    }
    do {
        api_ret = zmod4xxx_read_status(dev, &zmod4xxx_status);
 800d512:	f107 030b 	add.w	r3, r7, #11
 800d516:	4619      	mov	r1, r3
 800d518:	6878      	ldr	r0, [r7, #4]
 800d51a:	f7ff fd9d 	bl	800d058 <zmod4xxx_read_status>
 800d51e:	4603      	mov	r3, r0
 800d520:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        if (api_ret) {
 800d524:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d002      	beq.n	800d532 <zmod4xxx_init_sensor+0x15a>
            return api_ret;
 800d52c:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 800d530:	e035      	b.n	800d59e <zmod4xxx_init_sensor+0x1c6>
        }
        dev->delay_ms(50);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	69db      	ldr	r3, [r3, #28]
 800d536:	2032      	movs	r0, #50	; 0x32
 800d538:	4798      	blx	r3
    } while (zmod4xxx_status & STATUS_SEQUENCER_RUNNING_MASK);
 800d53a:	7afb      	ldrb	r3, [r7, #11]
 800d53c:	b25b      	sxtb	r3, r3
 800d53e:	2b00      	cmp	r3, #0
 800d540:	dbe7      	blt.n	800d512 <zmod4xxx_init_sensor+0x13a>

    i2c_ret = dev->read(dev->i2c_addr, dev->init_conf->r.addr, data_r,
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	695c      	ldr	r4, [r3, #20]
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	7818      	ldrb	r0, [r3, #0]
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	6a1b      	ldr	r3, [r3, #32]
 800d54e:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
                        dev->init_conf->r.len);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6a1b      	ldr	r3, [r3, #32]
    i2c_ret = dev->read(dev->i2c_addr, dev->init_conf->r.addr, data_r,
 800d556:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800d55a:	f107 020c 	add.w	r2, r7, #12
 800d55e:	47a0      	blx	r4
 800d560:	4603      	mov	r3, r0
 800d562:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (i2c_ret) {
 800d566:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d002      	beq.n	800d574 <zmod4xxx_init_sensor+0x19c>
        return ERROR_I2C;
 800d56e:	f06f 0302 	mvn.w	r3, #2
 800d572:	e014      	b.n	800d59e <zmod4xxx_init_sensor+0x1c6>
    }

    dev->mox_lr = (uint16_t)(data_r[0] << 8) | data_r[1];
 800d574:	7b3b      	ldrb	r3, [r7, #12]
 800d576:	b29b      	uxth	r3, r3
 800d578:	021b      	lsls	r3, r3, #8
 800d57a:	b29a      	uxth	r2, r3
 800d57c:	7b7b      	ldrb	r3, [r7, #13]
 800d57e:	b29b      	uxth	r3, r3
 800d580:	4313      	orrs	r3, r2
 800d582:	b29a      	uxth	r2, r3
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	815a      	strh	r2, [r3, #10]
    dev->mox_er = (uint16_t)(data_r[2] << 8) | data_r[3];
 800d588:	7bbb      	ldrb	r3, [r7, #14]
 800d58a:	b29b      	uxth	r3, r3
 800d58c:	021b      	lsls	r3, r3, #8
 800d58e:	b29a      	uxth	r2, r3
 800d590:	7bfb      	ldrb	r3, [r7, #15]
 800d592:	b29b      	uxth	r3, r3
 800d594:	4313      	orrs	r3, r2
 800d596:	b29a      	uxth	r2, r3
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	811a      	strh	r2, [r3, #8]
    return ZMOD4XXX_OK;
 800d59c:	2300      	movs	r3, #0
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3744      	adds	r7, #68	; 0x44
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd90      	pop	{r4, r7, pc}

0800d5a6 <zmod4xxx_init_measurement>:

zmod4xxx_err zmod4xxx_init_measurement(zmod4xxx_dev_t *dev)
{
 800d5a6:	b590      	push	{r4, r7, lr}
 800d5a8:	b089      	sub	sp, #36	; 0x24
 800d5aa:	af00      	add	r7, sp, #0
 800d5ac:	6078      	str	r0, [r7, #4]
    int8_t i2c_ret;
    zmod4xxx_err api_ret;
    uint8_t hsp[HSP_MAX * 2];

    api_ret = zmod4xxx_calc_factor(dev->meas_conf, hsp, dev->config);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	1c5a      	adds	r2, r3, #1
 800d5b6:	f107 030c 	add.w	r3, r7, #12
 800d5ba:	4619      	mov	r1, r3
 800d5bc:	f7ff fe6c 	bl	800d298 <zmod4xxx_calc_factor>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	77fb      	strb	r3, [r7, #31]
    if (api_ret) {
 800d5c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d002      	beq.n	800d5d2 <zmod4xxx_init_measurement+0x2c>
        return api_ret;
 800d5cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d5d0:	e05b      	b.n	800d68a <zmod4xxx_init_measurement+0xe4>
    }

    i2c_ret = dev->write(dev->i2c_addr, dev->meas_conf->h.addr, hsp,
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	699c      	ldr	r4, [r3, #24]
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	7818      	ldrb	r0, [r3, #0]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5de:	7919      	ldrb	r1, [r3, #4]
                         dev->meas_conf->h.len);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    i2c_ret = dev->write(dev->i2c_addr, dev->meas_conf->h.addr, hsp,
 800d5e4:	795b      	ldrb	r3, [r3, #5]
 800d5e6:	f107 020c 	add.w	r2, r7, #12
 800d5ea:	47a0      	blx	r4
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	77bb      	strb	r3, [r7, #30]
    if (i2c_ret) {
 800d5f0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d002      	beq.n	800d5fe <zmod4xxx_init_measurement+0x58>
        return ERROR_I2C;
 800d5f8:	f06f 0302 	mvn.w	r3, #2
 800d5fc:	e045      	b.n	800d68a <zmod4xxx_init_measurement+0xe4>
    }
    i2c_ret = dev->write(dev->i2c_addr, dev->meas_conf->d.addr,
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	699c      	ldr	r4, [r3, #24]
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	7818      	ldrb	r0, [r3, #0]
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d60a:	7b19      	ldrb	r1, [r3, #12]
                         dev->meas_conf->d.data_buf, dev->meas_conf->d.len);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    i2c_ret = dev->write(dev->i2c_addr, dev->meas_conf->d.addr,
 800d610:	691a      	ldr	r2, [r3, #16]
                         dev->meas_conf->d.data_buf, dev->meas_conf->d.len);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    i2c_ret = dev->write(dev->i2c_addr, dev->meas_conf->d.addr,
 800d616:	7b5b      	ldrb	r3, [r3, #13]
 800d618:	47a0      	blx	r4
 800d61a:	4603      	mov	r3, r0
 800d61c:	77bb      	strb	r3, [r7, #30]
    if (i2c_ret) {
 800d61e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d002      	beq.n	800d62c <zmod4xxx_init_measurement+0x86>
        return ERROR_I2C;
 800d626:	f06f 0302 	mvn.w	r3, #2
 800d62a:	e02e      	b.n	800d68a <zmod4xxx_init_measurement+0xe4>
    }
    i2c_ret = dev->write(dev->i2c_addr, dev->meas_conf->m.addr,
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	699c      	ldr	r4, [r3, #24]
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	7818      	ldrb	r0, [r3, #0]
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d638:	7d19      	ldrb	r1, [r3, #20]
                         dev->meas_conf->m.data_buf, dev->meas_conf->m.len);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    i2c_ret = dev->write(dev->i2c_addr, dev->meas_conf->m.addr,
 800d63e:	699a      	ldr	r2, [r3, #24]
                         dev->meas_conf->m.data_buf, dev->meas_conf->m.len);
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    i2c_ret = dev->write(dev->i2c_addr, dev->meas_conf->m.addr,
 800d644:	7d5b      	ldrb	r3, [r3, #21]
 800d646:	47a0      	blx	r4
 800d648:	4603      	mov	r3, r0
 800d64a:	77bb      	strb	r3, [r7, #30]
    if (i2c_ret) {
 800d64c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d002      	beq.n	800d65a <zmod4xxx_init_measurement+0xb4>
        return ERROR_I2C;
 800d654:	f06f 0302 	mvn.w	r3, #2
 800d658:	e017      	b.n	800d68a <zmod4xxx_init_measurement+0xe4>
    }
    i2c_ret = dev->write(dev->i2c_addr, dev->meas_conf->s.addr,
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	699c      	ldr	r4, [r3, #24]
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	7818      	ldrb	r0, [r3, #0]
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d666:	7f19      	ldrb	r1, [r3, #28]
                         dev->meas_conf->s.data_buf, dev->meas_conf->s.len);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    i2c_ret = dev->write(dev->i2c_addr, dev->meas_conf->s.addr,
 800d66c:	6a1a      	ldr	r2, [r3, #32]
                         dev->meas_conf->s.data_buf, dev->meas_conf->s.len);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    i2c_ret = dev->write(dev->i2c_addr, dev->meas_conf->s.addr,
 800d672:	7f5b      	ldrb	r3, [r3, #29]
 800d674:	47a0      	blx	r4
 800d676:	4603      	mov	r3, r0
 800d678:	77bb      	strb	r3, [r7, #30]
    if (i2c_ret) {
 800d67a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d002      	beq.n	800d688 <zmod4xxx_init_measurement+0xe2>
        return ERROR_I2C;
 800d682:	f06f 0302 	mvn.w	r3, #2
 800d686:	e000      	b.n	800d68a <zmod4xxx_init_measurement+0xe4>
    }
    return ZMOD4XXX_OK;
 800d688:	2300      	movs	r3, #0
}
 800d68a:	4618      	mov	r0, r3
 800d68c:	3724      	adds	r7, #36	; 0x24
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd90      	pop	{r4, r7, pc}

0800d692 <zmod4xxx_start_measurement_at>:

zmod4xxx_err zmod4xxx_start_measurement_at(zmod4xxx_dev_t *dev, uint8_t  step)
{
 800d692:	b590      	push	{r4, r7, lr}
 800d694:	b085      	sub	sp, #20
 800d696:	af00      	add	r7, sp, #0
 800d698:	6078      	str	r0, [r7, #4]
 800d69a:	460b      	mov	r3, r1
 800d69c:	70fb      	strb	r3, [r7, #3]
    int8_t ret;

    ret =
        dev->write(dev->i2c_addr, ZMOD4XXX_ADDR_CMD, &step, 1);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	699c      	ldr	r4, [r3, #24]
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	7818      	ldrb	r0, [r3, #0]
 800d6a6:	1cfa      	adds	r2, r7, #3
 800d6a8:	2301      	movs	r3, #1
 800d6aa:	2193      	movs	r1, #147	; 0x93
 800d6ac:	47a0      	blx	r4
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	73fb      	strb	r3, [r7, #15]
    if (ret) {
 800d6b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d002      	beq.n	800d6c0 <zmod4xxx_start_measurement_at+0x2e>
        return ERROR_I2C;
 800d6ba:	f06f 0302 	mvn.w	r3, #2
 800d6be:	e000      	b.n	800d6c2 <zmod4xxx_start_measurement_at+0x30>
    }
    return ZMOD4XXX_OK;
 800d6c0:	2300      	movs	r3, #0
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3714      	adds	r7, #20
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd90      	pop	{r4, r7, pc}

0800d6ca <zmod4xxx_start_measurement>:

zmod4xxx_err zmod4xxx_start_measurement(zmod4xxx_dev_t *dev)
{
 800d6ca:	b580      	push	{r7, lr}
 800d6cc:	b082      	sub	sp, #8
 800d6ce:	af00      	add	r7, sp, #0
 800d6d0:	6078      	str	r0, [r7, #4]
    return zmod4xxx_start_measurement_at ( dev, dev->meas_conf->start );
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6d6:	781b      	ldrb	r3, [r3, #0]
 800d6d8:	4619      	mov	r1, r3
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f7ff ffd9 	bl	800d692 <zmod4xxx_start_measurement_at>
 800d6e0:	4603      	mov	r3, r0
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3708      	adds	r7, #8
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}

0800d6ea <zmod4xxx_read_adc_result>:

zmod4xxx_err zmod4xxx_read_adc_result(zmod4xxx_dev_t *dev, uint8_t *adc_result)
{
 800d6ea:	b590      	push	{r4, r7, lr}
 800d6ec:	b085      	sub	sp, #20
 800d6ee:	af00      	add	r7, sp, #0
 800d6f0:	6078      	str	r0, [r7, #4]
 800d6f2:	6039      	str	r1, [r7, #0]
    int8_t ret;

    ret = dev->read(dev->i2c_addr, dev->meas_conf->r.addr, adc_result,
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	695c      	ldr	r4, [r3, #20]
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	7818      	ldrb	r0, [r3, #0]
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d700:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
                    dev->meas_conf->r.len);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ret = dev->read(dev->i2c_addr, dev->meas_conf->r.addr, adc_result,
 800d708:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800d70c:	683a      	ldr	r2, [r7, #0]
 800d70e:	47a0      	blx	r4
 800d710:	4603      	mov	r3, r0
 800d712:	73fb      	strb	r3, [r7, #15]
    if (ret) {
 800d714:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d002      	beq.n	800d722 <zmod4xxx_read_adc_result+0x38>
        return ERROR_I2C;
 800d71c:	f06f 0302 	mvn.w	r3, #2
 800d720:	e000      	b.n	800d724 <zmod4xxx_read_adc_result+0x3a>
    }

    return ZMOD4XXX_OK;
 800d722:	2300      	movs	r3, #0
}
 800d724:	4618      	mov	r0, r3
 800d726:	3714      	adds	r7, #20
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd90      	pop	{r4, r7, pc}

0800d72c <zmod4xxx_prepare_sensor>:
    }
    return ZMOD4XXX_OK;
}

zmod4xxx_err zmod4xxx_prepare_sensor(zmod4xxx_dev_t *dev)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b084      	sub	sp, #16
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
    zmod4xxx_err ret;

    ret = zmod4xxx_init_sensor(dev);
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f7ff fe4f 	bl	800d3d8 <zmod4xxx_init_sensor>
 800d73a:	4603      	mov	r3, r0
 800d73c:	73fb      	strb	r3, [r7, #15]
    if (ret) {
 800d73e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d002      	beq.n	800d74c <zmod4xxx_prepare_sensor+0x20>
        return ret;
 800d746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d74a:	e010      	b.n	800d76e <zmod4xxx_prepare_sensor+0x42>
    }
    dev->delay_ms(50);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	69db      	ldr	r3, [r3, #28]
 800d750:	2032      	movs	r0, #50	; 0x32
 800d752:	4798      	blx	r3
    ret = zmod4xxx_init_measurement(dev);
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f7ff ff26 	bl	800d5a6 <zmod4xxx_init_measurement>
 800d75a:	4603      	mov	r3, r0
 800d75c:	73fb      	strb	r3, [r7, #15]
    if (ret) {
 800d75e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d002      	beq.n	800d76c <zmod4xxx_prepare_sensor+0x40>
        return ret;
 800d766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d76a:	e000      	b.n	800d76e <zmod4xxx_prepare_sensor+0x42>
    }
    return ZMOD4XXX_OK;
 800d76c:	2300      	movs	r3, #0
}
 800d76e:	4618      	mov	r0, r3
 800d770:	3710      	adds	r7, #16
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}

0800d776 <Delay>:

#include "zmod4xxx_hal.h"
#include "zmod4xxx_types.h"

void Delay(uint8_t ms)
{
 800d776:	b580      	push	{r7, lr}
 800d778:	b082      	sub	sp, #8
 800d77a:	af00      	add	r7, sp, #0
 800d77c:	4603      	mov	r3, r0
 800d77e:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(ms);
 800d780:	79fb      	ldrb	r3, [r7, #7]
 800d782:	4618      	mov	r0, r3
 800d784:	f7fc fe4d 	bl	800a422 <HAL_Delay>
}
 800d788:	bf00      	nop
 800d78a:	3708      	adds	r7, #8
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}

0800d790 <_i2c_read_reg>:

// wrapper function, mapping register read api to generic I2C API
 int8_t
_i2c_read_reg ( uint8_t  slaveAddr, uint8_t  addr, uint8_t*  data, uint8_t  len ) {
 800d790:	b580      	push	{r7, lr}
 800d792:	b086      	sub	sp, #24
 800d794:	af04      	add	r7, sp, #16
 800d796:	603a      	str	r2, [r7, #0]
 800d798:	461a      	mov	r2, r3
 800d79a:	4603      	mov	r3, r0
 800d79c:	71fb      	strb	r3, [r7, #7]
 800d79e:	460b      	mov	r3, r1
 800d7a0:	71bb      	strb	r3, [r7, #6]
 800d7a2:	4613      	mov	r3, r2
 800d7a4:	717b      	strb	r3, [r7, #5]

  if (HAL_I2C_Mem_Read(&hi2c3,slaveAddr, addr,I2C_MEMADD_SIZE_8BIT,data,len,HAL_MAX_DELAY))
 800d7a6:	79fb      	ldrb	r3, [r7, #7]
 800d7a8:	b299      	uxth	r1, r3
 800d7aa:	79bb      	ldrb	r3, [r7, #6]
 800d7ac:	b29a      	uxth	r2, r3
 800d7ae:	797b      	ldrb	r3, [r7, #5]
 800d7b0:	b29b      	uxth	r3, r3
 800d7b2:	f04f 30ff 	mov.w	r0, #4294967295
 800d7b6:	9002      	str	r0, [sp, #8]
 800d7b8:	9301      	str	r3, [sp, #4]
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	9300      	str	r3, [sp, #0]
 800d7be:	2301      	movs	r3, #1
 800d7c0:	4806      	ldr	r0, [pc, #24]	; (800d7dc <_i2c_read_reg+0x4c>)
 800d7c2:	f002 fcc5 	bl	8010150 <HAL_I2C_Mem_Read>
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d002      	beq.n	800d7d2 <_i2c_read_reg+0x42>
    return ERROR_I2C;
 800d7cc:	f06f 0302 	mvn.w	r3, #2
 800d7d0:	e000      	b.n	800d7d4 <_i2c_read_reg+0x44>
  return ZMOD4XXX_OK;
 800d7d2:	2300      	movs	r3, #0
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3708      	adds	r7, #8
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}
 800d7dc:	200005fc 	.word	0x200005fc

0800d7e0 <_i2c_write_reg>:

// wrapper function, mapping register write api to generic I2C API
int8_t
_i2c_write_reg ( uint8_t  slaveAddr, uint8_t  addr, uint8_t*  data, uint8_t  len ) {
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b086      	sub	sp, #24
 800d7e4:	af04      	add	r7, sp, #16
 800d7e6:	603a      	str	r2, [r7, #0]
 800d7e8:	461a      	mov	r2, r3
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	71fb      	strb	r3, [r7, #7]
 800d7ee:	460b      	mov	r3, r1
 800d7f0:	71bb      	strb	r3, [r7, #6]
 800d7f2:	4613      	mov	r3, r2
 800d7f4:	717b      	strb	r3, [r7, #5]

  if ( HAL_I2C_Mem_Write(&hi2c3, slaveAddr,addr,I2C_MEMADD_SIZE_8BIT,data,len,HAL_MAX_DELAY) )
 800d7f6:	79fb      	ldrb	r3, [r7, #7]
 800d7f8:	b299      	uxth	r1, r3
 800d7fa:	79bb      	ldrb	r3, [r7, #6]
 800d7fc:	b29a      	uxth	r2, r3
 800d7fe:	797b      	ldrb	r3, [r7, #5]
 800d800:	b29b      	uxth	r3, r3
 800d802:	f04f 30ff 	mov.w	r0, #4294967295
 800d806:	9002      	str	r0, [sp, #8]
 800d808:	9301      	str	r3, [sp, #4]
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	9300      	str	r3, [sp, #0]
 800d80e:	2301      	movs	r3, #1
 800d810:	4806      	ldr	r0, [pc, #24]	; (800d82c <_i2c_write_reg+0x4c>)
 800d812:	f002 fb89 	bl	800ff28 <HAL_I2C_Mem_Write>
 800d816:	4603      	mov	r3, r0
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d002      	beq.n	800d822 <_i2c_write_reg+0x42>
    return ERROR_I2C;
 800d81c:	f06f 0302 	mvn.w	r3, #2
 800d820:	e000      	b.n	800d824 <_i2c_write_reg+0x44>
  return ZMOD4XXX_OK;
 800d822:	2300      	movs	r3, #0
}
 800d824:	4618      	mov	r0, r3
 800d826:	3708      	adds	r7, #8
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}
 800d82c:	200005fc 	.word	0x200005fc

0800d830 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800d830:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800d832:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800d834:	3304      	adds	r3, #4

0800d836 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800d836:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800d838:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800d83a:	d3f9      	bcc.n	800d830 <CopyDataInit>
  bx lr
 800d83c:	4770      	bx	lr

0800d83e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800d83e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800d840:	3004      	adds	r0, #4

0800d842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800d842:	4288      	cmp	r0, r1
  bcc FillZerobss
 800d844:	d3fb      	bcc.n	800d83e <FillZerobss>
  bx lr
 800d846:	4770      	bx	lr

0800d848 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800d848:	480c      	ldr	r0, [pc, #48]	; (800d87c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800d84a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800d84c:	f7ff fada 	bl	800ce04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800d850:	480b      	ldr	r0, [pc, #44]	; (800d880 <LoopForever+0x8>)
 800d852:	490c      	ldr	r1, [pc, #48]	; (800d884 <LoopForever+0xc>)
 800d854:	4a0c      	ldr	r2, [pc, #48]	; (800d888 <LoopForever+0x10>)
 800d856:	2300      	movs	r3, #0
 800d858:	f7ff ffed 	bl	800d836 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800d85c:	480b      	ldr	r0, [pc, #44]	; (800d88c <LoopForever+0x14>)
 800d85e:	490c      	ldr	r1, [pc, #48]	; (800d890 <LoopForever+0x18>)
 800d860:	2300      	movs	r3, #0
 800d862:	f7ff ffee 	bl	800d842 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800d866:	480b      	ldr	r0, [pc, #44]	; (800d894 <LoopForever+0x1c>)
 800d868:	490b      	ldr	r1, [pc, #44]	; (800d898 <LoopForever+0x20>)
 800d86a:	2300      	movs	r3, #0
 800d86c:	f7ff ffe9 	bl	800d842 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800d870:	f00e f944 	bl	801bafc <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800d874:	f7fe fcfe 	bl	800c274 <main>

0800d878 <LoopForever>:

LoopForever:
  b LoopForever
 800d878:	e7fe      	b.n	800d878 <LoopForever>
 800d87a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800d87c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800d880:	20000008 	.word	0x20000008
 800d884:	200002d0 	.word	0x200002d0
 800d888:	080219b4 	.word	0x080219b4
  INIT_BSS _sbss, _ebss
 800d88c:	2000031c 	.word	0x2000031c
 800d890:	20000d40 	.word	0x20000d40
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800d894:	200301e4 	.word	0x200301e4
 800d898:	20030a67 	.word	0x20030a67

0800d89c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800d89c:	e7fe      	b.n	800d89c <ADC1_IRQHandler>
	...

0800d8a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b082      	sub	sp, #8
 800d8a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800d8aa:	4b0c      	ldr	r3, [pc, #48]	; (800d8dc <HAL_Init+0x3c>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	4a0b      	ldr	r2, [pc, #44]	; (800d8dc <HAL_Init+0x3c>)
 800d8b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d8b4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800d8b6:	2003      	movs	r0, #3
 800d8b8:	f001 fb72 	bl	800efa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800d8bc:	2000      	movs	r0, #0
 800d8be:	f000 f80f 	bl	800d8e0 <HAL_InitTick>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d002      	beq.n	800d8ce <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800d8c8:	2301      	movs	r3, #1
 800d8ca:	71fb      	strb	r3, [r7, #7]
 800d8cc:	e001      	b.n	800d8d2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800d8ce:	f7ff f94a 	bl	800cb66 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800d8d2:	79fb      	ldrb	r3, [r7, #7]
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	3708      	adds	r7, #8
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	bd80      	pop	{r7, pc}
 800d8dc:	58004000 	.word	0x58004000

0800d8e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b084      	sub	sp, #16
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800d8ec:	4b17      	ldr	r3, [pc, #92]	; (800d94c <HAL_InitTick+0x6c>)
 800d8ee:	781b      	ldrb	r3, [r3, #0]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d024      	beq.n	800d93e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800d8f4:	f005 f8d0 	bl	8012a98 <HAL_RCC_GetHCLKFreq>
 800d8f8:	4602      	mov	r2, r0
 800d8fa:	4b14      	ldr	r3, [pc, #80]	; (800d94c <HAL_InitTick+0x6c>)
 800d8fc:	781b      	ldrb	r3, [r3, #0]
 800d8fe:	4619      	mov	r1, r3
 800d900:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d904:	fbb3 f3f1 	udiv	r3, r3, r1
 800d908:	fbb2 f3f3 	udiv	r3, r2, r3
 800d90c:	4618      	mov	r0, r3
 800d90e:	f001 fb88 	bl	800f022 <HAL_SYSTICK_Config>
 800d912:	4603      	mov	r3, r0
 800d914:	2b00      	cmp	r3, #0
 800d916:	d10f      	bne.n	800d938 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2b0f      	cmp	r3, #15
 800d91c:	d809      	bhi.n	800d932 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800d91e:	2200      	movs	r2, #0
 800d920:	6879      	ldr	r1, [r7, #4]
 800d922:	f04f 30ff 	mov.w	r0, #4294967295
 800d926:	f001 fb46 	bl	800efb6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800d92a:	4a09      	ldr	r2, [pc, #36]	; (800d950 <HAL_InitTick+0x70>)
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6013      	str	r3, [r2, #0]
 800d930:	e007      	b.n	800d942 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800d932:	2301      	movs	r3, #1
 800d934:	73fb      	strb	r3, [r7, #15]
 800d936:	e004      	b.n	800d942 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800d938:	2301      	movs	r3, #1
 800d93a:	73fb      	strb	r3, [r7, #15]
 800d93c:	e001      	b.n	800d942 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800d93e:	2301      	movs	r3, #1
 800d940:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800d942:	7bfb      	ldrb	r3, [r7, #15]
}
 800d944:	4618      	mov	r0, r3
 800d946:	3710      	adds	r7, #16
 800d948:	46bd      	mov	sp, r7
 800d94a:	bd80      	pop	{r7, pc}
 800d94c:	20000010 	.word	0x20000010
 800d950:	2000000c 	.word	0x2000000c

0800d954 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800d954:	b480      	push	{r7}
 800d956:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800d958:	4b06      	ldr	r3, [pc, #24]	; (800d974 <HAL_IncTick+0x20>)
 800d95a:	781b      	ldrb	r3, [r3, #0]
 800d95c:	461a      	mov	r2, r3
 800d95e:	4b06      	ldr	r3, [pc, #24]	; (800d978 <HAL_IncTick+0x24>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	4413      	add	r3, r2
 800d964:	4a04      	ldr	r2, [pc, #16]	; (800d978 <HAL_IncTick+0x24>)
 800d966:	6013      	str	r3, [r2, #0]
}
 800d968:	bf00      	nop
 800d96a:	46bd      	mov	sp, r7
 800d96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d970:	4770      	bx	lr
 800d972:	bf00      	nop
 800d974:	20000010 	.word	0x20000010
 800d978:	2000078c 	.word	0x2000078c

0800d97c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800d97c:	b480      	push	{r7}
 800d97e:	af00      	add	r7, sp, #0
  return uwTick;
 800d980:	4b03      	ldr	r3, [pc, #12]	; (800d990 <HAL_GetTick+0x14>)
 800d982:	681b      	ldr	r3, [r3, #0]
}
 800d984:	4618      	mov	r0, r3
 800d986:	46bd      	mov	sp, r7
 800d988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98c:	4770      	bx	lr
 800d98e:	bf00      	nop
 800d990:	2000078c 	.word	0x2000078c

0800d994 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800d994:	b480      	push	{r7}
 800d996:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800d998:	4b03      	ldr	r3, [pc, #12]	; (800d9a8 <HAL_GetTickPrio+0x14>)
 800d99a:	681b      	ldr	r3, [r3, #0]
}
 800d99c:	4618      	mov	r0, r3
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a4:	4770      	bx	lr
 800d9a6:	bf00      	nop
 800d9a8:	2000000c 	.word	0x2000000c

0800d9ac <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 800d9ac:	b480      	push	{r7}
 800d9ae:	af00      	add	r7, sp, #0
  return uwTickFreq;
 800d9b0:	4b03      	ldr	r3, [pc, #12]	; (800d9c0 <HAL_GetTickFreq+0x14>)
 800d9b2:	781b      	ldrb	r3, [r3, #0]
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9bc:	4770      	bx	lr
 800d9be:	bf00      	nop
 800d9c0:	20000010 	.word	0x20000010

0800d9c4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800d9c4:	b480      	push	{r7}
 800d9c6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800d9c8:	4b05      	ldr	r3, [pc, #20]	; (800d9e0 <HAL_SuspendTick+0x1c>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	4a04      	ldr	r2, [pc, #16]	; (800d9e0 <HAL_SuspendTick+0x1c>)
 800d9ce:	f023 0302 	bic.w	r3, r3, #2
 800d9d2:	6013      	str	r3, [r2, #0]
}
 800d9d4:	bf00      	nop
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9dc:	4770      	bx	lr
 800d9de:	bf00      	nop
 800d9e0:	e000e010 	.word	0xe000e010

0800d9e4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800d9e4:	b480      	push	{r7}
 800d9e6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800d9e8:	4b05      	ldr	r3, [pc, #20]	; (800da00 <HAL_ResumeTick+0x1c>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	4a04      	ldr	r2, [pc, #16]	; (800da00 <HAL_ResumeTick+0x1c>)
 800d9ee:	f043 0302 	orr.w	r3, r3, #2
 800d9f2:	6013      	str	r3, [r2, #0]
}
 800d9f4:	bf00      	nop
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fc:	4770      	bx	lr
 800d9fe:	bf00      	nop
 800da00:	e000e010 	.word	0xe000e010

0800da04 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800da04:	b480      	push	{r7}
 800da06:	b083      	sub	sp, #12
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
 800da0c:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	689b      	ldr	r3, [r3, #8]
 800da12:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	431a      	orrs	r2, r3
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800da1e:	bf00      	nop
 800da20:	370c      	adds	r7, #12
 800da22:	46bd      	mov	sp, r7
 800da24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da28:	4770      	bx	lr

0800da2a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800da2a:	b480      	push	{r7}
 800da2c:	b083      	sub	sp, #12
 800da2e:	af00      	add	r7, sp, #0
 800da30:	6078      	str	r0, [r7, #4]
 800da32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	689b      	ldr	r3, [r3, #8]
 800da38:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	431a      	orrs	r2, r3
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	609a      	str	r2, [r3, #8]
}
 800da44:	bf00      	nop
 800da46:	370c      	adds	r7, #12
 800da48:	46bd      	mov	sp, r7
 800da4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4e:	4770      	bx	lr

0800da50 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800da50:	b480      	push	{r7}
 800da52:	b083      	sub	sp, #12
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	689b      	ldr	r3, [r3, #8]
 800da5c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800da60:	4618      	mov	r0, r3
 800da62:	370c      	adds	r7, #12
 800da64:	46bd      	mov	sp, r7
 800da66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6a:	4770      	bx	lr

0800da6c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800da6c:	b480      	push	{r7}
 800da6e:	b087      	sub	sp, #28
 800da70:	af00      	add	r7, sp, #0
 800da72:	60f8      	str	r0, [r7, #12]
 800da74:	60b9      	str	r1, [r7, #8]
 800da76:	607a      	str	r2, [r7, #4]
 800da78:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	3360      	adds	r3, #96	; 0x60
 800da7e:	461a      	mov	r2, r3
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	009b      	lsls	r3, r3, #2
 800da84:	4413      	add	r3, r2
 800da86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	681a      	ldr	r2, [r3, #0]
 800da8c:	4b08      	ldr	r3, [pc, #32]	; (800dab0 <LL_ADC_SetOffset+0x44>)
 800da8e:	4013      	ands	r3, r2
 800da90:	687a      	ldr	r2, [r7, #4]
 800da92:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800da96:	683a      	ldr	r2, [r7, #0]
 800da98:	430a      	orrs	r2, r1
 800da9a:	4313      	orrs	r3, r2
 800da9c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800daa0:	697b      	ldr	r3, [r7, #20]
 800daa2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800daa4:	bf00      	nop
 800daa6:	371c      	adds	r7, #28
 800daa8:	46bd      	mov	sp, r7
 800daaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daae:	4770      	bx	lr
 800dab0:	03fff000 	.word	0x03fff000

0800dab4 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800dab4:	b480      	push	{r7}
 800dab6:	b085      	sub	sp, #20
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
 800dabc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	3360      	adds	r3, #96	; 0x60
 800dac2:	461a      	mov	r2, r3
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	009b      	lsls	r3, r3, #2
 800dac8:	4413      	add	r3, r2
 800daca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3714      	adds	r7, #20
 800dad8:	46bd      	mov	sp, r7
 800dada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dade:	4770      	bx	lr

0800dae0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800dae0:	b480      	push	{r7}
 800dae2:	b087      	sub	sp, #28
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	60f8      	str	r0, [r7, #12]
 800dae8:	60b9      	str	r1, [r7, #8]
 800daea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	3360      	adds	r3, #96	; 0x60
 800daf0:	461a      	mov	r2, r3
 800daf2:	68bb      	ldr	r3, [r7, #8]
 800daf4:	009b      	lsls	r3, r3, #2
 800daf6:	4413      	add	r3, r2
 800daf8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	431a      	orrs	r2, r3
 800db06:	697b      	ldr	r3, [r7, #20]
 800db08:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800db0a:	bf00      	nop
 800db0c:	371c      	adds	r7, #28
 800db0e:	46bd      	mov	sp, r7
 800db10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db14:	4770      	bx	lr

0800db16 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800db16:	b480      	push	{r7}
 800db18:	b083      	sub	sp, #12
 800db1a:	af00      	add	r7, sp, #0
 800db1c:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	68db      	ldr	r3, [r3, #12]
 800db22:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800db26:	2b00      	cmp	r3, #0
 800db28:	d101      	bne.n	800db2e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800db2a:	2301      	movs	r3, #1
 800db2c:	e000      	b.n	800db30 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800db2e:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800db30:	4618      	mov	r0, r3
 800db32:	370c      	adds	r7, #12
 800db34:	46bd      	mov	sp, r7
 800db36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3a:	4770      	bx	lr

0800db3c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800db3c:	b480      	push	{r7}
 800db3e:	b087      	sub	sp, #28
 800db40:	af00      	add	r7, sp, #0
 800db42:	60f8      	str	r0, [r7, #12]
 800db44:	60b9      	str	r1, [r7, #8]
 800db46:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	3330      	adds	r3, #48	; 0x30
 800db4c:	461a      	mov	r2, r3
 800db4e:	68bb      	ldr	r3, [r7, #8]
 800db50:	0a1b      	lsrs	r3, r3, #8
 800db52:	009b      	lsls	r3, r3, #2
 800db54:	f003 030c 	and.w	r3, r3, #12
 800db58:	4413      	add	r3, r2
 800db5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	681a      	ldr	r2, [r3, #0]
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	f003 031f 	and.w	r3, r3, #31
 800db66:	211f      	movs	r1, #31
 800db68:	fa01 f303 	lsl.w	r3, r1, r3
 800db6c:	43db      	mvns	r3, r3
 800db6e:	401a      	ands	r2, r3
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	0e9b      	lsrs	r3, r3, #26
 800db74:	f003 011f 	and.w	r1, r3, #31
 800db78:	68bb      	ldr	r3, [r7, #8]
 800db7a:	f003 031f 	and.w	r3, r3, #31
 800db7e:	fa01 f303 	lsl.w	r3, r1, r3
 800db82:	431a      	orrs	r2, r3
 800db84:	697b      	ldr	r3, [r7, #20]
 800db86:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800db88:	bf00      	nop
 800db8a:	371c      	adds	r7, #28
 800db8c:	46bd      	mov	sp, r7
 800db8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db92:	4770      	bx	lr

0800db94 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800db94:	b480      	push	{r7}
 800db96:	b087      	sub	sp, #28
 800db98:	af00      	add	r7, sp, #0
 800db9a:	60f8      	str	r0, [r7, #12]
 800db9c:	60b9      	str	r1, [r7, #8]
 800db9e:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	3314      	adds	r3, #20
 800dba4:	461a      	mov	r2, r3
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	0e5b      	lsrs	r3, r3, #25
 800dbaa:	009b      	lsls	r3, r3, #2
 800dbac:	f003 0304 	and.w	r3, r3, #4
 800dbb0:	4413      	add	r3, r2
 800dbb2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	681a      	ldr	r2, [r3, #0]
 800dbb8:	68bb      	ldr	r3, [r7, #8]
 800dbba:	0d1b      	lsrs	r3, r3, #20
 800dbbc:	f003 031f 	and.w	r3, r3, #31
 800dbc0:	2107      	movs	r1, #7
 800dbc2:	fa01 f303 	lsl.w	r3, r1, r3
 800dbc6:	43db      	mvns	r3, r3
 800dbc8:	401a      	ands	r2, r3
 800dbca:	68bb      	ldr	r3, [r7, #8]
 800dbcc:	0d1b      	lsrs	r3, r3, #20
 800dbce:	f003 031f 	and.w	r3, r3, #31
 800dbd2:	6879      	ldr	r1, [r7, #4]
 800dbd4:	fa01 f303 	lsl.w	r3, r1, r3
 800dbd8:	431a      	orrs	r2, r3
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800dbde:	bf00      	nop
 800dbe0:	371c      	adds	r7, #28
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe8:	4770      	bx	lr
	...

0800dbec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800dbec:	b480      	push	{r7}
 800dbee:	b085      	sub	sp, #20
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	60f8      	str	r0, [r7, #12]
 800dbf4:	60b9      	str	r1, [r7, #8]
 800dbf6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800dbfe:	68bb      	ldr	r3, [r7, #8]
 800dc00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dc04:	43db      	mvns	r3, r3
 800dc06:	401a      	ands	r2, r3
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f003 0318 	and.w	r3, r3, #24
 800dc0e:	4908      	ldr	r1, [pc, #32]	; (800dc30 <LL_ADC_SetChannelSingleDiff+0x44>)
 800dc10:	40d9      	lsrs	r1, r3
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	400b      	ands	r3, r1
 800dc16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dc1a:	431a      	orrs	r2, r3
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800dc22:	bf00      	nop
 800dc24:	3714      	adds	r7, #20
 800dc26:	46bd      	mov	sp, r7
 800dc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2c:	4770      	bx	lr
 800dc2e:	bf00      	nop
 800dc30:	0007ffff 	.word	0x0007ffff

0800dc34 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800dc34:	b480      	push	{r7}
 800dc36:	b083      	sub	sp, #12
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	689b      	ldr	r3, [r3, #8]
 800dc40:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800dc44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800dc48:	687a      	ldr	r2, [r7, #4]
 800dc4a:	6093      	str	r3, [r2, #8]
}
 800dc4c:	bf00      	nop
 800dc4e:	370c      	adds	r7, #12
 800dc50:	46bd      	mov	sp, r7
 800dc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc56:	4770      	bx	lr

0800dc58 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800dc58:	b480      	push	{r7}
 800dc5a:	b083      	sub	sp, #12
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	689b      	ldr	r3, [r3, #8]
 800dc64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dc68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dc6c:	d101      	bne.n	800dc72 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800dc6e:	2301      	movs	r3, #1
 800dc70:	e000      	b.n	800dc74 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800dc72:	2300      	movs	r3, #0
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	370c      	adds	r7, #12
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7e:	4770      	bx	lr

0800dc80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800dc80:	b480      	push	{r7}
 800dc82:	b083      	sub	sp, #12
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	689b      	ldr	r3, [r3, #8]
 800dc8c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800dc90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800dc94:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800dc9c:	bf00      	nop
 800dc9e:	370c      	adds	r7, #12
 800dca0:	46bd      	mov	sp, r7
 800dca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca6:	4770      	bx	lr

0800dca8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800dca8:	b480      	push	{r7}
 800dcaa:	b083      	sub	sp, #12
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	689b      	ldr	r3, [r3, #8]
 800dcb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dcb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dcbc:	d101      	bne.n	800dcc2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800dcbe:	2301      	movs	r3, #1
 800dcc0:	e000      	b.n	800dcc4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800dcc2:	2300      	movs	r3, #0
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	370c      	adds	r7, #12
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcce:	4770      	bx	lr

0800dcd0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800dcd0:	b480      	push	{r7}
 800dcd2:	b083      	sub	sp, #12
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	689b      	ldr	r3, [r3, #8]
 800dcdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dce0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800dce4:	f043 0201 	orr.w	r2, r3, #1
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800dcec:	bf00      	nop
 800dcee:	370c      	adds	r7, #12
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf6:	4770      	bx	lr

0800dcf8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	b083      	sub	sp, #12
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	689b      	ldr	r3, [r3, #8]
 800dd04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dd08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800dd0c:	f043 0202 	orr.w	r2, r3, #2
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800dd14:	bf00      	nop
 800dd16:	370c      	adds	r7, #12
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1e:	4770      	bx	lr

0800dd20 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800dd20:	b480      	push	{r7}
 800dd22:	b083      	sub	sp, #12
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	689b      	ldr	r3, [r3, #8]
 800dd2c:	f003 0301 	and.w	r3, r3, #1
 800dd30:	2b01      	cmp	r3, #1
 800dd32:	d101      	bne.n	800dd38 <LL_ADC_IsEnabled+0x18>
 800dd34:	2301      	movs	r3, #1
 800dd36:	e000      	b.n	800dd3a <LL_ADC_IsEnabled+0x1a>
 800dd38:	2300      	movs	r3, #0
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	370c      	adds	r7, #12
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd44:	4770      	bx	lr

0800dd46 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800dd46:	b480      	push	{r7}
 800dd48:	b083      	sub	sp, #12
 800dd4a:	af00      	add	r7, sp, #0
 800dd4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	689b      	ldr	r3, [r3, #8]
 800dd52:	f003 0302 	and.w	r3, r3, #2
 800dd56:	2b02      	cmp	r3, #2
 800dd58:	d101      	bne.n	800dd5e <LL_ADC_IsDisableOngoing+0x18>
 800dd5a:	2301      	movs	r3, #1
 800dd5c:	e000      	b.n	800dd60 <LL_ADC_IsDisableOngoing+0x1a>
 800dd5e:	2300      	movs	r3, #0
}
 800dd60:	4618      	mov	r0, r3
 800dd62:	370c      	adds	r7, #12
 800dd64:	46bd      	mov	sp, r7
 800dd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6a:	4770      	bx	lr

0800dd6c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800dd6c:	b480      	push	{r7}
 800dd6e:	b083      	sub	sp, #12
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	689b      	ldr	r3, [r3, #8]
 800dd78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dd7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800dd80:	f043 0204 	orr.w	r2, r3, #4
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800dd88:	bf00      	nop
 800dd8a:	370c      	adds	r7, #12
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd92:	4770      	bx	lr

0800dd94 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800dd94:	b480      	push	{r7}
 800dd96:	b083      	sub	sp, #12
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	689b      	ldr	r3, [r3, #8]
 800dda0:	f003 0304 	and.w	r3, r3, #4
 800dda4:	2b04      	cmp	r3, #4
 800dda6:	d101      	bne.n	800ddac <LL_ADC_REG_IsConversionOngoing+0x18>
 800dda8:	2301      	movs	r3, #1
 800ddaa:	e000      	b.n	800ddae <LL_ADC_REG_IsConversionOngoing+0x1a>
 800ddac:	2300      	movs	r3, #0
}
 800ddae:	4618      	mov	r0, r3
 800ddb0:	370c      	adds	r7, #12
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb8:	4770      	bx	lr

0800ddba <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800ddba:	b480      	push	{r7}
 800ddbc:	b083      	sub	sp, #12
 800ddbe:	af00      	add	r7, sp, #0
 800ddc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	689b      	ldr	r3, [r3, #8]
 800ddc6:	f003 0308 	and.w	r3, r3, #8
 800ddca:	2b08      	cmp	r3, #8
 800ddcc:	d101      	bne.n	800ddd2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800ddce:	2301      	movs	r3, #1
 800ddd0:	e000      	b.n	800ddd4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800ddd2:	2300      	movs	r3, #0
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	370c      	adds	r7, #12
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddde:	4770      	bx	lr

0800dde0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b088      	sub	sp, #32
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800dde8:	2300      	movs	r3, #0
 800ddea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 800ddec:	2300      	movs	r3, #0
 800ddee:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d101      	bne.n	800ddfe <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	e12e      	b.n	800e05c <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	691b      	ldr	r3, [r3, #16]
 800de02:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d109      	bne.n	800de20 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f7fb ff17 	bl	8009c40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	2200      	movs	r2, #0
 800de16:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2200      	movs	r2, #0
 800de1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	4618      	mov	r0, r3
 800de26:	f7ff ff17 	bl	800dc58 <LL_ADC_IsDeepPowerDownEnabled>
 800de2a:	4603      	mov	r3, r0
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d004      	beq.n	800de3a <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	4618      	mov	r0, r3
 800de36:	f7ff fefd 	bl	800dc34 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	4618      	mov	r0, r3
 800de40:	f7ff ff32 	bl	800dca8 <LL_ADC_IsInternalRegulatorEnabled>
 800de44:	4603      	mov	r3, r0
 800de46:	2b00      	cmp	r3, #0
 800de48:	d115      	bne.n	800de76 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	4618      	mov	r0, r3
 800de50:	f7ff ff16 	bl	800dc80 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800de54:	4b83      	ldr	r3, [pc, #524]	; (800e064 <HAL_ADC_Init+0x284>)
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	099b      	lsrs	r3, r3, #6
 800de5a:	4a83      	ldr	r2, [pc, #524]	; (800e068 <HAL_ADC_Init+0x288>)
 800de5c:	fba2 2303 	umull	r2, r3, r2, r3
 800de60:	099b      	lsrs	r3, r3, #6
 800de62:	3301      	adds	r3, #1
 800de64:	005b      	lsls	r3, r3, #1
 800de66:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800de68:	e002      	b.n	800de70 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	3b01      	subs	r3, #1
 800de6e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d1f9      	bne.n	800de6a <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	4618      	mov	r0, r3
 800de7c:	f7ff ff14 	bl	800dca8 <LL_ADC_IsInternalRegulatorEnabled>
 800de80:	4603      	mov	r3, r0
 800de82:	2b00      	cmp	r3, #0
 800de84:	d10d      	bne.n	800dea2 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de8a:	f043 0210 	orr.w	r2, r3, #16
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de96:	f043 0201 	orr.w	r2, r3, #1
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800de9e:	2301      	movs	r3, #1
 800dea0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	4618      	mov	r0, r3
 800dea8:	f7ff ff74 	bl	800dd94 <LL_ADC_REG_IsConversionOngoing>
 800deac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800deb2:	f003 0310 	and.w	r3, r3, #16
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	f040 80c7 	bne.w	800e04a <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	f040 80c3 	bne.w	800e04a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dec8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800decc:	f043 0202 	orr.w	r2, r3, #2
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	4618      	mov	r0, r3
 800deda:	f7ff ff21 	bl	800dd20 <LL_ADC_IsEnabled>
 800dede:	4603      	mov	r3, r0
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d10b      	bne.n	800defc <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800dee4:	4861      	ldr	r0, [pc, #388]	; (800e06c <HAL_ADC_Init+0x28c>)
 800dee6:	f7ff ff1b 	bl	800dd20 <LL_ADC_IsEnabled>
 800deea:	4603      	mov	r3, r0
 800deec:	2b00      	cmp	r3, #0
 800deee:	d105      	bne.n	800defc <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	685b      	ldr	r3, [r3, #4]
 800def4:	4619      	mov	r1, r3
 800def6:	485e      	ldr	r0, [pc, #376]	; (800e070 <HAL_ADC_Init+0x290>)
 800def8:	f7ff fd84 	bl	800da04 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	7e5b      	ldrb	r3, [r3, #25]
 800df00:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800df06:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800df0c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800df12:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	f893 3020 	ldrb.w	r3, [r3, #32]
 800df1a:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 800df1c:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800df1e:	69ba      	ldr	r2, [r7, #24]
 800df20:	4313      	orrs	r3, r2
 800df22:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f893 3020 	ldrb.w	r3, [r3, #32]
 800df2a:	2b01      	cmp	r3, #1
 800df2c:	d106      	bne.n	800df3c <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df32:	3b01      	subs	r3, #1
 800df34:	045b      	lsls	r3, r3, #17
 800df36:	69ba      	ldr	r2, [r7, #24]
 800df38:	4313      	orrs	r3, r2
 800df3a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df40:	2b00      	cmp	r3, #0
 800df42:	d009      	beq.n	800df58 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df48:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df50:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800df52:	69ba      	ldr	r2, [r7, #24]
 800df54:	4313      	orrs	r3, r2
 800df56:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	68da      	ldr	r2, [r3, #12]
 800df5e:	4b45      	ldr	r3, [pc, #276]	; (800e074 <HAL_ADC_Init+0x294>)
 800df60:	4013      	ands	r3, r2
 800df62:	687a      	ldr	r2, [r7, #4]
 800df64:	6812      	ldr	r2, [r2, #0]
 800df66:	69b9      	ldr	r1, [r7, #24]
 800df68:	430b      	orrs	r3, r1
 800df6a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	4618      	mov	r0, r3
 800df72:	f7ff ff0f 	bl	800dd94 <LL_ADC_REG_IsConversionOngoing>
 800df76:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	4618      	mov	r0, r3
 800df7e:	f7ff ff1c 	bl	800ddba <LL_ADC_INJ_IsConversionOngoing>
 800df82:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800df84:	693b      	ldr	r3, [r7, #16]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d13d      	bne.n	800e006 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d13a      	bne.n	800e006 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800df94:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800df9c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800df9e:	4313      	orrs	r3, r2
 800dfa0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	68db      	ldr	r3, [r3, #12]
 800dfa8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dfac:	f023 0302 	bic.w	r3, r3, #2
 800dfb0:	687a      	ldr	r2, [r7, #4]
 800dfb2:	6812      	ldr	r2, [r2, #0]
 800dfb4:	69b9      	ldr	r1, [r7, #24]
 800dfb6:	430b      	orrs	r3, r1
 800dfb8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800dfc0:	2b01      	cmp	r3, #1
 800dfc2:	d118      	bne.n	800dff6 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	691b      	ldr	r3, [r3, #16]
 800dfca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800dfce:	f023 0304 	bic.w	r3, r3, #4
 800dfd2:	687a      	ldr	r2, [r7, #4]
 800dfd4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800dfd6:	687a      	ldr	r2, [r7, #4]
 800dfd8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800dfda:	4311      	orrs	r1, r2
 800dfdc:	687a      	ldr	r2, [r7, #4]
 800dfde:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800dfe0:	4311      	orrs	r1, r2
 800dfe2:	687a      	ldr	r2, [r7, #4]
 800dfe4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800dfe6:	430a      	orrs	r2, r1
 800dfe8:	431a      	orrs	r2, r3
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	f042 0201 	orr.w	r2, r2, #1
 800dff2:	611a      	str	r2, [r3, #16]
 800dff4:	e007      	b.n	800e006 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	691a      	ldr	r2, [r3, #16]
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	f022 0201 	bic.w	r2, r2, #1
 800e004:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	691b      	ldr	r3, [r3, #16]
 800e00a:	2b01      	cmp	r3, #1
 800e00c:	d10c      	bne.n	800e028 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e014:	f023 010f 	bic.w	r1, r3, #15
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	69db      	ldr	r3, [r3, #28]
 800e01c:	1e5a      	subs	r2, r3, #1
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	430a      	orrs	r2, r1
 800e024:	631a      	str	r2, [r3, #48]	; 0x30
 800e026:	e007      	b.n	800e038 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	f022 020f 	bic.w	r2, r2, #15
 800e036:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e03c:	f023 0303 	bic.w	r3, r3, #3
 800e040:	f043 0201 	orr.w	r2, r3, #1
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	655a      	str	r2, [r3, #84]	; 0x54
 800e048:	e007      	b.n	800e05a <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e04e:	f043 0210 	orr.w	r2, r3, #16
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800e056:	2301      	movs	r3, #1
 800e058:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800e05a:	7ffb      	ldrb	r3, [r7, #31]
}
 800e05c:	4618      	mov	r0, r3
 800e05e:	3720      	adds	r7, #32
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}
 800e064:	20000008 	.word	0x20000008
 800e068:	053e2d63 	.word	0x053e2d63
 800e06c:	50040000 	.word	0x50040000
 800e070:	50040300 	.word	0x50040300
 800e074:	fff0c007 	.word	0xfff0c007

0800e078 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b086      	sub	sp, #24
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	60f8      	str	r0, [r7, #12]
 800e080:	60b9      	str	r1, [r7, #8]
 800e082:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	4618      	mov	r0, r3
 800e08a:	f7ff fe83 	bl	800dd94 <LL_ADC_REG_IsConversionOngoing>
 800e08e:	4603      	mov	r3, r0
 800e090:	2b00      	cmp	r3, #0
 800e092:	d167      	bne.n	800e164 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e09a:	2b01      	cmp	r3, #1
 800e09c:	d101      	bne.n	800e0a2 <HAL_ADC_Start_DMA+0x2a>
 800e09e:	2302      	movs	r3, #2
 800e0a0:	e063      	b.n	800e16a <HAL_ADC_Start_DMA+0xf2>
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	2201      	movs	r2, #1
 800e0a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800e0aa:	68f8      	ldr	r0, [r7, #12]
 800e0ac:	f000 fc4c 	bl	800e948 <ADC_Enable>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800e0b4:	7dfb      	ldrb	r3, [r7, #23]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d14f      	bne.n	800e15a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0be:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800e0c2:	f023 0301 	bic.w	r3, r3, #1
 800e0c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	655a      	str	r2, [r3, #84]	; 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d006      	beq.n	800e0e8 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e0de:	f023 0206 	bic.w	r2, r3, #6
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	659a      	str	r2, [r3, #88]	; 0x58
 800e0e6:	e002      	b.n	800e0ee <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e0f2:	4a20      	ldr	r2, [pc, #128]	; (800e174 <HAL_ADC_Start_DMA+0xfc>)
 800e0f4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e0fa:	4a1f      	ldr	r2, [pc, #124]	; (800e178 <HAL_ADC_Start_DMA+0x100>)
 800e0fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e102:	4a1e      	ldr	r2, [pc, #120]	; (800e17c <HAL_ADC_Start_DMA+0x104>)
 800e104:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	221c      	movs	r2, #28
 800e10c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	2200      	movs	r2, #0
 800e112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	685a      	ldr	r2, [r3, #4]
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	f042 0210 	orr.w	r2, r2, #16
 800e124:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	68da      	ldr	r2, [r3, #12]
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	f042 0201 	orr.w	r2, r2, #1
 800e134:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	3340      	adds	r3, #64	; 0x40
 800e140:	4619      	mov	r1, r3
 800e142:	68ba      	ldr	r2, [r7, #8]
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f001 f83d 	bl	800f1c4 <HAL_DMA_Start_IT>
 800e14a:	4603      	mov	r3, r0
 800e14c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	4618      	mov	r0, r3
 800e154:	f7ff fe0a 	bl	800dd6c <LL_ADC_REG_StartConversion>
 800e158:	e006      	b.n	800e168 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	2200      	movs	r2, #0
 800e15e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800e162:	e001      	b.n	800e168 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800e164:	2302      	movs	r3, #2
 800e166:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800e168:	7dfb      	ldrb	r3, [r7, #23]
}
 800e16a:	4618      	mov	r0, r3
 800e16c:	3718      	adds	r7, #24
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd80      	pop	{r7, pc}
 800e172:	bf00      	nop
 800e174:	0800eafb 	.word	0x0800eafb
 800e178:	0800ebd3 	.word	0x0800ebd3
 800e17c:	0800ebef 	.word	0x0800ebef

0800e180 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800e180:	b480      	push	{r7}
 800e182:	b083      	sub	sp, #12
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800e188:	bf00      	nop
 800e18a:	370c      	adds	r7, #12
 800e18c:	46bd      	mov	sp, r7
 800e18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e192:	4770      	bx	lr

0800e194 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800e194:	b480      	push	{r7}
 800e196:	b083      	sub	sp, #12
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800e19c:	bf00      	nop
 800e19e:	370c      	adds	r7, #12
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a6:	4770      	bx	lr

0800e1a8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b083      	sub	sp, #12
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800e1b0:	bf00      	nop
 800e1b2:	370c      	adds	r7, #12
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ba:	4770      	bx	lr

0800e1bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b0b6      	sub	sp, #216	; 0xd8
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
 800e1c4:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e1d6:	2b01      	cmp	r3, #1
 800e1d8:	d101      	bne.n	800e1de <HAL_ADC_ConfigChannel+0x22>
 800e1da:	2302      	movs	r3, #2
 800e1dc:	e39f      	b.n	800e91e <HAL_ADC_ConfigChannel+0x762>
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	2201      	movs	r2, #1
 800e1e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f7ff fdd2 	bl	800dd94 <LL_ADC_REG_IsConversionOngoing>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	f040 8384 	bne.w	800e900 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	6818      	ldr	r0, [r3, #0]
 800e1fc:	683b      	ldr	r3, [r7, #0]
 800e1fe:	6859      	ldr	r1, [r3, #4]
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	461a      	mov	r2, r3
 800e206:	f7ff fc99 	bl	800db3c <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	4618      	mov	r0, r3
 800e210:	f7ff fdc0 	bl	800dd94 <LL_ADC_REG_IsConversionOngoing>
 800e214:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	4618      	mov	r0, r3
 800e21e:	f7ff fdcc 	bl	800ddba <LL_ADC_INJ_IsConversionOngoing>
 800e222:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800e226:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	f040 81a6 	bne.w	800e57c <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800e230:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e234:	2b00      	cmp	r3, #0
 800e236:	f040 81a1 	bne.w	800e57c <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	6818      	ldr	r0, [r3, #0]
 800e23e:	683b      	ldr	r3, [r7, #0]
 800e240:	6819      	ldr	r1, [r3, #0]
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	689b      	ldr	r3, [r3, #8]
 800e246:	461a      	mov	r2, r3
 800e248:	f7ff fca4 	bl	800db94 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	695a      	ldr	r2, [r3, #20]
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	68db      	ldr	r3, [r3, #12]
 800e256:	08db      	lsrs	r3, r3, #3
 800e258:	f003 0303 	and.w	r3, r3, #3
 800e25c:	005b      	lsls	r3, r3, #1
 800e25e:	fa02 f303 	lsl.w	r3, r2, r3
 800e262:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	691b      	ldr	r3, [r3, #16]
 800e26a:	2b04      	cmp	r3, #4
 800e26c:	d00a      	beq.n	800e284 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	6818      	ldr	r0, [r3, #0]
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	6919      	ldr	r1, [r3, #16]
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	681a      	ldr	r2, [r3, #0]
 800e27a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e27e:	f7ff fbf5 	bl	800da6c <LL_ADC_SetOffset>
 800e282:	e17b      	b.n	800e57c <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	2100      	movs	r1, #0
 800e28a:	4618      	mov	r0, r3
 800e28c:	f7ff fc12 	bl	800dab4 <LL_ADC_GetOffsetChannel>
 800e290:	4603      	mov	r3, r0
 800e292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e296:	2b00      	cmp	r3, #0
 800e298:	d10a      	bne.n	800e2b0 <HAL_ADC_ConfigChannel+0xf4>
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	2100      	movs	r1, #0
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	f7ff fc07 	bl	800dab4 <LL_ADC_GetOffsetChannel>
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	0e9b      	lsrs	r3, r3, #26
 800e2aa:	f003 021f 	and.w	r2, r3, #31
 800e2ae:	e01e      	b.n	800e2ee <HAL_ADC_ConfigChannel+0x132>
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	2100      	movs	r1, #0
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	f7ff fbfc 	bl	800dab4 <LL_ADC_GetOffsetChannel>
 800e2bc:	4603      	mov	r3, r0
 800e2be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e2c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e2c6:	fa93 f3a3 	rbit	r3, r3
 800e2ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 800e2ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e2d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 800e2d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d101      	bne.n	800e2e2 <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 800e2de:	2320      	movs	r3, #32
 800e2e0:	e004      	b.n	800e2ec <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 800e2e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e2e6:	fab3 f383 	clz	r3, r3
 800e2ea:	b2db      	uxtb	r3, r3
 800e2ec:	461a      	mov	r2, r3
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d105      	bne.n	800e306 <HAL_ADC_ConfigChannel+0x14a>
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	0e9b      	lsrs	r3, r3, #26
 800e300:	f003 031f 	and.w	r3, r3, #31
 800e304:	e018      	b.n	800e338 <HAL_ADC_ConfigChannel+0x17c>
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e30e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e312:	fa93 f3a3 	rbit	r3, r3
 800e316:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800e31a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e31e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800e322:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e326:	2b00      	cmp	r3, #0
 800e328:	d101      	bne.n	800e32e <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 800e32a:	2320      	movs	r3, #32
 800e32c:	e004      	b.n	800e338 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 800e32e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e332:	fab3 f383 	clz	r3, r3
 800e336:	b2db      	uxtb	r3, r3
 800e338:	429a      	cmp	r2, r3
 800e33a:	d106      	bne.n	800e34a <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	2200      	movs	r2, #0
 800e342:	2100      	movs	r1, #0
 800e344:	4618      	mov	r0, r3
 800e346:	f7ff fbcb 	bl	800dae0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	2101      	movs	r1, #1
 800e350:	4618      	mov	r0, r3
 800e352:	f7ff fbaf 	bl	800dab4 <LL_ADC_GetOffsetChannel>
 800e356:	4603      	mov	r3, r0
 800e358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d10a      	bne.n	800e376 <HAL_ADC_ConfigChannel+0x1ba>
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	2101      	movs	r1, #1
 800e366:	4618      	mov	r0, r3
 800e368:	f7ff fba4 	bl	800dab4 <LL_ADC_GetOffsetChannel>
 800e36c:	4603      	mov	r3, r0
 800e36e:	0e9b      	lsrs	r3, r3, #26
 800e370:	f003 021f 	and.w	r2, r3, #31
 800e374:	e01e      	b.n	800e3b4 <HAL_ADC_ConfigChannel+0x1f8>
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	2101      	movs	r1, #1
 800e37c:	4618      	mov	r0, r3
 800e37e:	f7ff fb99 	bl	800dab4 <LL_ADC_GetOffsetChannel>
 800e382:	4603      	mov	r3, r0
 800e384:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e388:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e38c:	fa93 f3a3 	rbit	r3, r3
 800e390:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800e394:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e398:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800e39c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d101      	bne.n	800e3a8 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 800e3a4:	2320      	movs	r3, #32
 800e3a6:	e004      	b.n	800e3b2 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 800e3a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e3ac:	fab3 f383 	clz	r3, r3
 800e3b0:	b2db      	uxtb	r3, r3
 800e3b2:	461a      	mov	r2, r3
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d105      	bne.n	800e3cc <HAL_ADC_ConfigChannel+0x210>
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	0e9b      	lsrs	r3, r3, #26
 800e3c6:	f003 031f 	and.w	r3, r3, #31
 800e3ca:	e018      	b.n	800e3fe <HAL_ADC_ConfigChannel+0x242>
 800e3cc:	683b      	ldr	r3, [r7, #0]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e3d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e3d8:	fa93 f3a3 	rbit	r3, r3
 800e3dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800e3e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e3e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800e3e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d101      	bne.n	800e3f4 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 800e3f0:	2320      	movs	r3, #32
 800e3f2:	e004      	b.n	800e3fe <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 800e3f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e3f8:	fab3 f383 	clz	r3, r3
 800e3fc:	b2db      	uxtb	r3, r3
 800e3fe:	429a      	cmp	r2, r3
 800e400:	d106      	bne.n	800e410 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	2200      	movs	r2, #0
 800e408:	2101      	movs	r1, #1
 800e40a:	4618      	mov	r0, r3
 800e40c:	f7ff fb68 	bl	800dae0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	2102      	movs	r1, #2
 800e416:	4618      	mov	r0, r3
 800e418:	f7ff fb4c 	bl	800dab4 <LL_ADC_GetOffsetChannel>
 800e41c:	4603      	mov	r3, r0
 800e41e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e422:	2b00      	cmp	r3, #0
 800e424:	d10a      	bne.n	800e43c <HAL_ADC_ConfigChannel+0x280>
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	2102      	movs	r1, #2
 800e42c:	4618      	mov	r0, r3
 800e42e:	f7ff fb41 	bl	800dab4 <LL_ADC_GetOffsetChannel>
 800e432:	4603      	mov	r3, r0
 800e434:	0e9b      	lsrs	r3, r3, #26
 800e436:	f003 021f 	and.w	r2, r3, #31
 800e43a:	e01e      	b.n	800e47a <HAL_ADC_ConfigChannel+0x2be>
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	2102      	movs	r1, #2
 800e442:	4618      	mov	r0, r3
 800e444:	f7ff fb36 	bl	800dab4 <LL_ADC_GetOffsetChannel>
 800e448:	4603      	mov	r3, r0
 800e44a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e44e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e452:	fa93 f3a3 	rbit	r3, r3
 800e456:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800e45a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e45e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800e462:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e466:	2b00      	cmp	r3, #0
 800e468:	d101      	bne.n	800e46e <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 800e46a:	2320      	movs	r3, #32
 800e46c:	e004      	b.n	800e478 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800e46e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e472:	fab3 f383 	clz	r3, r3
 800e476:	b2db      	uxtb	r3, r3
 800e478:	461a      	mov	r2, r3
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e482:	2b00      	cmp	r3, #0
 800e484:	d105      	bne.n	800e492 <HAL_ADC_ConfigChannel+0x2d6>
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	0e9b      	lsrs	r3, r3, #26
 800e48c:	f003 031f 	and.w	r3, r3, #31
 800e490:	e016      	b.n	800e4c0 <HAL_ADC_ConfigChannel+0x304>
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e49a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e49e:	fa93 f3a3 	rbit	r3, r3
 800e4a2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800e4a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e4a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800e4aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d101      	bne.n	800e4b6 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 800e4b2:	2320      	movs	r3, #32
 800e4b4:	e004      	b.n	800e4c0 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 800e4b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e4ba:	fab3 f383 	clz	r3, r3
 800e4be:	b2db      	uxtb	r3, r3
 800e4c0:	429a      	cmp	r2, r3
 800e4c2:	d106      	bne.n	800e4d2 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	2102      	movs	r1, #2
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f7ff fb07 	bl	800dae0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	2103      	movs	r1, #3
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f7ff faeb 	bl	800dab4 <LL_ADC_GetOffsetChannel>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d10a      	bne.n	800e4fe <HAL_ADC_ConfigChannel+0x342>
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	2103      	movs	r1, #3
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f7ff fae0 	bl	800dab4 <LL_ADC_GetOffsetChannel>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	0e9b      	lsrs	r3, r3, #26
 800e4f8:	f003 021f 	and.w	r2, r3, #31
 800e4fc:	e017      	b.n	800e52e <HAL_ADC_ConfigChannel+0x372>
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	2103      	movs	r1, #3
 800e504:	4618      	mov	r0, r3
 800e506:	f7ff fad5 	bl	800dab4 <LL_ADC_GetOffsetChannel>
 800e50a:	4603      	mov	r3, r0
 800e50c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e50e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e510:	fa93 f3a3 	rbit	r3, r3
 800e514:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800e516:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e518:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800e51a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d101      	bne.n	800e524 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 800e520:	2320      	movs	r3, #32
 800e522:	e003      	b.n	800e52c <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 800e524:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e526:	fab3 f383 	clz	r3, r3
 800e52a:	b2db      	uxtb	r3, r3
 800e52c:	461a      	mov	r2, r3
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e536:	2b00      	cmp	r3, #0
 800e538:	d105      	bne.n	800e546 <HAL_ADC_ConfigChannel+0x38a>
 800e53a:	683b      	ldr	r3, [r7, #0]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	0e9b      	lsrs	r3, r3, #26
 800e540:	f003 031f 	and.w	r3, r3, #31
 800e544:	e011      	b.n	800e56a <HAL_ADC_ConfigChannel+0x3ae>
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e54c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e54e:	fa93 f3a3 	rbit	r3, r3
 800e552:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800e554:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e556:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800e558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d101      	bne.n	800e562 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 800e55e:	2320      	movs	r3, #32
 800e560:	e003      	b.n	800e56a <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 800e562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e564:	fab3 f383 	clz	r3, r3
 800e568:	b2db      	uxtb	r3, r3
 800e56a:	429a      	cmp	r2, r3
 800e56c:	d106      	bne.n	800e57c <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	2200      	movs	r2, #0
 800e574:	2103      	movs	r1, #3
 800e576:	4618      	mov	r0, r3
 800e578:	f7ff fab2 	bl	800dae0 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	4618      	mov	r0, r3
 800e582:	f7ff fbcd 	bl	800dd20 <LL_ADC_IsEnabled>
 800e586:	4603      	mov	r3, r0
 800e588:	2b00      	cmp	r3, #0
 800e58a:	f040 81c2 	bne.w	800e912 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	6818      	ldr	r0, [r3, #0]
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	6819      	ldr	r1, [r3, #0]
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	68db      	ldr	r3, [r3, #12]
 800e59a:	461a      	mov	r2, r3
 800e59c:	f7ff fb26 	bl	800dbec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800e5a0:	683b      	ldr	r3, [r7, #0]
 800e5a2:	68db      	ldr	r3, [r3, #12]
 800e5a4:	4a8e      	ldr	r2, [pc, #568]	; (800e7e0 <HAL_ADC_ConfigChannel+0x624>)
 800e5a6:	4293      	cmp	r3, r2
 800e5a8:	f040 8130 	bne.w	800e80c <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800e5b0:	683b      	ldr	r3, [r7, #0]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d10b      	bne.n	800e5d4 <HAL_ADC_ConfigChannel+0x418>
 800e5bc:	683b      	ldr	r3, [r7, #0]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	0e9b      	lsrs	r3, r3, #26
 800e5c2:	3301      	adds	r3, #1
 800e5c4:	f003 031f 	and.w	r3, r3, #31
 800e5c8:	2b09      	cmp	r3, #9
 800e5ca:	bf94      	ite	ls
 800e5cc:	2301      	movls	r3, #1
 800e5ce:	2300      	movhi	r3, #0
 800e5d0:	b2db      	uxtb	r3, r3
 800e5d2:	e019      	b.n	800e608 <HAL_ADC_ConfigChannel+0x44c>
 800e5d4:	683b      	ldr	r3, [r7, #0]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e5da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e5dc:	fa93 f3a3 	rbit	r3, r3
 800e5e0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800e5e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e5e4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800e5e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d101      	bne.n	800e5f0 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 800e5ec:	2320      	movs	r3, #32
 800e5ee:	e003      	b.n	800e5f8 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 800e5f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e5f2:	fab3 f383 	clz	r3, r3
 800e5f6:	b2db      	uxtb	r3, r3
 800e5f8:	3301      	adds	r3, #1
 800e5fa:	f003 031f 	and.w	r3, r3, #31
 800e5fe:	2b09      	cmp	r3, #9
 800e600:	bf94      	ite	ls
 800e602:	2301      	movls	r3, #1
 800e604:	2300      	movhi	r3, #0
 800e606:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d079      	beq.n	800e700 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800e60c:	683b      	ldr	r3, [r7, #0]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e614:	2b00      	cmp	r3, #0
 800e616:	d107      	bne.n	800e628 <HAL_ADC_ConfigChannel+0x46c>
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	0e9b      	lsrs	r3, r3, #26
 800e61e:	3301      	adds	r3, #1
 800e620:	069b      	lsls	r3, r3, #26
 800e622:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800e626:	e015      	b.n	800e654 <HAL_ADC_ConfigChannel+0x498>
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e62e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e630:	fa93 f3a3 	rbit	r3, r3
 800e634:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800e636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e638:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800e63a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d101      	bne.n	800e644 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800e640:	2320      	movs	r3, #32
 800e642:	e003      	b.n	800e64c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800e644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e646:	fab3 f383 	clz	r3, r3
 800e64a:	b2db      	uxtb	r3, r3
 800e64c:	3301      	adds	r3, #1
 800e64e:	069b      	lsls	r3, r3, #26
 800e650:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800e654:	683b      	ldr	r3, [r7, #0]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d109      	bne.n	800e674 <HAL_ADC_ConfigChannel+0x4b8>
 800e660:	683b      	ldr	r3, [r7, #0]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	0e9b      	lsrs	r3, r3, #26
 800e666:	3301      	adds	r3, #1
 800e668:	f003 031f 	and.w	r3, r3, #31
 800e66c:	2101      	movs	r1, #1
 800e66e:	fa01 f303 	lsl.w	r3, r1, r3
 800e672:	e017      	b.n	800e6a4 <HAL_ADC_ConfigChannel+0x4e8>
 800e674:	683b      	ldr	r3, [r7, #0]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e67a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e67c:	fa93 f3a3 	rbit	r3, r3
 800e680:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800e682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e684:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800e686:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d101      	bne.n	800e690 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 800e68c:	2320      	movs	r3, #32
 800e68e:	e003      	b.n	800e698 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 800e690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e692:	fab3 f383 	clz	r3, r3
 800e696:	b2db      	uxtb	r3, r3
 800e698:	3301      	adds	r3, #1
 800e69a:	f003 031f 	and.w	r3, r3, #31
 800e69e:	2101      	movs	r1, #1
 800e6a0:	fa01 f303 	lsl.w	r3, r1, r3
 800e6a4:	ea42 0103 	orr.w	r1, r2, r3
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d10a      	bne.n	800e6ca <HAL_ADC_ConfigChannel+0x50e>
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	0e9b      	lsrs	r3, r3, #26
 800e6ba:	3301      	adds	r3, #1
 800e6bc:	f003 021f 	and.w	r2, r3, #31
 800e6c0:	4613      	mov	r3, r2
 800e6c2:	005b      	lsls	r3, r3, #1
 800e6c4:	4413      	add	r3, r2
 800e6c6:	051b      	lsls	r3, r3, #20
 800e6c8:	e018      	b.n	800e6fc <HAL_ADC_ConfigChannel+0x540>
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6d2:	fa93 f3a3 	rbit	r3, r3
 800e6d6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800e6d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800e6dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d101      	bne.n	800e6e6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800e6e2:	2320      	movs	r3, #32
 800e6e4:	e003      	b.n	800e6ee <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800e6e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6e8:	fab3 f383 	clz	r3, r3
 800e6ec:	b2db      	uxtb	r3, r3
 800e6ee:	3301      	adds	r3, #1
 800e6f0:	f003 021f 	and.w	r2, r3, #31
 800e6f4:	4613      	mov	r3, r2
 800e6f6:	005b      	lsls	r3, r3, #1
 800e6f8:	4413      	add	r3, r2
 800e6fa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800e6fc:	430b      	orrs	r3, r1
 800e6fe:	e080      	b.n	800e802 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800e700:	683b      	ldr	r3, [r7, #0]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d107      	bne.n	800e71c <HAL_ADC_ConfigChannel+0x560>
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	0e9b      	lsrs	r3, r3, #26
 800e712:	3301      	adds	r3, #1
 800e714:	069b      	lsls	r3, r3, #26
 800e716:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800e71a:	e015      	b.n	800e748 <HAL_ADC_ConfigChannel+0x58c>
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e724:	fa93 f3a3 	rbit	r3, r3
 800e728:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800e72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e72c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800e72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e730:	2b00      	cmp	r3, #0
 800e732:	d101      	bne.n	800e738 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 800e734:	2320      	movs	r3, #32
 800e736:	e003      	b.n	800e740 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 800e738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e73a:	fab3 f383 	clz	r3, r3
 800e73e:	b2db      	uxtb	r3, r3
 800e740:	3301      	adds	r3, #1
 800e742:	069b      	lsls	r3, r3, #26
 800e744:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e750:	2b00      	cmp	r3, #0
 800e752:	d109      	bne.n	800e768 <HAL_ADC_ConfigChannel+0x5ac>
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	0e9b      	lsrs	r3, r3, #26
 800e75a:	3301      	adds	r3, #1
 800e75c:	f003 031f 	and.w	r3, r3, #31
 800e760:	2101      	movs	r1, #1
 800e762:	fa01 f303 	lsl.w	r3, r1, r3
 800e766:	e017      	b.n	800e798 <HAL_ADC_ConfigChannel+0x5dc>
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e76e:	6a3b      	ldr	r3, [r7, #32]
 800e770:	fa93 f3a3 	rbit	r3, r3
 800e774:	61fb      	str	r3, [r7, #28]
  return result;
 800e776:	69fb      	ldr	r3, [r7, #28]
 800e778:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800e77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d101      	bne.n	800e784 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 800e780:	2320      	movs	r3, #32
 800e782:	e003      	b.n	800e78c <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 800e784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e786:	fab3 f383 	clz	r3, r3
 800e78a:	b2db      	uxtb	r3, r3
 800e78c:	3301      	adds	r3, #1
 800e78e:	f003 031f 	and.w	r3, r3, #31
 800e792:	2101      	movs	r1, #1
 800e794:	fa01 f303 	lsl.w	r3, r1, r3
 800e798:	ea42 0103 	orr.w	r1, r2, r3
 800e79c:	683b      	ldr	r3, [r7, #0]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d10d      	bne.n	800e7c4 <HAL_ADC_ConfigChannel+0x608>
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	0e9b      	lsrs	r3, r3, #26
 800e7ae:	3301      	adds	r3, #1
 800e7b0:	f003 021f 	and.w	r2, r3, #31
 800e7b4:	4613      	mov	r3, r2
 800e7b6:	005b      	lsls	r3, r3, #1
 800e7b8:	4413      	add	r3, r2
 800e7ba:	3b1e      	subs	r3, #30
 800e7bc:	051b      	lsls	r3, r3, #20
 800e7be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e7c2:	e01d      	b.n	800e800 <HAL_ADC_ConfigChannel+0x644>
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e7ca:	697b      	ldr	r3, [r7, #20]
 800e7cc:	fa93 f3a3 	rbit	r3, r3
 800e7d0:	613b      	str	r3, [r7, #16]
  return result;
 800e7d2:	693b      	ldr	r3, [r7, #16]
 800e7d4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800e7d6:	69bb      	ldr	r3, [r7, #24]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d103      	bne.n	800e7e4 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 800e7dc:	2320      	movs	r3, #32
 800e7de:	e005      	b.n	800e7ec <HAL_ADC_ConfigChannel+0x630>
 800e7e0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800e7e4:	69bb      	ldr	r3, [r7, #24]
 800e7e6:	fab3 f383 	clz	r3, r3
 800e7ea:	b2db      	uxtb	r3, r3
 800e7ec:	3301      	adds	r3, #1
 800e7ee:	f003 021f 	and.w	r2, r3, #31
 800e7f2:	4613      	mov	r3, r2
 800e7f4:	005b      	lsls	r3, r3, #1
 800e7f6:	4413      	add	r3, r2
 800e7f8:	3b1e      	subs	r3, #30
 800e7fa:	051b      	lsls	r3, r3, #20
 800e7fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800e800:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 800e802:	683a      	ldr	r2, [r7, #0]
 800e804:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800e806:	4619      	mov	r1, r3
 800e808:	f7ff f9c4 	bl	800db94 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	681a      	ldr	r2, [r3, #0]
 800e810:	4b45      	ldr	r3, [pc, #276]	; (800e928 <HAL_ADC_ConfigChannel+0x76c>)
 800e812:	4013      	ands	r3, r2
 800e814:	2b00      	cmp	r3, #0
 800e816:	d07c      	beq.n	800e912 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800e818:	4844      	ldr	r0, [pc, #272]	; (800e92c <HAL_ADC_ConfigChannel+0x770>)
 800e81a:	f7ff f919 	bl	800da50 <LL_ADC_GetCommonPathInternalCh>
 800e81e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800e822:	4843      	ldr	r0, [pc, #268]	; (800e930 <HAL_ADC_ConfigChannel+0x774>)
 800e824:	f7ff fa7c 	bl	800dd20 <LL_ADC_IsEnabled>
 800e828:	4603      	mov	r3, r0
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d15e      	bne.n	800e8ec <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	4a40      	ldr	r2, [pc, #256]	; (800e934 <HAL_ADC_ConfigChannel+0x778>)
 800e834:	4293      	cmp	r3, r2
 800e836:	d127      	bne.n	800e888 <HAL_ADC_ConfigChannel+0x6cc>
 800e838:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e83c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e840:	2b00      	cmp	r3, #0
 800e842:	d121      	bne.n	800e888 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	4a39      	ldr	r2, [pc, #228]	; (800e930 <HAL_ADC_ConfigChannel+0x774>)
 800e84a:	4293      	cmp	r3, r2
 800e84c:	d161      	bne.n	800e912 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800e84e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e852:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e856:	4619      	mov	r1, r3
 800e858:	4834      	ldr	r0, [pc, #208]	; (800e92c <HAL_ADC_ConfigChannel+0x770>)
 800e85a:	f7ff f8e6 	bl	800da2a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800e85e:	4b36      	ldr	r3, [pc, #216]	; (800e938 <HAL_ADC_ConfigChannel+0x77c>)
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	099b      	lsrs	r3, r3, #6
 800e864:	4a35      	ldr	r2, [pc, #212]	; (800e93c <HAL_ADC_ConfigChannel+0x780>)
 800e866:	fba2 2303 	umull	r2, r3, r2, r3
 800e86a:	099b      	lsrs	r3, r3, #6
 800e86c:	1c5a      	adds	r2, r3, #1
 800e86e:	4613      	mov	r3, r2
 800e870:	005b      	lsls	r3, r3, #1
 800e872:	4413      	add	r3, r2
 800e874:	009b      	lsls	r3, r3, #2
 800e876:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800e878:	e002      	b.n	800e880 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	3b01      	subs	r3, #1
 800e87e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d1f9      	bne.n	800e87a <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800e886:	e044      	b.n	800e912 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	4a2c      	ldr	r2, [pc, #176]	; (800e940 <HAL_ADC_ConfigChannel+0x784>)
 800e88e:	4293      	cmp	r3, r2
 800e890:	d113      	bne.n	800e8ba <HAL_ADC_ConfigChannel+0x6fe>
 800e892:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e896:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d10d      	bne.n	800e8ba <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	4a23      	ldr	r2, [pc, #140]	; (800e930 <HAL_ADC_ConfigChannel+0x774>)
 800e8a4:	4293      	cmp	r3, r2
 800e8a6:	d134      	bne.n	800e912 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800e8a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e8ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e8b0:	4619      	mov	r1, r3
 800e8b2:	481e      	ldr	r0, [pc, #120]	; (800e92c <HAL_ADC_ConfigChannel+0x770>)
 800e8b4:	f7ff f8b9 	bl	800da2a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800e8b8:	e02b      	b.n	800e912 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	4a21      	ldr	r2, [pc, #132]	; (800e944 <HAL_ADC_ConfigChannel+0x788>)
 800e8c0:	4293      	cmp	r3, r2
 800e8c2:	d126      	bne.n	800e912 <HAL_ADC_ConfigChannel+0x756>
 800e8c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e8c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d120      	bne.n	800e912 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	4a16      	ldr	r2, [pc, #88]	; (800e930 <HAL_ADC_ConfigChannel+0x774>)
 800e8d6:	4293      	cmp	r3, r2
 800e8d8:	d11b      	bne.n	800e912 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800e8da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e8de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800e8e2:	4619      	mov	r1, r3
 800e8e4:	4811      	ldr	r0, [pc, #68]	; (800e92c <HAL_ADC_ConfigChannel+0x770>)
 800e8e6:	f7ff f8a0 	bl	800da2a <LL_ADC_SetCommonPathInternalCh>
 800e8ea:	e012      	b.n	800e912 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8f0:	f043 0220 	orr.w	r2, r3, #32
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800e8fe:	e008      	b.n	800e912 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e904:	f043 0220 	orr.w	r2, r3, #32
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800e90c:	2301      	movs	r3, #1
 800e90e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2200      	movs	r2, #0
 800e916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 800e91a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800e91e:	4618      	mov	r0, r3
 800e920:	37d8      	adds	r7, #216	; 0xd8
 800e922:	46bd      	mov	sp, r7
 800e924:	bd80      	pop	{r7, pc}
 800e926:	bf00      	nop
 800e928:	80080000 	.word	0x80080000
 800e92c:	50040300 	.word	0x50040300
 800e930:	50040000 	.word	0x50040000
 800e934:	c7520000 	.word	0xc7520000
 800e938:	20000008 	.word	0x20000008
 800e93c:	053e2d63 	.word	0x053e2d63
 800e940:	cb840000 	.word	0xcb840000
 800e944:	80000001 	.word	0x80000001

0800e948 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b084      	sub	sp, #16
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800e950:	2300      	movs	r3, #0
 800e952:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	4618      	mov	r0, r3
 800e95a:	f7ff f9e1 	bl	800dd20 <LL_ADC_IsEnabled>
 800e95e:	4603      	mov	r3, r0
 800e960:	2b00      	cmp	r3, #0
 800e962:	d15e      	bne.n	800ea22 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	689a      	ldr	r2, [r3, #8]
 800e96a:	4b30      	ldr	r3, [pc, #192]	; (800ea2c <ADC_Enable+0xe4>)
 800e96c:	4013      	ands	r3, r2
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d00d      	beq.n	800e98e <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e976:	f043 0210 	orr.w	r2, r3, #16
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e982:	f043 0201 	orr.w	r2, r3, #1
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800e98a:	2301      	movs	r3, #1
 800e98c:	e04a      	b.n	800ea24 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	4618      	mov	r0, r3
 800e994:	f7ff f99c 	bl	800dcd0 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800e998:	4825      	ldr	r0, [pc, #148]	; (800ea30 <ADC_Enable+0xe8>)
 800e99a:	f7ff f859 	bl	800da50 <LL_ADC_GetCommonPathInternalCh>
 800e99e:	4603      	mov	r3, r0
 800e9a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d00f      	beq.n	800e9c8 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800e9a8:	4b22      	ldr	r3, [pc, #136]	; (800ea34 <ADC_Enable+0xec>)
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	099b      	lsrs	r3, r3, #6
 800e9ae:	4a22      	ldr	r2, [pc, #136]	; (800ea38 <ADC_Enable+0xf0>)
 800e9b0:	fba2 2303 	umull	r2, r3, r2, r3
 800e9b4:	099b      	lsrs	r3, r3, #6
 800e9b6:	3301      	adds	r3, #1
 800e9b8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800e9ba:	e002      	b.n	800e9c2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	3b01      	subs	r3, #1
 800e9c0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800e9c2:	68bb      	ldr	r3, [r7, #8]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d1f9      	bne.n	800e9bc <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800e9c8:	f7fe ffd8 	bl	800d97c <HAL_GetTick>
 800e9cc:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800e9ce:	e021      	b.n	800ea14 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	f7ff f9a3 	bl	800dd20 <LL_ADC_IsEnabled>
 800e9da:	4603      	mov	r3, r0
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d104      	bne.n	800e9ea <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	f7ff f973 	bl	800dcd0 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800e9ea:	f7fe ffc7 	bl	800d97c <HAL_GetTick>
 800e9ee:	4602      	mov	r2, r0
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	1ad3      	subs	r3, r2, r3
 800e9f4:	2b02      	cmp	r3, #2
 800e9f6:	d90d      	bls.n	800ea14 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9fc:	f043 0210 	orr.w	r2, r3, #16
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea08:	f043 0201 	orr.w	r2, r3, #1
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 800ea10:	2301      	movs	r3, #1
 800ea12:	e007      	b.n	800ea24 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	f003 0301 	and.w	r3, r3, #1
 800ea1e:	2b01      	cmp	r3, #1
 800ea20:	d1d6      	bne.n	800e9d0 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800ea22:	2300      	movs	r3, #0
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	3710      	adds	r7, #16
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	bd80      	pop	{r7, pc}
 800ea2c:	8000003f 	.word	0x8000003f
 800ea30:	50040300 	.word	0x50040300
 800ea34:	20000008 	.word	0x20000008
 800ea38:	053e2d63 	.word	0x053e2d63

0800ea3c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b084      	sub	sp, #16
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	4618      	mov	r0, r3
 800ea4a:	f7ff f97c 	bl	800dd46 <LL_ADC_IsDisableOngoing>
 800ea4e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	4618      	mov	r0, r3
 800ea56:	f7ff f963 	bl	800dd20 <LL_ADC_IsEnabled>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d047      	beq.n	800eaf0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d144      	bne.n	800eaf0 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	689b      	ldr	r3, [r3, #8]
 800ea6c:	f003 030d 	and.w	r3, r3, #13
 800ea70:	2b01      	cmp	r3, #1
 800ea72:	d10c      	bne.n	800ea8e <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f7ff f93d 	bl	800dcf8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	2203      	movs	r2, #3
 800ea84:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800ea86:	f7fe ff79 	bl	800d97c <HAL_GetTick>
 800ea8a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800ea8c:	e029      	b.n	800eae2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea92:	f043 0210 	orr.w	r2, r3, #16
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea9e:	f043 0201 	orr.w	r2, r3, #1
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	e023      	b.n	800eaf2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800eaaa:	f7fe ff67 	bl	800d97c <HAL_GetTick>
 800eaae:	4602      	mov	r2, r0
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	1ad3      	subs	r3, r2, r3
 800eab4:	2b02      	cmp	r3, #2
 800eab6:	d914      	bls.n	800eae2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	689b      	ldr	r3, [r3, #8]
 800eabe:	f003 0301 	and.w	r3, r3, #1
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d00d      	beq.n	800eae2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eaca:	f043 0210 	orr.w	r2, r3, #16
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ead6:	f043 0201 	orr.w	r2, r3, #1
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800eade:	2301      	movs	r3, #1
 800eae0:	e007      	b.n	800eaf2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	689b      	ldr	r3, [r3, #8]
 800eae8:	f003 0301 	and.w	r3, r3, #1
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d1dc      	bne.n	800eaaa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800eaf0:	2300      	movs	r3, #0
}
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	3710      	adds	r7, #16
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	bd80      	pop	{r7, pc}

0800eafa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800eafa:	b580      	push	{r7, lr}
 800eafc:	b084      	sub	sp, #16
 800eafe:	af00      	add	r7, sp, #0
 800eb00:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb06:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb0c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d14b      	bne.n	800ebac <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb18:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	f003 0308 	and.w	r3, r3, #8
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d021      	beq.n	800eb72 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	4618      	mov	r0, r3
 800eb34:	f7fe ffef 	bl	800db16 <LL_ADC_REG_IsTriggerSourceSWStart>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d032      	beq.n	800eba4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	68db      	ldr	r3, [r3, #12]
 800eb44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d12b      	bne.n	800eba4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d11f      	bne.n	800eba4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb68:	f043 0201 	orr.w	r2, r3, #1
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	655a      	str	r2, [r3, #84]	; 0x54
 800eb70:	e018      	b.n	800eba4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	68db      	ldr	r3, [r3, #12]
 800eb78:	f003 0302 	and.w	r3, r3, #2
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d111      	bne.n	800eba4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d105      	bne.n	800eba4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb9c:	f043 0201 	orr.w	r2, r3, #1
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800eba4:	68f8      	ldr	r0, [r7, #12]
 800eba6:	f7ff faeb 	bl	800e180 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800ebaa:	e00e      	b.n	800ebca <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebb0:	f003 0310 	and.w	r3, r3, #16
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d003      	beq.n	800ebc0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800ebb8:	68f8      	ldr	r0, [r7, #12]
 800ebba:	f7ff faf5 	bl	800e1a8 <HAL_ADC_ErrorCallback>
}
 800ebbe:	e004      	b.n	800ebca <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ebc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebc6:	6878      	ldr	r0, [r7, #4]
 800ebc8:	4798      	blx	r3
}
 800ebca:	bf00      	nop
 800ebcc:	3710      	adds	r7, #16
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bd80      	pop	{r7, pc}

0800ebd2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800ebd2:	b580      	push	{r7, lr}
 800ebd4:	b084      	sub	sp, #16
 800ebd6:	af00      	add	r7, sp, #0
 800ebd8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebde:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800ebe0:	68f8      	ldr	r0, [r7, #12]
 800ebe2:	f7ff fad7 	bl	800e194 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800ebe6:	bf00      	nop
 800ebe8:	3710      	adds	r7, #16
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd80      	pop	{r7, pc}

0800ebee <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800ebee:	b580      	push	{r7, lr}
 800ebf0:	b084      	sub	sp, #16
 800ebf2:	af00      	add	r7, sp, #0
 800ebf4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebfa:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec0c:	f043 0204 	orr.w	r2, r3, #4
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800ec14:	68f8      	ldr	r0, [r7, #12]
 800ec16:	f7ff fac7 	bl	800e1a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800ec1a:	bf00      	nop
 800ec1c:	3710      	adds	r7, #16
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bd80      	pop	{r7, pc}

0800ec22 <LL_ADC_StartCalibration>:
{
 800ec22:	b480      	push	{r7}
 800ec24:	b083      	sub	sp, #12
 800ec26:	af00      	add	r7, sp, #0
 800ec28:	6078      	str	r0, [r7, #4]
 800ec2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	689b      	ldr	r3, [r3, #8]
 800ec30:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800ec34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800ec38:	683a      	ldr	r2, [r7, #0]
 800ec3a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800ec3e:	4313      	orrs	r3, r2
 800ec40:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	609a      	str	r2, [r3, #8]
}
 800ec48:	bf00      	nop
 800ec4a:	370c      	adds	r7, #12
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec52:	4770      	bx	lr

0800ec54 <LL_ADC_IsCalibrationOnGoing>:
{
 800ec54:	b480      	push	{r7}
 800ec56:	b083      	sub	sp, #12
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	689b      	ldr	r3, [r3, #8]
 800ec60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ec64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ec68:	d101      	bne.n	800ec6e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800ec6a:	2301      	movs	r3, #1
 800ec6c:	e000      	b.n	800ec70 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800ec6e:	2300      	movs	r3, #0
}
 800ec70:	4618      	mov	r0, r3
 800ec72:	370c      	adds	r7, #12
 800ec74:	46bd      	mov	sp, r7
 800ec76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7a:	4770      	bx	lr

0800ec7c <HAL_ADCEx_Calibration_Start>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b084      	sub	sp, #16
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
 800ec84:	6039      	str	r1, [r7, #0]
  uint32_t adc_clk_async_presc;
  __IO uint32_t delay_cpu_cycles;
#endif /* ADC_SUPPORT_2_5_MSPS */

  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800ec86:	2300      	movs	r3, #0
 800ec88:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ec90:	2b01      	cmp	r3, #1
 800ec92:	d101      	bne.n	800ec98 <HAL_ADCEx_Calibration_Start+0x1c>
 800ec94:	2302      	movs	r3, #2
 800ec96:	e04d      	b.n	800ed34 <HAL_ADCEx_Calibration_Start+0xb8>
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	2201      	movs	r2, #1
 800ec9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800eca0:	6878      	ldr	r0, [r7, #4]
 800eca2:	f7ff fecb 	bl	800ea3c <ADC_Disable>
 800eca6:	4603      	mov	r3, r0
 800eca8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800ecaa:	7bfb      	ldrb	r3, [r7, #15]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d136      	bne.n	800ed1e <HAL_ADCEx_Calibration_Start+0xa2>
#if defined(ADC_SUPPORT_2_5_MSPS)
    ADC_STATE_CLR_SET(hadc->State,
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
#else
    ADC_STATE_CLR_SET(hadc->State,
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecb4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800ecb8:	f023 0302 	bic.w	r3, r3, #2
 800ecbc:	f043 0202 	orr.w	r2, r3, #2
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	655a      	str	r2, [r3, #84]	; 0x54
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);

#else
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	6839      	ldr	r1, [r7, #0]
 800ecca:	4618      	mov	r0, r3
 800eccc:	f7ff ffa9 	bl	800ec22 <LL_ADC_StartCalibration>
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800ecd0:	e014      	b.n	800ecfc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800ecd2:	68bb      	ldr	r3, [r7, #8]
 800ecd4:	3301      	adds	r3, #1
 800ecd6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800ecd8:	68bb      	ldr	r3, [r7, #8]
 800ecda:	4a18      	ldr	r2, [pc, #96]	; (800ed3c <HAL_ADCEx_Calibration_Start+0xc0>)
 800ecdc:	4293      	cmp	r3, r2
 800ecde:	d90d      	bls.n	800ecfc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ece4:	f023 0312 	bic.w	r3, r3, #18
 800ece8:	f043 0210 	orr.w	r2, r3, #16
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800ecf8:	2301      	movs	r3, #1
 800ecfa:	e01b      	b.n	800ed34 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	4618      	mov	r0, r3
 800ed02:	f7ff ffa7 	bl	800ec54 <LL_ADC_IsCalibrationOnGoing>
 800ed06:	4603      	mov	r3, r0
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d1e2      	bne.n	800ecd2 <HAL_ADCEx_Calibration_Start+0x56>
    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed10:	f023 0303 	bic.w	r3, r3, #3
 800ed14:	f043 0201 	orr.w	r2, r3, #1
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	655a      	str	r2, [r3, #84]	; 0x54
 800ed1c:	e005      	b.n	800ed2a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed22:	f043 0210 	orr.w	r2, r3, #16
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800ed32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed34:	4618      	mov	r0, r3
 800ed36:	3710      	adds	r7, #16
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}
 800ed3c:	00026aaa 	.word	0x00026aaa

0800ed40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ed40:	b480      	push	{r7}
 800ed42:	b085      	sub	sp, #20
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f003 0307 	and.w	r3, r3, #7
 800ed4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ed50:	4b0c      	ldr	r3, [pc, #48]	; (800ed84 <__NVIC_SetPriorityGrouping+0x44>)
 800ed52:	68db      	ldr	r3, [r3, #12]
 800ed54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ed56:	68ba      	ldr	r2, [r7, #8]
 800ed58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ed5c:	4013      	ands	r3, r2
 800ed5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ed64:	68bb      	ldr	r3, [r7, #8]
 800ed66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800ed68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800ed6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ed70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ed72:	4a04      	ldr	r2, [pc, #16]	; (800ed84 <__NVIC_SetPriorityGrouping+0x44>)
 800ed74:	68bb      	ldr	r3, [r7, #8]
 800ed76:	60d3      	str	r3, [r2, #12]
}
 800ed78:	bf00      	nop
 800ed7a:	3714      	adds	r7, #20
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed82:	4770      	bx	lr
 800ed84:	e000ed00 	.word	0xe000ed00

0800ed88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800ed88:	b480      	push	{r7}
 800ed8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ed8c:	4b04      	ldr	r3, [pc, #16]	; (800eda0 <__NVIC_GetPriorityGrouping+0x18>)
 800ed8e:	68db      	ldr	r3, [r3, #12]
 800ed90:	0a1b      	lsrs	r3, r3, #8
 800ed92:	f003 0307 	and.w	r3, r3, #7
}
 800ed96:	4618      	mov	r0, r3
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9e:	4770      	bx	lr
 800eda0:	e000ed00 	.word	0xe000ed00

0800eda4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800eda4:	b480      	push	{r7}
 800eda6:	b083      	sub	sp, #12
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	4603      	mov	r3, r0
 800edac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800edae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	db0b      	blt.n	800edce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800edb6:	79fb      	ldrb	r3, [r7, #7]
 800edb8:	f003 021f 	and.w	r2, r3, #31
 800edbc:	4907      	ldr	r1, [pc, #28]	; (800eddc <__NVIC_EnableIRQ+0x38>)
 800edbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800edc2:	095b      	lsrs	r3, r3, #5
 800edc4:	2001      	movs	r0, #1
 800edc6:	fa00 f202 	lsl.w	r2, r0, r2
 800edca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800edce:	bf00      	nop
 800edd0:	370c      	adds	r7, #12
 800edd2:	46bd      	mov	sp, r7
 800edd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd8:	4770      	bx	lr
 800edda:	bf00      	nop
 800eddc:	e000e100 	.word	0xe000e100

0800ede0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800ede0:	b480      	push	{r7}
 800ede2:	b083      	sub	sp, #12
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	4603      	mov	r3, r0
 800ede8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800edea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	db12      	blt.n	800ee18 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800edf2:	79fb      	ldrb	r3, [r7, #7]
 800edf4:	f003 021f 	and.w	r2, r3, #31
 800edf8:	490a      	ldr	r1, [pc, #40]	; (800ee24 <__NVIC_DisableIRQ+0x44>)
 800edfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800edfe:	095b      	lsrs	r3, r3, #5
 800ee00:	2001      	movs	r0, #1
 800ee02:	fa00 f202 	lsl.w	r2, r0, r2
 800ee06:	3320      	adds	r3, #32
 800ee08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800ee0c:	f3bf 8f4f 	dsb	sy
}
 800ee10:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ee12:	f3bf 8f6f 	isb	sy
}
 800ee16:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800ee18:	bf00      	nop
 800ee1a:	370c      	adds	r7, #12
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee22:	4770      	bx	lr
 800ee24:	e000e100 	.word	0xe000e100

0800ee28 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800ee28:	b480      	push	{r7}
 800ee2a:	b083      	sub	sp, #12
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	4603      	mov	r3, r0
 800ee30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ee32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	db0c      	blt.n	800ee54 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ee3a:	79fb      	ldrb	r3, [r7, #7]
 800ee3c:	f003 021f 	and.w	r2, r3, #31
 800ee40:	4907      	ldr	r1, [pc, #28]	; (800ee60 <__NVIC_SetPendingIRQ+0x38>)
 800ee42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee46:	095b      	lsrs	r3, r3, #5
 800ee48:	2001      	movs	r0, #1
 800ee4a:	fa00 f202 	lsl.w	r2, r0, r2
 800ee4e:	3340      	adds	r3, #64	; 0x40
 800ee50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800ee54:	bf00      	nop
 800ee56:	370c      	adds	r7, #12
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5e:	4770      	bx	lr
 800ee60:	e000e100 	.word	0xe000e100

0800ee64 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800ee64:	b480      	push	{r7}
 800ee66:	b083      	sub	sp, #12
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ee6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	db0c      	blt.n	800ee90 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ee76:	79fb      	ldrb	r3, [r7, #7]
 800ee78:	f003 021f 	and.w	r2, r3, #31
 800ee7c:	4907      	ldr	r1, [pc, #28]	; (800ee9c <__NVIC_ClearPendingIRQ+0x38>)
 800ee7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee82:	095b      	lsrs	r3, r3, #5
 800ee84:	2001      	movs	r0, #1
 800ee86:	fa00 f202 	lsl.w	r2, r0, r2
 800ee8a:	3360      	adds	r3, #96	; 0x60
 800ee8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800ee90:	bf00      	nop
 800ee92:	370c      	adds	r7, #12
 800ee94:	46bd      	mov	sp, r7
 800ee96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9a:	4770      	bx	lr
 800ee9c:	e000e100 	.word	0xe000e100

0800eea0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800eea0:	b480      	push	{r7}
 800eea2:	b083      	sub	sp, #12
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	4603      	mov	r3, r0
 800eea8:	6039      	str	r1, [r7, #0]
 800eeaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800eeac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	db0a      	blt.n	800eeca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800eeb4:	683b      	ldr	r3, [r7, #0]
 800eeb6:	b2da      	uxtb	r2, r3
 800eeb8:	490c      	ldr	r1, [pc, #48]	; (800eeec <__NVIC_SetPriority+0x4c>)
 800eeba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eebe:	0112      	lsls	r2, r2, #4
 800eec0:	b2d2      	uxtb	r2, r2
 800eec2:	440b      	add	r3, r1
 800eec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800eec8:	e00a      	b.n	800eee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800eeca:	683b      	ldr	r3, [r7, #0]
 800eecc:	b2da      	uxtb	r2, r3
 800eece:	4908      	ldr	r1, [pc, #32]	; (800eef0 <__NVIC_SetPriority+0x50>)
 800eed0:	79fb      	ldrb	r3, [r7, #7]
 800eed2:	f003 030f 	and.w	r3, r3, #15
 800eed6:	3b04      	subs	r3, #4
 800eed8:	0112      	lsls	r2, r2, #4
 800eeda:	b2d2      	uxtb	r2, r2
 800eedc:	440b      	add	r3, r1
 800eede:	761a      	strb	r2, [r3, #24]
}
 800eee0:	bf00      	nop
 800eee2:	370c      	adds	r7, #12
 800eee4:	46bd      	mov	sp, r7
 800eee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeea:	4770      	bx	lr
 800eeec:	e000e100 	.word	0xe000e100
 800eef0:	e000ed00 	.word	0xe000ed00

0800eef4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800eef4:	b480      	push	{r7}
 800eef6:	b089      	sub	sp, #36	; 0x24
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	60f8      	str	r0, [r7, #12]
 800eefc:	60b9      	str	r1, [r7, #8]
 800eefe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	f003 0307 	and.w	r3, r3, #7
 800ef06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ef08:	69fb      	ldr	r3, [r7, #28]
 800ef0a:	f1c3 0307 	rsb	r3, r3, #7
 800ef0e:	2b04      	cmp	r3, #4
 800ef10:	bf28      	it	cs
 800ef12:	2304      	movcs	r3, #4
 800ef14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ef16:	69fb      	ldr	r3, [r7, #28]
 800ef18:	3304      	adds	r3, #4
 800ef1a:	2b06      	cmp	r3, #6
 800ef1c:	d902      	bls.n	800ef24 <NVIC_EncodePriority+0x30>
 800ef1e:	69fb      	ldr	r3, [r7, #28]
 800ef20:	3b03      	subs	r3, #3
 800ef22:	e000      	b.n	800ef26 <NVIC_EncodePriority+0x32>
 800ef24:	2300      	movs	r3, #0
 800ef26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ef28:	f04f 32ff 	mov.w	r2, #4294967295
 800ef2c:	69bb      	ldr	r3, [r7, #24]
 800ef2e:	fa02 f303 	lsl.w	r3, r2, r3
 800ef32:	43da      	mvns	r2, r3
 800ef34:	68bb      	ldr	r3, [r7, #8]
 800ef36:	401a      	ands	r2, r3
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ef3c:	f04f 31ff 	mov.w	r1, #4294967295
 800ef40:	697b      	ldr	r3, [r7, #20]
 800ef42:	fa01 f303 	lsl.w	r3, r1, r3
 800ef46:	43d9      	mvns	r1, r3
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ef4c:	4313      	orrs	r3, r2
         );
}
 800ef4e:	4618      	mov	r0, r3
 800ef50:	3724      	adds	r7, #36	; 0x24
 800ef52:	46bd      	mov	sp, r7
 800ef54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef58:	4770      	bx	lr
	...

0800ef5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b082      	sub	sp, #8
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	3b01      	subs	r3, #1
 800ef68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ef6c:	d301      	bcc.n	800ef72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ef6e:	2301      	movs	r3, #1
 800ef70:	e00f      	b.n	800ef92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ef72:	4a0a      	ldr	r2, [pc, #40]	; (800ef9c <SysTick_Config+0x40>)
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	3b01      	subs	r3, #1
 800ef78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ef7a:	210f      	movs	r1, #15
 800ef7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ef80:	f7ff ff8e 	bl	800eea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ef84:	4b05      	ldr	r3, [pc, #20]	; (800ef9c <SysTick_Config+0x40>)
 800ef86:	2200      	movs	r2, #0
 800ef88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ef8a:	4b04      	ldr	r3, [pc, #16]	; (800ef9c <SysTick_Config+0x40>)
 800ef8c:	2207      	movs	r2, #7
 800ef8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ef90:	2300      	movs	r3, #0
}
 800ef92:	4618      	mov	r0, r3
 800ef94:	3708      	adds	r7, #8
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}
 800ef9a:	bf00      	nop
 800ef9c:	e000e010 	.word	0xe000e010

0800efa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b082      	sub	sp, #8
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800efa8:	6878      	ldr	r0, [r7, #4]
 800efaa:	f7ff fec9 	bl	800ed40 <__NVIC_SetPriorityGrouping>
}
 800efae:	bf00      	nop
 800efb0:	3708      	adds	r7, #8
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}

0800efb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800efb6:	b580      	push	{r7, lr}
 800efb8:	b086      	sub	sp, #24
 800efba:	af00      	add	r7, sp, #0
 800efbc:	4603      	mov	r3, r0
 800efbe:	60b9      	str	r1, [r7, #8]
 800efc0:	607a      	str	r2, [r7, #4]
 800efc2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800efc4:	f7ff fee0 	bl	800ed88 <__NVIC_GetPriorityGrouping>
 800efc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800efca:	687a      	ldr	r2, [r7, #4]
 800efcc:	68b9      	ldr	r1, [r7, #8]
 800efce:	6978      	ldr	r0, [r7, #20]
 800efd0:	f7ff ff90 	bl	800eef4 <NVIC_EncodePriority>
 800efd4:	4602      	mov	r2, r0
 800efd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efda:	4611      	mov	r1, r2
 800efdc:	4618      	mov	r0, r3
 800efde:	f7ff ff5f 	bl	800eea0 <__NVIC_SetPriority>
}
 800efe2:	bf00      	nop
 800efe4:	3718      	adds	r7, #24
 800efe6:	46bd      	mov	sp, r7
 800efe8:	bd80      	pop	{r7, pc}

0800efea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800efea:	b580      	push	{r7, lr}
 800efec:	b082      	sub	sp, #8
 800efee:	af00      	add	r7, sp, #0
 800eff0:	4603      	mov	r3, r0
 800eff2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800eff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eff8:	4618      	mov	r0, r3
 800effa:	f7ff fed3 	bl	800eda4 <__NVIC_EnableIRQ>
}
 800effe:	bf00      	nop
 800f000:	3708      	adds	r7, #8
 800f002:	46bd      	mov	sp, r7
 800f004:	bd80      	pop	{r7, pc}

0800f006 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800f006:	b580      	push	{r7, lr}
 800f008:	b082      	sub	sp, #8
 800f00a:	af00      	add	r7, sp, #0
 800f00c:	4603      	mov	r3, r0
 800f00e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800f010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f014:	4618      	mov	r0, r3
 800f016:	f7ff fee3 	bl	800ede0 <__NVIC_DisableIRQ>
}
 800f01a:	bf00      	nop
 800f01c:	3708      	adds	r7, #8
 800f01e:	46bd      	mov	sp, r7
 800f020:	bd80      	pop	{r7, pc}

0800f022 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800f022:	b580      	push	{r7, lr}
 800f024:	b082      	sub	sp, #8
 800f026:	af00      	add	r7, sp, #0
 800f028:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800f02a:	6878      	ldr	r0, [r7, #4]
 800f02c:	f7ff ff96 	bl	800ef5c <SysTick_Config>
 800f030:	4603      	mov	r3, r0
}
 800f032:	4618      	mov	r0, r3
 800f034:	3708      	adds	r7, #8
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}

0800f03a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800f03a:	b580      	push	{r7, lr}
 800f03c:	b082      	sub	sp, #8
 800f03e:	af00      	add	r7, sp, #0
 800f040:	4603      	mov	r3, r0
 800f042:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800f044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f048:	4618      	mov	r0, r3
 800f04a:	f7ff feed 	bl	800ee28 <__NVIC_SetPendingIRQ>
}
 800f04e:	bf00      	nop
 800f050:	3708      	adds	r7, #8
 800f052:	46bd      	mov	sp, r7
 800f054:	bd80      	pop	{r7, pc}

0800f056 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800f056:	b580      	push	{r7, lr}
 800f058:	b082      	sub	sp, #8
 800f05a:	af00      	add	r7, sp, #0
 800f05c:	4603      	mov	r3, r0
 800f05e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800f060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f064:	4618      	mov	r0, r3
 800f066:	f7ff fefd 	bl	800ee64 <__NVIC_ClearPendingIRQ>
}
 800f06a:	bf00      	nop
 800f06c:	3708      	adds	r7, #8
 800f06e:	46bd      	mov	sp, r7
 800f070:	bd80      	pop	{r7, pc}
	...

0800f074 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b084      	sub	sp, #16
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d101      	bne.n	800f086 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800f082:	2301      	movs	r3, #1
 800f084:	e08e      	b.n	800f1a4 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	461a      	mov	r2, r3
 800f08c:	4b47      	ldr	r3, [pc, #284]	; (800f1ac <HAL_DMA_Init+0x138>)
 800f08e:	429a      	cmp	r2, r3
 800f090:	d80f      	bhi.n	800f0b2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	461a      	mov	r2, r3
 800f098:	4b45      	ldr	r3, [pc, #276]	; (800f1b0 <HAL_DMA_Init+0x13c>)
 800f09a:	4413      	add	r3, r2
 800f09c:	4a45      	ldr	r2, [pc, #276]	; (800f1b4 <HAL_DMA_Init+0x140>)
 800f09e:	fba2 2303 	umull	r2, r3, r2, r3
 800f0a2:	091b      	lsrs	r3, r3, #4
 800f0a4:	009a      	lsls	r2, r3, #2
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	4a42      	ldr	r2, [pc, #264]	; (800f1b8 <HAL_DMA_Init+0x144>)
 800f0ae:	641a      	str	r2, [r3, #64]	; 0x40
 800f0b0:	e00e      	b.n	800f0d0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	461a      	mov	r2, r3
 800f0b8:	4b40      	ldr	r3, [pc, #256]	; (800f1bc <HAL_DMA_Init+0x148>)
 800f0ba:	4413      	add	r3, r2
 800f0bc:	4a3d      	ldr	r2, [pc, #244]	; (800f1b4 <HAL_DMA_Init+0x140>)
 800f0be:	fba2 2303 	umull	r2, r3, r2, r3
 800f0c2:	091b      	lsrs	r3, r3, #4
 800f0c4:	009a      	lsls	r2, r3, #2
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	4a3c      	ldr	r2, [pc, #240]	; (800f1c0 <HAL_DMA_Init+0x14c>)
 800f0ce:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2202      	movs	r2, #2
 800f0d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800f0e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f0ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800f0f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	691b      	ldr	r3, [r3, #16]
 800f0fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f100:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	699b      	ldr	r3, [r3, #24]
 800f106:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f10c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	6a1b      	ldr	r3, [r3, #32]
 800f112:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800f114:	68fa      	ldr	r2, [r7, #12]
 800f116:	4313      	orrs	r3, r2
 800f118:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	68fa      	ldr	r2, [r7, #12]
 800f120:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800f122:	6878      	ldr	r0, [r7, #4]
 800f124:	f000 fa16 	bl	800f554 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	689b      	ldr	r3, [r3, #8]
 800f12c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f130:	d102      	bne.n	800f138 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	2200      	movs	r2, #0
 800f136:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	685a      	ldr	r2, [r3, #4]
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f140:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800f144:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f14a:	687a      	ldr	r2, [r7, #4]
 800f14c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800f14e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	685b      	ldr	r3, [r3, #4]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d010      	beq.n	800f17a <HAL_DMA_Init+0x106>
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	685b      	ldr	r3, [r3, #4]
 800f15c:	2b04      	cmp	r3, #4
 800f15e:	d80c      	bhi.n	800f17a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f000 fa35 	bl	800f5d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f16a:	2200      	movs	r2, #0
 800f16c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f172:	687a      	ldr	r2, [r7, #4]
 800f174:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800f176:	605a      	str	r2, [r3, #4]
 800f178:	e008      	b.n	800f18c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	2200      	movs	r2, #0
 800f17e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	2200      	movs	r2, #0
 800f184:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	2200      	movs	r2, #0
 800f18a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	2200      	movs	r2, #0
 800f190:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	2201      	movs	r2, #1
 800f196:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	2200      	movs	r2, #0
 800f19e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800f1a2:	2300      	movs	r3, #0
}
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	3710      	adds	r7, #16
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bd80      	pop	{r7, pc}
 800f1ac:	40020407 	.word	0x40020407
 800f1b0:	bffdfff8 	.word	0xbffdfff8
 800f1b4:	cccccccd 	.word	0xcccccccd
 800f1b8:	40020000 	.word	0x40020000
 800f1bc:	bffdfbf8 	.word	0xbffdfbf8
 800f1c0:	40020400 	.word	0x40020400

0800f1c4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b086      	sub	sp, #24
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	60f8      	str	r0, [r7, #12]
 800f1cc:	60b9      	str	r1, [r7, #8]
 800f1ce:	607a      	str	r2, [r7, #4]
 800f1d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f1dc:	2b01      	cmp	r3, #1
 800f1de:	d101      	bne.n	800f1e4 <HAL_DMA_Start_IT+0x20>
 800f1e0:	2302      	movs	r3, #2
 800f1e2:	e066      	b.n	800f2b2 <HAL_DMA_Start_IT+0xee>
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	2201      	movs	r2, #1
 800f1e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800f1f2:	b2db      	uxtb	r3, r3
 800f1f4:	2b01      	cmp	r3, #1
 800f1f6:	d155      	bne.n	800f2a4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	2202      	movs	r2, #2
 800f1fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	2200      	movs	r2, #0
 800f204:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	681a      	ldr	r2, [r3, #0]
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	f022 0201 	bic.w	r2, r2, #1
 800f214:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800f216:	683b      	ldr	r3, [r7, #0]
 800f218:	687a      	ldr	r2, [r7, #4]
 800f21a:	68b9      	ldr	r1, [r7, #8]
 800f21c:	68f8      	ldr	r0, [r7, #12]
 800f21e:	f000 f95a 	bl	800f4d6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f226:	2b00      	cmp	r3, #0
 800f228:	d008      	beq.n	800f23c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	681a      	ldr	r2, [r3, #0]
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	f042 020e 	orr.w	r2, r2, #14
 800f238:	601a      	str	r2, [r3, #0]
 800f23a:	e00f      	b.n	800f25c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	681a      	ldr	r2, [r3, #0]
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	f022 0204 	bic.w	r2, r2, #4
 800f24a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	681a      	ldr	r2, [r3, #0]
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	f042 020a 	orr.w	r2, r2, #10
 800f25a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f266:	2b00      	cmp	r3, #0
 800f268:	d007      	beq.n	800f27a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f26e:	681a      	ldr	r2, [r3, #0]
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f274:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f278:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d007      	beq.n	800f292 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f286:	681a      	ldr	r2, [r3, #0]
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f28c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f290:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	681a      	ldr	r2, [r3, #0]
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	f042 0201 	orr.w	r2, r2, #1
 800f2a0:	601a      	str	r2, [r3, #0]
 800f2a2:	e005      	b.n	800f2b0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800f2ac:	2302      	movs	r3, #2
 800f2ae:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800f2b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	3718      	adds	r7, #24
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}

0800f2ba <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800f2ba:	b580      	push	{r7, lr}
 800f2bc:	b084      	sub	sp, #16
 800f2be:	af00      	add	r7, sp, #0
 800f2c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800f2cc:	b2db      	uxtb	r3, r3
 800f2ce:	2b02      	cmp	r3, #2
 800f2d0:	d005      	beq.n	800f2de <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	2204      	movs	r2, #4
 800f2d6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800f2d8:	2301      	movs	r3, #1
 800f2da:	73fb      	strb	r3, [r7, #15]
 800f2dc:	e047      	b.n	800f36e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	681a      	ldr	r2, [r3, #0]
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	f022 020e 	bic.w	r2, r2, #14
 800f2ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	681a      	ldr	r2, [r3, #0]
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	f022 0201 	bic.w	r2, r2, #1
 800f2fc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f302:	681a      	ldr	r2, [r3, #0]
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f308:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f30c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f312:	f003 021c 	and.w	r2, r3, #28
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f31a:	2101      	movs	r1, #1
 800f31c:	fa01 f202 	lsl.w	r2, r1, r2
 800f320:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f326:	687a      	ldr	r2, [r7, #4]
 800f328:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800f32a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f330:	2b00      	cmp	r3, #0
 800f332:	d00c      	beq.n	800f34e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f338:	681a      	ldr	r2, [r3, #0]
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f33e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f342:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f348:	687a      	ldr	r2, [r7, #4]
 800f34a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800f34c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	2201      	movs	r2, #1
 800f352:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	2200      	movs	r2, #0
 800f35a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f362:	2b00      	cmp	r3, #0
 800f364:	d003      	beq.n	800f36e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f36a:	6878      	ldr	r0, [r7, #4]
 800f36c:	4798      	blx	r3
    }
  }
  return status;
 800f36e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f370:	4618      	mov	r0, r3
 800f372:	3710      	adds	r7, #16
 800f374:	46bd      	mov	sp, r7
 800f376:	bd80      	pop	{r7, pc}

0800f378 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b084      	sub	sp, #16
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f394:	f003 031c 	and.w	r3, r3, #28
 800f398:	2204      	movs	r2, #4
 800f39a:	409a      	lsls	r2, r3
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	4013      	ands	r3, r2
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d026      	beq.n	800f3f2 <HAL_DMA_IRQHandler+0x7a>
 800f3a4:	68bb      	ldr	r3, [r7, #8]
 800f3a6:	f003 0304 	and.w	r3, r3, #4
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d021      	beq.n	800f3f2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	f003 0320 	and.w	r3, r3, #32
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d107      	bne.n	800f3cc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	681a      	ldr	r2, [r3, #0]
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	f022 0204 	bic.w	r2, r2, #4
 800f3ca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3d0:	f003 021c 	and.w	r2, r3, #28
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3d8:	2104      	movs	r1, #4
 800f3da:	fa01 f202 	lsl.w	r2, r1, r2
 800f3de:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d071      	beq.n	800f4cc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3ec:	6878      	ldr	r0, [r7, #4]
 800f3ee:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800f3f0:	e06c      	b.n	800f4cc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3f6:	f003 031c 	and.w	r3, r3, #28
 800f3fa:	2202      	movs	r2, #2
 800f3fc:	409a      	lsls	r2, r3
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	4013      	ands	r3, r2
 800f402:	2b00      	cmp	r3, #0
 800f404:	d02e      	beq.n	800f464 <HAL_DMA_IRQHandler+0xec>
 800f406:	68bb      	ldr	r3, [r7, #8]
 800f408:	f003 0302 	and.w	r3, r3, #2
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d029      	beq.n	800f464 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	f003 0320 	and.w	r3, r3, #32
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d10b      	bne.n	800f436 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	681a      	ldr	r2, [r3, #0]
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	f022 020a 	bic.w	r2, r2, #10
 800f42c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	2201      	movs	r2, #1
 800f432:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f43a:	f003 021c 	and.w	r2, r3, #28
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f442:	2102      	movs	r1, #2
 800f444:	fa01 f202 	lsl.w	r2, r1, r2
 800f448:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	2200      	movs	r2, #0
 800f44e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f456:	2b00      	cmp	r3, #0
 800f458:	d038      	beq.n	800f4cc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f45e:	6878      	ldr	r0, [r7, #4]
 800f460:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800f462:	e033      	b.n	800f4cc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f468:	f003 031c 	and.w	r3, r3, #28
 800f46c:	2208      	movs	r2, #8
 800f46e:	409a      	lsls	r2, r3
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	4013      	ands	r3, r2
 800f474:	2b00      	cmp	r3, #0
 800f476:	d02a      	beq.n	800f4ce <HAL_DMA_IRQHandler+0x156>
 800f478:	68bb      	ldr	r3, [r7, #8]
 800f47a:	f003 0308 	and.w	r3, r3, #8
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d025      	beq.n	800f4ce <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	681a      	ldr	r2, [r3, #0]
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	f022 020e 	bic.w	r2, r2, #14
 800f490:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f496:	f003 021c 	and.w	r2, r3, #28
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f49e:	2101      	movs	r1, #1
 800f4a0:	fa01 f202 	lsl.w	r2, r1, r2
 800f4a4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	2201      	movs	r2, #1
 800f4aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	2201      	movs	r2, #1
 800f4b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d004      	beq.n	800f4ce <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4c8:	6878      	ldr	r0, [r7, #4]
 800f4ca:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800f4cc:	bf00      	nop
 800f4ce:	bf00      	nop
}
 800f4d0:	3710      	adds	r7, #16
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	bd80      	pop	{r7, pc}

0800f4d6 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f4d6:	b480      	push	{r7}
 800f4d8:	b085      	sub	sp, #20
 800f4da:	af00      	add	r7, sp, #0
 800f4dc:	60f8      	str	r0, [r7, #12]
 800f4de:	60b9      	str	r1, [r7, #8]
 800f4e0:	607a      	str	r2, [r7, #4]
 800f4e2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f4e8:	68fa      	ldr	r2, [r7, #12]
 800f4ea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800f4ec:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d004      	beq.n	800f500 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f4fa:	68fa      	ldr	r2, [r7, #12]
 800f4fc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800f4fe:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f504:	f003 021c 	and.w	r2, r3, #28
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f50c:	2101      	movs	r1, #1
 800f50e:	fa01 f202 	lsl.w	r2, r1, r2
 800f512:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	683a      	ldr	r2, [r7, #0]
 800f51a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	689b      	ldr	r3, [r3, #8]
 800f520:	2b10      	cmp	r3, #16
 800f522:	d108      	bne.n	800f536 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	687a      	ldr	r2, [r7, #4]
 800f52a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	68ba      	ldr	r2, [r7, #8]
 800f532:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800f534:	e007      	b.n	800f546 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	68ba      	ldr	r2, [r7, #8]
 800f53c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	687a      	ldr	r2, [r7, #4]
 800f544:	60da      	str	r2, [r3, #12]
}
 800f546:	bf00      	nop
 800f548:	3714      	adds	r7, #20
 800f54a:	46bd      	mov	sp, r7
 800f54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f550:	4770      	bx	lr
	...

0800f554 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800f554:	b480      	push	{r7}
 800f556:	b085      	sub	sp, #20
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	461a      	mov	r2, r3
 800f562:	4b17      	ldr	r3, [pc, #92]	; (800f5c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800f564:	429a      	cmp	r2, r3
 800f566:	d80a      	bhi.n	800f57e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f56c:	089b      	lsrs	r3, r3, #2
 800f56e:	009b      	lsls	r3, r3, #2
 800f570:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f574:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800f578:	687a      	ldr	r2, [r7, #4]
 800f57a:	6493      	str	r3, [r2, #72]	; 0x48
 800f57c:	e007      	b.n	800f58e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f582:	089b      	lsrs	r3, r3, #2
 800f584:	009a      	lsls	r2, r3, #2
 800f586:	4b0f      	ldr	r3, [pc, #60]	; (800f5c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800f588:	4413      	add	r3, r2
 800f58a:	687a      	ldr	r2, [r7, #4]
 800f58c:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	b2db      	uxtb	r3, r3
 800f594:	3b08      	subs	r3, #8
 800f596:	4a0c      	ldr	r2, [pc, #48]	; (800f5c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800f598:	fba2 2303 	umull	r2, r3, r2, r3
 800f59c:	091b      	lsrs	r3, r3, #4
 800f59e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	4a0a      	ldr	r2, [pc, #40]	; (800f5cc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800f5a4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	f003 031f 	and.w	r3, r3, #31
 800f5ac:	2201      	movs	r2, #1
 800f5ae:	409a      	lsls	r2, r3
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	651a      	str	r2, [r3, #80]	; 0x50
}
 800f5b4:	bf00      	nop
 800f5b6:	3714      	adds	r7, #20
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5be:	4770      	bx	lr
 800f5c0:	40020407 	.word	0x40020407
 800f5c4:	4002081c 	.word	0x4002081c
 800f5c8:	cccccccd 	.word	0xcccccccd
 800f5cc:	40020880 	.word	0x40020880

0800f5d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800f5d0:	b480      	push	{r7}
 800f5d2:	b085      	sub	sp, #20
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	685b      	ldr	r3, [r3, #4]
 800f5dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f5e0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800f5e2:	68fa      	ldr	r2, [r7, #12]
 800f5e4:	4b0b      	ldr	r3, [pc, #44]	; (800f614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800f5e6:	4413      	add	r3, r2
 800f5e8:	009b      	lsls	r3, r3, #2
 800f5ea:	461a      	mov	r2, r3
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	4a09      	ldr	r2, [pc, #36]	; (800f618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800f5f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	3b01      	subs	r3, #1
 800f5fa:	f003 0303 	and.w	r3, r3, #3
 800f5fe:	2201      	movs	r2, #1
 800f600:	409a      	lsls	r2, r3
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800f606:	bf00      	nop
 800f608:	3714      	adds	r7, #20
 800f60a:	46bd      	mov	sp, r7
 800f60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f610:	4770      	bx	lr
 800f612:	bf00      	nop
 800f614:	1000823f 	.word	0x1000823f
 800f618:	40020940 	.word	0x40020940

0800f61c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800f61c:	b480      	push	{r7}
 800f61e:	b087      	sub	sp, #28
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
 800f624:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800f626:	2300      	movs	r3, #0
 800f628:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800f62a:	e14c      	b.n	800f8c6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800f62c:	683b      	ldr	r3, [r7, #0]
 800f62e:	681a      	ldr	r2, [r3, #0]
 800f630:	2101      	movs	r1, #1
 800f632:	697b      	ldr	r3, [r7, #20]
 800f634:	fa01 f303 	lsl.w	r3, r1, r3
 800f638:	4013      	ands	r3, r2
 800f63a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	f000 813e 	beq.w	800f8c0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800f644:	683b      	ldr	r3, [r7, #0]
 800f646:	685b      	ldr	r3, [r3, #4]
 800f648:	f003 0303 	and.w	r3, r3, #3
 800f64c:	2b01      	cmp	r3, #1
 800f64e:	d005      	beq.n	800f65c <HAL_GPIO_Init+0x40>
 800f650:	683b      	ldr	r3, [r7, #0]
 800f652:	685b      	ldr	r3, [r3, #4]
 800f654:	f003 0303 	and.w	r3, r3, #3
 800f658:	2b02      	cmp	r3, #2
 800f65a:	d130      	bne.n	800f6be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	689b      	ldr	r3, [r3, #8]
 800f660:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800f662:	697b      	ldr	r3, [r7, #20]
 800f664:	005b      	lsls	r3, r3, #1
 800f666:	2203      	movs	r2, #3
 800f668:	fa02 f303 	lsl.w	r3, r2, r3
 800f66c:	43db      	mvns	r3, r3
 800f66e:	693a      	ldr	r2, [r7, #16]
 800f670:	4013      	ands	r3, r2
 800f672:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	68da      	ldr	r2, [r3, #12]
 800f678:	697b      	ldr	r3, [r7, #20]
 800f67a:	005b      	lsls	r3, r3, #1
 800f67c:	fa02 f303 	lsl.w	r3, r2, r3
 800f680:	693a      	ldr	r2, [r7, #16]
 800f682:	4313      	orrs	r3, r2
 800f684:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	693a      	ldr	r2, [r7, #16]
 800f68a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	685b      	ldr	r3, [r3, #4]
 800f690:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800f692:	2201      	movs	r2, #1
 800f694:	697b      	ldr	r3, [r7, #20]
 800f696:	fa02 f303 	lsl.w	r3, r2, r3
 800f69a:	43db      	mvns	r3, r3
 800f69c:	693a      	ldr	r2, [r7, #16]
 800f69e:	4013      	ands	r3, r2
 800f6a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	685b      	ldr	r3, [r3, #4]
 800f6a6:	091b      	lsrs	r3, r3, #4
 800f6a8:	f003 0201 	and.w	r2, r3, #1
 800f6ac:	697b      	ldr	r3, [r7, #20]
 800f6ae:	fa02 f303 	lsl.w	r3, r2, r3
 800f6b2:	693a      	ldr	r2, [r7, #16]
 800f6b4:	4313      	orrs	r3, r2
 800f6b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	693a      	ldr	r2, [r7, #16]
 800f6bc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800f6be:	683b      	ldr	r3, [r7, #0]
 800f6c0:	685b      	ldr	r3, [r3, #4]
 800f6c2:	f003 0303 	and.w	r3, r3, #3
 800f6c6:	2b03      	cmp	r3, #3
 800f6c8:	d017      	beq.n	800f6fa <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	68db      	ldr	r3, [r3, #12]
 800f6ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800f6d0:	697b      	ldr	r3, [r7, #20]
 800f6d2:	005b      	lsls	r3, r3, #1
 800f6d4:	2203      	movs	r2, #3
 800f6d6:	fa02 f303 	lsl.w	r3, r2, r3
 800f6da:	43db      	mvns	r3, r3
 800f6dc:	693a      	ldr	r2, [r7, #16]
 800f6de:	4013      	ands	r3, r2
 800f6e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800f6e2:	683b      	ldr	r3, [r7, #0]
 800f6e4:	689a      	ldr	r2, [r3, #8]
 800f6e6:	697b      	ldr	r3, [r7, #20]
 800f6e8:	005b      	lsls	r3, r3, #1
 800f6ea:	fa02 f303 	lsl.w	r3, r2, r3
 800f6ee:	693a      	ldr	r2, [r7, #16]
 800f6f0:	4313      	orrs	r3, r2
 800f6f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	693a      	ldr	r2, [r7, #16]
 800f6f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800f6fa:	683b      	ldr	r3, [r7, #0]
 800f6fc:	685b      	ldr	r3, [r3, #4]
 800f6fe:	f003 0303 	and.w	r3, r3, #3
 800f702:	2b02      	cmp	r3, #2
 800f704:	d123      	bne.n	800f74e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800f706:	697b      	ldr	r3, [r7, #20]
 800f708:	08da      	lsrs	r2, r3, #3
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	3208      	adds	r2, #8
 800f70e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f712:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800f714:	697b      	ldr	r3, [r7, #20]
 800f716:	f003 0307 	and.w	r3, r3, #7
 800f71a:	009b      	lsls	r3, r3, #2
 800f71c:	220f      	movs	r2, #15
 800f71e:	fa02 f303 	lsl.w	r3, r2, r3
 800f722:	43db      	mvns	r3, r3
 800f724:	693a      	ldr	r2, [r7, #16]
 800f726:	4013      	ands	r3, r2
 800f728:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800f72a:	683b      	ldr	r3, [r7, #0]
 800f72c:	691a      	ldr	r2, [r3, #16]
 800f72e:	697b      	ldr	r3, [r7, #20]
 800f730:	f003 0307 	and.w	r3, r3, #7
 800f734:	009b      	lsls	r3, r3, #2
 800f736:	fa02 f303 	lsl.w	r3, r2, r3
 800f73a:	693a      	ldr	r2, [r7, #16]
 800f73c:	4313      	orrs	r3, r2
 800f73e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800f740:	697b      	ldr	r3, [r7, #20]
 800f742:	08da      	lsrs	r2, r3, #3
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	3208      	adds	r2, #8
 800f748:	6939      	ldr	r1, [r7, #16]
 800f74a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800f754:	697b      	ldr	r3, [r7, #20]
 800f756:	005b      	lsls	r3, r3, #1
 800f758:	2203      	movs	r2, #3
 800f75a:	fa02 f303 	lsl.w	r3, r2, r3
 800f75e:	43db      	mvns	r3, r3
 800f760:	693a      	ldr	r2, [r7, #16]
 800f762:	4013      	ands	r3, r2
 800f764:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	685b      	ldr	r3, [r3, #4]
 800f76a:	f003 0203 	and.w	r2, r3, #3
 800f76e:	697b      	ldr	r3, [r7, #20]
 800f770:	005b      	lsls	r3, r3, #1
 800f772:	fa02 f303 	lsl.w	r3, r2, r3
 800f776:	693a      	ldr	r2, [r7, #16]
 800f778:	4313      	orrs	r3, r2
 800f77a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	693a      	ldr	r2, [r7, #16]
 800f780:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800f782:	683b      	ldr	r3, [r7, #0]
 800f784:	685b      	ldr	r3, [r3, #4]
 800f786:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	f000 8098 	beq.w	800f8c0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800f790:	4a54      	ldr	r2, [pc, #336]	; (800f8e4 <HAL_GPIO_Init+0x2c8>)
 800f792:	697b      	ldr	r3, [r7, #20]
 800f794:	089b      	lsrs	r3, r3, #2
 800f796:	3302      	adds	r3, #2
 800f798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f79c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800f79e:	697b      	ldr	r3, [r7, #20]
 800f7a0:	f003 0303 	and.w	r3, r3, #3
 800f7a4:	009b      	lsls	r3, r3, #2
 800f7a6:	220f      	movs	r2, #15
 800f7a8:	fa02 f303 	lsl.w	r3, r2, r3
 800f7ac:	43db      	mvns	r3, r3
 800f7ae:	693a      	ldr	r2, [r7, #16]
 800f7b0:	4013      	ands	r3, r2
 800f7b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800f7ba:	d019      	beq.n	800f7f0 <HAL_GPIO_Init+0x1d4>
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	4a4a      	ldr	r2, [pc, #296]	; (800f8e8 <HAL_GPIO_Init+0x2cc>)
 800f7c0:	4293      	cmp	r3, r2
 800f7c2:	d013      	beq.n	800f7ec <HAL_GPIO_Init+0x1d0>
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	4a49      	ldr	r2, [pc, #292]	; (800f8ec <HAL_GPIO_Init+0x2d0>)
 800f7c8:	4293      	cmp	r3, r2
 800f7ca:	d00d      	beq.n	800f7e8 <HAL_GPIO_Init+0x1cc>
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	4a48      	ldr	r2, [pc, #288]	; (800f8f0 <HAL_GPIO_Init+0x2d4>)
 800f7d0:	4293      	cmp	r3, r2
 800f7d2:	d007      	beq.n	800f7e4 <HAL_GPIO_Init+0x1c8>
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	4a47      	ldr	r2, [pc, #284]	; (800f8f4 <HAL_GPIO_Init+0x2d8>)
 800f7d8:	4293      	cmp	r3, r2
 800f7da:	d101      	bne.n	800f7e0 <HAL_GPIO_Init+0x1c4>
 800f7dc:	2304      	movs	r3, #4
 800f7de:	e008      	b.n	800f7f2 <HAL_GPIO_Init+0x1d6>
 800f7e0:	2307      	movs	r3, #7
 800f7e2:	e006      	b.n	800f7f2 <HAL_GPIO_Init+0x1d6>
 800f7e4:	2303      	movs	r3, #3
 800f7e6:	e004      	b.n	800f7f2 <HAL_GPIO_Init+0x1d6>
 800f7e8:	2302      	movs	r3, #2
 800f7ea:	e002      	b.n	800f7f2 <HAL_GPIO_Init+0x1d6>
 800f7ec:	2301      	movs	r3, #1
 800f7ee:	e000      	b.n	800f7f2 <HAL_GPIO_Init+0x1d6>
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	697a      	ldr	r2, [r7, #20]
 800f7f4:	f002 0203 	and.w	r2, r2, #3
 800f7f8:	0092      	lsls	r2, r2, #2
 800f7fa:	4093      	lsls	r3, r2
 800f7fc:	693a      	ldr	r2, [r7, #16]
 800f7fe:	4313      	orrs	r3, r2
 800f800:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800f802:	4938      	ldr	r1, [pc, #224]	; (800f8e4 <HAL_GPIO_Init+0x2c8>)
 800f804:	697b      	ldr	r3, [r7, #20]
 800f806:	089b      	lsrs	r3, r3, #2
 800f808:	3302      	adds	r3, #2
 800f80a:	693a      	ldr	r2, [r7, #16]
 800f80c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800f810:	4b39      	ldr	r3, [pc, #228]	; (800f8f8 <HAL_GPIO_Init+0x2dc>)
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	43db      	mvns	r3, r3
 800f81a:	693a      	ldr	r2, [r7, #16]
 800f81c:	4013      	ands	r3, r2
 800f81e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800f820:	683b      	ldr	r3, [r7, #0]
 800f822:	685b      	ldr	r3, [r3, #4]
 800f824:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d003      	beq.n	800f834 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800f82c:	693a      	ldr	r2, [r7, #16]
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	4313      	orrs	r3, r2
 800f832:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800f834:	4a30      	ldr	r2, [pc, #192]	; (800f8f8 <HAL_GPIO_Init+0x2dc>)
 800f836:	693b      	ldr	r3, [r7, #16]
 800f838:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800f83a:	4b2f      	ldr	r3, [pc, #188]	; (800f8f8 <HAL_GPIO_Init+0x2dc>)
 800f83c:	685b      	ldr	r3, [r3, #4]
 800f83e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	43db      	mvns	r3, r3
 800f844:	693a      	ldr	r2, [r7, #16]
 800f846:	4013      	ands	r3, r2
 800f848:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800f84a:	683b      	ldr	r3, [r7, #0]
 800f84c:	685b      	ldr	r3, [r3, #4]
 800f84e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f852:	2b00      	cmp	r3, #0
 800f854:	d003      	beq.n	800f85e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800f856:	693a      	ldr	r2, [r7, #16]
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	4313      	orrs	r3, r2
 800f85c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800f85e:	4a26      	ldr	r2, [pc, #152]	; (800f8f8 <HAL_GPIO_Init+0x2dc>)
 800f860:	693b      	ldr	r3, [r7, #16]
 800f862:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800f864:	4b24      	ldr	r3, [pc, #144]	; (800f8f8 <HAL_GPIO_Init+0x2dc>)
 800f866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f86a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	43db      	mvns	r3, r3
 800f870:	693a      	ldr	r2, [r7, #16]
 800f872:	4013      	ands	r3, r2
 800f874:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800f876:	683b      	ldr	r3, [r7, #0]
 800f878:	685b      	ldr	r3, [r3, #4]
 800f87a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d003      	beq.n	800f88a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800f882:	693a      	ldr	r2, [r7, #16]
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	4313      	orrs	r3, r2
 800f888:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800f88a:	4a1b      	ldr	r2, [pc, #108]	; (800f8f8 <HAL_GPIO_Init+0x2dc>)
 800f88c:	693b      	ldr	r3, [r7, #16]
 800f88e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800f892:	4b19      	ldr	r3, [pc, #100]	; (800f8f8 <HAL_GPIO_Init+0x2dc>)
 800f894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f898:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	43db      	mvns	r3, r3
 800f89e:	693a      	ldr	r2, [r7, #16]
 800f8a0:	4013      	ands	r3, r2
 800f8a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800f8a4:	683b      	ldr	r3, [r7, #0]
 800f8a6:	685b      	ldr	r3, [r3, #4]
 800f8a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d003      	beq.n	800f8b8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800f8b0:	693a      	ldr	r2, [r7, #16]
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	4313      	orrs	r3, r2
 800f8b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800f8b8:	4a0f      	ldr	r2, [pc, #60]	; (800f8f8 <HAL_GPIO_Init+0x2dc>)
 800f8ba:	693b      	ldr	r3, [r7, #16]
 800f8bc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 800f8c0:	697b      	ldr	r3, [r7, #20]
 800f8c2:	3301      	adds	r3, #1
 800f8c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800f8c6:	683b      	ldr	r3, [r7, #0]
 800f8c8:	681a      	ldr	r2, [r3, #0]
 800f8ca:	697b      	ldr	r3, [r7, #20]
 800f8cc:	fa22 f303 	lsr.w	r3, r2, r3
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	f47f aeab 	bne.w	800f62c <HAL_GPIO_Init+0x10>
  }
}
 800f8d6:	bf00      	nop
 800f8d8:	bf00      	nop
 800f8da:	371c      	adds	r7, #28
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e2:	4770      	bx	lr
 800f8e4:	40010000 	.word	0x40010000
 800f8e8:	48000400 	.word	0x48000400
 800f8ec:	48000800 	.word	0x48000800
 800f8f0:	48000c00 	.word	0x48000c00
 800f8f4:	48001000 	.word	0x48001000
 800f8f8:	58000800 	.word	0x58000800

0800f8fc <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800f8fc:	b480      	push	{r7}
 800f8fe:	b085      	sub	sp, #20
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
 800f904:	460b      	mov	r3, r1
 800f906:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	691a      	ldr	r2, [r3, #16]
 800f90c:	887b      	ldrh	r3, [r7, #2]
 800f90e:	4013      	ands	r3, r2
 800f910:	2b00      	cmp	r3, #0
 800f912:	d002      	beq.n	800f91a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800f914:	2301      	movs	r3, #1
 800f916:	73fb      	strb	r3, [r7, #15]
 800f918:	e001      	b.n	800f91e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800f91a:	2300      	movs	r3, #0
 800f91c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800f91e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f920:	4618      	mov	r0, r3
 800f922:	3714      	adds	r7, #20
 800f924:	46bd      	mov	sp, r7
 800f926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92a:	4770      	bx	lr

0800f92c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f92c:	b480      	push	{r7}
 800f92e:	b083      	sub	sp, #12
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
 800f934:	460b      	mov	r3, r1
 800f936:	807b      	strh	r3, [r7, #2]
 800f938:	4613      	mov	r3, r2
 800f93a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800f93c:	787b      	ldrb	r3, [r7, #1]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d003      	beq.n	800f94a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800f942:	887a      	ldrh	r2, [r7, #2]
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800f948:	e002      	b.n	800f950 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800f94a:	887a      	ldrh	r2, [r7, #2]
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800f950:	bf00      	nop
 800f952:	370c      	adds	r7, #12
 800f954:	46bd      	mov	sp, r7
 800f956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95a:	4770      	bx	lr

0800f95c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b082      	sub	sp, #8
 800f960:	af00      	add	r7, sp, #0
 800f962:	4603      	mov	r3, r0
 800f964:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800f966:	4b08      	ldr	r3, [pc, #32]	; (800f988 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800f968:	68da      	ldr	r2, [r3, #12]
 800f96a:	88fb      	ldrh	r3, [r7, #6]
 800f96c:	4013      	ands	r3, r2
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d006      	beq.n	800f980 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800f972:	4a05      	ldr	r2, [pc, #20]	; (800f988 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800f974:	88fb      	ldrh	r3, [r7, #6]
 800f976:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800f978:	88fb      	ldrh	r3, [r7, #6]
 800f97a:	4618      	mov	r0, r3
 800f97c:	f008 fd22 	bl	80183c4 <HAL_GPIO_EXTI_Callback>
  }
}
 800f980:	bf00      	nop
 800f982:	3708      	adds	r7, #8
 800f984:	46bd      	mov	sp, r7
 800f986:	bd80      	pop	{r7, pc}
 800f988:	58000800 	.word	0x58000800

0800f98c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b082      	sub	sp, #8
 800f990:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800f992:	4b0a      	ldr	r3, [pc, #40]	; (800f9bc <HAL_HSEM_IRQHandler+0x30>)
 800f994:	68db      	ldr	r3, [r3, #12]
 800f996:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800f998:	4b08      	ldr	r3, [pc, #32]	; (800f9bc <HAL_HSEM_IRQHandler+0x30>)
 800f99a:	681a      	ldr	r2, [r3, #0]
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	43db      	mvns	r3, r3
 800f9a0:	4906      	ldr	r1, [pc, #24]	; (800f9bc <HAL_HSEM_IRQHandler+0x30>)
 800f9a2:	4013      	ands	r3, r2
 800f9a4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800f9a6:	4a05      	ldr	r2, [pc, #20]	; (800f9bc <HAL_HSEM_IRQHandler+0x30>)
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800f9ac:	6878      	ldr	r0, [r7, #4]
 800f9ae:	f000 f807 	bl	800f9c0 <HAL_HSEM_FreeCallback>
}
 800f9b2:	bf00      	nop
 800f9b4:	3708      	adds	r7, #8
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd80      	pop	{r7, pc}
 800f9ba:	bf00      	nop
 800f9bc:	58001500 	.word	0x58001500

0800f9c0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800f9c0:	b480      	push	{r7}
 800f9c2:	b083      	sub	sp, #12
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800f9c8:	bf00      	nop
 800f9ca:	370c      	adds	r7, #12
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d2:	4770      	bx	lr

0800f9d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b082      	sub	sp, #8
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d101      	bne.n	800f9e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800f9e2:	2301      	movs	r3, #1
 800f9e4:	e08d      	b.n	800fb02 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f9ec:	b2db      	uxtb	r3, r3
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d106      	bne.n	800fa00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	2200      	movs	r2, #0
 800f9f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	f7fc fb8a 	bl	800c114 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	2224      	movs	r2, #36	; 0x24
 800fa04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	681a      	ldr	r2, [r3, #0]
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	f022 0201 	bic.w	r2, r2, #1
 800fa16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	685a      	ldr	r2, [r3, #4]
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800fa24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	689a      	ldr	r2, [r3, #8]
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800fa34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	68db      	ldr	r3, [r3, #12]
 800fa3a:	2b01      	cmp	r3, #1
 800fa3c:	d107      	bne.n	800fa4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	689a      	ldr	r2, [r3, #8]
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fa4a:	609a      	str	r2, [r3, #8]
 800fa4c:	e006      	b.n	800fa5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	689a      	ldr	r2, [r3, #8]
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800fa5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	68db      	ldr	r3, [r3, #12]
 800fa60:	2b02      	cmp	r3, #2
 800fa62:	d108      	bne.n	800fa76 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	685a      	ldr	r2, [r3, #4]
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fa72:	605a      	str	r2, [r3, #4]
 800fa74:	e007      	b.n	800fa86 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	685a      	ldr	r2, [r3, #4]
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fa84:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	685b      	ldr	r3, [r3, #4]
 800fa8c:	687a      	ldr	r2, [r7, #4]
 800fa8e:	6812      	ldr	r2, [r2, #0]
 800fa90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800fa94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fa98:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	68da      	ldr	r2, [r3, #12]
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800faa8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	691a      	ldr	r2, [r3, #16]
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	695b      	ldr	r3, [r3, #20]
 800fab2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	699b      	ldr	r3, [r3, #24]
 800faba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	430a      	orrs	r2, r1
 800fac2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	69d9      	ldr	r1, [r3, #28]
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	6a1a      	ldr	r2, [r3, #32]
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	430a      	orrs	r2, r1
 800fad2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	681a      	ldr	r2, [r3, #0]
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	f042 0201 	orr.w	r2, r2, #1
 800fae2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	2200      	movs	r2, #0
 800fae8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	2220      	movs	r2, #32
 800faee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	2200      	movs	r2, #0
 800faf6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	2200      	movs	r2, #0
 800fafc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800fb00:	2300      	movs	r3, #0
}
 800fb02:	4618      	mov	r0, r3
 800fb04:	3708      	adds	r7, #8
 800fb06:	46bd      	mov	sp, r7
 800fb08:	bd80      	pop	{r7, pc}
	...

0800fb0c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b088      	sub	sp, #32
 800fb10:	af02      	add	r7, sp, #8
 800fb12:	60f8      	str	r0, [r7, #12]
 800fb14:	607a      	str	r2, [r7, #4]
 800fb16:	461a      	mov	r2, r3
 800fb18:	460b      	mov	r3, r1
 800fb1a:	817b      	strh	r3, [r7, #10]
 800fb1c:	4613      	mov	r3, r2
 800fb1e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fb26:	b2db      	uxtb	r3, r3
 800fb28:	2b20      	cmp	r3, #32
 800fb2a:	f040 80fd 	bne.w	800fd28 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fb34:	2b01      	cmp	r3, #1
 800fb36:	d101      	bne.n	800fb3c <HAL_I2C_Master_Transmit+0x30>
 800fb38:	2302      	movs	r3, #2
 800fb3a:	e0f6      	b.n	800fd2a <HAL_I2C_Master_Transmit+0x21e>
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	2201      	movs	r2, #1
 800fb40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800fb44:	f7fd ff1a 	bl	800d97c <HAL_GetTick>
 800fb48:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800fb4a:	693b      	ldr	r3, [r7, #16]
 800fb4c:	9300      	str	r3, [sp, #0]
 800fb4e:	2319      	movs	r3, #25
 800fb50:	2201      	movs	r2, #1
 800fb52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800fb56:	68f8      	ldr	r0, [r7, #12]
 800fb58:	f000 fce0 	bl	801051c <I2C_WaitOnFlagUntilTimeout>
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d001      	beq.n	800fb66 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800fb62:	2301      	movs	r3, #1
 800fb64:	e0e1      	b.n	800fd2a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	2221      	movs	r2, #33	; 0x21
 800fb6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	2210      	movs	r2, #16
 800fb72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	2200      	movs	r2, #0
 800fb7a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	687a      	ldr	r2, [r7, #4]
 800fb80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	893a      	ldrh	r2, [r7, #8]
 800fb86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fb92:	b29b      	uxth	r3, r3
 800fb94:	2bff      	cmp	r3, #255	; 0xff
 800fb96:	d906      	bls.n	800fba6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	22ff      	movs	r2, #255	; 0xff
 800fb9c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800fb9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800fba2:	617b      	str	r3, [r7, #20]
 800fba4:	e007      	b.n	800fbb6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fbaa:	b29a      	uxth	r2, r3
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800fbb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800fbb4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d024      	beq.n	800fc08 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbc2:	781a      	ldrb	r2, [r3, #0]
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbce:	1c5a      	adds	r2, r3, #1
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fbd8:	b29b      	uxth	r3, r3
 800fbda:	3b01      	subs	r3, #1
 800fbdc:	b29a      	uxth	r2, r3
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fbe6:	3b01      	subs	r3, #1
 800fbe8:	b29a      	uxth	r2, r3
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fbf2:	b2db      	uxtb	r3, r3
 800fbf4:	3301      	adds	r3, #1
 800fbf6:	b2da      	uxtb	r2, r3
 800fbf8:	8979      	ldrh	r1, [r7, #10]
 800fbfa:	4b4e      	ldr	r3, [pc, #312]	; (800fd34 <HAL_I2C_Master_Transmit+0x228>)
 800fbfc:	9300      	str	r3, [sp, #0]
 800fbfe:	697b      	ldr	r3, [r7, #20]
 800fc00:	68f8      	ldr	r0, [r7, #12]
 800fc02:	f000 fedb 	bl	80109bc <I2C_TransferConfig>
 800fc06:	e066      	b.n	800fcd6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fc0c:	b2da      	uxtb	r2, r3
 800fc0e:	8979      	ldrh	r1, [r7, #10]
 800fc10:	4b48      	ldr	r3, [pc, #288]	; (800fd34 <HAL_I2C_Master_Transmit+0x228>)
 800fc12:	9300      	str	r3, [sp, #0]
 800fc14:	697b      	ldr	r3, [r7, #20]
 800fc16:	68f8      	ldr	r0, [r7, #12]
 800fc18:	f000 fed0 	bl	80109bc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800fc1c:	e05b      	b.n	800fcd6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fc1e:	693a      	ldr	r2, [r7, #16]
 800fc20:	6a39      	ldr	r1, [r7, #32]
 800fc22:	68f8      	ldr	r0, [r7, #12]
 800fc24:	f000 fcd3 	bl	80105ce <I2C_WaitOnTXISFlagUntilTimeout>
 800fc28:	4603      	mov	r3, r0
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d001      	beq.n	800fc32 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800fc2e:	2301      	movs	r3, #1
 800fc30:	e07b      	b.n	800fd2a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc36:	781a      	ldrb	r2, [r3, #0]
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc42:	1c5a      	adds	r2, r3, #1
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fc4c:	b29b      	uxth	r3, r3
 800fc4e:	3b01      	subs	r3, #1
 800fc50:	b29a      	uxth	r2, r3
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fc5a:	3b01      	subs	r3, #1
 800fc5c:	b29a      	uxth	r2, r3
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fc66:	b29b      	uxth	r3, r3
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d034      	beq.n	800fcd6 <HAL_I2C_Master_Transmit+0x1ca>
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d130      	bne.n	800fcd6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800fc74:	693b      	ldr	r3, [r7, #16]
 800fc76:	9300      	str	r3, [sp, #0]
 800fc78:	6a3b      	ldr	r3, [r7, #32]
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	2180      	movs	r1, #128	; 0x80
 800fc7e:	68f8      	ldr	r0, [r7, #12]
 800fc80:	f000 fc4c 	bl	801051c <I2C_WaitOnFlagUntilTimeout>
 800fc84:	4603      	mov	r3, r0
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d001      	beq.n	800fc8e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800fc8a:	2301      	movs	r3, #1
 800fc8c:	e04d      	b.n	800fd2a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fc92:	b29b      	uxth	r3, r3
 800fc94:	2bff      	cmp	r3, #255	; 0xff
 800fc96:	d90e      	bls.n	800fcb6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	22ff      	movs	r2, #255	; 0xff
 800fc9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fca2:	b2da      	uxtb	r2, r3
 800fca4:	8979      	ldrh	r1, [r7, #10]
 800fca6:	2300      	movs	r3, #0
 800fca8:	9300      	str	r3, [sp, #0]
 800fcaa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800fcae:	68f8      	ldr	r0, [r7, #12]
 800fcb0:	f000 fe84 	bl	80109bc <I2C_TransferConfig>
 800fcb4:	e00f      	b.n	800fcd6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fcba:	b29a      	uxth	r2, r3
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fcc4:	b2da      	uxtb	r2, r3
 800fcc6:	8979      	ldrh	r1, [r7, #10]
 800fcc8:	2300      	movs	r3, #0
 800fcca:	9300      	str	r3, [sp, #0]
 800fccc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800fcd0:	68f8      	ldr	r0, [r7, #12]
 800fcd2:	f000 fe73 	bl	80109bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fcda:	b29b      	uxth	r3, r3
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d19e      	bne.n	800fc1e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fce0:	693a      	ldr	r2, [r7, #16]
 800fce2:	6a39      	ldr	r1, [r7, #32]
 800fce4:	68f8      	ldr	r0, [r7, #12]
 800fce6:	f000 fcb9 	bl	801065c <I2C_WaitOnSTOPFlagUntilTimeout>
 800fcea:	4603      	mov	r3, r0
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d001      	beq.n	800fcf4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800fcf0:	2301      	movs	r3, #1
 800fcf2:	e01a      	b.n	800fd2a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	2220      	movs	r2, #32
 800fcfa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	6859      	ldr	r1, [r3, #4]
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	681a      	ldr	r2, [r3, #0]
 800fd06:	4b0c      	ldr	r3, [pc, #48]	; (800fd38 <HAL_I2C_Master_Transmit+0x22c>)
 800fd08:	400b      	ands	r3, r1
 800fd0a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	2220      	movs	r2, #32
 800fd10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	2200      	movs	r2, #0
 800fd18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	2200      	movs	r2, #0
 800fd20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800fd24:	2300      	movs	r3, #0
 800fd26:	e000      	b.n	800fd2a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800fd28:	2302      	movs	r3, #2
  }
}
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	3718      	adds	r7, #24
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bd80      	pop	{r7, pc}
 800fd32:	bf00      	nop
 800fd34:	80002000 	.word	0x80002000
 800fd38:	fe00e800 	.word	0xfe00e800

0800fd3c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b088      	sub	sp, #32
 800fd40:	af02      	add	r7, sp, #8
 800fd42:	60f8      	str	r0, [r7, #12]
 800fd44:	607a      	str	r2, [r7, #4]
 800fd46:	461a      	mov	r2, r3
 800fd48:	460b      	mov	r3, r1
 800fd4a:	817b      	strh	r3, [r7, #10]
 800fd4c:	4613      	mov	r3, r2
 800fd4e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fd56:	b2db      	uxtb	r3, r3
 800fd58:	2b20      	cmp	r3, #32
 800fd5a:	f040 80db 	bne.w	800ff14 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fd64:	2b01      	cmp	r3, #1
 800fd66:	d101      	bne.n	800fd6c <HAL_I2C_Master_Receive+0x30>
 800fd68:	2302      	movs	r3, #2
 800fd6a:	e0d4      	b.n	800ff16 <HAL_I2C_Master_Receive+0x1da>
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	2201      	movs	r2, #1
 800fd70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800fd74:	f7fd fe02 	bl	800d97c <HAL_GetTick>
 800fd78:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800fd7a:	697b      	ldr	r3, [r7, #20]
 800fd7c:	9300      	str	r3, [sp, #0]
 800fd7e:	2319      	movs	r3, #25
 800fd80:	2201      	movs	r2, #1
 800fd82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800fd86:	68f8      	ldr	r0, [r7, #12]
 800fd88:	f000 fbc8 	bl	801051c <I2C_WaitOnFlagUntilTimeout>
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d001      	beq.n	800fd96 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800fd92:	2301      	movs	r3, #1
 800fd94:	e0bf      	b.n	800ff16 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	2222      	movs	r2, #34	; 0x22
 800fd9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	2210      	movs	r2, #16
 800fda2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	2200      	movs	r2, #0
 800fdaa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	687a      	ldr	r2, [r7, #4]
 800fdb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	893a      	ldrh	r2, [r7, #8]
 800fdb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	2200      	movs	r2, #0
 800fdbc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fdc2:	b29b      	uxth	r3, r3
 800fdc4:	2bff      	cmp	r3, #255	; 0xff
 800fdc6:	d90e      	bls.n	800fde6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	22ff      	movs	r2, #255	; 0xff
 800fdcc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fdd2:	b2da      	uxtb	r2, r3
 800fdd4:	8979      	ldrh	r1, [r7, #10]
 800fdd6:	4b52      	ldr	r3, [pc, #328]	; (800ff20 <HAL_I2C_Master_Receive+0x1e4>)
 800fdd8:	9300      	str	r3, [sp, #0]
 800fdda:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800fdde:	68f8      	ldr	r0, [r7, #12]
 800fde0:	f000 fdec 	bl	80109bc <I2C_TransferConfig>
 800fde4:	e06d      	b.n	800fec2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fdea:	b29a      	uxth	r2, r3
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fdf4:	b2da      	uxtb	r2, r3
 800fdf6:	8979      	ldrh	r1, [r7, #10]
 800fdf8:	4b49      	ldr	r3, [pc, #292]	; (800ff20 <HAL_I2C_Master_Receive+0x1e4>)
 800fdfa:	9300      	str	r3, [sp, #0]
 800fdfc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800fe00:	68f8      	ldr	r0, [r7, #12]
 800fe02:	f000 fddb 	bl	80109bc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800fe06:	e05c      	b.n	800fec2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fe08:	697a      	ldr	r2, [r7, #20]
 800fe0a:	6a39      	ldr	r1, [r7, #32]
 800fe0c:	68f8      	ldr	r0, [r7, #12]
 800fe0e:	f000 fc69 	bl	80106e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800fe12:	4603      	mov	r3, r0
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d001      	beq.n	800fe1c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800fe18:	2301      	movs	r3, #1
 800fe1a:	e07c      	b.n	800ff16 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe26:	b2d2      	uxtb	r2, r2
 800fe28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe2e:	1c5a      	adds	r2, r3, #1
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fe38:	3b01      	subs	r3, #1
 800fe3a:	b29a      	uxth	r2, r3
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fe44:	b29b      	uxth	r3, r3
 800fe46:	3b01      	subs	r3, #1
 800fe48:	b29a      	uxth	r2, r3
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fe52:	b29b      	uxth	r3, r3
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d034      	beq.n	800fec2 <HAL_I2C_Master_Receive+0x186>
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d130      	bne.n	800fec2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800fe60:	697b      	ldr	r3, [r7, #20]
 800fe62:	9300      	str	r3, [sp, #0]
 800fe64:	6a3b      	ldr	r3, [r7, #32]
 800fe66:	2200      	movs	r2, #0
 800fe68:	2180      	movs	r1, #128	; 0x80
 800fe6a:	68f8      	ldr	r0, [r7, #12]
 800fe6c:	f000 fb56 	bl	801051c <I2C_WaitOnFlagUntilTimeout>
 800fe70:	4603      	mov	r3, r0
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d001      	beq.n	800fe7a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800fe76:	2301      	movs	r3, #1
 800fe78:	e04d      	b.n	800ff16 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fe7e:	b29b      	uxth	r3, r3
 800fe80:	2bff      	cmp	r3, #255	; 0xff
 800fe82:	d90e      	bls.n	800fea2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	22ff      	movs	r2, #255	; 0xff
 800fe88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fe8e:	b2da      	uxtb	r2, r3
 800fe90:	8979      	ldrh	r1, [r7, #10]
 800fe92:	2300      	movs	r3, #0
 800fe94:	9300      	str	r3, [sp, #0]
 800fe96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800fe9a:	68f8      	ldr	r0, [r7, #12]
 800fe9c:	f000 fd8e 	bl	80109bc <I2C_TransferConfig>
 800fea0:	e00f      	b.n	800fec2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fea6:	b29a      	uxth	r2, r3
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800feb0:	b2da      	uxtb	r2, r3
 800feb2:	8979      	ldrh	r1, [r7, #10]
 800feb4:	2300      	movs	r3, #0
 800feb6:	9300      	str	r3, [sp, #0]
 800feb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800febc:	68f8      	ldr	r0, [r7, #12]
 800febe:	f000 fd7d 	bl	80109bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fec6:	b29b      	uxth	r3, r3
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d19d      	bne.n	800fe08 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fecc:	697a      	ldr	r2, [r7, #20]
 800fece:	6a39      	ldr	r1, [r7, #32]
 800fed0:	68f8      	ldr	r0, [r7, #12]
 800fed2:	f000 fbc3 	bl	801065c <I2C_WaitOnSTOPFlagUntilTimeout>
 800fed6:	4603      	mov	r3, r0
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d001      	beq.n	800fee0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800fedc:	2301      	movs	r3, #1
 800fede:	e01a      	b.n	800ff16 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	2220      	movs	r2, #32
 800fee6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	6859      	ldr	r1, [r3, #4]
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	681a      	ldr	r2, [r3, #0]
 800fef2:	4b0c      	ldr	r3, [pc, #48]	; (800ff24 <HAL_I2C_Master_Receive+0x1e8>)
 800fef4:	400b      	ands	r3, r1
 800fef6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	2220      	movs	r2, #32
 800fefc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	2200      	movs	r2, #0
 800ff04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ff10:	2300      	movs	r3, #0
 800ff12:	e000      	b.n	800ff16 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800ff14:	2302      	movs	r3, #2
  }
}
 800ff16:	4618      	mov	r0, r3
 800ff18:	3718      	adds	r7, #24
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	bd80      	pop	{r7, pc}
 800ff1e:	bf00      	nop
 800ff20:	80002400 	.word	0x80002400
 800ff24:	fe00e800 	.word	0xfe00e800

0800ff28 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b088      	sub	sp, #32
 800ff2c:	af02      	add	r7, sp, #8
 800ff2e:	60f8      	str	r0, [r7, #12]
 800ff30:	4608      	mov	r0, r1
 800ff32:	4611      	mov	r1, r2
 800ff34:	461a      	mov	r2, r3
 800ff36:	4603      	mov	r3, r0
 800ff38:	817b      	strh	r3, [r7, #10]
 800ff3a:	460b      	mov	r3, r1
 800ff3c:	813b      	strh	r3, [r7, #8]
 800ff3e:	4613      	mov	r3, r2
 800ff40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ff48:	b2db      	uxtb	r3, r3
 800ff4a:	2b20      	cmp	r3, #32
 800ff4c:	f040 80f9 	bne.w	8010142 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ff50:	6a3b      	ldr	r3, [r7, #32]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d002      	beq.n	800ff5c <HAL_I2C_Mem_Write+0x34>
 800ff56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d105      	bne.n	800ff68 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ff62:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800ff64:	2301      	movs	r3, #1
 800ff66:	e0ed      	b.n	8010144 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ff6e:	2b01      	cmp	r3, #1
 800ff70:	d101      	bne.n	800ff76 <HAL_I2C_Mem_Write+0x4e>
 800ff72:	2302      	movs	r3, #2
 800ff74:	e0e6      	b.n	8010144 <HAL_I2C_Mem_Write+0x21c>
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	2201      	movs	r2, #1
 800ff7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ff7e:	f7fd fcfd 	bl	800d97c <HAL_GetTick>
 800ff82:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ff84:	697b      	ldr	r3, [r7, #20]
 800ff86:	9300      	str	r3, [sp, #0]
 800ff88:	2319      	movs	r3, #25
 800ff8a:	2201      	movs	r2, #1
 800ff8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ff90:	68f8      	ldr	r0, [r7, #12]
 800ff92:	f000 fac3 	bl	801051c <I2C_WaitOnFlagUntilTimeout>
 800ff96:	4603      	mov	r3, r0
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d001      	beq.n	800ffa0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800ff9c:	2301      	movs	r3, #1
 800ff9e:	e0d1      	b.n	8010144 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	2221      	movs	r2, #33	; 0x21
 800ffa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	2240      	movs	r2, #64	; 0x40
 800ffac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	6a3a      	ldr	r2, [r7, #32]
 800ffba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ffc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	2200      	movs	r2, #0
 800ffc6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ffc8:	88f8      	ldrh	r0, [r7, #6]
 800ffca:	893a      	ldrh	r2, [r7, #8]
 800ffcc:	8979      	ldrh	r1, [r7, #10]
 800ffce:	697b      	ldr	r3, [r7, #20]
 800ffd0:	9301      	str	r3, [sp, #4]
 800ffd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffd4:	9300      	str	r3, [sp, #0]
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	68f8      	ldr	r0, [r7, #12]
 800ffda:	f000 f9d3 	bl	8010384 <I2C_RequestMemoryWrite>
 800ffde:	4603      	mov	r3, r0
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d005      	beq.n	800fff0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800ffec:	2301      	movs	r3, #1
 800ffee:	e0a9      	b.n	8010144 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fff4:	b29b      	uxth	r3, r3
 800fff6:	2bff      	cmp	r3, #255	; 0xff
 800fff8:	d90e      	bls.n	8010018 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	22ff      	movs	r2, #255	; 0xff
 800fffe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010004:	b2da      	uxtb	r2, r3
 8010006:	8979      	ldrh	r1, [r7, #10]
 8010008:	2300      	movs	r3, #0
 801000a:	9300      	str	r3, [sp, #0]
 801000c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8010010:	68f8      	ldr	r0, [r7, #12]
 8010012:	f000 fcd3 	bl	80109bc <I2C_TransferConfig>
 8010016:	e00f      	b.n	8010038 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801001c:	b29a      	uxth	r2, r3
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010026:	b2da      	uxtb	r2, r3
 8010028:	8979      	ldrh	r1, [r7, #10]
 801002a:	2300      	movs	r3, #0
 801002c:	9300      	str	r3, [sp, #0]
 801002e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010032:	68f8      	ldr	r0, [r7, #12]
 8010034:	f000 fcc2 	bl	80109bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010038:	697a      	ldr	r2, [r7, #20]
 801003a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801003c:	68f8      	ldr	r0, [r7, #12]
 801003e:	f000 fac6 	bl	80105ce <I2C_WaitOnTXISFlagUntilTimeout>
 8010042:	4603      	mov	r3, r0
 8010044:	2b00      	cmp	r3, #0
 8010046:	d001      	beq.n	801004c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8010048:	2301      	movs	r3, #1
 801004a:	e07b      	b.n	8010144 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010050:	781a      	ldrb	r2, [r3, #0]
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801005c:	1c5a      	adds	r2, r3, #1
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010066:	b29b      	uxth	r3, r3
 8010068:	3b01      	subs	r3, #1
 801006a:	b29a      	uxth	r2, r3
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010074:	3b01      	subs	r3, #1
 8010076:	b29a      	uxth	r2, r3
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010080:	b29b      	uxth	r3, r3
 8010082:	2b00      	cmp	r3, #0
 8010084:	d034      	beq.n	80100f0 <HAL_I2C_Mem_Write+0x1c8>
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801008a:	2b00      	cmp	r3, #0
 801008c:	d130      	bne.n	80100f0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801008e:	697b      	ldr	r3, [r7, #20]
 8010090:	9300      	str	r3, [sp, #0]
 8010092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010094:	2200      	movs	r2, #0
 8010096:	2180      	movs	r1, #128	; 0x80
 8010098:	68f8      	ldr	r0, [r7, #12]
 801009a:	f000 fa3f 	bl	801051c <I2C_WaitOnFlagUntilTimeout>
 801009e:	4603      	mov	r3, r0
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d001      	beq.n	80100a8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80100a4:	2301      	movs	r3, #1
 80100a6:	e04d      	b.n	8010144 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80100ac:	b29b      	uxth	r3, r3
 80100ae:	2bff      	cmp	r3, #255	; 0xff
 80100b0:	d90e      	bls.n	80100d0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	22ff      	movs	r2, #255	; 0xff
 80100b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80100bc:	b2da      	uxtb	r2, r3
 80100be:	8979      	ldrh	r1, [r7, #10]
 80100c0:	2300      	movs	r3, #0
 80100c2:	9300      	str	r3, [sp, #0]
 80100c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80100c8:	68f8      	ldr	r0, [r7, #12]
 80100ca:	f000 fc77 	bl	80109bc <I2C_TransferConfig>
 80100ce:	e00f      	b.n	80100f0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80100d4:	b29a      	uxth	r2, r3
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80100de:	b2da      	uxtb	r2, r3
 80100e0:	8979      	ldrh	r1, [r7, #10]
 80100e2:	2300      	movs	r3, #0
 80100e4:	9300      	str	r3, [sp, #0]
 80100e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80100ea:	68f8      	ldr	r0, [r7, #12]
 80100ec:	f000 fc66 	bl	80109bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80100f4:	b29b      	uxth	r3, r3
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d19e      	bne.n	8010038 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80100fa:	697a      	ldr	r2, [r7, #20]
 80100fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80100fe:	68f8      	ldr	r0, [r7, #12]
 8010100:	f000 faac 	bl	801065c <I2C_WaitOnSTOPFlagUntilTimeout>
 8010104:	4603      	mov	r3, r0
 8010106:	2b00      	cmp	r3, #0
 8010108:	d001      	beq.n	801010e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 801010a:	2301      	movs	r3, #1
 801010c:	e01a      	b.n	8010144 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	2220      	movs	r2, #32
 8010114:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	6859      	ldr	r1, [r3, #4]
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	681a      	ldr	r2, [r3, #0]
 8010120:	4b0a      	ldr	r3, [pc, #40]	; (801014c <HAL_I2C_Mem_Write+0x224>)
 8010122:	400b      	ands	r3, r1
 8010124:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	2220      	movs	r2, #32
 801012a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	2200      	movs	r2, #0
 8010132:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	2200      	movs	r2, #0
 801013a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801013e:	2300      	movs	r3, #0
 8010140:	e000      	b.n	8010144 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8010142:	2302      	movs	r3, #2
  }
}
 8010144:	4618      	mov	r0, r3
 8010146:	3718      	adds	r7, #24
 8010148:	46bd      	mov	sp, r7
 801014a:	bd80      	pop	{r7, pc}
 801014c:	fe00e800 	.word	0xfe00e800

08010150 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b088      	sub	sp, #32
 8010154:	af02      	add	r7, sp, #8
 8010156:	60f8      	str	r0, [r7, #12]
 8010158:	4608      	mov	r0, r1
 801015a:	4611      	mov	r1, r2
 801015c:	461a      	mov	r2, r3
 801015e:	4603      	mov	r3, r0
 8010160:	817b      	strh	r3, [r7, #10]
 8010162:	460b      	mov	r3, r1
 8010164:	813b      	strh	r3, [r7, #8]
 8010166:	4613      	mov	r3, r2
 8010168:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010170:	b2db      	uxtb	r3, r3
 8010172:	2b20      	cmp	r3, #32
 8010174:	f040 80fd 	bne.w	8010372 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8010178:	6a3b      	ldr	r3, [r7, #32]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d002      	beq.n	8010184 <HAL_I2C_Mem_Read+0x34>
 801017e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010180:	2b00      	cmp	r3, #0
 8010182:	d105      	bne.n	8010190 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	f44f 7200 	mov.w	r2, #512	; 0x200
 801018a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 801018c:	2301      	movs	r3, #1
 801018e:	e0f1      	b.n	8010374 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010196:	2b01      	cmp	r3, #1
 8010198:	d101      	bne.n	801019e <HAL_I2C_Mem_Read+0x4e>
 801019a:	2302      	movs	r3, #2
 801019c:	e0ea      	b.n	8010374 <HAL_I2C_Mem_Read+0x224>
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	2201      	movs	r2, #1
 80101a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80101a6:	f7fd fbe9 	bl	800d97c <HAL_GetTick>
 80101aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80101ac:	697b      	ldr	r3, [r7, #20]
 80101ae:	9300      	str	r3, [sp, #0]
 80101b0:	2319      	movs	r3, #25
 80101b2:	2201      	movs	r2, #1
 80101b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80101b8:	68f8      	ldr	r0, [r7, #12]
 80101ba:	f000 f9af 	bl	801051c <I2C_WaitOnFlagUntilTimeout>
 80101be:	4603      	mov	r3, r0
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d001      	beq.n	80101c8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80101c4:	2301      	movs	r3, #1
 80101c6:	e0d5      	b.n	8010374 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	2222      	movs	r2, #34	; 0x22
 80101cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	2240      	movs	r2, #64	; 0x40
 80101d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	2200      	movs	r2, #0
 80101dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	6a3a      	ldr	r2, [r7, #32]
 80101e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80101e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	2200      	movs	r2, #0
 80101ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80101f0:	88f8      	ldrh	r0, [r7, #6]
 80101f2:	893a      	ldrh	r2, [r7, #8]
 80101f4:	8979      	ldrh	r1, [r7, #10]
 80101f6:	697b      	ldr	r3, [r7, #20]
 80101f8:	9301      	str	r3, [sp, #4]
 80101fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101fc:	9300      	str	r3, [sp, #0]
 80101fe:	4603      	mov	r3, r0
 8010200:	68f8      	ldr	r0, [r7, #12]
 8010202:	f000 f913 	bl	801042c <I2C_RequestMemoryRead>
 8010206:	4603      	mov	r3, r0
 8010208:	2b00      	cmp	r3, #0
 801020a:	d005      	beq.n	8010218 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	2200      	movs	r2, #0
 8010210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8010214:	2301      	movs	r3, #1
 8010216:	e0ad      	b.n	8010374 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801021c:	b29b      	uxth	r3, r3
 801021e:	2bff      	cmp	r3, #255	; 0xff
 8010220:	d90e      	bls.n	8010240 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	22ff      	movs	r2, #255	; 0xff
 8010226:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801022c:	b2da      	uxtb	r2, r3
 801022e:	8979      	ldrh	r1, [r7, #10]
 8010230:	4b52      	ldr	r3, [pc, #328]	; (801037c <HAL_I2C_Mem_Read+0x22c>)
 8010232:	9300      	str	r3, [sp, #0]
 8010234:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8010238:	68f8      	ldr	r0, [r7, #12]
 801023a:	f000 fbbf 	bl	80109bc <I2C_TransferConfig>
 801023e:	e00f      	b.n	8010260 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010244:	b29a      	uxth	r2, r3
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801024e:	b2da      	uxtb	r2, r3
 8010250:	8979      	ldrh	r1, [r7, #10]
 8010252:	4b4a      	ldr	r3, [pc, #296]	; (801037c <HAL_I2C_Mem_Read+0x22c>)
 8010254:	9300      	str	r3, [sp, #0]
 8010256:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801025a:	68f8      	ldr	r0, [r7, #12]
 801025c:	f000 fbae 	bl	80109bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8010260:	697b      	ldr	r3, [r7, #20]
 8010262:	9300      	str	r3, [sp, #0]
 8010264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010266:	2200      	movs	r2, #0
 8010268:	2104      	movs	r1, #4
 801026a:	68f8      	ldr	r0, [r7, #12]
 801026c:	f000 f956 	bl	801051c <I2C_WaitOnFlagUntilTimeout>
 8010270:	4603      	mov	r3, r0
 8010272:	2b00      	cmp	r3, #0
 8010274:	d001      	beq.n	801027a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8010276:	2301      	movs	r3, #1
 8010278:	e07c      	b.n	8010374 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010284:	b2d2      	uxtb	r2, r2
 8010286:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801028c:	1c5a      	adds	r2, r3, #1
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010296:	3b01      	subs	r3, #1
 8010298:	b29a      	uxth	r2, r3
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80102a2:	b29b      	uxth	r3, r3
 80102a4:	3b01      	subs	r3, #1
 80102a6:	b29a      	uxth	r2, r3
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80102b0:	b29b      	uxth	r3, r3
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d034      	beq.n	8010320 <HAL_I2C_Mem_Read+0x1d0>
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d130      	bne.n	8010320 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80102be:	697b      	ldr	r3, [r7, #20]
 80102c0:	9300      	str	r3, [sp, #0]
 80102c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102c4:	2200      	movs	r2, #0
 80102c6:	2180      	movs	r1, #128	; 0x80
 80102c8:	68f8      	ldr	r0, [r7, #12]
 80102ca:	f000 f927 	bl	801051c <I2C_WaitOnFlagUntilTimeout>
 80102ce:	4603      	mov	r3, r0
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d001      	beq.n	80102d8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80102d4:	2301      	movs	r3, #1
 80102d6:	e04d      	b.n	8010374 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80102dc:	b29b      	uxth	r3, r3
 80102de:	2bff      	cmp	r3, #255	; 0xff
 80102e0:	d90e      	bls.n	8010300 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	22ff      	movs	r2, #255	; 0xff
 80102e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80102ec:	b2da      	uxtb	r2, r3
 80102ee:	8979      	ldrh	r1, [r7, #10]
 80102f0:	2300      	movs	r3, #0
 80102f2:	9300      	str	r3, [sp, #0]
 80102f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80102f8:	68f8      	ldr	r0, [r7, #12]
 80102fa:	f000 fb5f 	bl	80109bc <I2C_TransferConfig>
 80102fe:	e00f      	b.n	8010320 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010304:	b29a      	uxth	r2, r3
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801030e:	b2da      	uxtb	r2, r3
 8010310:	8979      	ldrh	r1, [r7, #10]
 8010312:	2300      	movs	r3, #0
 8010314:	9300      	str	r3, [sp, #0]
 8010316:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801031a:	68f8      	ldr	r0, [r7, #12]
 801031c:	f000 fb4e 	bl	80109bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010324:	b29b      	uxth	r3, r3
 8010326:	2b00      	cmp	r3, #0
 8010328:	d19a      	bne.n	8010260 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801032a:	697a      	ldr	r2, [r7, #20]
 801032c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801032e:	68f8      	ldr	r0, [r7, #12]
 8010330:	f000 f994 	bl	801065c <I2C_WaitOnSTOPFlagUntilTimeout>
 8010334:	4603      	mov	r3, r0
 8010336:	2b00      	cmp	r3, #0
 8010338:	d001      	beq.n	801033e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 801033a:	2301      	movs	r3, #1
 801033c:	e01a      	b.n	8010374 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	2220      	movs	r2, #32
 8010344:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	6859      	ldr	r1, [r3, #4]
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	681a      	ldr	r2, [r3, #0]
 8010350:	4b0b      	ldr	r3, [pc, #44]	; (8010380 <HAL_I2C_Mem_Read+0x230>)
 8010352:	400b      	ands	r3, r1
 8010354:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	2220      	movs	r2, #32
 801035a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	2200      	movs	r2, #0
 8010362:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	2200      	movs	r2, #0
 801036a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801036e:	2300      	movs	r3, #0
 8010370:	e000      	b.n	8010374 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8010372:	2302      	movs	r3, #2
  }
}
 8010374:	4618      	mov	r0, r3
 8010376:	3718      	adds	r7, #24
 8010378:	46bd      	mov	sp, r7
 801037a:	bd80      	pop	{r7, pc}
 801037c:	80002400 	.word	0x80002400
 8010380:	fe00e800 	.word	0xfe00e800

08010384 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8010384:	b580      	push	{r7, lr}
 8010386:	b086      	sub	sp, #24
 8010388:	af02      	add	r7, sp, #8
 801038a:	60f8      	str	r0, [r7, #12]
 801038c:	4608      	mov	r0, r1
 801038e:	4611      	mov	r1, r2
 8010390:	461a      	mov	r2, r3
 8010392:	4603      	mov	r3, r0
 8010394:	817b      	strh	r3, [r7, #10]
 8010396:	460b      	mov	r3, r1
 8010398:	813b      	strh	r3, [r7, #8]
 801039a:	4613      	mov	r3, r2
 801039c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 801039e:	88fb      	ldrh	r3, [r7, #6]
 80103a0:	b2da      	uxtb	r2, r3
 80103a2:	8979      	ldrh	r1, [r7, #10]
 80103a4:	4b20      	ldr	r3, [pc, #128]	; (8010428 <I2C_RequestMemoryWrite+0xa4>)
 80103a6:	9300      	str	r3, [sp, #0]
 80103a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80103ac:	68f8      	ldr	r0, [r7, #12]
 80103ae:	f000 fb05 	bl	80109bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80103b2:	69fa      	ldr	r2, [r7, #28]
 80103b4:	69b9      	ldr	r1, [r7, #24]
 80103b6:	68f8      	ldr	r0, [r7, #12]
 80103b8:	f000 f909 	bl	80105ce <I2C_WaitOnTXISFlagUntilTimeout>
 80103bc:	4603      	mov	r3, r0
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d001      	beq.n	80103c6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80103c2:	2301      	movs	r3, #1
 80103c4:	e02c      	b.n	8010420 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80103c6:	88fb      	ldrh	r3, [r7, #6]
 80103c8:	2b01      	cmp	r3, #1
 80103ca:	d105      	bne.n	80103d8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80103cc:	893b      	ldrh	r3, [r7, #8]
 80103ce:	b2da      	uxtb	r2, r3
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	629a      	str	r2, [r3, #40]	; 0x28
 80103d6:	e015      	b.n	8010404 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80103d8:	893b      	ldrh	r3, [r7, #8]
 80103da:	0a1b      	lsrs	r3, r3, #8
 80103dc:	b29b      	uxth	r3, r3
 80103de:	b2da      	uxtb	r2, r3
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80103e6:	69fa      	ldr	r2, [r7, #28]
 80103e8:	69b9      	ldr	r1, [r7, #24]
 80103ea:	68f8      	ldr	r0, [r7, #12]
 80103ec:	f000 f8ef 	bl	80105ce <I2C_WaitOnTXISFlagUntilTimeout>
 80103f0:	4603      	mov	r3, r0
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d001      	beq.n	80103fa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80103f6:	2301      	movs	r3, #1
 80103f8:	e012      	b.n	8010420 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80103fa:	893b      	ldrh	r3, [r7, #8]
 80103fc:	b2da      	uxtb	r2, r3
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8010404:	69fb      	ldr	r3, [r7, #28]
 8010406:	9300      	str	r3, [sp, #0]
 8010408:	69bb      	ldr	r3, [r7, #24]
 801040a:	2200      	movs	r2, #0
 801040c:	2180      	movs	r1, #128	; 0x80
 801040e:	68f8      	ldr	r0, [r7, #12]
 8010410:	f000 f884 	bl	801051c <I2C_WaitOnFlagUntilTimeout>
 8010414:	4603      	mov	r3, r0
 8010416:	2b00      	cmp	r3, #0
 8010418:	d001      	beq.n	801041e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 801041a:	2301      	movs	r3, #1
 801041c:	e000      	b.n	8010420 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 801041e:	2300      	movs	r3, #0
}
 8010420:	4618      	mov	r0, r3
 8010422:	3710      	adds	r7, #16
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}
 8010428:	80002000 	.word	0x80002000

0801042c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 801042c:	b580      	push	{r7, lr}
 801042e:	b086      	sub	sp, #24
 8010430:	af02      	add	r7, sp, #8
 8010432:	60f8      	str	r0, [r7, #12]
 8010434:	4608      	mov	r0, r1
 8010436:	4611      	mov	r1, r2
 8010438:	461a      	mov	r2, r3
 801043a:	4603      	mov	r3, r0
 801043c:	817b      	strh	r3, [r7, #10]
 801043e:	460b      	mov	r3, r1
 8010440:	813b      	strh	r3, [r7, #8]
 8010442:	4613      	mov	r3, r2
 8010444:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8010446:	88fb      	ldrh	r3, [r7, #6]
 8010448:	b2da      	uxtb	r2, r3
 801044a:	8979      	ldrh	r1, [r7, #10]
 801044c:	4b20      	ldr	r3, [pc, #128]	; (80104d0 <I2C_RequestMemoryRead+0xa4>)
 801044e:	9300      	str	r3, [sp, #0]
 8010450:	2300      	movs	r3, #0
 8010452:	68f8      	ldr	r0, [r7, #12]
 8010454:	f000 fab2 	bl	80109bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010458:	69fa      	ldr	r2, [r7, #28]
 801045a:	69b9      	ldr	r1, [r7, #24]
 801045c:	68f8      	ldr	r0, [r7, #12]
 801045e:	f000 f8b6 	bl	80105ce <I2C_WaitOnTXISFlagUntilTimeout>
 8010462:	4603      	mov	r3, r0
 8010464:	2b00      	cmp	r3, #0
 8010466:	d001      	beq.n	801046c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8010468:	2301      	movs	r3, #1
 801046a:	e02c      	b.n	80104c6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801046c:	88fb      	ldrh	r3, [r7, #6]
 801046e:	2b01      	cmp	r3, #1
 8010470:	d105      	bne.n	801047e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8010472:	893b      	ldrh	r3, [r7, #8]
 8010474:	b2da      	uxtb	r2, r3
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	629a      	str	r2, [r3, #40]	; 0x28
 801047c:	e015      	b.n	80104aa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801047e:	893b      	ldrh	r3, [r7, #8]
 8010480:	0a1b      	lsrs	r3, r3, #8
 8010482:	b29b      	uxth	r3, r3
 8010484:	b2da      	uxtb	r2, r3
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801048c:	69fa      	ldr	r2, [r7, #28]
 801048e:	69b9      	ldr	r1, [r7, #24]
 8010490:	68f8      	ldr	r0, [r7, #12]
 8010492:	f000 f89c 	bl	80105ce <I2C_WaitOnTXISFlagUntilTimeout>
 8010496:	4603      	mov	r3, r0
 8010498:	2b00      	cmp	r3, #0
 801049a:	d001      	beq.n	80104a0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 801049c:	2301      	movs	r3, #1
 801049e:	e012      	b.n	80104c6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80104a0:	893b      	ldrh	r3, [r7, #8]
 80104a2:	b2da      	uxtb	r2, r3
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80104aa:	69fb      	ldr	r3, [r7, #28]
 80104ac:	9300      	str	r3, [sp, #0]
 80104ae:	69bb      	ldr	r3, [r7, #24]
 80104b0:	2200      	movs	r2, #0
 80104b2:	2140      	movs	r1, #64	; 0x40
 80104b4:	68f8      	ldr	r0, [r7, #12]
 80104b6:	f000 f831 	bl	801051c <I2C_WaitOnFlagUntilTimeout>
 80104ba:	4603      	mov	r3, r0
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d001      	beq.n	80104c4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80104c0:	2301      	movs	r3, #1
 80104c2:	e000      	b.n	80104c6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80104c4:	2300      	movs	r3, #0
}
 80104c6:	4618      	mov	r0, r3
 80104c8:	3710      	adds	r7, #16
 80104ca:	46bd      	mov	sp, r7
 80104cc:	bd80      	pop	{r7, pc}
 80104ce:	bf00      	nop
 80104d0:	80002000 	.word	0x80002000

080104d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80104d4:	b480      	push	{r7}
 80104d6:	b083      	sub	sp, #12
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	699b      	ldr	r3, [r3, #24]
 80104e2:	f003 0302 	and.w	r3, r3, #2
 80104e6:	2b02      	cmp	r3, #2
 80104e8:	d103      	bne.n	80104f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	2200      	movs	r2, #0
 80104f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	699b      	ldr	r3, [r3, #24]
 80104f8:	f003 0301 	and.w	r3, r3, #1
 80104fc:	2b01      	cmp	r3, #1
 80104fe:	d007      	beq.n	8010510 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	699a      	ldr	r2, [r3, #24]
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	f042 0201 	orr.w	r2, r2, #1
 801050e:	619a      	str	r2, [r3, #24]
  }
}
 8010510:	bf00      	nop
 8010512:	370c      	adds	r7, #12
 8010514:	46bd      	mov	sp, r7
 8010516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051a:	4770      	bx	lr

0801051c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b084      	sub	sp, #16
 8010520:	af00      	add	r7, sp, #0
 8010522:	60f8      	str	r0, [r7, #12]
 8010524:	60b9      	str	r1, [r7, #8]
 8010526:	603b      	str	r3, [r7, #0]
 8010528:	4613      	mov	r3, r2
 801052a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801052c:	e03b      	b.n	80105a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801052e:	69ba      	ldr	r2, [r7, #24]
 8010530:	6839      	ldr	r1, [r7, #0]
 8010532:	68f8      	ldr	r0, [r7, #12]
 8010534:	f000 f962 	bl	80107fc <I2C_IsErrorOccurred>
 8010538:	4603      	mov	r3, r0
 801053a:	2b00      	cmp	r3, #0
 801053c:	d001      	beq.n	8010542 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 801053e:	2301      	movs	r3, #1
 8010540:	e041      	b.n	80105c6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010542:	683b      	ldr	r3, [r7, #0]
 8010544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010548:	d02d      	beq.n	80105a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801054a:	f7fd fa17 	bl	800d97c <HAL_GetTick>
 801054e:	4602      	mov	r2, r0
 8010550:	69bb      	ldr	r3, [r7, #24]
 8010552:	1ad3      	subs	r3, r2, r3
 8010554:	683a      	ldr	r2, [r7, #0]
 8010556:	429a      	cmp	r2, r3
 8010558:	d302      	bcc.n	8010560 <I2C_WaitOnFlagUntilTimeout+0x44>
 801055a:	683b      	ldr	r3, [r7, #0]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d122      	bne.n	80105a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	699a      	ldr	r2, [r3, #24]
 8010566:	68bb      	ldr	r3, [r7, #8]
 8010568:	4013      	ands	r3, r2
 801056a:	68ba      	ldr	r2, [r7, #8]
 801056c:	429a      	cmp	r2, r3
 801056e:	bf0c      	ite	eq
 8010570:	2301      	moveq	r3, #1
 8010572:	2300      	movne	r3, #0
 8010574:	b2db      	uxtb	r3, r3
 8010576:	461a      	mov	r2, r3
 8010578:	79fb      	ldrb	r3, [r7, #7]
 801057a:	429a      	cmp	r2, r3
 801057c:	d113      	bne.n	80105a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010582:	f043 0220 	orr.w	r2, r3, #32
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	2220      	movs	r2, #32
 801058e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	2200      	movs	r2, #0
 8010596:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	2200      	movs	r2, #0
 801059e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80105a2:	2301      	movs	r3, #1
 80105a4:	e00f      	b.n	80105c6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	699a      	ldr	r2, [r3, #24]
 80105ac:	68bb      	ldr	r3, [r7, #8]
 80105ae:	4013      	ands	r3, r2
 80105b0:	68ba      	ldr	r2, [r7, #8]
 80105b2:	429a      	cmp	r2, r3
 80105b4:	bf0c      	ite	eq
 80105b6:	2301      	moveq	r3, #1
 80105b8:	2300      	movne	r3, #0
 80105ba:	b2db      	uxtb	r3, r3
 80105bc:	461a      	mov	r2, r3
 80105be:	79fb      	ldrb	r3, [r7, #7]
 80105c0:	429a      	cmp	r2, r3
 80105c2:	d0b4      	beq.n	801052e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80105c4:	2300      	movs	r3, #0
}
 80105c6:	4618      	mov	r0, r3
 80105c8:	3710      	adds	r7, #16
 80105ca:	46bd      	mov	sp, r7
 80105cc:	bd80      	pop	{r7, pc}

080105ce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80105ce:	b580      	push	{r7, lr}
 80105d0:	b084      	sub	sp, #16
 80105d2:	af00      	add	r7, sp, #0
 80105d4:	60f8      	str	r0, [r7, #12]
 80105d6:	60b9      	str	r1, [r7, #8]
 80105d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80105da:	e033      	b.n	8010644 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80105dc:	687a      	ldr	r2, [r7, #4]
 80105de:	68b9      	ldr	r1, [r7, #8]
 80105e0:	68f8      	ldr	r0, [r7, #12]
 80105e2:	f000 f90b 	bl	80107fc <I2C_IsErrorOccurred>
 80105e6:	4603      	mov	r3, r0
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d001      	beq.n	80105f0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80105ec:	2301      	movs	r3, #1
 80105ee:	e031      	b.n	8010654 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80105f0:	68bb      	ldr	r3, [r7, #8]
 80105f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105f6:	d025      	beq.n	8010644 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80105f8:	f7fd f9c0 	bl	800d97c <HAL_GetTick>
 80105fc:	4602      	mov	r2, r0
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	1ad3      	subs	r3, r2, r3
 8010602:	68ba      	ldr	r2, [r7, #8]
 8010604:	429a      	cmp	r2, r3
 8010606:	d302      	bcc.n	801060e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8010608:	68bb      	ldr	r3, [r7, #8]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d11a      	bne.n	8010644 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	699b      	ldr	r3, [r3, #24]
 8010614:	f003 0302 	and.w	r3, r3, #2
 8010618:	2b02      	cmp	r3, #2
 801061a:	d013      	beq.n	8010644 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010620:	f043 0220 	orr.w	r2, r3, #32
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	2220      	movs	r2, #32
 801062c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	2200      	movs	r2, #0
 8010634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	2200      	movs	r2, #0
 801063c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8010640:	2301      	movs	r3, #1
 8010642:	e007      	b.n	8010654 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	699b      	ldr	r3, [r3, #24]
 801064a:	f003 0302 	and.w	r3, r3, #2
 801064e:	2b02      	cmp	r3, #2
 8010650:	d1c4      	bne.n	80105dc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8010652:	2300      	movs	r3, #0
}
 8010654:	4618      	mov	r0, r3
 8010656:	3710      	adds	r7, #16
 8010658:	46bd      	mov	sp, r7
 801065a:	bd80      	pop	{r7, pc}

0801065c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801065c:	b580      	push	{r7, lr}
 801065e:	b084      	sub	sp, #16
 8010660:	af00      	add	r7, sp, #0
 8010662:	60f8      	str	r0, [r7, #12]
 8010664:	60b9      	str	r1, [r7, #8]
 8010666:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010668:	e02f      	b.n	80106ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801066a:	687a      	ldr	r2, [r7, #4]
 801066c:	68b9      	ldr	r1, [r7, #8]
 801066e:	68f8      	ldr	r0, [r7, #12]
 8010670:	f000 f8c4 	bl	80107fc <I2C_IsErrorOccurred>
 8010674:	4603      	mov	r3, r0
 8010676:	2b00      	cmp	r3, #0
 8010678:	d001      	beq.n	801067e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801067a:	2301      	movs	r3, #1
 801067c:	e02d      	b.n	80106da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801067e:	f7fd f97d 	bl	800d97c <HAL_GetTick>
 8010682:	4602      	mov	r2, r0
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	1ad3      	subs	r3, r2, r3
 8010688:	68ba      	ldr	r2, [r7, #8]
 801068a:	429a      	cmp	r2, r3
 801068c:	d302      	bcc.n	8010694 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801068e:	68bb      	ldr	r3, [r7, #8]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d11a      	bne.n	80106ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	699b      	ldr	r3, [r3, #24]
 801069a:	f003 0320 	and.w	r3, r3, #32
 801069e:	2b20      	cmp	r3, #32
 80106a0:	d013      	beq.n	80106ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80106a6:	f043 0220 	orr.w	r2, r3, #32
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	2220      	movs	r2, #32
 80106b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	2200      	movs	r2, #0
 80106ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	2200      	movs	r2, #0
 80106c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80106c6:	2301      	movs	r3, #1
 80106c8:	e007      	b.n	80106da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	699b      	ldr	r3, [r3, #24]
 80106d0:	f003 0320 	and.w	r3, r3, #32
 80106d4:	2b20      	cmp	r3, #32
 80106d6:	d1c8      	bne.n	801066a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80106d8:	2300      	movs	r3, #0
}
 80106da:	4618      	mov	r0, r3
 80106dc:	3710      	adds	r7, #16
 80106de:	46bd      	mov	sp, r7
 80106e0:	bd80      	pop	{r7, pc}
	...

080106e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b086      	sub	sp, #24
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	60f8      	str	r0, [r7, #12]
 80106ec:	60b9      	str	r1, [r7, #8]
 80106ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80106f0:	2300      	movs	r3, #0
 80106f2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80106f4:	e071      	b.n	80107da <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80106f6:	687a      	ldr	r2, [r7, #4]
 80106f8:	68b9      	ldr	r1, [r7, #8]
 80106fa:	68f8      	ldr	r0, [r7, #12]
 80106fc:	f000 f87e 	bl	80107fc <I2C_IsErrorOccurred>
 8010700:	4603      	mov	r3, r0
 8010702:	2b00      	cmp	r3, #0
 8010704:	d001      	beq.n	801070a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8010706:	2301      	movs	r3, #1
 8010708:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	699b      	ldr	r3, [r3, #24]
 8010710:	f003 0320 	and.w	r3, r3, #32
 8010714:	2b20      	cmp	r3, #32
 8010716:	d13b      	bne.n	8010790 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8010718:	7dfb      	ldrb	r3, [r7, #23]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d138      	bne.n	8010790 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	699b      	ldr	r3, [r3, #24]
 8010724:	f003 0304 	and.w	r3, r3, #4
 8010728:	2b04      	cmp	r3, #4
 801072a:	d105      	bne.n	8010738 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010730:	2b00      	cmp	r3, #0
 8010732:	d001      	beq.n	8010738 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8010734:	2300      	movs	r3, #0
 8010736:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	699b      	ldr	r3, [r3, #24]
 801073e:	f003 0310 	and.w	r3, r3, #16
 8010742:	2b10      	cmp	r3, #16
 8010744:	d121      	bne.n	801078a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	2210      	movs	r2, #16
 801074c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	2204      	movs	r2, #4
 8010752:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	2220      	movs	r2, #32
 801075a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	6859      	ldr	r1, [r3, #4]
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	681a      	ldr	r2, [r3, #0]
 8010766:	4b24      	ldr	r3, [pc, #144]	; (80107f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8010768:	400b      	ands	r3, r1
 801076a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	2220      	movs	r2, #32
 8010770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	2200      	movs	r2, #0
 8010778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	2200      	movs	r2, #0
 8010780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8010784:	2301      	movs	r3, #1
 8010786:	75fb      	strb	r3, [r7, #23]
 8010788:	e002      	b.n	8010790 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	2200      	movs	r2, #0
 801078e:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8010790:	f7fd f8f4 	bl	800d97c <HAL_GetTick>
 8010794:	4602      	mov	r2, r0
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	1ad3      	subs	r3, r2, r3
 801079a:	68ba      	ldr	r2, [r7, #8]
 801079c:	429a      	cmp	r2, r3
 801079e:	d302      	bcc.n	80107a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80107a0:	68bb      	ldr	r3, [r7, #8]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d119      	bne.n	80107da <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80107a6:	7dfb      	ldrb	r3, [r7, #23]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d116      	bne.n	80107da <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	699b      	ldr	r3, [r3, #24]
 80107b2:	f003 0304 	and.w	r3, r3, #4
 80107b6:	2b04      	cmp	r3, #4
 80107b8:	d00f      	beq.n	80107da <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107be:	f043 0220 	orr.w	r2, r3, #32
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	2220      	movs	r2, #32
 80107ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	2200      	movs	r2, #0
 80107d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80107d6:	2301      	movs	r3, #1
 80107d8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	699b      	ldr	r3, [r3, #24]
 80107e0:	f003 0304 	and.w	r3, r3, #4
 80107e4:	2b04      	cmp	r3, #4
 80107e6:	d002      	beq.n	80107ee <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80107e8:	7dfb      	ldrb	r3, [r7, #23]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d083      	beq.n	80106f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80107ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80107f0:	4618      	mov	r0, r3
 80107f2:	3718      	adds	r7, #24
 80107f4:	46bd      	mov	sp, r7
 80107f6:	bd80      	pop	{r7, pc}
 80107f8:	fe00e800 	.word	0xfe00e800

080107fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b08a      	sub	sp, #40	; 0x28
 8010800:	af00      	add	r7, sp, #0
 8010802:	60f8      	str	r0, [r7, #12]
 8010804:	60b9      	str	r1, [r7, #8]
 8010806:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010808:	2300      	movs	r3, #0
 801080a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	699b      	ldr	r3, [r3, #24]
 8010814:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8010816:	2300      	movs	r3, #0
 8010818:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 801081e:	69bb      	ldr	r3, [r7, #24]
 8010820:	f003 0310 	and.w	r3, r3, #16
 8010824:	2b00      	cmp	r3, #0
 8010826:	d068      	beq.n	80108fa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	2210      	movs	r2, #16
 801082e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8010830:	e049      	b.n	80108c6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8010832:	68bb      	ldr	r3, [r7, #8]
 8010834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010838:	d045      	beq.n	80108c6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801083a:	f7fd f89f 	bl	800d97c <HAL_GetTick>
 801083e:	4602      	mov	r2, r0
 8010840:	69fb      	ldr	r3, [r7, #28]
 8010842:	1ad3      	subs	r3, r2, r3
 8010844:	68ba      	ldr	r2, [r7, #8]
 8010846:	429a      	cmp	r2, r3
 8010848:	d302      	bcc.n	8010850 <I2C_IsErrorOccurred+0x54>
 801084a:	68bb      	ldr	r3, [r7, #8]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d13a      	bne.n	80108c6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	685b      	ldr	r3, [r3, #4]
 8010856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801085a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010862:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	699b      	ldr	r3, [r3, #24]
 801086a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801086e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010872:	d121      	bne.n	80108b8 <I2C_IsErrorOccurred+0xbc>
 8010874:	697b      	ldr	r3, [r7, #20]
 8010876:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801087a:	d01d      	beq.n	80108b8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 801087c:	7cfb      	ldrb	r3, [r7, #19]
 801087e:	2b20      	cmp	r3, #32
 8010880:	d01a      	beq.n	80108b8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	685a      	ldr	r2, [r3, #4]
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010890:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8010892:	f7fd f873 	bl	800d97c <HAL_GetTick>
 8010896:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010898:	e00e      	b.n	80108b8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801089a:	f7fd f86f 	bl	800d97c <HAL_GetTick>
 801089e:	4602      	mov	r2, r0
 80108a0:	69fb      	ldr	r3, [r7, #28]
 80108a2:	1ad3      	subs	r3, r2, r3
 80108a4:	2b19      	cmp	r3, #25
 80108a6:	d907      	bls.n	80108b8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80108a8:	6a3b      	ldr	r3, [r7, #32]
 80108aa:	f043 0320 	orr.w	r3, r3, #32
 80108ae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80108b0:	2301      	movs	r3, #1
 80108b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80108b6:	e006      	b.n	80108c6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	699b      	ldr	r3, [r3, #24]
 80108be:	f003 0320 	and.w	r3, r3, #32
 80108c2:	2b20      	cmp	r3, #32
 80108c4:	d1e9      	bne.n	801089a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	699b      	ldr	r3, [r3, #24]
 80108cc:	f003 0320 	and.w	r3, r3, #32
 80108d0:	2b20      	cmp	r3, #32
 80108d2:	d003      	beq.n	80108dc <I2C_IsErrorOccurred+0xe0>
 80108d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d0aa      	beq.n	8010832 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80108dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d103      	bne.n	80108ec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	2220      	movs	r2, #32
 80108ea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80108ec:	6a3b      	ldr	r3, [r7, #32]
 80108ee:	f043 0304 	orr.w	r3, r3, #4
 80108f2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80108f4:	2301      	movs	r3, #1
 80108f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	699b      	ldr	r3, [r3, #24]
 8010900:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8010902:	69bb      	ldr	r3, [r7, #24]
 8010904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010908:	2b00      	cmp	r3, #0
 801090a:	d00b      	beq.n	8010924 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 801090c:	6a3b      	ldr	r3, [r7, #32]
 801090e:	f043 0301 	orr.w	r3, r3, #1
 8010912:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	f44f 7280 	mov.w	r2, #256	; 0x100
 801091c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801091e:	2301      	movs	r3, #1
 8010920:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8010924:	69bb      	ldr	r3, [r7, #24]
 8010926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801092a:	2b00      	cmp	r3, #0
 801092c:	d00b      	beq.n	8010946 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 801092e:	6a3b      	ldr	r3, [r7, #32]
 8010930:	f043 0308 	orr.w	r3, r3, #8
 8010934:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801093e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010940:	2301      	movs	r3, #1
 8010942:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8010946:	69bb      	ldr	r3, [r7, #24]
 8010948:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801094c:	2b00      	cmp	r3, #0
 801094e:	d00b      	beq.n	8010968 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8010950:	6a3b      	ldr	r3, [r7, #32]
 8010952:	f043 0302 	orr.w	r3, r3, #2
 8010956:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010960:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010962:	2301      	movs	r3, #1
 8010964:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8010968:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801096c:	2b00      	cmp	r3, #0
 801096e:	d01c      	beq.n	80109aa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010970:	68f8      	ldr	r0, [r7, #12]
 8010972:	f7ff fdaf 	bl	80104d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	6859      	ldr	r1, [r3, #4]
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	681a      	ldr	r2, [r3, #0]
 8010980:	4b0d      	ldr	r3, [pc, #52]	; (80109b8 <I2C_IsErrorOccurred+0x1bc>)
 8010982:	400b      	ands	r3, r1
 8010984:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801098a:	6a3b      	ldr	r3, [r7, #32]
 801098c:	431a      	orrs	r2, r3
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	2220      	movs	r2, #32
 8010996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	2200      	movs	r2, #0
 801099e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	2200      	movs	r2, #0
 80109a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80109aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80109ae:	4618      	mov	r0, r3
 80109b0:	3728      	adds	r7, #40	; 0x28
 80109b2:	46bd      	mov	sp, r7
 80109b4:	bd80      	pop	{r7, pc}
 80109b6:	bf00      	nop
 80109b8:	fe00e800 	.word	0xfe00e800

080109bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80109bc:	b480      	push	{r7}
 80109be:	b087      	sub	sp, #28
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	60f8      	str	r0, [r7, #12]
 80109c4:	607b      	str	r3, [r7, #4]
 80109c6:	460b      	mov	r3, r1
 80109c8:	817b      	strh	r3, [r7, #10]
 80109ca:	4613      	mov	r3, r2
 80109cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80109ce:	897b      	ldrh	r3, [r7, #10]
 80109d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80109d4:	7a7b      	ldrb	r3, [r7, #9]
 80109d6:	041b      	lsls	r3, r3, #16
 80109d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80109dc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80109e2:	6a3b      	ldr	r3, [r7, #32]
 80109e4:	4313      	orrs	r3, r2
 80109e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80109ea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	685a      	ldr	r2, [r3, #4]
 80109f2:	6a3b      	ldr	r3, [r7, #32]
 80109f4:	0d5b      	lsrs	r3, r3, #21
 80109f6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80109fa:	4b08      	ldr	r3, [pc, #32]	; (8010a1c <I2C_TransferConfig+0x60>)
 80109fc:	430b      	orrs	r3, r1
 80109fe:	43db      	mvns	r3, r3
 8010a00:	ea02 0103 	and.w	r1, r2, r3
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	697a      	ldr	r2, [r7, #20]
 8010a0a:	430a      	orrs	r2, r1
 8010a0c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8010a0e:	bf00      	nop
 8010a10:	371c      	adds	r7, #28
 8010a12:	46bd      	mov	sp, r7
 8010a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a18:	4770      	bx	lr
 8010a1a:	bf00      	nop
 8010a1c:	03ff63ff 	.word	0x03ff63ff

08010a20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8010a20:	b480      	push	{r7}
 8010a22:	b083      	sub	sp, #12
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
 8010a28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010a30:	b2db      	uxtb	r3, r3
 8010a32:	2b20      	cmp	r3, #32
 8010a34:	d138      	bne.n	8010aa8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a3c:	2b01      	cmp	r3, #1
 8010a3e:	d101      	bne.n	8010a44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8010a40:	2302      	movs	r3, #2
 8010a42:	e032      	b.n	8010aaa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	2201      	movs	r2, #1
 8010a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	2224      	movs	r2, #36	; 0x24
 8010a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	681a      	ldr	r2, [r3, #0]
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	f022 0201 	bic.w	r2, r2, #1
 8010a62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	681a      	ldr	r2, [r3, #0]
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010a72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	6819      	ldr	r1, [r3, #0]
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	683a      	ldr	r2, [r7, #0]
 8010a80:	430a      	orrs	r2, r1
 8010a82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	681a      	ldr	r2, [r3, #0]
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	f042 0201 	orr.w	r2, r2, #1
 8010a92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	2220      	movs	r2, #32
 8010a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	e000      	b.n	8010aaa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010aa8:	2302      	movs	r3, #2
  }
}
 8010aaa:	4618      	mov	r0, r3
 8010aac:	370c      	adds	r7, #12
 8010aae:	46bd      	mov	sp, r7
 8010ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab4:	4770      	bx	lr

08010ab6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8010ab6:	b480      	push	{r7}
 8010ab8:	b085      	sub	sp, #20
 8010aba:	af00      	add	r7, sp, #0
 8010abc:	6078      	str	r0, [r7, #4]
 8010abe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010ac6:	b2db      	uxtb	r3, r3
 8010ac8:	2b20      	cmp	r3, #32
 8010aca:	d139      	bne.n	8010b40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ad2:	2b01      	cmp	r3, #1
 8010ad4:	d101      	bne.n	8010ada <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8010ad6:	2302      	movs	r3, #2
 8010ad8:	e033      	b.n	8010b42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	2201      	movs	r2, #1
 8010ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	2224      	movs	r2, #36	; 0x24
 8010ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	681a      	ldr	r2, [r3, #0]
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	f022 0201 	bic.w	r2, r2, #1
 8010af8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8010b08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8010b0a:	683b      	ldr	r3, [r7, #0]
 8010b0c:	021b      	lsls	r3, r3, #8
 8010b0e:	68fa      	ldr	r2, [r7, #12]
 8010b10:	4313      	orrs	r3, r2
 8010b12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	68fa      	ldr	r2, [r7, #12]
 8010b1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	681a      	ldr	r2, [r3, #0]
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	f042 0201 	orr.w	r2, r2, #1
 8010b2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	2220      	movs	r2, #32
 8010b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	2200      	movs	r2, #0
 8010b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	e000      	b.n	8010b42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8010b40:	2302      	movs	r3, #2
  }
}
 8010b42:	4618      	mov	r0, r3
 8010b44:	3714      	adds	r7, #20
 8010b46:	46bd      	mov	sp, r7
 8010b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b4c:	4770      	bx	lr
	...

08010b50 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b084      	sub	sp, #16
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8010b58:	2300      	movs	r3, #0
 8010b5a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d01e      	beq.n	8010ba0 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8010b62:	4b13      	ldr	r3, [pc, #76]	; (8010bb0 <HAL_IPCC_Init+0x60>)
 8010b64:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010b6c:	b2db      	uxtb	r3, r3
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d102      	bne.n	8010b78 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8010b72:	6878      	ldr	r0, [r7, #4]
 8010b74:	f7fb fb44 	bl	800c200 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8010b78:	68b8      	ldr	r0, [r7, #8]
 8010b7a:	f000 f85b 	bl	8010c34 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8010b7e:	68bb      	ldr	r3, [r7, #8]
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8010b86:	68bb      	ldr	r3, [r7, #8]
 8010b88:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8010b8a:	6878      	ldr	r0, [r7, #4]
 8010b8c:	f000 f82c 	bl	8010be8 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	2200      	movs	r2, #0
 8010b94:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	2201      	movs	r2, #1
 8010b9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8010b9e:	e001      	b.n	8010ba4 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8010ba0:	2301      	movs	r3, #1
 8010ba2:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8010ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	3710      	adds	r7, #16
 8010baa:	46bd      	mov	sp, r7
 8010bac:	bd80      	pop	{r7, pc}
 8010bae:	bf00      	nop
 8010bb0:	58000c00 	.word	0x58000c00

08010bb4 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8010bb4:	b480      	push	{r7}
 8010bb6:	b085      	sub	sp, #20
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	60f8      	str	r0, [r7, #12]
 8010bbc:	60b9      	str	r1, [r7, #8]
 8010bbe:	4613      	mov	r3, r2
 8010bc0:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8010bc2:	bf00      	nop
 8010bc4:	3714      	adds	r7, #20
 8010bc6:	46bd      	mov	sp, r7
 8010bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bcc:	4770      	bx	lr

08010bce <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8010bce:	b480      	push	{r7}
 8010bd0:	b085      	sub	sp, #20
 8010bd2:	af00      	add	r7, sp, #0
 8010bd4:	60f8      	str	r0, [r7, #12]
 8010bd6:	60b9      	str	r1, [r7, #8]
 8010bd8:	4613      	mov	r3, r2
 8010bda:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8010bdc:	bf00      	nop
 8010bde:	3714      	adds	r7, #20
 8010be0:	46bd      	mov	sp, r7
 8010be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be6:	4770      	bx	lr

08010be8 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8010be8:	b480      	push	{r7}
 8010bea:	b085      	sub	sp, #20
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	60fb      	str	r3, [r7, #12]
 8010bf4:	e00f      	b.n	8010c16 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8010bf6:	687a      	ldr	r2, [r7, #4]
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	009b      	lsls	r3, r3, #2
 8010bfc:	4413      	add	r3, r2
 8010bfe:	4a0b      	ldr	r2, [pc, #44]	; (8010c2c <IPCC_SetDefaultCallbacks+0x44>)
 8010c00:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8010c02:	687a      	ldr	r2, [r7, #4]
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	3306      	adds	r3, #6
 8010c08:	009b      	lsls	r3, r3, #2
 8010c0a:	4413      	add	r3, r2
 8010c0c:	4a08      	ldr	r2, [pc, #32]	; (8010c30 <IPCC_SetDefaultCallbacks+0x48>)
 8010c0e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	3301      	adds	r3, #1
 8010c14:	60fb      	str	r3, [r7, #12]
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	2b05      	cmp	r3, #5
 8010c1a:	d9ec      	bls.n	8010bf6 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8010c1c:	bf00      	nop
 8010c1e:	bf00      	nop
 8010c20:	3714      	adds	r7, #20
 8010c22:	46bd      	mov	sp, r7
 8010c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c28:	4770      	bx	lr
 8010c2a:	bf00      	nop
 8010c2c:	08010bb5 	.word	0x08010bb5
 8010c30:	08010bcf 	.word	0x08010bcf

08010c34 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8010c34:	b480      	push	{r7}
 8010c36:	b083      	sub	sp, #12
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	2200      	movs	r2, #0
 8010c40:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8010c48:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	223f      	movs	r2, #63	; 0x3f
 8010c4e:	609a      	str	r2, [r3, #8]
}
 8010c50:	bf00      	nop
 8010c52:	370c      	adds	r7, #12
 8010c54:	46bd      	mov	sp, r7
 8010c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5a:	4770      	bx	lr

08010c5c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8010c5c:	b480      	push	{r7}
 8010c5e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8010c60:	4b05      	ldr	r3, [pc, #20]	; (8010c78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	4a04      	ldr	r2, [pc, #16]	; (8010c78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8010c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010c6a:	6013      	str	r3, [r2, #0]
}
 8010c6c:	bf00      	nop
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c74:	4770      	bx	lr
 8010c76:	bf00      	nop
 8010c78:	58000400 	.word	0x58000400

08010c7c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8010c7c:	b480      	push	{r7}
 8010c7e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8010c80:	4b04      	ldr	r3, [pc, #16]	; (8010c94 <HAL_PWREx_GetVoltageRange+0x18>)
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8010c88:	4618      	mov	r0, r3
 8010c8a:	46bd      	mov	sp, r7
 8010c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c90:	4770      	bx	lr
 8010c92:	bf00      	nop
 8010c94:	58000400 	.word	0x58000400

08010c98 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b086      	sub	sp, #24
 8010c9c:	af02      	add	r7, sp, #8
 8010c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8010ca0:	f7fc fe6c 	bl	800d97c <HAL_GetTick>
 8010ca4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d101      	bne.n	8010cb0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8010cac:	2301      	movs	r3, #1
 8010cae:	e063      	b.n	8010d78 <HAL_QSPI_Init+0xe0>
  assert_param(IS_QSPI_SSHIFT(hqspi->Init.SampleShifting));
  assert_param(IS_QSPI_FLASH_SIZE(hqspi->Init.FlashSize));
  assert_param(IS_QSPI_CS_HIGH_TIME(hqspi->Init.ChipSelectHighTime));
  assert_param(IS_QSPI_CLOCK_MODE(hqspi->Init.ClockMode));

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010cb6:	b2db      	uxtb	r3, r3
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d10b      	bne.n	8010cd4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	2200      	movs	r2, #0
 8010cc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8010cc4:	6878      	ldr	r0, [r7, #4]
 8010cc6:	f7fb fc21 	bl	800c50c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8010cca:	f241 3188 	movw	r1, #5000	; 0x1388
 8010cce:	6878      	ldr	r0, [r7, #4]
 8010cd0:	f000 fc66 	bl	80115a0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	689b      	ldr	r3, [r3, #8]
 8010ce2:	3b01      	subs	r3, #1
 8010ce4:	021a      	lsls	r2, r3, #8
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	430a      	orrs	r2, r1
 8010cec:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cf2:	9300      	str	r3, [sp, #0]
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	2200      	movs	r2, #0
 8010cf8:	2120      	movs	r1, #32
 8010cfa:	6878      	ldr	r0, [r7, #4]
 8010cfc:	f000 fc91 	bl	8011622 <QSPI_WaitFlagStateUntilTimeout>
 8010d00:	4603      	mov	r3, r0
 8010d02:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8010d04:	7afb      	ldrb	r3, [r7, #11]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d131      	bne.n	8010d6e <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010d14:	f023 0310 	bic.w	r3, r3, #16
 8010d18:	687a      	ldr	r2, [r7, #4]
 8010d1a:	6852      	ldr	r2, [r2, #4]
 8010d1c:	0611      	lsls	r1, r2, #24
 8010d1e:	687a      	ldr	r2, [r7, #4]
 8010d20:	68d2      	ldr	r2, [r2, #12]
 8010d22:	4311      	orrs	r1, r2
 8010d24:	687a      	ldr	r2, [r7, #4]
 8010d26:	6812      	ldr	r2, [r2, #0]
 8010d28:	430b      	orrs	r3, r1
 8010d2a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	685a      	ldr	r2, [r3, #4]
 8010d32:	4b13      	ldr	r3, [pc, #76]	; (8010d80 <HAL_QSPI_Init+0xe8>)
 8010d34:	4013      	ands	r3, r2
 8010d36:	687a      	ldr	r2, [r7, #4]
 8010d38:	6912      	ldr	r2, [r2, #16]
 8010d3a:	0411      	lsls	r1, r2, #16
 8010d3c:	687a      	ldr	r2, [r7, #4]
 8010d3e:	6952      	ldr	r2, [r2, #20]
 8010d40:	4311      	orrs	r1, r2
 8010d42:	687a      	ldr	r2, [r7, #4]
 8010d44:	6992      	ldr	r2, [r2, #24]
 8010d46:	4311      	orrs	r1, r2
 8010d48:	687a      	ldr	r2, [r7, #4]
 8010d4a:	6812      	ldr	r2, [r2, #0]
 8010d4c:	430b      	orrs	r3, r1
 8010d4e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	681a      	ldr	r2, [r3, #0]
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	f042 0201 	orr.w	r2, r2, #1
 8010d5e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	2200      	movs	r2, #0
 8010d64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	2201      	movs	r2, #1
 8010d6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	2200      	movs	r2, #0
 8010d72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8010d76:	7afb      	ldrb	r3, [r7, #11]
}
 8010d78:	4618      	mov	r0, r3
 8010d7a:	3710      	adds	r7, #16
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	bd80      	pop	{r7, pc}
 8010d80:	ffe0f8fe 	.word	0xffe0f8fe

08010d84 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b086      	sub	sp, #24
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	689b      	ldr	r3, [r3, #8]
 8010d92:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 8010d9c:	697b      	ldr	r3, [r7, #20]
 8010d9e:	f003 0304 	and.w	r3, r3, #4
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d064      	beq.n	8010e70 <HAL_QSPI_IRQHandler+0xec>
 8010da6:	693b      	ldr	r3, [r7, #16]
 8010da8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d05f      	beq.n	8010e70 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	3320      	adds	r3, #32
 8010db6:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010dbe:	b2db      	uxtb	r3, r3
 8010dc0:	2b12      	cmp	r3, #18
 8010dc2:	d125      	bne.n	8010e10 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8010dc4:	e01c      	b.n	8010e00 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d00f      	beq.n	8010dee <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	69db      	ldr	r3, [r3, #28]
 8010dd2:	781a      	ldrb	r2, [r3, #0]
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	69db      	ldr	r3, [r3, #28]
 8010ddc:	1c5a      	adds	r2, r3, #1
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	61da      	str	r2, [r3, #28]
          hqspi->TxXferCount--;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010de6:	1e5a      	subs	r2, r3, #1
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	625a      	str	r2, [r3, #36]	; 0x24
 8010dec:	e008      	b.n	8010e00 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	681a      	ldr	r2, [r3, #0]
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010dfc:	601a      	str	r2, [r3, #0]
          break;
 8010dfe:	e033      	b.n	8010e68 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	689b      	ldr	r3, [r3, #8]
 8010e06:	f003 0304 	and.w	r3, r3, #4
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d1db      	bne.n	8010dc6 <HAL_QSPI_IRQHandler+0x42>
 8010e0e:	e02b      	b.n	8010e68 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010e16:	b2db      	uxtb	r3, r3
 8010e18:	2b22      	cmp	r3, #34	; 0x22
 8010e1a:	d125      	bne.n	8010e68 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8010e1c:	e01d      	b.n	8010e5a <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d010      	beq.n	8010e48 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e2a:	68fa      	ldr	r2, [r7, #12]
 8010e2c:	7812      	ldrb	r2, [r2, #0]
 8010e2e:	b2d2      	uxtb	r2, r2
 8010e30:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e36:	1c5a      	adds	r2, r3, #1
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	629a      	str	r2, [r3, #40]	; 0x28
          hqspi->RxXferCount--;
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e40:	1e5a      	subs	r2, r3, #1
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	631a      	str	r2, [r3, #48]	; 0x30
 8010e46:	e008      	b.n	8010e5a <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	681a      	ldr	r2, [r3, #0]
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010e56:	601a      	str	r2, [r3, #0]
          break;
 8010e58:	e006      	b.n	8010e68 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	689b      	ldr	r3, [r3, #8]
 8010e60:	f003 0304 	and.w	r3, r3, #4
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d1da      	bne.n	8010e1e <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 8010e68:	6878      	ldr	r0, [r7, #4]
 8010e6a:	f000 fb7b 	bl	8011564 <HAL_QSPI_FifoThresholdCallback>
 8010e6e:	e13c      	b.n	80110ea <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 8010e70:	697b      	ldr	r3, [r7, #20]
 8010e72:	f003 0302 	and.w	r3, r3, #2
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	f000 80b0 	beq.w	8010fdc <HAL_QSPI_IRQHandler+0x258>
 8010e7c:	693b      	ldr	r3, [r7, #16]
 8010e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	f000 80aa 	beq.w	8010fdc <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	2202      	movs	r2, #2
 8010e8e:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	681a      	ldr	r2, [r3, #0]
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8010e9e:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010ea6:	b2db      	uxtb	r3, r3
 8010ea8:	2b12      	cmp	r3, #18
 8010eaa:	d120      	bne.n	8010eee <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	f003 0304 	and.w	r3, r3, #4
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d011      	beq.n	8010ede <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	681a      	ldr	r2, [r3, #0]
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	f022 0204 	bic.w	r2, r2, #4
 8010ec8:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	681a      	ldr	r2, [r3, #0]
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	f022 0201 	bic.w	r2, r2, #1
 8010edc:	601a      	str	r2, [r3, #0]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	2201      	movs	r2, #1
 8010ee2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 8010ee6:	6878      	ldr	r0, [r7, #4]
 8010ee8:	f000 fb32 	bl	8011550 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8010eec:	e0fa      	b.n	80110e4 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010ef4:	b2db      	uxtb	r3, r3
 8010ef6:	2b22      	cmp	r3, #34	; 0x22
 8010ef8:	d143      	bne.n	8010f82 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	f003 0304 	and.w	r3, r3, #4
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d012      	beq.n	8010f2e <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	681a      	ldr	r2, [r3, #0]
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	f022 0204 	bic.w	r2, r2, #4
 8010f16:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	681a      	ldr	r2, [r3, #0]
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	f022 0201 	bic.w	r2, r2, #1
 8010f2a:	601a      	str	r2, [r3, #0]
 8010f2c:	e021      	b.n	8010f72 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	3320      	adds	r3, #32
 8010f34:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8010f36:	e013      	b.n	8010f60 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d017      	beq.n	8010f70 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f44:	68fa      	ldr	r2, [r7, #12]
 8010f46:	7812      	ldrb	r2, [r2, #0]
 8010f48:	b2d2      	uxtb	r2, r2
 8010f4a:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f50:	1c5a      	adds	r2, r3, #1
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	629a      	str	r2, [r3, #40]	; 0x28
            hqspi->RxXferCount--;
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f5a:	1e5a      	subs	r2, r3, #1
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	631a      	str	r2, [r3, #48]	; 0x30
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	689b      	ldr	r3, [r3, #8]
 8010f66:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d1e4      	bne.n	8010f38 <HAL_QSPI_IRQHandler+0x1b4>
 8010f6e:	e000      	b.n	8010f72 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 8010f70:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	2201      	movs	r2, #1
 8010f76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 8010f7a:	6878      	ldr	r0, [r7, #4]
 8010f7c:	f000 fade 	bl	801153c <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8010f80:	e0b0      	b.n	80110e4 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010f88:	b2db      	uxtb	r3, r3
 8010f8a:	2b02      	cmp	r3, #2
 8010f8c:	d107      	bne.n	8010f9e <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	2201      	movs	r2, #1
 8010f92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 8010f96:	6878      	ldr	r0, [r7, #4]
 8010f98:	f000 fac6 	bl	8011528 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8010f9c:	e0a2      	b.n	80110e4 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010fa4:	b2db      	uxtb	r3, r3
 8010fa6:	2b08      	cmp	r3, #8
 8010fa8:	f040 809c 	bne.w	80110e4 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	695a      	ldr	r2, [r3, #20]
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8010fba:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	2201      	movs	r2, #1
 8010fc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d103      	bne.n	8010fd4 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8010fcc:	6878      	ldr	r0, [r7, #4]
 8010fce:	f000 faa1 	bl	8011514 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8010fd2:	e087      	b.n	80110e4 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8010fd4:	6878      	ldr	r0, [r7, #4]
 8010fd6:	f000 fa93 	bl	8011500 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8010fda:	e083      	b.n	80110e4 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8010fdc:	697b      	ldr	r3, [r7, #20]
 8010fde:	f003 0308 	and.w	r3, r3, #8
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d01f      	beq.n	8011026 <HAL_QSPI_IRQHandler+0x2a2>
 8010fe6:	693b      	ldr	r3, [r7, #16]
 8010fe8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d01a      	beq.n	8011026 <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	2208      	movs	r2, #8
 8010ff6:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011002:	2b00      	cmp	r3, #0
 8011004:	d00b      	beq.n	801101e <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	681a      	ldr	r2, [r3, #0]
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8011014:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	2201      	movs	r2, #1
 801101a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 801101e:	6878      	ldr	r0, [r7, #4]
 8011020:	f000 faaa 	bl	8011578 <HAL_QSPI_StatusMatchCallback>
 8011024:	e061      	b.n	80110ea <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 8011026:	697b      	ldr	r3, [r7, #20]
 8011028:	f003 0301 	and.w	r3, r3, #1
 801102c:	2b00      	cmp	r3, #0
 801102e:	d047      	beq.n	80110c0 <HAL_QSPI_IRQHandler+0x33c>
 8011030:	693b      	ldr	r3, [r7, #16]
 8011032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011036:	2b00      	cmp	r3, #0
 8011038:	d042      	beq.n	80110c0 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	2201      	movs	r2, #1
 8011040:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	681a      	ldr	r2, [r3, #0]
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8011050:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011056:	f043 0202 	orr.w	r2, r3, #2
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	63da      	str	r2, [r3, #60]	; 0x3c

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	f003 0304 	and.w	r3, r3, #4
 8011068:	2b00      	cmp	r3, #0
 801106a:	d021      	beq.n	80110b0 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	681a      	ldr	r2, [r3, #0]
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	f022 0204 	bic.w	r2, r2, #4
 801107a:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011080:	4a1c      	ldr	r2, [pc, #112]	; (80110f4 <HAL_QSPI_IRQHandler+0x370>)
 8011082:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011088:	4618      	mov	r0, r3
 801108a:	f7fe f916 	bl	800f2ba <HAL_DMA_Abort_IT>
 801108e:	4603      	mov	r3, r0
 8011090:	2b00      	cmp	r3, #0
 8011092:	d029      	beq.n	80110e8 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011098:	f043 0204 	orr.w	r2, r3, #4
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	2201      	movs	r2, #1
 80110a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 80110a8:	6878      	ldr	r0, [r7, #4]
 80110aa:	f000 fa29 	bl	8011500 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80110ae:	e01b      	b.n	80110e8 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	2201      	movs	r2, #1
 80110b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 80110b8:	6878      	ldr	r0, [r7, #4]
 80110ba:	f000 fa21 	bl	8011500 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80110be:	e013      	b.n	80110e8 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 80110c0:	697b      	ldr	r3, [r7, #20]
 80110c2:	f003 0310 	and.w	r3, r3, #16
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d00f      	beq.n	80110ea <HAL_QSPI_IRQHandler+0x366>
 80110ca:	693b      	ldr	r3, [r7, #16]
 80110cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d00a      	beq.n	80110ea <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	2210      	movs	r2, #16
 80110da:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 80110dc:	6878      	ldr	r0, [r7, #4]
 80110de:	f000 fa55 	bl	801158c <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 80110e2:	e002      	b.n	80110ea <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80110e4:	bf00      	nop
 80110e6:	e000      	b.n	80110ea <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80110e8:	bf00      	nop
}
 80110ea:	bf00      	nop
 80110ec:	3718      	adds	r7, #24
 80110ee:	46bd      	mov	sp, r7
 80110f0:	bd80      	pop	{r7, pc}
 80110f2:	bf00      	nop
 80110f4:	080115bd 	.word	0x080115bd

080110f8 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b088      	sub	sp, #32
 80110fc:	af02      	add	r7, sp, #8
 80110fe:	60f8      	str	r0, [r7, #12]
 8011100:	60b9      	str	r1, [r7, #8]
 8011102:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8011104:	f7fc fc3a 	bl	800d97c <HAL_GetTick>
 8011108:	6138      	str	r0, [r7, #16]

  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011110:	b2db      	uxtb	r3, r3
 8011112:	2b01      	cmp	r3, #1
 8011114:	d101      	bne.n	801111a <HAL_QSPI_Command+0x22>
 8011116:	2302      	movs	r3, #2
 8011118:	e048      	b.n	80111ac <HAL_QSPI_Command+0xb4>
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	2201      	movs	r2, #1
 801111e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8011128:	b2db      	uxtb	r3, r3
 801112a:	2b01      	cmp	r3, #1
 801112c:	d137      	bne.n	801119e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	2200      	movs	r2, #0
 8011132:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	2202      	movs	r2, #2
 8011138:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	9300      	str	r3, [sp, #0]
 8011140:	693b      	ldr	r3, [r7, #16]
 8011142:	2200      	movs	r2, #0
 8011144:	2120      	movs	r1, #32
 8011146:	68f8      	ldr	r0, [r7, #12]
 8011148:	f000 fa6b 	bl	8011622 <QSPI_WaitFlagStateUntilTimeout>
 801114c:	4603      	mov	r3, r0
 801114e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8011150:	7dfb      	ldrb	r3, [r7, #23]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d125      	bne.n	80111a2 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8011156:	2200      	movs	r2, #0
 8011158:	68b9      	ldr	r1, [r7, #8]
 801115a:	68f8      	ldr	r0, [r7, #12]
 801115c:	f000 fa98 	bl	8011690 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8011160:	68bb      	ldr	r3, [r7, #8]
 8011162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011164:	2b00      	cmp	r3, #0
 8011166:	d115      	bne.n	8011194 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	9300      	str	r3, [sp, #0]
 801116c:	693b      	ldr	r3, [r7, #16]
 801116e:	2201      	movs	r2, #1
 8011170:	2102      	movs	r1, #2
 8011172:	68f8      	ldr	r0, [r7, #12]
 8011174:	f000 fa55 	bl	8011622 <QSPI_WaitFlagStateUntilTimeout>
 8011178:	4603      	mov	r3, r0
 801117a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 801117c:	7dfb      	ldrb	r3, [r7, #23]
 801117e:	2b00      	cmp	r3, #0
 8011180:	d10f      	bne.n	80111a2 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	2202      	movs	r2, #2
 8011188:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	2201      	movs	r2, #1
 801118e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8011192:	e006      	b.n	80111a2 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	2201      	movs	r2, #1
 8011198:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 801119c:	e001      	b.n	80111a2 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 801119e:	2302      	movs	r3, #2
 80111a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	2200      	movs	r2, #0
 80111a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80111aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80111ac:	4618      	mov	r0, r3
 80111ae:	3718      	adds	r7, #24
 80111b0:	46bd      	mov	sp, r7
 80111b2:	bd80      	pop	{r7, pc}

080111b4 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b08a      	sub	sp, #40	; 0x28
 80111b8:	af02      	add	r7, sp, #8
 80111ba:	60f8      	str	r0, [r7, #12]
 80111bc:	60b9      	str	r1, [r7, #8]
 80111be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80111c0:	2300      	movs	r3, #0
 80111c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80111c4:	f7fc fbda 	bl	800d97c <HAL_GetTick>
 80111c8:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	3320      	adds	r3, #32
 80111d0:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80111d8:	b2db      	uxtb	r3, r3
 80111da:	2b01      	cmp	r3, #1
 80111dc:	d101      	bne.n	80111e2 <HAL_QSPI_Transmit+0x2e>
 80111de:	2302      	movs	r3, #2
 80111e0:	e076      	b.n	80112d0 <HAL_QSPI_Transmit+0x11c>
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	2201      	movs	r2, #1
 80111e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80111f0:	b2db      	uxtb	r3, r3
 80111f2:	2b01      	cmp	r3, #1
 80111f4:	d165      	bne.n	80112c2 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	2200      	movs	r2, #0
 80111fa:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 80111fc:	68bb      	ldr	r3, [r7, #8]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d056      	beq.n	80112b0 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	2212      	movs	r2, #18
 8011206:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	691b      	ldr	r3, [r3, #16]
 8011210:	1c5a      	adds	r2, r3, #1
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	691b      	ldr	r3, [r3, #16]
 801121c:	1c5a      	adds	r2, r3, #1
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	68ba      	ldr	r2, [r7, #8]
 8011226:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	695a      	ldr	r2, [r3, #20]
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8011236:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8011238:	e01b      	b.n	8011272 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	9300      	str	r3, [sp, #0]
 801123e:	69bb      	ldr	r3, [r7, #24]
 8011240:	2201      	movs	r2, #1
 8011242:	2104      	movs	r1, #4
 8011244:	68f8      	ldr	r0, [r7, #12]
 8011246:	f000 f9ec 	bl	8011622 <QSPI_WaitFlagStateUntilTimeout>
 801124a:	4603      	mov	r3, r0
 801124c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 801124e:	7ffb      	ldrb	r3, [r7, #31]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d113      	bne.n	801127c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	69db      	ldr	r3, [r3, #28]
 8011258:	781a      	ldrb	r2, [r3, #0]
 801125a:	697b      	ldr	r3, [r7, #20]
 801125c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	69db      	ldr	r3, [r3, #28]
 8011262:	1c5a      	adds	r2, r3, #1
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801126c:	1e5a      	subs	r2, r3, #1
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011276:	2b00      	cmp	r3, #0
 8011278:	d1df      	bne.n	801123a <HAL_QSPI_Transmit+0x86>
 801127a:	e000      	b.n	801127e <HAL_QSPI_Transmit+0xca>
          break;
 801127c:	bf00      	nop
      }

      if (status == HAL_OK)
 801127e:	7ffb      	ldrb	r3, [r7, #31]
 8011280:	2b00      	cmp	r3, #0
 8011282:	d110      	bne.n	80112a6 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	9300      	str	r3, [sp, #0]
 8011288:	69bb      	ldr	r3, [r7, #24]
 801128a:	2201      	movs	r2, #1
 801128c:	2102      	movs	r1, #2
 801128e:	68f8      	ldr	r0, [r7, #12]
 8011290:	f000 f9c7 	bl	8011622 <QSPI_WaitFlagStateUntilTimeout>
 8011294:	4603      	mov	r3, r0
 8011296:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8011298:	7ffb      	ldrb	r3, [r7, #31]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d103      	bne.n	80112a6 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	2202      	movs	r2, #2
 80112a4:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	2201      	movs	r2, #1
 80112aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80112ae:	e00a      	b.n	80112c6 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80112b4:	f043 0208 	orr.w	r2, r3, #8
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 80112bc:	2301      	movs	r3, #1
 80112be:	77fb      	strb	r3, [r7, #31]
 80112c0:	e001      	b.n	80112c6 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 80112c2:	2302      	movs	r3, #2
 80112c4:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	2200      	movs	r2, #0
 80112ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80112ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80112d0:	4618      	mov	r0, r3
 80112d2:	3720      	adds	r7, #32
 80112d4:	46bd      	mov	sp, r7
 80112d6:	bd80      	pop	{r7, pc}

080112d8 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80112d8:	b580      	push	{r7, lr}
 80112da:	b08a      	sub	sp, #40	; 0x28
 80112dc:	af02      	add	r7, sp, #8
 80112de:	60f8      	str	r0, [r7, #12]
 80112e0:	60b9      	str	r1, [r7, #8]
 80112e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80112e4:	2300      	movs	r3, #0
 80112e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80112e8:	f7fc fb48 	bl	800d97c <HAL_GetTick>
 80112ec:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	699b      	ldr	r3, [r3, #24]
 80112f4:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	3320      	adds	r3, #32
 80112fc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011304:	b2db      	uxtb	r3, r3
 8011306:	2b01      	cmp	r3, #1
 8011308:	d101      	bne.n	801130e <HAL_QSPI_Receive+0x36>
 801130a:	2302      	movs	r3, #2
 801130c:	e07d      	b.n	801140a <HAL_QSPI_Receive+0x132>
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	2201      	movs	r2, #1
 8011312:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801131c:	b2db      	uxtb	r3, r3
 801131e:	2b01      	cmp	r3, #1
 8011320:	d16c      	bne.n	80113fc <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	2200      	movs	r2, #0
 8011326:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8011328:	68bb      	ldr	r3, [r7, #8]
 801132a:	2b00      	cmp	r3, #0
 801132c:	d05d      	beq.n	80113ea <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	2222      	movs	r2, #34	; 0x22
 8011332:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	691b      	ldr	r3, [r3, #16]
 801133c:	1c5a      	adds	r2, r3, #1
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	691b      	ldr	r3, [r3, #16]
 8011348:	1c5a      	adds	r2, r3, #1
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	68ba      	ldr	r2, [r7, #8]
 8011352:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	695b      	ldr	r3, [r3, #20]
 801135a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8011366:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	697a      	ldr	r2, [r7, #20]
 801136e:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8011370:	e01c      	b.n	80113ac <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	9300      	str	r3, [sp, #0]
 8011376:	69bb      	ldr	r3, [r7, #24]
 8011378:	2201      	movs	r2, #1
 801137a:	2106      	movs	r1, #6
 801137c:	68f8      	ldr	r0, [r7, #12]
 801137e:	f000 f950 	bl	8011622 <QSPI_WaitFlagStateUntilTimeout>
 8011382:	4603      	mov	r3, r0
 8011384:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8011386:	7ffb      	ldrb	r3, [r7, #31]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d114      	bne.n	80113b6 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011390:	693a      	ldr	r2, [r7, #16]
 8011392:	7812      	ldrb	r2, [r2, #0]
 8011394:	b2d2      	uxtb	r2, r2
 8011396:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801139c:	1c5a      	adds	r2, r3, #1
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113a6:	1e5a      	subs	r2, r3, #1
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d1de      	bne.n	8011372 <HAL_QSPI_Receive+0x9a>
 80113b4:	e000      	b.n	80113b8 <HAL_QSPI_Receive+0xe0>
          break;
 80113b6:	bf00      	nop
      }

      if (status == HAL_OK)
 80113b8:	7ffb      	ldrb	r3, [r7, #31]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d110      	bne.n	80113e0 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	9300      	str	r3, [sp, #0]
 80113c2:	69bb      	ldr	r3, [r7, #24]
 80113c4:	2201      	movs	r2, #1
 80113c6:	2102      	movs	r1, #2
 80113c8:	68f8      	ldr	r0, [r7, #12]
 80113ca:	f000 f92a 	bl	8011622 <QSPI_WaitFlagStateUntilTimeout>
 80113ce:	4603      	mov	r3, r0
 80113d0:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80113d2:	7ffb      	ldrb	r3, [r7, #31]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d103      	bne.n	80113e0 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	2202      	movs	r2, #2
 80113de:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	2201      	movs	r2, #1
 80113e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80113e8:	e00a      	b.n	8011400 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80113ee:	f043 0208 	orr.w	r2, r3, #8
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 80113f6:	2301      	movs	r3, #1
 80113f8:	77fb      	strb	r3, [r7, #31]
 80113fa:	e001      	b.n	8011400 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 80113fc:	2302      	movs	r3, #2
 80113fe:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	2200      	movs	r2, #0
 8011404:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8011408:	7ffb      	ldrb	r3, [r7, #31]
}
 801140a:	4618      	mov	r0, r3
 801140c:	3720      	adds	r7, #32
 801140e:	46bd      	mov	sp, r7
 8011410:	bd80      	pop	{r7, pc}

08011412 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8011412:	b580      	push	{r7, lr}
 8011414:	b088      	sub	sp, #32
 8011416:	af02      	add	r7, sp, #8
 8011418:	60f8      	str	r0, [r7, #12]
 801141a:	60b9      	str	r1, [r7, #8]
 801141c:	607a      	str	r2, [r7, #4]
 801141e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8011420:	f7fc faac 	bl	800d97c <HAL_GetTick>
 8011424:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801142c:	b2db      	uxtb	r3, r3
 801142e:	2b01      	cmp	r3, #1
 8011430:	d101      	bne.n	8011436 <HAL_QSPI_AutoPolling+0x24>
 8011432:	2302      	movs	r3, #2
 8011434:	e060      	b.n	80114f8 <HAL_QSPI_AutoPolling+0xe6>
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	2201      	movs	r2, #1
 801143a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8011444:	b2db      	uxtb	r3, r3
 8011446:	2b01      	cmp	r3, #1
 8011448:	d14f      	bne.n	80114ea <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	2200      	movs	r2, #0
 801144e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	2242      	movs	r2, #66	; 0x42
 8011454:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8011458:	683b      	ldr	r3, [r7, #0]
 801145a:	9300      	str	r3, [sp, #0]
 801145c:	693b      	ldr	r3, [r7, #16]
 801145e:	2200      	movs	r2, #0
 8011460:	2120      	movs	r1, #32
 8011462:	68f8      	ldr	r0, [r7, #12]
 8011464:	f000 f8dd 	bl	8011622 <QSPI_WaitFlagStateUntilTimeout>
 8011468:	4603      	mov	r3, r0
 801146a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 801146c:	7dfb      	ldrb	r3, [r7, #23]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d13d      	bne.n	80114ee <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	687a      	ldr	r2, [r7, #4]
 8011478:	6812      	ldr	r2, [r2, #0]
 801147a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	687a      	ldr	r2, [r7, #4]
 8011482:	6852      	ldr	r2, [r2, #4]
 8011484:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	687a      	ldr	r2, [r7, #4]
 801148c:	6892      	ldr	r2, [r2, #8]
 801148e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	691b      	ldr	r3, [r3, #16]
 801149e:	431a      	orrs	r2, r3
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80114a8:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	68da      	ldr	r2, [r3, #12]
 80114ae:	68bb      	ldr	r3, [r7, #8]
 80114b0:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80114b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80114b6:	68b9      	ldr	r1, [r7, #8]
 80114b8:	68f8      	ldr	r0, [r7, #12]
 80114ba:	f000 f8e9 	bl	8011690 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80114be:	683b      	ldr	r3, [r7, #0]
 80114c0:	9300      	str	r3, [sp, #0]
 80114c2:	693b      	ldr	r3, [r7, #16]
 80114c4:	2201      	movs	r2, #1
 80114c6:	2108      	movs	r1, #8
 80114c8:	68f8      	ldr	r0, [r7, #12]
 80114ca:	f000 f8aa 	bl	8011622 <QSPI_WaitFlagStateUntilTimeout>
 80114ce:	4603      	mov	r3, r0
 80114d0:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80114d2:	7dfb      	ldrb	r3, [r7, #23]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d10a      	bne.n	80114ee <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	2208      	movs	r2, #8
 80114de:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	2201      	movs	r2, #1
 80114e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80114e8:	e001      	b.n	80114ee <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80114ea:	2302      	movs	r3, #2
 80114ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	2200      	movs	r2, #0
 80114f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80114f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80114f8:	4618      	mov	r0, r3
 80114fa:	3718      	adds	r7, #24
 80114fc:	46bd      	mov	sp, r7
 80114fe:	bd80      	pop	{r7, pc}

08011500 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8011500:	b480      	push	{r7}
 8011502:	b083      	sub	sp, #12
 8011504:	af00      	add	r7, sp, #0
 8011506:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 8011508:	bf00      	nop
 801150a:	370c      	adds	r7, #12
 801150c:	46bd      	mov	sp, r7
 801150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011512:	4770      	bx	lr

08011514 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8011514:	b480      	push	{r7}
 8011516:	b083      	sub	sp, #12
 8011518:	af00      	add	r7, sp, #0
 801151a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 801151c:	bf00      	nop
 801151e:	370c      	adds	r7, #12
 8011520:	46bd      	mov	sp, r7
 8011522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011526:	4770      	bx	lr

08011528 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8011528:	b480      	push	{r7}
 801152a:	b083      	sub	sp, #12
 801152c:	af00      	add	r7, sp, #0
 801152e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8011530:	bf00      	nop
 8011532:	370c      	adds	r7, #12
 8011534:	46bd      	mov	sp, r7
 8011536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153a:	4770      	bx	lr

0801153c <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 801153c:	b480      	push	{r7}
 801153e:	b083      	sub	sp, #12
 8011540:	af00      	add	r7, sp, #0
 8011542:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 8011544:	bf00      	nop
 8011546:	370c      	adds	r7, #12
 8011548:	46bd      	mov	sp, r7
 801154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154e:	4770      	bx	lr

08011550 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8011550:	b480      	push	{r7}
 8011552:	b083      	sub	sp, #12
 8011554:	af00      	add	r7, sp, #0
 8011556:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 8011558:	bf00      	nop
 801155a:	370c      	adds	r7, #12
 801155c:	46bd      	mov	sp, r7
 801155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011562:	4770      	bx	lr

08011564 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 8011564:	b480      	push	{r7}
 8011566:	b083      	sub	sp, #12
 8011568:	af00      	add	r7, sp, #0
 801156a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 801156c:	bf00      	nop
 801156e:	370c      	adds	r7, #12
 8011570:	46bd      	mov	sp, r7
 8011572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011576:	4770      	bx	lr

08011578 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8011578:	b480      	push	{r7}
 801157a:	b083      	sub	sp, #12
 801157c:	af00      	add	r7, sp, #0
 801157e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8011580:	bf00      	nop
 8011582:	370c      	adds	r7, #12
 8011584:	46bd      	mov	sp, r7
 8011586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801158a:	4770      	bx	lr

0801158c <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 801158c:	b480      	push	{r7}
 801158e:	b083      	sub	sp, #12
 8011590:	af00      	add	r7, sp, #0
 8011592:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 8011594:	bf00      	nop
 8011596:	370c      	adds	r7, #12
 8011598:	46bd      	mov	sp, r7
 801159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159e:	4770      	bx	lr

080115a0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80115a0:	b480      	push	{r7}
 80115a2:	b083      	sub	sp, #12
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
 80115a8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	683a      	ldr	r2, [r7, #0]
 80115ae:	641a      	str	r2, [r3, #64]	; 0x40
}
 80115b0:	bf00      	nop
 80115b2:	370c      	adds	r7, #12
 80115b4:	46bd      	mov	sp, r7
 80115b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ba:	4770      	bx	lr

080115bc <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 80115bc:	b580      	push	{r7, lr}
 80115be:	b084      	sub	sp, #16
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115c8:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	2200      	movs	r2, #0
 80115ce:	631a      	str	r2, [r3, #48]	; 0x30
  hqspi->TxXferCount = 0U;
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	2200      	movs	r2, #0
 80115d4:	625a      	str	r2, [r3, #36]	; 0x24

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80115dc:	b2db      	uxtb	r3, r3
 80115de:	2b08      	cmp	r3, #8
 80115e0:	d114      	bne.n	801160c <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	2202      	movs	r2, #2
 80115e8:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	681a      	ldr	r2, [r3, #0]
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80115f8:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	681a      	ldr	r2, [r3, #0]
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	f042 0202 	orr.w	r2, r2, #2
 8011608:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 801160a:	e006      	b.n	801161a <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	2201      	movs	r2, #1
 8011610:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    HAL_QSPI_ErrorCallback(hqspi);
 8011614:	68f8      	ldr	r0, [r7, #12]
 8011616:	f7ff ff73 	bl	8011500 <HAL_QSPI_ErrorCallback>
}
 801161a:	bf00      	nop
 801161c:	3710      	adds	r7, #16
 801161e:	46bd      	mov	sp, r7
 8011620:	bd80      	pop	{r7, pc}

08011622 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8011622:	b580      	push	{r7, lr}
 8011624:	b084      	sub	sp, #16
 8011626:	af00      	add	r7, sp, #0
 8011628:	60f8      	str	r0, [r7, #12]
 801162a:	60b9      	str	r1, [r7, #8]
 801162c:	603b      	str	r3, [r7, #0]
 801162e:	4613      	mov	r3, r2
 8011630:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8011632:	e01a      	b.n	801166a <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011634:	69bb      	ldr	r3, [r7, #24]
 8011636:	f1b3 3fff 	cmp.w	r3, #4294967295
 801163a:	d016      	beq.n	801166a <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801163c:	f7fc f99e 	bl	800d97c <HAL_GetTick>
 8011640:	4602      	mov	r2, r0
 8011642:	683b      	ldr	r3, [r7, #0]
 8011644:	1ad3      	subs	r3, r2, r3
 8011646:	69ba      	ldr	r2, [r7, #24]
 8011648:	429a      	cmp	r2, r3
 801164a:	d302      	bcc.n	8011652 <QSPI_WaitFlagStateUntilTimeout+0x30>
 801164c:	69bb      	ldr	r3, [r7, #24]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d10b      	bne.n	801166a <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	2204      	movs	r2, #4
 8011656:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801165e:	f043 0201 	orr.w	r2, r3, #1
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8011666:	2301      	movs	r3, #1
 8011668:	e00e      	b.n	8011688 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	689a      	ldr	r2, [r3, #8]
 8011670:	68bb      	ldr	r3, [r7, #8]
 8011672:	4013      	ands	r3, r2
 8011674:	2b00      	cmp	r3, #0
 8011676:	bf14      	ite	ne
 8011678:	2301      	movne	r3, #1
 801167a:	2300      	moveq	r3, #0
 801167c:	b2db      	uxtb	r3, r3
 801167e:	461a      	mov	r2, r3
 8011680:	79fb      	ldrb	r3, [r7, #7]
 8011682:	429a      	cmp	r2, r3
 8011684:	d1d6      	bne.n	8011634 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8011686:	2300      	movs	r3, #0
}
 8011688:	4618      	mov	r0, r3
 801168a:	3710      	adds	r7, #16
 801168c:	46bd      	mov	sp, r7
 801168e:	bd80      	pop	{r7, pc}

08011690 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8011690:	b480      	push	{r7}
 8011692:	b085      	sub	sp, #20
 8011694:	af00      	add	r7, sp, #0
 8011696:	60f8      	str	r0, [r7, #12]
 8011698:	60b9      	str	r1, [r7, #8]
 801169a:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 801169c:	68bb      	ldr	r3, [r7, #8]
 801169e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d009      	beq.n	80116b8 <QSPI_Config+0x28>
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80116aa:	d005      	beq.n	80116b8 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80116ac:	68bb      	ldr	r3, [r7, #8]
 80116ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	3a01      	subs	r2, #1
 80116b6:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80116b8:	68bb      	ldr	r3, [r7, #8]
 80116ba:	699b      	ldr	r3, [r3, #24]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	f000 80ad 	beq.w	801181c <QSPI_Config+0x18c>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80116c2:	68bb      	ldr	r3, [r7, #8]
 80116c4:	6a1b      	ldr	r3, [r3, #32]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d059      	beq.n	801177e <QSPI_Config+0xee>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	68ba      	ldr	r2, [r7, #8]
 80116d0:	6892      	ldr	r2, [r2, #8]
 80116d2:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80116d4:	68bb      	ldr	r3, [r7, #8]
 80116d6:	69db      	ldr	r3, [r3, #28]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d02e      	beq.n	801173a <QSPI_Config+0xaa>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 80116dc:	68bb      	ldr	r3, [r7, #8]
 80116de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116e0:	68bb      	ldr	r3, [r7, #8]
 80116e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116e4:	431a      	orrs	r2, r3
 80116e6:	68bb      	ldr	r3, [r7, #8]
 80116e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116ea:	431a      	orrs	r2, r3
 80116ec:	68bb      	ldr	r3, [r7, #8]
 80116ee:	695b      	ldr	r3, [r3, #20]
 80116f0:	049b      	lsls	r3, r3, #18
 80116f2:	431a      	orrs	r2, r3
 80116f4:	68bb      	ldr	r3, [r7, #8]
 80116f6:	691b      	ldr	r3, [r3, #16]
 80116f8:	431a      	orrs	r2, r3
 80116fa:	68bb      	ldr	r3, [r7, #8]
 80116fc:	6a1b      	ldr	r3, [r3, #32]
 80116fe:	431a      	orrs	r2, r3
 8011700:	68bb      	ldr	r3, [r7, #8]
 8011702:	68db      	ldr	r3, [r3, #12]
 8011704:	431a      	orrs	r2, r3
 8011706:	68bb      	ldr	r3, [r7, #8]
 8011708:	69db      	ldr	r3, [r3, #28]
 801170a:	431a      	orrs	r2, r3
 801170c:	68bb      	ldr	r3, [r7, #8]
 801170e:	699b      	ldr	r3, [r3, #24]
 8011710:	431a      	orrs	r2, r3
 8011712:	68bb      	ldr	r3, [r7, #8]
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	ea42 0103 	orr.w	r1, r2, r3
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	687a      	ldr	r2, [r7, #4]
 8011720:	430a      	orrs	r2, r1
 8011722:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 801172a:	f000 8119 	beq.w	8011960 <QSPI_Config+0x2d0>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	68ba      	ldr	r2, [r7, #8]
 8011734:	6852      	ldr	r2, [r2, #4]
 8011736:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8011738:	e112      	b.n	8011960 <QSPI_Config+0x2d0>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 801173a:	68bb      	ldr	r3, [r7, #8]
 801173c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801173e:	68bb      	ldr	r3, [r7, #8]
 8011740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011742:	431a      	orrs	r2, r3
 8011744:	68bb      	ldr	r3, [r7, #8]
 8011746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011748:	431a      	orrs	r2, r3
 801174a:	68bb      	ldr	r3, [r7, #8]
 801174c:	695b      	ldr	r3, [r3, #20]
 801174e:	049b      	lsls	r3, r3, #18
 8011750:	431a      	orrs	r2, r3
 8011752:	68bb      	ldr	r3, [r7, #8]
 8011754:	691b      	ldr	r3, [r3, #16]
 8011756:	431a      	orrs	r2, r3
 8011758:	68bb      	ldr	r3, [r7, #8]
 801175a:	6a1b      	ldr	r3, [r3, #32]
 801175c:	431a      	orrs	r2, r3
 801175e:	68bb      	ldr	r3, [r7, #8]
 8011760:	69db      	ldr	r3, [r3, #28]
 8011762:	431a      	orrs	r2, r3
 8011764:	68bb      	ldr	r3, [r7, #8]
 8011766:	699b      	ldr	r3, [r3, #24]
 8011768:	431a      	orrs	r2, r3
 801176a:	68bb      	ldr	r3, [r7, #8]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	ea42 0103 	orr.w	r1, r2, r3
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	687a      	ldr	r2, [r7, #4]
 8011778:	430a      	orrs	r2, r1
 801177a:	615a      	str	r2, [r3, #20]
}
 801177c:	e0f0      	b.n	8011960 <QSPI_Config+0x2d0>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 801177e:	68bb      	ldr	r3, [r7, #8]
 8011780:	69db      	ldr	r3, [r3, #28]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d02b      	beq.n	80117de <QSPI_Config+0x14e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 8011786:	68bb      	ldr	r3, [r7, #8]
 8011788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801178a:	68bb      	ldr	r3, [r7, #8]
 801178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801178e:	431a      	orrs	r2, r3
 8011790:	68bb      	ldr	r3, [r7, #8]
 8011792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011794:	431a      	orrs	r2, r3
 8011796:	68bb      	ldr	r3, [r7, #8]
 8011798:	695b      	ldr	r3, [r3, #20]
 801179a:	049b      	lsls	r3, r3, #18
 801179c:	431a      	orrs	r2, r3
 801179e:	68bb      	ldr	r3, [r7, #8]
 80117a0:	6a1b      	ldr	r3, [r3, #32]
 80117a2:	431a      	orrs	r2, r3
 80117a4:	68bb      	ldr	r3, [r7, #8]
 80117a6:	68db      	ldr	r3, [r3, #12]
 80117a8:	431a      	orrs	r2, r3
 80117aa:	68bb      	ldr	r3, [r7, #8]
 80117ac:	69db      	ldr	r3, [r3, #28]
 80117ae:	431a      	orrs	r2, r3
 80117b0:	68bb      	ldr	r3, [r7, #8]
 80117b2:	699b      	ldr	r3, [r3, #24]
 80117b4:	431a      	orrs	r2, r3
 80117b6:	68bb      	ldr	r3, [r7, #8]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	ea42 0103 	orr.w	r1, r2, r3
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	687a      	ldr	r2, [r7, #4]
 80117c4:	430a      	orrs	r2, r1
 80117c6:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80117ce:	f000 80c7 	beq.w	8011960 <QSPI_Config+0x2d0>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	68ba      	ldr	r2, [r7, #8]
 80117d8:	6852      	ldr	r2, [r2, #4]
 80117da:	619a      	str	r2, [r3, #24]
}
 80117dc:	e0c0      	b.n	8011960 <QSPI_Config+0x2d0>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 80117de:	68bb      	ldr	r3, [r7, #8]
 80117e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117e2:	68bb      	ldr	r3, [r7, #8]
 80117e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117e6:	431a      	orrs	r2, r3
 80117e8:	68bb      	ldr	r3, [r7, #8]
 80117ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117ec:	431a      	orrs	r2, r3
 80117ee:	68bb      	ldr	r3, [r7, #8]
 80117f0:	695b      	ldr	r3, [r3, #20]
 80117f2:	049b      	lsls	r3, r3, #18
 80117f4:	431a      	orrs	r2, r3
 80117f6:	68bb      	ldr	r3, [r7, #8]
 80117f8:	6a1b      	ldr	r3, [r3, #32]
 80117fa:	431a      	orrs	r2, r3
 80117fc:	68bb      	ldr	r3, [r7, #8]
 80117fe:	69db      	ldr	r3, [r3, #28]
 8011800:	431a      	orrs	r2, r3
 8011802:	68bb      	ldr	r3, [r7, #8]
 8011804:	699b      	ldr	r3, [r3, #24]
 8011806:	431a      	orrs	r2, r3
 8011808:	68bb      	ldr	r3, [r7, #8]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	ea42 0103 	orr.w	r1, r2, r3
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	687a      	ldr	r2, [r7, #4]
 8011816:	430a      	orrs	r2, r1
 8011818:	615a      	str	r2, [r3, #20]
}
 801181a:	e0a1      	b.n	8011960 <QSPI_Config+0x2d0>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 801181c:	68bb      	ldr	r3, [r7, #8]
 801181e:	6a1b      	ldr	r3, [r3, #32]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d052      	beq.n	80118ca <QSPI_Config+0x23a>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	68ba      	ldr	r2, [r7, #8]
 801182a:	6892      	ldr	r2, [r2, #8]
 801182c:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 801182e:	68bb      	ldr	r3, [r7, #8]
 8011830:	69db      	ldr	r3, [r3, #28]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d02a      	beq.n	801188c <QSPI_Config+0x1fc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 8011836:	68bb      	ldr	r3, [r7, #8]
 8011838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801183a:	68bb      	ldr	r3, [r7, #8]
 801183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801183e:	431a      	orrs	r2, r3
 8011840:	68bb      	ldr	r3, [r7, #8]
 8011842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011844:	431a      	orrs	r2, r3
 8011846:	68bb      	ldr	r3, [r7, #8]
 8011848:	695b      	ldr	r3, [r3, #20]
 801184a:	049b      	lsls	r3, r3, #18
 801184c:	431a      	orrs	r2, r3
 801184e:	68bb      	ldr	r3, [r7, #8]
 8011850:	691b      	ldr	r3, [r3, #16]
 8011852:	431a      	orrs	r2, r3
 8011854:	68bb      	ldr	r3, [r7, #8]
 8011856:	6a1b      	ldr	r3, [r3, #32]
 8011858:	431a      	orrs	r2, r3
 801185a:	68bb      	ldr	r3, [r7, #8]
 801185c:	68db      	ldr	r3, [r3, #12]
 801185e:	431a      	orrs	r2, r3
 8011860:	68bb      	ldr	r3, [r7, #8]
 8011862:	69db      	ldr	r3, [r3, #28]
 8011864:	431a      	orrs	r2, r3
 8011866:	68bb      	ldr	r3, [r7, #8]
 8011868:	699b      	ldr	r3, [r3, #24]
 801186a:	ea42 0103 	orr.w	r1, r2, r3
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	687a      	ldr	r2, [r7, #4]
 8011874:	430a      	orrs	r2, r1
 8011876:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 801187e:	d06f      	beq.n	8011960 <QSPI_Config+0x2d0>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	68ba      	ldr	r2, [r7, #8]
 8011886:	6852      	ldr	r2, [r2, #4]
 8011888:	619a      	str	r2, [r3, #24]
}
 801188a:	e069      	b.n	8011960 <QSPI_Config+0x2d0>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 801188c:	68bb      	ldr	r3, [r7, #8]
 801188e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011890:	68bb      	ldr	r3, [r7, #8]
 8011892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011894:	431a      	orrs	r2, r3
 8011896:	68bb      	ldr	r3, [r7, #8]
 8011898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801189a:	431a      	orrs	r2, r3
 801189c:	68bb      	ldr	r3, [r7, #8]
 801189e:	695b      	ldr	r3, [r3, #20]
 80118a0:	049b      	lsls	r3, r3, #18
 80118a2:	431a      	orrs	r2, r3
 80118a4:	68bb      	ldr	r3, [r7, #8]
 80118a6:	691b      	ldr	r3, [r3, #16]
 80118a8:	431a      	orrs	r2, r3
 80118aa:	68bb      	ldr	r3, [r7, #8]
 80118ac:	6a1b      	ldr	r3, [r3, #32]
 80118ae:	431a      	orrs	r2, r3
 80118b0:	68bb      	ldr	r3, [r7, #8]
 80118b2:	69db      	ldr	r3, [r3, #28]
 80118b4:	431a      	orrs	r2, r3
 80118b6:	68bb      	ldr	r3, [r7, #8]
 80118b8:	699b      	ldr	r3, [r3, #24]
 80118ba:	ea42 0103 	orr.w	r1, r2, r3
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	687a      	ldr	r2, [r7, #4]
 80118c4:	430a      	orrs	r2, r1
 80118c6:	615a      	str	r2, [r3, #20]
}
 80118c8:	e04a      	b.n	8011960 <QSPI_Config+0x2d0>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80118ca:	68bb      	ldr	r3, [r7, #8]
 80118cc:	69db      	ldr	r3, [r3, #28]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d027      	beq.n	8011922 <QSPI_Config+0x292>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 80118d2:	68bb      	ldr	r3, [r7, #8]
 80118d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118d6:	68bb      	ldr	r3, [r7, #8]
 80118d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118da:	431a      	orrs	r2, r3
 80118dc:	68bb      	ldr	r3, [r7, #8]
 80118de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118e0:	431a      	orrs	r2, r3
 80118e2:	68bb      	ldr	r3, [r7, #8]
 80118e4:	695b      	ldr	r3, [r3, #20]
 80118e6:	049b      	lsls	r3, r3, #18
 80118e8:	431a      	orrs	r2, r3
 80118ea:	68bb      	ldr	r3, [r7, #8]
 80118ec:	6a1b      	ldr	r3, [r3, #32]
 80118ee:	431a      	orrs	r2, r3
 80118f0:	68bb      	ldr	r3, [r7, #8]
 80118f2:	68db      	ldr	r3, [r3, #12]
 80118f4:	431a      	orrs	r2, r3
 80118f6:	68bb      	ldr	r3, [r7, #8]
 80118f8:	69db      	ldr	r3, [r3, #28]
 80118fa:	431a      	orrs	r2, r3
 80118fc:	68bb      	ldr	r3, [r7, #8]
 80118fe:	699b      	ldr	r3, [r3, #24]
 8011900:	ea42 0103 	orr.w	r1, r2, r3
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	687a      	ldr	r2, [r7, #4]
 801190a:	430a      	orrs	r2, r1
 801190c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8011914:	d024      	beq.n	8011960 <QSPI_Config+0x2d0>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	68ba      	ldr	r2, [r7, #8]
 801191c:	6852      	ldr	r2, [r2, #4]
 801191e:	619a      	str	r2, [r3, #24]
}
 8011920:	e01e      	b.n	8011960 <QSPI_Config+0x2d0>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8011922:	68bb      	ldr	r3, [r7, #8]
 8011924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011926:	2b00      	cmp	r3, #0
 8011928:	d01a      	beq.n	8011960 <QSPI_Config+0x2d0>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 801192a:	68bb      	ldr	r3, [r7, #8]
 801192c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801192e:	68bb      	ldr	r3, [r7, #8]
 8011930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011932:	431a      	orrs	r2, r3
 8011934:	68bb      	ldr	r3, [r7, #8]
 8011936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011938:	431a      	orrs	r2, r3
 801193a:	68bb      	ldr	r3, [r7, #8]
 801193c:	695b      	ldr	r3, [r3, #20]
 801193e:	049b      	lsls	r3, r3, #18
 8011940:	431a      	orrs	r2, r3
 8011942:	68bb      	ldr	r3, [r7, #8]
 8011944:	6a1b      	ldr	r3, [r3, #32]
 8011946:	431a      	orrs	r2, r3
 8011948:	68bb      	ldr	r3, [r7, #8]
 801194a:	69db      	ldr	r3, [r3, #28]
 801194c:	431a      	orrs	r2, r3
 801194e:	68bb      	ldr	r3, [r7, #8]
 8011950:	699b      	ldr	r3, [r3, #24]
 8011952:	ea42 0103 	orr.w	r1, r2, r3
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	687a      	ldr	r2, [r7, #4]
 801195c:	430a      	orrs	r2, r1
 801195e:	615a      	str	r2, [r3, #20]
}
 8011960:	bf00      	nop
 8011962:	3714      	adds	r7, #20
 8011964:	46bd      	mov	sp, r7
 8011966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801196a:	4770      	bx	lr

0801196c <LL_RCC_HSE_IsEnabledDiv2>:
{
 801196c:	b480      	push	{r7}
 801196e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8011970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801197a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801197e:	d101      	bne.n	8011984 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8011980:	2301      	movs	r3, #1
 8011982:	e000      	b.n	8011986 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8011984:	2300      	movs	r3, #0
}
 8011986:	4618      	mov	r0, r3
 8011988:	46bd      	mov	sp, r7
 801198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801198e:	4770      	bx	lr

08011990 <LL_RCC_HSE_Enable>:
{
 8011990:	b480      	push	{r7}
 8011992:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8011994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801199e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80119a2:	6013      	str	r3, [r2, #0]
}
 80119a4:	bf00      	nop
 80119a6:	46bd      	mov	sp, r7
 80119a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ac:	4770      	bx	lr

080119ae <LL_RCC_HSE_Disable>:
{
 80119ae:	b480      	push	{r7}
 80119b0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80119b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80119bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80119c0:	6013      	str	r3, [r2, #0]
}
 80119c2:	bf00      	nop
 80119c4:	46bd      	mov	sp, r7
 80119c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ca:	4770      	bx	lr

080119cc <LL_RCC_HSE_IsReady>:
{
 80119cc:	b480      	push	{r7}
 80119ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80119d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80119da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80119de:	d101      	bne.n	80119e4 <LL_RCC_HSE_IsReady+0x18>
 80119e0:	2301      	movs	r3, #1
 80119e2:	e000      	b.n	80119e6 <LL_RCC_HSE_IsReady+0x1a>
 80119e4:	2300      	movs	r3, #0
}
 80119e6:	4618      	mov	r0, r3
 80119e8:	46bd      	mov	sp, r7
 80119ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ee:	4770      	bx	lr

080119f0 <LL_RCC_HSI_Enable>:
{
 80119f0:	b480      	push	{r7}
 80119f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80119f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80119fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011a02:	6013      	str	r3, [r2, #0]
}
 8011a04:	bf00      	nop
 8011a06:	46bd      	mov	sp, r7
 8011a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0c:	4770      	bx	lr

08011a0e <LL_RCC_HSI_Disable>:
{
 8011a0e:	b480      	push	{r7}
 8011a10:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8011a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8011a1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011a20:	6013      	str	r3, [r2, #0]
}
 8011a22:	bf00      	nop
 8011a24:	46bd      	mov	sp, r7
 8011a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a2a:	4770      	bx	lr

08011a2c <LL_RCC_HSI_IsReady>:
{
 8011a2c:	b480      	push	{r7}
 8011a2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8011a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011a3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011a3e:	d101      	bne.n	8011a44 <LL_RCC_HSI_IsReady+0x18>
 8011a40:	2301      	movs	r3, #1
 8011a42:	e000      	b.n	8011a46 <LL_RCC_HSI_IsReady+0x1a>
 8011a44:	2300      	movs	r3, #0
}
 8011a46:	4618      	mov	r0, r3
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a4e:	4770      	bx	lr

08011a50 <LL_RCC_HSI_SetCalibTrimming>:
{
 8011a50:	b480      	push	{r7}
 8011a52:	b083      	sub	sp, #12
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8011a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011a5c:	685b      	ldr	r3, [r3, #4]
 8011a5e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	061b      	lsls	r3, r3, #24
 8011a66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8011a6a:	4313      	orrs	r3, r2
 8011a6c:	604b      	str	r3, [r1, #4]
}
 8011a6e:	bf00      	nop
 8011a70:	370c      	adds	r7, #12
 8011a72:	46bd      	mov	sp, r7
 8011a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a78:	4770      	bx	lr

08011a7a <LL_RCC_HSI48_Enable>:
{
 8011a7a:	b480      	push	{r7}
 8011a7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8011a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011a82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011a86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8011a8a:	f043 0301 	orr.w	r3, r3, #1
 8011a8e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8011a92:	bf00      	nop
 8011a94:	46bd      	mov	sp, r7
 8011a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a9a:	4770      	bx	lr

08011a9c <LL_RCC_HSI48_Disable>:
{
 8011a9c:	b480      	push	{r7}
 8011a9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8011aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011aa4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011aa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8011aac:	f023 0301 	bic.w	r3, r3, #1
 8011ab0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8011ab4:	bf00      	nop
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011abc:	4770      	bx	lr

08011abe <LL_RCC_HSI48_IsReady>:
{
 8011abe:	b480      	push	{r7}
 8011ac0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8011ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011ac6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011aca:	f003 0302 	and.w	r3, r3, #2
 8011ace:	2b02      	cmp	r3, #2
 8011ad0:	d101      	bne.n	8011ad6 <LL_RCC_HSI48_IsReady+0x18>
 8011ad2:	2301      	movs	r3, #1
 8011ad4:	e000      	b.n	8011ad8 <LL_RCC_HSI48_IsReady+0x1a>
 8011ad6:	2300      	movs	r3, #0
}
 8011ad8:	4618      	mov	r0, r3
 8011ada:	46bd      	mov	sp, r7
 8011adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae0:	4770      	bx	lr

08011ae2 <LL_RCC_LSE_Enable>:
{
 8011ae2:	b480      	push	{r7}
 8011ae4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8011ae6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011aee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8011af2:	f043 0301 	orr.w	r3, r3, #1
 8011af6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8011afa:	bf00      	nop
 8011afc:	46bd      	mov	sp, r7
 8011afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b02:	4770      	bx	lr

08011b04 <LL_RCC_LSE_Disable>:
{
 8011b04:	b480      	push	{r7}
 8011b06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8011b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8011b14:	f023 0301 	bic.w	r3, r3, #1
 8011b18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8011b1c:	bf00      	nop
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b24:	4770      	bx	lr

08011b26 <LL_RCC_LSE_EnableBypass>:
{
 8011b26:	b480      	push	{r7}
 8011b28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8011b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8011b36:	f043 0304 	orr.w	r3, r3, #4
 8011b3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8011b3e:	bf00      	nop
 8011b40:	46bd      	mov	sp, r7
 8011b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b46:	4770      	bx	lr

08011b48 <LL_RCC_LSE_DisableBypass>:
{
 8011b48:	b480      	push	{r7}
 8011b4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8011b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8011b58:	f023 0304 	bic.w	r3, r3, #4
 8011b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8011b60:	bf00      	nop
 8011b62:	46bd      	mov	sp, r7
 8011b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b68:	4770      	bx	lr

08011b6a <LL_RCC_LSE_IsReady>:
{
 8011b6a:	b480      	push	{r7}
 8011b6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8011b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b76:	f003 0302 	and.w	r3, r3, #2
 8011b7a:	2b02      	cmp	r3, #2
 8011b7c:	d101      	bne.n	8011b82 <LL_RCC_LSE_IsReady+0x18>
 8011b7e:	2301      	movs	r3, #1
 8011b80:	e000      	b.n	8011b84 <LL_RCC_LSE_IsReady+0x1a>
 8011b82:	2300      	movs	r3, #0
}
 8011b84:	4618      	mov	r0, r3
 8011b86:	46bd      	mov	sp, r7
 8011b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b8c:	4770      	bx	lr

08011b8e <LL_RCC_LSI1_Enable>:
{
 8011b8e:	b480      	push	{r7}
 8011b90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8011b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011b9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8011b9e:	f043 0301 	orr.w	r3, r3, #1
 8011ba2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8011ba6:	bf00      	nop
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bae:	4770      	bx	lr

08011bb0 <LL_RCC_LSI1_Disable>:
{
 8011bb0:	b480      	push	{r7}
 8011bb2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8011bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011bb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011bbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8011bc0:	f023 0301 	bic.w	r3, r3, #1
 8011bc4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8011bc8:	bf00      	nop
 8011bca:	46bd      	mov	sp, r7
 8011bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd0:	4770      	bx	lr

08011bd2 <LL_RCC_LSI1_IsReady>:
{
 8011bd2:	b480      	push	{r7}
 8011bd4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8011bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011bde:	f003 0302 	and.w	r3, r3, #2
 8011be2:	2b02      	cmp	r3, #2
 8011be4:	d101      	bne.n	8011bea <LL_RCC_LSI1_IsReady+0x18>
 8011be6:	2301      	movs	r3, #1
 8011be8:	e000      	b.n	8011bec <LL_RCC_LSI1_IsReady+0x1a>
 8011bea:	2300      	movs	r3, #0
}
 8011bec:	4618      	mov	r0, r3
 8011bee:	46bd      	mov	sp, r7
 8011bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf4:	4770      	bx	lr

08011bf6 <LL_RCC_LSI2_Enable>:
{
 8011bf6:	b480      	push	{r7}
 8011bf8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8011bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011c02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8011c06:	f043 0304 	orr.w	r3, r3, #4
 8011c0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8011c0e:	bf00      	nop
 8011c10:	46bd      	mov	sp, r7
 8011c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c16:	4770      	bx	lr

08011c18 <LL_RCC_LSI2_Disable>:
{
 8011c18:	b480      	push	{r7}
 8011c1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8011c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011c24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8011c28:	f023 0304 	bic.w	r3, r3, #4
 8011c2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8011c30:	bf00      	nop
 8011c32:	46bd      	mov	sp, r7
 8011c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c38:	4770      	bx	lr

08011c3a <LL_RCC_LSI2_IsReady>:
{
 8011c3a:	b480      	push	{r7}
 8011c3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8011c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011c46:	f003 0308 	and.w	r3, r3, #8
 8011c4a:	2b08      	cmp	r3, #8
 8011c4c:	d101      	bne.n	8011c52 <LL_RCC_LSI2_IsReady+0x18>
 8011c4e:	2301      	movs	r3, #1
 8011c50:	e000      	b.n	8011c54 <LL_RCC_LSI2_IsReady+0x1a>
 8011c52:	2300      	movs	r3, #0
}
 8011c54:	4618      	mov	r0, r3
 8011c56:	46bd      	mov	sp, r7
 8011c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c5c:	4770      	bx	lr

08011c5e <LL_RCC_LSI2_SetTrimming>:
{
 8011c5e:	b480      	push	{r7}
 8011c60:	b083      	sub	sp, #12
 8011c62:	af00      	add	r7, sp, #0
 8011c64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8011c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011c6e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	021b      	lsls	r3, r3, #8
 8011c76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8011c7a:	4313      	orrs	r3, r2
 8011c7c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8011c80:	bf00      	nop
 8011c82:	370c      	adds	r7, #12
 8011c84:	46bd      	mov	sp, r7
 8011c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c8a:	4770      	bx	lr

08011c8c <LL_RCC_MSI_Enable>:
{
 8011c8c:	b480      	push	{r7}
 8011c8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8011c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8011c9a:	f043 0301 	orr.w	r3, r3, #1
 8011c9e:	6013      	str	r3, [r2, #0]
}
 8011ca0:	bf00      	nop
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca8:	4770      	bx	lr

08011caa <LL_RCC_MSI_Disable>:
{
 8011caa:	b480      	push	{r7}
 8011cac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8011cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8011cb8:	f023 0301 	bic.w	r3, r3, #1
 8011cbc:	6013      	str	r3, [r2, #0]
}
 8011cbe:	bf00      	nop
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc6:	4770      	bx	lr

08011cc8 <LL_RCC_MSI_IsReady>:
{
 8011cc8:	b480      	push	{r7}
 8011cca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8011ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	f003 0302 	and.w	r3, r3, #2
 8011cd6:	2b02      	cmp	r3, #2
 8011cd8:	d101      	bne.n	8011cde <LL_RCC_MSI_IsReady+0x16>
 8011cda:	2301      	movs	r3, #1
 8011cdc:	e000      	b.n	8011ce0 <LL_RCC_MSI_IsReady+0x18>
 8011cde:	2300      	movs	r3, #0
}
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce8:	4770      	bx	lr

08011cea <LL_RCC_MSI_SetRange>:
{
 8011cea:	b480      	push	{r7}
 8011cec:	b083      	sub	sp, #12
 8011cee:	af00      	add	r7, sp, #0
 8011cf0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8011cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8011cfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	4313      	orrs	r3, r2
 8011d04:	600b      	str	r3, [r1, #0]
}
 8011d06:	bf00      	nop
 8011d08:	370c      	adds	r7, #12
 8011d0a:	46bd      	mov	sp, r7
 8011d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d10:	4770      	bx	lr

08011d12 <LL_RCC_MSI_GetRange>:
{
 8011d12:	b480      	push	{r7}
 8011d14:	b083      	sub	sp, #12
 8011d16:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8011d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011d22:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	2bb0      	cmp	r3, #176	; 0xb0
 8011d28:	d901      	bls.n	8011d2e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8011d2a:	23b0      	movs	r3, #176	; 0xb0
 8011d2c:	607b      	str	r3, [r7, #4]
  return msiRange;
 8011d2e:	687b      	ldr	r3, [r7, #4]
}
 8011d30:	4618      	mov	r0, r3
 8011d32:	370c      	adds	r7, #12
 8011d34:	46bd      	mov	sp, r7
 8011d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3a:	4770      	bx	lr

08011d3c <LL_RCC_MSI_SetCalibTrimming>:
{
 8011d3c:	b480      	push	{r7}
 8011d3e:	b083      	sub	sp, #12
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8011d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011d48:	685b      	ldr	r3, [r3, #4]
 8011d4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	021b      	lsls	r3, r3, #8
 8011d52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8011d56:	4313      	orrs	r3, r2
 8011d58:	604b      	str	r3, [r1, #4]
}
 8011d5a:	bf00      	nop
 8011d5c:	370c      	adds	r7, #12
 8011d5e:	46bd      	mov	sp, r7
 8011d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d64:	4770      	bx	lr

08011d66 <LL_RCC_SetSysClkSource>:
{
 8011d66:	b480      	push	{r7}
 8011d68:	b083      	sub	sp, #12
 8011d6a:	af00      	add	r7, sp, #0
 8011d6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8011d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011d72:	689b      	ldr	r3, [r3, #8]
 8011d74:	f023 0203 	bic.w	r2, r3, #3
 8011d78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	4313      	orrs	r3, r2
 8011d80:	608b      	str	r3, [r1, #8]
}
 8011d82:	bf00      	nop
 8011d84:	370c      	adds	r7, #12
 8011d86:	46bd      	mov	sp, r7
 8011d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d8c:	4770      	bx	lr

08011d8e <LL_RCC_GetSysClkSource>:
{
 8011d8e:	b480      	push	{r7}
 8011d90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8011d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011d96:	689b      	ldr	r3, [r3, #8]
 8011d98:	f003 030c 	and.w	r3, r3, #12
}
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da4:	4770      	bx	lr

08011da6 <LL_RCC_SetAHBPrescaler>:
{
 8011da6:	b480      	push	{r7}
 8011da8:	b083      	sub	sp, #12
 8011daa:	af00      	add	r7, sp, #0
 8011dac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8011dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011db2:	689b      	ldr	r3, [r3, #8]
 8011db4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8011db8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	4313      	orrs	r3, r2
 8011dc0:	608b      	str	r3, [r1, #8]
}
 8011dc2:	bf00      	nop
 8011dc4:	370c      	adds	r7, #12
 8011dc6:	46bd      	mov	sp, r7
 8011dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dcc:	4770      	bx	lr

08011dce <LL_C2_RCC_SetAHBPrescaler>:
{
 8011dce:	b480      	push	{r7}
 8011dd0:	b083      	sub	sp, #12
 8011dd2:	af00      	add	r7, sp, #0
 8011dd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8011dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011dda:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8011dde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8011de2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	4313      	orrs	r3, r2
 8011dea:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8011dee:	bf00      	nop
 8011df0:	370c      	adds	r7, #12
 8011df2:	46bd      	mov	sp, r7
 8011df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df8:	4770      	bx	lr

08011dfa <LL_RCC_SetAHB4Prescaler>:
{
 8011dfa:	b480      	push	{r7}
 8011dfc:	b083      	sub	sp, #12
 8011dfe:	af00      	add	r7, sp, #0
 8011e00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8011e02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011e06:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8011e0a:	f023 020f 	bic.w	r2, r3, #15
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	091b      	lsrs	r3, r3, #4
 8011e12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8011e16:	4313      	orrs	r3, r2
 8011e18:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8011e1c:	bf00      	nop
 8011e1e:	370c      	adds	r7, #12
 8011e20:	46bd      	mov	sp, r7
 8011e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e26:	4770      	bx	lr

08011e28 <LL_RCC_SetAPB1Prescaler>:
{
 8011e28:	b480      	push	{r7}
 8011e2a:	b083      	sub	sp, #12
 8011e2c:	af00      	add	r7, sp, #0
 8011e2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8011e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011e34:	689b      	ldr	r3, [r3, #8]
 8011e36:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8011e3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	4313      	orrs	r3, r2
 8011e42:	608b      	str	r3, [r1, #8]
}
 8011e44:	bf00      	nop
 8011e46:	370c      	adds	r7, #12
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e4e:	4770      	bx	lr

08011e50 <LL_RCC_SetAPB2Prescaler>:
{
 8011e50:	b480      	push	{r7}
 8011e52:	b083      	sub	sp, #12
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8011e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011e5c:	689b      	ldr	r3, [r3, #8]
 8011e5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8011e62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	4313      	orrs	r3, r2
 8011e6a:	608b      	str	r3, [r1, #8]
}
 8011e6c:	bf00      	nop
 8011e6e:	370c      	adds	r7, #12
 8011e70:	46bd      	mov	sp, r7
 8011e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e76:	4770      	bx	lr

08011e78 <LL_RCC_GetAHBPrescaler>:
{
 8011e78:	b480      	push	{r7}
 8011e7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8011e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011e80:	689b      	ldr	r3, [r3, #8]
 8011e82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8011e86:	4618      	mov	r0, r3
 8011e88:	46bd      	mov	sp, r7
 8011e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e8e:	4770      	bx	lr

08011e90 <LL_RCC_GetAHB4Prescaler>:
{
 8011e90:	b480      	push	{r7}
 8011e92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8011e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011e98:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8011e9c:	011b      	lsls	r3, r3, #4
 8011e9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eaa:	4770      	bx	lr

08011eac <LL_RCC_GetAPB1Prescaler>:
{
 8011eac:	b480      	push	{r7}
 8011eae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8011eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011eb4:	689b      	ldr	r3, [r3, #8]
 8011eb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8011eba:	4618      	mov	r0, r3
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec2:	4770      	bx	lr

08011ec4 <LL_RCC_GetAPB2Prescaler>:
{
 8011ec4:	b480      	push	{r7}
 8011ec6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8011ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011ecc:	689b      	ldr	r3, [r3, #8]
 8011ece:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eda:	4770      	bx	lr

08011edc <LL_RCC_PLL_Enable>:
{
 8011edc:	b480      	push	{r7}
 8011ede:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8011ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8011eea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011eee:	6013      	str	r3, [r2, #0]
}
 8011ef0:	bf00      	nop
 8011ef2:	46bd      	mov	sp, r7
 8011ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef8:	4770      	bx	lr

08011efa <LL_RCC_PLL_Disable>:
{
 8011efa:	b480      	push	{r7}
 8011efc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8011efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8011f08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011f0c:	6013      	str	r3, [r2, #0]
}
 8011f0e:	bf00      	nop
 8011f10:	46bd      	mov	sp, r7
 8011f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f16:	4770      	bx	lr

08011f18 <LL_RCC_PLL_IsReady>:
{
 8011f18:	b480      	push	{r7}
 8011f1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8011f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011f26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011f2a:	d101      	bne.n	8011f30 <LL_RCC_PLL_IsReady+0x18>
 8011f2c:	2301      	movs	r3, #1
 8011f2e:	e000      	b.n	8011f32 <LL_RCC_PLL_IsReady+0x1a>
 8011f30:	2300      	movs	r3, #0
}
 8011f32:	4618      	mov	r0, r3
 8011f34:	46bd      	mov	sp, r7
 8011f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f3a:	4770      	bx	lr

08011f3c <LL_RCC_PLL_GetN>:
{
 8011f3c:	b480      	push	{r7}
 8011f3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8011f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011f44:	68db      	ldr	r3, [r3, #12]
 8011f46:	0a1b      	lsrs	r3, r3, #8
 8011f48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f54:	4770      	bx	lr

08011f56 <LL_RCC_PLL_GetR>:
{
 8011f56:	b480      	push	{r7}
 8011f58:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8011f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011f5e:	68db      	ldr	r3, [r3, #12]
 8011f60:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8011f64:	4618      	mov	r0, r3
 8011f66:	46bd      	mov	sp, r7
 8011f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f6c:	4770      	bx	lr

08011f6e <LL_RCC_PLL_GetDivider>:
{
 8011f6e:	b480      	push	{r7}
 8011f70:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8011f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011f76:	68db      	ldr	r3, [r3, #12]
 8011f78:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	46bd      	mov	sp, r7
 8011f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f84:	4770      	bx	lr

08011f86 <LL_RCC_PLL_GetMainSource>:
{
 8011f86:	b480      	push	{r7}
 8011f88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8011f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011f8e:	68db      	ldr	r3, [r3, #12]
 8011f90:	f003 0303 	and.w	r3, r3, #3
}
 8011f94:	4618      	mov	r0, r3
 8011f96:	46bd      	mov	sp, r7
 8011f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f9c:	4770      	bx	lr

08011f9e <LL_RCC_IsActiveFlag_HPRE>:
{
 8011f9e:	b480      	push	{r7}
 8011fa0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8011fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011fa6:	689b      	ldr	r3, [r3, #8]
 8011fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011fb0:	d101      	bne.n	8011fb6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8011fb2:	2301      	movs	r3, #1
 8011fb4:	e000      	b.n	8011fb8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8011fb6:	2300      	movs	r3, #0
}
 8011fb8:	4618      	mov	r0, r3
 8011fba:	46bd      	mov	sp, r7
 8011fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc0:	4770      	bx	lr

08011fc2 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8011fc2:	b480      	push	{r7}
 8011fc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8011fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011fca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8011fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011fd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011fd6:	d101      	bne.n	8011fdc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8011fd8:	2301      	movs	r3, #1
 8011fda:	e000      	b.n	8011fde <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8011fdc:	2300      	movs	r3, #0
}
 8011fde:	4618      	mov	r0, r3
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe6:	4770      	bx	lr

08011fe8 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8011fe8:	b480      	push	{r7}
 8011fea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8011fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011ff0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8011ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011ffc:	d101      	bne.n	8012002 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8011ffe:	2301      	movs	r3, #1
 8012000:	e000      	b.n	8012004 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8012002:	2300      	movs	r3, #0
}
 8012004:	4618      	mov	r0, r3
 8012006:	46bd      	mov	sp, r7
 8012008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200c:	4770      	bx	lr

0801200e <LL_RCC_IsActiveFlag_PPRE1>:
{
 801200e:	b480      	push	{r7}
 8012010:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8012012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012016:	689b      	ldr	r3, [r3, #8]
 8012018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801201c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012020:	d101      	bne.n	8012026 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8012022:	2301      	movs	r3, #1
 8012024:	e000      	b.n	8012028 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8012026:	2300      	movs	r3, #0
}
 8012028:	4618      	mov	r0, r3
 801202a:	46bd      	mov	sp, r7
 801202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012030:	4770      	bx	lr

08012032 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8012032:	b480      	push	{r7}
 8012034:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8012036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801203a:	689b      	ldr	r3, [r3, #8]
 801203c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012040:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8012044:	d101      	bne.n	801204a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8012046:	2301      	movs	r3, #1
 8012048:	e000      	b.n	801204c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 801204a:	2300      	movs	r3, #0
}
 801204c:	4618      	mov	r0, r3
 801204e:	46bd      	mov	sp, r7
 8012050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012054:	4770      	bx	lr
	...

08012058 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012058:	b590      	push	{r4, r7, lr}
 801205a:	b08d      	sub	sp, #52	; 0x34
 801205c:	af00      	add	r7, sp, #0
 801205e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d101      	bne.n	801206a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8012066:	2301      	movs	r3, #1
 8012068:	e363      	b.n	8012732 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	f003 0320 	and.w	r3, r3, #32
 8012072:	2b00      	cmp	r3, #0
 8012074:	f000 808d 	beq.w	8012192 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8012078:	f7ff fe89 	bl	8011d8e <LL_RCC_GetSysClkSource>
 801207c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 801207e:	f7ff ff82 	bl	8011f86 <LL_RCC_PLL_GetMainSource>
 8012082:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8012084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012086:	2b00      	cmp	r3, #0
 8012088:	d005      	beq.n	8012096 <HAL_RCC_OscConfig+0x3e>
 801208a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801208c:	2b0c      	cmp	r3, #12
 801208e:	d147      	bne.n	8012120 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8012090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012092:	2b01      	cmp	r3, #1
 8012094:	d144      	bne.n	8012120 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	69db      	ldr	r3, [r3, #28]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d101      	bne.n	80120a2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 801209e:	2301      	movs	r3, #1
 80120a0:	e347      	b.n	8012732 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80120a6:	f7ff fe34 	bl	8011d12 <LL_RCC_MSI_GetRange>
 80120aa:	4603      	mov	r3, r0
 80120ac:	429c      	cmp	r4, r3
 80120ae:	d914      	bls.n	80120da <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120b4:	4618      	mov	r0, r3
 80120b6:	f000 fd2f 	bl	8012b18 <RCC_SetFlashLatencyFromMSIRange>
 80120ba:	4603      	mov	r3, r0
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d001      	beq.n	80120c4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80120c0:	2301      	movs	r3, #1
 80120c2:	e336      	b.n	8012732 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120c8:	4618      	mov	r0, r3
 80120ca:	f7ff fe0e 	bl	8011cea <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	6a1b      	ldr	r3, [r3, #32]
 80120d2:	4618      	mov	r0, r3
 80120d4:	f7ff fe32 	bl	8011d3c <LL_RCC_MSI_SetCalibTrimming>
 80120d8:	e013      	b.n	8012102 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120de:	4618      	mov	r0, r3
 80120e0:	f7ff fe03 	bl	8011cea <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	6a1b      	ldr	r3, [r3, #32]
 80120e8:	4618      	mov	r0, r3
 80120ea:	f7ff fe27 	bl	8011d3c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120f2:	4618      	mov	r0, r3
 80120f4:	f000 fd10 	bl	8012b18 <RCC_SetFlashLatencyFromMSIRange>
 80120f8:	4603      	mov	r3, r0
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d001      	beq.n	8012102 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80120fe:	2301      	movs	r3, #1
 8012100:	e317      	b.n	8012732 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8012102:	f000 fcc9 	bl	8012a98 <HAL_RCC_GetHCLKFreq>
 8012106:	4603      	mov	r3, r0
 8012108:	4aa4      	ldr	r2, [pc, #656]	; (801239c <HAL_RCC_OscConfig+0x344>)
 801210a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 801210c:	4ba4      	ldr	r3, [pc, #656]	; (80123a0 <HAL_RCC_OscConfig+0x348>)
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	4618      	mov	r0, r3
 8012112:	f7fb fbe5 	bl	800d8e0 <HAL_InitTick>
 8012116:	4603      	mov	r3, r0
 8012118:	2b00      	cmp	r3, #0
 801211a:	d039      	beq.n	8012190 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 801211c:	2301      	movs	r3, #1
 801211e:	e308      	b.n	8012732 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	69db      	ldr	r3, [r3, #28]
 8012124:	2b00      	cmp	r3, #0
 8012126:	d01e      	beq.n	8012166 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8012128:	f7ff fdb0 	bl	8011c8c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 801212c:	f7fb fc26 	bl	800d97c <HAL_GetTick>
 8012130:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8012132:	e008      	b.n	8012146 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8012134:	f7fb fc22 	bl	800d97c <HAL_GetTick>
 8012138:	4602      	mov	r2, r0
 801213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801213c:	1ad3      	subs	r3, r2, r3
 801213e:	2b02      	cmp	r3, #2
 8012140:	d901      	bls.n	8012146 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8012142:	2303      	movs	r3, #3
 8012144:	e2f5      	b.n	8012732 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8012146:	f7ff fdbf 	bl	8011cc8 <LL_RCC_MSI_IsReady>
 801214a:	4603      	mov	r3, r0
 801214c:	2b00      	cmp	r3, #0
 801214e:	d0f1      	beq.n	8012134 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012154:	4618      	mov	r0, r3
 8012156:	f7ff fdc8 	bl	8011cea <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	6a1b      	ldr	r3, [r3, #32]
 801215e:	4618      	mov	r0, r3
 8012160:	f7ff fdec 	bl	8011d3c <LL_RCC_MSI_SetCalibTrimming>
 8012164:	e015      	b.n	8012192 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8012166:	f7ff fda0 	bl	8011caa <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 801216a:	f7fb fc07 	bl	800d97c <HAL_GetTick>
 801216e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8012170:	e008      	b.n	8012184 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8012172:	f7fb fc03 	bl	800d97c <HAL_GetTick>
 8012176:	4602      	mov	r2, r0
 8012178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801217a:	1ad3      	subs	r3, r2, r3
 801217c:	2b02      	cmp	r3, #2
 801217e:	d901      	bls.n	8012184 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8012180:	2303      	movs	r3, #3
 8012182:	e2d6      	b.n	8012732 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8012184:	f7ff fda0 	bl	8011cc8 <LL_RCC_MSI_IsReady>
 8012188:	4603      	mov	r3, r0
 801218a:	2b00      	cmp	r3, #0
 801218c:	d1f1      	bne.n	8012172 <HAL_RCC_OscConfig+0x11a>
 801218e:	e000      	b.n	8012192 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8012190:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	f003 0301 	and.w	r3, r3, #1
 801219a:	2b00      	cmp	r3, #0
 801219c:	d047      	beq.n	801222e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801219e:	f7ff fdf6 	bl	8011d8e <LL_RCC_GetSysClkSource>
 80121a2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80121a4:	f7ff feef 	bl	8011f86 <LL_RCC_PLL_GetMainSource>
 80121a8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80121aa:	6a3b      	ldr	r3, [r7, #32]
 80121ac:	2b08      	cmp	r3, #8
 80121ae:	d005      	beq.n	80121bc <HAL_RCC_OscConfig+0x164>
 80121b0:	6a3b      	ldr	r3, [r7, #32]
 80121b2:	2b0c      	cmp	r3, #12
 80121b4:	d108      	bne.n	80121c8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80121b6:	69fb      	ldr	r3, [r7, #28]
 80121b8:	2b03      	cmp	r3, #3
 80121ba:	d105      	bne.n	80121c8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	685b      	ldr	r3, [r3, #4]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d134      	bne.n	801222e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80121c4:	2301      	movs	r3, #1
 80121c6:	e2b4      	b.n	8012732 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	685b      	ldr	r3, [r3, #4]
 80121cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80121d0:	d102      	bne.n	80121d8 <HAL_RCC_OscConfig+0x180>
 80121d2:	f7ff fbdd 	bl	8011990 <LL_RCC_HSE_Enable>
 80121d6:	e001      	b.n	80121dc <HAL_RCC_OscConfig+0x184>
 80121d8:	f7ff fbe9 	bl	80119ae <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	685b      	ldr	r3, [r3, #4]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d012      	beq.n	801220a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80121e4:	f7fb fbca 	bl	800d97c <HAL_GetTick>
 80121e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80121ea:	e008      	b.n	80121fe <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80121ec:	f7fb fbc6 	bl	800d97c <HAL_GetTick>
 80121f0:	4602      	mov	r2, r0
 80121f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121f4:	1ad3      	subs	r3, r2, r3
 80121f6:	2b64      	cmp	r3, #100	; 0x64
 80121f8:	d901      	bls.n	80121fe <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80121fa:	2303      	movs	r3, #3
 80121fc:	e299      	b.n	8012732 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80121fe:	f7ff fbe5 	bl	80119cc <LL_RCC_HSE_IsReady>
 8012202:	4603      	mov	r3, r0
 8012204:	2b00      	cmp	r3, #0
 8012206:	d0f1      	beq.n	80121ec <HAL_RCC_OscConfig+0x194>
 8012208:	e011      	b.n	801222e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801220a:	f7fb fbb7 	bl	800d97c <HAL_GetTick>
 801220e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8012210:	e008      	b.n	8012224 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8012212:	f7fb fbb3 	bl	800d97c <HAL_GetTick>
 8012216:	4602      	mov	r2, r0
 8012218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801221a:	1ad3      	subs	r3, r2, r3
 801221c:	2b64      	cmp	r3, #100	; 0x64
 801221e:	d901      	bls.n	8012224 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8012220:	2303      	movs	r3, #3
 8012222:	e286      	b.n	8012732 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8012224:	f7ff fbd2 	bl	80119cc <LL_RCC_HSE_IsReady>
 8012228:	4603      	mov	r3, r0
 801222a:	2b00      	cmp	r3, #0
 801222c:	d1f1      	bne.n	8012212 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	f003 0302 	and.w	r3, r3, #2
 8012236:	2b00      	cmp	r3, #0
 8012238:	d04c      	beq.n	80122d4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801223a:	f7ff fda8 	bl	8011d8e <LL_RCC_GetSysClkSource>
 801223e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8012240:	f7ff fea1 	bl	8011f86 <LL_RCC_PLL_GetMainSource>
 8012244:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8012246:	69bb      	ldr	r3, [r7, #24]
 8012248:	2b04      	cmp	r3, #4
 801224a:	d005      	beq.n	8012258 <HAL_RCC_OscConfig+0x200>
 801224c:	69bb      	ldr	r3, [r7, #24]
 801224e:	2b0c      	cmp	r3, #12
 8012250:	d10e      	bne.n	8012270 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8012252:	697b      	ldr	r3, [r7, #20]
 8012254:	2b02      	cmp	r3, #2
 8012256:	d10b      	bne.n	8012270 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	68db      	ldr	r3, [r3, #12]
 801225c:	2b00      	cmp	r3, #0
 801225e:	d101      	bne.n	8012264 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8012260:	2301      	movs	r3, #1
 8012262:	e266      	b.n	8012732 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	691b      	ldr	r3, [r3, #16]
 8012268:	4618      	mov	r0, r3
 801226a:	f7ff fbf1 	bl	8011a50 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 801226e:	e031      	b.n	80122d4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	68db      	ldr	r3, [r3, #12]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d019      	beq.n	80122ac <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8012278:	f7ff fbba 	bl	80119f0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801227c:	f7fb fb7e 	bl	800d97c <HAL_GetTick>
 8012280:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8012282:	e008      	b.n	8012296 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8012284:	f7fb fb7a 	bl	800d97c <HAL_GetTick>
 8012288:	4602      	mov	r2, r0
 801228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801228c:	1ad3      	subs	r3, r2, r3
 801228e:	2b02      	cmp	r3, #2
 8012290:	d901      	bls.n	8012296 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8012292:	2303      	movs	r3, #3
 8012294:	e24d      	b.n	8012732 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8012296:	f7ff fbc9 	bl	8011a2c <LL_RCC_HSI_IsReady>
 801229a:	4603      	mov	r3, r0
 801229c:	2b00      	cmp	r3, #0
 801229e:	d0f1      	beq.n	8012284 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	691b      	ldr	r3, [r3, #16]
 80122a4:	4618      	mov	r0, r3
 80122a6:	f7ff fbd3 	bl	8011a50 <LL_RCC_HSI_SetCalibTrimming>
 80122aa:	e013      	b.n	80122d4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80122ac:	f7ff fbaf 	bl	8011a0e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80122b0:	f7fb fb64 	bl	800d97c <HAL_GetTick>
 80122b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80122b6:	e008      	b.n	80122ca <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80122b8:	f7fb fb60 	bl	800d97c <HAL_GetTick>
 80122bc:	4602      	mov	r2, r0
 80122be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122c0:	1ad3      	subs	r3, r2, r3
 80122c2:	2b02      	cmp	r3, #2
 80122c4:	d901      	bls.n	80122ca <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80122c6:	2303      	movs	r3, #3
 80122c8:	e233      	b.n	8012732 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80122ca:	f7ff fbaf 	bl	8011a2c <LL_RCC_HSI_IsReady>
 80122ce:	4603      	mov	r3, r0
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d1f1      	bne.n	80122b8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	f003 0308 	and.w	r3, r3, #8
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d106      	bne.n	80122ee <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	f000 80a3 	beq.w	8012434 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	695b      	ldr	r3, [r3, #20]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d076      	beq.n	80123e4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	f003 0310 	and.w	r3, r3, #16
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d046      	beq.n	8012390 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8012302:	f7ff fc66 	bl	8011bd2 <LL_RCC_LSI1_IsReady>
 8012306:	4603      	mov	r3, r0
 8012308:	2b00      	cmp	r3, #0
 801230a:	d113      	bne.n	8012334 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 801230c:	f7ff fc3f 	bl	8011b8e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8012310:	f7fb fb34 	bl	800d97c <HAL_GetTick>
 8012314:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8012316:	e008      	b.n	801232a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8012318:	f7fb fb30 	bl	800d97c <HAL_GetTick>
 801231c:	4602      	mov	r2, r0
 801231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012320:	1ad3      	subs	r3, r2, r3
 8012322:	2b02      	cmp	r3, #2
 8012324:	d901      	bls.n	801232a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8012326:	2303      	movs	r3, #3
 8012328:	e203      	b.n	8012732 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 801232a:	f7ff fc52 	bl	8011bd2 <LL_RCC_LSI1_IsReady>
 801232e:	4603      	mov	r3, r0
 8012330:	2b00      	cmp	r3, #0
 8012332:	d0f1      	beq.n	8012318 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8012334:	f7ff fc5f 	bl	8011bf6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012338:	f7fb fb20 	bl	800d97c <HAL_GetTick>
 801233c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 801233e:	e008      	b.n	8012352 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8012340:	f7fb fb1c 	bl	800d97c <HAL_GetTick>
 8012344:	4602      	mov	r2, r0
 8012346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012348:	1ad3      	subs	r3, r2, r3
 801234a:	2b03      	cmp	r3, #3
 801234c:	d901      	bls.n	8012352 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 801234e:	2303      	movs	r3, #3
 8012350:	e1ef      	b.n	8012732 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8012352:	f7ff fc72 	bl	8011c3a <LL_RCC_LSI2_IsReady>
 8012356:	4603      	mov	r3, r0
 8012358:	2b00      	cmp	r3, #0
 801235a:	d0f1      	beq.n	8012340 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	699b      	ldr	r3, [r3, #24]
 8012360:	4618      	mov	r0, r3
 8012362:	f7ff fc7c 	bl	8011c5e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8012366:	f7ff fc23 	bl	8011bb0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801236a:	f7fb fb07 	bl	800d97c <HAL_GetTick>
 801236e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8012370:	e008      	b.n	8012384 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8012372:	f7fb fb03 	bl	800d97c <HAL_GetTick>
 8012376:	4602      	mov	r2, r0
 8012378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801237a:	1ad3      	subs	r3, r2, r3
 801237c:	2b02      	cmp	r3, #2
 801237e:	d901      	bls.n	8012384 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8012380:	2303      	movs	r3, #3
 8012382:	e1d6      	b.n	8012732 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8012384:	f7ff fc25 	bl	8011bd2 <LL_RCC_LSI1_IsReady>
 8012388:	4603      	mov	r3, r0
 801238a:	2b00      	cmp	r3, #0
 801238c:	d1f1      	bne.n	8012372 <HAL_RCC_OscConfig+0x31a>
 801238e:	e051      	b.n	8012434 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8012390:	f7ff fbfd 	bl	8011b8e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012394:	f7fb faf2 	bl	800d97c <HAL_GetTick>
 8012398:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 801239a:	e00c      	b.n	80123b6 <HAL_RCC_OscConfig+0x35e>
 801239c:	20000008 	.word	0x20000008
 80123a0:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80123a4:	f7fb faea 	bl	800d97c <HAL_GetTick>
 80123a8:	4602      	mov	r2, r0
 80123aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ac:	1ad3      	subs	r3, r2, r3
 80123ae:	2b02      	cmp	r3, #2
 80123b0:	d901      	bls.n	80123b6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80123b2:	2303      	movs	r3, #3
 80123b4:	e1bd      	b.n	8012732 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80123b6:	f7ff fc0c 	bl	8011bd2 <LL_RCC_LSI1_IsReady>
 80123ba:	4603      	mov	r3, r0
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d0f1      	beq.n	80123a4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80123c0:	f7ff fc2a 	bl	8011c18 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80123c4:	e008      	b.n	80123d8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80123c6:	f7fb fad9 	bl	800d97c <HAL_GetTick>
 80123ca:	4602      	mov	r2, r0
 80123cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ce:	1ad3      	subs	r3, r2, r3
 80123d0:	2b03      	cmp	r3, #3
 80123d2:	d901      	bls.n	80123d8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80123d4:	2303      	movs	r3, #3
 80123d6:	e1ac      	b.n	8012732 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80123d8:	f7ff fc2f 	bl	8011c3a <LL_RCC_LSI2_IsReady>
 80123dc:	4603      	mov	r3, r0
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d1f1      	bne.n	80123c6 <HAL_RCC_OscConfig+0x36e>
 80123e2:	e027      	b.n	8012434 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80123e4:	f7ff fc18 	bl	8011c18 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80123e8:	f7fb fac8 	bl	800d97c <HAL_GetTick>
 80123ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80123ee:	e008      	b.n	8012402 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80123f0:	f7fb fac4 	bl	800d97c <HAL_GetTick>
 80123f4:	4602      	mov	r2, r0
 80123f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123f8:	1ad3      	subs	r3, r2, r3
 80123fa:	2b03      	cmp	r3, #3
 80123fc:	d901      	bls.n	8012402 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80123fe:	2303      	movs	r3, #3
 8012400:	e197      	b.n	8012732 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8012402:	f7ff fc1a 	bl	8011c3a <LL_RCC_LSI2_IsReady>
 8012406:	4603      	mov	r3, r0
 8012408:	2b00      	cmp	r3, #0
 801240a:	d1f1      	bne.n	80123f0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 801240c:	f7ff fbd0 	bl	8011bb0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012410:	f7fb fab4 	bl	800d97c <HAL_GetTick>
 8012414:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8012416:	e008      	b.n	801242a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8012418:	f7fb fab0 	bl	800d97c <HAL_GetTick>
 801241c:	4602      	mov	r2, r0
 801241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012420:	1ad3      	subs	r3, r2, r3
 8012422:	2b02      	cmp	r3, #2
 8012424:	d901      	bls.n	801242a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8012426:	2303      	movs	r3, #3
 8012428:	e183      	b.n	8012732 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 801242a:	f7ff fbd2 	bl	8011bd2 <LL_RCC_LSI1_IsReady>
 801242e:	4603      	mov	r3, r0
 8012430:	2b00      	cmp	r3, #0
 8012432:	d1f1      	bne.n	8012418 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	f003 0304 	and.w	r3, r3, #4
 801243c:	2b00      	cmp	r3, #0
 801243e:	d05b      	beq.n	80124f8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8012440:	4ba7      	ldr	r3, [pc, #668]	; (80126e0 <HAL_RCC_OscConfig+0x688>)
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012448:	2b00      	cmp	r3, #0
 801244a:	d114      	bne.n	8012476 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 801244c:	f7fe fc06 	bl	8010c5c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8012450:	f7fb fa94 	bl	800d97c <HAL_GetTick>
 8012454:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8012456:	e008      	b.n	801246a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012458:	f7fb fa90 	bl	800d97c <HAL_GetTick>
 801245c:	4602      	mov	r2, r0
 801245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012460:	1ad3      	subs	r3, r2, r3
 8012462:	2b02      	cmp	r3, #2
 8012464:	d901      	bls.n	801246a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8012466:	2303      	movs	r3, #3
 8012468:	e163      	b.n	8012732 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801246a:	4b9d      	ldr	r3, [pc, #628]	; (80126e0 <HAL_RCC_OscConfig+0x688>)
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012472:	2b00      	cmp	r3, #0
 8012474:	d0f0      	beq.n	8012458 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	689b      	ldr	r3, [r3, #8]
 801247a:	2b01      	cmp	r3, #1
 801247c:	d102      	bne.n	8012484 <HAL_RCC_OscConfig+0x42c>
 801247e:	f7ff fb30 	bl	8011ae2 <LL_RCC_LSE_Enable>
 8012482:	e00c      	b.n	801249e <HAL_RCC_OscConfig+0x446>
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	689b      	ldr	r3, [r3, #8]
 8012488:	2b05      	cmp	r3, #5
 801248a:	d104      	bne.n	8012496 <HAL_RCC_OscConfig+0x43e>
 801248c:	f7ff fb4b 	bl	8011b26 <LL_RCC_LSE_EnableBypass>
 8012490:	f7ff fb27 	bl	8011ae2 <LL_RCC_LSE_Enable>
 8012494:	e003      	b.n	801249e <HAL_RCC_OscConfig+0x446>
 8012496:	f7ff fb35 	bl	8011b04 <LL_RCC_LSE_Disable>
 801249a:	f7ff fb55 	bl	8011b48 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	689b      	ldr	r3, [r3, #8]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d014      	beq.n	80124d0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80124a6:	f7fb fa69 	bl	800d97c <HAL_GetTick>
 80124aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80124ac:	e00a      	b.n	80124c4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80124ae:	f7fb fa65 	bl	800d97c <HAL_GetTick>
 80124b2:	4602      	mov	r2, r0
 80124b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124b6:	1ad3      	subs	r3, r2, r3
 80124b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80124bc:	4293      	cmp	r3, r2
 80124be:	d901      	bls.n	80124c4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80124c0:	2303      	movs	r3, #3
 80124c2:	e136      	b.n	8012732 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80124c4:	f7ff fb51 	bl	8011b6a <LL_RCC_LSE_IsReady>
 80124c8:	4603      	mov	r3, r0
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d0ef      	beq.n	80124ae <HAL_RCC_OscConfig+0x456>
 80124ce:	e013      	b.n	80124f8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80124d0:	f7fb fa54 	bl	800d97c <HAL_GetTick>
 80124d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80124d6:	e00a      	b.n	80124ee <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80124d8:	f7fb fa50 	bl	800d97c <HAL_GetTick>
 80124dc:	4602      	mov	r2, r0
 80124de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124e0:	1ad3      	subs	r3, r2, r3
 80124e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80124e6:	4293      	cmp	r3, r2
 80124e8:	d901      	bls.n	80124ee <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80124ea:	2303      	movs	r3, #3
 80124ec:	e121      	b.n	8012732 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80124ee:	f7ff fb3c 	bl	8011b6a <LL_RCC_LSE_IsReady>
 80124f2:	4603      	mov	r3, r0
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d1ef      	bne.n	80124d8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012500:	2b00      	cmp	r3, #0
 8012502:	d02c      	beq.n	801255e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012508:	2b00      	cmp	r3, #0
 801250a:	d014      	beq.n	8012536 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801250c:	f7ff fab5 	bl	8011a7a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012510:	f7fb fa34 	bl	800d97c <HAL_GetTick>
 8012514:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8012516:	e008      	b.n	801252a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8012518:	f7fb fa30 	bl	800d97c <HAL_GetTick>
 801251c:	4602      	mov	r2, r0
 801251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012520:	1ad3      	subs	r3, r2, r3
 8012522:	2b02      	cmp	r3, #2
 8012524:	d901      	bls.n	801252a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8012526:	2303      	movs	r3, #3
 8012528:	e103      	b.n	8012732 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 801252a:	f7ff fac8 	bl	8011abe <LL_RCC_HSI48_IsReady>
 801252e:	4603      	mov	r3, r0
 8012530:	2b00      	cmp	r3, #0
 8012532:	d0f1      	beq.n	8012518 <HAL_RCC_OscConfig+0x4c0>
 8012534:	e013      	b.n	801255e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8012536:	f7ff fab1 	bl	8011a9c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801253a:	f7fb fa1f 	bl	800d97c <HAL_GetTick>
 801253e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8012540:	e008      	b.n	8012554 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8012542:	f7fb fa1b 	bl	800d97c <HAL_GetTick>
 8012546:	4602      	mov	r2, r0
 8012548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801254a:	1ad3      	subs	r3, r2, r3
 801254c:	2b02      	cmp	r3, #2
 801254e:	d901      	bls.n	8012554 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8012550:	2303      	movs	r3, #3
 8012552:	e0ee      	b.n	8012732 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8012554:	f7ff fab3 	bl	8011abe <LL_RCC_HSI48_IsReady>
 8012558:	4603      	mov	r3, r0
 801255a:	2b00      	cmp	r3, #0
 801255c:	d1f1      	bne.n	8012542 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012562:	2b00      	cmp	r3, #0
 8012564:	f000 80e4 	beq.w	8012730 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8012568:	f7ff fc11 	bl	8011d8e <LL_RCC_GetSysClkSource>
 801256c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 801256e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012572:	68db      	ldr	r3, [r3, #12]
 8012574:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801257a:	2b02      	cmp	r3, #2
 801257c:	f040 80b4 	bne.w	80126e8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	f003 0203 	and.w	r2, r3, #3
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801258a:	429a      	cmp	r2, r3
 801258c:	d123      	bne.n	80125d6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012598:	429a      	cmp	r2, r3
 801259a:	d11c      	bne.n	80125d6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	0a1b      	lsrs	r3, r3, #8
 80125a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80125a8:	429a      	cmp	r2, r3
 80125aa:	d114      	bne.n	80125d6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80125b6:	429a      	cmp	r2, r3
 80125b8:	d10d      	bne.n	80125d6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80125c4:	429a      	cmp	r2, r3
 80125c6:	d106      	bne.n	80125d6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80125d2:	429a      	cmp	r2, r3
 80125d4:	d05d      	beq.n	8012692 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80125d6:	693b      	ldr	r3, [r7, #16]
 80125d8:	2b0c      	cmp	r3, #12
 80125da:	d058      	beq.n	801268e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80125dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d001      	beq.n	80125ee <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80125ea:	2301      	movs	r3, #1
 80125ec:	e0a1      	b.n	8012732 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80125ee:	f7ff fc84 	bl	8011efa <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80125f2:	f7fb f9c3 	bl	800d97c <HAL_GetTick>
 80125f6:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80125f8:	e008      	b.n	801260c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80125fa:	f7fb f9bf 	bl	800d97c <HAL_GetTick>
 80125fe:	4602      	mov	r2, r0
 8012600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012602:	1ad3      	subs	r3, r2, r3
 8012604:	2b02      	cmp	r3, #2
 8012606:	d901      	bls.n	801260c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8012608:	2303      	movs	r3, #3
 801260a:	e092      	b.n	8012732 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801260c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012616:	2b00      	cmp	r3, #0
 8012618:	d1ef      	bne.n	80125fa <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801261a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801261e:	68da      	ldr	r2, [r3, #12]
 8012620:	4b30      	ldr	r3, [pc, #192]	; (80126e4 <HAL_RCC_OscConfig+0x68c>)
 8012622:	4013      	ands	r3, r2
 8012624:	687a      	ldr	r2, [r7, #4]
 8012626:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8012628:	687a      	ldr	r2, [r7, #4]
 801262a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801262c:	4311      	orrs	r1, r2
 801262e:	687a      	ldr	r2, [r7, #4]
 8012630:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8012632:	0212      	lsls	r2, r2, #8
 8012634:	4311      	orrs	r1, r2
 8012636:	687a      	ldr	r2, [r7, #4]
 8012638:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 801263a:	4311      	orrs	r1, r2
 801263c:	687a      	ldr	r2, [r7, #4]
 801263e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8012640:	4311      	orrs	r1, r2
 8012642:	687a      	ldr	r2, [r7, #4]
 8012644:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8012646:	430a      	orrs	r2, r1
 8012648:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801264c:	4313      	orrs	r3, r2
 801264e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8012650:	f7ff fc44 	bl	8011edc <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8012654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012658:	68db      	ldr	r3, [r3, #12]
 801265a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801265e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012662:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8012664:	f7fb f98a 	bl	800d97c <HAL_GetTick>
 8012668:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801266a:	e008      	b.n	801267e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801266c:	f7fb f986 	bl	800d97c <HAL_GetTick>
 8012670:	4602      	mov	r2, r0
 8012672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012674:	1ad3      	subs	r3, r2, r3
 8012676:	2b02      	cmp	r3, #2
 8012678:	d901      	bls.n	801267e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 801267a:	2303      	movs	r3, #3
 801267c:	e059      	b.n	8012732 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801267e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012688:	2b00      	cmp	r3, #0
 801268a:	d0ef      	beq.n	801266c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801268c:	e050      	b.n	8012730 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 801268e:	2301      	movs	r3, #1
 8012690:	e04f      	b.n	8012732 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8012692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801269c:	2b00      	cmp	r3, #0
 801269e:	d147      	bne.n	8012730 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80126a0:	f7ff fc1c 	bl	8011edc <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80126a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80126a8:	68db      	ldr	r3, [r3, #12]
 80126aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80126ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80126b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80126b4:	f7fb f962 	bl	800d97c <HAL_GetTick>
 80126b8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80126ba:	e008      	b.n	80126ce <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80126bc:	f7fb f95e 	bl	800d97c <HAL_GetTick>
 80126c0:	4602      	mov	r2, r0
 80126c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126c4:	1ad3      	subs	r3, r2, r3
 80126c6:	2b02      	cmp	r3, #2
 80126c8:	d901      	bls.n	80126ce <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80126ca:	2303      	movs	r3, #3
 80126cc:	e031      	b.n	8012732 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80126ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d0ef      	beq.n	80126bc <HAL_RCC_OscConfig+0x664>
 80126dc:	e028      	b.n	8012730 <HAL_RCC_OscConfig+0x6d8>
 80126de:	bf00      	nop
 80126e0:	58000400 	.word	0x58000400
 80126e4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80126e8:	693b      	ldr	r3, [r7, #16]
 80126ea:	2b0c      	cmp	r3, #12
 80126ec:	d01e      	beq.n	801272c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80126ee:	f7ff fc04 	bl	8011efa <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80126f2:	f7fb f943 	bl	800d97c <HAL_GetTick>
 80126f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80126f8:	e008      	b.n	801270c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80126fa:	f7fb f93f 	bl	800d97c <HAL_GetTick>
 80126fe:	4602      	mov	r2, r0
 8012700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012702:	1ad3      	subs	r3, r2, r3
 8012704:	2b02      	cmp	r3, #2
 8012706:	d901      	bls.n	801270c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8012708:	2303      	movs	r3, #3
 801270a:	e012      	b.n	8012732 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801270c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012716:	2b00      	cmp	r3, #0
 8012718:	d1ef      	bne.n	80126fa <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 801271a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801271e:	68da      	ldr	r2, [r3, #12]
 8012720:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8012724:	4b05      	ldr	r3, [pc, #20]	; (801273c <HAL_RCC_OscConfig+0x6e4>)
 8012726:	4013      	ands	r3, r2
 8012728:	60cb      	str	r3, [r1, #12]
 801272a:	e001      	b.n	8012730 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 801272c:	2301      	movs	r3, #1
 801272e:	e000      	b.n	8012732 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8012730:	2300      	movs	r3, #0
}
 8012732:	4618      	mov	r0, r3
 8012734:	3734      	adds	r7, #52	; 0x34
 8012736:	46bd      	mov	sp, r7
 8012738:	bd90      	pop	{r4, r7, pc}
 801273a:	bf00      	nop
 801273c:	eefefffc 	.word	0xeefefffc

08012740 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012740:	b580      	push	{r7, lr}
 8012742:	b084      	sub	sp, #16
 8012744:	af00      	add	r7, sp, #0
 8012746:	6078      	str	r0, [r7, #4]
 8012748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d101      	bne.n	8012754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8012750:	2301      	movs	r3, #1
 8012752:	e12d      	b.n	80129b0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8012754:	4b98      	ldr	r3, [pc, #608]	; (80129b8 <HAL_RCC_ClockConfig+0x278>)
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	f003 0307 	and.w	r3, r3, #7
 801275c:	683a      	ldr	r2, [r7, #0]
 801275e:	429a      	cmp	r2, r3
 8012760:	d91b      	bls.n	801279a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012762:	4b95      	ldr	r3, [pc, #596]	; (80129b8 <HAL_RCC_ClockConfig+0x278>)
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	f023 0207 	bic.w	r2, r3, #7
 801276a:	4993      	ldr	r1, [pc, #588]	; (80129b8 <HAL_RCC_ClockConfig+0x278>)
 801276c:	683b      	ldr	r3, [r7, #0]
 801276e:	4313      	orrs	r3, r2
 8012770:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012772:	f7fb f903 	bl	800d97c <HAL_GetTick>
 8012776:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8012778:	e008      	b.n	801278c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 801277a:	f7fb f8ff 	bl	800d97c <HAL_GetTick>
 801277e:	4602      	mov	r2, r0
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	1ad3      	subs	r3, r2, r3
 8012784:	2b02      	cmp	r3, #2
 8012786:	d901      	bls.n	801278c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8012788:	2303      	movs	r3, #3
 801278a:	e111      	b.n	80129b0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801278c:	4b8a      	ldr	r3, [pc, #552]	; (80129b8 <HAL_RCC_ClockConfig+0x278>)
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	f003 0307 	and.w	r3, r3, #7
 8012794:	683a      	ldr	r2, [r7, #0]
 8012796:	429a      	cmp	r2, r3
 8012798:	d1ef      	bne.n	801277a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	f003 0302 	and.w	r3, r3, #2
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d016      	beq.n	80127d4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	689b      	ldr	r3, [r3, #8]
 80127aa:	4618      	mov	r0, r3
 80127ac:	f7ff fafb 	bl	8011da6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80127b0:	f7fb f8e4 	bl	800d97c <HAL_GetTick>
 80127b4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80127b6:	e008      	b.n	80127ca <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80127b8:	f7fb f8e0 	bl	800d97c <HAL_GetTick>
 80127bc:	4602      	mov	r2, r0
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	1ad3      	subs	r3, r2, r3
 80127c2:	2b02      	cmp	r3, #2
 80127c4:	d901      	bls.n	80127ca <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80127c6:	2303      	movs	r3, #3
 80127c8:	e0f2      	b.n	80129b0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80127ca:	f7ff fbe8 	bl	8011f9e <LL_RCC_IsActiveFlag_HPRE>
 80127ce:	4603      	mov	r3, r0
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d0f1      	beq.n	80127b8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	f003 0320 	and.w	r3, r3, #32
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d016      	beq.n	801280e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	695b      	ldr	r3, [r3, #20]
 80127e4:	4618      	mov	r0, r3
 80127e6:	f7ff faf2 	bl	8011dce <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80127ea:	f7fb f8c7 	bl	800d97c <HAL_GetTick>
 80127ee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80127f0:	e008      	b.n	8012804 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80127f2:	f7fb f8c3 	bl	800d97c <HAL_GetTick>
 80127f6:	4602      	mov	r2, r0
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	1ad3      	subs	r3, r2, r3
 80127fc:	2b02      	cmp	r3, #2
 80127fe:	d901      	bls.n	8012804 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8012800:	2303      	movs	r3, #3
 8012802:	e0d5      	b.n	80129b0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8012804:	f7ff fbdd 	bl	8011fc2 <LL_RCC_IsActiveFlag_C2HPRE>
 8012808:	4603      	mov	r3, r0
 801280a:	2b00      	cmp	r3, #0
 801280c:	d0f1      	beq.n	80127f2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012816:	2b00      	cmp	r3, #0
 8012818:	d016      	beq.n	8012848 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	699b      	ldr	r3, [r3, #24]
 801281e:	4618      	mov	r0, r3
 8012820:	f7ff faeb 	bl	8011dfa <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8012824:	f7fb f8aa 	bl	800d97c <HAL_GetTick>
 8012828:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 801282a:	e008      	b.n	801283e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801282c:	f7fb f8a6 	bl	800d97c <HAL_GetTick>
 8012830:	4602      	mov	r2, r0
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	1ad3      	subs	r3, r2, r3
 8012836:	2b02      	cmp	r3, #2
 8012838:	d901      	bls.n	801283e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 801283a:	2303      	movs	r3, #3
 801283c:	e0b8      	b.n	80129b0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 801283e:	f7ff fbd3 	bl	8011fe8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8012842:	4603      	mov	r3, r0
 8012844:	2b00      	cmp	r3, #0
 8012846:	d0f1      	beq.n	801282c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	f003 0304 	and.w	r3, r3, #4
 8012850:	2b00      	cmp	r3, #0
 8012852:	d016      	beq.n	8012882 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	68db      	ldr	r3, [r3, #12]
 8012858:	4618      	mov	r0, r3
 801285a:	f7ff fae5 	bl	8011e28 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801285e:	f7fb f88d 	bl	800d97c <HAL_GetTick>
 8012862:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8012864:	e008      	b.n	8012878 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8012866:	f7fb f889 	bl	800d97c <HAL_GetTick>
 801286a:	4602      	mov	r2, r0
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	1ad3      	subs	r3, r2, r3
 8012870:	2b02      	cmp	r3, #2
 8012872:	d901      	bls.n	8012878 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8012874:	2303      	movs	r3, #3
 8012876:	e09b      	b.n	80129b0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8012878:	f7ff fbc9 	bl	801200e <LL_RCC_IsActiveFlag_PPRE1>
 801287c:	4603      	mov	r3, r0
 801287e:	2b00      	cmp	r3, #0
 8012880:	d0f1      	beq.n	8012866 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	f003 0308 	and.w	r3, r3, #8
 801288a:	2b00      	cmp	r3, #0
 801288c:	d017      	beq.n	80128be <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	691b      	ldr	r3, [r3, #16]
 8012892:	00db      	lsls	r3, r3, #3
 8012894:	4618      	mov	r0, r3
 8012896:	f7ff fadb 	bl	8011e50 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801289a:	f7fb f86f 	bl	800d97c <HAL_GetTick>
 801289e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80128a0:	e008      	b.n	80128b4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80128a2:	f7fb f86b 	bl	800d97c <HAL_GetTick>
 80128a6:	4602      	mov	r2, r0
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	1ad3      	subs	r3, r2, r3
 80128ac:	2b02      	cmp	r3, #2
 80128ae:	d901      	bls.n	80128b4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80128b0:	2303      	movs	r3, #3
 80128b2:	e07d      	b.n	80129b0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80128b4:	f7ff fbbd 	bl	8012032 <LL_RCC_IsActiveFlag_PPRE2>
 80128b8:	4603      	mov	r3, r0
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d0f1      	beq.n	80128a2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	f003 0301 	and.w	r3, r3, #1
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d043      	beq.n	8012952 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	685b      	ldr	r3, [r3, #4]
 80128ce:	2b02      	cmp	r3, #2
 80128d0:	d106      	bne.n	80128e0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80128d2:	f7ff f87b 	bl	80119cc <LL_RCC_HSE_IsReady>
 80128d6:	4603      	mov	r3, r0
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d11e      	bne.n	801291a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80128dc:	2301      	movs	r3, #1
 80128de:	e067      	b.n	80129b0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	685b      	ldr	r3, [r3, #4]
 80128e4:	2b03      	cmp	r3, #3
 80128e6:	d106      	bne.n	80128f6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80128e8:	f7ff fb16 	bl	8011f18 <LL_RCC_PLL_IsReady>
 80128ec:	4603      	mov	r3, r0
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d113      	bne.n	801291a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80128f2:	2301      	movs	r3, #1
 80128f4:	e05c      	b.n	80129b0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	685b      	ldr	r3, [r3, #4]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d106      	bne.n	801290c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80128fe:	f7ff f9e3 	bl	8011cc8 <LL_RCC_MSI_IsReady>
 8012902:	4603      	mov	r3, r0
 8012904:	2b00      	cmp	r3, #0
 8012906:	d108      	bne.n	801291a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8012908:	2301      	movs	r3, #1
 801290a:	e051      	b.n	80129b0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 801290c:	f7ff f88e 	bl	8011a2c <LL_RCC_HSI_IsReady>
 8012910:	4603      	mov	r3, r0
 8012912:	2b00      	cmp	r3, #0
 8012914:	d101      	bne.n	801291a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8012916:	2301      	movs	r3, #1
 8012918:	e04a      	b.n	80129b0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	685b      	ldr	r3, [r3, #4]
 801291e:	4618      	mov	r0, r3
 8012920:	f7ff fa21 	bl	8011d66 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012924:	f7fb f82a 	bl	800d97c <HAL_GetTick>
 8012928:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801292a:	e00a      	b.n	8012942 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801292c:	f7fb f826 	bl	800d97c <HAL_GetTick>
 8012930:	4602      	mov	r2, r0
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	1ad3      	subs	r3, r2, r3
 8012936:	f241 3288 	movw	r2, #5000	; 0x1388
 801293a:	4293      	cmp	r3, r2
 801293c:	d901      	bls.n	8012942 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 801293e:	2303      	movs	r3, #3
 8012940:	e036      	b.n	80129b0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012942:	f7ff fa24 	bl	8011d8e <LL_RCC_GetSysClkSource>
 8012946:	4602      	mov	r2, r0
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	685b      	ldr	r3, [r3, #4]
 801294c:	009b      	lsls	r3, r3, #2
 801294e:	429a      	cmp	r2, r3
 8012950:	d1ec      	bne.n	801292c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8012952:	4b19      	ldr	r3, [pc, #100]	; (80129b8 <HAL_RCC_ClockConfig+0x278>)
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	f003 0307 	and.w	r3, r3, #7
 801295a:	683a      	ldr	r2, [r7, #0]
 801295c:	429a      	cmp	r2, r3
 801295e:	d21b      	bcs.n	8012998 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012960:	4b15      	ldr	r3, [pc, #84]	; (80129b8 <HAL_RCC_ClockConfig+0x278>)
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	f023 0207 	bic.w	r2, r3, #7
 8012968:	4913      	ldr	r1, [pc, #76]	; (80129b8 <HAL_RCC_ClockConfig+0x278>)
 801296a:	683b      	ldr	r3, [r7, #0]
 801296c:	4313      	orrs	r3, r2
 801296e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012970:	f7fb f804 	bl	800d97c <HAL_GetTick>
 8012974:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8012976:	e008      	b.n	801298a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8012978:	f7fb f800 	bl	800d97c <HAL_GetTick>
 801297c:	4602      	mov	r2, r0
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	1ad3      	subs	r3, r2, r3
 8012982:	2b02      	cmp	r3, #2
 8012984:	d901      	bls.n	801298a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8012986:	2303      	movs	r3, #3
 8012988:	e012      	b.n	80129b0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801298a:	4b0b      	ldr	r3, [pc, #44]	; (80129b8 <HAL_RCC_ClockConfig+0x278>)
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	f003 0307 	and.w	r3, r3, #7
 8012992:	683a      	ldr	r2, [r7, #0]
 8012994:	429a      	cmp	r2, r3
 8012996:	d1ef      	bne.n	8012978 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8012998:	f000 f87e 	bl	8012a98 <HAL_RCC_GetHCLKFreq>
 801299c:	4603      	mov	r3, r0
 801299e:	4a07      	ldr	r2, [pc, #28]	; (80129bc <HAL_RCC_ClockConfig+0x27c>)
 80129a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80129a2:	f7fa fff7 	bl	800d994 <HAL_GetTickPrio>
 80129a6:	4603      	mov	r3, r0
 80129a8:	4618      	mov	r0, r3
 80129aa:	f7fa ff99 	bl	800d8e0 <HAL_InitTick>
 80129ae:	4603      	mov	r3, r0
}
 80129b0:	4618      	mov	r0, r3
 80129b2:	3710      	adds	r7, #16
 80129b4:	46bd      	mov	sp, r7
 80129b6:	bd80      	pop	{r7, pc}
 80129b8:	58004000 	.word	0x58004000
 80129bc:	20000008 	.word	0x20000008

080129c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80129c0:	b590      	push	{r4, r7, lr}
 80129c2:	b085      	sub	sp, #20
 80129c4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80129c6:	f7ff f9e2 	bl	8011d8e <LL_RCC_GetSysClkSource>
 80129ca:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d10a      	bne.n	80129e8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80129d2:	f7ff f99e 	bl	8011d12 <LL_RCC_MSI_GetRange>
 80129d6:	4603      	mov	r3, r0
 80129d8:	091b      	lsrs	r3, r3, #4
 80129da:	f003 030f 	and.w	r3, r3, #15
 80129de:	4a2b      	ldr	r2, [pc, #172]	; (8012a8c <HAL_RCC_GetSysClockFreq+0xcc>)
 80129e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80129e4:	60fb      	str	r3, [r7, #12]
 80129e6:	e04b      	b.n	8012a80 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	2b04      	cmp	r3, #4
 80129ec:	d102      	bne.n	80129f4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80129ee:	4b28      	ldr	r3, [pc, #160]	; (8012a90 <HAL_RCC_GetSysClockFreq+0xd0>)
 80129f0:	60fb      	str	r3, [r7, #12]
 80129f2:	e045      	b.n	8012a80 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	2b08      	cmp	r3, #8
 80129f8:	d10a      	bne.n	8012a10 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80129fa:	f7fe ffb7 	bl	801196c <LL_RCC_HSE_IsEnabledDiv2>
 80129fe:	4603      	mov	r3, r0
 8012a00:	2b01      	cmp	r3, #1
 8012a02:	d102      	bne.n	8012a0a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8012a04:	4b22      	ldr	r3, [pc, #136]	; (8012a90 <HAL_RCC_GetSysClockFreq+0xd0>)
 8012a06:	60fb      	str	r3, [r7, #12]
 8012a08:	e03a      	b.n	8012a80 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8012a0a:	4b22      	ldr	r3, [pc, #136]	; (8012a94 <HAL_RCC_GetSysClockFreq+0xd4>)
 8012a0c:	60fb      	str	r3, [r7, #12]
 8012a0e:	e037      	b.n	8012a80 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8012a10:	f7ff fab9 	bl	8011f86 <LL_RCC_PLL_GetMainSource>
 8012a14:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8012a16:	683b      	ldr	r3, [r7, #0]
 8012a18:	2b02      	cmp	r3, #2
 8012a1a:	d003      	beq.n	8012a24 <HAL_RCC_GetSysClockFreq+0x64>
 8012a1c:	683b      	ldr	r3, [r7, #0]
 8012a1e:	2b03      	cmp	r3, #3
 8012a20:	d003      	beq.n	8012a2a <HAL_RCC_GetSysClockFreq+0x6a>
 8012a22:	e00d      	b.n	8012a40 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8012a24:	4b1a      	ldr	r3, [pc, #104]	; (8012a90 <HAL_RCC_GetSysClockFreq+0xd0>)
 8012a26:	60bb      	str	r3, [r7, #8]
        break;
 8012a28:	e015      	b.n	8012a56 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8012a2a:	f7fe ff9f 	bl	801196c <LL_RCC_HSE_IsEnabledDiv2>
 8012a2e:	4603      	mov	r3, r0
 8012a30:	2b01      	cmp	r3, #1
 8012a32:	d102      	bne.n	8012a3a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8012a34:	4b16      	ldr	r3, [pc, #88]	; (8012a90 <HAL_RCC_GetSysClockFreq+0xd0>)
 8012a36:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8012a38:	e00d      	b.n	8012a56 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8012a3a:	4b16      	ldr	r3, [pc, #88]	; (8012a94 <HAL_RCC_GetSysClockFreq+0xd4>)
 8012a3c:	60bb      	str	r3, [r7, #8]
        break;
 8012a3e:	e00a      	b.n	8012a56 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8012a40:	f7ff f967 	bl	8011d12 <LL_RCC_MSI_GetRange>
 8012a44:	4603      	mov	r3, r0
 8012a46:	091b      	lsrs	r3, r3, #4
 8012a48:	f003 030f 	and.w	r3, r3, #15
 8012a4c:	4a0f      	ldr	r2, [pc, #60]	; (8012a8c <HAL_RCC_GetSysClockFreq+0xcc>)
 8012a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012a52:	60bb      	str	r3, [r7, #8]
        break;
 8012a54:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8012a56:	f7ff fa71 	bl	8011f3c <LL_RCC_PLL_GetN>
 8012a5a:	4602      	mov	r2, r0
 8012a5c:	68bb      	ldr	r3, [r7, #8]
 8012a5e:	fb03 f402 	mul.w	r4, r3, r2
 8012a62:	f7ff fa84 	bl	8011f6e <LL_RCC_PLL_GetDivider>
 8012a66:	4603      	mov	r3, r0
 8012a68:	091b      	lsrs	r3, r3, #4
 8012a6a:	3301      	adds	r3, #1
 8012a6c:	fbb4 f4f3 	udiv	r4, r4, r3
 8012a70:	f7ff fa71 	bl	8011f56 <LL_RCC_PLL_GetR>
 8012a74:	4603      	mov	r3, r0
 8012a76:	0f5b      	lsrs	r3, r3, #29
 8012a78:	3301      	adds	r3, #1
 8012a7a:	fbb4 f3f3 	udiv	r3, r4, r3
 8012a7e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8012a80:	68fb      	ldr	r3, [r7, #12]
}
 8012a82:	4618      	mov	r0, r3
 8012a84:	3714      	adds	r7, #20
 8012a86:	46bd      	mov	sp, r7
 8012a88:	bd90      	pop	{r4, r7, pc}
 8012a8a:	bf00      	nop
 8012a8c:	08021478 	.word	0x08021478
 8012a90:	00f42400 	.word	0x00f42400
 8012a94:	01e84800 	.word	0x01e84800

08012a98 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012a98:	b598      	push	{r3, r4, r7, lr}
 8012a9a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8012a9c:	f7ff ff90 	bl	80129c0 <HAL_RCC_GetSysClockFreq>
 8012aa0:	4604      	mov	r4, r0
 8012aa2:	f7ff f9e9 	bl	8011e78 <LL_RCC_GetAHBPrescaler>
 8012aa6:	4603      	mov	r3, r0
 8012aa8:	091b      	lsrs	r3, r3, #4
 8012aaa:	f003 030f 	and.w	r3, r3, #15
 8012aae:	4a03      	ldr	r2, [pc, #12]	; (8012abc <HAL_RCC_GetHCLKFreq+0x24>)
 8012ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012ab4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8012ab8:	4618      	mov	r0, r3
 8012aba:	bd98      	pop	{r3, r4, r7, pc}
 8012abc:	08021418 	.word	0x08021418

08012ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012ac0:	b598      	push	{r3, r4, r7, lr}
 8012ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8012ac4:	f7ff ffe8 	bl	8012a98 <HAL_RCC_GetHCLKFreq>
 8012ac8:	4604      	mov	r4, r0
 8012aca:	f7ff f9ef 	bl	8011eac <LL_RCC_GetAPB1Prescaler>
 8012ace:	4603      	mov	r3, r0
 8012ad0:	0a1b      	lsrs	r3, r3, #8
 8012ad2:	f003 0307 	and.w	r3, r3, #7
 8012ad6:	4a04      	ldr	r2, [pc, #16]	; (8012ae8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8012ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012adc:	f003 031f 	and.w	r3, r3, #31
 8012ae0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	bd98      	pop	{r3, r4, r7, pc}
 8012ae8:	08021458 	.word	0x08021458

08012aec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8012aec:	b598      	push	{r3, r4, r7, lr}
 8012aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8012af0:	f7ff ffd2 	bl	8012a98 <HAL_RCC_GetHCLKFreq>
 8012af4:	4604      	mov	r4, r0
 8012af6:	f7ff f9e5 	bl	8011ec4 <LL_RCC_GetAPB2Prescaler>
 8012afa:	4603      	mov	r3, r0
 8012afc:	0adb      	lsrs	r3, r3, #11
 8012afe:	f003 0307 	and.w	r3, r3, #7
 8012b02:	4a04      	ldr	r2, [pc, #16]	; (8012b14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8012b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012b08:	f003 031f 	and.w	r3, r3, #31
 8012b0c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8012b10:	4618      	mov	r0, r3
 8012b12:	bd98      	pop	{r3, r4, r7, pc}
 8012b14:	08021458 	.word	0x08021458

08012b18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8012b18:	b590      	push	{r4, r7, lr}
 8012b1a:	b085      	sub	sp, #20
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	2bb0      	cmp	r3, #176	; 0xb0
 8012b24:	d903      	bls.n	8012b2e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8012b26:	4b15      	ldr	r3, [pc, #84]	; (8012b7c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8012b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b2a:	60fb      	str	r3, [r7, #12]
 8012b2c:	e007      	b.n	8012b3e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	091b      	lsrs	r3, r3, #4
 8012b32:	f003 030f 	and.w	r3, r3, #15
 8012b36:	4a11      	ldr	r2, [pc, #68]	; (8012b7c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8012b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012b3c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8012b3e:	f7ff f9a7 	bl	8011e90 <LL_RCC_GetAHB4Prescaler>
 8012b42:	4603      	mov	r3, r0
 8012b44:	091b      	lsrs	r3, r3, #4
 8012b46:	f003 030f 	and.w	r3, r3, #15
 8012b4a:	4a0d      	ldr	r2, [pc, #52]	; (8012b80 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8012b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012b50:	68fa      	ldr	r2, [r7, #12]
 8012b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8012b56:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8012b58:	68bb      	ldr	r3, [r7, #8]
 8012b5a:	4a0a      	ldr	r2, [pc, #40]	; (8012b84 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8012b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8012b60:	0c9c      	lsrs	r4, r3, #18
 8012b62:	f7fe f88b 	bl	8010c7c <HAL_PWREx_GetVoltageRange>
 8012b66:	4603      	mov	r3, r0
 8012b68:	4619      	mov	r1, r3
 8012b6a:	4620      	mov	r0, r4
 8012b6c:	f000 f80c 	bl	8012b88 <RCC_SetFlashLatency>
 8012b70:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8012b72:	4618      	mov	r0, r3
 8012b74:	3714      	adds	r7, #20
 8012b76:	46bd      	mov	sp, r7
 8012b78:	bd90      	pop	{r4, r7, pc}
 8012b7a:	bf00      	nop
 8012b7c:	08021478 	.word	0x08021478
 8012b80:	08021418 	.word	0x08021418
 8012b84:	431bde83 	.word	0x431bde83

08012b88 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8012b88:	b590      	push	{r4, r7, lr}
 8012b8a:	b093      	sub	sp, #76	; 0x4c
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	6078      	str	r0, [r7, #4]
 8012b90:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8012b92:	4b37      	ldr	r3, [pc, #220]	; (8012c70 <RCC_SetFlashLatency+0xe8>)
 8012b94:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8012b98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012b9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8012b9e:	4a35      	ldr	r2, [pc, #212]	; (8012c74 <RCC_SetFlashLatency+0xec>)
 8012ba0:	f107 031c 	add.w	r3, r7, #28
 8012ba4:	ca07      	ldmia	r2, {r0, r1, r2}
 8012ba6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8012baa:	4b33      	ldr	r3, [pc, #204]	; (8012c78 <RCC_SetFlashLatency+0xf0>)
 8012bac:	f107 040c 	add.w	r4, r7, #12
 8012bb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012bb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8012bb6:	2300      	movs	r3, #0
 8012bb8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8012bba:	683b      	ldr	r3, [r7, #0]
 8012bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012bc0:	d11a      	bne.n	8012bf8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	643b      	str	r3, [r7, #64]	; 0x40
 8012bc6:	e013      	b.n	8012bf0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8012bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bca:	009b      	lsls	r3, r3, #2
 8012bcc:	3348      	adds	r3, #72	; 0x48
 8012bce:	443b      	add	r3, r7
 8012bd0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8012bd4:	687a      	ldr	r2, [r7, #4]
 8012bd6:	429a      	cmp	r2, r3
 8012bd8:	d807      	bhi.n	8012bea <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8012bda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bdc:	009b      	lsls	r3, r3, #2
 8012bde:	3348      	adds	r3, #72	; 0x48
 8012be0:	443b      	add	r3, r7
 8012be2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8012be6:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8012be8:	e020      	b.n	8012c2c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8012bea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bec:	3301      	adds	r3, #1
 8012bee:	643b      	str	r3, [r7, #64]	; 0x40
 8012bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bf2:	2b03      	cmp	r3, #3
 8012bf4:	d9e8      	bls.n	8012bc8 <RCC_SetFlashLatency+0x40>
 8012bf6:	e019      	b.n	8012c2c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8012bf8:	2300      	movs	r3, #0
 8012bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012bfc:	e013      	b.n	8012c26 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8012bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c00:	009b      	lsls	r3, r3, #2
 8012c02:	3348      	adds	r3, #72	; 0x48
 8012c04:	443b      	add	r3, r7
 8012c06:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8012c0a:	687a      	ldr	r2, [r7, #4]
 8012c0c:	429a      	cmp	r2, r3
 8012c0e:	d807      	bhi.n	8012c20 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8012c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c12:	009b      	lsls	r3, r3, #2
 8012c14:	3348      	adds	r3, #72	; 0x48
 8012c16:	443b      	add	r3, r7
 8012c18:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8012c1c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8012c1e:	e005      	b.n	8012c2c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8012c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c22:	3301      	adds	r3, #1
 8012c24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c28:	2b02      	cmp	r3, #2
 8012c2a:	d9e8      	bls.n	8012bfe <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8012c2c:	4b13      	ldr	r3, [pc, #76]	; (8012c7c <RCC_SetFlashLatency+0xf4>)
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	f023 0207 	bic.w	r2, r3, #7
 8012c34:	4911      	ldr	r1, [pc, #68]	; (8012c7c <RCC_SetFlashLatency+0xf4>)
 8012c36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012c38:	4313      	orrs	r3, r2
 8012c3a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8012c3c:	f7fa fe9e 	bl	800d97c <HAL_GetTick>
 8012c40:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8012c42:	e008      	b.n	8012c56 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8012c44:	f7fa fe9a 	bl	800d97c <HAL_GetTick>
 8012c48:	4602      	mov	r2, r0
 8012c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c4c:	1ad3      	subs	r3, r2, r3
 8012c4e:	2b02      	cmp	r3, #2
 8012c50:	d901      	bls.n	8012c56 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8012c52:	2303      	movs	r3, #3
 8012c54:	e007      	b.n	8012c66 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8012c56:	4b09      	ldr	r3, [pc, #36]	; (8012c7c <RCC_SetFlashLatency+0xf4>)
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	f003 0307 	and.w	r3, r3, #7
 8012c5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012c60:	429a      	cmp	r2, r3
 8012c62:	d1ef      	bne.n	8012c44 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8012c64:	2300      	movs	r3, #0
}
 8012c66:	4618      	mov	r0, r3
 8012c68:	374c      	adds	r7, #76	; 0x4c
 8012c6a:	46bd      	mov	sp, r7
 8012c6c:	bd90      	pop	{r4, r7, pc}
 8012c6e:	bf00      	nop
 8012c70:	08020de8 	.word	0x08020de8
 8012c74:	08020df8 	.word	0x08020df8
 8012c78:	08020e04 	.word	0x08020e04
 8012c7c:	58004000 	.word	0x58004000

08012c80 <LL_RCC_LSE_IsEnabled>:
{
 8012c80:	b480      	push	{r7}
 8012c82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8012c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012c8c:	f003 0301 	and.w	r3, r3, #1
 8012c90:	2b01      	cmp	r3, #1
 8012c92:	d101      	bne.n	8012c98 <LL_RCC_LSE_IsEnabled+0x18>
 8012c94:	2301      	movs	r3, #1
 8012c96:	e000      	b.n	8012c9a <LL_RCC_LSE_IsEnabled+0x1a>
 8012c98:	2300      	movs	r3, #0
}
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	46bd      	mov	sp, r7
 8012c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca2:	4770      	bx	lr

08012ca4 <LL_RCC_LSE_IsReady>:
{
 8012ca4:	b480      	push	{r7}
 8012ca6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8012ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012cb0:	f003 0302 	and.w	r3, r3, #2
 8012cb4:	2b02      	cmp	r3, #2
 8012cb6:	d101      	bne.n	8012cbc <LL_RCC_LSE_IsReady+0x18>
 8012cb8:	2301      	movs	r3, #1
 8012cba:	e000      	b.n	8012cbe <LL_RCC_LSE_IsReady+0x1a>
 8012cbc:	2300      	movs	r3, #0
}
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	46bd      	mov	sp, r7
 8012cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc6:	4770      	bx	lr

08012cc8 <LL_RCC_SetRFWKPClockSource>:
{
 8012cc8:	b480      	push	{r7}
 8012cca:	b083      	sub	sp, #12
 8012ccc:	af00      	add	r7, sp, #0
 8012cce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8012cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012cd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012cd8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8012cdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	4313      	orrs	r3, r2
 8012ce4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8012ce8:	bf00      	nop
 8012cea:	370c      	adds	r7, #12
 8012cec:	46bd      	mov	sp, r7
 8012cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf2:	4770      	bx	lr

08012cf4 <LL_RCC_SetSMPSClockSource>:
{
 8012cf4:	b480      	push	{r7}
 8012cf6:	b083      	sub	sp, #12
 8012cf8:	af00      	add	r7, sp, #0
 8012cfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8012cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d02:	f023 0203 	bic.w	r2, r3, #3
 8012d06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	4313      	orrs	r3, r2
 8012d0e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8012d10:	bf00      	nop
 8012d12:	370c      	adds	r7, #12
 8012d14:	46bd      	mov	sp, r7
 8012d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d1a:	4770      	bx	lr

08012d1c <LL_RCC_SetSMPSPrescaler>:
{
 8012d1c:	b480      	push	{r7}
 8012d1e:	b083      	sub	sp, #12
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8012d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d2a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8012d2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	4313      	orrs	r3, r2
 8012d36:	624b      	str	r3, [r1, #36]	; 0x24
}
 8012d38:	bf00      	nop
 8012d3a:	370c      	adds	r7, #12
 8012d3c:	46bd      	mov	sp, r7
 8012d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d42:	4770      	bx	lr

08012d44 <LL_RCC_SetUSARTClockSource>:
{
 8012d44:	b480      	push	{r7}
 8012d46:	b083      	sub	sp, #12
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8012d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012d54:	f023 0203 	bic.w	r2, r3, #3
 8012d58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	4313      	orrs	r3, r2
 8012d60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8012d64:	bf00      	nop
 8012d66:	370c      	adds	r7, #12
 8012d68:	46bd      	mov	sp, r7
 8012d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d6e:	4770      	bx	lr

08012d70 <LL_RCC_SetLPUARTClockSource>:
{
 8012d70:	b480      	push	{r7}
 8012d72:	b083      	sub	sp, #12
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8012d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012d80:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8012d84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	4313      	orrs	r3, r2
 8012d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8012d90:	bf00      	nop
 8012d92:	370c      	adds	r7, #12
 8012d94:	46bd      	mov	sp, r7
 8012d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d9a:	4770      	bx	lr

08012d9c <LL_RCC_SetI2CClockSource>:
{
 8012d9c:	b480      	push	{r7}
 8012d9e:	b083      	sub	sp, #12
 8012da0:	af00      	add	r7, sp, #0
 8012da2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8012da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012da8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	091b      	lsrs	r3, r3, #4
 8012db0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8012db4:	43db      	mvns	r3, r3
 8012db6:	401a      	ands	r2, r3
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	011b      	lsls	r3, r3, #4
 8012dbc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8012dc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8012dc4:	4313      	orrs	r3, r2
 8012dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8012dca:	bf00      	nop
 8012dcc:	370c      	adds	r7, #12
 8012dce:	46bd      	mov	sp, r7
 8012dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd4:	4770      	bx	lr

08012dd6 <LL_RCC_SetLPTIMClockSource>:
{
 8012dd6:	b480      	push	{r7}
 8012dd8:	b083      	sub	sp, #12
 8012dda:	af00      	add	r7, sp, #0
 8012ddc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8012dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012de2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	0c1b      	lsrs	r3, r3, #16
 8012dea:	041b      	lsls	r3, r3, #16
 8012dec:	43db      	mvns	r3, r3
 8012dee:	401a      	ands	r2, r3
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	041b      	lsls	r3, r3, #16
 8012df4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8012df8:	4313      	orrs	r3, r2
 8012dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8012dfe:	bf00      	nop
 8012e00:	370c      	adds	r7, #12
 8012e02:	46bd      	mov	sp, r7
 8012e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e08:	4770      	bx	lr

08012e0a <LL_RCC_SetSAIClockSource>:
{
 8012e0a:	b480      	push	{r7}
 8012e0c:	b083      	sub	sp, #12
 8012e0e:	af00      	add	r7, sp, #0
 8012e10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8012e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012e1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8012e1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	4313      	orrs	r3, r2
 8012e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8012e2a:	bf00      	nop
 8012e2c:	370c      	adds	r7, #12
 8012e2e:	46bd      	mov	sp, r7
 8012e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e34:	4770      	bx	lr

08012e36 <LL_RCC_SetRNGClockSource>:
{
 8012e36:	b480      	push	{r7}
 8012e38:	b083      	sub	sp, #12
 8012e3a:	af00      	add	r7, sp, #0
 8012e3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8012e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012e46:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8012e4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	4313      	orrs	r3, r2
 8012e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8012e56:	bf00      	nop
 8012e58:	370c      	adds	r7, #12
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e60:	4770      	bx	lr

08012e62 <LL_RCC_SetCLK48ClockSource>:
{
 8012e62:	b480      	push	{r7}
 8012e64:	b083      	sub	sp, #12
 8012e66:	af00      	add	r7, sp, #0
 8012e68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8012e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012e72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8012e76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	4313      	orrs	r3, r2
 8012e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8012e82:	bf00      	nop
 8012e84:	370c      	adds	r7, #12
 8012e86:	46bd      	mov	sp, r7
 8012e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e8c:	4770      	bx	lr

08012e8e <LL_RCC_SetUSBClockSource>:
{
 8012e8e:	b580      	push	{r7, lr}
 8012e90:	b082      	sub	sp, #8
 8012e92:	af00      	add	r7, sp, #0
 8012e94:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8012e96:	6878      	ldr	r0, [r7, #4]
 8012e98:	f7ff ffe3 	bl	8012e62 <LL_RCC_SetCLK48ClockSource>
}
 8012e9c:	bf00      	nop
 8012e9e:	3708      	adds	r7, #8
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	bd80      	pop	{r7, pc}

08012ea4 <LL_RCC_SetADCClockSource>:
{
 8012ea4:	b480      	push	{r7}
 8012ea6:	b083      	sub	sp, #12
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8012eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012eb4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8012eb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	4313      	orrs	r3, r2
 8012ec0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8012ec4:	bf00      	nop
 8012ec6:	370c      	adds	r7, #12
 8012ec8:	46bd      	mov	sp, r7
 8012eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ece:	4770      	bx	lr

08012ed0 <LL_RCC_SetRTCClockSource>:
{
 8012ed0:	b480      	push	{r7}
 8012ed2:	b083      	sub	sp, #12
 8012ed4:	af00      	add	r7, sp, #0
 8012ed6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8012ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012ee0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8012ee4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	4313      	orrs	r3, r2
 8012eec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8012ef0:	bf00      	nop
 8012ef2:	370c      	adds	r7, #12
 8012ef4:	46bd      	mov	sp, r7
 8012ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012efa:	4770      	bx	lr

08012efc <LL_RCC_GetRTCClockSource>:
{
 8012efc:	b480      	push	{r7}
 8012efe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8012f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012f08:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	46bd      	mov	sp, r7
 8012f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f14:	4770      	bx	lr

08012f16 <LL_RCC_ForceBackupDomainReset>:
{
 8012f16:	b480      	push	{r7}
 8012f18:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8012f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012f22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8012f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012f2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8012f2e:	bf00      	nop
 8012f30:	46bd      	mov	sp, r7
 8012f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f36:	4770      	bx	lr

08012f38 <LL_RCC_ReleaseBackupDomainReset>:
{
 8012f38:	b480      	push	{r7}
 8012f3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8012f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012f44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8012f48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012f4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8012f50:	bf00      	nop
 8012f52:	46bd      	mov	sp, r7
 8012f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f58:	4770      	bx	lr

08012f5a <LL_RCC_PLLSAI1_Enable>:
{
 8012f5a:	b480      	push	{r7}
 8012f5c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8012f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8012f68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012f6c:	6013      	str	r3, [r2, #0]
}
 8012f6e:	bf00      	nop
 8012f70:	46bd      	mov	sp, r7
 8012f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f76:	4770      	bx	lr

08012f78 <LL_RCC_PLLSAI1_Disable>:
{
 8012f78:	b480      	push	{r7}
 8012f7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8012f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8012f86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012f8a:	6013      	str	r3, [r2, #0]
}
 8012f8c:	bf00      	nop
 8012f8e:	46bd      	mov	sp, r7
 8012f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f94:	4770      	bx	lr

08012f96 <LL_RCC_PLLSAI1_IsReady>:
{
 8012f96:	b480      	push	{r7}
 8012f98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8012f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012fa4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012fa8:	d101      	bne.n	8012fae <LL_RCC_PLLSAI1_IsReady+0x18>
 8012faa:	2301      	movs	r3, #1
 8012fac:	e000      	b.n	8012fb0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8012fae:	2300      	movs	r3, #0
}
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	46bd      	mov	sp, r7
 8012fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fb8:	4770      	bx	lr

08012fba <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012fba:	b580      	push	{r7, lr}
 8012fbc:	b088      	sub	sp, #32
 8012fbe:	af00      	add	r7, sp, #0
 8012fc0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8012fc2:	2300      	movs	r3, #0
 8012fc4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d034      	beq.n	8013040 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fda:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8012fde:	d021      	beq.n	8013024 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8012fe0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8012fe4:	d81b      	bhi.n	801301e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8012fe6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8012fea:	d01d      	beq.n	8013028 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8012fec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8012ff0:	d815      	bhi.n	801301e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d00b      	beq.n	801300e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8012ff6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012ffa:	d110      	bne.n	801301e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8012ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013000:	68db      	ldr	r3, [r3, #12]
 8013002:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8013006:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801300a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 801300c:	e00d      	b.n	801302a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	3304      	adds	r3, #4
 8013012:	4618      	mov	r0, r3
 8013014:	f000 f947 	bl	80132a6 <RCCEx_PLLSAI1_ConfigNP>
 8013018:	4603      	mov	r3, r0
 801301a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 801301c:	e005      	b.n	801302a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 801301e:	2301      	movs	r3, #1
 8013020:	77fb      	strb	r3, [r7, #31]
        break;
 8013022:	e002      	b.n	801302a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8013024:	bf00      	nop
 8013026:	e000      	b.n	801302a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8013028:	bf00      	nop
    }

    if (ret == HAL_OK)
 801302a:	7ffb      	ldrb	r3, [r7, #31]
 801302c:	2b00      	cmp	r3, #0
 801302e:	d105      	bne.n	801303c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013034:	4618      	mov	r0, r3
 8013036:	f7ff fee8 	bl	8012e0a <LL_RCC_SetSAIClockSource>
 801303a:	e001      	b.n	8013040 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801303c:	7ffb      	ldrb	r3, [r7, #31]
 801303e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013048:	2b00      	cmp	r3, #0
 801304a:	d046      	beq.n	80130da <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 801304c:	f7ff ff56 	bl	8012efc <LL_RCC_GetRTCClockSource>
 8013050:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013056:	69ba      	ldr	r2, [r7, #24]
 8013058:	429a      	cmp	r2, r3
 801305a:	d03c      	beq.n	80130d6 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 801305c:	f7fd fdfe 	bl	8010c5c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8013060:	69bb      	ldr	r3, [r7, #24]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d105      	bne.n	8013072 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801306a:	4618      	mov	r0, r3
 801306c:	f7ff ff30 	bl	8012ed0 <LL_RCC_SetRTCClockSource>
 8013070:	e02e      	b.n	80130d0 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8013072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801307a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 801307c:	f7ff ff4b 	bl	8012f16 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8013080:	f7ff ff5a 	bl	8012f38 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8013084:	697b      	ldr	r3, [r7, #20]
 8013086:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801308e:	4313      	orrs	r3, r2
 8013090:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8013092:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8013096:	697b      	ldr	r3, [r7, #20]
 8013098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 801309c:	f7ff fdf0 	bl	8012c80 <LL_RCC_LSE_IsEnabled>
 80130a0:	4603      	mov	r3, r0
 80130a2:	2b01      	cmp	r3, #1
 80130a4:	d114      	bne.n	80130d0 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80130a6:	f7fa fc69 	bl	800d97c <HAL_GetTick>
 80130aa:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80130ac:	e00b      	b.n	80130c6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80130ae:	f7fa fc65 	bl	800d97c <HAL_GetTick>
 80130b2:	4602      	mov	r2, r0
 80130b4:	693b      	ldr	r3, [r7, #16]
 80130b6:	1ad3      	subs	r3, r2, r3
 80130b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80130bc:	4293      	cmp	r3, r2
 80130be:	d902      	bls.n	80130c6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80130c0:	2303      	movs	r3, #3
 80130c2:	77fb      	strb	r3, [r7, #31]
              break;
 80130c4:	e004      	b.n	80130d0 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80130c6:	f7ff fded 	bl	8012ca4 <LL_RCC_LSE_IsReady>
 80130ca:	4603      	mov	r3, r0
 80130cc:	2b01      	cmp	r3, #1
 80130ce:	d1ee      	bne.n	80130ae <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80130d0:	7ffb      	ldrb	r3, [r7, #31]
 80130d2:	77bb      	strb	r3, [r7, #30]
 80130d4:	e001      	b.n	80130da <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80130d6:	7ffb      	ldrb	r3, [r7, #31]
 80130d8:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	f003 0301 	and.w	r3, r3, #1
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d004      	beq.n	80130f0 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	699b      	ldr	r3, [r3, #24]
 80130ea:	4618      	mov	r0, r3
 80130ec:	f7ff fe2a 	bl	8012d44 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	f003 0302 	and.w	r3, r3, #2
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d004      	beq.n	8013106 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	69db      	ldr	r3, [r3, #28]
 8013100:	4618      	mov	r0, r3
 8013102:	f7ff fe35 	bl	8012d70 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	f003 0310 	and.w	r3, r3, #16
 801310e:	2b00      	cmp	r3, #0
 8013110:	d004      	beq.n	801311c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013116:	4618      	mov	r0, r3
 8013118:	f7ff fe5d 	bl	8012dd6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	f003 0320 	and.w	r3, r3, #32
 8013124:	2b00      	cmp	r3, #0
 8013126:	d004      	beq.n	8013132 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801312c:	4618      	mov	r0, r3
 801312e:	f7ff fe52 	bl	8012dd6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	f003 0304 	and.w	r3, r3, #4
 801313a:	2b00      	cmp	r3, #0
 801313c:	d004      	beq.n	8013148 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	6a1b      	ldr	r3, [r3, #32]
 8013142:	4618      	mov	r0, r3
 8013144:	f7ff fe2a 	bl	8012d9c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	f003 0308 	and.w	r3, r3, #8
 8013150:	2b00      	cmp	r3, #0
 8013152:	d004      	beq.n	801315e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013158:	4618      	mov	r0, r3
 801315a:	f7ff fe1f 	bl	8012d9c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013166:	2b00      	cmp	r3, #0
 8013168:	d022      	beq.n	80131b0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801316e:	4618      	mov	r0, r3
 8013170:	f7ff fe8d 	bl	8012e8e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013178:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801317c:	d107      	bne.n	801318e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 801317e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013182:	68db      	ldr	r3, [r3, #12]
 8013184:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8013188:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801318c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013192:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8013196:	d10b      	bne.n	80131b0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	3304      	adds	r3, #4
 801319c:	4618      	mov	r0, r3
 801319e:	f000 f8dd 	bl	801335c <RCCEx_PLLSAI1_ConfigNQ>
 80131a2:	4603      	mov	r3, r0
 80131a4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80131a6:	7ffb      	ldrb	r3, [r7, #31]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d001      	beq.n	80131b0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80131ac:	7ffb      	ldrb	r3, [r7, #31]
 80131ae:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d02b      	beq.n	8013214 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80131c4:	d008      	beq.n	80131d8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80131ce:	d003      	beq.n	80131d8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d105      	bne.n	80131e4 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131dc:	4618      	mov	r0, r3
 80131de:	f7ff fe2a 	bl	8012e36 <LL_RCC_SetRNGClockSource>
 80131e2:	e00a      	b.n	80131fa <HAL_RCCEx_PeriphCLKConfig+0x240>
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80131ec:	60fb      	str	r3, [r7, #12]
 80131ee:	2000      	movs	r0, #0
 80131f0:	f7ff fe21 	bl	8012e36 <LL_RCC_SetRNGClockSource>
 80131f4:	68f8      	ldr	r0, [r7, #12]
 80131f6:	f7ff fe34 	bl	8012e62 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131fe:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8013202:	d107      	bne.n	8013214 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8013204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013208:	68db      	ldr	r3, [r3, #12]
 801320a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801320e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013212:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801321c:	2b00      	cmp	r3, #0
 801321e:	d022      	beq.n	8013266 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013224:	4618      	mov	r0, r3
 8013226:	f7ff fe3d 	bl	8012ea4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801322e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013232:	d107      	bne.n	8013244 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8013234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013238:	68db      	ldr	r3, [r3, #12]
 801323a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801323e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013242:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013248:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801324c:	d10b      	bne.n	8013266 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	3304      	adds	r3, #4
 8013252:	4618      	mov	r0, r3
 8013254:	f000 f8dd 	bl	8013412 <RCCEx_PLLSAI1_ConfigNR>
 8013258:	4603      	mov	r3, r0
 801325a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 801325c:	7ffb      	ldrb	r3, [r7, #31]
 801325e:	2b00      	cmp	r3, #0
 8013260:	d001      	beq.n	8013266 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8013262:	7ffb      	ldrb	r3, [r7, #31]
 8013264:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801326e:	2b00      	cmp	r3, #0
 8013270:	d004      	beq.n	801327c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013276:	4618      	mov	r0, r3
 8013278:	f7ff fd26 	bl	8012cc8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013284:	2b00      	cmp	r3, #0
 8013286:	d009      	beq.n	801329c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801328c:	4618      	mov	r0, r3
 801328e:	f7ff fd45 	bl	8012d1c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013296:	4618      	mov	r0, r3
 8013298:	f7ff fd2c 	bl	8012cf4 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 801329c:	7fbb      	ldrb	r3, [r7, #30]
}
 801329e:	4618      	mov	r0, r3
 80132a0:	3720      	adds	r7, #32
 80132a2:	46bd      	mov	sp, r7
 80132a4:	bd80      	pop	{r7, pc}

080132a6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80132a6:	b580      	push	{r7, lr}
 80132a8:	b084      	sub	sp, #16
 80132aa:	af00      	add	r7, sp, #0
 80132ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80132ae:	2300      	movs	r3, #0
 80132b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80132b2:	f7ff fe61 	bl	8012f78 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80132b6:	f7fa fb61 	bl	800d97c <HAL_GetTick>
 80132ba:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80132bc:	e009      	b.n	80132d2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80132be:	f7fa fb5d 	bl	800d97c <HAL_GetTick>
 80132c2:	4602      	mov	r2, r0
 80132c4:	68bb      	ldr	r3, [r7, #8]
 80132c6:	1ad3      	subs	r3, r2, r3
 80132c8:	2b02      	cmp	r3, #2
 80132ca:	d902      	bls.n	80132d2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80132cc:	2303      	movs	r3, #3
 80132ce:	73fb      	strb	r3, [r7, #15]
      break;
 80132d0:	e004      	b.n	80132dc <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80132d2:	f7ff fe60 	bl	8012f96 <LL_RCC_PLLSAI1_IsReady>
 80132d6:	4603      	mov	r3, r0
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d1f0      	bne.n	80132be <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80132dc:	7bfb      	ldrb	r3, [r7, #15]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d137      	bne.n	8013352 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80132e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80132e6:	691b      	ldr	r3, [r3, #16]
 80132e8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	021b      	lsls	r3, r3, #8
 80132f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80132f6:	4313      	orrs	r3, r2
 80132f8:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80132fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80132fe:	691b      	ldr	r3, [r3, #16]
 8013300:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	685b      	ldr	r3, [r3, #4]
 8013308:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801330c:	4313      	orrs	r3, r2
 801330e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8013310:	f7ff fe23 	bl	8012f5a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013314:	f7fa fb32 	bl	800d97c <HAL_GetTick>
 8013318:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801331a:	e009      	b.n	8013330 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801331c:	f7fa fb2e 	bl	800d97c <HAL_GetTick>
 8013320:	4602      	mov	r2, r0
 8013322:	68bb      	ldr	r3, [r7, #8]
 8013324:	1ad3      	subs	r3, r2, r3
 8013326:	2b02      	cmp	r3, #2
 8013328:	d902      	bls.n	8013330 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 801332a:	2303      	movs	r3, #3
 801332c:	73fb      	strb	r3, [r7, #15]
        break;
 801332e:	e004      	b.n	801333a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8013330:	f7ff fe31 	bl	8012f96 <LL_RCC_PLLSAI1_IsReady>
 8013334:	4603      	mov	r3, r0
 8013336:	2b01      	cmp	r3, #1
 8013338:	d1f0      	bne.n	801331c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 801333a:	7bfb      	ldrb	r3, [r7, #15]
 801333c:	2b00      	cmp	r3, #0
 801333e:	d108      	bne.n	8013352 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8013340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013344:	691a      	ldr	r2, [r3, #16]
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	691b      	ldr	r3, [r3, #16]
 801334a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801334e:	4313      	orrs	r3, r2
 8013350:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8013352:	7bfb      	ldrb	r3, [r7, #15]
}
 8013354:	4618      	mov	r0, r3
 8013356:	3710      	adds	r7, #16
 8013358:	46bd      	mov	sp, r7
 801335a:	bd80      	pop	{r7, pc}

0801335c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 801335c:	b580      	push	{r7, lr}
 801335e:	b084      	sub	sp, #16
 8013360:	af00      	add	r7, sp, #0
 8013362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8013364:	2300      	movs	r3, #0
 8013366:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8013368:	f7ff fe06 	bl	8012f78 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801336c:	f7fa fb06 	bl	800d97c <HAL_GetTick>
 8013370:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8013372:	e009      	b.n	8013388 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8013374:	f7fa fb02 	bl	800d97c <HAL_GetTick>
 8013378:	4602      	mov	r2, r0
 801337a:	68bb      	ldr	r3, [r7, #8]
 801337c:	1ad3      	subs	r3, r2, r3
 801337e:	2b02      	cmp	r3, #2
 8013380:	d902      	bls.n	8013388 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8013382:	2303      	movs	r3, #3
 8013384:	73fb      	strb	r3, [r7, #15]
      break;
 8013386:	e004      	b.n	8013392 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8013388:	f7ff fe05 	bl	8012f96 <LL_RCC_PLLSAI1_IsReady>
 801338c:	4603      	mov	r3, r0
 801338e:	2b00      	cmp	r3, #0
 8013390:	d1f0      	bne.n	8013374 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8013392:	7bfb      	ldrb	r3, [r7, #15]
 8013394:	2b00      	cmp	r3, #0
 8013396:	d137      	bne.n	8013408 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8013398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801339c:	691b      	ldr	r3, [r3, #16]
 801339e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	021b      	lsls	r3, r3, #8
 80133a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80133ac:	4313      	orrs	r3, r2
 80133ae:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80133b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80133b4:	691b      	ldr	r3, [r3, #16]
 80133b6:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	689b      	ldr	r3, [r3, #8]
 80133be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80133c2:	4313      	orrs	r3, r2
 80133c4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80133c6:	f7ff fdc8 	bl	8012f5a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80133ca:	f7fa fad7 	bl	800d97c <HAL_GetTick>
 80133ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80133d0:	e009      	b.n	80133e6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80133d2:	f7fa fad3 	bl	800d97c <HAL_GetTick>
 80133d6:	4602      	mov	r2, r0
 80133d8:	68bb      	ldr	r3, [r7, #8]
 80133da:	1ad3      	subs	r3, r2, r3
 80133dc:	2b02      	cmp	r3, #2
 80133de:	d902      	bls.n	80133e6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80133e0:	2303      	movs	r3, #3
 80133e2:	73fb      	strb	r3, [r7, #15]
        break;
 80133e4:	e004      	b.n	80133f0 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80133e6:	f7ff fdd6 	bl	8012f96 <LL_RCC_PLLSAI1_IsReady>
 80133ea:	4603      	mov	r3, r0
 80133ec:	2b01      	cmp	r3, #1
 80133ee:	d1f0      	bne.n	80133d2 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80133f0:	7bfb      	ldrb	r3, [r7, #15]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d108      	bne.n	8013408 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80133f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80133fa:	691a      	ldr	r2, [r3, #16]
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	691b      	ldr	r3, [r3, #16]
 8013400:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8013404:	4313      	orrs	r3, r2
 8013406:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8013408:	7bfb      	ldrb	r3, [r7, #15]
}
 801340a:	4618      	mov	r0, r3
 801340c:	3710      	adds	r7, #16
 801340e:	46bd      	mov	sp, r7
 8013410:	bd80      	pop	{r7, pc}

08013412 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8013412:	b580      	push	{r7, lr}
 8013414:	b084      	sub	sp, #16
 8013416:	af00      	add	r7, sp, #0
 8013418:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801341a:	2300      	movs	r3, #0
 801341c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 801341e:	f7ff fdab 	bl	8012f78 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8013422:	f7fa faab 	bl	800d97c <HAL_GetTick>
 8013426:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8013428:	e009      	b.n	801343e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801342a:	f7fa faa7 	bl	800d97c <HAL_GetTick>
 801342e:	4602      	mov	r2, r0
 8013430:	68bb      	ldr	r3, [r7, #8]
 8013432:	1ad3      	subs	r3, r2, r3
 8013434:	2b02      	cmp	r3, #2
 8013436:	d902      	bls.n	801343e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8013438:	2303      	movs	r3, #3
 801343a:	73fb      	strb	r3, [r7, #15]
      break;
 801343c:	e004      	b.n	8013448 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801343e:	f7ff fdaa 	bl	8012f96 <LL_RCC_PLLSAI1_IsReady>
 8013442:	4603      	mov	r3, r0
 8013444:	2b00      	cmp	r3, #0
 8013446:	d1f0      	bne.n	801342a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8013448:	7bfb      	ldrb	r3, [r7, #15]
 801344a:	2b00      	cmp	r3, #0
 801344c:	d137      	bne.n	80134be <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 801344e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013452:	691b      	ldr	r3, [r3, #16]
 8013454:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	021b      	lsls	r3, r3, #8
 801345e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8013462:	4313      	orrs	r3, r2
 8013464:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8013466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801346a:	691b      	ldr	r3, [r3, #16]
 801346c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	68db      	ldr	r3, [r3, #12]
 8013474:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8013478:	4313      	orrs	r3, r2
 801347a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 801347c:	f7ff fd6d 	bl	8012f5a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013480:	f7fa fa7c 	bl	800d97c <HAL_GetTick>
 8013484:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8013486:	e009      	b.n	801349c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8013488:	f7fa fa78 	bl	800d97c <HAL_GetTick>
 801348c:	4602      	mov	r2, r0
 801348e:	68bb      	ldr	r3, [r7, #8]
 8013490:	1ad3      	subs	r3, r2, r3
 8013492:	2b02      	cmp	r3, #2
 8013494:	d902      	bls.n	801349c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8013496:	2303      	movs	r3, #3
 8013498:	73fb      	strb	r3, [r7, #15]
        break;
 801349a:	e004      	b.n	80134a6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801349c:	f7ff fd7b 	bl	8012f96 <LL_RCC_PLLSAI1_IsReady>
 80134a0:	4603      	mov	r3, r0
 80134a2:	2b01      	cmp	r3, #1
 80134a4:	d1f0      	bne.n	8013488 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80134a6:	7bfb      	ldrb	r3, [r7, #15]
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d108      	bne.n	80134be <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80134ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80134b0:	691a      	ldr	r2, [r3, #16]
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	691b      	ldr	r3, [r3, #16]
 80134b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80134ba:	4313      	orrs	r3, r2
 80134bc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80134be:	7bfb      	ldrb	r3, [r7, #15]
}
 80134c0:	4618      	mov	r0, r3
 80134c2:	3710      	adds	r7, #16
 80134c4:	46bd      	mov	sp, r7
 80134c6:	bd80      	pop	{r7, pc}

080134c8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80134c8:	b580      	push	{r7, lr}
 80134ca:	b084      	sub	sp, #16
 80134cc:	af00      	add	r7, sp, #0
 80134ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d101      	bne.n	80134da <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80134d6:	2301      	movs	r3, #1
 80134d8:	e09f      	b.n	801361a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80134e0:	b2db      	uxtb	r3, r3
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d106      	bne.n	80134f4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	2200      	movs	r2, #0
 80134ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80134ee:	6878      	ldr	r0, [r7, #4]
 80134f0:	f7f9 f914 	bl	800c71c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	2202      	movs	r2, #2
 80134f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80134fc:	4b49      	ldr	r3, [pc, #292]	; (8013624 <HAL_RTC_Init+0x15c>)
 80134fe:	68db      	ldr	r3, [r3, #12]
 8013500:	f003 0310 	and.w	r3, r3, #16
 8013504:	2b10      	cmp	r3, #16
 8013506:	d07e      	beq.n	8013606 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	22ca      	movs	r2, #202	; 0xca
 801350e:	625a      	str	r2, [r3, #36]	; 0x24
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	2253      	movs	r2, #83	; 0x53
 8013516:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8013518:	6878      	ldr	r0, [r7, #4]
 801351a:	f000 fac6 	bl	8013aaa <RTC_EnterInitMode>
 801351e:	4603      	mov	r3, r0
 8013520:	2b00      	cmp	r3, #0
 8013522:	d00a      	beq.n	801353a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	22ff      	movs	r2, #255	; 0xff
 801352a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	2204      	movs	r2, #4
 8013530:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8013534:	2301      	movs	r3, #1
 8013536:	73fb      	strb	r3, [r7, #15]
 8013538:	e067      	b.n	801360a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	689b      	ldr	r3, [r3, #8]
 8013540:	687a      	ldr	r2, [r7, #4]
 8013542:	6812      	ldr	r2, [r2, #0]
 8013544:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013548:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801354c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	6899      	ldr	r1, [r3, #8]
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	685a      	ldr	r2, [r3, #4]
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	691b      	ldr	r3, [r3, #16]
 801355c:	431a      	orrs	r2, r3
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	699b      	ldr	r3, [r3, #24]
 8013562:	431a      	orrs	r2, r3
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	430a      	orrs	r2, r1
 801356a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	687a      	ldr	r2, [r7, #4]
 8013572:	68d2      	ldr	r2, [r2, #12]
 8013574:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	6919      	ldr	r1, [r3, #16]
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	689b      	ldr	r3, [r3, #8]
 8013580:	041a      	lsls	r2, r3, #16
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	430a      	orrs	r2, r1
 8013588:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	68da      	ldr	r2, [r3, #12]
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013598:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	f022 0203 	bic.w	r2, r2, #3
 80135a8:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	69da      	ldr	r2, [r3, #28]
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	695b      	ldr	r3, [r3, #20]
 80135b8:	431a      	orrs	r2, r3
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	430a      	orrs	r2, r1
 80135c0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	689b      	ldr	r3, [r3, #8]
 80135c8:	f003 0320 	and.w	r3, r3, #32
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d113      	bne.n	80135f8 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80135d0:	6878      	ldr	r0, [r7, #4]
 80135d2:	f000 fa44 	bl	8013a5e <HAL_RTC_WaitForSynchro>
 80135d6:	4603      	mov	r3, r0
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d00d      	beq.n	80135f8 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	22ff      	movs	r2, #255	; 0xff
 80135e2:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	2204      	movs	r2, #4
 80135e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	2200      	movs	r2, #0
 80135f0:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80135f4:	2301      	movs	r3, #1
 80135f6:	e010      	b.n	801361a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	22ff      	movs	r2, #255	; 0xff
 80135fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8013600:	2300      	movs	r3, #0
 8013602:	73fb      	strb	r3, [r7, #15]
 8013604:	e001      	b.n	801360a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8013606:	2300      	movs	r3, #0
 8013608:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 801360a:	7bfb      	ldrb	r3, [r7, #15]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d103      	bne.n	8013618 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	2201      	movs	r2, #1
 8013614:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8013618:	7bfb      	ldrb	r3, [r7, #15]
}
 801361a:	4618      	mov	r0, r3
 801361c:	3710      	adds	r7, #16
 801361e:	46bd      	mov	sp, r7
 8013620:	bd80      	pop	{r7, pc}
 8013622:	bf00      	nop
 8013624:	40002800 	.word	0x40002800

08013628 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8013628:	b590      	push	{r4, r7, lr}
 801362a:	b087      	sub	sp, #28
 801362c:	af00      	add	r7, sp, #0
 801362e:	60f8      	str	r0, [r7, #12]
 8013630:	60b9      	str	r1, [r7, #8]
 8013632:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	f893 3020 	ldrb.w	r3, [r3, #32]
 801363a:	2b01      	cmp	r3, #1
 801363c:	d101      	bne.n	8013642 <HAL_RTC_SetTime+0x1a>
 801363e:	2302      	movs	r3, #2
 8013640:	e0b2      	b.n	80137a8 <HAL_RTC_SetTime+0x180>
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	2201      	movs	r2, #1
 8013646:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	2202      	movs	r2, #2
 801364e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d126      	bne.n	80136a6 <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	689b      	ldr	r3, [r3, #8]
 801365e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013662:	2b00      	cmp	r3, #0
 8013664:	d102      	bne.n	801366c <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8013666:	68bb      	ldr	r3, [r7, #8]
 8013668:	2200      	movs	r2, #0
 801366a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 801366c:	68bb      	ldr	r3, [r7, #8]
 801366e:	781b      	ldrb	r3, [r3, #0]
 8013670:	4618      	mov	r0, r3
 8013672:	f000 fa44 	bl	8013afe <RTC_ByteToBcd2>
 8013676:	4603      	mov	r3, r0
 8013678:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 801367a:	68bb      	ldr	r3, [r7, #8]
 801367c:	785b      	ldrb	r3, [r3, #1]
 801367e:	4618      	mov	r0, r3
 8013680:	f000 fa3d 	bl	8013afe <RTC_ByteToBcd2>
 8013684:	4603      	mov	r3, r0
 8013686:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8013688:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 801368a:	68bb      	ldr	r3, [r7, #8]
 801368c:	789b      	ldrb	r3, [r3, #2]
 801368e:	4618      	mov	r0, r3
 8013690:	f000 fa35 	bl	8013afe <RTC_ByteToBcd2>
 8013694:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8013696:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 801369a:	68bb      	ldr	r3, [r7, #8]
 801369c:	78db      	ldrb	r3, [r3, #3]
 801369e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80136a0:	4313      	orrs	r3, r2
 80136a2:	617b      	str	r3, [r7, #20]
 80136a4:	e018      	b.n	80136d8 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	689b      	ldr	r3, [r3, #8]
 80136ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d102      	bne.n	80136ba <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80136b4:	68bb      	ldr	r3, [r7, #8]
 80136b6:	2200      	movs	r2, #0
 80136b8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80136ba:	68bb      	ldr	r3, [r7, #8]
 80136bc:	781b      	ldrb	r3, [r3, #0]
 80136be:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80136c0:	68bb      	ldr	r3, [r7, #8]
 80136c2:	785b      	ldrb	r3, [r3, #1]
 80136c4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80136c6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80136c8:	68ba      	ldr	r2, [r7, #8]
 80136ca:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80136cc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80136ce:	68bb      	ldr	r3, [r7, #8]
 80136d0:	78db      	ldrb	r3, [r3, #3]
 80136d2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80136d4:	4313      	orrs	r3, r2
 80136d6:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	22ca      	movs	r2, #202	; 0xca
 80136de:	625a      	str	r2, [r3, #36]	; 0x24
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	2253      	movs	r2, #83	; 0x53
 80136e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80136e8:	68f8      	ldr	r0, [r7, #12]
 80136ea:	f000 f9de 	bl	8013aaa <RTC_EnterInitMode>
 80136ee:	4603      	mov	r3, r0
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d00d      	beq.n	8013710 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	22ff      	movs	r2, #255	; 0xff
 80136fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	2204      	movs	r2, #4
 8013700:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	2200      	movs	r2, #0
 8013708:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 801370c:	2301      	movs	r3, #1
 801370e:	e04b      	b.n	80137a8 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	681a      	ldr	r2, [r3, #0]
 8013714:	697b      	ldr	r3, [r7, #20]
 8013716:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 801371a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 801371e:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	681b      	ldr	r3, [r3, #0]
 8013724:	689a      	ldr	r2, [r3, #8]
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801372e:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	6899      	ldr	r1, [r3, #8]
 8013736:	68bb      	ldr	r3, [r7, #8]
 8013738:	68da      	ldr	r2, [r3, #12]
 801373a:	68bb      	ldr	r3, [r7, #8]
 801373c:	691b      	ldr	r3, [r3, #16]
 801373e:	431a      	orrs	r2, r3
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	430a      	orrs	r2, r1
 8013746:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8013748:	68fb      	ldr	r3, [r7, #12]
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	68da      	ldr	r2, [r3, #12]
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013756:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	689b      	ldr	r3, [r3, #8]
 801375e:	f003 0320 	and.w	r3, r3, #32
 8013762:	2b00      	cmp	r3, #0
 8013764:	d113      	bne.n	801378e <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8013766:	68f8      	ldr	r0, [r7, #12]
 8013768:	f000 f979 	bl	8013a5e <HAL_RTC_WaitForSynchro>
 801376c:	4603      	mov	r3, r0
 801376e:	2b00      	cmp	r3, #0
 8013770:	d00d      	beq.n	801378e <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	22ff      	movs	r2, #255	; 0xff
 8013778:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 801377a:	68fb      	ldr	r3, [r7, #12]
 801377c:	2204      	movs	r2, #4
 801377e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	2200      	movs	r2, #0
 8013786:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 801378a:	2301      	movs	r3, #1
 801378c:	e00c      	b.n	80137a8 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	22ff      	movs	r2, #255	; 0xff
 8013794:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	2201      	movs	r2, #1
 801379a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    __HAL_UNLOCK(hrtc);
 801379e:	68fb      	ldr	r3, [r7, #12]
 80137a0:	2200      	movs	r2, #0
 80137a2:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 80137a6:	2300      	movs	r3, #0
  }
}
 80137a8:	4618      	mov	r0, r3
 80137aa:	371c      	adds	r7, #28
 80137ac:	46bd      	mov	sp, r7
 80137ae:	bd90      	pop	{r4, r7, pc}

080137b0 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80137b0:	b580      	push	{r7, lr}
 80137b2:	b086      	sub	sp, #24
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	60f8      	str	r0, [r7, #12]
 80137b8:	60b9      	str	r1, [r7, #8]
 80137ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80137c2:	68bb      	ldr	r3, [r7, #8]
 80137c4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	691b      	ldr	r3, [r3, #16]
 80137cc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80137d0:	68bb      	ldr	r3, [r7, #8]
 80137d2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80137de:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80137e2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80137e4:	697b      	ldr	r3, [r7, #20]
 80137e6:	0c1b      	lsrs	r3, r3, #16
 80137e8:	b2db      	uxtb	r3, r3
 80137ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80137ee:	b2da      	uxtb	r2, r3
 80137f0:	68bb      	ldr	r3, [r7, #8]
 80137f2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80137f4:	697b      	ldr	r3, [r7, #20]
 80137f6:	0a1b      	lsrs	r3, r3, #8
 80137f8:	b2db      	uxtb	r3, r3
 80137fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80137fe:	b2da      	uxtb	r2, r3
 8013800:	68bb      	ldr	r3, [r7, #8]
 8013802:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8013804:	697b      	ldr	r3, [r7, #20]
 8013806:	b2db      	uxtb	r3, r3
 8013808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801380c:	b2da      	uxtb	r2, r3
 801380e:	68bb      	ldr	r3, [r7, #8]
 8013810:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8013812:	697b      	ldr	r3, [r7, #20]
 8013814:	0c1b      	lsrs	r3, r3, #16
 8013816:	b2db      	uxtb	r3, r3
 8013818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801381c:	b2da      	uxtb	r2, r3
 801381e:	68bb      	ldr	r3, [r7, #8]
 8013820:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	2b00      	cmp	r3, #0
 8013826:	d11a      	bne.n	801385e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8013828:	68bb      	ldr	r3, [r7, #8]
 801382a:	781b      	ldrb	r3, [r3, #0]
 801382c:	4618      	mov	r0, r3
 801382e:	f000 f986 	bl	8013b3e <RTC_Bcd2ToByte>
 8013832:	4603      	mov	r3, r0
 8013834:	461a      	mov	r2, r3
 8013836:	68bb      	ldr	r3, [r7, #8]
 8013838:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801383a:	68bb      	ldr	r3, [r7, #8]
 801383c:	785b      	ldrb	r3, [r3, #1]
 801383e:	4618      	mov	r0, r3
 8013840:	f000 f97d 	bl	8013b3e <RTC_Bcd2ToByte>
 8013844:	4603      	mov	r3, r0
 8013846:	461a      	mov	r2, r3
 8013848:	68bb      	ldr	r3, [r7, #8]
 801384a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 801384c:	68bb      	ldr	r3, [r7, #8]
 801384e:	789b      	ldrb	r3, [r3, #2]
 8013850:	4618      	mov	r0, r3
 8013852:	f000 f974 	bl	8013b3e <RTC_Bcd2ToByte>
 8013856:	4603      	mov	r3, r0
 8013858:	461a      	mov	r2, r3
 801385a:	68bb      	ldr	r3, [r7, #8]
 801385c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 801385e:	2300      	movs	r3, #0
}
 8013860:	4618      	mov	r0, r3
 8013862:	3718      	adds	r7, #24
 8013864:	46bd      	mov	sp, r7
 8013866:	bd80      	pop	{r7, pc}

08013868 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8013868:	b590      	push	{r4, r7, lr}
 801386a:	b087      	sub	sp, #28
 801386c:	af00      	add	r7, sp, #0
 801386e:	60f8      	str	r0, [r7, #12]
 8013870:	60b9      	str	r1, [r7, #8]
 8013872:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	f893 3020 	ldrb.w	r3, [r3, #32]
 801387a:	2b01      	cmp	r3, #1
 801387c:	d101      	bne.n	8013882 <HAL_RTC_SetDate+0x1a>
 801387e:	2302      	movs	r3, #2
 8013880:	e09c      	b.n	80139bc <HAL_RTC_SetDate+0x154>
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	2201      	movs	r2, #1
 8013886:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	2202      	movs	r2, #2
 801388e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	2b00      	cmp	r3, #0
 8013896:	d10e      	bne.n	80138b6 <HAL_RTC_SetDate+0x4e>
 8013898:	68bb      	ldr	r3, [r7, #8]
 801389a:	785b      	ldrb	r3, [r3, #1]
 801389c:	f003 0310 	and.w	r3, r3, #16
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d008      	beq.n	80138b6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80138a4:	68bb      	ldr	r3, [r7, #8]
 80138a6:	785b      	ldrb	r3, [r3, #1]
 80138a8:	f023 0310 	bic.w	r3, r3, #16
 80138ac:	b2db      	uxtb	r3, r3
 80138ae:	330a      	adds	r3, #10
 80138b0:	b2da      	uxtb	r2, r3
 80138b2:	68bb      	ldr	r3, [r7, #8]
 80138b4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d11c      	bne.n	80138f6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80138bc:	68bb      	ldr	r3, [r7, #8]
 80138be:	78db      	ldrb	r3, [r3, #3]
 80138c0:	4618      	mov	r0, r3
 80138c2:	f000 f91c 	bl	8013afe <RTC_ByteToBcd2>
 80138c6:	4603      	mov	r3, r0
 80138c8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80138ca:	68bb      	ldr	r3, [r7, #8]
 80138cc:	785b      	ldrb	r3, [r3, #1]
 80138ce:	4618      	mov	r0, r3
 80138d0:	f000 f915 	bl	8013afe <RTC_ByteToBcd2>
 80138d4:	4603      	mov	r3, r0
 80138d6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80138d8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80138da:	68bb      	ldr	r3, [r7, #8]
 80138dc:	789b      	ldrb	r3, [r3, #2]
 80138de:	4618      	mov	r0, r3
 80138e0:	f000 f90d 	bl	8013afe <RTC_ByteToBcd2>
 80138e4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80138e6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80138ea:	68bb      	ldr	r3, [r7, #8]
 80138ec:	781b      	ldrb	r3, [r3, #0]
 80138ee:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80138f0:	4313      	orrs	r3, r2
 80138f2:	617b      	str	r3, [r7, #20]
 80138f4:	e00e      	b.n	8013914 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80138f6:	68bb      	ldr	r3, [r7, #8]
 80138f8:	78db      	ldrb	r3, [r3, #3]
 80138fa:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80138fc:	68bb      	ldr	r3, [r7, #8]
 80138fe:	785b      	ldrb	r3, [r3, #1]
 8013900:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8013902:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8013904:	68ba      	ldr	r2, [r7, #8]
 8013906:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8013908:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 801390a:	68bb      	ldr	r3, [r7, #8]
 801390c:	781b      	ldrb	r3, [r3, #0]
 801390e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8013910:	4313      	orrs	r3, r2
 8013912:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	22ca      	movs	r2, #202	; 0xca
 801391a:	625a      	str	r2, [r3, #36]	; 0x24
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	2253      	movs	r2, #83	; 0x53
 8013922:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8013924:	68f8      	ldr	r0, [r7, #12]
 8013926:	f000 f8c0 	bl	8013aaa <RTC_EnterInitMode>
 801392a:	4603      	mov	r3, r0
 801392c:	2b00      	cmp	r3, #0
 801392e:	d00d      	beq.n	801394c <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	22ff      	movs	r2, #255	; 0xff
 8013936:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	2204      	movs	r2, #4
 801393c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	2200      	movs	r2, #0
 8013944:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8013948:	2301      	movs	r3, #1
 801394a:	e037      	b.n	80139bc <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	681a      	ldr	r2, [r3, #0]
 8013950:	697b      	ldr	r3, [r7, #20]
 8013952:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013956:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801395a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	68da      	ldr	r2, [r3, #12]
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801396a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	689b      	ldr	r3, [r3, #8]
 8013972:	f003 0320 	and.w	r3, r3, #32
 8013976:	2b00      	cmp	r3, #0
 8013978:	d113      	bne.n	80139a2 <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801397a:	68f8      	ldr	r0, [r7, #12]
 801397c:	f000 f86f 	bl	8013a5e <HAL_RTC_WaitForSynchro>
 8013980:	4603      	mov	r3, r0
 8013982:	2b00      	cmp	r3, #0
 8013984:	d00d      	beq.n	80139a2 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	22ff      	movs	r2, #255	; 0xff
 801398c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	2204      	movs	r2, #4
 8013992:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	2200      	movs	r2, #0
 801399a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 801399e:	2301      	movs	r3, #1
 80139a0:	e00c      	b.n	80139bc <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	22ff      	movs	r2, #255	; 0xff
 80139a8:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	2201      	movs	r2, #1
 80139ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	2200      	movs	r2, #0
 80139b6:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 80139ba:	2300      	movs	r3, #0
  }
}
 80139bc:	4618      	mov	r0, r3
 80139be:	371c      	adds	r7, #28
 80139c0:	46bd      	mov	sp, r7
 80139c2:	bd90      	pop	{r4, r7, pc}

080139c4 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80139c4:	b580      	push	{r7, lr}
 80139c6:	b086      	sub	sp, #24
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	60f8      	str	r0, [r7, #12]
 80139cc:	60b9      	str	r1, [r7, #8]
 80139ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	685b      	ldr	r3, [r3, #4]
 80139d6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80139da:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80139de:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80139e0:	697b      	ldr	r3, [r7, #20]
 80139e2:	0c1b      	lsrs	r3, r3, #16
 80139e4:	b2da      	uxtb	r2, r3
 80139e6:	68bb      	ldr	r3, [r7, #8]
 80139e8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80139ea:	697b      	ldr	r3, [r7, #20]
 80139ec:	0a1b      	lsrs	r3, r3, #8
 80139ee:	b2db      	uxtb	r3, r3
 80139f0:	f003 031f 	and.w	r3, r3, #31
 80139f4:	b2da      	uxtb	r2, r3
 80139f6:	68bb      	ldr	r3, [r7, #8]
 80139f8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80139fa:	697b      	ldr	r3, [r7, #20]
 80139fc:	b2db      	uxtb	r3, r3
 80139fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013a02:	b2da      	uxtb	r2, r3
 8013a04:	68bb      	ldr	r3, [r7, #8]
 8013a06:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8013a08:	697b      	ldr	r3, [r7, #20]
 8013a0a:	0b5b      	lsrs	r3, r3, #13
 8013a0c:	b2db      	uxtb	r3, r3
 8013a0e:	f003 0307 	and.w	r3, r3, #7
 8013a12:	b2da      	uxtb	r2, r3
 8013a14:	68bb      	ldr	r3, [r7, #8]
 8013a16:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d11a      	bne.n	8013a54 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8013a1e:	68bb      	ldr	r3, [r7, #8]
 8013a20:	78db      	ldrb	r3, [r3, #3]
 8013a22:	4618      	mov	r0, r3
 8013a24:	f000 f88b 	bl	8013b3e <RTC_Bcd2ToByte>
 8013a28:	4603      	mov	r3, r0
 8013a2a:	461a      	mov	r2, r3
 8013a2c:	68bb      	ldr	r3, [r7, #8]
 8013a2e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8013a30:	68bb      	ldr	r3, [r7, #8]
 8013a32:	785b      	ldrb	r3, [r3, #1]
 8013a34:	4618      	mov	r0, r3
 8013a36:	f000 f882 	bl	8013b3e <RTC_Bcd2ToByte>
 8013a3a:	4603      	mov	r3, r0
 8013a3c:	461a      	mov	r2, r3
 8013a3e:	68bb      	ldr	r3, [r7, #8]
 8013a40:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8013a42:	68bb      	ldr	r3, [r7, #8]
 8013a44:	789b      	ldrb	r3, [r3, #2]
 8013a46:	4618      	mov	r0, r3
 8013a48:	f000 f879 	bl	8013b3e <RTC_Bcd2ToByte>
 8013a4c:	4603      	mov	r3, r0
 8013a4e:	461a      	mov	r2, r3
 8013a50:	68bb      	ldr	r3, [r7, #8]
 8013a52:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8013a54:	2300      	movs	r3, #0
}
 8013a56:	4618      	mov	r0, r3
 8013a58:	3718      	adds	r7, #24
 8013a5a:	46bd      	mov	sp, r7
 8013a5c:	bd80      	pop	{r7, pc}

08013a5e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8013a5e:	b580      	push	{r7, lr}
 8013a60:	b084      	sub	sp, #16
 8013a62:	af00      	add	r7, sp, #0
 8013a64:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	68da      	ldr	r2, [r3, #12]
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8013a74:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8013a76:	f7f9 ff81 	bl	800d97c <HAL_GetTick>
 8013a7a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8013a7c:	e009      	b.n	8013a92 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8013a7e:	f7f9 ff7d 	bl	800d97c <HAL_GetTick>
 8013a82:	4602      	mov	r2, r0
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	1ad3      	subs	r3, r2, r3
 8013a88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013a8c:	d901      	bls.n	8013a92 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8013a8e:	2303      	movs	r3, #3
 8013a90:	e007      	b.n	8013aa2 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	68db      	ldr	r3, [r3, #12]
 8013a98:	f003 0320 	and.w	r3, r3, #32
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d0ee      	beq.n	8013a7e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8013aa0:	2300      	movs	r3, #0
}
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	3710      	adds	r7, #16
 8013aa6:	46bd      	mov	sp, r7
 8013aa8:	bd80      	pop	{r7, pc}

08013aaa <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8013aaa:	b580      	push	{r7, lr}
 8013aac:	b084      	sub	sp, #16
 8013aae:	af00      	add	r7, sp, #0
 8013ab0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	68db      	ldr	r3, [r3, #12]
 8013ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d119      	bne.n	8013af4 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8013ac8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8013aca:	f7f9 ff57 	bl	800d97c <HAL_GetTick>
 8013ace:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8013ad0:	e009      	b.n	8013ae6 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8013ad2:	f7f9 ff53 	bl	800d97c <HAL_GetTick>
 8013ad6:	4602      	mov	r2, r0
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	1ad3      	subs	r3, r2, r3
 8013adc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013ae0:	d901      	bls.n	8013ae6 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8013ae2:	2303      	movs	r3, #3
 8013ae4:	e007      	b.n	8013af6 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	68db      	ldr	r3, [r3, #12]
 8013aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d0ee      	beq.n	8013ad2 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8013af4:	2300      	movs	r3, #0
}
 8013af6:	4618      	mov	r0, r3
 8013af8:	3710      	adds	r7, #16
 8013afa:	46bd      	mov	sp, r7
 8013afc:	bd80      	pop	{r7, pc}

08013afe <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8013afe:	b480      	push	{r7}
 8013b00:	b085      	sub	sp, #20
 8013b02:	af00      	add	r7, sp, #0
 8013b04:	4603      	mov	r3, r0
 8013b06:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8013b08:	2300      	movs	r3, #0
 8013b0a:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8013b0c:	79fb      	ldrb	r3, [r7, #7]
 8013b0e:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8013b10:	e005      	b.n	8013b1e <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	3301      	adds	r3, #1
 8013b16:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8013b18:	7afb      	ldrb	r3, [r7, #11]
 8013b1a:	3b0a      	subs	r3, #10
 8013b1c:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8013b1e:	7afb      	ldrb	r3, [r7, #11]
 8013b20:	2b09      	cmp	r3, #9
 8013b22:	d8f6      	bhi.n	8013b12 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	b2db      	uxtb	r3, r3
 8013b28:	011b      	lsls	r3, r3, #4
 8013b2a:	b2da      	uxtb	r2, r3
 8013b2c:	7afb      	ldrb	r3, [r7, #11]
 8013b2e:	4313      	orrs	r3, r2
 8013b30:	b2db      	uxtb	r3, r3
}
 8013b32:	4618      	mov	r0, r3
 8013b34:	3714      	adds	r7, #20
 8013b36:	46bd      	mov	sp, r7
 8013b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b3c:	4770      	bx	lr

08013b3e <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8013b3e:	b480      	push	{r7}
 8013b40:	b085      	sub	sp, #20
 8013b42:	af00      	add	r7, sp, #0
 8013b44:	4603      	mov	r3, r0
 8013b46:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8013b48:	79fb      	ldrb	r3, [r7, #7]
 8013b4a:	091b      	lsrs	r3, r3, #4
 8013b4c:	b2db      	uxtb	r3, r3
 8013b4e:	461a      	mov	r2, r3
 8013b50:	4613      	mov	r3, r2
 8013b52:	009b      	lsls	r3, r3, #2
 8013b54:	4413      	add	r3, r2
 8013b56:	005b      	lsls	r3, r3, #1
 8013b58:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	b2da      	uxtb	r2, r3
 8013b5e:	79fb      	ldrb	r3, [r7, #7]
 8013b60:	f003 030f 	and.w	r3, r3, #15
 8013b64:	b2db      	uxtb	r3, r3
 8013b66:	4413      	add	r3, r2
 8013b68:	b2db      	uxtb	r3, r3
}
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	3714      	adds	r7, #20
 8013b6e:	46bd      	mov	sp, r7
 8013b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b74:	4770      	bx	lr
	...

08013b78 <HAL_RTCEx_SetTimeStamp_IT>:
  *               The RTC TimeStamp Pin is per default PC13, but for reasons of
  *               compatibility, this parameter is required.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp_IT(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8013b78:	b480      	push	{r7}
 8013b7a:	b087      	sub	sp, #28
 8013b7c:	af00      	add	r7, sp, #0
 8013b7e:	60f8      	str	r0, [r7, #12]
 8013b80:	60b9      	str	r1, [r7, #8]
 8013b82:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013b8a:	2b01      	cmp	r3, #1
 8013b8c:	d101      	bne.n	8013b92 <HAL_RTCEx_SetTimeStamp_IT+0x1a>
 8013b8e:	2302      	movs	r3, #2
 8013b90:	e05c      	b.n	8013c4c <HAL_RTCEx_SetTimeStamp_IT+0xd4>
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	2201      	movs	r2, #1
 8013b96:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	2202      	movs	r2, #2
 8013b9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	689b      	ldr	r3, [r3, #8]
 8013ba8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013bac:	f023 0308 	bic.w	r3, r3, #8
 8013bb0:	617b      	str	r3, [r7, #20]

  tmpreg |= TimeStampEdge;
 8013bb2:	697a      	ldr	r2, [r7, #20]
 8013bb4:	68bb      	ldr	r3, [r7, #8]
 8013bb6:	4313      	orrs	r3, r2
 8013bb8:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	22ca      	movs	r2, #202	; 0xca
 8013bc0:	625a      	str	r2, [r3, #36]	; 0x24
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	2253      	movs	r2, #83	; 0x53
 8013bc8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the Timestamp Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	68db      	ldr	r3, [r3, #12]
 8013bd0:	b2da      	uxtb	r2, r3
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	f462 6208 	orn	r2, r2, #2176	; 0x880
 8013bda:	60da      	str	r2, [r3, #12]

  /* Clear the Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	681b      	ldr	r3, [r3, #0]
 8013be0:	68db      	ldr	r3, [r3, #12]
 8013be2:	b2da      	uxtb	r2, r3
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	f462 5284 	orn	r2, r2, #4224	; 0x1080
 8013bec:	60da      	str	r2, [r3, #12]

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	697a      	ldr	r2, [r7, #20]
 8013bf4:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	689a      	ldr	r2, [r3, #8]
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013c04:	609a      	str	r2, [r3, #8]

  /* Enable IT timestamp */
  __HAL_RTC_TIMESTAMP_ENABLE_IT(hrtc, RTC_IT_TS);
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	689a      	ldr	r2, [r3, #8]
 8013c0c:	68fb      	ldr	r3, [r7, #12]
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8013c14:	609a      	str	r2, [r3, #8]

  /* RTC timestamp Interrupt Configuration: EXTI configuration */
  __HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_IT();
 8013c16:	4b10      	ldr	r3, [pc, #64]	; (8013c58 <HAL_RTCEx_SetTimeStamp_IT+0xe0>)
 8013c18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013c1c:	4a0e      	ldr	r2, [pc, #56]	; (8013c58 <HAL_RTCEx_SetTimeStamp_IT+0xe0>)
 8013c1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8013c22:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_RISING_EDGE();
 8013c26:	4b0c      	ldr	r3, [pc, #48]	; (8013c58 <HAL_RTCEx_SetTimeStamp_IT+0xe0>)
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	4a0b      	ldr	r2, [pc, #44]	; (8013c58 <HAL_RTCEx_SetTimeStamp_IT+0xe0>)
 8013c2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8013c30:	6013      	str	r3, [r2, #0]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	22ff      	movs	r2, #255	; 0xff
 8013c38:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	2201      	movs	r2, #1
 8013c3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	2200      	movs	r2, #0
 8013c46:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8013c4a:	2300      	movs	r3, #0
}
 8013c4c:	4618      	mov	r0, r3
 8013c4e:	371c      	adds	r7, #28
 8013c50:	46bd      	mov	sp, r7
 8013c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c56:	4770      	bx	lr
 8013c58:	58000800 	.word	0x58000800

08013c5c <HAL_RTCEx_TamperTimeStampIRQHandler>:
  * @brief  Handle TimeStamp interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_TamperTimeStampIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8013c5c:	b580      	push	{r7, lr}
 8013c5e:	b082      	sub	sp, #8
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	6078      	str	r0, [r7, #4]
  /* Get the TimeStamp interrupt source enable status */
  if (__HAL_RTC_TIMESTAMP_GET_IT_SOURCE(hrtc, RTC_IT_TS) != 0U)
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	689b      	ldr	r3, [r3, #8]
 8013c6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d012      	beq.n	8013c98 <HAL_RTCEx_TamperTimeStampIRQHandler+0x3c>
  {
    /* Get the pending status of the TIMESTAMP Interrupt */
    if (__HAL_RTC_TIMESTAMP_GET_FLAG(hrtc, RTC_FLAG_TSF) != 0U)
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	68db      	ldr	r3, [r3, #12]
 8013c78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d00b      	beq.n	8013c98 <HAL_RTCEx_TamperTimeStampIRQHandler+0x3c>
    {
      /* TIMESTAMP callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->TimeStampEventCallback(hrtc);
#else
      HAL_RTCEx_TimeStampEventCallback(hrtc);
 8013c80:	6878      	ldr	r0, [r7, #4]
 8013c82:	f000 f86d 	bl	8013d60 <HAL_RTCEx_TimeStampEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the TIMESTAMP interrupt pending bit */
      __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	68db      	ldr	r3, [r3, #12]
 8013c8c:	b2da      	uxtb	r2, r3
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	f462 6208 	orn	r2, r2, #2176	; 0x880
 8013c96:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RTC_TAMPER1_SUPPORT)
  /* Get the Tamper1 interrupts source enable status */
  if (__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP | RTC_IT_TAMP1) != 0U)
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013c9e:	4b2b      	ldr	r3, [pc, #172]	; (8013d4c <HAL_RTCEx_TamperTimeStampIRQHandler+0xf0>)
 8013ca0:	4013      	ands	r3, r2
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d012      	beq.n	8013ccc <HAL_RTCEx_TamperTimeStampIRQHandler+0x70>
  {
    /* Get the pending status of the Tamper1 Interrupt */
    if (__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP1F) != 0U)
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	68db      	ldr	r3, [r3, #12]
 8013cac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d00b      	beq.n	8013ccc <HAL_RTCEx_TamperTimeStampIRQHandler+0x70>
    {
      /* Tamper1 callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->Tamper1EventCallback(hrtc);
#else
      HAL_RTCEx_Tamper1EventCallback(hrtc);
 8013cb4:	6878      	ldr	r0, [r7, #4]
 8013cb6:	f000 f85d 	bl	8013d74 <HAL_RTCEx_Tamper1EventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Tamper1 interrupt pending bit */
      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP1F);
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	68db      	ldr	r3, [r3, #12]
 8013cc0:	b2da      	uxtb	r2, r3
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	f462 5202 	orn	r2, r2, #8320	; 0x2080
 8013cca:	60da      	str	r2, [r3, #12]
  }
#endif /* RTC_TAMPER1_SUPPORT */


  /* Get the Tamper2 interrupts source enable status */
  if (__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP | RTC_IT_TAMP2) != 0U)
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013cd2:	4b1f      	ldr	r3, [pc, #124]	; (8013d50 <HAL_RTCEx_TamperTimeStampIRQHandler+0xf4>)
 8013cd4:	4013      	ands	r3, r2
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d012      	beq.n	8013d00 <HAL_RTCEx_TamperTimeStampIRQHandler+0xa4>
  {
    /* Get the pending status of the Tamper2 Interrupt */
    if (__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP2F) != 0U)
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	68db      	ldr	r3, [r3, #12]
 8013ce0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d00b      	beq.n	8013d00 <HAL_RTCEx_TamperTimeStampIRQHandler+0xa4>
    {
      /* Tamper2 callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->Tamper2EventCallback(hrtc);
#else
      HAL_RTCEx_Tamper2EventCallback(hrtc);
 8013ce8:	6878      	ldr	r0, [r7, #4]
 8013cea:	f000 f84d 	bl	8013d88 <HAL_RTCEx_Tamper2EventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Tamper2 interrupt pending bit */
      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP2F);
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	68db      	ldr	r3, [r3, #12]
 8013cf4:	b2da      	uxtb	r2, r3
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	f462 4281 	orn	r2, r2, #16512	; 0x4080
 8013cfe:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RTC_TAMPER3_SUPPORT)
  /* Get the Tamper3 interrupts source enable status */
  if (__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP | RTC_IT_TAMP3) != 0U)
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013d06:	4b13      	ldr	r3, [pc, #76]	; (8013d54 <HAL_RTCEx_TamperTimeStampIRQHandler+0xf8>)
 8013d08:	4013      	ands	r3, r2
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d012      	beq.n	8013d34 <HAL_RTCEx_TamperTimeStampIRQHandler+0xd8>
  {
    /* Get the pending status of the Tamper3 Interrupt */
    if (__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP3F) != 0U)
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	68db      	ldr	r3, [r3, #12]
 8013d14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d00b      	beq.n	8013d34 <HAL_RTCEx_TamperTimeStampIRQHandler+0xd8>
    {
      /* Tamper3 callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->Tamper3EventCallback(hrtc);
#else
      HAL_RTCEx_Tamper3EventCallback(hrtc);
 8013d1c:	6878      	ldr	r0, [r7, #4]
 8013d1e:	f000 f83d 	bl	8013d9c <HAL_RTCEx_Tamper3EventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Tamper3 interrupt pending bit */
      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP3F);
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	68db      	ldr	r3, [r3, #12]
 8013d28:	b2d9      	uxtb	r1, r3
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	681a      	ldr	r2, [r3, #0]
 8013d2e:	4b0a      	ldr	r3, [pc, #40]	; (8013d58 <HAL_RTCEx_TamperTimeStampIRQHandler+0xfc>)
 8013d30:	430b      	orrs	r3, r1
 8013d32:	60d3      	str	r3, [r2, #12]
    }
  }
#endif /* RTC_TAMPER3_SUPPORT */

  /* Clear the EXTI's Flag for RTC TimeStamp and Tamper */
  __HAL_RTC_TAMPER_TIMESTAMP_EXTI_CLEAR_FLAG();
 8013d34:	4b09      	ldr	r3, [pc, #36]	; (8013d5c <HAL_RTCEx_TamperTimeStampIRQHandler+0x100>)
 8013d36:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8013d3a:	60da      	str	r2, [r3, #12]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	2201      	movs	r2, #1
 8013d40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8013d44:	bf00      	nop
 8013d46:	3708      	adds	r7, #8
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	bd80      	pop	{r7, pc}
 8013d4c:	00010004 	.word	0x00010004
 8013d50:	00080004 	.word	0x00080004
 8013d54:	00400004 	.word	0x00400004
 8013d58:	ffff7f7f 	.word	0xffff7f7f
 8013d5c:	58000800 	.word	0x58000800

08013d60 <HAL_RTCEx_TimeStampEventCallback>:
  * @brief  TimeStamp callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 8013d60:	b480      	push	{r7}
 8013d62:	b083      	sub	sp, #12
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
  */
}
 8013d68:	bf00      	nop
 8013d6a:	370c      	adds	r7, #12
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d72:	4770      	bx	lr

08013d74 <HAL_RTCEx_Tamper1EventCallback>:
  * @brief  Tamper 1 callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 8013d74:	b480      	push	{r7}
 8013d76:	b083      	sub	sp, #12
 8013d78:	af00      	add	r7, sp, #0
 8013d7a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 8013d7c:	bf00      	nop
 8013d7e:	370c      	adds	r7, #12
 8013d80:	46bd      	mov	sp, r7
 8013d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d86:	4770      	bx	lr

08013d88 <HAL_RTCEx_Tamper2EventCallback>:
  * @brief  Tamper 2 callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)
{
 8013d88:	b480      	push	{r7}
 8013d8a:	b083      	sub	sp, #12
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper2EventCallback could be implemented in the user file
   */
}
 8013d90:	bf00      	nop
 8013d92:	370c      	adds	r7, #12
 8013d94:	46bd      	mov	sp, r7
 8013d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d9a:	4770      	bx	lr

08013d9c <HAL_RTCEx_Tamper3EventCallback>:
  * @brief  Tamper 3 callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper3EventCallback(RTC_HandleTypeDef *hrtc)
{
 8013d9c:	b480      	push	{r7}
 8013d9e:	b083      	sub	sp, #12
 8013da0:	af00      	add	r7, sp, #0
 8013da2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper3EventCallback could be implemented in the user file
   */
}
 8013da4:	bf00      	nop
 8013da6:	370c      	adds	r7, #12
 8013da8:	46bd      	mov	sp, r7
 8013daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dae:	4770      	bx	lr

08013db0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8013db0:	b580      	push	{r7, lr}
 8013db2:	b086      	sub	sp, #24
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	60f8      	str	r0, [r7, #12]
 8013db8:	60b9      	str	r1, [r7, #8]
 8013dba:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013dc2:	2b01      	cmp	r3, #1
 8013dc4:	d101      	bne.n	8013dca <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8013dc6:	2302      	movs	r3, #2
 8013dc8:	e0a8      	b.n	8013f1c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	2201      	movs	r2, #1
 8013dce:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	2202      	movs	r2, #2
 8013dd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	22ca      	movs	r2, #202	; 0xca
 8013de0:	625a      	str	r2, [r3, #36]	; 0x24
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	2253      	movs	r2, #83	; 0x53
 8013de8:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	681b      	ldr	r3, [r3, #0]
 8013dee:	689b      	ldr	r3, [r3, #8]
 8013df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d020      	beq.n	8013e3a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8013df8:	f7f9 fdc0 	bl	800d97c <HAL_GetTick>
 8013dfc:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8013dfe:	e015      	b.n	8013e2c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8013e00:	f7f9 fdbc 	bl	800d97c <HAL_GetTick>
 8013e04:	4602      	mov	r2, r0
 8013e06:	697b      	ldr	r3, [r7, #20]
 8013e08:	1ad3      	subs	r3, r2, r3
 8013e0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013e0e:	d90d      	bls.n	8013e2c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	22ff      	movs	r2, #255	; 0xff
 8013e16:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	2203      	movs	r2, #3
 8013e1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	2200      	movs	r2, #0
 8013e24:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8013e28:	2303      	movs	r3, #3
 8013e2a:	e077      	b.n	8013f1c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	68db      	ldr	r3, [r3, #12]
 8013e32:	f003 0304 	and.w	r3, r3, #4
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d1e2      	bne.n	8013e00 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	689a      	ldr	r2, [r3, #8]
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013e48:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	68db      	ldr	r3, [r3, #12]
 8013e50:	b2da      	uxtb	r2, r3
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8013e5a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8013e5c:	f7f9 fd8e 	bl	800d97c <HAL_GetTick>
 8013e60:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8013e62:	e015      	b.n	8013e90 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8013e64:	f7f9 fd8a 	bl	800d97c <HAL_GetTick>
 8013e68:	4602      	mov	r2, r0
 8013e6a:	697b      	ldr	r3, [r7, #20]
 8013e6c:	1ad3      	subs	r3, r2, r3
 8013e6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013e72:	d90d      	bls.n	8013e90 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	22ff      	movs	r2, #255	; 0xff
 8013e7a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	2203      	movs	r2, #3
 8013e80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	2200      	movs	r2, #0
 8013e88:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8013e8c:	2303      	movs	r3, #3
 8013e8e:	e045      	b.n	8013f1c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	68db      	ldr	r3, [r3, #12]
 8013e96:	f003 0304 	and.w	r3, r3, #4
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d0e2      	beq.n	8013e64 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8013e9e:	68fb      	ldr	r3, [r7, #12]
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	68ba      	ldr	r2, [r7, #8]
 8013ea4:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	689a      	ldr	r2, [r3, #8]
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	f022 0207 	bic.w	r2, r2, #7
 8013eb4:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	6899      	ldr	r1, [r3, #8]
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	687a      	ldr	r2, [r7, #4]
 8013ec2:	430a      	orrs	r2, r1
 8013ec4:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8013ec6:	4b17      	ldr	r3, [pc, #92]	; (8013f24 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8013ec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013ecc:	4a15      	ldr	r2, [pc, #84]	; (8013f24 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8013ece:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013ed2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8013ed6:	4b13      	ldr	r3, [pc, #76]	; (8013f24 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	4a12      	ldr	r2, [pc, #72]	; (8013f24 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8013edc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013ee0:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	689a      	ldr	r2, [r3, #8]
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013ef0:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	689a      	ldr	r2, [r3, #8]
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8013f00:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	681b      	ldr	r3, [r3, #0]
 8013f06:	22ff      	movs	r2, #255	; 0xff
 8013f08:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	2201      	movs	r2, #1
 8013f0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	2200      	movs	r2, #0
 8013f16:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8013f1a:	2300      	movs	r3, #0
}
 8013f1c:	4618      	mov	r0, r3
 8013f1e:	3718      	adds	r7, #24
 8013f20:	46bd      	mov	sp, r7
 8013f22:	bd80      	pop	{r7, pc}
 8013f24:	58000800 	.word	0x58000800

08013f28 <LL_RCC_GetUSARTClockSource>:
{
 8013f28:	b480      	push	{r7}
 8013f2a:	b083      	sub	sp, #12
 8013f2c:	af00      	add	r7, sp, #0
 8013f2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8013f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013f34:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	4013      	ands	r3, r2
}
 8013f3c:	4618      	mov	r0, r3
 8013f3e:	370c      	adds	r7, #12
 8013f40:	46bd      	mov	sp, r7
 8013f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f46:	4770      	bx	lr

08013f48 <LL_RCC_GetLPUARTClockSource>:
{
 8013f48:	b480      	push	{r7}
 8013f4a:	b083      	sub	sp, #12
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8013f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013f54:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	4013      	ands	r3, r2
}
 8013f5c:	4618      	mov	r0, r3
 8013f5e:	370c      	adds	r7, #12
 8013f60:	46bd      	mov	sp, r7
 8013f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f66:	4770      	bx	lr

08013f68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013f68:	b580      	push	{r7, lr}
 8013f6a:	b082      	sub	sp, #8
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d101      	bne.n	8013f7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013f76:	2301      	movs	r3, #1
 8013f78:	e042      	b.n	8014000 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d106      	bne.n	8013f92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	2200      	movs	r2, #0
 8013f88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013f8c:	6878      	ldr	r0, [r7, #4]
 8013f8e:	f7f9 f809 	bl	800cfa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	2224      	movs	r2, #36	; 0x24
 8013f96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	681a      	ldr	r2, [r3, #0]
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	f022 0201 	bic.w	r2, r2, #1
 8013fa8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d002      	beq.n	8013fb8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8013fb2:	6878      	ldr	r0, [r7, #4]
 8013fb4:	f000 fba6 	bl	8014704 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013fb8:	6878      	ldr	r0, [r7, #4]
 8013fba:	f000 f97b 	bl	80142b4 <UART_SetConfig>
 8013fbe:	4603      	mov	r3, r0
 8013fc0:	2b01      	cmp	r3, #1
 8013fc2:	d101      	bne.n	8013fc8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8013fc4:	2301      	movs	r3, #1
 8013fc6:	e01b      	b.n	8014000 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	685a      	ldr	r2, [r3, #4]
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013fd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	689a      	ldr	r2, [r3, #8]
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013fe6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	681a      	ldr	r2, [r3, #0]
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	f042 0201 	orr.w	r2, r2, #1
 8013ff6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8013ff8:	6878      	ldr	r0, [r7, #4]
 8013ffa:	f000 fc25 	bl	8014848 <UART_CheckIdleState>
 8013ffe:	4603      	mov	r3, r0
}
 8014000:	4618      	mov	r0, r3
 8014002:	3708      	adds	r7, #8
 8014004:	46bd      	mov	sp, r7
 8014006:	bd80      	pop	{r7, pc}

08014008 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014008:	b580      	push	{r7, lr}
 801400a:	b08a      	sub	sp, #40	; 0x28
 801400c:	af02      	add	r7, sp, #8
 801400e:	60f8      	str	r0, [r7, #12]
 8014010:	60b9      	str	r1, [r7, #8]
 8014012:	603b      	str	r3, [r7, #0]
 8014014:	4613      	mov	r3, r2
 8014016:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801401e:	2b20      	cmp	r3, #32
 8014020:	d17b      	bne.n	801411a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8014022:	68bb      	ldr	r3, [r7, #8]
 8014024:	2b00      	cmp	r3, #0
 8014026:	d002      	beq.n	801402e <HAL_UART_Transmit+0x26>
 8014028:	88fb      	ldrh	r3, [r7, #6]
 801402a:	2b00      	cmp	r3, #0
 801402c:	d101      	bne.n	8014032 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801402e:	2301      	movs	r3, #1
 8014030:	e074      	b.n	801411c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	2200      	movs	r2, #0
 8014036:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	2221      	movs	r2, #33	; 0x21
 801403e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8014042:	f7f9 fc9b 	bl	800d97c <HAL_GetTick>
 8014046:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	88fa      	ldrh	r2, [r7, #6]
 801404c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	88fa      	ldrh	r2, [r7, #6]
 8014054:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	689b      	ldr	r3, [r3, #8]
 801405c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014060:	d108      	bne.n	8014074 <HAL_UART_Transmit+0x6c>
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	691b      	ldr	r3, [r3, #16]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d104      	bne.n	8014074 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801406a:	2300      	movs	r3, #0
 801406c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801406e:	68bb      	ldr	r3, [r7, #8]
 8014070:	61bb      	str	r3, [r7, #24]
 8014072:	e003      	b.n	801407c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8014074:	68bb      	ldr	r3, [r7, #8]
 8014076:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8014078:	2300      	movs	r3, #0
 801407a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801407c:	e030      	b.n	80140e0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801407e:	683b      	ldr	r3, [r7, #0]
 8014080:	9300      	str	r3, [sp, #0]
 8014082:	697b      	ldr	r3, [r7, #20]
 8014084:	2200      	movs	r2, #0
 8014086:	2180      	movs	r1, #128	; 0x80
 8014088:	68f8      	ldr	r0, [r7, #12]
 801408a:	f000 fc87 	bl	801499c <UART_WaitOnFlagUntilTimeout>
 801408e:	4603      	mov	r3, r0
 8014090:	2b00      	cmp	r3, #0
 8014092:	d005      	beq.n	80140a0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	2220      	movs	r2, #32
 8014098:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 801409c:	2303      	movs	r3, #3
 801409e:	e03d      	b.n	801411c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80140a0:	69fb      	ldr	r3, [r7, #28]
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d10b      	bne.n	80140be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80140a6:	69bb      	ldr	r3, [r7, #24]
 80140a8:	881b      	ldrh	r3, [r3, #0]
 80140aa:	461a      	mov	r2, r3
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	681b      	ldr	r3, [r3, #0]
 80140b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80140b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80140b6:	69bb      	ldr	r3, [r7, #24]
 80140b8:	3302      	adds	r3, #2
 80140ba:	61bb      	str	r3, [r7, #24]
 80140bc:	e007      	b.n	80140ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80140be:	69fb      	ldr	r3, [r7, #28]
 80140c0:	781a      	ldrb	r2, [r3, #0]
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80140c8:	69fb      	ldr	r3, [r7, #28]
 80140ca:	3301      	adds	r3, #1
 80140cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80140d4:	b29b      	uxth	r3, r3
 80140d6:	3b01      	subs	r3, #1
 80140d8:	b29a      	uxth	r2, r3
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80140e6:	b29b      	uxth	r3, r3
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d1c8      	bne.n	801407e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80140ec:	683b      	ldr	r3, [r7, #0]
 80140ee:	9300      	str	r3, [sp, #0]
 80140f0:	697b      	ldr	r3, [r7, #20]
 80140f2:	2200      	movs	r2, #0
 80140f4:	2140      	movs	r1, #64	; 0x40
 80140f6:	68f8      	ldr	r0, [r7, #12]
 80140f8:	f000 fc50 	bl	801499c <UART_WaitOnFlagUntilTimeout>
 80140fc:	4603      	mov	r3, r0
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d005      	beq.n	801410e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	2220      	movs	r2, #32
 8014106:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 801410a:	2303      	movs	r3, #3
 801410c:	e006      	b.n	801411c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	2220      	movs	r2, #32
 8014112:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8014116:	2300      	movs	r3, #0
 8014118:	e000      	b.n	801411c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801411a:	2302      	movs	r3, #2
  }
}
 801411c:	4618      	mov	r0, r3
 801411e:	3720      	adds	r7, #32
 8014120:	46bd      	mov	sp, r7
 8014122:	bd80      	pop	{r7, pc}

08014124 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014124:	b580      	push	{r7, lr}
 8014126:	b08a      	sub	sp, #40	; 0x28
 8014128:	af02      	add	r7, sp, #8
 801412a:	60f8      	str	r0, [r7, #12]
 801412c:	60b9      	str	r1, [r7, #8]
 801412e:	603b      	str	r3, [r7, #0]
 8014130:	4613      	mov	r3, r2
 8014132:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801413a:	2b20      	cmp	r3, #32
 801413c:	f040 80b5 	bne.w	80142aa <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8014140:	68bb      	ldr	r3, [r7, #8]
 8014142:	2b00      	cmp	r3, #0
 8014144:	d002      	beq.n	801414c <HAL_UART_Receive+0x28>
 8014146:	88fb      	ldrh	r3, [r7, #6]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d101      	bne.n	8014150 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 801414c:	2301      	movs	r3, #1
 801414e:	e0ad      	b.n	80142ac <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014150:	68fb      	ldr	r3, [r7, #12]
 8014152:	2200      	movs	r2, #0
 8014154:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8014158:	68fb      	ldr	r3, [r7, #12]
 801415a:	2222      	movs	r2, #34	; 0x22
 801415c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	2200      	movs	r2, #0
 8014164:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8014166:	f7f9 fc09 	bl	800d97c <HAL_GetTick>
 801416a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	88fa      	ldrh	r2, [r7, #6]
 8014170:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8014174:	68fb      	ldr	r3, [r7, #12]
 8014176:	88fa      	ldrh	r2, [r7, #6]
 8014178:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	689b      	ldr	r3, [r3, #8]
 8014180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014184:	d10e      	bne.n	80141a4 <HAL_UART_Receive+0x80>
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	691b      	ldr	r3, [r3, #16]
 801418a:	2b00      	cmp	r3, #0
 801418c:	d105      	bne.n	801419a <HAL_UART_Receive+0x76>
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	f240 12ff 	movw	r2, #511	; 0x1ff
 8014194:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014198:	e02d      	b.n	80141f6 <HAL_UART_Receive+0xd2>
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	22ff      	movs	r2, #255	; 0xff
 801419e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80141a2:	e028      	b.n	80141f6 <HAL_UART_Receive+0xd2>
 80141a4:	68fb      	ldr	r3, [r7, #12]
 80141a6:	689b      	ldr	r3, [r3, #8]
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d10d      	bne.n	80141c8 <HAL_UART_Receive+0xa4>
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	691b      	ldr	r3, [r3, #16]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d104      	bne.n	80141be <HAL_UART_Receive+0x9a>
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	22ff      	movs	r2, #255	; 0xff
 80141b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80141bc:	e01b      	b.n	80141f6 <HAL_UART_Receive+0xd2>
 80141be:	68fb      	ldr	r3, [r7, #12]
 80141c0:	227f      	movs	r2, #127	; 0x7f
 80141c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80141c6:	e016      	b.n	80141f6 <HAL_UART_Receive+0xd2>
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	689b      	ldr	r3, [r3, #8]
 80141cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80141d0:	d10d      	bne.n	80141ee <HAL_UART_Receive+0xca>
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	691b      	ldr	r3, [r3, #16]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d104      	bne.n	80141e4 <HAL_UART_Receive+0xc0>
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	227f      	movs	r2, #127	; 0x7f
 80141de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80141e2:	e008      	b.n	80141f6 <HAL_UART_Receive+0xd2>
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	223f      	movs	r2, #63	; 0x3f
 80141e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80141ec:	e003      	b.n	80141f6 <HAL_UART_Receive+0xd2>
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	2200      	movs	r2, #0
 80141f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80141f6:	68fb      	ldr	r3, [r7, #12]
 80141f8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80141fc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	689b      	ldr	r3, [r3, #8]
 8014202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014206:	d108      	bne.n	801421a <HAL_UART_Receive+0xf6>
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	691b      	ldr	r3, [r3, #16]
 801420c:	2b00      	cmp	r3, #0
 801420e:	d104      	bne.n	801421a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8014210:	2300      	movs	r3, #0
 8014212:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8014214:	68bb      	ldr	r3, [r7, #8]
 8014216:	61bb      	str	r3, [r7, #24]
 8014218:	e003      	b.n	8014222 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 801421a:	68bb      	ldr	r3, [r7, #8]
 801421c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801421e:	2300      	movs	r3, #0
 8014220:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8014222:	e036      	b.n	8014292 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8014224:	683b      	ldr	r3, [r7, #0]
 8014226:	9300      	str	r3, [sp, #0]
 8014228:	697b      	ldr	r3, [r7, #20]
 801422a:	2200      	movs	r2, #0
 801422c:	2120      	movs	r1, #32
 801422e:	68f8      	ldr	r0, [r7, #12]
 8014230:	f000 fbb4 	bl	801499c <UART_WaitOnFlagUntilTimeout>
 8014234:	4603      	mov	r3, r0
 8014236:	2b00      	cmp	r3, #0
 8014238:	d005      	beq.n	8014246 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 801423a:	68fb      	ldr	r3, [r7, #12]
 801423c:	2220      	movs	r2, #32
 801423e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8014242:	2303      	movs	r3, #3
 8014244:	e032      	b.n	80142ac <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8014246:	69fb      	ldr	r3, [r7, #28]
 8014248:	2b00      	cmp	r3, #0
 801424a:	d10c      	bne.n	8014266 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014252:	b29a      	uxth	r2, r3
 8014254:	8a7b      	ldrh	r3, [r7, #18]
 8014256:	4013      	ands	r3, r2
 8014258:	b29a      	uxth	r2, r3
 801425a:	69bb      	ldr	r3, [r7, #24]
 801425c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 801425e:	69bb      	ldr	r3, [r7, #24]
 8014260:	3302      	adds	r3, #2
 8014262:	61bb      	str	r3, [r7, #24]
 8014264:	e00c      	b.n	8014280 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801426c:	b2da      	uxtb	r2, r3
 801426e:	8a7b      	ldrh	r3, [r7, #18]
 8014270:	b2db      	uxtb	r3, r3
 8014272:	4013      	ands	r3, r2
 8014274:	b2da      	uxtb	r2, r3
 8014276:	69fb      	ldr	r3, [r7, #28]
 8014278:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 801427a:	69fb      	ldr	r3, [r7, #28]
 801427c:	3301      	adds	r3, #1
 801427e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014286:	b29b      	uxth	r3, r3
 8014288:	3b01      	subs	r3, #1
 801428a:	b29a      	uxth	r2, r3
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8014292:	68fb      	ldr	r3, [r7, #12]
 8014294:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014298:	b29b      	uxth	r3, r3
 801429a:	2b00      	cmp	r3, #0
 801429c:	d1c2      	bne.n	8014224 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	2220      	movs	r2, #32
 80142a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80142a6:	2300      	movs	r3, #0
 80142a8:	e000      	b.n	80142ac <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80142aa:	2302      	movs	r3, #2
  }
}
 80142ac:	4618      	mov	r0, r3
 80142ae:	3720      	adds	r7, #32
 80142b0:	46bd      	mov	sp, r7
 80142b2:	bd80      	pop	{r7, pc}

080142b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80142b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80142b8:	b08c      	sub	sp, #48	; 0x30
 80142ba:	af00      	add	r7, sp, #0
 80142bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80142be:	2300      	movs	r3, #0
 80142c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80142c4:	697b      	ldr	r3, [r7, #20]
 80142c6:	689a      	ldr	r2, [r3, #8]
 80142c8:	697b      	ldr	r3, [r7, #20]
 80142ca:	691b      	ldr	r3, [r3, #16]
 80142cc:	431a      	orrs	r2, r3
 80142ce:	697b      	ldr	r3, [r7, #20]
 80142d0:	695b      	ldr	r3, [r3, #20]
 80142d2:	431a      	orrs	r2, r3
 80142d4:	697b      	ldr	r3, [r7, #20]
 80142d6:	69db      	ldr	r3, [r3, #28]
 80142d8:	4313      	orrs	r3, r2
 80142da:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80142dc:	697b      	ldr	r3, [r7, #20]
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	681a      	ldr	r2, [r3, #0]
 80142e2:	4baf      	ldr	r3, [pc, #700]	; (80145a0 <UART_SetConfig+0x2ec>)
 80142e4:	4013      	ands	r3, r2
 80142e6:	697a      	ldr	r2, [r7, #20]
 80142e8:	6812      	ldr	r2, [r2, #0]
 80142ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80142ec:	430b      	orrs	r3, r1
 80142ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80142f0:	697b      	ldr	r3, [r7, #20]
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	685b      	ldr	r3, [r3, #4]
 80142f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80142fa:	697b      	ldr	r3, [r7, #20]
 80142fc:	68da      	ldr	r2, [r3, #12]
 80142fe:	697b      	ldr	r3, [r7, #20]
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	430a      	orrs	r2, r1
 8014304:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8014306:	697b      	ldr	r3, [r7, #20]
 8014308:	699b      	ldr	r3, [r3, #24]
 801430a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801430c:	697b      	ldr	r3, [r7, #20]
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	4aa4      	ldr	r2, [pc, #656]	; (80145a4 <UART_SetConfig+0x2f0>)
 8014312:	4293      	cmp	r3, r2
 8014314:	d004      	beq.n	8014320 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8014316:	697b      	ldr	r3, [r7, #20]
 8014318:	6a1b      	ldr	r3, [r3, #32]
 801431a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801431c:	4313      	orrs	r3, r2
 801431e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8014320:	697b      	ldr	r3, [r7, #20]
 8014322:	681b      	ldr	r3, [r3, #0]
 8014324:	689b      	ldr	r3, [r3, #8]
 8014326:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 801432a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 801432e:	697a      	ldr	r2, [r7, #20]
 8014330:	6812      	ldr	r2, [r2, #0]
 8014332:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014334:	430b      	orrs	r3, r1
 8014336:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8014338:	697b      	ldr	r3, [r7, #20]
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801433e:	f023 010f 	bic.w	r1, r3, #15
 8014342:	697b      	ldr	r3, [r7, #20]
 8014344:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014346:	697b      	ldr	r3, [r7, #20]
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	430a      	orrs	r2, r1
 801434c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801434e:	697b      	ldr	r3, [r7, #20]
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	4a95      	ldr	r2, [pc, #596]	; (80145a8 <UART_SetConfig+0x2f4>)
 8014354:	4293      	cmp	r3, r2
 8014356:	d125      	bne.n	80143a4 <UART_SetConfig+0xf0>
 8014358:	2003      	movs	r0, #3
 801435a:	f7ff fde5 	bl	8013f28 <LL_RCC_GetUSARTClockSource>
 801435e:	4603      	mov	r3, r0
 8014360:	2b03      	cmp	r3, #3
 8014362:	d81b      	bhi.n	801439c <UART_SetConfig+0xe8>
 8014364:	a201      	add	r2, pc, #4	; (adr r2, 801436c <UART_SetConfig+0xb8>)
 8014366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801436a:	bf00      	nop
 801436c:	0801437d 	.word	0x0801437d
 8014370:	0801438d 	.word	0x0801438d
 8014374:	08014385 	.word	0x08014385
 8014378:	08014395 	.word	0x08014395
 801437c:	2301      	movs	r3, #1
 801437e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014382:	e042      	b.n	801440a <UART_SetConfig+0x156>
 8014384:	2302      	movs	r3, #2
 8014386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801438a:	e03e      	b.n	801440a <UART_SetConfig+0x156>
 801438c:	2304      	movs	r3, #4
 801438e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014392:	e03a      	b.n	801440a <UART_SetConfig+0x156>
 8014394:	2308      	movs	r3, #8
 8014396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801439a:	e036      	b.n	801440a <UART_SetConfig+0x156>
 801439c:	2310      	movs	r3, #16
 801439e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80143a2:	e032      	b.n	801440a <UART_SetConfig+0x156>
 80143a4:	697b      	ldr	r3, [r7, #20]
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	4a7e      	ldr	r2, [pc, #504]	; (80145a4 <UART_SetConfig+0x2f0>)
 80143aa:	4293      	cmp	r3, r2
 80143ac:	d12a      	bne.n	8014404 <UART_SetConfig+0x150>
 80143ae:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80143b2:	f7ff fdc9 	bl	8013f48 <LL_RCC_GetLPUARTClockSource>
 80143b6:	4603      	mov	r3, r0
 80143b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80143bc:	d01a      	beq.n	80143f4 <UART_SetConfig+0x140>
 80143be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80143c2:	d81b      	bhi.n	80143fc <UART_SetConfig+0x148>
 80143c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80143c8:	d00c      	beq.n	80143e4 <UART_SetConfig+0x130>
 80143ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80143ce:	d815      	bhi.n	80143fc <UART_SetConfig+0x148>
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d003      	beq.n	80143dc <UART_SetConfig+0x128>
 80143d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80143d8:	d008      	beq.n	80143ec <UART_SetConfig+0x138>
 80143da:	e00f      	b.n	80143fc <UART_SetConfig+0x148>
 80143dc:	2300      	movs	r3, #0
 80143de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80143e2:	e012      	b.n	801440a <UART_SetConfig+0x156>
 80143e4:	2302      	movs	r3, #2
 80143e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80143ea:	e00e      	b.n	801440a <UART_SetConfig+0x156>
 80143ec:	2304      	movs	r3, #4
 80143ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80143f2:	e00a      	b.n	801440a <UART_SetConfig+0x156>
 80143f4:	2308      	movs	r3, #8
 80143f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80143fa:	e006      	b.n	801440a <UART_SetConfig+0x156>
 80143fc:	2310      	movs	r3, #16
 80143fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014402:	e002      	b.n	801440a <UART_SetConfig+0x156>
 8014404:	2310      	movs	r3, #16
 8014406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801440a:	697b      	ldr	r3, [r7, #20]
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	4a65      	ldr	r2, [pc, #404]	; (80145a4 <UART_SetConfig+0x2f0>)
 8014410:	4293      	cmp	r3, r2
 8014412:	f040 8097 	bne.w	8014544 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8014416:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801441a:	2b08      	cmp	r3, #8
 801441c:	d823      	bhi.n	8014466 <UART_SetConfig+0x1b2>
 801441e:	a201      	add	r2, pc, #4	; (adr r2, 8014424 <UART_SetConfig+0x170>)
 8014420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014424:	08014449 	.word	0x08014449
 8014428:	08014467 	.word	0x08014467
 801442c:	08014451 	.word	0x08014451
 8014430:	08014467 	.word	0x08014467
 8014434:	08014457 	.word	0x08014457
 8014438:	08014467 	.word	0x08014467
 801443c:	08014467 	.word	0x08014467
 8014440:	08014467 	.word	0x08014467
 8014444:	0801445f 	.word	0x0801445f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014448:	f7fe fb3a 	bl	8012ac0 <HAL_RCC_GetPCLK1Freq>
 801444c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801444e:	e010      	b.n	8014472 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8014450:	4b56      	ldr	r3, [pc, #344]	; (80145ac <UART_SetConfig+0x2f8>)
 8014452:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8014454:	e00d      	b.n	8014472 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8014456:	f7fe fab3 	bl	80129c0 <HAL_RCC_GetSysClockFreq>
 801445a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801445c:	e009      	b.n	8014472 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801445e:	f248 0306 	movw	r3, #32774	; 0x8006
 8014462:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8014464:	e005      	b.n	8014472 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8014466:	2300      	movs	r3, #0
 8014468:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801446a:	2301      	movs	r3, #1
 801446c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8014470:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8014472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014474:	2b00      	cmp	r3, #0
 8014476:	f000 812b 	beq.w	80146d0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801447a:	697b      	ldr	r3, [r7, #20]
 801447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801447e:	4a4c      	ldr	r2, [pc, #304]	; (80145b0 <UART_SetConfig+0x2fc>)
 8014480:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014484:	461a      	mov	r2, r3
 8014486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014488:	fbb3 f3f2 	udiv	r3, r3, r2
 801448c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801448e:	697b      	ldr	r3, [r7, #20]
 8014490:	685a      	ldr	r2, [r3, #4]
 8014492:	4613      	mov	r3, r2
 8014494:	005b      	lsls	r3, r3, #1
 8014496:	4413      	add	r3, r2
 8014498:	69ba      	ldr	r2, [r7, #24]
 801449a:	429a      	cmp	r2, r3
 801449c:	d305      	bcc.n	80144aa <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801449e:	697b      	ldr	r3, [r7, #20]
 80144a0:	685b      	ldr	r3, [r3, #4]
 80144a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80144a4:	69ba      	ldr	r2, [r7, #24]
 80144a6:	429a      	cmp	r2, r3
 80144a8:	d903      	bls.n	80144b2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80144aa:	2301      	movs	r3, #1
 80144ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80144b0:	e10e      	b.n	80146d0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80144b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144b4:	2200      	movs	r2, #0
 80144b6:	60bb      	str	r3, [r7, #8]
 80144b8:	60fa      	str	r2, [r7, #12]
 80144ba:	697b      	ldr	r3, [r7, #20]
 80144bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144be:	4a3c      	ldr	r2, [pc, #240]	; (80145b0 <UART_SetConfig+0x2fc>)
 80144c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80144c4:	b29b      	uxth	r3, r3
 80144c6:	2200      	movs	r2, #0
 80144c8:	603b      	str	r3, [r7, #0]
 80144ca:	607a      	str	r2, [r7, #4]
 80144cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80144d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80144d4:	f7f4 fde8 	bl	80090a8 <__aeabi_uldivmod>
 80144d8:	4602      	mov	r2, r0
 80144da:	460b      	mov	r3, r1
 80144dc:	4610      	mov	r0, r2
 80144de:	4619      	mov	r1, r3
 80144e0:	f04f 0200 	mov.w	r2, #0
 80144e4:	f04f 0300 	mov.w	r3, #0
 80144e8:	020b      	lsls	r3, r1, #8
 80144ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80144ee:	0202      	lsls	r2, r0, #8
 80144f0:	6979      	ldr	r1, [r7, #20]
 80144f2:	6849      	ldr	r1, [r1, #4]
 80144f4:	0849      	lsrs	r1, r1, #1
 80144f6:	2000      	movs	r0, #0
 80144f8:	460c      	mov	r4, r1
 80144fa:	4605      	mov	r5, r0
 80144fc:	eb12 0804 	adds.w	r8, r2, r4
 8014500:	eb43 0905 	adc.w	r9, r3, r5
 8014504:	697b      	ldr	r3, [r7, #20]
 8014506:	685b      	ldr	r3, [r3, #4]
 8014508:	2200      	movs	r2, #0
 801450a:	469a      	mov	sl, r3
 801450c:	4693      	mov	fp, r2
 801450e:	4652      	mov	r2, sl
 8014510:	465b      	mov	r3, fp
 8014512:	4640      	mov	r0, r8
 8014514:	4649      	mov	r1, r9
 8014516:	f7f4 fdc7 	bl	80090a8 <__aeabi_uldivmod>
 801451a:	4602      	mov	r2, r0
 801451c:	460b      	mov	r3, r1
 801451e:	4613      	mov	r3, r2
 8014520:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8014522:	6a3b      	ldr	r3, [r7, #32]
 8014524:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014528:	d308      	bcc.n	801453c <UART_SetConfig+0x288>
 801452a:	6a3b      	ldr	r3, [r7, #32]
 801452c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014530:	d204      	bcs.n	801453c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8014532:	697b      	ldr	r3, [r7, #20]
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	6a3a      	ldr	r2, [r7, #32]
 8014538:	60da      	str	r2, [r3, #12]
 801453a:	e0c9      	b.n	80146d0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 801453c:	2301      	movs	r3, #1
 801453e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8014542:	e0c5      	b.n	80146d0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014544:	697b      	ldr	r3, [r7, #20]
 8014546:	69db      	ldr	r3, [r3, #28]
 8014548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801454c:	d16d      	bne.n	801462a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 801454e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014552:	3b01      	subs	r3, #1
 8014554:	2b07      	cmp	r3, #7
 8014556:	d82d      	bhi.n	80145b4 <UART_SetConfig+0x300>
 8014558:	a201      	add	r2, pc, #4	; (adr r2, 8014560 <UART_SetConfig+0x2ac>)
 801455a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801455e:	bf00      	nop
 8014560:	08014581 	.word	0x08014581
 8014564:	08014589 	.word	0x08014589
 8014568:	080145b5 	.word	0x080145b5
 801456c:	0801458f 	.word	0x0801458f
 8014570:	080145b5 	.word	0x080145b5
 8014574:	080145b5 	.word	0x080145b5
 8014578:	080145b5 	.word	0x080145b5
 801457c:	08014597 	.word	0x08014597
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014580:	f7fe fab4 	bl	8012aec <HAL_RCC_GetPCLK2Freq>
 8014584:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8014586:	e01b      	b.n	80145c0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8014588:	4b08      	ldr	r3, [pc, #32]	; (80145ac <UART_SetConfig+0x2f8>)
 801458a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801458c:	e018      	b.n	80145c0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801458e:	f7fe fa17 	bl	80129c0 <HAL_RCC_GetSysClockFreq>
 8014592:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8014594:	e014      	b.n	80145c0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014596:	f248 0306 	movw	r3, #32774	; 0x8006
 801459a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801459c:	e010      	b.n	80145c0 <UART_SetConfig+0x30c>
 801459e:	bf00      	nop
 80145a0:	cfff69f3 	.word	0xcfff69f3
 80145a4:	40008000 	.word	0x40008000
 80145a8:	40013800 	.word	0x40013800
 80145ac:	00f42400 	.word	0x00f42400
 80145b0:	080214b8 	.word	0x080214b8
      default:
        pclk = 0U;
 80145b4:	2300      	movs	r3, #0
 80145b6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80145b8:	2301      	movs	r3, #1
 80145ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80145be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80145c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	f000 8084 	beq.w	80146d0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80145c8:	697b      	ldr	r3, [r7, #20]
 80145ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145cc:	4a4b      	ldr	r2, [pc, #300]	; (80146fc <UART_SetConfig+0x448>)
 80145ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80145d2:	461a      	mov	r2, r3
 80145d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80145da:	005a      	lsls	r2, r3, #1
 80145dc:	697b      	ldr	r3, [r7, #20]
 80145de:	685b      	ldr	r3, [r3, #4]
 80145e0:	085b      	lsrs	r3, r3, #1
 80145e2:	441a      	add	r2, r3
 80145e4:	697b      	ldr	r3, [r7, #20]
 80145e6:	685b      	ldr	r3, [r3, #4]
 80145e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80145ec:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80145ee:	6a3b      	ldr	r3, [r7, #32]
 80145f0:	2b0f      	cmp	r3, #15
 80145f2:	d916      	bls.n	8014622 <UART_SetConfig+0x36e>
 80145f4:	6a3b      	ldr	r3, [r7, #32]
 80145f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80145fa:	d212      	bcs.n	8014622 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80145fc:	6a3b      	ldr	r3, [r7, #32]
 80145fe:	b29b      	uxth	r3, r3
 8014600:	f023 030f 	bic.w	r3, r3, #15
 8014604:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8014606:	6a3b      	ldr	r3, [r7, #32]
 8014608:	085b      	lsrs	r3, r3, #1
 801460a:	b29b      	uxth	r3, r3
 801460c:	f003 0307 	and.w	r3, r3, #7
 8014610:	b29a      	uxth	r2, r3
 8014612:	8bfb      	ldrh	r3, [r7, #30]
 8014614:	4313      	orrs	r3, r2
 8014616:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8014618:	697b      	ldr	r3, [r7, #20]
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	8bfa      	ldrh	r2, [r7, #30]
 801461e:	60da      	str	r2, [r3, #12]
 8014620:	e056      	b.n	80146d0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8014622:	2301      	movs	r3, #1
 8014624:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8014628:	e052      	b.n	80146d0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 801462a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801462e:	3b01      	subs	r3, #1
 8014630:	2b07      	cmp	r3, #7
 8014632:	d822      	bhi.n	801467a <UART_SetConfig+0x3c6>
 8014634:	a201      	add	r2, pc, #4	; (adr r2, 801463c <UART_SetConfig+0x388>)
 8014636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801463a:	bf00      	nop
 801463c:	0801465d 	.word	0x0801465d
 8014640:	08014665 	.word	0x08014665
 8014644:	0801467b 	.word	0x0801467b
 8014648:	0801466b 	.word	0x0801466b
 801464c:	0801467b 	.word	0x0801467b
 8014650:	0801467b 	.word	0x0801467b
 8014654:	0801467b 	.word	0x0801467b
 8014658:	08014673 	.word	0x08014673
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801465c:	f7fe fa46 	bl	8012aec <HAL_RCC_GetPCLK2Freq>
 8014660:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8014662:	e010      	b.n	8014686 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8014664:	4b26      	ldr	r3, [pc, #152]	; (8014700 <UART_SetConfig+0x44c>)
 8014666:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8014668:	e00d      	b.n	8014686 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801466a:	f7fe f9a9 	bl	80129c0 <HAL_RCC_GetSysClockFreq>
 801466e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8014670:	e009      	b.n	8014686 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014672:	f248 0306 	movw	r3, #32774	; 0x8006
 8014676:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8014678:	e005      	b.n	8014686 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 801467a:	2300      	movs	r3, #0
 801467c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801467e:	2301      	movs	r3, #1
 8014680:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8014684:	bf00      	nop
    }

    if (pclk != 0U)
 8014686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014688:	2b00      	cmp	r3, #0
 801468a:	d021      	beq.n	80146d0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801468c:	697b      	ldr	r3, [r7, #20]
 801468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014690:	4a1a      	ldr	r2, [pc, #104]	; (80146fc <UART_SetConfig+0x448>)
 8014692:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014696:	461a      	mov	r2, r3
 8014698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801469a:	fbb3 f2f2 	udiv	r2, r3, r2
 801469e:	697b      	ldr	r3, [r7, #20]
 80146a0:	685b      	ldr	r3, [r3, #4]
 80146a2:	085b      	lsrs	r3, r3, #1
 80146a4:	441a      	add	r2, r3
 80146a6:	697b      	ldr	r3, [r7, #20]
 80146a8:	685b      	ldr	r3, [r3, #4]
 80146aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80146ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80146b0:	6a3b      	ldr	r3, [r7, #32]
 80146b2:	2b0f      	cmp	r3, #15
 80146b4:	d909      	bls.n	80146ca <UART_SetConfig+0x416>
 80146b6:	6a3b      	ldr	r3, [r7, #32]
 80146b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80146bc:	d205      	bcs.n	80146ca <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80146be:	6a3b      	ldr	r3, [r7, #32]
 80146c0:	b29a      	uxth	r2, r3
 80146c2:	697b      	ldr	r3, [r7, #20]
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	60da      	str	r2, [r3, #12]
 80146c8:	e002      	b.n	80146d0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80146ca:	2301      	movs	r3, #1
 80146cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80146d0:	697b      	ldr	r3, [r7, #20]
 80146d2:	2201      	movs	r2, #1
 80146d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80146d8:	697b      	ldr	r3, [r7, #20]
 80146da:	2201      	movs	r2, #1
 80146dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80146e0:	697b      	ldr	r3, [r7, #20]
 80146e2:	2200      	movs	r2, #0
 80146e4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80146e6:	697b      	ldr	r3, [r7, #20]
 80146e8:	2200      	movs	r2, #0
 80146ea:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80146ec:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80146f0:	4618      	mov	r0, r3
 80146f2:	3730      	adds	r7, #48	; 0x30
 80146f4:	46bd      	mov	sp, r7
 80146f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80146fa:	bf00      	nop
 80146fc:	080214b8 	.word	0x080214b8
 8014700:	00f42400 	.word	0x00f42400

08014704 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8014704:	b480      	push	{r7}
 8014706:	b083      	sub	sp, #12
 8014708:	af00      	add	r7, sp, #0
 801470a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014710:	f003 0308 	and.w	r3, r3, #8
 8014714:	2b00      	cmp	r3, #0
 8014716:	d00a      	beq.n	801472e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	685b      	ldr	r3, [r3, #4]
 801471e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	430a      	orrs	r2, r1
 801472c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014732:	f003 0301 	and.w	r3, r3, #1
 8014736:	2b00      	cmp	r3, #0
 8014738:	d00a      	beq.n	8014750 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	685b      	ldr	r3, [r3, #4]
 8014740:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	430a      	orrs	r2, r1
 801474e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014754:	f003 0302 	and.w	r3, r3, #2
 8014758:	2b00      	cmp	r3, #0
 801475a:	d00a      	beq.n	8014772 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	685b      	ldr	r3, [r3, #4]
 8014762:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	430a      	orrs	r2, r1
 8014770:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014776:	f003 0304 	and.w	r3, r3, #4
 801477a:	2b00      	cmp	r3, #0
 801477c:	d00a      	beq.n	8014794 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	685b      	ldr	r3, [r3, #4]
 8014784:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	430a      	orrs	r2, r1
 8014792:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014798:	f003 0310 	and.w	r3, r3, #16
 801479c:	2b00      	cmp	r3, #0
 801479e:	d00a      	beq.n	80147b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	689b      	ldr	r3, [r3, #8]
 80147a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	430a      	orrs	r2, r1
 80147b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80147ba:	f003 0320 	and.w	r3, r3, #32
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d00a      	beq.n	80147d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	689b      	ldr	r3, [r3, #8]
 80147c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	430a      	orrs	r2, r1
 80147d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80147dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d01a      	beq.n	801481a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	685b      	ldr	r3, [r3, #4]
 80147ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	430a      	orrs	r2, r1
 80147f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80147fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014802:	d10a      	bne.n	801481a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	685b      	ldr	r3, [r3, #4]
 801480a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	430a      	orrs	r2, r1
 8014818:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801481e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014822:	2b00      	cmp	r3, #0
 8014824:	d00a      	beq.n	801483c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	685b      	ldr	r3, [r3, #4]
 801482c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	430a      	orrs	r2, r1
 801483a:	605a      	str	r2, [r3, #4]
  }
}
 801483c:	bf00      	nop
 801483e:	370c      	adds	r7, #12
 8014840:	46bd      	mov	sp, r7
 8014842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014846:	4770      	bx	lr

08014848 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8014848:	b580      	push	{r7, lr}
 801484a:	b098      	sub	sp, #96	; 0x60
 801484c:	af02      	add	r7, sp, #8
 801484e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	2200      	movs	r2, #0
 8014854:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8014858:	f7f9 f890 	bl	800d97c <HAL_GetTick>
 801485c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	681b      	ldr	r3, [r3, #0]
 8014862:	681b      	ldr	r3, [r3, #0]
 8014864:	f003 0308 	and.w	r3, r3, #8
 8014868:	2b08      	cmp	r3, #8
 801486a:	d12f      	bne.n	80148cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801486c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8014870:	9300      	str	r3, [sp, #0]
 8014872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014874:	2200      	movs	r2, #0
 8014876:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801487a:	6878      	ldr	r0, [r7, #4]
 801487c:	f000 f88e 	bl	801499c <UART_WaitOnFlagUntilTimeout>
 8014880:	4603      	mov	r3, r0
 8014882:	2b00      	cmp	r3, #0
 8014884:	d022      	beq.n	80148cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801488c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801488e:	e853 3f00 	ldrex	r3, [r3]
 8014892:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8014894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014896:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801489a:	653b      	str	r3, [r7, #80]	; 0x50
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	461a      	mov	r2, r3
 80148a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80148a4:	647b      	str	r3, [r7, #68]	; 0x44
 80148a6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80148a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80148aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80148ac:	e841 2300 	strex	r3, r2, [r1]
 80148b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80148b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d1e6      	bne.n	8014886 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	2220      	movs	r2, #32
 80148bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	2200      	movs	r2, #0
 80148c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80148c8:	2303      	movs	r3, #3
 80148ca:	e063      	b.n	8014994 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	681b      	ldr	r3, [r3, #0]
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	f003 0304 	and.w	r3, r3, #4
 80148d6:	2b04      	cmp	r3, #4
 80148d8:	d149      	bne.n	801496e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80148da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80148de:	9300      	str	r3, [sp, #0]
 80148e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80148e2:	2200      	movs	r2, #0
 80148e4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80148e8:	6878      	ldr	r0, [r7, #4]
 80148ea:	f000 f857 	bl	801499c <UART_WaitOnFlagUntilTimeout>
 80148ee:	4603      	mov	r3, r0
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d03c      	beq.n	801496e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80148fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148fc:	e853 3f00 	ldrex	r3, [r3]
 8014900:	623b      	str	r3, [r7, #32]
   return(result);
 8014902:	6a3b      	ldr	r3, [r7, #32]
 8014904:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014908:	64fb      	str	r3, [r7, #76]	; 0x4c
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	461a      	mov	r2, r3
 8014910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014912:	633b      	str	r3, [r7, #48]	; 0x30
 8014914:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014916:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801491a:	e841 2300 	strex	r3, r2, [r1]
 801491e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014922:	2b00      	cmp	r3, #0
 8014924:	d1e6      	bne.n	80148f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	3308      	adds	r3, #8
 801492c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801492e:	693b      	ldr	r3, [r7, #16]
 8014930:	e853 3f00 	ldrex	r3, [r3]
 8014934:	60fb      	str	r3, [r7, #12]
   return(result);
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	f023 0301 	bic.w	r3, r3, #1
 801493c:	64bb      	str	r3, [r7, #72]	; 0x48
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	3308      	adds	r3, #8
 8014944:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014946:	61fa      	str	r2, [r7, #28]
 8014948:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801494a:	69b9      	ldr	r1, [r7, #24]
 801494c:	69fa      	ldr	r2, [r7, #28]
 801494e:	e841 2300 	strex	r3, r2, [r1]
 8014952:	617b      	str	r3, [r7, #20]
   return(result);
 8014954:	697b      	ldr	r3, [r7, #20]
 8014956:	2b00      	cmp	r3, #0
 8014958:	d1e5      	bne.n	8014926 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	2220      	movs	r2, #32
 801495e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	2200      	movs	r2, #0
 8014966:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801496a:	2303      	movs	r3, #3
 801496c:	e012      	b.n	8014994 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	2220      	movs	r2, #32
 8014972:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	2220      	movs	r2, #32
 801497a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	2200      	movs	r2, #0
 8014982:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	2200      	movs	r2, #0
 8014988:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	2200      	movs	r2, #0
 801498e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8014992:	2300      	movs	r3, #0
}
 8014994:	4618      	mov	r0, r3
 8014996:	3758      	adds	r7, #88	; 0x58
 8014998:	46bd      	mov	sp, r7
 801499a:	bd80      	pop	{r7, pc}

0801499c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801499c:	b580      	push	{r7, lr}
 801499e:	b084      	sub	sp, #16
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	60f8      	str	r0, [r7, #12]
 80149a4:	60b9      	str	r1, [r7, #8]
 80149a6:	603b      	str	r3, [r7, #0]
 80149a8:	4613      	mov	r3, r2
 80149aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80149ac:	e04f      	b.n	8014a4e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80149ae:	69bb      	ldr	r3, [r7, #24]
 80149b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149b4:	d04b      	beq.n	8014a4e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80149b6:	f7f8 ffe1 	bl	800d97c <HAL_GetTick>
 80149ba:	4602      	mov	r2, r0
 80149bc:	683b      	ldr	r3, [r7, #0]
 80149be:	1ad3      	subs	r3, r2, r3
 80149c0:	69ba      	ldr	r2, [r7, #24]
 80149c2:	429a      	cmp	r2, r3
 80149c4:	d302      	bcc.n	80149cc <UART_WaitOnFlagUntilTimeout+0x30>
 80149c6:	69bb      	ldr	r3, [r7, #24]
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d101      	bne.n	80149d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80149cc:	2303      	movs	r3, #3
 80149ce:	e04e      	b.n	8014a6e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	f003 0304 	and.w	r3, r3, #4
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d037      	beq.n	8014a4e <UART_WaitOnFlagUntilTimeout+0xb2>
 80149de:	68bb      	ldr	r3, [r7, #8]
 80149e0:	2b80      	cmp	r3, #128	; 0x80
 80149e2:	d034      	beq.n	8014a4e <UART_WaitOnFlagUntilTimeout+0xb2>
 80149e4:	68bb      	ldr	r3, [r7, #8]
 80149e6:	2b40      	cmp	r3, #64	; 0x40
 80149e8:	d031      	beq.n	8014a4e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	69db      	ldr	r3, [r3, #28]
 80149f0:	f003 0308 	and.w	r3, r3, #8
 80149f4:	2b08      	cmp	r3, #8
 80149f6:	d110      	bne.n	8014a1a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	2208      	movs	r2, #8
 80149fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8014a00:	68f8      	ldr	r0, [r7, #12]
 8014a02:	f000 f838 	bl	8014a76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	2208      	movs	r2, #8
 8014a0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	2200      	movs	r2, #0
 8014a12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8014a16:	2301      	movs	r3, #1
 8014a18:	e029      	b.n	8014a6e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	681b      	ldr	r3, [r3, #0]
 8014a1e:	69db      	ldr	r3, [r3, #28]
 8014a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014a24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014a28:	d111      	bne.n	8014a4e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014a32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8014a34:	68f8      	ldr	r0, [r7, #12]
 8014a36:	f000 f81e 	bl	8014a76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	2220      	movs	r2, #32
 8014a3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	2200      	movs	r2, #0
 8014a46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8014a4a:	2303      	movs	r3, #3
 8014a4c:	e00f      	b.n	8014a6e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	69da      	ldr	r2, [r3, #28]
 8014a54:	68bb      	ldr	r3, [r7, #8]
 8014a56:	4013      	ands	r3, r2
 8014a58:	68ba      	ldr	r2, [r7, #8]
 8014a5a:	429a      	cmp	r2, r3
 8014a5c:	bf0c      	ite	eq
 8014a5e:	2301      	moveq	r3, #1
 8014a60:	2300      	movne	r3, #0
 8014a62:	b2db      	uxtb	r3, r3
 8014a64:	461a      	mov	r2, r3
 8014a66:	79fb      	ldrb	r3, [r7, #7]
 8014a68:	429a      	cmp	r2, r3
 8014a6a:	d0a0      	beq.n	80149ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8014a6c:	2300      	movs	r3, #0
}
 8014a6e:	4618      	mov	r0, r3
 8014a70:	3710      	adds	r7, #16
 8014a72:	46bd      	mov	sp, r7
 8014a74:	bd80      	pop	{r7, pc}

08014a76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8014a76:	b480      	push	{r7}
 8014a78:	b095      	sub	sp, #84	; 0x54
 8014a7a:	af00      	add	r7, sp, #0
 8014a7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a86:	e853 3f00 	ldrex	r3, [r3]
 8014a8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8014a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	461a      	mov	r2, r3
 8014a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014a9c:	643b      	str	r3, [r7, #64]	; 0x40
 8014a9e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014aa0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014aa2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014aa4:	e841 2300 	strex	r3, r2, [r1]
 8014aa8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d1e6      	bne.n	8014a7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	3308      	adds	r3, #8
 8014ab6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014ab8:	6a3b      	ldr	r3, [r7, #32]
 8014aba:	e853 3f00 	ldrex	r3, [r3]
 8014abe:	61fb      	str	r3, [r7, #28]
   return(result);
 8014ac0:	69fb      	ldr	r3, [r7, #28]
 8014ac2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014ac6:	f023 0301 	bic.w	r3, r3, #1
 8014aca:	64bb      	str	r3, [r7, #72]	; 0x48
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	3308      	adds	r3, #8
 8014ad2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014ad4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8014ad6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014ad8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014ada:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014adc:	e841 2300 	strex	r3, r2, [r1]
 8014ae0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d1e3      	bne.n	8014ab0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014aec:	2b01      	cmp	r3, #1
 8014aee:	d118      	bne.n	8014b22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	e853 3f00 	ldrex	r3, [r3]
 8014afc:	60bb      	str	r3, [r7, #8]
   return(result);
 8014afe:	68bb      	ldr	r3, [r7, #8]
 8014b00:	f023 0310 	bic.w	r3, r3, #16
 8014b04:	647b      	str	r3, [r7, #68]	; 0x44
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	681b      	ldr	r3, [r3, #0]
 8014b0a:	461a      	mov	r2, r3
 8014b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b0e:	61bb      	str	r3, [r7, #24]
 8014b10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014b12:	6979      	ldr	r1, [r7, #20]
 8014b14:	69ba      	ldr	r2, [r7, #24]
 8014b16:	e841 2300 	strex	r3, r2, [r1]
 8014b1a:	613b      	str	r3, [r7, #16]
   return(result);
 8014b1c:	693b      	ldr	r3, [r7, #16]
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d1e6      	bne.n	8014af0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	2220      	movs	r2, #32
 8014b26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	2200      	movs	r2, #0
 8014b2e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	2200      	movs	r2, #0
 8014b34:	675a      	str	r2, [r3, #116]	; 0x74
}
 8014b36:	bf00      	nop
 8014b38:	3754      	adds	r7, #84	; 0x54
 8014b3a:	46bd      	mov	sp, r7
 8014b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b40:	4770      	bx	lr

08014b42 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8014b42:	b480      	push	{r7}
 8014b44:	b085      	sub	sp, #20
 8014b46:	af00      	add	r7, sp, #0
 8014b48:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8014b50:	2b01      	cmp	r3, #1
 8014b52:	d101      	bne.n	8014b58 <HAL_UARTEx_DisableFifoMode+0x16>
 8014b54:	2302      	movs	r3, #2
 8014b56:	e027      	b.n	8014ba8 <HAL_UARTEx_DisableFifoMode+0x66>
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	2201      	movs	r2, #1
 8014b5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	2224      	movs	r2, #36	; 0x24
 8014b64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	681b      	ldr	r3, [r3, #0]
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	681a      	ldr	r2, [r3, #0]
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	f022 0201 	bic.w	r2, r2, #1
 8014b7e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8014b86:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	2200      	movs	r2, #0
 8014b8c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	68fa      	ldr	r2, [r7, #12]
 8014b94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	2220      	movs	r2, #32
 8014b9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	2200      	movs	r2, #0
 8014ba2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8014ba6:	2300      	movs	r3, #0
}
 8014ba8:	4618      	mov	r0, r3
 8014baa:	3714      	adds	r7, #20
 8014bac:	46bd      	mov	sp, r7
 8014bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb2:	4770      	bx	lr

08014bb4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014bb4:	b580      	push	{r7, lr}
 8014bb6:	b084      	sub	sp, #16
 8014bb8:	af00      	add	r7, sp, #0
 8014bba:	6078      	str	r0, [r7, #4]
 8014bbc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8014bc4:	2b01      	cmp	r3, #1
 8014bc6:	d101      	bne.n	8014bcc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8014bc8:	2302      	movs	r3, #2
 8014bca:	e02d      	b.n	8014c28 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	2201      	movs	r2, #1
 8014bd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	2224      	movs	r2, #36	; 0x24
 8014bd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	681b      	ldr	r3, [r3, #0]
 8014be8:	681a      	ldr	r2, [r3, #0]
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	f022 0201 	bic.w	r2, r2, #1
 8014bf2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	681b      	ldr	r3, [r3, #0]
 8014bf8:	689b      	ldr	r3, [r3, #8]
 8014bfa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	681b      	ldr	r3, [r3, #0]
 8014c02:	683a      	ldr	r2, [r7, #0]
 8014c04:	430a      	orrs	r2, r1
 8014c06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014c08:	6878      	ldr	r0, [r7, #4]
 8014c0a:	f000 f84f 	bl	8014cac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	681b      	ldr	r3, [r3, #0]
 8014c12:	68fa      	ldr	r2, [r7, #12]
 8014c14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	2220      	movs	r2, #32
 8014c1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	2200      	movs	r2, #0
 8014c22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8014c26:	2300      	movs	r3, #0
}
 8014c28:	4618      	mov	r0, r3
 8014c2a:	3710      	adds	r7, #16
 8014c2c:	46bd      	mov	sp, r7
 8014c2e:	bd80      	pop	{r7, pc}

08014c30 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014c30:	b580      	push	{r7, lr}
 8014c32:	b084      	sub	sp, #16
 8014c34:	af00      	add	r7, sp, #0
 8014c36:	6078      	str	r0, [r7, #4]
 8014c38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8014c40:	2b01      	cmp	r3, #1
 8014c42:	d101      	bne.n	8014c48 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8014c44:	2302      	movs	r3, #2
 8014c46:	e02d      	b.n	8014ca4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	2201      	movs	r2, #1
 8014c4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	2224      	movs	r2, #36	; 0x24
 8014c54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	681b      	ldr	r3, [r3, #0]
 8014c5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	681a      	ldr	r2, [r3, #0]
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	681b      	ldr	r3, [r3, #0]
 8014c6a:	f022 0201 	bic.w	r2, r2, #1
 8014c6e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	689b      	ldr	r3, [r3, #8]
 8014c76:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	683a      	ldr	r2, [r7, #0]
 8014c80:	430a      	orrs	r2, r1
 8014c82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014c84:	6878      	ldr	r0, [r7, #4]
 8014c86:	f000 f811 	bl	8014cac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	68fa      	ldr	r2, [r7, #12]
 8014c90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	2220      	movs	r2, #32
 8014c96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	2200      	movs	r2, #0
 8014c9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8014ca2:	2300      	movs	r3, #0
}
 8014ca4:	4618      	mov	r0, r3
 8014ca6:	3710      	adds	r7, #16
 8014ca8:	46bd      	mov	sp, r7
 8014caa:	bd80      	pop	{r7, pc}

08014cac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8014cac:	b480      	push	{r7}
 8014cae:	b085      	sub	sp, #20
 8014cb0:	af00      	add	r7, sp, #0
 8014cb2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d108      	bne.n	8014cce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	2201      	movs	r2, #1
 8014cc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	2201      	movs	r2, #1
 8014cc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8014ccc:	e031      	b.n	8014d32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8014cce:	2308      	movs	r3, #8
 8014cd0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8014cd2:	2308      	movs	r3, #8
 8014cd4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	689b      	ldr	r3, [r3, #8]
 8014cdc:	0e5b      	lsrs	r3, r3, #25
 8014cde:	b2db      	uxtb	r3, r3
 8014ce0:	f003 0307 	and.w	r3, r3, #7
 8014ce4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	689b      	ldr	r3, [r3, #8]
 8014cec:	0f5b      	lsrs	r3, r3, #29
 8014cee:	b2db      	uxtb	r3, r3
 8014cf0:	f003 0307 	and.w	r3, r3, #7
 8014cf4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014cf6:	7bbb      	ldrb	r3, [r7, #14]
 8014cf8:	7b3a      	ldrb	r2, [r7, #12]
 8014cfa:	4911      	ldr	r1, [pc, #68]	; (8014d40 <UARTEx_SetNbDataToProcess+0x94>)
 8014cfc:	5c8a      	ldrb	r2, [r1, r2]
 8014cfe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8014d02:	7b3a      	ldrb	r2, [r7, #12]
 8014d04:	490f      	ldr	r1, [pc, #60]	; (8014d44 <UARTEx_SetNbDataToProcess+0x98>)
 8014d06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014d08:	fb93 f3f2 	sdiv	r3, r3, r2
 8014d0c:	b29a      	uxth	r2, r3
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014d14:	7bfb      	ldrb	r3, [r7, #15]
 8014d16:	7b7a      	ldrb	r2, [r7, #13]
 8014d18:	4909      	ldr	r1, [pc, #36]	; (8014d40 <UARTEx_SetNbDataToProcess+0x94>)
 8014d1a:	5c8a      	ldrb	r2, [r1, r2]
 8014d1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8014d20:	7b7a      	ldrb	r2, [r7, #13]
 8014d22:	4908      	ldr	r1, [pc, #32]	; (8014d44 <UARTEx_SetNbDataToProcess+0x98>)
 8014d24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014d26:	fb93 f3f2 	sdiv	r3, r3, r2
 8014d2a:	b29a      	uxth	r2, r3
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8014d32:	bf00      	nop
 8014d34:	3714      	adds	r7, #20
 8014d36:	46bd      	mov	sp, r7
 8014d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d3c:	4770      	bx	lr
 8014d3e:	bf00      	nop
 8014d40:	080214d0 	.word	0x080214d0
 8014d44:	080214d8 	.word	0x080214d8

08014d48 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8014d48:	b580      	push	{r7, lr}
 8014d4a:	b088      	sub	sp, #32
 8014d4c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8014d4e:	2300      	movs	r3, #0
 8014d50:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014d52:	f107 0308 	add.w	r3, r7, #8
 8014d56:	2218      	movs	r2, #24
 8014d58:	2100      	movs	r1, #0
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	f001 f92d 	bl	8015fba <Osal_MemSet>
  rq.ogf = 0x3f;
 8014d60:	233f      	movs	r3, #63	; 0x3f
 8014d62:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8014d64:	2381      	movs	r3, #129	; 0x81
 8014d66:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8014d68:	1dfb      	adds	r3, r7, #7
 8014d6a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8014d6c:	2301      	movs	r3, #1
 8014d6e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014d70:	f107 0308 	add.w	r3, r7, #8
 8014d74:	2100      	movs	r1, #0
 8014d76:	4618      	mov	r0, r3
 8014d78:	f001 fba8 	bl	80164cc <hci_send_req>
 8014d7c:	4603      	mov	r3, r0
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	da01      	bge.n	8014d86 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8014d82:	23ff      	movs	r3, #255	; 0xff
 8014d84:	e000      	b.n	8014d88 <aci_gap_set_non_discoverable+0x40>
  return status;
 8014d86:	79fb      	ldrb	r3, [r7, #7]
}
 8014d88:	4618      	mov	r0, r3
 8014d8a:	3720      	adds	r7, #32
 8014d8c:	46bd      	mov	sp, r7
 8014d8e:	bd80      	pop	{r7, pc}

08014d90 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8014d90:	b5b0      	push	{r4, r5, r7, lr}
 8014d92:	b0ce      	sub	sp, #312	; 0x138
 8014d94:	af00      	add	r7, sp, #0
 8014d96:	4605      	mov	r5, r0
 8014d98:	460c      	mov	r4, r1
 8014d9a:	4610      	mov	r0, r2
 8014d9c:	4619      	mov	r1, r3
 8014d9e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014da2:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8014da6:	462a      	mov	r2, r5
 8014da8:	701a      	strb	r2, [r3, #0]
 8014daa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014dae:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8014db2:	4622      	mov	r2, r4
 8014db4:	801a      	strh	r2, [r3, #0]
 8014db6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014dba:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8014dbe:	4602      	mov	r2, r0
 8014dc0:	801a      	strh	r2, [r3, #0]
 8014dc2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014dc6:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8014dca:	460a      	mov	r2, r1
 8014dcc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8014dce:	f107 0310 	add.w	r3, r7, #16
 8014dd2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8014dd6:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8014dda:	3308      	adds	r3, #8
 8014ddc:	f107 0210 	add.w	r2, r7, #16
 8014de0:	4413      	add	r3, r2
 8014de2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8014de6:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8014dea:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8014dee:	4413      	add	r3, r2
 8014df0:	3309      	adds	r3, #9
 8014df2:	f107 0210 	add.w	r2, r7, #16
 8014df6:	4413      	add	r3, r2
 8014df8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8014dfc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014e00:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8014e04:	2200      	movs	r2, #0
 8014e06:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014e08:	2300      	movs	r3, #0
 8014e0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8014e0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014e12:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8014e16:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8014e1a:	7812      	ldrb	r2, [r2, #0]
 8014e1c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8014e1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014e22:	3301      	adds	r3, #1
 8014e24:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8014e28:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014e2c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8014e30:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8014e34:	8812      	ldrh	r2, [r2, #0]
 8014e36:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8014e3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014e3e:	3302      	adds	r3, #2
 8014e40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8014e44:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014e48:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8014e4c:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8014e50:	8812      	ldrh	r2, [r2, #0]
 8014e52:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8014e56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014e5a:	3302      	adds	r3, #2
 8014e5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8014e60:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014e64:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8014e68:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8014e6c:	7812      	ldrb	r2, [r2, #0]
 8014e6e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8014e70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014e74:	3301      	adds	r3, #1
 8014e76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8014e7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014e7e:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8014e82:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8014e84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014e88:	3301      	adds	r3, #1
 8014e8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8014e8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014e92:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8014e96:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8014e98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014e9c:	3301      	adds	r3, #1
 8014e9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8014ea2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014ea6:	3308      	adds	r3, #8
 8014ea8:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8014eac:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	f001 f872 	bl	8015f9a <Osal_MemCpy>
    index_input += Local_Name_Length;
 8014eb6:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8014eba:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8014ebe:	4413      	add	r3, r2
 8014ec0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8014ec4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8014ec8:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8014ecc:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8014ece:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014ed2:	3301      	adds	r3, #1
 8014ed4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8014ed8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8014edc:	3301      	adds	r3, #1
 8014ede:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8014ee2:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	f001 f857 	bl	8015f9a <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8014eec:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8014ef0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8014ef4:	4413      	add	r3, r2
 8014ef6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8014efa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014efe:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8014f02:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8014f04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014f08:	3302      	adds	r3, #2
 8014f0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8014f0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014f12:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8014f16:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8014f18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014f1c:	3302      	adds	r3, #2
 8014f1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014f22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014f26:	2218      	movs	r2, #24
 8014f28:	2100      	movs	r1, #0
 8014f2a:	4618      	mov	r0, r3
 8014f2c:	f001 f845 	bl	8015fba <Osal_MemSet>
  rq.ogf = 0x3f;
 8014f30:	233f      	movs	r3, #63	; 0x3f
 8014f32:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8014f36:	2383      	movs	r3, #131	; 0x83
 8014f38:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8014f3c:	f107 0310 	add.w	r3, r7, #16
 8014f40:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8014f44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014f48:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8014f4c:	f107 030f 	add.w	r3, r7, #15
 8014f50:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8014f54:	2301      	movs	r3, #1
 8014f56:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014f5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014f5e:	2100      	movs	r1, #0
 8014f60:	4618      	mov	r0, r3
 8014f62:	f001 fab3 	bl	80164cc <hci_send_req>
 8014f66:	4603      	mov	r3, r0
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	da01      	bge.n	8014f70 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8014f6c:	23ff      	movs	r3, #255	; 0xff
 8014f6e:	e004      	b.n	8014f7a <aci_gap_set_discoverable+0x1ea>
  return status;
 8014f70:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014f74:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8014f78:	781b      	ldrb	r3, [r3, #0]
}
 8014f7a:	4618      	mov	r0, r3
 8014f7c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8014f80:	46bd      	mov	sp, r7
 8014f82:	bdb0      	pop	{r4, r5, r7, pc}

08014f84 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8014f84:	b580      	push	{r7, lr}
 8014f86:	b0cc      	sub	sp, #304	; 0x130
 8014f88:	af00      	add	r7, sp, #0
 8014f8a:	4602      	mov	r2, r0
 8014f8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014f90:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8014f94:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8014f96:	f107 0310 	add.w	r3, r7, #16
 8014f9a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8014f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014fa2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8014fa6:	2200      	movs	r2, #0
 8014fa8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014faa:	2300      	movs	r3, #0
 8014fac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8014fb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014fb4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8014fb8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8014fbc:	7812      	ldrb	r2, [r2, #0]
 8014fbe:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8014fc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014fc4:	3301      	adds	r3, #1
 8014fc6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014fca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014fce:	2218      	movs	r2, #24
 8014fd0:	2100      	movs	r1, #0
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	f000 fff1 	bl	8015fba <Osal_MemSet>
  rq.ogf = 0x3f;
 8014fd8:	233f      	movs	r3, #63	; 0x3f
 8014fda:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8014fde:	2385      	movs	r3, #133	; 0x85
 8014fe0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8014fe4:	f107 0310 	add.w	r3, r7, #16
 8014fe8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8014fec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014ff0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8014ff4:	f107 030f 	add.w	r3, r7, #15
 8014ff8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8014ffc:	2301      	movs	r3, #1
 8014ffe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015002:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015006:	2100      	movs	r1, #0
 8015008:	4618      	mov	r0, r3
 801500a:	f001 fa5f 	bl	80164cc <hci_send_req>
 801500e:	4603      	mov	r3, r0
 8015010:	2b00      	cmp	r3, #0
 8015012:	da01      	bge.n	8015018 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8015014:	23ff      	movs	r3, #255	; 0xff
 8015016:	e004      	b.n	8015022 <aci_gap_set_io_capability+0x9e>
  return status;
 8015018:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801501c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8015020:	781b      	ldrb	r3, [r3, #0]
}
 8015022:	4618      	mov	r0, r3
 8015024:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8015028:	46bd      	mov	sp, r7
 801502a:	bd80      	pop	{r7, pc}

0801502c <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 801502c:	b5b0      	push	{r4, r5, r7, lr}
 801502e:	b0cc      	sub	sp, #304	; 0x130
 8015030:	af00      	add	r7, sp, #0
 8015032:	4605      	mov	r5, r0
 8015034:	460c      	mov	r4, r1
 8015036:	4610      	mov	r0, r2
 8015038:	4619      	mov	r1, r3
 801503a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801503e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8015042:	462a      	mov	r2, r5
 8015044:	701a      	strb	r2, [r3, #0]
 8015046:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801504a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 801504e:	4622      	mov	r2, r4
 8015050:	701a      	strb	r2, [r3, #0]
 8015052:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015056:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 801505a:	4602      	mov	r2, r0
 801505c:	701a      	strb	r2, [r3, #0]
 801505e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015062:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8015066:	460a      	mov	r2, r1
 8015068:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 801506a:	f107 0310 	add.w	r3, r7, #16
 801506e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8015072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015076:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 801507a:	2200      	movs	r2, #0
 801507c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801507e:	2300      	movs	r3, #0
 8015080:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8015084:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015088:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801508c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8015090:	7812      	ldrb	r2, [r2, #0]
 8015092:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015094:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015098:	3301      	adds	r3, #1
 801509a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 801509e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80150a2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80150a6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80150aa:	7812      	ldrb	r2, [r2, #0]
 80150ac:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80150ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80150b2:	3301      	adds	r3, #1
 80150b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 80150b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80150bc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80150c0:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80150c4:	7812      	ldrb	r2, [r2, #0]
 80150c6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80150c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80150cc:	3301      	adds	r3, #1
 80150ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80150d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80150d6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80150da:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80150de:	7812      	ldrb	r2, [r2, #0]
 80150e0:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80150e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80150e6:	3301      	adds	r3, #1
 80150e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80150ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80150f0:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80150f4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80150f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80150fa:	3301      	adds	r3, #1
 80150fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8015100:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015104:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8015108:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 801510a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801510e:	3301      	adds	r3, #1
 8015110:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8015114:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015118:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 801511c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 801511e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015122:	3301      	adds	r3, #1
 8015124:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8015128:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801512c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8015130:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8015134:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015138:	3304      	adds	r3, #4
 801513a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 801513e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015142:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8015146:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8015148:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801514c:	3301      	adds	r3, #1
 801514e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015152:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015156:	2218      	movs	r2, #24
 8015158:	2100      	movs	r1, #0
 801515a:	4618      	mov	r0, r3
 801515c:	f000 ff2d 	bl	8015fba <Osal_MemSet>
  rq.ogf = 0x3f;
 8015160:	233f      	movs	r3, #63	; 0x3f
 8015162:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8015166:	2386      	movs	r3, #134	; 0x86
 8015168:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 801516c:	f107 0310 	add.w	r3, r7, #16
 8015170:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8015174:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015178:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 801517c:	f107 030f 	add.w	r3, r7, #15
 8015180:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8015184:	2301      	movs	r3, #1
 8015186:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801518a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801518e:	2100      	movs	r1, #0
 8015190:	4618      	mov	r0, r3
 8015192:	f001 f99b 	bl	80164cc <hci_send_req>
 8015196:	4603      	mov	r3, r0
 8015198:	2b00      	cmp	r3, #0
 801519a:	da01      	bge.n	80151a0 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 801519c:	23ff      	movs	r3, #255	; 0xff
 801519e:	e004      	b.n	80151aa <aci_gap_set_authentication_requirement+0x17e>
  return status;
 80151a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80151a4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80151a8:	781b      	ldrb	r3, [r3, #0]
}
 80151aa:	4618      	mov	r0, r3
 80151ac:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80151b0:	46bd      	mov	sp, r7
 80151b2:	bdb0      	pop	{r4, r5, r7, pc}

080151b4 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 80151b4:	b580      	push	{r7, lr}
 80151b6:	b0cc      	sub	sp, #304	; 0x130
 80151b8:	af00      	add	r7, sp, #0
 80151ba:	4602      	mov	r2, r0
 80151bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80151c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80151c4:	6019      	str	r1, [r3, #0]
 80151c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80151ca:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80151ce:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80151d0:	f107 0310 	add.w	r3, r7, #16
 80151d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80151d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80151dc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80151e0:	2200      	movs	r2, #0
 80151e2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80151e4:	2300      	movs	r3, #0
 80151e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80151ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80151ee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80151f2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80151f6:	8812      	ldrh	r2, [r2, #0]
 80151f8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80151fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80151fe:	3302      	adds	r3, #2
 8015200:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8015204:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015208:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801520c:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8015210:	6812      	ldr	r2, [r2, #0]
 8015212:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8015216:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801521a:	3304      	adds	r3, #4
 801521c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015220:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015224:	2218      	movs	r2, #24
 8015226:	2100      	movs	r1, #0
 8015228:	4618      	mov	r0, r3
 801522a:	f000 fec6 	bl	8015fba <Osal_MemSet>
  rq.ogf = 0x3f;
 801522e:	233f      	movs	r3, #63	; 0x3f
 8015230:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8015234:	2388      	movs	r3, #136	; 0x88
 8015236:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 801523a:	f107 0310 	add.w	r3, r7, #16
 801523e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8015242:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015246:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 801524a:	f107 030f 	add.w	r3, r7, #15
 801524e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8015252:	2301      	movs	r3, #1
 8015254:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015258:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801525c:	2100      	movs	r1, #0
 801525e:	4618      	mov	r0, r3
 8015260:	f001 f934 	bl	80164cc <hci_send_req>
 8015264:	4603      	mov	r3, r0
 8015266:	2b00      	cmp	r3, #0
 8015268:	da01      	bge.n	801526e <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 801526a:	23ff      	movs	r3, #255	; 0xff
 801526c:	e004      	b.n	8015278 <aci_gap_pass_key_resp+0xc4>
  return status;
 801526e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015272:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8015276:	781b      	ldrb	r3, [r3, #0]
}
 8015278:	4618      	mov	r0, r3
 801527a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 801527e:	46bd      	mov	sp, r7
 8015280:	bd80      	pop	{r7, pc}

08015282 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8015282:	b590      	push	{r4, r7, lr}
 8015284:	b0cd      	sub	sp, #308	; 0x134
 8015286:	af00      	add	r7, sp, #0
 8015288:	4604      	mov	r4, r0
 801528a:	4608      	mov	r0, r1
 801528c:	4611      	mov	r1, r2
 801528e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8015292:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8015296:	6013      	str	r3, [r2, #0]
 8015298:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801529c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80152a0:	4622      	mov	r2, r4
 80152a2:	701a      	strb	r2, [r3, #0]
 80152a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80152a8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80152ac:	4602      	mov	r2, r0
 80152ae:	701a      	strb	r2, [r3, #0]
 80152b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80152b4:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80152b8:	460a      	mov	r2, r1
 80152ba:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80152bc:	f107 0310 	add.w	r3, r7, #16
 80152c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80152c4:	f107 0308 	add.w	r3, r7, #8
 80152c8:	2207      	movs	r2, #7
 80152ca:	2100      	movs	r1, #0
 80152cc:	4618      	mov	r0, r3
 80152ce:	f000 fe74 	bl	8015fba <Osal_MemSet>
  int index_input = 0;
 80152d2:	2300      	movs	r3, #0
 80152d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 80152d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80152dc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80152e0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80152e4:	7812      	ldrb	r2, [r2, #0]
 80152e6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80152e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80152ec:	3301      	adds	r3, #1
 80152ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 80152f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80152f6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80152fa:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80152fe:	7812      	ldrb	r2, [r2, #0]
 8015300:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8015302:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015306:	3301      	adds	r3, #1
 8015308:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 801530c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015310:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8015314:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8015318:	7812      	ldrb	r2, [r2, #0]
 801531a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 801531c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015320:	3301      	adds	r3, #1
 8015322:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015326:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801532a:	2218      	movs	r2, #24
 801532c:	2100      	movs	r1, #0
 801532e:	4618      	mov	r0, r3
 8015330:	f000 fe43 	bl	8015fba <Osal_MemSet>
  rq.ogf = 0x3f;
 8015334:	233f      	movs	r3, #63	; 0x3f
 8015336:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 801533a:	238a      	movs	r3, #138	; 0x8a
 801533c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8015340:	f107 0310 	add.w	r3, r7, #16
 8015344:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8015348:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801534c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8015350:	f107 0308 	add.w	r3, r7, #8
 8015354:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8015358:	2307      	movs	r3, #7
 801535a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801535e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015362:	2100      	movs	r1, #0
 8015364:	4618      	mov	r0, r3
 8015366:	f001 f8b1 	bl	80164cc <hci_send_req>
 801536a:	4603      	mov	r3, r0
 801536c:	2b00      	cmp	r3, #0
 801536e:	da01      	bge.n	8015374 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8015370:	23ff      	movs	r3, #255	; 0xff
 8015372:	e02e      	b.n	80153d2 <aci_gap_init+0x150>
  if ( resp.Status )
 8015374:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015378:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801537c:	781b      	ldrb	r3, [r3, #0]
 801537e:	2b00      	cmp	r3, #0
 8015380:	d005      	beq.n	801538e <aci_gap_init+0x10c>
    return resp.Status;
 8015382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015386:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801538a:	781b      	ldrb	r3, [r3, #0]
 801538c:	e021      	b.n	80153d2 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 801538e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015392:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8015396:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801539a:	b29a      	uxth	r2, r3
 801539c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80153a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80153a4:	681b      	ldr	r3, [r3, #0]
 80153a6:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80153a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80153ac:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80153b0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80153b4:	b29a      	uxth	r2, r3
 80153b6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80153ba:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80153bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80153c0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80153c4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80153c8:	b29a      	uxth	r2, r3
 80153ca:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80153ce:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80153d0:	2300      	movs	r3, #0
}
 80153d2:	4618      	mov	r0, r3
 80153d4:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80153d8:	46bd      	mov	sp, r7
 80153da:	bd90      	pop	{r4, r7, pc}

080153dc <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80153dc:	b580      	push	{r7, lr}
 80153de:	b0cc      	sub	sp, #304	; 0x130
 80153e0:	af00      	add	r7, sp, #0
 80153e2:	4602      	mov	r2, r0
 80153e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80153e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80153ec:	6019      	str	r1, [r3, #0]
 80153ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80153f2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80153f6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80153f8:	f107 0310 	add.w	r3, r7, #16
 80153fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8015400:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015404:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8015408:	2200      	movs	r2, #0
 801540a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801540c:	2300      	movs	r3, #0
 801540e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8015412:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015416:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801541a:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 801541e:	7812      	ldrb	r2, [r2, #0]
 8015420:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015422:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015426:	3301      	adds	r3, #1
 8015428:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 801542c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015430:	1c58      	adds	r0, r3, #1
 8015432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015436:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 801543a:	781a      	ldrb	r2, [r3, #0]
 801543c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015440:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015444:	6819      	ldr	r1, [r3, #0]
 8015446:	f000 fda8 	bl	8015f9a <Osal_MemCpy>
  index_input += AdvDataLen;
 801544a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801544e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8015452:	781b      	ldrb	r3, [r3, #0]
 8015454:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8015458:	4413      	add	r3, r2
 801545a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801545e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015462:	2218      	movs	r2, #24
 8015464:	2100      	movs	r1, #0
 8015466:	4618      	mov	r0, r3
 8015468:	f000 fda7 	bl	8015fba <Osal_MemSet>
  rq.ogf = 0x3f;
 801546c:	233f      	movs	r3, #63	; 0x3f
 801546e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8015472:	238e      	movs	r3, #142	; 0x8e
 8015474:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8015478:	f107 0310 	add.w	r3, r7, #16
 801547c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8015480:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015484:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8015488:	f107 030f 	add.w	r3, r7, #15
 801548c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8015490:	2301      	movs	r3, #1
 8015492:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015496:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801549a:	2100      	movs	r1, #0
 801549c:	4618      	mov	r0, r3
 801549e:	f001 f815 	bl	80164cc <hci_send_req>
 80154a2:	4603      	mov	r3, r0
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	da01      	bge.n	80154ac <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80154a8:	23ff      	movs	r3, #255	; 0xff
 80154aa:	e004      	b.n	80154b6 <aci_gap_update_adv_data+0xda>
  return status;
 80154ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80154b0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80154b4:	781b      	ldrb	r3, [r3, #0]
}
 80154b6:	4618      	mov	r0, r3
 80154b8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80154bc:	46bd      	mov	sp, r7
 80154be:	bd80      	pop	{r7, pc}

080154c0 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 80154c0:	b580      	push	{r7, lr}
 80154c2:	b088      	sub	sp, #32
 80154c4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80154c6:	2300      	movs	r3, #0
 80154c8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80154ca:	f107 0308 	add.w	r3, r7, #8
 80154ce:	2218      	movs	r2, #24
 80154d0:	2100      	movs	r1, #0
 80154d2:	4618      	mov	r0, r3
 80154d4:	f000 fd71 	bl	8015fba <Osal_MemSet>
  rq.ogf = 0x3f;
 80154d8:	233f      	movs	r3, #63	; 0x3f
 80154da:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80154dc:	2392      	movs	r3, #146	; 0x92
 80154de:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80154e0:	1dfb      	adds	r3, r7, #7
 80154e2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80154e4:	2301      	movs	r3, #1
 80154e6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80154e8:	f107 0308 	add.w	r3, r7, #8
 80154ec:	2100      	movs	r1, #0
 80154ee:	4618      	mov	r0, r3
 80154f0:	f000 ffec 	bl	80164cc <hci_send_req>
 80154f4:	4603      	mov	r3, r0
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	da01      	bge.n	80154fe <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 80154fa:	23ff      	movs	r3, #255	; 0xff
 80154fc:	e000      	b.n	8015500 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 80154fe:	79fb      	ldrb	r3, [r7, #7]
}
 8015500:	4618      	mov	r0, r3
 8015502:	3720      	adds	r7, #32
 8015504:	46bd      	mov	sp, r7
 8015506:	bd80      	pop	{r7, pc}

08015508 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8015508:	b580      	push	{r7, lr}
 801550a:	b0cc      	sub	sp, #304	; 0x130
 801550c:	af00      	add	r7, sp, #0
 801550e:	4602      	mov	r2, r0
 8015510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015514:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8015518:	801a      	strh	r2, [r3, #0]
 801551a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801551e:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8015522:	460a      	mov	r2, r1
 8015524:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8015526:	f107 0310 	add.w	r3, r7, #16
 801552a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 801552e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015532:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8015536:	2200      	movs	r2, #0
 8015538:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801553a:	2300      	movs	r3, #0
 801553c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8015540:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015544:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8015548:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 801554c:	8812      	ldrh	r2, [r2, #0]
 801554e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015550:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015554:	3302      	adds	r3, #2
 8015556:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 801555a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801555e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8015562:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8015566:	7812      	ldrb	r2, [r2, #0]
 8015568:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 801556a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801556e:	3301      	adds	r3, #1
 8015570:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015574:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015578:	2218      	movs	r2, #24
 801557a:	2100      	movs	r1, #0
 801557c:	4618      	mov	r0, r3
 801557e:	f000 fd1c 	bl	8015fba <Osal_MemSet>
  rq.ogf = 0x3f;
 8015582:	233f      	movs	r3, #63	; 0x3f
 8015584:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8015588:	23a5      	movs	r3, #165	; 0xa5
 801558a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 801558e:	f107 0310 	add.w	r3, r7, #16
 8015592:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8015596:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801559a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 801559e:	f107 030f 	add.w	r3, r7, #15
 80155a2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80155a6:	2301      	movs	r3, #1
 80155a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80155ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80155b0:	2100      	movs	r1, #0
 80155b2:	4618      	mov	r0, r3
 80155b4:	f000 ff8a 	bl	80164cc <hci_send_req>
 80155b8:	4603      	mov	r3, r0
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	da01      	bge.n	80155c2 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 80155be:	23ff      	movs	r3, #255	; 0xff
 80155c0:	e004      	b.n	80155cc <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 80155c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80155c6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80155ca:	781b      	ldrb	r3, [r3, #0]
}
 80155cc:	4618      	mov	r0, r3
 80155ce:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80155d2:	46bd      	mov	sp, r7
 80155d4:	bd80      	pop	{r7, pc}

080155d6 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80155d6:	b580      	push	{r7, lr}
 80155d8:	b088      	sub	sp, #32
 80155da:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80155dc:	2300      	movs	r3, #0
 80155de:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80155e0:	f107 0308 	add.w	r3, r7, #8
 80155e4:	2218      	movs	r2, #24
 80155e6:	2100      	movs	r1, #0
 80155e8:	4618      	mov	r0, r3
 80155ea:	f000 fce6 	bl	8015fba <Osal_MemSet>
  rq.ogf = 0x3f;
 80155ee:	233f      	movs	r3, #63	; 0x3f
 80155f0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80155f2:	f240 1301 	movw	r3, #257	; 0x101
 80155f6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80155f8:	1dfb      	adds	r3, r7, #7
 80155fa:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80155fc:	2301      	movs	r3, #1
 80155fe:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015600:	f107 0308 	add.w	r3, r7, #8
 8015604:	2100      	movs	r1, #0
 8015606:	4618      	mov	r0, r3
 8015608:	f000 ff60 	bl	80164cc <hci_send_req>
 801560c:	4603      	mov	r3, r0
 801560e:	2b00      	cmp	r3, #0
 8015610:	da01      	bge.n	8015616 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8015612:	23ff      	movs	r3, #255	; 0xff
 8015614:	e000      	b.n	8015618 <aci_gatt_init+0x42>
  return status;
 8015616:	79fb      	ldrb	r3, [r7, #7]
}
 8015618:	4618      	mov	r0, r3
 801561a:	3720      	adds	r7, #32
 801561c:	46bd      	mov	sp, r7
 801561e:	bd80      	pop	{r7, pc}

08015620 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8015620:	b590      	push	{r4, r7, lr}
 8015622:	b0cf      	sub	sp, #316	; 0x13c
 8015624:	af00      	add	r7, sp, #0
 8015626:	4604      	mov	r4, r0
 8015628:	f507 709c 	add.w	r0, r7, #312	; 0x138
 801562c:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8015630:	6001      	str	r1, [r0, #0]
 8015632:	4610      	mov	r0, r2
 8015634:	4619      	mov	r1, r3
 8015636:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801563a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 801563e:	4622      	mov	r2, r4
 8015640:	701a      	strb	r2, [r3, #0]
 8015642:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015646:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 801564a:	4602      	mov	r2, r0
 801564c:	701a      	strb	r2, [r3, #0]
 801564e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015652:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8015656:	460a      	mov	r2, r1
 8015658:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 801565a:	f107 0310 	add.w	r3, r7, #16
 801565e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8015662:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015666:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 801566a:	781b      	ldrb	r3, [r3, #0]
 801566c:	2b01      	cmp	r3, #1
 801566e:	d00a      	beq.n	8015686 <aci_gatt_add_service+0x66>
 8015670:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015674:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8015678:	781b      	ldrb	r3, [r3, #0]
 801567a:	2b02      	cmp	r3, #2
 801567c:	d101      	bne.n	8015682 <aci_gatt_add_service+0x62>
 801567e:	2311      	movs	r3, #17
 8015680:	e002      	b.n	8015688 <aci_gatt_add_service+0x68>
 8015682:	2301      	movs	r3, #1
 8015684:	e000      	b.n	8015688 <aci_gatt_add_service+0x68>
 8015686:	2303      	movs	r3, #3
 8015688:	f107 0210 	add.w	r2, r7, #16
 801568c:	4413      	add	r3, r2
 801568e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8015692:	f107 030c 	add.w	r3, r7, #12
 8015696:	2203      	movs	r2, #3
 8015698:	2100      	movs	r1, #0
 801569a:	4618      	mov	r0, r3
 801569c:	f000 fc8d 	bl	8015fba <Osal_MemSet>
  int index_input = 0;
 80156a0:	2300      	movs	r3, #0
 80156a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80156a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80156aa:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80156ae:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80156b2:	7812      	ldrb	r2, [r2, #0]
 80156b4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80156b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80156ba:	3301      	adds	r3, #1
 80156bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80156c0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80156c4:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80156c8:	781b      	ldrb	r3, [r3, #0]
 80156ca:	2b01      	cmp	r3, #1
 80156cc:	d002      	beq.n	80156d4 <aci_gatt_add_service+0xb4>
 80156ce:	2b02      	cmp	r3, #2
 80156d0:	d004      	beq.n	80156dc <aci_gatt_add_service+0xbc>
 80156d2:	e007      	b.n	80156e4 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 80156d4:	2302      	movs	r3, #2
 80156d6:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80156da:	e005      	b.n	80156e8 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 80156dc:	2310      	movs	r3, #16
 80156de:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80156e2:	e001      	b.n	80156e8 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 80156e4:	2397      	movs	r3, #151	; 0x97
 80156e6:	e06c      	b.n	80157c2 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 80156e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80156ec:	1c58      	adds	r0, r3, #1
 80156ee:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 80156f2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80156f6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80156fa:	6819      	ldr	r1, [r3, #0]
 80156fc:	f000 fc4d 	bl	8015f9a <Osal_MemCpy>
    index_input += size;
 8015700:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8015704:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8015708:	4413      	add	r3, r2
 801570a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 801570e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015712:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8015716:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 801571a:	7812      	ldrb	r2, [r2, #0]
 801571c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 801571e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015722:	3301      	adds	r3, #1
 8015724:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8015728:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801572c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8015730:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8015734:	7812      	ldrb	r2, [r2, #0]
 8015736:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8015738:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801573c:	3301      	adds	r3, #1
 801573e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015742:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015746:	2218      	movs	r2, #24
 8015748:	2100      	movs	r1, #0
 801574a:	4618      	mov	r0, r3
 801574c:	f000 fc35 	bl	8015fba <Osal_MemSet>
  rq.ogf = 0x3f;
 8015750:	233f      	movs	r3, #63	; 0x3f
 8015752:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8015756:	f44f 7381 	mov.w	r3, #258	; 0x102
 801575a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 801575e:	f107 0310 	add.w	r3, r7, #16
 8015762:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8015766:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801576a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 801576e:	f107 030c 	add.w	r3, r7, #12
 8015772:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8015776:	2303      	movs	r3, #3
 8015778:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801577c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015780:	2100      	movs	r1, #0
 8015782:	4618      	mov	r0, r3
 8015784:	f000 fea2 	bl	80164cc <hci_send_req>
 8015788:	4603      	mov	r3, r0
 801578a:	2b00      	cmp	r3, #0
 801578c:	da01      	bge.n	8015792 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 801578e:	23ff      	movs	r3, #255	; 0xff
 8015790:	e017      	b.n	80157c2 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8015792:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015796:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801579a:	781b      	ldrb	r3, [r3, #0]
 801579c:	2b00      	cmp	r3, #0
 801579e:	d005      	beq.n	80157ac <aci_gatt_add_service+0x18c>
    return resp.Status;
 80157a0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80157a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80157a8:	781b      	ldrb	r3, [r3, #0]
 80157aa:	e00a      	b.n	80157c2 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 80157ac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80157b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80157b4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80157b8:	b29a      	uxth	r2, r3
 80157ba:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80157be:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80157c0:	2300      	movs	r3, #0
}
 80157c2:	4618      	mov	r0, r3
 80157c4:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80157c8:	46bd      	mov	sp, r7
 80157ca:	bd90      	pop	{r4, r7, pc}

080157cc <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80157cc:	b590      	push	{r4, r7, lr}
 80157ce:	b0d1      	sub	sp, #324	; 0x144
 80157d0:	af00      	add	r7, sp, #0
 80157d2:	4604      	mov	r4, r0
 80157d4:	4608      	mov	r0, r1
 80157d6:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80157da:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 80157de:	600a      	str	r2, [r1, #0]
 80157e0:	4619      	mov	r1, r3
 80157e2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80157e6:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80157ea:	4622      	mov	r2, r4
 80157ec:	801a      	strh	r2, [r3, #0]
 80157ee:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80157f2:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80157f6:	4602      	mov	r2, r0
 80157f8:	701a      	strb	r2, [r3, #0]
 80157fa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80157fe:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8015802:	460a      	mov	r2, r1
 8015804:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8015806:	f107 0318 	add.w	r3, r7, #24
 801580a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 801580e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8015812:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8015816:	781b      	ldrb	r3, [r3, #0]
 8015818:	2b01      	cmp	r3, #1
 801581a:	d00a      	beq.n	8015832 <aci_gatt_add_char+0x66>
 801581c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8015820:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8015824:	781b      	ldrb	r3, [r3, #0]
 8015826:	2b02      	cmp	r3, #2
 8015828:	d101      	bne.n	801582e <aci_gatt_add_char+0x62>
 801582a:	2313      	movs	r3, #19
 801582c:	e002      	b.n	8015834 <aci_gatt_add_char+0x68>
 801582e:	2303      	movs	r3, #3
 8015830:	e000      	b.n	8015834 <aci_gatt_add_char+0x68>
 8015832:	2305      	movs	r3, #5
 8015834:	f107 0218 	add.w	r2, r7, #24
 8015838:	4413      	add	r3, r2
 801583a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 801583e:	f107 0314 	add.w	r3, r7, #20
 8015842:	2203      	movs	r2, #3
 8015844:	2100      	movs	r1, #0
 8015846:	4618      	mov	r0, r3
 8015848:	f000 fbb7 	bl	8015fba <Osal_MemSet>
  int index_input = 0;
 801584c:	2300      	movs	r3, #0
 801584e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8015852:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8015856:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 801585a:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 801585e:	8812      	ldrh	r2, [r2, #0]
 8015860:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015862:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8015866:	3302      	adds	r3, #2
 8015868:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 801586c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8015870:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8015874:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8015878:	7812      	ldrb	r2, [r2, #0]
 801587a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 801587c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8015880:	3301      	adds	r3, #1
 8015882:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8015886:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801588a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 801588e:	781b      	ldrb	r3, [r3, #0]
 8015890:	2b01      	cmp	r3, #1
 8015892:	d002      	beq.n	801589a <aci_gatt_add_char+0xce>
 8015894:	2b02      	cmp	r3, #2
 8015896:	d004      	beq.n	80158a2 <aci_gatt_add_char+0xd6>
 8015898:	e007      	b.n	80158aa <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 801589a:	2302      	movs	r3, #2
 801589c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80158a0:	e005      	b.n	80158ae <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80158a2:	2310      	movs	r3, #16
 80158a4:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80158a8:	e001      	b.n	80158ae <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80158aa:	2397      	movs	r3, #151	; 0x97
 80158ac:	e091      	b.n	80159d2 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80158ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80158b2:	1cd8      	adds	r0, r3, #3
 80158b4:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80158b8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80158bc:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80158c0:	6819      	ldr	r1, [r3, #0]
 80158c2:	f000 fb6a 	bl	8015f9a <Osal_MemCpy>
    index_input += size;
 80158c6:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80158ca:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80158ce:	4413      	add	r3, r2
 80158d0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80158d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80158d8:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80158dc:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 80158e0:	8812      	ldrh	r2, [r2, #0]
 80158e2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80158e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80158e8:	3302      	adds	r3, #2
 80158ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 80158ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80158f2:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80158f6:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 80158f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80158fc:	3301      	adds	r3, #1
 80158fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8015902:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8015906:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 801590a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 801590c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8015910:	3301      	adds	r3, #1
 8015912:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8015916:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801591a:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 801591e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8015920:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8015924:	3301      	adds	r3, #1
 8015926:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 801592a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801592e:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8015932:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8015934:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8015938:	3301      	adds	r3, #1
 801593a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 801593e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8015942:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8015946:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8015948:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801594c:	3301      	adds	r3, #1
 801594e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015952:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8015956:	2218      	movs	r2, #24
 8015958:	2100      	movs	r1, #0
 801595a:	4618      	mov	r0, r3
 801595c:	f000 fb2d 	bl	8015fba <Osal_MemSet>
  rq.ogf = 0x3f;
 8015960:	233f      	movs	r3, #63	; 0x3f
 8015962:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8015966:	f44f 7382 	mov.w	r3, #260	; 0x104
 801596a:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 801596e:	f107 0318 	add.w	r3, r7, #24
 8015972:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8015976:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801597a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 801597e:	f107 0314 	add.w	r3, r7, #20
 8015982:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8015986:	2303      	movs	r3, #3
 8015988:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 801598c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8015990:	2100      	movs	r1, #0
 8015992:	4618      	mov	r0, r3
 8015994:	f000 fd9a 	bl	80164cc <hci_send_req>
 8015998:	4603      	mov	r3, r0
 801599a:	2b00      	cmp	r3, #0
 801599c:	da01      	bge.n	80159a2 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 801599e:	23ff      	movs	r3, #255	; 0xff
 80159a0:	e017      	b.n	80159d2 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 80159a2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80159a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80159aa:	781b      	ldrb	r3, [r3, #0]
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d005      	beq.n	80159bc <aci_gatt_add_char+0x1f0>
    return resp.Status;
 80159b0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80159b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80159b8:	781b      	ldrb	r3, [r3, #0]
 80159ba:	e00a      	b.n	80159d2 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 80159bc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80159c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80159c4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80159c8:	b29a      	uxth	r2, r3
 80159ca:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80159ce:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80159d0:	2300      	movs	r3, #0
}
 80159d2:	4618      	mov	r0, r3
 80159d4:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80159d8:	46bd      	mov	sp, r7
 80159da:	bd90      	pop	{r4, r7, pc}

080159dc <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80159dc:	b5b0      	push	{r4, r5, r7, lr}
 80159de:	b0cc      	sub	sp, #304	; 0x130
 80159e0:	af00      	add	r7, sp, #0
 80159e2:	4605      	mov	r5, r0
 80159e4:	460c      	mov	r4, r1
 80159e6:	4610      	mov	r0, r2
 80159e8:	4619      	mov	r1, r3
 80159ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80159ee:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80159f2:	462a      	mov	r2, r5
 80159f4:	801a      	strh	r2, [r3, #0]
 80159f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80159fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80159fe:	4622      	mov	r2, r4
 8015a00:	801a      	strh	r2, [r3, #0]
 8015a02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015a06:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8015a0a:	4602      	mov	r2, r0
 8015a0c:	701a      	strb	r2, [r3, #0]
 8015a0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015a12:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8015a16:	460a      	mov	r2, r1
 8015a18:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8015a1a:	f107 0310 	add.w	r3, r7, #16
 8015a1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8015a22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015a26:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8015a2a:	2200      	movs	r2, #0
 8015a2c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015a2e:	2300      	movs	r3, #0
 8015a30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8015a34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015a38:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8015a3c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8015a40:	8812      	ldrh	r2, [r2, #0]
 8015a42:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015a44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015a48:	3302      	adds	r3, #2
 8015a4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8015a4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015a52:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8015a56:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8015a5a:	8812      	ldrh	r2, [r2, #0]
 8015a5c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8015a5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015a62:	3302      	adds	r3, #2
 8015a64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8015a68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015a6c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8015a70:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8015a74:	7812      	ldrb	r2, [r2, #0]
 8015a76:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8015a78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015a7c:	3301      	adds	r3, #1
 8015a7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8015a82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015a86:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8015a8a:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8015a8e:	7812      	ldrb	r2, [r2, #0]
 8015a90:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8015a92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015a96:	3301      	adds	r3, #1
 8015a98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8015a9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015aa0:	1d98      	adds	r0, r3, #6
 8015aa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015aa6:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8015aaa:	781b      	ldrb	r3, [r3, #0]
 8015aac:	461a      	mov	r2, r3
 8015aae:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8015ab2:	f000 fa72 	bl	8015f9a <Osal_MemCpy>
  index_input += Char_Value_Length;
 8015ab6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015aba:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8015abe:	781b      	ldrb	r3, [r3, #0]
 8015ac0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8015ac4:	4413      	add	r3, r2
 8015ac6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015aca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015ace:	2218      	movs	r2, #24
 8015ad0:	2100      	movs	r1, #0
 8015ad2:	4618      	mov	r0, r3
 8015ad4:	f000 fa71 	bl	8015fba <Osal_MemSet>
  rq.ogf = 0x3f;
 8015ad8:	233f      	movs	r3, #63	; 0x3f
 8015ada:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8015ade:	f44f 7383 	mov.w	r3, #262	; 0x106
 8015ae2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8015ae6:	f107 0310 	add.w	r3, r7, #16
 8015aea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8015aee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015af2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8015af6:	f107 030f 	add.w	r3, r7, #15
 8015afa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8015afe:	2301      	movs	r3, #1
 8015b00:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015b04:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015b08:	2100      	movs	r1, #0
 8015b0a:	4618      	mov	r0, r3
 8015b0c:	f000 fcde 	bl	80164cc <hci_send_req>
 8015b10:	4603      	mov	r3, r0
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	da01      	bge.n	8015b1a <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8015b16:	23ff      	movs	r3, #255	; 0xff
 8015b18:	e004      	b.n	8015b24 <aci_gatt_update_char_value+0x148>
  return status;
 8015b1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015b1e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8015b22:	781b      	ldrb	r3, [r3, #0]
}
 8015b24:	4618      	mov	r0, r3
 8015b26:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8015b2a:	46bd      	mov	sp, r7
 8015b2c:	bdb0      	pop	{r4, r5, r7, pc}

08015b2e <aci_gatt_allow_read>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_allow_read( uint16_t Connection_Handle )
{
 8015b2e:	b580      	push	{r7, lr}
 8015b30:	b0cc      	sub	sp, #304	; 0x130
 8015b32:	af00      	add	r7, sp, #0
 8015b34:	4602      	mov	r2, r0
 8015b36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015b3a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8015b3e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 8015b40:	f107 0310 	add.w	r3, r7, #16
 8015b44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8015b48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015b4c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8015b50:	2200      	movs	r2, #0
 8015b52:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015b54:	2300      	movs	r3, #0
 8015b56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8015b5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015b5e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8015b62:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8015b66:	8812      	ldrh	r2, [r2, #0]
 8015b68:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015b6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015b6e:	3302      	adds	r3, #2
 8015b70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015b74:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015b78:	2218      	movs	r2, #24
 8015b7a:	2100      	movs	r1, #0
 8015b7c:	4618      	mov	r0, r3
 8015b7e:	f000 fa1c 	bl	8015fba <Osal_MemSet>
  rq.ogf = 0x3f;
 8015b82:	233f      	movs	r3, #63	; 0x3f
 8015b84:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x127;
 8015b88:	f240 1327 	movw	r3, #295	; 0x127
 8015b8c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8015b90:	f107 0310 	add.w	r3, r7, #16
 8015b94:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8015b98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015b9c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8015ba0:	f107 030f 	add.w	r3, r7, #15
 8015ba4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8015ba8:	2301      	movs	r3, #1
 8015baa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015bae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015bb2:	2100      	movs	r1, #0
 8015bb4:	4618      	mov	r0, r3
 8015bb6:	f000 fc89 	bl	80164cc <hci_send_req>
 8015bba:	4603      	mov	r3, r0
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	da01      	bge.n	8015bc4 <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 8015bc0:	23ff      	movs	r3, #255	; 0xff
 8015bc2:	e004      	b.n	8015bce <aci_gatt_allow_read+0xa0>
  return status;
 8015bc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015bc8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8015bcc:	781b      	ldrb	r3, [r3, #0]
}
 8015bce:	4618      	mov	r0, r3
 8015bd0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8015bd4:	46bd      	mov	sp, r7
 8015bd6:	bd80      	pop	{r7, pc}

08015bd8 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8015bd8:	b580      	push	{r7, lr}
 8015bda:	b0cc      	sub	sp, #304	; 0x130
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015be2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015be6:	601a      	str	r2, [r3, #0]
 8015be8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015bec:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8015bf0:	4602      	mov	r2, r0
 8015bf2:	701a      	strb	r2, [r3, #0]
 8015bf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015bf8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8015bfc:	460a      	mov	r2, r1
 8015bfe:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8015c00:	f107 0310 	add.w	r3, r7, #16
 8015c04:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8015c08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015c0c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8015c10:	2200      	movs	r2, #0
 8015c12:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015c14:	2300      	movs	r3, #0
 8015c16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8015c1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015c1e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8015c22:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8015c26:	7812      	ldrb	r2, [r2, #0]
 8015c28:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015c2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015c2e:	3301      	adds	r3, #1
 8015c30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8015c34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015c38:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8015c3c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8015c40:	7812      	ldrb	r2, [r2, #0]
 8015c42:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8015c44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015c48:	3301      	adds	r3, #1
 8015c4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8015c4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015c52:	1c98      	adds	r0, r3, #2
 8015c54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015c58:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8015c5c:	781a      	ldrb	r2, [r3, #0]
 8015c5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015c62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015c66:	6819      	ldr	r1, [r3, #0]
 8015c68:	f000 f997 	bl	8015f9a <Osal_MemCpy>
  index_input += Length;
 8015c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015c70:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8015c74:	781b      	ldrb	r3, [r3, #0]
 8015c76:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8015c7a:	4413      	add	r3, r2
 8015c7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015c80:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015c84:	2218      	movs	r2, #24
 8015c86:	2100      	movs	r1, #0
 8015c88:	4618      	mov	r0, r3
 8015c8a:	f000 f996 	bl	8015fba <Osal_MemSet>
  rq.ogf = 0x3f;
 8015c8e:	233f      	movs	r3, #63	; 0x3f
 8015c90:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8015c94:	230c      	movs	r3, #12
 8015c96:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8015c9a:	f107 0310 	add.w	r3, r7, #16
 8015c9e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8015ca2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015ca6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8015caa:	f107 030f 	add.w	r3, r7, #15
 8015cae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8015cb2:	2301      	movs	r3, #1
 8015cb4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015cb8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015cbc:	2100      	movs	r1, #0
 8015cbe:	4618      	mov	r0, r3
 8015cc0:	f000 fc04 	bl	80164cc <hci_send_req>
 8015cc4:	4603      	mov	r3, r0
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	da01      	bge.n	8015cce <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8015cca:	23ff      	movs	r3, #255	; 0xff
 8015ccc:	e004      	b.n	8015cd8 <aci_hal_write_config_data+0x100>
  return status;
 8015cce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015cd2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8015cd6:	781b      	ldrb	r3, [r3, #0]
}
 8015cd8:	4618      	mov	r0, r3
 8015cda:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8015cde:	46bd      	mov	sp, r7
 8015ce0:	bd80      	pop	{r7, pc}

08015ce2 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8015ce2:	b580      	push	{r7, lr}
 8015ce4:	b0cc      	sub	sp, #304	; 0x130
 8015ce6:	af00      	add	r7, sp, #0
 8015ce8:	4602      	mov	r2, r0
 8015cea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015cee:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8015cf2:	701a      	strb	r2, [r3, #0]
 8015cf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015cf8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8015cfc:	460a      	mov	r2, r1
 8015cfe:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8015d00:	f107 0310 	add.w	r3, r7, #16
 8015d04:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8015d08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015d0c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8015d10:	2200      	movs	r2, #0
 8015d12:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015d14:	2300      	movs	r3, #0
 8015d16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8015d1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015d1e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8015d22:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8015d26:	7812      	ldrb	r2, [r2, #0]
 8015d28:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015d2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015d2e:	3301      	adds	r3, #1
 8015d30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8015d34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015d38:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8015d3c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8015d40:	7812      	ldrb	r2, [r2, #0]
 8015d42:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8015d44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015d48:	3301      	adds	r3, #1
 8015d4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015d4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015d52:	2218      	movs	r2, #24
 8015d54:	2100      	movs	r1, #0
 8015d56:	4618      	mov	r0, r3
 8015d58:	f000 f92f 	bl	8015fba <Osal_MemSet>
  rq.ogf = 0x3f;
 8015d5c:	233f      	movs	r3, #63	; 0x3f
 8015d5e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8015d62:	230f      	movs	r3, #15
 8015d64:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8015d68:	f107 0310 	add.w	r3, r7, #16
 8015d6c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8015d70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015d74:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8015d78:	f107 030f 	add.w	r3, r7, #15
 8015d7c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8015d80:	2301      	movs	r3, #1
 8015d82:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015d86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015d8a:	2100      	movs	r1, #0
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	f000 fb9d 	bl	80164cc <hci_send_req>
 8015d92:	4603      	mov	r3, r0
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	da01      	bge.n	8015d9c <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8015d98:	23ff      	movs	r3, #255	; 0xff
 8015d9a:	e004      	b.n	8015da6 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8015d9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015da0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8015da4:	781b      	ldrb	r3, [r3, #0]
}
 8015da6:	4618      	mov	r0, r3
 8015da8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8015dac:	46bd      	mov	sp, r7
 8015dae:	bd80      	pop	{r7, pc}

08015db0 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8015db0:	b580      	push	{r7, lr}
 8015db2:	b0cc      	sub	sp, #304	; 0x130
 8015db4:	af00      	add	r7, sp, #0
 8015db6:	4602      	mov	r2, r0
 8015db8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015dbc:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8015dc0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8015dc2:	f107 0310 	add.w	r3, r7, #16
 8015dc6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8015dca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015dce:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8015dd2:	2200      	movs	r2, #0
 8015dd4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015dd6:	2300      	movs	r3, #0
 8015dd8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8015ddc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015de0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8015de4:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8015de8:	8812      	ldrh	r2, [r2, #0]
 8015dea:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015dec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015df0:	3302      	adds	r3, #2
 8015df2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015df6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015dfa:	2218      	movs	r2, #24
 8015dfc:	2100      	movs	r1, #0
 8015dfe:	4618      	mov	r0, r3
 8015e00:	f000 f8db 	bl	8015fba <Osal_MemSet>
  rq.ogf = 0x3f;
 8015e04:	233f      	movs	r3, #63	; 0x3f
 8015e06:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8015e0a:	2318      	movs	r3, #24
 8015e0c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8015e10:	f107 0310 	add.w	r3, r7, #16
 8015e14:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8015e18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015e1c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8015e20:	f107 030f 	add.w	r3, r7, #15
 8015e24:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8015e28:	2301      	movs	r3, #1
 8015e2a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015e2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015e32:	2100      	movs	r1, #0
 8015e34:	4618      	mov	r0, r3
 8015e36:	f000 fb49 	bl	80164cc <hci_send_req>
 8015e3a:	4603      	mov	r3, r0
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	da01      	bge.n	8015e44 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8015e40:	23ff      	movs	r3, #255	; 0xff
 8015e42:	e004      	b.n	8015e4e <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8015e44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015e48:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8015e4c:	781b      	ldrb	r3, [r3, #0]
}
 8015e4e:	4618      	mov	r0, r3
 8015e50:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8015e54:	46bd      	mov	sp, r7
 8015e56:	bd80      	pop	{r7, pc}

08015e58 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8015e58:	b580      	push	{r7, lr}
 8015e5a:	b088      	sub	sp, #32
 8015e5c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8015e5e:	2300      	movs	r3, #0
 8015e60:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015e62:	f107 0308 	add.w	r3, r7, #8
 8015e66:	2218      	movs	r2, #24
 8015e68:	2100      	movs	r1, #0
 8015e6a:	4618      	mov	r0, r3
 8015e6c:	f000 f8a5 	bl	8015fba <Osal_MemSet>
  rq.ogf = 0x03;
 8015e70:	2303      	movs	r3, #3
 8015e72:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8015e74:	2303      	movs	r3, #3
 8015e76:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8015e78:	1dfb      	adds	r3, r7, #7
 8015e7a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8015e7c:	2301      	movs	r3, #1
 8015e7e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015e80:	f107 0308 	add.w	r3, r7, #8
 8015e84:	2100      	movs	r1, #0
 8015e86:	4618      	mov	r0, r3
 8015e88:	f000 fb20 	bl	80164cc <hci_send_req>
 8015e8c:	4603      	mov	r3, r0
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	da01      	bge.n	8015e96 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8015e92:	23ff      	movs	r3, #255	; 0xff
 8015e94:	e000      	b.n	8015e98 <hci_reset+0x40>
  return status;
 8015e96:	79fb      	ldrb	r3, [r7, #7]
}
 8015e98:	4618      	mov	r0, r3
 8015e9a:	3720      	adds	r7, #32
 8015e9c:	46bd      	mov	sp, r7
 8015e9e:	bd80      	pop	{r7, pc}

08015ea0 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8015ea0:	b590      	push	{r4, r7, lr}
 8015ea2:	b0cd      	sub	sp, #308	; 0x134
 8015ea4:	af00      	add	r7, sp, #0
 8015ea6:	4604      	mov	r4, r0
 8015ea8:	4608      	mov	r0, r1
 8015eaa:	4611      	mov	r1, r2
 8015eac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015eb0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8015eb4:	4622      	mov	r2, r4
 8015eb6:	701a      	strb	r2, [r3, #0]
 8015eb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015ebc:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8015ec0:	4602      	mov	r2, r0
 8015ec2:	701a      	strb	r2, [r3, #0]
 8015ec4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015ec8:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8015ecc:	460a      	mov	r2, r1
 8015ece:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8015ed0:	f107 0310 	add.w	r3, r7, #16
 8015ed4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8015ed8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015edc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8015ee0:	2200      	movs	r2, #0
 8015ee2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015ee4:	2300      	movs	r3, #0
 8015ee6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8015eea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015eee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8015ef2:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8015ef6:	7812      	ldrb	r2, [r2, #0]
 8015ef8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015efa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015efe:	3301      	adds	r3, #1
 8015f00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8015f04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015f08:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8015f0c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8015f10:	7812      	ldrb	r2, [r2, #0]
 8015f12:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8015f14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015f18:	3301      	adds	r3, #1
 8015f1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8015f1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015f22:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8015f26:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8015f2a:	7812      	ldrb	r2, [r2, #0]
 8015f2c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8015f2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015f32:	3301      	adds	r3, #1
 8015f34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015f38:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015f3c:	2218      	movs	r2, #24
 8015f3e:	2100      	movs	r1, #0
 8015f40:	4618      	mov	r0, r3
 8015f42:	f000 f83a 	bl	8015fba <Osal_MemSet>
  rq.ogf = 0x08;
 8015f46:	2308      	movs	r3, #8
 8015f48:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8015f4c:	2331      	movs	r3, #49	; 0x31
 8015f4e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8015f52:	f107 0310 	add.w	r3, r7, #16
 8015f56:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8015f5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015f5e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8015f62:	f107 030f 	add.w	r3, r7, #15
 8015f66:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8015f6a:	2301      	movs	r3, #1
 8015f6c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015f70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015f74:	2100      	movs	r1, #0
 8015f76:	4618      	mov	r0, r3
 8015f78:	f000 faa8 	bl	80164cc <hci_send_req>
 8015f7c:	4603      	mov	r3, r0
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	da01      	bge.n	8015f86 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8015f82:	23ff      	movs	r3, #255	; 0xff
 8015f84:	e004      	b.n	8015f90 <hci_le_set_default_phy+0xf0>
  return status;
 8015f86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015f8a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8015f8e:	781b      	ldrb	r3, [r3, #0]
}
 8015f90:	4618      	mov	r0, r3
 8015f92:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8015f96:	46bd      	mov	sp, r7
 8015f98:	bd90      	pop	{r4, r7, pc}

08015f9a <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8015f9a:	b580      	push	{r7, lr}
 8015f9c:	b084      	sub	sp, #16
 8015f9e:	af00      	add	r7, sp, #0
 8015fa0:	60f8      	str	r0, [r7, #12]
 8015fa2:	60b9      	str	r1, [r7, #8]
 8015fa4:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8015fa6:	687a      	ldr	r2, [r7, #4]
 8015fa8:	68b9      	ldr	r1, [r7, #8]
 8015faa:	68f8      	ldr	r0, [r7, #12]
 8015fac:	f005 fdcd 	bl	801bb4a <memcpy>
 8015fb0:	4603      	mov	r3, r0
}
 8015fb2:	4618      	mov	r0, r3
 8015fb4:	3710      	adds	r7, #16
 8015fb6:	46bd      	mov	sp, r7
 8015fb8:	bd80      	pop	{r7, pc}

08015fba <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8015fba:	b580      	push	{r7, lr}
 8015fbc:	b084      	sub	sp, #16
 8015fbe:	af00      	add	r7, sp, #0
 8015fc0:	60f8      	str	r0, [r7, #12]
 8015fc2:	60b9      	str	r1, [r7, #8]
 8015fc4:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8015fc6:	687a      	ldr	r2, [r7, #4]
 8015fc8:	68b9      	ldr	r1, [r7, #8]
 8015fca:	68f8      	ldr	r0, [r7, #12]
 8015fcc:	f005 fd3e 	bl	801ba4c <memset>
 8015fd0:	4603      	mov	r3, r0
}
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	3710      	adds	r7, #16
 8015fd6:	46bd      	mov	sp, r7
 8015fd8:	bd80      	pop	{r7, pc}

08015fda <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8015fda:	b480      	push	{r7}
 8015fdc:	af00      	add	r7, sp, #0
  return;
 8015fde:	bf00      	nop
}
 8015fe0:	46bd      	mov	sp, r7
 8015fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fe6:	4770      	bx	lr

08015fe8 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8015fe8:	b480      	push	{r7}
 8015fea:	af00      	add	r7, sp, #0
  return;
 8015fec:	bf00      	nop
}
 8015fee:	46bd      	mov	sp, r7
 8015ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ff4:	4770      	bx	lr

08015ff6 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8015ff6:	b480      	push	{r7}
 8015ff8:	af00      	add	r7, sp, #0
  return;
 8015ffa:	bf00      	nop
}
 8015ffc:	46bd      	mov	sp, r7
 8015ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016002:	4770      	bx	lr

08016004 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8016004:	b480      	push	{r7}
 8016006:	af00      	add	r7, sp, #0
  return;
 8016008:	bf00      	nop
}
 801600a:	46bd      	mov	sp, r7
 801600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016010:	4770      	bx	lr

08016012 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8016012:	b480      	push	{r7}
 8016014:	af00      	add	r7, sp, #0
  return;
 8016016:	bf00      	nop
}
 8016018:	46bd      	mov	sp, r7
 801601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801601e:	4770      	bx	lr

08016020 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8016020:	b480      	push	{r7}
 8016022:	af00      	add	r7, sp, #0
  return;
 8016024:	bf00      	nop
}
 8016026:	46bd      	mov	sp, r7
 8016028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801602c:	4770      	bx	lr

0801602e <HRS_Init>:
__WEAK void HRS_Init( void )
{
 801602e:	b480      	push	{r7}
 8016030:	af00      	add	r7, sp, #0
  return;
 8016032:	bf00      	nop
}
 8016034:	46bd      	mov	sp, r7
 8016036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801603a:	4770      	bx	lr

0801603c <HTS_Init>:
__WEAK void HTS_Init( void )
{
 801603c:	b480      	push	{r7}
 801603e:	af00      	add	r7, sp, #0
  return;
 8016040:	bf00      	nop
}
 8016042:	46bd      	mov	sp, r7
 8016044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016048:	4770      	bx	lr

0801604a <IAS_Init>:
__WEAK void IAS_Init( void )
{
 801604a:	b480      	push	{r7}
 801604c:	af00      	add	r7, sp, #0
  return;
 801604e:	bf00      	nop
}
 8016050:	46bd      	mov	sp, r7
 8016052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016056:	4770      	bx	lr

08016058 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8016058:	b480      	push	{r7}
 801605a:	af00      	add	r7, sp, #0
  return;
 801605c:	bf00      	nop
}
 801605e:	46bd      	mov	sp, r7
 8016060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016064:	4770      	bx	lr

08016066 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8016066:	b480      	push	{r7}
 8016068:	af00      	add	r7, sp, #0
  return;
 801606a:	bf00      	nop
}
 801606c:	46bd      	mov	sp, r7
 801606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016072:	4770      	bx	lr

08016074 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8016074:	b480      	push	{r7}
 8016076:	af00      	add	r7, sp, #0
  return;
 8016078:	bf00      	nop
}
 801607a:	46bd      	mov	sp, r7
 801607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016080:	4770      	bx	lr

08016082 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8016082:	b480      	push	{r7}
 8016084:	af00      	add	r7, sp, #0
  return;
 8016086:	bf00      	nop
}
 8016088:	46bd      	mov	sp, r7
 801608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801608e:	4770      	bx	lr

08016090 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8016090:	b480      	push	{r7}
 8016092:	af00      	add	r7, sp, #0
  return;
 8016094:	bf00      	nop
}
 8016096:	46bd      	mov	sp, r7
 8016098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801609c:	4770      	bx	lr

0801609e <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 801609e:	b480      	push	{r7}
 80160a0:	af00      	add	r7, sp, #0
  return;
 80160a2:	bf00      	nop
}
 80160a4:	46bd      	mov	sp, r7
 80160a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160aa:	4770      	bx	lr

080160ac <MESH_Init>:
__WEAK void MESH_Init( void )
{
 80160ac:	b480      	push	{r7}
 80160ae:	af00      	add	r7, sp, #0
  return;
 80160b0:	bf00      	nop
}
 80160b2:	46bd      	mov	sp, r7
 80160b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160b8:	4770      	bx	lr

080160ba <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 80160ba:	b480      	push	{r7}
 80160bc:	af00      	add	r7, sp, #0
  return;
 80160be:	bf00      	nop
}
 80160c0:	46bd      	mov	sp, r7
 80160c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160c6:	4770      	bx	lr

080160c8 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 80160c8:	b580      	push	{r7, lr}
 80160ca:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80160cc:	4b04      	ldr	r3, [pc, #16]	; (80160e0 <SVCCTL_Init+0x18>)
 80160ce:	2200      	movs	r2, #0
 80160d0:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80160d2:	4b04      	ldr	r3, [pc, #16]	; (80160e4 <SVCCTL_Init+0x1c>)
 80160d4:	2200      	movs	r2, #0
 80160d6:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 80160d8:	f000 f806 	bl	80160e8 <SVCCTL_SvcInit>

  return;
 80160dc:	bf00      	nop
}
 80160de:	bd80      	pop	{r7, pc}
 80160e0:	200002d0 	.word	0x200002d0
 80160e4:	200002f0 	.word	0x200002f0

080160e8 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 80160e8:	b580      	push	{r7, lr}
 80160ea:	af00      	add	r7, sp, #0
  BAS_Init();
 80160ec:	f7ff ff75 	bl	8015fda <BAS_Init>

  BLS_Init();
 80160f0:	f7ff ff7a 	bl	8015fe8 <BLS_Init>

  CRS_STM_Init();
 80160f4:	f7ff ff7f 	bl	8015ff6 <CRS_STM_Init>

  DIS_Init();
 80160f8:	f7ff ff84 	bl	8016004 <DIS_Init>

  EDS_STM_Init();
 80160fc:	f7ff ff89 	bl	8016012 <EDS_STM_Init>

  HIDS_Init();
 8016100:	f7ff ff8e 	bl	8016020 <HIDS_Init>

  HRS_Init();
 8016104:	f7ff ff93 	bl	801602e <HRS_Init>

  HTS_Init();
 8016108:	f7ff ff98 	bl	801603c <HTS_Init>

  IAS_Init();
 801610c:	f7ff ff9d 	bl	801604a <IAS_Init>

  LLS_Init();
 8016110:	f7ff ffa2 	bl	8016058 <LLS_Init>

  TPS_Init();
 8016114:	f7ff ffa7 	bl	8016066 <TPS_Init>

  MOTENV_STM_Init();
 8016118:	f7ff ffac 	bl	8016074 <MOTENV_STM_Init>

  P2PS_STM_Init();
 801611c:	f7ff ffb1 	bl	8016082 <P2PS_STM_Init>

  ZDD_STM_Init();
 8016120:	f7ff ffb6 	bl	8016090 <ZDD_STM_Init>

  OTAS_STM_Init();
 8016124:	f7ff ffbb 	bl	801609e <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8016128:	f7ff ffc7 	bl	80160ba <BVOPUS_STM_Init>

  MESH_Init();
 801612c:	f7ff ffbe 	bl	80160ac <MESH_Init>

  SVCCTL_InitCustomSvc();
 8016130:	f003 f84a 	bl	80191c8 <SVCCTL_InitCustomSvc>
  
  return;
 8016134:	bf00      	nop
}
 8016136:	bd80      	pop	{r7, pc}

08016138 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8016138:	b480      	push	{r7}
 801613a:	b083      	sub	sp, #12
 801613c:	af00      	add	r7, sp, #0
 801613e:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8016140:	4b09      	ldr	r3, [pc, #36]	; (8016168 <SVCCTL_RegisterSvcHandler+0x30>)
 8016142:	7f1b      	ldrb	r3, [r3, #28]
 8016144:	4619      	mov	r1, r3
 8016146:	4a08      	ldr	r2, [pc, #32]	; (8016168 <SVCCTL_RegisterSvcHandler+0x30>)
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 801614e:	4b06      	ldr	r3, [pc, #24]	; (8016168 <SVCCTL_RegisterSvcHandler+0x30>)
 8016150:	7f1b      	ldrb	r3, [r3, #28]
 8016152:	3301      	adds	r3, #1
 8016154:	b2da      	uxtb	r2, r3
 8016156:	4b04      	ldr	r3, [pc, #16]	; (8016168 <SVCCTL_RegisterSvcHandler+0x30>)
 8016158:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 801615a:	bf00      	nop
}
 801615c:	370c      	adds	r7, #12
 801615e:	46bd      	mov	sp, r7
 8016160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016164:	4770      	bx	lr
 8016166:	bf00      	nop
 8016168:	200002d0 	.word	0x200002d0

0801616c <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 801616c:	b580      	push	{r7, lr}
 801616e:	b086      	sub	sp, #24
 8016170:	af00      	add	r7, sp, #0
 8016172:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	3301      	adds	r3, #1
 8016178:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 801617a:	2300      	movs	r3, #0
 801617c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 801617e:	693b      	ldr	r3, [r7, #16]
 8016180:	781b      	ldrb	r3, [r3, #0]
 8016182:	2bff      	cmp	r3, #255	; 0xff
 8016184:	d125      	bne.n	80161d2 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8016186:	693b      	ldr	r3, [r7, #16]
 8016188:	3302      	adds	r3, #2
 801618a:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	881b      	ldrh	r3, [r3, #0]
 8016190:	b29b      	uxth	r3, r3
 8016192:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016196:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801619a:	d118      	bne.n	80161ce <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 801619c:	2300      	movs	r3, #0
 801619e:	757b      	strb	r3, [r7, #21]
 80161a0:	e00d      	b.n	80161be <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 80161a2:	7d7b      	ldrb	r3, [r7, #21]
 80161a4:	4a1a      	ldr	r2, [pc, #104]	; (8016210 <SVCCTL_UserEvtRx+0xa4>)
 80161a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80161aa:	6878      	ldr	r0, [r7, #4]
 80161ac:	4798      	blx	r3
 80161ae:	4603      	mov	r3, r0
 80161b0:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 80161b2:	7dfb      	ldrb	r3, [r7, #23]
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	d108      	bne.n	80161ca <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80161b8:	7d7b      	ldrb	r3, [r7, #21]
 80161ba:	3301      	adds	r3, #1
 80161bc:	757b      	strb	r3, [r7, #21]
 80161be:	4b14      	ldr	r3, [pc, #80]	; (8016210 <SVCCTL_UserEvtRx+0xa4>)
 80161c0:	7f1b      	ldrb	r3, [r3, #28]
 80161c2:	7d7a      	ldrb	r2, [r7, #21]
 80161c4:	429a      	cmp	r2, r3
 80161c6:	d3ec      	bcc.n	80161a2 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 80161c8:	e002      	b.n	80161d0 <SVCCTL_UserEvtRx+0x64>
              break;
 80161ca:	bf00      	nop
          break;
 80161cc:	e000      	b.n	80161d0 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 80161ce:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80161d0:	e000      	b.n	80161d4 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 80161d2:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 80161d4:	7dfb      	ldrb	r3, [r7, #23]
 80161d6:	2b02      	cmp	r3, #2
 80161d8:	d00f      	beq.n	80161fa <SVCCTL_UserEvtRx+0x8e>
 80161da:	2b02      	cmp	r3, #2
 80161dc:	dc10      	bgt.n	8016200 <SVCCTL_UserEvtRx+0x94>
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d002      	beq.n	80161e8 <SVCCTL_UserEvtRx+0x7c>
 80161e2:	2b01      	cmp	r3, #1
 80161e4:	d006      	beq.n	80161f4 <SVCCTL_UserEvtRx+0x88>
 80161e6:	e00b      	b.n	8016200 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80161e8:	6878      	ldr	r0, [r7, #4]
 80161ea:	f000 ffa1 	bl	8017130 <SVCCTL_App_Notification>
 80161ee:	4603      	mov	r3, r0
 80161f0:	75bb      	strb	r3, [r7, #22]
      break;
 80161f2:	e008      	b.n	8016206 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80161f4:	2301      	movs	r3, #1
 80161f6:	75bb      	strb	r3, [r7, #22]
      break;
 80161f8:	e005      	b.n	8016206 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80161fa:	2300      	movs	r3, #0
 80161fc:	75bb      	strb	r3, [r7, #22]
      break;
 80161fe:	e002      	b.n	8016206 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8016200:	2301      	movs	r3, #1
 8016202:	75bb      	strb	r3, [r7, #22]
      break;
 8016204:	bf00      	nop
  }

  return (return_status);
 8016206:	7dbb      	ldrb	r3, [r7, #22]
}
 8016208:	4618      	mov	r0, r3
 801620a:	3718      	adds	r7, #24
 801620c:	46bd      	mov	sp, r7
 801620e:	bd80      	pop	{r7, pc}
 8016210:	200002d0 	.word	0x200002d0

08016214 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8016214:	b580      	push	{r7, lr}
 8016216:	b088      	sub	sp, #32
 8016218:	af00      	add	r7, sp, #0
 801621a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 801621c:	f107 030c 	add.w	r3, r7, #12
 8016220:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8016228:	69fb      	ldr	r3, [r7, #28]
 801622a:	212e      	movs	r1, #46	; 0x2e
 801622c:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8016230:	f000 fae8 	bl	8016804 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8016234:	69fb      	ldr	r3, [r7, #28]
 8016236:	330b      	adds	r3, #11
 8016238:	78db      	ldrb	r3, [r3, #3]
}
 801623a:	4618      	mov	r0, r3
 801623c:	3720      	adds	r7, #32
 801623e:	46bd      	mov	sp, r7
 8016240:	bd80      	pop	{r7, pc}

08016242 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8016242:	b580      	push	{r7, lr}
 8016244:	b088      	sub	sp, #32
 8016246:	af00      	add	r7, sp, #0
 8016248:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 801624a:	f107 030c 	add.w	r3, r7, #12
 801624e:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8016256:	69fb      	ldr	r3, [r7, #28]
 8016258:	210f      	movs	r1, #15
 801625a:	f64f 4068 	movw	r0, #64616	; 0xfc68
 801625e:	f000 fad1 	bl	8016804 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8016262:	69fb      	ldr	r3, [r7, #28]
 8016264:	330b      	adds	r3, #11
 8016266:	78db      	ldrb	r3, [r3, #3]
}
 8016268:	4618      	mov	r0, r3
 801626a:	3720      	adds	r7, #32
 801626c:	46bd      	mov	sp, r7
 801626e:	bd80      	pop	{r7, pc}

08016270 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8016270:	b580      	push	{r7, lr}
 8016272:	b088      	sub	sp, #32
 8016274:	af00      	add	r7, sp, #0
 8016276:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8016278:	f107 030c 	add.w	r3, r7, #12
 801627c:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 801627e:	69fb      	ldr	r3, [r7, #28]
 8016280:	687a      	ldr	r2, [r7, #4]
 8016282:	2110      	movs	r1, #16
 8016284:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8016288:	f000 fabc 	bl	8016804 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 801628c:	69fb      	ldr	r3, [r7, #28]
 801628e:	330b      	adds	r3, #11
 8016290:	78db      	ldrb	r3, [r3, #3]
}
 8016292:	4618      	mov	r0, r3
 8016294:	3720      	adds	r7, #32
 8016296:	46bd      	mov	sp, r7
 8016298:	bd80      	pop	{r7, pc}
	...

0801629c <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 801629c:	b480      	push	{r7}
 801629e:	b08b      	sub	sp, #44	; 0x2c
 80162a0:	af00      	add	r7, sp, #0
 80162a2:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 80162a4:	2300      	movs	r3, #0
 80162a6:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 80162a8:	2300      	movs	r3, #0
 80162aa:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 80162ac:	2300      	movs	r3, #0
 80162ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 80162b0:	2300      	movs	r3, #0
 80162b2:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 80162b4:	2300      	movs	r3, #0
 80162b6:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 80162b8:	2300      	movs	r3, #0
 80162ba:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 80162bc:	2300      	movs	r3, #0
 80162be:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 80162c0:	2300      	movs	r3, #0
 80162c2:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 80162c4:	4b4a      	ldr	r3, [pc, #296]	; (80163f0 <SHCI_GetWirelessFwInfo+0x154>)
 80162c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80162c8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80162cc:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 80162ce:	693b      	ldr	r3, [r7, #16]
 80162d0:	009b      	lsls	r3, r3, #2
 80162d2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80162d6:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80162da:	681b      	ldr	r3, [r3, #0]
 80162dc:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 80162de:	68bb      	ldr	r3, [r7, #8]
 80162e0:	681b      	ldr	r3, [r3, #0]
 80162e2:	4a44      	ldr	r2, [pc, #272]	; (80163f4 <SHCI_GetWirelessFwInfo+0x158>)
 80162e4:	4293      	cmp	r3, r2
 80162e6:	d10f      	bne.n	8016308 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 80162e8:	68bb      	ldr	r3, [r7, #8]
 80162ea:	695b      	ldr	r3, [r3, #20]
 80162ec:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80162ee:	68bb      	ldr	r3, [r7, #8]
 80162f0:	699b      	ldr	r3, [r3, #24]
 80162f2:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80162f4:	68bb      	ldr	r3, [r7, #8]
 80162f6:	69db      	ldr	r3, [r3, #28]
 80162f8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80162fa:	68bb      	ldr	r3, [r7, #8]
 80162fc:	68db      	ldr	r3, [r3, #12]
 80162fe:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8016300:	68bb      	ldr	r3, [r7, #8]
 8016302:	691b      	ldr	r3, [r3, #16]
 8016304:	617b      	str	r3, [r7, #20]
 8016306:	e01a      	b.n	801633e <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8016308:	693b      	ldr	r3, [r7, #16]
 801630a:	009b      	lsls	r3, r3, #2
 801630c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8016310:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8016314:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	691b      	ldr	r3, [r3, #16]
 801631c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 801631e:	68fb      	ldr	r3, [r7, #12]
 8016320:	681b      	ldr	r3, [r3, #0]
 8016322:	695b      	ldr	r3, [r3, #20]
 8016324:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	681b      	ldr	r3, [r3, #0]
 801632a:	699b      	ldr	r3, [r3, #24]
 801632c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	681b      	ldr	r3, [r3, #0]
 8016332:	685b      	ldr	r3, [r3, #4]
 8016334:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	689b      	ldr	r3, [r3, #8]
 801633c:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 801633e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016340:	0e1b      	lsrs	r3, r3, #24
 8016342:	b2da      	uxtb	r2, r3
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8016348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801634a:	0c1b      	lsrs	r3, r3, #16
 801634c:	b2da      	uxtb	r2, r3
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8016352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016354:	0a1b      	lsrs	r3, r3, #8
 8016356:	b2da      	uxtb	r2, r3
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 801635c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801635e:	091b      	lsrs	r3, r3, #4
 8016360:	b2db      	uxtb	r3, r3
 8016362:	f003 030f 	and.w	r3, r3, #15
 8016366:	b2da      	uxtb	r2, r3
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 801636c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801636e:	b2db      	uxtb	r3, r3
 8016370:	f003 030f 	and.w	r3, r3, #15
 8016374:	b2da      	uxtb	r2, r3
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 801637a:	6a3b      	ldr	r3, [r7, #32]
 801637c:	0e1b      	lsrs	r3, r3, #24
 801637e:	b2da      	uxtb	r2, r3
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8016384:	6a3b      	ldr	r3, [r7, #32]
 8016386:	0c1b      	lsrs	r3, r3, #16
 8016388:	b2da      	uxtb	r2, r3
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 801638e:	6a3b      	ldr	r3, [r7, #32]
 8016390:	0a1b      	lsrs	r3, r3, #8
 8016392:	b2da      	uxtb	r2, r3
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8016398:	6a3b      	ldr	r3, [r7, #32]
 801639a:	b2da      	uxtb	r2, r3
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80163a0:	69fb      	ldr	r3, [r7, #28]
 80163a2:	b2da      	uxtb	r2, r3
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80163a8:	69bb      	ldr	r3, [r7, #24]
 80163aa:	0e1b      	lsrs	r3, r3, #24
 80163ac:	b2da      	uxtb	r2, r3
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80163b2:	69bb      	ldr	r3, [r7, #24]
 80163b4:	0c1b      	lsrs	r3, r3, #16
 80163b6:	b2da      	uxtb	r2, r3
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80163bc:	69bb      	ldr	r3, [r7, #24]
 80163be:	0a1b      	lsrs	r3, r3, #8
 80163c0:	b2da      	uxtb	r2, r3
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80163c6:	697b      	ldr	r3, [r7, #20]
 80163c8:	0e1b      	lsrs	r3, r3, #24
 80163ca:	b2da      	uxtb	r2, r3
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80163d0:	697b      	ldr	r3, [r7, #20]
 80163d2:	0c1b      	lsrs	r3, r3, #16
 80163d4:	b2da      	uxtb	r2, r3
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80163da:	697b      	ldr	r3, [r7, #20]
 80163dc:	b2da      	uxtb	r2, r3
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80163e2:	2300      	movs	r3, #0
}
 80163e4:	4618      	mov	r0, r3
 80163e6:	372c      	adds	r7, #44	; 0x2c
 80163e8:	46bd      	mov	sp, r7
 80163ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163ee:	4770      	bx	lr
 80163f0:	58004000 	.word	0x58004000
 80163f4:	a94656b9 	.word	0xa94656b9

080163f8 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80163f8:	b580      	push	{r7, lr}
 80163fa:	b082      	sub	sp, #8
 80163fc:	af00      	add	r7, sp, #0
 80163fe:	6078      	str	r0, [r7, #4]
 8016400:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8016402:	683b      	ldr	r3, [r7, #0]
 8016404:	685b      	ldr	r3, [r3, #4]
 8016406:	4a08      	ldr	r2, [pc, #32]	; (8016428 <hci_init+0x30>)
 8016408:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 801640a:	4a08      	ldr	r2, [pc, #32]	; (801642c <hci_init+0x34>)
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8016410:	4806      	ldr	r0, [pc, #24]	; (801642c <hci_init+0x34>)
 8016412:	f000 f979 	bl	8016708 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8016416:	683b      	ldr	r3, [r7, #0]
 8016418:	681b      	ldr	r3, [r3, #0]
 801641a:	4618      	mov	r0, r3
 801641c:	f000 f8da 	bl	80165d4 <TlInit>

  return;
 8016420:	bf00      	nop
}
 8016422:	3708      	adds	r7, #8
 8016424:	46bd      	mov	sp, r7
 8016426:	bd80      	pop	{r7, pc}
 8016428:	200007b8 	.word	0x200007b8
 801642c:	20000790 	.word	0x20000790

08016430 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8016430:	b580      	push	{r7, lr}
 8016432:	b084      	sub	sp, #16
 8016434:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8016436:	4822      	ldr	r0, [pc, #136]	; (80164c0 <hci_user_evt_proc+0x90>)
 8016438:	f000 fd32 	bl	8016ea0 <LST_is_empty>
 801643c:	4603      	mov	r3, r0
 801643e:	2b00      	cmp	r3, #0
 8016440:	d12b      	bne.n	801649a <hci_user_evt_proc+0x6a>
 8016442:	4b20      	ldr	r3, [pc, #128]	; (80164c4 <hci_user_evt_proc+0x94>)
 8016444:	781b      	ldrb	r3, [r3, #0]
 8016446:	2b00      	cmp	r3, #0
 8016448:	d027      	beq.n	801649a <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 801644a:	f107 030c 	add.w	r3, r7, #12
 801644e:	4619      	mov	r1, r3
 8016450:	481b      	ldr	r0, [pc, #108]	; (80164c0 <hci_user_evt_proc+0x90>)
 8016452:	f000 fdb4 	bl	8016fbe <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8016456:	4b1c      	ldr	r3, [pc, #112]	; (80164c8 <hci_user_evt_proc+0x98>)
 8016458:	69db      	ldr	r3, [r3, #28]
 801645a:	2b00      	cmp	r3, #0
 801645c:	d00c      	beq.n	8016478 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 801645e:	68fb      	ldr	r3, [r7, #12]
 8016460:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8016462:	2301      	movs	r3, #1
 8016464:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8016466:	4b18      	ldr	r3, [pc, #96]	; (80164c8 <hci_user_evt_proc+0x98>)
 8016468:	69db      	ldr	r3, [r3, #28]
 801646a:	1d3a      	adds	r2, r7, #4
 801646c:	4610      	mov	r0, r2
 801646e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8016470:	793a      	ldrb	r2, [r7, #4]
 8016472:	4b14      	ldr	r3, [pc, #80]	; (80164c4 <hci_user_evt_proc+0x94>)
 8016474:	701a      	strb	r2, [r3, #0]
 8016476:	e002      	b.n	801647e <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8016478:	4b12      	ldr	r3, [pc, #72]	; (80164c4 <hci_user_evt_proc+0x94>)
 801647a:	2201      	movs	r2, #1
 801647c:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 801647e:	4b11      	ldr	r3, [pc, #68]	; (80164c4 <hci_user_evt_proc+0x94>)
 8016480:	781b      	ldrb	r3, [r3, #0]
 8016482:	2b00      	cmp	r3, #0
 8016484:	d004      	beq.n	8016490 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8016486:	68fb      	ldr	r3, [r7, #12]
 8016488:	4618      	mov	r0, r3
 801648a:	f000 fc0d 	bl	8016ca8 <TL_MM_EvtDone>
 801648e:	e004      	b.n	801649a <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8016490:	68fb      	ldr	r3, [r7, #12]
 8016492:	4619      	mov	r1, r3
 8016494:	480a      	ldr	r0, [pc, #40]	; (80164c0 <hci_user_evt_proc+0x90>)
 8016496:	f000 fd25 	bl	8016ee4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 801649a:	4809      	ldr	r0, [pc, #36]	; (80164c0 <hci_user_evt_proc+0x90>)
 801649c:	f000 fd00 	bl	8016ea0 <LST_is_empty>
 80164a0:	4603      	mov	r3, r0
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	d107      	bne.n	80164b6 <hci_user_evt_proc+0x86>
 80164a6:	4b07      	ldr	r3, [pc, #28]	; (80164c4 <hci_user_evt_proc+0x94>)
 80164a8:	781b      	ldrb	r3, [r3, #0]
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d003      	beq.n	80164b6 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80164ae:	4804      	ldr	r0, [pc, #16]	; (80164c0 <hci_user_evt_proc+0x90>)
 80164b0:	f001 f856 	bl	8017560 <hci_notify_asynch_evt>
  }


  return;
 80164b4:	bf00      	nop
 80164b6:	bf00      	nop
}
 80164b8:	3710      	adds	r7, #16
 80164ba:	46bd      	mov	sp, r7
 80164bc:	bd80      	pop	{r7, pc}
 80164be:	bf00      	nop
 80164c0:	200002f8 	.word	0x200002f8
 80164c4:	20000304 	.word	0x20000304
 80164c8:	20000790 	.word	0x20000790

080164cc <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80164cc:	b580      	push	{r7, lr}
 80164ce:	b088      	sub	sp, #32
 80164d0:	af00      	add	r7, sp, #0
 80164d2:	6078      	str	r0, [r7, #4]
 80164d4:	460b      	mov	r3, r1
 80164d6:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80164d8:	2000      	movs	r0, #0
 80164da:	f000 f8d1 	bl	8016680 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80164de:	2300      	movs	r3, #0
 80164e0:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	885b      	ldrh	r3, [r3, #2]
 80164e6:	b21b      	sxth	r3, r3
 80164e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80164ec:	b21a      	sxth	r2, r3
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	881b      	ldrh	r3, [r3, #0]
 80164f2:	029b      	lsls	r3, r3, #10
 80164f4:	b21b      	sxth	r3, r3
 80164f6:	4313      	orrs	r3, r2
 80164f8:	b21b      	sxth	r3, r3
 80164fa:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 80164fc:	4b33      	ldr	r3, [pc, #204]	; (80165cc <hci_send_req+0x100>)
 80164fe:	2201      	movs	r2, #1
 8016500:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	68db      	ldr	r3, [r3, #12]
 8016506:	b2d9      	uxtb	r1, r3
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	689a      	ldr	r2, [r3, #8]
 801650c:	8bbb      	ldrh	r3, [r7, #28]
 801650e:	4618      	mov	r0, r3
 8016510:	f000 f890 	bl	8016634 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8016514:	e04e      	b.n	80165b4 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8016516:	f248 00e8 	movw	r0, #33000	; 0x80e8
 801651a:	f001 f838 	bl	801758e <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 801651e:	e043      	b.n	80165a8 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8016520:	f107 030c 	add.w	r3, r7, #12
 8016524:	4619      	mov	r1, r3
 8016526:	482a      	ldr	r0, [pc, #168]	; (80165d0 <hci_send_req+0x104>)
 8016528:	f000 fd49 	bl	8016fbe <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	7a5b      	ldrb	r3, [r3, #9]
 8016530:	2b0f      	cmp	r3, #15
 8016532:	d114      	bne.n	801655e <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8016534:	68fb      	ldr	r3, [r7, #12]
 8016536:	330b      	adds	r3, #11
 8016538:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 801653a:	693b      	ldr	r3, [r7, #16]
 801653c:	885b      	ldrh	r3, [r3, #2]
 801653e:	b29b      	uxth	r3, r3
 8016540:	8bba      	ldrh	r2, [r7, #28]
 8016542:	429a      	cmp	r2, r3
 8016544:	d104      	bne.n	8016550 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	691b      	ldr	r3, [r3, #16]
 801654a:	693a      	ldr	r2, [r7, #16]
 801654c:	7812      	ldrb	r2, [r2, #0]
 801654e:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8016550:	693b      	ldr	r3, [r7, #16]
 8016552:	785b      	ldrb	r3, [r3, #1]
 8016554:	2b00      	cmp	r3, #0
 8016556:	d027      	beq.n	80165a8 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8016558:	2301      	movs	r3, #1
 801655a:	77fb      	strb	r3, [r7, #31]
 801655c:	e024      	b.n	80165a8 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 801655e:	68fb      	ldr	r3, [r7, #12]
 8016560:	330b      	adds	r3, #11
 8016562:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8016564:	69bb      	ldr	r3, [r7, #24]
 8016566:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801656a:	b29b      	uxth	r3, r3
 801656c:	8bba      	ldrh	r2, [r7, #28]
 801656e:	429a      	cmp	r2, r3
 8016570:	d114      	bne.n	801659c <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8016572:	68fb      	ldr	r3, [r7, #12]
 8016574:	7a9b      	ldrb	r3, [r3, #10]
 8016576:	3b03      	subs	r3, #3
 8016578:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	695a      	ldr	r2, [r3, #20]
 801657e:	7dfb      	ldrb	r3, [r7, #23]
 8016580:	429a      	cmp	r2, r3
 8016582:	bfa8      	it	ge
 8016584:	461a      	movge	r2, r3
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	6918      	ldr	r0, [r3, #16]
 801658e:	69bb      	ldr	r3, [r7, #24]
 8016590:	1cd9      	adds	r1, r3, #3
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	695b      	ldr	r3, [r3, #20]
 8016596:	461a      	mov	r2, r3
 8016598:	f005 fad7 	bl	801bb4a <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 801659c:	69bb      	ldr	r3, [r7, #24]
 801659e:	781b      	ldrb	r3, [r3, #0]
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d001      	beq.n	80165a8 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80165a4:	2301      	movs	r3, #1
 80165a6:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80165a8:	4809      	ldr	r0, [pc, #36]	; (80165d0 <hci_send_req+0x104>)
 80165aa:	f000 fc79 	bl	8016ea0 <LST_is_empty>
 80165ae:	4603      	mov	r3, r0
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d0b5      	beq.n	8016520 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80165b4:	7ffb      	ldrb	r3, [r7, #31]
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d0ad      	beq.n	8016516 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80165ba:	2001      	movs	r0, #1
 80165bc:	f000 f860 	bl	8016680 <NotifyCmdStatus>

  return 0;
 80165c0:	2300      	movs	r3, #0
}
 80165c2:	4618      	mov	r0, r3
 80165c4:	3720      	adds	r7, #32
 80165c6:	46bd      	mov	sp, r7
 80165c8:	bd80      	pop	{r7, pc}
 80165ca:	bf00      	nop
 80165cc:	200007bc 	.word	0x200007bc
 80165d0:	200007b0 	.word	0x200007b0

080165d4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80165d4:	b580      	push	{r7, lr}
 80165d6:	b086      	sub	sp, #24
 80165d8:	af00      	add	r7, sp, #0
 80165da:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80165dc:	480f      	ldr	r0, [pc, #60]	; (801661c <TlInit+0x48>)
 80165de:	f000 fc4f 	bl	8016e80 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80165e2:	4a0f      	ldr	r2, [pc, #60]	; (8016620 <TlInit+0x4c>)
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80165e8:	480e      	ldr	r0, [pc, #56]	; (8016624 <TlInit+0x50>)
 80165ea:	f000 fc49 	bl	8016e80 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80165ee:	4b0e      	ldr	r3, [pc, #56]	; (8016628 <TlInit+0x54>)
 80165f0:	2201      	movs	r2, #1
 80165f2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80165f4:	4b0d      	ldr	r3, [pc, #52]	; (801662c <TlInit+0x58>)
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d00a      	beq.n	8016612 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8016600:	4b0b      	ldr	r3, [pc, #44]	; (8016630 <TlInit+0x5c>)
 8016602:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8016604:	4b09      	ldr	r3, [pc, #36]	; (801662c <TlInit+0x58>)
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	f107 0208 	add.w	r2, r7, #8
 801660c:	4610      	mov	r0, r2
 801660e:	4798      	blx	r3
  }

  return;
 8016610:	bf00      	nop
 8016612:	bf00      	nop
}
 8016614:	3718      	adds	r7, #24
 8016616:	46bd      	mov	sp, r7
 8016618:	bd80      	pop	{r7, pc}
 801661a:	bf00      	nop
 801661c:	200007b0 	.word	0x200007b0
 8016620:	20000300 	.word	0x20000300
 8016624:	200002f8 	.word	0x200002f8
 8016628:	20000304 	.word	0x20000304
 801662c:	20000790 	.word	0x20000790
 8016630:	080166c1 	.word	0x080166c1

08016634 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8016634:	b580      	push	{r7, lr}
 8016636:	b082      	sub	sp, #8
 8016638:	af00      	add	r7, sp, #0
 801663a:	4603      	mov	r3, r0
 801663c:	603a      	str	r2, [r7, #0]
 801663e:	80fb      	strh	r3, [r7, #6]
 8016640:	460b      	mov	r3, r1
 8016642:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8016644:	4b0c      	ldr	r3, [pc, #48]	; (8016678 <SendCmd+0x44>)
 8016646:	681b      	ldr	r3, [r3, #0]
 8016648:	88fa      	ldrh	r2, [r7, #6]
 801664a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 801664e:	4b0a      	ldr	r3, [pc, #40]	; (8016678 <SendCmd+0x44>)
 8016650:	681b      	ldr	r3, [r3, #0]
 8016652:	797a      	ldrb	r2, [r7, #5]
 8016654:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8016656:	4b08      	ldr	r3, [pc, #32]	; (8016678 <SendCmd+0x44>)
 8016658:	681b      	ldr	r3, [r3, #0]
 801665a:	330c      	adds	r3, #12
 801665c:	797a      	ldrb	r2, [r7, #5]
 801665e:	6839      	ldr	r1, [r7, #0]
 8016660:	4618      	mov	r0, r3
 8016662:	f005 fa72 	bl	801bb4a <memcpy>

  hciContext.io.Send(0,0);
 8016666:	4b05      	ldr	r3, [pc, #20]	; (801667c <SendCmd+0x48>)
 8016668:	691b      	ldr	r3, [r3, #16]
 801666a:	2100      	movs	r1, #0
 801666c:	2000      	movs	r0, #0
 801666e:	4798      	blx	r3

  return;
 8016670:	bf00      	nop
}
 8016672:	3708      	adds	r7, #8
 8016674:	46bd      	mov	sp, r7
 8016676:	bd80      	pop	{r7, pc}
 8016678:	20000300 	.word	0x20000300
 801667c:	20000790 	.word	0x20000790

08016680 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8016680:	b580      	push	{r7, lr}
 8016682:	b082      	sub	sp, #8
 8016684:	af00      	add	r7, sp, #0
 8016686:	4603      	mov	r3, r0
 8016688:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 801668a:	79fb      	ldrb	r3, [r7, #7]
 801668c:	2b00      	cmp	r3, #0
 801668e:	d108      	bne.n	80166a2 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8016690:	4b0a      	ldr	r3, [pc, #40]	; (80166bc <NotifyCmdStatus+0x3c>)
 8016692:	681b      	ldr	r3, [r3, #0]
 8016694:	2b00      	cmp	r3, #0
 8016696:	d00d      	beq.n	80166b4 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8016698:	4b08      	ldr	r3, [pc, #32]	; (80166bc <NotifyCmdStatus+0x3c>)
 801669a:	681b      	ldr	r3, [r3, #0]
 801669c:	2000      	movs	r0, #0
 801669e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80166a0:	e008      	b.n	80166b4 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80166a2:	4b06      	ldr	r3, [pc, #24]	; (80166bc <NotifyCmdStatus+0x3c>)
 80166a4:	681b      	ldr	r3, [r3, #0]
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d004      	beq.n	80166b4 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80166aa:	4b04      	ldr	r3, [pc, #16]	; (80166bc <NotifyCmdStatus+0x3c>)
 80166ac:	681b      	ldr	r3, [r3, #0]
 80166ae:	2001      	movs	r0, #1
 80166b0:	4798      	blx	r3
  return;
 80166b2:	bf00      	nop
 80166b4:	bf00      	nop
}
 80166b6:	3708      	adds	r7, #8
 80166b8:	46bd      	mov	sp, r7
 80166ba:	bd80      	pop	{r7, pc}
 80166bc:	200007b8 	.word	0x200007b8

080166c0 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80166c0:	b580      	push	{r7, lr}
 80166c2:	b082      	sub	sp, #8
 80166c4:	af00      	add	r7, sp, #0
 80166c6:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	7a5b      	ldrb	r3, [r3, #9]
 80166cc:	2b0f      	cmp	r3, #15
 80166ce:	d003      	beq.n	80166d8 <TlEvtReceived+0x18>
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	7a5b      	ldrb	r3, [r3, #9]
 80166d4:	2b0e      	cmp	r3, #14
 80166d6:	d107      	bne.n	80166e8 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80166d8:	6879      	ldr	r1, [r7, #4]
 80166da:	4809      	ldr	r0, [pc, #36]	; (8016700 <TlEvtReceived+0x40>)
 80166dc:	f000 fc28 	bl	8016f30 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80166e0:	2000      	movs	r0, #0
 80166e2:	f000 ff49 	bl	8017578 <hci_cmd_resp_release>
 80166e6:	e006      	b.n	80166f6 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80166e8:	6879      	ldr	r1, [r7, #4]
 80166ea:	4806      	ldr	r0, [pc, #24]	; (8016704 <TlEvtReceived+0x44>)
 80166ec:	f000 fc20 	bl	8016f30 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80166f0:	4804      	ldr	r0, [pc, #16]	; (8016704 <TlEvtReceived+0x44>)
 80166f2:	f000 ff35 	bl	8017560 <hci_notify_asynch_evt>
  }

  return;
 80166f6:	bf00      	nop
}
 80166f8:	3708      	adds	r7, #8
 80166fa:	46bd      	mov	sp, r7
 80166fc:	bd80      	pop	{r7, pc}
 80166fe:	bf00      	nop
 8016700:	200007b0 	.word	0x200007b0
 8016704:	200002f8 	.word	0x200002f8

08016708 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8016708:	b480      	push	{r7}
 801670a:	b083      	sub	sp, #12
 801670c:	af00      	add	r7, sp, #0
 801670e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	4a05      	ldr	r2, [pc, #20]	; (8016728 <hci_register_io_bus+0x20>)
 8016714:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	4a04      	ldr	r2, [pc, #16]	; (801672c <hci_register_io_bus+0x24>)
 801671a:	611a      	str	r2, [r3, #16]

  return;
 801671c:	bf00      	nop
}
 801671e:	370c      	adds	r7, #12
 8016720:	46bd      	mov	sp, r7
 8016722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016726:	4770      	bx	lr
 8016728:	08016a21 	.word	0x08016a21
 801672c:	08016a89 	.word	0x08016a89

08016730 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8016730:	b580      	push	{r7, lr}
 8016732:	b082      	sub	sp, #8
 8016734:	af00      	add	r7, sp, #0
 8016736:	6078      	str	r0, [r7, #4]
 8016738:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 801673a:	683b      	ldr	r3, [r7, #0]
 801673c:	685b      	ldr	r3, [r3, #4]
 801673e:	4a08      	ldr	r2, [pc, #32]	; (8016760 <shci_init+0x30>)
 8016740:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8016742:	4a08      	ldr	r2, [pc, #32]	; (8016764 <shci_init+0x34>)
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8016748:	4806      	ldr	r0, [pc, #24]	; (8016764 <shci_init+0x34>)
 801674a:	f000 f915 	bl	8016978 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 801674e:	683b      	ldr	r3, [r7, #0]
 8016750:	681b      	ldr	r3, [r3, #0]
 8016752:	4618      	mov	r0, r3
 8016754:	f000 f898 	bl	8016888 <TlInit>

  return;
 8016758:	bf00      	nop
}
 801675a:	3708      	adds	r7, #8
 801675c:	46bd      	mov	sp, r7
 801675e:	bd80      	pop	{r7, pc}
 8016760:	200007e0 	.word	0x200007e0
 8016764:	200007c0 	.word	0x200007c0

08016768 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8016768:	b580      	push	{r7, lr}
 801676a:	b084      	sub	sp, #16
 801676c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 801676e:	4822      	ldr	r0, [pc, #136]	; (80167f8 <shci_user_evt_proc+0x90>)
 8016770:	f000 fb96 	bl	8016ea0 <LST_is_empty>
 8016774:	4603      	mov	r3, r0
 8016776:	2b00      	cmp	r3, #0
 8016778:	d12b      	bne.n	80167d2 <shci_user_evt_proc+0x6a>
 801677a:	4b20      	ldr	r3, [pc, #128]	; (80167fc <shci_user_evt_proc+0x94>)
 801677c:	781b      	ldrb	r3, [r3, #0]
 801677e:	2b00      	cmp	r3, #0
 8016780:	d027      	beq.n	80167d2 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8016782:	f107 030c 	add.w	r3, r7, #12
 8016786:	4619      	mov	r1, r3
 8016788:	481b      	ldr	r0, [pc, #108]	; (80167f8 <shci_user_evt_proc+0x90>)
 801678a:	f000 fc18 	bl	8016fbe <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 801678e:	4b1c      	ldr	r3, [pc, #112]	; (8016800 <shci_user_evt_proc+0x98>)
 8016790:	69db      	ldr	r3, [r3, #28]
 8016792:	2b00      	cmp	r3, #0
 8016794:	d00c      	beq.n	80167b0 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 801679a:	2301      	movs	r3, #1
 801679c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 801679e:	4b18      	ldr	r3, [pc, #96]	; (8016800 <shci_user_evt_proc+0x98>)
 80167a0:	69db      	ldr	r3, [r3, #28]
 80167a2:	1d3a      	adds	r2, r7, #4
 80167a4:	4610      	mov	r0, r2
 80167a6:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80167a8:	793a      	ldrb	r2, [r7, #4]
 80167aa:	4b14      	ldr	r3, [pc, #80]	; (80167fc <shci_user_evt_proc+0x94>)
 80167ac:	701a      	strb	r2, [r3, #0]
 80167ae:	e002      	b.n	80167b6 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80167b0:	4b12      	ldr	r3, [pc, #72]	; (80167fc <shci_user_evt_proc+0x94>)
 80167b2:	2201      	movs	r2, #1
 80167b4:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80167b6:	4b11      	ldr	r3, [pc, #68]	; (80167fc <shci_user_evt_proc+0x94>)
 80167b8:	781b      	ldrb	r3, [r3, #0]
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d004      	beq.n	80167c8 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	4618      	mov	r0, r3
 80167c2:	f000 fa71 	bl	8016ca8 <TL_MM_EvtDone>
 80167c6:	e004      	b.n	80167d2 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80167c8:	68fb      	ldr	r3, [r7, #12]
 80167ca:	4619      	mov	r1, r3
 80167cc:	480a      	ldr	r0, [pc, #40]	; (80167f8 <shci_user_evt_proc+0x90>)
 80167ce:	f000 fb89 	bl	8016ee4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80167d2:	4809      	ldr	r0, [pc, #36]	; (80167f8 <shci_user_evt_proc+0x90>)
 80167d4:	f000 fb64 	bl	8016ea0 <LST_is_empty>
 80167d8:	4603      	mov	r3, r0
 80167da:	2b00      	cmp	r3, #0
 80167dc:	d107      	bne.n	80167ee <shci_user_evt_proc+0x86>
 80167de:	4b07      	ldr	r3, [pc, #28]	; (80167fc <shci_user_evt_proc+0x94>)
 80167e0:	781b      	ldrb	r3, [r3, #0]
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d003      	beq.n	80167ee <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80167e6:	4804      	ldr	r0, [pc, #16]	; (80167f8 <shci_user_evt_proc+0x90>)
 80167e8:	f7f3 fe5b 	bl	800a4a2 <shci_notify_asynch_evt>
  }


  return;
 80167ec:	bf00      	nop
 80167ee:	bf00      	nop
}
 80167f0:	3710      	adds	r7, #16
 80167f2:	46bd      	mov	sp, r7
 80167f4:	bd80      	pop	{r7, pc}
 80167f6:	bf00      	nop
 80167f8:	20000308 	.word	0x20000308
 80167fc:	20000318 	.word	0x20000318
 8016800:	200007c0 	.word	0x200007c0

08016804 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8016804:	b580      	push	{r7, lr}
 8016806:	b084      	sub	sp, #16
 8016808:	af00      	add	r7, sp, #0
 801680a:	60ba      	str	r2, [r7, #8]
 801680c:	607b      	str	r3, [r7, #4]
 801680e:	4603      	mov	r3, r0
 8016810:	81fb      	strh	r3, [r7, #14]
 8016812:	460b      	mov	r3, r1
 8016814:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8016816:	2000      	movs	r0, #0
 8016818:	f000 f868 	bl	80168ec <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 801681c:	4b17      	ldr	r3, [pc, #92]	; (801687c <shci_send+0x78>)
 801681e:	681b      	ldr	r3, [r3, #0]
 8016820:	89fa      	ldrh	r2, [r7, #14]
 8016822:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8016826:	4b15      	ldr	r3, [pc, #84]	; (801687c <shci_send+0x78>)
 8016828:	681b      	ldr	r3, [r3, #0]
 801682a:	7b7a      	ldrb	r2, [r7, #13]
 801682c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 801682e:	4b13      	ldr	r3, [pc, #76]	; (801687c <shci_send+0x78>)
 8016830:	681b      	ldr	r3, [r3, #0]
 8016832:	330c      	adds	r3, #12
 8016834:	7b7a      	ldrb	r2, [r7, #13]
 8016836:	68b9      	ldr	r1, [r7, #8]
 8016838:	4618      	mov	r0, r3
 801683a:	f005 f986 	bl	801bb4a <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 801683e:	4b10      	ldr	r3, [pc, #64]	; (8016880 <shci_send+0x7c>)
 8016840:	2201      	movs	r2, #1
 8016842:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8016844:	4b0f      	ldr	r3, [pc, #60]	; (8016884 <shci_send+0x80>)
 8016846:	691b      	ldr	r3, [r3, #16]
 8016848:	2100      	movs	r1, #0
 801684a:	2000      	movs	r0, #0
 801684c:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 801684e:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8016852:	f7f3 fe3d 	bl	800a4d0 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	f103 0008 	add.w	r0, r3, #8
 801685c:	4b07      	ldr	r3, [pc, #28]	; (801687c <shci_send+0x78>)
 801685e:	6819      	ldr	r1, [r3, #0]
 8016860:	4b06      	ldr	r3, [pc, #24]	; (801687c <shci_send+0x78>)
 8016862:	681b      	ldr	r3, [r3, #0]
 8016864:	789b      	ldrb	r3, [r3, #2]
 8016866:	3303      	adds	r3, #3
 8016868:	461a      	mov	r2, r3
 801686a:	f005 f96e 	bl	801bb4a <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 801686e:	2001      	movs	r0, #1
 8016870:	f000 f83c 	bl	80168ec <Cmd_SetStatus>

  return;
 8016874:	bf00      	nop
}
 8016876:	3710      	adds	r7, #16
 8016878:	46bd      	mov	sp, r7
 801687a:	bd80      	pop	{r7, pc}
 801687c:	20000314 	.word	0x20000314
 8016880:	200007e4 	.word	0x200007e4
 8016884:	200007c0 	.word	0x200007c0

08016888 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8016888:	b580      	push	{r7, lr}
 801688a:	b086      	sub	sp, #24
 801688c:	af00      	add	r7, sp, #0
 801688e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8016890:	4a10      	ldr	r2, [pc, #64]	; (80168d4 <TlInit+0x4c>)
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8016896:	4810      	ldr	r0, [pc, #64]	; (80168d8 <TlInit+0x50>)
 8016898:	f000 faf2 	bl	8016e80 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 801689c:	2001      	movs	r0, #1
 801689e:	f000 f825 	bl	80168ec <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80168a2:	4b0e      	ldr	r3, [pc, #56]	; (80168dc <TlInit+0x54>)
 80168a4:	2201      	movs	r2, #1
 80168a6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80168a8:	4b0d      	ldr	r3, [pc, #52]	; (80168e0 <TlInit+0x58>)
 80168aa:	681b      	ldr	r3, [r3, #0]
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	d00c      	beq.n	80168ca <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80168b4:	4b0b      	ldr	r3, [pc, #44]	; (80168e4 <TlInit+0x5c>)
 80168b6:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80168b8:	4b0b      	ldr	r3, [pc, #44]	; (80168e8 <TlInit+0x60>)
 80168ba:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80168bc:	4b08      	ldr	r3, [pc, #32]	; (80168e0 <TlInit+0x58>)
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	f107 020c 	add.w	r2, r7, #12
 80168c4:	4610      	mov	r0, r2
 80168c6:	4798      	blx	r3
  }

  return;
 80168c8:	bf00      	nop
 80168ca:	bf00      	nop
}
 80168cc:	3718      	adds	r7, #24
 80168ce:	46bd      	mov	sp, r7
 80168d0:	bd80      	pop	{r7, pc}
 80168d2:	bf00      	nop
 80168d4:	20000314 	.word	0x20000314
 80168d8:	20000308 	.word	0x20000308
 80168dc:	20000318 	.word	0x20000318
 80168e0:	200007c0 	.word	0x200007c0
 80168e4:	0801693d 	.word	0x0801693d
 80168e8:	08016955 	.word	0x08016955

080168ec <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80168ec:	b580      	push	{r7, lr}
 80168ee:	b082      	sub	sp, #8
 80168f0:	af00      	add	r7, sp, #0
 80168f2:	4603      	mov	r3, r0
 80168f4:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80168f6:	79fb      	ldrb	r3, [r7, #7]
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d10b      	bne.n	8016914 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80168fc:	4b0d      	ldr	r3, [pc, #52]	; (8016934 <Cmd_SetStatus+0x48>)
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	2b00      	cmp	r3, #0
 8016902:	d003      	beq.n	801690c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8016904:	4b0b      	ldr	r3, [pc, #44]	; (8016934 <Cmd_SetStatus+0x48>)
 8016906:	681b      	ldr	r3, [r3, #0]
 8016908:	2000      	movs	r0, #0
 801690a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 801690c:	4b0a      	ldr	r3, [pc, #40]	; (8016938 <Cmd_SetStatus+0x4c>)
 801690e:	2200      	movs	r2, #0
 8016910:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8016912:	e00b      	b.n	801692c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8016914:	4b08      	ldr	r3, [pc, #32]	; (8016938 <Cmd_SetStatus+0x4c>)
 8016916:	2201      	movs	r2, #1
 8016918:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 801691a:	4b06      	ldr	r3, [pc, #24]	; (8016934 <Cmd_SetStatus+0x48>)
 801691c:	681b      	ldr	r3, [r3, #0]
 801691e:	2b00      	cmp	r3, #0
 8016920:	d004      	beq.n	801692c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8016922:	4b04      	ldr	r3, [pc, #16]	; (8016934 <Cmd_SetStatus+0x48>)
 8016924:	681b      	ldr	r3, [r3, #0]
 8016926:	2001      	movs	r0, #1
 8016928:	4798      	blx	r3
  return;
 801692a:	bf00      	nop
 801692c:	bf00      	nop
}
 801692e:	3708      	adds	r7, #8
 8016930:	46bd      	mov	sp, r7
 8016932:	bd80      	pop	{r7, pc}
 8016934:	200007e0 	.word	0x200007e0
 8016938:	20000310 	.word	0x20000310

0801693c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 801693c:	b580      	push	{r7, lr}
 801693e:	b082      	sub	sp, #8
 8016940:	af00      	add	r7, sp, #0
 8016942:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8016944:	2000      	movs	r0, #0
 8016946:	f7f3 fdb8 	bl	800a4ba <shci_cmd_resp_release>

  return;
 801694a:	bf00      	nop
}
 801694c:	3708      	adds	r7, #8
 801694e:	46bd      	mov	sp, r7
 8016950:	bd80      	pop	{r7, pc}
	...

08016954 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8016954:	b580      	push	{r7, lr}
 8016956:	b082      	sub	sp, #8
 8016958:	af00      	add	r7, sp, #0
 801695a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 801695c:	6879      	ldr	r1, [r7, #4]
 801695e:	4805      	ldr	r0, [pc, #20]	; (8016974 <TlUserEvtReceived+0x20>)
 8016960:	f000 fae6 	bl	8016f30 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8016964:	4803      	ldr	r0, [pc, #12]	; (8016974 <TlUserEvtReceived+0x20>)
 8016966:	f7f3 fd9c 	bl	800a4a2 <shci_notify_asynch_evt>

  return;
 801696a:	bf00      	nop
}
 801696c:	3708      	adds	r7, #8
 801696e:	46bd      	mov	sp, r7
 8016970:	bd80      	pop	{r7, pc}
 8016972:	bf00      	nop
 8016974:	20000308 	.word	0x20000308

08016978 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8016978:	b480      	push	{r7}
 801697a:	b083      	sub	sp, #12
 801697c:	af00      	add	r7, sp, #0
 801697e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	4a05      	ldr	r2, [pc, #20]	; (8016998 <shci_register_io_bus+0x20>)
 8016984:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	4a04      	ldr	r2, [pc, #16]	; (801699c <shci_register_io_bus+0x24>)
 801698a:	611a      	str	r2, [r3, #16]

  return;
 801698c:	bf00      	nop
}
 801698e:	370c      	adds	r7, #12
 8016990:	46bd      	mov	sp, r7
 8016992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016996:	4770      	bx	lr
 8016998:	08016b35 	.word	0x08016b35
 801699c:	08016b89 	.word	0x08016b89

080169a0 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 80169a0:	b580      	push	{r7, lr}
 80169a2:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80169a4:	f003 fbca 	bl	801a13c <HW_IPCC_Enable>

  return;
 80169a8:	bf00      	nop
}
 80169aa:	bd80      	pop	{r7, pc}

080169ac <TL_Init>:


void TL_Init( void )
{
 80169ac:	b580      	push	{r7, lr}
 80169ae:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80169b0:	4b10      	ldr	r3, [pc, #64]	; (80169f4 <TL_Init+0x48>)
 80169b2:	4a11      	ldr	r2, [pc, #68]	; (80169f8 <TL_Init+0x4c>)
 80169b4:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80169b6:	4b0f      	ldr	r3, [pc, #60]	; (80169f4 <TL_Init+0x48>)
 80169b8:	4a10      	ldr	r2, [pc, #64]	; (80169fc <TL_Init+0x50>)
 80169ba:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80169bc:	4b0d      	ldr	r3, [pc, #52]	; (80169f4 <TL_Init+0x48>)
 80169be:	4a10      	ldr	r2, [pc, #64]	; (8016a00 <TL_Init+0x54>)
 80169c0:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80169c2:	4b0c      	ldr	r3, [pc, #48]	; (80169f4 <TL_Init+0x48>)
 80169c4:	4a0f      	ldr	r2, [pc, #60]	; (8016a04 <TL_Init+0x58>)
 80169c6:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80169c8:	4b0a      	ldr	r3, [pc, #40]	; (80169f4 <TL_Init+0x48>)
 80169ca:	4a0f      	ldr	r2, [pc, #60]	; (8016a08 <TL_Init+0x5c>)
 80169cc:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80169ce:	4b09      	ldr	r3, [pc, #36]	; (80169f4 <TL_Init+0x48>)
 80169d0:	4a0e      	ldr	r2, [pc, #56]	; (8016a0c <TL_Init+0x60>)
 80169d2:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80169d4:	4b07      	ldr	r3, [pc, #28]	; (80169f4 <TL_Init+0x48>)
 80169d6:	4a0e      	ldr	r2, [pc, #56]	; (8016a10 <TL_Init+0x64>)
 80169d8:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80169da:	4b06      	ldr	r3, [pc, #24]	; (80169f4 <TL_Init+0x48>)
 80169dc:	4a0d      	ldr	r2, [pc, #52]	; (8016a14 <TL_Init+0x68>)
 80169de:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80169e0:	4b04      	ldr	r3, [pc, #16]	; (80169f4 <TL_Init+0x48>)
 80169e2:	4a0d      	ldr	r2, [pc, #52]	; (8016a18 <TL_Init+0x6c>)
 80169e4:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80169e6:	4b03      	ldr	r3, [pc, #12]	; (80169f4 <TL_Init+0x48>)
 80169e8:	4a0c      	ldr	r2, [pc, #48]	; (8016a1c <TL_Init+0x70>)
 80169ea:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80169ec:	f003 fbba 	bl	801a164 <HW_IPCC_Init>

  return;
 80169f0:	bf00      	nop
}
 80169f2:	bd80      	pop	{r7, pc}
 80169f4:	20030000 	.word	0x20030000
 80169f8:	20030028 	.word	0x20030028
 80169fc:	20030048 	.word	0x20030048
 8016a00:	20030058 	.word	0x20030058
 8016a04:	20030068 	.word	0x20030068
 8016a08:	20030070 	.word	0x20030070
 8016a0c:	20030078 	.word	0x20030078
 8016a10:	20030080 	.word	0x20030080
 8016a14:	2003009c 	.word	0x2003009c
 8016a18:	200300a0 	.word	0x200300a0
 8016a1c:	200300ac 	.word	0x200300ac

08016a20 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8016a20:	b580      	push	{r7, lr}
 8016a22:	b084      	sub	sp, #16
 8016a24:	af00      	add	r7, sp, #0
 8016a26:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8016a2c:	4811      	ldr	r0, [pc, #68]	; (8016a74 <TL_BLE_Init+0x54>)
 8016a2e:	f000 fa27 	bl	8016e80 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8016a32:	4b11      	ldr	r3, [pc, #68]	; (8016a78 <TL_BLE_Init+0x58>)
 8016a34:	685b      	ldr	r3, [r3, #4]
 8016a36:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	689a      	ldr	r2, [r3, #8]
 8016a3c:	68bb      	ldr	r3, [r7, #8]
 8016a3e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8016a40:	68fb      	ldr	r3, [r7, #12]
 8016a42:	68da      	ldr	r2, [r3, #12]
 8016a44:	68bb      	ldr	r3, [r7, #8]
 8016a46:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8016a48:	68bb      	ldr	r3, [r7, #8]
 8016a4a:	4a0c      	ldr	r2, [pc, #48]	; (8016a7c <TL_BLE_Init+0x5c>)
 8016a4c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8016a4e:	68bb      	ldr	r3, [r7, #8]
 8016a50:	4a08      	ldr	r2, [pc, #32]	; (8016a74 <TL_BLE_Init+0x54>)
 8016a52:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8016a54:	f003 fb9c 	bl	801a190 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8016a58:	68fb      	ldr	r3, [r7, #12]
 8016a5a:	681b      	ldr	r3, [r3, #0]
 8016a5c:	4a08      	ldr	r2, [pc, #32]	; (8016a80 <TL_BLE_Init+0x60>)
 8016a5e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8016a60:	68fb      	ldr	r3, [r7, #12]
 8016a62:	685b      	ldr	r3, [r3, #4]
 8016a64:	4a07      	ldr	r2, [pc, #28]	; (8016a84 <TL_BLE_Init+0x64>)
 8016a66:	6013      	str	r3, [r2, #0]

  return 0;
 8016a68:	2300      	movs	r3, #0
}
 8016a6a:	4618      	mov	r0, r3
 8016a6c:	3710      	adds	r7, #16
 8016a6e:	46bd      	mov	sp, r7
 8016a70:	bd80      	pop	{r7, pc}
 8016a72:	bf00      	nop
 8016a74:	200300c8 	.word	0x200300c8
 8016a78:	20030000 	.word	0x20030000
 8016a7c:	20030a58 	.word	0x20030a58
 8016a80:	200007f0 	.word	0x200007f0
 8016a84:	200007f4 	.word	0x200007f4

08016a88 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8016a88:	b580      	push	{r7, lr}
 8016a8a:	b082      	sub	sp, #8
 8016a8c:	af00      	add	r7, sp, #0
 8016a8e:	6078      	str	r0, [r7, #4]
 8016a90:	460b      	mov	r3, r1
 8016a92:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8016a94:	4b09      	ldr	r3, [pc, #36]	; (8016abc <TL_BLE_SendCmd+0x34>)
 8016a96:	685b      	ldr	r3, [r3, #4]
 8016a98:	681b      	ldr	r3, [r3, #0]
 8016a9a:	2201      	movs	r2, #1
 8016a9c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8016a9e:	4b07      	ldr	r3, [pc, #28]	; (8016abc <TL_BLE_SendCmd+0x34>)
 8016aa0:	685b      	ldr	r3, [r3, #4]
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	4619      	mov	r1, r3
 8016aa6:	2001      	movs	r0, #1
 8016aa8:	f000 f96c 	bl	8016d84 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8016aac:	f003 fb7a 	bl	801a1a4 <HW_IPCC_BLE_SendCmd>

  return 0;
 8016ab0:	2300      	movs	r3, #0
}
 8016ab2:	4618      	mov	r0, r3
 8016ab4:	3708      	adds	r7, #8
 8016ab6:	46bd      	mov	sp, r7
 8016ab8:	bd80      	pop	{r7, pc}
 8016aba:	bf00      	nop
 8016abc:	20030000 	.word	0x20030000

08016ac0 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8016ac0:	b580      	push	{r7, lr}
 8016ac2:	b082      	sub	sp, #8
 8016ac4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8016ac6:	e01c      	b.n	8016b02 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8016ac8:	1d3b      	adds	r3, r7, #4
 8016aca:	4619      	mov	r1, r3
 8016acc:	4812      	ldr	r0, [pc, #72]	; (8016b18 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8016ace:	f000 fa76 	bl	8016fbe <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	7a5b      	ldrb	r3, [r3, #9]
 8016ad6:	2b0f      	cmp	r3, #15
 8016ad8:	d003      	beq.n	8016ae2 <HW_IPCC_BLE_RxEvtNot+0x22>
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	7a5b      	ldrb	r3, [r3, #9]
 8016ade:	2b0e      	cmp	r3, #14
 8016ae0:	d105      	bne.n	8016aee <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	4619      	mov	r1, r3
 8016ae6:	2002      	movs	r0, #2
 8016ae8:	f000 f94c 	bl	8016d84 <OutputDbgTrace>
 8016aec:	e004      	b.n	8016af8 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	4619      	mov	r1, r3
 8016af2:	2003      	movs	r0, #3
 8016af4:	f000 f946 	bl	8016d84 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8016af8:	4b08      	ldr	r3, [pc, #32]	; (8016b1c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8016afa:	681b      	ldr	r3, [r3, #0]
 8016afc:	687a      	ldr	r2, [r7, #4]
 8016afe:	4610      	mov	r0, r2
 8016b00:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8016b02:	4805      	ldr	r0, [pc, #20]	; (8016b18 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8016b04:	f000 f9cc 	bl	8016ea0 <LST_is_empty>
 8016b08:	4603      	mov	r3, r0
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d0dc      	beq.n	8016ac8 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8016b0e:	bf00      	nop
}
 8016b10:	3708      	adds	r7, #8
 8016b12:	46bd      	mov	sp, r7
 8016b14:	bd80      	pop	{r7, pc}
 8016b16:	bf00      	nop
 8016b18:	200300c8 	.word	0x200300c8
 8016b1c:	200007f0 	.word	0x200007f0

08016b20 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8016b20:	b580      	push	{r7, lr}
 8016b22:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8016b24:	4b02      	ldr	r3, [pc, #8]	; (8016b30 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8016b26:	681b      	ldr	r3, [r3, #0]
 8016b28:	4798      	blx	r3

  return;
 8016b2a:	bf00      	nop
}
 8016b2c:	bd80      	pop	{r7, pc}
 8016b2e:	bf00      	nop
 8016b30:	200007f4 	.word	0x200007f4

08016b34 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8016b34:	b580      	push	{r7, lr}
 8016b36:	b084      	sub	sp, #16
 8016b38:	af00      	add	r7, sp, #0
 8016b3a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8016b40:	480d      	ldr	r0, [pc, #52]	; (8016b78 <TL_SYS_Init+0x44>)
 8016b42:	f000 f99d 	bl	8016e80 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8016b46:	4b0d      	ldr	r3, [pc, #52]	; (8016b7c <TL_SYS_Init+0x48>)
 8016b48:	68db      	ldr	r3, [r3, #12]
 8016b4a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8016b4c:	68fb      	ldr	r3, [r7, #12]
 8016b4e:	689a      	ldr	r2, [r3, #8]
 8016b50:	68bb      	ldr	r3, [r7, #8]
 8016b52:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8016b54:	68bb      	ldr	r3, [r7, #8]
 8016b56:	4a08      	ldr	r2, [pc, #32]	; (8016b78 <TL_SYS_Init+0x44>)
 8016b58:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8016b5a:	f003 fb45 	bl	801a1e8 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8016b5e:	68fb      	ldr	r3, [r7, #12]
 8016b60:	681b      	ldr	r3, [r3, #0]
 8016b62:	4a07      	ldr	r2, [pc, #28]	; (8016b80 <TL_SYS_Init+0x4c>)
 8016b64:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8016b66:	68fb      	ldr	r3, [r7, #12]
 8016b68:	685b      	ldr	r3, [r3, #4]
 8016b6a:	4a06      	ldr	r2, [pc, #24]	; (8016b84 <TL_SYS_Init+0x50>)
 8016b6c:	6013      	str	r3, [r2, #0]

  return 0;
 8016b6e:	2300      	movs	r3, #0
}
 8016b70:	4618      	mov	r0, r3
 8016b72:	3710      	adds	r7, #16
 8016b74:	46bd      	mov	sp, r7
 8016b76:	bd80      	pop	{r7, pc}
 8016b78:	200300d0 	.word	0x200300d0
 8016b7c:	20030000 	.word	0x20030000
 8016b80:	200007f8 	.word	0x200007f8
 8016b84:	200007fc 	.word	0x200007fc

08016b88 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8016b88:	b580      	push	{r7, lr}
 8016b8a:	b082      	sub	sp, #8
 8016b8c:	af00      	add	r7, sp, #0
 8016b8e:	6078      	str	r0, [r7, #4]
 8016b90:	460b      	mov	r3, r1
 8016b92:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8016b94:	4b09      	ldr	r3, [pc, #36]	; (8016bbc <TL_SYS_SendCmd+0x34>)
 8016b96:	68db      	ldr	r3, [r3, #12]
 8016b98:	681b      	ldr	r3, [r3, #0]
 8016b9a:	2210      	movs	r2, #16
 8016b9c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8016b9e:	4b07      	ldr	r3, [pc, #28]	; (8016bbc <TL_SYS_SendCmd+0x34>)
 8016ba0:	68db      	ldr	r3, [r3, #12]
 8016ba2:	681b      	ldr	r3, [r3, #0]
 8016ba4:	4619      	mov	r1, r3
 8016ba6:	2004      	movs	r0, #4
 8016ba8:	f000 f8ec 	bl	8016d84 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8016bac:	f003 fb26 	bl	801a1fc <HW_IPCC_SYS_SendCmd>

  return 0;
 8016bb0:	2300      	movs	r3, #0
}
 8016bb2:	4618      	mov	r0, r3
 8016bb4:	3708      	adds	r7, #8
 8016bb6:	46bd      	mov	sp, r7
 8016bb8:	bd80      	pop	{r7, pc}
 8016bba:	bf00      	nop
 8016bbc:	20030000 	.word	0x20030000

08016bc0 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8016bc0:	b580      	push	{r7, lr}
 8016bc2:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8016bc4:	4b07      	ldr	r3, [pc, #28]	; (8016be4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8016bc6:	68db      	ldr	r3, [r3, #12]
 8016bc8:	681b      	ldr	r3, [r3, #0]
 8016bca:	4619      	mov	r1, r3
 8016bcc:	2005      	movs	r0, #5
 8016bce:	f000 f8d9 	bl	8016d84 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8016bd2:	4b05      	ldr	r3, [pc, #20]	; (8016be8 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8016bd4:	681b      	ldr	r3, [r3, #0]
 8016bd6:	4a03      	ldr	r2, [pc, #12]	; (8016be4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8016bd8:	68d2      	ldr	r2, [r2, #12]
 8016bda:	6812      	ldr	r2, [r2, #0]
 8016bdc:	4610      	mov	r0, r2
 8016bde:	4798      	blx	r3

  return;
 8016be0:	bf00      	nop
}
 8016be2:	bd80      	pop	{r7, pc}
 8016be4:	20030000 	.word	0x20030000
 8016be8:	200007f8 	.word	0x200007f8

08016bec <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8016bec:	b580      	push	{r7, lr}
 8016bee:	b082      	sub	sp, #8
 8016bf0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8016bf2:	e00e      	b.n	8016c12 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8016bf4:	1d3b      	adds	r3, r7, #4
 8016bf6:	4619      	mov	r1, r3
 8016bf8:	480b      	ldr	r0, [pc, #44]	; (8016c28 <HW_IPCC_SYS_EvtNot+0x3c>)
 8016bfa:	f000 f9e0 	bl	8016fbe <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	4619      	mov	r1, r3
 8016c02:	2006      	movs	r0, #6
 8016c04:	f000 f8be 	bl	8016d84 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8016c08:	4b08      	ldr	r3, [pc, #32]	; (8016c2c <HW_IPCC_SYS_EvtNot+0x40>)
 8016c0a:	681b      	ldr	r3, [r3, #0]
 8016c0c:	687a      	ldr	r2, [r7, #4]
 8016c0e:	4610      	mov	r0, r2
 8016c10:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8016c12:	4805      	ldr	r0, [pc, #20]	; (8016c28 <HW_IPCC_SYS_EvtNot+0x3c>)
 8016c14:	f000 f944 	bl	8016ea0 <LST_is_empty>
 8016c18:	4603      	mov	r3, r0
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d0ea      	beq.n	8016bf4 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8016c1e:	bf00      	nop
}
 8016c20:	3708      	adds	r7, #8
 8016c22:	46bd      	mov	sp, r7
 8016c24:	bd80      	pop	{r7, pc}
 8016c26:	bf00      	nop
 8016c28:	200300d0 	.word	0x200300d0
 8016c2c:	200007fc 	.word	0x200007fc

08016c30 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8016c30:	b580      	push	{r7, lr}
 8016c32:	b082      	sub	sp, #8
 8016c34:	af00      	add	r7, sp, #0
 8016c36:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8016c38:	4817      	ldr	r0, [pc, #92]	; (8016c98 <TL_MM_Init+0x68>)
 8016c3a:	f000 f921 	bl	8016e80 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8016c3e:	4817      	ldr	r0, [pc, #92]	; (8016c9c <TL_MM_Init+0x6c>)
 8016c40:	f000 f91e 	bl	8016e80 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8016c44:	4b16      	ldr	r3, [pc, #88]	; (8016ca0 <TL_MM_Init+0x70>)
 8016c46:	691b      	ldr	r3, [r3, #16]
 8016c48:	4a16      	ldr	r2, [pc, #88]	; (8016ca4 <TL_MM_Init+0x74>)
 8016c4a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8016c4c:	4b15      	ldr	r3, [pc, #84]	; (8016ca4 <TL_MM_Init+0x74>)
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	687a      	ldr	r2, [r7, #4]
 8016c52:	6892      	ldr	r2, [r2, #8]
 8016c54:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8016c56:	4b13      	ldr	r3, [pc, #76]	; (8016ca4 <TL_MM_Init+0x74>)
 8016c58:	681b      	ldr	r3, [r3, #0]
 8016c5a:	687a      	ldr	r2, [r7, #4]
 8016c5c:	68d2      	ldr	r2, [r2, #12]
 8016c5e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8016c60:	4b10      	ldr	r3, [pc, #64]	; (8016ca4 <TL_MM_Init+0x74>)
 8016c62:	681b      	ldr	r3, [r3, #0]
 8016c64:	4a0c      	ldr	r2, [pc, #48]	; (8016c98 <TL_MM_Init+0x68>)
 8016c66:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8016c68:	4b0e      	ldr	r3, [pc, #56]	; (8016ca4 <TL_MM_Init+0x74>)
 8016c6a:	681b      	ldr	r3, [r3, #0]
 8016c6c:	687a      	ldr	r2, [r7, #4]
 8016c6e:	6812      	ldr	r2, [r2, #0]
 8016c70:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8016c72:	4b0c      	ldr	r3, [pc, #48]	; (8016ca4 <TL_MM_Init+0x74>)
 8016c74:	681b      	ldr	r3, [r3, #0]
 8016c76:	687a      	ldr	r2, [r7, #4]
 8016c78:	6852      	ldr	r2, [r2, #4]
 8016c7a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8016c7c:	4b09      	ldr	r3, [pc, #36]	; (8016ca4 <TL_MM_Init+0x74>)
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	687a      	ldr	r2, [r7, #4]
 8016c82:	6912      	ldr	r2, [r2, #16]
 8016c84:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8016c86:	4b07      	ldr	r3, [pc, #28]	; (8016ca4 <TL_MM_Init+0x74>)
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	687a      	ldr	r2, [r7, #4]
 8016c8c:	6952      	ldr	r2, [r2, #20]
 8016c8e:	619a      	str	r2, [r3, #24]

  return;
 8016c90:	bf00      	nop
}
 8016c92:	3708      	adds	r7, #8
 8016c94:	46bd      	mov	sp, r7
 8016c96:	bd80      	pop	{r7, pc}
 8016c98:	200300b8 	.word	0x200300b8
 8016c9c:	200007e8 	.word	0x200007e8
 8016ca0:	20030000 	.word	0x20030000
 8016ca4:	20000800 	.word	0x20000800

08016ca8 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8016ca8:	b580      	push	{r7, lr}
 8016caa:	b082      	sub	sp, #8
 8016cac:	af00      	add	r7, sp, #0
 8016cae:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8016cb0:	6879      	ldr	r1, [r7, #4]
 8016cb2:	4807      	ldr	r0, [pc, #28]	; (8016cd0 <TL_MM_EvtDone+0x28>)
 8016cb4:	f000 f93c 	bl	8016f30 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8016cb8:	6879      	ldr	r1, [r7, #4]
 8016cba:	2000      	movs	r0, #0
 8016cbc:	f000 f862 	bl	8016d84 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8016cc0:	4804      	ldr	r0, [pc, #16]	; (8016cd4 <TL_MM_EvtDone+0x2c>)
 8016cc2:	f003 fac1 	bl	801a248 <HW_IPCC_MM_SendFreeBuf>

  return;
 8016cc6:	bf00      	nop
}
 8016cc8:	3708      	adds	r7, #8
 8016cca:	46bd      	mov	sp, r7
 8016ccc:	bd80      	pop	{r7, pc}
 8016cce:	bf00      	nop
 8016cd0:	200007e8 	.word	0x200007e8
 8016cd4:	08016cd9 	.word	0x08016cd9

08016cd8 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8016cd8:	b580      	push	{r7, lr}
 8016cda:	b082      	sub	sp, #8
 8016cdc:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8016cde:	e00c      	b.n	8016cfa <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8016ce0:	1d3b      	adds	r3, r7, #4
 8016ce2:	4619      	mov	r1, r3
 8016ce4:	480a      	ldr	r0, [pc, #40]	; (8016d10 <SendFreeBuf+0x38>)
 8016ce6:	f000 f96a 	bl	8016fbe <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8016cea:	4b0a      	ldr	r3, [pc, #40]	; (8016d14 <SendFreeBuf+0x3c>)
 8016cec:	691b      	ldr	r3, [r3, #16]
 8016cee:	691b      	ldr	r3, [r3, #16]
 8016cf0:	687a      	ldr	r2, [r7, #4]
 8016cf2:	4611      	mov	r1, r2
 8016cf4:	4618      	mov	r0, r3
 8016cf6:	f000 f91b 	bl	8016f30 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8016cfa:	4805      	ldr	r0, [pc, #20]	; (8016d10 <SendFreeBuf+0x38>)
 8016cfc:	f000 f8d0 	bl	8016ea0 <LST_is_empty>
 8016d00:	4603      	mov	r3, r0
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d0ec      	beq.n	8016ce0 <SendFreeBuf+0x8>
  }

  return;
 8016d06:	bf00      	nop
}
 8016d08:	3708      	adds	r7, #8
 8016d0a:	46bd      	mov	sp, r7
 8016d0c:	bd80      	pop	{r7, pc}
 8016d0e:	bf00      	nop
 8016d10:	200007e8 	.word	0x200007e8
 8016d14:	20030000 	.word	0x20030000

08016d18 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8016d18:	b580      	push	{r7, lr}
 8016d1a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8016d1c:	4805      	ldr	r0, [pc, #20]	; (8016d34 <TL_TRACES_Init+0x1c>)
 8016d1e:	f000 f8af 	bl	8016e80 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8016d22:	4b05      	ldr	r3, [pc, #20]	; (8016d38 <TL_TRACES_Init+0x20>)
 8016d24:	695b      	ldr	r3, [r3, #20]
 8016d26:	4a03      	ldr	r2, [pc, #12]	; (8016d34 <TL_TRACES_Init+0x1c>)
 8016d28:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8016d2a:	f003 fac3 	bl	801a2b4 <HW_IPCC_TRACES_Init>

  return;
 8016d2e:	bf00      	nop
}
 8016d30:	bd80      	pop	{r7, pc}
 8016d32:	bf00      	nop
 8016d34:	200300c0 	.word	0x200300c0
 8016d38:	20030000 	.word	0x20030000

08016d3c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8016d3c:	b580      	push	{r7, lr}
 8016d3e:	b082      	sub	sp, #8
 8016d40:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8016d42:	e008      	b.n	8016d56 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8016d44:	1d3b      	adds	r3, r7, #4
 8016d46:	4619      	mov	r1, r3
 8016d48:	4808      	ldr	r0, [pc, #32]	; (8016d6c <HW_IPCC_TRACES_EvtNot+0x30>)
 8016d4a:	f000 f938 	bl	8016fbe <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	4618      	mov	r0, r3
 8016d52:	f000 f80d 	bl	8016d70 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8016d56:	4805      	ldr	r0, [pc, #20]	; (8016d6c <HW_IPCC_TRACES_EvtNot+0x30>)
 8016d58:	f000 f8a2 	bl	8016ea0 <LST_is_empty>
 8016d5c:	4603      	mov	r3, r0
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d0f0      	beq.n	8016d44 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8016d62:	bf00      	nop
}
 8016d64:	3708      	adds	r7, #8
 8016d66:	46bd      	mov	sp, r7
 8016d68:	bd80      	pop	{r7, pc}
 8016d6a:	bf00      	nop
 8016d6c:	200300c0 	.word	0x200300c0

08016d70 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8016d70:	b480      	push	{r7}
 8016d72:	b083      	sub	sp, #12
 8016d74:	af00      	add	r7, sp, #0
 8016d76:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8016d78:	bf00      	nop
 8016d7a:	370c      	adds	r7, #12
 8016d7c:	46bd      	mov	sp, r7
 8016d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d82:	4770      	bx	lr

08016d84 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8016d84:	b480      	push	{r7}
 8016d86:	b085      	sub	sp, #20
 8016d88:	af00      	add	r7, sp, #0
 8016d8a:	4603      	mov	r3, r0
 8016d8c:	6039      	str	r1, [r7, #0]
 8016d8e:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8016d90:	79fb      	ldrb	r3, [r7, #7]
 8016d92:	2b06      	cmp	r3, #6
 8016d94:	d845      	bhi.n	8016e22 <OutputDbgTrace+0x9e>
 8016d96:	a201      	add	r2, pc, #4	; (adr r2, 8016d9c <OutputDbgTrace+0x18>)
 8016d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d9c:	08016db9 	.word	0x08016db9
 8016da0:	08016ddd 	.word	0x08016ddd
 8016da4:	08016de3 	.word	0x08016de3
 8016da8:	08016df7 	.word	0x08016df7
 8016dac:	08016e03 	.word	0x08016e03
 8016db0:	08016e09 	.word	0x08016e09
 8016db4:	08016e17 	.word	0x08016e17
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016db8:	683b      	ldr	r3, [r7, #0]
 8016dba:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8016dbc:	68fb      	ldr	r3, [r7, #12]
 8016dbe:	7a5b      	ldrb	r3, [r3, #9]
 8016dc0:	2bff      	cmp	r3, #255	; 0xff
 8016dc2:	d005      	beq.n	8016dd0 <OutputDbgTrace+0x4c>
 8016dc4:	2bff      	cmp	r3, #255	; 0xff
 8016dc6:	dc05      	bgt.n	8016dd4 <OutputDbgTrace+0x50>
 8016dc8:	2b0e      	cmp	r3, #14
 8016dca:	d005      	beq.n	8016dd8 <OutputDbgTrace+0x54>
 8016dcc:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8016dce:	e001      	b.n	8016dd4 <OutputDbgTrace+0x50>
          break;
 8016dd0:	bf00      	nop
 8016dd2:	e027      	b.n	8016e24 <OutputDbgTrace+0xa0>
          break;
 8016dd4:	bf00      	nop
 8016dd6:	e025      	b.n	8016e24 <OutputDbgTrace+0xa0>
          break;
 8016dd8:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8016dda:	e023      	b.n	8016e24 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8016ddc:	683b      	ldr	r3, [r7, #0]
 8016dde:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8016de0:	e020      	b.n	8016e24 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016de2:	683b      	ldr	r3, [r7, #0]
 8016de4:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8016de6:	68fb      	ldr	r3, [r7, #12]
 8016de8:	7a5b      	ldrb	r3, [r3, #9]
 8016dea:	2b0e      	cmp	r3, #14
 8016dec:	d001      	beq.n	8016df2 <OutputDbgTrace+0x6e>
 8016dee:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8016df0:	e000      	b.n	8016df4 <OutputDbgTrace+0x70>
          break;
 8016df2:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016df4:	e016      	b.n	8016e24 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016df6:	683b      	ldr	r3, [r7, #0]
 8016df8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8016dfa:	68fb      	ldr	r3, [r7, #12]
 8016dfc:	7a5b      	ldrb	r3, [r3, #9]
 8016dfe:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016e00:	e010      	b.n	8016e24 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8016e02:	683b      	ldr	r3, [r7, #0]
 8016e04:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8016e06:	e00d      	b.n	8016e24 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016e08:	683b      	ldr	r3, [r7, #0]
 8016e0a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8016e0c:	68fb      	ldr	r3, [r7, #12]
 8016e0e:	7a5b      	ldrb	r3, [r3, #9]
 8016e10:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8016e12:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016e14:	e006      	b.n	8016e24 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016e16:	683b      	ldr	r3, [r7, #0]
 8016e18:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8016e1a:	68fb      	ldr	r3, [r7, #12]
 8016e1c:	7a5b      	ldrb	r3, [r3, #9]
 8016e1e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016e20:	e000      	b.n	8016e24 <OutputDbgTrace+0xa0>

    default:
      break;
 8016e22:	bf00      	nop
  }

  return;
 8016e24:	bf00      	nop
}
 8016e26:	3714      	adds	r7, #20
 8016e28:	46bd      	mov	sp, r7
 8016e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e2e:	4770      	bx	lr

08016e30 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8016e30:	b480      	push	{r7}
 8016e32:	b085      	sub	sp, #20
 8016e34:	af00      	add	r7, sp, #0
 8016e36:	4603      	mov	r3, r0
 8016e38:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8016e3a:	4b0f      	ldr	r3, [pc, #60]	; (8016e78 <OTP_Read+0x48>)
 8016e3c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8016e3e:	e002      	b.n	8016e46 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8016e40:	68fb      	ldr	r3, [r7, #12]
 8016e42:	3b08      	subs	r3, #8
 8016e44:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8016e46:	68fb      	ldr	r3, [r7, #12]
 8016e48:	3307      	adds	r3, #7
 8016e4a:	781b      	ldrb	r3, [r3, #0]
 8016e4c:	79fa      	ldrb	r2, [r7, #7]
 8016e4e:	429a      	cmp	r2, r3
 8016e50:	d003      	beq.n	8016e5a <OTP_Read+0x2a>
 8016e52:	68fb      	ldr	r3, [r7, #12]
 8016e54:	4a09      	ldr	r2, [pc, #36]	; (8016e7c <OTP_Read+0x4c>)
 8016e56:	4293      	cmp	r3, r2
 8016e58:	d1f2      	bne.n	8016e40 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8016e5a:	68fb      	ldr	r3, [r7, #12]
 8016e5c:	3307      	adds	r3, #7
 8016e5e:	781b      	ldrb	r3, [r3, #0]
 8016e60:	79fa      	ldrb	r2, [r7, #7]
 8016e62:	429a      	cmp	r2, r3
 8016e64:	d001      	beq.n	8016e6a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8016e66:	2300      	movs	r3, #0
 8016e68:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8016e6a:	68fb      	ldr	r3, [r7, #12]
}
 8016e6c:	4618      	mov	r0, r3
 8016e6e:	3714      	adds	r7, #20
 8016e70:	46bd      	mov	sp, r7
 8016e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e76:	4770      	bx	lr
 8016e78:	1fff73f8 	.word	0x1fff73f8
 8016e7c:	1fff7000 	.word	0x1fff7000

08016e80 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8016e80:	b480      	push	{r7}
 8016e82:	b083      	sub	sp, #12
 8016e84:	af00      	add	r7, sp, #0
 8016e86:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	687a      	ldr	r2, [r7, #4]
 8016e8c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	687a      	ldr	r2, [r7, #4]
 8016e92:	605a      	str	r2, [r3, #4]
}
 8016e94:	bf00      	nop
 8016e96:	370c      	adds	r7, #12
 8016e98:	46bd      	mov	sp, r7
 8016e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e9e:	4770      	bx	lr

08016ea0 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8016ea0:	b480      	push	{r7}
 8016ea2:	b087      	sub	sp, #28
 8016ea4:	af00      	add	r7, sp, #0
 8016ea6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016ea8:	f3ef 8310 	mrs	r3, PRIMASK
 8016eac:	60fb      	str	r3, [r7, #12]
  return(result);
 8016eae:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016eb0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8016eb2:	b672      	cpsid	i
}
 8016eb4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	681b      	ldr	r3, [r3, #0]
 8016eba:	687a      	ldr	r2, [r7, #4]
 8016ebc:	429a      	cmp	r2, r3
 8016ebe:	d102      	bne.n	8016ec6 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8016ec0:	2301      	movs	r3, #1
 8016ec2:	75fb      	strb	r3, [r7, #23]
 8016ec4:	e001      	b.n	8016eca <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8016ec6:	2300      	movs	r3, #0
 8016ec8:	75fb      	strb	r3, [r7, #23]
 8016eca:	693b      	ldr	r3, [r7, #16]
 8016ecc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016ece:	68bb      	ldr	r3, [r7, #8]
 8016ed0:	f383 8810 	msr	PRIMASK, r3
}
 8016ed4:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8016ed6:	7dfb      	ldrb	r3, [r7, #23]
}
 8016ed8:	4618      	mov	r0, r3
 8016eda:	371c      	adds	r7, #28
 8016edc:	46bd      	mov	sp, r7
 8016ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ee2:	4770      	bx	lr

08016ee4 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8016ee4:	b480      	push	{r7}
 8016ee6:	b087      	sub	sp, #28
 8016ee8:	af00      	add	r7, sp, #0
 8016eea:	6078      	str	r0, [r7, #4]
 8016eec:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016eee:	f3ef 8310 	mrs	r3, PRIMASK
 8016ef2:	60fb      	str	r3, [r7, #12]
  return(result);
 8016ef4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016ef6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016ef8:	b672      	cpsid	i
}
 8016efa:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	681a      	ldr	r2, [r3, #0]
 8016f00:	683b      	ldr	r3, [r7, #0]
 8016f02:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8016f04:	683b      	ldr	r3, [r7, #0]
 8016f06:	687a      	ldr	r2, [r7, #4]
 8016f08:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	683a      	ldr	r2, [r7, #0]
 8016f0e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8016f10:	683b      	ldr	r3, [r7, #0]
 8016f12:	681b      	ldr	r3, [r3, #0]
 8016f14:	683a      	ldr	r2, [r7, #0]
 8016f16:	605a      	str	r2, [r3, #4]
 8016f18:	697b      	ldr	r3, [r7, #20]
 8016f1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f1c:	693b      	ldr	r3, [r7, #16]
 8016f1e:	f383 8810 	msr	PRIMASK, r3
}
 8016f22:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016f24:	bf00      	nop
 8016f26:	371c      	adds	r7, #28
 8016f28:	46bd      	mov	sp, r7
 8016f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f2e:	4770      	bx	lr

08016f30 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8016f30:	b480      	push	{r7}
 8016f32:	b087      	sub	sp, #28
 8016f34:	af00      	add	r7, sp, #0
 8016f36:	6078      	str	r0, [r7, #4]
 8016f38:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016f3a:	f3ef 8310 	mrs	r3, PRIMASK
 8016f3e:	60fb      	str	r3, [r7, #12]
  return(result);
 8016f40:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016f42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016f44:	b672      	cpsid	i
}
 8016f46:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8016f48:	683b      	ldr	r3, [r7, #0]
 8016f4a:	687a      	ldr	r2, [r7, #4]
 8016f4c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	685a      	ldr	r2, [r3, #4]
 8016f52:	683b      	ldr	r3, [r7, #0]
 8016f54:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	683a      	ldr	r2, [r7, #0]
 8016f5a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8016f5c:	683b      	ldr	r3, [r7, #0]
 8016f5e:	685b      	ldr	r3, [r3, #4]
 8016f60:	683a      	ldr	r2, [r7, #0]
 8016f62:	601a      	str	r2, [r3, #0]
 8016f64:	697b      	ldr	r3, [r7, #20]
 8016f66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f68:	693b      	ldr	r3, [r7, #16]
 8016f6a:	f383 8810 	msr	PRIMASK, r3
}
 8016f6e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016f70:	bf00      	nop
 8016f72:	371c      	adds	r7, #28
 8016f74:	46bd      	mov	sp, r7
 8016f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f7a:	4770      	bx	lr

08016f7c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8016f7c:	b480      	push	{r7}
 8016f7e:	b087      	sub	sp, #28
 8016f80:	af00      	add	r7, sp, #0
 8016f82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016f84:	f3ef 8310 	mrs	r3, PRIMASK
 8016f88:	60fb      	str	r3, [r7, #12]
  return(result);
 8016f8a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016f8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016f8e:	b672      	cpsid	i
}
 8016f90:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	685b      	ldr	r3, [r3, #4]
 8016f96:	687a      	ldr	r2, [r7, #4]
 8016f98:	6812      	ldr	r2, [r2, #0]
 8016f9a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	681b      	ldr	r3, [r3, #0]
 8016fa0:	687a      	ldr	r2, [r7, #4]
 8016fa2:	6852      	ldr	r2, [r2, #4]
 8016fa4:	605a      	str	r2, [r3, #4]
 8016fa6:	697b      	ldr	r3, [r7, #20]
 8016fa8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016faa:	693b      	ldr	r3, [r7, #16]
 8016fac:	f383 8810 	msr	PRIMASK, r3
}
 8016fb0:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016fb2:	bf00      	nop
 8016fb4:	371c      	adds	r7, #28
 8016fb6:	46bd      	mov	sp, r7
 8016fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fbc:	4770      	bx	lr

08016fbe <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8016fbe:	b580      	push	{r7, lr}
 8016fc0:	b086      	sub	sp, #24
 8016fc2:	af00      	add	r7, sp, #0
 8016fc4:	6078      	str	r0, [r7, #4]
 8016fc6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016fc8:	f3ef 8310 	mrs	r3, PRIMASK
 8016fcc:	60fb      	str	r3, [r7, #12]
  return(result);
 8016fce:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016fd0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016fd2:	b672      	cpsid	i
}
 8016fd4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	681a      	ldr	r2, [r3, #0]
 8016fda:	683b      	ldr	r3, [r7, #0]
 8016fdc:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	681b      	ldr	r3, [r3, #0]
 8016fe2:	4618      	mov	r0, r3
 8016fe4:	f7ff ffca 	bl	8016f7c <LST_remove_node>
 8016fe8:	697b      	ldr	r3, [r7, #20]
 8016fea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016fec:	693b      	ldr	r3, [r7, #16]
 8016fee:	f383 8810 	msr	PRIMASK, r3
}
 8016ff2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016ff4:	bf00      	nop
 8016ff6:	3718      	adds	r7, #24
 8016ff8:	46bd      	mov	sp, r7
 8016ffa:	bd80      	pop	{r7, pc}

08016ffc <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8016ffc:	b480      	push	{r7}
 8016ffe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8017000:	4b03      	ldr	r3, [pc, #12]	; (8017010 <LL_FLASH_GetUDN+0x14>)
 8017002:	681b      	ldr	r3, [r3, #0]
}
 8017004:	4618      	mov	r0, r3
 8017006:	46bd      	mov	sp, r7
 8017008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801700c:	4770      	bx	lr
 801700e:	bf00      	nop
 8017010:	1fff7580 	.word	0x1fff7580

08017014 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8017014:	b480      	push	{r7}
 8017016:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8017018:	4b03      	ldr	r3, [pc, #12]	; (8017028 <LL_FLASH_GetDeviceID+0x14>)
 801701a:	681b      	ldr	r3, [r3, #0]
 801701c:	b2db      	uxtb	r3, r3
}
 801701e:	4618      	mov	r0, r3
 8017020:	46bd      	mov	sp, r7
 8017022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017026:	4770      	bx	lr
 8017028:	1fff7584 	.word	0x1fff7584

0801702c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 801702c:	b480      	push	{r7}
 801702e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8017030:	4b03      	ldr	r3, [pc, #12]	; (8017040 <LL_FLASH_GetSTCompanyID+0x14>)
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	0a1b      	lsrs	r3, r3, #8
}
 8017036:	4618      	mov	r0, r3
 8017038:	46bd      	mov	sp, r7
 801703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801703e:	4770      	bx	lr
 8017040:	1fff7584 	.word	0x1fff7584

08017044 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8017044:	b5b0      	push	{r4, r5, r7, lr}
 8017046:	b092      	sub	sp, #72	; 0x48
 8017048:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801704a:	2392      	movs	r3, #146	; 0x92
 801704c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
  uint8_t* BD_A = BleGetBdAddress();
 8017050:	f000 fa28 	bl	80174a4 <BleGetBdAddress>
 8017054:	6438      	str	r0, [r7, #64]	; 0x40
    a_AdvData[11]=BD_A[5];
 8017056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017058:	795a      	ldrb	r2, [r3, #5]
 801705a:	4b30      	ldr	r3, [pc, #192]	; (801711c <APP_BLE_Init+0xd8>)
 801705c:	72da      	strb	r2, [r3, #11]
    a_AdvData[12]=BD_A[4];
 801705e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017060:	791a      	ldrb	r2, [r3, #4]
 8017062:	4b2e      	ldr	r3, [pc, #184]	; (801711c <APP_BLE_Init+0xd8>)
 8017064:	731a      	strb	r2, [r3, #12]
    a_AdvData[13]=BD_A[3];
 8017066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017068:	78da      	ldrb	r2, [r3, #3]
 801706a:	4b2c      	ldr	r3, [pc, #176]	; (801711c <APP_BLE_Init+0xd8>)
 801706c:	735a      	strb	r2, [r3, #13]
    a_AdvData[14]=BD_A[2];
 801706e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017070:	789a      	ldrb	r2, [r3, #2]
 8017072:	4b2a      	ldr	r3, [pc, #168]	; (801711c <APP_BLE_Init+0xd8>)
 8017074:	739a      	strb	r2, [r3, #14]
    a_AdvData[15]=BD_A[1];
 8017076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017078:	785a      	ldrb	r2, [r3, #1]
 801707a:	4b28      	ldr	r3, [pc, #160]	; (801711c <APP_BLE_Init+0xd8>)
 801707c:	73da      	strb	r2, [r3, #15]
    a_AdvData[16]=BD_A[0];
 801707e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017080:	781a      	ldrb	r2, [r3, #0]
 8017082:	4b26      	ldr	r3, [pc, #152]	; (801711c <APP_BLE_Init+0xd8>)
 8017084:	741a      	strb	r2, [r3, #16]
  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8017086:	4b26      	ldr	r3, [pc, #152]	; (8017120 <APP_BLE_Init+0xdc>)
 8017088:	1d3c      	adds	r4, r7, #4
 801708a:	461d      	mov	r5, r3
 801708c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801708e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017090:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017092:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017094:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017096:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017098:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801709c:	c403      	stmia	r4!, {r0, r1}
 801709e:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 80170a0:	f000 f906 	bl	80172b0 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80170a4:	2101      	movs	r1, #1
 80170a6:	2002      	movs	r0, #2
 80170a8:	f003 f92c 	bl	801a304 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80170ac:	4a1d      	ldr	r2, [pc, #116]	; (8017124 <APP_BLE_Init+0xe0>)
 80170ae:	2100      	movs	r1, #0
 80170b0:	2002      	movs	r0, #2
 80170b2:	f003 fa89 	bl	801a5c8 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 80170b6:	1d3b      	adds	r3, r7, #4
 80170b8:	4618      	mov	r0, r3
 80170ba:	f7ff f8ab 	bl	8016214 <SHCI_C2_BLE_Init>
 80170be:	4603      	mov	r3, r0
 80170c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (status != SHCI_Success)
 80170c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	d001      	beq.n	80170d0 <APP_BLE_Init+0x8c>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 80170cc:	f7f5 f9c0 	bl	800c450 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80170d0:	f000 f904 	bl	80172dc <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80170d4:	f7fe fff8 	bl	80160c8 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80170d8:	4b13      	ldr	r3, [pc, #76]	; (8017128 <APP_BLE_Init+0xe4>)
 80170da:	2200      	movs	r2, #0
 80170dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80170e0:	4b11      	ldr	r3, [pc, #68]	; (8017128 <APP_BLE_Init+0xe4>)
 80170e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80170e6:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80170e8:	4a10      	ldr	r2, [pc, #64]	; (801712c <APP_BLE_Init+0xe8>)
 80170ea:	2100      	movs	r1, #0
 80170ec:	2001      	movs	r0, #1
 80170ee:	f003 fa6b 	bl	801a5c8 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 80170f2:	2006      	movs	r0, #6
 80170f4:	f7fe fe5c 	bl	8015db0 <aci_hal_set_radio_activity_mask>
 80170f8:	4603      	mov	r3, r0
 80170fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 80170fe:	f000 fc11 	bl	8017924 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8017102:	4b09      	ldr	r3, [pc, #36]	; (8017128 <APP_BLE_Init+0xe4>)
 8017104:	2200      	movs	r2, #0
 8017106:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8017108:	4b07      	ldr	r3, [pc, #28]	; (8017128 <APP_BLE_Init+0xe4>)
 801710a:	2200      	movs	r2, #0
 801710c:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 801710e:	2001      	movs	r0, #1
 8017110:	f000 f998 	bl	8017444 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8017114:	bf00      	nop
}
 8017116:	3748      	adds	r7, #72	; 0x48
 8017118:	46bd      	mov	sp, r7
 801711a:	bdb0      	pop	{r4, r5, r7, pc}
 801711c:	20000014 	.word	0x20000014
 8017120:	08020e14 	.word	0x08020e14
 8017124:	08016431 	.word	0x08016431
 8017128:	2000080c 	.word	0x2000080c
 801712c:	0801752d 	.word	0x0801752d

08017130 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8017130:	b580      	push	{r7, lr}
 8017132:	b08a      	sub	sp, #40	; 0x28
 8017134:	af00      	add	r7, sp, #0
 8017136:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8017138:	2392      	movs	r3, #146	; 0x92
 801713a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	3301      	adds	r3, #1
 8017142:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8017144:	6a3b      	ldr	r3, [r7, #32]
 8017146:	781b      	ldrb	r3, [r3, #0]
 8017148:	2bff      	cmp	r3, #255	; 0xff
 801714a:	d053      	beq.n	80171f4 <SVCCTL_App_Notification+0xc4>
 801714c:	2bff      	cmp	r3, #255	; 0xff
 801714e:	f300 80a1 	bgt.w	8017294 <SVCCTL_App_Notification+0x164>
 8017152:	2b05      	cmp	r3, #5
 8017154:	d002      	beq.n	801715c <SVCCTL_App_Notification+0x2c>
 8017156:	2b3e      	cmp	r3, #62	; 0x3e
 8017158:	d020      	beq.n	801719c <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 801715a:	e09b      	b.n	8017294 <SVCCTL_App_Notification+0x164>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 801715c:	6a3b      	ldr	r3, [r7, #32]
 801715e:	3302      	adds	r3, #2
 8017160:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8017162:	68fb      	ldr	r3, [r7, #12]
 8017164:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8017168:	b29a      	uxth	r2, r3
 801716a:	4b4e      	ldr	r3, [pc, #312]	; (80172a4 <SVCCTL_App_Notification+0x174>)
 801716c:	8adb      	ldrh	r3, [r3, #22]
 801716e:	429a      	cmp	r2, r3
 8017170:	d106      	bne.n	8017180 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8017172:	4b4c      	ldr	r3, [pc, #304]	; (80172a4 <SVCCTL_App_Notification+0x174>)
 8017174:	2200      	movs	r2, #0
 8017176:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8017178:	4b4a      	ldr	r3, [pc, #296]	; (80172a4 <SVCCTL_App_Notification+0x174>)
 801717a:	2200      	movs	r2, #0
 801717c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8017180:	2001      	movs	r0, #1
 8017182:	f000 f95f 	bl	8017444 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8017186:	4b48      	ldr	r3, [pc, #288]	; (80172a8 <SVCCTL_App_Notification+0x178>)
 8017188:	2201      	movs	r2, #1
 801718a:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 801718c:	4b45      	ldr	r3, [pc, #276]	; (80172a4 <SVCCTL_App_Notification+0x174>)
 801718e:	8ada      	ldrh	r2, [r3, #22]
 8017190:	4b45      	ldr	r3, [pc, #276]	; (80172a8 <SVCCTL_App_Notification+0x178>)
 8017192:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8017194:	4844      	ldr	r0, [pc, #272]	; (80172a8 <SVCCTL_App_Notification+0x178>)
 8017196:	f000 fbb1 	bl	80178fc <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 801719a:	e07e      	b.n	801729a <SVCCTL_App_Notification+0x16a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 801719c:	6a3b      	ldr	r3, [r7, #32]
 801719e:	3302      	adds	r3, #2
 80171a0:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 80171a2:	697b      	ldr	r3, [r7, #20]
 80171a4:	781b      	ldrb	r3, [r3, #0]
 80171a6:	2b01      	cmp	r3, #1
 80171a8:	d001      	beq.n	80171ae <SVCCTL_App_Notification+0x7e>
 80171aa:	2b03      	cmp	r3, #3
          break;
 80171ac:	e021      	b.n	80171f2 <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 80171ae:	697b      	ldr	r3, [r7, #20]
 80171b0:	3301      	adds	r3, #1
 80171b2:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80171b4:	4b3b      	ldr	r3, [pc, #236]	; (80172a4 <SVCCTL_App_Notification+0x174>)
 80171b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80171ba:	2b04      	cmp	r3, #4
 80171bc:	d104      	bne.n	80171c8 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80171be:	4b39      	ldr	r3, [pc, #228]	; (80172a4 <SVCCTL_App_Notification+0x174>)
 80171c0:	2206      	movs	r2, #6
 80171c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80171c6:	e003      	b.n	80171d0 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80171c8:	4b36      	ldr	r3, [pc, #216]	; (80172a4 <SVCCTL_App_Notification+0x174>)
 80171ca:	2205      	movs	r2, #5
 80171cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 80171d0:	693b      	ldr	r3, [r7, #16]
 80171d2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80171d6:	b29a      	uxth	r2, r3
 80171d8:	4b32      	ldr	r3, [pc, #200]	; (80172a4 <SVCCTL_App_Notification+0x174>)
 80171da:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 80171dc:	4b32      	ldr	r3, [pc, #200]	; (80172a8 <SVCCTL_App_Notification+0x178>)
 80171de:	2200      	movs	r2, #0
 80171e0:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80171e2:	4b30      	ldr	r3, [pc, #192]	; (80172a4 <SVCCTL_App_Notification+0x174>)
 80171e4:	8ada      	ldrh	r2, [r3, #22]
 80171e6:	4b30      	ldr	r3, [pc, #192]	; (80172a8 <SVCCTL_App_Notification+0x178>)
 80171e8:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 80171ea:	482f      	ldr	r0, [pc, #188]	; (80172a8 <SVCCTL_App_Notification+0x178>)
 80171ec:	f000 fb86 	bl	80178fc <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 80171f0:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 80171f2:	e052      	b.n	801729a <SVCCTL_App_Notification+0x16a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 80171f4:	6a3b      	ldr	r3, [r7, #32]
 80171f6:	3302      	adds	r3, #2
 80171f8:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 80171fa:	69fb      	ldr	r3, [r7, #28]
 80171fc:	881b      	ldrh	r3, [r3, #0]
 80171fe:	b29b      	uxth	r3, r3
 8017200:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017204:	d040      	beq.n	8017288 <SVCCTL_App_Notification+0x158>
 8017206:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801720a:	dc45      	bgt.n	8017298 <SVCCTL_App_Notification+0x168>
 801720c:	2b04      	cmp	r3, #4
 801720e:	d03d      	beq.n	801728c <SVCCTL_App_Notification+0x15c>
 8017210:	2b04      	cmp	r3, #4
 8017212:	db41      	blt.n	8017298 <SVCCTL_App_Notification+0x168>
 8017214:	f240 420a 	movw	r2, #1034	; 0x40a
 8017218:	4293      	cmp	r3, r2
 801721a:	dc3d      	bgt.n	8017298 <SVCCTL_App_Notification+0x168>
 801721c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017220:	dd3a      	ble.n	8017298 <SVCCTL_App_Notification+0x168>
 8017222:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8017226:	2b09      	cmp	r3, #9
 8017228:	d836      	bhi.n	8017298 <SVCCTL_App_Notification+0x168>
 801722a:	a201      	add	r2, pc, #4	; (adr r2, 8017230 <SVCCTL_App_Notification+0x100>)
 801722c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017230:	08017281 	.word	0x08017281
 8017234:	08017259 	.word	0x08017259
 8017238:	08017299 	.word	0x08017299
 801723c:	08017299 	.word	0x08017299
 8017240:	08017299 	.word	0x08017299
 8017244:	08017299 	.word	0x08017299
 8017248:	08017291 	.word	0x08017291
 801724c:	08017299 	.word	0x08017299
 8017250:	0801726d 	.word	0x0801726d
 8017254:	08017291 	.word	0x08017291
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8017258:	4b12      	ldr	r3, [pc, #72]	; (80172a4 <SVCCTL_App_Notification+0x174>)
 801725a:	8adb      	ldrh	r3, [r3, #22]
 801725c:	4913      	ldr	r1, [pc, #76]	; (80172ac <SVCCTL_App_Notification+0x17c>)
 801725e:	4618      	mov	r0, r3
 8017260:	f7fd ffa8 	bl	80151b4 <aci_gap_pass_key_resp>
 8017264:	4603      	mov	r3, r0
 8017266:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 801726a:	e012      	b.n	8017292 <SVCCTL_App_Notification+0x162>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 801726c:	4b0d      	ldr	r3, [pc, #52]	; (80172a4 <SVCCTL_App_Notification+0x174>)
 801726e:	8adb      	ldrh	r3, [r3, #22]
 8017270:	2101      	movs	r1, #1
 8017272:	4618      	mov	r0, r3
 8017274:	f7fe f948 	bl	8015508 <aci_gap_numeric_comparison_value_confirm_yesno>
 8017278:	4603      	mov	r3, r0
 801727a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 801727e:	e008      	b.n	8017292 <SVCCTL_App_Notification+0x162>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8017280:	69fb      	ldr	r3, [r7, #28]
 8017282:	3302      	adds	r3, #2
 8017284:	61bb      	str	r3, [r7, #24]
          break;
 8017286:	e004      	b.n	8017292 <SVCCTL_App_Notification+0x162>
          break;
 8017288:	bf00      	nop
 801728a:	e005      	b.n	8017298 <SVCCTL_App_Notification+0x168>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 801728c:	bf00      	nop
 801728e:	e003      	b.n	8017298 <SVCCTL_App_Notification+0x168>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8017290:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8017292:	e001      	b.n	8017298 <SVCCTL_App_Notification+0x168>
      break;
 8017294:	bf00      	nop
 8017296:	e000      	b.n	801729a <SVCCTL_App_Notification+0x16a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8017298:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 801729a:	2301      	movs	r3, #1
}
 801729c:	4618      	mov	r0, r3
 801729e:	3728      	adds	r7, #40	; 0x28
 80172a0:	46bd      	mov	sp, r7
 80172a2:	bd80      	pop	{r7, pc}
 80172a4:	2000080c 	.word	0x2000080c
 80172a8:	20000890 	.word	0x20000890
 80172ac:	0001b207 	.word	0x0001b207

080172b0 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80172b0:	b580      	push	{r7, lr}
 80172b2:	b082      	sub	sp, #8
 80172b4:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80172b6:	4b06      	ldr	r3, [pc, #24]	; (80172d0 <Ble_Tl_Init+0x20>)
 80172b8:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80172ba:	4b06      	ldr	r3, [pc, #24]	; (80172d4 <Ble_Tl_Init+0x24>)
 80172bc:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80172be:	463b      	mov	r3, r7
 80172c0:	4619      	mov	r1, r3
 80172c2:	4805      	ldr	r0, [pc, #20]	; (80172d8 <Ble_Tl_Init+0x28>)
 80172c4:	f7ff f898 	bl	80163f8 <hci_init>

  return;
 80172c8:	bf00      	nop
}
 80172ca:	3708      	adds	r7, #8
 80172cc:	46bd      	mov	sp, r7
 80172ce:	bd80      	pop	{r7, pc}
 80172d0:	200300d8 	.word	0x200300d8
 80172d4:	080175dd 	.word	0x080175dd
 80172d8:	080175a5 	.word	0x080175a5

080172dc <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 80172dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80172de:	b08d      	sub	sp, #52	; 0x34
 80172e0:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 80172e2:	2300      	movs	r3, #0
 80172e4:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80172e6:	2392      	movs	r3, #146	; 0x92
 80172e8:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 80172ea:	f7fe fdb5 	bl	8015e58 <hci_reset>
 80172ee:	4603      	mov	r3, r0
 80172f0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 80172f2:	f000 f8d7 	bl	80174a4 <BleGetBdAddress>
 80172f6:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 80172f8:	693a      	ldr	r2, [r7, #16]
 80172fa:	2106      	movs	r1, #6
 80172fc:	2000      	movs	r0, #0
 80172fe:	f7fe fc6b 	bl	8015bd8 <aci_hal_write_config_data>
 8017302:	4603      	mov	r3, r0
 8017304:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8017306:	4a4a      	ldr	r2, [pc, #296]	; (8017430 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8017308:	2110      	movs	r1, #16
 801730a:	2018      	movs	r0, #24
 801730c:	f7fe fc64 	bl	8015bd8 <aci_hal_write_config_data>
 8017310:	4603      	mov	r3, r0
 8017312:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8017314:	4a47      	ldr	r2, [pc, #284]	; (8017434 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8017316:	2110      	movs	r1, #16
 8017318:	2008      	movs	r0, #8
 801731a:	f7fe fc5d 	bl	8015bd8 <aci_hal_write_config_data>
 801731e:	4603      	mov	r3, r0
 8017320:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8017322:	211f      	movs	r1, #31
 8017324:	2001      	movs	r0, #1
 8017326:	f7fe fcdc 	bl	8015ce2 <aci_hal_set_tx_power_level>
 801732a:	4603      	mov	r3, r0
 801732c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 801732e:	f7fe f952 	bl	80155d6 <aci_gatt_init>
 8017332:	4603      	mov	r3, r0
 8017334:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8017336:	2300      	movs	r3, #0
 8017338:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 801733a:	7bfb      	ldrb	r3, [r7, #15]
 801733c:	f043 0301 	orr.w	r3, r3, #1
 8017340:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8017342:	7bfb      	ldrb	r3, [r7, #15]
 8017344:	2b00      	cmp	r3, #0
 8017346:	d01f      	beq.n	8017388 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8017348:	4b3b      	ldr	r3, [pc, #236]	; (8017438 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 801734a:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 801734c:	1dba      	adds	r2, r7, #6
 801734e:	7bf8      	ldrb	r0, [r7, #15]
 8017350:	1cbb      	adds	r3, r7, #2
 8017352:	9301      	str	r3, [sp, #4]
 8017354:	1d3b      	adds	r3, r7, #4
 8017356:	9300      	str	r3, [sp, #0]
 8017358:	4613      	mov	r3, r2
 801735a:	2204      	movs	r2, #4
 801735c:	2100      	movs	r1, #0
 801735e:	f7fd ff90 	bl	8015282 <aci_gap_init>
 8017362:	4603      	mov	r3, r0
 8017364:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8017366:	88fc      	ldrh	r4, [r7, #6]
 8017368:	88bd      	ldrh	r5, [r7, #4]
 801736a:	68b8      	ldr	r0, [r7, #8]
 801736c:	f7f1 f990 	bl	8008690 <strlen>
 8017370:	4603      	mov	r3, r0
 8017372:	b2da      	uxtb	r2, r3
 8017374:	68bb      	ldr	r3, [r7, #8]
 8017376:	9300      	str	r3, [sp, #0]
 8017378:	4613      	mov	r3, r2
 801737a:	2200      	movs	r2, #0
 801737c:	4629      	mov	r1, r5
 801737e:	4620      	mov	r0, r4
 8017380:	f7fe fb2c 	bl	80159dc <aci_gatt_update_char_value>
 8017384:	4603      	mov	r3, r0
 8017386:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8017388:	88f8      	ldrh	r0, [r7, #6]
 801738a:	8879      	ldrh	r1, [r7, #2]
 801738c:	463b      	mov	r3, r7
 801738e:	9300      	str	r3, [sp, #0]
 8017390:	2302      	movs	r3, #2
 8017392:	2200      	movs	r2, #0
 8017394:	f7fe fb22 	bl	80159dc <aci_gatt_update_char_value>
 8017398:	4603      	mov	r3, r0
 801739a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 801739c:	2202      	movs	r2, #2
 801739e:	2102      	movs	r1, #2
 80173a0:	2000      	movs	r0, #0
 80173a2:	f7fe fd7d 	bl	8015ea0 <hci_le_set_default_phy>
 80173a6:	4603      	mov	r3, r0
 80173a8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80173aa:	4b24      	ldr	r3, [pc, #144]	; (801743c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80173ac:	2200      	movs	r2, #0
 80173ae:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80173b0:	4b22      	ldr	r3, [pc, #136]	; (801743c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80173b2:	781b      	ldrb	r3, [r3, #0]
 80173b4:	4618      	mov	r0, r3
 80173b6:	f7fd fde5 	bl	8014f84 <aci_gap_set_io_capability>
 80173ba:	4603      	mov	r3, r0
 80173bc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80173be:	4b1f      	ldr	r3, [pc, #124]	; (801743c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80173c0:	2201      	movs	r2, #1
 80173c2:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80173c4:	4b1d      	ldr	r3, [pc, #116]	; (801743c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80173c6:	2208      	movs	r2, #8
 80173c8:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 80173ca:	4b1c      	ldr	r3, [pc, #112]	; (801743c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80173cc:	2210      	movs	r2, #16
 80173ce:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 80173d0:	4b1a      	ldr	r3, [pc, #104]	; (801743c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80173d2:	2200      	movs	r2, #0
 80173d4:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 80173d6:	4b19      	ldr	r3, [pc, #100]	; (801743c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80173d8:	4a19      	ldr	r2, [pc, #100]	; (8017440 <Ble_Hci_Gap_Gatt_Init+0x164>)
 80173da:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 80173dc:	4b17      	ldr	r3, [pc, #92]	; (801743c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80173de:	2201      	movs	r2, #1
 80173e0:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 80173e2:	4b16      	ldr	r3, [pc, #88]	; (801743c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80173e4:	789c      	ldrb	r4, [r3, #2]
 80173e6:	4b15      	ldr	r3, [pc, #84]	; (801743c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80173e8:	785d      	ldrb	r5, [r3, #1]
 80173ea:	4b14      	ldr	r3, [pc, #80]	; (801743c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80173ec:	791b      	ldrb	r3, [r3, #4]
 80173ee:	4a13      	ldr	r2, [pc, #76]	; (801743c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80173f0:	7952      	ldrb	r2, [r2, #5]
 80173f2:	4912      	ldr	r1, [pc, #72]	; (801743c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80173f4:	78c9      	ldrb	r1, [r1, #3]
 80173f6:	4811      	ldr	r0, [pc, #68]	; (801743c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80173f8:	6880      	ldr	r0, [r0, #8]
 80173fa:	2600      	movs	r6, #0
 80173fc:	9604      	str	r6, [sp, #16]
 80173fe:	9003      	str	r0, [sp, #12]
 8017400:	9102      	str	r1, [sp, #8]
 8017402:	9201      	str	r2, [sp, #4]
 8017404:	9300      	str	r3, [sp, #0]
 8017406:	2300      	movs	r3, #0
 8017408:	2201      	movs	r2, #1
 801740a:	4629      	mov	r1, r5
 801740c:	4620      	mov	r0, r4
 801740e:	f7fd fe0d 	bl	801502c <aci_gap_set_authentication_requirement>
 8017412:	4603      	mov	r3, r0
 8017414:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8017416:	4b09      	ldr	r3, [pc, #36]	; (801743c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017418:	789b      	ldrb	r3, [r3, #2]
 801741a:	2b00      	cmp	r3, #0
 801741c:	d003      	beq.n	8017426 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 801741e:	f7fe f84f 	bl	80154c0 <aci_gap_configure_filter_accept_list>
 8017422:	4603      	mov	r3, r0
 8017424:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8017426:	bf00      	nop
 8017428:	371c      	adds	r7, #28
 801742a:	46bd      	mov	sp, r7
 801742c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801742e:	bf00      	nop
 8017430:	080214e8 	.word	0x080214e8
 8017434:	080214f8 	.word	0x080214f8
 8017438:	08020e50 	.word	0x08020e50
 801743c:	2000080c 	.word	0x2000080c
 8017440:	0001b207 	.word	0x0001b207

08017444 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8017444:	b580      	push	{r7, lr}
 8017446:	b08c      	sub	sp, #48	; 0x30
 8017448:	af08      	add	r7, sp, #32
 801744a:	4603      	mov	r3, r0
 801744c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801744e:	2392      	movs	r3, #146	; 0x92
 8017450:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8017452:	4a12      	ldr	r2, [pc, #72]	; (801749c <Adv_Request+0x58>)
 8017454:	79fb      	ldrb	r3, [r7, #7]
 8017456:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 801745a:	2300      	movs	r3, #0
 801745c:	9306      	str	r3, [sp, #24]
 801745e:	2300      	movs	r3, #0
 8017460:	9305      	str	r3, [sp, #20]
 8017462:	2300      	movs	r3, #0
 8017464:	9304      	str	r3, [sp, #16]
 8017466:	2300      	movs	r3, #0
 8017468:	9303      	str	r3, [sp, #12]
 801746a:	2300      	movs	r3, #0
 801746c:	9302      	str	r3, [sp, #8]
 801746e:	2300      	movs	r3, #0
 8017470:	9301      	str	r3, [sp, #4]
 8017472:	2300      	movs	r3, #0
 8017474:	9300      	str	r3, [sp, #0]
 8017476:	2300      	movs	r3, #0
 8017478:	22a0      	movs	r2, #160	; 0xa0
 801747a:	2180      	movs	r1, #128	; 0x80
 801747c:	2000      	movs	r0, #0
 801747e:	f7fd fc87 	bl	8014d90 <aci_gap_set_discoverable>
 8017482:	4603      	mov	r3, r0
 8017484:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8017486:	4906      	ldr	r1, [pc, #24]	; (80174a0 <Adv_Request+0x5c>)
 8017488:	2015      	movs	r0, #21
 801748a:	f7fd ffa7 	bl	80153dc <aci_gap_update_adv_data>
 801748e:	4603      	mov	r3, r0
 8017490:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8017492:	bf00      	nop
}
 8017494:	3710      	adds	r7, #16
 8017496:	46bd      	mov	sp, r7
 8017498:	bd80      	pop	{r7, pc}
 801749a:	bf00      	nop
 801749c:	2000080c 	.word	0x2000080c
 80174a0:	20000014 	.word	0x20000014

080174a4 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 80174a4:	b580      	push	{r7, lr}
 80174a6:	b086      	sub	sp, #24
 80174a8:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80174aa:	f7ff fda7 	bl	8016ffc <LL_FLASH_GetUDN>
 80174ae:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 80174b0:	693b      	ldr	r3, [r7, #16]
 80174b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80174b6:	d023      	beq.n	8017500 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80174b8:	f7ff fdb8 	bl	801702c <LL_FLASH_GetSTCompanyID>
 80174bc:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80174be:	f7ff fda9 	bl	8017014 <LL_FLASH_GetDeviceID>
 80174c2:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 80174c4:	693b      	ldr	r3, [r7, #16]
 80174c6:	b2da      	uxtb	r2, r3
 80174c8:	4b16      	ldr	r3, [pc, #88]	; (8017524 <BleGetBdAddress+0x80>)
 80174ca:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 80174cc:	693b      	ldr	r3, [r7, #16]
 80174ce:	0a1b      	lsrs	r3, r3, #8
 80174d0:	b2da      	uxtb	r2, r3
 80174d2:	4b14      	ldr	r3, [pc, #80]	; (8017524 <BleGetBdAddress+0x80>)
 80174d4:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	b2da      	uxtb	r2, r3
 80174da:	4b12      	ldr	r3, [pc, #72]	; (8017524 <BleGetBdAddress+0x80>)
 80174dc:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 80174de:	68bb      	ldr	r3, [r7, #8]
 80174e0:	b2da      	uxtb	r2, r3
 80174e2:	4b10      	ldr	r3, [pc, #64]	; (8017524 <BleGetBdAddress+0x80>)
 80174e4:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 80174e6:	68bb      	ldr	r3, [r7, #8]
 80174e8:	0a1b      	lsrs	r3, r3, #8
 80174ea:	b2da      	uxtb	r2, r3
 80174ec:	4b0d      	ldr	r3, [pc, #52]	; (8017524 <BleGetBdAddress+0x80>)
 80174ee:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 80174f0:	68bb      	ldr	r3, [r7, #8]
 80174f2:	0c1b      	lsrs	r3, r3, #16
 80174f4:	b2da      	uxtb	r2, r3
 80174f6:	4b0b      	ldr	r3, [pc, #44]	; (8017524 <BleGetBdAddress+0x80>)
 80174f8:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 80174fa:	4b0a      	ldr	r3, [pc, #40]	; (8017524 <BleGetBdAddress+0x80>)
 80174fc:	617b      	str	r3, [r7, #20]
 80174fe:	e00b      	b.n	8017518 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8017500:	2000      	movs	r0, #0
 8017502:	f7ff fc95 	bl	8016e30 <OTP_Read>
 8017506:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8017508:	68fb      	ldr	r3, [r7, #12]
 801750a:	2b00      	cmp	r3, #0
 801750c:	d002      	beq.n	8017514 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 801750e:	68fb      	ldr	r3, [r7, #12]
 8017510:	617b      	str	r3, [r7, #20]
 8017512:	e001      	b.n	8017518 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8017514:	4b04      	ldr	r3, [pc, #16]	; (8017528 <BleGetBdAddress+0x84>)
 8017516:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8017518:	697b      	ldr	r3, [r7, #20]
}
 801751a:	4618      	mov	r0, r3
 801751c:	3718      	adds	r7, #24
 801751e:	46bd      	mov	sp, r7
 8017520:	bd80      	pop	{r7, pc}
 8017522:	bf00      	nop
 8017524:	20000804 	.word	0x20000804
 8017528:	080214e0 	.word	0x080214e0

0801752c <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 801752c:	b580      	push	{r7, lr}
 801752e:	b082      	sub	sp, #8
 8017530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8017532:	4b0a      	ldr	r3, [pc, #40]	; (801755c <Adv_Cancel+0x30>)
 8017534:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8017538:	2b05      	cmp	r3, #5
 801753a:	d00a      	beq.n	8017552 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801753c:	2392      	movs	r3, #146	; 0x92
 801753e:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8017540:	f7fd fc02 	bl	8014d48 <aci_gap_set_non_discoverable>
 8017544:	4603      	mov	r3, r0
 8017546:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8017548:	4b04      	ldr	r3, [pc, #16]	; (801755c <Adv_Cancel+0x30>)
 801754a:	2200      	movs	r2, #0
 801754c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8017550:	bf00      	nop
 8017552:	bf00      	nop
}
 8017554:	3708      	adds	r7, #8
 8017556:	46bd      	mov	sp, r7
 8017558:	bd80      	pop	{r7, pc}
 801755a:	bf00      	nop
 801755c:	2000080c 	.word	0x2000080c

08017560 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8017560:	b580      	push	{r7, lr}
 8017562:	b082      	sub	sp, #8
 8017564:	af00      	add	r7, sp, #0
 8017566:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8017568:	2100      	movs	r1, #0
 801756a:	2002      	movs	r0, #2
 801756c:	f003 f84e 	bl	801a60c <UTIL_SEQ_SetTask>

  return;
 8017570:	bf00      	nop
}
 8017572:	3708      	adds	r7, #8
 8017574:	46bd      	mov	sp, r7
 8017576:	bd80      	pop	{r7, pc}

08017578 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8017578:	b580      	push	{r7, lr}
 801757a:	b082      	sub	sp, #8
 801757c:	af00      	add	r7, sp, #0
 801757e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8017580:	2001      	movs	r0, #1
 8017582:	f003 f8d5 	bl	801a730 <UTIL_SEQ_SetEvt>

  return;
 8017586:	bf00      	nop
}
 8017588:	3708      	adds	r7, #8
 801758a:	46bd      	mov	sp, r7
 801758c:	bd80      	pop	{r7, pc}

0801758e <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 801758e:	b580      	push	{r7, lr}
 8017590:	b082      	sub	sp, #8
 8017592:	af00      	add	r7, sp, #0
 8017594:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8017596:	2001      	movs	r0, #1
 8017598:	f003 f8ea 	bl	801a770 <UTIL_SEQ_WaitEvt>

  return;
 801759c:	bf00      	nop
}
 801759e:	3708      	adds	r7, #8
 80175a0:	46bd      	mov	sp, r7
 80175a2:	bd80      	pop	{r7, pc}

080175a4 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 80175a4:	b580      	push	{r7, lr}
 80175a6:	b084      	sub	sp, #16
 80175a8:	af00      	add	r7, sp, #0
 80175aa:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	685b      	ldr	r3, [r3, #4]
 80175b4:	3308      	adds	r3, #8
 80175b6:	4618      	mov	r0, r3
 80175b8:	f7fe fdd8 	bl	801616c <SVCCTL_UserEvtRx>
 80175bc:	4603      	mov	r3, r0
 80175be:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80175c0:	7afb      	ldrb	r3, [r7, #11]
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d003      	beq.n	80175ce <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 80175c6:	68fb      	ldr	r3, [r7, #12]
 80175c8:	2201      	movs	r2, #1
 80175ca:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 80175cc:	e003      	b.n	80175d6 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 80175ce:	68fb      	ldr	r3, [r7, #12]
 80175d0:	2200      	movs	r2, #0
 80175d2:	701a      	strb	r2, [r3, #0]
  return;
 80175d4:	bf00      	nop
}
 80175d6:	3710      	adds	r7, #16
 80175d8:	46bd      	mov	sp, r7
 80175da:	bd80      	pop	{r7, pc}

080175dc <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 80175dc:	b580      	push	{r7, lr}
 80175de:	b084      	sub	sp, #16
 80175e0:	af00      	add	r7, sp, #0
 80175e2:	4603      	mov	r3, r0
 80175e4:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 80175e6:	79fb      	ldrb	r3, [r7, #7]
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d002      	beq.n	80175f2 <BLE_StatusNot+0x16>
 80175ec:	2b01      	cmp	r3, #1
 80175ee:	d006      	beq.n	80175fe <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 80175f0:	e00b      	b.n	801760a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80175f2:	231f      	movs	r3, #31
 80175f4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80175f6:	68f8      	ldr	r0, [r7, #12]
 80175f8:	f003 f834 	bl	801a664 <UTIL_SEQ_PauseTask>
      break;
 80175fc:	e005      	b.n	801760a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80175fe:	231f      	movs	r3, #31
 8017600:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8017602:	68f8      	ldr	r0, [r7, #12]
 8017604:	f003 f874 	bl	801a6f0 <UTIL_SEQ_ResumeTask>
      break;
 8017608:	bf00      	nop
  }

  return;
 801760a:	bf00      	nop
}
 801760c:	3710      	adds	r7, #16
 801760e:	46bd      	mov	sp, r7
 8017610:	bd80      	pop	{r7, pc}
	...

08017614 <__NVIC_SystemReset>:
{
 8017614:	b480      	push	{r7}
 8017616:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8017618:	f3bf 8f4f 	dsb	sy
}
 801761c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801761e:	4b06      	ldr	r3, [pc, #24]	; (8017638 <__NVIC_SystemReset+0x24>)
 8017620:	68db      	ldr	r3, [r3, #12]
 8017622:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8017626:	4904      	ldr	r1, [pc, #16]	; (8017638 <__NVIC_SystemReset+0x24>)
 8017628:	4b04      	ldr	r3, [pc, #16]	; (801763c <__NVIC_SystemReset+0x28>)
 801762a:	4313      	orrs	r3, r2
 801762c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801762e:	f3bf 8f4f 	dsb	sy
}
 8017632:	bf00      	nop
    __NOP();
 8017634:	bf00      	nop
 8017636:	e7fd      	b.n	8017634 <__NVIC_SystemReset+0x20>
 8017638:	e000ed00 	.word	0xe000ed00
 801763c:	05fa0004 	.word	0x05fa0004

08017640 <HSxxxx_MeasurementDuration>:
 * 
 * @param sensor  Pointer to the sensor object to be queried.
 * @return int    Duration of temperature measurement cycle
 */
static inline int 
HSxxxx_MeasurementDuration ( HSxxxx_t*  sensor ) {
 8017640:	b480      	push	{r7}
 8017642:	b083      	sub	sp, #12
 8017644:	af00      	add	r7, sp, #0
 8017646:	6078      	str	r0, [r7, #4]
  if ( sensor ) {
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	2b00      	cmp	r3, #0
 801764c:	d00b      	beq.n	8017666 <HSxxxx_MeasurementDuration+0x26>
    if ( sensor -> i2cAddress == 0x44 ) {
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	791b      	ldrb	r3, [r3, #4]
 8017652:	2b44      	cmp	r3, #68	; 0x44
 8017654:	d101      	bne.n	801765a <HSxxxx_MeasurementDuration+0x1a>
      return 35;
 8017656:	2323      	movs	r3, #35	; 0x23
 8017658:	e006      	b.n	8017668 <HSxxxx_MeasurementDuration+0x28>
    }
    else if ( sensor -> i2cAddress == 0x54 ) {
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	791b      	ldrb	r3, [r3, #4]
 801765e:	2b54      	cmp	r3, #84	; 0x54
 8017660:	d101      	bne.n	8017666 <HSxxxx_MeasurementDuration+0x26>
      return 2;
 8017662:	2302      	movs	r3, #2
 8017664:	e000      	b.n	8017668 <HSxxxx_MeasurementDuration+0x28>
    }
  }
  return 0;
 8017666:	2300      	movs	r3, #0
}
 8017668:	4618      	mov	r0, r3
 801766a:	370c      	adds	r7, #12
 801766c:	46bd      	mov	sp, r7
 801766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017672:	4770      	bx	lr

08017674 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8017674:	b580      	push	{r7, lr}
 8017676:	b084      	sub	sp, #16
 8017678:	af00      	add	r7, sp, #0
 801767a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	781b      	ldrb	r3, [r3, #0]
 8017680:	2b21      	cmp	r3, #33	; 0x21
 8017682:	f200 8120 	bhi.w	80178c6 <Custom_STM_App_Notification+0x252>
 8017686:	a201      	add	r2, pc, #4	; (adr r2, 801768c <Custom_STM_App_Notification+0x18>)
 8017688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801768c:	08017715 	.word	0x08017715
 8017690:	0801771b 	.word	0x0801771b
 8017694:	080178c7 	.word	0x080178c7
 8017698:	08017721 	.word	0x08017721
 801769c:	080178c7 	.word	0x080178c7
 80176a0:	08017727 	.word	0x08017727
 80176a4:	080178c7 	.word	0x080178c7
 80176a8:	0801772d 	.word	0x0801772d
 80176ac:	080178c7 	.word	0x080178c7
 80176b0:	08017733 	.word	0x08017733
 80176b4:	080178c7 	.word	0x080178c7
 80176b8:	08017739 	.word	0x08017739
 80176bc:	080178c7 	.word	0x080178c7
 80176c0:	0801773f 	.word	0x0801773f
 80176c4:	080178c7 	.word	0x080178c7
 80176c8:	08017745 	.word	0x08017745
 80176cc:	080178c7 	.word	0x080178c7
 80176d0:	0801774b 	.word	0x0801774b
 80176d4:	080178c7 	.word	0x080178c7
 80176d8:	08017751 	.word	0x08017751
 80176dc:	080178c7 	.word	0x080178c7
 80176e0:	08017757 	.word	0x08017757
 80176e4:	080178c7 	.word	0x080178c7
 80176e8:	0801775d 	.word	0x0801775d
 80176ec:	08017789 	.word	0x08017789
 80176f0:	080177a7 	.word	0x080177a7
 80176f4:	080177d3 	.word	0x080177d3
 80176f8:	080178c7 	.word	0x080178c7
 80176fc:	080178c7 	.word	0x080178c7
 8017700:	080177f1 	.word	0x080177f1
 8017704:	080177ff 	.word	0x080177ff
 8017708:	080178c7 	.word	0x080178c7
 801770c:	080178c7 	.word	0x080178c7
 8017710:	080178b1 	.word	0x080178b1
    /* USER CODE END CUSTOM_STM_App_Notification_Custom_Evt_Opcode */

    /* Battery_Service */
    case CUSTOM_STM_BAT_LEVEL_READ_EVT:
      /* USER CODE BEGIN CUSTOM_STM_BAT_LEVEL_READ_EVT */
    	Custom_Bat_level_Send_Notification();
 8017714:	f000 f934 	bl	8017980 <Custom_Bat_level_Send_Notification>
      /* USER CODE END CUSTOM_STM_BAT_LEVEL_READ_EVT */
      break;
 8017718:	e0d8      	b.n	80178cc <Custom_STM_App_Notification+0x258>

    case CUSTOM_STM_BAT_LEVEL_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_BAT_LEVEL_NOTIFY_ENABLED_EVT */
    	Custom_Bat_level_Send_Notification();
 801771a:	f000 f931 	bl	8017980 <Custom_Bat_level_Send_Notification>
      /* USER CODE END CUSTOM_STM_BAT_LEVEL_NOTIFY_ENABLED_EVT */
      break;
 801771e:	e0d5      	b.n	80178cc <Custom_STM_App_Notification+0x258>
      /* USER CODE END CUSTOM_STM_BAT_LEVEL_NOTIFY_DISABLED_EVT */
      break;

    case CUSTOM_STM_EOC_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_EOC_NOTIFY_ENABLED_EVT */
    	Custom_Eoc_Send_Notification();
 8017720:	f000 f948 	bl	80179b4 <Custom_Eoc_Send_Notification>

      /* USER CODE END CUSTOM_STM_EOC_NOTIFY_ENABLED_EVT */
      break;
 8017724:	e0d2      	b.n	80178cc <Custom_STM_App_Notification+0x258>
      /* USER CODE END CUSTOM_STM_EOC_NOTIFY_DISABLED_EVT */
      break;

    case CUSTOM_STM_PWR_GD_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_PWR_GD_NOTIFY_ENABLED_EVT */
    	Custom_Pwr_gd_Send_Notification();
 8017726:	f000 f95d 	bl	80179e4 <Custom_Pwr_gd_Send_Notification>
      /* USER CODE END CUSTOM_STM_PWR_GD_NOTIFY_ENABLED_EVT */
      break;
 801772a:	e0cf      	b.n	80178cc <Custom_STM_App_Notification+0x258>
      break;

    /* Gases */
    case CUSTOM_STM_IAQ_IN_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_IAQ_IN_NOTIFY_ENABLED_EVT */
    	Custom_Iaq_in_Send_Notification();
 801772c:	f000 f972 	bl	8017a14 <Custom_Iaq_in_Send_Notification>
      /* USER CODE END CUSTOM_STM_IAQ_IN_NOTIFY_ENABLED_EVT */
      break;
 8017730:	e0cc      	b.n	80178cc <Custom_STM_App_Notification+0x258>
      /* USER CODE END CUSTOM_STM_IAQ_IN_NOTIFY_DISABLED_EVT */
      break;

    case CUSTOM_STM_RELATIVE_IA_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_RELATIVE_IA_NOTIFY_ENABLED_EVT */
    	Custom_Relative_ia_Send_Notification();
 8017732:	f000 f993 	bl	8017a5c <Custom_Relative_ia_Send_Notification>
      /* USER CODE END CUSTOM_STM_RELATIVE_IA_NOTIFY_ENABLED_EVT */
      break;
 8017736:	e0c9      	b.n	80178cc <Custom_STM_App_Notification+0x258>
      /* USER CODE END CUSTOM_STM_RELATIVE_IA_NOTIFY_DISABLED_EVT */
      break;

    case CUSTOM_STM_TVOC_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_TVOC_NOTIFY_ENABLED_EVT */
    	Custom_Tvoc_Send_Notification();
 8017738:	f000 f9b4 	bl	8017aa4 <Custom_Tvoc_Send_Notification>
      /* USER CODE END CUSTOM_STM_TVOC_NOTIFY_ENABLED_EVT */
      break;
 801773c:	e0c6      	b.n	80178cc <Custom_STM_App_Notification+0x258>
      /* USER CODE END CUSTOM_STM_TVOC_NOTIFY_DISABLED_EVT */
      break;

    case CUSTOM_STM_ETOH_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ETOH_NOTIFY_ENABLED_EVT */
    	Custom_Etoh_Send_Notification();
 801773e:	f000 f9d5 	bl	8017aec <Custom_Etoh_Send_Notification>
      /* USER CODE END CUSTOM_STM_ETOH_NOTIFY_ENABLED_EVT */
      break;
 8017742:	e0c3      	b.n	80178cc <Custom_STM_App_Notification+0x258>
      /* USER CODE END CUSTOM_STM_ETOH_NOTIFY_DISABLED_EVT */
      break;

    case CUSTOM_STM_CO2_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_CO2_NOTIFY_ENABLED_EVT */
    	Custom_Co2_Send_Notification();
 8017744:	f000 f9f6 	bl	8017b34 <Custom_Co2_Send_Notification>
      /* USER CODE END CUSTOM_STM_CO2_NOTIFY_ENABLED_EVT */
      break;
 8017748:	e0c0      	b.n	80178cc <Custom_STM_App_Notification+0x258>
      break;

    /* Enviroment */
    case CUSTOM_STM_TEMP_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_TEMP_NOTIFY_ENABLED_EVT */
    	Custom_Temp_Send_Notification();
 801774a:	f000 fa17 	bl	8017b7c <Custom_Temp_Send_Notification>
      /* USER CODE END CUSTOM_STM_TEMP_NOTIFY_ENABLED_EVT */
      break;
 801774e:	e0bd      	b.n	80178cc <Custom_STM_App_Notification+0x258>
      /* USER CODE END CUSTOM_STM_TEMP_NOTIFY_DISABLED_EVT */
      break;

    case CUSTOM_STM_HUMI_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_HUMI_NOTIFY_ENABLED_EVT */
    	Custom_Humi_Send_Notification();
 8017750:	f000 fa38 	bl	8017bc4 <Custom_Humi_Send_Notification>
      /* USER CODE END CUSTOM_STM_HUMI_NOTIFY_ENABLED_EVT */
      break;
 8017754:	e0ba      	b.n	80178cc <Custom_STM_App_Notification+0x258>
      /* USER CODE END CUSTOM_STM_HUMI_NOTIFY_DISABLED_EVT */
      break;

    case CUSTOM_STM_PRES_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_PRES_NOTIFY_ENABLED_EVT */
    	Custom_Pres_Send_Notification();
 8017756:	f000 fa59 	bl	8017c0c <Custom_Pres_Send_Notification>
      /* USER CODE END CUSTOM_STM_PRES_NOTIFY_ENABLED_EVT */
      break;
 801775a:	e0b7      	b.n	80178cc <Custom_STM_App_Notification+0x258>
      /* USER CODE END CUSTOM_STM_PRES_NOTIFY_DISABLED_EVT */
      break;

    case CUSTOM_STM_GET_ENV_LOG_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_GET_ENV_LOG_NOTIFY_ENABLED_EVT */
    	UTIL_SEQ_PauseTask(1<<CFG_TASK_ENV_ID);
 801775c:	2004      	movs	r0, #4
 801775e:	f002 ff81 	bl	801a664 <UTIL_SEQ_PauseTask>
    	HW_TS_Stop(ENV_TIMER_ID);
 8017762:	4b5c      	ldr	r3, [pc, #368]	; (80178d4 <Custom_STM_App_Notification+0x260>)
 8017764:	781b      	ldrb	r3, [r3, #0]
 8017766:	4618      	mov	r0, r3
 8017768:	f7f4 fb4a 	bl	800be00 <HW_TS_Stop>
    	Current_Address=Read_flash_address(1);
 801776c:	2001      	movs	r0, #1
 801776e:	f7f3 fa0d 	bl	800ab8c <Read_flash_address>
 8017772:	4603      	mov	r3, r0
 8017774:	4a58      	ldr	r2, [pc, #352]	; (80178d8 <Custom_STM_App_Notification+0x264>)
 8017776:	6013      	str	r3, [r2, #0]
    	HW_TS_Start(TX_LOG_ID,TX_UPDATE_PERIOD);
 8017778:	4b58      	ldr	r3, [pc, #352]	; (80178dc <Custom_STM_App_Notification+0x268>)
 801777a:	781b      	ldrb	r3, [r3, #0]
 801777c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017780:	4618      	mov	r0, r3
 8017782:	f7f4 fbc1 	bl	800bf08 <HW_TS_Start>
      /* USER CODE END CUSTOM_STM_GET_ENV_LOG_NOTIFY_ENABLED_EVT */
      break;
 8017786:	e0a1      	b.n	80178cc <Custom_STM_App_Notification+0x258>

    case CUSTOM_STM_GET_ENV_LOG_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_GET_ENV_LOG_NOTIFY_DISABLED_EVT */
		UTIL_SEQ_PauseTask(1<<CFG_LOG_TX_ID);
 8017788:	2010      	movs	r0, #16
 801778a:	f002 ff6b 	bl	801a664 <UTIL_SEQ_PauseTask>
		HW_TS_Stop(TX_LOG_ID);
 801778e:	4b53      	ldr	r3, [pc, #332]	; (80178dc <Custom_STM_App_Notification+0x268>)
 8017790:	781b      	ldrb	r3, [r3, #0]
 8017792:	4618      	mov	r0, r3
 8017794:	f7f4 fb34 	bl	800be00 <HW_TS_Stop>
		HW_TS_Start(ENV_TIMER_ID,ENV_UPDATE_PERIOD);
 8017798:	4b4e      	ldr	r3, [pc, #312]	; (80178d4 <Custom_STM_App_Notification+0x260>)
 801779a:	781b      	ldrb	r3, [r3, #0]
 801779c:	4950      	ldr	r1, [pc, #320]	; (80178e0 <Custom_STM_App_Notification+0x26c>)
 801779e:	4618      	mov	r0, r3
 80177a0:	f7f4 fbb2 	bl	800bf08 <HW_TS_Start>
      /* USER CODE END CUSTOM_STM_GET_ENV_LOG_NOTIFY_DISABLED_EVT */
      break;
 80177a4:	e092      	b.n	80178cc <Custom_STM_App_Notification+0x258>

    /* Lightining_Strike */
    case CUSTOM_STM_GET_LIGHTNING_LOG_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_GET_LIGHTNING_LOG_NOTIFY_ENABLED_EVT */
		UTIL_SEQ_PauseTask(1<<CFG_TASK_ENV_ID);
 80177a6:	2004      	movs	r0, #4
 80177a8:	f002 ff5c 	bl	801a664 <UTIL_SEQ_PauseTask>
		HW_TS_Stop(ENV_TIMER_ID);
 80177ac:	4b49      	ldr	r3, [pc, #292]	; (80178d4 <Custom_STM_App_Notification+0x260>)
 80177ae:	781b      	ldrb	r3, [r3, #0]
 80177b0:	4618      	mov	r0, r3
 80177b2:	f7f4 fb25 	bl	800be00 <HW_TS_Stop>
		Current_Address=Read_flash_address(2);
 80177b6:	2002      	movs	r0, #2
 80177b8:	f7f3 f9e8 	bl	800ab8c <Read_flash_address>
 80177bc:	4603      	mov	r3, r0
 80177be:	4a46      	ldr	r2, [pc, #280]	; (80178d8 <Custom_STM_App_Notification+0x264>)
 80177c0:	6013      	str	r3, [r2, #0]
		HW_TS_Start(TX_LOG_ID,TX_UPDATE_PERIOD);
 80177c2:	4b46      	ldr	r3, [pc, #280]	; (80178dc <Custom_STM_App_Notification+0x268>)
 80177c4:	781b      	ldrb	r3, [r3, #0]
 80177c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80177ca:	4618      	mov	r0, r3
 80177cc:	f7f4 fb9c 	bl	800bf08 <HW_TS_Start>
      /* USER CODE END CUSTOM_STM_GET_LIGHTNING_LOG_NOTIFY_ENABLED_EVT */
      break;
 80177d0:	e07c      	b.n	80178cc <Custom_STM_App_Notification+0x258>

    case CUSTOM_STM_GET_LIGHTNING_LOG_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_GET_LIGHTNING_LOG_NOTIFY_DISABLED_EVT */
		UTIL_SEQ_PauseTask(1<<CFG_LOG_TX_ID);
 80177d2:	2010      	movs	r0, #16
 80177d4:	f002 ff46 	bl	801a664 <UTIL_SEQ_PauseTask>
		HW_TS_Stop(TX_LOG_ID);
 80177d8:	4b40      	ldr	r3, [pc, #256]	; (80178dc <Custom_STM_App_Notification+0x268>)
 80177da:	781b      	ldrb	r3, [r3, #0]
 80177dc:	4618      	mov	r0, r3
 80177de:	f7f4 fb0f 	bl	800be00 <HW_TS_Stop>
		HW_TS_Start(ENV_TIMER_ID,ENV_UPDATE_PERIOD);
 80177e2:	4b3c      	ldr	r3, [pc, #240]	; (80178d4 <Custom_STM_App_Notification+0x260>)
 80177e4:	781b      	ldrb	r3, [r3, #0]
 80177e6:	493e      	ldr	r1, [pc, #248]	; (80178e0 <Custom_STM_App_Notification+0x26c>)
 80177e8:	4618      	mov	r0, r3
 80177ea:	f7f4 fb8d 	bl	800bf08 <HW_TS_Start>
      /* USER CODE END CUSTOM_STM_GET_LIGHTNING_LOG_NOTIFY_DISABLED_EVT */
      break;
 80177ee:	e06d      	b.n	80178cc <Custom_STM_App_Notification+0x258>
      break;

    /* Utilities */
    case CUSTOM_STM_TIME_READ_EVT:
      /* USER CODE BEGIN CUSTOM_STM_TIME_READ_EVT */
		Date_Time();
 80177f0:	f000 fe80 	bl	80184f4 <Date_Time>
		Custom_STM_App_Update_Char(CUSTOM_STM_TIME, (uint8_t *)Time);
 80177f4:	493b      	ldr	r1, [pc, #236]	; (80178e4 <Custom_STM_App_Notification+0x270>)
 80177f6:	200e      	movs	r0, #14
 80177f8:	f002 f9ce 	bl	8019b98 <Custom_STM_App_Update_Char>
      /* USER CODE END CUSTOM_STM_TIME_READ_EVT */
      break;
 80177fc:	e066      	b.n	80178cc <Custom_STM_App_Notification+0x258>

    case CUSTOM_STM_TIME_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_TIME_WRITE_NO_RESP_EVT */
		sTime.Hours=pNotification->DataTransfered.pPayload[0];
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	685b      	ldr	r3, [r3, #4]
 8017802:	781a      	ldrb	r2, [r3, #0]
 8017804:	4b38      	ldr	r3, [pc, #224]	; (80178e8 <Custom_STM_App_Notification+0x274>)
 8017806:	701a      	strb	r2, [r3, #0]
		sTime.Minutes=pNotification->DataTransfered.pPayload[1];
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	685b      	ldr	r3, [r3, #4]
 801780c:	785a      	ldrb	r2, [r3, #1]
 801780e:	4b36      	ldr	r3, [pc, #216]	; (80178e8 <Custom_STM_App_Notification+0x274>)
 8017810:	705a      	strb	r2, [r3, #1]
		sTime.Seconds=pNotification->DataTransfered.pPayload[2];
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	685b      	ldr	r3, [r3, #4]
 8017816:	789a      	ldrb	r2, [r3, #2]
 8017818:	4b33      	ldr	r3, [pc, #204]	; (80178e8 <Custom_STM_App_Notification+0x274>)
 801781a:	709a      	strb	r2, [r3, #2]
		sTime.SecondFraction=0;
 801781c:	4b32      	ldr	r3, [pc, #200]	; (80178e8 <Custom_STM_App_Notification+0x274>)
 801781e:	2200      	movs	r2, #0
 8017820:	609a      	str	r2, [r3, #8]
		sTime.SubSeconds = 0x0;
 8017822:	4b31      	ldr	r3, [pc, #196]	; (80178e8 <Custom_STM_App_Notification+0x274>)
 8017824:	2200      	movs	r2, #0
 8017826:	605a      	str	r2, [r3, #4]
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8017828:	4b2f      	ldr	r3, [pc, #188]	; (80178e8 <Custom_STM_App_Notification+0x274>)
 801782a:	2200      	movs	r2, #0
 801782c:	60da      	str	r2, [r3, #12]
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801782e:	4b2e      	ldr	r3, [pc, #184]	; (80178e8 <Custom_STM_App_Notification+0x274>)
 8017830:	2200      	movs	r2, #0
 8017832:	611a      	str	r2, [r3, #16]
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8017834:	2200      	movs	r2, #0
 8017836:	492c      	ldr	r1, [pc, #176]	; (80178e8 <Custom_STM_App_Notification+0x274>)
 8017838:	482c      	ldr	r0, [pc, #176]	; (80178ec <Custom_STM_App_Notification+0x278>)
 801783a:	f7fb fef5 	bl	8013628 <HAL_RTC_SetTime>
 801783e:	4603      	mov	r3, r0
 8017840:	2b00      	cmp	r3, #0
 8017842:	d001      	beq.n	8017848 <Custom_STM_App_Notification+0x1d4>
		{
			Error_Handler();
 8017844:	f7f4 fe04 	bl	800c450 <Error_Handler>
		}
		sDate.WeekDay = pNotification->DataTransfered.pPayload[3];
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	685b      	ldr	r3, [r3, #4]
 801784c:	78da      	ldrb	r2, [r3, #3]
 801784e:	4b28      	ldr	r3, [pc, #160]	; (80178f0 <Custom_STM_App_Notification+0x27c>)
 8017850:	701a      	strb	r2, [r3, #0]
		sDate.Month = pNotification->DataTransfered.pPayload[4];
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	685b      	ldr	r3, [r3, #4]
 8017856:	791a      	ldrb	r2, [r3, #4]
 8017858:	4b25      	ldr	r3, [pc, #148]	; (80178f0 <Custom_STM_App_Notification+0x27c>)
 801785a:	705a      	strb	r2, [r3, #1]
		sDate.Date = pNotification->DataTransfered.pPayload[5];
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	685b      	ldr	r3, [r3, #4]
 8017860:	795a      	ldrb	r2, [r3, #5]
 8017862:	4b23      	ldr	r3, [pc, #140]	; (80178f0 <Custom_STM_App_Notification+0x27c>)
 8017864:	709a      	strb	r2, [r3, #2]
		sDate.Year = pNotification->DataTransfered.pPayload[6];  //(1980+20) + value(0-79)
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	685b      	ldr	r3, [r3, #4]
 801786a:	799a      	ldrb	r2, [r3, #6]
 801786c:	4b20      	ldr	r3, [pc, #128]	; (80178f0 <Custom_STM_App_Notification+0x27c>)
 801786e:	70da      	strb	r2, [r3, #3]
		for(uint8_t i=0;i<pNotification->DataTransfered.Length;i++){
 8017870:	2300      	movs	r3, #0
 8017872:	73fb      	strb	r3, [r7, #15]
 8017874:	e00c      	b.n	8017890 <Custom_STM_App_Notification+0x21c>
			printf("Input_time[%d]:%d\n",i,pNotification->DataTransfered.pPayload[i]);
 8017876:	7bf9      	ldrb	r1, [r7, #15]
 8017878:	687b      	ldr	r3, [r7, #4]
 801787a:	685a      	ldr	r2, [r3, #4]
 801787c:	7bfb      	ldrb	r3, [r7, #15]
 801787e:	4413      	add	r3, r2
 8017880:	781b      	ldrb	r3, [r3, #0]
 8017882:	461a      	mov	r2, r3
 8017884:	481b      	ldr	r0, [pc, #108]	; (80178f4 <Custom_STM_App_Notification+0x280>)
 8017886:	f003 ff3f 	bl	801b708 <iprintf>
		for(uint8_t i=0;i<pNotification->DataTransfered.Length;i++){
 801788a:	7bfb      	ldrb	r3, [r7, #15]
 801788c:	3301      	adds	r3, #1
 801788e:	73fb      	strb	r3, [r7, #15]
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	7a1b      	ldrb	r3, [r3, #8]
 8017894:	7bfa      	ldrb	r2, [r7, #15]
 8017896:	429a      	cmp	r2, r3
 8017898:	d3ed      	bcc.n	8017876 <Custom_STM_App_Notification+0x202>
		}
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 801789a:	2200      	movs	r2, #0
 801789c:	4914      	ldr	r1, [pc, #80]	; (80178f0 <Custom_STM_App_Notification+0x27c>)
 801789e:	4813      	ldr	r0, [pc, #76]	; (80178ec <Custom_STM_App_Notification+0x278>)
 80178a0:	f7fb ffe2 	bl	8013868 <HAL_RTC_SetDate>
 80178a4:	4603      	mov	r3, r0
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d00f      	beq.n	80178ca <Custom_STM_App_Notification+0x256>
		{
			Error_Handler();
 80178aa:	f7f4 fdd1 	bl	800c450 <Error_Handler>
		}
      /* USER CODE END CUSTOM_STM_TIME_WRITE_NO_RESP_EVT */
      break;
 80178ae:	e00c      	b.n	80178ca <Custom_STM_App_Notification+0x256>
      /* USER CODE END CUSTOM_STM_LOG_DATA_TX_STATUS_NOTIFY_DISABLED_EVT */
      break;

    case CUSTOM_STM_OTA_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_OTA_WRITE_NO_RESP_EVT */
    	*(uint32_t*)SRAM1_BASE = *(uint32_t*)pNotification->DataTransfered.pPayload;
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	685b      	ldr	r3, [r3, #4]
 80178b4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80178b8:	681b      	ldr	r3, [r3, #0]
 80178ba:	6013      	str	r3, [r2, #0]
    	 printf("Reset\n");
 80178bc:	480e      	ldr	r0, [pc, #56]	; (80178f8 <Custom_STM_App_Notification+0x284>)
 80178be:	f003 ff91 	bl	801b7e4 <puts>
    	 NVIC_SystemReset();
 80178c2:	f7ff fea7 	bl	8017614 <__NVIC_SystemReset>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 80178c6:	bf00      	nop
 80178c8:	e000      	b.n	80178cc <Custom_STM_App_Notification+0x258>
      break;
 80178ca:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 80178cc:	bf00      	nop
}
 80178ce:	3710      	adds	r7, #16
 80178d0:	46bd      	mov	sp, r7
 80178d2:	bd80      	pop	{r7, pc}
 80178d4:	200008eb 	.word	0x200008eb
 80178d8:	200009d0 	.word	0x200009d0
 80178dc:	200008ee 	.word	0x200008ee
 80178e0:	0002d06a 	.word	0x0002d06a
 80178e4:	200009d8 	.word	0x200009d8
 80178e8:	20000a0c 	.word	0x20000a0c
 80178ec:	200006d0 	.word	0x200006d0
 80178f0:	20000a20 	.word	0x20000a20
 80178f4:	08020e58 	.word	0x08020e58
 80178f8:	08020e6c 	.word	0x08020e6c

080178fc <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 80178fc:	b480      	push	{r7}
 80178fe:	b083      	sub	sp, #12
 8017900:	af00      	add	r7, sp, #0
 8017902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	781b      	ldrb	r3, [r3, #0]
 8017908:	2b00      	cmp	r3, #0
 801790a:	d002      	beq.n	8017912 <Custom_APP_Notification+0x16>
 801790c:	2b01      	cmp	r3, #1
 801790e:	d002      	beq.n	8017916 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8017910:	e002      	b.n	8017918 <Custom_APP_Notification+0x1c>
      break;
 8017912:	bf00      	nop
 8017914:	e000      	b.n	8017918 <Custom_APP_Notification+0x1c>
      break;
 8017916:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8017918:	bf00      	nop
}
 801791a:	370c      	adds	r7, #12
 801791c:	46bd      	mov	sp, r7
 801791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017922:	4770      	bx	lr

08017924 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8017924:	b580      	push	{r7, lr}
 8017926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	printf("fkgklfkhkkfhlfhkkhffk\n");
 8017928:	4811      	ldr	r0, [pc, #68]	; (8017970 <Custom_APP_Init+0x4c>)
 801792a:	f003 ff5b 	bl	801b7e4 <puts>
	PWR_GD=HAL_GPIO_ReadPin(GPIOC,PWR_GD_Pin);
 801792e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017932:	4810      	ldr	r0, [pc, #64]	; (8017974 <Custom_APP_Init+0x50>)
 8017934:	f7f7 ffe2 	bl	800f8fc <HAL_GPIO_ReadPin>
 8017938:	4603      	mov	r3, r0
 801793a:	461a      	mov	r2, r3
 801793c:	4b0e      	ldr	r3, [pc, #56]	; (8017978 <Custom_APP_Init+0x54>)
 801793e:	701a      	strb	r2, [r3, #0]
	EOC_v=HAL_GPIO_ReadPin(GPIOC,EOC_Pin);
 8017940:	2140      	movs	r1, #64	; 0x40
 8017942:	480c      	ldr	r0, [pc, #48]	; (8017974 <Custom_APP_Init+0x50>)
 8017944:	f7f7 ffda 	bl	800f8fc <HAL_GPIO_ReadPin>
 8017948:	4603      	mov	r3, r0
 801794a:	461a      	mov	r2, r3
 801794c:	4b0b      	ldr	r3, [pc, #44]	; (801797c <Custom_APP_Init+0x58>)
 801794e:	701a      	strb	r2, [r3, #0]
	Zmod4410_init();
 8017950:	f000 fa3e 	bl	8017dd0 <Zmod4410_init>
	LPS25HB_INIT();
 8017954:	f7f2 f810 	bl	8009978 <LPS25HB_INIT>
	ENV_APPInit();
 8017958:	f000 f9c0 	bl	8017cdc <ENV_APPInit>
	Init_Tx_Log();
 801795c:	f000 ffd0 	bl	8018900 <Init_Tx_Log>
	Notifiction();
 8017960:	f000 f9a6 	bl	8017cb0 <Notifiction>
	TS_Toggle();
 8017964:	f000 f9d8 	bl	8017d18 <TS_Toggle>
	Get_Zmod4410();
 8017968:	f000 faca 	bl	8017f00 <Get_Zmod4410>

  /* USER CODE END CUSTOM_APP_Init */
  return;
 801796c:	bf00      	nop
}
 801796e:	bd80      	pop	{r7, pc}
 8017970:	08020e74 	.word	0x08020e74
 8017974:	48000800 	.word	0x48000800
 8017978:	200009cd 	.word	0x200009cd
 801797c:	200009ce 	.word	0x200009ce

08017980 <Custom_Bat_level_Send_Notification>:
  /* USER CODE END Bat_level_UC_Last*/
  return;
}

void Custom_Bat_level_Send_Notification(void) /* Property Notification */
{
 8017980:	b580      	push	{r7, lr}
 8017982:	b082      	sub	sp, #8
 8017984:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8017986:	2300      	movs	r3, #0
 8017988:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Bat_level_NS_1*/
  Custom_STM_App_Update_Char(CUSTOM_STM_BAT_LEVEL, (uint8_t *)&Battery_percentage);
 801798a:	4908      	ldr	r1, [pc, #32]	; (80179ac <Custom_Bat_level_Send_Notification+0x2c>)
 801798c:	2000      	movs	r0, #0
 801798e:	f002 f903 	bl	8019b98 <Custom_STM_App_Update_Char>
  /* USER CODE END Bat_level_NS_1*/

  if (updateflag != 0)
 8017992:	79fb      	ldrb	r3, [r7, #7]
 8017994:	2b00      	cmp	r3, #0
 8017996:	d004      	beq.n	80179a2 <Custom_Bat_level_Send_Notification+0x22>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_BAT_LEVEL, (uint8_t *)NotifyCharData);
 8017998:	4905      	ldr	r1, [pc, #20]	; (80179b0 <Custom_Bat_level_Send_Notification+0x30>)
 801799a:	2000      	movs	r0, #0
 801799c:	f002 f8fc 	bl	8019b98 <Custom_STM_App_Update_Char>

  /* USER CODE BEGIN Bat_level_NS_Last*/

  /* USER CODE END Bat_level_NS_Last*/

  return;
 80179a0:	bf00      	nop
 80179a2:	bf00      	nop
}
 80179a4:	3708      	adds	r7, #8
 80179a6:	46bd      	mov	sp, r7
 80179a8:	bd80      	pop	{r7, pc}
 80179aa:	bf00      	nop
 80179ac:	200009cf 	.word	0x200009cf
 80179b0:	20000a24 	.word	0x20000a24

080179b4 <Custom_Eoc_Send_Notification>:
  /* USER CODE END Eoc_UC_Last*/
  return;
}

void Custom_Eoc_Send_Notification(void) /* Property Notification */
{
 80179b4:	b580      	push	{r7, lr}
 80179b6:	b082      	sub	sp, #8
 80179b8:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 80179ba:	2300      	movs	r3, #0
 80179bc:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Eoc_NS_1*/

  /* USER CODE END Eoc_NS_1*/

  if (updateflag != 0)
 80179be:	79fb      	ldrb	r3, [r7, #7]
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	d003      	beq.n	80179cc <Custom_Eoc_Send_Notification+0x18>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_EOC, (uint8_t *)NotifyCharData);
 80179c4:	4905      	ldr	r1, [pc, #20]	; (80179dc <Custom_Eoc_Send_Notification+0x28>)
 80179c6:	2001      	movs	r0, #1
 80179c8:	f002 f8e6 	bl	8019b98 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Eoc_NS_Last*/
	Custom_STM_App_Update_Char(CUSTOM_STM_EOC, (uint8_t *)&EOC_v);
 80179cc:	4904      	ldr	r1, [pc, #16]	; (80179e0 <Custom_Eoc_Send_Notification+0x2c>)
 80179ce:	2001      	movs	r0, #1
 80179d0:	f002 f8e2 	bl	8019b98 <Custom_STM_App_Update_Char>
  /* USER CODE END Eoc_NS_Last*/

  return;
 80179d4:	bf00      	nop
}
 80179d6:	3708      	adds	r7, #8
 80179d8:	46bd      	mov	sp, r7
 80179da:	bd80      	pop	{r7, pc}
 80179dc:	20000a24 	.word	0x20000a24
 80179e0:	200009ce 	.word	0x200009ce

080179e4 <Custom_Pwr_gd_Send_Notification>:
  /* USER CODE END Pwr_gd_UC_Last*/
  return;
}

void Custom_Pwr_gd_Send_Notification(void) /* Property Notification */
{
 80179e4:	b580      	push	{r7, lr}
 80179e6:	b082      	sub	sp, #8
 80179e8:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 80179ea:	2300      	movs	r3, #0
 80179ec:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Pwr_gd_NS_1*/

  /* USER CODE END Pwr_gd_NS_1*/

  if (updateflag != 0)
 80179ee:	79fb      	ldrb	r3, [r7, #7]
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d003      	beq.n	80179fc <Custom_Pwr_gd_Send_Notification+0x18>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_PWR_GD, (uint8_t *)NotifyCharData);
 80179f4:	4905      	ldr	r1, [pc, #20]	; (8017a0c <Custom_Pwr_gd_Send_Notification+0x28>)
 80179f6:	2002      	movs	r0, #2
 80179f8:	f002 f8ce 	bl	8019b98 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Pwr_gd_NS_Last*/
  Custom_STM_App_Update_Char(CUSTOM_STM_EOC, (uint8_t *)&PWR_GD);
 80179fc:	4904      	ldr	r1, [pc, #16]	; (8017a10 <Custom_Pwr_gd_Send_Notification+0x2c>)
 80179fe:	2001      	movs	r0, #1
 8017a00:	f002 f8ca 	bl	8019b98 <Custom_STM_App_Update_Char>
  /* USER CODE END Pwr_gd_NS_Last*/

  return;
 8017a04:	bf00      	nop
}
 8017a06:	3708      	adds	r7, #8
 8017a08:	46bd      	mov	sp, r7
 8017a0a:	bd80      	pop	{r7, pc}
 8017a0c:	20000a24 	.word	0x20000a24
 8017a10:	200009cd 	.word	0x200009cd

08017a14 <Custom_Iaq_in_Send_Notification>:
  /* USER CODE END Iaq_in_UC_Last*/
  return;
}

void Custom_Iaq_in_Send_Notification(void) /* Property Notification */
{
 8017a14:	b580      	push	{r7, lr}
 8017a16:	b084      	sub	sp, #16
 8017a18:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8017a1a:	2300      	movs	r3, #0
 8017a1c:	73fb      	strb	r3, [r7, #15]

  /* USER CODE BEGIN Iaq_in_NS_1*/

	uint8_t ENV_data[4];
	STORE_FLOAT_TO_BYTES(algo_results.iaq,ENV_data);
 8017a1e:	4b0c      	ldr	r3, [pc, #48]	; (8017a50 <Custom_Iaq_in_Send_Notification+0x3c>)
 8017a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017a22:	607b      	str	r3, [r7, #4]
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	60bb      	str	r3, [r7, #8]
	memcpy(Log+11,ENV_data,sizeof(float));
 8017a28:	4a0a      	ldr	r2, [pc, #40]	; (8017a54 <Custom_Iaq_in_Send_Notification+0x40>)
 8017a2a:	68bb      	ldr	r3, [r7, #8]
 8017a2c:	6013      	str	r3, [r2, #0]
  /* USER CODE END Iaq_in_NS_1*/

  if (updateflag != 0)
 8017a2e:	7bfb      	ldrb	r3, [r7, #15]
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d003      	beq.n	8017a3c <Custom_Iaq_in_Send_Notification+0x28>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_IAQ_IN, (uint8_t *)NotifyCharData);
 8017a34:	4908      	ldr	r1, [pc, #32]	; (8017a58 <Custom_Iaq_in_Send_Notification+0x44>)
 8017a36:	2003      	movs	r0, #3
 8017a38:	f002 f8ae 	bl	8019b98 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Iaq_in_NS_Last*/
	Custom_STM_App_Update_Char(CUSTOM_STM_IAQ_IN, (uint8_t *)ENV_data);
 8017a3c:	f107 0308 	add.w	r3, r7, #8
 8017a40:	4619      	mov	r1, r3
 8017a42:	2003      	movs	r0, #3
 8017a44:	f002 f8a8 	bl	8019b98 <Custom_STM_App_Update_Char>
  /* USER CODE END Iaq_in_NS_Last*/

  return;
 8017a48:	bf00      	nop
}
 8017a4a:	3710      	adds	r7, #16
 8017a4c:	46bd      	mov	sp, r7
 8017a4e:	bd80      	pop	{r7, pc}
 8017a50:	20000948 	.word	0x20000948
 8017a54:	200009eb 	.word	0x200009eb
 8017a58:	20000a24 	.word	0x20000a24

08017a5c <Custom_Relative_ia_Send_Notification>:
  /* USER CODE END Relative_ia_UC_Last*/
  return;
}

void Custom_Relative_ia_Send_Notification(void) /* Property Notification */
{
 8017a5c:	b580      	push	{r7, lr}
 8017a5e:	b084      	sub	sp, #16
 8017a60:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8017a62:	2300      	movs	r3, #0
 8017a64:	73fb      	strb	r3, [r7, #15]

  /* USER CODE BEGIN Relative_ia_NS_1*/
	uint8_t ENV_data[4];
	STORE_FLOAT_TO_BYTES(algo_results.rel_iaq,ENV_data);
 8017a66:	4b0c      	ldr	r3, [pc, #48]	; (8017a98 <Custom_Relative_ia_Send_Notification+0x3c>)
 8017a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017a6a:	607b      	str	r3, [r7, #4]
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	60bb      	str	r3, [r7, #8]
	memcpy(Log+7,ENV_data,sizeof(float));
 8017a70:	4a0a      	ldr	r2, [pc, #40]	; (8017a9c <Custom_Relative_ia_Send_Notification+0x40>)
 8017a72:	68bb      	ldr	r3, [r7, #8]
 8017a74:	6013      	str	r3, [r2, #0]
  /* USER CODE END Relative_ia_NS_1*/

  if (updateflag != 0)
 8017a76:	7bfb      	ldrb	r3, [r7, #15]
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	d003      	beq.n	8017a84 <Custom_Relative_ia_Send_Notification+0x28>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_RELATIVE_IA, (uint8_t *)NotifyCharData);
 8017a7c:	4908      	ldr	r1, [pc, #32]	; (8017aa0 <Custom_Relative_ia_Send_Notification+0x44>)
 8017a7e:	2004      	movs	r0, #4
 8017a80:	f002 f88a 	bl	8019b98 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Relative_ia_NS_Last*/
	Custom_STM_App_Update_Char(CUSTOM_STM_RELATIVE_IA, (uint8_t *)ENV_data);
 8017a84:	f107 0308 	add.w	r3, r7, #8
 8017a88:	4619      	mov	r1, r3
 8017a8a:	2004      	movs	r0, #4
 8017a8c:	f002 f884 	bl	8019b98 <Custom_STM_App_Update_Char>
  /* USER CODE END Relative_ia_NS_Last*/

  return;
 8017a90:	bf00      	nop
}
 8017a92:	3710      	adds	r7, #16
 8017a94:	46bd      	mov	sp, r7
 8017a96:	bd80      	pop	{r7, pc}
 8017a98:	20000948 	.word	0x20000948
 8017a9c:	200009e7 	.word	0x200009e7
 8017aa0:	20000a24 	.word	0x20000a24

08017aa4 <Custom_Tvoc_Send_Notification>:
  /* USER CODE END Tvoc_UC_Last*/
  return;
}

void Custom_Tvoc_Send_Notification(void) /* Property Notification */
{
 8017aa4:	b580      	push	{r7, lr}
 8017aa6:	b084      	sub	sp, #16
 8017aa8:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8017aaa:	2300      	movs	r3, #0
 8017aac:	73fb      	strb	r3, [r7, #15]

  /* USER CODE BEGIN Tvoc_NS_1*/
	uint8_t ENV_data[4];
	STORE_FLOAT_TO_BYTES(algo_results.tvoc,ENV_data);
 8017aae:	4b0c      	ldr	r3, [pc, #48]	; (8017ae0 <Custom_Tvoc_Send_Notification+0x3c>)
 8017ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017ab2:	607b      	str	r3, [r7, #4]
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	60bb      	str	r3, [r7, #8]
	memcpy(Log+19,ENV_data,sizeof(float));
 8017ab8:	4a0a      	ldr	r2, [pc, #40]	; (8017ae4 <Custom_Tvoc_Send_Notification+0x40>)
 8017aba:	68bb      	ldr	r3, [r7, #8]
 8017abc:	6013      	str	r3, [r2, #0]
  /* USER CODE END Tvoc_NS_1*/

  if (updateflag != 0)
 8017abe:	7bfb      	ldrb	r3, [r7, #15]
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	d003      	beq.n	8017acc <Custom_Tvoc_Send_Notification+0x28>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_TVOC, (uint8_t *)NotifyCharData);
 8017ac4:	4908      	ldr	r1, [pc, #32]	; (8017ae8 <Custom_Tvoc_Send_Notification+0x44>)
 8017ac6:	2005      	movs	r0, #5
 8017ac8:	f002 f866 	bl	8019b98 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Tvoc_NS_Last*/
	Custom_STM_App_Update_Char(CUSTOM_STM_TVOC, (uint8_t *)ENV_data);
 8017acc:	f107 0308 	add.w	r3, r7, #8
 8017ad0:	4619      	mov	r1, r3
 8017ad2:	2005      	movs	r0, #5
 8017ad4:	f002 f860 	bl	8019b98 <Custom_STM_App_Update_Char>
  /* USER CODE END Tvoc_NS_Last*/

  return;
 8017ad8:	bf00      	nop
}
 8017ada:	3710      	adds	r7, #16
 8017adc:	46bd      	mov	sp, r7
 8017ade:	bd80      	pop	{r7, pc}
 8017ae0:	20000948 	.word	0x20000948
 8017ae4:	200009f3 	.word	0x200009f3
 8017ae8:	20000a24 	.word	0x20000a24

08017aec <Custom_Etoh_Send_Notification>:
  /* USER CODE END Etoh_UC_Last*/
  return;
}

void Custom_Etoh_Send_Notification(void) /* Property Notification */
{
 8017aec:	b580      	push	{r7, lr}
 8017aee:	b084      	sub	sp, #16
 8017af0:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8017af2:	2300      	movs	r3, #0
 8017af4:	73fb      	strb	r3, [r7, #15]

  /* USER CODE BEGIN Etoh_NS_1*/
	uint8_t ENV_data[4];
	STORE_FLOAT_TO_BYTES(algo_results.tvoc,ENV_data);
 8017af6:	4b0c      	ldr	r3, [pc, #48]	; (8017b28 <Custom_Etoh_Send_Notification+0x3c>)
 8017af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017afa:	607b      	str	r3, [r7, #4]
 8017afc:	687b      	ldr	r3, [r7, #4]
 8017afe:	60bb      	str	r3, [r7, #8]
	memcpy(Log+15,ENV_data,sizeof(float));
 8017b00:	4a0a      	ldr	r2, [pc, #40]	; (8017b2c <Custom_Etoh_Send_Notification+0x40>)
 8017b02:	68bb      	ldr	r3, [r7, #8]
 8017b04:	6013      	str	r3, [r2, #0]
  /* USER CODE END Etoh_NS_1*/

  if (updateflag != 0)
 8017b06:	7bfb      	ldrb	r3, [r7, #15]
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	d003      	beq.n	8017b14 <Custom_Etoh_Send_Notification+0x28>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_ETOH, (uint8_t *)NotifyCharData);
 8017b0c:	4908      	ldr	r1, [pc, #32]	; (8017b30 <Custom_Etoh_Send_Notification+0x44>)
 8017b0e:	2006      	movs	r0, #6
 8017b10:	f002 f842 	bl	8019b98 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Etoh_NS_Last*/
	Custom_STM_App_Update_Char(CUSTOM_STM_ETOH, (uint8_t *)ENV_data);
 8017b14:	f107 0308 	add.w	r3, r7, #8
 8017b18:	4619      	mov	r1, r3
 8017b1a:	2006      	movs	r0, #6
 8017b1c:	f002 f83c 	bl	8019b98 <Custom_STM_App_Update_Char>
  /* USER CODE END Etoh_NS_Last*/

  return;
 8017b20:	bf00      	nop
}
 8017b22:	3710      	adds	r7, #16
 8017b24:	46bd      	mov	sp, r7
 8017b26:	bd80      	pop	{r7, pc}
 8017b28:	20000948 	.word	0x20000948
 8017b2c:	200009ef 	.word	0x200009ef
 8017b30:	20000a24 	.word	0x20000a24

08017b34 <Custom_Co2_Send_Notification>:
  /* USER CODE END Co2_UC_Last*/
  return;
}

void Custom_Co2_Send_Notification(void) /* Property Notification */
{
 8017b34:	b580      	push	{r7, lr}
 8017b36:	b084      	sub	sp, #16
 8017b38:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8017b3a:	2300      	movs	r3, #0
 8017b3c:	73fb      	strb	r3, [r7, #15]

  /* USER CODE BEGIN Co2_NS_1*/
	uint8_t ENV_data[4];
	STORE_FLOAT_TO_BYTES(algo_results.eco2,ENV_data);
 8017b3e:	4b0c      	ldr	r3, [pc, #48]	; (8017b70 <Custom_Co2_Send_Notification+0x3c>)
 8017b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017b42:	607b      	str	r3, [r7, #4]
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	60bb      	str	r3, [r7, #8]
	memcpy(Log+23,ENV_data,sizeof(float));
 8017b48:	4a0a      	ldr	r2, [pc, #40]	; (8017b74 <Custom_Co2_Send_Notification+0x40>)
 8017b4a:	68bb      	ldr	r3, [r7, #8]
 8017b4c:	6013      	str	r3, [r2, #0]
  /* USER CODE END Co2_NS_1*/

  if (updateflag != 0)
 8017b4e:	7bfb      	ldrb	r3, [r7, #15]
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	d003      	beq.n	8017b5c <Custom_Co2_Send_Notification+0x28>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_CO2, (uint8_t *)NotifyCharData);
 8017b54:	4908      	ldr	r1, [pc, #32]	; (8017b78 <Custom_Co2_Send_Notification+0x44>)
 8017b56:	2007      	movs	r0, #7
 8017b58:	f002 f81e 	bl	8019b98 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Co2_NS_Last*/
	Custom_STM_App_Update_Char(CUSTOM_STM_CO2, (uint8_t *)ENV_data);
 8017b5c:	f107 0308 	add.w	r3, r7, #8
 8017b60:	4619      	mov	r1, r3
 8017b62:	2007      	movs	r0, #7
 8017b64:	f002 f818 	bl	8019b98 <Custom_STM_App_Update_Char>
  /* USER CODE END Co2_NS_Last*/

  return;
 8017b68:	bf00      	nop
}
 8017b6a:	3710      	adds	r7, #16
 8017b6c:	46bd      	mov	sp, r7
 8017b6e:	bd80      	pop	{r7, pc}
 8017b70:	20000948 	.word	0x20000948
 8017b74:	200009f7 	.word	0x200009f7
 8017b78:	20000a24 	.word	0x20000a24

08017b7c <Custom_Temp_Send_Notification>:
  /* USER CODE END Temp_UC_Last*/
  return;
}

void Custom_Temp_Send_Notification(void) /* Property Notification */
{
 8017b7c:	b580      	push	{r7, lr}
 8017b7e:	b084      	sub	sp, #16
 8017b80:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8017b82:	2300      	movs	r3, #0
 8017b84:	73fb      	strb	r3, [r7, #15]

  /* USER CODE BEGIN Temp_NS_1*/
	uint8_t ENV_data[4];
	STORE_FLOAT_TO_BYTES(algo_results.temperature,ENV_data);
 8017b86:	4b0c      	ldr	r3, [pc, #48]	; (8017bb8 <Custom_Temp_Send_Notification+0x3c>)
 8017b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017b8a:	607b      	str	r3, [r7, #4]
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	60bb      	str	r3, [r7, #8]
	memcpy(Log+27,ENV_data,sizeof(float));
 8017b90:	4a0a      	ldr	r2, [pc, #40]	; (8017bbc <Custom_Temp_Send_Notification+0x40>)
 8017b92:	68bb      	ldr	r3, [r7, #8]
 8017b94:	6013      	str	r3, [r2, #0]
  /* USER CODE END Temp_NS_1*/

  if (updateflag != 0)
 8017b96:	7bfb      	ldrb	r3, [r7, #15]
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	d003      	beq.n	8017ba4 <Custom_Temp_Send_Notification+0x28>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_TEMP, (uint8_t *)NotifyCharData);
 8017b9c:	4908      	ldr	r1, [pc, #32]	; (8017bc0 <Custom_Temp_Send_Notification+0x44>)
 8017b9e:	2008      	movs	r0, #8
 8017ba0:	f001 fffa 	bl	8019b98 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Temp_NS_Last*/
	Custom_STM_App_Update_Char(CUSTOM_STM_TEMP, (uint8_t *)ENV_data);
 8017ba4:	f107 0308 	add.w	r3, r7, #8
 8017ba8:	4619      	mov	r1, r3
 8017baa:	2008      	movs	r0, #8
 8017bac:	f001 fff4 	bl	8019b98 <Custom_STM_App_Update_Char>
  /* USER CODE END Temp_NS_Last*/

  return;
 8017bb0:	bf00      	nop
}
 8017bb2:	3710      	adds	r7, #16
 8017bb4:	46bd      	mov	sp, r7
 8017bb6:	bd80      	pop	{r7, pc}
 8017bb8:	20000948 	.word	0x20000948
 8017bbc:	200009fb 	.word	0x200009fb
 8017bc0:	20000a24 	.word	0x20000a24

08017bc4 <Custom_Humi_Send_Notification>:
  /* USER CODE END Humi_UC_Last*/
  return;
}

void Custom_Humi_Send_Notification(void) /* Property Notification */
{
 8017bc4:	b580      	push	{r7, lr}
 8017bc6:	b084      	sub	sp, #16
 8017bc8:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8017bca:	2300      	movs	r3, #0
 8017bcc:	73fb      	strb	r3, [r7, #15]

  /* USER CODE BEGIN Humi_NS_1*/
	uint8_t ENV_data[4];
	STORE_FLOAT_TO_BYTES(htResults.humidity,ENV_data);
 8017bce:	4b0c      	ldr	r3, [pc, #48]	; (8017c00 <Custom_Humi_Send_Notification+0x3c>)
 8017bd0:	685b      	ldr	r3, [r3, #4]
 8017bd2:	607b      	str	r3, [r7, #4]
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	60bb      	str	r3, [r7, #8]
	memcpy(Log+31,ENV_data,sizeof(float));
 8017bd8:	4a0a      	ldr	r2, [pc, #40]	; (8017c04 <Custom_Humi_Send_Notification+0x40>)
 8017bda:	68bb      	ldr	r3, [r7, #8]
 8017bdc:	6013      	str	r3, [r2, #0]
  /* USER CODE END Humi_NS_1*/

  if (updateflag != 0)
 8017bde:	7bfb      	ldrb	r3, [r7, #15]
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d003      	beq.n	8017bec <Custom_Humi_Send_Notification+0x28>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_HUMI, (uint8_t *)NotifyCharData);
 8017be4:	4908      	ldr	r1, [pc, #32]	; (8017c08 <Custom_Humi_Send_Notification+0x44>)
 8017be6:	2009      	movs	r0, #9
 8017be8:	f001 ffd6 	bl	8019b98 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Humi_NS_Last*/
	Custom_STM_App_Update_Char(CUSTOM_STM_HUMI, (uint8_t *)ENV_data);
 8017bec:	f107 0308 	add.w	r3, r7, #8
 8017bf0:	4619      	mov	r1, r3
 8017bf2:	2009      	movs	r0, #9
 8017bf4:	f001 ffd0 	bl	8019b98 <Custom_STM_App_Update_Char>
  /* USER CODE END Humi_NS_Last*/

  return;
 8017bf8:	bf00      	nop
}
 8017bfa:	3710      	adds	r7, #16
 8017bfc:	46bd      	mov	sp, r7
 8017bfe:	bd80      	pop	{r7, pc}
 8017c00:	200009bc 	.word	0x200009bc
 8017c04:	200009ff 	.word	0x200009ff
 8017c08:	20000a24 	.word	0x20000a24

08017c0c <Custom_Pres_Send_Notification>:
  /* USER CODE END Pres_UC_Last*/
  return;
}

void Custom_Pres_Send_Notification(void) /* Property Notification */
{
 8017c0c:	b580      	push	{r7, lr}
 8017c0e:	b084      	sub	sp, #16
 8017c10:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8017c12:	2300      	movs	r3, #0
 8017c14:	73fb      	strb	r3, [r7, #15]

  /* USER CODE BEGIN Pres_NS_1*/
	uint8_t ENV_data[4];
	STORE_FLOAT_TO_BYTES(LPS25hb_data[0],ENV_data);
 8017c16:	4b0c      	ldr	r3, [pc, #48]	; (8017c48 <Custom_Pres_Send_Notification+0x3c>)
 8017c18:	681b      	ldr	r3, [r3, #0]
 8017c1a:	607b      	str	r3, [r7, #4]
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	60bb      	str	r3, [r7, #8]
	memcpy(Log+35,ENV_data,sizeof(float));
 8017c20:	4a0a      	ldr	r2, [pc, #40]	; (8017c4c <Custom_Pres_Send_Notification+0x40>)
 8017c22:	68bb      	ldr	r3, [r7, #8]
 8017c24:	6013      	str	r3, [r2, #0]
  /* USER CODE END Pres_NS_1*/

  if (updateflag != 0)
 8017c26:	7bfb      	ldrb	r3, [r7, #15]
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	d003      	beq.n	8017c34 <Custom_Pres_Send_Notification+0x28>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_PRES, (uint8_t *)NotifyCharData);
 8017c2c:	4908      	ldr	r1, [pc, #32]	; (8017c50 <Custom_Pres_Send_Notification+0x44>)
 8017c2e:	200a      	movs	r0, #10
 8017c30:	f001 ffb2 	bl	8019b98 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Pres_NS_Last*/
	Custom_STM_App_Update_Char(CUSTOM_STM_PRES, (uint8_t *)ENV_data);
 8017c34:	f107 0308 	add.w	r3, r7, #8
 8017c38:	4619      	mov	r1, r3
 8017c3a:	200a      	movs	r0, #10
 8017c3c:	f001 ffac 	bl	8019b98 <Custom_STM_App_Update_Char>
  /* USER CODE END Pres_NS_Last*/

  return;
 8017c40:	bf00      	nop
}
 8017c42:	3710      	adds	r7, #16
 8017c44:	46bd      	mov	sp, r7
 8017c46:	bd80      	pop	{r7, pc}
 8017c48:	200009c4 	.word	0x200009c4
 8017c4c:	20000a03 	.word	0x20000a03
 8017c50:	20000a24 	.word	0x20000a24

08017c54 <Custom_Strike_distance_Send_Notification>:
  /* USER CODE END Strike_distance_UC_Last*/
  return;
}

void Custom_Strike_distance_Send_Notification(void) /* Property Notification */
{
 8017c54:	b580      	push	{r7, lr}
 8017c56:	b082      	sub	sp, #8
 8017c58:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8017c5a:	2300      	movs	r3, #0
 8017c5c:	71bb      	strb	r3, [r7, #6]

  /* USER CODE BEGIN Strike_distance_NS_1*/

  /* USER CODE END Strike_distance_NS_1*/

  if (updateflag != 0)
 8017c5e:	79bb      	ldrb	r3, [r7, #6]
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	d003      	beq.n	8017c6c <Custom_Strike_distance_Send_Notification+0x18>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_STRIKE_DISTANCE, (uint8_t *)NotifyCharData);
 8017c64:	4910      	ldr	r1, [pc, #64]	; (8017ca8 <Custom_Strike_distance_Send_Notification+0x54>)
 8017c66:	200d      	movs	r0, #13
 8017c68:	f001 ff96 	bl	8019b98 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Strike_distance_NS_Last*/
  uint8_t Blink;
  if (Lightining_Strike_Distance < 5) {
 8017c6c:	4b0f      	ldr	r3, [pc, #60]	; (8017cac <Custom_Strike_distance_Send_Notification+0x58>)
 8017c6e:	781b      	ldrb	r3, [r3, #0]
 8017c70:	2b04      	cmp	r3, #4
 8017c72:	d802      	bhi.n	8017c7a <Custom_Strike_distance_Send_Notification+0x26>
          Blink = 6;
 8017c74:	2306      	movs	r3, #6
 8017c76:	71fb      	strb	r3, [r7, #7]
 8017c78:	e008      	b.n	8017c8c <Custom_Strike_distance_Send_Notification+0x38>
      } else if (Lightining_Strike_Distance < 15) {
 8017c7a:	4b0c      	ldr	r3, [pc, #48]	; (8017cac <Custom_Strike_distance_Send_Notification+0x58>)
 8017c7c:	781b      	ldrb	r3, [r3, #0]
 8017c7e:	2b0e      	cmp	r3, #14
 8017c80:	d802      	bhi.n	8017c88 <Custom_Strike_distance_Send_Notification+0x34>
          Blink = 4;
 8017c82:	2304      	movs	r3, #4
 8017c84:	71fb      	strb	r3, [r7, #7]
 8017c86:	e001      	b.n	8017c8c <Custom_Strike_distance_Send_Notification+0x38>
      } else {
          Blink = 2;
 8017c88:	2302      	movs	r3, #2
 8017c8a:	71fb      	strb	r3, [r7, #7]
          }
  	  Lightning_led(100,Blink);
 8017c8c:	79fb      	ldrb	r3, [r7, #7]
 8017c8e:	4619      	mov	r1, r3
 8017c90:	2064      	movs	r0, #100	; 0x64
 8017c92:	f000 fe9b 	bl	80189cc <Lightning_led>
	Custom_STM_App_Update_Char(CUSTOM_STM_STRIKE_DISTANCE, (uint8_t *)&Lightining_Strike_Distance);
 8017c96:	4905      	ldr	r1, [pc, #20]	; (8017cac <Custom_Strike_distance_Send_Notification+0x58>)
 8017c98:	200d      	movs	r0, #13
 8017c9a:	f001 ff7d 	bl	8019b98 <Custom_STM_App_Update_Char>
  /* USER CODE END Strike_distance_NS_Last*/

  return;
 8017c9e:	bf00      	nop
}
 8017ca0:	3708      	adds	r7, #8
 8017ca2:	46bd      	mov	sp, r7
 8017ca4:	bd80      	pop	{r7, pc}
 8017ca6:	bf00      	nop
 8017ca8:	20000a24 	.word	0x20000a24
 8017cac:	200009cc 	.word	0x200009cc

08017cb0 <Notifiction>:
  return;
}

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void Notifiction(void)
{
 8017cb0:	b580      	push	{r7, lr}
 8017cb2:	af00      	add	r7, sp, #0
	UTIL_SEQ_RegTask( 1<< CFG_TASK_INTR_ID, UTIL_SEQ_RFU,INTR_NOTIFY);
 8017cb4:	4a06      	ldr	r2, [pc, #24]	; (8017cd0 <Notifiction+0x20>)
 8017cb6:	2100      	movs	r1, #0
 8017cb8:	2008      	movs	r0, #8
 8017cba:	f002 fc85 	bl	801a5c8 <UTIL_SEQ_RegTask>
	HW_TS_Create(CFG_TIM_PROC_ID_ISR,&(Noti_TIMER_ID),hw_ts_SingleShot, Noti_CALL_BACK);
 8017cbe:	4b05      	ldr	r3, [pc, #20]	; (8017cd4 <Notifiction+0x24>)
 8017cc0:	2200      	movs	r2, #0
 8017cc2:	4905      	ldr	r1, [pc, #20]	; (8017cd8 <Notifiction+0x28>)
 8017cc4:	2000      	movs	r0, #0
 8017cc6:	f7f4 f821 	bl	800bd0c <HW_TS_Create>
}
 8017cca:	bf00      	nop
 8017ccc:	bd80      	pop	{r7, pc}
 8017cce:	bf00      	nop
 8017cd0:	080184b1 	.word	0x080184b1
 8017cd4:	08017d95 	.word	0x08017d95
 8017cd8:	200008ec 	.word	0x200008ec

08017cdc <ENV_APPInit>:
void ENV_APPInit(void)
{
 8017cdc:	b580      	push	{r7, lr}
 8017cde:	af00      	add	r7, sp, #0
	UTIL_SEQ_RegTask( 1<< CFG_TASK_ENV_ID, UTIL_SEQ_RFU,Get_Zmod4410); //Get_Zmod4410); //register task
 8017ce0:	4a09      	ldr	r2, [pc, #36]	; (8017d08 <ENV_APPInit+0x2c>)
 8017ce2:	2100      	movs	r1, #0
 8017ce4:	2004      	movs	r0, #4
 8017ce6:	f002 fc6f 	bl	801a5c8 <UTIL_SEQ_RegTask>
	HW_TS_Create(CFG_TIM_PROC_ID_ISR,&(ENV_TIMER_ID), hw_ts_Repeated, ENV_CALL_BACK);
 8017cea:	4b08      	ldr	r3, [pc, #32]	; (8017d0c <ENV_APPInit+0x30>)
 8017cec:	2201      	movs	r2, #1
 8017cee:	4908      	ldr	r1, [pc, #32]	; (8017d10 <ENV_APPInit+0x34>)
 8017cf0:	2000      	movs	r0, #0
 8017cf2:	f7f4 f80b 	bl	800bd0c <HW_TS_Create>

	HW_TS_Start(ENV_TIMER_ID,ENV_UPDATE_PERIOD);//	 UTIL_SEQ_SetTask( 1<<CFG_TASK_BME_ID, CFG_SCH_PRIO_0);  // set to be run and in main.c it start execution by calling UTIL_SEQ_RunTask in while(1) loop
 8017cf6:	4b06      	ldr	r3, [pc, #24]	; (8017d10 <ENV_APPInit+0x34>)
 8017cf8:	781b      	ldrb	r3, [r3, #0]
 8017cfa:	4906      	ldr	r1, [pc, #24]	; (8017d14 <ENV_APPInit+0x38>)
 8017cfc:	4618      	mov	r0, r3
 8017cfe:	f7f4 f903 	bl	800bf08 <HW_TS_Start>
}
 8017d02:	bf00      	nop
 8017d04:	bd80      	pop	{r7, pc}
 8017d06:	bf00      	nop
 8017d08:	08017f01 	.word	0x08017f01
 8017d0c:	08017da5 	.word	0x08017da5
 8017d10:	200008eb 	.word	0x200008eb
 8017d14:	0002d06a 	.word	0x0002d06a

08017d18 <TS_Toggle>:
void TS_Toggle(void)
{
 8017d18:	b580      	push	{r7, lr}
 8017d1a:	af00      	add	r7, sp, #0
	UTIL_SEQ_RegTask( 1<< CFG_TASK_TS_ID, UTIL_SEQ_RFU,TS); //Get_Zmod4410); //register task
 8017d1c:	4a06      	ldr	r2, [pc, #24]	; (8017d38 <TS_Toggle+0x20>)
 8017d1e:	2100      	movs	r1, #0
 8017d20:	2040      	movs	r0, #64	; 0x40
 8017d22:	f002 fc51 	bl	801a5c8 <UTIL_SEQ_RegTask>
	HW_TS_Create(CFG_TIM_PROC_ID_ISR,&(Ts_TIMER_ID), hw_ts_SingleShot, TS_CALL_BACK);
 8017d26:	4b05      	ldr	r3, [pc, #20]	; (8017d3c <TS_Toggle+0x24>)
 8017d28:	2200      	movs	r2, #0
 8017d2a:	4905      	ldr	r1, [pc, #20]	; (8017d40 <TS_Toggle+0x28>)
 8017d2c:	2000      	movs	r0, #0
 8017d2e:	f7f3 ffed 	bl	800bd0c <HW_TS_Create>
}
 8017d32:	bf00      	nop
 8017d34:	bd80      	pop	{r7, pc}
 8017d36:	bf00      	nop
 8017d38:	08017d55 	.word	0x08017d55
 8017d3c:	08017d45 	.word	0x08017d45
 8017d40:	200008ed 	.word	0x200008ed

08017d44 <TS_CALL_BACK>:
void TS_CALL_BACK(void)
{
 8017d44:	b580      	push	{r7, lr}
 8017d46:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask(1<<CFG_TASK_TS_ID,CFG_SCH_PRIO_0);
 8017d48:	2100      	movs	r1, #0
 8017d4a:	2040      	movs	r0, #64	; 0x40
 8017d4c:	f002 fc5e 	bl	801a60c <UTIL_SEQ_SetTask>
}
 8017d50:	bf00      	nop
 8017d52:	bd80      	pop	{r7, pc}

08017d54 <TS>:
void TS(void)
{
 8017d54:	b580      	push	{r7, lr}
 8017d56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,TS_Pin,GPIO_PIN_RESET);
 8017d58:	2200      	movs	r2, #0
 8017d5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8017d5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8017d62:	f7f7 fde3 	bl	800f92c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8017d66:	2001      	movs	r0, #1
 8017d68:	f7f2 fb5b 	bl	800a422 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA,TS_Pin,GPIO_PIN_SET);
 8017d6c:	2201      	movs	r2, #1
 8017d6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8017d72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8017d76:	f7f7 fdd9 	bl	800f92c <HAL_GPIO_WritePin>
	printf("EO_v_interrupt %d \r\n",EOC_v);
 8017d7a:	4b04      	ldr	r3, [pc, #16]	; (8017d8c <TS+0x38>)
 8017d7c:	781b      	ldrb	r3, [r3, #0]
 8017d7e:	4619      	mov	r1, r3
 8017d80:	4803      	ldr	r0, [pc, #12]	; (8017d90 <TS+0x3c>)
 8017d82:	f003 fcc1 	bl	801b708 <iprintf>
}
 8017d86:	bf00      	nop
 8017d88:	bd80      	pop	{r7, pc}
 8017d8a:	bf00      	nop
 8017d8c:	200009ce 	.word	0x200009ce
 8017d90:	08020e8c 	.word	0x08020e8c

08017d94 <Noti_CALL_BACK>:
void Noti_CALL_BACK(void)
{
 8017d94:	b580      	push	{r7, lr}
 8017d96:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask(1<<CFG_TASK_INTR_ID,CFG_SCH_PRIO_0);
 8017d98:	2100      	movs	r1, #0
 8017d9a:	2008      	movs	r0, #8
 8017d9c:	f002 fc36 	bl	801a60c <UTIL_SEQ_SetTask>
}
 8017da0:	bf00      	nop
 8017da2:	bd80      	pop	{r7, pc}

08017da4 <ENV_CALL_BACK>:
void ENV_CALL_BACK(void)
{
 8017da4:	b580      	push	{r7, lr}
 8017da6:	b082      	sub	sp, #8
 8017da8:	af00      	add	r7, sp, #0
	//	 printf("call_back\n");
	// uint16_t el=linkTimer(ENV_TIMER_ID);

	uint32_t status = UTIL_SEQ_IsPauseTask( 1<<CFG_TASK_ENV_ID);
 8017daa:	2004      	movs	r0, #4
 8017dac:	f002 fc7a 	bl	801a6a4 <UTIL_SEQ_IsPauseTask>
 8017db0:	6078      	str	r0, [r7, #4]
		if(status==1)
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	2b01      	cmp	r3, #1
 8017db6:	d102      	bne.n	8017dbe <ENV_CALL_BACK+0x1a>
		{
			UTIL_SEQ_ResumeTask(1<<CFG_TASK_ENV_ID);
 8017db8:	2004      	movs	r0, #4
 8017dba:	f002 fc99 	bl	801a6f0 <UTIL_SEQ_ResumeTask>
		}
	UTIL_SEQ_SetTask( 1<<CFG_TASK_ENV_ID, CFG_SCH_PRIO_0);
 8017dbe:	2100      	movs	r1, #0
 8017dc0:	2004      	movs	r0, #4
 8017dc2:	f002 fc23 	bl	801a60c <UTIL_SEQ_SetTask>

}
 8017dc6:	bf00      	nop
 8017dc8:	3708      	adds	r7, #8
 8017dca:	46bd      	mov	sp, r7
 8017dcc:	bd80      	pop	{r7, pc}
	...

08017dd0 <Zmod4410_init>:
void Zmod4410_init(void)
{
 8017dd0:	b580      	push	{r7, lr}
 8017dd2:	b082      	sub	sp, #8
 8017dd4:	af00      	add	r7, sp, #0
	uint8_t ret;
	ret = HAL__Init(&hal);
 8017dd6:	4835      	ldr	r0, [pc, #212]	; (8017eac <Zmod4410_init+0xdc>)
 8017dd8:	f7f1 fcca 	bl	8009770 <HAL__Init>
 8017ddc:	4603      	mov	r3, r0
 8017dde:	71fb      	strb	r3, [r7, #7]
	if (ret) {
 8017de0:	79fb      	ldrb	r3, [r7, #7]
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	d004      	beq.n	8017df0 <Zmod4410_init+0x20>
		HAL_HandleError(ret, "Hardware initialization");
 8017de6:	79fb      	ldrb	r3, [r7, #7]
 8017de8:	4931      	ldr	r1, [pc, #196]	; (8017eb0 <Zmod4410_init+0xe0>)
 8017dea:	4618      	mov	r0, r3
 8017dec:	f7f1 fce6 	bl	80097bc <HAL_HandleError>
	}
	// * and configure the sensor for the IAQ_2nd_Gen_ULP algorithm */
	dev.read = &_i2c_read_reg;
 8017df0:	4b30      	ldr	r3, [pc, #192]	; (8017eb4 <Zmod4410_init+0xe4>)
 8017df2:	4a31      	ldr	r2, [pc, #196]	; (8017eb8 <Zmod4410_init+0xe8>)
 8017df4:	615a      	str	r2, [r3, #20]
	dev.write =_i2c_write_reg;
 8017df6:	4b2f      	ldr	r3, [pc, #188]	; (8017eb4 <Zmod4410_init+0xe4>)
 8017df8:	4a30      	ldr	r2, [pc, #192]	; (8017ebc <Zmod4410_init+0xec>)
 8017dfa:	619a      	str	r2, [r3, #24]
	dev.delay_ms=Delay;
 8017dfc:	4b2d      	ldr	r3, [pc, #180]	; (8017eb4 <Zmod4410_init+0xe4>)
 8017dfe:	4a30      	ldr	r2, [pc, #192]	; (8017ec0 <Zmod4410_init+0xf0>)
 8017e00:	61da      	str	r2, [r3, #28]
	dev.i2c_addr = ZMOD4410_I2C_ADDR;
 8017e02:	4b2c      	ldr	r3, [pc, #176]	; (8017eb4 <Zmod4410_init+0xe4>)
 8017e04:	2264      	movs	r2, #100	; 0x64
 8017e06:	701a      	strb	r2, [r3, #0]
	dev.pid = ZMOD4410_PID;
 8017e08:	4b2a      	ldr	r3, [pc, #168]	; (8017eb4 <Zmod4410_init+0xe4>)
 8017e0a:	f242 3210 	movw	r2, #8976	; 0x2310
 8017e0e:	819a      	strh	r2, [r3, #12]
	dev.init_conf = &zmod_iaq2_ulp_sensor_cfg[INIT];
 8017e10:	4b28      	ldr	r3, [pc, #160]	; (8017eb4 <Zmod4410_init+0xe4>)
 8017e12:	4a2c      	ldr	r2, [pc, #176]	; (8017ec4 <Zmod4410_init+0xf4>)
 8017e14:	621a      	str	r2, [r3, #32]
	dev.meas_conf = &zmod_iaq2_ulp_sensor_cfg[MEASUREMENT];
 8017e16:	4b27      	ldr	r3, [pc, #156]	; (8017eb4 <Zmod4410_init+0xe4>)
 8017e18:	4a2b      	ldr	r2, [pc, #172]	; (8017ec8 <Zmod4410_init+0xf8>)
 8017e1a:	625a      	str	r2, [r3, #36]	; 0x24
	dev.prod_data = prod_data;
 8017e1c:	4b25      	ldr	r3, [pc, #148]	; (8017eb4 <Zmod4410_init+0xe4>)
 8017e1e:	4a2b      	ldr	r2, [pc, #172]	; (8017ecc <Zmod4410_init+0xfc>)
 8017e20:	611a      	str	r2, [r3, #16]

	ret = detect_and_configure ( &dev, ZMOD4410_PROD_DATA_LEN, &errContext );
 8017e22:	4a2b      	ldr	r2, [pc, #172]	; (8017ed0 <Zmod4410_init+0x100>)
 8017e24:	2107      	movs	r1, #7
 8017e26:	4823      	ldr	r0, [pc, #140]	; (8017eb4 <Zmod4410_init+0xe4>)
 8017e28:	f000 f9f2 	bl	8018210 <detect_and_configure>
 8017e2c:	4603      	mov	r3, r0
 8017e2e:	71fb      	strb	r3, [r7, #7]
	if ( ret ) {
 8017e30:	79fb      	ldrb	r3, [r7, #7]
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	d006      	beq.n	8017e44 <Zmod4410_init+0x74>
		HAL_HandleError ( ret, errContext );
 8017e36:	79fb      	ldrb	r3, [r7, #7]
 8017e38:	4a25      	ldr	r2, [pc, #148]	; (8017ed0 <Zmod4410_init+0x100>)
 8017e3a:	6812      	ldr	r2, [r2, #0]
 8017e3c:	4611      	mov	r1, r2
 8017e3e:	4618      	mov	r0, r3
 8017e40:	f7f1 fcbc 	bl	80097bc <HAL_HandleError>
	}

	/* Try finding a Renesas temperature and humidity sensor - example will work
	 * without it, but results will be less accurate. */
	ret = HSxxxx_Init ( &hsxxxx, &hal );
 8017e44:	4919      	ldr	r1, [pc, #100]	; (8017eac <Zmod4410_init+0xdc>)
 8017e46:	4823      	ldr	r0, [pc, #140]	; (8017ed4 <Zmod4410_init+0x104>)
 8017e48:	f7f3 fa1f 	bl	800b28a <HSxxxx_Init>
 8017e4c:	4603      	mov	r3, r0
 8017e4e:	71fb      	strb	r3, [r7, #7]
	if ( ret ) {
 8017e50:	79fb      	ldrb	r3, [r7, #7]
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	d006      	beq.n	8017e64 <Zmod4410_init+0x94>
		printf ( "No temperature/humidity sensor found, using on-chip" );
 8017e56:	4820      	ldr	r0, [pc, #128]	; (8017ed8 <Zmod4410_init+0x108>)
 8017e58:	f003 fc56 	bl	801b708 <iprintf>
		printf ( " temperature sensor and 50%% relative humidity!\n\n" );
 8017e5c:	481f      	ldr	r0, [pc, #124]	; (8017edc <Zmod4410_init+0x10c>)
 8017e5e:	f003 fc53 	bl	801b708 <iprintf>
 8017e62:	e00c      	b.n	8017e7e <Zmod4410_init+0xae>
	}
	else {
		htSensor = &hsxxxx;
 8017e64:	4b1e      	ldr	r3, [pc, #120]	; (8017ee0 <Zmod4410_init+0x110>)
 8017e66:	4a1b      	ldr	r2, [pc, #108]	; (8017ed4 <Zmod4410_init+0x104>)
 8017e68:	601a      	str	r2, [r3, #0]
		printf ( "Found %s humdity & temperature sensor\n\n", HSxxxx_Name ( htSensor ) );
 8017e6a:	4b1d      	ldr	r3, [pc, #116]	; (8017ee0 <Zmod4410_init+0x110>)
 8017e6c:	681b      	ldr	r3, [r3, #0]
 8017e6e:	4618      	mov	r0, r3
 8017e70:	f7f3 fa42 	bl	800b2f8 <HSxxxx_Name>
 8017e74:	4603      	mov	r3, r0
 8017e76:	4619      	mov	r1, r3
 8017e78:	481a      	ldr	r0, [pc, #104]	; (8017ee4 <Zmod4410_init+0x114>)
 8017e7a:	f003 fc45 	bl	801b708 <iprintf>
	/* Set default values for temperature and humidity: These values will be used
	 * if no sensor is detected or if reading the sensor fails.
	 * The temperature value of -300°C causes the algo to use the on-chip temperature
	 * measurement of the gas sensor. However, an external temperaturue and humidity
	 * sensor provides better accuracy and is the preferred input source. */
	htResults . temperature = -300;
 8017e7e:	4b1a      	ldr	r3, [pc, #104]	; (8017ee8 <Zmod4410_init+0x118>)
 8017e80:	4a1a      	ldr	r2, [pc, #104]	; (8017eec <Zmod4410_init+0x11c>)
 8017e82:	601a      	str	r2, [r3, #0]
	htResults . humidity    =  50;
 8017e84:	4b18      	ldr	r3, [pc, #96]	; (8017ee8 <Zmod4410_init+0x118>)
 8017e86:	4a1a      	ldr	r2, [pc, #104]	; (8017ef0 <Zmod4410_init+0x120>)
 8017e88:	605a      	str	r2, [r3, #4]

	/* One-time initialization of the algorithm. Handle passed to calculation
	 * function. */
	ret = init_iaq_2nd_gen_ulp(&algo_handle);
 8017e8a:	481a      	ldr	r0, [pc, #104]	; (8017ef4 <Zmod4410_init+0x124>)
 8017e8c:	f7ef f9a6 	bl	80071dc <init_iaq_2nd_gen_ulp>
 8017e90:	4603      	mov	r3, r0
 8017e92:	71fb      	strb	r3, [r7, #7]
	if (ret) {
 8017e94:	79fb      	ldrb	r3, [r7, #7]
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	d004      	beq.n	8017ea4 <Zmod4410_init+0xd4>
		HAL_HandleError(ret, "Algorithm initialization");
 8017e9a:	79fb      	ldrb	r3, [r7, #7]
 8017e9c:	4916      	ldr	r1, [pc, #88]	; (8017ef8 <Zmod4410_init+0x128>)
 8017e9e:	4618      	mov	r0, r3
 8017ea0:	f7f1 fc8c 	bl	80097bc <HAL_HandleError>
	}

}
 8017ea4:	bf00      	nop
 8017ea6:	3708      	adds	r7, #8
 8017ea8:	46bd      	mov	sp, r7
 8017eaa:	bd80      	pop	{r7, pc}
 8017eac:	200008f0 	.word	0x200008f0
 8017eb0:	08020ea4 	.word	0x08020ea4
 8017eb4:	20000898 	.word	0x20000898
 8017eb8:	0800d791 	.word	0x0800d791
 8017ebc:	0800d7e1 	.word	0x0800d7e1
 8017ec0:	0800d777 	.word	0x0800d777
 8017ec4:	20000074 	.word	0x20000074
 8017ec8:	200000a4 	.word	0x200000a4
 8017ecc:	200008e4 	.word	0x200008e4
 8017ed0:	20000904 	.word	0x20000904
 8017ed4:	200009b0 	.word	0x200009b0
 8017ed8:	08020ebc 	.word	0x08020ebc
 8017edc:	08020ef0 	.word	0x08020ef0
 8017ee0:	200009b8 	.word	0x200009b8
 8017ee4:	08020f24 	.word	0x08020f24
 8017ee8:	200009bc 	.word	0x200009bc
 8017eec:	c3960000 	.word	0xc3960000
 8017ef0:	42480000 	.word	0x42480000
 8017ef4:	20000908 	.word	0x20000908
 8017ef8:	08020f4c 	.word	0x08020f4c
 8017efc:	00000000 	.word	0x00000000

08017f00 <Get_Zmod4410>:

void Get_Zmod4410(void)
{
 8017f00:	b580      	push	{r7, lr}
 8017f02:	b082      	sub	sp, #8
 8017f04:	af00      	add	r7, sp, #0
	uint8_t ret;
	uint32_t  remaining_period_time = ZMOD4410_IAQ2_ULP_SAMPLE_TIME;
 8017f06:	4ba8      	ldr	r3, [pc, #672]	; (80181a8 <Get_Zmod4410+0x2a8>)
 8017f08:	607b      	str	r3, [r7, #4]
	ret = zmod4xxx_start_measurement(&dev);
 8017f0a:	48a8      	ldr	r0, [pc, #672]	; (80181ac <Get_Zmod4410+0x2ac>)
 8017f0c:	f7f5 fbdd 	bl	800d6ca <zmod4xxx_start_measurement>
 8017f10:	4603      	mov	r3, r0
 8017f12:	70fb      	strb	r3, [r7, #3]
	if (ret) {
 8017f14:	78fb      	ldrb	r3, [r7, #3]
 8017f16:	2b00      	cmp	r3, #0
 8017f18:	d004      	beq.n	8017f24 <Get_Zmod4410+0x24>
		HAL_HandleError(ret, "Starting measurement");
 8017f1a:	78fb      	ldrb	r3, [r7, #3]
 8017f1c:	49a4      	ldr	r1, [pc, #656]	; (80181b0 <Get_Zmod4410+0x2b0>)
 8017f1e:	4618      	mov	r0, r3
 8017f20:	f7f1 fc4c 	bl	80097bc <HAL_HandleError>
	}
	/* If a sensor was detected, read temperature and humidity from it.
	 * Errors occuring during read are ignored: In case of error the
	 * HSxxx API leaves data in the result data structure unmodified. */
	if ( htSensor ) {
 8017f24:	4ba3      	ldr	r3, [pc, #652]	; (80181b4 <Get_Zmod4410+0x2b4>)
 8017f26:	681b      	ldr	r3, [r3, #0]
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	d005      	beq.n	8017f38 <Get_Zmod4410+0x38>
		HSxxxx_Measure( htSensor, &htResults );
 8017f2c:	4ba1      	ldr	r3, [pc, #644]	; (80181b4 <Get_Zmod4410+0x2b4>)
 8017f2e:	681b      	ldr	r3, [r3, #0]
 8017f30:	49a1      	ldr	r1, [pc, #644]	; (80181b8 <Get_Zmod4410+0x2b8>)
 8017f32:	4618      	mov	r0, r3
 8017f34:	f7f3 f9c0 	bl	800b2b8 <HSxxxx_Measure>
	/* Wait for the measurement to be complete (for immediate result printing).
	 * Addtional delay is inserted at the end of this loop to keep proper
	 * measurement timing and keep algorithm accuracy. For more information,
	 * read the Programming Manual, section "Interrupt Usage and Measurement
	 * Timing". */
	dev.delay_ms(ZMOD4410_IAQ2_ULP_SEQ_RUN_TIME_WITH_MARGIN);
 8017f38:	4b9c      	ldr	r3, [pc, #624]	; (80181ac <Get_Zmod4410+0x2ac>)
 8017f3a:	69db      	ldr	r3, [r3, #28]
 8017f3c:	f240 30f2 	movw	r0, #1010	; 0x3f2
 8017f40:	4798      	blx	r3

	remaining_period_time -= ZMOD4410_IAQ2_ULP_SEQ_RUN_TIME_WITH_MARGIN + HSxxxx_MeasurementDuration ( htSensor );
 8017f42:	4b9c      	ldr	r3, [pc, #624]	; (80181b4 <Get_Zmod4410+0x2b4>)
 8017f44:	681b      	ldr	r3, [r3, #0]
 8017f46:	4618      	mov	r0, r3
 8017f48:	f7ff fb7a 	bl	8017640 <HSxxxx_MeasurementDuration>
 8017f4c:	4603      	mov	r3, r0
 8017f4e:	f203 33f2 	addw	r3, r3, #1010	; 0x3f2
 8017f52:	687a      	ldr	r2, [r7, #4]
 8017f54:	1ad3      	subs	r3, r2, r3
 8017f56:	607b      	str	r3, [r7, #4]

	read_and_verify ( &dev, adc_result, "ZMOD4410" );
 8017f58:	4a98      	ldr	r2, [pc, #608]	; (80181bc <Get_Zmod4410+0x2bc>)
 8017f5a:	4999      	ldr	r1, [pc, #612]	; (80181c0 <Get_Zmod4410+0x2c0>)
 8017f5c:	4893      	ldr	r0, [pc, #588]	; (80181ac <Get_Zmod4410+0x2ac>)
 8017f5e:	f000 f9db 	bl	8018318 <read_and_verify>

	/* Assign algorithm inputs: raw sensor data and ambient conditions. */
	algo_input.adc_result       = adc_result;
 8017f62:	4b98      	ldr	r3, [pc, #608]	; (80181c4 <Get_Zmod4410+0x2c4>)
 8017f64:	4a96      	ldr	r2, [pc, #600]	; (80181c0 <Get_Zmod4410+0x2c0>)
 8017f66:	601a      	str	r2, [r3, #0]
	algo_input.humidity_pct     = htResults.humidity;
 8017f68:	4b93      	ldr	r3, [pc, #588]	; (80181b8 <Get_Zmod4410+0x2b8>)
 8017f6a:	685b      	ldr	r3, [r3, #4]
 8017f6c:	4a95      	ldr	r2, [pc, #596]	; (80181c4 <Get_Zmod4410+0x2c4>)
 8017f6e:	6053      	str	r3, [r2, #4]
	algo_input.temperature_degc = htResults.temperature;
 8017f70:	4b91      	ldr	r3, [pc, #580]	; (80181b8 <Get_Zmod4410+0x2b8>)
 8017f72:	681b      	ldr	r3, [r3, #0]
 8017f74:	4a93      	ldr	r2, [pc, #588]	; (80181c4 <Get_Zmod4410+0x2c4>)
 8017f76:	6093      	str	r3, [r2, #8]

	/* Calculate algorithm results. */
	ret = calc_iaq_2nd_gen_ulp(&algo_handle, &dev, &algo_input, &algo_results);
 8017f78:	4b93      	ldr	r3, [pc, #588]	; (80181c8 <Get_Zmod4410+0x2c8>)
 8017f7a:	4a92      	ldr	r2, [pc, #584]	; (80181c4 <Get_Zmod4410+0x2c4>)
 8017f7c:	498b      	ldr	r1, [pc, #556]	; (80181ac <Get_Zmod4410+0x2ac>)
 8017f7e:	4893      	ldr	r0, [pc, #588]	; (80181cc <Get_Zmod4410+0x2cc>)
 8017f80:	f7ef ffda 	bl	8007f38 <calc_iaq_2nd_gen_ulp>
 8017f84:	4603      	mov	r3, r0
 8017f86:	70fb      	strb	r3, [r7, #3]

	printf ( "*********** Measurements ***********\n" );
 8017f88:	4891      	ldr	r0, [pc, #580]	; (80181d0 <Get_Zmod4410+0x2d0>)
 8017f8a:	f003 fc2b 	bl	801b7e4 <puts>
	//	        for (int i = 0; i < 13; i++) {
	//	            printf ( " Rmox[%2d]    = %8.3f kOhm\n", i, algo_results.rmox[i] / 1e3 );
	//	        }
	//printf ( " Rcda        = %8.3f kOhm\n", pow(10, algo_results.Log_nonLog_rcda[0]) / 1e3 );
	printf ( " EtOH        = %8.2f ppm\n", algo_results.etoh );
 8017f8e:	4b8e      	ldr	r3, [pc, #568]	; (80181c8 <Get_Zmod4410+0x2c8>)
 8017f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017f92:	4618      	mov	r0, r3
 8017f94:	f7f0 fce8 	bl	8008968 <__aeabi_f2d>
 8017f98:	4602      	mov	r2, r0
 8017f9a:	460b      	mov	r3, r1
 8017f9c:	488d      	ldr	r0, [pc, #564]	; (80181d4 <Get_Zmod4410+0x2d4>)
 8017f9e:	f003 fbb3 	bl	801b708 <iprintf>
	printf ( " TVOC        = %8.2f mg/m^3\n", algo_results.tvoc );
 8017fa2:	4b89      	ldr	r3, [pc, #548]	; (80181c8 <Get_Zmod4410+0x2c8>)
 8017fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017fa6:	4618      	mov	r0, r3
 8017fa8:	f7f0 fcde 	bl	8008968 <__aeabi_f2d>
 8017fac:	4602      	mov	r2, r0
 8017fae:	460b      	mov	r3, r1
 8017fb0:	4889      	ldr	r0, [pc, #548]	; (80181d8 <Get_Zmod4410+0x2d8>)
 8017fb2:	f003 fba9 	bl	801b708 <iprintf>
	printf ( " IAQ         = %8.1f\n", algo_results.iaq );
 8017fb6:	4b84      	ldr	r3, [pc, #528]	; (80181c8 <Get_Zmod4410+0x2c8>)
 8017fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017fba:	4618      	mov	r0, r3
 8017fbc:	f7f0 fcd4 	bl	8008968 <__aeabi_f2d>
 8017fc0:	4602      	mov	r2, r0
 8017fc2:	460b      	mov	r3, r1
 8017fc4:	4885      	ldr	r0, [pc, #532]	; (80181dc <Get_Zmod4410+0x2dc>)
 8017fc6:	f003 fb9f 	bl	801b708 <iprintf>
	printf ( " eCO2        = %8.0f ppm\n", algo_results.eco2 );
 8017fca:	4b7f      	ldr	r3, [pc, #508]	; (80181c8 <Get_Zmod4410+0x2c8>)
 8017fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017fce:	4618      	mov	r0, r3
 8017fd0:	f7f0 fcca 	bl	8008968 <__aeabi_f2d>
 8017fd4:	4602      	mov	r2, r0
 8017fd6:	460b      	mov	r3, r1
 8017fd8:	4881      	ldr	r0, [pc, #516]	; (80181e0 <Get_Zmod4410+0x2e0>)
 8017fda:	f003 fb95 	bl	801b708 <iprintf>
	printf ( " rel_IAQ     = %8.1f\n", algo_results.rel_iaq );
 8017fde:	4b7a      	ldr	r3, [pc, #488]	; (80181c8 <Get_Zmod4410+0x2c8>)
 8017fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017fe2:	4618      	mov	r0, r3
 8017fe4:	f7f0 fcc0 	bl	8008968 <__aeabi_f2d>
 8017fe8:	4602      	mov	r2, r0
 8017fea:	460b      	mov	r3, r1
 8017fec:	487d      	ldr	r0, [pc, #500]	; (80181e4 <Get_Zmod4410+0x2e4>)
 8017fee:	f003 fb8b 	bl	801b708 <iprintf>
	printf ( " TEMP     = %8.1f\n", algo_results.temperature );
 8017ff2:	4b75      	ldr	r3, [pc, #468]	; (80181c8 <Get_Zmod4410+0x2c8>)
 8017ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017ff6:	4618      	mov	r0, r3
 8017ff8:	f7f0 fcb6 	bl	8008968 <__aeabi_f2d>
 8017ffc:	4602      	mov	r2, r0
 8017ffe:	460b      	mov	r3, r1
 8018000:	4879      	ldr	r0, [pc, #484]	; (80181e8 <Get_Zmod4410+0x2e8>)
 8018002:	f003 fb81 	bl	801b708 <iprintf>
	if ( htSensor ) {
 8018006:	4b6b      	ldr	r3, [pc, #428]	; (80181b4 <Get_Zmod4410+0x2b4>)
 8018008:	681b      	ldr	r3, [r3, #0]
 801800a:	2b00      	cmp	r3, #0
 801800c:	d013      	beq.n	8018036 <Get_Zmod4410+0x136>
		printf ( " Humidity    = %8.2f %%rH\n", htResults.humidity );
 801800e:	4b6a      	ldr	r3, [pc, #424]	; (80181b8 <Get_Zmod4410+0x2b8>)
 8018010:	685b      	ldr	r3, [r3, #4]
 8018012:	4618      	mov	r0, r3
 8018014:	f7f0 fca8 	bl	8008968 <__aeabi_f2d>
 8018018:	4602      	mov	r2, r0
 801801a:	460b      	mov	r3, r1
 801801c:	4873      	ldr	r0, [pc, #460]	; (80181ec <Get_Zmod4410+0x2ec>)
 801801e:	f003 fb73 	bl	801b708 <iprintf>
		printf ( " Temperature = %8.2f degC\n", htResults.temperature );
 8018022:	4b65      	ldr	r3, [pc, #404]	; (80181b8 <Get_Zmod4410+0x2b8>)
 8018024:	681b      	ldr	r3, [r3, #0]
 8018026:	4618      	mov	r0, r3
 8018028:	f7f0 fc9e 	bl	8008968 <__aeabi_f2d>
 801802c:	4602      	mov	r2, r0
 801802e:	460b      	mov	r3, r1
 8018030:	486f      	ldr	r0, [pc, #444]	; (80181f0 <Get_Zmod4410+0x2f0>)
 8018032:	f003 fb69 	bl	801b708 <iprintf>
	}

	/* Check validity of the algorithm results. */
	switch (ret) {
 8018036:	78fb      	ldrb	r3, [r7, #3]
 8018038:	2b00      	cmp	r3, #0
 801803a:	d005      	beq.n	8018048 <Get_Zmod4410+0x148>
 801803c:	2b01      	cmp	r3, #1
 801803e:	d107      	bne.n	8018050 <Get_Zmod4410+0x150>
	case IAQ_2ND_GEN_ULP_STABILIZATION:
		/* The sensor should run for at least 10 cycles to stabilize.
		 * Algorithm results obtained during this period SHOULD NOT be
		 * considered as valid outputs! */
		printf ( "Warm-Up!\n" );
 8018040:	486c      	ldr	r0, [pc, #432]	; (80181f4 <Get_Zmod4410+0x2f4>)
 8018042:	f003 fbcf 	bl	801b7e4 <puts>
		break;
 8018046:	e008      	b.n	801805a <Get_Zmod4410+0x15a>
	case IAQ_2ND_GEN_ULP_OK:
		printf ( "Valid\n" );
 8018048:	486b      	ldr	r0, [pc, #428]	; (80181f8 <Get_Zmod4410+0x2f8>)
 801804a:	f003 fbcb 	bl	801b7e4 <puts>
		break;
 801804e:	e004      	b.n	801805a <Get_Zmod4410+0x15a>
	case IAQ_2ND_GEN_ULP_DAMAGE:
		printf ( "Error: Sensor probably damaged. Algorithm results may be incorrect.\n" );
		break;
		/* Exit program due to unexpected error. */
	default:
		HAL_HandleError(ret, "Algorithm calculation");
 8018050:	78fb      	ldrb	r3, [r7, #3]
 8018052:	496a      	ldr	r1, [pc, #424]	; (80181fc <Get_Zmod4410+0x2fc>)
 8018054:	4618      	mov	r0, r3
 8018056:	f7f1 fbb1 	bl	80097bc <HAL_HandleError>
	}

	/* Wait for the reaining time to keep proper measurement timing */
	//dev.delay_ms(remaining_period_time);
	ret=LPS25HB_GET_DATA(LPS25hb_data);
 801805a:	4869      	ldr	r0, [pc, #420]	; (8018200 <Get_Zmod4410+0x300>)
 801805c:	f7f1 fcb6 	bl	80099cc <LPS25HB_GET_DATA>
 8018060:	4603      	mov	r3, r0
 8018062:	70fb      	strb	r3, [r7, #3]
	if(ret==0)
 8018064:	78fb      	ldrb	r3, [r7, #3]
 8018066:	2b00      	cmp	r3, #0
 8018068:	d109      	bne.n	801807e <Get_Zmod4410+0x17e>
	{
		printf("Pressure:%f\n",LPS25hb_data[0]);
 801806a:	4b65      	ldr	r3, [pc, #404]	; (8018200 <Get_Zmod4410+0x300>)
 801806c:	681b      	ldr	r3, [r3, #0]
 801806e:	4618      	mov	r0, r3
 8018070:	f7f0 fc7a 	bl	8008968 <__aeabi_f2d>
 8018074:	4602      	mov	r2, r0
 8018076:	460b      	mov	r3, r1
 8018078:	4862      	ldr	r0, [pc, #392]	; (8018204 <Get_Zmod4410+0x304>)
 801807a:	f003 fb45 	bl	801b708 <iprintf>
	}
	if(Log_Track==5)
 801807e:	4b62      	ldr	r3, [pc, #392]	; (8018208 <Get_Zmod4410+0x308>)
 8018080:	781b      	ldrb	r3, [r3, #0]
 8018082:	2b05      	cmp	r3, #5
 8018084:	d106      	bne.n	8018094 <Get_Zmod4410+0x194>
		{
			Log_Data(1);
 8018086:	2001      	movs	r0, #1
 8018088:	f000 fa92 	bl	80185b0 <Log_Data>
			Log_Track=0;
 801808c:	4b5e      	ldr	r3, [pc, #376]	; (8018208 <Get_Zmod4410+0x308>)
 801808e:	2200      	movs	r2, #0
 8018090:	701a      	strb	r2, [r3, #0]
 8018092:	e005      	b.n	80180a0 <Get_Zmod4410+0x1a0>
		}
		else
		{
			Log_Track+=1;
 8018094:	4b5c      	ldr	r3, [pc, #368]	; (8018208 <Get_Zmod4410+0x308>)
 8018096:	781b      	ldrb	r3, [r3, #0]
 8018098:	3301      	adds	r3, #1
 801809a:	b2da      	uxtb	r2, r3
 801809c:	4b5a      	ldr	r3, [pc, #360]	; (8018208 <Get_Zmod4410+0x308>)
 801809e:	701a      	strb	r2, [r3, #0]
		}
	if(algo_results.iaq<=1.99)
 80180a0:	4b49      	ldr	r3, [pc, #292]	; (80181c8 <Get_Zmod4410+0x2c8>)
 80180a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80180a4:	4618      	mov	r0, r3
 80180a6:	f7f0 fc5f 	bl	8008968 <__aeabi_f2d>
 80180aa:	a337      	add	r3, pc, #220	; (adr r3, 8018188 <Get_Zmod4410+0x288>)
 80180ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180b0:	f7f0 ff2e 	bl	8008f10 <__aeabi_dcmple>
 80180b4:	4603      	mov	r3, r0
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	d003      	beq.n	80180c2 <Get_Zmod4410+0x1c2>
	{
		LED=1;
 80180ba:	4b54      	ldr	r3, [pc, #336]	; (801820c <Get_Zmod4410+0x30c>)
 80180bc:	2201      	movs	r2, #1
 80180be:	701a      	strb	r2, [r3, #0]
 80180c0:	e043      	b.n	801814a <Get_Zmod4410+0x24a>
	}
	else if(algo_results.iaq<=2.99)
 80180c2:	4b41      	ldr	r3, [pc, #260]	; (80181c8 <Get_Zmod4410+0x2c8>)
 80180c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80180c6:	4618      	mov	r0, r3
 80180c8:	f7f0 fc4e 	bl	8008968 <__aeabi_f2d>
 80180cc:	a330      	add	r3, pc, #192	; (adr r3, 8018190 <Get_Zmod4410+0x290>)
 80180ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180d2:	f7f0 ff1d 	bl	8008f10 <__aeabi_dcmple>
 80180d6:	4603      	mov	r3, r0
 80180d8:	2b00      	cmp	r3, #0
 80180da:	d003      	beq.n	80180e4 <Get_Zmod4410+0x1e4>
	{
		LED=2;
 80180dc:	4b4b      	ldr	r3, [pc, #300]	; (801820c <Get_Zmod4410+0x30c>)
 80180de:	2202      	movs	r2, #2
 80180e0:	701a      	strb	r2, [r3, #0]
 80180e2:	e032      	b.n	801814a <Get_Zmod4410+0x24a>
	}
	else if(algo_results.iaq<=3.99)
 80180e4:	4b38      	ldr	r3, [pc, #224]	; (80181c8 <Get_Zmod4410+0x2c8>)
 80180e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80180e8:	4618      	mov	r0, r3
 80180ea:	f7f0 fc3d 	bl	8008968 <__aeabi_f2d>
 80180ee:	a32a      	add	r3, pc, #168	; (adr r3, 8018198 <Get_Zmod4410+0x298>)
 80180f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180f4:	f7f0 ff0c 	bl	8008f10 <__aeabi_dcmple>
 80180f8:	4603      	mov	r3, r0
 80180fa:	2b00      	cmp	r3, #0
 80180fc:	d003      	beq.n	8018106 <Get_Zmod4410+0x206>
	{
		LED=3;
 80180fe:	4b43      	ldr	r3, [pc, #268]	; (801820c <Get_Zmod4410+0x30c>)
 8018100:	2203      	movs	r2, #3
 8018102:	701a      	strb	r2, [r3, #0]
 8018104:	e021      	b.n	801814a <Get_Zmod4410+0x24a>
	}
	else if(algo_results.iaq<=4.99)
 8018106:	4b30      	ldr	r3, [pc, #192]	; (80181c8 <Get_Zmod4410+0x2c8>)
 8018108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801810a:	4618      	mov	r0, r3
 801810c:	f7f0 fc2c 	bl	8008968 <__aeabi_f2d>
 8018110:	a323      	add	r3, pc, #140	; (adr r3, 80181a0 <Get_Zmod4410+0x2a0>)
 8018112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018116:	f7f0 fefb 	bl	8008f10 <__aeabi_dcmple>
 801811a:	4603      	mov	r3, r0
 801811c:	2b00      	cmp	r3, #0
 801811e:	d003      	beq.n	8018128 <Get_Zmod4410+0x228>
	{
		LED=4;
 8018120:	4b3a      	ldr	r3, [pc, #232]	; (801820c <Get_Zmod4410+0x30c>)
 8018122:	2204      	movs	r2, #4
 8018124:	701a      	strb	r2, [r3, #0]
 8018126:	e010      	b.n	801814a <Get_Zmod4410+0x24a>
	}
	else if(algo_results.iaq<=5.00)
 8018128:	4b27      	ldr	r3, [pc, #156]	; (80181c8 <Get_Zmod4410+0x2c8>)
 801812a:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 801812e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8018132:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801813a:	d803      	bhi.n	8018144 <Get_Zmod4410+0x244>
	{
		LED=5;
 801813c:	4b33      	ldr	r3, [pc, #204]	; (801820c <Get_Zmod4410+0x30c>)
 801813e:	2205      	movs	r2, #5
 8018140:	701a      	strb	r2, [r3, #0]
 8018142:	e002      	b.n	801814a <Get_Zmod4410+0x24a>
	}
	else{
		LED=0;
 8018144:	4b31      	ldr	r3, [pc, #196]	; (801820c <Get_Zmod4410+0x30c>)
 8018146:	2200      	movs	r2, #0
 8018148:	701a      	strb	r2, [r3, #0]
	}
	IAQ_Status(LED);
 801814a:	4b30      	ldr	r3, [pc, #192]	; (801820c <Get_Zmod4410+0x30c>)
 801814c:	781b      	ldrb	r3, [r3, #0]
 801814e:	4618      	mov	r0, r3
 8018150:	f000 fc66 	bl	8018a20 <IAQ_Status>
	Battery();
 8018154:	f000 fc00 	bl	8018958 <Battery>
	Custom_Iaq_in_Send_Notification();
 8018158:	f7ff fc5c 	bl	8017a14 <Custom_Iaq_in_Send_Notification>
	Custom_Relative_ia_Send_Notification();
 801815c:	f7ff fc7e 	bl	8017a5c <Custom_Relative_ia_Send_Notification>
	Custom_Tvoc_Send_Notification();
 8018160:	f7ff fca0 	bl	8017aa4 <Custom_Tvoc_Send_Notification>
	Custom_Etoh_Send_Notification();
 8018164:	f7ff fcc2 	bl	8017aec <Custom_Etoh_Send_Notification>
	Custom_Co2_Send_Notification();
 8018168:	f7ff fce4 	bl	8017b34 <Custom_Co2_Send_Notification>
	/* Enviroment */
	Custom_Temp_Send_Notification();
 801816c:	f7ff fd06 	bl	8017b7c <Custom_Temp_Send_Notification>
	Custom_Humi_Send_Notification();
 8018170:	f7ff fd28 	bl	8017bc4 <Custom_Humi_Send_Notification>
	Custom_Pres_Send_Notification();
 8018174:	f7ff fd4a 	bl	8017c0c <Custom_Pres_Send_Notification>
	Custom_Bat_level_Send_Notification();
 8018178:	f7ff fc02 	bl	8017980 <Custom_Bat_level_Send_Notification>
	//static void Custom_Get_bme_Log_Update_Char(void);
	//static void Custom_Get_bme_Log_Send_Notification(void);
}
 801817c:	bf00      	nop
 801817e:	3708      	adds	r7, #8
 8018180:	46bd      	mov	sp, r7
 8018182:	bd80      	pop	{r7, pc}
 8018184:	f3af 8000 	nop.w
 8018188:	3d70a3d7 	.word	0x3d70a3d7
 801818c:	3fffd70a 	.word	0x3fffd70a
 8018190:	1eb851ec 	.word	0x1eb851ec
 8018194:	4007eb85 	.word	0x4007eb85
 8018198:	1eb851ec 	.word	0x1eb851ec
 801819c:	400feb85 	.word	0x400feb85
 80181a0:	8f5c28f6 	.word	0x8f5c28f6
 80181a4:	4013f5c2 	.word	0x4013f5c2
 80181a8:	00015f90 	.word	0x00015f90
 80181ac:	20000898 	.word	0x20000898
 80181b0:	08020f68 	.word	0x08020f68
 80181b4:	200009b8 	.word	0x200009b8
 80181b8:	200009bc 	.word	0x200009bc
 80181bc:	08020f80 	.word	0x08020f80
 80181c0:	200008c4 	.word	0x200008c4
 80181c4:	200009a4 	.word	0x200009a4
 80181c8:	20000948 	.word	0x20000948
 80181cc:	20000908 	.word	0x20000908
 80181d0:	08020f8c 	.word	0x08020f8c
 80181d4:	08020fb4 	.word	0x08020fb4
 80181d8:	08020fd0 	.word	0x08020fd0
 80181dc:	08020ff0 	.word	0x08020ff0
 80181e0:	08021008 	.word	0x08021008
 80181e4:	08021024 	.word	0x08021024
 80181e8:	0802103c 	.word	0x0802103c
 80181ec:	08021050 	.word	0x08021050
 80181f0:	0802106c 	.word	0x0802106c
 80181f4:	08021088 	.word	0x08021088
 80181f8:	08021094 	.word	0x08021094
 80181fc:	0802109c 	.word	0x0802109c
 8018200:	200009c4 	.word	0x200009c4
 8018204:	080210b4 	.word	0x080210b4
 8018208:	20000894 	.word	0x20000894
 801820c:	20000895 	.word	0x20000895

08018210 <detect_and_configure>:
int detect_and_configure ( zmod4xxx_dev_t*  sensor, int  pd_len, char const** errContext ) {
 8018210:	b580      	push	{r7, lr}
 8018212:	b088      	sub	sp, #32
 8018214:	af00      	add	r7, sp, #0
 8018216:	60f8      	str	r0, [r7, #12]
 8018218:	60b9      	str	r1, [r7, #8]
 801821a:	607a      	str	r2, [r7, #4]
	uint8_t  track_number [ ZMOD4XXX_LEN_TRACKING ];
	uint8_t ret;
	ret = zmod4xxx_init_sensor(sensor);
 801821c:	68f8      	ldr	r0, [r7, #12]
 801821e:	f7f5 f8db 	bl	800d3d8 <zmod4xxx_init_sensor>
 8018222:	4603      	mov	r3, r0
 8018224:	75fb      	strb	r3, [r7, #23]
	if ( ret ) {
 8018226:	7dfb      	ldrb	r3, [r7, #23]
 8018228:	2b00      	cmp	r3, #0
 801822a:	d004      	beq.n	8018236 <detect_and_configure+0x26>
		*errContext = "sensor initialization";
 801822c:	687b      	ldr	r3, [r7, #4]
 801822e:	4a31      	ldr	r2, [pc, #196]	; (80182f4 <detect_and_configure+0xe4>)
 8018230:	601a      	str	r2, [r3, #0]
		return ret;
 8018232:	7dfb      	ldrb	r3, [r7, #23]
 8018234:	e05a      	b.n	80182ec <detect_and_configure+0xdc>
	}

	/* Read product ID and configuration parameters. */
	ret = zmod4xxx_read_sensor_info(sensor);
 8018236:	68f8      	ldr	r0, [r7, #12]
 8018238:	f7f4 ff78 	bl	800d12c <zmod4xxx_read_sensor_info>
 801823c:	4603      	mov	r3, r0
 801823e:	75fb      	strb	r3, [r7, #23]
	if (ret) {
 8018240:	7dfb      	ldrb	r3, [r7, #23]
 8018242:	2b00      	cmp	r3, #0
 8018244:	d004      	beq.n	8018250 <detect_and_configure+0x40>
		*errContext = "reading sensor information";
 8018246:	687b      	ldr	r3, [r7, #4]
 8018248:	4a2b      	ldr	r2, [pc, #172]	; (80182f8 <detect_and_configure+0xe8>)
 801824a:	601a      	str	r2, [r3, #0]
		return ret;
 801824c:	7dfb      	ldrb	r3, [r7, #23]
 801824e:	e04d      	b.n	80182ec <detect_and_configure+0xdc>
	}

	/* Retrieve sensors unique tracking number and individual trimming information.
	 * Provide this information when requesting support from Renesas.
	 * Otherwise this function is not required for gas sensor operation. */
	ret = zmod4xxx_read_tracking_number(sensor, track_number);
 8018250:	f107 0310 	add.w	r3, r7, #16
 8018254:	4619      	mov	r1, r3
 8018256:	68f8      	ldr	r0, [r7, #12]
 8018258:	f7f5 f803 	bl	800d262 <zmod4xxx_read_tracking_number>
 801825c:	4603      	mov	r3, r0
 801825e:	75fb      	strb	r3, [r7, #23]
	if (ret) {
 8018260:	7dfb      	ldrb	r3, [r7, #23]
 8018262:	2b00      	cmp	r3, #0
 8018264:	d004      	beq.n	8018270 <detect_and_configure+0x60>
		*errContext = "Reading tracking number";
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	4a24      	ldr	r2, [pc, #144]	; (80182fc <detect_and_configure+0xec>)
 801826a:	601a      	str	r2, [r3, #0]
		return ret;
 801826c:	7dfb      	ldrb	r3, [r7, #23]
 801826e:	e03d      	b.n	80182ec <detect_and_configure+0xdc>
	}
	printf ( "Sensor tracking number: x0000" );
 8018270:	4823      	ldr	r0, [pc, #140]	; (8018300 <detect_and_configure+0xf0>)
 8018272:	f003 fa49 	bl	801b708 <iprintf>
	for (int i = 0; i < sizeof(track_number); i++) {
 8018276:	2300      	movs	r3, #0
 8018278:	61fb      	str	r3, [r7, #28]
 801827a:	e00b      	b.n	8018294 <detect_and_configure+0x84>
		printf ( "%02X", track_number[i] );
 801827c:	f107 0210 	add.w	r2, r7, #16
 8018280:	69fb      	ldr	r3, [r7, #28]
 8018282:	4413      	add	r3, r2
 8018284:	781b      	ldrb	r3, [r3, #0]
 8018286:	4619      	mov	r1, r3
 8018288:	481e      	ldr	r0, [pc, #120]	; (8018304 <detect_and_configure+0xf4>)
 801828a:	f003 fa3d 	bl	801b708 <iprintf>
	for (int i = 0; i < sizeof(track_number); i++) {
 801828e:	69fb      	ldr	r3, [r7, #28]
 8018290:	3301      	adds	r3, #1
 8018292:	61fb      	str	r3, [r7, #28]
 8018294:	69fb      	ldr	r3, [r7, #28]
 8018296:	2b05      	cmp	r3, #5
 8018298:	d9f0      	bls.n	801827c <detect_and_configure+0x6c>
	}
	printf ( "\n" );
 801829a:	200a      	movs	r0, #10
 801829c:	f003 fa46 	bl	801b72c <putchar>
	printf ( "Sensor trimming data:" );
 80182a0:	4819      	ldr	r0, [pc, #100]	; (8018308 <detect_and_configure+0xf8>)
 80182a2:	f003 fa31 	bl	801b708 <iprintf>
	for (int i = 0; i < pd_len; i++) {
 80182a6:	2300      	movs	r3, #0
 80182a8:	61bb      	str	r3, [r7, #24]
 80182aa:	e00a      	b.n	80182c2 <detect_and_configure+0xb2>
		printf ( " %i", prod_data[i] );
 80182ac:	4a17      	ldr	r2, [pc, #92]	; (801830c <detect_and_configure+0xfc>)
 80182ae:	69bb      	ldr	r3, [r7, #24]
 80182b0:	4413      	add	r3, r2
 80182b2:	781b      	ldrb	r3, [r3, #0]
 80182b4:	4619      	mov	r1, r3
 80182b6:	4816      	ldr	r0, [pc, #88]	; (8018310 <detect_and_configure+0x100>)
 80182b8:	f003 fa26 	bl	801b708 <iprintf>
	for (int i = 0; i < pd_len; i++) {
 80182bc:	69bb      	ldr	r3, [r7, #24]
 80182be:	3301      	adds	r3, #1
 80182c0:	61bb      	str	r3, [r7, #24]
 80182c2:	69ba      	ldr	r2, [r7, #24]
 80182c4:	68bb      	ldr	r3, [r7, #8]
 80182c6:	429a      	cmp	r2, r3
 80182c8:	dbf0      	blt.n	80182ac <detect_and_configure+0x9c>
	}
	printf ( "\n" );
 80182ca:	200a      	movs	r0, #10
 80182cc:	f003 fa2e 	bl	801b72c <putchar>
	//    } else if (ret) {
	//        *errContext = "sensor cleaning";
	//        return ret;
	//    }
	/* Determine calibration parameters and configure measurement. */
	ret = zmod4xxx_prepare_sensor(sensor);
 80182d0:	68f8      	ldr	r0, [r7, #12]
 80182d2:	f7f5 fa2b 	bl	800d72c <zmod4xxx_prepare_sensor>
 80182d6:	4603      	mov	r3, r0
 80182d8:	75fb      	strb	r3, [r7, #23]
	if (ret) {
 80182da:	7dfb      	ldrb	r3, [r7, #23]
 80182dc:	2b00      	cmp	r3, #0
 80182de:	d004      	beq.n	80182ea <detect_and_configure+0xda>
		*errContext = "sensor preparation";
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	4a0c      	ldr	r2, [pc, #48]	; (8018314 <detect_and_configure+0x104>)
 80182e4:	601a      	str	r2, [r3, #0]
		return ret;
 80182e6:	7dfb      	ldrb	r3, [r7, #23]
 80182e8:	e000      	b.n	80182ec <detect_and_configure+0xdc>
	}
	return 0;
 80182ea:	2300      	movs	r3, #0
}
 80182ec:	4618      	mov	r0, r3
 80182ee:	3720      	adds	r7, #32
 80182f0:	46bd      	mov	sp, r7
 80182f2:	bd80      	pop	{r7, pc}
 80182f4:	080210c4 	.word	0x080210c4
 80182f8:	080210dc 	.word	0x080210dc
 80182fc:	080210f8 	.word	0x080210f8
 8018300:	08021110 	.word	0x08021110
 8018304:	08021130 	.word	0x08021130
 8018308:	08021138 	.word	0x08021138
 801830c:	200008e4 	.word	0x200008e4
 8018310:	08021150 	.word	0x08021150
 8018314:	08021154 	.word	0x08021154

08018318 <read_and_verify>:

/* This function read the gas sensor results and checks for result validity. */
void read_and_verify ( zmod4xxx_dev_t*  sensor, uint8_t*  result, char const*  id ) {
 8018318:	b580      	push	{r7, lr}
 801831a:	b086      	sub	sp, #24
 801831c:	af00      	add	r7, sp, #0
 801831e:	60f8      	str	r0, [r7, #12]
 8018320:	60b9      	str	r1, [r7, #8]
 8018322:	607a      	str	r2, [r7, #4]
	/* Verify completion of measurement sequence. */
	uint8_t ret;
	ret = zmod4xxx_read_status(sensor, &zmod4xxx_status);
 8018324:	4922      	ldr	r1, [pc, #136]	; (80183b0 <read_and_verify+0x98>)
 8018326:	68f8      	ldr	r0, [r7, #12]
 8018328:	f7f4 fe96 	bl	800d058 <zmod4xxx_read_status>
 801832c:	4603      	mov	r3, r0
 801832e:	75fb      	strb	r3, [r7, #23]
	if (ret) {
 8018330:	7dfb      	ldrb	r3, [r7, #23]
 8018332:	2b00      	cmp	r3, #0
 8018334:	d004      	beq.n	8018340 <read_and_verify+0x28>
		HAL_HandleError(ret, "Reading sensor status");
 8018336:	7dfb      	ldrb	r3, [r7, #23]
 8018338:	491e      	ldr	r1, [pc, #120]	; (80183b4 <read_and_verify+0x9c>)
 801833a:	4618      	mov	r0, r3
 801833c:	f7f1 fa3e 	bl	80097bc <HAL_HandleError>
	}
	/* Check if measurement is running. */
	if (zmod4xxx_status & STATUS_SEQUENCER_RUNNING_MASK) {
 8018340:	4b1b      	ldr	r3, [pc, #108]	; (80183b0 <read_and_verify+0x98>)
 8018342:	781b      	ldrb	r3, [r3, #0]
 8018344:	b25b      	sxtb	r3, r3
 8018346:	2b00      	cmp	r3, #0
 8018348:	da13      	bge.n	8018372 <read_and_verify+0x5a>
		/* Check if reset during measurement occured. For more information,
		 * read the Programming Manual, section "Error Codes". */
		ret = zmod4xxx_check_error_event(sensor);
 801834a:	68f8      	ldr	r0, [r7, #12]
 801834c:	f7f4 fea3 	bl	800d096 <zmod4xxx_check_error_event>
 8018350:	4603      	mov	r3, r0
 8018352:	75fb      	strb	r3, [r7, #23]
		switch (ret) {
 8018354:	7dfb      	ldrb	r3, [r7, #23]
 8018356:	2b00      	cmp	r3, #0
 8018358:	d105      	bne.n	8018366 <read_and_verify+0x4e>
		case ERROR_POR_EVENT:
			HAL_HandleError(ret, "Result readout: Unexpected sensor reset!");
			break;
		case ZMOD4XXX_OK:
			HAL_HandleError(ret, "Reading result: Wrong sensor setup!");
 801835a:	7dfb      	ldrb	r3, [r7, #23]
 801835c:	4916      	ldr	r1, [pc, #88]	; (80183b8 <read_and_verify+0xa0>)
 801835e:	4618      	mov	r0, r3
 8018360:	f7f1 fa2c 	bl	80097bc <HAL_HandleError>
			break;
 8018364:	e005      	b.n	8018372 <read_and_verify+0x5a>
		default:
			HAL_HandleError(ret, "Reading result: Unknown error!");
 8018366:	7dfb      	ldrb	r3, [r7, #23]
 8018368:	4914      	ldr	r1, [pc, #80]	; (80183bc <read_and_verify+0xa4>)
 801836a:	4618      	mov	r0, r3
 801836c:	f7f1 fa26 	bl	80097bc <HAL_HandleError>
			break;
 8018370:	bf00      	nop
		}
	}
	/* Read sensor ADC output. */
	ret = zmod4xxx_read_adc_result(sensor, result);
 8018372:	68b9      	ldr	r1, [r7, #8]
 8018374:	68f8      	ldr	r0, [r7, #12]
 8018376:	f7f5 f9b8 	bl	800d6ea <zmod4xxx_read_adc_result>
 801837a:	4603      	mov	r3, r0
 801837c:	75fb      	strb	r3, [r7, #23]
	if (ret) {
 801837e:	7dfb      	ldrb	r3, [r7, #23]
 8018380:	2b00      	cmp	r3, #0
 8018382:	d004      	beq.n	801838e <read_and_verify+0x76>
		HAL_HandleError(ret, "Reading ADC results");
 8018384:	7dfb      	ldrb	r3, [r7, #23]
 8018386:	490e      	ldr	r1, [pc, #56]	; (80183c0 <read_and_verify+0xa8>)
 8018388:	4618      	mov	r0, r3
 801838a:	f7f1 fa17 	bl	80097bc <HAL_HandleError>
	}

	/* Check validity of the ADC results. For more information, read the
	 * Programming Manual, section "Error Codes". */
	ret = zmod4xxx_check_error_event(sensor);
 801838e:	68f8      	ldr	r0, [r7, #12]
 8018390:	f7f4 fe81 	bl	800d096 <zmod4xxx_check_error_event>
 8018394:	4603      	mov	r3, r0
 8018396:	75fb      	strb	r3, [r7, #23]
	if (ret) {
 8018398:	7dfb      	ldrb	r3, [r7, #23]
 801839a:	2b00      	cmp	r3, #0
 801839c:	d004      	beq.n	80183a8 <read_and_verify+0x90>
		HAL_HandleError(ret, "Reading sensor status");
 801839e:	7dfb      	ldrb	r3, [r7, #23]
 80183a0:	4904      	ldr	r1, [pc, #16]	; (80183b4 <read_and_verify+0x9c>)
 80183a2:	4618      	mov	r0, r3
 80183a4:	f7f1 fa0a 	bl	80097bc <HAL_HandleError>
	}
}
 80183a8:	bf00      	nop
 80183aa:	3718      	adds	r7, #24
 80183ac:	46bd      	mov	sp, r7
 80183ae:	bd80      	pop	{r7, pc}
 80183b0:	200008c0 	.word	0x200008c0
 80183b4:	08021168 	.word	0x08021168
 80183b8:	08021180 	.word	0x08021180
 80183bc:	080211a4 	.word	0x080211a4
 80183c0:	080211c4 	.word	0x080211c4

080183c4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80183c4:	b580      	push	{r7, lr}
 80183c6:	b082      	sub	sp, #8
 80183c8:	af00      	add	r7, sp, #0
 80183ca:	4603      	mov	r3, r0
 80183cc:	80fb      	strh	r3, [r7, #6]
	printf("interrupt \n");
 80183ce:	482d      	ldr	r0, [pc, #180]	; (8018484 <HAL_GPIO_EXTI_Callback+0xc0>)
 80183d0:	f003 fa08 	bl	801b7e4 <puts>
	if(GPIO_Pin == PWR_GD_Pin)
 80183d4:	88fb      	ldrh	r3, [r7, #6]
 80183d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80183da:	d10e      	bne.n	80183fa <HAL_GPIO_EXTI_Callback+0x36>
	{

		PWR_GD=HAL_GPIO_ReadPin(GPIOC,PWR_GD_Pin);
 80183dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80183e0:	4829      	ldr	r0, [pc, #164]	; (8018488 <HAL_GPIO_EXTI_Callback+0xc4>)
 80183e2:	f7f7 fa8b 	bl	800f8fc <HAL_GPIO_ReadPin>
 80183e6:	4603      	mov	r3, r0
 80183e8:	461a      	mov	r2, r3
 80183ea:	4b28      	ldr	r3, [pc, #160]	; (801848c <HAL_GPIO_EXTI_Callback+0xc8>)
 80183ec:	701a      	strb	r2, [r3, #0]
		printf("PWR_GD_interrupt %d \r\n",PWR_GD);
 80183ee:	4b27      	ldr	r3, [pc, #156]	; (801848c <HAL_GPIO_EXTI_Callback+0xc8>)
 80183f0:	781b      	ldrb	r3, [r3, #0]
 80183f2:	4619      	mov	r1, r3
 80183f4:	4826      	ldr	r0, [pc, #152]	; (8018490 <HAL_GPIO_EXTI_Callback+0xcc>)
 80183f6:	f003 f987 	bl	801b708 <iprintf>

	}
	if(GPIO_Pin == EOC_Pin)
 80183fa:	88fb      	ldrh	r3, [r7, #6]
 80183fc:	2b40      	cmp	r3, #64	; 0x40
 80183fe:	d11a      	bne.n	8018436 <HAL_GPIO_EXTI_Callback+0x72>
	{
		printf("interrupt 2\n");
 8018400:	4824      	ldr	r0, [pc, #144]	; (8018494 <HAL_GPIO_EXTI_Callback+0xd0>)
 8018402:	f003 f9ef 	bl	801b7e4 <puts>
		EOC_v=HAL_GPIO_ReadPin(GPIOC,EOC_Pin);
 8018406:	2140      	movs	r1, #64	; 0x40
 8018408:	481f      	ldr	r0, [pc, #124]	; (8018488 <HAL_GPIO_EXTI_Callback+0xc4>)
 801840a:	f7f7 fa77 	bl	800f8fc <HAL_GPIO_ReadPin>
 801840e:	4603      	mov	r3, r0
 8018410:	461a      	mov	r2, r3
 8018412:	4b21      	ldr	r3, [pc, #132]	; (8018498 <HAL_GPIO_EXTI_Callback+0xd4>)
 8018414:	701a      	strb	r2, [r3, #0]
		PWR_GD=HAL_GPIO_ReadPin(GPIOC,PWR_GD_Pin);
 8018416:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801841a:	481b      	ldr	r0, [pc, #108]	; (8018488 <HAL_GPIO_EXTI_Callback+0xc4>)
 801841c:	f7f7 fa6e 	bl	800f8fc <HAL_GPIO_ReadPin>
 8018420:	4603      	mov	r3, r0
 8018422:	461a      	mov	r2, r3
 8018424:	4b19      	ldr	r3, [pc, #100]	; (801848c <HAL_GPIO_EXTI_Callback+0xc8>)
 8018426:	701a      	strb	r2, [r3, #0]
		HW_TS_Start(Ts_TIMER_ID,Ts_UPDATE_PERIOD);
 8018428:	4b1c      	ldr	r3, [pc, #112]	; (801849c <HAL_GPIO_EXTI_Callback+0xd8>)
 801842a:	781b      	ldrb	r3, [r3, #0]
 801842c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8018430:	4618      	mov	r0, r3
 8018432:	f7f3 fd69 	bl	800bf08 <HW_TS_Start>

	}
	if(GPIO_Pin == Lightining_intr_Pin)
 8018436:	88fb      	ldrh	r3, [r7, #6]
 8018438:	2b01      	cmp	r3, #1
 801843a:	d118      	bne.n	801846e <HAL_GPIO_EXTI_Callback+0xaa>
	{
		Lightining_Strike_Distance=AS3935_reading_distance();
 801843c:	f7f1 f8d6 	bl	80095ec <AS3935_reading_distance>
 8018440:	4603      	mov	r3, r0
 8018442:	b2da      	uxtb	r2, r3
 8018444:	4b16      	ldr	r3, [pc, #88]	; (80184a0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8018446:	701a      	strb	r2, [r3, #0]
		New_Lightining_data=(Lightining_Strike_Distance!=0xff)?1:0;
 8018448:	4b15      	ldr	r3, [pc, #84]	; (80184a0 <HAL_GPIO_EXTI_Callback+0xdc>)
 801844a:	781b      	ldrb	r3, [r3, #0]
 801844c:	2bff      	cmp	r3, #255	; 0xff
 801844e:	bf14      	ite	ne
 8018450:	2301      	movne	r3, #1
 8018452:	2300      	moveq	r3, #0
 8018454:	b2db      	uxtb	r3, r3
 8018456:	461a      	mov	r2, r3
 8018458:	4b12      	ldr	r3, [pc, #72]	; (80184a4 <HAL_GPIO_EXTI_Callback+0xe0>)
 801845a:	601a      	str	r2, [r3, #0]
		printf("Lighting_Stirke_Distance %d & %d \n",Lightining_Strike_Distance,New_Lightining_data);
 801845c:	4b10      	ldr	r3, [pc, #64]	; (80184a0 <HAL_GPIO_EXTI_Callback+0xdc>)
 801845e:	781b      	ldrb	r3, [r3, #0]
 8018460:	4619      	mov	r1, r3
 8018462:	4b10      	ldr	r3, [pc, #64]	; (80184a4 <HAL_GPIO_EXTI_Callback+0xe0>)
 8018464:	681b      	ldr	r3, [r3, #0]
 8018466:	461a      	mov	r2, r3
 8018468:	480f      	ldr	r0, [pc, #60]	; (80184a8 <HAL_GPIO_EXTI_Callback+0xe4>)
 801846a:	f003 f94d 	bl	801b708 <iprintf>
	}
	HW_TS_Start(Noti_TIMER_ID,Noti_UPDATE_PERIOD);//Noti_UPDATE_PERIOD
 801846e:	4b0f      	ldr	r3, [pc, #60]	; (80184ac <HAL_GPIO_EXTI_Callback+0xe8>)
 8018470:	781b      	ldrb	r3, [r3, #0]
 8018472:	f640 0101 	movw	r1, #2049	; 0x801
 8018476:	4618      	mov	r0, r3
 8018478:	f7f3 fd46 	bl	800bf08 <HW_TS_Start>
	//UTIL_SEQ_SetTask(1<<CFG_TASK_INTR_ID,CFG_SCH_PRIO_1);



}
 801847c:	bf00      	nop
 801847e:	3708      	adds	r7, #8
 8018480:	46bd      	mov	sp, r7
 8018482:	bd80      	pop	{r7, pc}
 8018484:	080211d8 	.word	0x080211d8
 8018488:	48000800 	.word	0x48000800
 801848c:	200009cd 	.word	0x200009cd
 8018490:	080211e4 	.word	0x080211e4
 8018494:	080211fc 	.word	0x080211fc
 8018498:	200009ce 	.word	0x200009ce
 801849c:	200008ed 	.word	0x200008ed
 80184a0:	200009cc 	.word	0x200009cc
 80184a4:	200009d4 	.word	0x200009d4
 80184a8:	08021208 	.word	0x08021208
 80184ac:	200008ec 	.word	0x200008ec

080184b0 <INTR_NOTIFY>:
void INTR_NOTIFY(void)
{
 80184b0:	b580      	push	{r7, lr}
 80184b2:	af00      	add	r7, sp, #0

	if(New_Lightining_data==1){
 80184b4:	4b0d      	ldr	r3, [pc, #52]	; (80184ec <INTR_NOTIFY+0x3c>)
 80184b6:	681b      	ldr	r3, [r3, #0]
 80184b8:	2b01      	cmp	r3, #1
 80184ba:	d108      	bne.n	80184ce <INTR_NOTIFY+0x1e>
		Custom_Strike_distance_Send_Notification();
 80184bc:	f7ff fbca 	bl	8017c54 <Custom_Strike_distance_Send_Notification>
		Log_Data(2);
 80184c0:	2002      	movs	r0, #2
 80184c2:	f000 f875 	bl	80185b0 <Log_Data>
		New_Lightining_data=0;
 80184c6:	4b09      	ldr	r3, [pc, #36]	; (80184ec <INTR_NOTIFY+0x3c>)
 80184c8:	2200      	movs	r2, #0
 80184ca:	601a      	str	r2, [r3, #0]
	Battery();
	Custom_Bat_level_Send_Notification();
	IAQ_Status(LED);
	}

}
 80184cc:	e00c      	b.n	80184e8 <INTR_NOTIFY+0x38>
	Custom_Pwr_gd_Send_Notification();
 80184ce:	f7ff fa89 	bl	80179e4 <Custom_Pwr_gd_Send_Notification>
	Custom_Eoc_Send_Notification();
 80184d2:	f7ff fa6f 	bl	80179b4 <Custom_Eoc_Send_Notification>
	Battery();
 80184d6:	f000 fa3f 	bl	8018958 <Battery>
	Custom_Bat_level_Send_Notification();
 80184da:	f7ff fa51 	bl	8017980 <Custom_Bat_level_Send_Notification>
	IAQ_Status(LED);
 80184de:	4b04      	ldr	r3, [pc, #16]	; (80184f0 <INTR_NOTIFY+0x40>)
 80184e0:	781b      	ldrb	r3, [r3, #0]
 80184e2:	4618      	mov	r0, r3
 80184e4:	f000 fa9c 	bl	8018a20 <IAQ_Status>
}
 80184e8:	bf00      	nop
 80184ea:	bd80      	pop	{r7, pc}
 80184ec:	200009d4 	.word	0x200009d4
 80184f0:	20000895 	.word	0x20000895

080184f4 <Date_Time>:
void Date_Time(void)
{
 80184f4:	b580      	push	{r7, lr}
 80184f6:	b082      	sub	sp, #8
 80184f8:	af00      	add	r7, sp, #0
	if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80184fa:	2200      	movs	r2, #0
 80184fc:	4925      	ldr	r1, [pc, #148]	; (8018594 <Date_Time+0xa0>)
 80184fe:	4826      	ldr	r0, [pc, #152]	; (8018598 <Date_Time+0xa4>)
 8018500:	f7fb f956 	bl	80137b0 <HAL_RTC_GetTime>
 8018504:	4603      	mov	r3, r0
 8018506:	2b00      	cmp	r3, #0
 8018508:	d004      	beq.n	8018514 <Date_Time+0x20>
	{
		Error_Handler();
 801850a:	f7f3 ffa1 	bl	800c450 <Error_Handler>
		printf("Time_fail\n");
 801850e:	4823      	ldr	r0, [pc, #140]	; (801859c <Date_Time+0xa8>)
 8018510:	f003 f968 	bl	801b7e4 <puts>
	}
	if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8018514:	2200      	movs	r2, #0
 8018516:	4922      	ldr	r1, [pc, #136]	; (80185a0 <Date_Time+0xac>)
 8018518:	481f      	ldr	r0, [pc, #124]	; (8018598 <Date_Time+0xa4>)
 801851a:	f7fb fa53 	bl	80139c4 <HAL_RTC_GetDate>
 801851e:	4603      	mov	r3, r0
 8018520:	2b00      	cmp	r3, #0
 8018522:	d004      	beq.n	801852e <Date_Time+0x3a>
	{

		printf("Date_fail\n");
 8018524:	481f      	ldr	r0, [pc, #124]	; (80185a4 <Date_Time+0xb0>)
 8018526:	f003 f95d 	bl	801b7e4 <puts>
		Error_Handler();
 801852a:	f7f3 ff91 	bl	800c450 <Error_Handler>
	}
	Time[0]=sTime.Hours;
 801852e:	4b19      	ldr	r3, [pc, #100]	; (8018594 <Date_Time+0xa0>)
 8018530:	781a      	ldrb	r2, [r3, #0]
 8018532:	4b1d      	ldr	r3, [pc, #116]	; (80185a8 <Date_Time+0xb4>)
 8018534:	701a      	strb	r2, [r3, #0]
	Time[1]=sTime.Minutes;
 8018536:	4b17      	ldr	r3, [pc, #92]	; (8018594 <Date_Time+0xa0>)
 8018538:	785a      	ldrb	r2, [r3, #1]
 801853a:	4b1b      	ldr	r3, [pc, #108]	; (80185a8 <Date_Time+0xb4>)
 801853c:	705a      	strb	r2, [r3, #1]
	Time[2]=sTime.Seconds;
 801853e:	4b15      	ldr	r3, [pc, #84]	; (8018594 <Date_Time+0xa0>)
 8018540:	789a      	ldrb	r2, [r3, #2]
 8018542:	4b19      	ldr	r3, [pc, #100]	; (80185a8 <Date_Time+0xb4>)
 8018544:	709a      	strb	r2, [r3, #2]
	Time[3]=sDate.WeekDay;
 8018546:	4b16      	ldr	r3, [pc, #88]	; (80185a0 <Date_Time+0xac>)
 8018548:	781a      	ldrb	r2, [r3, #0]
 801854a:	4b17      	ldr	r3, [pc, #92]	; (80185a8 <Date_Time+0xb4>)
 801854c:	70da      	strb	r2, [r3, #3]
	Time[4]=sDate.Date;
 801854e:	4b14      	ldr	r3, [pc, #80]	; (80185a0 <Date_Time+0xac>)
 8018550:	789a      	ldrb	r2, [r3, #2]
 8018552:	4b15      	ldr	r3, [pc, #84]	; (80185a8 <Date_Time+0xb4>)
 8018554:	711a      	strb	r2, [r3, #4]
	Time[5]=sDate.Month;
 8018556:	4b12      	ldr	r3, [pc, #72]	; (80185a0 <Date_Time+0xac>)
 8018558:	785a      	ldrb	r2, [r3, #1]
 801855a:	4b13      	ldr	r3, [pc, #76]	; (80185a8 <Date_Time+0xb4>)
 801855c:	715a      	strb	r2, [r3, #5]
	Time[6]=sDate.Year;
 801855e:	4b10      	ldr	r3, [pc, #64]	; (80185a0 <Date_Time+0xac>)
 8018560:	78da      	ldrb	r2, [r3, #3]
 8018562:	4b11      	ldr	r3, [pc, #68]	; (80185a8 <Date_Time+0xb4>)
 8018564:	719a      	strb	r2, [r3, #6]
	for(uint8_t i=0;i<7;i++){
 8018566:	2300      	movs	r3, #0
 8018568:	71fb      	strb	r3, [r7, #7]
 801856a:	e00a      	b.n	8018582 <Date_Time+0x8e>
		printf("T[%d]:%d\n",i,Time[i]);
 801856c:	79f9      	ldrb	r1, [r7, #7]
 801856e:	79fb      	ldrb	r3, [r7, #7]
 8018570:	4a0d      	ldr	r2, [pc, #52]	; (80185a8 <Date_Time+0xb4>)
 8018572:	5cd3      	ldrb	r3, [r2, r3]
 8018574:	461a      	mov	r2, r3
 8018576:	480d      	ldr	r0, [pc, #52]	; (80185ac <Date_Time+0xb8>)
 8018578:	f003 f8c6 	bl	801b708 <iprintf>
	for(uint8_t i=0;i<7;i++){
 801857c:	79fb      	ldrb	r3, [r7, #7]
 801857e:	3301      	adds	r3, #1
 8018580:	71fb      	strb	r3, [r7, #7]
 8018582:	79fb      	ldrb	r3, [r7, #7]
 8018584:	2b06      	cmp	r3, #6
 8018586:	d9f1      	bls.n	801856c <Date_Time+0x78>
	}
}
 8018588:	bf00      	nop
 801858a:	bf00      	nop
 801858c:	3708      	adds	r7, #8
 801858e:	46bd      	mov	sp, r7
 8018590:	bd80      	pop	{r7, pc}
 8018592:	bf00      	nop
 8018594:	20000a0c 	.word	0x20000a0c
 8018598:	200006d0 	.word	0x200006d0
 801859c:	0802122c 	.word	0x0802122c
 80185a0:	20000a20 	.word	0x20000a20
 80185a4:	08021238 	.word	0x08021238
 80185a8:	200009d8 	.word	0x200009d8
 80185ac:	08021244 	.word	0x08021244

080185b0 <Log_Data>:

void Log_Data(uint8_t select)
{
 80185b0:	b580      	push	{r7, lr}
 80185b2:	b086      	sub	sp, #24
 80185b4:	af00      	add	r7, sp, #0
 80185b6:	4603      	mov	r3, r0
 80185b8:	71fb      	strb	r3, [r7, #7]
	uint32_t current_add = Read_flash_address(select);
 80185ba:	79fb      	ldrb	r3, [r7, #7]
 80185bc:	4618      	mov	r0, r3
 80185be:	f7f2 fae5 	bl	800ab8c <Read_flash_address>
 80185c2:	6178      	str	r0, [r7, #20]
	Date_Time();
 80185c4:	f7ff ff96 	bl	80184f4 <Date_Time>
	memcpy(Log,Time,sizeof(Time));
 80185c8:	4b35      	ldr	r3, [pc, #212]	; (80186a0 <Log_Data+0xf0>)
 80185ca:	4a36      	ldr	r2, [pc, #216]	; (80186a4 <Log_Data+0xf4>)
 80185cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80185d0:	6018      	str	r0, [r3, #0]
 80185d2:	3304      	adds	r3, #4
 80185d4:	8019      	strh	r1, [r3, #0]
 80185d6:	3302      	adds	r3, #2
 80185d8:	0c0a      	lsrs	r2, r1, #16
 80185da:	701a      	strb	r2, [r3, #0]
	if(select == 1)
 80185dc:	79fb      	ldrb	r3, [r7, #7]
 80185de:	2b01      	cmp	r3, #1
 80185e0:	d122      	bne.n	8018628 <Log_Data+0x78>
	{

		if(current_add>=flash_end_address_Env)
 80185e2:	697b      	ldr	r3, [r7, #20]
 80185e4:	4a30      	ldr	r2, [pc, #192]	; (80186a8 <Log_Data+0xf8>)
 80185e6:	4293      	cmp	r3, r2
 80185e8:	d913      	bls.n	8018612 <Log_Data+0x62>
		{
			update_address(flash_end_address_Env,1);
 80185ea:	2101      	movs	r1, #1
 80185ec:	482f      	ldr	r0, [pc, #188]	; (80186ac <Log_Data+0xfc>)
 80185ee:	f7f2 fa29 	bl	800aa44 <update_address>
			current_add=Read_flash_address(1);
 80185f2:	2001      	movs	r0, #1
 80185f4:	f7f2 faca 	bl	800ab8c <Read_flash_address>
 80185f8:	6178      	str	r0, [r7, #20]
			Quad_Write(Log,current_add,39);
 80185fa:	2227      	movs	r2, #39	; 0x27
 80185fc:	6979      	ldr	r1, [r7, #20]
 80185fe:	4828      	ldr	r0, [pc, #160]	; (80186a0 <Log_Data+0xf0>)
 8018600:	f7f2 f94e 	bl	800a8a0 <Quad_Write>
			update_address(current_add+39,1);
 8018604:	697b      	ldr	r3, [r7, #20]
 8018606:	3327      	adds	r3, #39	; 0x27
 8018608:	2101      	movs	r1, #1
 801860a:	4618      	mov	r0, r3
 801860c:	f7f2 fa1a 	bl	800aa44 <update_address>
 8018610:	e00a      	b.n	8018628 <Log_Data+0x78>
		}
		else
		{
			Quad_Write(&Log,current_add,39);
 8018612:	2227      	movs	r2, #39	; 0x27
 8018614:	6979      	ldr	r1, [r7, #20]
 8018616:	4822      	ldr	r0, [pc, #136]	; (80186a0 <Log_Data+0xf0>)
 8018618:	f7f2 f942 	bl	800a8a0 <Quad_Write>
			update_address(current_add+39,1);
 801861c:	697b      	ldr	r3, [r7, #20]
 801861e:	3327      	adds	r3, #39	; 0x27
 8018620:	2101      	movs	r1, #1
 8018622:	4618      	mov	r0, r3
 8018624:	f7f2 fa0e 	bl	800aa44 <update_address>
		}

	}
	if(select == 2)
 8018628:	79fb      	ldrb	r3, [r7, #7]
 801862a:	2b02      	cmp	r3, #2
 801862c:	d133      	bne.n	8018696 <Log_Data+0xe6>
	{
		uint8_t data[8];
		memcpy(data,Time,sizeof(Time));
 801862e:	4a1d      	ldr	r2, [pc, #116]	; (80186a4 <Log_Data+0xf4>)
 8018630:	f107 030c 	add.w	r3, r7, #12
 8018634:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018638:	6018      	str	r0, [r3, #0]
 801863a:	3304      	adds	r3, #4
 801863c:	8019      	strh	r1, [r3, #0]
 801863e:	3302      	adds	r3, #2
 8018640:	0c0a      	lsrs	r2, r1, #16
 8018642:	701a      	strb	r2, [r3, #0]
		Log[7]=Lightining_Strike_Distance;
 8018644:	4b1a      	ldr	r3, [pc, #104]	; (80186b0 <Log_Data+0x100>)
 8018646:	781a      	ldrb	r2, [r3, #0]
 8018648:	4b15      	ldr	r3, [pc, #84]	; (80186a0 <Log_Data+0xf0>)
 801864a:	71da      	strb	r2, [r3, #7]
		if(current_add>=flash_end_address_Env)
 801864c:	697b      	ldr	r3, [r7, #20]
 801864e:	4a16      	ldr	r2, [pc, #88]	; (80186a8 <Log_Data+0xf8>)
 8018650:	4293      	cmp	r3, r2
 8018652:	d915      	bls.n	8018680 <Log_Data+0xd0>
		{
			update_address(flash_end_address_LT,1);
 8018654:	2101      	movs	r1, #1
 8018656:	4817      	ldr	r0, [pc, #92]	; (80186b4 <Log_Data+0x104>)
 8018658:	f7f2 f9f4 	bl	800aa44 <update_address>
			current_add=Read_flash_address(2);
 801865c:	2002      	movs	r0, #2
 801865e:	f7f2 fa95 	bl	800ab8c <Read_flash_address>
 8018662:	6178      	str	r0, [r7, #20]
			Quad_Write(data,current_add,8);
 8018664:	f107 030c 	add.w	r3, r7, #12
 8018668:	2208      	movs	r2, #8
 801866a:	6979      	ldr	r1, [r7, #20]
 801866c:	4618      	mov	r0, r3
 801866e:	f7f2 f917 	bl	800a8a0 <Quad_Write>
			update_address(current_add+8,2);
 8018672:	697b      	ldr	r3, [r7, #20]
 8018674:	3308      	adds	r3, #8
 8018676:	2102      	movs	r1, #2
 8018678:	4618      	mov	r0, r3
 801867a:	f7f2 f9e3 	bl	800aa44 <update_address>
		{
			Quad_Write(&Log,current_add,8);
			update_address(current_add+8,2);
		}
	}
}
 801867e:	e00a      	b.n	8018696 <Log_Data+0xe6>
			Quad_Write(&Log,current_add,8);
 8018680:	2208      	movs	r2, #8
 8018682:	6979      	ldr	r1, [r7, #20]
 8018684:	4806      	ldr	r0, [pc, #24]	; (80186a0 <Log_Data+0xf0>)
 8018686:	f7f2 f90b 	bl	800a8a0 <Quad_Write>
			update_address(current_add+8,2);
 801868a:	697b      	ldr	r3, [r7, #20]
 801868c:	3308      	adds	r3, #8
 801868e:	2102      	movs	r1, #2
 8018690:	4618      	mov	r0, r3
 8018692:	f7f2 f9d7 	bl	800aa44 <update_address>
}
 8018696:	bf00      	nop
 8018698:	3718      	adds	r7, #24
 801869a:	46bd      	mov	sp, r7
 801869c:	bd80      	pop	{r7, pc}
 801869e:	bf00      	nop
 80186a0:	200009e0 	.word	0x200009e0
 80186a4:	200009d8 	.word	0x200009d8
 80186a8:	000ffffe 	.word	0x000ffffe
 80186ac:	000fffff 	.word	0x000fffff
 80186b0:	200009cc 	.word	0x200009cc
 80186b4:	001fefff 	.word	0x001fefff

080186b8 <TX_Log>:

void TX_Log(void)
{
 80186b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186bc:	b08b      	sub	sp, #44	; 0x2c
 80186be:	af00      	add	r7, sp, #0
	//uint8_t select =*(uint8_t*) Select;
	if(Current_Address <= flash_end_address_Env)
 80186c0:	4b84      	ldr	r3, [pc, #528]	; (80188d4 <TX_Log+0x21c>)
 80186c2:	681b      	ldr	r3, [r3, #0]
 80186c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80186c8:	d274      	bcs.n	80187b4 <TX_Log+0xfc>
	{
		//uint32_t add=Read_flash_address(1);
		//printf("current_add %d \n",add);
		uint32_t data=Current_Address-iteration_address1;
 80186ca:	4b82      	ldr	r3, [pc, #520]	; (80188d4 <TX_Log+0x21c>)
 80186cc:	681a      	ldr	r2, [r3, #0]
 80186ce:	4b82      	ldr	r3, [pc, #520]	; (80188d8 <TX_Log+0x220>)
 80186d0:	681b      	ldr	r3, [r3, #0]
 80186d2:	1ad3      	subs	r3, r2, r3
 80186d4:	617b      	str	r3, [r7, #20]
		printf("Trasmiting Wine Temperature Log Data \n");
 80186d6:	4881      	ldr	r0, [pc, #516]	; (80188dc <TX_Log+0x224>)
 80186d8:	f003 f884 	bl	801b7e4 <puts>
		if(data>247)
 80186dc:	697b      	ldr	r3, [r7, #20]
 80186de:	2bf7      	cmp	r3, #247	; 0xf7
 80186e0:	d90f      	bls.n	8018702 <TX_Log+0x4a>
		{
			// uint8_t read_buffer[247];
			Quad_Read(NotifyCharData,iteration_address1,247);
 80186e2:	4b7d      	ldr	r3, [pc, #500]	; (80188d8 <TX_Log+0x220>)
 80186e4:	681b      	ldr	r3, [r3, #0]
 80186e6:	22f7      	movs	r2, #247	; 0xf7
 80186e8:	4619      	mov	r1, r3
 80186ea:	487d      	ldr	r0, [pc, #500]	; (80188e0 <TX_Log+0x228>)
 80186ec:	f7f2 f866 	bl	800a7bc <Quad_Read>
			Custom_STM_App_Update_Char(CUSTOM_STM_GET_ENV_LOG, (uint8_t *)NotifyCharData);
 80186f0:	497b      	ldr	r1, [pc, #492]	; (80188e0 <TX_Log+0x228>)
 80186f2:	200b      	movs	r0, #11
 80186f4:	f001 fa50 	bl	8019b98 <Custom_STM_App_Update_Char>
			// sl_bt_gatt_server_notify_all(gattdb_Log,247,read_buffer);
			iteration_address1+=247;
 80186f8:	4b77      	ldr	r3, [pc, #476]	; (80188d8 <TX_Log+0x220>)
 80186fa:	681b      	ldr	r3, [r3, #0]
 80186fc:	33f7      	adds	r3, #247	; 0xf7
 80186fe:	4a76      	ldr	r2, [pc, #472]	; (80188d8 <TX_Log+0x220>)
 8018700:	6013      	str	r3, [r2, #0]
		}
		if(data<=247 && data!=0)
 8018702:	697b      	ldr	r3, [r7, #20]
 8018704:	2bf7      	cmp	r3, #247	; 0xf7
 8018706:	d83f      	bhi.n	8018788 <TX_Log+0xd0>
 8018708:	697b      	ldr	r3, [r7, #20]
 801870a:	2b00      	cmp	r3, #0
 801870c:	d03c      	beq.n	8018788 <TX_Log+0xd0>
		{
 801870e:	466b      	mov	r3, sp
 8018710:	461c      	mov	r4, r3
			uint8_t read_buffer[data];
 8018712:	6979      	ldr	r1, [r7, #20]
 8018714:	460b      	mov	r3, r1
 8018716:	3b01      	subs	r3, #1
 8018718:	613b      	str	r3, [r7, #16]
 801871a:	2300      	movs	r3, #0
 801871c:	6039      	str	r1, [r7, #0]
 801871e:	607b      	str	r3, [r7, #4]
 8018720:	f04f 0200 	mov.w	r2, #0
 8018724:	f04f 0300 	mov.w	r3, #0
 8018728:	e9d7 5600 	ldrd	r5, r6, [r7]
 801872c:	4630      	mov	r0, r6
 801872e:	00c3      	lsls	r3, r0, #3
 8018730:	4628      	mov	r0, r5
 8018732:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8018736:	4628      	mov	r0, r5
 8018738:	00c2      	lsls	r2, r0, #3
 801873a:	2300      	movs	r3, #0
 801873c:	468a      	mov	sl, r1
 801873e:	469b      	mov	fp, r3
 8018740:	f04f 0200 	mov.w	r2, #0
 8018744:	f04f 0300 	mov.w	r3, #0
 8018748:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801874c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8018750:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8018754:	1dcb      	adds	r3, r1, #7
 8018756:	08db      	lsrs	r3, r3, #3
 8018758:	00db      	lsls	r3, r3, #3
 801875a:	ebad 0d03 	sub.w	sp, sp, r3
 801875e:	466b      	mov	r3, sp
 8018760:	3300      	adds	r3, #0
 8018762:	60fb      	str	r3, [r7, #12]
			Quad_Read(read_buffer,iteration_address1,data);
 8018764:	4b5c      	ldr	r3, [pc, #368]	; (80188d8 <TX_Log+0x220>)
 8018766:	681b      	ldr	r3, [r3, #0]
 8018768:	697a      	ldr	r2, [r7, #20]
 801876a:	4619      	mov	r1, r3
 801876c:	68f8      	ldr	r0, [r7, #12]
 801876e:	f7f2 f825 	bl	800a7bc <Quad_Read>
			Custom_STM_App_Update_Char(CUSTOM_STM_GET_ENV_LOG, (uint8_t *)NotifyCharData);
 8018772:	495b      	ldr	r1, [pc, #364]	; (80188e0 <TX_Log+0x228>)
 8018774:	200b      	movs	r0, #11
 8018776:	f001 fa0f 	bl	8019b98 <Custom_STM_App_Update_Char>
			//sl_bt_gatt_server_notify_all(gattdb_Log,data,read_buffer);
			iteration_address1+=data;
 801877a:	4b57      	ldr	r3, [pc, #348]	; (80188d8 <TX_Log+0x220>)
 801877c:	681a      	ldr	r2, [r3, #0]
 801877e:	697b      	ldr	r3, [r7, #20]
 8018780:	4413      	add	r3, r2
 8018782:	4a55      	ldr	r2, [pc, #340]	; (80188d8 <TX_Log+0x220>)
 8018784:	6013      	str	r3, [r2, #0]
 8018786:	46a5      	mov	sp, r4
		}
		if(data==0)
 8018788:	697b      	ldr	r3, [r7, #20]
 801878a:	2b00      	cmp	r3, #0
 801878c:	f040 809c 	bne.w	80188c8 <TX_Log+0x210>
		{
			iteration_address1=flash_start_address_Env;    // reset initial address
 8018790:	4b51      	ldr	r3, [pc, #324]	; (80188d8 <TX_Log+0x220>)
 8018792:	2200      	movs	r2, #0
 8018794:	601a      	str	r2, [r3, #0]
			UTIL_SEQ_PauseTask(1<<CFG_LOG_TX_ID);
 8018796:	2010      	movs	r0, #16
 8018798:	f001 ff64 	bl	801a664 <UTIL_SEQ_PauseTask>
			HW_TS_Stop(TX_LOG_ID);
 801879c:	4b51      	ldr	r3, [pc, #324]	; (80188e4 <TX_Log+0x22c>)
 801879e:	781b      	ldrb	r3, [r3, #0]
 80187a0:	4618      	mov	r0, r3
 80187a2:	f7f3 fb2d 	bl	800be00 <HW_TS_Stop>
			HW_TS_Start(ENV_TIMER_ID,ENV_UPDATE_PERIOD);
 80187a6:	4b50      	ldr	r3, [pc, #320]	; (80188e8 <TX_Log+0x230>)
 80187a8:	781b      	ldrb	r3, [r3, #0]
 80187aa:	4950      	ldr	r1, [pc, #320]	; (80188ec <TX_Log+0x234>)
 80187ac:	4618      	mov	r0, r3
 80187ae:	f7f3 fbab 	bl	800bf08 <HW_TS_Start>
	}
	else
	{
		printf("Error: Wrong Address %d \n",Current_Address);
	}
}
 80187b2:	e089      	b.n	80188c8 <TX_Log+0x210>
	else if(Current_Address >= flash_start_address_LT && Current_Address <= flash_end_address_LT)
 80187b4:	4b47      	ldr	r3, [pc, #284]	; (80188d4 <TX_Log+0x21c>)
 80187b6:	681b      	ldr	r3, [r3, #0]
 80187b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80187bc:	d37c      	bcc.n	80188b8 <TX_Log+0x200>
 80187be:	4b45      	ldr	r3, [pc, #276]	; (80188d4 <TX_Log+0x21c>)
 80187c0:	681b      	ldr	r3, [r3, #0]
 80187c2:	4a4b      	ldr	r2, [pc, #300]	; (80188f0 <TX_Log+0x238>)
 80187c4:	4293      	cmp	r3, r2
 80187c6:	d877      	bhi.n	80188b8 <TX_Log+0x200>
		uint32_t add=Read_flash_address(2);
 80187c8:	2002      	movs	r0, #2
 80187ca:	f7f2 f9df 	bl	800ab8c <Read_flash_address>
 80187ce:	6278      	str	r0, [r7, #36]	; 0x24
		printf("current_add %d \n",add);
 80187d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80187d2:	4848      	ldr	r0, [pc, #288]	; (80188f4 <TX_Log+0x23c>)
 80187d4:	f002 ff98 	bl	801b708 <iprintf>
		uint32_t data=Current_Address-iteration_address2;
 80187d8:	4b3e      	ldr	r3, [pc, #248]	; (80188d4 <TX_Log+0x21c>)
 80187da:	681a      	ldr	r2, [r3, #0]
 80187dc:	4b46      	ldr	r3, [pc, #280]	; (80188f8 <TX_Log+0x240>)
 80187de:	681b      	ldr	r3, [r3, #0]
 80187e0:	1ad3      	subs	r3, r2, r3
 80187e2:	623b      	str	r3, [r7, #32]
		printf("Trasmiting Wine Temperature Log Data \n");
 80187e4:	483d      	ldr	r0, [pc, #244]	; (80188dc <TX_Log+0x224>)
 80187e6:	f002 fffd 	bl	801b7e4 <puts>
		if(data>247)
 80187ea:	6a3b      	ldr	r3, [r7, #32]
 80187ec:	2bf7      	cmp	r3, #247	; 0xf7
 80187ee:	d90f      	bls.n	8018810 <TX_Log+0x158>
			Quad_Read(NotifyCharData,iteration_address2,247);
 80187f0:	4b41      	ldr	r3, [pc, #260]	; (80188f8 <TX_Log+0x240>)
 80187f2:	681b      	ldr	r3, [r3, #0]
 80187f4:	22f7      	movs	r2, #247	; 0xf7
 80187f6:	4619      	mov	r1, r3
 80187f8:	4839      	ldr	r0, [pc, #228]	; (80188e0 <TX_Log+0x228>)
 80187fa:	f7f1 ffdf 	bl	800a7bc <Quad_Read>
			Custom_STM_App_Update_Char(CUSTOM_STM_GET_LIGHTNING_LOG, (uint8_t *)NotifyCharData);
 80187fe:	4938      	ldr	r1, [pc, #224]	; (80188e0 <TX_Log+0x228>)
 8018800:	200c      	movs	r0, #12
 8018802:	f001 f9c9 	bl	8019b98 <Custom_STM_App_Update_Char>
			iteration_address1+=247;
 8018806:	4b34      	ldr	r3, [pc, #208]	; (80188d8 <TX_Log+0x220>)
 8018808:	681b      	ldr	r3, [r3, #0]
 801880a:	33f7      	adds	r3, #247	; 0xf7
 801880c:	4a32      	ldr	r2, [pc, #200]	; (80188d8 <TX_Log+0x220>)
 801880e:	6013      	str	r3, [r2, #0]
		if(data<=247 && data!=0)
 8018810:	6a3b      	ldr	r3, [r7, #32]
 8018812:	2bf7      	cmp	r3, #247	; 0xf7
 8018814:	d83a      	bhi.n	801888c <TX_Log+0x1d4>
 8018816:	6a3b      	ldr	r3, [r7, #32]
 8018818:	2b00      	cmp	r3, #0
 801881a:	d037      	beq.n	801888c <TX_Log+0x1d4>
		{
 801881c:	466b      	mov	r3, sp
 801881e:	461e      	mov	r6, r3
			uint8_t read_buffer[data];
 8018820:	6a39      	ldr	r1, [r7, #32]
 8018822:	460b      	mov	r3, r1
 8018824:	3b01      	subs	r3, #1
 8018826:	61fb      	str	r3, [r7, #28]
 8018828:	2300      	movs	r3, #0
 801882a:	4688      	mov	r8, r1
 801882c:	4699      	mov	r9, r3
 801882e:	f04f 0200 	mov.w	r2, #0
 8018832:	f04f 0300 	mov.w	r3, #0
 8018836:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801883a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801883e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8018842:	2300      	movs	r3, #0
 8018844:	460c      	mov	r4, r1
 8018846:	461d      	mov	r5, r3
 8018848:	f04f 0200 	mov.w	r2, #0
 801884c:	f04f 0300 	mov.w	r3, #0
 8018850:	00eb      	lsls	r3, r5, #3
 8018852:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8018856:	00e2      	lsls	r2, r4, #3
 8018858:	1dcb      	adds	r3, r1, #7
 801885a:	08db      	lsrs	r3, r3, #3
 801885c:	00db      	lsls	r3, r3, #3
 801885e:	ebad 0d03 	sub.w	sp, sp, r3
 8018862:	466b      	mov	r3, sp
 8018864:	3300      	adds	r3, #0
 8018866:	61bb      	str	r3, [r7, #24]
			Quad_Read(read_buffer,iteration_address2,data);
 8018868:	4b23      	ldr	r3, [pc, #140]	; (80188f8 <TX_Log+0x240>)
 801886a:	681b      	ldr	r3, [r3, #0]
 801886c:	6a3a      	ldr	r2, [r7, #32]
 801886e:	4619      	mov	r1, r3
 8018870:	69b8      	ldr	r0, [r7, #24]
 8018872:	f7f1 ffa3 	bl	800a7bc <Quad_Read>
			Custom_STM_App_Update_Char(CUSTOM_STM_GET_LIGHTNING_LOG, (uint8_t *)NotifyCharData);
 8018876:	491a      	ldr	r1, [pc, #104]	; (80188e0 <TX_Log+0x228>)
 8018878:	200c      	movs	r0, #12
 801887a:	f001 f98d 	bl	8019b98 <Custom_STM_App_Update_Char>
			iteration_address1+=data;
 801887e:	4b16      	ldr	r3, [pc, #88]	; (80188d8 <TX_Log+0x220>)
 8018880:	681a      	ldr	r2, [r3, #0]
 8018882:	6a3b      	ldr	r3, [r7, #32]
 8018884:	4413      	add	r3, r2
 8018886:	4a14      	ldr	r2, [pc, #80]	; (80188d8 <TX_Log+0x220>)
 8018888:	6013      	str	r3, [r2, #0]
 801888a:	46b5      	mov	sp, r6
		if(data==0)
 801888c:	6a3b      	ldr	r3, [r7, #32]
 801888e:	2b00      	cmp	r3, #0
 8018890:	d119      	bne.n	80188c6 <TX_Log+0x20e>
			iteration_address2=flash_start_address_LT;    // reset initial address
 8018892:	4b19      	ldr	r3, [pc, #100]	; (80188f8 <TX_Log+0x240>)
 8018894:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8018898:	601a      	str	r2, [r3, #0]
			UTIL_SEQ_PauseTask(1<<CFG_LOG_TX_ID);
 801889a:	2010      	movs	r0, #16
 801889c:	f001 fee2 	bl	801a664 <UTIL_SEQ_PauseTask>
			HW_TS_Stop(TX_LOG_ID);
 80188a0:	4b10      	ldr	r3, [pc, #64]	; (80188e4 <TX_Log+0x22c>)
 80188a2:	781b      	ldrb	r3, [r3, #0]
 80188a4:	4618      	mov	r0, r3
 80188a6:	f7f3 faab 	bl	800be00 <HW_TS_Stop>
			HW_TS_Start(ENV_TIMER_ID,ENV_UPDATE_PERIOD);
 80188aa:	4b0f      	ldr	r3, [pc, #60]	; (80188e8 <TX_Log+0x230>)
 80188ac:	781b      	ldrb	r3, [r3, #0]
 80188ae:	490f      	ldr	r1, [pc, #60]	; (80188ec <TX_Log+0x234>)
 80188b0:	4618      	mov	r0, r3
 80188b2:	f7f3 fb29 	bl	800bf08 <HW_TS_Start>
	{
 80188b6:	e006      	b.n	80188c6 <TX_Log+0x20e>
		printf("Error: Wrong Address %d \n",Current_Address);
 80188b8:	4b06      	ldr	r3, [pc, #24]	; (80188d4 <TX_Log+0x21c>)
 80188ba:	681b      	ldr	r3, [r3, #0]
 80188bc:	4619      	mov	r1, r3
 80188be:	480f      	ldr	r0, [pc, #60]	; (80188fc <TX_Log+0x244>)
 80188c0:	f002 ff22 	bl	801b708 <iprintf>
}
 80188c4:	e000      	b.n	80188c8 <TX_Log+0x210>
	{
 80188c6:	bf00      	nop
}
 80188c8:	bf00      	nop
 80188ca:	372c      	adds	r7, #44	; 0x2c
 80188cc:	46bd      	mov	sp, r7
 80188ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188d2:	bf00      	nop
 80188d4:	200009d0 	.word	0x200009d0
 80188d8:	20000a08 	.word	0x20000a08
 80188dc:	08021250 	.word	0x08021250
 80188e0:	20000a24 	.word	0x20000a24
 80188e4:	200008ee 	.word	0x200008ee
 80188e8:	200008eb 	.word	0x200008eb
 80188ec:	0002d06a 	.word	0x0002d06a
 80188f0:	001fefff 	.word	0x001fefff
 80188f4:	08021278 	.word	0x08021278
 80188f8:	200000d4 	.word	0x200000d4
 80188fc:	0802128c 	.word	0x0802128c

08018900 <Init_Tx_Log>:
void Init_Tx_Log(void)
{
 8018900:	b580      	push	{r7, lr}
 8018902:	af00      	add	r7, sp, #0
	UTIL_SEQ_RegTask(1 << CFG_LOG_TX_ID, UTIL_SEQ_RFU,TX_Log);
 8018904:	4a06      	ldr	r2, [pc, #24]	; (8018920 <Init_Tx_Log+0x20>)
 8018906:	2100      	movs	r1, #0
 8018908:	2010      	movs	r0, #16
 801890a:	f001 fe5d 	bl	801a5c8 <UTIL_SEQ_RegTask>
	HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(TX_LOG_ID), hw_ts_Repeated,TX_CALLBACK);
 801890e:	4b05      	ldr	r3, [pc, #20]	; (8018924 <Init_Tx_Log+0x24>)
 8018910:	2201      	movs	r2, #1
 8018912:	4905      	ldr	r1, [pc, #20]	; (8018928 <Init_Tx_Log+0x28>)
 8018914:	2000      	movs	r0, #0
 8018916:	f7f3 f9f9 	bl	800bd0c <HW_TS_Create>
}
 801891a:	bf00      	nop
 801891c:	bd80      	pop	{r7, pc}
 801891e:	bf00      	nop
 8018920:	080186b9 	.word	0x080186b9
 8018924:	0801892d 	.word	0x0801892d
 8018928:	200008ee 	.word	0x200008ee

0801892c <TX_CALLBACK>:
void TX_CALLBACK(void)
{
 801892c:	b580      	push	{r7, lr}
 801892e:	b082      	sub	sp, #8
 8018930:	af00      	add	r7, sp, #0
//	UTIL_SEQ_PauseTask(1<<CFG_TASK_ENV_ID);
	uint32_t status = UTIL_SEQ_IsPauseTask( 1<<CFG_LOG_TX_ID);
 8018932:	2010      	movs	r0, #16
 8018934:	f001 feb6 	bl	801a6a4 <UTIL_SEQ_IsPauseTask>
 8018938:	6078      	str	r0, [r7, #4]
	if(status==1)
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	2b01      	cmp	r3, #1
 801893e:	d102      	bne.n	8018946 <TX_CALLBACK+0x1a>
	{
		UTIL_SEQ_ResumeTask(1<<CFG_LOG_TX_ID);
 8018940:	2010      	movs	r0, #16
 8018942:	f001 fed5 	bl	801a6f0 <UTIL_SEQ_ResumeTask>
	}
	UTIL_SEQ_SetTask(1<<CFG_LOG_TX_ID,CFG_SCH_PRIO_0);
 8018946:	2100      	movs	r1, #0
 8018948:	2010      	movs	r0, #16
 801894a:	f001 fe5f 	bl	801a60c <UTIL_SEQ_SetTask>
}
 801894e:	bf00      	nop
 8018950:	3708      	adds	r7, #8
 8018952:	46bd      	mov	sp, r7
 8018954:	bd80      	pop	{r7, pc}
	...

08018958 <Battery>:

void Battery(void)
{
 8018958:	b580      	push	{r7, lr}
 801895a:	b082      	sub	sp, #8
 801895c:	af00      	add	r7, sp, #0
	uint16_t Voltage,Battery;
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 801895e:	217f      	movs	r1, #127	; 0x7f
 8018960:	4817      	ldr	r0, [pc, #92]	; (80189c0 <Battery+0x68>)
 8018962:	f7f6 f98b 	bl	800ec7c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&Battery,1);
 8018966:	1d3b      	adds	r3, r7, #4
 8018968:	2201      	movs	r2, #1
 801896a:	4619      	mov	r1, r3
 801896c:	4814      	ldr	r0, [pc, #80]	; (80189c0 <Battery+0x68>)
 801896e:	f7f5 fb83 	bl	800e078 <HAL_ADC_Start_DMA>
	Voltage = ((Battery *3300)/4096);
 8018972:	88bb      	ldrh	r3, [r7, #4]
 8018974:	461a      	mov	r2, r3
 8018976:	f640 43e4 	movw	r3, #3300	; 0xce4
 801897a:	fb02 f303 	mul.w	r3, r2, r3
 801897e:	2b00      	cmp	r3, #0
 8018980:	da01      	bge.n	8018986 <Battery+0x2e>
 8018982:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8018986:	131b      	asrs	r3, r3, #12
 8018988:	80fb      	strh	r3, [r7, #6]
	Battery_percentage=(uint8_t)(((Voltage-3000)/1200)*100);
 801898a:	88fb      	ldrh	r3, [r7, #6]
 801898c:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8018990:	4a0c      	ldr	r2, [pc, #48]	; (80189c4 <Battery+0x6c>)
 8018992:	fb82 1203 	smull	r1, r2, r2, r3
 8018996:	11d2      	asrs	r2, r2, #7
 8018998:	17db      	asrs	r3, r3, #31
 801899a:	1ad3      	subs	r3, r2, r3
 801899c:	b2db      	uxtb	r3, r3
 801899e:	461a      	mov	r2, r3
 80189a0:	0092      	lsls	r2, r2, #2
 80189a2:	4413      	add	r3, r2
 80189a4:	461a      	mov	r2, r3
 80189a6:	0091      	lsls	r1, r2, #2
 80189a8:	461a      	mov	r2, r3
 80189aa:	460b      	mov	r3, r1
 80189ac:	4413      	add	r3, r2
 80189ae:	009b      	lsls	r3, r3, #2
 80189b0:	b2da      	uxtb	r2, r3
 80189b2:	4b05      	ldr	r3, [pc, #20]	; (80189c8 <Battery+0x70>)
 80189b4:	701a      	strb	r2, [r3, #0]

}
 80189b6:	bf00      	nop
 80189b8:	3708      	adds	r7, #8
 80189ba:	46bd      	mov	sp, r7
 80189bc:	bd80      	pop	{r7, pc}
 80189be:	bf00      	nop
 80189c0:	20000344 	.word	0x20000344
 80189c4:	1b4e81b5 	.word	0x1b4e81b5
 80189c8:	200009cf 	.word	0x200009cf

080189cc <Lightning_led>:
void Lightning_led(uint16_t delay,uint8_t No_flash)
{
 80189cc:	b580      	push	{r7, lr}
 80189ce:	b084      	sub	sp, #16
 80189d0:	af00      	add	r7, sp, #0
 80189d2:	4603      	mov	r3, r0
 80189d4:	460a      	mov	r2, r1
 80189d6:	80fb      	strh	r3, [r7, #6]
 80189d8:	4613      	mov	r3, r2
 80189da:	717b      	strb	r3, [r7, #5]
  for(uint8_t i=0;i<No_flash;i++)
 80189dc:	2300      	movs	r3, #0
 80189de:	73fb      	strb	r3, [r7, #15]
 80189e0:	e012      	b.n	8018a08 <Lightning_led+0x3c>
    {
	    HAL_GPIO_WritePin(GPIOD,WHT_Pin,GPIO_PIN_SET);
 80189e2:	2201      	movs	r2, #1
 80189e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80189e8:	480c      	ldr	r0, [pc, #48]	; (8018a1c <Lightning_led+0x50>)
 80189ea:	f7f6 ff9f 	bl	800f92c <HAL_GPIO_WritePin>
	  	HAL_Delay(delay);
 80189ee:	88fb      	ldrh	r3, [r7, #6]
 80189f0:	4618      	mov	r0, r3
 80189f2:	f7f1 fd16 	bl	800a422 <HAL_Delay>
	  	HAL_GPIO_WritePin(GPIOD,WHT_Pin,GPIO_PIN_RESET);
 80189f6:	2200      	movs	r2, #0
 80189f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80189fc:	4807      	ldr	r0, [pc, #28]	; (8018a1c <Lightning_led+0x50>)
 80189fe:	f7f6 ff95 	bl	800f92c <HAL_GPIO_WritePin>
  for(uint8_t i=0;i<No_flash;i++)
 8018a02:	7bfb      	ldrb	r3, [r7, #15]
 8018a04:	3301      	adds	r3, #1
 8018a06:	73fb      	strb	r3, [r7, #15]
 8018a08:	7bfa      	ldrb	r2, [r7, #15]
 8018a0a:	797b      	ldrb	r3, [r7, #5]
 8018a0c:	429a      	cmp	r2, r3
 8018a0e:	d3e8      	bcc.n	80189e2 <Lightning_led+0x16>
    }
}
 8018a10:	bf00      	nop
 8018a12:	bf00      	nop
 8018a14:	3710      	adds	r7, #16
 8018a16:	46bd      	mov	sp, r7
 8018a18:	bd80      	pop	{r7, pc}
 8018a1a:	bf00      	nop
 8018a1c:	48000c00 	.word	0x48000c00

08018a20 <IAQ_Status>:
void IAQ_Status(uint8_t state)
{
 8018a20:	b580      	push	{r7, lr}
 8018a22:	b084      	sub	sp, #16
 8018a24:	af00      	add	r7, sp, #0
 8018a26:	4603      	mov	r3, r0
 8018a28:	71fb      	strb	r3, [r7, #7]
	switch(state){
 8018a2a:	79fb      	ldrb	r3, [r7, #7]
 8018a2c:	3b01      	subs	r3, #1
 8018a2e:	2b04      	cmp	r3, #4
 8018a30:	f200 80db 	bhi.w	8018bea <IAQ_Status+0x1ca>
 8018a34:	a201      	add	r2, pc, #4	; (adr r2, 8018a3c <IAQ_Status+0x1c>)
 8018a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018a3a:	bf00      	nop
 8018a3c:	08018a51 	.word	0x08018a51
 8018a40:	08018aa3 	.word	0x08018aa3
 8018a44:	08018af5 	.word	0x08018af5
 8018a48:	08018b47 	.word	0x08018b47
 8018a4c:	08018b99 	.word	0x08018b99
	case 1:
		if(PWR_GD==0){
 8018a50:	4b69      	ldr	r3, [pc, #420]	; (8018bf8 <IAQ_Status+0x1d8>)
 8018a52:	781b      	ldrb	r3, [r3, #0]
 8018a54:	2b00      	cmp	r3, #0
 8018a56:	d112      	bne.n	8018a7e <IAQ_Status+0x5e>
			HAL_GPIO_WritePin(GPIOD,GRN_Pin,GPIO_PIN_RESET);
 8018a58:	2200      	movs	r2, #0
 8018a5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8018a5e:	4867      	ldr	r0, [pc, #412]	; (8018bfc <IAQ_Status+0x1dc>)
 8018a60:	f7f6 ff64 	bl	800f92c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD,YEL_Pin,GPIO_PIN_SET);
 8018a64:	2201      	movs	r2, #1
 8018a66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8018a6a:	4864      	ldr	r0, [pc, #400]	; (8018bfc <IAQ_Status+0x1dc>)
 8018a6c:	f7f6 ff5e 	bl	800f92c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD,RED_Pin,GPIO_PIN_SET);
 8018a70:	2201      	movs	r2, #1
 8018a72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8018a76:	4861      	ldr	r0, [pc, #388]	; (8018bfc <IAQ_Status+0x1dc>)
 8018a78:	f7f6 ff58 	bl	800f92c <HAL_GPIO_WritePin>
		for(uint8_t i=0;i<3;i++)
		{
			IAQ_Blink(GRN_Pin,GRN_Pin);
		}
		}
		break;
 8018a7c:	e0b8      	b.n	8018bf0 <IAQ_Status+0x1d0>
		{	IAQ_led_RESET();
 8018a7e:	f000 f8df 	bl	8018c40 <IAQ_led_RESET>
		for(uint8_t i=0;i<3;i++)
 8018a82:	2300      	movs	r3, #0
 8018a84:	73fb      	strb	r3, [r7, #15]
 8018a86:	e008      	b.n	8018a9a <IAQ_Status+0x7a>
			IAQ_Blink(GRN_Pin,GRN_Pin);
 8018a88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8018a8c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8018a90:	f000 f8b6 	bl	8018c00 <IAQ_Blink>
		for(uint8_t i=0;i<3;i++)
 8018a94:	7bfb      	ldrb	r3, [r7, #15]
 8018a96:	3301      	adds	r3, #1
 8018a98:	73fb      	strb	r3, [r7, #15]
 8018a9a:	7bfb      	ldrb	r3, [r7, #15]
 8018a9c:	2b02      	cmp	r3, #2
 8018a9e:	d9f3      	bls.n	8018a88 <IAQ_Status+0x68>
		break;
 8018aa0:	e0a6      	b.n	8018bf0 <IAQ_Status+0x1d0>
	case 2:
		if(PWR_GD==0){
 8018aa2:	4b55      	ldr	r3, [pc, #340]	; (8018bf8 <IAQ_Status+0x1d8>)
 8018aa4:	781b      	ldrb	r3, [r3, #0]
 8018aa6:	2b00      	cmp	r3, #0
 8018aa8:	d112      	bne.n	8018ad0 <IAQ_Status+0xb0>
			HAL_GPIO_WritePin(GPIOD,YEL_Pin,GPIO_PIN_RESET);
 8018aaa:	2200      	movs	r2, #0
 8018aac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8018ab0:	4852      	ldr	r0, [pc, #328]	; (8018bfc <IAQ_Status+0x1dc>)
 8018ab2:	f7f6 ff3b 	bl	800f92c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD,GRN_Pin,GPIO_PIN_RESET);
 8018ab6:	2200      	movs	r2, #0
 8018ab8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8018abc:	484f      	ldr	r0, [pc, #316]	; (8018bfc <IAQ_Status+0x1dc>)
 8018abe:	f7f6 ff35 	bl	800f92c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD,RED_Pin,GPIO_PIN_SET);
 8018ac2:	2201      	movs	r2, #1
 8018ac4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8018ac8:	484c      	ldr	r0, [pc, #304]	; (8018bfc <IAQ_Status+0x1dc>)
 8018aca:	f7f6 ff2f 	bl	800f92c <HAL_GPIO_WritePin>
		for(uint8_t i=0;i<3;i++)
		{
			IAQ_Blink(GRN_Pin,YEL_Pin);
		}
		}
		break;
 8018ace:	e08f      	b.n	8018bf0 <IAQ_Status+0x1d0>
		{	IAQ_led_RESET();
 8018ad0:	f000 f8b6 	bl	8018c40 <IAQ_led_RESET>
		for(uint8_t i=0;i<3;i++)
 8018ad4:	2300      	movs	r3, #0
 8018ad6:	73bb      	strb	r3, [r7, #14]
 8018ad8:	e008      	b.n	8018aec <IAQ_Status+0xcc>
			IAQ_Blink(GRN_Pin,YEL_Pin);
 8018ada:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8018ade:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8018ae2:	f000 f88d 	bl	8018c00 <IAQ_Blink>
		for(uint8_t i=0;i<3;i++)
 8018ae6:	7bbb      	ldrb	r3, [r7, #14]
 8018ae8:	3301      	adds	r3, #1
 8018aea:	73bb      	strb	r3, [r7, #14]
 8018aec:	7bbb      	ldrb	r3, [r7, #14]
 8018aee:	2b02      	cmp	r3, #2
 8018af0:	d9f3      	bls.n	8018ada <IAQ_Status+0xba>
		break;
 8018af2:	e07d      	b.n	8018bf0 <IAQ_Status+0x1d0>
	case 3:
		if(PWR_GD==0){
 8018af4:	4b40      	ldr	r3, [pc, #256]	; (8018bf8 <IAQ_Status+0x1d8>)
 8018af6:	781b      	ldrb	r3, [r3, #0]
 8018af8:	2b00      	cmp	r3, #0
 8018afa:	d112      	bne.n	8018b22 <IAQ_Status+0x102>
			HAL_GPIO_WritePin(GPIOD,YEL_Pin,GPIO_PIN_RESET);
 8018afc:	2200      	movs	r2, #0
 8018afe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8018b02:	483e      	ldr	r0, [pc, #248]	; (8018bfc <IAQ_Status+0x1dc>)
 8018b04:	f7f6 ff12 	bl	800f92c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD,GRN_Pin,GPIO_PIN_SET);
 8018b08:	2201      	movs	r2, #1
 8018b0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8018b0e:	483b      	ldr	r0, [pc, #236]	; (8018bfc <IAQ_Status+0x1dc>)
 8018b10:	f7f6 ff0c 	bl	800f92c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD,RED_Pin,GPIO_PIN_SET);
 8018b14:	2201      	movs	r2, #1
 8018b16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8018b1a:	4838      	ldr	r0, [pc, #224]	; (8018bfc <IAQ_Status+0x1dc>)
 8018b1c:	f7f6 ff06 	bl	800f92c <HAL_GPIO_WritePin>
			for(uint8_t i=0;i<3;i++)
			{
				IAQ_Blink(YEL_Pin,YEL_Pin);
			}
		}
		break;
 8018b20:	e066      	b.n	8018bf0 <IAQ_Status+0x1d0>
			IAQ_led_RESET();
 8018b22:	f000 f88d 	bl	8018c40 <IAQ_led_RESET>
			for(uint8_t i=0;i<3;i++)
 8018b26:	2300      	movs	r3, #0
 8018b28:	737b      	strb	r3, [r7, #13]
 8018b2a:	e008      	b.n	8018b3e <IAQ_Status+0x11e>
				IAQ_Blink(YEL_Pin,YEL_Pin);
 8018b2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8018b30:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8018b34:	f000 f864 	bl	8018c00 <IAQ_Blink>
			for(uint8_t i=0;i<3;i++)
 8018b38:	7b7b      	ldrb	r3, [r7, #13]
 8018b3a:	3301      	adds	r3, #1
 8018b3c:	737b      	strb	r3, [r7, #13]
 8018b3e:	7b7b      	ldrb	r3, [r7, #13]
 8018b40:	2b02      	cmp	r3, #2
 8018b42:	d9f3      	bls.n	8018b2c <IAQ_Status+0x10c>
		break;
 8018b44:	e054      	b.n	8018bf0 <IAQ_Status+0x1d0>
	case 4:
		if(PWR_GD==0){
 8018b46:	4b2c      	ldr	r3, [pc, #176]	; (8018bf8 <IAQ_Status+0x1d8>)
 8018b48:	781b      	ldrb	r3, [r3, #0]
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	d112      	bne.n	8018b74 <IAQ_Status+0x154>
			HAL_GPIO_WritePin(GPIOD,YEL_Pin,GPIO_PIN_RESET);
 8018b4e:	2200      	movs	r2, #0
 8018b50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8018b54:	4829      	ldr	r0, [pc, #164]	; (8018bfc <IAQ_Status+0x1dc>)
 8018b56:	f7f6 fee9 	bl	800f92c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD,GRN_Pin,GPIO_PIN_SET);
 8018b5a:	2201      	movs	r2, #1
 8018b5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8018b60:	4826      	ldr	r0, [pc, #152]	; (8018bfc <IAQ_Status+0x1dc>)
 8018b62:	f7f6 fee3 	bl	800f92c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD,RED_Pin,GPIO_PIN_RESET);
 8018b66:	2200      	movs	r2, #0
 8018b68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8018b6c:	4823      	ldr	r0, [pc, #140]	; (8018bfc <IAQ_Status+0x1dc>)
 8018b6e:	f7f6 fedd 	bl	800f92c <HAL_GPIO_WritePin>
		for(uint8_t i=0;i<3;i++)
		{
			IAQ_Blink(YEL_Pin,RED_Pin);
		}
		}
		break;
 8018b72:	e03d      	b.n	8018bf0 <IAQ_Status+0x1d0>
		{	IAQ_led_RESET();
 8018b74:	f000 f864 	bl	8018c40 <IAQ_led_RESET>
		for(uint8_t i=0;i<3;i++)
 8018b78:	2300      	movs	r3, #0
 8018b7a:	733b      	strb	r3, [r7, #12]
 8018b7c:	e008      	b.n	8018b90 <IAQ_Status+0x170>
			IAQ_Blink(YEL_Pin,RED_Pin);
 8018b7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8018b82:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8018b86:	f000 f83b 	bl	8018c00 <IAQ_Blink>
		for(uint8_t i=0;i<3;i++)
 8018b8a:	7b3b      	ldrb	r3, [r7, #12]
 8018b8c:	3301      	adds	r3, #1
 8018b8e:	733b      	strb	r3, [r7, #12]
 8018b90:	7b3b      	ldrb	r3, [r7, #12]
 8018b92:	2b02      	cmp	r3, #2
 8018b94:	d9f3      	bls.n	8018b7e <IAQ_Status+0x15e>
		break;
 8018b96:	e02b      	b.n	8018bf0 <IAQ_Status+0x1d0>
	case 5:
		if(PWR_GD==0){
 8018b98:	4b17      	ldr	r3, [pc, #92]	; (8018bf8 <IAQ_Status+0x1d8>)
 8018b9a:	781b      	ldrb	r3, [r3, #0]
 8018b9c:	2b00      	cmp	r3, #0
 8018b9e:	d112      	bne.n	8018bc6 <IAQ_Status+0x1a6>
			HAL_GPIO_WritePin(GPIOD,YEL_Pin,GPIO_PIN_SET);
 8018ba0:	2201      	movs	r2, #1
 8018ba2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8018ba6:	4815      	ldr	r0, [pc, #84]	; (8018bfc <IAQ_Status+0x1dc>)
 8018ba8:	f7f6 fec0 	bl	800f92c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD,GRN_Pin,GPIO_PIN_SET);
 8018bac:	2201      	movs	r2, #1
 8018bae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8018bb2:	4812      	ldr	r0, [pc, #72]	; (8018bfc <IAQ_Status+0x1dc>)
 8018bb4:	f7f6 feba 	bl	800f92c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD,RED_Pin,GPIO_PIN_RESET);
 8018bb8:	2200      	movs	r2, #0
 8018bba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8018bbe:	480f      	ldr	r0, [pc, #60]	; (8018bfc <IAQ_Status+0x1dc>)
 8018bc0:	f7f6 feb4 	bl	800f92c <HAL_GPIO_WritePin>
		for(uint8_t i=0;i<3;i++)
		{
			IAQ_Blink(RED_Pin,RED_Pin);
		}
		}
		break;
 8018bc4:	e014      	b.n	8018bf0 <IAQ_Status+0x1d0>
		{	IAQ_led_RESET();
 8018bc6:	f000 f83b 	bl	8018c40 <IAQ_led_RESET>
		for(uint8_t i=0;i<3;i++)
 8018bca:	2300      	movs	r3, #0
 8018bcc:	72fb      	strb	r3, [r7, #11]
 8018bce:	e008      	b.n	8018be2 <IAQ_Status+0x1c2>
			IAQ_Blink(RED_Pin,RED_Pin);
 8018bd0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8018bd4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8018bd8:	f000 f812 	bl	8018c00 <IAQ_Blink>
		for(uint8_t i=0;i<3;i++)
 8018bdc:	7afb      	ldrb	r3, [r7, #11]
 8018bde:	3301      	adds	r3, #1
 8018be0:	72fb      	strb	r3, [r7, #11]
 8018be2:	7afb      	ldrb	r3, [r7, #11]
 8018be4:	2b02      	cmp	r3, #2
 8018be6:	d9f3      	bls.n	8018bd0 <IAQ_Status+0x1b0>
		break;
 8018be8:	e002      	b.n	8018bf0 <IAQ_Status+0x1d0>
	default:
		IAQ_led_RESET();
 8018bea:	f000 f829 	bl	8018c40 <IAQ_led_RESET>
		break;
 8018bee:	bf00      	nop
	}}
 8018bf0:	bf00      	nop
 8018bf2:	3710      	adds	r7, #16
 8018bf4:	46bd      	mov	sp, r7
 8018bf6:	bd80      	pop	{r7, pc}
 8018bf8:	200009cd 	.word	0x200009cd
 8018bfc:	48000c00 	.word	0x48000c00

08018c00 <IAQ_Blink>:
void IAQ_Blink(uint16_t led,uint16_t led2)
	{
 8018c00:	b580      	push	{r7, lr}
 8018c02:	b082      	sub	sp, #8
 8018c04:	af00      	add	r7, sp, #0
 8018c06:	4603      	mov	r3, r0
 8018c08:	460a      	mov	r2, r1
 8018c0a:	80fb      	strh	r3, [r7, #6]
 8018c0c:	4613      	mov	r3, r2
 8018c0e:	80bb      	strh	r3, [r7, #4]
		HAL_GPIO_WritePin(GPIOD,led,GPIO_PIN_RESET);
 8018c10:	88fb      	ldrh	r3, [r7, #6]
 8018c12:	2200      	movs	r2, #0
 8018c14:	4619      	mov	r1, r3
 8018c16:	4809      	ldr	r0, [pc, #36]	; (8018c3c <IAQ_Blink+0x3c>)
 8018c18:	f7f6 fe88 	bl	800f92c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,led2,GPIO_PIN_RESET);
 8018c1c:	88bb      	ldrh	r3, [r7, #4]
 8018c1e:	2200      	movs	r2, #0
 8018c20:	4619      	mov	r1, r3
 8018c22:	4806      	ldr	r0, [pc, #24]	; (8018c3c <IAQ_Blink+0x3c>)
 8018c24:	f7f6 fe82 	bl	800f92c <HAL_GPIO_WritePin>
		HAL_Delay(250);
 8018c28:	20fa      	movs	r0, #250	; 0xfa
 8018c2a:	f7f1 fbfa 	bl	800a422 <HAL_Delay>
		IAQ_led_RESET();
 8018c2e:	f000 f807 	bl	8018c40 <IAQ_led_RESET>
	}
 8018c32:	bf00      	nop
 8018c34:	3708      	adds	r7, #8
 8018c36:	46bd      	mov	sp, r7
 8018c38:	bd80      	pop	{r7, pc}
 8018c3a:	bf00      	nop
 8018c3c:	48000c00 	.word	0x48000c00

08018c40 <IAQ_led_RESET>:
void IAQ_led_RESET(void)
{
 8018c40:	b580      	push	{r7, lr}
 8018c42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD,GRN_Pin,GPIO_PIN_SET);
 8018c44:	2201      	movs	r2, #1
 8018c46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8018c4a:	4805      	ldr	r0, [pc, #20]	; (8018c60 <IAQ_led_RESET+0x20>)
 8018c4c:	f7f6 fe6e 	bl	800f92c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD,YEL_Pin,GPIO_PIN_SET);
 8018c50:	2201      	movs	r2, #1
 8018c52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8018c56:	4802      	ldr	r0, [pc, #8]	; (8018c60 <IAQ_led_RESET+0x20>)
 8018c58:	f7f6 fe68 	bl	800f92c <HAL_GPIO_WritePin>
}
 8018c5c:	bf00      	nop
 8018c5e:	bd80      	pop	{r7, pc}
 8018c60:	48000c00 	.word	0x48000c00

08018c64 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8018c64:	b580      	push	{r7, lr}
 8018c66:	b08c      	sub	sp, #48	; 0x30
 8018c68:	af00      	add	r7, sp, #0
 8018c6a:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8018c6c:	2300      	movs	r3, #0
 8018c6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8018c72:	687b      	ldr	r3, [r7, #4]
 8018c74:	3301      	adds	r3, #1
 8018c76:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (event_pckt->evt)
 8018c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c7a:	781b      	ldrb	r3, [r3, #0]
 8018c7c:	2bff      	cmp	r3, #255	; 0xff
 8018c7e:	f040 829a 	bne.w	80191b6 <Custom_STM_Event_Handler+0x552>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8018c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c84:	3302      	adds	r3, #2
 8018c86:	627b      	str	r3, [r7, #36]	; 0x24
      switch (blecore_evt->ecode)
 8018c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c8a:	881b      	ldrh	r3, [r3, #0]
 8018c8c:	b29b      	uxth	r3, r3
 8018c8e:	f640 4214 	movw	r2, #3092	; 0xc14
 8018c92:	4293      	cmp	r3, r2
 8018c94:	f000 8223 	beq.w	80190de <Custom_STM_Event_Handler+0x47a>
 8018c98:	f640 4214 	movw	r2, #3092	; 0xc14
 8018c9c:	4293      	cmp	r3, r2
 8018c9e:	f300 8282 	bgt.w	80191a6 <Custom_STM_Event_Handler+0x542>
 8018ca2:	f640 4201 	movw	r2, #3073	; 0xc01
 8018ca6:	4293      	cmp	r3, r2
 8018ca8:	d005      	beq.n	8018cb6 <Custom_STM_Event_Handler+0x52>
 8018caa:	f640 4213 	movw	r2, #3091	; 0xc13
 8018cae:	4293      	cmp	r3, r2
 8018cb0:	f000 823e 	beq.w	8019130 <Custom_STM_Event_Handler+0x4cc>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8018cb4:	e277      	b.n	80191a6 <Custom_STM_Event_Handler+0x542>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8018cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018cb8:	3302      	adds	r3, #2
 8018cba:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomBat_LevelHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8018cbc:	69bb      	ldr	r3, [r7, #24]
 8018cbe:	885b      	ldrh	r3, [r3, #2]
 8018cc0:	b29b      	uxth	r3, r3
 8018cc2:	461a      	mov	r2, r3
 8018cc4:	4bac      	ldr	r3, [pc, #688]	; (8018f78 <Custom_STM_Event_Handler+0x314>)
 8018cc6:	885b      	ldrh	r3, [r3, #2]
 8018cc8:	3302      	adds	r3, #2
 8018cca:	429a      	cmp	r2, r3
 8018ccc:	d119      	bne.n	8018d02 <Custom_STM_Event_Handler+0x9e>
            return_value = SVCCTL_EvtAckFlowEnable;
 8018cce:	2301      	movs	r3, #1
 8018cd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch (attribute_modified->Attr_Data[0])
 8018cd4:	69bb      	ldr	r3, [r7, #24]
 8018cd6:	7a1b      	ldrb	r3, [r3, #8]
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	d002      	beq.n	8018ce2 <Custom_STM_Event_Handler+0x7e>
 8018cdc:	2b01      	cmp	r3, #1
 8018cde:	d008      	beq.n	8018cf2 <Custom_STM_Event_Handler+0x8e>
              break;
 8018ce0:	e1fc      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BAT_LEVEL_NOTIFY_DISABLED_EVT;
 8018ce2:	2302      	movs	r3, #2
 8018ce4:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8018ce6:	f107 0308 	add.w	r3, r7, #8
 8018cea:	4618      	mov	r0, r3
 8018cec:	f7fe fcc2 	bl	8017674 <Custom_STM_App_Notification>
                break;
 8018cf0:	e1f4      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BAT_LEVEL_NOTIFY_ENABLED_EVT;
 8018cf2:	2301      	movs	r3, #1
 8018cf4:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8018cf6:	f107 0308 	add.w	r3, r7, #8
 8018cfa:	4618      	mov	r0, r3
 8018cfc:	f7fe fcba 	bl	8017674 <Custom_STM_App_Notification>
                break;
 8018d00:	e1ec      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomEocHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8018d02:	69bb      	ldr	r3, [r7, #24]
 8018d04:	885b      	ldrh	r3, [r3, #2]
 8018d06:	b29b      	uxth	r3, r3
 8018d08:	461a      	mov	r2, r3
 8018d0a:	4b9b      	ldr	r3, [pc, #620]	; (8018f78 <Custom_STM_Event_Handler+0x314>)
 8018d0c:	889b      	ldrh	r3, [r3, #4]
 8018d0e:	3302      	adds	r3, #2
 8018d10:	429a      	cmp	r2, r3
 8018d12:	d119      	bne.n	8018d48 <Custom_STM_Event_Handler+0xe4>
            return_value = SVCCTL_EvtAckFlowEnable;
 8018d14:	2301      	movs	r3, #1
 8018d16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch (attribute_modified->Attr_Data[0])
 8018d1a:	69bb      	ldr	r3, [r7, #24]
 8018d1c:	7a1b      	ldrb	r3, [r3, #8]
 8018d1e:	2b00      	cmp	r3, #0
 8018d20:	d002      	beq.n	8018d28 <Custom_STM_Event_Handler+0xc4>
 8018d22:	2b01      	cmp	r3, #1
 8018d24:	d008      	beq.n	8018d38 <Custom_STM_Event_Handler+0xd4>
              break;
 8018d26:	e1d9      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_EOC_NOTIFY_DISABLED_EVT;
 8018d28:	2304      	movs	r3, #4
 8018d2a:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8018d2c:	f107 0308 	add.w	r3, r7, #8
 8018d30:	4618      	mov	r0, r3
 8018d32:	f7fe fc9f 	bl	8017674 <Custom_STM_App_Notification>
                break;
 8018d36:	e1d1      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_EOC_NOTIFY_ENABLED_EVT;
 8018d38:	2303      	movs	r3, #3
 8018d3a:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8018d3c:	f107 0308 	add.w	r3, r7, #8
 8018d40:	4618      	mov	r0, r3
 8018d42:	f7fe fc97 	bl	8017674 <Custom_STM_App_Notification>
                break;
 8018d46:	e1c9      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomPwr_GdHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8018d48:	69bb      	ldr	r3, [r7, #24]
 8018d4a:	885b      	ldrh	r3, [r3, #2]
 8018d4c:	b29b      	uxth	r3, r3
 8018d4e:	461a      	mov	r2, r3
 8018d50:	4b89      	ldr	r3, [pc, #548]	; (8018f78 <Custom_STM_Event_Handler+0x314>)
 8018d52:	88db      	ldrh	r3, [r3, #6]
 8018d54:	3302      	adds	r3, #2
 8018d56:	429a      	cmp	r2, r3
 8018d58:	d119      	bne.n	8018d8e <Custom_STM_Event_Handler+0x12a>
            return_value = SVCCTL_EvtAckFlowEnable;
 8018d5a:	2301      	movs	r3, #1
 8018d5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch (attribute_modified->Attr_Data[0])
 8018d60:	69bb      	ldr	r3, [r7, #24]
 8018d62:	7a1b      	ldrb	r3, [r3, #8]
 8018d64:	2b00      	cmp	r3, #0
 8018d66:	d002      	beq.n	8018d6e <Custom_STM_Event_Handler+0x10a>
 8018d68:	2b01      	cmp	r3, #1
 8018d6a:	d008      	beq.n	8018d7e <Custom_STM_Event_Handler+0x11a>
              break;
 8018d6c:	e1b6      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_PWR_GD_NOTIFY_DISABLED_EVT;
 8018d6e:	2306      	movs	r3, #6
 8018d70:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8018d72:	f107 0308 	add.w	r3, r7, #8
 8018d76:	4618      	mov	r0, r3
 8018d78:	f7fe fc7c 	bl	8017674 <Custom_STM_App_Notification>
                break;
 8018d7c:	e1ae      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_PWR_GD_NOTIFY_ENABLED_EVT;
 8018d7e:	2305      	movs	r3, #5
 8018d80:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8018d82:	f107 0308 	add.w	r3, r7, #8
 8018d86:	4618      	mov	r0, r3
 8018d88:	f7fe fc74 	bl	8017674 <Custom_STM_App_Notification>
                break;
 8018d8c:	e1a6      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomIaq_InHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8018d8e:	69bb      	ldr	r3, [r7, #24]
 8018d90:	885b      	ldrh	r3, [r3, #2]
 8018d92:	b29b      	uxth	r3, r3
 8018d94:	461a      	mov	r2, r3
 8018d96:	4b78      	ldr	r3, [pc, #480]	; (8018f78 <Custom_STM_Event_Handler+0x314>)
 8018d98:	895b      	ldrh	r3, [r3, #10]
 8018d9a:	3302      	adds	r3, #2
 8018d9c:	429a      	cmp	r2, r3
 8018d9e:	d119      	bne.n	8018dd4 <Custom_STM_Event_Handler+0x170>
            return_value = SVCCTL_EvtAckFlowEnable;
 8018da0:	2301      	movs	r3, #1
 8018da2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch (attribute_modified->Attr_Data[0])
 8018da6:	69bb      	ldr	r3, [r7, #24]
 8018da8:	7a1b      	ldrb	r3, [r3, #8]
 8018daa:	2b00      	cmp	r3, #0
 8018dac:	d002      	beq.n	8018db4 <Custom_STM_Event_Handler+0x150>
 8018dae:	2b01      	cmp	r3, #1
 8018db0:	d008      	beq.n	8018dc4 <Custom_STM_Event_Handler+0x160>
              break;
 8018db2:	e193      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_IAQ_IN_NOTIFY_DISABLED_EVT;
 8018db4:	2308      	movs	r3, #8
 8018db6:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8018db8:	f107 0308 	add.w	r3, r7, #8
 8018dbc:	4618      	mov	r0, r3
 8018dbe:	f7fe fc59 	bl	8017674 <Custom_STM_App_Notification>
                break;
 8018dc2:	e18b      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_IAQ_IN_NOTIFY_ENABLED_EVT;
 8018dc4:	2307      	movs	r3, #7
 8018dc6:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8018dc8:	f107 0308 	add.w	r3, r7, #8
 8018dcc:	4618      	mov	r0, r3
 8018dce:	f7fe fc51 	bl	8017674 <Custom_STM_App_Notification>
                break;
 8018dd2:	e183      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomRelative_IaHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8018dd4:	69bb      	ldr	r3, [r7, #24]
 8018dd6:	885b      	ldrh	r3, [r3, #2]
 8018dd8:	b29b      	uxth	r3, r3
 8018dda:	461a      	mov	r2, r3
 8018ddc:	4b66      	ldr	r3, [pc, #408]	; (8018f78 <Custom_STM_Event_Handler+0x314>)
 8018dde:	899b      	ldrh	r3, [r3, #12]
 8018de0:	3302      	adds	r3, #2
 8018de2:	429a      	cmp	r2, r3
 8018de4:	d119      	bne.n	8018e1a <Custom_STM_Event_Handler+0x1b6>
            return_value = SVCCTL_EvtAckFlowEnable;
 8018de6:	2301      	movs	r3, #1
 8018de8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch (attribute_modified->Attr_Data[0])
 8018dec:	69bb      	ldr	r3, [r7, #24]
 8018dee:	7a1b      	ldrb	r3, [r3, #8]
 8018df0:	2b00      	cmp	r3, #0
 8018df2:	d002      	beq.n	8018dfa <Custom_STM_Event_Handler+0x196>
 8018df4:	2b01      	cmp	r3, #1
 8018df6:	d008      	beq.n	8018e0a <Custom_STM_Event_Handler+0x1a6>
              break;
 8018df8:	e170      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_RELATIVE_IA_NOTIFY_DISABLED_EVT;
 8018dfa:	230a      	movs	r3, #10
 8018dfc:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8018dfe:	f107 0308 	add.w	r3, r7, #8
 8018e02:	4618      	mov	r0, r3
 8018e04:	f7fe fc36 	bl	8017674 <Custom_STM_App_Notification>
                break;
 8018e08:	e168      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_RELATIVE_IA_NOTIFY_ENABLED_EVT;
 8018e0a:	2309      	movs	r3, #9
 8018e0c:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8018e0e:	f107 0308 	add.w	r3, r7, #8
 8018e12:	4618      	mov	r0, r3
 8018e14:	f7fe fc2e 	bl	8017674 <Custom_STM_App_Notification>
                break;
 8018e18:	e160      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomTvocHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8018e1a:	69bb      	ldr	r3, [r7, #24]
 8018e1c:	885b      	ldrh	r3, [r3, #2]
 8018e1e:	b29b      	uxth	r3, r3
 8018e20:	461a      	mov	r2, r3
 8018e22:	4b55      	ldr	r3, [pc, #340]	; (8018f78 <Custom_STM_Event_Handler+0x314>)
 8018e24:	89db      	ldrh	r3, [r3, #14]
 8018e26:	3302      	adds	r3, #2
 8018e28:	429a      	cmp	r2, r3
 8018e2a:	d119      	bne.n	8018e60 <Custom_STM_Event_Handler+0x1fc>
            return_value = SVCCTL_EvtAckFlowEnable;
 8018e2c:	2301      	movs	r3, #1
 8018e2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch (attribute_modified->Attr_Data[0])
 8018e32:	69bb      	ldr	r3, [r7, #24]
 8018e34:	7a1b      	ldrb	r3, [r3, #8]
 8018e36:	2b00      	cmp	r3, #0
 8018e38:	d002      	beq.n	8018e40 <Custom_STM_Event_Handler+0x1dc>
 8018e3a:	2b01      	cmp	r3, #1
 8018e3c:	d008      	beq.n	8018e50 <Custom_STM_Event_Handler+0x1ec>
              break;
 8018e3e:	e14d      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_TVOC_NOTIFY_DISABLED_EVT;
 8018e40:	230c      	movs	r3, #12
 8018e42:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8018e44:	f107 0308 	add.w	r3, r7, #8
 8018e48:	4618      	mov	r0, r3
 8018e4a:	f7fe fc13 	bl	8017674 <Custom_STM_App_Notification>
                break;
 8018e4e:	e145      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_TVOC_NOTIFY_ENABLED_EVT;
 8018e50:	230b      	movs	r3, #11
 8018e52:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8018e54:	f107 0308 	add.w	r3, r7, #8
 8018e58:	4618      	mov	r0, r3
 8018e5a:	f7fe fc0b 	bl	8017674 <Custom_STM_App_Notification>
                break;
 8018e5e:	e13d      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomEtohHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8018e60:	69bb      	ldr	r3, [r7, #24]
 8018e62:	885b      	ldrh	r3, [r3, #2]
 8018e64:	b29b      	uxth	r3, r3
 8018e66:	461a      	mov	r2, r3
 8018e68:	4b43      	ldr	r3, [pc, #268]	; (8018f78 <Custom_STM_Event_Handler+0x314>)
 8018e6a:	8a1b      	ldrh	r3, [r3, #16]
 8018e6c:	3302      	adds	r3, #2
 8018e6e:	429a      	cmp	r2, r3
 8018e70:	d119      	bne.n	8018ea6 <Custom_STM_Event_Handler+0x242>
            return_value = SVCCTL_EvtAckFlowEnable;
 8018e72:	2301      	movs	r3, #1
 8018e74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch (attribute_modified->Attr_Data[0])
 8018e78:	69bb      	ldr	r3, [r7, #24]
 8018e7a:	7a1b      	ldrb	r3, [r3, #8]
 8018e7c:	2b00      	cmp	r3, #0
 8018e7e:	d002      	beq.n	8018e86 <Custom_STM_Event_Handler+0x222>
 8018e80:	2b01      	cmp	r3, #1
 8018e82:	d008      	beq.n	8018e96 <Custom_STM_Event_Handler+0x232>
              break;
 8018e84:	e12a      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ETOH_NOTIFY_DISABLED_EVT;
 8018e86:	230e      	movs	r3, #14
 8018e88:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8018e8a:	f107 0308 	add.w	r3, r7, #8
 8018e8e:	4618      	mov	r0, r3
 8018e90:	f7fe fbf0 	bl	8017674 <Custom_STM_App_Notification>
                break;
 8018e94:	e122      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ETOH_NOTIFY_ENABLED_EVT;
 8018e96:	230d      	movs	r3, #13
 8018e98:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8018e9a:	f107 0308 	add.w	r3, r7, #8
 8018e9e:	4618      	mov	r0, r3
 8018ea0:	f7fe fbe8 	bl	8017674 <Custom_STM_App_Notification>
                break;
 8018ea4:	e11a      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomCo2Hdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8018ea6:	69bb      	ldr	r3, [r7, #24]
 8018ea8:	885b      	ldrh	r3, [r3, #2]
 8018eaa:	b29b      	uxth	r3, r3
 8018eac:	461a      	mov	r2, r3
 8018eae:	4b32      	ldr	r3, [pc, #200]	; (8018f78 <Custom_STM_Event_Handler+0x314>)
 8018eb0:	8a5b      	ldrh	r3, [r3, #18]
 8018eb2:	3302      	adds	r3, #2
 8018eb4:	429a      	cmp	r2, r3
 8018eb6:	d119      	bne.n	8018eec <Custom_STM_Event_Handler+0x288>
            return_value = SVCCTL_EvtAckFlowEnable;
 8018eb8:	2301      	movs	r3, #1
 8018eba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch (attribute_modified->Attr_Data[0])
 8018ebe:	69bb      	ldr	r3, [r7, #24]
 8018ec0:	7a1b      	ldrb	r3, [r3, #8]
 8018ec2:	2b00      	cmp	r3, #0
 8018ec4:	d002      	beq.n	8018ecc <Custom_STM_Event_Handler+0x268>
 8018ec6:	2b01      	cmp	r3, #1
 8018ec8:	d008      	beq.n	8018edc <Custom_STM_Event_Handler+0x278>
              break;
 8018eca:	e107      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_CO2_NOTIFY_DISABLED_EVT;
 8018ecc:	2310      	movs	r3, #16
 8018ece:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8018ed0:	f107 0308 	add.w	r3, r7, #8
 8018ed4:	4618      	mov	r0, r3
 8018ed6:	f7fe fbcd 	bl	8017674 <Custom_STM_App_Notification>
                break;
 8018eda:	e0ff      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_CO2_NOTIFY_ENABLED_EVT;
 8018edc:	230f      	movs	r3, #15
 8018ede:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8018ee0:	f107 0308 	add.w	r3, r7, #8
 8018ee4:	4618      	mov	r0, r3
 8018ee6:	f7fe fbc5 	bl	8017674 <Custom_STM_App_Notification>
                break;
 8018eea:	e0f7      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomTempHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8018eec:	69bb      	ldr	r3, [r7, #24]
 8018eee:	885b      	ldrh	r3, [r3, #2]
 8018ef0:	b29b      	uxth	r3, r3
 8018ef2:	461a      	mov	r2, r3
 8018ef4:	4b20      	ldr	r3, [pc, #128]	; (8018f78 <Custom_STM_Event_Handler+0x314>)
 8018ef6:	8adb      	ldrh	r3, [r3, #22]
 8018ef8:	3302      	adds	r3, #2
 8018efa:	429a      	cmp	r2, r3
 8018efc:	d119      	bne.n	8018f32 <Custom_STM_Event_Handler+0x2ce>
            return_value = SVCCTL_EvtAckFlowEnable;
 8018efe:	2301      	movs	r3, #1
 8018f00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch (attribute_modified->Attr_Data[0])
 8018f04:	69bb      	ldr	r3, [r7, #24]
 8018f06:	7a1b      	ldrb	r3, [r3, #8]
 8018f08:	2b00      	cmp	r3, #0
 8018f0a:	d002      	beq.n	8018f12 <Custom_STM_Event_Handler+0x2ae>
 8018f0c:	2b01      	cmp	r3, #1
 8018f0e:	d008      	beq.n	8018f22 <Custom_STM_Event_Handler+0x2be>
              break;
 8018f10:	e0e4      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_TEMP_NOTIFY_DISABLED_EVT;
 8018f12:	2312      	movs	r3, #18
 8018f14:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8018f16:	f107 0308 	add.w	r3, r7, #8
 8018f1a:	4618      	mov	r0, r3
 8018f1c:	f7fe fbaa 	bl	8017674 <Custom_STM_App_Notification>
                break;
 8018f20:	e0dc      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_TEMP_NOTIFY_ENABLED_EVT;
 8018f22:	2311      	movs	r3, #17
 8018f24:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8018f26:	f107 0308 	add.w	r3, r7, #8
 8018f2a:	4618      	mov	r0, r3
 8018f2c:	f7fe fba2 	bl	8017674 <Custom_STM_App_Notification>
                break;
 8018f30:	e0d4      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomHumiHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8018f32:	69bb      	ldr	r3, [r7, #24]
 8018f34:	885b      	ldrh	r3, [r3, #2]
 8018f36:	b29b      	uxth	r3, r3
 8018f38:	461a      	mov	r2, r3
 8018f3a:	4b0f      	ldr	r3, [pc, #60]	; (8018f78 <Custom_STM_Event_Handler+0x314>)
 8018f3c:	8b1b      	ldrh	r3, [r3, #24]
 8018f3e:	3302      	adds	r3, #2
 8018f40:	429a      	cmp	r2, r3
 8018f42:	d11b      	bne.n	8018f7c <Custom_STM_Event_Handler+0x318>
            return_value = SVCCTL_EvtAckFlowEnable;
 8018f44:	2301      	movs	r3, #1
 8018f46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch (attribute_modified->Attr_Data[0])
 8018f4a:	69bb      	ldr	r3, [r7, #24]
 8018f4c:	7a1b      	ldrb	r3, [r3, #8]
 8018f4e:	2b00      	cmp	r3, #0
 8018f50:	d002      	beq.n	8018f58 <Custom_STM_Event_Handler+0x2f4>
 8018f52:	2b01      	cmp	r3, #1
 8018f54:	d008      	beq.n	8018f68 <Custom_STM_Event_Handler+0x304>
              break;
 8018f56:	e0c1      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_HUMI_NOTIFY_DISABLED_EVT;
 8018f58:	2314      	movs	r3, #20
 8018f5a:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8018f5c:	f107 0308 	add.w	r3, r7, #8
 8018f60:	4618      	mov	r0, r3
 8018f62:	f7fe fb87 	bl	8017674 <Custom_STM_App_Notification>
                break;
 8018f66:	e0b9      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_HUMI_NOTIFY_ENABLED_EVT;
 8018f68:	2313      	movs	r3, #19
 8018f6a:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8018f6c:	f107 0308 	add.w	r3, r7, #8
 8018f70:	4618      	mov	r0, r3
 8018f72:	f7fe fb7f 	bl	8017674 <Custom_STM_App_Notification>
                break;
 8018f76:	e0b1      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
 8018f78:	20000b1c 	.word	0x20000b1c
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomPresHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8018f7c:	69bb      	ldr	r3, [r7, #24]
 8018f7e:	885b      	ldrh	r3, [r3, #2]
 8018f80:	b29b      	uxth	r3, r3
 8018f82:	461a      	mov	r2, r3
 8018f84:	4b8f      	ldr	r3, [pc, #572]	; (80191c4 <Custom_STM_Event_Handler+0x560>)
 8018f86:	8b5b      	ldrh	r3, [r3, #26]
 8018f88:	3302      	adds	r3, #2
 8018f8a:	429a      	cmp	r2, r3
 8018f8c:	d119      	bne.n	8018fc2 <Custom_STM_Event_Handler+0x35e>
            return_value = SVCCTL_EvtAckFlowEnable;
 8018f8e:	2301      	movs	r3, #1
 8018f90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch (attribute_modified->Attr_Data[0])
 8018f94:	69bb      	ldr	r3, [r7, #24]
 8018f96:	7a1b      	ldrb	r3, [r3, #8]
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	d002      	beq.n	8018fa2 <Custom_STM_Event_Handler+0x33e>
 8018f9c:	2b01      	cmp	r3, #1
 8018f9e:	d008      	beq.n	8018fb2 <Custom_STM_Event_Handler+0x34e>
              break;
 8018fa0:	e09c      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_PRES_NOTIFY_DISABLED_EVT;
 8018fa2:	2316      	movs	r3, #22
 8018fa4:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8018fa6:	f107 0308 	add.w	r3, r7, #8
 8018faa:	4618      	mov	r0, r3
 8018fac:	f7fe fb62 	bl	8017674 <Custom_STM_App_Notification>
                break;
 8018fb0:	e094      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_PRES_NOTIFY_ENABLED_EVT;
 8018fb2:	2315      	movs	r3, #21
 8018fb4:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8018fb6:	f107 0308 	add.w	r3, r7, #8
 8018fba:	4618      	mov	r0, r3
 8018fbc:	f7fe fb5a 	bl	8017674 <Custom_STM_App_Notification>
                break;
 8018fc0:	e08c      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomGet_Env_LogHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8018fc2:	69bb      	ldr	r3, [r7, #24]
 8018fc4:	885b      	ldrh	r3, [r3, #2]
 8018fc6:	b29b      	uxth	r3, r3
 8018fc8:	461a      	mov	r2, r3
 8018fca:	4b7e      	ldr	r3, [pc, #504]	; (80191c4 <Custom_STM_Event_Handler+0x560>)
 8018fcc:	8b9b      	ldrh	r3, [r3, #28]
 8018fce:	3302      	adds	r3, #2
 8018fd0:	429a      	cmp	r2, r3
 8018fd2:	d119      	bne.n	8019008 <Custom_STM_Event_Handler+0x3a4>
            return_value = SVCCTL_EvtAckFlowEnable;
 8018fd4:	2301      	movs	r3, #1
 8018fd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch (attribute_modified->Attr_Data[0])
 8018fda:	69bb      	ldr	r3, [r7, #24]
 8018fdc:	7a1b      	ldrb	r3, [r3, #8]
 8018fde:	2b00      	cmp	r3, #0
 8018fe0:	d002      	beq.n	8018fe8 <Custom_STM_Event_Handler+0x384>
 8018fe2:	2b01      	cmp	r3, #1
 8018fe4:	d008      	beq.n	8018ff8 <Custom_STM_Event_Handler+0x394>
              break;
 8018fe6:	e079      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_GET_ENV_LOG_NOTIFY_DISABLED_EVT;
 8018fe8:	2318      	movs	r3, #24
 8018fea:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8018fec:	f107 0308 	add.w	r3, r7, #8
 8018ff0:	4618      	mov	r0, r3
 8018ff2:	f7fe fb3f 	bl	8017674 <Custom_STM_App_Notification>
                break;
 8018ff6:	e071      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_GET_ENV_LOG_NOTIFY_ENABLED_EVT;
 8018ff8:	2317      	movs	r3, #23
 8018ffa:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8018ffc:	f107 0308 	add.w	r3, r7, #8
 8019000:	4618      	mov	r0, r3
 8019002:	f7fe fb37 	bl	8017674 <Custom_STM_App_Notification>
                break;
 8019006:	e069      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomGet_Lightning_LogHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8019008:	69bb      	ldr	r3, [r7, #24]
 801900a:	885b      	ldrh	r3, [r3, #2]
 801900c:	b29b      	uxth	r3, r3
 801900e:	461a      	mov	r2, r3
 8019010:	4b6c      	ldr	r3, [pc, #432]	; (80191c4 <Custom_STM_Event_Handler+0x560>)
 8019012:	8c1b      	ldrh	r3, [r3, #32]
 8019014:	3302      	adds	r3, #2
 8019016:	429a      	cmp	r2, r3
 8019018:	d119      	bne.n	801904e <Custom_STM_Event_Handler+0x3ea>
            return_value = SVCCTL_EvtAckFlowEnable;
 801901a:	2301      	movs	r3, #1
 801901c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch (attribute_modified->Attr_Data[0])
 8019020:	69bb      	ldr	r3, [r7, #24]
 8019022:	7a1b      	ldrb	r3, [r3, #8]
 8019024:	2b00      	cmp	r3, #0
 8019026:	d002      	beq.n	801902e <Custom_STM_Event_Handler+0x3ca>
 8019028:	2b01      	cmp	r3, #1
 801902a:	d008      	beq.n	801903e <Custom_STM_Event_Handler+0x3da>
              break;
 801902c:	e056      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_GET_LIGHTNING_LOG_NOTIFY_DISABLED_EVT;
 801902e:	231a      	movs	r3, #26
 8019030:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8019032:	f107 0308 	add.w	r3, r7, #8
 8019036:	4618      	mov	r0, r3
 8019038:	f7fe fb1c 	bl	8017674 <Custom_STM_App_Notification>
                break;
 801903c:	e04e      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_GET_LIGHTNING_LOG_NOTIFY_ENABLED_EVT;
 801903e:	2319      	movs	r3, #25
 8019040:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8019042:	f107 0308 	add.w	r3, r7, #8
 8019046:	4618      	mov	r0, r3
 8019048:	f7fe fb14 	bl	8017674 <Custom_STM_App_Notification>
                break;
 801904c:	e046      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomStrike_DistanceHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 801904e:	69bb      	ldr	r3, [r7, #24]
 8019050:	885b      	ldrh	r3, [r3, #2]
 8019052:	b29b      	uxth	r3, r3
 8019054:	461a      	mov	r2, r3
 8019056:	4b5b      	ldr	r3, [pc, #364]	; (80191c4 <Custom_STM_Event_Handler+0x560>)
 8019058:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801905a:	3302      	adds	r3, #2
 801905c:	429a      	cmp	r2, r3
 801905e:	d119      	bne.n	8019094 <Custom_STM_Event_Handler+0x430>
            return_value = SVCCTL_EvtAckFlowEnable;
 8019060:	2301      	movs	r3, #1
 8019062:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch (attribute_modified->Attr_Data[0])
 8019066:	69bb      	ldr	r3, [r7, #24]
 8019068:	7a1b      	ldrb	r3, [r3, #8]
 801906a:	2b00      	cmp	r3, #0
 801906c:	d002      	beq.n	8019074 <Custom_STM_Event_Handler+0x410>
 801906e:	2b01      	cmp	r3, #1
 8019070:	d008      	beq.n	8019084 <Custom_STM_Event_Handler+0x420>
              break;
 8019072:	e033      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_STRIKE_DISTANCE_NOTIFY_DISABLED_EVT;
 8019074:	231c      	movs	r3, #28
 8019076:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8019078:	f107 0308 	add.w	r3, r7, #8
 801907c:	4618      	mov	r0, r3
 801907e:	f7fe faf9 	bl	8017674 <Custom_STM_App_Notification>
                break;
 8019082:	e02b      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_STRIKE_DISTANCE_NOTIFY_ENABLED_EVT;
 8019084:	231b      	movs	r3, #27
 8019086:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8019088:	f107 0308 	add.w	r3, r7, #8
 801908c:	4618      	mov	r0, r3
 801908e:	f7fe faf1 	bl	8017674 <Custom_STM_App_Notification>
                break;
 8019092:	e023      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomLog_Data_Tx_StatusHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8019094:	69bb      	ldr	r3, [r7, #24]
 8019096:	885b      	ldrh	r3, [r3, #2]
 8019098:	b29b      	uxth	r3, r3
 801909a:	461a      	mov	r2, r3
 801909c:	4b49      	ldr	r3, [pc, #292]	; (80191c4 <Custom_STM_Event_Handler+0x560>)
 801909e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80190a0:	3302      	adds	r3, #2
 80190a2:	429a      	cmp	r2, r3
 80190a4:	f040 8081 	bne.w	80191aa <Custom_STM_Event_Handler+0x546>
            return_value = SVCCTL_EvtAckFlowEnable;
 80190a8:	2301      	movs	r3, #1
 80190aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch (attribute_modified->Attr_Data[0])
 80190ae:	69bb      	ldr	r3, [r7, #24]
 80190b0:	7a1b      	ldrb	r3, [r3, #8]
 80190b2:	2b00      	cmp	r3, #0
 80190b4:	d002      	beq.n	80190bc <Custom_STM_Event_Handler+0x458>
 80190b6:	2b01      	cmp	r3, #1
 80190b8:	d008      	beq.n	80190cc <Custom_STM_Event_Handler+0x468>
              break;
 80190ba:	e00f      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_LOG_DATA_TX_STATUS_NOTIFY_DISABLED_EVT;
 80190bc:	2320      	movs	r3, #32
 80190be:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80190c0:	f107 0308 	add.w	r3, r7, #8
 80190c4:	4618      	mov	r0, r3
 80190c6:	f7fe fad5 	bl	8017674 <Custom_STM_App_Notification>
                break;
 80190ca:	e007      	b.n	80190dc <Custom_STM_Event_Handler+0x478>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_LOG_DATA_TX_STATUS_NOTIFY_ENABLED_EVT;
 80190cc:	231f      	movs	r3, #31
 80190ce:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80190d0:	f107 0308 	add.w	r3, r7, #8
 80190d4:	4618      	mov	r0, r3
 80190d6:	f7fe facd 	bl	8017674 <Custom_STM_App_Notification>
                break;
 80190da:	bf00      	nop
          break;
 80190dc:	e065      	b.n	80191aa <Custom_STM_Event_Handler+0x546>
          read_req = (aci_gatt_read_permit_req_event_rp0*)blecore_evt->data;
 80190de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190e0:	3302      	adds	r3, #2
 80190e2:	623b      	str	r3, [r7, #32]
          if (read_req->Attribute_Handle == (CustomContext.CustomBat_LevelHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80190e4:	6a3b      	ldr	r3, [r7, #32]
 80190e6:	885b      	ldrh	r3, [r3, #2]
 80190e8:	b29b      	uxth	r3, r3
 80190ea:	461a      	mov	r2, r3
 80190ec:	4b35      	ldr	r3, [pc, #212]	; (80191c4 <Custom_STM_Event_Handler+0x560>)
 80190ee:	885b      	ldrh	r3, [r3, #2]
 80190f0:	3301      	adds	r3, #1
 80190f2:	429a      	cmp	r2, r3
 80190f4:	d109      	bne.n	801910a <Custom_STM_Event_Handler+0x4a6>
            return_value = SVCCTL_EvtAckFlowEnable;
 80190f6:	2301      	movs	r3, #1
 80190f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            aci_gatt_allow_read(read_req->Connection_Handle);
 80190fc:	6a3b      	ldr	r3, [r7, #32]
 80190fe:	881b      	ldrh	r3, [r3, #0]
 8019100:	b29b      	uxth	r3, r3
 8019102:	4618      	mov	r0, r3
 8019104:	f7fc fd13 	bl	8015b2e <aci_gatt_allow_read>
          break;
 8019108:	e051      	b.n	80191ae <Custom_STM_Event_Handler+0x54a>
          else if (read_req->Attribute_Handle == (CustomContext.CustomTimeHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 801910a:	6a3b      	ldr	r3, [r7, #32]
 801910c:	885b      	ldrh	r3, [r3, #2]
 801910e:	b29b      	uxth	r3, r3
 8019110:	461a      	mov	r2, r3
 8019112:	4b2c      	ldr	r3, [pc, #176]	; (80191c4 <Custom_STM_Event_Handler+0x560>)
 8019114:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8019116:	3301      	adds	r3, #1
 8019118:	429a      	cmp	r2, r3
 801911a:	d148      	bne.n	80191ae <Custom_STM_Event_Handler+0x54a>
            return_value = SVCCTL_EvtAckFlowEnable;
 801911c:	2301      	movs	r3, #1
 801911e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            aci_gatt_allow_read(read_req->Connection_Handle);
 8019122:	6a3b      	ldr	r3, [r7, #32]
 8019124:	881b      	ldrh	r3, [r3, #0]
 8019126:	b29b      	uxth	r3, r3
 8019128:	4618      	mov	r0, r3
 801912a:	f7fc fd00 	bl	8015b2e <aci_gatt_allow_read>
          break;
 801912e:	e03e      	b.n	80191ae <Custom_STM_Event_Handler+0x54a>
          write_perm_req = (aci_gatt_write_permit_req_event_rp0*)blecore_evt->data;
 8019130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019132:	3302      	adds	r3, #2
 8019134:	61fb      	str	r3, [r7, #28]
          if (write_perm_req->Attribute_Handle == (CustomContext.CustomTimeHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8019136:	69fb      	ldr	r3, [r7, #28]
 8019138:	885b      	ldrh	r3, [r3, #2]
 801913a:	b29b      	uxth	r3, r3
 801913c:	461a      	mov	r2, r3
 801913e:	4b21      	ldr	r3, [pc, #132]	; (80191c4 <Custom_STM_Event_Handler+0x560>)
 8019140:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8019142:	3301      	adds	r3, #1
 8019144:	429a      	cmp	r2, r3
 8019146:	d112      	bne.n	801916e <Custom_STM_Event_Handler+0x50a>
            return_value = SVCCTL_EvtAckFlowEnable;
 8019148:	2301      	movs	r3, #1
 801914a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			Notification.Custom_Evt_Opcode = CUSTOM_STM_TIME_WRITE_NO_RESP_EVT;
 801914e:	231e      	movs	r3, #30
 8019150:	723b      	strb	r3, [r7, #8]
			Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8019152:	69bb      	ldr	r3, [r7, #24]
 8019154:	88db      	ldrh	r3, [r3, #6]
 8019156:	b29b      	uxth	r3, r3
 8019158:	b2db      	uxtb	r3, r3
 801915a:	743b      	strb	r3, [r7, #16]
			Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 801915c:	69bb      	ldr	r3, [r7, #24]
 801915e:	3308      	adds	r3, #8
 8019160:	60fb      	str	r3, [r7, #12]
			Custom_STM_App_Notification(&Notification);
 8019162:	f107 0308 	add.w	r3, r7, #8
 8019166:	4618      	mov	r0, r3
 8019168:	f7fe fa84 	bl	8017674 <Custom_STM_App_Notification>
          break;
 801916c:	e021      	b.n	80191b2 <Custom_STM_Event_Handler+0x54e>
          else if (write_perm_req->Attribute_Handle == (CustomContext.CustomOtaHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 801916e:	69fb      	ldr	r3, [r7, #28]
 8019170:	885b      	ldrh	r3, [r3, #2]
 8019172:	b29b      	uxth	r3, r3
 8019174:	461a      	mov	r2, r3
 8019176:	4b13      	ldr	r3, [pc, #76]	; (80191c4 <Custom_STM_Event_Handler+0x560>)
 8019178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801917a:	3301      	adds	r3, #1
 801917c:	429a      	cmp	r2, r3
 801917e:	d118      	bne.n	80191b2 <Custom_STM_Event_Handler+0x54e>
            return_value = SVCCTL_EvtAckFlowEnable;
 8019180:	2301      	movs	r3, #1
 8019182:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			Notification.Custom_Evt_Opcode = CUSTOM_STM_OTA_WRITE_NO_RESP_EVT;
 8019186:	2321      	movs	r3, #33	; 0x21
 8019188:	723b      	strb	r3, [r7, #8]
			Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 801918a:	69bb      	ldr	r3, [r7, #24]
 801918c:	88db      	ldrh	r3, [r3, #6]
 801918e:	b29b      	uxth	r3, r3
 8019190:	b2db      	uxtb	r3, r3
 8019192:	743b      	strb	r3, [r7, #16]
			Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8019194:	69bb      	ldr	r3, [r7, #24]
 8019196:	3308      	adds	r3, #8
 8019198:	60fb      	str	r3, [r7, #12]
			Custom_STM_App_Notification(&Notification);
 801919a:	f107 0308 	add.w	r3, r7, #8
 801919e:	4618      	mov	r0, r3
 80191a0:	f7fe fa68 	bl	8017674 <Custom_STM_App_Notification>
          break;
 80191a4:	e005      	b.n	80191b2 <Custom_STM_Event_Handler+0x54e>
          break;
 80191a6:	bf00      	nop
 80191a8:	e006      	b.n	80191b8 <Custom_STM_Event_Handler+0x554>
          break;
 80191aa:	bf00      	nop
 80191ac:	e004      	b.n	80191b8 <Custom_STM_Event_Handler+0x554>
          break;
 80191ae:	bf00      	nop
 80191b0:	e002      	b.n	80191b8 <Custom_STM_Event_Handler+0x554>
          break;
 80191b2:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80191b4:	e000      	b.n	80191b8 <Custom_STM_Event_Handler+0x554>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 80191b6:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 80191b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}/* end Custom_STM_Event_Handler */
 80191bc:	4618      	mov	r0, r3
 80191be:	3730      	adds	r7, #48	; 0x30
 80191c0:	46bd      	mov	sp, r7
 80191c2:	bd80      	pop	{r7, pc}
 80191c4:	20000b1c 	.word	0x20000b1c

080191c8 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 80191c8:	b580      	push	{r7, lr}
 80191ca:	b08c      	sub	sp, #48	; 0x30
 80191cc:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80191ce:	2392      	movs	r3, #146	; 0x92
 80191d0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 80191d2:	48d7      	ldr	r0, [pc, #860]	; (8019530 <SVCCTL_InitCustomSvc+0x368>)
 80191d4:	f7fc ffb0 	bl	8016138 <SVCCTL_RegisterSvcHandler>
   *                              = 10
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 10;
 80191d8:	230a      	movs	r3, #10
 80191da:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_BATTERY_SERVICE_UUID(uuid.Char_UUID_128);
 80191dc:	238f      	movs	r3, #143	; 0x8f
 80191de:	713b      	strb	r3, [r7, #4]
 80191e0:	23e5      	movs	r3, #229	; 0xe5
 80191e2:	717b      	strb	r3, [r7, #5]
 80191e4:	23b3      	movs	r3, #179	; 0xb3
 80191e6:	71bb      	strb	r3, [r7, #6]
 80191e8:	23d5      	movs	r3, #213	; 0xd5
 80191ea:	71fb      	strb	r3, [r7, #7]
 80191ec:	232e      	movs	r3, #46	; 0x2e
 80191ee:	723b      	strb	r3, [r7, #8]
 80191f0:	237f      	movs	r3, #127	; 0x7f
 80191f2:	727b      	strb	r3, [r7, #9]
 80191f4:	234a      	movs	r3, #74	; 0x4a
 80191f6:	72bb      	strb	r3, [r7, #10]
 80191f8:	2398      	movs	r3, #152	; 0x98
 80191fa:	72fb      	strb	r3, [r7, #11]
 80191fc:	232a      	movs	r3, #42	; 0x2a
 80191fe:	733b      	strb	r3, [r7, #12]
 8019200:	2348      	movs	r3, #72	; 0x48
 8019202:	737b      	strb	r3, [r7, #13]
 8019204:	237a      	movs	r3, #122	; 0x7a
 8019206:	73bb      	strb	r3, [r7, #14]
 8019208:	23cc      	movs	r3, #204	; 0xcc
 801920a:	73fb      	strb	r3, [r7, #15]
 801920c:	230f      	movs	r3, #15
 801920e:	743b      	strb	r3, [r7, #16]
 8019210:	2318      	movs	r3, #24
 8019212:	747b      	strb	r3, [r7, #17]
 8019214:	2300      	movs	r3, #0
 8019216:	74bb      	strb	r3, [r7, #18]
 8019218:	2300      	movs	r3, #0
 801921a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 801921c:	7dbb      	ldrb	r3, [r7, #22]
 801921e:	1d39      	adds	r1, r7, #4
 8019220:	4ac4      	ldr	r2, [pc, #784]	; (8019534 <SVCCTL_InitCustomSvc+0x36c>)
 8019222:	9200      	str	r2, [sp, #0]
 8019224:	2201      	movs	r2, #1
 8019226:	2002      	movs	r0, #2
 8019228:	f7fc f9fa 	bl	8015620 <aci_gatt_add_service>
 801922c:	4603      	mov	r3, r0
 801922e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  Battery_percentage
   */
  COPY_BATTERY_PERCENTAGE_UUID(uuid.Char_UUID_128);
 8019230:	2319      	movs	r3, #25
 8019232:	713b      	strb	r3, [r7, #4]
 8019234:	23ed      	movs	r3, #237	; 0xed
 8019236:	717b      	strb	r3, [r7, #5]
 8019238:	2382      	movs	r3, #130	; 0x82
 801923a:	71bb      	strb	r3, [r7, #6]
 801923c:	23ae      	movs	r3, #174	; 0xae
 801923e:	71fb      	strb	r3, [r7, #7]
 8019240:	23ed      	movs	r3, #237	; 0xed
 8019242:	723b      	strb	r3, [r7, #8]
 8019244:	2321      	movs	r3, #33	; 0x21
 8019246:	727b      	strb	r3, [r7, #9]
 8019248:	234c      	movs	r3, #76	; 0x4c
 801924a:	72bb      	strb	r3, [r7, #10]
 801924c:	239d      	movs	r3, #157	; 0x9d
 801924e:	72fb      	strb	r3, [r7, #11]
 8019250:	2341      	movs	r3, #65	; 0x41
 8019252:	733b      	strb	r3, [r7, #12]
 8019254:	2345      	movs	r3, #69	; 0x45
 8019256:	737b      	strb	r3, [r7, #13]
 8019258:	2322      	movs	r3, #34	; 0x22
 801925a:	73bb      	strb	r3, [r7, #14]
 801925c:	238e      	movs	r3, #142	; 0x8e
 801925e:	73fb      	strb	r3, [r7, #15]
 8019260:	2319      	movs	r3, #25
 8019262:	743b      	strb	r3, [r7, #16]
 8019264:	232a      	movs	r3, #42	; 0x2a
 8019266:	747b      	strb	r3, [r7, #17]
 8019268:	2300      	movs	r3, #0
 801926a:	74bb      	strb	r3, [r7, #18]
 801926c:	2300      	movs	r3, #0
 801926e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomBatHdle,
 8019270:	4bb0      	ldr	r3, [pc, #704]	; (8019534 <SVCCTL_InitCustomSvc+0x36c>)
 8019272:	8818      	ldrh	r0, [r3, #0]
 8019274:	4bb0      	ldr	r3, [pc, #704]	; (8019538 <SVCCTL_InitCustomSvc+0x370>)
 8019276:	781b      	ldrb	r3, [r3, #0]
 8019278:	b29b      	uxth	r3, r3
 801927a:	1d3a      	adds	r2, r7, #4
 801927c:	49af      	ldr	r1, [pc, #700]	; (801953c <SVCCTL_InitCustomSvc+0x374>)
 801927e:	9105      	str	r1, [sp, #20]
 8019280:	2100      	movs	r1, #0
 8019282:	9104      	str	r1, [sp, #16]
 8019284:	2110      	movs	r1, #16
 8019286:	9103      	str	r1, [sp, #12]
 8019288:	2105      	movs	r1, #5
 801928a:	9102      	str	r1, [sp, #8]
 801928c:	2100      	movs	r1, #0
 801928e:	9101      	str	r1, [sp, #4]
 8019290:	2112      	movs	r1, #18
 8019292:	9100      	str	r1, [sp, #0]
 8019294:	2102      	movs	r1, #2
 8019296:	f7fc fa99 	bl	80157cc <aci_gatt_add_char>
 801929a:	4603      	mov	r3, r0
 801929c:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  EOC
   */
  COPY_EOC_UUID(uuid.Char_UUID_128);
 801929e:	23f0      	movs	r3, #240	; 0xf0
 80192a0:	713b      	strb	r3, [r7, #4]
 80192a2:	2316      	movs	r3, #22
 80192a4:	717b      	strb	r3, [r7, #5]
 80192a6:	2339      	movs	r3, #57	; 0x39
 80192a8:	71bb      	strb	r3, [r7, #6]
 80192aa:	2343      	movs	r3, #67	; 0x43
 80192ac:	71fb      	strb	r3, [r7, #7]
 80192ae:	2338      	movs	r3, #56	; 0x38
 80192b0:	723b      	strb	r3, [r7, #8]
 80192b2:	23f8      	movs	r3, #248	; 0xf8
 80192b4:	727b      	strb	r3, [r7, #9]
 80192b6:	233a      	movs	r3, #58	; 0x3a
 80192b8:	72bb      	strb	r3, [r7, #10]
 80192ba:	2380      	movs	r3, #128	; 0x80
 80192bc:	72fb      	strb	r3, [r7, #11]
 80192be:	23cd      	movs	r3, #205	; 0xcd
 80192c0:	733b      	strb	r3, [r7, #12]
 80192c2:	2346      	movs	r3, #70	; 0x46
 80192c4:	737b      	strb	r3, [r7, #13]
 80192c6:	230a      	movs	r3, #10
 80192c8:	73bb      	strb	r3, [r7, #14]
 80192ca:	2313      	movs	r3, #19
 80192cc:	73fb      	strb	r3, [r7, #15]
 80192ce:	2395      	movs	r3, #149	; 0x95
 80192d0:	743b      	strb	r3, [r7, #16]
 80192d2:	238e      	movs	r3, #142	; 0x8e
 80192d4:	747b      	strb	r3, [r7, #17]
 80192d6:	2364      	movs	r3, #100	; 0x64
 80192d8:	74bb      	strb	r3, [r7, #18]
 80192da:	230e      	movs	r3, #14
 80192dc:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomBatHdle,
 80192de:	4b95      	ldr	r3, [pc, #596]	; (8019534 <SVCCTL_InitCustomSvc+0x36c>)
 80192e0:	8818      	ldrh	r0, [r3, #0]
 80192e2:	4b97      	ldr	r3, [pc, #604]	; (8019540 <SVCCTL_InitCustomSvc+0x378>)
 80192e4:	781b      	ldrb	r3, [r3, #0]
 80192e6:	b29b      	uxth	r3, r3
 80192e8:	1d3a      	adds	r2, r7, #4
 80192ea:	4996      	ldr	r1, [pc, #600]	; (8019544 <SVCCTL_InitCustomSvc+0x37c>)
 80192ec:	9105      	str	r1, [sp, #20]
 80192ee:	2100      	movs	r1, #0
 80192f0:	9104      	str	r1, [sp, #16]
 80192f2:	2110      	movs	r1, #16
 80192f4:	9103      	str	r1, [sp, #12]
 80192f6:	2101      	movs	r1, #1
 80192f8:	9102      	str	r1, [sp, #8]
 80192fa:	2100      	movs	r1, #0
 80192fc:	9101      	str	r1, [sp, #4]
 80192fe:	2110      	movs	r1, #16
 8019300:	9100      	str	r1, [sp, #0]
 8019302:	2102      	movs	r1, #2
 8019304:	f7fc fa62 	bl	80157cc <aci_gatt_add_char>
 8019308:	4603      	mov	r3, r0
 801930a:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char2 */
  /**
   *  PWR_Good
   */
  COPY_PWR_GOOD_UUID(uuid.Char_UUID_128);
 801930c:	2314      	movs	r3, #20
 801930e:	713b      	strb	r3, [r7, #4]
 8019310:	2332      	movs	r3, #50	; 0x32
 8019312:	717b      	strb	r3, [r7, #5]
 8019314:	2348      	movs	r3, #72	; 0x48
 8019316:	71bb      	strb	r3, [r7, #6]
 8019318:	2385      	movs	r3, #133	; 0x85
 801931a:	71fb      	strb	r3, [r7, #7]
 801931c:	23fb      	movs	r3, #251	; 0xfb
 801931e:	723b      	strb	r3, [r7, #8]
 8019320:	2366      	movs	r3, #102	; 0x66
 8019322:	727b      	strb	r3, [r7, #9]
 8019324:	23d9      	movs	r3, #217	; 0xd9
 8019326:	72bb      	strb	r3, [r7, #10]
 8019328:	23ae      	movs	r3, #174	; 0xae
 801932a:	72fb      	strb	r3, [r7, #11]
 801932c:	23e2      	movs	r3, #226	; 0xe2
 801932e:	733b      	strb	r3, [r7, #12]
 8019330:	2345      	movs	r3, #69	; 0x45
 8019332:	737b      	strb	r3, [r7, #13]
 8019334:	23b1      	movs	r3, #177	; 0xb1
 8019336:	73bb      	strb	r3, [r7, #14]
 8019338:	238d      	movs	r3, #141	; 0x8d
 801933a:	73fb      	strb	r3, [r7, #15]
 801933c:	2350      	movs	r3, #80	; 0x50
 801933e:	743b      	strb	r3, [r7, #16]
 8019340:	235a      	movs	r3, #90	; 0x5a
 8019342:	747b      	strb	r3, [r7, #17]
 8019344:	231e      	movs	r3, #30
 8019346:	74bb      	strb	r3, [r7, #18]
 8019348:	234d      	movs	r3, #77	; 0x4d
 801934a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomBatHdle,
 801934c:	4b79      	ldr	r3, [pc, #484]	; (8019534 <SVCCTL_InitCustomSvc+0x36c>)
 801934e:	8818      	ldrh	r0, [r3, #0]
 8019350:	4b7d      	ldr	r3, [pc, #500]	; (8019548 <SVCCTL_InitCustomSvc+0x380>)
 8019352:	781b      	ldrb	r3, [r3, #0]
 8019354:	b29b      	uxth	r3, r3
 8019356:	1d3a      	adds	r2, r7, #4
 8019358:	497c      	ldr	r1, [pc, #496]	; (801954c <SVCCTL_InitCustomSvc+0x384>)
 801935a:	9105      	str	r1, [sp, #20]
 801935c:	2100      	movs	r1, #0
 801935e:	9104      	str	r1, [sp, #16]
 8019360:	2110      	movs	r1, #16
 8019362:	9103      	str	r1, [sp, #12]
 8019364:	2101      	movs	r1, #1
 8019366:	9102      	str	r1, [sp, #8]
 8019368:	2100      	movs	r1, #0
 801936a:	9101      	str	r1, [sp, #4]
 801936c:	2110      	movs	r1, #16
 801936e:	9100      	str	r1, [sp, #0]
 8019370:	2102      	movs	r1, #2
 8019372:	f7fc fa2b 	bl	80157cc <aci_gatt_add_char>
 8019376:	4603      	mov	r3, r0
 8019378:	75fb      	strb	r3, [r7, #23]
   *                              = 16
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 16;
 801937a:	2310      	movs	r3, #16
 801937c:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_GASES_UUID(uuid.Char_UUID_128);
 801937e:	23f6      	movs	r3, #246	; 0xf6
 8019380:	713b      	strb	r3, [r7, #4]
 8019382:	23f4      	movs	r3, #244	; 0xf4
 8019384:	717b      	strb	r3, [r7, #5]
 8019386:	231a      	movs	r3, #26
 8019388:	71bb      	strb	r3, [r7, #6]
 801938a:	23c8      	movs	r3, #200	; 0xc8
 801938c:	71fb      	strb	r3, [r7, #7]
 801938e:	23b2      	movs	r3, #178	; 0xb2
 8019390:	723b      	strb	r3, [r7, #8]
 8019392:	2343      	movs	r3, #67	; 0x43
 8019394:	727b      	strb	r3, [r7, #9]
 8019396:	2331      	movs	r3, #49	; 0x31
 8019398:	72bb      	strb	r3, [r7, #10]
 801939a:	2393      	movs	r3, #147	; 0x93
 801939c:	72fb      	strb	r3, [r7, #11]
 801939e:	23ff      	movs	r3, #255	; 0xff
 80193a0:	733b      	strb	r3, [r7, #12]
 80193a2:	2349      	movs	r3, #73	; 0x49
 80193a4:	737b      	strb	r3, [r7, #13]
 80193a6:	2397      	movs	r3, #151	; 0x97
 80193a8:	73bb      	strb	r3, [r7, #14]
 80193aa:	23be      	movs	r3, #190	; 0xbe
 80193ac:	73fb      	strb	r3, [r7, #15]
 80193ae:	237c      	movs	r3, #124	; 0x7c
 80193b0:	743b      	strb	r3, [r7, #16]
 80193b2:	23fd      	movs	r3, #253	; 0xfd
 80193b4:	747b      	strb	r3, [r7, #17]
 80193b6:	23d8      	movs	r3, #216	; 0xd8
 80193b8:	74bb      	strb	r3, [r7, #18]
 80193ba:	23e9      	movs	r3, #233	; 0xe9
 80193bc:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 80193be:	7dbb      	ldrb	r3, [r7, #22]
 80193c0:	1d39      	adds	r1, r7, #4
 80193c2:	4a63      	ldr	r2, [pc, #396]	; (8019550 <SVCCTL_InitCustomSvc+0x388>)
 80193c4:	9200      	str	r2, [sp, #0]
 80193c6:	2201      	movs	r2, #1
 80193c8:	2002      	movs	r0, #2
 80193ca:	f7fc f929 	bl	8015620 <aci_gatt_add_service>
 80193ce:	4603      	mov	r3, r0
 80193d0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  IAQ_Index
   */
  COPY_IAQ_INDEX_UUID(uuid.Char_UUID_128);
 80193d2:	2353      	movs	r3, #83	; 0x53
 80193d4:	713b      	strb	r3, [r7, #4]
 80193d6:	2334      	movs	r3, #52	; 0x34
 80193d8:	717b      	strb	r3, [r7, #5]
 80193da:	23c7      	movs	r3, #199	; 0xc7
 80193dc:	71bb      	strb	r3, [r7, #6]
 80193de:	238c      	movs	r3, #140	; 0x8c
 80193e0:	71fb      	strb	r3, [r7, #7]
 80193e2:	2343      	movs	r3, #67	; 0x43
 80193e4:	723b      	strb	r3, [r7, #8]
 80193e6:	2378      	movs	r3, #120	; 0x78
 80193e8:	727b      	strb	r3, [r7, #9]
 80193ea:	2323      	movs	r3, #35	; 0x23
 80193ec:	72bb      	strb	r3, [r7, #10]
 80193ee:	23a5      	movs	r3, #165	; 0xa5
 80193f0:	72fb      	strb	r3, [r7, #11]
 80193f2:	230c      	movs	r3, #12
 80193f4:	733b      	strb	r3, [r7, #12]
 80193f6:	2348      	movs	r3, #72	; 0x48
 80193f8:	737b      	strb	r3, [r7, #13]
 80193fa:	2344      	movs	r3, #68	; 0x44
 80193fc:	73bb      	strb	r3, [r7, #14]
 80193fe:	2312      	movs	r3, #18
 8019400:	73fb      	strb	r3, [r7, #15]
 8019402:	23b4      	movs	r3, #180	; 0xb4
 8019404:	743b      	strb	r3, [r7, #16]
 8019406:	2353      	movs	r3, #83	; 0x53
 8019408:	747b      	strb	r3, [r7, #17]
 801940a:	238e      	movs	r3, #142	; 0x8e
 801940c:	74bb      	strb	r3, [r7, #18]
 801940e:	231b      	movs	r3, #27
 8019410:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomGasHdle,
 8019412:	4b48      	ldr	r3, [pc, #288]	; (8019534 <SVCCTL_InitCustomSvc+0x36c>)
 8019414:	8918      	ldrh	r0, [r3, #8]
 8019416:	4b4f      	ldr	r3, [pc, #316]	; (8019554 <SVCCTL_InitCustomSvc+0x38c>)
 8019418:	781b      	ldrb	r3, [r3, #0]
 801941a:	b29b      	uxth	r3, r3
 801941c:	1d3a      	adds	r2, r7, #4
 801941e:	494e      	ldr	r1, [pc, #312]	; (8019558 <SVCCTL_InitCustomSvc+0x390>)
 8019420:	9105      	str	r1, [sp, #20]
 8019422:	2100      	movs	r1, #0
 8019424:	9104      	str	r1, [sp, #16]
 8019426:	2110      	movs	r1, #16
 8019428:	9103      	str	r1, [sp, #12]
 801942a:	2101      	movs	r1, #1
 801942c:	9102      	str	r1, [sp, #8]
 801942e:	2100      	movs	r1, #0
 8019430:	9101      	str	r1, [sp, #4]
 8019432:	2110      	movs	r1, #16
 8019434:	9100      	str	r1, [sp, #0]
 8019436:	2102      	movs	r1, #2
 8019438:	f7fc f9c8 	bl	80157cc <aci_gatt_add_char>
 801943c:	4603      	mov	r3, r0
 801943e:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service2_Char1 */
  /**
   *  Relative_IAQ_Index
   */
  COPY_RELATIVE_IAQ_INDEX_UUID(uuid.Char_UUID_128);
 8019440:	2353      	movs	r3, #83	; 0x53
 8019442:	713b      	strb	r3, [r7, #4]
 8019444:	2334      	movs	r3, #52	; 0x34
 8019446:	717b      	strb	r3, [r7, #5]
 8019448:	23c7      	movs	r3, #199	; 0xc7
 801944a:	71bb      	strb	r3, [r7, #6]
 801944c:	238c      	movs	r3, #140	; 0x8c
 801944e:	71fb      	strb	r3, [r7, #7]
 8019450:	2343      	movs	r3, #67	; 0x43
 8019452:	723b      	strb	r3, [r7, #8]
 8019454:	2378      	movs	r3, #120	; 0x78
 8019456:	727b      	strb	r3, [r7, #9]
 8019458:	2323      	movs	r3, #35	; 0x23
 801945a:	72bb      	strb	r3, [r7, #10]
 801945c:	23a5      	movs	r3, #165	; 0xa5
 801945e:	72fb      	strb	r3, [r7, #11]
 8019460:	230c      	movs	r3, #12
 8019462:	733b      	strb	r3, [r7, #12]
 8019464:	2348      	movs	r3, #72	; 0x48
 8019466:	737b      	strb	r3, [r7, #13]
 8019468:	2344      	movs	r3, #68	; 0x44
 801946a:	73bb      	strb	r3, [r7, #14]
 801946c:	2312      	movs	r3, #18
 801946e:	73fb      	strb	r3, [r7, #15]
 8019470:	23b4      	movs	r3, #180	; 0xb4
 8019472:	743b      	strb	r3, [r7, #16]
 8019474:	2353      	movs	r3, #83	; 0x53
 8019476:	747b      	strb	r3, [r7, #17]
 8019478:	238e      	movs	r3, #142	; 0x8e
 801947a:	74bb      	strb	r3, [r7, #18]
 801947c:	231c      	movs	r3, #28
 801947e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomGasHdle,
 8019480:	4b2c      	ldr	r3, [pc, #176]	; (8019534 <SVCCTL_InitCustomSvc+0x36c>)
 8019482:	8918      	ldrh	r0, [r3, #8]
 8019484:	4b35      	ldr	r3, [pc, #212]	; (801955c <SVCCTL_InitCustomSvc+0x394>)
 8019486:	781b      	ldrb	r3, [r3, #0]
 8019488:	b29b      	uxth	r3, r3
 801948a:	1d3a      	adds	r2, r7, #4
 801948c:	4934      	ldr	r1, [pc, #208]	; (8019560 <SVCCTL_InitCustomSvc+0x398>)
 801948e:	9105      	str	r1, [sp, #20]
 8019490:	2100      	movs	r1, #0
 8019492:	9104      	str	r1, [sp, #16]
 8019494:	2110      	movs	r1, #16
 8019496:	9103      	str	r1, [sp, #12]
 8019498:	2101      	movs	r1, #1
 801949a:	9102      	str	r1, [sp, #8]
 801949c:	2100      	movs	r1, #0
 801949e:	9101      	str	r1, [sp, #4]
 80194a0:	2110      	movs	r1, #16
 80194a2:	9100      	str	r1, [sp, #0]
 80194a4:	2102      	movs	r1, #2
 80194a6:	f7fc f991 	bl	80157cc <aci_gatt_add_char>
 80194aa:	4603      	mov	r3, r0
 80194ac:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service2_Char2 */
  /**
   *  TVOC
   */
  COPY_TVOC_UUID(uuid.Char_UUID_128);
 80194ae:	2353      	movs	r3, #83	; 0x53
 80194b0:	713b      	strb	r3, [r7, #4]
 80194b2:	2334      	movs	r3, #52	; 0x34
 80194b4:	717b      	strb	r3, [r7, #5]
 80194b6:	23c7      	movs	r3, #199	; 0xc7
 80194b8:	71bb      	strb	r3, [r7, #6]
 80194ba:	238c      	movs	r3, #140	; 0x8c
 80194bc:	71fb      	strb	r3, [r7, #7]
 80194be:	2343      	movs	r3, #67	; 0x43
 80194c0:	723b      	strb	r3, [r7, #8]
 80194c2:	2378      	movs	r3, #120	; 0x78
 80194c4:	727b      	strb	r3, [r7, #9]
 80194c6:	2323      	movs	r3, #35	; 0x23
 80194c8:	72bb      	strb	r3, [r7, #10]
 80194ca:	23a5      	movs	r3, #165	; 0xa5
 80194cc:	72fb      	strb	r3, [r7, #11]
 80194ce:	230c      	movs	r3, #12
 80194d0:	733b      	strb	r3, [r7, #12]
 80194d2:	2348      	movs	r3, #72	; 0x48
 80194d4:	737b      	strb	r3, [r7, #13]
 80194d6:	2344      	movs	r3, #68	; 0x44
 80194d8:	73bb      	strb	r3, [r7, #14]
 80194da:	2312      	movs	r3, #18
 80194dc:	73fb      	strb	r3, [r7, #15]
 80194de:	23b4      	movs	r3, #180	; 0xb4
 80194e0:	743b      	strb	r3, [r7, #16]
 80194e2:	2353      	movs	r3, #83	; 0x53
 80194e4:	747b      	strb	r3, [r7, #17]
 80194e6:	238e      	movs	r3, #142	; 0x8e
 80194e8:	74bb      	strb	r3, [r7, #18]
 80194ea:	231d      	movs	r3, #29
 80194ec:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomGasHdle,
 80194ee:	4b11      	ldr	r3, [pc, #68]	; (8019534 <SVCCTL_InitCustomSvc+0x36c>)
 80194f0:	8918      	ldrh	r0, [r3, #8]
 80194f2:	4b1c      	ldr	r3, [pc, #112]	; (8019564 <SVCCTL_InitCustomSvc+0x39c>)
 80194f4:	781b      	ldrb	r3, [r3, #0]
 80194f6:	b29b      	uxth	r3, r3
 80194f8:	1d3a      	adds	r2, r7, #4
 80194fa:	491b      	ldr	r1, [pc, #108]	; (8019568 <SVCCTL_InitCustomSvc+0x3a0>)
 80194fc:	9105      	str	r1, [sp, #20]
 80194fe:	2100      	movs	r1, #0
 8019500:	9104      	str	r1, [sp, #16]
 8019502:	2110      	movs	r1, #16
 8019504:	9103      	str	r1, [sp, #12]
 8019506:	2101      	movs	r1, #1
 8019508:	9102      	str	r1, [sp, #8]
 801950a:	2100      	movs	r1, #0
 801950c:	9101      	str	r1, [sp, #4]
 801950e:	2110      	movs	r1, #16
 8019510:	9100      	str	r1, [sp, #0]
 8019512:	2102      	movs	r1, #2
 8019514:	f7fc f95a 	bl	80157cc <aci_gatt_add_char>
 8019518:	4603      	mov	r3, r0
 801951a:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service2_Char3 */
  /**
   *  ETOH
   */
  COPY_ETOH_UUID(uuid.Char_UUID_128);
 801951c:	2353      	movs	r3, #83	; 0x53
 801951e:	713b      	strb	r3, [r7, #4]
 8019520:	2334      	movs	r3, #52	; 0x34
 8019522:	717b      	strb	r3, [r7, #5]
 8019524:	23c7      	movs	r3, #199	; 0xc7
 8019526:	71bb      	strb	r3, [r7, #6]
 8019528:	238c      	movs	r3, #140	; 0x8c
 801952a:	71fb      	strb	r3, [r7, #7]
 801952c:	e01e      	b.n	801956c <SVCCTL_InitCustomSvc+0x3a4>
 801952e:	bf00      	nop
 8019530:	08018c65 	.word	0x08018c65
 8019534:	20000b1c 	.word	0x20000b1c
 8019538:	200000d8 	.word	0x200000d8
 801953c:	20000b1e 	.word	0x20000b1e
 8019540:	200000d9 	.word	0x200000d9
 8019544:	20000b20 	.word	0x20000b20
 8019548:	200000da 	.word	0x200000da
 801954c:	20000b22 	.word	0x20000b22
 8019550:	20000b24 	.word	0x20000b24
 8019554:	200000db 	.word	0x200000db
 8019558:	20000b26 	.word	0x20000b26
 801955c:	200000dc 	.word	0x200000dc
 8019560:	20000b28 	.word	0x20000b28
 8019564:	200000dd 	.word	0x200000dd
 8019568:	20000b2a 	.word	0x20000b2a
 801956c:	2343      	movs	r3, #67	; 0x43
 801956e:	723b      	strb	r3, [r7, #8]
 8019570:	2378      	movs	r3, #120	; 0x78
 8019572:	727b      	strb	r3, [r7, #9]
 8019574:	2323      	movs	r3, #35	; 0x23
 8019576:	72bb      	strb	r3, [r7, #10]
 8019578:	23a5      	movs	r3, #165	; 0xa5
 801957a:	72fb      	strb	r3, [r7, #11]
 801957c:	230c      	movs	r3, #12
 801957e:	733b      	strb	r3, [r7, #12]
 8019580:	2348      	movs	r3, #72	; 0x48
 8019582:	737b      	strb	r3, [r7, #13]
 8019584:	2344      	movs	r3, #68	; 0x44
 8019586:	73bb      	strb	r3, [r7, #14]
 8019588:	2312      	movs	r3, #18
 801958a:	73fb      	strb	r3, [r7, #15]
 801958c:	23b4      	movs	r3, #180	; 0xb4
 801958e:	743b      	strb	r3, [r7, #16]
 8019590:	2353      	movs	r3, #83	; 0x53
 8019592:	747b      	strb	r3, [r7, #17]
 8019594:	238e      	movs	r3, #142	; 0x8e
 8019596:	74bb      	strb	r3, [r7, #18]
 8019598:	231e      	movs	r3, #30
 801959a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomGasHdle,
 801959c:	4bd4      	ldr	r3, [pc, #848]	; (80198f0 <SVCCTL_InitCustomSvc+0x728>)
 801959e:	8918      	ldrh	r0, [r3, #8]
 80195a0:	4bd4      	ldr	r3, [pc, #848]	; (80198f4 <SVCCTL_InitCustomSvc+0x72c>)
 80195a2:	781b      	ldrb	r3, [r3, #0]
 80195a4:	b29b      	uxth	r3, r3
 80195a6:	1d3a      	adds	r2, r7, #4
 80195a8:	49d3      	ldr	r1, [pc, #844]	; (80198f8 <SVCCTL_InitCustomSvc+0x730>)
 80195aa:	9105      	str	r1, [sp, #20]
 80195ac:	2100      	movs	r1, #0
 80195ae:	9104      	str	r1, [sp, #16]
 80195b0:	2110      	movs	r1, #16
 80195b2:	9103      	str	r1, [sp, #12]
 80195b4:	2101      	movs	r1, #1
 80195b6:	9102      	str	r1, [sp, #8]
 80195b8:	2100      	movs	r1, #0
 80195ba:	9101      	str	r1, [sp, #4]
 80195bc:	2110      	movs	r1, #16
 80195be:	9100      	str	r1, [sp, #0]
 80195c0:	2102      	movs	r1, #2
 80195c2:	f7fc f903 	bl	80157cc <aci_gatt_add_char>
 80195c6:	4603      	mov	r3, r0
 80195c8:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service2_Char4 */
  /**
   *  ECO2
   */
  COPY_ECO2_UUID(uuid.Char_UUID_128);
 80195ca:	234c      	movs	r3, #76	; 0x4c
 80195cc:	713b      	strb	r3, [r7, #4]
 80195ce:	23a9      	movs	r3, #169	; 0xa9
 80195d0:	717b      	strb	r3, [r7, #5]
 80195d2:	2374      	movs	r3, #116	; 0x74
 80195d4:	71bb      	strb	r3, [r7, #6]
 80195d6:	23e8      	movs	r3, #232	; 0xe8
 80195d8:	71fb      	strb	r3, [r7, #7]
 80195da:	23f2      	movs	r3, #242	; 0xf2
 80195dc:	723b      	strb	r3, [r7, #8]
 80195de:	23db      	movs	r3, #219	; 0xdb
 80195e0:	727b      	strb	r3, [r7, #9]
 80195e2:	23c5      	movs	r3, #197	; 0xc5
 80195e4:	72bb      	strb	r3, [r7, #10]
 80195e6:	238a      	movs	r3, #138	; 0x8a
 80195e8:	72fb      	strb	r3, [r7, #11]
 80195ea:	234e      	movs	r3, #78	; 0x4e
 80195ec:	733b      	strb	r3, [r7, #12]
 80195ee:	234b      	movs	r3, #75	; 0x4b
 80195f0:	737b      	strb	r3, [r7, #13]
 80195f2:	2330      	movs	r3, #48	; 0x30
 80195f4:	73bb      	strb	r3, [r7, #14]
 80195f6:	239e      	movs	r3, #158	; 0x9e
 80195f8:	73fb      	strb	r3, [r7, #15]
 80195fa:	23ab      	movs	r3, #171	; 0xab
 80195fc:	743b      	strb	r3, [r7, #16]
 80195fe:	23be      	movs	r3, #190	; 0xbe
 8019600:	747b      	strb	r3, [r7, #17]
 8019602:	23ca      	movs	r3, #202	; 0xca
 8019604:	74bb      	strb	r3, [r7, #18]
 8019606:	2355      	movs	r3, #85	; 0x55
 8019608:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomGasHdle,
 801960a:	4bb9      	ldr	r3, [pc, #740]	; (80198f0 <SVCCTL_InitCustomSvc+0x728>)
 801960c:	8918      	ldrh	r0, [r3, #8]
 801960e:	4bbb      	ldr	r3, [pc, #748]	; (80198fc <SVCCTL_InitCustomSvc+0x734>)
 8019610:	781b      	ldrb	r3, [r3, #0]
 8019612:	b29b      	uxth	r3, r3
 8019614:	1d3a      	adds	r2, r7, #4
 8019616:	49ba      	ldr	r1, [pc, #744]	; (8019900 <SVCCTL_InitCustomSvc+0x738>)
 8019618:	9105      	str	r1, [sp, #20]
 801961a:	2100      	movs	r1, #0
 801961c:	9104      	str	r1, [sp, #16]
 801961e:	2110      	movs	r1, #16
 8019620:	9103      	str	r1, [sp, #12]
 8019622:	2101      	movs	r1, #1
 8019624:	9102      	str	r1, [sp, #8]
 8019626:	2100      	movs	r1, #0
 8019628:	9101      	str	r1, [sp, #4]
 801962a:	2110      	movs	r1, #16
 801962c:	9100      	str	r1, [sp, #0]
 801962e:	2102      	movs	r1, #2
 8019630:	f7fc f8cc 	bl	80157cc <aci_gatt_add_char>
 8019634:	4603      	mov	r3, r0
 8019636:	75fb      	strb	r3, [r7, #23]
   *                              = 13
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 13;
 8019638:	230d      	movs	r3, #13
 801963a:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_ENVIROMENT_UUID(uuid.Char_UUID_128);
 801963c:	23f6      	movs	r3, #246	; 0xf6
 801963e:	713b      	strb	r3, [r7, #4]
 8019640:	23f4      	movs	r3, #244	; 0xf4
 8019642:	717b      	strb	r3, [r7, #5]
 8019644:	231a      	movs	r3, #26
 8019646:	71bb      	strb	r3, [r7, #6]
 8019648:	23c8      	movs	r3, #200	; 0xc8
 801964a:	71fb      	strb	r3, [r7, #7]
 801964c:	23b2      	movs	r3, #178	; 0xb2
 801964e:	723b      	strb	r3, [r7, #8]
 8019650:	2343      	movs	r3, #67	; 0x43
 8019652:	727b      	strb	r3, [r7, #9]
 8019654:	2331      	movs	r3, #49	; 0x31
 8019656:	72bb      	strb	r3, [r7, #10]
 8019658:	2393      	movs	r3, #147	; 0x93
 801965a:	72fb      	strb	r3, [r7, #11]
 801965c:	23ff      	movs	r3, #255	; 0xff
 801965e:	733b      	strb	r3, [r7, #12]
 8019660:	2349      	movs	r3, #73	; 0x49
 8019662:	737b      	strb	r3, [r7, #13]
 8019664:	2397      	movs	r3, #151	; 0x97
 8019666:	73bb      	strb	r3, [r7, #14]
 8019668:	23be      	movs	r3, #190	; 0xbe
 801966a:	73fb      	strb	r3, [r7, #15]
 801966c:	237c      	movs	r3, #124	; 0x7c
 801966e:	743b      	strb	r3, [r7, #16]
 8019670:	23fd      	movs	r3, #253	; 0xfd
 8019672:	747b      	strb	r3, [r7, #17]
 8019674:	23d8      	movs	r3, #216	; 0xd8
 8019676:	74bb      	strb	r3, [r7, #18]
 8019678:	23e9      	movs	r3, #233	; 0xe9
 801967a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 801967c:	7dbb      	ldrb	r3, [r7, #22]
 801967e:	1d39      	adds	r1, r7, #4
 8019680:	4aa0      	ldr	r2, [pc, #640]	; (8019904 <SVCCTL_InitCustomSvc+0x73c>)
 8019682:	9200      	str	r2, [sp, #0]
 8019684:	2201      	movs	r2, #1
 8019686:	2002      	movs	r0, #2
 8019688:	f7fb ffca 	bl	8015620 <aci_gatt_add_service>
 801968c:	4603      	mov	r3, r0
 801968e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  Temperature
   */
  COPY_TEMPERATURE_UUID(uuid.Char_UUID_128);
 8019690:	23cb      	movs	r3, #203	; 0xcb
 8019692:	713b      	strb	r3, [r7, #4]
 8019694:	2307      	movs	r3, #7
 8019696:	717b      	strb	r3, [r7, #5]
 8019698:	2354      	movs	r3, #84	; 0x54
 801969a:	71bb      	strb	r3, [r7, #6]
 801969c:	23ab      	movs	r3, #171	; 0xab
 801969e:	71fb      	strb	r3, [r7, #7]
 80196a0:	2318      	movs	r3, #24
 80196a2:	723b      	strb	r3, [r7, #8]
 80196a4:	2367      	movs	r3, #103	; 0x67
 80196a6:	727b      	strb	r3, [r7, #9]
 80196a8:	23a2      	movs	r3, #162	; 0xa2
 80196aa:	72bb      	strb	r3, [r7, #10]
 80196ac:	2386      	movs	r3, #134	; 0x86
 80196ae:	72fb      	strb	r3, [r7, #11]
 80196b0:	2379      	movs	r3, #121	; 0x79
 80196b2:	733b      	strb	r3, [r7, #12]
 80196b4:	2343      	movs	r3, #67	; 0x43
 80196b6:	737b      	strb	r3, [r7, #13]
 80196b8:	23ac      	movs	r3, #172	; 0xac
 80196ba:	73bb      	strb	r3, [r7, #14]
 80196bc:	232c      	movs	r3, #44	; 0x2c
 80196be:	73fb      	strb	r3, [r7, #15]
 80196c0:	23cc      	movs	r3, #204	; 0xcc
 80196c2:	743b      	strb	r3, [r7, #16]
 80196c4:	2377      	movs	r3, #119	; 0x77
 80196c6:	747b      	strb	r3, [r7, #17]
 80196c8:	233b      	movs	r3, #59	; 0x3b
 80196ca:	74bb      	strb	r3, [r7, #18]
 80196cc:	230e      	movs	r3, #14
 80196ce:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomEnvHdle,
 80196d0:	4b87      	ldr	r3, [pc, #540]	; (80198f0 <SVCCTL_InitCustomSvc+0x728>)
 80196d2:	8a98      	ldrh	r0, [r3, #20]
 80196d4:	4b8c      	ldr	r3, [pc, #560]	; (8019908 <SVCCTL_InitCustomSvc+0x740>)
 80196d6:	781b      	ldrb	r3, [r3, #0]
 80196d8:	b29b      	uxth	r3, r3
 80196da:	1d3a      	adds	r2, r7, #4
 80196dc:	498b      	ldr	r1, [pc, #556]	; (801990c <SVCCTL_InitCustomSvc+0x744>)
 80196de:	9105      	str	r1, [sp, #20]
 80196e0:	2100      	movs	r1, #0
 80196e2:	9104      	str	r1, [sp, #16]
 80196e4:	2110      	movs	r1, #16
 80196e6:	9103      	str	r1, [sp, #12]
 80196e8:	2101      	movs	r1, #1
 80196ea:	9102      	str	r1, [sp, #8]
 80196ec:	2100      	movs	r1, #0
 80196ee:	9101      	str	r1, [sp, #4]
 80196f0:	2110      	movs	r1, #16
 80196f2:	9100      	str	r1, [sp, #0]
 80196f4:	2102      	movs	r1, #2
 80196f6:	f7fc f869 	bl	80157cc <aci_gatt_add_char>
 80196fa:	4603      	mov	r3, r0
 80196fc:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service3_Char1 */
  /**
   *  Humidity
   */
  COPY_HUMIDITY_UUID(uuid.Char_UUID_128);
 80196fe:	23ba      	movs	r3, #186	; 0xba
 8019700:	713b      	strb	r3, [r7, #4]
 8019702:	23cb      	movs	r3, #203	; 0xcb
 8019704:	717b      	strb	r3, [r7, #5]
 8019706:	2354      	movs	r3, #84	; 0x54
 8019708:	71bb      	strb	r3, [r7, #6]
 801970a:	2310      	movs	r3, #16
 801970c:	71fb      	strb	r3, [r7, #7]
 801970e:	23ee      	movs	r3, #238	; 0xee
 8019710:	723b      	strb	r3, [r7, #8]
 8019712:	2319      	movs	r3, #25
 8019714:	727b      	strb	r3, [r7, #9]
 8019716:	2333      	movs	r3, #51	; 0x33
 8019718:	72bb      	strb	r3, [r7, #10]
 801971a:	239f      	movs	r3, #159	; 0x9f
 801971c:	72fb      	strb	r3, [r7, #11]
 801971e:	23c9      	movs	r3, #201	; 0xc9
 8019720:	733b      	strb	r3, [r7, #12]
 8019722:	2345      	movs	r3, #69	; 0x45
 8019724:	737b      	strb	r3, [r7, #13]
 8019726:	2359      	movs	r3, #89	; 0x59
 8019728:	73bb      	strb	r3, [r7, #14]
 801972a:	2392      	movs	r3, #146	; 0x92
 801972c:	73fb      	strb	r3, [r7, #15]
 801972e:	232b      	movs	r3, #43	; 0x2b
 8019730:	743b      	strb	r3, [r7, #16]
 8019732:	23f5      	movs	r3, #245	; 0xf5
 8019734:	747b      	strb	r3, [r7, #17]
 8019736:	231d      	movs	r3, #29
 8019738:	74bb      	strb	r3, [r7, #18]
 801973a:	2356      	movs	r3, #86	; 0x56
 801973c:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomEnvHdle,
 801973e:	4b6c      	ldr	r3, [pc, #432]	; (80198f0 <SVCCTL_InitCustomSvc+0x728>)
 8019740:	8a98      	ldrh	r0, [r3, #20]
 8019742:	4b73      	ldr	r3, [pc, #460]	; (8019910 <SVCCTL_InitCustomSvc+0x748>)
 8019744:	781b      	ldrb	r3, [r3, #0]
 8019746:	b29b      	uxth	r3, r3
 8019748:	1d3a      	adds	r2, r7, #4
 801974a:	4972      	ldr	r1, [pc, #456]	; (8019914 <SVCCTL_InitCustomSvc+0x74c>)
 801974c:	9105      	str	r1, [sp, #20]
 801974e:	2100      	movs	r1, #0
 8019750:	9104      	str	r1, [sp, #16]
 8019752:	2110      	movs	r1, #16
 8019754:	9103      	str	r1, [sp, #12]
 8019756:	2101      	movs	r1, #1
 8019758:	9102      	str	r1, [sp, #8]
 801975a:	2100      	movs	r1, #0
 801975c:	9101      	str	r1, [sp, #4]
 801975e:	2110      	movs	r1, #16
 8019760:	9100      	str	r1, [sp, #0]
 8019762:	2102      	movs	r1, #2
 8019764:	f7fc f832 	bl	80157cc <aci_gatt_add_char>
 8019768:	4603      	mov	r3, r0
 801976a:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service3_Char2 */
  /**
   *  Pressure
   */
  COPY_PRESSURE_UUID(uuid.Char_UUID_128);
 801976c:	2306      	movs	r3, #6
 801976e:	713b      	strb	r3, [r7, #4]
 8019770:	239a      	movs	r3, #154	; 0x9a
 8019772:	717b      	strb	r3, [r7, #5]
 8019774:	238b      	movs	r3, #139	; 0x8b
 8019776:	71bb      	strb	r3, [r7, #6]
 8019778:	2341      	movs	r3, #65	; 0x41
 801977a:	71fb      	strb	r3, [r7, #7]
 801977c:	236f      	movs	r3, #111	; 0x6f
 801977e:	723b      	strb	r3, [r7, #8]
 8019780:	2367      	movs	r3, #103	; 0x67
 8019782:	727b      	strb	r3, [r7, #9]
 8019784:	233e      	movs	r3, #62	; 0x3e
 8019786:	72bb      	strb	r3, [r7, #10]
 8019788:	23a3      	movs	r3, #163	; 0xa3
 801978a:	72fb      	strb	r3, [r7, #11]
 801978c:	2336      	movs	r3, #54	; 0x36
 801978e:	733b      	strb	r3, [r7, #12]
 8019790:	2341      	movs	r3, #65	; 0x41
 8019792:	737b      	strb	r3, [r7, #13]
 8019794:	2333      	movs	r3, #51	; 0x33
 8019796:	73bb      	strb	r3, [r7, #14]
 8019798:	2350      	movs	r3, #80	; 0x50
 801979a:	73fb      	strb	r3, [r7, #15]
 801979c:	23ef      	movs	r3, #239	; 0xef
 801979e:	743b      	strb	r3, [r7, #16]
 80197a0:	231b      	movs	r3, #27
 80197a2:	747b      	strb	r3, [r7, #17]
 80197a4:	238e      	movs	r3, #142	; 0x8e
 80197a6:	74bb      	strb	r3, [r7, #18]
 80197a8:	23c2      	movs	r3, #194	; 0xc2
 80197aa:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomEnvHdle,
 80197ac:	4b50      	ldr	r3, [pc, #320]	; (80198f0 <SVCCTL_InitCustomSvc+0x728>)
 80197ae:	8a98      	ldrh	r0, [r3, #20]
 80197b0:	4b59      	ldr	r3, [pc, #356]	; (8019918 <SVCCTL_InitCustomSvc+0x750>)
 80197b2:	781b      	ldrb	r3, [r3, #0]
 80197b4:	b29b      	uxth	r3, r3
 80197b6:	1d3a      	adds	r2, r7, #4
 80197b8:	4958      	ldr	r1, [pc, #352]	; (801991c <SVCCTL_InitCustomSvc+0x754>)
 80197ba:	9105      	str	r1, [sp, #20]
 80197bc:	2100      	movs	r1, #0
 80197be:	9104      	str	r1, [sp, #16]
 80197c0:	2110      	movs	r1, #16
 80197c2:	9103      	str	r1, [sp, #12]
 80197c4:	2101      	movs	r1, #1
 80197c6:	9102      	str	r1, [sp, #8]
 80197c8:	2100      	movs	r1, #0
 80197ca:	9101      	str	r1, [sp, #4]
 80197cc:	2110      	movs	r1, #16
 80197ce:	9100      	str	r1, [sp, #0]
 80197d0:	2102      	movs	r1, #2
 80197d2:	f7fb fffb 	bl	80157cc <aci_gatt_add_char>
 80197d6:	4603      	mov	r3, r0
 80197d8:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service3_Char3 */
  /**
   *  Get_ENV_log
   */
  COPY_GET_ENV_LOG_UUID(uuid.Char_UUID_128);
 80197da:	231c      	movs	r3, #28
 80197dc:	713b      	strb	r3, [r7, #4]
 80197de:	2336      	movs	r3, #54	; 0x36
 80197e0:	717b      	strb	r3, [r7, #5]
 80197e2:	232b      	movs	r3, #43	; 0x2b
 80197e4:	71bb      	strb	r3, [r7, #6]
 80197e6:	2365      	movs	r3, #101	; 0x65
 80197e8:	71fb      	strb	r3, [r7, #7]
 80197ea:	233f      	movs	r3, #63	; 0x3f
 80197ec:	723b      	strb	r3, [r7, #8]
 80197ee:	23c9      	movs	r3, #201	; 0xc9
 80197f0:	727b      	strb	r3, [r7, #9]
 80197f2:	23c7      	movs	r3, #199	; 0xc7
 80197f4:	72bb      	strb	r3, [r7, #10]
 80197f6:	23b9      	movs	r3, #185	; 0xb9
 80197f8:	72fb      	strb	r3, [r7, #11]
 80197fa:	23f5      	movs	r3, #245	; 0xf5
 80197fc:	733b      	strb	r3, [r7, #12]
 80197fe:	234f      	movs	r3, #79	; 0x4f
 8019800:	737b      	strb	r3, [r7, #13]
 8019802:	2391      	movs	r3, #145	; 0x91
 8019804:	73bb      	strb	r3, [r7, #14]
 8019806:	23c7      	movs	r3, #199	; 0xc7
 8019808:	73fb      	strb	r3, [r7, #15]
 801980a:	2360      	movs	r3, #96	; 0x60
 801980c:	743b      	strb	r3, [r7, #16]
 801980e:	23f3      	movs	r3, #243	; 0xf3
 8019810:	747b      	strb	r3, [r7, #17]
 8019812:	23be      	movs	r3, #190	; 0xbe
 8019814:	74bb      	strb	r3, [r7, #18]
 8019816:	2354      	movs	r3, #84	; 0x54
 8019818:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomEnvHdle,
 801981a:	4b35      	ldr	r3, [pc, #212]	; (80198f0 <SVCCTL_InitCustomSvc+0x728>)
 801981c:	8a98      	ldrh	r0, [r3, #20]
 801981e:	4b40      	ldr	r3, [pc, #256]	; (8019920 <SVCCTL_InitCustomSvc+0x758>)
 8019820:	781b      	ldrb	r3, [r3, #0]
 8019822:	b29b      	uxth	r3, r3
 8019824:	1d3a      	adds	r2, r7, #4
 8019826:	493f      	ldr	r1, [pc, #252]	; (8019924 <SVCCTL_InitCustomSvc+0x75c>)
 8019828:	9105      	str	r1, [sp, #20]
 801982a:	2101      	movs	r1, #1
 801982c:	9104      	str	r1, [sp, #16]
 801982e:	2110      	movs	r1, #16
 8019830:	9103      	str	r1, [sp, #12]
 8019832:	2101      	movs	r1, #1
 8019834:	9102      	str	r1, [sp, #8]
 8019836:	2100      	movs	r1, #0
 8019838:	9101      	str	r1, [sp, #4]
 801983a:	2110      	movs	r1, #16
 801983c:	9100      	str	r1, [sp, #0]
 801983e:	2102      	movs	r1, #2
 8019840:	f7fb ffc4 	bl	80157cc <aci_gatt_add_char>
 8019844:	4603      	mov	r3, r0
 8019846:	75fb      	strb	r3, [r7, #23]
   *                              = 7
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 7;
 8019848:	2307      	movs	r3, #7
 801984a:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_LIGHTINING_STRIKE_UUID(uuid.Char_UUID_128);
 801984c:	23ee      	movs	r3, #238	; 0xee
 801984e:	713b      	strb	r3, [r7, #4]
 8019850:	23ea      	movs	r3, #234	; 0xea
 8019852:	717b      	strb	r3, [r7, #5]
 8019854:	2327      	movs	r3, #39	; 0x27
 8019856:	71bb      	strb	r3, [r7, #6]
 8019858:	23d7      	movs	r3, #215	; 0xd7
 801985a:	71fb      	strb	r3, [r7, #7]
 801985c:	2302      	movs	r3, #2
 801985e:	723b      	strb	r3, [r7, #8]
 8019860:	23ae      	movs	r3, #174	; 0xae
 8019862:	727b      	strb	r3, [r7, #9]
 8019864:	23aa      	movs	r3, #170	; 0xaa
 8019866:	72bb      	strb	r3, [r7, #10]
 8019868:	23b6      	movs	r3, #182	; 0xb6
 801986a:	72fb      	strb	r3, [r7, #11]
 801986c:	23bb      	movs	r3, #187	; 0xbb
 801986e:	733b      	strb	r3, [r7, #12]
 8019870:	234b      	movs	r3, #75	; 0x4b
 8019872:	737b      	strb	r3, [r7, #13]
 8019874:	23f0      	movs	r3, #240	; 0xf0
 8019876:	73bb      	strb	r3, [r7, #14]
 8019878:	23ef      	movs	r3, #239	; 0xef
 801987a:	73fb      	strb	r3, [r7, #15]
 801987c:	23cc      	movs	r3, #204	; 0xcc
 801987e:	743b      	strb	r3, [r7, #16]
 8019880:	23f8      	movs	r3, #248	; 0xf8
 8019882:	747b      	strb	r3, [r7, #17]
 8019884:	2351      	movs	r3, #81	; 0x51
 8019886:	74bb      	strb	r3, [r7, #18]
 8019888:	23e2      	movs	r3, #226	; 0xe2
 801988a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 801988c:	7dbb      	ldrb	r3, [r7, #22]
 801988e:	1d39      	adds	r1, r7, #4
 8019890:	4a25      	ldr	r2, [pc, #148]	; (8019928 <SVCCTL_InitCustomSvc+0x760>)
 8019892:	9200      	str	r2, [sp, #0]
 8019894:	2201      	movs	r2, #1
 8019896:	2002      	movs	r0, #2
 8019898:	f7fb fec2 	bl	8015620 <aci_gatt_add_service>
 801989c:	4603      	mov	r3, r0
 801989e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  Get_Lightning_log
   */
  COPY_GET_LIGHTNING_LOG_UUID(uuid.Char_UUID_128);
 80198a0:	23b8      	movs	r3, #184	; 0xb8
 80198a2:	713b      	strb	r3, [r7, #4]
 80198a4:	2326      	movs	r3, #38	; 0x26
 80198a6:	717b      	strb	r3, [r7, #5]
 80198a8:	231d      	movs	r3, #29
 80198aa:	71bb      	strb	r3, [r7, #6]
 80198ac:	2339      	movs	r3, #57	; 0x39
 80198ae:	71fb      	strb	r3, [r7, #7]
 80198b0:	23dc      	movs	r3, #220	; 0xdc
 80198b2:	723b      	strb	r3, [r7, #8]
 80198b4:	23f7      	movs	r3, #247	; 0xf7
 80198b6:	727b      	strb	r3, [r7, #9]
 80198b8:	2359      	movs	r3, #89	; 0x59
 80198ba:	72bb      	strb	r3, [r7, #10]
 80198bc:	2388      	movs	r3, #136	; 0x88
 80198be:	72fb      	strb	r3, [r7, #11]
 80198c0:	2322      	movs	r3, #34	; 0x22
 80198c2:	733b      	strb	r3, [r7, #12]
 80198c4:	234f      	movs	r3, #79	; 0x4f
 80198c6:	737b      	strb	r3, [r7, #13]
 80198c8:	2328      	movs	r3, #40	; 0x28
 80198ca:	73bb      	strb	r3, [r7, #14]
 80198cc:	2389      	movs	r3, #137	; 0x89
 80198ce:	73fb      	strb	r3, [r7, #15]
 80198d0:	2373      	movs	r3, #115	; 0x73
 80198d2:	743b      	strb	r3, [r7, #16]
 80198d4:	23b7      	movs	r3, #183	; 0xb7
 80198d6:	747b      	strb	r3, [r7, #17]
 80198d8:	2390      	movs	r3, #144	; 0x90
 80198da:	74bb      	strb	r3, [r7, #18]
 80198dc:	23d6      	movs	r3, #214	; 0xd6
 80198de:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomLightiningHdle,
 80198e0:	4b03      	ldr	r3, [pc, #12]	; (80198f0 <SVCCTL_InitCustomSvc+0x728>)
 80198e2:	8bd8      	ldrh	r0, [r3, #30]
 80198e4:	4b11      	ldr	r3, [pc, #68]	; (801992c <SVCCTL_InitCustomSvc+0x764>)
 80198e6:	781b      	ldrb	r3, [r3, #0]
 80198e8:	b29b      	uxth	r3, r3
 80198ea:	1d3a      	adds	r2, r7, #4
 80198ec:	e020      	b.n	8019930 <SVCCTL_InitCustomSvc+0x768>
 80198ee:	bf00      	nop
 80198f0:	20000b1c 	.word	0x20000b1c
 80198f4:	200000de 	.word	0x200000de
 80198f8:	20000b2c 	.word	0x20000b2c
 80198fc:	200000df 	.word	0x200000df
 8019900:	20000b2e 	.word	0x20000b2e
 8019904:	20000b30 	.word	0x20000b30
 8019908:	200000e0 	.word	0x200000e0
 801990c:	20000b32 	.word	0x20000b32
 8019910:	200000e1 	.word	0x200000e1
 8019914:	20000b34 	.word	0x20000b34
 8019918:	200000e2 	.word	0x200000e2
 801991c:	20000b36 	.word	0x20000b36
 8019920:	200000e3 	.word	0x200000e3
 8019924:	20000b38 	.word	0x20000b38
 8019928:	20000b3a 	.word	0x20000b3a
 801992c:	200000e4 	.word	0x200000e4
 8019930:	498e      	ldr	r1, [pc, #568]	; (8019b6c <SVCCTL_InitCustomSvc+0x9a4>)
 8019932:	9105      	str	r1, [sp, #20]
 8019934:	2101      	movs	r1, #1
 8019936:	9104      	str	r1, [sp, #16]
 8019938:	2110      	movs	r1, #16
 801993a:	9103      	str	r1, [sp, #12]
 801993c:	2101      	movs	r1, #1
 801993e:	9102      	str	r1, [sp, #8]
 8019940:	2100      	movs	r1, #0
 8019942:	9101      	str	r1, [sp, #4]
 8019944:	2110      	movs	r1, #16
 8019946:	9100      	str	r1, [sp, #0]
 8019948:	2102      	movs	r1, #2
 801994a:	f7fb ff3f 	bl	80157cc <aci_gatt_add_char>
 801994e:	4603      	mov	r3, r0
 8019950:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service4_Char1 */
  /**
   *  Strike_distance
   */
  COPY_STRIKE_DISTANCE_UUID(uuid.Char_UUID_128);
 8019952:	231f      	movs	r3, #31
 8019954:	713b      	strb	r3, [r7, #4]
 8019956:	2382      	movs	r3, #130	; 0x82
 8019958:	717b      	strb	r3, [r7, #5]
 801995a:	2333      	movs	r3, #51	; 0x33
 801995c:	71bb      	strb	r3, [r7, #6]
 801995e:	23e4      	movs	r3, #228	; 0xe4
 8019960:	71fb      	strb	r3, [r7, #7]
 8019962:	23bb      	movs	r3, #187	; 0xbb
 8019964:	723b      	strb	r3, [r7, #8]
 8019966:	23b5      	movs	r3, #181	; 0xb5
 8019968:	727b      	strb	r3, [r7, #9]
 801996a:	2381      	movs	r3, #129	; 0x81
 801996c:	72bb      	strb	r3, [r7, #10]
 801996e:	23b0      	movs	r3, #176	; 0xb0
 8019970:	72fb      	strb	r3, [r7, #11]
 8019972:	2369      	movs	r3, #105	; 0x69
 8019974:	733b      	strb	r3, [r7, #12]
 8019976:	234e      	movs	r3, #78	; 0x4e
 8019978:	737b      	strb	r3, [r7, #13]
 801997a:	237d      	movs	r3, #125	; 0x7d
 801997c:	73bb      	strb	r3, [r7, #14]
 801997e:	2336      	movs	r3, #54	; 0x36
 8019980:	73fb      	strb	r3, [r7, #15]
 8019982:	236c      	movs	r3, #108	; 0x6c
 8019984:	743b      	strb	r3, [r7, #16]
 8019986:	2340      	movs	r3, #64	; 0x40
 8019988:	747b      	strb	r3, [r7, #17]
 801998a:	23f9      	movs	r3, #249	; 0xf9
 801998c:	74bb      	strb	r3, [r7, #18]
 801998e:	230d      	movs	r3, #13
 8019990:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomLightiningHdle,
 8019992:	4b77      	ldr	r3, [pc, #476]	; (8019b70 <SVCCTL_InitCustomSvc+0x9a8>)
 8019994:	8bd8      	ldrh	r0, [r3, #30]
 8019996:	4b77      	ldr	r3, [pc, #476]	; (8019b74 <SVCCTL_InitCustomSvc+0x9ac>)
 8019998:	781b      	ldrb	r3, [r3, #0]
 801999a:	b29b      	uxth	r3, r3
 801999c:	1d3a      	adds	r2, r7, #4
 801999e:	4976      	ldr	r1, [pc, #472]	; (8019b78 <SVCCTL_InitCustomSvc+0x9b0>)
 80199a0:	9105      	str	r1, [sp, #20]
 80199a2:	2100      	movs	r1, #0
 80199a4:	9104      	str	r1, [sp, #16]
 80199a6:	2110      	movs	r1, #16
 80199a8:	9103      	str	r1, [sp, #12]
 80199aa:	2101      	movs	r1, #1
 80199ac:	9102      	str	r1, [sp, #8]
 80199ae:	2100      	movs	r1, #0
 80199b0:	9101      	str	r1, [sp, #4]
 80199b2:	2110      	movs	r1, #16
 80199b4:	9100      	str	r1, [sp, #0]
 80199b6:	2102      	movs	r1, #2
 80199b8:	f7fb ff08 	bl	80157cc <aci_gatt_add_char>
 80199bc:	4603      	mov	r3, r0
 80199be:	75fb      	strb	r3, [r7, #23]
   *                              = 8
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 8;
 80199c0:	2308      	movs	r3, #8
 80199c2:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_UTILITIES_UUID(uuid.Char_UUID_128);
 80199c4:	2395      	movs	r3, #149	; 0x95
 80199c6:	713b      	strb	r3, [r7, #4]
 80199c8:	23dc      	movs	r3, #220	; 0xdc
 80199ca:	717b      	strb	r3, [r7, #5]
 80199cc:	2388      	movs	r3, #136	; 0x88
 80199ce:	71bb      	strb	r3, [r7, #6]
 80199d0:	2378      	movs	r3, #120	; 0x78
 80199d2:	71fb      	strb	r3, [r7, #7]
 80199d4:	236b      	movs	r3, #107	; 0x6b
 80199d6:	723b      	strb	r3, [r7, #8]
 80199d8:	2393      	movs	r3, #147	; 0x93
 80199da:	727b      	strb	r3, [r7, #9]
 80199dc:	23d9      	movs	r3, #217	; 0xd9
 80199de:	72bb      	strb	r3, [r7, #10]
 80199e0:	23a7      	movs	r3, #167	; 0xa7
 80199e2:	72fb      	strb	r3, [r7, #11]
 80199e4:	23f6      	movs	r3, #246	; 0xf6
 80199e6:	733b      	strb	r3, [r7, #12]
 80199e8:	234e      	movs	r3, #78	; 0x4e
 80199ea:	737b      	strb	r3, [r7, #13]
 80199ec:	23a1      	movs	r3, #161	; 0xa1
 80199ee:	73bb      	strb	r3, [r7, #14]
 80199f0:	235f      	movs	r3, #95	; 0x5f
 80199f2:	73fb      	strb	r3, [r7, #15]
 80199f4:	23e7      	movs	r3, #231	; 0xe7
 80199f6:	743b      	strb	r3, [r7, #16]
 80199f8:	2399      	movs	r3, #153	; 0x99
 80199fa:	747b      	strb	r3, [r7, #17]
 80199fc:	230a      	movs	r3, #10
 80199fe:	74bb      	strb	r3, [r7, #18]
 8019a00:	231e      	movs	r3, #30
 8019a02:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8019a04:	7dbb      	ldrb	r3, [r7, #22]
 8019a06:	1d39      	adds	r1, r7, #4
 8019a08:	4a5c      	ldr	r2, [pc, #368]	; (8019b7c <SVCCTL_InitCustomSvc+0x9b4>)
 8019a0a:	9200      	str	r2, [sp, #0]
 8019a0c:	2201      	movs	r2, #1
 8019a0e:	2002      	movs	r0, #2
 8019a10:	f7fb fe06 	bl	8015620 <aci_gatt_add_service>
 8019a14:	4603      	mov	r3, r0
 8019a16:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  Time
   */
  COPY_TIME_UUID(uuid.Char_UUID_128);
 8019a18:	23bd      	movs	r3, #189	; 0xbd
 8019a1a:	713b      	strb	r3, [r7, #4]
 8019a1c:	2385      	movs	r3, #133	; 0x85
 8019a1e:	717b      	strb	r3, [r7, #5]
 8019a20:	2328      	movs	r3, #40	; 0x28
 8019a22:	71bb      	strb	r3, [r7, #6]
 8019a24:	2353      	movs	r3, #83	; 0x53
 8019a26:	71fb      	strb	r3, [r7, #7]
 8019a28:	236d      	movs	r3, #109	; 0x6d
 8019a2a:	723b      	strb	r3, [r7, #8]
 8019a2c:	239f      	movs	r3, #159	; 0x9f
 8019a2e:	727b      	strb	r3, [r7, #9]
 8019a30:	234d      	movs	r3, #77	; 0x4d
 8019a32:	72bb      	strb	r3, [r7, #10]
 8019a34:	2392      	movs	r3, #146	; 0x92
 8019a36:	72fb      	strb	r3, [r7, #11]
 8019a38:	233a      	movs	r3, #58	; 0x3a
 8019a3a:	733b      	strb	r3, [r7, #12]
 8019a3c:	2344      	movs	r3, #68	; 0x44
 8019a3e:	737b      	strb	r3, [r7, #13]
 8019a40:	23e6      	movs	r3, #230	; 0xe6
 8019a42:	73bb      	strb	r3, [r7, #14]
 8019a44:	2316      	movs	r3, #22
 8019a46:	73fb      	strb	r3, [r7, #15]
 8019a48:	23d0      	movs	r3, #208	; 0xd0
 8019a4a:	743b      	strb	r3, [r7, #16]
 8019a4c:	230c      	movs	r3, #12
 8019a4e:	747b      	strb	r3, [r7, #17]
 8019a50:	2303      	movs	r3, #3
 8019a52:	74bb      	strb	r3, [r7, #18]
 8019a54:	2353      	movs	r3, #83	; 0x53
 8019a56:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomUtilityHdle,
 8019a58:	4b45      	ldr	r3, [pc, #276]	; (8019b70 <SVCCTL_InitCustomSvc+0x9a8>)
 8019a5a:	8c98      	ldrh	r0, [r3, #36]	; 0x24
 8019a5c:	4b48      	ldr	r3, [pc, #288]	; (8019b80 <SVCCTL_InitCustomSvc+0x9b8>)
 8019a5e:	781b      	ldrb	r3, [r3, #0]
 8019a60:	b29b      	uxth	r3, r3
 8019a62:	1d3a      	adds	r2, r7, #4
 8019a64:	4947      	ldr	r1, [pc, #284]	; (8019b84 <SVCCTL_InitCustomSvc+0x9bc>)
 8019a66:	9105      	str	r1, [sp, #20]
 8019a68:	2100      	movs	r1, #0
 8019a6a:	9104      	str	r1, [sp, #16]
 8019a6c:	2110      	movs	r1, #16
 8019a6e:	9103      	str	r1, [sp, #12]
 8019a70:	2106      	movs	r1, #6
 8019a72:	9102      	str	r1, [sp, #8]
 8019a74:	2100      	movs	r1, #0
 8019a76:	9101      	str	r1, [sp, #4]
 8019a78:	2106      	movs	r1, #6
 8019a7a:	9100      	str	r1, [sp, #0]
 8019a7c:	2102      	movs	r1, #2
 8019a7e:	f7fb fea5 	bl	80157cc <aci_gatt_add_char>
 8019a82:	4603      	mov	r3, r0
 8019a84:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service5_Char1 */
  /**
   *  Log_data_tx_status
   */
  COPY_LOG_DATA_TX_STATUS_UUID(uuid.Char_UUID_128);
 8019a86:	23c1      	movs	r3, #193	; 0xc1
 8019a88:	713b      	strb	r3, [r7, #4]
 8019a8a:	233b      	movs	r3, #59	; 0x3b
 8019a8c:	717b      	strb	r3, [r7, #5]
 8019a8e:	23c8      	movs	r3, #200	; 0xc8
 8019a90:	71bb      	strb	r3, [r7, #6]
 8019a92:	2367      	movs	r3, #103	; 0x67
 8019a94:	71fb      	strb	r3, [r7, #7]
 8019a96:	23b0      	movs	r3, #176	; 0xb0
 8019a98:	723b      	strb	r3, [r7, #8]
 8019a9a:	2352      	movs	r3, #82	; 0x52
 8019a9c:	727b      	strb	r3, [r7, #9]
 8019a9e:	23e7      	movs	r3, #231	; 0xe7
 8019aa0:	72bb      	strb	r3, [r7, #10]
 8019aa2:	2384      	movs	r3, #132	; 0x84
 8019aa4:	72fb      	strb	r3, [r7, #11]
 8019aa6:	2399      	movs	r3, #153	; 0x99
 8019aa8:	733b      	strb	r3, [r7, #12]
 8019aaa:	2349      	movs	r3, #73	; 0x49
 8019aac:	737b      	strb	r3, [r7, #13]
 8019aae:	235c      	movs	r3, #92	; 0x5c
 8019ab0:	73bb      	strb	r3, [r7, #14]
 8019ab2:	23f8      	movs	r3, #248	; 0xf8
 8019ab4:	73fb      	strb	r3, [r7, #15]
 8019ab6:	23e5      	movs	r3, #229	; 0xe5
 8019ab8:	743b      	strb	r3, [r7, #16]
 8019aba:	239c      	movs	r3, #156	; 0x9c
 8019abc:	747b      	strb	r3, [r7, #17]
 8019abe:	234a      	movs	r3, #74	; 0x4a
 8019ac0:	74bb      	strb	r3, [r7, #18]
 8019ac2:	23db      	movs	r3, #219	; 0xdb
 8019ac4:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomUtilityHdle,
 8019ac6:	4b2a      	ldr	r3, [pc, #168]	; (8019b70 <SVCCTL_InitCustomSvc+0x9a8>)
 8019ac8:	8c98      	ldrh	r0, [r3, #36]	; 0x24
 8019aca:	4b2f      	ldr	r3, [pc, #188]	; (8019b88 <SVCCTL_InitCustomSvc+0x9c0>)
 8019acc:	781b      	ldrb	r3, [r3, #0]
 8019ace:	b29b      	uxth	r3, r3
 8019ad0:	1d3a      	adds	r2, r7, #4
 8019ad2:	492e      	ldr	r1, [pc, #184]	; (8019b8c <SVCCTL_InitCustomSvc+0x9c4>)
 8019ad4:	9105      	str	r1, [sp, #20]
 8019ad6:	2100      	movs	r1, #0
 8019ad8:	9104      	str	r1, [sp, #16]
 8019ada:	2110      	movs	r1, #16
 8019adc:	9103      	str	r1, [sp, #12]
 8019ade:	2101      	movs	r1, #1
 8019ae0:	9102      	str	r1, [sp, #8]
 8019ae2:	2100      	movs	r1, #0
 8019ae4:	9101      	str	r1, [sp, #4]
 8019ae6:	2110      	movs	r1, #16
 8019ae8:	9100      	str	r1, [sp, #0]
 8019aea:	2102      	movs	r1, #2
 8019aec:	f7fb fe6e 	bl	80157cc <aci_gatt_add_char>
 8019af0:	4603      	mov	r3, r0
 8019af2:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service5_Char2 */
  /**
   *  OTA
   */
  COPY_OTA_UUID(uuid.Char_UUID_128);
 8019af4:	2319      	movs	r3, #25
 8019af6:	713b      	strb	r3, [r7, #4]
 8019af8:	23ed      	movs	r3, #237	; 0xed
 8019afa:	717b      	strb	r3, [r7, #5]
 8019afc:	2382      	movs	r3, #130	; 0x82
 8019afe:	71bb      	strb	r3, [r7, #6]
 8019b00:	23ae      	movs	r3, #174	; 0xae
 8019b02:	71fb      	strb	r3, [r7, #7]
 8019b04:	23ed      	movs	r3, #237	; 0xed
 8019b06:	723b      	strb	r3, [r7, #8]
 8019b08:	2321      	movs	r3, #33	; 0x21
 8019b0a:	727b      	strb	r3, [r7, #9]
 8019b0c:	234c      	movs	r3, #76	; 0x4c
 8019b0e:	72bb      	strb	r3, [r7, #10]
 8019b10:	239d      	movs	r3, #157	; 0x9d
 8019b12:	72fb      	strb	r3, [r7, #11]
 8019b14:	2341      	movs	r3, #65	; 0x41
 8019b16:	733b      	strb	r3, [r7, #12]
 8019b18:	2345      	movs	r3, #69	; 0x45
 8019b1a:	737b      	strb	r3, [r7, #13]
 8019b1c:	2322      	movs	r3, #34	; 0x22
 8019b1e:	73bb      	strb	r3, [r7, #14]
 8019b20:	238e      	movs	r3, #142	; 0x8e
 8019b22:	73fb      	strb	r3, [r7, #15]
 8019b24:	2324      	movs	r3, #36	; 0x24
 8019b26:	743b      	strb	r3, [r7, #16]
 8019b28:	23fe      	movs	r3, #254	; 0xfe
 8019b2a:	747b      	strb	r3, [r7, #17]
 8019b2c:	2300      	movs	r3, #0
 8019b2e:	74bb      	strb	r3, [r7, #18]
 8019b30:	2300      	movs	r3, #0
 8019b32:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomUtilityHdle,
 8019b34:	4b0e      	ldr	r3, [pc, #56]	; (8019b70 <SVCCTL_InitCustomSvc+0x9a8>)
 8019b36:	8c98      	ldrh	r0, [r3, #36]	; 0x24
 8019b38:	4b15      	ldr	r3, [pc, #84]	; (8019b90 <SVCCTL_InitCustomSvc+0x9c8>)
 8019b3a:	781b      	ldrb	r3, [r3, #0]
 8019b3c:	b29b      	uxth	r3, r3
 8019b3e:	1d3a      	adds	r2, r7, #4
 8019b40:	4914      	ldr	r1, [pc, #80]	; (8019b94 <SVCCTL_InitCustomSvc+0x9cc>)
 8019b42:	9105      	str	r1, [sp, #20]
 8019b44:	2100      	movs	r1, #0
 8019b46:	9104      	str	r1, [sp, #16]
 8019b48:	2110      	movs	r1, #16
 8019b4a:	9103      	str	r1, [sp, #12]
 8019b4c:	2102      	movs	r1, #2
 8019b4e:	9102      	str	r1, [sp, #8]
 8019b50:	2100      	movs	r1, #0
 8019b52:	9101      	str	r1, [sp, #4]
 8019b54:	2104      	movs	r1, #4
 8019b56:	9100      	str	r1, [sp, #0]
 8019b58:	2102      	movs	r1, #2
 8019b5a:	f7fb fe37 	bl	80157cc <aci_gatt_add_char>
 8019b5e:	4603      	mov	r3, r0
 8019b60:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8019b62:	bf00      	nop
}
 8019b64:	3718      	adds	r7, #24
 8019b66:	46bd      	mov	sp, r7
 8019b68:	bd80      	pop	{r7, pc}
 8019b6a:	bf00      	nop
 8019b6c:	20000b3c 	.word	0x20000b3c
 8019b70:	20000b1c 	.word	0x20000b1c
 8019b74:	200000e5 	.word	0x200000e5
 8019b78:	20000b3e 	.word	0x20000b3e
 8019b7c:	20000b40 	.word	0x20000b40
 8019b80:	200000e6 	.word	0x200000e6
 8019b84:	20000b42 	.word	0x20000b42
 8019b88:	200000e7 	.word	0x200000e7
 8019b8c:	20000b44 	.word	0x20000b44
 8019b90:	200000e8 	.word	0x200000e8
 8019b94:	20000b46 	.word	0x20000b46

08019b98 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8019b98:	b580      	push	{r7, lr}
 8019b9a:	b086      	sub	sp, #24
 8019b9c:	af02      	add	r7, sp, #8
 8019b9e:	4603      	mov	r3, r0
 8019ba0:	6039      	str	r1, [r7, #0]
 8019ba2:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8019ba4:	2392      	movs	r3, #146	; 0x92
 8019ba6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 8019ba8:	79fb      	ldrb	r3, [r7, #7]
 8019baa:	2b10      	cmp	r3, #16
 8019bac:	f200 8125 	bhi.w	8019dfa <Custom_STM_App_Update_Char+0x262>
 8019bb0:	a201      	add	r2, pc, #4	; (adr r2, 8019bb8 <Custom_STM_App_Update_Char+0x20>)
 8019bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019bb6:	bf00      	nop
 8019bb8:	08019bfd 	.word	0x08019bfd
 8019bbc:	08019c1b 	.word	0x08019c1b
 8019bc0:	08019c39 	.word	0x08019c39
 8019bc4:	08019c57 	.word	0x08019c57
 8019bc8:	08019c75 	.word	0x08019c75
 8019bcc:	08019c93 	.word	0x08019c93
 8019bd0:	08019cb1 	.word	0x08019cb1
 8019bd4:	08019ccf 	.word	0x08019ccf
 8019bd8:	08019ced 	.word	0x08019ced
 8019bdc:	08019d0b 	.word	0x08019d0b
 8019be0:	08019d29 	.word	0x08019d29
 8019be4:	08019d47 	.word	0x08019d47
 8019be8:	08019d65 	.word	0x08019d65
 8019bec:	08019d83 	.word	0x08019d83
 8019bf0:	08019da1 	.word	0x08019da1
 8019bf4:	08019dbf 	.word	0x08019dbf
 8019bf8:	08019ddd 	.word	0x08019ddd
  {

    case CUSTOM_STM_BAT_LEVEL:
      ret = aci_gatt_update_char_value(CustomContext.CustomBatHdle,
 8019bfc:	4b82      	ldr	r3, [pc, #520]	; (8019e08 <Custom_STM_App_Update_Char+0x270>)
 8019bfe:	8818      	ldrh	r0, [r3, #0]
 8019c00:	4b81      	ldr	r3, [pc, #516]	; (8019e08 <Custom_STM_App_Update_Char+0x270>)
 8019c02:	8859      	ldrh	r1, [r3, #2]
 8019c04:	4b81      	ldr	r3, [pc, #516]	; (8019e0c <Custom_STM_App_Update_Char+0x274>)
 8019c06:	781a      	ldrb	r2, [r3, #0]
 8019c08:	683b      	ldr	r3, [r7, #0]
 8019c0a:	9300      	str	r3, [sp, #0]
 8019c0c:	4613      	mov	r3, r2
 8019c0e:	2200      	movs	r2, #0
 8019c10:	f7fb fee4 	bl	80159dc <aci_gatt_update_char_value>
 8019c14:	4603      	mov	r3, r0
 8019c16:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value BAT_LEVEL command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_1*/
      break;
 8019c18:	e0f0      	b.n	8019dfc <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_EOC:
      ret = aci_gatt_update_char_value(CustomContext.CustomBatHdle,
 8019c1a:	4b7b      	ldr	r3, [pc, #492]	; (8019e08 <Custom_STM_App_Update_Char+0x270>)
 8019c1c:	8818      	ldrh	r0, [r3, #0]
 8019c1e:	4b7a      	ldr	r3, [pc, #488]	; (8019e08 <Custom_STM_App_Update_Char+0x270>)
 8019c20:	8899      	ldrh	r1, [r3, #4]
 8019c22:	4b7b      	ldr	r3, [pc, #492]	; (8019e10 <Custom_STM_App_Update_Char+0x278>)
 8019c24:	781a      	ldrb	r2, [r3, #0]
 8019c26:	683b      	ldr	r3, [r7, #0]
 8019c28:	9300      	str	r3, [sp, #0]
 8019c2a:	4613      	mov	r3, r2
 8019c2c:	2200      	movs	r2, #0
 8019c2e:	f7fb fed5 	bl	80159dc <aci_gatt_update_char_value>
 8019c32:	4603      	mov	r3, r0
 8019c34:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value EOC command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_2*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;
 8019c36:	e0e1      	b.n	8019dfc <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_PWR_GD:
      ret = aci_gatt_update_char_value(CustomContext.CustomBatHdle,
 8019c38:	4b73      	ldr	r3, [pc, #460]	; (8019e08 <Custom_STM_App_Update_Char+0x270>)
 8019c3a:	8818      	ldrh	r0, [r3, #0]
 8019c3c:	4b72      	ldr	r3, [pc, #456]	; (8019e08 <Custom_STM_App_Update_Char+0x270>)
 8019c3e:	88d9      	ldrh	r1, [r3, #6]
 8019c40:	4b74      	ldr	r3, [pc, #464]	; (8019e14 <Custom_STM_App_Update_Char+0x27c>)
 8019c42:	781a      	ldrb	r2, [r3, #0]
 8019c44:	683b      	ldr	r3, [r7, #0]
 8019c46:	9300      	str	r3, [sp, #0]
 8019c48:	4613      	mov	r3, r2
 8019c4a:	2200      	movs	r2, #0
 8019c4c:	f7fb fec6 	bl	80159dc <aci_gatt_update_char_value>
 8019c50:	4603      	mov	r3, r0
 8019c52:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value PWR_GD command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_3*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_3*/
      break;
 8019c54:	e0d2      	b.n	8019dfc <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_IAQ_IN:
      ret = aci_gatt_update_char_value(CustomContext.CustomGasHdle,
 8019c56:	4b6c      	ldr	r3, [pc, #432]	; (8019e08 <Custom_STM_App_Update_Char+0x270>)
 8019c58:	8918      	ldrh	r0, [r3, #8]
 8019c5a:	4b6b      	ldr	r3, [pc, #428]	; (8019e08 <Custom_STM_App_Update_Char+0x270>)
 8019c5c:	8959      	ldrh	r1, [r3, #10]
 8019c5e:	4b6e      	ldr	r3, [pc, #440]	; (8019e18 <Custom_STM_App_Update_Char+0x280>)
 8019c60:	781a      	ldrb	r2, [r3, #0]
 8019c62:	683b      	ldr	r3, [r7, #0]
 8019c64:	9300      	str	r3, [sp, #0]
 8019c66:	4613      	mov	r3, r2
 8019c68:	2200      	movs	r2, #0
 8019c6a:	f7fb feb7 	bl	80159dc <aci_gatt_update_char_value>
 8019c6e:	4603      	mov	r3, r0
 8019c70:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value IAQ_IN command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_2_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_1*/
      break;
 8019c72:	e0c3      	b.n	8019dfc <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_RELATIVE_IA:
      ret = aci_gatt_update_char_value(CustomContext.CustomGasHdle,
 8019c74:	4b64      	ldr	r3, [pc, #400]	; (8019e08 <Custom_STM_App_Update_Char+0x270>)
 8019c76:	8918      	ldrh	r0, [r3, #8]
 8019c78:	4b63      	ldr	r3, [pc, #396]	; (8019e08 <Custom_STM_App_Update_Char+0x270>)
 8019c7a:	8999      	ldrh	r1, [r3, #12]
 8019c7c:	4b67      	ldr	r3, [pc, #412]	; (8019e1c <Custom_STM_App_Update_Char+0x284>)
 8019c7e:	781a      	ldrb	r2, [r3, #0]
 8019c80:	683b      	ldr	r3, [r7, #0]
 8019c82:	9300      	str	r3, [sp, #0]
 8019c84:	4613      	mov	r3, r2
 8019c86:	2200      	movs	r2, #0
 8019c88:	f7fb fea8 	bl	80159dc <aci_gatt_update_char_value>
 8019c8c:	4603      	mov	r3, r0
 8019c8e:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value RELATIVE_IA command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_2_Char_2*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_2*/
      break;
 8019c90:	e0b4      	b.n	8019dfc <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_TVOC:
      ret = aci_gatt_update_char_value(CustomContext.CustomGasHdle,
 8019c92:	4b5d      	ldr	r3, [pc, #372]	; (8019e08 <Custom_STM_App_Update_Char+0x270>)
 8019c94:	8918      	ldrh	r0, [r3, #8]
 8019c96:	4b5c      	ldr	r3, [pc, #368]	; (8019e08 <Custom_STM_App_Update_Char+0x270>)
 8019c98:	89d9      	ldrh	r1, [r3, #14]
 8019c9a:	4b61      	ldr	r3, [pc, #388]	; (8019e20 <Custom_STM_App_Update_Char+0x288>)
 8019c9c:	781a      	ldrb	r2, [r3, #0]
 8019c9e:	683b      	ldr	r3, [r7, #0]
 8019ca0:	9300      	str	r3, [sp, #0]
 8019ca2:	4613      	mov	r3, r2
 8019ca4:	2200      	movs	r2, #0
 8019ca6:	f7fb fe99 	bl	80159dc <aci_gatt_update_char_value>
 8019caa:	4603      	mov	r3, r0
 8019cac:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value TVOC command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_2_Char_3*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_3*/
      break;
 8019cae:	e0a5      	b.n	8019dfc <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_ETOH:
      ret = aci_gatt_update_char_value(CustomContext.CustomGasHdle,
 8019cb0:	4b55      	ldr	r3, [pc, #340]	; (8019e08 <Custom_STM_App_Update_Char+0x270>)
 8019cb2:	8918      	ldrh	r0, [r3, #8]
 8019cb4:	4b54      	ldr	r3, [pc, #336]	; (8019e08 <Custom_STM_App_Update_Char+0x270>)
 8019cb6:	8a19      	ldrh	r1, [r3, #16]
 8019cb8:	4b5a      	ldr	r3, [pc, #360]	; (8019e24 <Custom_STM_App_Update_Char+0x28c>)
 8019cba:	781a      	ldrb	r2, [r3, #0]
 8019cbc:	683b      	ldr	r3, [r7, #0]
 8019cbe:	9300      	str	r3, [sp, #0]
 8019cc0:	4613      	mov	r3, r2
 8019cc2:	2200      	movs	r2, #0
 8019cc4:	f7fb fe8a 	bl	80159dc <aci_gatt_update_char_value>
 8019cc8:	4603      	mov	r3, r0
 8019cca:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ETOH command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_2_Char_4*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_4*/
      break;
 8019ccc:	e096      	b.n	8019dfc <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_CO2:
      ret = aci_gatt_update_char_value(CustomContext.CustomGasHdle,
 8019cce:	4b4e      	ldr	r3, [pc, #312]	; (8019e08 <Custom_STM_App_Update_Char+0x270>)
 8019cd0:	8918      	ldrh	r0, [r3, #8]
 8019cd2:	4b4d      	ldr	r3, [pc, #308]	; (8019e08 <Custom_STM_App_Update_Char+0x270>)
 8019cd4:	8a59      	ldrh	r1, [r3, #18]
 8019cd6:	4b54      	ldr	r3, [pc, #336]	; (8019e28 <Custom_STM_App_Update_Char+0x290>)
 8019cd8:	781a      	ldrb	r2, [r3, #0]
 8019cda:	683b      	ldr	r3, [r7, #0]
 8019cdc:	9300      	str	r3, [sp, #0]
 8019cde:	4613      	mov	r3, r2
 8019ce0:	2200      	movs	r2, #0
 8019ce2:	f7fb fe7b 	bl	80159dc <aci_gatt_update_char_value>
 8019ce6:	4603      	mov	r3, r0
 8019ce8:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value CO2 command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_2_Char_5*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_5*/
      break;
 8019cea:	e087      	b.n	8019dfc <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_TEMP:
      ret = aci_gatt_update_char_value(CustomContext.CustomEnvHdle,
 8019cec:	4b46      	ldr	r3, [pc, #280]	; (8019e08 <Custom_STM_App_Update_Char+0x270>)
 8019cee:	8a98      	ldrh	r0, [r3, #20]
 8019cf0:	4b45      	ldr	r3, [pc, #276]	; (8019e08 <Custom_STM_App_Update_Char+0x270>)
 8019cf2:	8ad9      	ldrh	r1, [r3, #22]
 8019cf4:	4b4d      	ldr	r3, [pc, #308]	; (8019e2c <Custom_STM_App_Update_Char+0x294>)
 8019cf6:	781a      	ldrb	r2, [r3, #0]
 8019cf8:	683b      	ldr	r3, [r7, #0]
 8019cfa:	9300      	str	r3, [sp, #0]
 8019cfc:	4613      	mov	r3, r2
 8019cfe:	2200      	movs	r2, #0
 8019d00:	f7fb fe6c 	bl	80159dc <aci_gatt_update_char_value>
 8019d04:	4603      	mov	r3, r0
 8019d06:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value TEMP command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_3_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_3_Char_1*/
      break;
 8019d08:	e078      	b.n	8019dfc <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_HUMI:
      ret = aci_gatt_update_char_value(CustomContext.CustomEnvHdle,
 8019d0a:	4b3f      	ldr	r3, [pc, #252]	; (8019e08 <Custom_STM_App_Update_Char+0x270>)
 8019d0c:	8a98      	ldrh	r0, [r3, #20]
 8019d0e:	4b3e      	ldr	r3, [pc, #248]	; (8019e08 <Custom_STM_App_Update_Char+0x270>)
 8019d10:	8b19      	ldrh	r1, [r3, #24]
 8019d12:	4b47      	ldr	r3, [pc, #284]	; (8019e30 <Custom_STM_App_Update_Char+0x298>)
 8019d14:	781a      	ldrb	r2, [r3, #0]
 8019d16:	683b      	ldr	r3, [r7, #0]
 8019d18:	9300      	str	r3, [sp, #0]
 8019d1a:	4613      	mov	r3, r2
 8019d1c:	2200      	movs	r2, #0
 8019d1e:	f7fb fe5d 	bl	80159dc <aci_gatt_update_char_value>
 8019d22:	4603      	mov	r3, r0
 8019d24:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value HUMI command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_3_Char_2*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_3_Char_2*/
      break;
 8019d26:	e069      	b.n	8019dfc <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_PRES:
      ret = aci_gatt_update_char_value(CustomContext.CustomEnvHdle,
 8019d28:	4b37      	ldr	r3, [pc, #220]	; (8019e08 <Custom_STM_App_Update_Char+0x270>)
 8019d2a:	8a98      	ldrh	r0, [r3, #20]
 8019d2c:	4b36      	ldr	r3, [pc, #216]	; (8019e08 <Custom_STM_App_Update_Char+0x270>)
 8019d2e:	8b59      	ldrh	r1, [r3, #26]
 8019d30:	4b40      	ldr	r3, [pc, #256]	; (8019e34 <Custom_STM_App_Update_Char+0x29c>)
 8019d32:	781a      	ldrb	r2, [r3, #0]
 8019d34:	683b      	ldr	r3, [r7, #0]
 8019d36:	9300      	str	r3, [sp, #0]
 8019d38:	4613      	mov	r3, r2
 8019d3a:	2200      	movs	r2, #0
 8019d3c:	f7fb fe4e 	bl	80159dc <aci_gatt_update_char_value>
 8019d40:	4603      	mov	r3, r0
 8019d42:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value PRES command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_3_Char_3*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_3_Char_3*/
      break;
 8019d44:	e05a      	b.n	8019dfc <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_GET_ENV_LOG:
      ret = aci_gatt_update_char_value(CustomContext.CustomEnvHdle,
 8019d46:	4b30      	ldr	r3, [pc, #192]	; (8019e08 <Custom_STM_App_Update_Char+0x270>)
 8019d48:	8a98      	ldrh	r0, [r3, #20]
 8019d4a:	4b2f      	ldr	r3, [pc, #188]	; (8019e08 <Custom_STM_App_Update_Char+0x270>)
 8019d4c:	8b99      	ldrh	r1, [r3, #28]
 8019d4e:	4b3a      	ldr	r3, [pc, #232]	; (8019e38 <Custom_STM_App_Update_Char+0x2a0>)
 8019d50:	781a      	ldrb	r2, [r3, #0]
 8019d52:	683b      	ldr	r3, [r7, #0]
 8019d54:	9300      	str	r3, [sp, #0]
 8019d56:	4613      	mov	r3, r2
 8019d58:	2200      	movs	r2, #0
 8019d5a:	f7fb fe3f 	bl	80159dc <aci_gatt_update_char_value>
 8019d5e:	4603      	mov	r3, r0
 8019d60:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value GET_ENV_LOG command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_3_Char_4*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_3_Char_4*/
      break;
 8019d62:	e04b      	b.n	8019dfc <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_GET_LIGHTNING_LOG:
      ret = aci_gatt_update_char_value(CustomContext.CustomLightiningHdle,
 8019d64:	4b28      	ldr	r3, [pc, #160]	; (8019e08 <Custom_STM_App_Update_Char+0x270>)
 8019d66:	8bd8      	ldrh	r0, [r3, #30]
 8019d68:	4b27      	ldr	r3, [pc, #156]	; (8019e08 <Custom_STM_App_Update_Char+0x270>)
 8019d6a:	8c19      	ldrh	r1, [r3, #32]
 8019d6c:	4b33      	ldr	r3, [pc, #204]	; (8019e3c <Custom_STM_App_Update_Char+0x2a4>)
 8019d6e:	781a      	ldrb	r2, [r3, #0]
 8019d70:	683b      	ldr	r3, [r7, #0]
 8019d72:	9300      	str	r3, [sp, #0]
 8019d74:	4613      	mov	r3, r2
 8019d76:	2200      	movs	r2, #0
 8019d78:	f7fb fe30 	bl	80159dc <aci_gatt_update_char_value>
 8019d7c:	4603      	mov	r3, r0
 8019d7e:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value GET_LIGHTNING_LOG command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_4_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_4_Char_1*/
      break;
 8019d80:	e03c      	b.n	8019dfc <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_STRIKE_DISTANCE:
      ret = aci_gatt_update_char_value(CustomContext.CustomLightiningHdle,
 8019d82:	4b21      	ldr	r3, [pc, #132]	; (8019e08 <Custom_STM_App_Update_Char+0x270>)
 8019d84:	8bd8      	ldrh	r0, [r3, #30]
 8019d86:	4b20      	ldr	r3, [pc, #128]	; (8019e08 <Custom_STM_App_Update_Char+0x270>)
 8019d88:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8019d8a:	4b2d      	ldr	r3, [pc, #180]	; (8019e40 <Custom_STM_App_Update_Char+0x2a8>)
 8019d8c:	781a      	ldrb	r2, [r3, #0]
 8019d8e:	683b      	ldr	r3, [r7, #0]
 8019d90:	9300      	str	r3, [sp, #0]
 8019d92:	4613      	mov	r3, r2
 8019d94:	2200      	movs	r2, #0
 8019d96:	f7fb fe21 	bl	80159dc <aci_gatt_update_char_value>
 8019d9a:	4603      	mov	r3, r0
 8019d9c:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value STRIKE_DISTANCE command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_4_Char_2*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_4_Char_2*/
      break;
 8019d9e:	e02d      	b.n	8019dfc <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_TIME:
      ret = aci_gatt_update_char_value(CustomContext.CustomUtilityHdle,
 8019da0:	4b19      	ldr	r3, [pc, #100]	; (8019e08 <Custom_STM_App_Update_Char+0x270>)
 8019da2:	8c98      	ldrh	r0, [r3, #36]	; 0x24
 8019da4:	4b18      	ldr	r3, [pc, #96]	; (8019e08 <Custom_STM_App_Update_Char+0x270>)
 8019da6:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
 8019da8:	4b26      	ldr	r3, [pc, #152]	; (8019e44 <Custom_STM_App_Update_Char+0x2ac>)
 8019daa:	781a      	ldrb	r2, [r3, #0]
 8019dac:	683b      	ldr	r3, [r7, #0]
 8019dae:	9300      	str	r3, [sp, #0]
 8019db0:	4613      	mov	r3, r2
 8019db2:	2200      	movs	r2, #0
 8019db4:	f7fb fe12 	bl	80159dc <aci_gatt_update_char_value>
 8019db8:	4603      	mov	r3, r0
 8019dba:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value TIME command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_5_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_5_Char_1*/
      break;
 8019dbc:	e01e      	b.n	8019dfc <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_LOG_DATA_TX_STATUS:
      ret = aci_gatt_update_char_value(CustomContext.CustomUtilityHdle,
 8019dbe:	4b12      	ldr	r3, [pc, #72]	; (8019e08 <Custom_STM_App_Update_Char+0x270>)
 8019dc0:	8c98      	ldrh	r0, [r3, #36]	; 0x24
 8019dc2:	4b11      	ldr	r3, [pc, #68]	; (8019e08 <Custom_STM_App_Update_Char+0x270>)
 8019dc4:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 8019dc6:	4b20      	ldr	r3, [pc, #128]	; (8019e48 <Custom_STM_App_Update_Char+0x2b0>)
 8019dc8:	781a      	ldrb	r2, [r3, #0]
 8019dca:	683b      	ldr	r3, [r7, #0]
 8019dcc:	9300      	str	r3, [sp, #0]
 8019dce:	4613      	mov	r3, r2
 8019dd0:	2200      	movs	r2, #0
 8019dd2:	f7fb fe03 	bl	80159dc <aci_gatt_update_char_value>
 8019dd6:	4603      	mov	r3, r0
 8019dd8:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value LOG_DATA_TX_STATUS command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_5_Char_2*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_5_Char_2*/
      break;
 8019dda:	e00f      	b.n	8019dfc <Custom_STM_App_Update_Char+0x264>

    case CUSTOM_STM_OTA:
      ret = aci_gatt_update_char_value(CustomContext.CustomUtilityHdle,
 8019ddc:	4b0a      	ldr	r3, [pc, #40]	; (8019e08 <Custom_STM_App_Update_Char+0x270>)
 8019dde:	8c98      	ldrh	r0, [r3, #36]	; 0x24
 8019de0:	4b09      	ldr	r3, [pc, #36]	; (8019e08 <Custom_STM_App_Update_Char+0x270>)
 8019de2:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
 8019de4:	4b19      	ldr	r3, [pc, #100]	; (8019e4c <Custom_STM_App_Update_Char+0x2b4>)
 8019de6:	781a      	ldrb	r2, [r3, #0]
 8019de8:	683b      	ldr	r3, [r7, #0]
 8019dea:	9300      	str	r3, [sp, #0]
 8019dec:	4613      	mov	r3, r2
 8019dee:	2200      	movs	r2, #0
 8019df0:	f7fb fdf4 	bl	80159dc <aci_gatt_update_char_value>
 8019df4:	4603      	mov	r3, r0
 8019df6:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value OTA command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_5_Char_3*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_5_Char_3*/
      break;
 8019df8:	e000      	b.n	8019dfc <Custom_STM_App_Update_Char+0x264>

    default:
      break;
 8019dfa:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 8019dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8019dfe:	4618      	mov	r0, r3
 8019e00:	3710      	adds	r7, #16
 8019e02:	46bd      	mov	sp, r7
 8019e04:	bd80      	pop	{r7, pc}
 8019e06:	bf00      	nop
 8019e08:	20000b1c 	.word	0x20000b1c
 8019e0c:	200000d8 	.word	0x200000d8
 8019e10:	200000d9 	.word	0x200000d9
 8019e14:	200000da 	.word	0x200000da
 8019e18:	200000db 	.word	0x200000db
 8019e1c:	200000dc 	.word	0x200000dc
 8019e20:	200000dd 	.word	0x200000dd
 8019e24:	200000de 	.word	0x200000de
 8019e28:	200000df 	.word	0x200000df
 8019e2c:	200000e0 	.word	0x200000e0
 8019e30:	200000e1 	.word	0x200000e1
 8019e34:	200000e2 	.word	0x200000e2
 8019e38:	200000e3 	.word	0x200000e3
 8019e3c:	200000e4 	.word	0x200000e4
 8019e40:	200000e5 	.word	0x200000e5
 8019e44:	200000e6 	.word	0x200000e6
 8019e48:	200000e7 	.word	0x200000e7
 8019e4c:	200000e8 	.word	0x200000e8

08019e50 <LL_PWR_EnableBootC2>:
{
 8019e50:	b480      	push	{r7}
 8019e52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8019e54:	4b05      	ldr	r3, [pc, #20]	; (8019e6c <LL_PWR_EnableBootC2+0x1c>)
 8019e56:	68db      	ldr	r3, [r3, #12]
 8019e58:	4a04      	ldr	r2, [pc, #16]	; (8019e6c <LL_PWR_EnableBootC2+0x1c>)
 8019e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8019e5e:	60d3      	str	r3, [r2, #12]
}
 8019e60:	bf00      	nop
 8019e62:	46bd      	mov	sp, r7
 8019e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e68:	4770      	bx	lr
 8019e6a:	bf00      	nop
 8019e6c:	58000400 	.word	0x58000400

08019e70 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8019e70:	b480      	push	{r7}
 8019e72:	b083      	sub	sp, #12
 8019e74:	af00      	add	r7, sp, #0
 8019e76:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8019e78:	4b06      	ldr	r3, [pc, #24]	; (8019e94 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8019e7a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8019e7e:	4905      	ldr	r1, [pc, #20]	; (8019e94 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8019e80:	687b      	ldr	r3, [r7, #4]
 8019e82:	4313      	orrs	r3, r2
 8019e84:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8019e88:	bf00      	nop
 8019e8a:	370c      	adds	r7, #12
 8019e8c:	46bd      	mov	sp, r7
 8019e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e92:	4770      	bx	lr
 8019e94:	58000800 	.word	0x58000800

08019e98 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8019e98:	b480      	push	{r7}
 8019e9a:	b083      	sub	sp, #12
 8019e9c:	af00      	add	r7, sp, #0
 8019e9e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8019ea0:	4b05      	ldr	r3, [pc, #20]	; (8019eb8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8019ea2:	6a1a      	ldr	r2, [r3, #32]
 8019ea4:	4904      	ldr	r1, [pc, #16]	; (8019eb8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8019ea6:	687b      	ldr	r3, [r7, #4]
 8019ea8:	4313      	orrs	r3, r2
 8019eaa:	620b      	str	r3, [r1, #32]
}
 8019eac:	bf00      	nop
 8019eae:	370c      	adds	r7, #12
 8019eb0:	46bd      	mov	sp, r7
 8019eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eb6:	4770      	bx	lr
 8019eb8:	58000800 	.word	0x58000800

08019ebc <LL_AHB3_GRP1_EnableClock>:
{
 8019ebc:	b480      	push	{r7}
 8019ebe:	b085      	sub	sp, #20
 8019ec0:	af00      	add	r7, sp, #0
 8019ec2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8019ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019ec8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019eca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019ece:	687b      	ldr	r3, [r7, #4]
 8019ed0:	4313      	orrs	r3, r2
 8019ed2:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8019ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019ed8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019eda:	687b      	ldr	r3, [r7, #4]
 8019edc:	4013      	ands	r3, r2
 8019ede:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8019ee0:	68fb      	ldr	r3, [r7, #12]
}
 8019ee2:	bf00      	nop
 8019ee4:	3714      	adds	r7, #20
 8019ee6:	46bd      	mov	sp, r7
 8019ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eec:	4770      	bx	lr

08019eee <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8019eee:	b480      	push	{r7}
 8019ef0:	b085      	sub	sp, #20
 8019ef2:	af00      	add	r7, sp, #0
 8019ef4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8019ef6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019efa:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8019efe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019f02:	687b      	ldr	r3, [r7, #4]
 8019f04:	4313      	orrs	r3, r2
 8019f06:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8019f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019f0e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8019f12:	687b      	ldr	r3, [r7, #4]
 8019f14:	4013      	ands	r3, r2
 8019f16:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8019f18:	68fb      	ldr	r3, [r7, #12]
}
 8019f1a:	bf00      	nop
 8019f1c:	3714      	adds	r7, #20
 8019f1e:	46bd      	mov	sp, r7
 8019f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f24:	4770      	bx	lr

08019f26 <LL_C1_IPCC_EnableIT_TXF>:
{
 8019f26:	b480      	push	{r7}
 8019f28:	b083      	sub	sp, #12
 8019f2a:	af00      	add	r7, sp, #0
 8019f2c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8019f2e:	687b      	ldr	r3, [r7, #4]
 8019f30:	681b      	ldr	r3, [r3, #0]
 8019f32:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8019f36:	687b      	ldr	r3, [r7, #4]
 8019f38:	601a      	str	r2, [r3, #0]
}
 8019f3a:	bf00      	nop
 8019f3c:	370c      	adds	r7, #12
 8019f3e:	46bd      	mov	sp, r7
 8019f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f44:	4770      	bx	lr

08019f46 <LL_C1_IPCC_EnableIT_RXO>:
{
 8019f46:	b480      	push	{r7}
 8019f48:	b083      	sub	sp, #12
 8019f4a:	af00      	add	r7, sp, #0
 8019f4c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	681b      	ldr	r3, [r3, #0]
 8019f52:	f043 0201 	orr.w	r2, r3, #1
 8019f56:	687b      	ldr	r3, [r7, #4]
 8019f58:	601a      	str	r2, [r3, #0]
}
 8019f5a:	bf00      	nop
 8019f5c:	370c      	adds	r7, #12
 8019f5e:	46bd      	mov	sp, r7
 8019f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f64:	4770      	bx	lr

08019f66 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8019f66:	b480      	push	{r7}
 8019f68:	b083      	sub	sp, #12
 8019f6a:	af00      	add	r7, sp, #0
 8019f6c:	6078      	str	r0, [r7, #4]
 8019f6e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8019f70:	687b      	ldr	r3, [r7, #4]
 8019f72:	685a      	ldr	r2, [r3, #4]
 8019f74:	683b      	ldr	r3, [r7, #0]
 8019f76:	041b      	lsls	r3, r3, #16
 8019f78:	43db      	mvns	r3, r3
 8019f7a:	401a      	ands	r2, r3
 8019f7c:	687b      	ldr	r3, [r7, #4]
 8019f7e:	605a      	str	r2, [r3, #4]
}
 8019f80:	bf00      	nop
 8019f82:	370c      	adds	r7, #12
 8019f84:	46bd      	mov	sp, r7
 8019f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f8a:	4770      	bx	lr

08019f8c <LL_C1_IPCC_DisableTransmitChannel>:
{
 8019f8c:	b480      	push	{r7}
 8019f8e:	b083      	sub	sp, #12
 8019f90:	af00      	add	r7, sp, #0
 8019f92:	6078      	str	r0, [r7, #4]
 8019f94:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8019f96:	687b      	ldr	r3, [r7, #4]
 8019f98:	685a      	ldr	r2, [r3, #4]
 8019f9a:	683b      	ldr	r3, [r7, #0]
 8019f9c:	041b      	lsls	r3, r3, #16
 8019f9e:	431a      	orrs	r2, r3
 8019fa0:	687b      	ldr	r3, [r7, #4]
 8019fa2:	605a      	str	r2, [r3, #4]
}
 8019fa4:	bf00      	nop
 8019fa6:	370c      	adds	r7, #12
 8019fa8:	46bd      	mov	sp, r7
 8019faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fae:	4770      	bx	lr

08019fb0 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8019fb0:	b480      	push	{r7}
 8019fb2:	b083      	sub	sp, #12
 8019fb4:	af00      	add	r7, sp, #0
 8019fb6:	6078      	str	r0, [r7, #4]
 8019fb8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	685a      	ldr	r2, [r3, #4]
 8019fbe:	683b      	ldr	r3, [r7, #0]
 8019fc0:	43db      	mvns	r3, r3
 8019fc2:	401a      	ands	r2, r3
 8019fc4:	687b      	ldr	r3, [r7, #4]
 8019fc6:	605a      	str	r2, [r3, #4]
}
 8019fc8:	bf00      	nop
 8019fca:	370c      	adds	r7, #12
 8019fcc:	46bd      	mov	sp, r7
 8019fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fd2:	4770      	bx	lr

08019fd4 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8019fd4:	b480      	push	{r7}
 8019fd6:	b083      	sub	sp, #12
 8019fd8:	af00      	add	r7, sp, #0
 8019fda:	6078      	str	r0, [r7, #4]
 8019fdc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8019fde:	687b      	ldr	r3, [r7, #4]
 8019fe0:	683a      	ldr	r2, [r7, #0]
 8019fe2:	609a      	str	r2, [r3, #8]
}
 8019fe4:	bf00      	nop
 8019fe6:	370c      	adds	r7, #12
 8019fe8:	46bd      	mov	sp, r7
 8019fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fee:	4770      	bx	lr

08019ff0 <LL_C1_IPCC_SetFlag_CHx>:
{
 8019ff0:	b480      	push	{r7}
 8019ff2:	b083      	sub	sp, #12
 8019ff4:	af00      	add	r7, sp, #0
 8019ff6:	6078      	str	r0, [r7, #4]
 8019ff8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8019ffa:	683b      	ldr	r3, [r7, #0]
 8019ffc:	041a      	lsls	r2, r3, #16
 8019ffe:	687b      	ldr	r3, [r7, #4]
 801a000:	609a      	str	r2, [r3, #8]
}
 801a002:	bf00      	nop
 801a004:	370c      	adds	r7, #12
 801a006:	46bd      	mov	sp, r7
 801a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a00c:	4770      	bx	lr

0801a00e <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 801a00e:	b480      	push	{r7}
 801a010:	b083      	sub	sp, #12
 801a012:	af00      	add	r7, sp, #0
 801a014:	6078      	str	r0, [r7, #4]
 801a016:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 801a018:	687b      	ldr	r3, [r7, #4]
 801a01a:	68da      	ldr	r2, [r3, #12]
 801a01c:	683b      	ldr	r3, [r7, #0]
 801a01e:	4013      	ands	r3, r2
 801a020:	683a      	ldr	r2, [r7, #0]
 801a022:	429a      	cmp	r2, r3
 801a024:	d101      	bne.n	801a02a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 801a026:	2301      	movs	r3, #1
 801a028:	e000      	b.n	801a02c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 801a02a:	2300      	movs	r3, #0
}
 801a02c:	4618      	mov	r0, r3
 801a02e:	370c      	adds	r7, #12
 801a030:	46bd      	mov	sp, r7
 801a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a036:	4770      	bx	lr

0801a038 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 801a038:	b480      	push	{r7}
 801a03a:	b083      	sub	sp, #12
 801a03c:	af00      	add	r7, sp, #0
 801a03e:	6078      	str	r0, [r7, #4]
 801a040:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 801a042:	687b      	ldr	r3, [r7, #4]
 801a044:	69da      	ldr	r2, [r3, #28]
 801a046:	683b      	ldr	r3, [r7, #0]
 801a048:	4013      	ands	r3, r2
 801a04a:	683a      	ldr	r2, [r7, #0]
 801a04c:	429a      	cmp	r2, r3
 801a04e:	d101      	bne.n	801a054 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 801a050:	2301      	movs	r3, #1
 801a052:	e000      	b.n	801a056 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 801a054:	2300      	movs	r3, #0
}
 801a056:	4618      	mov	r0, r3
 801a058:	370c      	adds	r7, #12
 801a05a:	46bd      	mov	sp, r7
 801a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a060:	4770      	bx	lr
	...

0801a064 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 801a064:	b580      	push	{r7, lr}
 801a066:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 801a068:	2102      	movs	r1, #2
 801a06a:	4818      	ldr	r0, [pc, #96]	; (801a0cc <HW_IPCC_Rx_Handler+0x68>)
 801a06c:	f7ff ffe4 	bl	801a038 <LL_C2_IPCC_IsActiveFlag_CHx>
 801a070:	4603      	mov	r3, r0
 801a072:	2b00      	cmp	r3, #0
 801a074:	d008      	beq.n	801a088 <HW_IPCC_Rx_Handler+0x24>
 801a076:	4b15      	ldr	r3, [pc, #84]	; (801a0cc <HW_IPCC_Rx_Handler+0x68>)
 801a078:	685b      	ldr	r3, [r3, #4]
 801a07a:	f003 0302 	and.w	r3, r3, #2
 801a07e:	2b00      	cmp	r3, #0
 801a080:	d102      	bne.n	801a088 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 801a082:	f000 f8d5 	bl	801a230 <HW_IPCC_SYS_EvtHandler>
 801a086:	e01e      	b.n	801a0c6 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 801a088:	2101      	movs	r1, #1
 801a08a:	4810      	ldr	r0, [pc, #64]	; (801a0cc <HW_IPCC_Rx_Handler+0x68>)
 801a08c:	f7ff ffd4 	bl	801a038 <LL_C2_IPCC_IsActiveFlag_CHx>
 801a090:	4603      	mov	r3, r0
 801a092:	2b00      	cmp	r3, #0
 801a094:	d008      	beq.n	801a0a8 <HW_IPCC_Rx_Handler+0x44>
 801a096:	4b0d      	ldr	r3, [pc, #52]	; (801a0cc <HW_IPCC_Rx_Handler+0x68>)
 801a098:	685b      	ldr	r3, [r3, #4]
 801a09a:	f003 0301 	and.w	r3, r3, #1
 801a09e:	2b00      	cmp	r3, #0
 801a0a0:	d102      	bne.n	801a0a8 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 801a0a2:	f000 f889 	bl	801a1b8 <HW_IPCC_BLE_EvtHandler>
 801a0a6:	e00e      	b.n	801a0c6 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 801a0a8:	2108      	movs	r1, #8
 801a0aa:	4808      	ldr	r0, [pc, #32]	; (801a0cc <HW_IPCC_Rx_Handler+0x68>)
 801a0ac:	f7ff ffc4 	bl	801a038 <LL_C2_IPCC_IsActiveFlag_CHx>
 801a0b0:	4603      	mov	r3, r0
 801a0b2:	2b00      	cmp	r3, #0
 801a0b4:	d008      	beq.n	801a0c8 <HW_IPCC_Rx_Handler+0x64>
 801a0b6:	4b05      	ldr	r3, [pc, #20]	; (801a0cc <HW_IPCC_Rx_Handler+0x68>)
 801a0b8:	685b      	ldr	r3, [r3, #4]
 801a0ba:	f003 0308 	and.w	r3, r3, #8
 801a0be:	2b00      	cmp	r3, #0
 801a0c0:	d102      	bne.n	801a0c8 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 801a0c2:	f000 f901 	bl	801a2c8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 801a0c6:	bf00      	nop
 801a0c8:	bf00      	nop
}
 801a0ca:	bd80      	pop	{r7, pc}
 801a0cc:	58000c00 	.word	0x58000c00

0801a0d0 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 801a0d0:	b580      	push	{r7, lr}
 801a0d2:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 801a0d4:	2102      	movs	r1, #2
 801a0d6:	4818      	ldr	r0, [pc, #96]	; (801a138 <HW_IPCC_Tx_Handler+0x68>)
 801a0d8:	f7ff ff99 	bl	801a00e <LL_C1_IPCC_IsActiveFlag_CHx>
 801a0dc:	4603      	mov	r3, r0
 801a0de:	2b00      	cmp	r3, #0
 801a0e0:	d108      	bne.n	801a0f4 <HW_IPCC_Tx_Handler+0x24>
 801a0e2:	4b15      	ldr	r3, [pc, #84]	; (801a138 <HW_IPCC_Tx_Handler+0x68>)
 801a0e4:	685b      	ldr	r3, [r3, #4]
 801a0e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a0ea:	2b00      	cmp	r3, #0
 801a0ec:	d102      	bne.n	801a0f4 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 801a0ee:	f000 f893 	bl	801a218 <HW_IPCC_SYS_CmdEvtHandler>
 801a0f2:	e01e      	b.n	801a132 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 801a0f4:	2108      	movs	r1, #8
 801a0f6:	4810      	ldr	r0, [pc, #64]	; (801a138 <HW_IPCC_Tx_Handler+0x68>)
 801a0f8:	f7ff ff89 	bl	801a00e <LL_C1_IPCC_IsActiveFlag_CHx>
 801a0fc:	4603      	mov	r3, r0
 801a0fe:	2b00      	cmp	r3, #0
 801a100:	d108      	bne.n	801a114 <HW_IPCC_Tx_Handler+0x44>
 801a102:	4b0d      	ldr	r3, [pc, #52]	; (801a138 <HW_IPCC_Tx_Handler+0x68>)
 801a104:	685b      	ldr	r3, [r3, #4]
 801a106:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801a10a:	2b00      	cmp	r3, #0
 801a10c:	d102      	bne.n	801a114 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 801a10e:	f000 f8bd 	bl	801a28c <HW_IPCC_MM_FreeBufHandler>
 801a112:	e00e      	b.n	801a132 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 801a114:	2120      	movs	r1, #32
 801a116:	4808      	ldr	r0, [pc, #32]	; (801a138 <HW_IPCC_Tx_Handler+0x68>)
 801a118:	f7ff ff79 	bl	801a00e <LL_C1_IPCC_IsActiveFlag_CHx>
 801a11c:	4603      	mov	r3, r0
 801a11e:	2b00      	cmp	r3, #0
 801a120:	d108      	bne.n	801a134 <HW_IPCC_Tx_Handler+0x64>
 801a122:	4b05      	ldr	r3, [pc, #20]	; (801a138 <HW_IPCC_Tx_Handler+0x68>)
 801a124:	685b      	ldr	r3, [r3, #4]
 801a126:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801a12a:	2b00      	cmp	r3, #0
 801a12c:	d102      	bne.n	801a134 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 801a12e:	f000 f84f 	bl	801a1d0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 801a132:	bf00      	nop
 801a134:	bf00      	nop
}
 801a136:	bd80      	pop	{r7, pc}
 801a138:	58000c00 	.word	0x58000c00

0801a13c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 801a13c:	b580      	push	{r7, lr}
 801a13e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 801a140:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801a144:	f7ff fed3 	bl	8019eee <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 801a148:	f44f 7000 	mov.w	r0, #512	; 0x200
 801a14c:	f7ff fea4 	bl	8019e98 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 801a150:	f44f 7000 	mov.w	r0, #512	; 0x200
 801a154:	f7ff fe8c 	bl	8019e70 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 801a158:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 801a15a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 801a15c:	f7ff fe78 	bl	8019e50 <LL_PWR_EnableBootC2>

  return;
 801a160:	bf00      	nop
}
 801a162:	bd80      	pop	{r7, pc}

0801a164 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 801a164:	b580      	push	{r7, lr}
 801a166:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 801a168:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801a16c:	f7ff fea6 	bl	8019ebc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 801a170:	4806      	ldr	r0, [pc, #24]	; (801a18c <HW_IPCC_Init+0x28>)
 801a172:	f7ff fee8 	bl	8019f46 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 801a176:	4805      	ldr	r0, [pc, #20]	; (801a18c <HW_IPCC_Init+0x28>)
 801a178:	f7ff fed5 	bl	8019f26 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 801a17c:	202c      	movs	r0, #44	; 0x2c
 801a17e:	f7f4 ff34 	bl	800efea <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 801a182:	202d      	movs	r0, #45	; 0x2d
 801a184:	f7f4 ff31 	bl	800efea <HAL_NVIC_EnableIRQ>

  return;
 801a188:	bf00      	nop
}
 801a18a:	bd80      	pop	{r7, pc}
 801a18c:	58000c00 	.word	0x58000c00

0801a190 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 801a190:	b580      	push	{r7, lr}
 801a192:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 801a194:	2101      	movs	r1, #1
 801a196:	4802      	ldr	r0, [pc, #8]	; (801a1a0 <HW_IPCC_BLE_Init+0x10>)
 801a198:	f7ff ff0a 	bl	8019fb0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 801a19c:	bf00      	nop
}
 801a19e:	bd80      	pop	{r7, pc}
 801a1a0:	58000c00 	.word	0x58000c00

0801a1a4 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 801a1a4:	b580      	push	{r7, lr}
 801a1a6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 801a1a8:	2101      	movs	r1, #1
 801a1aa:	4802      	ldr	r0, [pc, #8]	; (801a1b4 <HW_IPCC_BLE_SendCmd+0x10>)
 801a1ac:	f7ff ff20 	bl	8019ff0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 801a1b0:	bf00      	nop
}
 801a1b2:	bd80      	pop	{r7, pc}
 801a1b4:	58000c00 	.word	0x58000c00

0801a1b8 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 801a1b8:	b580      	push	{r7, lr}
 801a1ba:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 801a1bc:	f7fc fc80 	bl	8016ac0 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 801a1c0:	2101      	movs	r1, #1
 801a1c2:	4802      	ldr	r0, [pc, #8]	; (801a1cc <HW_IPCC_BLE_EvtHandler+0x14>)
 801a1c4:	f7ff ff06 	bl	8019fd4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 801a1c8:	bf00      	nop
}
 801a1ca:	bd80      	pop	{r7, pc}
 801a1cc:	58000c00 	.word	0x58000c00

0801a1d0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 801a1d0:	b580      	push	{r7, lr}
 801a1d2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 801a1d4:	2120      	movs	r1, #32
 801a1d6:	4803      	ldr	r0, [pc, #12]	; (801a1e4 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 801a1d8:	f7ff fed8 	bl	8019f8c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 801a1dc:	f7fc fca0 	bl	8016b20 <HW_IPCC_BLE_AclDataAckNot>

  return;
 801a1e0:	bf00      	nop
}
 801a1e2:	bd80      	pop	{r7, pc}
 801a1e4:	58000c00 	.word	0x58000c00

0801a1e8 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 801a1e8:	b580      	push	{r7, lr}
 801a1ea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 801a1ec:	2102      	movs	r1, #2
 801a1ee:	4802      	ldr	r0, [pc, #8]	; (801a1f8 <HW_IPCC_SYS_Init+0x10>)
 801a1f0:	f7ff fede 	bl	8019fb0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 801a1f4:	bf00      	nop
}
 801a1f6:	bd80      	pop	{r7, pc}
 801a1f8:	58000c00 	.word	0x58000c00

0801a1fc <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 801a1fc:	b580      	push	{r7, lr}
 801a1fe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 801a200:	2102      	movs	r1, #2
 801a202:	4804      	ldr	r0, [pc, #16]	; (801a214 <HW_IPCC_SYS_SendCmd+0x18>)
 801a204:	f7ff fef4 	bl	8019ff0 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 801a208:	2102      	movs	r1, #2
 801a20a:	4802      	ldr	r0, [pc, #8]	; (801a214 <HW_IPCC_SYS_SendCmd+0x18>)
 801a20c:	f7ff feab 	bl	8019f66 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 801a210:	bf00      	nop
}
 801a212:	bd80      	pop	{r7, pc}
 801a214:	58000c00 	.word	0x58000c00

0801a218 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 801a218:	b580      	push	{r7, lr}
 801a21a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 801a21c:	2102      	movs	r1, #2
 801a21e:	4803      	ldr	r0, [pc, #12]	; (801a22c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 801a220:	f7ff feb4 	bl	8019f8c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 801a224:	f7fc fccc 	bl	8016bc0 <HW_IPCC_SYS_CmdEvtNot>

  return;
 801a228:	bf00      	nop
}
 801a22a:	bd80      	pop	{r7, pc}
 801a22c:	58000c00 	.word	0x58000c00

0801a230 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 801a230:	b580      	push	{r7, lr}
 801a232:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 801a234:	f7fc fcda 	bl	8016bec <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 801a238:	2102      	movs	r1, #2
 801a23a:	4802      	ldr	r0, [pc, #8]	; (801a244 <HW_IPCC_SYS_EvtHandler+0x14>)
 801a23c:	f7ff feca 	bl	8019fd4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 801a240:	bf00      	nop
}
 801a242:	bd80      	pop	{r7, pc}
 801a244:	58000c00 	.word	0x58000c00

0801a248 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 801a248:	b580      	push	{r7, lr}
 801a24a:	b082      	sub	sp, #8
 801a24c:	af00      	add	r7, sp, #0
 801a24e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 801a250:	2108      	movs	r1, #8
 801a252:	480c      	ldr	r0, [pc, #48]	; (801a284 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 801a254:	f7ff fedb 	bl	801a00e <LL_C1_IPCC_IsActiveFlag_CHx>
 801a258:	4603      	mov	r3, r0
 801a25a:	2b00      	cmp	r3, #0
 801a25c:	d007      	beq.n	801a26e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 801a25e:	4a0a      	ldr	r2, [pc, #40]	; (801a288 <HW_IPCC_MM_SendFreeBuf+0x40>)
 801a260:	687b      	ldr	r3, [r7, #4]
 801a262:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801a264:	2108      	movs	r1, #8
 801a266:	4807      	ldr	r0, [pc, #28]	; (801a284 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 801a268:	f7ff fe7d 	bl	8019f66 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 801a26c:	e006      	b.n	801a27c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 801a26e:	687b      	ldr	r3, [r7, #4]
 801a270:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801a272:	2108      	movs	r1, #8
 801a274:	4803      	ldr	r0, [pc, #12]	; (801a284 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 801a276:	f7ff febb 	bl	8019ff0 <LL_C1_IPCC_SetFlag_CHx>
  return;
 801a27a:	bf00      	nop
}
 801a27c:	3708      	adds	r7, #8
 801a27e:	46bd      	mov	sp, r7
 801a280:	bd80      	pop	{r7, pc}
 801a282:	bf00      	nop
 801a284:	58000c00 	.word	0x58000c00
 801a288:	20000b48 	.word	0x20000b48

0801a28c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 801a28c:	b580      	push	{r7, lr}
 801a28e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801a290:	2108      	movs	r1, #8
 801a292:	4806      	ldr	r0, [pc, #24]	; (801a2ac <HW_IPCC_MM_FreeBufHandler+0x20>)
 801a294:	f7ff fe7a 	bl	8019f8c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 801a298:	4b05      	ldr	r3, [pc, #20]	; (801a2b0 <HW_IPCC_MM_FreeBufHandler+0x24>)
 801a29a:	681b      	ldr	r3, [r3, #0]
 801a29c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801a29e:	2108      	movs	r1, #8
 801a2a0:	4802      	ldr	r0, [pc, #8]	; (801a2ac <HW_IPCC_MM_FreeBufHandler+0x20>)
 801a2a2:	f7ff fea5 	bl	8019ff0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 801a2a6:	bf00      	nop
}
 801a2a8:	bd80      	pop	{r7, pc}
 801a2aa:	bf00      	nop
 801a2ac:	58000c00 	.word	0x58000c00
 801a2b0:	20000b48 	.word	0x20000b48

0801a2b4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 801a2b4:	b580      	push	{r7, lr}
 801a2b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 801a2b8:	2108      	movs	r1, #8
 801a2ba:	4802      	ldr	r0, [pc, #8]	; (801a2c4 <HW_IPCC_TRACES_Init+0x10>)
 801a2bc:	f7ff fe78 	bl	8019fb0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 801a2c0:	bf00      	nop
}
 801a2c2:	bd80      	pop	{r7, pc}
 801a2c4:	58000c00 	.word	0x58000c00

0801a2c8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 801a2c8:	b580      	push	{r7, lr}
 801a2ca:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 801a2cc:	f7fc fd36 	bl	8016d3c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 801a2d0:	2108      	movs	r1, #8
 801a2d2:	4802      	ldr	r0, [pc, #8]	; (801a2dc <HW_IPCC_TRACES_EvtHandler+0x14>)
 801a2d4:	f7ff fe7e 	bl	8019fd4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 801a2d8:	bf00      	nop
}
 801a2da:	bd80      	pop	{r7, pc}
 801a2dc:	58000c00 	.word	0x58000c00

0801a2e0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801a2e0:	b480      	push	{r7}
 801a2e2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801a2e4:	4b05      	ldr	r3, [pc, #20]	; (801a2fc <UTIL_LPM_Init+0x1c>)
 801a2e6:	2200      	movs	r2, #0
 801a2e8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801a2ea:	4b05      	ldr	r3, [pc, #20]	; (801a300 <UTIL_LPM_Init+0x20>)
 801a2ec:	2200      	movs	r2, #0
 801a2ee:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801a2f0:	bf00      	nop
 801a2f2:	46bd      	mov	sp, r7
 801a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2f8:	4770      	bx	lr
 801a2fa:	bf00      	nop
 801a2fc:	20000b4c 	.word	0x20000b4c
 801a300:	20000b50 	.word	0x20000b50

0801a304 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801a304:	b480      	push	{r7}
 801a306:	b087      	sub	sp, #28
 801a308:	af00      	add	r7, sp, #0
 801a30a:	6078      	str	r0, [r7, #4]
 801a30c:	460b      	mov	r3, r1
 801a30e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a310:	f3ef 8310 	mrs	r3, PRIMASK
 801a314:	613b      	str	r3, [r7, #16]
  return(result);
 801a316:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801a318:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a31a:	b672      	cpsid	i
}
 801a31c:	bf00      	nop
  
  switch(state)
 801a31e:	78fb      	ldrb	r3, [r7, #3]
 801a320:	2b00      	cmp	r3, #0
 801a322:	d008      	beq.n	801a336 <UTIL_LPM_SetOffMode+0x32>
 801a324:	2b01      	cmp	r3, #1
 801a326:	d10e      	bne.n	801a346 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801a328:	4b0d      	ldr	r3, [pc, #52]	; (801a360 <UTIL_LPM_SetOffMode+0x5c>)
 801a32a:	681a      	ldr	r2, [r3, #0]
 801a32c:	687b      	ldr	r3, [r7, #4]
 801a32e:	4313      	orrs	r3, r2
 801a330:	4a0b      	ldr	r2, [pc, #44]	; (801a360 <UTIL_LPM_SetOffMode+0x5c>)
 801a332:	6013      	str	r3, [r2, #0]
      break;
 801a334:	e008      	b.n	801a348 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801a336:	687b      	ldr	r3, [r7, #4]
 801a338:	43da      	mvns	r2, r3
 801a33a:	4b09      	ldr	r3, [pc, #36]	; (801a360 <UTIL_LPM_SetOffMode+0x5c>)
 801a33c:	681b      	ldr	r3, [r3, #0]
 801a33e:	4013      	ands	r3, r2
 801a340:	4a07      	ldr	r2, [pc, #28]	; (801a360 <UTIL_LPM_SetOffMode+0x5c>)
 801a342:	6013      	str	r3, [r2, #0]
      break;
 801a344:	e000      	b.n	801a348 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801a346:	bf00      	nop
 801a348:	697b      	ldr	r3, [r7, #20]
 801a34a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a34c:	68fb      	ldr	r3, [r7, #12]
 801a34e:	f383 8810 	msr	PRIMASK, r3
}
 801a352:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801a354:	bf00      	nop
 801a356:	371c      	adds	r7, #28
 801a358:	46bd      	mov	sp, r7
 801a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a35e:	4770      	bx	lr
 801a360:	20000b50 	.word	0x20000b50

0801a364 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801a364:	b580      	push	{r7, lr}
 801a366:	b084      	sub	sp, #16
 801a368:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a36a:	f3ef 8310 	mrs	r3, PRIMASK
 801a36e:	60bb      	str	r3, [r7, #8]
  return(result);
 801a370:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801a372:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801a374:	b672      	cpsid	i
}
 801a376:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801a378:	4b12      	ldr	r3, [pc, #72]	; (801a3c4 <UTIL_LPM_EnterLowPower+0x60>)
 801a37a:	681b      	ldr	r3, [r3, #0]
 801a37c:	2b00      	cmp	r3, #0
 801a37e:	d006      	beq.n	801a38e <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801a380:	4b11      	ldr	r3, [pc, #68]	; (801a3c8 <UTIL_LPM_EnterLowPower+0x64>)
 801a382:	681b      	ldr	r3, [r3, #0]
 801a384:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801a386:	4b10      	ldr	r3, [pc, #64]	; (801a3c8 <UTIL_LPM_EnterLowPower+0x64>)
 801a388:	685b      	ldr	r3, [r3, #4]
 801a38a:	4798      	blx	r3
 801a38c:	e010      	b.n	801a3b0 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801a38e:	4b0f      	ldr	r3, [pc, #60]	; (801a3cc <UTIL_LPM_EnterLowPower+0x68>)
 801a390:	681b      	ldr	r3, [r3, #0]
 801a392:	2b00      	cmp	r3, #0
 801a394:	d006      	beq.n	801a3a4 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801a396:	4b0c      	ldr	r3, [pc, #48]	; (801a3c8 <UTIL_LPM_EnterLowPower+0x64>)
 801a398:	689b      	ldr	r3, [r3, #8]
 801a39a:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801a39c:	4b0a      	ldr	r3, [pc, #40]	; (801a3c8 <UTIL_LPM_EnterLowPower+0x64>)
 801a39e:	68db      	ldr	r3, [r3, #12]
 801a3a0:	4798      	blx	r3
 801a3a2:	e005      	b.n	801a3b0 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801a3a4:	4b08      	ldr	r3, [pc, #32]	; (801a3c8 <UTIL_LPM_EnterLowPower+0x64>)
 801a3a6:	691b      	ldr	r3, [r3, #16]
 801a3a8:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801a3aa:	4b07      	ldr	r3, [pc, #28]	; (801a3c8 <UTIL_LPM_EnterLowPower+0x64>)
 801a3ac:	695b      	ldr	r3, [r3, #20]
 801a3ae:	4798      	blx	r3
 801a3b0:	68fb      	ldr	r3, [r7, #12]
 801a3b2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a3b4:	687b      	ldr	r3, [r7, #4]
 801a3b6:	f383 8810 	msr	PRIMASK, r3
}
 801a3ba:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801a3bc:	bf00      	nop
 801a3be:	3710      	adds	r7, #16
 801a3c0:	46bd      	mov	sp, r7
 801a3c2:	bd80      	pop	{r7, pc}
 801a3c4:	20000b4c 	.word	0x20000b4c
 801a3c8:	08021400 	.word	0x08021400
 801a3cc:	20000b50 	.word	0x20000b50

0801a3d0 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801a3d0:	b580      	push	{r7, lr}
 801a3d2:	b090      	sub	sp, #64	; 0x40
 801a3d4:	af00      	add	r7, sp, #0
 801a3d6:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801a3d8:	4b73      	ldr	r3, [pc, #460]	; (801a5a8 <UTIL_SEQ_Run+0x1d8>)
 801a3da:	681b      	ldr	r3, [r3, #0]
 801a3dc:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801a3de:	4b72      	ldr	r3, [pc, #456]	; (801a5a8 <UTIL_SEQ_Run+0x1d8>)
 801a3e0:	681a      	ldr	r2, [r3, #0]
 801a3e2:	687b      	ldr	r3, [r7, #4]
 801a3e4:	4013      	ands	r3, r2
 801a3e6:	4a70      	ldr	r2, [pc, #448]	; (801a5a8 <UTIL_SEQ_Run+0x1d8>)
 801a3e8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801a3ea:	4b70      	ldr	r3, [pc, #448]	; (801a5ac <UTIL_SEQ_Run+0x1dc>)
 801a3ec:	681b      	ldr	r3, [r3, #0]
 801a3ee:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801a3f0:	4b6f      	ldr	r3, [pc, #444]	; (801a5b0 <UTIL_SEQ_Run+0x1e0>)
 801a3f2:	681b      	ldr	r3, [r3, #0]
 801a3f4:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801a3f6:	4b6f      	ldr	r3, [pc, #444]	; (801a5b4 <UTIL_SEQ_Run+0x1e4>)
 801a3f8:	681b      	ldr	r3, [r3, #0]
 801a3fa:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 801a3fc:	4b6e      	ldr	r3, [pc, #440]	; (801a5b8 <UTIL_SEQ_Run+0x1e8>)
 801a3fe:	681b      	ldr	r3, [r3, #0]
 801a400:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801a402:	e08d      	b.n	801a520 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801a404:	2300      	movs	r3, #0
 801a406:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801a408:	e002      	b.n	801a410 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801a40a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a40c:	3301      	adds	r3, #1
 801a40e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801a410:	4a6a      	ldr	r2, [pc, #424]	; (801a5bc <UTIL_SEQ_Run+0x1ec>)
 801a412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a414:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a41a:	401a      	ands	r2, r3
 801a41c:	4b62      	ldr	r3, [pc, #392]	; (801a5a8 <UTIL_SEQ_Run+0x1d8>)
 801a41e:	681b      	ldr	r3, [r3, #0]
 801a420:	4013      	ands	r3, r2
 801a422:	2b00      	cmp	r3, #0
 801a424:	d0f1      	beq.n	801a40a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801a426:	4a65      	ldr	r2, [pc, #404]	; (801a5bc <UTIL_SEQ_Run+0x1ec>)
 801a428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a42a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a430:	401a      	ands	r2, r3
 801a432:	4b5d      	ldr	r3, [pc, #372]	; (801a5a8 <UTIL_SEQ_Run+0x1d8>)
 801a434:	681b      	ldr	r3, [r3, #0]
 801a436:	4013      	ands	r3, r2
 801a438:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801a43a:	4a60      	ldr	r2, [pc, #384]	; (801a5bc <UTIL_SEQ_Run+0x1ec>)
 801a43c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a43e:	00db      	lsls	r3, r3, #3
 801a440:	4413      	add	r3, r2
 801a442:	685a      	ldr	r2, [r3, #4]
 801a444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a446:	4013      	ands	r3, r2
 801a448:	2b00      	cmp	r3, #0
 801a44a:	d106      	bne.n	801a45a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801a44c:	4a5b      	ldr	r2, [pc, #364]	; (801a5bc <UTIL_SEQ_Run+0x1ec>)
 801a44e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a450:	00db      	lsls	r3, r3, #3
 801a452:	4413      	add	r3, r2
 801a454:	f04f 32ff 	mov.w	r2, #4294967295
 801a458:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801a45a:	4a58      	ldr	r2, [pc, #352]	; (801a5bc <UTIL_SEQ_Run+0x1ec>)
 801a45c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a45e:	00db      	lsls	r3, r3, #3
 801a460:	4413      	add	r3, r2
 801a462:	685a      	ldr	r2, [r3, #4]
 801a464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a466:	4013      	ands	r3, r2
 801a468:	4618      	mov	r0, r3
 801a46a:	f000 f9d9 	bl	801a820 <SEQ_BitPosition>
 801a46e:	4603      	mov	r3, r0
 801a470:	461a      	mov	r2, r3
 801a472:	4b53      	ldr	r3, [pc, #332]	; (801a5c0 <UTIL_SEQ_Run+0x1f0>)
 801a474:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801a476:	4a51      	ldr	r2, [pc, #324]	; (801a5bc <UTIL_SEQ_Run+0x1ec>)
 801a478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a47a:	00db      	lsls	r3, r3, #3
 801a47c:	4413      	add	r3, r2
 801a47e:	685a      	ldr	r2, [r3, #4]
 801a480:	4b4f      	ldr	r3, [pc, #316]	; (801a5c0 <UTIL_SEQ_Run+0x1f0>)
 801a482:	681b      	ldr	r3, [r3, #0]
 801a484:	2101      	movs	r1, #1
 801a486:	fa01 f303 	lsl.w	r3, r1, r3
 801a48a:	43db      	mvns	r3, r3
 801a48c:	401a      	ands	r2, r3
 801a48e:	494b      	ldr	r1, [pc, #300]	; (801a5bc <UTIL_SEQ_Run+0x1ec>)
 801a490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a492:	00db      	lsls	r3, r3, #3
 801a494:	440b      	add	r3, r1
 801a496:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a498:	f3ef 8310 	mrs	r3, PRIMASK
 801a49c:	61bb      	str	r3, [r7, #24]
  return(result);
 801a49e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a4a0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801a4a2:	b672      	cpsid	i
}
 801a4a4:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801a4a6:	4b46      	ldr	r3, [pc, #280]	; (801a5c0 <UTIL_SEQ_Run+0x1f0>)
 801a4a8:	681b      	ldr	r3, [r3, #0]
 801a4aa:	2201      	movs	r2, #1
 801a4ac:	fa02 f303 	lsl.w	r3, r2, r3
 801a4b0:	43da      	mvns	r2, r3
 801a4b2:	4b3e      	ldr	r3, [pc, #248]	; (801a5ac <UTIL_SEQ_Run+0x1dc>)
 801a4b4:	681b      	ldr	r3, [r3, #0]
 801a4b6:	4013      	ands	r3, r2
 801a4b8:	4a3c      	ldr	r2, [pc, #240]	; (801a5ac <UTIL_SEQ_Run+0x1dc>)
 801a4ba:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801a4bc:	2302      	movs	r3, #2
 801a4be:	63fb      	str	r3, [r7, #60]	; 0x3c
 801a4c0:	e013      	b.n	801a4ea <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801a4c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a4c4:	3b01      	subs	r3, #1
 801a4c6:	4a3d      	ldr	r2, [pc, #244]	; (801a5bc <UTIL_SEQ_Run+0x1ec>)
 801a4c8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801a4cc:	4b3c      	ldr	r3, [pc, #240]	; (801a5c0 <UTIL_SEQ_Run+0x1f0>)
 801a4ce:	681b      	ldr	r3, [r3, #0]
 801a4d0:	2201      	movs	r2, #1
 801a4d2:	fa02 f303 	lsl.w	r3, r2, r3
 801a4d6:	43da      	mvns	r2, r3
 801a4d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a4da:	3b01      	subs	r3, #1
 801a4dc:	400a      	ands	r2, r1
 801a4de:	4937      	ldr	r1, [pc, #220]	; (801a5bc <UTIL_SEQ_Run+0x1ec>)
 801a4e0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801a4e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a4e6:	3b01      	subs	r3, #1
 801a4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 801a4ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a4ec:	2b00      	cmp	r3, #0
 801a4ee:	d1e8      	bne.n	801a4c2 <UTIL_SEQ_Run+0xf2>
 801a4f0:	6a3b      	ldr	r3, [r7, #32]
 801a4f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a4f4:	697b      	ldr	r3, [r7, #20]
 801a4f6:	f383 8810 	msr	PRIMASK, r3
}
 801a4fa:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801a4fc:	4b30      	ldr	r3, [pc, #192]	; (801a5c0 <UTIL_SEQ_Run+0x1f0>)
 801a4fe:	681b      	ldr	r3, [r3, #0]
 801a500:	4a30      	ldr	r2, [pc, #192]	; (801a5c4 <UTIL_SEQ_Run+0x1f4>)
 801a502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a506:	4798      	blx	r3

    local_taskset = TaskSet;
 801a508:	4b28      	ldr	r3, [pc, #160]	; (801a5ac <UTIL_SEQ_Run+0x1dc>)
 801a50a:	681b      	ldr	r3, [r3, #0]
 801a50c:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801a50e:	4b28      	ldr	r3, [pc, #160]	; (801a5b0 <UTIL_SEQ_Run+0x1e0>)
 801a510:	681b      	ldr	r3, [r3, #0]
 801a512:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801a514:	4b27      	ldr	r3, [pc, #156]	; (801a5b4 <UTIL_SEQ_Run+0x1e4>)
 801a516:	681b      	ldr	r3, [r3, #0]
 801a518:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801a51a:	4b27      	ldr	r3, [pc, #156]	; (801a5b8 <UTIL_SEQ_Run+0x1e8>)
 801a51c:	681b      	ldr	r3, [r3, #0]
 801a51e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801a520:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a524:	401a      	ands	r2, r3
 801a526:	4b20      	ldr	r3, [pc, #128]	; (801a5a8 <UTIL_SEQ_Run+0x1d8>)
 801a528:	681b      	ldr	r3, [r3, #0]
 801a52a:	4013      	ands	r3, r2
 801a52c:	2b00      	cmp	r3, #0
 801a52e:	d005      	beq.n	801a53c <UTIL_SEQ_Run+0x16c>
 801a530:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a534:	4013      	ands	r3, r2
 801a536:	2b00      	cmp	r3, #0
 801a538:	f43f af64 	beq.w	801a404 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801a53c:	4b20      	ldr	r3, [pc, #128]	; (801a5c0 <UTIL_SEQ_Run+0x1f0>)
 801a53e:	f04f 32ff 	mov.w	r2, #4294967295
 801a542:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801a544:	f000 f95e 	bl	801a804 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a548:	f3ef 8310 	mrs	r3, PRIMASK
 801a54c:	613b      	str	r3, [r7, #16]
  return(result);
 801a54e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801a550:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a552:	b672      	cpsid	i
}
 801a554:	bf00      	nop
  local_taskset = TaskSet;
 801a556:	4b15      	ldr	r3, [pc, #84]	; (801a5ac <UTIL_SEQ_Run+0x1dc>)
 801a558:	681b      	ldr	r3, [r3, #0]
 801a55a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801a55c:	4b14      	ldr	r3, [pc, #80]	; (801a5b0 <UTIL_SEQ_Run+0x1e0>)
 801a55e:	681b      	ldr	r3, [r3, #0]
 801a560:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801a562:	4b14      	ldr	r3, [pc, #80]	; (801a5b4 <UTIL_SEQ_Run+0x1e4>)
 801a564:	681b      	ldr	r3, [r3, #0]
 801a566:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801a568:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a56c:	401a      	ands	r2, r3
 801a56e:	4b0e      	ldr	r3, [pc, #56]	; (801a5a8 <UTIL_SEQ_Run+0x1d8>)
 801a570:	681b      	ldr	r3, [r3, #0]
 801a572:	4013      	ands	r3, r2
 801a574:	2b00      	cmp	r3, #0
 801a576:	d107      	bne.n	801a588 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801a578:	4b0f      	ldr	r3, [pc, #60]	; (801a5b8 <UTIL_SEQ_Run+0x1e8>)
 801a57a:	681a      	ldr	r2, [r3, #0]
 801a57c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a57e:	4013      	ands	r3, r2
 801a580:	2b00      	cmp	r3, #0
 801a582:	d101      	bne.n	801a588 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801a584:	f7ef ff7a 	bl	800a47c <UTIL_SEQ_Idle>
 801a588:	69fb      	ldr	r3, [r7, #28]
 801a58a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a58c:	68fb      	ldr	r3, [r7, #12]
 801a58e:	f383 8810 	msr	PRIMASK, r3
}
 801a592:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801a594:	f000 f93d 	bl	801a812 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801a598:	4a03      	ldr	r2, [pc, #12]	; (801a5a8 <UTIL_SEQ_Run+0x1d8>)
 801a59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a59c:	6013      	str	r3, [r2, #0]

  return;
 801a59e:	bf00      	nop
}
 801a5a0:	3740      	adds	r7, #64	; 0x40
 801a5a2:	46bd      	mov	sp, r7
 801a5a4:	bd80      	pop	{r7, pc}
 801a5a6:	bf00      	nop
 801a5a8:	200000f0 	.word	0x200000f0
 801a5ac:	20000b54 	.word	0x20000b54
 801a5b0:	20000b58 	.word	0x20000b58
 801a5b4:	200000ec 	.word	0x200000ec
 801a5b8:	20000b5c 	.word	0x20000b5c
 801a5bc:	20000be4 	.word	0x20000be4
 801a5c0:	20000b60 	.word	0x20000b60
 801a5c4:	20000b64 	.word	0x20000b64

0801a5c8 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801a5c8:	b580      	push	{r7, lr}
 801a5ca:	b088      	sub	sp, #32
 801a5cc:	af00      	add	r7, sp, #0
 801a5ce:	60f8      	str	r0, [r7, #12]
 801a5d0:	60b9      	str	r1, [r7, #8]
 801a5d2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a5d4:	f3ef 8310 	mrs	r3, PRIMASK
 801a5d8:	617b      	str	r3, [r7, #20]
  return(result);
 801a5da:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801a5dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a5de:	b672      	cpsid	i
}
 801a5e0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801a5e2:	68f8      	ldr	r0, [r7, #12]
 801a5e4:	f000 f91c 	bl	801a820 <SEQ_BitPosition>
 801a5e8:	4603      	mov	r3, r0
 801a5ea:	4619      	mov	r1, r3
 801a5ec:	4a06      	ldr	r2, [pc, #24]	; (801a608 <UTIL_SEQ_RegTask+0x40>)
 801a5ee:	687b      	ldr	r3, [r7, #4]
 801a5f0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801a5f4:	69fb      	ldr	r3, [r7, #28]
 801a5f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a5f8:	69bb      	ldr	r3, [r7, #24]
 801a5fa:	f383 8810 	msr	PRIMASK, r3
}
 801a5fe:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801a600:	bf00      	nop
}
 801a602:	3720      	adds	r7, #32
 801a604:	46bd      	mov	sp, r7
 801a606:	bd80      	pop	{r7, pc}
 801a608:	20000b64 	.word	0x20000b64

0801a60c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801a60c:	b480      	push	{r7}
 801a60e:	b087      	sub	sp, #28
 801a610:	af00      	add	r7, sp, #0
 801a612:	6078      	str	r0, [r7, #4]
 801a614:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a616:	f3ef 8310 	mrs	r3, PRIMASK
 801a61a:	60fb      	str	r3, [r7, #12]
  return(result);
 801a61c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a61e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a620:	b672      	cpsid	i
}
 801a622:	bf00      	nop

  TaskSet |= TaskId_bm;
 801a624:	4b0d      	ldr	r3, [pc, #52]	; (801a65c <UTIL_SEQ_SetTask+0x50>)
 801a626:	681a      	ldr	r2, [r3, #0]
 801a628:	687b      	ldr	r3, [r7, #4]
 801a62a:	4313      	orrs	r3, r2
 801a62c:	4a0b      	ldr	r2, [pc, #44]	; (801a65c <UTIL_SEQ_SetTask+0x50>)
 801a62e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801a630:	4a0b      	ldr	r2, [pc, #44]	; (801a660 <UTIL_SEQ_SetTask+0x54>)
 801a632:	683b      	ldr	r3, [r7, #0]
 801a634:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	431a      	orrs	r2, r3
 801a63c:	4908      	ldr	r1, [pc, #32]	; (801a660 <UTIL_SEQ_SetTask+0x54>)
 801a63e:	683b      	ldr	r3, [r7, #0]
 801a640:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801a644:	697b      	ldr	r3, [r7, #20]
 801a646:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a648:	693b      	ldr	r3, [r7, #16]
 801a64a:	f383 8810 	msr	PRIMASK, r3
}
 801a64e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801a650:	bf00      	nop
}
 801a652:	371c      	adds	r7, #28
 801a654:	46bd      	mov	sp, r7
 801a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a65a:	4770      	bx	lr
 801a65c:	20000b54 	.word	0x20000b54
 801a660:	20000be4 	.word	0x20000be4

0801a664 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 801a664:	b480      	push	{r7}
 801a666:	b087      	sub	sp, #28
 801a668:	af00      	add	r7, sp, #0
 801a66a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a66c:	f3ef 8310 	mrs	r3, PRIMASK
 801a670:	60fb      	str	r3, [r7, #12]
  return(result);
 801a672:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a674:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a676:	b672      	cpsid	i
}
 801a678:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 801a67a:	687b      	ldr	r3, [r7, #4]
 801a67c:	43da      	mvns	r2, r3
 801a67e:	4b08      	ldr	r3, [pc, #32]	; (801a6a0 <UTIL_SEQ_PauseTask+0x3c>)
 801a680:	681b      	ldr	r3, [r3, #0]
 801a682:	4013      	ands	r3, r2
 801a684:	4a06      	ldr	r2, [pc, #24]	; (801a6a0 <UTIL_SEQ_PauseTask+0x3c>)
 801a686:	6013      	str	r3, [r2, #0]
 801a688:	697b      	ldr	r3, [r7, #20]
 801a68a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a68c:	693b      	ldr	r3, [r7, #16]
 801a68e:	f383 8810 	msr	PRIMASK, r3
}
 801a692:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801a694:	bf00      	nop
}
 801a696:	371c      	adds	r7, #28
 801a698:	46bd      	mov	sp, r7
 801a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a69e:	4770      	bx	lr
 801a6a0:	200000ec 	.word	0x200000ec

0801a6a4 <UTIL_SEQ_IsPauseTask>:

uint32_t UTIL_SEQ_IsPauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 801a6a4:	b480      	push	{r7}
 801a6a6:	b087      	sub	sp, #28
 801a6a8:	af00      	add	r7, sp, #0
 801a6aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a6ac:	f3ef 8310 	mrs	r3, PRIMASK
 801a6b0:	60bb      	str	r3, [r7, #8]
  return(result);
 801a6b2:	68bb      	ldr	r3, [r7, #8]
  uint32_t _status;
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a6b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a6b6:	b672      	cpsid	i
}
 801a6b8:	bf00      	nop

  _status = ((TaskMask & TaskId_bm) == TaskId_bm) ? 0u:1u;
 801a6ba:	4b0c      	ldr	r3, [pc, #48]	; (801a6ec <UTIL_SEQ_IsPauseTask+0x48>)
 801a6bc:	681a      	ldr	r2, [r3, #0]
 801a6be:	687b      	ldr	r3, [r7, #4]
 801a6c0:	4013      	ands	r3, r2
 801a6c2:	687a      	ldr	r2, [r7, #4]
 801a6c4:	429a      	cmp	r2, r3
 801a6c6:	bf14      	ite	ne
 801a6c8:	2301      	movne	r3, #1
 801a6ca:	2300      	moveq	r3, #0
 801a6cc:	b2db      	uxtb	r3, r3
 801a6ce:	613b      	str	r3, [r7, #16]
 801a6d0:	697b      	ldr	r3, [r7, #20]
 801a6d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a6d4:	68fb      	ldr	r3, [r7, #12]
 801a6d6:	f383 8810 	msr	PRIMASK, r3
}
 801a6da:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
 801a6dc:	693b      	ldr	r3, [r7, #16]
}
 801a6de:	4618      	mov	r0, r3
 801a6e0:	371c      	adds	r7, #28
 801a6e2:	46bd      	mov	sp, r7
 801a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6e8:	4770      	bx	lr
 801a6ea:	bf00      	nop
 801a6ec:	200000ec 	.word	0x200000ec

0801a6f0 <UTIL_SEQ_ResumeTask>:

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 801a6f0:	b480      	push	{r7}
 801a6f2:	b087      	sub	sp, #28
 801a6f4:	af00      	add	r7, sp, #0
 801a6f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a6f8:	f3ef 8310 	mrs	r3, PRIMASK
 801a6fc:	60fb      	str	r3, [r7, #12]
  return(result);
 801a6fe:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a700:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a702:	b672      	cpsid	i
}
 801a704:	bf00      	nop

  TaskMask |= TaskId_bm;
 801a706:	4b09      	ldr	r3, [pc, #36]	; (801a72c <UTIL_SEQ_ResumeTask+0x3c>)
 801a708:	681a      	ldr	r2, [r3, #0]
 801a70a:	687b      	ldr	r3, [r7, #4]
 801a70c:	4313      	orrs	r3, r2
 801a70e:	4a07      	ldr	r2, [pc, #28]	; (801a72c <UTIL_SEQ_ResumeTask+0x3c>)
 801a710:	6013      	str	r3, [r2, #0]
 801a712:	697b      	ldr	r3, [r7, #20]
 801a714:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a716:	693b      	ldr	r3, [r7, #16]
 801a718:	f383 8810 	msr	PRIMASK, r3
}
 801a71c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801a71e:	bf00      	nop
}
 801a720:	371c      	adds	r7, #28
 801a722:	46bd      	mov	sp, r7
 801a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a728:	4770      	bx	lr
 801a72a:	bf00      	nop
 801a72c:	200000ec 	.word	0x200000ec

0801a730 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 801a730:	b480      	push	{r7}
 801a732:	b087      	sub	sp, #28
 801a734:	af00      	add	r7, sp, #0
 801a736:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a738:	f3ef 8310 	mrs	r3, PRIMASK
 801a73c:	60fb      	str	r3, [r7, #12]
  return(result);
 801a73e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a740:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a742:	b672      	cpsid	i
}
 801a744:	bf00      	nop

  EvtSet |= EvtId_bm;
 801a746:	4b09      	ldr	r3, [pc, #36]	; (801a76c <UTIL_SEQ_SetEvt+0x3c>)
 801a748:	681a      	ldr	r2, [r3, #0]
 801a74a:	687b      	ldr	r3, [r7, #4]
 801a74c:	4313      	orrs	r3, r2
 801a74e:	4a07      	ldr	r2, [pc, #28]	; (801a76c <UTIL_SEQ_SetEvt+0x3c>)
 801a750:	6013      	str	r3, [r2, #0]
 801a752:	697b      	ldr	r3, [r7, #20]
 801a754:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a756:	693b      	ldr	r3, [r7, #16]
 801a758:	f383 8810 	msr	PRIMASK, r3
}
 801a75c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801a75e:	bf00      	nop
}
 801a760:	371c      	adds	r7, #28
 801a762:	46bd      	mov	sp, r7
 801a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a768:	4770      	bx	lr
 801a76a:	bf00      	nop
 801a76c:	20000b58 	.word	0x20000b58

0801a770 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 801a770:	b580      	push	{r7, lr}
 801a772:	b088      	sub	sp, #32
 801a774:	af00      	add	r7, sp, #0
 801a776:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 801a778:	4b1f      	ldr	r3, [pc, #124]	; (801a7f8 <UTIL_SEQ_WaitEvt+0x88>)
 801a77a:	681b      	ldr	r3, [r3, #0]
 801a77c:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 801a77e:	4b1e      	ldr	r3, [pc, #120]	; (801a7f8 <UTIL_SEQ_WaitEvt+0x88>)
 801a780:	681b      	ldr	r3, [r3, #0]
 801a782:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a786:	d102      	bne.n	801a78e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 801a788:	2300      	movs	r3, #0
 801a78a:	61fb      	str	r3, [r7, #28]
 801a78c:	e005      	b.n	801a79a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 801a78e:	4b1a      	ldr	r3, [pc, #104]	; (801a7f8 <UTIL_SEQ_WaitEvt+0x88>)
 801a790:	681b      	ldr	r3, [r3, #0]
 801a792:	2201      	movs	r2, #1
 801a794:	fa02 f303 	lsl.w	r3, r2, r3
 801a798:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 801a79a:	4b18      	ldr	r3, [pc, #96]	; (801a7fc <UTIL_SEQ_WaitEvt+0x8c>)
 801a79c:	681b      	ldr	r3, [r3, #0]
 801a79e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 801a7a0:	4a16      	ldr	r2, [pc, #88]	; (801a7fc <UTIL_SEQ_WaitEvt+0x8c>)
 801a7a2:	687b      	ldr	r3, [r7, #4]
 801a7a4:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 801a7a6:	e003      	b.n	801a7b0 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 801a7a8:	6879      	ldr	r1, [r7, #4]
 801a7aa:	69f8      	ldr	r0, [r7, #28]
 801a7ac:	f7ef fe6c 	bl	800a488 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 801a7b0:	4b13      	ldr	r3, [pc, #76]	; (801a800 <UTIL_SEQ_WaitEvt+0x90>)
 801a7b2:	681a      	ldr	r2, [r3, #0]
 801a7b4:	687b      	ldr	r3, [r7, #4]
 801a7b6:	4013      	ands	r3, r2
 801a7b8:	2b00      	cmp	r3, #0
 801a7ba:	d0f5      	beq.n	801a7a8 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 801a7bc:	4a0e      	ldr	r2, [pc, #56]	; (801a7f8 <UTIL_SEQ_WaitEvt+0x88>)
 801a7be:	69bb      	ldr	r3, [r7, #24]
 801a7c0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a7c2:	f3ef 8310 	mrs	r3, PRIMASK
 801a7c6:	60bb      	str	r3, [r7, #8]
  return(result);
 801a7c8:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a7ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801a7cc:	b672      	cpsid	i
}
 801a7ce:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 801a7d0:	687b      	ldr	r3, [r7, #4]
 801a7d2:	43da      	mvns	r2, r3
 801a7d4:	4b0a      	ldr	r3, [pc, #40]	; (801a800 <UTIL_SEQ_WaitEvt+0x90>)
 801a7d6:	681b      	ldr	r3, [r3, #0]
 801a7d8:	4013      	ands	r3, r2
 801a7da:	4a09      	ldr	r2, [pc, #36]	; (801a800 <UTIL_SEQ_WaitEvt+0x90>)
 801a7dc:	6013      	str	r3, [r2, #0]
 801a7de:	693b      	ldr	r3, [r7, #16]
 801a7e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a7e2:	68fb      	ldr	r3, [r7, #12]
 801a7e4:	f383 8810 	msr	PRIMASK, r3
}
 801a7e8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 801a7ea:	4a04      	ldr	r2, [pc, #16]	; (801a7fc <UTIL_SEQ_WaitEvt+0x8c>)
 801a7ec:	697b      	ldr	r3, [r7, #20]
 801a7ee:	6013      	str	r3, [r2, #0]
  return;
 801a7f0:	bf00      	nop
}
 801a7f2:	3720      	adds	r7, #32
 801a7f4:	46bd      	mov	sp, r7
 801a7f6:	bd80      	pop	{r7, pc}
 801a7f8:	20000b60 	.word	0x20000b60
 801a7fc:	20000b5c 	.word	0x20000b5c
 801a800:	20000b58 	.word	0x20000b58

0801a804 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801a804:	b480      	push	{r7}
 801a806:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801a808:	bf00      	nop
}
 801a80a:	46bd      	mov	sp, r7
 801a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a810:	4770      	bx	lr

0801a812 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801a812:	b480      	push	{r7}
 801a814:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801a816:	bf00      	nop
}
 801a818:	46bd      	mov	sp, r7
 801a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a81e:	4770      	bx	lr

0801a820 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801a820:	b480      	push	{r7}
 801a822:	b085      	sub	sp, #20
 801a824:	af00      	add	r7, sp, #0
 801a826:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801a828:	2300      	movs	r3, #0
 801a82a:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801a830:	68bb      	ldr	r3, [r7, #8]
 801a832:	0c1b      	lsrs	r3, r3, #16
 801a834:	041b      	lsls	r3, r3, #16
 801a836:	2b00      	cmp	r3, #0
 801a838:	d104      	bne.n	801a844 <SEQ_BitPosition+0x24>
 801a83a:	2310      	movs	r3, #16
 801a83c:	73fb      	strb	r3, [r7, #15]
 801a83e:	68bb      	ldr	r3, [r7, #8]
 801a840:	041b      	lsls	r3, r3, #16
 801a842:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801a844:	68bb      	ldr	r3, [r7, #8]
 801a846:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801a84a:	2b00      	cmp	r3, #0
 801a84c:	d105      	bne.n	801a85a <SEQ_BitPosition+0x3a>
 801a84e:	7bfb      	ldrb	r3, [r7, #15]
 801a850:	3308      	adds	r3, #8
 801a852:	73fb      	strb	r3, [r7, #15]
 801a854:	68bb      	ldr	r3, [r7, #8]
 801a856:	021b      	lsls	r3, r3, #8
 801a858:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801a85a:	68bb      	ldr	r3, [r7, #8]
 801a85c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801a860:	2b00      	cmp	r3, #0
 801a862:	d105      	bne.n	801a870 <SEQ_BitPosition+0x50>
 801a864:	7bfb      	ldrb	r3, [r7, #15]
 801a866:	3304      	adds	r3, #4
 801a868:	73fb      	strb	r3, [r7, #15]
 801a86a:	68bb      	ldr	r3, [r7, #8]
 801a86c:	011b      	lsls	r3, r3, #4
 801a86e:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801a870:	68bb      	ldr	r3, [r7, #8]
 801a872:	0f1b      	lsrs	r3, r3, #28
 801a874:	4a07      	ldr	r2, [pc, #28]	; (801a894 <SEQ_BitPosition+0x74>)
 801a876:	5cd2      	ldrb	r2, [r2, r3]
 801a878:	7bfb      	ldrb	r3, [r7, #15]
 801a87a:	4413      	add	r3, r2
 801a87c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801a87e:	7bfb      	ldrb	r3, [r7, #15]
 801a880:	f1c3 031f 	rsb	r3, r3, #31
 801a884:	b2db      	uxtb	r3, r3
}
 801a886:	4618      	mov	r0, r3
 801a888:	3714      	adds	r7, #20
 801a88a:	46bd      	mov	sp, r7
 801a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a890:	4770      	bx	lr
 801a892:	bf00      	nop
 801a894:	08021508 	.word	0x08021508

0801a898 <__cvt>:
 801a898:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a89c:	ec55 4b10 	vmov	r4, r5, d0
 801a8a0:	2d00      	cmp	r5, #0
 801a8a2:	460e      	mov	r6, r1
 801a8a4:	4619      	mov	r1, r3
 801a8a6:	462b      	mov	r3, r5
 801a8a8:	bfbb      	ittet	lt
 801a8aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801a8ae:	461d      	movlt	r5, r3
 801a8b0:	2300      	movge	r3, #0
 801a8b2:	232d      	movlt	r3, #45	; 0x2d
 801a8b4:	700b      	strb	r3, [r1, #0]
 801a8b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a8b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801a8bc:	4691      	mov	r9, r2
 801a8be:	f023 0820 	bic.w	r8, r3, #32
 801a8c2:	bfbc      	itt	lt
 801a8c4:	4622      	movlt	r2, r4
 801a8c6:	4614      	movlt	r4, r2
 801a8c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801a8cc:	d005      	beq.n	801a8da <__cvt+0x42>
 801a8ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801a8d2:	d100      	bne.n	801a8d6 <__cvt+0x3e>
 801a8d4:	3601      	adds	r6, #1
 801a8d6:	2102      	movs	r1, #2
 801a8d8:	e000      	b.n	801a8dc <__cvt+0x44>
 801a8da:	2103      	movs	r1, #3
 801a8dc:	ab03      	add	r3, sp, #12
 801a8de:	9301      	str	r3, [sp, #4]
 801a8e0:	ab02      	add	r3, sp, #8
 801a8e2:	9300      	str	r3, [sp, #0]
 801a8e4:	ec45 4b10 	vmov	d0, r4, r5
 801a8e8:	4653      	mov	r3, sl
 801a8ea:	4632      	mov	r2, r6
 801a8ec:	f001 f9cc 	bl	801bc88 <_dtoa_r>
 801a8f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801a8f4:	4607      	mov	r7, r0
 801a8f6:	d102      	bne.n	801a8fe <__cvt+0x66>
 801a8f8:	f019 0f01 	tst.w	r9, #1
 801a8fc:	d022      	beq.n	801a944 <__cvt+0xac>
 801a8fe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801a902:	eb07 0906 	add.w	r9, r7, r6
 801a906:	d110      	bne.n	801a92a <__cvt+0x92>
 801a908:	783b      	ldrb	r3, [r7, #0]
 801a90a:	2b30      	cmp	r3, #48	; 0x30
 801a90c:	d10a      	bne.n	801a924 <__cvt+0x8c>
 801a90e:	2200      	movs	r2, #0
 801a910:	2300      	movs	r3, #0
 801a912:	4620      	mov	r0, r4
 801a914:	4629      	mov	r1, r5
 801a916:	f7ee fae7 	bl	8008ee8 <__aeabi_dcmpeq>
 801a91a:	b918      	cbnz	r0, 801a924 <__cvt+0x8c>
 801a91c:	f1c6 0601 	rsb	r6, r6, #1
 801a920:	f8ca 6000 	str.w	r6, [sl]
 801a924:	f8da 3000 	ldr.w	r3, [sl]
 801a928:	4499      	add	r9, r3
 801a92a:	2200      	movs	r2, #0
 801a92c:	2300      	movs	r3, #0
 801a92e:	4620      	mov	r0, r4
 801a930:	4629      	mov	r1, r5
 801a932:	f7ee fad9 	bl	8008ee8 <__aeabi_dcmpeq>
 801a936:	b108      	cbz	r0, 801a93c <__cvt+0xa4>
 801a938:	f8cd 900c 	str.w	r9, [sp, #12]
 801a93c:	2230      	movs	r2, #48	; 0x30
 801a93e:	9b03      	ldr	r3, [sp, #12]
 801a940:	454b      	cmp	r3, r9
 801a942:	d307      	bcc.n	801a954 <__cvt+0xbc>
 801a944:	9b03      	ldr	r3, [sp, #12]
 801a946:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a948:	1bdb      	subs	r3, r3, r7
 801a94a:	4638      	mov	r0, r7
 801a94c:	6013      	str	r3, [r2, #0]
 801a94e:	b004      	add	sp, #16
 801a950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a954:	1c59      	adds	r1, r3, #1
 801a956:	9103      	str	r1, [sp, #12]
 801a958:	701a      	strb	r2, [r3, #0]
 801a95a:	e7f0      	b.n	801a93e <__cvt+0xa6>

0801a95c <__exponent>:
 801a95c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a95e:	4603      	mov	r3, r0
 801a960:	2900      	cmp	r1, #0
 801a962:	bfb8      	it	lt
 801a964:	4249      	neglt	r1, r1
 801a966:	f803 2b02 	strb.w	r2, [r3], #2
 801a96a:	bfb4      	ite	lt
 801a96c:	222d      	movlt	r2, #45	; 0x2d
 801a96e:	222b      	movge	r2, #43	; 0x2b
 801a970:	2909      	cmp	r1, #9
 801a972:	7042      	strb	r2, [r0, #1]
 801a974:	dd2a      	ble.n	801a9cc <__exponent+0x70>
 801a976:	f10d 0207 	add.w	r2, sp, #7
 801a97a:	4617      	mov	r7, r2
 801a97c:	260a      	movs	r6, #10
 801a97e:	4694      	mov	ip, r2
 801a980:	fb91 f5f6 	sdiv	r5, r1, r6
 801a984:	fb06 1415 	mls	r4, r6, r5, r1
 801a988:	3430      	adds	r4, #48	; 0x30
 801a98a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801a98e:	460c      	mov	r4, r1
 801a990:	2c63      	cmp	r4, #99	; 0x63
 801a992:	f102 32ff 	add.w	r2, r2, #4294967295
 801a996:	4629      	mov	r1, r5
 801a998:	dcf1      	bgt.n	801a97e <__exponent+0x22>
 801a99a:	3130      	adds	r1, #48	; 0x30
 801a99c:	f1ac 0402 	sub.w	r4, ip, #2
 801a9a0:	f802 1c01 	strb.w	r1, [r2, #-1]
 801a9a4:	1c41      	adds	r1, r0, #1
 801a9a6:	4622      	mov	r2, r4
 801a9a8:	42ba      	cmp	r2, r7
 801a9aa:	d30a      	bcc.n	801a9c2 <__exponent+0x66>
 801a9ac:	f10d 0209 	add.w	r2, sp, #9
 801a9b0:	eba2 020c 	sub.w	r2, r2, ip
 801a9b4:	42bc      	cmp	r4, r7
 801a9b6:	bf88      	it	hi
 801a9b8:	2200      	movhi	r2, #0
 801a9ba:	4413      	add	r3, r2
 801a9bc:	1a18      	subs	r0, r3, r0
 801a9be:	b003      	add	sp, #12
 801a9c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a9c2:	f812 5b01 	ldrb.w	r5, [r2], #1
 801a9c6:	f801 5f01 	strb.w	r5, [r1, #1]!
 801a9ca:	e7ed      	b.n	801a9a8 <__exponent+0x4c>
 801a9cc:	2330      	movs	r3, #48	; 0x30
 801a9ce:	3130      	adds	r1, #48	; 0x30
 801a9d0:	7083      	strb	r3, [r0, #2]
 801a9d2:	70c1      	strb	r1, [r0, #3]
 801a9d4:	1d03      	adds	r3, r0, #4
 801a9d6:	e7f1      	b.n	801a9bc <__exponent+0x60>

0801a9d8 <_printf_float>:
 801a9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9dc:	ed2d 8b02 	vpush	{d8}
 801a9e0:	b08d      	sub	sp, #52	; 0x34
 801a9e2:	460c      	mov	r4, r1
 801a9e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801a9e8:	4616      	mov	r6, r2
 801a9ea:	461f      	mov	r7, r3
 801a9ec:	4605      	mov	r5, r0
 801a9ee:	f001 f835 	bl	801ba5c <_localeconv_r>
 801a9f2:	f8d0 a000 	ldr.w	sl, [r0]
 801a9f6:	4650      	mov	r0, sl
 801a9f8:	f7ed fe4a 	bl	8008690 <strlen>
 801a9fc:	2300      	movs	r3, #0
 801a9fe:	930a      	str	r3, [sp, #40]	; 0x28
 801aa00:	6823      	ldr	r3, [r4, #0]
 801aa02:	9305      	str	r3, [sp, #20]
 801aa04:	f8d8 3000 	ldr.w	r3, [r8]
 801aa08:	f894 b018 	ldrb.w	fp, [r4, #24]
 801aa0c:	3307      	adds	r3, #7
 801aa0e:	f023 0307 	bic.w	r3, r3, #7
 801aa12:	f103 0208 	add.w	r2, r3, #8
 801aa16:	f8c8 2000 	str.w	r2, [r8]
 801aa1a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801aa1e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801aa22:	9307      	str	r3, [sp, #28]
 801aa24:	f8cd 8018 	str.w	r8, [sp, #24]
 801aa28:	ee08 0a10 	vmov	s16, r0
 801aa2c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 801aa30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801aa34:	4b9e      	ldr	r3, [pc, #632]	; (801acb0 <_printf_float+0x2d8>)
 801aa36:	f04f 32ff 	mov.w	r2, #4294967295
 801aa3a:	f7ee fa87 	bl	8008f4c <__aeabi_dcmpun>
 801aa3e:	bb88      	cbnz	r0, 801aaa4 <_printf_float+0xcc>
 801aa40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801aa44:	4b9a      	ldr	r3, [pc, #616]	; (801acb0 <_printf_float+0x2d8>)
 801aa46:	f04f 32ff 	mov.w	r2, #4294967295
 801aa4a:	f7ee fa61 	bl	8008f10 <__aeabi_dcmple>
 801aa4e:	bb48      	cbnz	r0, 801aaa4 <_printf_float+0xcc>
 801aa50:	2200      	movs	r2, #0
 801aa52:	2300      	movs	r3, #0
 801aa54:	4640      	mov	r0, r8
 801aa56:	4649      	mov	r1, r9
 801aa58:	f7ee fa50 	bl	8008efc <__aeabi_dcmplt>
 801aa5c:	b110      	cbz	r0, 801aa64 <_printf_float+0x8c>
 801aa5e:	232d      	movs	r3, #45	; 0x2d
 801aa60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801aa64:	4a93      	ldr	r2, [pc, #588]	; (801acb4 <_printf_float+0x2dc>)
 801aa66:	4b94      	ldr	r3, [pc, #592]	; (801acb8 <_printf_float+0x2e0>)
 801aa68:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801aa6c:	bf94      	ite	ls
 801aa6e:	4690      	movls	r8, r2
 801aa70:	4698      	movhi	r8, r3
 801aa72:	2303      	movs	r3, #3
 801aa74:	6123      	str	r3, [r4, #16]
 801aa76:	9b05      	ldr	r3, [sp, #20]
 801aa78:	f023 0304 	bic.w	r3, r3, #4
 801aa7c:	6023      	str	r3, [r4, #0]
 801aa7e:	f04f 0900 	mov.w	r9, #0
 801aa82:	9700      	str	r7, [sp, #0]
 801aa84:	4633      	mov	r3, r6
 801aa86:	aa0b      	add	r2, sp, #44	; 0x2c
 801aa88:	4621      	mov	r1, r4
 801aa8a:	4628      	mov	r0, r5
 801aa8c:	f000 f9da 	bl	801ae44 <_printf_common>
 801aa90:	3001      	adds	r0, #1
 801aa92:	f040 8090 	bne.w	801abb6 <_printf_float+0x1de>
 801aa96:	f04f 30ff 	mov.w	r0, #4294967295
 801aa9a:	b00d      	add	sp, #52	; 0x34
 801aa9c:	ecbd 8b02 	vpop	{d8}
 801aaa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aaa4:	4642      	mov	r2, r8
 801aaa6:	464b      	mov	r3, r9
 801aaa8:	4640      	mov	r0, r8
 801aaaa:	4649      	mov	r1, r9
 801aaac:	f7ee fa4e 	bl	8008f4c <__aeabi_dcmpun>
 801aab0:	b140      	cbz	r0, 801aac4 <_printf_float+0xec>
 801aab2:	464b      	mov	r3, r9
 801aab4:	2b00      	cmp	r3, #0
 801aab6:	bfbc      	itt	lt
 801aab8:	232d      	movlt	r3, #45	; 0x2d
 801aaba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801aabe:	4a7f      	ldr	r2, [pc, #508]	; (801acbc <_printf_float+0x2e4>)
 801aac0:	4b7f      	ldr	r3, [pc, #508]	; (801acc0 <_printf_float+0x2e8>)
 801aac2:	e7d1      	b.n	801aa68 <_printf_float+0x90>
 801aac4:	6863      	ldr	r3, [r4, #4]
 801aac6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801aaca:	9206      	str	r2, [sp, #24]
 801aacc:	1c5a      	adds	r2, r3, #1
 801aace:	d13f      	bne.n	801ab50 <_printf_float+0x178>
 801aad0:	2306      	movs	r3, #6
 801aad2:	6063      	str	r3, [r4, #4]
 801aad4:	9b05      	ldr	r3, [sp, #20]
 801aad6:	6861      	ldr	r1, [r4, #4]
 801aad8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801aadc:	2300      	movs	r3, #0
 801aade:	9303      	str	r3, [sp, #12]
 801aae0:	ab0a      	add	r3, sp, #40	; 0x28
 801aae2:	e9cd b301 	strd	fp, r3, [sp, #4]
 801aae6:	ab09      	add	r3, sp, #36	; 0x24
 801aae8:	ec49 8b10 	vmov	d0, r8, r9
 801aaec:	9300      	str	r3, [sp, #0]
 801aaee:	6022      	str	r2, [r4, #0]
 801aaf0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801aaf4:	4628      	mov	r0, r5
 801aaf6:	f7ff fecf 	bl	801a898 <__cvt>
 801aafa:	9b06      	ldr	r3, [sp, #24]
 801aafc:	9909      	ldr	r1, [sp, #36]	; 0x24
 801aafe:	2b47      	cmp	r3, #71	; 0x47
 801ab00:	4680      	mov	r8, r0
 801ab02:	d108      	bne.n	801ab16 <_printf_float+0x13e>
 801ab04:	1cc8      	adds	r0, r1, #3
 801ab06:	db02      	blt.n	801ab0e <_printf_float+0x136>
 801ab08:	6863      	ldr	r3, [r4, #4]
 801ab0a:	4299      	cmp	r1, r3
 801ab0c:	dd41      	ble.n	801ab92 <_printf_float+0x1ba>
 801ab0e:	f1ab 0302 	sub.w	r3, fp, #2
 801ab12:	fa5f fb83 	uxtb.w	fp, r3
 801ab16:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801ab1a:	d820      	bhi.n	801ab5e <_printf_float+0x186>
 801ab1c:	3901      	subs	r1, #1
 801ab1e:	465a      	mov	r2, fp
 801ab20:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801ab24:	9109      	str	r1, [sp, #36]	; 0x24
 801ab26:	f7ff ff19 	bl	801a95c <__exponent>
 801ab2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ab2c:	1813      	adds	r3, r2, r0
 801ab2e:	2a01      	cmp	r2, #1
 801ab30:	4681      	mov	r9, r0
 801ab32:	6123      	str	r3, [r4, #16]
 801ab34:	dc02      	bgt.n	801ab3c <_printf_float+0x164>
 801ab36:	6822      	ldr	r2, [r4, #0]
 801ab38:	07d2      	lsls	r2, r2, #31
 801ab3a:	d501      	bpl.n	801ab40 <_printf_float+0x168>
 801ab3c:	3301      	adds	r3, #1
 801ab3e:	6123      	str	r3, [r4, #16]
 801ab40:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801ab44:	2b00      	cmp	r3, #0
 801ab46:	d09c      	beq.n	801aa82 <_printf_float+0xaa>
 801ab48:	232d      	movs	r3, #45	; 0x2d
 801ab4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ab4e:	e798      	b.n	801aa82 <_printf_float+0xaa>
 801ab50:	9a06      	ldr	r2, [sp, #24]
 801ab52:	2a47      	cmp	r2, #71	; 0x47
 801ab54:	d1be      	bne.n	801aad4 <_printf_float+0xfc>
 801ab56:	2b00      	cmp	r3, #0
 801ab58:	d1bc      	bne.n	801aad4 <_printf_float+0xfc>
 801ab5a:	2301      	movs	r3, #1
 801ab5c:	e7b9      	b.n	801aad2 <_printf_float+0xfa>
 801ab5e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801ab62:	d118      	bne.n	801ab96 <_printf_float+0x1be>
 801ab64:	2900      	cmp	r1, #0
 801ab66:	6863      	ldr	r3, [r4, #4]
 801ab68:	dd0b      	ble.n	801ab82 <_printf_float+0x1aa>
 801ab6a:	6121      	str	r1, [r4, #16]
 801ab6c:	b913      	cbnz	r3, 801ab74 <_printf_float+0x19c>
 801ab6e:	6822      	ldr	r2, [r4, #0]
 801ab70:	07d0      	lsls	r0, r2, #31
 801ab72:	d502      	bpl.n	801ab7a <_printf_float+0x1a2>
 801ab74:	3301      	adds	r3, #1
 801ab76:	440b      	add	r3, r1
 801ab78:	6123      	str	r3, [r4, #16]
 801ab7a:	65a1      	str	r1, [r4, #88]	; 0x58
 801ab7c:	f04f 0900 	mov.w	r9, #0
 801ab80:	e7de      	b.n	801ab40 <_printf_float+0x168>
 801ab82:	b913      	cbnz	r3, 801ab8a <_printf_float+0x1b2>
 801ab84:	6822      	ldr	r2, [r4, #0]
 801ab86:	07d2      	lsls	r2, r2, #31
 801ab88:	d501      	bpl.n	801ab8e <_printf_float+0x1b6>
 801ab8a:	3302      	adds	r3, #2
 801ab8c:	e7f4      	b.n	801ab78 <_printf_float+0x1a0>
 801ab8e:	2301      	movs	r3, #1
 801ab90:	e7f2      	b.n	801ab78 <_printf_float+0x1a0>
 801ab92:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801ab96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ab98:	4299      	cmp	r1, r3
 801ab9a:	db05      	blt.n	801aba8 <_printf_float+0x1d0>
 801ab9c:	6823      	ldr	r3, [r4, #0]
 801ab9e:	6121      	str	r1, [r4, #16]
 801aba0:	07d8      	lsls	r0, r3, #31
 801aba2:	d5ea      	bpl.n	801ab7a <_printf_float+0x1a2>
 801aba4:	1c4b      	adds	r3, r1, #1
 801aba6:	e7e7      	b.n	801ab78 <_printf_float+0x1a0>
 801aba8:	2900      	cmp	r1, #0
 801abaa:	bfd4      	ite	le
 801abac:	f1c1 0202 	rsble	r2, r1, #2
 801abb0:	2201      	movgt	r2, #1
 801abb2:	4413      	add	r3, r2
 801abb4:	e7e0      	b.n	801ab78 <_printf_float+0x1a0>
 801abb6:	6823      	ldr	r3, [r4, #0]
 801abb8:	055a      	lsls	r2, r3, #21
 801abba:	d407      	bmi.n	801abcc <_printf_float+0x1f4>
 801abbc:	6923      	ldr	r3, [r4, #16]
 801abbe:	4642      	mov	r2, r8
 801abc0:	4631      	mov	r1, r6
 801abc2:	4628      	mov	r0, r5
 801abc4:	47b8      	blx	r7
 801abc6:	3001      	adds	r0, #1
 801abc8:	d12c      	bne.n	801ac24 <_printf_float+0x24c>
 801abca:	e764      	b.n	801aa96 <_printf_float+0xbe>
 801abcc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801abd0:	f240 80e0 	bls.w	801ad94 <_printf_float+0x3bc>
 801abd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801abd8:	2200      	movs	r2, #0
 801abda:	2300      	movs	r3, #0
 801abdc:	f7ee f984 	bl	8008ee8 <__aeabi_dcmpeq>
 801abe0:	2800      	cmp	r0, #0
 801abe2:	d034      	beq.n	801ac4e <_printf_float+0x276>
 801abe4:	4a37      	ldr	r2, [pc, #220]	; (801acc4 <_printf_float+0x2ec>)
 801abe6:	2301      	movs	r3, #1
 801abe8:	4631      	mov	r1, r6
 801abea:	4628      	mov	r0, r5
 801abec:	47b8      	blx	r7
 801abee:	3001      	adds	r0, #1
 801abf0:	f43f af51 	beq.w	801aa96 <_printf_float+0xbe>
 801abf4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801abf8:	429a      	cmp	r2, r3
 801abfa:	db02      	blt.n	801ac02 <_printf_float+0x22a>
 801abfc:	6823      	ldr	r3, [r4, #0]
 801abfe:	07d8      	lsls	r0, r3, #31
 801ac00:	d510      	bpl.n	801ac24 <_printf_float+0x24c>
 801ac02:	ee18 3a10 	vmov	r3, s16
 801ac06:	4652      	mov	r2, sl
 801ac08:	4631      	mov	r1, r6
 801ac0a:	4628      	mov	r0, r5
 801ac0c:	47b8      	blx	r7
 801ac0e:	3001      	adds	r0, #1
 801ac10:	f43f af41 	beq.w	801aa96 <_printf_float+0xbe>
 801ac14:	f04f 0800 	mov.w	r8, #0
 801ac18:	f104 091a 	add.w	r9, r4, #26
 801ac1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ac1e:	3b01      	subs	r3, #1
 801ac20:	4543      	cmp	r3, r8
 801ac22:	dc09      	bgt.n	801ac38 <_printf_float+0x260>
 801ac24:	6823      	ldr	r3, [r4, #0]
 801ac26:	079b      	lsls	r3, r3, #30
 801ac28:	f100 8107 	bmi.w	801ae3a <_printf_float+0x462>
 801ac2c:	68e0      	ldr	r0, [r4, #12]
 801ac2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ac30:	4298      	cmp	r0, r3
 801ac32:	bfb8      	it	lt
 801ac34:	4618      	movlt	r0, r3
 801ac36:	e730      	b.n	801aa9a <_printf_float+0xc2>
 801ac38:	2301      	movs	r3, #1
 801ac3a:	464a      	mov	r2, r9
 801ac3c:	4631      	mov	r1, r6
 801ac3e:	4628      	mov	r0, r5
 801ac40:	47b8      	blx	r7
 801ac42:	3001      	adds	r0, #1
 801ac44:	f43f af27 	beq.w	801aa96 <_printf_float+0xbe>
 801ac48:	f108 0801 	add.w	r8, r8, #1
 801ac4c:	e7e6      	b.n	801ac1c <_printf_float+0x244>
 801ac4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac50:	2b00      	cmp	r3, #0
 801ac52:	dc39      	bgt.n	801acc8 <_printf_float+0x2f0>
 801ac54:	4a1b      	ldr	r2, [pc, #108]	; (801acc4 <_printf_float+0x2ec>)
 801ac56:	2301      	movs	r3, #1
 801ac58:	4631      	mov	r1, r6
 801ac5a:	4628      	mov	r0, r5
 801ac5c:	47b8      	blx	r7
 801ac5e:	3001      	adds	r0, #1
 801ac60:	f43f af19 	beq.w	801aa96 <_printf_float+0xbe>
 801ac64:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801ac68:	4313      	orrs	r3, r2
 801ac6a:	d102      	bne.n	801ac72 <_printf_float+0x29a>
 801ac6c:	6823      	ldr	r3, [r4, #0]
 801ac6e:	07d9      	lsls	r1, r3, #31
 801ac70:	d5d8      	bpl.n	801ac24 <_printf_float+0x24c>
 801ac72:	ee18 3a10 	vmov	r3, s16
 801ac76:	4652      	mov	r2, sl
 801ac78:	4631      	mov	r1, r6
 801ac7a:	4628      	mov	r0, r5
 801ac7c:	47b8      	blx	r7
 801ac7e:	3001      	adds	r0, #1
 801ac80:	f43f af09 	beq.w	801aa96 <_printf_float+0xbe>
 801ac84:	f04f 0900 	mov.w	r9, #0
 801ac88:	f104 0a1a 	add.w	sl, r4, #26
 801ac8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac8e:	425b      	negs	r3, r3
 801ac90:	454b      	cmp	r3, r9
 801ac92:	dc01      	bgt.n	801ac98 <_printf_float+0x2c0>
 801ac94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ac96:	e792      	b.n	801abbe <_printf_float+0x1e6>
 801ac98:	2301      	movs	r3, #1
 801ac9a:	4652      	mov	r2, sl
 801ac9c:	4631      	mov	r1, r6
 801ac9e:	4628      	mov	r0, r5
 801aca0:	47b8      	blx	r7
 801aca2:	3001      	adds	r0, #1
 801aca4:	f43f aef7 	beq.w	801aa96 <_printf_float+0xbe>
 801aca8:	f109 0901 	add.w	r9, r9, #1
 801acac:	e7ee      	b.n	801ac8c <_printf_float+0x2b4>
 801acae:	bf00      	nop
 801acb0:	7fefffff 	.word	0x7fefffff
 801acb4:	08021518 	.word	0x08021518
 801acb8:	0802151c 	.word	0x0802151c
 801acbc:	08021520 	.word	0x08021520
 801acc0:	08021524 	.word	0x08021524
 801acc4:	08021528 	.word	0x08021528
 801acc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801acca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801accc:	429a      	cmp	r2, r3
 801acce:	bfa8      	it	ge
 801acd0:	461a      	movge	r2, r3
 801acd2:	2a00      	cmp	r2, #0
 801acd4:	4691      	mov	r9, r2
 801acd6:	dc37      	bgt.n	801ad48 <_printf_float+0x370>
 801acd8:	f04f 0b00 	mov.w	fp, #0
 801acdc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ace0:	f104 021a 	add.w	r2, r4, #26
 801ace4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ace6:	9305      	str	r3, [sp, #20]
 801ace8:	eba3 0309 	sub.w	r3, r3, r9
 801acec:	455b      	cmp	r3, fp
 801acee:	dc33      	bgt.n	801ad58 <_printf_float+0x380>
 801acf0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801acf4:	429a      	cmp	r2, r3
 801acf6:	db3b      	blt.n	801ad70 <_printf_float+0x398>
 801acf8:	6823      	ldr	r3, [r4, #0]
 801acfa:	07da      	lsls	r2, r3, #31
 801acfc:	d438      	bmi.n	801ad70 <_printf_float+0x398>
 801acfe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801ad02:	eba2 0903 	sub.w	r9, r2, r3
 801ad06:	9b05      	ldr	r3, [sp, #20]
 801ad08:	1ad2      	subs	r2, r2, r3
 801ad0a:	4591      	cmp	r9, r2
 801ad0c:	bfa8      	it	ge
 801ad0e:	4691      	movge	r9, r2
 801ad10:	f1b9 0f00 	cmp.w	r9, #0
 801ad14:	dc35      	bgt.n	801ad82 <_printf_float+0x3aa>
 801ad16:	f04f 0800 	mov.w	r8, #0
 801ad1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ad1e:	f104 0a1a 	add.w	sl, r4, #26
 801ad22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ad26:	1a9b      	subs	r3, r3, r2
 801ad28:	eba3 0309 	sub.w	r3, r3, r9
 801ad2c:	4543      	cmp	r3, r8
 801ad2e:	f77f af79 	ble.w	801ac24 <_printf_float+0x24c>
 801ad32:	2301      	movs	r3, #1
 801ad34:	4652      	mov	r2, sl
 801ad36:	4631      	mov	r1, r6
 801ad38:	4628      	mov	r0, r5
 801ad3a:	47b8      	blx	r7
 801ad3c:	3001      	adds	r0, #1
 801ad3e:	f43f aeaa 	beq.w	801aa96 <_printf_float+0xbe>
 801ad42:	f108 0801 	add.w	r8, r8, #1
 801ad46:	e7ec      	b.n	801ad22 <_printf_float+0x34a>
 801ad48:	4613      	mov	r3, r2
 801ad4a:	4631      	mov	r1, r6
 801ad4c:	4642      	mov	r2, r8
 801ad4e:	4628      	mov	r0, r5
 801ad50:	47b8      	blx	r7
 801ad52:	3001      	adds	r0, #1
 801ad54:	d1c0      	bne.n	801acd8 <_printf_float+0x300>
 801ad56:	e69e      	b.n	801aa96 <_printf_float+0xbe>
 801ad58:	2301      	movs	r3, #1
 801ad5a:	4631      	mov	r1, r6
 801ad5c:	4628      	mov	r0, r5
 801ad5e:	9205      	str	r2, [sp, #20]
 801ad60:	47b8      	blx	r7
 801ad62:	3001      	adds	r0, #1
 801ad64:	f43f ae97 	beq.w	801aa96 <_printf_float+0xbe>
 801ad68:	9a05      	ldr	r2, [sp, #20]
 801ad6a:	f10b 0b01 	add.w	fp, fp, #1
 801ad6e:	e7b9      	b.n	801ace4 <_printf_float+0x30c>
 801ad70:	ee18 3a10 	vmov	r3, s16
 801ad74:	4652      	mov	r2, sl
 801ad76:	4631      	mov	r1, r6
 801ad78:	4628      	mov	r0, r5
 801ad7a:	47b8      	blx	r7
 801ad7c:	3001      	adds	r0, #1
 801ad7e:	d1be      	bne.n	801acfe <_printf_float+0x326>
 801ad80:	e689      	b.n	801aa96 <_printf_float+0xbe>
 801ad82:	9a05      	ldr	r2, [sp, #20]
 801ad84:	464b      	mov	r3, r9
 801ad86:	4442      	add	r2, r8
 801ad88:	4631      	mov	r1, r6
 801ad8a:	4628      	mov	r0, r5
 801ad8c:	47b8      	blx	r7
 801ad8e:	3001      	adds	r0, #1
 801ad90:	d1c1      	bne.n	801ad16 <_printf_float+0x33e>
 801ad92:	e680      	b.n	801aa96 <_printf_float+0xbe>
 801ad94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ad96:	2a01      	cmp	r2, #1
 801ad98:	dc01      	bgt.n	801ad9e <_printf_float+0x3c6>
 801ad9a:	07db      	lsls	r3, r3, #31
 801ad9c:	d53a      	bpl.n	801ae14 <_printf_float+0x43c>
 801ad9e:	2301      	movs	r3, #1
 801ada0:	4642      	mov	r2, r8
 801ada2:	4631      	mov	r1, r6
 801ada4:	4628      	mov	r0, r5
 801ada6:	47b8      	blx	r7
 801ada8:	3001      	adds	r0, #1
 801adaa:	f43f ae74 	beq.w	801aa96 <_printf_float+0xbe>
 801adae:	ee18 3a10 	vmov	r3, s16
 801adb2:	4652      	mov	r2, sl
 801adb4:	4631      	mov	r1, r6
 801adb6:	4628      	mov	r0, r5
 801adb8:	47b8      	blx	r7
 801adba:	3001      	adds	r0, #1
 801adbc:	f43f ae6b 	beq.w	801aa96 <_printf_float+0xbe>
 801adc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801adc4:	2200      	movs	r2, #0
 801adc6:	2300      	movs	r3, #0
 801adc8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801adcc:	f7ee f88c 	bl	8008ee8 <__aeabi_dcmpeq>
 801add0:	b9d8      	cbnz	r0, 801ae0a <_printf_float+0x432>
 801add2:	f10a 33ff 	add.w	r3, sl, #4294967295
 801add6:	f108 0201 	add.w	r2, r8, #1
 801adda:	4631      	mov	r1, r6
 801addc:	4628      	mov	r0, r5
 801adde:	47b8      	blx	r7
 801ade0:	3001      	adds	r0, #1
 801ade2:	d10e      	bne.n	801ae02 <_printf_float+0x42a>
 801ade4:	e657      	b.n	801aa96 <_printf_float+0xbe>
 801ade6:	2301      	movs	r3, #1
 801ade8:	4652      	mov	r2, sl
 801adea:	4631      	mov	r1, r6
 801adec:	4628      	mov	r0, r5
 801adee:	47b8      	blx	r7
 801adf0:	3001      	adds	r0, #1
 801adf2:	f43f ae50 	beq.w	801aa96 <_printf_float+0xbe>
 801adf6:	f108 0801 	add.w	r8, r8, #1
 801adfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801adfc:	3b01      	subs	r3, #1
 801adfe:	4543      	cmp	r3, r8
 801ae00:	dcf1      	bgt.n	801ade6 <_printf_float+0x40e>
 801ae02:	464b      	mov	r3, r9
 801ae04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801ae08:	e6da      	b.n	801abc0 <_printf_float+0x1e8>
 801ae0a:	f04f 0800 	mov.w	r8, #0
 801ae0e:	f104 0a1a 	add.w	sl, r4, #26
 801ae12:	e7f2      	b.n	801adfa <_printf_float+0x422>
 801ae14:	2301      	movs	r3, #1
 801ae16:	4642      	mov	r2, r8
 801ae18:	e7df      	b.n	801adda <_printf_float+0x402>
 801ae1a:	2301      	movs	r3, #1
 801ae1c:	464a      	mov	r2, r9
 801ae1e:	4631      	mov	r1, r6
 801ae20:	4628      	mov	r0, r5
 801ae22:	47b8      	blx	r7
 801ae24:	3001      	adds	r0, #1
 801ae26:	f43f ae36 	beq.w	801aa96 <_printf_float+0xbe>
 801ae2a:	f108 0801 	add.w	r8, r8, #1
 801ae2e:	68e3      	ldr	r3, [r4, #12]
 801ae30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ae32:	1a5b      	subs	r3, r3, r1
 801ae34:	4543      	cmp	r3, r8
 801ae36:	dcf0      	bgt.n	801ae1a <_printf_float+0x442>
 801ae38:	e6f8      	b.n	801ac2c <_printf_float+0x254>
 801ae3a:	f04f 0800 	mov.w	r8, #0
 801ae3e:	f104 0919 	add.w	r9, r4, #25
 801ae42:	e7f4      	b.n	801ae2e <_printf_float+0x456>

0801ae44 <_printf_common>:
 801ae44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ae48:	4616      	mov	r6, r2
 801ae4a:	4699      	mov	r9, r3
 801ae4c:	688a      	ldr	r2, [r1, #8]
 801ae4e:	690b      	ldr	r3, [r1, #16]
 801ae50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ae54:	4293      	cmp	r3, r2
 801ae56:	bfb8      	it	lt
 801ae58:	4613      	movlt	r3, r2
 801ae5a:	6033      	str	r3, [r6, #0]
 801ae5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ae60:	4607      	mov	r7, r0
 801ae62:	460c      	mov	r4, r1
 801ae64:	b10a      	cbz	r2, 801ae6a <_printf_common+0x26>
 801ae66:	3301      	adds	r3, #1
 801ae68:	6033      	str	r3, [r6, #0]
 801ae6a:	6823      	ldr	r3, [r4, #0]
 801ae6c:	0699      	lsls	r1, r3, #26
 801ae6e:	bf42      	ittt	mi
 801ae70:	6833      	ldrmi	r3, [r6, #0]
 801ae72:	3302      	addmi	r3, #2
 801ae74:	6033      	strmi	r3, [r6, #0]
 801ae76:	6825      	ldr	r5, [r4, #0]
 801ae78:	f015 0506 	ands.w	r5, r5, #6
 801ae7c:	d106      	bne.n	801ae8c <_printf_common+0x48>
 801ae7e:	f104 0a19 	add.w	sl, r4, #25
 801ae82:	68e3      	ldr	r3, [r4, #12]
 801ae84:	6832      	ldr	r2, [r6, #0]
 801ae86:	1a9b      	subs	r3, r3, r2
 801ae88:	42ab      	cmp	r3, r5
 801ae8a:	dc26      	bgt.n	801aeda <_printf_common+0x96>
 801ae8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801ae90:	1e13      	subs	r3, r2, #0
 801ae92:	6822      	ldr	r2, [r4, #0]
 801ae94:	bf18      	it	ne
 801ae96:	2301      	movne	r3, #1
 801ae98:	0692      	lsls	r2, r2, #26
 801ae9a:	d42b      	bmi.n	801aef4 <_printf_common+0xb0>
 801ae9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801aea0:	4649      	mov	r1, r9
 801aea2:	4638      	mov	r0, r7
 801aea4:	47c0      	blx	r8
 801aea6:	3001      	adds	r0, #1
 801aea8:	d01e      	beq.n	801aee8 <_printf_common+0xa4>
 801aeaa:	6823      	ldr	r3, [r4, #0]
 801aeac:	6922      	ldr	r2, [r4, #16]
 801aeae:	f003 0306 	and.w	r3, r3, #6
 801aeb2:	2b04      	cmp	r3, #4
 801aeb4:	bf02      	ittt	eq
 801aeb6:	68e5      	ldreq	r5, [r4, #12]
 801aeb8:	6833      	ldreq	r3, [r6, #0]
 801aeba:	1aed      	subeq	r5, r5, r3
 801aebc:	68a3      	ldr	r3, [r4, #8]
 801aebe:	bf0c      	ite	eq
 801aec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801aec4:	2500      	movne	r5, #0
 801aec6:	4293      	cmp	r3, r2
 801aec8:	bfc4      	itt	gt
 801aeca:	1a9b      	subgt	r3, r3, r2
 801aecc:	18ed      	addgt	r5, r5, r3
 801aece:	2600      	movs	r6, #0
 801aed0:	341a      	adds	r4, #26
 801aed2:	42b5      	cmp	r5, r6
 801aed4:	d11a      	bne.n	801af0c <_printf_common+0xc8>
 801aed6:	2000      	movs	r0, #0
 801aed8:	e008      	b.n	801aeec <_printf_common+0xa8>
 801aeda:	2301      	movs	r3, #1
 801aedc:	4652      	mov	r2, sl
 801aede:	4649      	mov	r1, r9
 801aee0:	4638      	mov	r0, r7
 801aee2:	47c0      	blx	r8
 801aee4:	3001      	adds	r0, #1
 801aee6:	d103      	bne.n	801aef0 <_printf_common+0xac>
 801aee8:	f04f 30ff 	mov.w	r0, #4294967295
 801aeec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aef0:	3501      	adds	r5, #1
 801aef2:	e7c6      	b.n	801ae82 <_printf_common+0x3e>
 801aef4:	18e1      	adds	r1, r4, r3
 801aef6:	1c5a      	adds	r2, r3, #1
 801aef8:	2030      	movs	r0, #48	; 0x30
 801aefa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801aefe:	4422      	add	r2, r4
 801af00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801af04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801af08:	3302      	adds	r3, #2
 801af0a:	e7c7      	b.n	801ae9c <_printf_common+0x58>
 801af0c:	2301      	movs	r3, #1
 801af0e:	4622      	mov	r2, r4
 801af10:	4649      	mov	r1, r9
 801af12:	4638      	mov	r0, r7
 801af14:	47c0      	blx	r8
 801af16:	3001      	adds	r0, #1
 801af18:	d0e6      	beq.n	801aee8 <_printf_common+0xa4>
 801af1a:	3601      	adds	r6, #1
 801af1c:	e7d9      	b.n	801aed2 <_printf_common+0x8e>
	...

0801af20 <_printf_i>:
 801af20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801af24:	7e0f      	ldrb	r7, [r1, #24]
 801af26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801af28:	2f78      	cmp	r7, #120	; 0x78
 801af2a:	4691      	mov	r9, r2
 801af2c:	4680      	mov	r8, r0
 801af2e:	460c      	mov	r4, r1
 801af30:	469a      	mov	sl, r3
 801af32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801af36:	d807      	bhi.n	801af48 <_printf_i+0x28>
 801af38:	2f62      	cmp	r7, #98	; 0x62
 801af3a:	d80a      	bhi.n	801af52 <_printf_i+0x32>
 801af3c:	2f00      	cmp	r7, #0
 801af3e:	f000 80d4 	beq.w	801b0ea <_printf_i+0x1ca>
 801af42:	2f58      	cmp	r7, #88	; 0x58
 801af44:	f000 80c0 	beq.w	801b0c8 <_printf_i+0x1a8>
 801af48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801af4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801af50:	e03a      	b.n	801afc8 <_printf_i+0xa8>
 801af52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801af56:	2b15      	cmp	r3, #21
 801af58:	d8f6      	bhi.n	801af48 <_printf_i+0x28>
 801af5a:	a101      	add	r1, pc, #4	; (adr r1, 801af60 <_printf_i+0x40>)
 801af5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801af60:	0801afb9 	.word	0x0801afb9
 801af64:	0801afcd 	.word	0x0801afcd
 801af68:	0801af49 	.word	0x0801af49
 801af6c:	0801af49 	.word	0x0801af49
 801af70:	0801af49 	.word	0x0801af49
 801af74:	0801af49 	.word	0x0801af49
 801af78:	0801afcd 	.word	0x0801afcd
 801af7c:	0801af49 	.word	0x0801af49
 801af80:	0801af49 	.word	0x0801af49
 801af84:	0801af49 	.word	0x0801af49
 801af88:	0801af49 	.word	0x0801af49
 801af8c:	0801b0d1 	.word	0x0801b0d1
 801af90:	0801aff9 	.word	0x0801aff9
 801af94:	0801b08b 	.word	0x0801b08b
 801af98:	0801af49 	.word	0x0801af49
 801af9c:	0801af49 	.word	0x0801af49
 801afa0:	0801b0f3 	.word	0x0801b0f3
 801afa4:	0801af49 	.word	0x0801af49
 801afa8:	0801aff9 	.word	0x0801aff9
 801afac:	0801af49 	.word	0x0801af49
 801afb0:	0801af49 	.word	0x0801af49
 801afb4:	0801b093 	.word	0x0801b093
 801afb8:	682b      	ldr	r3, [r5, #0]
 801afba:	1d1a      	adds	r2, r3, #4
 801afbc:	681b      	ldr	r3, [r3, #0]
 801afbe:	602a      	str	r2, [r5, #0]
 801afc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801afc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801afc8:	2301      	movs	r3, #1
 801afca:	e09f      	b.n	801b10c <_printf_i+0x1ec>
 801afcc:	6820      	ldr	r0, [r4, #0]
 801afce:	682b      	ldr	r3, [r5, #0]
 801afd0:	0607      	lsls	r7, r0, #24
 801afd2:	f103 0104 	add.w	r1, r3, #4
 801afd6:	6029      	str	r1, [r5, #0]
 801afd8:	d501      	bpl.n	801afde <_printf_i+0xbe>
 801afda:	681e      	ldr	r6, [r3, #0]
 801afdc:	e003      	b.n	801afe6 <_printf_i+0xc6>
 801afde:	0646      	lsls	r6, r0, #25
 801afe0:	d5fb      	bpl.n	801afda <_printf_i+0xba>
 801afe2:	f9b3 6000 	ldrsh.w	r6, [r3]
 801afe6:	2e00      	cmp	r6, #0
 801afe8:	da03      	bge.n	801aff2 <_printf_i+0xd2>
 801afea:	232d      	movs	r3, #45	; 0x2d
 801afec:	4276      	negs	r6, r6
 801afee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801aff2:	485a      	ldr	r0, [pc, #360]	; (801b15c <_printf_i+0x23c>)
 801aff4:	230a      	movs	r3, #10
 801aff6:	e012      	b.n	801b01e <_printf_i+0xfe>
 801aff8:	682b      	ldr	r3, [r5, #0]
 801affa:	6820      	ldr	r0, [r4, #0]
 801affc:	1d19      	adds	r1, r3, #4
 801affe:	6029      	str	r1, [r5, #0]
 801b000:	0605      	lsls	r5, r0, #24
 801b002:	d501      	bpl.n	801b008 <_printf_i+0xe8>
 801b004:	681e      	ldr	r6, [r3, #0]
 801b006:	e002      	b.n	801b00e <_printf_i+0xee>
 801b008:	0641      	lsls	r1, r0, #25
 801b00a:	d5fb      	bpl.n	801b004 <_printf_i+0xe4>
 801b00c:	881e      	ldrh	r6, [r3, #0]
 801b00e:	4853      	ldr	r0, [pc, #332]	; (801b15c <_printf_i+0x23c>)
 801b010:	2f6f      	cmp	r7, #111	; 0x6f
 801b012:	bf0c      	ite	eq
 801b014:	2308      	moveq	r3, #8
 801b016:	230a      	movne	r3, #10
 801b018:	2100      	movs	r1, #0
 801b01a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b01e:	6865      	ldr	r5, [r4, #4]
 801b020:	60a5      	str	r5, [r4, #8]
 801b022:	2d00      	cmp	r5, #0
 801b024:	bfa2      	ittt	ge
 801b026:	6821      	ldrge	r1, [r4, #0]
 801b028:	f021 0104 	bicge.w	r1, r1, #4
 801b02c:	6021      	strge	r1, [r4, #0]
 801b02e:	b90e      	cbnz	r6, 801b034 <_printf_i+0x114>
 801b030:	2d00      	cmp	r5, #0
 801b032:	d04b      	beq.n	801b0cc <_printf_i+0x1ac>
 801b034:	4615      	mov	r5, r2
 801b036:	fbb6 f1f3 	udiv	r1, r6, r3
 801b03a:	fb03 6711 	mls	r7, r3, r1, r6
 801b03e:	5dc7      	ldrb	r7, [r0, r7]
 801b040:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b044:	4637      	mov	r7, r6
 801b046:	42bb      	cmp	r3, r7
 801b048:	460e      	mov	r6, r1
 801b04a:	d9f4      	bls.n	801b036 <_printf_i+0x116>
 801b04c:	2b08      	cmp	r3, #8
 801b04e:	d10b      	bne.n	801b068 <_printf_i+0x148>
 801b050:	6823      	ldr	r3, [r4, #0]
 801b052:	07de      	lsls	r6, r3, #31
 801b054:	d508      	bpl.n	801b068 <_printf_i+0x148>
 801b056:	6923      	ldr	r3, [r4, #16]
 801b058:	6861      	ldr	r1, [r4, #4]
 801b05a:	4299      	cmp	r1, r3
 801b05c:	bfde      	ittt	le
 801b05e:	2330      	movle	r3, #48	; 0x30
 801b060:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b064:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b068:	1b52      	subs	r2, r2, r5
 801b06a:	6122      	str	r2, [r4, #16]
 801b06c:	f8cd a000 	str.w	sl, [sp]
 801b070:	464b      	mov	r3, r9
 801b072:	aa03      	add	r2, sp, #12
 801b074:	4621      	mov	r1, r4
 801b076:	4640      	mov	r0, r8
 801b078:	f7ff fee4 	bl	801ae44 <_printf_common>
 801b07c:	3001      	adds	r0, #1
 801b07e:	d14a      	bne.n	801b116 <_printf_i+0x1f6>
 801b080:	f04f 30ff 	mov.w	r0, #4294967295
 801b084:	b004      	add	sp, #16
 801b086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b08a:	6823      	ldr	r3, [r4, #0]
 801b08c:	f043 0320 	orr.w	r3, r3, #32
 801b090:	6023      	str	r3, [r4, #0]
 801b092:	4833      	ldr	r0, [pc, #204]	; (801b160 <_printf_i+0x240>)
 801b094:	2778      	movs	r7, #120	; 0x78
 801b096:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b09a:	6823      	ldr	r3, [r4, #0]
 801b09c:	6829      	ldr	r1, [r5, #0]
 801b09e:	061f      	lsls	r7, r3, #24
 801b0a0:	f851 6b04 	ldr.w	r6, [r1], #4
 801b0a4:	d402      	bmi.n	801b0ac <_printf_i+0x18c>
 801b0a6:	065f      	lsls	r7, r3, #25
 801b0a8:	bf48      	it	mi
 801b0aa:	b2b6      	uxthmi	r6, r6
 801b0ac:	07df      	lsls	r7, r3, #31
 801b0ae:	bf48      	it	mi
 801b0b0:	f043 0320 	orrmi.w	r3, r3, #32
 801b0b4:	6029      	str	r1, [r5, #0]
 801b0b6:	bf48      	it	mi
 801b0b8:	6023      	strmi	r3, [r4, #0]
 801b0ba:	b91e      	cbnz	r6, 801b0c4 <_printf_i+0x1a4>
 801b0bc:	6823      	ldr	r3, [r4, #0]
 801b0be:	f023 0320 	bic.w	r3, r3, #32
 801b0c2:	6023      	str	r3, [r4, #0]
 801b0c4:	2310      	movs	r3, #16
 801b0c6:	e7a7      	b.n	801b018 <_printf_i+0xf8>
 801b0c8:	4824      	ldr	r0, [pc, #144]	; (801b15c <_printf_i+0x23c>)
 801b0ca:	e7e4      	b.n	801b096 <_printf_i+0x176>
 801b0cc:	4615      	mov	r5, r2
 801b0ce:	e7bd      	b.n	801b04c <_printf_i+0x12c>
 801b0d0:	682b      	ldr	r3, [r5, #0]
 801b0d2:	6826      	ldr	r6, [r4, #0]
 801b0d4:	6961      	ldr	r1, [r4, #20]
 801b0d6:	1d18      	adds	r0, r3, #4
 801b0d8:	6028      	str	r0, [r5, #0]
 801b0da:	0635      	lsls	r5, r6, #24
 801b0dc:	681b      	ldr	r3, [r3, #0]
 801b0de:	d501      	bpl.n	801b0e4 <_printf_i+0x1c4>
 801b0e0:	6019      	str	r1, [r3, #0]
 801b0e2:	e002      	b.n	801b0ea <_printf_i+0x1ca>
 801b0e4:	0670      	lsls	r0, r6, #25
 801b0e6:	d5fb      	bpl.n	801b0e0 <_printf_i+0x1c0>
 801b0e8:	8019      	strh	r1, [r3, #0]
 801b0ea:	2300      	movs	r3, #0
 801b0ec:	6123      	str	r3, [r4, #16]
 801b0ee:	4615      	mov	r5, r2
 801b0f0:	e7bc      	b.n	801b06c <_printf_i+0x14c>
 801b0f2:	682b      	ldr	r3, [r5, #0]
 801b0f4:	1d1a      	adds	r2, r3, #4
 801b0f6:	602a      	str	r2, [r5, #0]
 801b0f8:	681d      	ldr	r5, [r3, #0]
 801b0fa:	6862      	ldr	r2, [r4, #4]
 801b0fc:	2100      	movs	r1, #0
 801b0fe:	4628      	mov	r0, r5
 801b100:	f7ed fa76 	bl	80085f0 <memchr>
 801b104:	b108      	cbz	r0, 801b10a <_printf_i+0x1ea>
 801b106:	1b40      	subs	r0, r0, r5
 801b108:	6060      	str	r0, [r4, #4]
 801b10a:	6863      	ldr	r3, [r4, #4]
 801b10c:	6123      	str	r3, [r4, #16]
 801b10e:	2300      	movs	r3, #0
 801b110:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b114:	e7aa      	b.n	801b06c <_printf_i+0x14c>
 801b116:	6923      	ldr	r3, [r4, #16]
 801b118:	462a      	mov	r2, r5
 801b11a:	4649      	mov	r1, r9
 801b11c:	4640      	mov	r0, r8
 801b11e:	47d0      	blx	sl
 801b120:	3001      	adds	r0, #1
 801b122:	d0ad      	beq.n	801b080 <_printf_i+0x160>
 801b124:	6823      	ldr	r3, [r4, #0]
 801b126:	079b      	lsls	r3, r3, #30
 801b128:	d413      	bmi.n	801b152 <_printf_i+0x232>
 801b12a:	68e0      	ldr	r0, [r4, #12]
 801b12c:	9b03      	ldr	r3, [sp, #12]
 801b12e:	4298      	cmp	r0, r3
 801b130:	bfb8      	it	lt
 801b132:	4618      	movlt	r0, r3
 801b134:	e7a6      	b.n	801b084 <_printf_i+0x164>
 801b136:	2301      	movs	r3, #1
 801b138:	4632      	mov	r2, r6
 801b13a:	4649      	mov	r1, r9
 801b13c:	4640      	mov	r0, r8
 801b13e:	47d0      	blx	sl
 801b140:	3001      	adds	r0, #1
 801b142:	d09d      	beq.n	801b080 <_printf_i+0x160>
 801b144:	3501      	adds	r5, #1
 801b146:	68e3      	ldr	r3, [r4, #12]
 801b148:	9903      	ldr	r1, [sp, #12]
 801b14a:	1a5b      	subs	r3, r3, r1
 801b14c:	42ab      	cmp	r3, r5
 801b14e:	dcf2      	bgt.n	801b136 <_printf_i+0x216>
 801b150:	e7eb      	b.n	801b12a <_printf_i+0x20a>
 801b152:	2500      	movs	r5, #0
 801b154:	f104 0619 	add.w	r6, r4, #25
 801b158:	e7f5      	b.n	801b146 <_printf_i+0x226>
 801b15a:	bf00      	nop
 801b15c:	0802152a 	.word	0x0802152a
 801b160:	0802153b 	.word	0x0802153b

0801b164 <_scanf_float>:
 801b164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b168:	b087      	sub	sp, #28
 801b16a:	4617      	mov	r7, r2
 801b16c:	9303      	str	r3, [sp, #12]
 801b16e:	688b      	ldr	r3, [r1, #8]
 801b170:	1e5a      	subs	r2, r3, #1
 801b172:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801b176:	bf83      	ittte	hi
 801b178:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801b17c:	195b      	addhi	r3, r3, r5
 801b17e:	9302      	strhi	r3, [sp, #8]
 801b180:	2300      	movls	r3, #0
 801b182:	bf86      	itte	hi
 801b184:	f240 135d 	movwhi	r3, #349	; 0x15d
 801b188:	608b      	strhi	r3, [r1, #8]
 801b18a:	9302      	strls	r3, [sp, #8]
 801b18c:	680b      	ldr	r3, [r1, #0]
 801b18e:	468b      	mov	fp, r1
 801b190:	2500      	movs	r5, #0
 801b192:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801b196:	f84b 3b1c 	str.w	r3, [fp], #28
 801b19a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801b19e:	4680      	mov	r8, r0
 801b1a0:	460c      	mov	r4, r1
 801b1a2:	465e      	mov	r6, fp
 801b1a4:	46aa      	mov	sl, r5
 801b1a6:	46a9      	mov	r9, r5
 801b1a8:	9501      	str	r5, [sp, #4]
 801b1aa:	68a2      	ldr	r2, [r4, #8]
 801b1ac:	b152      	cbz	r2, 801b1c4 <_scanf_float+0x60>
 801b1ae:	683b      	ldr	r3, [r7, #0]
 801b1b0:	781b      	ldrb	r3, [r3, #0]
 801b1b2:	2b4e      	cmp	r3, #78	; 0x4e
 801b1b4:	d864      	bhi.n	801b280 <_scanf_float+0x11c>
 801b1b6:	2b40      	cmp	r3, #64	; 0x40
 801b1b8:	d83c      	bhi.n	801b234 <_scanf_float+0xd0>
 801b1ba:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801b1be:	b2c8      	uxtb	r0, r1
 801b1c0:	280e      	cmp	r0, #14
 801b1c2:	d93a      	bls.n	801b23a <_scanf_float+0xd6>
 801b1c4:	f1b9 0f00 	cmp.w	r9, #0
 801b1c8:	d003      	beq.n	801b1d2 <_scanf_float+0x6e>
 801b1ca:	6823      	ldr	r3, [r4, #0]
 801b1cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b1d0:	6023      	str	r3, [r4, #0]
 801b1d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b1d6:	f1ba 0f01 	cmp.w	sl, #1
 801b1da:	f200 8113 	bhi.w	801b404 <_scanf_float+0x2a0>
 801b1de:	455e      	cmp	r6, fp
 801b1e0:	f200 8105 	bhi.w	801b3ee <_scanf_float+0x28a>
 801b1e4:	2501      	movs	r5, #1
 801b1e6:	4628      	mov	r0, r5
 801b1e8:	b007      	add	sp, #28
 801b1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1ee:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801b1f2:	2a0d      	cmp	r2, #13
 801b1f4:	d8e6      	bhi.n	801b1c4 <_scanf_float+0x60>
 801b1f6:	a101      	add	r1, pc, #4	; (adr r1, 801b1fc <_scanf_float+0x98>)
 801b1f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801b1fc:	0801b33b 	.word	0x0801b33b
 801b200:	0801b1c5 	.word	0x0801b1c5
 801b204:	0801b1c5 	.word	0x0801b1c5
 801b208:	0801b1c5 	.word	0x0801b1c5
 801b20c:	0801b39b 	.word	0x0801b39b
 801b210:	0801b373 	.word	0x0801b373
 801b214:	0801b1c5 	.word	0x0801b1c5
 801b218:	0801b1c5 	.word	0x0801b1c5
 801b21c:	0801b349 	.word	0x0801b349
 801b220:	0801b1c5 	.word	0x0801b1c5
 801b224:	0801b1c5 	.word	0x0801b1c5
 801b228:	0801b1c5 	.word	0x0801b1c5
 801b22c:	0801b1c5 	.word	0x0801b1c5
 801b230:	0801b301 	.word	0x0801b301
 801b234:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801b238:	e7db      	b.n	801b1f2 <_scanf_float+0x8e>
 801b23a:	290e      	cmp	r1, #14
 801b23c:	d8c2      	bhi.n	801b1c4 <_scanf_float+0x60>
 801b23e:	a001      	add	r0, pc, #4	; (adr r0, 801b244 <_scanf_float+0xe0>)
 801b240:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801b244:	0801b2f3 	.word	0x0801b2f3
 801b248:	0801b1c5 	.word	0x0801b1c5
 801b24c:	0801b2f3 	.word	0x0801b2f3
 801b250:	0801b387 	.word	0x0801b387
 801b254:	0801b1c5 	.word	0x0801b1c5
 801b258:	0801b2a1 	.word	0x0801b2a1
 801b25c:	0801b2dd 	.word	0x0801b2dd
 801b260:	0801b2dd 	.word	0x0801b2dd
 801b264:	0801b2dd 	.word	0x0801b2dd
 801b268:	0801b2dd 	.word	0x0801b2dd
 801b26c:	0801b2dd 	.word	0x0801b2dd
 801b270:	0801b2dd 	.word	0x0801b2dd
 801b274:	0801b2dd 	.word	0x0801b2dd
 801b278:	0801b2dd 	.word	0x0801b2dd
 801b27c:	0801b2dd 	.word	0x0801b2dd
 801b280:	2b6e      	cmp	r3, #110	; 0x6e
 801b282:	d809      	bhi.n	801b298 <_scanf_float+0x134>
 801b284:	2b60      	cmp	r3, #96	; 0x60
 801b286:	d8b2      	bhi.n	801b1ee <_scanf_float+0x8a>
 801b288:	2b54      	cmp	r3, #84	; 0x54
 801b28a:	d077      	beq.n	801b37c <_scanf_float+0x218>
 801b28c:	2b59      	cmp	r3, #89	; 0x59
 801b28e:	d199      	bne.n	801b1c4 <_scanf_float+0x60>
 801b290:	2d07      	cmp	r5, #7
 801b292:	d197      	bne.n	801b1c4 <_scanf_float+0x60>
 801b294:	2508      	movs	r5, #8
 801b296:	e029      	b.n	801b2ec <_scanf_float+0x188>
 801b298:	2b74      	cmp	r3, #116	; 0x74
 801b29a:	d06f      	beq.n	801b37c <_scanf_float+0x218>
 801b29c:	2b79      	cmp	r3, #121	; 0x79
 801b29e:	e7f6      	b.n	801b28e <_scanf_float+0x12a>
 801b2a0:	6821      	ldr	r1, [r4, #0]
 801b2a2:	05c8      	lsls	r0, r1, #23
 801b2a4:	d51a      	bpl.n	801b2dc <_scanf_float+0x178>
 801b2a6:	9b02      	ldr	r3, [sp, #8]
 801b2a8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801b2ac:	6021      	str	r1, [r4, #0]
 801b2ae:	f109 0901 	add.w	r9, r9, #1
 801b2b2:	b11b      	cbz	r3, 801b2bc <_scanf_float+0x158>
 801b2b4:	3b01      	subs	r3, #1
 801b2b6:	3201      	adds	r2, #1
 801b2b8:	9302      	str	r3, [sp, #8]
 801b2ba:	60a2      	str	r2, [r4, #8]
 801b2bc:	68a3      	ldr	r3, [r4, #8]
 801b2be:	3b01      	subs	r3, #1
 801b2c0:	60a3      	str	r3, [r4, #8]
 801b2c2:	6923      	ldr	r3, [r4, #16]
 801b2c4:	3301      	adds	r3, #1
 801b2c6:	6123      	str	r3, [r4, #16]
 801b2c8:	687b      	ldr	r3, [r7, #4]
 801b2ca:	3b01      	subs	r3, #1
 801b2cc:	2b00      	cmp	r3, #0
 801b2ce:	607b      	str	r3, [r7, #4]
 801b2d0:	f340 8084 	ble.w	801b3dc <_scanf_float+0x278>
 801b2d4:	683b      	ldr	r3, [r7, #0]
 801b2d6:	3301      	adds	r3, #1
 801b2d8:	603b      	str	r3, [r7, #0]
 801b2da:	e766      	b.n	801b1aa <_scanf_float+0x46>
 801b2dc:	eb1a 0f05 	cmn.w	sl, r5
 801b2e0:	f47f af70 	bne.w	801b1c4 <_scanf_float+0x60>
 801b2e4:	6822      	ldr	r2, [r4, #0]
 801b2e6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801b2ea:	6022      	str	r2, [r4, #0]
 801b2ec:	f806 3b01 	strb.w	r3, [r6], #1
 801b2f0:	e7e4      	b.n	801b2bc <_scanf_float+0x158>
 801b2f2:	6822      	ldr	r2, [r4, #0]
 801b2f4:	0610      	lsls	r0, r2, #24
 801b2f6:	f57f af65 	bpl.w	801b1c4 <_scanf_float+0x60>
 801b2fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801b2fe:	e7f4      	b.n	801b2ea <_scanf_float+0x186>
 801b300:	f1ba 0f00 	cmp.w	sl, #0
 801b304:	d10e      	bne.n	801b324 <_scanf_float+0x1c0>
 801b306:	f1b9 0f00 	cmp.w	r9, #0
 801b30a:	d10e      	bne.n	801b32a <_scanf_float+0x1c6>
 801b30c:	6822      	ldr	r2, [r4, #0]
 801b30e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801b312:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801b316:	d108      	bne.n	801b32a <_scanf_float+0x1c6>
 801b318:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b31c:	6022      	str	r2, [r4, #0]
 801b31e:	f04f 0a01 	mov.w	sl, #1
 801b322:	e7e3      	b.n	801b2ec <_scanf_float+0x188>
 801b324:	f1ba 0f02 	cmp.w	sl, #2
 801b328:	d055      	beq.n	801b3d6 <_scanf_float+0x272>
 801b32a:	2d01      	cmp	r5, #1
 801b32c:	d002      	beq.n	801b334 <_scanf_float+0x1d0>
 801b32e:	2d04      	cmp	r5, #4
 801b330:	f47f af48 	bne.w	801b1c4 <_scanf_float+0x60>
 801b334:	3501      	adds	r5, #1
 801b336:	b2ed      	uxtb	r5, r5
 801b338:	e7d8      	b.n	801b2ec <_scanf_float+0x188>
 801b33a:	f1ba 0f01 	cmp.w	sl, #1
 801b33e:	f47f af41 	bne.w	801b1c4 <_scanf_float+0x60>
 801b342:	f04f 0a02 	mov.w	sl, #2
 801b346:	e7d1      	b.n	801b2ec <_scanf_float+0x188>
 801b348:	b97d      	cbnz	r5, 801b36a <_scanf_float+0x206>
 801b34a:	f1b9 0f00 	cmp.w	r9, #0
 801b34e:	f47f af3c 	bne.w	801b1ca <_scanf_float+0x66>
 801b352:	6822      	ldr	r2, [r4, #0]
 801b354:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801b358:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801b35c:	f47f af39 	bne.w	801b1d2 <_scanf_float+0x6e>
 801b360:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b364:	6022      	str	r2, [r4, #0]
 801b366:	2501      	movs	r5, #1
 801b368:	e7c0      	b.n	801b2ec <_scanf_float+0x188>
 801b36a:	2d03      	cmp	r5, #3
 801b36c:	d0e2      	beq.n	801b334 <_scanf_float+0x1d0>
 801b36e:	2d05      	cmp	r5, #5
 801b370:	e7de      	b.n	801b330 <_scanf_float+0x1cc>
 801b372:	2d02      	cmp	r5, #2
 801b374:	f47f af26 	bne.w	801b1c4 <_scanf_float+0x60>
 801b378:	2503      	movs	r5, #3
 801b37a:	e7b7      	b.n	801b2ec <_scanf_float+0x188>
 801b37c:	2d06      	cmp	r5, #6
 801b37e:	f47f af21 	bne.w	801b1c4 <_scanf_float+0x60>
 801b382:	2507      	movs	r5, #7
 801b384:	e7b2      	b.n	801b2ec <_scanf_float+0x188>
 801b386:	6822      	ldr	r2, [r4, #0]
 801b388:	0591      	lsls	r1, r2, #22
 801b38a:	f57f af1b 	bpl.w	801b1c4 <_scanf_float+0x60>
 801b38e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801b392:	6022      	str	r2, [r4, #0]
 801b394:	f8cd 9004 	str.w	r9, [sp, #4]
 801b398:	e7a8      	b.n	801b2ec <_scanf_float+0x188>
 801b39a:	6822      	ldr	r2, [r4, #0]
 801b39c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801b3a0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801b3a4:	d006      	beq.n	801b3b4 <_scanf_float+0x250>
 801b3a6:	0550      	lsls	r0, r2, #21
 801b3a8:	f57f af0c 	bpl.w	801b1c4 <_scanf_float+0x60>
 801b3ac:	f1b9 0f00 	cmp.w	r9, #0
 801b3b0:	f43f af0f 	beq.w	801b1d2 <_scanf_float+0x6e>
 801b3b4:	0591      	lsls	r1, r2, #22
 801b3b6:	bf58      	it	pl
 801b3b8:	9901      	ldrpl	r1, [sp, #4]
 801b3ba:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b3be:	bf58      	it	pl
 801b3c0:	eba9 0101 	subpl.w	r1, r9, r1
 801b3c4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801b3c8:	bf58      	it	pl
 801b3ca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801b3ce:	6022      	str	r2, [r4, #0]
 801b3d0:	f04f 0900 	mov.w	r9, #0
 801b3d4:	e78a      	b.n	801b2ec <_scanf_float+0x188>
 801b3d6:	f04f 0a03 	mov.w	sl, #3
 801b3da:	e787      	b.n	801b2ec <_scanf_float+0x188>
 801b3dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801b3e0:	4639      	mov	r1, r7
 801b3e2:	4640      	mov	r0, r8
 801b3e4:	4798      	blx	r3
 801b3e6:	2800      	cmp	r0, #0
 801b3e8:	f43f aedf 	beq.w	801b1aa <_scanf_float+0x46>
 801b3ec:	e6ea      	b.n	801b1c4 <_scanf_float+0x60>
 801b3ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b3f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b3f6:	463a      	mov	r2, r7
 801b3f8:	4640      	mov	r0, r8
 801b3fa:	4798      	blx	r3
 801b3fc:	6923      	ldr	r3, [r4, #16]
 801b3fe:	3b01      	subs	r3, #1
 801b400:	6123      	str	r3, [r4, #16]
 801b402:	e6ec      	b.n	801b1de <_scanf_float+0x7a>
 801b404:	1e6b      	subs	r3, r5, #1
 801b406:	2b06      	cmp	r3, #6
 801b408:	d825      	bhi.n	801b456 <_scanf_float+0x2f2>
 801b40a:	2d02      	cmp	r5, #2
 801b40c:	d836      	bhi.n	801b47c <_scanf_float+0x318>
 801b40e:	455e      	cmp	r6, fp
 801b410:	f67f aee8 	bls.w	801b1e4 <_scanf_float+0x80>
 801b414:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b418:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b41c:	463a      	mov	r2, r7
 801b41e:	4640      	mov	r0, r8
 801b420:	4798      	blx	r3
 801b422:	6923      	ldr	r3, [r4, #16]
 801b424:	3b01      	subs	r3, #1
 801b426:	6123      	str	r3, [r4, #16]
 801b428:	e7f1      	b.n	801b40e <_scanf_float+0x2aa>
 801b42a:	9802      	ldr	r0, [sp, #8]
 801b42c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b430:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801b434:	9002      	str	r0, [sp, #8]
 801b436:	463a      	mov	r2, r7
 801b438:	4640      	mov	r0, r8
 801b43a:	4798      	blx	r3
 801b43c:	6923      	ldr	r3, [r4, #16]
 801b43e:	3b01      	subs	r3, #1
 801b440:	6123      	str	r3, [r4, #16]
 801b442:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b446:	fa5f fa8a 	uxtb.w	sl, sl
 801b44a:	f1ba 0f02 	cmp.w	sl, #2
 801b44e:	d1ec      	bne.n	801b42a <_scanf_float+0x2c6>
 801b450:	3d03      	subs	r5, #3
 801b452:	b2ed      	uxtb	r5, r5
 801b454:	1b76      	subs	r6, r6, r5
 801b456:	6823      	ldr	r3, [r4, #0]
 801b458:	05da      	lsls	r2, r3, #23
 801b45a:	d52f      	bpl.n	801b4bc <_scanf_float+0x358>
 801b45c:	055b      	lsls	r3, r3, #21
 801b45e:	d510      	bpl.n	801b482 <_scanf_float+0x31e>
 801b460:	455e      	cmp	r6, fp
 801b462:	f67f aebf 	bls.w	801b1e4 <_scanf_float+0x80>
 801b466:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b46a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b46e:	463a      	mov	r2, r7
 801b470:	4640      	mov	r0, r8
 801b472:	4798      	blx	r3
 801b474:	6923      	ldr	r3, [r4, #16]
 801b476:	3b01      	subs	r3, #1
 801b478:	6123      	str	r3, [r4, #16]
 801b47a:	e7f1      	b.n	801b460 <_scanf_float+0x2fc>
 801b47c:	46aa      	mov	sl, r5
 801b47e:	9602      	str	r6, [sp, #8]
 801b480:	e7df      	b.n	801b442 <_scanf_float+0x2de>
 801b482:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801b486:	6923      	ldr	r3, [r4, #16]
 801b488:	2965      	cmp	r1, #101	; 0x65
 801b48a:	f103 33ff 	add.w	r3, r3, #4294967295
 801b48e:	f106 35ff 	add.w	r5, r6, #4294967295
 801b492:	6123      	str	r3, [r4, #16]
 801b494:	d00c      	beq.n	801b4b0 <_scanf_float+0x34c>
 801b496:	2945      	cmp	r1, #69	; 0x45
 801b498:	d00a      	beq.n	801b4b0 <_scanf_float+0x34c>
 801b49a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b49e:	463a      	mov	r2, r7
 801b4a0:	4640      	mov	r0, r8
 801b4a2:	4798      	blx	r3
 801b4a4:	6923      	ldr	r3, [r4, #16]
 801b4a6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801b4aa:	3b01      	subs	r3, #1
 801b4ac:	1eb5      	subs	r5, r6, #2
 801b4ae:	6123      	str	r3, [r4, #16]
 801b4b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b4b4:	463a      	mov	r2, r7
 801b4b6:	4640      	mov	r0, r8
 801b4b8:	4798      	blx	r3
 801b4ba:	462e      	mov	r6, r5
 801b4bc:	6825      	ldr	r5, [r4, #0]
 801b4be:	f015 0510 	ands.w	r5, r5, #16
 801b4c2:	d158      	bne.n	801b576 <_scanf_float+0x412>
 801b4c4:	7035      	strb	r5, [r6, #0]
 801b4c6:	6823      	ldr	r3, [r4, #0]
 801b4c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801b4cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b4d0:	d11c      	bne.n	801b50c <_scanf_float+0x3a8>
 801b4d2:	9b01      	ldr	r3, [sp, #4]
 801b4d4:	454b      	cmp	r3, r9
 801b4d6:	eba3 0209 	sub.w	r2, r3, r9
 801b4da:	d124      	bne.n	801b526 <_scanf_float+0x3c2>
 801b4dc:	2200      	movs	r2, #0
 801b4de:	4659      	mov	r1, fp
 801b4e0:	4640      	mov	r0, r8
 801b4e2:	f002 fd7d 	bl	801dfe0 <_strtod_r>
 801b4e6:	9b03      	ldr	r3, [sp, #12]
 801b4e8:	6821      	ldr	r1, [r4, #0]
 801b4ea:	681b      	ldr	r3, [r3, #0]
 801b4ec:	f011 0f02 	tst.w	r1, #2
 801b4f0:	ec57 6b10 	vmov	r6, r7, d0
 801b4f4:	f103 0204 	add.w	r2, r3, #4
 801b4f8:	d020      	beq.n	801b53c <_scanf_float+0x3d8>
 801b4fa:	9903      	ldr	r1, [sp, #12]
 801b4fc:	600a      	str	r2, [r1, #0]
 801b4fe:	681b      	ldr	r3, [r3, #0]
 801b500:	e9c3 6700 	strd	r6, r7, [r3]
 801b504:	68e3      	ldr	r3, [r4, #12]
 801b506:	3301      	adds	r3, #1
 801b508:	60e3      	str	r3, [r4, #12]
 801b50a:	e66c      	b.n	801b1e6 <_scanf_float+0x82>
 801b50c:	9b04      	ldr	r3, [sp, #16]
 801b50e:	2b00      	cmp	r3, #0
 801b510:	d0e4      	beq.n	801b4dc <_scanf_float+0x378>
 801b512:	9905      	ldr	r1, [sp, #20]
 801b514:	230a      	movs	r3, #10
 801b516:	462a      	mov	r2, r5
 801b518:	3101      	adds	r1, #1
 801b51a:	4640      	mov	r0, r8
 801b51c:	f002 fde8 	bl	801e0f0 <_strtol_r>
 801b520:	9b04      	ldr	r3, [sp, #16]
 801b522:	9e05      	ldr	r6, [sp, #20]
 801b524:	1ac2      	subs	r2, r0, r3
 801b526:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801b52a:	429e      	cmp	r6, r3
 801b52c:	bf28      	it	cs
 801b52e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801b532:	4912      	ldr	r1, [pc, #72]	; (801b57c <_scanf_float+0x418>)
 801b534:	4630      	mov	r0, r6
 801b536:	f000 f991 	bl	801b85c <siprintf>
 801b53a:	e7cf      	b.n	801b4dc <_scanf_float+0x378>
 801b53c:	f011 0f04 	tst.w	r1, #4
 801b540:	9903      	ldr	r1, [sp, #12]
 801b542:	600a      	str	r2, [r1, #0]
 801b544:	d1db      	bne.n	801b4fe <_scanf_float+0x39a>
 801b546:	f8d3 8000 	ldr.w	r8, [r3]
 801b54a:	ee10 2a10 	vmov	r2, s0
 801b54e:	ee10 0a10 	vmov	r0, s0
 801b552:	463b      	mov	r3, r7
 801b554:	4639      	mov	r1, r7
 801b556:	f7ed fcf9 	bl	8008f4c <__aeabi_dcmpun>
 801b55a:	b128      	cbz	r0, 801b568 <_scanf_float+0x404>
 801b55c:	4808      	ldr	r0, [pc, #32]	; (801b580 <_scanf_float+0x41c>)
 801b55e:	f000 fb03 	bl	801bb68 <nanf>
 801b562:	ed88 0a00 	vstr	s0, [r8]
 801b566:	e7cd      	b.n	801b504 <_scanf_float+0x3a0>
 801b568:	4630      	mov	r0, r6
 801b56a:	4639      	mov	r1, r7
 801b56c:	f7ed fd4c 	bl	8009008 <__aeabi_d2f>
 801b570:	f8c8 0000 	str.w	r0, [r8]
 801b574:	e7c6      	b.n	801b504 <_scanf_float+0x3a0>
 801b576:	2500      	movs	r5, #0
 801b578:	e635      	b.n	801b1e6 <_scanf_float+0x82>
 801b57a:	bf00      	nop
 801b57c:	0802154c 	.word	0x0802154c
 801b580:	080218dd 	.word	0x080218dd

0801b584 <std>:
 801b584:	2300      	movs	r3, #0
 801b586:	b510      	push	{r4, lr}
 801b588:	4604      	mov	r4, r0
 801b58a:	e9c0 3300 	strd	r3, r3, [r0]
 801b58e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b592:	6083      	str	r3, [r0, #8]
 801b594:	8181      	strh	r1, [r0, #12]
 801b596:	6643      	str	r3, [r0, #100]	; 0x64
 801b598:	81c2      	strh	r2, [r0, #14]
 801b59a:	6183      	str	r3, [r0, #24]
 801b59c:	4619      	mov	r1, r3
 801b59e:	2208      	movs	r2, #8
 801b5a0:	305c      	adds	r0, #92	; 0x5c
 801b5a2:	f000 fa53 	bl	801ba4c <memset>
 801b5a6:	4b0d      	ldr	r3, [pc, #52]	; (801b5dc <std+0x58>)
 801b5a8:	6263      	str	r3, [r4, #36]	; 0x24
 801b5aa:	4b0d      	ldr	r3, [pc, #52]	; (801b5e0 <std+0x5c>)
 801b5ac:	62a3      	str	r3, [r4, #40]	; 0x28
 801b5ae:	4b0d      	ldr	r3, [pc, #52]	; (801b5e4 <std+0x60>)
 801b5b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b5b2:	4b0d      	ldr	r3, [pc, #52]	; (801b5e8 <std+0x64>)
 801b5b4:	6323      	str	r3, [r4, #48]	; 0x30
 801b5b6:	4b0d      	ldr	r3, [pc, #52]	; (801b5ec <std+0x68>)
 801b5b8:	6224      	str	r4, [r4, #32]
 801b5ba:	429c      	cmp	r4, r3
 801b5bc:	d006      	beq.n	801b5cc <std+0x48>
 801b5be:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801b5c2:	4294      	cmp	r4, r2
 801b5c4:	d002      	beq.n	801b5cc <std+0x48>
 801b5c6:	33d0      	adds	r3, #208	; 0xd0
 801b5c8:	429c      	cmp	r4, r3
 801b5ca:	d105      	bne.n	801b5d8 <std+0x54>
 801b5cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b5d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b5d4:	f000 bab6 	b.w	801bb44 <__retarget_lock_init_recursive>
 801b5d8:	bd10      	pop	{r4, pc}
 801b5da:	bf00      	nop
 801b5dc:	0801b89d 	.word	0x0801b89d
 801b5e0:	0801b8bf 	.word	0x0801b8bf
 801b5e4:	0801b8f7 	.word	0x0801b8f7
 801b5e8:	0801b91b 	.word	0x0801b91b
 801b5ec:	20000bf4 	.word	0x20000bf4

0801b5f0 <stdio_exit_handler>:
 801b5f0:	4a02      	ldr	r2, [pc, #8]	; (801b5fc <stdio_exit_handler+0xc>)
 801b5f2:	4903      	ldr	r1, [pc, #12]	; (801b600 <stdio_exit_handler+0x10>)
 801b5f4:	4803      	ldr	r0, [pc, #12]	; (801b604 <stdio_exit_handler+0x14>)
 801b5f6:	f000 b869 	b.w	801b6cc <_fwalk_sglue>
 801b5fa:	bf00      	nop
 801b5fc:	200000f4 	.word	0x200000f4
 801b600:	0801e739 	.word	0x0801e739
 801b604:	20000100 	.word	0x20000100

0801b608 <cleanup_stdio>:
 801b608:	6841      	ldr	r1, [r0, #4]
 801b60a:	4b0c      	ldr	r3, [pc, #48]	; (801b63c <cleanup_stdio+0x34>)
 801b60c:	4299      	cmp	r1, r3
 801b60e:	b510      	push	{r4, lr}
 801b610:	4604      	mov	r4, r0
 801b612:	d001      	beq.n	801b618 <cleanup_stdio+0x10>
 801b614:	f003 f890 	bl	801e738 <_fflush_r>
 801b618:	68a1      	ldr	r1, [r4, #8]
 801b61a:	4b09      	ldr	r3, [pc, #36]	; (801b640 <cleanup_stdio+0x38>)
 801b61c:	4299      	cmp	r1, r3
 801b61e:	d002      	beq.n	801b626 <cleanup_stdio+0x1e>
 801b620:	4620      	mov	r0, r4
 801b622:	f003 f889 	bl	801e738 <_fflush_r>
 801b626:	68e1      	ldr	r1, [r4, #12]
 801b628:	4b06      	ldr	r3, [pc, #24]	; (801b644 <cleanup_stdio+0x3c>)
 801b62a:	4299      	cmp	r1, r3
 801b62c:	d004      	beq.n	801b638 <cleanup_stdio+0x30>
 801b62e:	4620      	mov	r0, r4
 801b630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b634:	f003 b880 	b.w	801e738 <_fflush_r>
 801b638:	bd10      	pop	{r4, pc}
 801b63a:	bf00      	nop
 801b63c:	20000bf4 	.word	0x20000bf4
 801b640:	20000c5c 	.word	0x20000c5c
 801b644:	20000cc4 	.word	0x20000cc4

0801b648 <global_stdio_init.part.0>:
 801b648:	b510      	push	{r4, lr}
 801b64a:	4b0b      	ldr	r3, [pc, #44]	; (801b678 <global_stdio_init.part.0+0x30>)
 801b64c:	4c0b      	ldr	r4, [pc, #44]	; (801b67c <global_stdio_init.part.0+0x34>)
 801b64e:	4a0c      	ldr	r2, [pc, #48]	; (801b680 <global_stdio_init.part.0+0x38>)
 801b650:	601a      	str	r2, [r3, #0]
 801b652:	4620      	mov	r0, r4
 801b654:	2200      	movs	r2, #0
 801b656:	2104      	movs	r1, #4
 801b658:	f7ff ff94 	bl	801b584 <std>
 801b65c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801b660:	2201      	movs	r2, #1
 801b662:	2109      	movs	r1, #9
 801b664:	f7ff ff8e 	bl	801b584 <std>
 801b668:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801b66c:	2202      	movs	r2, #2
 801b66e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b672:	2112      	movs	r1, #18
 801b674:	f7ff bf86 	b.w	801b584 <std>
 801b678:	20000d2c 	.word	0x20000d2c
 801b67c:	20000bf4 	.word	0x20000bf4
 801b680:	0801b5f1 	.word	0x0801b5f1

0801b684 <__sfp_lock_acquire>:
 801b684:	4801      	ldr	r0, [pc, #4]	; (801b68c <__sfp_lock_acquire+0x8>)
 801b686:	f000 ba5e 	b.w	801bb46 <__retarget_lock_acquire_recursive>
 801b68a:	bf00      	nop
 801b68c:	20000d35 	.word	0x20000d35

0801b690 <__sfp_lock_release>:
 801b690:	4801      	ldr	r0, [pc, #4]	; (801b698 <__sfp_lock_release+0x8>)
 801b692:	f000 ba59 	b.w	801bb48 <__retarget_lock_release_recursive>
 801b696:	bf00      	nop
 801b698:	20000d35 	.word	0x20000d35

0801b69c <__sinit>:
 801b69c:	b510      	push	{r4, lr}
 801b69e:	4604      	mov	r4, r0
 801b6a0:	f7ff fff0 	bl	801b684 <__sfp_lock_acquire>
 801b6a4:	6a23      	ldr	r3, [r4, #32]
 801b6a6:	b11b      	cbz	r3, 801b6b0 <__sinit+0x14>
 801b6a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b6ac:	f7ff bff0 	b.w	801b690 <__sfp_lock_release>
 801b6b0:	4b04      	ldr	r3, [pc, #16]	; (801b6c4 <__sinit+0x28>)
 801b6b2:	6223      	str	r3, [r4, #32]
 801b6b4:	4b04      	ldr	r3, [pc, #16]	; (801b6c8 <__sinit+0x2c>)
 801b6b6:	681b      	ldr	r3, [r3, #0]
 801b6b8:	2b00      	cmp	r3, #0
 801b6ba:	d1f5      	bne.n	801b6a8 <__sinit+0xc>
 801b6bc:	f7ff ffc4 	bl	801b648 <global_stdio_init.part.0>
 801b6c0:	e7f2      	b.n	801b6a8 <__sinit+0xc>
 801b6c2:	bf00      	nop
 801b6c4:	0801b609 	.word	0x0801b609
 801b6c8:	20000d2c 	.word	0x20000d2c

0801b6cc <_fwalk_sglue>:
 801b6cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b6d0:	4607      	mov	r7, r0
 801b6d2:	4688      	mov	r8, r1
 801b6d4:	4614      	mov	r4, r2
 801b6d6:	2600      	movs	r6, #0
 801b6d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b6dc:	f1b9 0901 	subs.w	r9, r9, #1
 801b6e0:	d505      	bpl.n	801b6ee <_fwalk_sglue+0x22>
 801b6e2:	6824      	ldr	r4, [r4, #0]
 801b6e4:	2c00      	cmp	r4, #0
 801b6e6:	d1f7      	bne.n	801b6d8 <_fwalk_sglue+0xc>
 801b6e8:	4630      	mov	r0, r6
 801b6ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b6ee:	89ab      	ldrh	r3, [r5, #12]
 801b6f0:	2b01      	cmp	r3, #1
 801b6f2:	d907      	bls.n	801b704 <_fwalk_sglue+0x38>
 801b6f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b6f8:	3301      	adds	r3, #1
 801b6fa:	d003      	beq.n	801b704 <_fwalk_sglue+0x38>
 801b6fc:	4629      	mov	r1, r5
 801b6fe:	4638      	mov	r0, r7
 801b700:	47c0      	blx	r8
 801b702:	4306      	orrs	r6, r0
 801b704:	3568      	adds	r5, #104	; 0x68
 801b706:	e7e9      	b.n	801b6dc <_fwalk_sglue+0x10>

0801b708 <iprintf>:
 801b708:	b40f      	push	{r0, r1, r2, r3}
 801b70a:	b507      	push	{r0, r1, r2, lr}
 801b70c:	4906      	ldr	r1, [pc, #24]	; (801b728 <iprintf+0x20>)
 801b70e:	ab04      	add	r3, sp, #16
 801b710:	6808      	ldr	r0, [r1, #0]
 801b712:	f853 2b04 	ldr.w	r2, [r3], #4
 801b716:	6881      	ldr	r1, [r0, #8]
 801b718:	9301      	str	r3, [sp, #4]
 801b71a:	f002 fe6d 	bl	801e3f8 <_vfiprintf_r>
 801b71e:	b003      	add	sp, #12
 801b720:	f85d eb04 	ldr.w	lr, [sp], #4
 801b724:	b004      	add	sp, #16
 801b726:	4770      	bx	lr
 801b728:	2000014c 	.word	0x2000014c

0801b72c <putchar>:
 801b72c:	4b02      	ldr	r3, [pc, #8]	; (801b738 <putchar+0xc>)
 801b72e:	4601      	mov	r1, r0
 801b730:	6818      	ldr	r0, [r3, #0]
 801b732:	6882      	ldr	r2, [r0, #8]
 801b734:	f003 b88a 	b.w	801e84c <_putc_r>
 801b738:	2000014c 	.word	0x2000014c

0801b73c <_puts_r>:
 801b73c:	6a03      	ldr	r3, [r0, #32]
 801b73e:	b570      	push	{r4, r5, r6, lr}
 801b740:	6884      	ldr	r4, [r0, #8]
 801b742:	4605      	mov	r5, r0
 801b744:	460e      	mov	r6, r1
 801b746:	b90b      	cbnz	r3, 801b74c <_puts_r+0x10>
 801b748:	f7ff ffa8 	bl	801b69c <__sinit>
 801b74c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b74e:	07db      	lsls	r3, r3, #31
 801b750:	d405      	bmi.n	801b75e <_puts_r+0x22>
 801b752:	89a3      	ldrh	r3, [r4, #12]
 801b754:	0598      	lsls	r0, r3, #22
 801b756:	d402      	bmi.n	801b75e <_puts_r+0x22>
 801b758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b75a:	f000 f9f4 	bl	801bb46 <__retarget_lock_acquire_recursive>
 801b75e:	89a3      	ldrh	r3, [r4, #12]
 801b760:	0719      	lsls	r1, r3, #28
 801b762:	d513      	bpl.n	801b78c <_puts_r+0x50>
 801b764:	6923      	ldr	r3, [r4, #16]
 801b766:	b18b      	cbz	r3, 801b78c <_puts_r+0x50>
 801b768:	3e01      	subs	r6, #1
 801b76a:	68a3      	ldr	r3, [r4, #8]
 801b76c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b770:	3b01      	subs	r3, #1
 801b772:	60a3      	str	r3, [r4, #8]
 801b774:	b9e9      	cbnz	r1, 801b7b2 <_puts_r+0x76>
 801b776:	2b00      	cmp	r3, #0
 801b778:	da2e      	bge.n	801b7d8 <_puts_r+0x9c>
 801b77a:	4622      	mov	r2, r4
 801b77c:	210a      	movs	r1, #10
 801b77e:	4628      	mov	r0, r5
 801b780:	f000 f8cf 	bl	801b922 <__swbuf_r>
 801b784:	3001      	adds	r0, #1
 801b786:	d007      	beq.n	801b798 <_puts_r+0x5c>
 801b788:	250a      	movs	r5, #10
 801b78a:	e007      	b.n	801b79c <_puts_r+0x60>
 801b78c:	4621      	mov	r1, r4
 801b78e:	4628      	mov	r0, r5
 801b790:	f000 f904 	bl	801b99c <__swsetup_r>
 801b794:	2800      	cmp	r0, #0
 801b796:	d0e7      	beq.n	801b768 <_puts_r+0x2c>
 801b798:	f04f 35ff 	mov.w	r5, #4294967295
 801b79c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b79e:	07da      	lsls	r2, r3, #31
 801b7a0:	d405      	bmi.n	801b7ae <_puts_r+0x72>
 801b7a2:	89a3      	ldrh	r3, [r4, #12]
 801b7a4:	059b      	lsls	r3, r3, #22
 801b7a6:	d402      	bmi.n	801b7ae <_puts_r+0x72>
 801b7a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b7aa:	f000 f9cd 	bl	801bb48 <__retarget_lock_release_recursive>
 801b7ae:	4628      	mov	r0, r5
 801b7b0:	bd70      	pop	{r4, r5, r6, pc}
 801b7b2:	2b00      	cmp	r3, #0
 801b7b4:	da04      	bge.n	801b7c0 <_puts_r+0x84>
 801b7b6:	69a2      	ldr	r2, [r4, #24]
 801b7b8:	429a      	cmp	r2, r3
 801b7ba:	dc06      	bgt.n	801b7ca <_puts_r+0x8e>
 801b7bc:	290a      	cmp	r1, #10
 801b7be:	d004      	beq.n	801b7ca <_puts_r+0x8e>
 801b7c0:	6823      	ldr	r3, [r4, #0]
 801b7c2:	1c5a      	adds	r2, r3, #1
 801b7c4:	6022      	str	r2, [r4, #0]
 801b7c6:	7019      	strb	r1, [r3, #0]
 801b7c8:	e7cf      	b.n	801b76a <_puts_r+0x2e>
 801b7ca:	4622      	mov	r2, r4
 801b7cc:	4628      	mov	r0, r5
 801b7ce:	f000 f8a8 	bl	801b922 <__swbuf_r>
 801b7d2:	3001      	adds	r0, #1
 801b7d4:	d1c9      	bne.n	801b76a <_puts_r+0x2e>
 801b7d6:	e7df      	b.n	801b798 <_puts_r+0x5c>
 801b7d8:	6823      	ldr	r3, [r4, #0]
 801b7da:	250a      	movs	r5, #10
 801b7dc:	1c5a      	adds	r2, r3, #1
 801b7de:	6022      	str	r2, [r4, #0]
 801b7e0:	701d      	strb	r5, [r3, #0]
 801b7e2:	e7db      	b.n	801b79c <_puts_r+0x60>

0801b7e4 <puts>:
 801b7e4:	4b02      	ldr	r3, [pc, #8]	; (801b7f0 <puts+0xc>)
 801b7e6:	4601      	mov	r1, r0
 801b7e8:	6818      	ldr	r0, [r3, #0]
 801b7ea:	f7ff bfa7 	b.w	801b73c <_puts_r>
 801b7ee:	bf00      	nop
 801b7f0:	2000014c 	.word	0x2000014c

0801b7f4 <sniprintf>:
 801b7f4:	b40c      	push	{r2, r3}
 801b7f6:	b530      	push	{r4, r5, lr}
 801b7f8:	4b17      	ldr	r3, [pc, #92]	; (801b858 <sniprintf+0x64>)
 801b7fa:	1e0c      	subs	r4, r1, #0
 801b7fc:	681d      	ldr	r5, [r3, #0]
 801b7fe:	b09d      	sub	sp, #116	; 0x74
 801b800:	da08      	bge.n	801b814 <sniprintf+0x20>
 801b802:	238b      	movs	r3, #139	; 0x8b
 801b804:	602b      	str	r3, [r5, #0]
 801b806:	f04f 30ff 	mov.w	r0, #4294967295
 801b80a:	b01d      	add	sp, #116	; 0x74
 801b80c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b810:	b002      	add	sp, #8
 801b812:	4770      	bx	lr
 801b814:	f44f 7302 	mov.w	r3, #520	; 0x208
 801b818:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b81c:	bf14      	ite	ne
 801b81e:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b822:	4623      	moveq	r3, r4
 801b824:	9304      	str	r3, [sp, #16]
 801b826:	9307      	str	r3, [sp, #28]
 801b828:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b82c:	9002      	str	r0, [sp, #8]
 801b82e:	9006      	str	r0, [sp, #24]
 801b830:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b834:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b836:	ab21      	add	r3, sp, #132	; 0x84
 801b838:	a902      	add	r1, sp, #8
 801b83a:	4628      	mov	r0, r5
 801b83c:	9301      	str	r3, [sp, #4]
 801b83e:	f002 fcb3 	bl	801e1a8 <_svfiprintf_r>
 801b842:	1c43      	adds	r3, r0, #1
 801b844:	bfbc      	itt	lt
 801b846:	238b      	movlt	r3, #139	; 0x8b
 801b848:	602b      	strlt	r3, [r5, #0]
 801b84a:	2c00      	cmp	r4, #0
 801b84c:	d0dd      	beq.n	801b80a <sniprintf+0x16>
 801b84e:	9b02      	ldr	r3, [sp, #8]
 801b850:	2200      	movs	r2, #0
 801b852:	701a      	strb	r2, [r3, #0]
 801b854:	e7d9      	b.n	801b80a <sniprintf+0x16>
 801b856:	bf00      	nop
 801b858:	2000014c 	.word	0x2000014c

0801b85c <siprintf>:
 801b85c:	b40e      	push	{r1, r2, r3}
 801b85e:	b500      	push	{lr}
 801b860:	b09c      	sub	sp, #112	; 0x70
 801b862:	ab1d      	add	r3, sp, #116	; 0x74
 801b864:	9002      	str	r0, [sp, #8]
 801b866:	9006      	str	r0, [sp, #24]
 801b868:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b86c:	4809      	ldr	r0, [pc, #36]	; (801b894 <siprintf+0x38>)
 801b86e:	9107      	str	r1, [sp, #28]
 801b870:	9104      	str	r1, [sp, #16]
 801b872:	4909      	ldr	r1, [pc, #36]	; (801b898 <siprintf+0x3c>)
 801b874:	f853 2b04 	ldr.w	r2, [r3], #4
 801b878:	9105      	str	r1, [sp, #20]
 801b87a:	6800      	ldr	r0, [r0, #0]
 801b87c:	9301      	str	r3, [sp, #4]
 801b87e:	a902      	add	r1, sp, #8
 801b880:	f002 fc92 	bl	801e1a8 <_svfiprintf_r>
 801b884:	9b02      	ldr	r3, [sp, #8]
 801b886:	2200      	movs	r2, #0
 801b888:	701a      	strb	r2, [r3, #0]
 801b88a:	b01c      	add	sp, #112	; 0x70
 801b88c:	f85d eb04 	ldr.w	lr, [sp], #4
 801b890:	b003      	add	sp, #12
 801b892:	4770      	bx	lr
 801b894:	2000014c 	.word	0x2000014c
 801b898:	ffff0208 	.word	0xffff0208

0801b89c <__sread>:
 801b89c:	b510      	push	{r4, lr}
 801b89e:	460c      	mov	r4, r1
 801b8a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b8a4:	f000 f900 	bl	801baa8 <_read_r>
 801b8a8:	2800      	cmp	r0, #0
 801b8aa:	bfab      	itete	ge
 801b8ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b8ae:	89a3      	ldrhlt	r3, [r4, #12]
 801b8b0:	181b      	addge	r3, r3, r0
 801b8b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b8b6:	bfac      	ite	ge
 801b8b8:	6563      	strge	r3, [r4, #84]	; 0x54
 801b8ba:	81a3      	strhlt	r3, [r4, #12]
 801b8bc:	bd10      	pop	{r4, pc}

0801b8be <__swrite>:
 801b8be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b8c2:	461f      	mov	r7, r3
 801b8c4:	898b      	ldrh	r3, [r1, #12]
 801b8c6:	05db      	lsls	r3, r3, #23
 801b8c8:	4605      	mov	r5, r0
 801b8ca:	460c      	mov	r4, r1
 801b8cc:	4616      	mov	r6, r2
 801b8ce:	d505      	bpl.n	801b8dc <__swrite+0x1e>
 801b8d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b8d4:	2302      	movs	r3, #2
 801b8d6:	2200      	movs	r2, #0
 801b8d8:	f000 f8d4 	bl	801ba84 <_lseek_r>
 801b8dc:	89a3      	ldrh	r3, [r4, #12]
 801b8de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b8e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b8e6:	81a3      	strh	r3, [r4, #12]
 801b8e8:	4632      	mov	r2, r6
 801b8ea:	463b      	mov	r3, r7
 801b8ec:	4628      	mov	r0, r5
 801b8ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b8f2:	f000 b8eb 	b.w	801bacc <_write_r>

0801b8f6 <__sseek>:
 801b8f6:	b510      	push	{r4, lr}
 801b8f8:	460c      	mov	r4, r1
 801b8fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b8fe:	f000 f8c1 	bl	801ba84 <_lseek_r>
 801b902:	1c43      	adds	r3, r0, #1
 801b904:	89a3      	ldrh	r3, [r4, #12]
 801b906:	bf15      	itete	ne
 801b908:	6560      	strne	r0, [r4, #84]	; 0x54
 801b90a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b90e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b912:	81a3      	strheq	r3, [r4, #12]
 801b914:	bf18      	it	ne
 801b916:	81a3      	strhne	r3, [r4, #12]
 801b918:	bd10      	pop	{r4, pc}

0801b91a <__sclose>:
 801b91a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b91e:	f000 b8a1 	b.w	801ba64 <_close_r>

0801b922 <__swbuf_r>:
 801b922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b924:	460e      	mov	r6, r1
 801b926:	4614      	mov	r4, r2
 801b928:	4605      	mov	r5, r0
 801b92a:	b118      	cbz	r0, 801b934 <__swbuf_r+0x12>
 801b92c:	6a03      	ldr	r3, [r0, #32]
 801b92e:	b90b      	cbnz	r3, 801b934 <__swbuf_r+0x12>
 801b930:	f7ff feb4 	bl	801b69c <__sinit>
 801b934:	69a3      	ldr	r3, [r4, #24]
 801b936:	60a3      	str	r3, [r4, #8]
 801b938:	89a3      	ldrh	r3, [r4, #12]
 801b93a:	071a      	lsls	r2, r3, #28
 801b93c:	d525      	bpl.n	801b98a <__swbuf_r+0x68>
 801b93e:	6923      	ldr	r3, [r4, #16]
 801b940:	b31b      	cbz	r3, 801b98a <__swbuf_r+0x68>
 801b942:	6823      	ldr	r3, [r4, #0]
 801b944:	6922      	ldr	r2, [r4, #16]
 801b946:	1a98      	subs	r0, r3, r2
 801b948:	6963      	ldr	r3, [r4, #20]
 801b94a:	b2f6      	uxtb	r6, r6
 801b94c:	4283      	cmp	r3, r0
 801b94e:	4637      	mov	r7, r6
 801b950:	dc04      	bgt.n	801b95c <__swbuf_r+0x3a>
 801b952:	4621      	mov	r1, r4
 801b954:	4628      	mov	r0, r5
 801b956:	f002 feef 	bl	801e738 <_fflush_r>
 801b95a:	b9e0      	cbnz	r0, 801b996 <__swbuf_r+0x74>
 801b95c:	68a3      	ldr	r3, [r4, #8]
 801b95e:	3b01      	subs	r3, #1
 801b960:	60a3      	str	r3, [r4, #8]
 801b962:	6823      	ldr	r3, [r4, #0]
 801b964:	1c5a      	adds	r2, r3, #1
 801b966:	6022      	str	r2, [r4, #0]
 801b968:	701e      	strb	r6, [r3, #0]
 801b96a:	6962      	ldr	r2, [r4, #20]
 801b96c:	1c43      	adds	r3, r0, #1
 801b96e:	429a      	cmp	r2, r3
 801b970:	d004      	beq.n	801b97c <__swbuf_r+0x5a>
 801b972:	89a3      	ldrh	r3, [r4, #12]
 801b974:	07db      	lsls	r3, r3, #31
 801b976:	d506      	bpl.n	801b986 <__swbuf_r+0x64>
 801b978:	2e0a      	cmp	r6, #10
 801b97a:	d104      	bne.n	801b986 <__swbuf_r+0x64>
 801b97c:	4621      	mov	r1, r4
 801b97e:	4628      	mov	r0, r5
 801b980:	f002 feda 	bl	801e738 <_fflush_r>
 801b984:	b938      	cbnz	r0, 801b996 <__swbuf_r+0x74>
 801b986:	4638      	mov	r0, r7
 801b988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b98a:	4621      	mov	r1, r4
 801b98c:	4628      	mov	r0, r5
 801b98e:	f000 f805 	bl	801b99c <__swsetup_r>
 801b992:	2800      	cmp	r0, #0
 801b994:	d0d5      	beq.n	801b942 <__swbuf_r+0x20>
 801b996:	f04f 37ff 	mov.w	r7, #4294967295
 801b99a:	e7f4      	b.n	801b986 <__swbuf_r+0x64>

0801b99c <__swsetup_r>:
 801b99c:	b538      	push	{r3, r4, r5, lr}
 801b99e:	4b2a      	ldr	r3, [pc, #168]	; (801ba48 <__swsetup_r+0xac>)
 801b9a0:	4605      	mov	r5, r0
 801b9a2:	6818      	ldr	r0, [r3, #0]
 801b9a4:	460c      	mov	r4, r1
 801b9a6:	b118      	cbz	r0, 801b9b0 <__swsetup_r+0x14>
 801b9a8:	6a03      	ldr	r3, [r0, #32]
 801b9aa:	b90b      	cbnz	r3, 801b9b0 <__swsetup_r+0x14>
 801b9ac:	f7ff fe76 	bl	801b69c <__sinit>
 801b9b0:	89a3      	ldrh	r3, [r4, #12]
 801b9b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b9b6:	0718      	lsls	r0, r3, #28
 801b9b8:	d422      	bmi.n	801ba00 <__swsetup_r+0x64>
 801b9ba:	06d9      	lsls	r1, r3, #27
 801b9bc:	d407      	bmi.n	801b9ce <__swsetup_r+0x32>
 801b9be:	2309      	movs	r3, #9
 801b9c0:	602b      	str	r3, [r5, #0]
 801b9c2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b9c6:	81a3      	strh	r3, [r4, #12]
 801b9c8:	f04f 30ff 	mov.w	r0, #4294967295
 801b9cc:	e034      	b.n	801ba38 <__swsetup_r+0x9c>
 801b9ce:	0758      	lsls	r0, r3, #29
 801b9d0:	d512      	bpl.n	801b9f8 <__swsetup_r+0x5c>
 801b9d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b9d4:	b141      	cbz	r1, 801b9e8 <__swsetup_r+0x4c>
 801b9d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b9da:	4299      	cmp	r1, r3
 801b9dc:	d002      	beq.n	801b9e4 <__swsetup_r+0x48>
 801b9de:	4628      	mov	r0, r5
 801b9e0:	f000 ff44 	bl	801c86c <_free_r>
 801b9e4:	2300      	movs	r3, #0
 801b9e6:	6363      	str	r3, [r4, #52]	; 0x34
 801b9e8:	89a3      	ldrh	r3, [r4, #12]
 801b9ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b9ee:	81a3      	strh	r3, [r4, #12]
 801b9f0:	2300      	movs	r3, #0
 801b9f2:	6063      	str	r3, [r4, #4]
 801b9f4:	6923      	ldr	r3, [r4, #16]
 801b9f6:	6023      	str	r3, [r4, #0]
 801b9f8:	89a3      	ldrh	r3, [r4, #12]
 801b9fa:	f043 0308 	orr.w	r3, r3, #8
 801b9fe:	81a3      	strh	r3, [r4, #12]
 801ba00:	6923      	ldr	r3, [r4, #16]
 801ba02:	b94b      	cbnz	r3, 801ba18 <__swsetup_r+0x7c>
 801ba04:	89a3      	ldrh	r3, [r4, #12]
 801ba06:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801ba0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ba0e:	d003      	beq.n	801ba18 <__swsetup_r+0x7c>
 801ba10:	4621      	mov	r1, r4
 801ba12:	4628      	mov	r0, r5
 801ba14:	f002 fede 	bl	801e7d4 <__smakebuf_r>
 801ba18:	89a0      	ldrh	r0, [r4, #12]
 801ba1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ba1e:	f010 0301 	ands.w	r3, r0, #1
 801ba22:	d00a      	beq.n	801ba3a <__swsetup_r+0x9e>
 801ba24:	2300      	movs	r3, #0
 801ba26:	60a3      	str	r3, [r4, #8]
 801ba28:	6963      	ldr	r3, [r4, #20]
 801ba2a:	425b      	negs	r3, r3
 801ba2c:	61a3      	str	r3, [r4, #24]
 801ba2e:	6923      	ldr	r3, [r4, #16]
 801ba30:	b943      	cbnz	r3, 801ba44 <__swsetup_r+0xa8>
 801ba32:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ba36:	d1c4      	bne.n	801b9c2 <__swsetup_r+0x26>
 801ba38:	bd38      	pop	{r3, r4, r5, pc}
 801ba3a:	0781      	lsls	r1, r0, #30
 801ba3c:	bf58      	it	pl
 801ba3e:	6963      	ldrpl	r3, [r4, #20]
 801ba40:	60a3      	str	r3, [r4, #8]
 801ba42:	e7f4      	b.n	801ba2e <__swsetup_r+0x92>
 801ba44:	2000      	movs	r0, #0
 801ba46:	e7f7      	b.n	801ba38 <__swsetup_r+0x9c>
 801ba48:	2000014c 	.word	0x2000014c

0801ba4c <memset>:
 801ba4c:	4402      	add	r2, r0
 801ba4e:	4603      	mov	r3, r0
 801ba50:	4293      	cmp	r3, r2
 801ba52:	d100      	bne.n	801ba56 <memset+0xa>
 801ba54:	4770      	bx	lr
 801ba56:	f803 1b01 	strb.w	r1, [r3], #1
 801ba5a:	e7f9      	b.n	801ba50 <memset+0x4>

0801ba5c <_localeconv_r>:
 801ba5c:	4800      	ldr	r0, [pc, #0]	; (801ba60 <_localeconv_r+0x4>)
 801ba5e:	4770      	bx	lr
 801ba60:	20000240 	.word	0x20000240

0801ba64 <_close_r>:
 801ba64:	b538      	push	{r3, r4, r5, lr}
 801ba66:	4d06      	ldr	r5, [pc, #24]	; (801ba80 <_close_r+0x1c>)
 801ba68:	2300      	movs	r3, #0
 801ba6a:	4604      	mov	r4, r0
 801ba6c:	4608      	mov	r0, r1
 801ba6e:	602b      	str	r3, [r5, #0]
 801ba70:	f7f1 f95d 	bl	800cd2e <_close>
 801ba74:	1c43      	adds	r3, r0, #1
 801ba76:	d102      	bne.n	801ba7e <_close_r+0x1a>
 801ba78:	682b      	ldr	r3, [r5, #0]
 801ba7a:	b103      	cbz	r3, 801ba7e <_close_r+0x1a>
 801ba7c:	6023      	str	r3, [r4, #0]
 801ba7e:	bd38      	pop	{r3, r4, r5, pc}
 801ba80:	20000d30 	.word	0x20000d30

0801ba84 <_lseek_r>:
 801ba84:	b538      	push	{r3, r4, r5, lr}
 801ba86:	4d07      	ldr	r5, [pc, #28]	; (801baa4 <_lseek_r+0x20>)
 801ba88:	4604      	mov	r4, r0
 801ba8a:	4608      	mov	r0, r1
 801ba8c:	4611      	mov	r1, r2
 801ba8e:	2200      	movs	r2, #0
 801ba90:	602a      	str	r2, [r5, #0]
 801ba92:	461a      	mov	r2, r3
 801ba94:	f7f1 f972 	bl	800cd7c <_lseek>
 801ba98:	1c43      	adds	r3, r0, #1
 801ba9a:	d102      	bne.n	801baa2 <_lseek_r+0x1e>
 801ba9c:	682b      	ldr	r3, [r5, #0]
 801ba9e:	b103      	cbz	r3, 801baa2 <_lseek_r+0x1e>
 801baa0:	6023      	str	r3, [r4, #0]
 801baa2:	bd38      	pop	{r3, r4, r5, pc}
 801baa4:	20000d30 	.word	0x20000d30

0801baa8 <_read_r>:
 801baa8:	b538      	push	{r3, r4, r5, lr}
 801baaa:	4d07      	ldr	r5, [pc, #28]	; (801bac8 <_read_r+0x20>)
 801baac:	4604      	mov	r4, r0
 801baae:	4608      	mov	r0, r1
 801bab0:	4611      	mov	r1, r2
 801bab2:	2200      	movs	r2, #0
 801bab4:	602a      	str	r2, [r5, #0]
 801bab6:	461a      	mov	r2, r3
 801bab8:	f7f1 f900 	bl	800ccbc <_read>
 801babc:	1c43      	adds	r3, r0, #1
 801babe:	d102      	bne.n	801bac6 <_read_r+0x1e>
 801bac0:	682b      	ldr	r3, [r5, #0]
 801bac2:	b103      	cbz	r3, 801bac6 <_read_r+0x1e>
 801bac4:	6023      	str	r3, [r4, #0]
 801bac6:	bd38      	pop	{r3, r4, r5, pc}
 801bac8:	20000d30 	.word	0x20000d30

0801bacc <_write_r>:
 801bacc:	b538      	push	{r3, r4, r5, lr}
 801bace:	4d07      	ldr	r5, [pc, #28]	; (801baec <_write_r+0x20>)
 801bad0:	4604      	mov	r4, r0
 801bad2:	4608      	mov	r0, r1
 801bad4:	4611      	mov	r1, r2
 801bad6:	2200      	movs	r2, #0
 801bad8:	602a      	str	r2, [r5, #0]
 801bada:	461a      	mov	r2, r3
 801badc:	f7f1 f90b 	bl	800ccf6 <_write>
 801bae0:	1c43      	adds	r3, r0, #1
 801bae2:	d102      	bne.n	801baea <_write_r+0x1e>
 801bae4:	682b      	ldr	r3, [r5, #0]
 801bae6:	b103      	cbz	r3, 801baea <_write_r+0x1e>
 801bae8:	6023      	str	r3, [r4, #0]
 801baea:	bd38      	pop	{r3, r4, r5, pc}
 801baec:	20000d30 	.word	0x20000d30

0801baf0 <__errno>:
 801baf0:	4b01      	ldr	r3, [pc, #4]	; (801baf8 <__errno+0x8>)
 801baf2:	6818      	ldr	r0, [r3, #0]
 801baf4:	4770      	bx	lr
 801baf6:	bf00      	nop
 801baf8:	2000014c 	.word	0x2000014c

0801bafc <__libc_init_array>:
 801bafc:	b570      	push	{r4, r5, r6, lr}
 801bafe:	4d0d      	ldr	r5, [pc, #52]	; (801bb34 <__libc_init_array+0x38>)
 801bb00:	4c0d      	ldr	r4, [pc, #52]	; (801bb38 <__libc_init_array+0x3c>)
 801bb02:	1b64      	subs	r4, r4, r5
 801bb04:	10a4      	asrs	r4, r4, #2
 801bb06:	2600      	movs	r6, #0
 801bb08:	42a6      	cmp	r6, r4
 801bb0a:	d109      	bne.n	801bb20 <__libc_init_array+0x24>
 801bb0c:	4d0b      	ldr	r5, [pc, #44]	; (801bb3c <__libc_init_array+0x40>)
 801bb0e:	4c0c      	ldr	r4, [pc, #48]	; (801bb40 <__libc_init_array+0x44>)
 801bb10:	f004 ff2c 	bl	802096c <_init>
 801bb14:	1b64      	subs	r4, r4, r5
 801bb16:	10a4      	asrs	r4, r4, #2
 801bb18:	2600      	movs	r6, #0
 801bb1a:	42a6      	cmp	r6, r4
 801bb1c:	d105      	bne.n	801bb2a <__libc_init_array+0x2e>
 801bb1e:	bd70      	pop	{r4, r5, r6, pc}
 801bb20:	f855 3b04 	ldr.w	r3, [r5], #4
 801bb24:	4798      	blx	r3
 801bb26:	3601      	adds	r6, #1
 801bb28:	e7ee      	b.n	801bb08 <__libc_init_array+0xc>
 801bb2a:	f855 3b04 	ldr.w	r3, [r5], #4
 801bb2e:	4798      	blx	r3
 801bb30:	3601      	adds	r6, #1
 801bb32:	e7f2      	b.n	801bb1a <__libc_init_array+0x1e>
 801bb34:	080219a8 	.word	0x080219a8
 801bb38:	080219a8 	.word	0x080219a8
 801bb3c:	080219a8 	.word	0x080219a8
 801bb40:	080219ac 	.word	0x080219ac

0801bb44 <__retarget_lock_init_recursive>:
 801bb44:	4770      	bx	lr

0801bb46 <__retarget_lock_acquire_recursive>:
 801bb46:	4770      	bx	lr

0801bb48 <__retarget_lock_release_recursive>:
 801bb48:	4770      	bx	lr

0801bb4a <memcpy>:
 801bb4a:	440a      	add	r2, r1
 801bb4c:	4291      	cmp	r1, r2
 801bb4e:	f100 33ff 	add.w	r3, r0, #4294967295
 801bb52:	d100      	bne.n	801bb56 <memcpy+0xc>
 801bb54:	4770      	bx	lr
 801bb56:	b510      	push	{r4, lr}
 801bb58:	f811 4b01 	ldrb.w	r4, [r1], #1
 801bb5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801bb60:	4291      	cmp	r1, r2
 801bb62:	d1f9      	bne.n	801bb58 <memcpy+0xe>
 801bb64:	bd10      	pop	{r4, pc}
	...

0801bb68 <nanf>:
 801bb68:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801bb70 <nanf+0x8>
 801bb6c:	4770      	bx	lr
 801bb6e:	bf00      	nop
 801bb70:	7fc00000 	.word	0x7fc00000

0801bb74 <quorem>:
 801bb74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb78:	6903      	ldr	r3, [r0, #16]
 801bb7a:	690c      	ldr	r4, [r1, #16]
 801bb7c:	42a3      	cmp	r3, r4
 801bb7e:	4607      	mov	r7, r0
 801bb80:	db7e      	blt.n	801bc80 <quorem+0x10c>
 801bb82:	3c01      	subs	r4, #1
 801bb84:	f101 0814 	add.w	r8, r1, #20
 801bb88:	f100 0514 	add.w	r5, r0, #20
 801bb8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801bb90:	9301      	str	r3, [sp, #4]
 801bb92:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801bb96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801bb9a:	3301      	adds	r3, #1
 801bb9c:	429a      	cmp	r2, r3
 801bb9e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801bba2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801bba6:	fbb2 f6f3 	udiv	r6, r2, r3
 801bbaa:	d331      	bcc.n	801bc10 <quorem+0x9c>
 801bbac:	f04f 0e00 	mov.w	lr, #0
 801bbb0:	4640      	mov	r0, r8
 801bbb2:	46ac      	mov	ip, r5
 801bbb4:	46f2      	mov	sl, lr
 801bbb6:	f850 2b04 	ldr.w	r2, [r0], #4
 801bbba:	b293      	uxth	r3, r2
 801bbbc:	fb06 e303 	mla	r3, r6, r3, lr
 801bbc0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801bbc4:	0c1a      	lsrs	r2, r3, #16
 801bbc6:	b29b      	uxth	r3, r3
 801bbc8:	ebaa 0303 	sub.w	r3, sl, r3
 801bbcc:	f8dc a000 	ldr.w	sl, [ip]
 801bbd0:	fa13 f38a 	uxtah	r3, r3, sl
 801bbd4:	fb06 220e 	mla	r2, r6, lr, r2
 801bbd8:	9300      	str	r3, [sp, #0]
 801bbda:	9b00      	ldr	r3, [sp, #0]
 801bbdc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801bbe0:	b292      	uxth	r2, r2
 801bbe2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801bbe6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801bbea:	f8bd 3000 	ldrh.w	r3, [sp]
 801bbee:	4581      	cmp	r9, r0
 801bbf0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801bbf4:	f84c 3b04 	str.w	r3, [ip], #4
 801bbf8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801bbfc:	d2db      	bcs.n	801bbb6 <quorem+0x42>
 801bbfe:	f855 300b 	ldr.w	r3, [r5, fp]
 801bc02:	b92b      	cbnz	r3, 801bc10 <quorem+0x9c>
 801bc04:	9b01      	ldr	r3, [sp, #4]
 801bc06:	3b04      	subs	r3, #4
 801bc08:	429d      	cmp	r5, r3
 801bc0a:	461a      	mov	r2, r3
 801bc0c:	d32c      	bcc.n	801bc68 <quorem+0xf4>
 801bc0e:	613c      	str	r4, [r7, #16]
 801bc10:	4638      	mov	r0, r7
 801bc12:	f001 f9f1 	bl	801cff8 <__mcmp>
 801bc16:	2800      	cmp	r0, #0
 801bc18:	db22      	blt.n	801bc60 <quorem+0xec>
 801bc1a:	3601      	adds	r6, #1
 801bc1c:	4629      	mov	r1, r5
 801bc1e:	2000      	movs	r0, #0
 801bc20:	f858 2b04 	ldr.w	r2, [r8], #4
 801bc24:	f8d1 c000 	ldr.w	ip, [r1]
 801bc28:	b293      	uxth	r3, r2
 801bc2a:	1ac3      	subs	r3, r0, r3
 801bc2c:	0c12      	lsrs	r2, r2, #16
 801bc2e:	fa13 f38c 	uxtah	r3, r3, ip
 801bc32:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801bc36:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801bc3a:	b29b      	uxth	r3, r3
 801bc3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801bc40:	45c1      	cmp	r9, r8
 801bc42:	f841 3b04 	str.w	r3, [r1], #4
 801bc46:	ea4f 4022 	mov.w	r0, r2, asr #16
 801bc4a:	d2e9      	bcs.n	801bc20 <quorem+0xac>
 801bc4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801bc50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801bc54:	b922      	cbnz	r2, 801bc60 <quorem+0xec>
 801bc56:	3b04      	subs	r3, #4
 801bc58:	429d      	cmp	r5, r3
 801bc5a:	461a      	mov	r2, r3
 801bc5c:	d30a      	bcc.n	801bc74 <quorem+0x100>
 801bc5e:	613c      	str	r4, [r7, #16]
 801bc60:	4630      	mov	r0, r6
 801bc62:	b003      	add	sp, #12
 801bc64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc68:	6812      	ldr	r2, [r2, #0]
 801bc6a:	3b04      	subs	r3, #4
 801bc6c:	2a00      	cmp	r2, #0
 801bc6e:	d1ce      	bne.n	801bc0e <quorem+0x9a>
 801bc70:	3c01      	subs	r4, #1
 801bc72:	e7c9      	b.n	801bc08 <quorem+0x94>
 801bc74:	6812      	ldr	r2, [r2, #0]
 801bc76:	3b04      	subs	r3, #4
 801bc78:	2a00      	cmp	r2, #0
 801bc7a:	d1f0      	bne.n	801bc5e <quorem+0xea>
 801bc7c:	3c01      	subs	r4, #1
 801bc7e:	e7eb      	b.n	801bc58 <quorem+0xe4>
 801bc80:	2000      	movs	r0, #0
 801bc82:	e7ee      	b.n	801bc62 <quorem+0xee>
 801bc84:	0000      	movs	r0, r0
	...

0801bc88 <_dtoa_r>:
 801bc88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc8c:	ed2d 8b04 	vpush	{d8-d9}
 801bc90:	69c5      	ldr	r5, [r0, #28]
 801bc92:	b093      	sub	sp, #76	; 0x4c
 801bc94:	ed8d 0b02 	vstr	d0, [sp, #8]
 801bc98:	ec57 6b10 	vmov	r6, r7, d0
 801bc9c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801bca0:	9107      	str	r1, [sp, #28]
 801bca2:	4604      	mov	r4, r0
 801bca4:	920a      	str	r2, [sp, #40]	; 0x28
 801bca6:	930d      	str	r3, [sp, #52]	; 0x34
 801bca8:	b975      	cbnz	r5, 801bcc8 <_dtoa_r+0x40>
 801bcaa:	2010      	movs	r0, #16
 801bcac:	f000 fe2a 	bl	801c904 <malloc>
 801bcb0:	4602      	mov	r2, r0
 801bcb2:	61e0      	str	r0, [r4, #28]
 801bcb4:	b920      	cbnz	r0, 801bcc0 <_dtoa_r+0x38>
 801bcb6:	4bae      	ldr	r3, [pc, #696]	; (801bf70 <_dtoa_r+0x2e8>)
 801bcb8:	21ef      	movs	r1, #239	; 0xef
 801bcba:	48ae      	ldr	r0, [pc, #696]	; (801bf74 <_dtoa_r+0x2ec>)
 801bcbc:	f002 fe60 	bl	801e980 <__assert_func>
 801bcc0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801bcc4:	6005      	str	r5, [r0, #0]
 801bcc6:	60c5      	str	r5, [r0, #12]
 801bcc8:	69e3      	ldr	r3, [r4, #28]
 801bcca:	6819      	ldr	r1, [r3, #0]
 801bccc:	b151      	cbz	r1, 801bce4 <_dtoa_r+0x5c>
 801bcce:	685a      	ldr	r2, [r3, #4]
 801bcd0:	604a      	str	r2, [r1, #4]
 801bcd2:	2301      	movs	r3, #1
 801bcd4:	4093      	lsls	r3, r2
 801bcd6:	608b      	str	r3, [r1, #8]
 801bcd8:	4620      	mov	r0, r4
 801bcda:	f000 ff07 	bl	801caec <_Bfree>
 801bcde:	69e3      	ldr	r3, [r4, #28]
 801bce0:	2200      	movs	r2, #0
 801bce2:	601a      	str	r2, [r3, #0]
 801bce4:	1e3b      	subs	r3, r7, #0
 801bce6:	bfbb      	ittet	lt
 801bce8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801bcec:	9303      	strlt	r3, [sp, #12]
 801bcee:	2300      	movge	r3, #0
 801bcf0:	2201      	movlt	r2, #1
 801bcf2:	bfac      	ite	ge
 801bcf4:	f8c8 3000 	strge.w	r3, [r8]
 801bcf8:	f8c8 2000 	strlt.w	r2, [r8]
 801bcfc:	4b9e      	ldr	r3, [pc, #632]	; (801bf78 <_dtoa_r+0x2f0>)
 801bcfe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801bd02:	ea33 0308 	bics.w	r3, r3, r8
 801bd06:	d11b      	bne.n	801bd40 <_dtoa_r+0xb8>
 801bd08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bd0a:	f242 730f 	movw	r3, #9999	; 0x270f
 801bd0e:	6013      	str	r3, [r2, #0]
 801bd10:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801bd14:	4333      	orrs	r3, r6
 801bd16:	f000 8593 	beq.w	801c840 <_dtoa_r+0xbb8>
 801bd1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bd1c:	b963      	cbnz	r3, 801bd38 <_dtoa_r+0xb0>
 801bd1e:	4b97      	ldr	r3, [pc, #604]	; (801bf7c <_dtoa_r+0x2f4>)
 801bd20:	e027      	b.n	801bd72 <_dtoa_r+0xea>
 801bd22:	4b97      	ldr	r3, [pc, #604]	; (801bf80 <_dtoa_r+0x2f8>)
 801bd24:	9300      	str	r3, [sp, #0]
 801bd26:	3308      	adds	r3, #8
 801bd28:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801bd2a:	6013      	str	r3, [r2, #0]
 801bd2c:	9800      	ldr	r0, [sp, #0]
 801bd2e:	b013      	add	sp, #76	; 0x4c
 801bd30:	ecbd 8b04 	vpop	{d8-d9}
 801bd34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd38:	4b90      	ldr	r3, [pc, #576]	; (801bf7c <_dtoa_r+0x2f4>)
 801bd3a:	9300      	str	r3, [sp, #0]
 801bd3c:	3303      	adds	r3, #3
 801bd3e:	e7f3      	b.n	801bd28 <_dtoa_r+0xa0>
 801bd40:	ed9d 7b02 	vldr	d7, [sp, #8]
 801bd44:	2200      	movs	r2, #0
 801bd46:	ec51 0b17 	vmov	r0, r1, d7
 801bd4a:	eeb0 8a47 	vmov.f32	s16, s14
 801bd4e:	eef0 8a67 	vmov.f32	s17, s15
 801bd52:	2300      	movs	r3, #0
 801bd54:	f7ed f8c8 	bl	8008ee8 <__aeabi_dcmpeq>
 801bd58:	4681      	mov	r9, r0
 801bd5a:	b160      	cbz	r0, 801bd76 <_dtoa_r+0xee>
 801bd5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bd5e:	2301      	movs	r3, #1
 801bd60:	6013      	str	r3, [r2, #0]
 801bd62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bd64:	2b00      	cmp	r3, #0
 801bd66:	f000 8568 	beq.w	801c83a <_dtoa_r+0xbb2>
 801bd6a:	4b86      	ldr	r3, [pc, #536]	; (801bf84 <_dtoa_r+0x2fc>)
 801bd6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801bd6e:	6013      	str	r3, [r2, #0]
 801bd70:	3b01      	subs	r3, #1
 801bd72:	9300      	str	r3, [sp, #0]
 801bd74:	e7da      	b.n	801bd2c <_dtoa_r+0xa4>
 801bd76:	aa10      	add	r2, sp, #64	; 0x40
 801bd78:	a911      	add	r1, sp, #68	; 0x44
 801bd7a:	4620      	mov	r0, r4
 801bd7c:	eeb0 0a48 	vmov.f32	s0, s16
 801bd80:	eef0 0a68 	vmov.f32	s1, s17
 801bd84:	f001 fa4e 	bl	801d224 <__d2b>
 801bd88:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801bd8c:	4682      	mov	sl, r0
 801bd8e:	2d00      	cmp	r5, #0
 801bd90:	d07f      	beq.n	801be92 <_dtoa_r+0x20a>
 801bd92:	ee18 3a90 	vmov	r3, s17
 801bd96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801bd9a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801bd9e:	ec51 0b18 	vmov	r0, r1, d8
 801bda2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801bda6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801bdaa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801bdae:	4619      	mov	r1, r3
 801bdb0:	2200      	movs	r2, #0
 801bdb2:	4b75      	ldr	r3, [pc, #468]	; (801bf88 <_dtoa_r+0x300>)
 801bdb4:	f7ec fc78 	bl	80086a8 <__aeabi_dsub>
 801bdb8:	a367      	add	r3, pc, #412	; (adr r3, 801bf58 <_dtoa_r+0x2d0>)
 801bdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdbe:	f7ec fe2b 	bl	8008a18 <__aeabi_dmul>
 801bdc2:	a367      	add	r3, pc, #412	; (adr r3, 801bf60 <_dtoa_r+0x2d8>)
 801bdc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdc8:	f7ec fc70 	bl	80086ac <__adddf3>
 801bdcc:	4606      	mov	r6, r0
 801bdce:	4628      	mov	r0, r5
 801bdd0:	460f      	mov	r7, r1
 801bdd2:	f7ec fdb7 	bl	8008944 <__aeabi_i2d>
 801bdd6:	a364      	add	r3, pc, #400	; (adr r3, 801bf68 <_dtoa_r+0x2e0>)
 801bdd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bddc:	f7ec fe1c 	bl	8008a18 <__aeabi_dmul>
 801bde0:	4602      	mov	r2, r0
 801bde2:	460b      	mov	r3, r1
 801bde4:	4630      	mov	r0, r6
 801bde6:	4639      	mov	r1, r7
 801bde8:	f7ec fc60 	bl	80086ac <__adddf3>
 801bdec:	4606      	mov	r6, r0
 801bdee:	460f      	mov	r7, r1
 801bdf0:	f7ed f8c2 	bl	8008f78 <__aeabi_d2iz>
 801bdf4:	2200      	movs	r2, #0
 801bdf6:	4683      	mov	fp, r0
 801bdf8:	2300      	movs	r3, #0
 801bdfa:	4630      	mov	r0, r6
 801bdfc:	4639      	mov	r1, r7
 801bdfe:	f7ed f87d 	bl	8008efc <__aeabi_dcmplt>
 801be02:	b148      	cbz	r0, 801be18 <_dtoa_r+0x190>
 801be04:	4658      	mov	r0, fp
 801be06:	f7ec fd9d 	bl	8008944 <__aeabi_i2d>
 801be0a:	4632      	mov	r2, r6
 801be0c:	463b      	mov	r3, r7
 801be0e:	f7ed f86b 	bl	8008ee8 <__aeabi_dcmpeq>
 801be12:	b908      	cbnz	r0, 801be18 <_dtoa_r+0x190>
 801be14:	f10b 3bff 	add.w	fp, fp, #4294967295
 801be18:	f1bb 0f16 	cmp.w	fp, #22
 801be1c:	d857      	bhi.n	801bece <_dtoa_r+0x246>
 801be1e:	4b5b      	ldr	r3, [pc, #364]	; (801bf8c <_dtoa_r+0x304>)
 801be20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801be24:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be28:	ec51 0b18 	vmov	r0, r1, d8
 801be2c:	f7ed f866 	bl	8008efc <__aeabi_dcmplt>
 801be30:	2800      	cmp	r0, #0
 801be32:	d04e      	beq.n	801bed2 <_dtoa_r+0x24a>
 801be34:	f10b 3bff 	add.w	fp, fp, #4294967295
 801be38:	2300      	movs	r3, #0
 801be3a:	930c      	str	r3, [sp, #48]	; 0x30
 801be3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801be3e:	1b5b      	subs	r3, r3, r5
 801be40:	1e5a      	subs	r2, r3, #1
 801be42:	bf45      	ittet	mi
 801be44:	f1c3 0301 	rsbmi	r3, r3, #1
 801be48:	9305      	strmi	r3, [sp, #20]
 801be4a:	2300      	movpl	r3, #0
 801be4c:	2300      	movmi	r3, #0
 801be4e:	9206      	str	r2, [sp, #24]
 801be50:	bf54      	ite	pl
 801be52:	9305      	strpl	r3, [sp, #20]
 801be54:	9306      	strmi	r3, [sp, #24]
 801be56:	f1bb 0f00 	cmp.w	fp, #0
 801be5a:	db3c      	blt.n	801bed6 <_dtoa_r+0x24e>
 801be5c:	9b06      	ldr	r3, [sp, #24]
 801be5e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801be62:	445b      	add	r3, fp
 801be64:	9306      	str	r3, [sp, #24]
 801be66:	2300      	movs	r3, #0
 801be68:	9308      	str	r3, [sp, #32]
 801be6a:	9b07      	ldr	r3, [sp, #28]
 801be6c:	2b09      	cmp	r3, #9
 801be6e:	d868      	bhi.n	801bf42 <_dtoa_r+0x2ba>
 801be70:	2b05      	cmp	r3, #5
 801be72:	bfc4      	itt	gt
 801be74:	3b04      	subgt	r3, #4
 801be76:	9307      	strgt	r3, [sp, #28]
 801be78:	9b07      	ldr	r3, [sp, #28]
 801be7a:	f1a3 0302 	sub.w	r3, r3, #2
 801be7e:	bfcc      	ite	gt
 801be80:	2500      	movgt	r5, #0
 801be82:	2501      	movle	r5, #1
 801be84:	2b03      	cmp	r3, #3
 801be86:	f200 8085 	bhi.w	801bf94 <_dtoa_r+0x30c>
 801be8a:	e8df f003 	tbb	[pc, r3]
 801be8e:	3b2e      	.short	0x3b2e
 801be90:	5839      	.short	0x5839
 801be92:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801be96:	441d      	add	r5, r3
 801be98:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801be9c:	2b20      	cmp	r3, #32
 801be9e:	bfc1      	itttt	gt
 801bea0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801bea4:	fa08 f803 	lslgt.w	r8, r8, r3
 801bea8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801beac:	fa26 f303 	lsrgt.w	r3, r6, r3
 801beb0:	bfd6      	itet	le
 801beb2:	f1c3 0320 	rsble	r3, r3, #32
 801beb6:	ea48 0003 	orrgt.w	r0, r8, r3
 801beba:	fa06 f003 	lslle.w	r0, r6, r3
 801bebe:	f7ec fd31 	bl	8008924 <__aeabi_ui2d>
 801bec2:	2201      	movs	r2, #1
 801bec4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 801bec8:	3d01      	subs	r5, #1
 801beca:	920e      	str	r2, [sp, #56]	; 0x38
 801becc:	e76f      	b.n	801bdae <_dtoa_r+0x126>
 801bece:	2301      	movs	r3, #1
 801bed0:	e7b3      	b.n	801be3a <_dtoa_r+0x1b2>
 801bed2:	900c      	str	r0, [sp, #48]	; 0x30
 801bed4:	e7b2      	b.n	801be3c <_dtoa_r+0x1b4>
 801bed6:	9b05      	ldr	r3, [sp, #20]
 801bed8:	eba3 030b 	sub.w	r3, r3, fp
 801bedc:	9305      	str	r3, [sp, #20]
 801bede:	f1cb 0300 	rsb	r3, fp, #0
 801bee2:	9308      	str	r3, [sp, #32]
 801bee4:	2300      	movs	r3, #0
 801bee6:	930b      	str	r3, [sp, #44]	; 0x2c
 801bee8:	e7bf      	b.n	801be6a <_dtoa_r+0x1e2>
 801beea:	2300      	movs	r3, #0
 801beec:	9309      	str	r3, [sp, #36]	; 0x24
 801beee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bef0:	2b00      	cmp	r3, #0
 801bef2:	dc52      	bgt.n	801bf9a <_dtoa_r+0x312>
 801bef4:	2301      	movs	r3, #1
 801bef6:	9301      	str	r3, [sp, #4]
 801bef8:	9304      	str	r3, [sp, #16]
 801befa:	461a      	mov	r2, r3
 801befc:	920a      	str	r2, [sp, #40]	; 0x28
 801befe:	e00b      	b.n	801bf18 <_dtoa_r+0x290>
 801bf00:	2301      	movs	r3, #1
 801bf02:	e7f3      	b.n	801beec <_dtoa_r+0x264>
 801bf04:	2300      	movs	r3, #0
 801bf06:	9309      	str	r3, [sp, #36]	; 0x24
 801bf08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bf0a:	445b      	add	r3, fp
 801bf0c:	9301      	str	r3, [sp, #4]
 801bf0e:	3301      	adds	r3, #1
 801bf10:	2b01      	cmp	r3, #1
 801bf12:	9304      	str	r3, [sp, #16]
 801bf14:	bfb8      	it	lt
 801bf16:	2301      	movlt	r3, #1
 801bf18:	69e0      	ldr	r0, [r4, #28]
 801bf1a:	2100      	movs	r1, #0
 801bf1c:	2204      	movs	r2, #4
 801bf1e:	f102 0614 	add.w	r6, r2, #20
 801bf22:	429e      	cmp	r6, r3
 801bf24:	d93d      	bls.n	801bfa2 <_dtoa_r+0x31a>
 801bf26:	6041      	str	r1, [r0, #4]
 801bf28:	4620      	mov	r0, r4
 801bf2a:	f000 fd9f 	bl	801ca6c <_Balloc>
 801bf2e:	9000      	str	r0, [sp, #0]
 801bf30:	2800      	cmp	r0, #0
 801bf32:	d139      	bne.n	801bfa8 <_dtoa_r+0x320>
 801bf34:	4b16      	ldr	r3, [pc, #88]	; (801bf90 <_dtoa_r+0x308>)
 801bf36:	4602      	mov	r2, r0
 801bf38:	f240 11af 	movw	r1, #431	; 0x1af
 801bf3c:	e6bd      	b.n	801bcba <_dtoa_r+0x32>
 801bf3e:	2301      	movs	r3, #1
 801bf40:	e7e1      	b.n	801bf06 <_dtoa_r+0x27e>
 801bf42:	2501      	movs	r5, #1
 801bf44:	2300      	movs	r3, #0
 801bf46:	9307      	str	r3, [sp, #28]
 801bf48:	9509      	str	r5, [sp, #36]	; 0x24
 801bf4a:	f04f 33ff 	mov.w	r3, #4294967295
 801bf4e:	9301      	str	r3, [sp, #4]
 801bf50:	9304      	str	r3, [sp, #16]
 801bf52:	2200      	movs	r2, #0
 801bf54:	2312      	movs	r3, #18
 801bf56:	e7d1      	b.n	801befc <_dtoa_r+0x274>
 801bf58:	636f4361 	.word	0x636f4361
 801bf5c:	3fd287a7 	.word	0x3fd287a7
 801bf60:	8b60c8b3 	.word	0x8b60c8b3
 801bf64:	3fc68a28 	.word	0x3fc68a28
 801bf68:	509f79fb 	.word	0x509f79fb
 801bf6c:	3fd34413 	.word	0x3fd34413
 801bf70:	0802155e 	.word	0x0802155e
 801bf74:	08021575 	.word	0x08021575
 801bf78:	7ff00000 	.word	0x7ff00000
 801bf7c:	0802155a 	.word	0x0802155a
 801bf80:	08021551 	.word	0x08021551
 801bf84:	08021529 	.word	0x08021529
 801bf88:	3ff80000 	.word	0x3ff80000
 801bf8c:	08021660 	.word	0x08021660
 801bf90:	080215cd 	.word	0x080215cd
 801bf94:	2301      	movs	r3, #1
 801bf96:	9309      	str	r3, [sp, #36]	; 0x24
 801bf98:	e7d7      	b.n	801bf4a <_dtoa_r+0x2c2>
 801bf9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bf9c:	9301      	str	r3, [sp, #4]
 801bf9e:	9304      	str	r3, [sp, #16]
 801bfa0:	e7ba      	b.n	801bf18 <_dtoa_r+0x290>
 801bfa2:	3101      	adds	r1, #1
 801bfa4:	0052      	lsls	r2, r2, #1
 801bfa6:	e7ba      	b.n	801bf1e <_dtoa_r+0x296>
 801bfa8:	69e3      	ldr	r3, [r4, #28]
 801bfaa:	9a00      	ldr	r2, [sp, #0]
 801bfac:	601a      	str	r2, [r3, #0]
 801bfae:	9b04      	ldr	r3, [sp, #16]
 801bfb0:	2b0e      	cmp	r3, #14
 801bfb2:	f200 80a8 	bhi.w	801c106 <_dtoa_r+0x47e>
 801bfb6:	2d00      	cmp	r5, #0
 801bfb8:	f000 80a5 	beq.w	801c106 <_dtoa_r+0x47e>
 801bfbc:	f1bb 0f00 	cmp.w	fp, #0
 801bfc0:	dd38      	ble.n	801c034 <_dtoa_r+0x3ac>
 801bfc2:	4bc0      	ldr	r3, [pc, #768]	; (801c2c4 <_dtoa_r+0x63c>)
 801bfc4:	f00b 020f 	and.w	r2, fp, #15
 801bfc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bfcc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801bfd0:	e9d3 6700 	ldrd	r6, r7, [r3]
 801bfd4:	ea4f 182b 	mov.w	r8, fp, asr #4
 801bfd8:	d019      	beq.n	801c00e <_dtoa_r+0x386>
 801bfda:	4bbb      	ldr	r3, [pc, #748]	; (801c2c8 <_dtoa_r+0x640>)
 801bfdc:	ec51 0b18 	vmov	r0, r1, d8
 801bfe0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801bfe4:	f7ec fe42 	bl	8008c6c <__aeabi_ddiv>
 801bfe8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bfec:	f008 080f 	and.w	r8, r8, #15
 801bff0:	2503      	movs	r5, #3
 801bff2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 801c2c8 <_dtoa_r+0x640>
 801bff6:	f1b8 0f00 	cmp.w	r8, #0
 801bffa:	d10a      	bne.n	801c012 <_dtoa_r+0x38a>
 801bffc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c000:	4632      	mov	r2, r6
 801c002:	463b      	mov	r3, r7
 801c004:	f7ec fe32 	bl	8008c6c <__aeabi_ddiv>
 801c008:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c00c:	e02b      	b.n	801c066 <_dtoa_r+0x3de>
 801c00e:	2502      	movs	r5, #2
 801c010:	e7ef      	b.n	801bff2 <_dtoa_r+0x36a>
 801c012:	f018 0f01 	tst.w	r8, #1
 801c016:	d008      	beq.n	801c02a <_dtoa_r+0x3a2>
 801c018:	4630      	mov	r0, r6
 801c01a:	4639      	mov	r1, r7
 801c01c:	e9d9 2300 	ldrd	r2, r3, [r9]
 801c020:	f7ec fcfa 	bl	8008a18 <__aeabi_dmul>
 801c024:	3501      	adds	r5, #1
 801c026:	4606      	mov	r6, r0
 801c028:	460f      	mov	r7, r1
 801c02a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801c02e:	f109 0908 	add.w	r9, r9, #8
 801c032:	e7e0      	b.n	801bff6 <_dtoa_r+0x36e>
 801c034:	f000 809f 	beq.w	801c176 <_dtoa_r+0x4ee>
 801c038:	f1cb 0600 	rsb	r6, fp, #0
 801c03c:	4ba1      	ldr	r3, [pc, #644]	; (801c2c4 <_dtoa_r+0x63c>)
 801c03e:	4fa2      	ldr	r7, [pc, #648]	; (801c2c8 <_dtoa_r+0x640>)
 801c040:	f006 020f 	and.w	r2, r6, #15
 801c044:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c048:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c04c:	ec51 0b18 	vmov	r0, r1, d8
 801c050:	f7ec fce2 	bl	8008a18 <__aeabi_dmul>
 801c054:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c058:	1136      	asrs	r6, r6, #4
 801c05a:	2300      	movs	r3, #0
 801c05c:	2502      	movs	r5, #2
 801c05e:	2e00      	cmp	r6, #0
 801c060:	d17e      	bne.n	801c160 <_dtoa_r+0x4d8>
 801c062:	2b00      	cmp	r3, #0
 801c064:	d1d0      	bne.n	801c008 <_dtoa_r+0x380>
 801c066:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c068:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801c06c:	2b00      	cmp	r3, #0
 801c06e:	f000 8084 	beq.w	801c17a <_dtoa_r+0x4f2>
 801c072:	4b96      	ldr	r3, [pc, #600]	; (801c2cc <_dtoa_r+0x644>)
 801c074:	2200      	movs	r2, #0
 801c076:	4640      	mov	r0, r8
 801c078:	4649      	mov	r1, r9
 801c07a:	f7ec ff3f 	bl	8008efc <__aeabi_dcmplt>
 801c07e:	2800      	cmp	r0, #0
 801c080:	d07b      	beq.n	801c17a <_dtoa_r+0x4f2>
 801c082:	9b04      	ldr	r3, [sp, #16]
 801c084:	2b00      	cmp	r3, #0
 801c086:	d078      	beq.n	801c17a <_dtoa_r+0x4f2>
 801c088:	9b01      	ldr	r3, [sp, #4]
 801c08a:	2b00      	cmp	r3, #0
 801c08c:	dd39      	ble.n	801c102 <_dtoa_r+0x47a>
 801c08e:	4b90      	ldr	r3, [pc, #576]	; (801c2d0 <_dtoa_r+0x648>)
 801c090:	2200      	movs	r2, #0
 801c092:	4640      	mov	r0, r8
 801c094:	4649      	mov	r1, r9
 801c096:	f7ec fcbf 	bl	8008a18 <__aeabi_dmul>
 801c09a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c09e:	9e01      	ldr	r6, [sp, #4]
 801c0a0:	f10b 37ff 	add.w	r7, fp, #4294967295
 801c0a4:	3501      	adds	r5, #1
 801c0a6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801c0aa:	4628      	mov	r0, r5
 801c0ac:	f7ec fc4a 	bl	8008944 <__aeabi_i2d>
 801c0b0:	4642      	mov	r2, r8
 801c0b2:	464b      	mov	r3, r9
 801c0b4:	f7ec fcb0 	bl	8008a18 <__aeabi_dmul>
 801c0b8:	4b86      	ldr	r3, [pc, #536]	; (801c2d4 <_dtoa_r+0x64c>)
 801c0ba:	2200      	movs	r2, #0
 801c0bc:	f7ec faf6 	bl	80086ac <__adddf3>
 801c0c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801c0c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c0c8:	9303      	str	r3, [sp, #12]
 801c0ca:	2e00      	cmp	r6, #0
 801c0cc:	d158      	bne.n	801c180 <_dtoa_r+0x4f8>
 801c0ce:	4b82      	ldr	r3, [pc, #520]	; (801c2d8 <_dtoa_r+0x650>)
 801c0d0:	2200      	movs	r2, #0
 801c0d2:	4640      	mov	r0, r8
 801c0d4:	4649      	mov	r1, r9
 801c0d6:	f7ec fae7 	bl	80086a8 <__aeabi_dsub>
 801c0da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c0de:	4680      	mov	r8, r0
 801c0e0:	4689      	mov	r9, r1
 801c0e2:	f7ec ff29 	bl	8008f38 <__aeabi_dcmpgt>
 801c0e6:	2800      	cmp	r0, #0
 801c0e8:	f040 8296 	bne.w	801c618 <_dtoa_r+0x990>
 801c0ec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801c0f0:	4640      	mov	r0, r8
 801c0f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c0f6:	4649      	mov	r1, r9
 801c0f8:	f7ec ff00 	bl	8008efc <__aeabi_dcmplt>
 801c0fc:	2800      	cmp	r0, #0
 801c0fe:	f040 8289 	bne.w	801c614 <_dtoa_r+0x98c>
 801c102:	ed8d 8b02 	vstr	d8, [sp, #8]
 801c106:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c108:	2b00      	cmp	r3, #0
 801c10a:	f2c0 814e 	blt.w	801c3aa <_dtoa_r+0x722>
 801c10e:	f1bb 0f0e 	cmp.w	fp, #14
 801c112:	f300 814a 	bgt.w	801c3aa <_dtoa_r+0x722>
 801c116:	4b6b      	ldr	r3, [pc, #428]	; (801c2c4 <_dtoa_r+0x63c>)
 801c118:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801c11c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c122:	2b00      	cmp	r3, #0
 801c124:	f280 80dc 	bge.w	801c2e0 <_dtoa_r+0x658>
 801c128:	9b04      	ldr	r3, [sp, #16]
 801c12a:	2b00      	cmp	r3, #0
 801c12c:	f300 80d8 	bgt.w	801c2e0 <_dtoa_r+0x658>
 801c130:	f040 826f 	bne.w	801c612 <_dtoa_r+0x98a>
 801c134:	4b68      	ldr	r3, [pc, #416]	; (801c2d8 <_dtoa_r+0x650>)
 801c136:	2200      	movs	r2, #0
 801c138:	4640      	mov	r0, r8
 801c13a:	4649      	mov	r1, r9
 801c13c:	f7ec fc6c 	bl	8008a18 <__aeabi_dmul>
 801c140:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c144:	f7ec feee 	bl	8008f24 <__aeabi_dcmpge>
 801c148:	9e04      	ldr	r6, [sp, #16]
 801c14a:	4637      	mov	r7, r6
 801c14c:	2800      	cmp	r0, #0
 801c14e:	f040 8245 	bne.w	801c5dc <_dtoa_r+0x954>
 801c152:	9d00      	ldr	r5, [sp, #0]
 801c154:	2331      	movs	r3, #49	; 0x31
 801c156:	f805 3b01 	strb.w	r3, [r5], #1
 801c15a:	f10b 0b01 	add.w	fp, fp, #1
 801c15e:	e241      	b.n	801c5e4 <_dtoa_r+0x95c>
 801c160:	07f2      	lsls	r2, r6, #31
 801c162:	d505      	bpl.n	801c170 <_dtoa_r+0x4e8>
 801c164:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c168:	f7ec fc56 	bl	8008a18 <__aeabi_dmul>
 801c16c:	3501      	adds	r5, #1
 801c16e:	2301      	movs	r3, #1
 801c170:	1076      	asrs	r6, r6, #1
 801c172:	3708      	adds	r7, #8
 801c174:	e773      	b.n	801c05e <_dtoa_r+0x3d6>
 801c176:	2502      	movs	r5, #2
 801c178:	e775      	b.n	801c066 <_dtoa_r+0x3de>
 801c17a:	9e04      	ldr	r6, [sp, #16]
 801c17c:	465f      	mov	r7, fp
 801c17e:	e792      	b.n	801c0a6 <_dtoa_r+0x41e>
 801c180:	9900      	ldr	r1, [sp, #0]
 801c182:	4b50      	ldr	r3, [pc, #320]	; (801c2c4 <_dtoa_r+0x63c>)
 801c184:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c188:	4431      	add	r1, r6
 801c18a:	9102      	str	r1, [sp, #8]
 801c18c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c18e:	eeb0 9a47 	vmov.f32	s18, s14
 801c192:	eef0 9a67 	vmov.f32	s19, s15
 801c196:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801c19a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801c19e:	2900      	cmp	r1, #0
 801c1a0:	d044      	beq.n	801c22c <_dtoa_r+0x5a4>
 801c1a2:	494e      	ldr	r1, [pc, #312]	; (801c2dc <_dtoa_r+0x654>)
 801c1a4:	2000      	movs	r0, #0
 801c1a6:	f7ec fd61 	bl	8008c6c <__aeabi_ddiv>
 801c1aa:	ec53 2b19 	vmov	r2, r3, d9
 801c1ae:	f7ec fa7b 	bl	80086a8 <__aeabi_dsub>
 801c1b2:	9d00      	ldr	r5, [sp, #0]
 801c1b4:	ec41 0b19 	vmov	d9, r0, r1
 801c1b8:	4649      	mov	r1, r9
 801c1ba:	4640      	mov	r0, r8
 801c1bc:	f7ec fedc 	bl	8008f78 <__aeabi_d2iz>
 801c1c0:	4606      	mov	r6, r0
 801c1c2:	f7ec fbbf 	bl	8008944 <__aeabi_i2d>
 801c1c6:	4602      	mov	r2, r0
 801c1c8:	460b      	mov	r3, r1
 801c1ca:	4640      	mov	r0, r8
 801c1cc:	4649      	mov	r1, r9
 801c1ce:	f7ec fa6b 	bl	80086a8 <__aeabi_dsub>
 801c1d2:	3630      	adds	r6, #48	; 0x30
 801c1d4:	f805 6b01 	strb.w	r6, [r5], #1
 801c1d8:	ec53 2b19 	vmov	r2, r3, d9
 801c1dc:	4680      	mov	r8, r0
 801c1de:	4689      	mov	r9, r1
 801c1e0:	f7ec fe8c 	bl	8008efc <__aeabi_dcmplt>
 801c1e4:	2800      	cmp	r0, #0
 801c1e6:	d164      	bne.n	801c2b2 <_dtoa_r+0x62a>
 801c1e8:	4642      	mov	r2, r8
 801c1ea:	464b      	mov	r3, r9
 801c1ec:	4937      	ldr	r1, [pc, #220]	; (801c2cc <_dtoa_r+0x644>)
 801c1ee:	2000      	movs	r0, #0
 801c1f0:	f7ec fa5a 	bl	80086a8 <__aeabi_dsub>
 801c1f4:	ec53 2b19 	vmov	r2, r3, d9
 801c1f8:	f7ec fe80 	bl	8008efc <__aeabi_dcmplt>
 801c1fc:	2800      	cmp	r0, #0
 801c1fe:	f040 80b6 	bne.w	801c36e <_dtoa_r+0x6e6>
 801c202:	9b02      	ldr	r3, [sp, #8]
 801c204:	429d      	cmp	r5, r3
 801c206:	f43f af7c 	beq.w	801c102 <_dtoa_r+0x47a>
 801c20a:	4b31      	ldr	r3, [pc, #196]	; (801c2d0 <_dtoa_r+0x648>)
 801c20c:	ec51 0b19 	vmov	r0, r1, d9
 801c210:	2200      	movs	r2, #0
 801c212:	f7ec fc01 	bl	8008a18 <__aeabi_dmul>
 801c216:	4b2e      	ldr	r3, [pc, #184]	; (801c2d0 <_dtoa_r+0x648>)
 801c218:	ec41 0b19 	vmov	d9, r0, r1
 801c21c:	2200      	movs	r2, #0
 801c21e:	4640      	mov	r0, r8
 801c220:	4649      	mov	r1, r9
 801c222:	f7ec fbf9 	bl	8008a18 <__aeabi_dmul>
 801c226:	4680      	mov	r8, r0
 801c228:	4689      	mov	r9, r1
 801c22a:	e7c5      	b.n	801c1b8 <_dtoa_r+0x530>
 801c22c:	ec51 0b17 	vmov	r0, r1, d7
 801c230:	f7ec fbf2 	bl	8008a18 <__aeabi_dmul>
 801c234:	9b02      	ldr	r3, [sp, #8]
 801c236:	9d00      	ldr	r5, [sp, #0]
 801c238:	930f      	str	r3, [sp, #60]	; 0x3c
 801c23a:	ec41 0b19 	vmov	d9, r0, r1
 801c23e:	4649      	mov	r1, r9
 801c240:	4640      	mov	r0, r8
 801c242:	f7ec fe99 	bl	8008f78 <__aeabi_d2iz>
 801c246:	4606      	mov	r6, r0
 801c248:	f7ec fb7c 	bl	8008944 <__aeabi_i2d>
 801c24c:	3630      	adds	r6, #48	; 0x30
 801c24e:	4602      	mov	r2, r0
 801c250:	460b      	mov	r3, r1
 801c252:	4640      	mov	r0, r8
 801c254:	4649      	mov	r1, r9
 801c256:	f7ec fa27 	bl	80086a8 <__aeabi_dsub>
 801c25a:	f805 6b01 	strb.w	r6, [r5], #1
 801c25e:	9b02      	ldr	r3, [sp, #8]
 801c260:	429d      	cmp	r5, r3
 801c262:	4680      	mov	r8, r0
 801c264:	4689      	mov	r9, r1
 801c266:	f04f 0200 	mov.w	r2, #0
 801c26a:	d124      	bne.n	801c2b6 <_dtoa_r+0x62e>
 801c26c:	4b1b      	ldr	r3, [pc, #108]	; (801c2dc <_dtoa_r+0x654>)
 801c26e:	ec51 0b19 	vmov	r0, r1, d9
 801c272:	f7ec fa1b 	bl	80086ac <__adddf3>
 801c276:	4602      	mov	r2, r0
 801c278:	460b      	mov	r3, r1
 801c27a:	4640      	mov	r0, r8
 801c27c:	4649      	mov	r1, r9
 801c27e:	f7ec fe5b 	bl	8008f38 <__aeabi_dcmpgt>
 801c282:	2800      	cmp	r0, #0
 801c284:	d173      	bne.n	801c36e <_dtoa_r+0x6e6>
 801c286:	ec53 2b19 	vmov	r2, r3, d9
 801c28a:	4914      	ldr	r1, [pc, #80]	; (801c2dc <_dtoa_r+0x654>)
 801c28c:	2000      	movs	r0, #0
 801c28e:	f7ec fa0b 	bl	80086a8 <__aeabi_dsub>
 801c292:	4602      	mov	r2, r0
 801c294:	460b      	mov	r3, r1
 801c296:	4640      	mov	r0, r8
 801c298:	4649      	mov	r1, r9
 801c29a:	f7ec fe2f 	bl	8008efc <__aeabi_dcmplt>
 801c29e:	2800      	cmp	r0, #0
 801c2a0:	f43f af2f 	beq.w	801c102 <_dtoa_r+0x47a>
 801c2a4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801c2a6:	1e6b      	subs	r3, r5, #1
 801c2a8:	930f      	str	r3, [sp, #60]	; 0x3c
 801c2aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801c2ae:	2b30      	cmp	r3, #48	; 0x30
 801c2b0:	d0f8      	beq.n	801c2a4 <_dtoa_r+0x61c>
 801c2b2:	46bb      	mov	fp, r7
 801c2b4:	e04a      	b.n	801c34c <_dtoa_r+0x6c4>
 801c2b6:	4b06      	ldr	r3, [pc, #24]	; (801c2d0 <_dtoa_r+0x648>)
 801c2b8:	f7ec fbae 	bl	8008a18 <__aeabi_dmul>
 801c2bc:	4680      	mov	r8, r0
 801c2be:	4689      	mov	r9, r1
 801c2c0:	e7bd      	b.n	801c23e <_dtoa_r+0x5b6>
 801c2c2:	bf00      	nop
 801c2c4:	08021660 	.word	0x08021660
 801c2c8:	08021638 	.word	0x08021638
 801c2cc:	3ff00000 	.word	0x3ff00000
 801c2d0:	40240000 	.word	0x40240000
 801c2d4:	401c0000 	.word	0x401c0000
 801c2d8:	40140000 	.word	0x40140000
 801c2dc:	3fe00000 	.word	0x3fe00000
 801c2e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801c2e4:	9d00      	ldr	r5, [sp, #0]
 801c2e6:	4642      	mov	r2, r8
 801c2e8:	464b      	mov	r3, r9
 801c2ea:	4630      	mov	r0, r6
 801c2ec:	4639      	mov	r1, r7
 801c2ee:	f7ec fcbd 	bl	8008c6c <__aeabi_ddiv>
 801c2f2:	f7ec fe41 	bl	8008f78 <__aeabi_d2iz>
 801c2f6:	9001      	str	r0, [sp, #4]
 801c2f8:	f7ec fb24 	bl	8008944 <__aeabi_i2d>
 801c2fc:	4642      	mov	r2, r8
 801c2fe:	464b      	mov	r3, r9
 801c300:	f7ec fb8a 	bl	8008a18 <__aeabi_dmul>
 801c304:	4602      	mov	r2, r0
 801c306:	460b      	mov	r3, r1
 801c308:	4630      	mov	r0, r6
 801c30a:	4639      	mov	r1, r7
 801c30c:	f7ec f9cc 	bl	80086a8 <__aeabi_dsub>
 801c310:	9e01      	ldr	r6, [sp, #4]
 801c312:	9f04      	ldr	r7, [sp, #16]
 801c314:	3630      	adds	r6, #48	; 0x30
 801c316:	f805 6b01 	strb.w	r6, [r5], #1
 801c31a:	9e00      	ldr	r6, [sp, #0]
 801c31c:	1bae      	subs	r6, r5, r6
 801c31e:	42b7      	cmp	r7, r6
 801c320:	4602      	mov	r2, r0
 801c322:	460b      	mov	r3, r1
 801c324:	d134      	bne.n	801c390 <_dtoa_r+0x708>
 801c326:	f7ec f9c1 	bl	80086ac <__adddf3>
 801c32a:	4642      	mov	r2, r8
 801c32c:	464b      	mov	r3, r9
 801c32e:	4606      	mov	r6, r0
 801c330:	460f      	mov	r7, r1
 801c332:	f7ec fe01 	bl	8008f38 <__aeabi_dcmpgt>
 801c336:	b9c8      	cbnz	r0, 801c36c <_dtoa_r+0x6e4>
 801c338:	4642      	mov	r2, r8
 801c33a:	464b      	mov	r3, r9
 801c33c:	4630      	mov	r0, r6
 801c33e:	4639      	mov	r1, r7
 801c340:	f7ec fdd2 	bl	8008ee8 <__aeabi_dcmpeq>
 801c344:	b110      	cbz	r0, 801c34c <_dtoa_r+0x6c4>
 801c346:	9b01      	ldr	r3, [sp, #4]
 801c348:	07db      	lsls	r3, r3, #31
 801c34a:	d40f      	bmi.n	801c36c <_dtoa_r+0x6e4>
 801c34c:	4651      	mov	r1, sl
 801c34e:	4620      	mov	r0, r4
 801c350:	f000 fbcc 	bl	801caec <_Bfree>
 801c354:	2300      	movs	r3, #0
 801c356:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c358:	702b      	strb	r3, [r5, #0]
 801c35a:	f10b 0301 	add.w	r3, fp, #1
 801c35e:	6013      	str	r3, [r2, #0]
 801c360:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c362:	2b00      	cmp	r3, #0
 801c364:	f43f ace2 	beq.w	801bd2c <_dtoa_r+0xa4>
 801c368:	601d      	str	r5, [r3, #0]
 801c36a:	e4df      	b.n	801bd2c <_dtoa_r+0xa4>
 801c36c:	465f      	mov	r7, fp
 801c36e:	462b      	mov	r3, r5
 801c370:	461d      	mov	r5, r3
 801c372:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c376:	2a39      	cmp	r2, #57	; 0x39
 801c378:	d106      	bne.n	801c388 <_dtoa_r+0x700>
 801c37a:	9a00      	ldr	r2, [sp, #0]
 801c37c:	429a      	cmp	r2, r3
 801c37e:	d1f7      	bne.n	801c370 <_dtoa_r+0x6e8>
 801c380:	9900      	ldr	r1, [sp, #0]
 801c382:	2230      	movs	r2, #48	; 0x30
 801c384:	3701      	adds	r7, #1
 801c386:	700a      	strb	r2, [r1, #0]
 801c388:	781a      	ldrb	r2, [r3, #0]
 801c38a:	3201      	adds	r2, #1
 801c38c:	701a      	strb	r2, [r3, #0]
 801c38e:	e790      	b.n	801c2b2 <_dtoa_r+0x62a>
 801c390:	4ba3      	ldr	r3, [pc, #652]	; (801c620 <_dtoa_r+0x998>)
 801c392:	2200      	movs	r2, #0
 801c394:	f7ec fb40 	bl	8008a18 <__aeabi_dmul>
 801c398:	2200      	movs	r2, #0
 801c39a:	2300      	movs	r3, #0
 801c39c:	4606      	mov	r6, r0
 801c39e:	460f      	mov	r7, r1
 801c3a0:	f7ec fda2 	bl	8008ee8 <__aeabi_dcmpeq>
 801c3a4:	2800      	cmp	r0, #0
 801c3a6:	d09e      	beq.n	801c2e6 <_dtoa_r+0x65e>
 801c3a8:	e7d0      	b.n	801c34c <_dtoa_r+0x6c4>
 801c3aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c3ac:	2a00      	cmp	r2, #0
 801c3ae:	f000 80ca 	beq.w	801c546 <_dtoa_r+0x8be>
 801c3b2:	9a07      	ldr	r2, [sp, #28]
 801c3b4:	2a01      	cmp	r2, #1
 801c3b6:	f300 80ad 	bgt.w	801c514 <_dtoa_r+0x88c>
 801c3ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c3bc:	2a00      	cmp	r2, #0
 801c3be:	f000 80a5 	beq.w	801c50c <_dtoa_r+0x884>
 801c3c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801c3c6:	9e08      	ldr	r6, [sp, #32]
 801c3c8:	9d05      	ldr	r5, [sp, #20]
 801c3ca:	9a05      	ldr	r2, [sp, #20]
 801c3cc:	441a      	add	r2, r3
 801c3ce:	9205      	str	r2, [sp, #20]
 801c3d0:	9a06      	ldr	r2, [sp, #24]
 801c3d2:	2101      	movs	r1, #1
 801c3d4:	441a      	add	r2, r3
 801c3d6:	4620      	mov	r0, r4
 801c3d8:	9206      	str	r2, [sp, #24]
 801c3da:	f000 fc87 	bl	801ccec <__i2b>
 801c3de:	4607      	mov	r7, r0
 801c3e0:	b165      	cbz	r5, 801c3fc <_dtoa_r+0x774>
 801c3e2:	9b06      	ldr	r3, [sp, #24]
 801c3e4:	2b00      	cmp	r3, #0
 801c3e6:	dd09      	ble.n	801c3fc <_dtoa_r+0x774>
 801c3e8:	42ab      	cmp	r3, r5
 801c3ea:	9a05      	ldr	r2, [sp, #20]
 801c3ec:	bfa8      	it	ge
 801c3ee:	462b      	movge	r3, r5
 801c3f0:	1ad2      	subs	r2, r2, r3
 801c3f2:	9205      	str	r2, [sp, #20]
 801c3f4:	9a06      	ldr	r2, [sp, #24]
 801c3f6:	1aed      	subs	r5, r5, r3
 801c3f8:	1ad3      	subs	r3, r2, r3
 801c3fa:	9306      	str	r3, [sp, #24]
 801c3fc:	9b08      	ldr	r3, [sp, #32]
 801c3fe:	b1f3      	cbz	r3, 801c43e <_dtoa_r+0x7b6>
 801c400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c402:	2b00      	cmp	r3, #0
 801c404:	f000 80a3 	beq.w	801c54e <_dtoa_r+0x8c6>
 801c408:	2e00      	cmp	r6, #0
 801c40a:	dd10      	ble.n	801c42e <_dtoa_r+0x7a6>
 801c40c:	4639      	mov	r1, r7
 801c40e:	4632      	mov	r2, r6
 801c410:	4620      	mov	r0, r4
 801c412:	f000 fd2b 	bl	801ce6c <__pow5mult>
 801c416:	4652      	mov	r2, sl
 801c418:	4601      	mov	r1, r0
 801c41a:	4607      	mov	r7, r0
 801c41c:	4620      	mov	r0, r4
 801c41e:	f000 fc7b 	bl	801cd18 <__multiply>
 801c422:	4651      	mov	r1, sl
 801c424:	4680      	mov	r8, r0
 801c426:	4620      	mov	r0, r4
 801c428:	f000 fb60 	bl	801caec <_Bfree>
 801c42c:	46c2      	mov	sl, r8
 801c42e:	9b08      	ldr	r3, [sp, #32]
 801c430:	1b9a      	subs	r2, r3, r6
 801c432:	d004      	beq.n	801c43e <_dtoa_r+0x7b6>
 801c434:	4651      	mov	r1, sl
 801c436:	4620      	mov	r0, r4
 801c438:	f000 fd18 	bl	801ce6c <__pow5mult>
 801c43c:	4682      	mov	sl, r0
 801c43e:	2101      	movs	r1, #1
 801c440:	4620      	mov	r0, r4
 801c442:	f000 fc53 	bl	801ccec <__i2b>
 801c446:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c448:	2b00      	cmp	r3, #0
 801c44a:	4606      	mov	r6, r0
 801c44c:	f340 8081 	ble.w	801c552 <_dtoa_r+0x8ca>
 801c450:	461a      	mov	r2, r3
 801c452:	4601      	mov	r1, r0
 801c454:	4620      	mov	r0, r4
 801c456:	f000 fd09 	bl	801ce6c <__pow5mult>
 801c45a:	9b07      	ldr	r3, [sp, #28]
 801c45c:	2b01      	cmp	r3, #1
 801c45e:	4606      	mov	r6, r0
 801c460:	dd7a      	ble.n	801c558 <_dtoa_r+0x8d0>
 801c462:	f04f 0800 	mov.w	r8, #0
 801c466:	6933      	ldr	r3, [r6, #16]
 801c468:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801c46c:	6918      	ldr	r0, [r3, #16]
 801c46e:	f000 fbef 	bl	801cc50 <__hi0bits>
 801c472:	f1c0 0020 	rsb	r0, r0, #32
 801c476:	9b06      	ldr	r3, [sp, #24]
 801c478:	4418      	add	r0, r3
 801c47a:	f010 001f 	ands.w	r0, r0, #31
 801c47e:	f000 8094 	beq.w	801c5aa <_dtoa_r+0x922>
 801c482:	f1c0 0320 	rsb	r3, r0, #32
 801c486:	2b04      	cmp	r3, #4
 801c488:	f340 8085 	ble.w	801c596 <_dtoa_r+0x90e>
 801c48c:	9b05      	ldr	r3, [sp, #20]
 801c48e:	f1c0 001c 	rsb	r0, r0, #28
 801c492:	4403      	add	r3, r0
 801c494:	9305      	str	r3, [sp, #20]
 801c496:	9b06      	ldr	r3, [sp, #24]
 801c498:	4403      	add	r3, r0
 801c49a:	4405      	add	r5, r0
 801c49c:	9306      	str	r3, [sp, #24]
 801c49e:	9b05      	ldr	r3, [sp, #20]
 801c4a0:	2b00      	cmp	r3, #0
 801c4a2:	dd05      	ble.n	801c4b0 <_dtoa_r+0x828>
 801c4a4:	4651      	mov	r1, sl
 801c4a6:	461a      	mov	r2, r3
 801c4a8:	4620      	mov	r0, r4
 801c4aa:	f000 fd39 	bl	801cf20 <__lshift>
 801c4ae:	4682      	mov	sl, r0
 801c4b0:	9b06      	ldr	r3, [sp, #24]
 801c4b2:	2b00      	cmp	r3, #0
 801c4b4:	dd05      	ble.n	801c4c2 <_dtoa_r+0x83a>
 801c4b6:	4631      	mov	r1, r6
 801c4b8:	461a      	mov	r2, r3
 801c4ba:	4620      	mov	r0, r4
 801c4bc:	f000 fd30 	bl	801cf20 <__lshift>
 801c4c0:	4606      	mov	r6, r0
 801c4c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c4c4:	2b00      	cmp	r3, #0
 801c4c6:	d072      	beq.n	801c5ae <_dtoa_r+0x926>
 801c4c8:	4631      	mov	r1, r6
 801c4ca:	4650      	mov	r0, sl
 801c4cc:	f000 fd94 	bl	801cff8 <__mcmp>
 801c4d0:	2800      	cmp	r0, #0
 801c4d2:	da6c      	bge.n	801c5ae <_dtoa_r+0x926>
 801c4d4:	2300      	movs	r3, #0
 801c4d6:	4651      	mov	r1, sl
 801c4d8:	220a      	movs	r2, #10
 801c4da:	4620      	mov	r0, r4
 801c4dc:	f000 fb28 	bl	801cb30 <__multadd>
 801c4e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c4e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c4e6:	4682      	mov	sl, r0
 801c4e8:	2b00      	cmp	r3, #0
 801c4ea:	f000 81b0 	beq.w	801c84e <_dtoa_r+0xbc6>
 801c4ee:	2300      	movs	r3, #0
 801c4f0:	4639      	mov	r1, r7
 801c4f2:	220a      	movs	r2, #10
 801c4f4:	4620      	mov	r0, r4
 801c4f6:	f000 fb1b 	bl	801cb30 <__multadd>
 801c4fa:	9b01      	ldr	r3, [sp, #4]
 801c4fc:	2b00      	cmp	r3, #0
 801c4fe:	4607      	mov	r7, r0
 801c500:	f300 8096 	bgt.w	801c630 <_dtoa_r+0x9a8>
 801c504:	9b07      	ldr	r3, [sp, #28]
 801c506:	2b02      	cmp	r3, #2
 801c508:	dc59      	bgt.n	801c5be <_dtoa_r+0x936>
 801c50a:	e091      	b.n	801c630 <_dtoa_r+0x9a8>
 801c50c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c50e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801c512:	e758      	b.n	801c3c6 <_dtoa_r+0x73e>
 801c514:	9b04      	ldr	r3, [sp, #16]
 801c516:	1e5e      	subs	r6, r3, #1
 801c518:	9b08      	ldr	r3, [sp, #32]
 801c51a:	42b3      	cmp	r3, r6
 801c51c:	bfbf      	itttt	lt
 801c51e:	9b08      	ldrlt	r3, [sp, #32]
 801c520:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801c522:	9608      	strlt	r6, [sp, #32]
 801c524:	1af3      	sublt	r3, r6, r3
 801c526:	bfb4      	ite	lt
 801c528:	18d2      	addlt	r2, r2, r3
 801c52a:	1b9e      	subge	r6, r3, r6
 801c52c:	9b04      	ldr	r3, [sp, #16]
 801c52e:	bfbc      	itt	lt
 801c530:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801c532:	2600      	movlt	r6, #0
 801c534:	2b00      	cmp	r3, #0
 801c536:	bfb7      	itett	lt
 801c538:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801c53c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 801c540:	1a9d      	sublt	r5, r3, r2
 801c542:	2300      	movlt	r3, #0
 801c544:	e741      	b.n	801c3ca <_dtoa_r+0x742>
 801c546:	9e08      	ldr	r6, [sp, #32]
 801c548:	9d05      	ldr	r5, [sp, #20]
 801c54a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801c54c:	e748      	b.n	801c3e0 <_dtoa_r+0x758>
 801c54e:	9a08      	ldr	r2, [sp, #32]
 801c550:	e770      	b.n	801c434 <_dtoa_r+0x7ac>
 801c552:	9b07      	ldr	r3, [sp, #28]
 801c554:	2b01      	cmp	r3, #1
 801c556:	dc19      	bgt.n	801c58c <_dtoa_r+0x904>
 801c558:	9b02      	ldr	r3, [sp, #8]
 801c55a:	b9bb      	cbnz	r3, 801c58c <_dtoa_r+0x904>
 801c55c:	9b03      	ldr	r3, [sp, #12]
 801c55e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c562:	b99b      	cbnz	r3, 801c58c <_dtoa_r+0x904>
 801c564:	9b03      	ldr	r3, [sp, #12]
 801c566:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c56a:	0d1b      	lsrs	r3, r3, #20
 801c56c:	051b      	lsls	r3, r3, #20
 801c56e:	b183      	cbz	r3, 801c592 <_dtoa_r+0x90a>
 801c570:	9b05      	ldr	r3, [sp, #20]
 801c572:	3301      	adds	r3, #1
 801c574:	9305      	str	r3, [sp, #20]
 801c576:	9b06      	ldr	r3, [sp, #24]
 801c578:	3301      	adds	r3, #1
 801c57a:	9306      	str	r3, [sp, #24]
 801c57c:	f04f 0801 	mov.w	r8, #1
 801c580:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c582:	2b00      	cmp	r3, #0
 801c584:	f47f af6f 	bne.w	801c466 <_dtoa_r+0x7de>
 801c588:	2001      	movs	r0, #1
 801c58a:	e774      	b.n	801c476 <_dtoa_r+0x7ee>
 801c58c:	f04f 0800 	mov.w	r8, #0
 801c590:	e7f6      	b.n	801c580 <_dtoa_r+0x8f8>
 801c592:	4698      	mov	r8, r3
 801c594:	e7f4      	b.n	801c580 <_dtoa_r+0x8f8>
 801c596:	d082      	beq.n	801c49e <_dtoa_r+0x816>
 801c598:	9a05      	ldr	r2, [sp, #20]
 801c59a:	331c      	adds	r3, #28
 801c59c:	441a      	add	r2, r3
 801c59e:	9205      	str	r2, [sp, #20]
 801c5a0:	9a06      	ldr	r2, [sp, #24]
 801c5a2:	441a      	add	r2, r3
 801c5a4:	441d      	add	r5, r3
 801c5a6:	9206      	str	r2, [sp, #24]
 801c5a8:	e779      	b.n	801c49e <_dtoa_r+0x816>
 801c5aa:	4603      	mov	r3, r0
 801c5ac:	e7f4      	b.n	801c598 <_dtoa_r+0x910>
 801c5ae:	9b04      	ldr	r3, [sp, #16]
 801c5b0:	2b00      	cmp	r3, #0
 801c5b2:	dc37      	bgt.n	801c624 <_dtoa_r+0x99c>
 801c5b4:	9b07      	ldr	r3, [sp, #28]
 801c5b6:	2b02      	cmp	r3, #2
 801c5b8:	dd34      	ble.n	801c624 <_dtoa_r+0x99c>
 801c5ba:	9b04      	ldr	r3, [sp, #16]
 801c5bc:	9301      	str	r3, [sp, #4]
 801c5be:	9b01      	ldr	r3, [sp, #4]
 801c5c0:	b963      	cbnz	r3, 801c5dc <_dtoa_r+0x954>
 801c5c2:	4631      	mov	r1, r6
 801c5c4:	2205      	movs	r2, #5
 801c5c6:	4620      	mov	r0, r4
 801c5c8:	f000 fab2 	bl	801cb30 <__multadd>
 801c5cc:	4601      	mov	r1, r0
 801c5ce:	4606      	mov	r6, r0
 801c5d0:	4650      	mov	r0, sl
 801c5d2:	f000 fd11 	bl	801cff8 <__mcmp>
 801c5d6:	2800      	cmp	r0, #0
 801c5d8:	f73f adbb 	bgt.w	801c152 <_dtoa_r+0x4ca>
 801c5dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c5de:	9d00      	ldr	r5, [sp, #0]
 801c5e0:	ea6f 0b03 	mvn.w	fp, r3
 801c5e4:	f04f 0800 	mov.w	r8, #0
 801c5e8:	4631      	mov	r1, r6
 801c5ea:	4620      	mov	r0, r4
 801c5ec:	f000 fa7e 	bl	801caec <_Bfree>
 801c5f0:	2f00      	cmp	r7, #0
 801c5f2:	f43f aeab 	beq.w	801c34c <_dtoa_r+0x6c4>
 801c5f6:	f1b8 0f00 	cmp.w	r8, #0
 801c5fa:	d005      	beq.n	801c608 <_dtoa_r+0x980>
 801c5fc:	45b8      	cmp	r8, r7
 801c5fe:	d003      	beq.n	801c608 <_dtoa_r+0x980>
 801c600:	4641      	mov	r1, r8
 801c602:	4620      	mov	r0, r4
 801c604:	f000 fa72 	bl	801caec <_Bfree>
 801c608:	4639      	mov	r1, r7
 801c60a:	4620      	mov	r0, r4
 801c60c:	f000 fa6e 	bl	801caec <_Bfree>
 801c610:	e69c      	b.n	801c34c <_dtoa_r+0x6c4>
 801c612:	2600      	movs	r6, #0
 801c614:	4637      	mov	r7, r6
 801c616:	e7e1      	b.n	801c5dc <_dtoa_r+0x954>
 801c618:	46bb      	mov	fp, r7
 801c61a:	4637      	mov	r7, r6
 801c61c:	e599      	b.n	801c152 <_dtoa_r+0x4ca>
 801c61e:	bf00      	nop
 801c620:	40240000 	.word	0x40240000
 801c624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c626:	2b00      	cmp	r3, #0
 801c628:	f000 80c8 	beq.w	801c7bc <_dtoa_r+0xb34>
 801c62c:	9b04      	ldr	r3, [sp, #16]
 801c62e:	9301      	str	r3, [sp, #4]
 801c630:	2d00      	cmp	r5, #0
 801c632:	dd05      	ble.n	801c640 <_dtoa_r+0x9b8>
 801c634:	4639      	mov	r1, r7
 801c636:	462a      	mov	r2, r5
 801c638:	4620      	mov	r0, r4
 801c63a:	f000 fc71 	bl	801cf20 <__lshift>
 801c63e:	4607      	mov	r7, r0
 801c640:	f1b8 0f00 	cmp.w	r8, #0
 801c644:	d05b      	beq.n	801c6fe <_dtoa_r+0xa76>
 801c646:	6879      	ldr	r1, [r7, #4]
 801c648:	4620      	mov	r0, r4
 801c64a:	f000 fa0f 	bl	801ca6c <_Balloc>
 801c64e:	4605      	mov	r5, r0
 801c650:	b928      	cbnz	r0, 801c65e <_dtoa_r+0x9d6>
 801c652:	4b83      	ldr	r3, [pc, #524]	; (801c860 <_dtoa_r+0xbd8>)
 801c654:	4602      	mov	r2, r0
 801c656:	f240 21ef 	movw	r1, #751	; 0x2ef
 801c65a:	f7ff bb2e 	b.w	801bcba <_dtoa_r+0x32>
 801c65e:	693a      	ldr	r2, [r7, #16]
 801c660:	3202      	adds	r2, #2
 801c662:	0092      	lsls	r2, r2, #2
 801c664:	f107 010c 	add.w	r1, r7, #12
 801c668:	300c      	adds	r0, #12
 801c66a:	f7ff fa6e 	bl	801bb4a <memcpy>
 801c66e:	2201      	movs	r2, #1
 801c670:	4629      	mov	r1, r5
 801c672:	4620      	mov	r0, r4
 801c674:	f000 fc54 	bl	801cf20 <__lshift>
 801c678:	9b00      	ldr	r3, [sp, #0]
 801c67a:	3301      	adds	r3, #1
 801c67c:	9304      	str	r3, [sp, #16]
 801c67e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c682:	4413      	add	r3, r2
 801c684:	9308      	str	r3, [sp, #32]
 801c686:	9b02      	ldr	r3, [sp, #8]
 801c688:	f003 0301 	and.w	r3, r3, #1
 801c68c:	46b8      	mov	r8, r7
 801c68e:	9306      	str	r3, [sp, #24]
 801c690:	4607      	mov	r7, r0
 801c692:	9b04      	ldr	r3, [sp, #16]
 801c694:	4631      	mov	r1, r6
 801c696:	3b01      	subs	r3, #1
 801c698:	4650      	mov	r0, sl
 801c69a:	9301      	str	r3, [sp, #4]
 801c69c:	f7ff fa6a 	bl	801bb74 <quorem>
 801c6a0:	4641      	mov	r1, r8
 801c6a2:	9002      	str	r0, [sp, #8]
 801c6a4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801c6a8:	4650      	mov	r0, sl
 801c6aa:	f000 fca5 	bl	801cff8 <__mcmp>
 801c6ae:	463a      	mov	r2, r7
 801c6b0:	9005      	str	r0, [sp, #20]
 801c6b2:	4631      	mov	r1, r6
 801c6b4:	4620      	mov	r0, r4
 801c6b6:	f000 fcbb 	bl	801d030 <__mdiff>
 801c6ba:	68c2      	ldr	r2, [r0, #12]
 801c6bc:	4605      	mov	r5, r0
 801c6be:	bb02      	cbnz	r2, 801c702 <_dtoa_r+0xa7a>
 801c6c0:	4601      	mov	r1, r0
 801c6c2:	4650      	mov	r0, sl
 801c6c4:	f000 fc98 	bl	801cff8 <__mcmp>
 801c6c8:	4602      	mov	r2, r0
 801c6ca:	4629      	mov	r1, r5
 801c6cc:	4620      	mov	r0, r4
 801c6ce:	9209      	str	r2, [sp, #36]	; 0x24
 801c6d0:	f000 fa0c 	bl	801caec <_Bfree>
 801c6d4:	9b07      	ldr	r3, [sp, #28]
 801c6d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c6d8:	9d04      	ldr	r5, [sp, #16]
 801c6da:	ea43 0102 	orr.w	r1, r3, r2
 801c6de:	9b06      	ldr	r3, [sp, #24]
 801c6e0:	4319      	orrs	r1, r3
 801c6e2:	d110      	bne.n	801c706 <_dtoa_r+0xa7e>
 801c6e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801c6e8:	d029      	beq.n	801c73e <_dtoa_r+0xab6>
 801c6ea:	9b05      	ldr	r3, [sp, #20]
 801c6ec:	2b00      	cmp	r3, #0
 801c6ee:	dd02      	ble.n	801c6f6 <_dtoa_r+0xa6e>
 801c6f0:	9b02      	ldr	r3, [sp, #8]
 801c6f2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801c6f6:	9b01      	ldr	r3, [sp, #4]
 801c6f8:	f883 9000 	strb.w	r9, [r3]
 801c6fc:	e774      	b.n	801c5e8 <_dtoa_r+0x960>
 801c6fe:	4638      	mov	r0, r7
 801c700:	e7ba      	b.n	801c678 <_dtoa_r+0x9f0>
 801c702:	2201      	movs	r2, #1
 801c704:	e7e1      	b.n	801c6ca <_dtoa_r+0xa42>
 801c706:	9b05      	ldr	r3, [sp, #20]
 801c708:	2b00      	cmp	r3, #0
 801c70a:	db04      	blt.n	801c716 <_dtoa_r+0xa8e>
 801c70c:	9907      	ldr	r1, [sp, #28]
 801c70e:	430b      	orrs	r3, r1
 801c710:	9906      	ldr	r1, [sp, #24]
 801c712:	430b      	orrs	r3, r1
 801c714:	d120      	bne.n	801c758 <_dtoa_r+0xad0>
 801c716:	2a00      	cmp	r2, #0
 801c718:	dded      	ble.n	801c6f6 <_dtoa_r+0xa6e>
 801c71a:	4651      	mov	r1, sl
 801c71c:	2201      	movs	r2, #1
 801c71e:	4620      	mov	r0, r4
 801c720:	f000 fbfe 	bl	801cf20 <__lshift>
 801c724:	4631      	mov	r1, r6
 801c726:	4682      	mov	sl, r0
 801c728:	f000 fc66 	bl	801cff8 <__mcmp>
 801c72c:	2800      	cmp	r0, #0
 801c72e:	dc03      	bgt.n	801c738 <_dtoa_r+0xab0>
 801c730:	d1e1      	bne.n	801c6f6 <_dtoa_r+0xa6e>
 801c732:	f019 0f01 	tst.w	r9, #1
 801c736:	d0de      	beq.n	801c6f6 <_dtoa_r+0xa6e>
 801c738:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801c73c:	d1d8      	bne.n	801c6f0 <_dtoa_r+0xa68>
 801c73e:	9a01      	ldr	r2, [sp, #4]
 801c740:	2339      	movs	r3, #57	; 0x39
 801c742:	7013      	strb	r3, [r2, #0]
 801c744:	462b      	mov	r3, r5
 801c746:	461d      	mov	r5, r3
 801c748:	3b01      	subs	r3, #1
 801c74a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801c74e:	2a39      	cmp	r2, #57	; 0x39
 801c750:	d06c      	beq.n	801c82c <_dtoa_r+0xba4>
 801c752:	3201      	adds	r2, #1
 801c754:	701a      	strb	r2, [r3, #0]
 801c756:	e747      	b.n	801c5e8 <_dtoa_r+0x960>
 801c758:	2a00      	cmp	r2, #0
 801c75a:	dd07      	ble.n	801c76c <_dtoa_r+0xae4>
 801c75c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801c760:	d0ed      	beq.n	801c73e <_dtoa_r+0xab6>
 801c762:	9a01      	ldr	r2, [sp, #4]
 801c764:	f109 0301 	add.w	r3, r9, #1
 801c768:	7013      	strb	r3, [r2, #0]
 801c76a:	e73d      	b.n	801c5e8 <_dtoa_r+0x960>
 801c76c:	9b04      	ldr	r3, [sp, #16]
 801c76e:	9a08      	ldr	r2, [sp, #32]
 801c770:	f803 9c01 	strb.w	r9, [r3, #-1]
 801c774:	4293      	cmp	r3, r2
 801c776:	d043      	beq.n	801c800 <_dtoa_r+0xb78>
 801c778:	4651      	mov	r1, sl
 801c77a:	2300      	movs	r3, #0
 801c77c:	220a      	movs	r2, #10
 801c77e:	4620      	mov	r0, r4
 801c780:	f000 f9d6 	bl	801cb30 <__multadd>
 801c784:	45b8      	cmp	r8, r7
 801c786:	4682      	mov	sl, r0
 801c788:	f04f 0300 	mov.w	r3, #0
 801c78c:	f04f 020a 	mov.w	r2, #10
 801c790:	4641      	mov	r1, r8
 801c792:	4620      	mov	r0, r4
 801c794:	d107      	bne.n	801c7a6 <_dtoa_r+0xb1e>
 801c796:	f000 f9cb 	bl	801cb30 <__multadd>
 801c79a:	4680      	mov	r8, r0
 801c79c:	4607      	mov	r7, r0
 801c79e:	9b04      	ldr	r3, [sp, #16]
 801c7a0:	3301      	adds	r3, #1
 801c7a2:	9304      	str	r3, [sp, #16]
 801c7a4:	e775      	b.n	801c692 <_dtoa_r+0xa0a>
 801c7a6:	f000 f9c3 	bl	801cb30 <__multadd>
 801c7aa:	4639      	mov	r1, r7
 801c7ac:	4680      	mov	r8, r0
 801c7ae:	2300      	movs	r3, #0
 801c7b0:	220a      	movs	r2, #10
 801c7b2:	4620      	mov	r0, r4
 801c7b4:	f000 f9bc 	bl	801cb30 <__multadd>
 801c7b8:	4607      	mov	r7, r0
 801c7ba:	e7f0      	b.n	801c79e <_dtoa_r+0xb16>
 801c7bc:	9b04      	ldr	r3, [sp, #16]
 801c7be:	9301      	str	r3, [sp, #4]
 801c7c0:	9d00      	ldr	r5, [sp, #0]
 801c7c2:	4631      	mov	r1, r6
 801c7c4:	4650      	mov	r0, sl
 801c7c6:	f7ff f9d5 	bl	801bb74 <quorem>
 801c7ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801c7ce:	9b00      	ldr	r3, [sp, #0]
 801c7d0:	f805 9b01 	strb.w	r9, [r5], #1
 801c7d4:	1aea      	subs	r2, r5, r3
 801c7d6:	9b01      	ldr	r3, [sp, #4]
 801c7d8:	4293      	cmp	r3, r2
 801c7da:	dd07      	ble.n	801c7ec <_dtoa_r+0xb64>
 801c7dc:	4651      	mov	r1, sl
 801c7de:	2300      	movs	r3, #0
 801c7e0:	220a      	movs	r2, #10
 801c7e2:	4620      	mov	r0, r4
 801c7e4:	f000 f9a4 	bl	801cb30 <__multadd>
 801c7e8:	4682      	mov	sl, r0
 801c7ea:	e7ea      	b.n	801c7c2 <_dtoa_r+0xb3a>
 801c7ec:	9b01      	ldr	r3, [sp, #4]
 801c7ee:	2b00      	cmp	r3, #0
 801c7f0:	bfc8      	it	gt
 801c7f2:	461d      	movgt	r5, r3
 801c7f4:	9b00      	ldr	r3, [sp, #0]
 801c7f6:	bfd8      	it	le
 801c7f8:	2501      	movle	r5, #1
 801c7fa:	441d      	add	r5, r3
 801c7fc:	f04f 0800 	mov.w	r8, #0
 801c800:	4651      	mov	r1, sl
 801c802:	2201      	movs	r2, #1
 801c804:	4620      	mov	r0, r4
 801c806:	f000 fb8b 	bl	801cf20 <__lshift>
 801c80a:	4631      	mov	r1, r6
 801c80c:	4682      	mov	sl, r0
 801c80e:	f000 fbf3 	bl	801cff8 <__mcmp>
 801c812:	2800      	cmp	r0, #0
 801c814:	dc96      	bgt.n	801c744 <_dtoa_r+0xabc>
 801c816:	d102      	bne.n	801c81e <_dtoa_r+0xb96>
 801c818:	f019 0f01 	tst.w	r9, #1
 801c81c:	d192      	bne.n	801c744 <_dtoa_r+0xabc>
 801c81e:	462b      	mov	r3, r5
 801c820:	461d      	mov	r5, r3
 801c822:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c826:	2a30      	cmp	r2, #48	; 0x30
 801c828:	d0fa      	beq.n	801c820 <_dtoa_r+0xb98>
 801c82a:	e6dd      	b.n	801c5e8 <_dtoa_r+0x960>
 801c82c:	9a00      	ldr	r2, [sp, #0]
 801c82e:	429a      	cmp	r2, r3
 801c830:	d189      	bne.n	801c746 <_dtoa_r+0xabe>
 801c832:	f10b 0b01 	add.w	fp, fp, #1
 801c836:	2331      	movs	r3, #49	; 0x31
 801c838:	e796      	b.n	801c768 <_dtoa_r+0xae0>
 801c83a:	4b0a      	ldr	r3, [pc, #40]	; (801c864 <_dtoa_r+0xbdc>)
 801c83c:	f7ff ba99 	b.w	801bd72 <_dtoa_r+0xea>
 801c840:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c842:	2b00      	cmp	r3, #0
 801c844:	f47f aa6d 	bne.w	801bd22 <_dtoa_r+0x9a>
 801c848:	4b07      	ldr	r3, [pc, #28]	; (801c868 <_dtoa_r+0xbe0>)
 801c84a:	f7ff ba92 	b.w	801bd72 <_dtoa_r+0xea>
 801c84e:	9b01      	ldr	r3, [sp, #4]
 801c850:	2b00      	cmp	r3, #0
 801c852:	dcb5      	bgt.n	801c7c0 <_dtoa_r+0xb38>
 801c854:	9b07      	ldr	r3, [sp, #28]
 801c856:	2b02      	cmp	r3, #2
 801c858:	f73f aeb1 	bgt.w	801c5be <_dtoa_r+0x936>
 801c85c:	e7b0      	b.n	801c7c0 <_dtoa_r+0xb38>
 801c85e:	bf00      	nop
 801c860:	080215cd 	.word	0x080215cd
 801c864:	08021528 	.word	0x08021528
 801c868:	08021551 	.word	0x08021551

0801c86c <_free_r>:
 801c86c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c86e:	2900      	cmp	r1, #0
 801c870:	d044      	beq.n	801c8fc <_free_r+0x90>
 801c872:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c876:	9001      	str	r0, [sp, #4]
 801c878:	2b00      	cmp	r3, #0
 801c87a:	f1a1 0404 	sub.w	r4, r1, #4
 801c87e:	bfb8      	it	lt
 801c880:	18e4      	addlt	r4, r4, r3
 801c882:	f000 f8e7 	bl	801ca54 <__malloc_lock>
 801c886:	4a1e      	ldr	r2, [pc, #120]	; (801c900 <_free_r+0x94>)
 801c888:	9801      	ldr	r0, [sp, #4]
 801c88a:	6813      	ldr	r3, [r2, #0]
 801c88c:	b933      	cbnz	r3, 801c89c <_free_r+0x30>
 801c88e:	6063      	str	r3, [r4, #4]
 801c890:	6014      	str	r4, [r2, #0]
 801c892:	b003      	add	sp, #12
 801c894:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c898:	f000 b8e2 	b.w	801ca60 <__malloc_unlock>
 801c89c:	42a3      	cmp	r3, r4
 801c89e:	d908      	bls.n	801c8b2 <_free_r+0x46>
 801c8a0:	6825      	ldr	r5, [r4, #0]
 801c8a2:	1961      	adds	r1, r4, r5
 801c8a4:	428b      	cmp	r3, r1
 801c8a6:	bf01      	itttt	eq
 801c8a8:	6819      	ldreq	r1, [r3, #0]
 801c8aa:	685b      	ldreq	r3, [r3, #4]
 801c8ac:	1949      	addeq	r1, r1, r5
 801c8ae:	6021      	streq	r1, [r4, #0]
 801c8b0:	e7ed      	b.n	801c88e <_free_r+0x22>
 801c8b2:	461a      	mov	r2, r3
 801c8b4:	685b      	ldr	r3, [r3, #4]
 801c8b6:	b10b      	cbz	r3, 801c8bc <_free_r+0x50>
 801c8b8:	42a3      	cmp	r3, r4
 801c8ba:	d9fa      	bls.n	801c8b2 <_free_r+0x46>
 801c8bc:	6811      	ldr	r1, [r2, #0]
 801c8be:	1855      	adds	r5, r2, r1
 801c8c0:	42a5      	cmp	r5, r4
 801c8c2:	d10b      	bne.n	801c8dc <_free_r+0x70>
 801c8c4:	6824      	ldr	r4, [r4, #0]
 801c8c6:	4421      	add	r1, r4
 801c8c8:	1854      	adds	r4, r2, r1
 801c8ca:	42a3      	cmp	r3, r4
 801c8cc:	6011      	str	r1, [r2, #0]
 801c8ce:	d1e0      	bne.n	801c892 <_free_r+0x26>
 801c8d0:	681c      	ldr	r4, [r3, #0]
 801c8d2:	685b      	ldr	r3, [r3, #4]
 801c8d4:	6053      	str	r3, [r2, #4]
 801c8d6:	440c      	add	r4, r1
 801c8d8:	6014      	str	r4, [r2, #0]
 801c8da:	e7da      	b.n	801c892 <_free_r+0x26>
 801c8dc:	d902      	bls.n	801c8e4 <_free_r+0x78>
 801c8de:	230c      	movs	r3, #12
 801c8e0:	6003      	str	r3, [r0, #0]
 801c8e2:	e7d6      	b.n	801c892 <_free_r+0x26>
 801c8e4:	6825      	ldr	r5, [r4, #0]
 801c8e6:	1961      	adds	r1, r4, r5
 801c8e8:	428b      	cmp	r3, r1
 801c8ea:	bf04      	itt	eq
 801c8ec:	6819      	ldreq	r1, [r3, #0]
 801c8ee:	685b      	ldreq	r3, [r3, #4]
 801c8f0:	6063      	str	r3, [r4, #4]
 801c8f2:	bf04      	itt	eq
 801c8f4:	1949      	addeq	r1, r1, r5
 801c8f6:	6021      	streq	r1, [r4, #0]
 801c8f8:	6054      	str	r4, [r2, #4]
 801c8fa:	e7ca      	b.n	801c892 <_free_r+0x26>
 801c8fc:	b003      	add	sp, #12
 801c8fe:	bd30      	pop	{r4, r5, pc}
 801c900:	20000d38 	.word	0x20000d38

0801c904 <malloc>:
 801c904:	4b02      	ldr	r3, [pc, #8]	; (801c910 <malloc+0xc>)
 801c906:	4601      	mov	r1, r0
 801c908:	6818      	ldr	r0, [r3, #0]
 801c90a:	f000 b823 	b.w	801c954 <_malloc_r>
 801c90e:	bf00      	nop
 801c910:	2000014c 	.word	0x2000014c

0801c914 <sbrk_aligned>:
 801c914:	b570      	push	{r4, r5, r6, lr}
 801c916:	4e0e      	ldr	r6, [pc, #56]	; (801c950 <sbrk_aligned+0x3c>)
 801c918:	460c      	mov	r4, r1
 801c91a:	6831      	ldr	r1, [r6, #0]
 801c91c:	4605      	mov	r5, r0
 801c91e:	b911      	cbnz	r1, 801c926 <sbrk_aligned+0x12>
 801c920:	f002 f816 	bl	801e950 <_sbrk_r>
 801c924:	6030      	str	r0, [r6, #0]
 801c926:	4621      	mov	r1, r4
 801c928:	4628      	mov	r0, r5
 801c92a:	f002 f811 	bl	801e950 <_sbrk_r>
 801c92e:	1c43      	adds	r3, r0, #1
 801c930:	d00a      	beq.n	801c948 <sbrk_aligned+0x34>
 801c932:	1cc4      	adds	r4, r0, #3
 801c934:	f024 0403 	bic.w	r4, r4, #3
 801c938:	42a0      	cmp	r0, r4
 801c93a:	d007      	beq.n	801c94c <sbrk_aligned+0x38>
 801c93c:	1a21      	subs	r1, r4, r0
 801c93e:	4628      	mov	r0, r5
 801c940:	f002 f806 	bl	801e950 <_sbrk_r>
 801c944:	3001      	adds	r0, #1
 801c946:	d101      	bne.n	801c94c <sbrk_aligned+0x38>
 801c948:	f04f 34ff 	mov.w	r4, #4294967295
 801c94c:	4620      	mov	r0, r4
 801c94e:	bd70      	pop	{r4, r5, r6, pc}
 801c950:	20000d3c 	.word	0x20000d3c

0801c954 <_malloc_r>:
 801c954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c958:	1ccd      	adds	r5, r1, #3
 801c95a:	f025 0503 	bic.w	r5, r5, #3
 801c95e:	3508      	adds	r5, #8
 801c960:	2d0c      	cmp	r5, #12
 801c962:	bf38      	it	cc
 801c964:	250c      	movcc	r5, #12
 801c966:	2d00      	cmp	r5, #0
 801c968:	4607      	mov	r7, r0
 801c96a:	db01      	blt.n	801c970 <_malloc_r+0x1c>
 801c96c:	42a9      	cmp	r1, r5
 801c96e:	d905      	bls.n	801c97c <_malloc_r+0x28>
 801c970:	230c      	movs	r3, #12
 801c972:	603b      	str	r3, [r7, #0]
 801c974:	2600      	movs	r6, #0
 801c976:	4630      	mov	r0, r6
 801c978:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c97c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801ca50 <_malloc_r+0xfc>
 801c980:	f000 f868 	bl	801ca54 <__malloc_lock>
 801c984:	f8d8 3000 	ldr.w	r3, [r8]
 801c988:	461c      	mov	r4, r3
 801c98a:	bb5c      	cbnz	r4, 801c9e4 <_malloc_r+0x90>
 801c98c:	4629      	mov	r1, r5
 801c98e:	4638      	mov	r0, r7
 801c990:	f7ff ffc0 	bl	801c914 <sbrk_aligned>
 801c994:	1c43      	adds	r3, r0, #1
 801c996:	4604      	mov	r4, r0
 801c998:	d155      	bne.n	801ca46 <_malloc_r+0xf2>
 801c99a:	f8d8 4000 	ldr.w	r4, [r8]
 801c99e:	4626      	mov	r6, r4
 801c9a0:	2e00      	cmp	r6, #0
 801c9a2:	d145      	bne.n	801ca30 <_malloc_r+0xdc>
 801c9a4:	2c00      	cmp	r4, #0
 801c9a6:	d048      	beq.n	801ca3a <_malloc_r+0xe6>
 801c9a8:	6823      	ldr	r3, [r4, #0]
 801c9aa:	4631      	mov	r1, r6
 801c9ac:	4638      	mov	r0, r7
 801c9ae:	eb04 0903 	add.w	r9, r4, r3
 801c9b2:	f001 ffcd 	bl	801e950 <_sbrk_r>
 801c9b6:	4581      	cmp	r9, r0
 801c9b8:	d13f      	bne.n	801ca3a <_malloc_r+0xe6>
 801c9ba:	6821      	ldr	r1, [r4, #0]
 801c9bc:	1a6d      	subs	r5, r5, r1
 801c9be:	4629      	mov	r1, r5
 801c9c0:	4638      	mov	r0, r7
 801c9c2:	f7ff ffa7 	bl	801c914 <sbrk_aligned>
 801c9c6:	3001      	adds	r0, #1
 801c9c8:	d037      	beq.n	801ca3a <_malloc_r+0xe6>
 801c9ca:	6823      	ldr	r3, [r4, #0]
 801c9cc:	442b      	add	r3, r5
 801c9ce:	6023      	str	r3, [r4, #0]
 801c9d0:	f8d8 3000 	ldr.w	r3, [r8]
 801c9d4:	2b00      	cmp	r3, #0
 801c9d6:	d038      	beq.n	801ca4a <_malloc_r+0xf6>
 801c9d8:	685a      	ldr	r2, [r3, #4]
 801c9da:	42a2      	cmp	r2, r4
 801c9dc:	d12b      	bne.n	801ca36 <_malloc_r+0xe2>
 801c9de:	2200      	movs	r2, #0
 801c9e0:	605a      	str	r2, [r3, #4]
 801c9e2:	e00f      	b.n	801ca04 <_malloc_r+0xb0>
 801c9e4:	6822      	ldr	r2, [r4, #0]
 801c9e6:	1b52      	subs	r2, r2, r5
 801c9e8:	d41f      	bmi.n	801ca2a <_malloc_r+0xd6>
 801c9ea:	2a0b      	cmp	r2, #11
 801c9ec:	d917      	bls.n	801ca1e <_malloc_r+0xca>
 801c9ee:	1961      	adds	r1, r4, r5
 801c9f0:	42a3      	cmp	r3, r4
 801c9f2:	6025      	str	r5, [r4, #0]
 801c9f4:	bf18      	it	ne
 801c9f6:	6059      	strne	r1, [r3, #4]
 801c9f8:	6863      	ldr	r3, [r4, #4]
 801c9fa:	bf08      	it	eq
 801c9fc:	f8c8 1000 	streq.w	r1, [r8]
 801ca00:	5162      	str	r2, [r4, r5]
 801ca02:	604b      	str	r3, [r1, #4]
 801ca04:	4638      	mov	r0, r7
 801ca06:	f104 060b 	add.w	r6, r4, #11
 801ca0a:	f000 f829 	bl	801ca60 <__malloc_unlock>
 801ca0e:	f026 0607 	bic.w	r6, r6, #7
 801ca12:	1d23      	adds	r3, r4, #4
 801ca14:	1af2      	subs	r2, r6, r3
 801ca16:	d0ae      	beq.n	801c976 <_malloc_r+0x22>
 801ca18:	1b9b      	subs	r3, r3, r6
 801ca1a:	50a3      	str	r3, [r4, r2]
 801ca1c:	e7ab      	b.n	801c976 <_malloc_r+0x22>
 801ca1e:	42a3      	cmp	r3, r4
 801ca20:	6862      	ldr	r2, [r4, #4]
 801ca22:	d1dd      	bne.n	801c9e0 <_malloc_r+0x8c>
 801ca24:	f8c8 2000 	str.w	r2, [r8]
 801ca28:	e7ec      	b.n	801ca04 <_malloc_r+0xb0>
 801ca2a:	4623      	mov	r3, r4
 801ca2c:	6864      	ldr	r4, [r4, #4]
 801ca2e:	e7ac      	b.n	801c98a <_malloc_r+0x36>
 801ca30:	4634      	mov	r4, r6
 801ca32:	6876      	ldr	r6, [r6, #4]
 801ca34:	e7b4      	b.n	801c9a0 <_malloc_r+0x4c>
 801ca36:	4613      	mov	r3, r2
 801ca38:	e7cc      	b.n	801c9d4 <_malloc_r+0x80>
 801ca3a:	230c      	movs	r3, #12
 801ca3c:	603b      	str	r3, [r7, #0]
 801ca3e:	4638      	mov	r0, r7
 801ca40:	f000 f80e 	bl	801ca60 <__malloc_unlock>
 801ca44:	e797      	b.n	801c976 <_malloc_r+0x22>
 801ca46:	6025      	str	r5, [r4, #0]
 801ca48:	e7dc      	b.n	801ca04 <_malloc_r+0xb0>
 801ca4a:	605b      	str	r3, [r3, #4]
 801ca4c:	deff      	udf	#255	; 0xff
 801ca4e:	bf00      	nop
 801ca50:	20000d38 	.word	0x20000d38

0801ca54 <__malloc_lock>:
 801ca54:	4801      	ldr	r0, [pc, #4]	; (801ca5c <__malloc_lock+0x8>)
 801ca56:	f7ff b876 	b.w	801bb46 <__retarget_lock_acquire_recursive>
 801ca5a:	bf00      	nop
 801ca5c:	20000d34 	.word	0x20000d34

0801ca60 <__malloc_unlock>:
 801ca60:	4801      	ldr	r0, [pc, #4]	; (801ca68 <__malloc_unlock+0x8>)
 801ca62:	f7ff b871 	b.w	801bb48 <__retarget_lock_release_recursive>
 801ca66:	bf00      	nop
 801ca68:	20000d34 	.word	0x20000d34

0801ca6c <_Balloc>:
 801ca6c:	b570      	push	{r4, r5, r6, lr}
 801ca6e:	69c6      	ldr	r6, [r0, #28]
 801ca70:	4604      	mov	r4, r0
 801ca72:	460d      	mov	r5, r1
 801ca74:	b976      	cbnz	r6, 801ca94 <_Balloc+0x28>
 801ca76:	2010      	movs	r0, #16
 801ca78:	f7ff ff44 	bl	801c904 <malloc>
 801ca7c:	4602      	mov	r2, r0
 801ca7e:	61e0      	str	r0, [r4, #28]
 801ca80:	b920      	cbnz	r0, 801ca8c <_Balloc+0x20>
 801ca82:	4b18      	ldr	r3, [pc, #96]	; (801cae4 <_Balloc+0x78>)
 801ca84:	4818      	ldr	r0, [pc, #96]	; (801cae8 <_Balloc+0x7c>)
 801ca86:	216b      	movs	r1, #107	; 0x6b
 801ca88:	f001 ff7a 	bl	801e980 <__assert_func>
 801ca8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ca90:	6006      	str	r6, [r0, #0]
 801ca92:	60c6      	str	r6, [r0, #12]
 801ca94:	69e6      	ldr	r6, [r4, #28]
 801ca96:	68f3      	ldr	r3, [r6, #12]
 801ca98:	b183      	cbz	r3, 801cabc <_Balloc+0x50>
 801ca9a:	69e3      	ldr	r3, [r4, #28]
 801ca9c:	68db      	ldr	r3, [r3, #12]
 801ca9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801caa2:	b9b8      	cbnz	r0, 801cad4 <_Balloc+0x68>
 801caa4:	2101      	movs	r1, #1
 801caa6:	fa01 f605 	lsl.w	r6, r1, r5
 801caaa:	1d72      	adds	r2, r6, #5
 801caac:	0092      	lsls	r2, r2, #2
 801caae:	4620      	mov	r0, r4
 801cab0:	f001 ff84 	bl	801e9bc <_calloc_r>
 801cab4:	b160      	cbz	r0, 801cad0 <_Balloc+0x64>
 801cab6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801caba:	e00e      	b.n	801cada <_Balloc+0x6e>
 801cabc:	2221      	movs	r2, #33	; 0x21
 801cabe:	2104      	movs	r1, #4
 801cac0:	4620      	mov	r0, r4
 801cac2:	f001 ff7b 	bl	801e9bc <_calloc_r>
 801cac6:	69e3      	ldr	r3, [r4, #28]
 801cac8:	60f0      	str	r0, [r6, #12]
 801caca:	68db      	ldr	r3, [r3, #12]
 801cacc:	2b00      	cmp	r3, #0
 801cace:	d1e4      	bne.n	801ca9a <_Balloc+0x2e>
 801cad0:	2000      	movs	r0, #0
 801cad2:	bd70      	pop	{r4, r5, r6, pc}
 801cad4:	6802      	ldr	r2, [r0, #0]
 801cad6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cada:	2300      	movs	r3, #0
 801cadc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801cae0:	e7f7      	b.n	801cad2 <_Balloc+0x66>
 801cae2:	bf00      	nop
 801cae4:	0802155e 	.word	0x0802155e
 801cae8:	080215de 	.word	0x080215de

0801caec <_Bfree>:
 801caec:	b570      	push	{r4, r5, r6, lr}
 801caee:	69c6      	ldr	r6, [r0, #28]
 801caf0:	4605      	mov	r5, r0
 801caf2:	460c      	mov	r4, r1
 801caf4:	b976      	cbnz	r6, 801cb14 <_Bfree+0x28>
 801caf6:	2010      	movs	r0, #16
 801caf8:	f7ff ff04 	bl	801c904 <malloc>
 801cafc:	4602      	mov	r2, r0
 801cafe:	61e8      	str	r0, [r5, #28]
 801cb00:	b920      	cbnz	r0, 801cb0c <_Bfree+0x20>
 801cb02:	4b09      	ldr	r3, [pc, #36]	; (801cb28 <_Bfree+0x3c>)
 801cb04:	4809      	ldr	r0, [pc, #36]	; (801cb2c <_Bfree+0x40>)
 801cb06:	218f      	movs	r1, #143	; 0x8f
 801cb08:	f001 ff3a 	bl	801e980 <__assert_func>
 801cb0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801cb10:	6006      	str	r6, [r0, #0]
 801cb12:	60c6      	str	r6, [r0, #12]
 801cb14:	b13c      	cbz	r4, 801cb26 <_Bfree+0x3a>
 801cb16:	69eb      	ldr	r3, [r5, #28]
 801cb18:	6862      	ldr	r2, [r4, #4]
 801cb1a:	68db      	ldr	r3, [r3, #12]
 801cb1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801cb20:	6021      	str	r1, [r4, #0]
 801cb22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801cb26:	bd70      	pop	{r4, r5, r6, pc}
 801cb28:	0802155e 	.word	0x0802155e
 801cb2c:	080215de 	.word	0x080215de

0801cb30 <__multadd>:
 801cb30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cb34:	690d      	ldr	r5, [r1, #16]
 801cb36:	4607      	mov	r7, r0
 801cb38:	460c      	mov	r4, r1
 801cb3a:	461e      	mov	r6, r3
 801cb3c:	f101 0c14 	add.w	ip, r1, #20
 801cb40:	2000      	movs	r0, #0
 801cb42:	f8dc 3000 	ldr.w	r3, [ip]
 801cb46:	b299      	uxth	r1, r3
 801cb48:	fb02 6101 	mla	r1, r2, r1, r6
 801cb4c:	0c1e      	lsrs	r6, r3, #16
 801cb4e:	0c0b      	lsrs	r3, r1, #16
 801cb50:	fb02 3306 	mla	r3, r2, r6, r3
 801cb54:	b289      	uxth	r1, r1
 801cb56:	3001      	adds	r0, #1
 801cb58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801cb5c:	4285      	cmp	r5, r0
 801cb5e:	f84c 1b04 	str.w	r1, [ip], #4
 801cb62:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801cb66:	dcec      	bgt.n	801cb42 <__multadd+0x12>
 801cb68:	b30e      	cbz	r6, 801cbae <__multadd+0x7e>
 801cb6a:	68a3      	ldr	r3, [r4, #8]
 801cb6c:	42ab      	cmp	r3, r5
 801cb6e:	dc19      	bgt.n	801cba4 <__multadd+0x74>
 801cb70:	6861      	ldr	r1, [r4, #4]
 801cb72:	4638      	mov	r0, r7
 801cb74:	3101      	adds	r1, #1
 801cb76:	f7ff ff79 	bl	801ca6c <_Balloc>
 801cb7a:	4680      	mov	r8, r0
 801cb7c:	b928      	cbnz	r0, 801cb8a <__multadd+0x5a>
 801cb7e:	4602      	mov	r2, r0
 801cb80:	4b0c      	ldr	r3, [pc, #48]	; (801cbb4 <__multadd+0x84>)
 801cb82:	480d      	ldr	r0, [pc, #52]	; (801cbb8 <__multadd+0x88>)
 801cb84:	21ba      	movs	r1, #186	; 0xba
 801cb86:	f001 fefb 	bl	801e980 <__assert_func>
 801cb8a:	6922      	ldr	r2, [r4, #16]
 801cb8c:	3202      	adds	r2, #2
 801cb8e:	f104 010c 	add.w	r1, r4, #12
 801cb92:	0092      	lsls	r2, r2, #2
 801cb94:	300c      	adds	r0, #12
 801cb96:	f7fe ffd8 	bl	801bb4a <memcpy>
 801cb9a:	4621      	mov	r1, r4
 801cb9c:	4638      	mov	r0, r7
 801cb9e:	f7ff ffa5 	bl	801caec <_Bfree>
 801cba2:	4644      	mov	r4, r8
 801cba4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801cba8:	3501      	adds	r5, #1
 801cbaa:	615e      	str	r6, [r3, #20]
 801cbac:	6125      	str	r5, [r4, #16]
 801cbae:	4620      	mov	r0, r4
 801cbb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cbb4:	080215cd 	.word	0x080215cd
 801cbb8:	080215de 	.word	0x080215de

0801cbbc <__s2b>:
 801cbbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cbc0:	460c      	mov	r4, r1
 801cbc2:	4615      	mov	r5, r2
 801cbc4:	461f      	mov	r7, r3
 801cbc6:	2209      	movs	r2, #9
 801cbc8:	3308      	adds	r3, #8
 801cbca:	4606      	mov	r6, r0
 801cbcc:	fb93 f3f2 	sdiv	r3, r3, r2
 801cbd0:	2100      	movs	r1, #0
 801cbd2:	2201      	movs	r2, #1
 801cbd4:	429a      	cmp	r2, r3
 801cbd6:	db09      	blt.n	801cbec <__s2b+0x30>
 801cbd8:	4630      	mov	r0, r6
 801cbda:	f7ff ff47 	bl	801ca6c <_Balloc>
 801cbde:	b940      	cbnz	r0, 801cbf2 <__s2b+0x36>
 801cbe0:	4602      	mov	r2, r0
 801cbe2:	4b19      	ldr	r3, [pc, #100]	; (801cc48 <__s2b+0x8c>)
 801cbe4:	4819      	ldr	r0, [pc, #100]	; (801cc4c <__s2b+0x90>)
 801cbe6:	21d3      	movs	r1, #211	; 0xd3
 801cbe8:	f001 feca 	bl	801e980 <__assert_func>
 801cbec:	0052      	lsls	r2, r2, #1
 801cbee:	3101      	adds	r1, #1
 801cbf0:	e7f0      	b.n	801cbd4 <__s2b+0x18>
 801cbf2:	9b08      	ldr	r3, [sp, #32]
 801cbf4:	6143      	str	r3, [r0, #20]
 801cbf6:	2d09      	cmp	r5, #9
 801cbf8:	f04f 0301 	mov.w	r3, #1
 801cbfc:	6103      	str	r3, [r0, #16]
 801cbfe:	dd16      	ble.n	801cc2e <__s2b+0x72>
 801cc00:	f104 0909 	add.w	r9, r4, #9
 801cc04:	46c8      	mov	r8, r9
 801cc06:	442c      	add	r4, r5
 801cc08:	f818 3b01 	ldrb.w	r3, [r8], #1
 801cc0c:	4601      	mov	r1, r0
 801cc0e:	3b30      	subs	r3, #48	; 0x30
 801cc10:	220a      	movs	r2, #10
 801cc12:	4630      	mov	r0, r6
 801cc14:	f7ff ff8c 	bl	801cb30 <__multadd>
 801cc18:	45a0      	cmp	r8, r4
 801cc1a:	d1f5      	bne.n	801cc08 <__s2b+0x4c>
 801cc1c:	f1a5 0408 	sub.w	r4, r5, #8
 801cc20:	444c      	add	r4, r9
 801cc22:	1b2d      	subs	r5, r5, r4
 801cc24:	1963      	adds	r3, r4, r5
 801cc26:	42bb      	cmp	r3, r7
 801cc28:	db04      	blt.n	801cc34 <__s2b+0x78>
 801cc2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cc2e:	340a      	adds	r4, #10
 801cc30:	2509      	movs	r5, #9
 801cc32:	e7f6      	b.n	801cc22 <__s2b+0x66>
 801cc34:	f814 3b01 	ldrb.w	r3, [r4], #1
 801cc38:	4601      	mov	r1, r0
 801cc3a:	3b30      	subs	r3, #48	; 0x30
 801cc3c:	220a      	movs	r2, #10
 801cc3e:	4630      	mov	r0, r6
 801cc40:	f7ff ff76 	bl	801cb30 <__multadd>
 801cc44:	e7ee      	b.n	801cc24 <__s2b+0x68>
 801cc46:	bf00      	nop
 801cc48:	080215cd 	.word	0x080215cd
 801cc4c:	080215de 	.word	0x080215de

0801cc50 <__hi0bits>:
 801cc50:	0c03      	lsrs	r3, r0, #16
 801cc52:	041b      	lsls	r3, r3, #16
 801cc54:	b9d3      	cbnz	r3, 801cc8c <__hi0bits+0x3c>
 801cc56:	0400      	lsls	r0, r0, #16
 801cc58:	2310      	movs	r3, #16
 801cc5a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801cc5e:	bf04      	itt	eq
 801cc60:	0200      	lsleq	r0, r0, #8
 801cc62:	3308      	addeq	r3, #8
 801cc64:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801cc68:	bf04      	itt	eq
 801cc6a:	0100      	lsleq	r0, r0, #4
 801cc6c:	3304      	addeq	r3, #4
 801cc6e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801cc72:	bf04      	itt	eq
 801cc74:	0080      	lsleq	r0, r0, #2
 801cc76:	3302      	addeq	r3, #2
 801cc78:	2800      	cmp	r0, #0
 801cc7a:	db05      	blt.n	801cc88 <__hi0bits+0x38>
 801cc7c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801cc80:	f103 0301 	add.w	r3, r3, #1
 801cc84:	bf08      	it	eq
 801cc86:	2320      	moveq	r3, #32
 801cc88:	4618      	mov	r0, r3
 801cc8a:	4770      	bx	lr
 801cc8c:	2300      	movs	r3, #0
 801cc8e:	e7e4      	b.n	801cc5a <__hi0bits+0xa>

0801cc90 <__lo0bits>:
 801cc90:	6803      	ldr	r3, [r0, #0]
 801cc92:	f013 0207 	ands.w	r2, r3, #7
 801cc96:	d00c      	beq.n	801ccb2 <__lo0bits+0x22>
 801cc98:	07d9      	lsls	r1, r3, #31
 801cc9a:	d422      	bmi.n	801cce2 <__lo0bits+0x52>
 801cc9c:	079a      	lsls	r2, r3, #30
 801cc9e:	bf49      	itett	mi
 801cca0:	085b      	lsrmi	r3, r3, #1
 801cca2:	089b      	lsrpl	r3, r3, #2
 801cca4:	6003      	strmi	r3, [r0, #0]
 801cca6:	2201      	movmi	r2, #1
 801cca8:	bf5c      	itt	pl
 801ccaa:	6003      	strpl	r3, [r0, #0]
 801ccac:	2202      	movpl	r2, #2
 801ccae:	4610      	mov	r0, r2
 801ccb0:	4770      	bx	lr
 801ccb2:	b299      	uxth	r1, r3
 801ccb4:	b909      	cbnz	r1, 801ccba <__lo0bits+0x2a>
 801ccb6:	0c1b      	lsrs	r3, r3, #16
 801ccb8:	2210      	movs	r2, #16
 801ccba:	b2d9      	uxtb	r1, r3
 801ccbc:	b909      	cbnz	r1, 801ccc2 <__lo0bits+0x32>
 801ccbe:	3208      	adds	r2, #8
 801ccc0:	0a1b      	lsrs	r3, r3, #8
 801ccc2:	0719      	lsls	r1, r3, #28
 801ccc4:	bf04      	itt	eq
 801ccc6:	091b      	lsreq	r3, r3, #4
 801ccc8:	3204      	addeq	r2, #4
 801ccca:	0799      	lsls	r1, r3, #30
 801cccc:	bf04      	itt	eq
 801ccce:	089b      	lsreq	r3, r3, #2
 801ccd0:	3202      	addeq	r2, #2
 801ccd2:	07d9      	lsls	r1, r3, #31
 801ccd4:	d403      	bmi.n	801ccde <__lo0bits+0x4e>
 801ccd6:	085b      	lsrs	r3, r3, #1
 801ccd8:	f102 0201 	add.w	r2, r2, #1
 801ccdc:	d003      	beq.n	801cce6 <__lo0bits+0x56>
 801ccde:	6003      	str	r3, [r0, #0]
 801cce0:	e7e5      	b.n	801ccae <__lo0bits+0x1e>
 801cce2:	2200      	movs	r2, #0
 801cce4:	e7e3      	b.n	801ccae <__lo0bits+0x1e>
 801cce6:	2220      	movs	r2, #32
 801cce8:	e7e1      	b.n	801ccae <__lo0bits+0x1e>
	...

0801ccec <__i2b>:
 801ccec:	b510      	push	{r4, lr}
 801ccee:	460c      	mov	r4, r1
 801ccf0:	2101      	movs	r1, #1
 801ccf2:	f7ff febb 	bl	801ca6c <_Balloc>
 801ccf6:	4602      	mov	r2, r0
 801ccf8:	b928      	cbnz	r0, 801cd06 <__i2b+0x1a>
 801ccfa:	4b05      	ldr	r3, [pc, #20]	; (801cd10 <__i2b+0x24>)
 801ccfc:	4805      	ldr	r0, [pc, #20]	; (801cd14 <__i2b+0x28>)
 801ccfe:	f240 1145 	movw	r1, #325	; 0x145
 801cd02:	f001 fe3d 	bl	801e980 <__assert_func>
 801cd06:	2301      	movs	r3, #1
 801cd08:	6144      	str	r4, [r0, #20]
 801cd0a:	6103      	str	r3, [r0, #16]
 801cd0c:	bd10      	pop	{r4, pc}
 801cd0e:	bf00      	nop
 801cd10:	080215cd 	.word	0x080215cd
 801cd14:	080215de 	.word	0x080215de

0801cd18 <__multiply>:
 801cd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd1c:	4691      	mov	r9, r2
 801cd1e:	690a      	ldr	r2, [r1, #16]
 801cd20:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801cd24:	429a      	cmp	r2, r3
 801cd26:	bfb8      	it	lt
 801cd28:	460b      	movlt	r3, r1
 801cd2a:	460c      	mov	r4, r1
 801cd2c:	bfbc      	itt	lt
 801cd2e:	464c      	movlt	r4, r9
 801cd30:	4699      	movlt	r9, r3
 801cd32:	6927      	ldr	r7, [r4, #16]
 801cd34:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801cd38:	68a3      	ldr	r3, [r4, #8]
 801cd3a:	6861      	ldr	r1, [r4, #4]
 801cd3c:	eb07 060a 	add.w	r6, r7, sl
 801cd40:	42b3      	cmp	r3, r6
 801cd42:	b085      	sub	sp, #20
 801cd44:	bfb8      	it	lt
 801cd46:	3101      	addlt	r1, #1
 801cd48:	f7ff fe90 	bl	801ca6c <_Balloc>
 801cd4c:	b930      	cbnz	r0, 801cd5c <__multiply+0x44>
 801cd4e:	4602      	mov	r2, r0
 801cd50:	4b44      	ldr	r3, [pc, #272]	; (801ce64 <__multiply+0x14c>)
 801cd52:	4845      	ldr	r0, [pc, #276]	; (801ce68 <__multiply+0x150>)
 801cd54:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801cd58:	f001 fe12 	bl	801e980 <__assert_func>
 801cd5c:	f100 0514 	add.w	r5, r0, #20
 801cd60:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801cd64:	462b      	mov	r3, r5
 801cd66:	2200      	movs	r2, #0
 801cd68:	4543      	cmp	r3, r8
 801cd6a:	d321      	bcc.n	801cdb0 <__multiply+0x98>
 801cd6c:	f104 0314 	add.w	r3, r4, #20
 801cd70:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801cd74:	f109 0314 	add.w	r3, r9, #20
 801cd78:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801cd7c:	9202      	str	r2, [sp, #8]
 801cd7e:	1b3a      	subs	r2, r7, r4
 801cd80:	3a15      	subs	r2, #21
 801cd82:	f022 0203 	bic.w	r2, r2, #3
 801cd86:	3204      	adds	r2, #4
 801cd88:	f104 0115 	add.w	r1, r4, #21
 801cd8c:	428f      	cmp	r7, r1
 801cd8e:	bf38      	it	cc
 801cd90:	2204      	movcc	r2, #4
 801cd92:	9201      	str	r2, [sp, #4]
 801cd94:	9a02      	ldr	r2, [sp, #8]
 801cd96:	9303      	str	r3, [sp, #12]
 801cd98:	429a      	cmp	r2, r3
 801cd9a:	d80c      	bhi.n	801cdb6 <__multiply+0x9e>
 801cd9c:	2e00      	cmp	r6, #0
 801cd9e:	dd03      	ble.n	801cda8 <__multiply+0x90>
 801cda0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801cda4:	2b00      	cmp	r3, #0
 801cda6:	d05b      	beq.n	801ce60 <__multiply+0x148>
 801cda8:	6106      	str	r6, [r0, #16]
 801cdaa:	b005      	add	sp, #20
 801cdac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cdb0:	f843 2b04 	str.w	r2, [r3], #4
 801cdb4:	e7d8      	b.n	801cd68 <__multiply+0x50>
 801cdb6:	f8b3 a000 	ldrh.w	sl, [r3]
 801cdba:	f1ba 0f00 	cmp.w	sl, #0
 801cdbe:	d024      	beq.n	801ce0a <__multiply+0xf2>
 801cdc0:	f104 0e14 	add.w	lr, r4, #20
 801cdc4:	46a9      	mov	r9, r5
 801cdc6:	f04f 0c00 	mov.w	ip, #0
 801cdca:	f85e 2b04 	ldr.w	r2, [lr], #4
 801cdce:	f8d9 1000 	ldr.w	r1, [r9]
 801cdd2:	fa1f fb82 	uxth.w	fp, r2
 801cdd6:	b289      	uxth	r1, r1
 801cdd8:	fb0a 110b 	mla	r1, sl, fp, r1
 801cddc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801cde0:	f8d9 2000 	ldr.w	r2, [r9]
 801cde4:	4461      	add	r1, ip
 801cde6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801cdea:	fb0a c20b 	mla	r2, sl, fp, ip
 801cdee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801cdf2:	b289      	uxth	r1, r1
 801cdf4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801cdf8:	4577      	cmp	r7, lr
 801cdfa:	f849 1b04 	str.w	r1, [r9], #4
 801cdfe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801ce02:	d8e2      	bhi.n	801cdca <__multiply+0xb2>
 801ce04:	9a01      	ldr	r2, [sp, #4]
 801ce06:	f845 c002 	str.w	ip, [r5, r2]
 801ce0a:	9a03      	ldr	r2, [sp, #12]
 801ce0c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801ce10:	3304      	adds	r3, #4
 801ce12:	f1b9 0f00 	cmp.w	r9, #0
 801ce16:	d021      	beq.n	801ce5c <__multiply+0x144>
 801ce18:	6829      	ldr	r1, [r5, #0]
 801ce1a:	f104 0c14 	add.w	ip, r4, #20
 801ce1e:	46ae      	mov	lr, r5
 801ce20:	f04f 0a00 	mov.w	sl, #0
 801ce24:	f8bc b000 	ldrh.w	fp, [ip]
 801ce28:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801ce2c:	fb09 220b 	mla	r2, r9, fp, r2
 801ce30:	4452      	add	r2, sl
 801ce32:	b289      	uxth	r1, r1
 801ce34:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801ce38:	f84e 1b04 	str.w	r1, [lr], #4
 801ce3c:	f85c 1b04 	ldr.w	r1, [ip], #4
 801ce40:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801ce44:	f8be 1000 	ldrh.w	r1, [lr]
 801ce48:	fb09 110a 	mla	r1, r9, sl, r1
 801ce4c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801ce50:	4567      	cmp	r7, ip
 801ce52:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801ce56:	d8e5      	bhi.n	801ce24 <__multiply+0x10c>
 801ce58:	9a01      	ldr	r2, [sp, #4]
 801ce5a:	50a9      	str	r1, [r5, r2]
 801ce5c:	3504      	adds	r5, #4
 801ce5e:	e799      	b.n	801cd94 <__multiply+0x7c>
 801ce60:	3e01      	subs	r6, #1
 801ce62:	e79b      	b.n	801cd9c <__multiply+0x84>
 801ce64:	080215cd 	.word	0x080215cd
 801ce68:	080215de 	.word	0x080215de

0801ce6c <__pow5mult>:
 801ce6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ce70:	4615      	mov	r5, r2
 801ce72:	f012 0203 	ands.w	r2, r2, #3
 801ce76:	4606      	mov	r6, r0
 801ce78:	460f      	mov	r7, r1
 801ce7a:	d007      	beq.n	801ce8c <__pow5mult+0x20>
 801ce7c:	4c25      	ldr	r4, [pc, #148]	; (801cf14 <__pow5mult+0xa8>)
 801ce7e:	3a01      	subs	r2, #1
 801ce80:	2300      	movs	r3, #0
 801ce82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ce86:	f7ff fe53 	bl	801cb30 <__multadd>
 801ce8a:	4607      	mov	r7, r0
 801ce8c:	10ad      	asrs	r5, r5, #2
 801ce8e:	d03d      	beq.n	801cf0c <__pow5mult+0xa0>
 801ce90:	69f4      	ldr	r4, [r6, #28]
 801ce92:	b97c      	cbnz	r4, 801ceb4 <__pow5mult+0x48>
 801ce94:	2010      	movs	r0, #16
 801ce96:	f7ff fd35 	bl	801c904 <malloc>
 801ce9a:	4602      	mov	r2, r0
 801ce9c:	61f0      	str	r0, [r6, #28]
 801ce9e:	b928      	cbnz	r0, 801ceac <__pow5mult+0x40>
 801cea0:	4b1d      	ldr	r3, [pc, #116]	; (801cf18 <__pow5mult+0xac>)
 801cea2:	481e      	ldr	r0, [pc, #120]	; (801cf1c <__pow5mult+0xb0>)
 801cea4:	f240 11b3 	movw	r1, #435	; 0x1b3
 801cea8:	f001 fd6a 	bl	801e980 <__assert_func>
 801ceac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801ceb0:	6004      	str	r4, [r0, #0]
 801ceb2:	60c4      	str	r4, [r0, #12]
 801ceb4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801ceb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801cebc:	b94c      	cbnz	r4, 801ced2 <__pow5mult+0x66>
 801cebe:	f240 2171 	movw	r1, #625	; 0x271
 801cec2:	4630      	mov	r0, r6
 801cec4:	f7ff ff12 	bl	801ccec <__i2b>
 801cec8:	2300      	movs	r3, #0
 801ceca:	f8c8 0008 	str.w	r0, [r8, #8]
 801cece:	4604      	mov	r4, r0
 801ced0:	6003      	str	r3, [r0, #0]
 801ced2:	f04f 0900 	mov.w	r9, #0
 801ced6:	07eb      	lsls	r3, r5, #31
 801ced8:	d50a      	bpl.n	801cef0 <__pow5mult+0x84>
 801ceda:	4639      	mov	r1, r7
 801cedc:	4622      	mov	r2, r4
 801cede:	4630      	mov	r0, r6
 801cee0:	f7ff ff1a 	bl	801cd18 <__multiply>
 801cee4:	4639      	mov	r1, r7
 801cee6:	4680      	mov	r8, r0
 801cee8:	4630      	mov	r0, r6
 801ceea:	f7ff fdff 	bl	801caec <_Bfree>
 801ceee:	4647      	mov	r7, r8
 801cef0:	106d      	asrs	r5, r5, #1
 801cef2:	d00b      	beq.n	801cf0c <__pow5mult+0xa0>
 801cef4:	6820      	ldr	r0, [r4, #0]
 801cef6:	b938      	cbnz	r0, 801cf08 <__pow5mult+0x9c>
 801cef8:	4622      	mov	r2, r4
 801cefa:	4621      	mov	r1, r4
 801cefc:	4630      	mov	r0, r6
 801cefe:	f7ff ff0b 	bl	801cd18 <__multiply>
 801cf02:	6020      	str	r0, [r4, #0]
 801cf04:	f8c0 9000 	str.w	r9, [r0]
 801cf08:	4604      	mov	r4, r0
 801cf0a:	e7e4      	b.n	801ced6 <__pow5mult+0x6a>
 801cf0c:	4638      	mov	r0, r7
 801cf0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cf12:	bf00      	nop
 801cf14:	08021728 	.word	0x08021728
 801cf18:	0802155e 	.word	0x0802155e
 801cf1c:	080215de 	.word	0x080215de

0801cf20 <__lshift>:
 801cf20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cf24:	460c      	mov	r4, r1
 801cf26:	6849      	ldr	r1, [r1, #4]
 801cf28:	6923      	ldr	r3, [r4, #16]
 801cf2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801cf2e:	68a3      	ldr	r3, [r4, #8]
 801cf30:	4607      	mov	r7, r0
 801cf32:	4691      	mov	r9, r2
 801cf34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801cf38:	f108 0601 	add.w	r6, r8, #1
 801cf3c:	42b3      	cmp	r3, r6
 801cf3e:	db0b      	blt.n	801cf58 <__lshift+0x38>
 801cf40:	4638      	mov	r0, r7
 801cf42:	f7ff fd93 	bl	801ca6c <_Balloc>
 801cf46:	4605      	mov	r5, r0
 801cf48:	b948      	cbnz	r0, 801cf5e <__lshift+0x3e>
 801cf4a:	4602      	mov	r2, r0
 801cf4c:	4b28      	ldr	r3, [pc, #160]	; (801cff0 <__lshift+0xd0>)
 801cf4e:	4829      	ldr	r0, [pc, #164]	; (801cff4 <__lshift+0xd4>)
 801cf50:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801cf54:	f001 fd14 	bl	801e980 <__assert_func>
 801cf58:	3101      	adds	r1, #1
 801cf5a:	005b      	lsls	r3, r3, #1
 801cf5c:	e7ee      	b.n	801cf3c <__lshift+0x1c>
 801cf5e:	2300      	movs	r3, #0
 801cf60:	f100 0114 	add.w	r1, r0, #20
 801cf64:	f100 0210 	add.w	r2, r0, #16
 801cf68:	4618      	mov	r0, r3
 801cf6a:	4553      	cmp	r3, sl
 801cf6c:	db33      	blt.n	801cfd6 <__lshift+0xb6>
 801cf6e:	6920      	ldr	r0, [r4, #16]
 801cf70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801cf74:	f104 0314 	add.w	r3, r4, #20
 801cf78:	f019 091f 	ands.w	r9, r9, #31
 801cf7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801cf80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801cf84:	d02b      	beq.n	801cfde <__lshift+0xbe>
 801cf86:	f1c9 0e20 	rsb	lr, r9, #32
 801cf8a:	468a      	mov	sl, r1
 801cf8c:	2200      	movs	r2, #0
 801cf8e:	6818      	ldr	r0, [r3, #0]
 801cf90:	fa00 f009 	lsl.w	r0, r0, r9
 801cf94:	4310      	orrs	r0, r2
 801cf96:	f84a 0b04 	str.w	r0, [sl], #4
 801cf9a:	f853 2b04 	ldr.w	r2, [r3], #4
 801cf9e:	459c      	cmp	ip, r3
 801cfa0:	fa22 f20e 	lsr.w	r2, r2, lr
 801cfa4:	d8f3      	bhi.n	801cf8e <__lshift+0x6e>
 801cfa6:	ebac 0304 	sub.w	r3, ip, r4
 801cfaa:	3b15      	subs	r3, #21
 801cfac:	f023 0303 	bic.w	r3, r3, #3
 801cfb0:	3304      	adds	r3, #4
 801cfb2:	f104 0015 	add.w	r0, r4, #21
 801cfb6:	4584      	cmp	ip, r0
 801cfb8:	bf38      	it	cc
 801cfba:	2304      	movcc	r3, #4
 801cfbc:	50ca      	str	r2, [r1, r3]
 801cfbe:	b10a      	cbz	r2, 801cfc4 <__lshift+0xa4>
 801cfc0:	f108 0602 	add.w	r6, r8, #2
 801cfc4:	3e01      	subs	r6, #1
 801cfc6:	4638      	mov	r0, r7
 801cfc8:	612e      	str	r6, [r5, #16]
 801cfca:	4621      	mov	r1, r4
 801cfcc:	f7ff fd8e 	bl	801caec <_Bfree>
 801cfd0:	4628      	mov	r0, r5
 801cfd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cfd6:	f842 0f04 	str.w	r0, [r2, #4]!
 801cfda:	3301      	adds	r3, #1
 801cfdc:	e7c5      	b.n	801cf6a <__lshift+0x4a>
 801cfde:	3904      	subs	r1, #4
 801cfe0:	f853 2b04 	ldr.w	r2, [r3], #4
 801cfe4:	f841 2f04 	str.w	r2, [r1, #4]!
 801cfe8:	459c      	cmp	ip, r3
 801cfea:	d8f9      	bhi.n	801cfe0 <__lshift+0xc0>
 801cfec:	e7ea      	b.n	801cfc4 <__lshift+0xa4>
 801cfee:	bf00      	nop
 801cff0:	080215cd 	.word	0x080215cd
 801cff4:	080215de 	.word	0x080215de

0801cff8 <__mcmp>:
 801cff8:	b530      	push	{r4, r5, lr}
 801cffa:	6902      	ldr	r2, [r0, #16]
 801cffc:	690c      	ldr	r4, [r1, #16]
 801cffe:	1b12      	subs	r2, r2, r4
 801d000:	d10e      	bne.n	801d020 <__mcmp+0x28>
 801d002:	f100 0314 	add.w	r3, r0, #20
 801d006:	3114      	adds	r1, #20
 801d008:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801d00c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801d010:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801d014:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801d018:	42a5      	cmp	r5, r4
 801d01a:	d003      	beq.n	801d024 <__mcmp+0x2c>
 801d01c:	d305      	bcc.n	801d02a <__mcmp+0x32>
 801d01e:	2201      	movs	r2, #1
 801d020:	4610      	mov	r0, r2
 801d022:	bd30      	pop	{r4, r5, pc}
 801d024:	4283      	cmp	r3, r0
 801d026:	d3f3      	bcc.n	801d010 <__mcmp+0x18>
 801d028:	e7fa      	b.n	801d020 <__mcmp+0x28>
 801d02a:	f04f 32ff 	mov.w	r2, #4294967295
 801d02e:	e7f7      	b.n	801d020 <__mcmp+0x28>

0801d030 <__mdiff>:
 801d030:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d034:	460c      	mov	r4, r1
 801d036:	4606      	mov	r6, r0
 801d038:	4611      	mov	r1, r2
 801d03a:	4620      	mov	r0, r4
 801d03c:	4690      	mov	r8, r2
 801d03e:	f7ff ffdb 	bl	801cff8 <__mcmp>
 801d042:	1e05      	subs	r5, r0, #0
 801d044:	d110      	bne.n	801d068 <__mdiff+0x38>
 801d046:	4629      	mov	r1, r5
 801d048:	4630      	mov	r0, r6
 801d04a:	f7ff fd0f 	bl	801ca6c <_Balloc>
 801d04e:	b930      	cbnz	r0, 801d05e <__mdiff+0x2e>
 801d050:	4b3a      	ldr	r3, [pc, #232]	; (801d13c <__mdiff+0x10c>)
 801d052:	4602      	mov	r2, r0
 801d054:	f240 2137 	movw	r1, #567	; 0x237
 801d058:	4839      	ldr	r0, [pc, #228]	; (801d140 <__mdiff+0x110>)
 801d05a:	f001 fc91 	bl	801e980 <__assert_func>
 801d05e:	2301      	movs	r3, #1
 801d060:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d064:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d068:	bfa4      	itt	ge
 801d06a:	4643      	movge	r3, r8
 801d06c:	46a0      	movge	r8, r4
 801d06e:	4630      	mov	r0, r6
 801d070:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801d074:	bfa6      	itte	ge
 801d076:	461c      	movge	r4, r3
 801d078:	2500      	movge	r5, #0
 801d07a:	2501      	movlt	r5, #1
 801d07c:	f7ff fcf6 	bl	801ca6c <_Balloc>
 801d080:	b920      	cbnz	r0, 801d08c <__mdiff+0x5c>
 801d082:	4b2e      	ldr	r3, [pc, #184]	; (801d13c <__mdiff+0x10c>)
 801d084:	4602      	mov	r2, r0
 801d086:	f240 2145 	movw	r1, #581	; 0x245
 801d08a:	e7e5      	b.n	801d058 <__mdiff+0x28>
 801d08c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801d090:	6926      	ldr	r6, [r4, #16]
 801d092:	60c5      	str	r5, [r0, #12]
 801d094:	f104 0914 	add.w	r9, r4, #20
 801d098:	f108 0514 	add.w	r5, r8, #20
 801d09c:	f100 0e14 	add.w	lr, r0, #20
 801d0a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801d0a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801d0a8:	f108 0210 	add.w	r2, r8, #16
 801d0ac:	46f2      	mov	sl, lr
 801d0ae:	2100      	movs	r1, #0
 801d0b0:	f859 3b04 	ldr.w	r3, [r9], #4
 801d0b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801d0b8:	fa11 f88b 	uxtah	r8, r1, fp
 801d0bc:	b299      	uxth	r1, r3
 801d0be:	0c1b      	lsrs	r3, r3, #16
 801d0c0:	eba8 0801 	sub.w	r8, r8, r1
 801d0c4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801d0c8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801d0cc:	fa1f f888 	uxth.w	r8, r8
 801d0d0:	1419      	asrs	r1, r3, #16
 801d0d2:	454e      	cmp	r6, r9
 801d0d4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801d0d8:	f84a 3b04 	str.w	r3, [sl], #4
 801d0dc:	d8e8      	bhi.n	801d0b0 <__mdiff+0x80>
 801d0de:	1b33      	subs	r3, r6, r4
 801d0e0:	3b15      	subs	r3, #21
 801d0e2:	f023 0303 	bic.w	r3, r3, #3
 801d0e6:	3304      	adds	r3, #4
 801d0e8:	3415      	adds	r4, #21
 801d0ea:	42a6      	cmp	r6, r4
 801d0ec:	bf38      	it	cc
 801d0ee:	2304      	movcc	r3, #4
 801d0f0:	441d      	add	r5, r3
 801d0f2:	4473      	add	r3, lr
 801d0f4:	469e      	mov	lr, r3
 801d0f6:	462e      	mov	r6, r5
 801d0f8:	4566      	cmp	r6, ip
 801d0fa:	d30e      	bcc.n	801d11a <__mdiff+0xea>
 801d0fc:	f10c 0203 	add.w	r2, ip, #3
 801d100:	1b52      	subs	r2, r2, r5
 801d102:	f022 0203 	bic.w	r2, r2, #3
 801d106:	3d03      	subs	r5, #3
 801d108:	45ac      	cmp	ip, r5
 801d10a:	bf38      	it	cc
 801d10c:	2200      	movcc	r2, #0
 801d10e:	4413      	add	r3, r2
 801d110:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801d114:	b17a      	cbz	r2, 801d136 <__mdiff+0x106>
 801d116:	6107      	str	r7, [r0, #16]
 801d118:	e7a4      	b.n	801d064 <__mdiff+0x34>
 801d11a:	f856 8b04 	ldr.w	r8, [r6], #4
 801d11e:	fa11 f288 	uxtah	r2, r1, r8
 801d122:	1414      	asrs	r4, r2, #16
 801d124:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801d128:	b292      	uxth	r2, r2
 801d12a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801d12e:	f84e 2b04 	str.w	r2, [lr], #4
 801d132:	1421      	asrs	r1, r4, #16
 801d134:	e7e0      	b.n	801d0f8 <__mdiff+0xc8>
 801d136:	3f01      	subs	r7, #1
 801d138:	e7ea      	b.n	801d110 <__mdiff+0xe0>
 801d13a:	bf00      	nop
 801d13c:	080215cd 	.word	0x080215cd
 801d140:	080215de 	.word	0x080215de

0801d144 <__ulp>:
 801d144:	b082      	sub	sp, #8
 801d146:	ed8d 0b00 	vstr	d0, [sp]
 801d14a:	9a01      	ldr	r2, [sp, #4]
 801d14c:	4b0f      	ldr	r3, [pc, #60]	; (801d18c <__ulp+0x48>)
 801d14e:	4013      	ands	r3, r2
 801d150:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801d154:	2b00      	cmp	r3, #0
 801d156:	dc08      	bgt.n	801d16a <__ulp+0x26>
 801d158:	425b      	negs	r3, r3
 801d15a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801d15e:	ea4f 5223 	mov.w	r2, r3, asr #20
 801d162:	da04      	bge.n	801d16e <__ulp+0x2a>
 801d164:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801d168:	4113      	asrs	r3, r2
 801d16a:	2200      	movs	r2, #0
 801d16c:	e008      	b.n	801d180 <__ulp+0x3c>
 801d16e:	f1a2 0314 	sub.w	r3, r2, #20
 801d172:	2b1e      	cmp	r3, #30
 801d174:	bfda      	itte	le
 801d176:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801d17a:	40da      	lsrle	r2, r3
 801d17c:	2201      	movgt	r2, #1
 801d17e:	2300      	movs	r3, #0
 801d180:	4619      	mov	r1, r3
 801d182:	4610      	mov	r0, r2
 801d184:	ec41 0b10 	vmov	d0, r0, r1
 801d188:	b002      	add	sp, #8
 801d18a:	4770      	bx	lr
 801d18c:	7ff00000 	.word	0x7ff00000

0801d190 <__b2d>:
 801d190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d194:	6906      	ldr	r6, [r0, #16]
 801d196:	f100 0814 	add.w	r8, r0, #20
 801d19a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801d19e:	1f37      	subs	r7, r6, #4
 801d1a0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801d1a4:	4610      	mov	r0, r2
 801d1a6:	f7ff fd53 	bl	801cc50 <__hi0bits>
 801d1aa:	f1c0 0320 	rsb	r3, r0, #32
 801d1ae:	280a      	cmp	r0, #10
 801d1b0:	600b      	str	r3, [r1, #0]
 801d1b2:	491b      	ldr	r1, [pc, #108]	; (801d220 <__b2d+0x90>)
 801d1b4:	dc15      	bgt.n	801d1e2 <__b2d+0x52>
 801d1b6:	f1c0 0c0b 	rsb	ip, r0, #11
 801d1ba:	fa22 f30c 	lsr.w	r3, r2, ip
 801d1be:	45b8      	cmp	r8, r7
 801d1c0:	ea43 0501 	orr.w	r5, r3, r1
 801d1c4:	bf34      	ite	cc
 801d1c6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d1ca:	2300      	movcs	r3, #0
 801d1cc:	3015      	adds	r0, #21
 801d1ce:	fa02 f000 	lsl.w	r0, r2, r0
 801d1d2:	fa23 f30c 	lsr.w	r3, r3, ip
 801d1d6:	4303      	orrs	r3, r0
 801d1d8:	461c      	mov	r4, r3
 801d1da:	ec45 4b10 	vmov	d0, r4, r5
 801d1de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d1e2:	45b8      	cmp	r8, r7
 801d1e4:	bf3a      	itte	cc
 801d1e6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d1ea:	f1a6 0708 	subcc.w	r7, r6, #8
 801d1ee:	2300      	movcs	r3, #0
 801d1f0:	380b      	subs	r0, #11
 801d1f2:	d012      	beq.n	801d21a <__b2d+0x8a>
 801d1f4:	f1c0 0120 	rsb	r1, r0, #32
 801d1f8:	fa23 f401 	lsr.w	r4, r3, r1
 801d1fc:	4082      	lsls	r2, r0
 801d1fe:	4322      	orrs	r2, r4
 801d200:	4547      	cmp	r7, r8
 801d202:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801d206:	bf8c      	ite	hi
 801d208:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801d20c:	2200      	movls	r2, #0
 801d20e:	4083      	lsls	r3, r0
 801d210:	40ca      	lsrs	r2, r1
 801d212:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801d216:	4313      	orrs	r3, r2
 801d218:	e7de      	b.n	801d1d8 <__b2d+0x48>
 801d21a:	ea42 0501 	orr.w	r5, r2, r1
 801d21e:	e7db      	b.n	801d1d8 <__b2d+0x48>
 801d220:	3ff00000 	.word	0x3ff00000

0801d224 <__d2b>:
 801d224:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d228:	460f      	mov	r7, r1
 801d22a:	2101      	movs	r1, #1
 801d22c:	ec59 8b10 	vmov	r8, r9, d0
 801d230:	4616      	mov	r6, r2
 801d232:	f7ff fc1b 	bl	801ca6c <_Balloc>
 801d236:	4604      	mov	r4, r0
 801d238:	b930      	cbnz	r0, 801d248 <__d2b+0x24>
 801d23a:	4602      	mov	r2, r0
 801d23c:	4b24      	ldr	r3, [pc, #144]	; (801d2d0 <__d2b+0xac>)
 801d23e:	4825      	ldr	r0, [pc, #148]	; (801d2d4 <__d2b+0xb0>)
 801d240:	f240 310f 	movw	r1, #783	; 0x30f
 801d244:	f001 fb9c 	bl	801e980 <__assert_func>
 801d248:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801d24c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d250:	bb2d      	cbnz	r5, 801d29e <__d2b+0x7a>
 801d252:	9301      	str	r3, [sp, #4]
 801d254:	f1b8 0300 	subs.w	r3, r8, #0
 801d258:	d026      	beq.n	801d2a8 <__d2b+0x84>
 801d25a:	4668      	mov	r0, sp
 801d25c:	9300      	str	r3, [sp, #0]
 801d25e:	f7ff fd17 	bl	801cc90 <__lo0bits>
 801d262:	e9dd 1200 	ldrd	r1, r2, [sp]
 801d266:	b1e8      	cbz	r0, 801d2a4 <__d2b+0x80>
 801d268:	f1c0 0320 	rsb	r3, r0, #32
 801d26c:	fa02 f303 	lsl.w	r3, r2, r3
 801d270:	430b      	orrs	r3, r1
 801d272:	40c2      	lsrs	r2, r0
 801d274:	6163      	str	r3, [r4, #20]
 801d276:	9201      	str	r2, [sp, #4]
 801d278:	9b01      	ldr	r3, [sp, #4]
 801d27a:	61a3      	str	r3, [r4, #24]
 801d27c:	2b00      	cmp	r3, #0
 801d27e:	bf14      	ite	ne
 801d280:	2202      	movne	r2, #2
 801d282:	2201      	moveq	r2, #1
 801d284:	6122      	str	r2, [r4, #16]
 801d286:	b1bd      	cbz	r5, 801d2b8 <__d2b+0x94>
 801d288:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801d28c:	4405      	add	r5, r0
 801d28e:	603d      	str	r5, [r7, #0]
 801d290:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d294:	6030      	str	r0, [r6, #0]
 801d296:	4620      	mov	r0, r4
 801d298:	b003      	add	sp, #12
 801d29a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d29e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d2a2:	e7d6      	b.n	801d252 <__d2b+0x2e>
 801d2a4:	6161      	str	r1, [r4, #20]
 801d2a6:	e7e7      	b.n	801d278 <__d2b+0x54>
 801d2a8:	a801      	add	r0, sp, #4
 801d2aa:	f7ff fcf1 	bl	801cc90 <__lo0bits>
 801d2ae:	9b01      	ldr	r3, [sp, #4]
 801d2b0:	6163      	str	r3, [r4, #20]
 801d2b2:	3020      	adds	r0, #32
 801d2b4:	2201      	movs	r2, #1
 801d2b6:	e7e5      	b.n	801d284 <__d2b+0x60>
 801d2b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d2bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d2c0:	6038      	str	r0, [r7, #0]
 801d2c2:	6918      	ldr	r0, [r3, #16]
 801d2c4:	f7ff fcc4 	bl	801cc50 <__hi0bits>
 801d2c8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d2cc:	e7e2      	b.n	801d294 <__d2b+0x70>
 801d2ce:	bf00      	nop
 801d2d0:	080215cd 	.word	0x080215cd
 801d2d4:	080215de 	.word	0x080215de

0801d2d8 <__ratio>:
 801d2d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2dc:	4688      	mov	r8, r1
 801d2de:	4669      	mov	r1, sp
 801d2e0:	4681      	mov	r9, r0
 801d2e2:	f7ff ff55 	bl	801d190 <__b2d>
 801d2e6:	a901      	add	r1, sp, #4
 801d2e8:	4640      	mov	r0, r8
 801d2ea:	ec55 4b10 	vmov	r4, r5, d0
 801d2ee:	f7ff ff4f 	bl	801d190 <__b2d>
 801d2f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d2f6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801d2fa:	eba3 0c02 	sub.w	ip, r3, r2
 801d2fe:	e9dd 3200 	ldrd	r3, r2, [sp]
 801d302:	1a9b      	subs	r3, r3, r2
 801d304:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801d308:	ec51 0b10 	vmov	r0, r1, d0
 801d30c:	2b00      	cmp	r3, #0
 801d30e:	bfd6      	itet	le
 801d310:	460a      	movle	r2, r1
 801d312:	462a      	movgt	r2, r5
 801d314:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d318:	468b      	mov	fp, r1
 801d31a:	462f      	mov	r7, r5
 801d31c:	bfd4      	ite	le
 801d31e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801d322:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801d326:	4620      	mov	r0, r4
 801d328:	ee10 2a10 	vmov	r2, s0
 801d32c:	465b      	mov	r3, fp
 801d32e:	4639      	mov	r1, r7
 801d330:	f7eb fc9c 	bl	8008c6c <__aeabi_ddiv>
 801d334:	ec41 0b10 	vmov	d0, r0, r1
 801d338:	b003      	add	sp, #12
 801d33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d33e <__copybits>:
 801d33e:	3901      	subs	r1, #1
 801d340:	b570      	push	{r4, r5, r6, lr}
 801d342:	1149      	asrs	r1, r1, #5
 801d344:	6914      	ldr	r4, [r2, #16]
 801d346:	3101      	adds	r1, #1
 801d348:	f102 0314 	add.w	r3, r2, #20
 801d34c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d350:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d354:	1f05      	subs	r5, r0, #4
 801d356:	42a3      	cmp	r3, r4
 801d358:	d30c      	bcc.n	801d374 <__copybits+0x36>
 801d35a:	1aa3      	subs	r3, r4, r2
 801d35c:	3b11      	subs	r3, #17
 801d35e:	f023 0303 	bic.w	r3, r3, #3
 801d362:	3211      	adds	r2, #17
 801d364:	42a2      	cmp	r2, r4
 801d366:	bf88      	it	hi
 801d368:	2300      	movhi	r3, #0
 801d36a:	4418      	add	r0, r3
 801d36c:	2300      	movs	r3, #0
 801d36e:	4288      	cmp	r0, r1
 801d370:	d305      	bcc.n	801d37e <__copybits+0x40>
 801d372:	bd70      	pop	{r4, r5, r6, pc}
 801d374:	f853 6b04 	ldr.w	r6, [r3], #4
 801d378:	f845 6f04 	str.w	r6, [r5, #4]!
 801d37c:	e7eb      	b.n	801d356 <__copybits+0x18>
 801d37e:	f840 3b04 	str.w	r3, [r0], #4
 801d382:	e7f4      	b.n	801d36e <__copybits+0x30>

0801d384 <__any_on>:
 801d384:	f100 0214 	add.w	r2, r0, #20
 801d388:	6900      	ldr	r0, [r0, #16]
 801d38a:	114b      	asrs	r3, r1, #5
 801d38c:	4298      	cmp	r0, r3
 801d38e:	b510      	push	{r4, lr}
 801d390:	db11      	blt.n	801d3b6 <__any_on+0x32>
 801d392:	dd0a      	ble.n	801d3aa <__any_on+0x26>
 801d394:	f011 011f 	ands.w	r1, r1, #31
 801d398:	d007      	beq.n	801d3aa <__any_on+0x26>
 801d39a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d39e:	fa24 f001 	lsr.w	r0, r4, r1
 801d3a2:	fa00 f101 	lsl.w	r1, r0, r1
 801d3a6:	428c      	cmp	r4, r1
 801d3a8:	d10b      	bne.n	801d3c2 <__any_on+0x3e>
 801d3aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d3ae:	4293      	cmp	r3, r2
 801d3b0:	d803      	bhi.n	801d3ba <__any_on+0x36>
 801d3b2:	2000      	movs	r0, #0
 801d3b4:	bd10      	pop	{r4, pc}
 801d3b6:	4603      	mov	r3, r0
 801d3b8:	e7f7      	b.n	801d3aa <__any_on+0x26>
 801d3ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d3be:	2900      	cmp	r1, #0
 801d3c0:	d0f5      	beq.n	801d3ae <__any_on+0x2a>
 801d3c2:	2001      	movs	r0, #1
 801d3c4:	e7f6      	b.n	801d3b4 <__any_on+0x30>

0801d3c6 <sulp>:
 801d3c6:	b570      	push	{r4, r5, r6, lr}
 801d3c8:	4604      	mov	r4, r0
 801d3ca:	460d      	mov	r5, r1
 801d3cc:	ec45 4b10 	vmov	d0, r4, r5
 801d3d0:	4616      	mov	r6, r2
 801d3d2:	f7ff feb7 	bl	801d144 <__ulp>
 801d3d6:	ec51 0b10 	vmov	r0, r1, d0
 801d3da:	b17e      	cbz	r6, 801d3fc <sulp+0x36>
 801d3dc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801d3e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801d3e4:	2b00      	cmp	r3, #0
 801d3e6:	dd09      	ble.n	801d3fc <sulp+0x36>
 801d3e8:	051b      	lsls	r3, r3, #20
 801d3ea:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801d3ee:	2400      	movs	r4, #0
 801d3f0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801d3f4:	4622      	mov	r2, r4
 801d3f6:	462b      	mov	r3, r5
 801d3f8:	f7eb fb0e 	bl	8008a18 <__aeabi_dmul>
 801d3fc:	bd70      	pop	{r4, r5, r6, pc}
	...

0801d400 <_strtod_l>:
 801d400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d404:	ed2d 8b02 	vpush	{d8}
 801d408:	b09b      	sub	sp, #108	; 0x6c
 801d40a:	4604      	mov	r4, r0
 801d40c:	9213      	str	r2, [sp, #76]	; 0x4c
 801d40e:	2200      	movs	r2, #0
 801d410:	9216      	str	r2, [sp, #88]	; 0x58
 801d412:	460d      	mov	r5, r1
 801d414:	f04f 0800 	mov.w	r8, #0
 801d418:	f04f 0900 	mov.w	r9, #0
 801d41c:	460a      	mov	r2, r1
 801d41e:	9215      	str	r2, [sp, #84]	; 0x54
 801d420:	7811      	ldrb	r1, [r2, #0]
 801d422:	292b      	cmp	r1, #43	; 0x2b
 801d424:	d04c      	beq.n	801d4c0 <_strtod_l+0xc0>
 801d426:	d83a      	bhi.n	801d49e <_strtod_l+0x9e>
 801d428:	290d      	cmp	r1, #13
 801d42a:	d834      	bhi.n	801d496 <_strtod_l+0x96>
 801d42c:	2908      	cmp	r1, #8
 801d42e:	d834      	bhi.n	801d49a <_strtod_l+0x9a>
 801d430:	2900      	cmp	r1, #0
 801d432:	d03d      	beq.n	801d4b0 <_strtod_l+0xb0>
 801d434:	2200      	movs	r2, #0
 801d436:	920a      	str	r2, [sp, #40]	; 0x28
 801d438:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801d43a:	7832      	ldrb	r2, [r6, #0]
 801d43c:	2a30      	cmp	r2, #48	; 0x30
 801d43e:	f040 80b4 	bne.w	801d5aa <_strtod_l+0x1aa>
 801d442:	7872      	ldrb	r2, [r6, #1]
 801d444:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 801d448:	2a58      	cmp	r2, #88	; 0x58
 801d44a:	d170      	bne.n	801d52e <_strtod_l+0x12e>
 801d44c:	9302      	str	r3, [sp, #8]
 801d44e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d450:	9301      	str	r3, [sp, #4]
 801d452:	ab16      	add	r3, sp, #88	; 0x58
 801d454:	9300      	str	r3, [sp, #0]
 801d456:	4a8e      	ldr	r2, [pc, #568]	; (801d690 <_strtod_l+0x290>)
 801d458:	ab17      	add	r3, sp, #92	; 0x5c
 801d45a:	a915      	add	r1, sp, #84	; 0x54
 801d45c:	4620      	mov	r0, r4
 801d45e:	f001 fb2b 	bl	801eab8 <__gethex>
 801d462:	f010 070f 	ands.w	r7, r0, #15
 801d466:	4605      	mov	r5, r0
 801d468:	d005      	beq.n	801d476 <_strtod_l+0x76>
 801d46a:	2f06      	cmp	r7, #6
 801d46c:	d12a      	bne.n	801d4c4 <_strtod_l+0xc4>
 801d46e:	3601      	adds	r6, #1
 801d470:	2300      	movs	r3, #0
 801d472:	9615      	str	r6, [sp, #84]	; 0x54
 801d474:	930a      	str	r3, [sp, #40]	; 0x28
 801d476:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801d478:	2b00      	cmp	r3, #0
 801d47a:	f040 857f 	bne.w	801df7c <_strtod_l+0xb7c>
 801d47e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d480:	b1db      	cbz	r3, 801d4ba <_strtod_l+0xba>
 801d482:	4642      	mov	r2, r8
 801d484:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801d488:	ec43 2b10 	vmov	d0, r2, r3
 801d48c:	b01b      	add	sp, #108	; 0x6c
 801d48e:	ecbd 8b02 	vpop	{d8}
 801d492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d496:	2920      	cmp	r1, #32
 801d498:	d1cc      	bne.n	801d434 <_strtod_l+0x34>
 801d49a:	3201      	adds	r2, #1
 801d49c:	e7bf      	b.n	801d41e <_strtod_l+0x1e>
 801d49e:	292d      	cmp	r1, #45	; 0x2d
 801d4a0:	d1c8      	bne.n	801d434 <_strtod_l+0x34>
 801d4a2:	2101      	movs	r1, #1
 801d4a4:	910a      	str	r1, [sp, #40]	; 0x28
 801d4a6:	1c51      	adds	r1, r2, #1
 801d4a8:	9115      	str	r1, [sp, #84]	; 0x54
 801d4aa:	7852      	ldrb	r2, [r2, #1]
 801d4ac:	2a00      	cmp	r2, #0
 801d4ae:	d1c3      	bne.n	801d438 <_strtod_l+0x38>
 801d4b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801d4b2:	9515      	str	r5, [sp, #84]	; 0x54
 801d4b4:	2b00      	cmp	r3, #0
 801d4b6:	f040 855f 	bne.w	801df78 <_strtod_l+0xb78>
 801d4ba:	4642      	mov	r2, r8
 801d4bc:	464b      	mov	r3, r9
 801d4be:	e7e3      	b.n	801d488 <_strtod_l+0x88>
 801d4c0:	2100      	movs	r1, #0
 801d4c2:	e7ef      	b.n	801d4a4 <_strtod_l+0xa4>
 801d4c4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801d4c6:	b13a      	cbz	r2, 801d4d8 <_strtod_l+0xd8>
 801d4c8:	2135      	movs	r1, #53	; 0x35
 801d4ca:	a818      	add	r0, sp, #96	; 0x60
 801d4cc:	f7ff ff37 	bl	801d33e <__copybits>
 801d4d0:	9916      	ldr	r1, [sp, #88]	; 0x58
 801d4d2:	4620      	mov	r0, r4
 801d4d4:	f7ff fb0a 	bl	801caec <_Bfree>
 801d4d8:	3f01      	subs	r7, #1
 801d4da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801d4dc:	2f04      	cmp	r7, #4
 801d4de:	d806      	bhi.n	801d4ee <_strtod_l+0xee>
 801d4e0:	e8df f007 	tbb	[pc, r7]
 801d4e4:	201d0314 	.word	0x201d0314
 801d4e8:	14          	.byte	0x14
 801d4e9:	00          	.byte	0x00
 801d4ea:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801d4ee:	05e9      	lsls	r1, r5, #23
 801d4f0:	bf48      	it	mi
 801d4f2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801d4f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801d4fa:	0d1b      	lsrs	r3, r3, #20
 801d4fc:	051b      	lsls	r3, r3, #20
 801d4fe:	2b00      	cmp	r3, #0
 801d500:	d1b9      	bne.n	801d476 <_strtod_l+0x76>
 801d502:	f7fe faf5 	bl	801baf0 <__errno>
 801d506:	2322      	movs	r3, #34	; 0x22
 801d508:	6003      	str	r3, [r0, #0]
 801d50a:	e7b4      	b.n	801d476 <_strtod_l+0x76>
 801d50c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 801d510:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801d514:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801d518:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801d51c:	e7e7      	b.n	801d4ee <_strtod_l+0xee>
 801d51e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801d698 <_strtod_l+0x298>
 801d522:	e7e4      	b.n	801d4ee <_strtod_l+0xee>
 801d524:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801d528:	f04f 38ff 	mov.w	r8, #4294967295
 801d52c:	e7df      	b.n	801d4ee <_strtod_l+0xee>
 801d52e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d530:	1c5a      	adds	r2, r3, #1
 801d532:	9215      	str	r2, [sp, #84]	; 0x54
 801d534:	785b      	ldrb	r3, [r3, #1]
 801d536:	2b30      	cmp	r3, #48	; 0x30
 801d538:	d0f9      	beq.n	801d52e <_strtod_l+0x12e>
 801d53a:	2b00      	cmp	r3, #0
 801d53c:	d09b      	beq.n	801d476 <_strtod_l+0x76>
 801d53e:	2301      	movs	r3, #1
 801d540:	f04f 0a00 	mov.w	sl, #0
 801d544:	9304      	str	r3, [sp, #16]
 801d546:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d548:	930b      	str	r3, [sp, #44]	; 0x2c
 801d54a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801d54e:	46d3      	mov	fp, sl
 801d550:	220a      	movs	r2, #10
 801d552:	9815      	ldr	r0, [sp, #84]	; 0x54
 801d554:	7806      	ldrb	r6, [r0, #0]
 801d556:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801d55a:	b2d9      	uxtb	r1, r3
 801d55c:	2909      	cmp	r1, #9
 801d55e:	d926      	bls.n	801d5ae <_strtod_l+0x1ae>
 801d560:	494c      	ldr	r1, [pc, #304]	; (801d694 <_strtod_l+0x294>)
 801d562:	2201      	movs	r2, #1
 801d564:	f001 f9c0 	bl	801e8e8 <strncmp>
 801d568:	2800      	cmp	r0, #0
 801d56a:	d030      	beq.n	801d5ce <_strtod_l+0x1ce>
 801d56c:	2000      	movs	r0, #0
 801d56e:	4632      	mov	r2, r6
 801d570:	9005      	str	r0, [sp, #20]
 801d572:	465e      	mov	r6, fp
 801d574:	4603      	mov	r3, r0
 801d576:	2a65      	cmp	r2, #101	; 0x65
 801d578:	d001      	beq.n	801d57e <_strtod_l+0x17e>
 801d57a:	2a45      	cmp	r2, #69	; 0x45
 801d57c:	d113      	bne.n	801d5a6 <_strtod_l+0x1a6>
 801d57e:	b91e      	cbnz	r6, 801d588 <_strtod_l+0x188>
 801d580:	9a04      	ldr	r2, [sp, #16]
 801d582:	4302      	orrs	r2, r0
 801d584:	d094      	beq.n	801d4b0 <_strtod_l+0xb0>
 801d586:	2600      	movs	r6, #0
 801d588:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801d58a:	1c6a      	adds	r2, r5, #1
 801d58c:	9215      	str	r2, [sp, #84]	; 0x54
 801d58e:	786a      	ldrb	r2, [r5, #1]
 801d590:	2a2b      	cmp	r2, #43	; 0x2b
 801d592:	d074      	beq.n	801d67e <_strtod_l+0x27e>
 801d594:	2a2d      	cmp	r2, #45	; 0x2d
 801d596:	d078      	beq.n	801d68a <_strtod_l+0x28a>
 801d598:	f04f 0c00 	mov.w	ip, #0
 801d59c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801d5a0:	2909      	cmp	r1, #9
 801d5a2:	d97f      	bls.n	801d6a4 <_strtod_l+0x2a4>
 801d5a4:	9515      	str	r5, [sp, #84]	; 0x54
 801d5a6:	2700      	movs	r7, #0
 801d5a8:	e09e      	b.n	801d6e8 <_strtod_l+0x2e8>
 801d5aa:	2300      	movs	r3, #0
 801d5ac:	e7c8      	b.n	801d540 <_strtod_l+0x140>
 801d5ae:	f1bb 0f08 	cmp.w	fp, #8
 801d5b2:	bfd8      	it	le
 801d5b4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801d5b6:	f100 0001 	add.w	r0, r0, #1
 801d5ba:	bfda      	itte	le
 801d5bc:	fb02 3301 	mlale	r3, r2, r1, r3
 801d5c0:	9309      	strle	r3, [sp, #36]	; 0x24
 801d5c2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801d5c6:	f10b 0b01 	add.w	fp, fp, #1
 801d5ca:	9015      	str	r0, [sp, #84]	; 0x54
 801d5cc:	e7c1      	b.n	801d552 <_strtod_l+0x152>
 801d5ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d5d0:	1c5a      	adds	r2, r3, #1
 801d5d2:	9215      	str	r2, [sp, #84]	; 0x54
 801d5d4:	785a      	ldrb	r2, [r3, #1]
 801d5d6:	f1bb 0f00 	cmp.w	fp, #0
 801d5da:	d037      	beq.n	801d64c <_strtod_l+0x24c>
 801d5dc:	9005      	str	r0, [sp, #20]
 801d5de:	465e      	mov	r6, fp
 801d5e0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801d5e4:	2b09      	cmp	r3, #9
 801d5e6:	d912      	bls.n	801d60e <_strtod_l+0x20e>
 801d5e8:	2301      	movs	r3, #1
 801d5ea:	e7c4      	b.n	801d576 <_strtod_l+0x176>
 801d5ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d5ee:	1c5a      	adds	r2, r3, #1
 801d5f0:	9215      	str	r2, [sp, #84]	; 0x54
 801d5f2:	785a      	ldrb	r2, [r3, #1]
 801d5f4:	3001      	adds	r0, #1
 801d5f6:	2a30      	cmp	r2, #48	; 0x30
 801d5f8:	d0f8      	beq.n	801d5ec <_strtod_l+0x1ec>
 801d5fa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801d5fe:	2b08      	cmp	r3, #8
 801d600:	f200 84c1 	bhi.w	801df86 <_strtod_l+0xb86>
 801d604:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d606:	9005      	str	r0, [sp, #20]
 801d608:	2000      	movs	r0, #0
 801d60a:	930b      	str	r3, [sp, #44]	; 0x2c
 801d60c:	4606      	mov	r6, r0
 801d60e:	3a30      	subs	r2, #48	; 0x30
 801d610:	f100 0301 	add.w	r3, r0, #1
 801d614:	d014      	beq.n	801d640 <_strtod_l+0x240>
 801d616:	9905      	ldr	r1, [sp, #20]
 801d618:	4419      	add	r1, r3
 801d61a:	9105      	str	r1, [sp, #20]
 801d61c:	4633      	mov	r3, r6
 801d61e:	eb00 0c06 	add.w	ip, r0, r6
 801d622:	210a      	movs	r1, #10
 801d624:	4563      	cmp	r3, ip
 801d626:	d113      	bne.n	801d650 <_strtod_l+0x250>
 801d628:	1833      	adds	r3, r6, r0
 801d62a:	2b08      	cmp	r3, #8
 801d62c:	f106 0601 	add.w	r6, r6, #1
 801d630:	4406      	add	r6, r0
 801d632:	dc1a      	bgt.n	801d66a <_strtod_l+0x26a>
 801d634:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d636:	230a      	movs	r3, #10
 801d638:	fb03 2301 	mla	r3, r3, r1, r2
 801d63c:	9309      	str	r3, [sp, #36]	; 0x24
 801d63e:	2300      	movs	r3, #0
 801d640:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801d642:	1c51      	adds	r1, r2, #1
 801d644:	9115      	str	r1, [sp, #84]	; 0x54
 801d646:	7852      	ldrb	r2, [r2, #1]
 801d648:	4618      	mov	r0, r3
 801d64a:	e7c9      	b.n	801d5e0 <_strtod_l+0x1e0>
 801d64c:	4658      	mov	r0, fp
 801d64e:	e7d2      	b.n	801d5f6 <_strtod_l+0x1f6>
 801d650:	2b08      	cmp	r3, #8
 801d652:	f103 0301 	add.w	r3, r3, #1
 801d656:	dc03      	bgt.n	801d660 <_strtod_l+0x260>
 801d658:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801d65a:	434f      	muls	r7, r1
 801d65c:	9709      	str	r7, [sp, #36]	; 0x24
 801d65e:	e7e1      	b.n	801d624 <_strtod_l+0x224>
 801d660:	2b10      	cmp	r3, #16
 801d662:	bfd8      	it	le
 801d664:	fb01 fa0a 	mulle.w	sl, r1, sl
 801d668:	e7dc      	b.n	801d624 <_strtod_l+0x224>
 801d66a:	2e10      	cmp	r6, #16
 801d66c:	bfdc      	itt	le
 801d66e:	230a      	movle	r3, #10
 801d670:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801d674:	e7e3      	b.n	801d63e <_strtod_l+0x23e>
 801d676:	2300      	movs	r3, #0
 801d678:	9305      	str	r3, [sp, #20]
 801d67a:	2301      	movs	r3, #1
 801d67c:	e780      	b.n	801d580 <_strtod_l+0x180>
 801d67e:	f04f 0c00 	mov.w	ip, #0
 801d682:	1caa      	adds	r2, r5, #2
 801d684:	9215      	str	r2, [sp, #84]	; 0x54
 801d686:	78aa      	ldrb	r2, [r5, #2]
 801d688:	e788      	b.n	801d59c <_strtod_l+0x19c>
 801d68a:	f04f 0c01 	mov.w	ip, #1
 801d68e:	e7f8      	b.n	801d682 <_strtod_l+0x282>
 801d690:	08021738 	.word	0x08021738
 801d694:	08021734 	.word	0x08021734
 801d698:	7ff00000 	.word	0x7ff00000
 801d69c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801d69e:	1c51      	adds	r1, r2, #1
 801d6a0:	9115      	str	r1, [sp, #84]	; 0x54
 801d6a2:	7852      	ldrb	r2, [r2, #1]
 801d6a4:	2a30      	cmp	r2, #48	; 0x30
 801d6a6:	d0f9      	beq.n	801d69c <_strtod_l+0x29c>
 801d6a8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801d6ac:	2908      	cmp	r1, #8
 801d6ae:	f63f af7a 	bhi.w	801d5a6 <_strtod_l+0x1a6>
 801d6b2:	3a30      	subs	r2, #48	; 0x30
 801d6b4:	9208      	str	r2, [sp, #32]
 801d6b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801d6b8:	920c      	str	r2, [sp, #48]	; 0x30
 801d6ba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801d6bc:	1c57      	adds	r7, r2, #1
 801d6be:	9715      	str	r7, [sp, #84]	; 0x54
 801d6c0:	7852      	ldrb	r2, [r2, #1]
 801d6c2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801d6c6:	f1be 0f09 	cmp.w	lr, #9
 801d6ca:	d938      	bls.n	801d73e <_strtod_l+0x33e>
 801d6cc:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d6ce:	1a7f      	subs	r7, r7, r1
 801d6d0:	2f08      	cmp	r7, #8
 801d6d2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801d6d6:	dc03      	bgt.n	801d6e0 <_strtod_l+0x2e0>
 801d6d8:	9908      	ldr	r1, [sp, #32]
 801d6da:	428f      	cmp	r7, r1
 801d6dc:	bfa8      	it	ge
 801d6de:	460f      	movge	r7, r1
 801d6e0:	f1bc 0f00 	cmp.w	ip, #0
 801d6e4:	d000      	beq.n	801d6e8 <_strtod_l+0x2e8>
 801d6e6:	427f      	negs	r7, r7
 801d6e8:	2e00      	cmp	r6, #0
 801d6ea:	d14f      	bne.n	801d78c <_strtod_l+0x38c>
 801d6ec:	9904      	ldr	r1, [sp, #16]
 801d6ee:	4301      	orrs	r1, r0
 801d6f0:	f47f aec1 	bne.w	801d476 <_strtod_l+0x76>
 801d6f4:	2b00      	cmp	r3, #0
 801d6f6:	f47f aedb 	bne.w	801d4b0 <_strtod_l+0xb0>
 801d6fa:	2a69      	cmp	r2, #105	; 0x69
 801d6fc:	d029      	beq.n	801d752 <_strtod_l+0x352>
 801d6fe:	dc26      	bgt.n	801d74e <_strtod_l+0x34e>
 801d700:	2a49      	cmp	r2, #73	; 0x49
 801d702:	d026      	beq.n	801d752 <_strtod_l+0x352>
 801d704:	2a4e      	cmp	r2, #78	; 0x4e
 801d706:	f47f aed3 	bne.w	801d4b0 <_strtod_l+0xb0>
 801d70a:	499b      	ldr	r1, [pc, #620]	; (801d978 <_strtod_l+0x578>)
 801d70c:	a815      	add	r0, sp, #84	; 0x54
 801d70e:	f001 fc13 	bl	801ef38 <__match>
 801d712:	2800      	cmp	r0, #0
 801d714:	f43f aecc 	beq.w	801d4b0 <_strtod_l+0xb0>
 801d718:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d71a:	781b      	ldrb	r3, [r3, #0]
 801d71c:	2b28      	cmp	r3, #40	; 0x28
 801d71e:	d12f      	bne.n	801d780 <_strtod_l+0x380>
 801d720:	4996      	ldr	r1, [pc, #600]	; (801d97c <_strtod_l+0x57c>)
 801d722:	aa18      	add	r2, sp, #96	; 0x60
 801d724:	a815      	add	r0, sp, #84	; 0x54
 801d726:	f001 fc1b 	bl	801ef60 <__hexnan>
 801d72a:	2805      	cmp	r0, #5
 801d72c:	d128      	bne.n	801d780 <_strtod_l+0x380>
 801d72e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d730:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801d734:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801d738:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801d73c:	e69b      	b.n	801d476 <_strtod_l+0x76>
 801d73e:	9f08      	ldr	r7, [sp, #32]
 801d740:	210a      	movs	r1, #10
 801d742:	fb01 2107 	mla	r1, r1, r7, r2
 801d746:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801d74a:	9208      	str	r2, [sp, #32]
 801d74c:	e7b5      	b.n	801d6ba <_strtod_l+0x2ba>
 801d74e:	2a6e      	cmp	r2, #110	; 0x6e
 801d750:	e7d9      	b.n	801d706 <_strtod_l+0x306>
 801d752:	498b      	ldr	r1, [pc, #556]	; (801d980 <_strtod_l+0x580>)
 801d754:	a815      	add	r0, sp, #84	; 0x54
 801d756:	f001 fbef 	bl	801ef38 <__match>
 801d75a:	2800      	cmp	r0, #0
 801d75c:	f43f aea8 	beq.w	801d4b0 <_strtod_l+0xb0>
 801d760:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d762:	4988      	ldr	r1, [pc, #544]	; (801d984 <_strtod_l+0x584>)
 801d764:	3b01      	subs	r3, #1
 801d766:	a815      	add	r0, sp, #84	; 0x54
 801d768:	9315      	str	r3, [sp, #84]	; 0x54
 801d76a:	f001 fbe5 	bl	801ef38 <__match>
 801d76e:	b910      	cbnz	r0, 801d776 <_strtod_l+0x376>
 801d770:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d772:	3301      	adds	r3, #1
 801d774:	9315      	str	r3, [sp, #84]	; 0x54
 801d776:	f8df 921c 	ldr.w	r9, [pc, #540]	; 801d994 <_strtod_l+0x594>
 801d77a:	f04f 0800 	mov.w	r8, #0
 801d77e:	e67a      	b.n	801d476 <_strtod_l+0x76>
 801d780:	4881      	ldr	r0, [pc, #516]	; (801d988 <_strtod_l+0x588>)
 801d782:	f001 f8f5 	bl	801e970 <nan>
 801d786:	ec59 8b10 	vmov	r8, r9, d0
 801d78a:	e674      	b.n	801d476 <_strtod_l+0x76>
 801d78c:	9b05      	ldr	r3, [sp, #20]
 801d78e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d790:	1afb      	subs	r3, r7, r3
 801d792:	f1bb 0f00 	cmp.w	fp, #0
 801d796:	bf08      	it	eq
 801d798:	46b3      	moveq	fp, r6
 801d79a:	2e10      	cmp	r6, #16
 801d79c:	9308      	str	r3, [sp, #32]
 801d79e:	4635      	mov	r5, r6
 801d7a0:	bfa8      	it	ge
 801d7a2:	2510      	movge	r5, #16
 801d7a4:	f7eb f8be 	bl	8008924 <__aeabi_ui2d>
 801d7a8:	2e09      	cmp	r6, #9
 801d7aa:	4680      	mov	r8, r0
 801d7ac:	4689      	mov	r9, r1
 801d7ae:	dd13      	ble.n	801d7d8 <_strtod_l+0x3d8>
 801d7b0:	4b76      	ldr	r3, [pc, #472]	; (801d98c <_strtod_l+0x58c>)
 801d7b2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801d7b6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801d7ba:	f7eb f92d 	bl	8008a18 <__aeabi_dmul>
 801d7be:	4680      	mov	r8, r0
 801d7c0:	4650      	mov	r0, sl
 801d7c2:	4689      	mov	r9, r1
 801d7c4:	f7eb f8ae 	bl	8008924 <__aeabi_ui2d>
 801d7c8:	4602      	mov	r2, r0
 801d7ca:	460b      	mov	r3, r1
 801d7cc:	4640      	mov	r0, r8
 801d7ce:	4649      	mov	r1, r9
 801d7d0:	f7ea ff6c 	bl	80086ac <__adddf3>
 801d7d4:	4680      	mov	r8, r0
 801d7d6:	4689      	mov	r9, r1
 801d7d8:	2e0f      	cmp	r6, #15
 801d7da:	dc38      	bgt.n	801d84e <_strtod_l+0x44e>
 801d7dc:	9b08      	ldr	r3, [sp, #32]
 801d7de:	2b00      	cmp	r3, #0
 801d7e0:	f43f ae49 	beq.w	801d476 <_strtod_l+0x76>
 801d7e4:	dd24      	ble.n	801d830 <_strtod_l+0x430>
 801d7e6:	2b16      	cmp	r3, #22
 801d7e8:	dc0b      	bgt.n	801d802 <_strtod_l+0x402>
 801d7ea:	4968      	ldr	r1, [pc, #416]	; (801d98c <_strtod_l+0x58c>)
 801d7ec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801d7f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d7f4:	4642      	mov	r2, r8
 801d7f6:	464b      	mov	r3, r9
 801d7f8:	f7eb f90e 	bl	8008a18 <__aeabi_dmul>
 801d7fc:	4680      	mov	r8, r0
 801d7fe:	4689      	mov	r9, r1
 801d800:	e639      	b.n	801d476 <_strtod_l+0x76>
 801d802:	9a08      	ldr	r2, [sp, #32]
 801d804:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 801d808:	4293      	cmp	r3, r2
 801d80a:	db20      	blt.n	801d84e <_strtod_l+0x44e>
 801d80c:	4c5f      	ldr	r4, [pc, #380]	; (801d98c <_strtod_l+0x58c>)
 801d80e:	f1c6 060f 	rsb	r6, r6, #15
 801d812:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 801d816:	4642      	mov	r2, r8
 801d818:	464b      	mov	r3, r9
 801d81a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d81e:	f7eb f8fb 	bl	8008a18 <__aeabi_dmul>
 801d822:	9b08      	ldr	r3, [sp, #32]
 801d824:	1b9e      	subs	r6, r3, r6
 801d826:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801d82a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801d82e:	e7e3      	b.n	801d7f8 <_strtod_l+0x3f8>
 801d830:	9b08      	ldr	r3, [sp, #32]
 801d832:	3316      	adds	r3, #22
 801d834:	db0b      	blt.n	801d84e <_strtod_l+0x44e>
 801d836:	9b05      	ldr	r3, [sp, #20]
 801d838:	1bdf      	subs	r7, r3, r7
 801d83a:	4b54      	ldr	r3, [pc, #336]	; (801d98c <_strtod_l+0x58c>)
 801d83c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801d840:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d844:	4640      	mov	r0, r8
 801d846:	4649      	mov	r1, r9
 801d848:	f7eb fa10 	bl	8008c6c <__aeabi_ddiv>
 801d84c:	e7d6      	b.n	801d7fc <_strtod_l+0x3fc>
 801d84e:	9b08      	ldr	r3, [sp, #32]
 801d850:	1b75      	subs	r5, r6, r5
 801d852:	441d      	add	r5, r3
 801d854:	2d00      	cmp	r5, #0
 801d856:	dd70      	ble.n	801d93a <_strtod_l+0x53a>
 801d858:	f015 030f 	ands.w	r3, r5, #15
 801d85c:	d00a      	beq.n	801d874 <_strtod_l+0x474>
 801d85e:	494b      	ldr	r1, [pc, #300]	; (801d98c <_strtod_l+0x58c>)
 801d860:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801d864:	4642      	mov	r2, r8
 801d866:	464b      	mov	r3, r9
 801d868:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d86c:	f7eb f8d4 	bl	8008a18 <__aeabi_dmul>
 801d870:	4680      	mov	r8, r0
 801d872:	4689      	mov	r9, r1
 801d874:	f035 050f 	bics.w	r5, r5, #15
 801d878:	d04d      	beq.n	801d916 <_strtod_l+0x516>
 801d87a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801d87e:	dd22      	ble.n	801d8c6 <_strtod_l+0x4c6>
 801d880:	2500      	movs	r5, #0
 801d882:	46ab      	mov	fp, r5
 801d884:	9509      	str	r5, [sp, #36]	; 0x24
 801d886:	9505      	str	r5, [sp, #20]
 801d888:	2322      	movs	r3, #34	; 0x22
 801d88a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801d994 <_strtod_l+0x594>
 801d88e:	6023      	str	r3, [r4, #0]
 801d890:	f04f 0800 	mov.w	r8, #0
 801d894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d896:	2b00      	cmp	r3, #0
 801d898:	f43f aded 	beq.w	801d476 <_strtod_l+0x76>
 801d89c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801d89e:	4620      	mov	r0, r4
 801d8a0:	f7ff f924 	bl	801caec <_Bfree>
 801d8a4:	9905      	ldr	r1, [sp, #20]
 801d8a6:	4620      	mov	r0, r4
 801d8a8:	f7ff f920 	bl	801caec <_Bfree>
 801d8ac:	4659      	mov	r1, fp
 801d8ae:	4620      	mov	r0, r4
 801d8b0:	f7ff f91c 	bl	801caec <_Bfree>
 801d8b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d8b6:	4620      	mov	r0, r4
 801d8b8:	f7ff f918 	bl	801caec <_Bfree>
 801d8bc:	4629      	mov	r1, r5
 801d8be:	4620      	mov	r0, r4
 801d8c0:	f7ff f914 	bl	801caec <_Bfree>
 801d8c4:	e5d7      	b.n	801d476 <_strtod_l+0x76>
 801d8c6:	4b32      	ldr	r3, [pc, #200]	; (801d990 <_strtod_l+0x590>)
 801d8c8:	9304      	str	r3, [sp, #16]
 801d8ca:	2300      	movs	r3, #0
 801d8cc:	112d      	asrs	r5, r5, #4
 801d8ce:	4640      	mov	r0, r8
 801d8d0:	4649      	mov	r1, r9
 801d8d2:	469a      	mov	sl, r3
 801d8d4:	2d01      	cmp	r5, #1
 801d8d6:	dc21      	bgt.n	801d91c <_strtod_l+0x51c>
 801d8d8:	b10b      	cbz	r3, 801d8de <_strtod_l+0x4de>
 801d8da:	4680      	mov	r8, r0
 801d8dc:	4689      	mov	r9, r1
 801d8de:	492c      	ldr	r1, [pc, #176]	; (801d990 <_strtod_l+0x590>)
 801d8e0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801d8e4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801d8e8:	4642      	mov	r2, r8
 801d8ea:	464b      	mov	r3, r9
 801d8ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d8f0:	f7eb f892 	bl	8008a18 <__aeabi_dmul>
 801d8f4:	4b27      	ldr	r3, [pc, #156]	; (801d994 <_strtod_l+0x594>)
 801d8f6:	460a      	mov	r2, r1
 801d8f8:	400b      	ands	r3, r1
 801d8fa:	4927      	ldr	r1, [pc, #156]	; (801d998 <_strtod_l+0x598>)
 801d8fc:	428b      	cmp	r3, r1
 801d8fe:	4680      	mov	r8, r0
 801d900:	d8be      	bhi.n	801d880 <_strtod_l+0x480>
 801d902:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801d906:	428b      	cmp	r3, r1
 801d908:	bf86      	itte	hi
 801d90a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801d99c <_strtod_l+0x59c>
 801d90e:	f04f 38ff 	movhi.w	r8, #4294967295
 801d912:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801d916:	2300      	movs	r3, #0
 801d918:	9304      	str	r3, [sp, #16]
 801d91a:	e07b      	b.n	801da14 <_strtod_l+0x614>
 801d91c:	07ea      	lsls	r2, r5, #31
 801d91e:	d505      	bpl.n	801d92c <_strtod_l+0x52c>
 801d920:	9b04      	ldr	r3, [sp, #16]
 801d922:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d926:	f7eb f877 	bl	8008a18 <__aeabi_dmul>
 801d92a:	2301      	movs	r3, #1
 801d92c:	9a04      	ldr	r2, [sp, #16]
 801d92e:	3208      	adds	r2, #8
 801d930:	f10a 0a01 	add.w	sl, sl, #1
 801d934:	106d      	asrs	r5, r5, #1
 801d936:	9204      	str	r2, [sp, #16]
 801d938:	e7cc      	b.n	801d8d4 <_strtod_l+0x4d4>
 801d93a:	d0ec      	beq.n	801d916 <_strtod_l+0x516>
 801d93c:	426d      	negs	r5, r5
 801d93e:	f015 020f 	ands.w	r2, r5, #15
 801d942:	d00a      	beq.n	801d95a <_strtod_l+0x55a>
 801d944:	4b11      	ldr	r3, [pc, #68]	; (801d98c <_strtod_l+0x58c>)
 801d946:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d94a:	4640      	mov	r0, r8
 801d94c:	4649      	mov	r1, r9
 801d94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d952:	f7eb f98b 	bl	8008c6c <__aeabi_ddiv>
 801d956:	4680      	mov	r8, r0
 801d958:	4689      	mov	r9, r1
 801d95a:	112d      	asrs	r5, r5, #4
 801d95c:	d0db      	beq.n	801d916 <_strtod_l+0x516>
 801d95e:	2d1f      	cmp	r5, #31
 801d960:	dd1e      	ble.n	801d9a0 <_strtod_l+0x5a0>
 801d962:	2500      	movs	r5, #0
 801d964:	46ab      	mov	fp, r5
 801d966:	9509      	str	r5, [sp, #36]	; 0x24
 801d968:	9505      	str	r5, [sp, #20]
 801d96a:	2322      	movs	r3, #34	; 0x22
 801d96c:	f04f 0800 	mov.w	r8, #0
 801d970:	f04f 0900 	mov.w	r9, #0
 801d974:	6023      	str	r3, [r4, #0]
 801d976:	e78d      	b.n	801d894 <_strtod_l+0x494>
 801d978:	08021525 	.word	0x08021525
 801d97c:	0802174c 	.word	0x0802174c
 801d980:	0802151d 	.word	0x0802151d
 801d984:	08021554 	.word	0x08021554
 801d988:	080218dd 	.word	0x080218dd
 801d98c:	08021660 	.word	0x08021660
 801d990:	08021638 	.word	0x08021638
 801d994:	7ff00000 	.word	0x7ff00000
 801d998:	7ca00000 	.word	0x7ca00000
 801d99c:	7fefffff 	.word	0x7fefffff
 801d9a0:	f015 0310 	ands.w	r3, r5, #16
 801d9a4:	bf18      	it	ne
 801d9a6:	236a      	movne	r3, #106	; 0x6a
 801d9a8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801dd4c <_strtod_l+0x94c>
 801d9ac:	9304      	str	r3, [sp, #16]
 801d9ae:	4640      	mov	r0, r8
 801d9b0:	4649      	mov	r1, r9
 801d9b2:	2300      	movs	r3, #0
 801d9b4:	07ea      	lsls	r2, r5, #31
 801d9b6:	d504      	bpl.n	801d9c2 <_strtod_l+0x5c2>
 801d9b8:	e9da 2300 	ldrd	r2, r3, [sl]
 801d9bc:	f7eb f82c 	bl	8008a18 <__aeabi_dmul>
 801d9c0:	2301      	movs	r3, #1
 801d9c2:	106d      	asrs	r5, r5, #1
 801d9c4:	f10a 0a08 	add.w	sl, sl, #8
 801d9c8:	d1f4      	bne.n	801d9b4 <_strtod_l+0x5b4>
 801d9ca:	b10b      	cbz	r3, 801d9d0 <_strtod_l+0x5d0>
 801d9cc:	4680      	mov	r8, r0
 801d9ce:	4689      	mov	r9, r1
 801d9d0:	9b04      	ldr	r3, [sp, #16]
 801d9d2:	b1bb      	cbz	r3, 801da04 <_strtod_l+0x604>
 801d9d4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801d9d8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801d9dc:	2b00      	cmp	r3, #0
 801d9de:	4649      	mov	r1, r9
 801d9e0:	dd10      	ble.n	801da04 <_strtod_l+0x604>
 801d9e2:	2b1f      	cmp	r3, #31
 801d9e4:	f340 811e 	ble.w	801dc24 <_strtod_l+0x824>
 801d9e8:	2b34      	cmp	r3, #52	; 0x34
 801d9ea:	bfde      	ittt	le
 801d9ec:	f04f 33ff 	movle.w	r3, #4294967295
 801d9f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801d9f4:	4093      	lslle	r3, r2
 801d9f6:	f04f 0800 	mov.w	r8, #0
 801d9fa:	bfcc      	ite	gt
 801d9fc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801da00:	ea03 0901 	andle.w	r9, r3, r1
 801da04:	2200      	movs	r2, #0
 801da06:	2300      	movs	r3, #0
 801da08:	4640      	mov	r0, r8
 801da0a:	4649      	mov	r1, r9
 801da0c:	f7eb fa6c 	bl	8008ee8 <__aeabi_dcmpeq>
 801da10:	2800      	cmp	r0, #0
 801da12:	d1a6      	bne.n	801d962 <_strtod_l+0x562>
 801da14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801da16:	9300      	str	r3, [sp, #0]
 801da18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801da1a:	4633      	mov	r3, r6
 801da1c:	465a      	mov	r2, fp
 801da1e:	4620      	mov	r0, r4
 801da20:	f7ff f8cc 	bl	801cbbc <__s2b>
 801da24:	9009      	str	r0, [sp, #36]	; 0x24
 801da26:	2800      	cmp	r0, #0
 801da28:	f43f af2a 	beq.w	801d880 <_strtod_l+0x480>
 801da2c:	9a08      	ldr	r2, [sp, #32]
 801da2e:	9b05      	ldr	r3, [sp, #20]
 801da30:	2a00      	cmp	r2, #0
 801da32:	eba3 0307 	sub.w	r3, r3, r7
 801da36:	bfa8      	it	ge
 801da38:	2300      	movge	r3, #0
 801da3a:	930c      	str	r3, [sp, #48]	; 0x30
 801da3c:	2500      	movs	r5, #0
 801da3e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801da42:	9312      	str	r3, [sp, #72]	; 0x48
 801da44:	46ab      	mov	fp, r5
 801da46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801da48:	4620      	mov	r0, r4
 801da4a:	6859      	ldr	r1, [r3, #4]
 801da4c:	f7ff f80e 	bl	801ca6c <_Balloc>
 801da50:	9005      	str	r0, [sp, #20]
 801da52:	2800      	cmp	r0, #0
 801da54:	f43f af18 	beq.w	801d888 <_strtod_l+0x488>
 801da58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801da5a:	691a      	ldr	r2, [r3, #16]
 801da5c:	3202      	adds	r2, #2
 801da5e:	f103 010c 	add.w	r1, r3, #12
 801da62:	0092      	lsls	r2, r2, #2
 801da64:	300c      	adds	r0, #12
 801da66:	f7fe f870 	bl	801bb4a <memcpy>
 801da6a:	ec49 8b10 	vmov	d0, r8, r9
 801da6e:	aa18      	add	r2, sp, #96	; 0x60
 801da70:	a917      	add	r1, sp, #92	; 0x5c
 801da72:	4620      	mov	r0, r4
 801da74:	f7ff fbd6 	bl	801d224 <__d2b>
 801da78:	ec49 8b18 	vmov	d8, r8, r9
 801da7c:	9016      	str	r0, [sp, #88]	; 0x58
 801da7e:	2800      	cmp	r0, #0
 801da80:	f43f af02 	beq.w	801d888 <_strtod_l+0x488>
 801da84:	2101      	movs	r1, #1
 801da86:	4620      	mov	r0, r4
 801da88:	f7ff f930 	bl	801ccec <__i2b>
 801da8c:	4683      	mov	fp, r0
 801da8e:	2800      	cmp	r0, #0
 801da90:	f43f aefa 	beq.w	801d888 <_strtod_l+0x488>
 801da94:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801da96:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801da98:	2e00      	cmp	r6, #0
 801da9a:	bfab      	itete	ge
 801da9c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801da9e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 801daa0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801daa2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 801daa6:	bfac      	ite	ge
 801daa8:	eb06 0a03 	addge.w	sl, r6, r3
 801daac:	1b9f      	sublt	r7, r3, r6
 801daae:	9b04      	ldr	r3, [sp, #16]
 801dab0:	1af6      	subs	r6, r6, r3
 801dab2:	4416      	add	r6, r2
 801dab4:	4ba0      	ldr	r3, [pc, #640]	; (801dd38 <_strtod_l+0x938>)
 801dab6:	3e01      	subs	r6, #1
 801dab8:	429e      	cmp	r6, r3
 801daba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801dabe:	f280 80c4 	bge.w	801dc4a <_strtod_l+0x84a>
 801dac2:	1b9b      	subs	r3, r3, r6
 801dac4:	2b1f      	cmp	r3, #31
 801dac6:	eba2 0203 	sub.w	r2, r2, r3
 801daca:	f04f 0101 	mov.w	r1, #1
 801dace:	f300 80b0 	bgt.w	801dc32 <_strtod_l+0x832>
 801dad2:	fa01 f303 	lsl.w	r3, r1, r3
 801dad6:	930e      	str	r3, [sp, #56]	; 0x38
 801dad8:	2300      	movs	r3, #0
 801dada:	930d      	str	r3, [sp, #52]	; 0x34
 801dadc:	eb0a 0602 	add.w	r6, sl, r2
 801dae0:	9b04      	ldr	r3, [sp, #16]
 801dae2:	45b2      	cmp	sl, r6
 801dae4:	4417      	add	r7, r2
 801dae6:	441f      	add	r7, r3
 801dae8:	4653      	mov	r3, sl
 801daea:	bfa8      	it	ge
 801daec:	4633      	movge	r3, r6
 801daee:	42bb      	cmp	r3, r7
 801daf0:	bfa8      	it	ge
 801daf2:	463b      	movge	r3, r7
 801daf4:	2b00      	cmp	r3, #0
 801daf6:	bfc2      	ittt	gt
 801daf8:	1af6      	subgt	r6, r6, r3
 801dafa:	1aff      	subgt	r7, r7, r3
 801dafc:	ebaa 0a03 	subgt.w	sl, sl, r3
 801db00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801db02:	2b00      	cmp	r3, #0
 801db04:	dd17      	ble.n	801db36 <_strtod_l+0x736>
 801db06:	4659      	mov	r1, fp
 801db08:	461a      	mov	r2, r3
 801db0a:	4620      	mov	r0, r4
 801db0c:	f7ff f9ae 	bl	801ce6c <__pow5mult>
 801db10:	4683      	mov	fp, r0
 801db12:	2800      	cmp	r0, #0
 801db14:	f43f aeb8 	beq.w	801d888 <_strtod_l+0x488>
 801db18:	4601      	mov	r1, r0
 801db1a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801db1c:	4620      	mov	r0, r4
 801db1e:	f7ff f8fb 	bl	801cd18 <__multiply>
 801db22:	900b      	str	r0, [sp, #44]	; 0x2c
 801db24:	2800      	cmp	r0, #0
 801db26:	f43f aeaf 	beq.w	801d888 <_strtod_l+0x488>
 801db2a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801db2c:	4620      	mov	r0, r4
 801db2e:	f7fe ffdd 	bl	801caec <_Bfree>
 801db32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801db34:	9316      	str	r3, [sp, #88]	; 0x58
 801db36:	2e00      	cmp	r6, #0
 801db38:	f300 808c 	bgt.w	801dc54 <_strtod_l+0x854>
 801db3c:	9b08      	ldr	r3, [sp, #32]
 801db3e:	2b00      	cmp	r3, #0
 801db40:	dd08      	ble.n	801db54 <_strtod_l+0x754>
 801db42:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801db44:	9905      	ldr	r1, [sp, #20]
 801db46:	4620      	mov	r0, r4
 801db48:	f7ff f990 	bl	801ce6c <__pow5mult>
 801db4c:	9005      	str	r0, [sp, #20]
 801db4e:	2800      	cmp	r0, #0
 801db50:	f43f ae9a 	beq.w	801d888 <_strtod_l+0x488>
 801db54:	2f00      	cmp	r7, #0
 801db56:	dd08      	ble.n	801db6a <_strtod_l+0x76a>
 801db58:	9905      	ldr	r1, [sp, #20]
 801db5a:	463a      	mov	r2, r7
 801db5c:	4620      	mov	r0, r4
 801db5e:	f7ff f9df 	bl	801cf20 <__lshift>
 801db62:	9005      	str	r0, [sp, #20]
 801db64:	2800      	cmp	r0, #0
 801db66:	f43f ae8f 	beq.w	801d888 <_strtod_l+0x488>
 801db6a:	f1ba 0f00 	cmp.w	sl, #0
 801db6e:	dd08      	ble.n	801db82 <_strtod_l+0x782>
 801db70:	4659      	mov	r1, fp
 801db72:	4652      	mov	r2, sl
 801db74:	4620      	mov	r0, r4
 801db76:	f7ff f9d3 	bl	801cf20 <__lshift>
 801db7a:	4683      	mov	fp, r0
 801db7c:	2800      	cmp	r0, #0
 801db7e:	f43f ae83 	beq.w	801d888 <_strtod_l+0x488>
 801db82:	9a05      	ldr	r2, [sp, #20]
 801db84:	9916      	ldr	r1, [sp, #88]	; 0x58
 801db86:	4620      	mov	r0, r4
 801db88:	f7ff fa52 	bl	801d030 <__mdiff>
 801db8c:	4605      	mov	r5, r0
 801db8e:	2800      	cmp	r0, #0
 801db90:	f43f ae7a 	beq.w	801d888 <_strtod_l+0x488>
 801db94:	68c3      	ldr	r3, [r0, #12]
 801db96:	930b      	str	r3, [sp, #44]	; 0x2c
 801db98:	2300      	movs	r3, #0
 801db9a:	60c3      	str	r3, [r0, #12]
 801db9c:	4659      	mov	r1, fp
 801db9e:	f7ff fa2b 	bl	801cff8 <__mcmp>
 801dba2:	2800      	cmp	r0, #0
 801dba4:	da60      	bge.n	801dc68 <_strtod_l+0x868>
 801dba6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dba8:	ea53 0308 	orrs.w	r3, r3, r8
 801dbac:	f040 8084 	bne.w	801dcb8 <_strtod_l+0x8b8>
 801dbb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801dbb4:	2b00      	cmp	r3, #0
 801dbb6:	d17f      	bne.n	801dcb8 <_strtod_l+0x8b8>
 801dbb8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801dbbc:	0d1b      	lsrs	r3, r3, #20
 801dbbe:	051b      	lsls	r3, r3, #20
 801dbc0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801dbc4:	d978      	bls.n	801dcb8 <_strtod_l+0x8b8>
 801dbc6:	696b      	ldr	r3, [r5, #20]
 801dbc8:	b913      	cbnz	r3, 801dbd0 <_strtod_l+0x7d0>
 801dbca:	692b      	ldr	r3, [r5, #16]
 801dbcc:	2b01      	cmp	r3, #1
 801dbce:	dd73      	ble.n	801dcb8 <_strtod_l+0x8b8>
 801dbd0:	4629      	mov	r1, r5
 801dbd2:	2201      	movs	r2, #1
 801dbd4:	4620      	mov	r0, r4
 801dbd6:	f7ff f9a3 	bl	801cf20 <__lshift>
 801dbda:	4659      	mov	r1, fp
 801dbdc:	4605      	mov	r5, r0
 801dbde:	f7ff fa0b 	bl	801cff8 <__mcmp>
 801dbe2:	2800      	cmp	r0, #0
 801dbe4:	dd68      	ble.n	801dcb8 <_strtod_l+0x8b8>
 801dbe6:	9904      	ldr	r1, [sp, #16]
 801dbe8:	4a54      	ldr	r2, [pc, #336]	; (801dd3c <_strtod_l+0x93c>)
 801dbea:	464b      	mov	r3, r9
 801dbec:	2900      	cmp	r1, #0
 801dbee:	f000 8084 	beq.w	801dcfa <_strtod_l+0x8fa>
 801dbf2:	ea02 0109 	and.w	r1, r2, r9
 801dbf6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801dbfa:	dc7e      	bgt.n	801dcfa <_strtod_l+0x8fa>
 801dbfc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801dc00:	f77f aeb3 	ble.w	801d96a <_strtod_l+0x56a>
 801dc04:	4b4e      	ldr	r3, [pc, #312]	; (801dd40 <_strtod_l+0x940>)
 801dc06:	4640      	mov	r0, r8
 801dc08:	4649      	mov	r1, r9
 801dc0a:	2200      	movs	r2, #0
 801dc0c:	f7ea ff04 	bl	8008a18 <__aeabi_dmul>
 801dc10:	4b4a      	ldr	r3, [pc, #296]	; (801dd3c <_strtod_l+0x93c>)
 801dc12:	400b      	ands	r3, r1
 801dc14:	4680      	mov	r8, r0
 801dc16:	4689      	mov	r9, r1
 801dc18:	2b00      	cmp	r3, #0
 801dc1a:	f47f ae3f 	bne.w	801d89c <_strtod_l+0x49c>
 801dc1e:	2322      	movs	r3, #34	; 0x22
 801dc20:	6023      	str	r3, [r4, #0]
 801dc22:	e63b      	b.n	801d89c <_strtod_l+0x49c>
 801dc24:	f04f 32ff 	mov.w	r2, #4294967295
 801dc28:	fa02 f303 	lsl.w	r3, r2, r3
 801dc2c:	ea03 0808 	and.w	r8, r3, r8
 801dc30:	e6e8      	b.n	801da04 <_strtod_l+0x604>
 801dc32:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801dc36:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801dc3a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801dc3e:	36e2      	adds	r6, #226	; 0xe2
 801dc40:	fa01 f306 	lsl.w	r3, r1, r6
 801dc44:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 801dc48:	e748      	b.n	801dadc <_strtod_l+0x6dc>
 801dc4a:	2100      	movs	r1, #0
 801dc4c:	2301      	movs	r3, #1
 801dc4e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801dc52:	e743      	b.n	801dadc <_strtod_l+0x6dc>
 801dc54:	9916      	ldr	r1, [sp, #88]	; 0x58
 801dc56:	4632      	mov	r2, r6
 801dc58:	4620      	mov	r0, r4
 801dc5a:	f7ff f961 	bl	801cf20 <__lshift>
 801dc5e:	9016      	str	r0, [sp, #88]	; 0x58
 801dc60:	2800      	cmp	r0, #0
 801dc62:	f47f af6b 	bne.w	801db3c <_strtod_l+0x73c>
 801dc66:	e60f      	b.n	801d888 <_strtod_l+0x488>
 801dc68:	46ca      	mov	sl, r9
 801dc6a:	d171      	bne.n	801dd50 <_strtod_l+0x950>
 801dc6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801dc6e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801dc72:	b352      	cbz	r2, 801dcca <_strtod_l+0x8ca>
 801dc74:	4a33      	ldr	r2, [pc, #204]	; (801dd44 <_strtod_l+0x944>)
 801dc76:	4293      	cmp	r3, r2
 801dc78:	d12a      	bne.n	801dcd0 <_strtod_l+0x8d0>
 801dc7a:	9b04      	ldr	r3, [sp, #16]
 801dc7c:	4641      	mov	r1, r8
 801dc7e:	b1fb      	cbz	r3, 801dcc0 <_strtod_l+0x8c0>
 801dc80:	4b2e      	ldr	r3, [pc, #184]	; (801dd3c <_strtod_l+0x93c>)
 801dc82:	ea09 0303 	and.w	r3, r9, r3
 801dc86:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801dc8a:	f04f 32ff 	mov.w	r2, #4294967295
 801dc8e:	d81a      	bhi.n	801dcc6 <_strtod_l+0x8c6>
 801dc90:	0d1b      	lsrs	r3, r3, #20
 801dc92:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801dc96:	fa02 f303 	lsl.w	r3, r2, r3
 801dc9a:	4299      	cmp	r1, r3
 801dc9c:	d118      	bne.n	801dcd0 <_strtod_l+0x8d0>
 801dc9e:	4b2a      	ldr	r3, [pc, #168]	; (801dd48 <_strtod_l+0x948>)
 801dca0:	459a      	cmp	sl, r3
 801dca2:	d102      	bne.n	801dcaa <_strtod_l+0x8aa>
 801dca4:	3101      	adds	r1, #1
 801dca6:	f43f adef 	beq.w	801d888 <_strtod_l+0x488>
 801dcaa:	4b24      	ldr	r3, [pc, #144]	; (801dd3c <_strtod_l+0x93c>)
 801dcac:	ea0a 0303 	and.w	r3, sl, r3
 801dcb0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801dcb4:	f04f 0800 	mov.w	r8, #0
 801dcb8:	9b04      	ldr	r3, [sp, #16]
 801dcba:	2b00      	cmp	r3, #0
 801dcbc:	d1a2      	bne.n	801dc04 <_strtod_l+0x804>
 801dcbe:	e5ed      	b.n	801d89c <_strtod_l+0x49c>
 801dcc0:	f04f 33ff 	mov.w	r3, #4294967295
 801dcc4:	e7e9      	b.n	801dc9a <_strtod_l+0x89a>
 801dcc6:	4613      	mov	r3, r2
 801dcc8:	e7e7      	b.n	801dc9a <_strtod_l+0x89a>
 801dcca:	ea53 0308 	orrs.w	r3, r3, r8
 801dcce:	d08a      	beq.n	801dbe6 <_strtod_l+0x7e6>
 801dcd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dcd2:	b1e3      	cbz	r3, 801dd0e <_strtod_l+0x90e>
 801dcd4:	ea13 0f0a 	tst.w	r3, sl
 801dcd8:	d0ee      	beq.n	801dcb8 <_strtod_l+0x8b8>
 801dcda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dcdc:	9a04      	ldr	r2, [sp, #16]
 801dcde:	4640      	mov	r0, r8
 801dce0:	4649      	mov	r1, r9
 801dce2:	b1c3      	cbz	r3, 801dd16 <_strtod_l+0x916>
 801dce4:	f7ff fb6f 	bl	801d3c6 <sulp>
 801dce8:	4602      	mov	r2, r0
 801dcea:	460b      	mov	r3, r1
 801dcec:	ec51 0b18 	vmov	r0, r1, d8
 801dcf0:	f7ea fcdc 	bl	80086ac <__adddf3>
 801dcf4:	4680      	mov	r8, r0
 801dcf6:	4689      	mov	r9, r1
 801dcf8:	e7de      	b.n	801dcb8 <_strtod_l+0x8b8>
 801dcfa:	4013      	ands	r3, r2
 801dcfc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801dd00:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801dd04:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801dd08:	f04f 38ff 	mov.w	r8, #4294967295
 801dd0c:	e7d4      	b.n	801dcb8 <_strtod_l+0x8b8>
 801dd0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dd10:	ea13 0f08 	tst.w	r3, r8
 801dd14:	e7e0      	b.n	801dcd8 <_strtod_l+0x8d8>
 801dd16:	f7ff fb56 	bl	801d3c6 <sulp>
 801dd1a:	4602      	mov	r2, r0
 801dd1c:	460b      	mov	r3, r1
 801dd1e:	ec51 0b18 	vmov	r0, r1, d8
 801dd22:	f7ea fcc1 	bl	80086a8 <__aeabi_dsub>
 801dd26:	2200      	movs	r2, #0
 801dd28:	2300      	movs	r3, #0
 801dd2a:	4680      	mov	r8, r0
 801dd2c:	4689      	mov	r9, r1
 801dd2e:	f7eb f8db 	bl	8008ee8 <__aeabi_dcmpeq>
 801dd32:	2800      	cmp	r0, #0
 801dd34:	d0c0      	beq.n	801dcb8 <_strtod_l+0x8b8>
 801dd36:	e618      	b.n	801d96a <_strtod_l+0x56a>
 801dd38:	fffffc02 	.word	0xfffffc02
 801dd3c:	7ff00000 	.word	0x7ff00000
 801dd40:	39500000 	.word	0x39500000
 801dd44:	000fffff 	.word	0x000fffff
 801dd48:	7fefffff 	.word	0x7fefffff
 801dd4c:	08021760 	.word	0x08021760
 801dd50:	4659      	mov	r1, fp
 801dd52:	4628      	mov	r0, r5
 801dd54:	f7ff fac0 	bl	801d2d8 <__ratio>
 801dd58:	ec57 6b10 	vmov	r6, r7, d0
 801dd5c:	ee10 0a10 	vmov	r0, s0
 801dd60:	2200      	movs	r2, #0
 801dd62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801dd66:	4639      	mov	r1, r7
 801dd68:	f7eb f8d2 	bl	8008f10 <__aeabi_dcmple>
 801dd6c:	2800      	cmp	r0, #0
 801dd6e:	d071      	beq.n	801de54 <_strtod_l+0xa54>
 801dd70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dd72:	2b00      	cmp	r3, #0
 801dd74:	d17c      	bne.n	801de70 <_strtod_l+0xa70>
 801dd76:	f1b8 0f00 	cmp.w	r8, #0
 801dd7a:	d15a      	bne.n	801de32 <_strtod_l+0xa32>
 801dd7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801dd80:	2b00      	cmp	r3, #0
 801dd82:	d15d      	bne.n	801de40 <_strtod_l+0xa40>
 801dd84:	4b90      	ldr	r3, [pc, #576]	; (801dfc8 <_strtod_l+0xbc8>)
 801dd86:	2200      	movs	r2, #0
 801dd88:	4630      	mov	r0, r6
 801dd8a:	4639      	mov	r1, r7
 801dd8c:	f7eb f8b6 	bl	8008efc <__aeabi_dcmplt>
 801dd90:	2800      	cmp	r0, #0
 801dd92:	d15c      	bne.n	801de4e <_strtod_l+0xa4e>
 801dd94:	4630      	mov	r0, r6
 801dd96:	4639      	mov	r1, r7
 801dd98:	4b8c      	ldr	r3, [pc, #560]	; (801dfcc <_strtod_l+0xbcc>)
 801dd9a:	2200      	movs	r2, #0
 801dd9c:	f7ea fe3c 	bl	8008a18 <__aeabi_dmul>
 801dda0:	4606      	mov	r6, r0
 801dda2:	460f      	mov	r7, r1
 801dda4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 801dda8:	9606      	str	r6, [sp, #24]
 801ddaa:	9307      	str	r3, [sp, #28]
 801ddac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ddb0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801ddb4:	4b86      	ldr	r3, [pc, #536]	; (801dfd0 <_strtod_l+0xbd0>)
 801ddb6:	ea0a 0303 	and.w	r3, sl, r3
 801ddba:	930d      	str	r3, [sp, #52]	; 0x34
 801ddbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ddbe:	4b85      	ldr	r3, [pc, #532]	; (801dfd4 <_strtod_l+0xbd4>)
 801ddc0:	429a      	cmp	r2, r3
 801ddc2:	f040 8090 	bne.w	801dee6 <_strtod_l+0xae6>
 801ddc6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801ddca:	ec49 8b10 	vmov	d0, r8, r9
 801ddce:	f7ff f9b9 	bl	801d144 <__ulp>
 801ddd2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ddd6:	ec51 0b10 	vmov	r0, r1, d0
 801ddda:	f7ea fe1d 	bl	8008a18 <__aeabi_dmul>
 801ddde:	4642      	mov	r2, r8
 801dde0:	464b      	mov	r3, r9
 801dde2:	f7ea fc63 	bl	80086ac <__adddf3>
 801dde6:	460b      	mov	r3, r1
 801dde8:	4979      	ldr	r1, [pc, #484]	; (801dfd0 <_strtod_l+0xbd0>)
 801ddea:	4a7b      	ldr	r2, [pc, #492]	; (801dfd8 <_strtod_l+0xbd8>)
 801ddec:	4019      	ands	r1, r3
 801ddee:	4291      	cmp	r1, r2
 801ddf0:	4680      	mov	r8, r0
 801ddf2:	d944      	bls.n	801de7e <_strtod_l+0xa7e>
 801ddf4:	ee18 2a90 	vmov	r2, s17
 801ddf8:	4b78      	ldr	r3, [pc, #480]	; (801dfdc <_strtod_l+0xbdc>)
 801ddfa:	429a      	cmp	r2, r3
 801ddfc:	d104      	bne.n	801de08 <_strtod_l+0xa08>
 801ddfe:	ee18 3a10 	vmov	r3, s16
 801de02:	3301      	adds	r3, #1
 801de04:	f43f ad40 	beq.w	801d888 <_strtod_l+0x488>
 801de08:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801dfdc <_strtod_l+0xbdc>
 801de0c:	f04f 38ff 	mov.w	r8, #4294967295
 801de10:	9916      	ldr	r1, [sp, #88]	; 0x58
 801de12:	4620      	mov	r0, r4
 801de14:	f7fe fe6a 	bl	801caec <_Bfree>
 801de18:	9905      	ldr	r1, [sp, #20]
 801de1a:	4620      	mov	r0, r4
 801de1c:	f7fe fe66 	bl	801caec <_Bfree>
 801de20:	4659      	mov	r1, fp
 801de22:	4620      	mov	r0, r4
 801de24:	f7fe fe62 	bl	801caec <_Bfree>
 801de28:	4629      	mov	r1, r5
 801de2a:	4620      	mov	r0, r4
 801de2c:	f7fe fe5e 	bl	801caec <_Bfree>
 801de30:	e609      	b.n	801da46 <_strtod_l+0x646>
 801de32:	f1b8 0f01 	cmp.w	r8, #1
 801de36:	d103      	bne.n	801de40 <_strtod_l+0xa40>
 801de38:	f1b9 0f00 	cmp.w	r9, #0
 801de3c:	f43f ad95 	beq.w	801d96a <_strtod_l+0x56a>
 801de40:	ed9f 7b55 	vldr	d7, [pc, #340]	; 801df98 <_strtod_l+0xb98>
 801de44:	4f60      	ldr	r7, [pc, #384]	; (801dfc8 <_strtod_l+0xbc8>)
 801de46:	ed8d 7b06 	vstr	d7, [sp, #24]
 801de4a:	2600      	movs	r6, #0
 801de4c:	e7ae      	b.n	801ddac <_strtod_l+0x9ac>
 801de4e:	4f5f      	ldr	r7, [pc, #380]	; (801dfcc <_strtod_l+0xbcc>)
 801de50:	2600      	movs	r6, #0
 801de52:	e7a7      	b.n	801dda4 <_strtod_l+0x9a4>
 801de54:	4b5d      	ldr	r3, [pc, #372]	; (801dfcc <_strtod_l+0xbcc>)
 801de56:	4630      	mov	r0, r6
 801de58:	4639      	mov	r1, r7
 801de5a:	2200      	movs	r2, #0
 801de5c:	f7ea fddc 	bl	8008a18 <__aeabi_dmul>
 801de60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801de62:	4606      	mov	r6, r0
 801de64:	460f      	mov	r7, r1
 801de66:	2b00      	cmp	r3, #0
 801de68:	d09c      	beq.n	801dda4 <_strtod_l+0x9a4>
 801de6a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801de6e:	e79d      	b.n	801ddac <_strtod_l+0x9ac>
 801de70:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 801dfa0 <_strtod_l+0xba0>
 801de74:	ed8d 7b06 	vstr	d7, [sp, #24]
 801de78:	ec57 6b17 	vmov	r6, r7, d7
 801de7c:	e796      	b.n	801ddac <_strtod_l+0x9ac>
 801de7e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801de82:	9b04      	ldr	r3, [sp, #16]
 801de84:	46ca      	mov	sl, r9
 801de86:	2b00      	cmp	r3, #0
 801de88:	d1c2      	bne.n	801de10 <_strtod_l+0xa10>
 801de8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801de8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801de90:	0d1b      	lsrs	r3, r3, #20
 801de92:	051b      	lsls	r3, r3, #20
 801de94:	429a      	cmp	r2, r3
 801de96:	d1bb      	bne.n	801de10 <_strtod_l+0xa10>
 801de98:	4630      	mov	r0, r6
 801de9a:	4639      	mov	r1, r7
 801de9c:	f7eb f91c 	bl	80090d8 <__aeabi_d2lz>
 801dea0:	f7ea fd8c 	bl	80089bc <__aeabi_l2d>
 801dea4:	4602      	mov	r2, r0
 801dea6:	460b      	mov	r3, r1
 801dea8:	4630      	mov	r0, r6
 801deaa:	4639      	mov	r1, r7
 801deac:	f7ea fbfc 	bl	80086a8 <__aeabi_dsub>
 801deb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801deb2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801deb6:	ea43 0308 	orr.w	r3, r3, r8
 801deba:	4313      	orrs	r3, r2
 801debc:	4606      	mov	r6, r0
 801debe:	460f      	mov	r7, r1
 801dec0:	d054      	beq.n	801df6c <_strtod_l+0xb6c>
 801dec2:	a339      	add	r3, pc, #228	; (adr r3, 801dfa8 <_strtod_l+0xba8>)
 801dec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dec8:	f7eb f818 	bl	8008efc <__aeabi_dcmplt>
 801decc:	2800      	cmp	r0, #0
 801dece:	f47f ace5 	bne.w	801d89c <_strtod_l+0x49c>
 801ded2:	a337      	add	r3, pc, #220	; (adr r3, 801dfb0 <_strtod_l+0xbb0>)
 801ded4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ded8:	4630      	mov	r0, r6
 801deda:	4639      	mov	r1, r7
 801dedc:	f7eb f82c 	bl	8008f38 <__aeabi_dcmpgt>
 801dee0:	2800      	cmp	r0, #0
 801dee2:	d095      	beq.n	801de10 <_strtod_l+0xa10>
 801dee4:	e4da      	b.n	801d89c <_strtod_l+0x49c>
 801dee6:	9b04      	ldr	r3, [sp, #16]
 801dee8:	b333      	cbz	r3, 801df38 <_strtod_l+0xb38>
 801deea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801deec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801def0:	d822      	bhi.n	801df38 <_strtod_l+0xb38>
 801def2:	a331      	add	r3, pc, #196	; (adr r3, 801dfb8 <_strtod_l+0xbb8>)
 801def4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801def8:	4630      	mov	r0, r6
 801defa:	4639      	mov	r1, r7
 801defc:	f7eb f808 	bl	8008f10 <__aeabi_dcmple>
 801df00:	b1a0      	cbz	r0, 801df2c <_strtod_l+0xb2c>
 801df02:	4639      	mov	r1, r7
 801df04:	4630      	mov	r0, r6
 801df06:	f7eb f85f 	bl	8008fc8 <__aeabi_d2uiz>
 801df0a:	2801      	cmp	r0, #1
 801df0c:	bf38      	it	cc
 801df0e:	2001      	movcc	r0, #1
 801df10:	f7ea fd08 	bl	8008924 <__aeabi_ui2d>
 801df14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801df16:	4606      	mov	r6, r0
 801df18:	460f      	mov	r7, r1
 801df1a:	bb23      	cbnz	r3, 801df66 <_strtod_l+0xb66>
 801df1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801df20:	9010      	str	r0, [sp, #64]	; 0x40
 801df22:	9311      	str	r3, [sp, #68]	; 0x44
 801df24:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801df28:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801df2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801df2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801df30:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801df34:	1a9b      	subs	r3, r3, r2
 801df36:	930f      	str	r3, [sp, #60]	; 0x3c
 801df38:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801df3c:	eeb0 0a48 	vmov.f32	s0, s16
 801df40:	eef0 0a68 	vmov.f32	s1, s17
 801df44:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801df48:	f7ff f8fc 	bl	801d144 <__ulp>
 801df4c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801df50:	ec53 2b10 	vmov	r2, r3, d0
 801df54:	f7ea fd60 	bl	8008a18 <__aeabi_dmul>
 801df58:	ec53 2b18 	vmov	r2, r3, d8
 801df5c:	f7ea fba6 	bl	80086ac <__adddf3>
 801df60:	4680      	mov	r8, r0
 801df62:	4689      	mov	r9, r1
 801df64:	e78d      	b.n	801de82 <_strtod_l+0xa82>
 801df66:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801df6a:	e7db      	b.n	801df24 <_strtod_l+0xb24>
 801df6c:	a314      	add	r3, pc, #80	; (adr r3, 801dfc0 <_strtod_l+0xbc0>)
 801df6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df72:	f7ea ffc3 	bl	8008efc <__aeabi_dcmplt>
 801df76:	e7b3      	b.n	801dee0 <_strtod_l+0xae0>
 801df78:	2300      	movs	r3, #0
 801df7a:	930a      	str	r3, [sp, #40]	; 0x28
 801df7c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801df7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801df80:	6013      	str	r3, [r2, #0]
 801df82:	f7ff ba7c 	b.w	801d47e <_strtod_l+0x7e>
 801df86:	2a65      	cmp	r2, #101	; 0x65
 801df88:	f43f ab75 	beq.w	801d676 <_strtod_l+0x276>
 801df8c:	2a45      	cmp	r2, #69	; 0x45
 801df8e:	f43f ab72 	beq.w	801d676 <_strtod_l+0x276>
 801df92:	2301      	movs	r3, #1
 801df94:	f7ff bbaa 	b.w	801d6ec <_strtod_l+0x2ec>
 801df98:	00000000 	.word	0x00000000
 801df9c:	bff00000 	.word	0xbff00000
 801dfa0:	00000000 	.word	0x00000000
 801dfa4:	3ff00000 	.word	0x3ff00000
 801dfa8:	94a03595 	.word	0x94a03595
 801dfac:	3fdfffff 	.word	0x3fdfffff
 801dfb0:	35afe535 	.word	0x35afe535
 801dfb4:	3fe00000 	.word	0x3fe00000
 801dfb8:	ffc00000 	.word	0xffc00000
 801dfbc:	41dfffff 	.word	0x41dfffff
 801dfc0:	94a03595 	.word	0x94a03595
 801dfc4:	3fcfffff 	.word	0x3fcfffff
 801dfc8:	3ff00000 	.word	0x3ff00000
 801dfcc:	3fe00000 	.word	0x3fe00000
 801dfd0:	7ff00000 	.word	0x7ff00000
 801dfd4:	7fe00000 	.word	0x7fe00000
 801dfd8:	7c9fffff 	.word	0x7c9fffff
 801dfdc:	7fefffff 	.word	0x7fefffff

0801dfe0 <_strtod_r>:
 801dfe0:	4b01      	ldr	r3, [pc, #4]	; (801dfe8 <_strtod_r+0x8>)
 801dfe2:	f7ff ba0d 	b.w	801d400 <_strtod_l>
 801dfe6:	bf00      	nop
 801dfe8:	20000150 	.word	0x20000150

0801dfec <_strtol_l.constprop.0>:
 801dfec:	2b01      	cmp	r3, #1
 801dfee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dff2:	d001      	beq.n	801dff8 <_strtol_l.constprop.0+0xc>
 801dff4:	2b24      	cmp	r3, #36	; 0x24
 801dff6:	d906      	bls.n	801e006 <_strtol_l.constprop.0+0x1a>
 801dff8:	f7fd fd7a 	bl	801baf0 <__errno>
 801dffc:	2316      	movs	r3, #22
 801dffe:	6003      	str	r3, [r0, #0]
 801e000:	2000      	movs	r0, #0
 801e002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e006:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801e0ec <_strtol_l.constprop.0+0x100>
 801e00a:	460d      	mov	r5, r1
 801e00c:	462e      	mov	r6, r5
 801e00e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e012:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801e016:	f017 0708 	ands.w	r7, r7, #8
 801e01a:	d1f7      	bne.n	801e00c <_strtol_l.constprop.0+0x20>
 801e01c:	2c2d      	cmp	r4, #45	; 0x2d
 801e01e:	d132      	bne.n	801e086 <_strtol_l.constprop.0+0x9a>
 801e020:	782c      	ldrb	r4, [r5, #0]
 801e022:	2701      	movs	r7, #1
 801e024:	1cb5      	adds	r5, r6, #2
 801e026:	2b00      	cmp	r3, #0
 801e028:	d05b      	beq.n	801e0e2 <_strtol_l.constprop.0+0xf6>
 801e02a:	2b10      	cmp	r3, #16
 801e02c:	d109      	bne.n	801e042 <_strtol_l.constprop.0+0x56>
 801e02e:	2c30      	cmp	r4, #48	; 0x30
 801e030:	d107      	bne.n	801e042 <_strtol_l.constprop.0+0x56>
 801e032:	782c      	ldrb	r4, [r5, #0]
 801e034:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801e038:	2c58      	cmp	r4, #88	; 0x58
 801e03a:	d14d      	bne.n	801e0d8 <_strtol_l.constprop.0+0xec>
 801e03c:	786c      	ldrb	r4, [r5, #1]
 801e03e:	2310      	movs	r3, #16
 801e040:	3502      	adds	r5, #2
 801e042:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801e046:	f108 38ff 	add.w	r8, r8, #4294967295
 801e04a:	f04f 0e00 	mov.w	lr, #0
 801e04e:	fbb8 f9f3 	udiv	r9, r8, r3
 801e052:	4676      	mov	r6, lr
 801e054:	fb03 8a19 	mls	sl, r3, r9, r8
 801e058:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801e05c:	f1bc 0f09 	cmp.w	ip, #9
 801e060:	d816      	bhi.n	801e090 <_strtol_l.constprop.0+0xa4>
 801e062:	4664      	mov	r4, ip
 801e064:	42a3      	cmp	r3, r4
 801e066:	dd24      	ble.n	801e0b2 <_strtol_l.constprop.0+0xc6>
 801e068:	f1be 3fff 	cmp.w	lr, #4294967295
 801e06c:	d008      	beq.n	801e080 <_strtol_l.constprop.0+0x94>
 801e06e:	45b1      	cmp	r9, r6
 801e070:	d31c      	bcc.n	801e0ac <_strtol_l.constprop.0+0xc0>
 801e072:	d101      	bne.n	801e078 <_strtol_l.constprop.0+0x8c>
 801e074:	45a2      	cmp	sl, r4
 801e076:	db19      	blt.n	801e0ac <_strtol_l.constprop.0+0xc0>
 801e078:	fb06 4603 	mla	r6, r6, r3, r4
 801e07c:	f04f 0e01 	mov.w	lr, #1
 801e080:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e084:	e7e8      	b.n	801e058 <_strtol_l.constprop.0+0x6c>
 801e086:	2c2b      	cmp	r4, #43	; 0x2b
 801e088:	bf04      	itt	eq
 801e08a:	782c      	ldrbeq	r4, [r5, #0]
 801e08c:	1cb5      	addeq	r5, r6, #2
 801e08e:	e7ca      	b.n	801e026 <_strtol_l.constprop.0+0x3a>
 801e090:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801e094:	f1bc 0f19 	cmp.w	ip, #25
 801e098:	d801      	bhi.n	801e09e <_strtol_l.constprop.0+0xb2>
 801e09a:	3c37      	subs	r4, #55	; 0x37
 801e09c:	e7e2      	b.n	801e064 <_strtol_l.constprop.0+0x78>
 801e09e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801e0a2:	f1bc 0f19 	cmp.w	ip, #25
 801e0a6:	d804      	bhi.n	801e0b2 <_strtol_l.constprop.0+0xc6>
 801e0a8:	3c57      	subs	r4, #87	; 0x57
 801e0aa:	e7db      	b.n	801e064 <_strtol_l.constprop.0+0x78>
 801e0ac:	f04f 3eff 	mov.w	lr, #4294967295
 801e0b0:	e7e6      	b.n	801e080 <_strtol_l.constprop.0+0x94>
 801e0b2:	f1be 3fff 	cmp.w	lr, #4294967295
 801e0b6:	d105      	bne.n	801e0c4 <_strtol_l.constprop.0+0xd8>
 801e0b8:	2322      	movs	r3, #34	; 0x22
 801e0ba:	6003      	str	r3, [r0, #0]
 801e0bc:	4646      	mov	r6, r8
 801e0be:	b942      	cbnz	r2, 801e0d2 <_strtol_l.constprop.0+0xe6>
 801e0c0:	4630      	mov	r0, r6
 801e0c2:	e79e      	b.n	801e002 <_strtol_l.constprop.0+0x16>
 801e0c4:	b107      	cbz	r7, 801e0c8 <_strtol_l.constprop.0+0xdc>
 801e0c6:	4276      	negs	r6, r6
 801e0c8:	2a00      	cmp	r2, #0
 801e0ca:	d0f9      	beq.n	801e0c0 <_strtol_l.constprop.0+0xd4>
 801e0cc:	f1be 0f00 	cmp.w	lr, #0
 801e0d0:	d000      	beq.n	801e0d4 <_strtol_l.constprop.0+0xe8>
 801e0d2:	1e69      	subs	r1, r5, #1
 801e0d4:	6011      	str	r1, [r2, #0]
 801e0d6:	e7f3      	b.n	801e0c0 <_strtol_l.constprop.0+0xd4>
 801e0d8:	2430      	movs	r4, #48	; 0x30
 801e0da:	2b00      	cmp	r3, #0
 801e0dc:	d1b1      	bne.n	801e042 <_strtol_l.constprop.0+0x56>
 801e0de:	2308      	movs	r3, #8
 801e0e0:	e7af      	b.n	801e042 <_strtol_l.constprop.0+0x56>
 801e0e2:	2c30      	cmp	r4, #48	; 0x30
 801e0e4:	d0a5      	beq.n	801e032 <_strtol_l.constprop.0+0x46>
 801e0e6:	230a      	movs	r3, #10
 801e0e8:	e7ab      	b.n	801e042 <_strtol_l.constprop.0+0x56>
 801e0ea:	bf00      	nop
 801e0ec:	08021789 	.word	0x08021789

0801e0f0 <_strtol_r>:
 801e0f0:	f7ff bf7c 	b.w	801dfec <_strtol_l.constprop.0>

0801e0f4 <__ssputs_r>:
 801e0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e0f8:	688e      	ldr	r6, [r1, #8]
 801e0fa:	461f      	mov	r7, r3
 801e0fc:	42be      	cmp	r6, r7
 801e0fe:	680b      	ldr	r3, [r1, #0]
 801e100:	4682      	mov	sl, r0
 801e102:	460c      	mov	r4, r1
 801e104:	4690      	mov	r8, r2
 801e106:	d82c      	bhi.n	801e162 <__ssputs_r+0x6e>
 801e108:	898a      	ldrh	r2, [r1, #12]
 801e10a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801e10e:	d026      	beq.n	801e15e <__ssputs_r+0x6a>
 801e110:	6965      	ldr	r5, [r4, #20]
 801e112:	6909      	ldr	r1, [r1, #16]
 801e114:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e118:	eba3 0901 	sub.w	r9, r3, r1
 801e11c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e120:	1c7b      	adds	r3, r7, #1
 801e122:	444b      	add	r3, r9
 801e124:	106d      	asrs	r5, r5, #1
 801e126:	429d      	cmp	r5, r3
 801e128:	bf38      	it	cc
 801e12a:	461d      	movcc	r5, r3
 801e12c:	0553      	lsls	r3, r2, #21
 801e12e:	d527      	bpl.n	801e180 <__ssputs_r+0x8c>
 801e130:	4629      	mov	r1, r5
 801e132:	f7fe fc0f 	bl	801c954 <_malloc_r>
 801e136:	4606      	mov	r6, r0
 801e138:	b360      	cbz	r0, 801e194 <__ssputs_r+0xa0>
 801e13a:	6921      	ldr	r1, [r4, #16]
 801e13c:	464a      	mov	r2, r9
 801e13e:	f7fd fd04 	bl	801bb4a <memcpy>
 801e142:	89a3      	ldrh	r3, [r4, #12]
 801e144:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801e148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e14c:	81a3      	strh	r3, [r4, #12]
 801e14e:	6126      	str	r6, [r4, #16]
 801e150:	6165      	str	r5, [r4, #20]
 801e152:	444e      	add	r6, r9
 801e154:	eba5 0509 	sub.w	r5, r5, r9
 801e158:	6026      	str	r6, [r4, #0]
 801e15a:	60a5      	str	r5, [r4, #8]
 801e15c:	463e      	mov	r6, r7
 801e15e:	42be      	cmp	r6, r7
 801e160:	d900      	bls.n	801e164 <__ssputs_r+0x70>
 801e162:	463e      	mov	r6, r7
 801e164:	6820      	ldr	r0, [r4, #0]
 801e166:	4632      	mov	r2, r6
 801e168:	4641      	mov	r1, r8
 801e16a:	f000 fba3 	bl	801e8b4 <memmove>
 801e16e:	68a3      	ldr	r3, [r4, #8]
 801e170:	1b9b      	subs	r3, r3, r6
 801e172:	60a3      	str	r3, [r4, #8]
 801e174:	6823      	ldr	r3, [r4, #0]
 801e176:	4433      	add	r3, r6
 801e178:	6023      	str	r3, [r4, #0]
 801e17a:	2000      	movs	r0, #0
 801e17c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e180:	462a      	mov	r2, r5
 801e182:	f000 ff9a 	bl	801f0ba <_realloc_r>
 801e186:	4606      	mov	r6, r0
 801e188:	2800      	cmp	r0, #0
 801e18a:	d1e0      	bne.n	801e14e <__ssputs_r+0x5a>
 801e18c:	6921      	ldr	r1, [r4, #16]
 801e18e:	4650      	mov	r0, sl
 801e190:	f7fe fb6c 	bl	801c86c <_free_r>
 801e194:	230c      	movs	r3, #12
 801e196:	f8ca 3000 	str.w	r3, [sl]
 801e19a:	89a3      	ldrh	r3, [r4, #12]
 801e19c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e1a0:	81a3      	strh	r3, [r4, #12]
 801e1a2:	f04f 30ff 	mov.w	r0, #4294967295
 801e1a6:	e7e9      	b.n	801e17c <__ssputs_r+0x88>

0801e1a8 <_svfiprintf_r>:
 801e1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1ac:	4698      	mov	r8, r3
 801e1ae:	898b      	ldrh	r3, [r1, #12]
 801e1b0:	061b      	lsls	r3, r3, #24
 801e1b2:	b09d      	sub	sp, #116	; 0x74
 801e1b4:	4607      	mov	r7, r0
 801e1b6:	460d      	mov	r5, r1
 801e1b8:	4614      	mov	r4, r2
 801e1ba:	d50e      	bpl.n	801e1da <_svfiprintf_r+0x32>
 801e1bc:	690b      	ldr	r3, [r1, #16]
 801e1be:	b963      	cbnz	r3, 801e1da <_svfiprintf_r+0x32>
 801e1c0:	2140      	movs	r1, #64	; 0x40
 801e1c2:	f7fe fbc7 	bl	801c954 <_malloc_r>
 801e1c6:	6028      	str	r0, [r5, #0]
 801e1c8:	6128      	str	r0, [r5, #16]
 801e1ca:	b920      	cbnz	r0, 801e1d6 <_svfiprintf_r+0x2e>
 801e1cc:	230c      	movs	r3, #12
 801e1ce:	603b      	str	r3, [r7, #0]
 801e1d0:	f04f 30ff 	mov.w	r0, #4294967295
 801e1d4:	e0d0      	b.n	801e378 <_svfiprintf_r+0x1d0>
 801e1d6:	2340      	movs	r3, #64	; 0x40
 801e1d8:	616b      	str	r3, [r5, #20]
 801e1da:	2300      	movs	r3, #0
 801e1dc:	9309      	str	r3, [sp, #36]	; 0x24
 801e1de:	2320      	movs	r3, #32
 801e1e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e1e4:	f8cd 800c 	str.w	r8, [sp, #12]
 801e1e8:	2330      	movs	r3, #48	; 0x30
 801e1ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801e390 <_svfiprintf_r+0x1e8>
 801e1ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e1f2:	f04f 0901 	mov.w	r9, #1
 801e1f6:	4623      	mov	r3, r4
 801e1f8:	469a      	mov	sl, r3
 801e1fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e1fe:	b10a      	cbz	r2, 801e204 <_svfiprintf_r+0x5c>
 801e200:	2a25      	cmp	r2, #37	; 0x25
 801e202:	d1f9      	bne.n	801e1f8 <_svfiprintf_r+0x50>
 801e204:	ebba 0b04 	subs.w	fp, sl, r4
 801e208:	d00b      	beq.n	801e222 <_svfiprintf_r+0x7a>
 801e20a:	465b      	mov	r3, fp
 801e20c:	4622      	mov	r2, r4
 801e20e:	4629      	mov	r1, r5
 801e210:	4638      	mov	r0, r7
 801e212:	f7ff ff6f 	bl	801e0f4 <__ssputs_r>
 801e216:	3001      	adds	r0, #1
 801e218:	f000 80a9 	beq.w	801e36e <_svfiprintf_r+0x1c6>
 801e21c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e21e:	445a      	add	r2, fp
 801e220:	9209      	str	r2, [sp, #36]	; 0x24
 801e222:	f89a 3000 	ldrb.w	r3, [sl]
 801e226:	2b00      	cmp	r3, #0
 801e228:	f000 80a1 	beq.w	801e36e <_svfiprintf_r+0x1c6>
 801e22c:	2300      	movs	r3, #0
 801e22e:	f04f 32ff 	mov.w	r2, #4294967295
 801e232:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e236:	f10a 0a01 	add.w	sl, sl, #1
 801e23a:	9304      	str	r3, [sp, #16]
 801e23c:	9307      	str	r3, [sp, #28]
 801e23e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e242:	931a      	str	r3, [sp, #104]	; 0x68
 801e244:	4654      	mov	r4, sl
 801e246:	2205      	movs	r2, #5
 801e248:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e24c:	4850      	ldr	r0, [pc, #320]	; (801e390 <_svfiprintf_r+0x1e8>)
 801e24e:	f7ea f9cf 	bl	80085f0 <memchr>
 801e252:	9a04      	ldr	r2, [sp, #16]
 801e254:	b9d8      	cbnz	r0, 801e28e <_svfiprintf_r+0xe6>
 801e256:	06d0      	lsls	r0, r2, #27
 801e258:	bf44      	itt	mi
 801e25a:	2320      	movmi	r3, #32
 801e25c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e260:	0711      	lsls	r1, r2, #28
 801e262:	bf44      	itt	mi
 801e264:	232b      	movmi	r3, #43	; 0x2b
 801e266:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e26a:	f89a 3000 	ldrb.w	r3, [sl]
 801e26e:	2b2a      	cmp	r3, #42	; 0x2a
 801e270:	d015      	beq.n	801e29e <_svfiprintf_r+0xf6>
 801e272:	9a07      	ldr	r2, [sp, #28]
 801e274:	4654      	mov	r4, sl
 801e276:	2000      	movs	r0, #0
 801e278:	f04f 0c0a 	mov.w	ip, #10
 801e27c:	4621      	mov	r1, r4
 801e27e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e282:	3b30      	subs	r3, #48	; 0x30
 801e284:	2b09      	cmp	r3, #9
 801e286:	d94d      	bls.n	801e324 <_svfiprintf_r+0x17c>
 801e288:	b1b0      	cbz	r0, 801e2b8 <_svfiprintf_r+0x110>
 801e28a:	9207      	str	r2, [sp, #28]
 801e28c:	e014      	b.n	801e2b8 <_svfiprintf_r+0x110>
 801e28e:	eba0 0308 	sub.w	r3, r0, r8
 801e292:	fa09 f303 	lsl.w	r3, r9, r3
 801e296:	4313      	orrs	r3, r2
 801e298:	9304      	str	r3, [sp, #16]
 801e29a:	46a2      	mov	sl, r4
 801e29c:	e7d2      	b.n	801e244 <_svfiprintf_r+0x9c>
 801e29e:	9b03      	ldr	r3, [sp, #12]
 801e2a0:	1d19      	adds	r1, r3, #4
 801e2a2:	681b      	ldr	r3, [r3, #0]
 801e2a4:	9103      	str	r1, [sp, #12]
 801e2a6:	2b00      	cmp	r3, #0
 801e2a8:	bfbb      	ittet	lt
 801e2aa:	425b      	neglt	r3, r3
 801e2ac:	f042 0202 	orrlt.w	r2, r2, #2
 801e2b0:	9307      	strge	r3, [sp, #28]
 801e2b2:	9307      	strlt	r3, [sp, #28]
 801e2b4:	bfb8      	it	lt
 801e2b6:	9204      	strlt	r2, [sp, #16]
 801e2b8:	7823      	ldrb	r3, [r4, #0]
 801e2ba:	2b2e      	cmp	r3, #46	; 0x2e
 801e2bc:	d10c      	bne.n	801e2d8 <_svfiprintf_r+0x130>
 801e2be:	7863      	ldrb	r3, [r4, #1]
 801e2c0:	2b2a      	cmp	r3, #42	; 0x2a
 801e2c2:	d134      	bne.n	801e32e <_svfiprintf_r+0x186>
 801e2c4:	9b03      	ldr	r3, [sp, #12]
 801e2c6:	1d1a      	adds	r2, r3, #4
 801e2c8:	681b      	ldr	r3, [r3, #0]
 801e2ca:	9203      	str	r2, [sp, #12]
 801e2cc:	2b00      	cmp	r3, #0
 801e2ce:	bfb8      	it	lt
 801e2d0:	f04f 33ff 	movlt.w	r3, #4294967295
 801e2d4:	3402      	adds	r4, #2
 801e2d6:	9305      	str	r3, [sp, #20]
 801e2d8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801e3a0 <_svfiprintf_r+0x1f8>
 801e2dc:	7821      	ldrb	r1, [r4, #0]
 801e2de:	2203      	movs	r2, #3
 801e2e0:	4650      	mov	r0, sl
 801e2e2:	f7ea f985 	bl	80085f0 <memchr>
 801e2e6:	b138      	cbz	r0, 801e2f8 <_svfiprintf_r+0x150>
 801e2e8:	9b04      	ldr	r3, [sp, #16]
 801e2ea:	eba0 000a 	sub.w	r0, r0, sl
 801e2ee:	2240      	movs	r2, #64	; 0x40
 801e2f0:	4082      	lsls	r2, r0
 801e2f2:	4313      	orrs	r3, r2
 801e2f4:	3401      	adds	r4, #1
 801e2f6:	9304      	str	r3, [sp, #16]
 801e2f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e2fc:	4825      	ldr	r0, [pc, #148]	; (801e394 <_svfiprintf_r+0x1ec>)
 801e2fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e302:	2206      	movs	r2, #6
 801e304:	f7ea f974 	bl	80085f0 <memchr>
 801e308:	2800      	cmp	r0, #0
 801e30a:	d038      	beq.n	801e37e <_svfiprintf_r+0x1d6>
 801e30c:	4b22      	ldr	r3, [pc, #136]	; (801e398 <_svfiprintf_r+0x1f0>)
 801e30e:	bb1b      	cbnz	r3, 801e358 <_svfiprintf_r+0x1b0>
 801e310:	9b03      	ldr	r3, [sp, #12]
 801e312:	3307      	adds	r3, #7
 801e314:	f023 0307 	bic.w	r3, r3, #7
 801e318:	3308      	adds	r3, #8
 801e31a:	9303      	str	r3, [sp, #12]
 801e31c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e31e:	4433      	add	r3, r6
 801e320:	9309      	str	r3, [sp, #36]	; 0x24
 801e322:	e768      	b.n	801e1f6 <_svfiprintf_r+0x4e>
 801e324:	fb0c 3202 	mla	r2, ip, r2, r3
 801e328:	460c      	mov	r4, r1
 801e32a:	2001      	movs	r0, #1
 801e32c:	e7a6      	b.n	801e27c <_svfiprintf_r+0xd4>
 801e32e:	2300      	movs	r3, #0
 801e330:	3401      	adds	r4, #1
 801e332:	9305      	str	r3, [sp, #20]
 801e334:	4619      	mov	r1, r3
 801e336:	f04f 0c0a 	mov.w	ip, #10
 801e33a:	4620      	mov	r0, r4
 801e33c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e340:	3a30      	subs	r2, #48	; 0x30
 801e342:	2a09      	cmp	r2, #9
 801e344:	d903      	bls.n	801e34e <_svfiprintf_r+0x1a6>
 801e346:	2b00      	cmp	r3, #0
 801e348:	d0c6      	beq.n	801e2d8 <_svfiprintf_r+0x130>
 801e34a:	9105      	str	r1, [sp, #20]
 801e34c:	e7c4      	b.n	801e2d8 <_svfiprintf_r+0x130>
 801e34e:	fb0c 2101 	mla	r1, ip, r1, r2
 801e352:	4604      	mov	r4, r0
 801e354:	2301      	movs	r3, #1
 801e356:	e7f0      	b.n	801e33a <_svfiprintf_r+0x192>
 801e358:	ab03      	add	r3, sp, #12
 801e35a:	9300      	str	r3, [sp, #0]
 801e35c:	462a      	mov	r2, r5
 801e35e:	4b0f      	ldr	r3, [pc, #60]	; (801e39c <_svfiprintf_r+0x1f4>)
 801e360:	a904      	add	r1, sp, #16
 801e362:	4638      	mov	r0, r7
 801e364:	f7fc fb38 	bl	801a9d8 <_printf_float>
 801e368:	1c42      	adds	r2, r0, #1
 801e36a:	4606      	mov	r6, r0
 801e36c:	d1d6      	bne.n	801e31c <_svfiprintf_r+0x174>
 801e36e:	89ab      	ldrh	r3, [r5, #12]
 801e370:	065b      	lsls	r3, r3, #25
 801e372:	f53f af2d 	bmi.w	801e1d0 <_svfiprintf_r+0x28>
 801e376:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e378:	b01d      	add	sp, #116	; 0x74
 801e37a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e37e:	ab03      	add	r3, sp, #12
 801e380:	9300      	str	r3, [sp, #0]
 801e382:	462a      	mov	r2, r5
 801e384:	4b05      	ldr	r3, [pc, #20]	; (801e39c <_svfiprintf_r+0x1f4>)
 801e386:	a904      	add	r1, sp, #16
 801e388:	4638      	mov	r0, r7
 801e38a:	f7fc fdc9 	bl	801af20 <_printf_i>
 801e38e:	e7eb      	b.n	801e368 <_svfiprintf_r+0x1c0>
 801e390:	08021889 	.word	0x08021889
 801e394:	08021893 	.word	0x08021893
 801e398:	0801a9d9 	.word	0x0801a9d9
 801e39c:	0801e0f5 	.word	0x0801e0f5
 801e3a0:	0802188f 	.word	0x0802188f

0801e3a4 <__sfputc_r>:
 801e3a4:	6893      	ldr	r3, [r2, #8]
 801e3a6:	3b01      	subs	r3, #1
 801e3a8:	2b00      	cmp	r3, #0
 801e3aa:	b410      	push	{r4}
 801e3ac:	6093      	str	r3, [r2, #8]
 801e3ae:	da08      	bge.n	801e3c2 <__sfputc_r+0x1e>
 801e3b0:	6994      	ldr	r4, [r2, #24]
 801e3b2:	42a3      	cmp	r3, r4
 801e3b4:	db01      	blt.n	801e3ba <__sfputc_r+0x16>
 801e3b6:	290a      	cmp	r1, #10
 801e3b8:	d103      	bne.n	801e3c2 <__sfputc_r+0x1e>
 801e3ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e3be:	f7fd bab0 	b.w	801b922 <__swbuf_r>
 801e3c2:	6813      	ldr	r3, [r2, #0]
 801e3c4:	1c58      	adds	r0, r3, #1
 801e3c6:	6010      	str	r0, [r2, #0]
 801e3c8:	7019      	strb	r1, [r3, #0]
 801e3ca:	4608      	mov	r0, r1
 801e3cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e3d0:	4770      	bx	lr

0801e3d2 <__sfputs_r>:
 801e3d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e3d4:	4606      	mov	r6, r0
 801e3d6:	460f      	mov	r7, r1
 801e3d8:	4614      	mov	r4, r2
 801e3da:	18d5      	adds	r5, r2, r3
 801e3dc:	42ac      	cmp	r4, r5
 801e3de:	d101      	bne.n	801e3e4 <__sfputs_r+0x12>
 801e3e0:	2000      	movs	r0, #0
 801e3e2:	e007      	b.n	801e3f4 <__sfputs_r+0x22>
 801e3e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e3e8:	463a      	mov	r2, r7
 801e3ea:	4630      	mov	r0, r6
 801e3ec:	f7ff ffda 	bl	801e3a4 <__sfputc_r>
 801e3f0:	1c43      	adds	r3, r0, #1
 801e3f2:	d1f3      	bne.n	801e3dc <__sfputs_r+0xa>
 801e3f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e3f8 <_vfiprintf_r>:
 801e3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3fc:	460d      	mov	r5, r1
 801e3fe:	b09d      	sub	sp, #116	; 0x74
 801e400:	4614      	mov	r4, r2
 801e402:	4698      	mov	r8, r3
 801e404:	4606      	mov	r6, r0
 801e406:	b118      	cbz	r0, 801e410 <_vfiprintf_r+0x18>
 801e408:	6a03      	ldr	r3, [r0, #32]
 801e40a:	b90b      	cbnz	r3, 801e410 <_vfiprintf_r+0x18>
 801e40c:	f7fd f946 	bl	801b69c <__sinit>
 801e410:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e412:	07d9      	lsls	r1, r3, #31
 801e414:	d405      	bmi.n	801e422 <_vfiprintf_r+0x2a>
 801e416:	89ab      	ldrh	r3, [r5, #12]
 801e418:	059a      	lsls	r2, r3, #22
 801e41a:	d402      	bmi.n	801e422 <_vfiprintf_r+0x2a>
 801e41c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e41e:	f7fd fb92 	bl	801bb46 <__retarget_lock_acquire_recursive>
 801e422:	89ab      	ldrh	r3, [r5, #12]
 801e424:	071b      	lsls	r3, r3, #28
 801e426:	d501      	bpl.n	801e42c <_vfiprintf_r+0x34>
 801e428:	692b      	ldr	r3, [r5, #16]
 801e42a:	b99b      	cbnz	r3, 801e454 <_vfiprintf_r+0x5c>
 801e42c:	4629      	mov	r1, r5
 801e42e:	4630      	mov	r0, r6
 801e430:	f7fd fab4 	bl	801b99c <__swsetup_r>
 801e434:	b170      	cbz	r0, 801e454 <_vfiprintf_r+0x5c>
 801e436:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e438:	07dc      	lsls	r4, r3, #31
 801e43a:	d504      	bpl.n	801e446 <_vfiprintf_r+0x4e>
 801e43c:	f04f 30ff 	mov.w	r0, #4294967295
 801e440:	b01d      	add	sp, #116	; 0x74
 801e442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e446:	89ab      	ldrh	r3, [r5, #12]
 801e448:	0598      	lsls	r0, r3, #22
 801e44a:	d4f7      	bmi.n	801e43c <_vfiprintf_r+0x44>
 801e44c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e44e:	f7fd fb7b 	bl	801bb48 <__retarget_lock_release_recursive>
 801e452:	e7f3      	b.n	801e43c <_vfiprintf_r+0x44>
 801e454:	2300      	movs	r3, #0
 801e456:	9309      	str	r3, [sp, #36]	; 0x24
 801e458:	2320      	movs	r3, #32
 801e45a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e45e:	f8cd 800c 	str.w	r8, [sp, #12]
 801e462:	2330      	movs	r3, #48	; 0x30
 801e464:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801e618 <_vfiprintf_r+0x220>
 801e468:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e46c:	f04f 0901 	mov.w	r9, #1
 801e470:	4623      	mov	r3, r4
 801e472:	469a      	mov	sl, r3
 801e474:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e478:	b10a      	cbz	r2, 801e47e <_vfiprintf_r+0x86>
 801e47a:	2a25      	cmp	r2, #37	; 0x25
 801e47c:	d1f9      	bne.n	801e472 <_vfiprintf_r+0x7a>
 801e47e:	ebba 0b04 	subs.w	fp, sl, r4
 801e482:	d00b      	beq.n	801e49c <_vfiprintf_r+0xa4>
 801e484:	465b      	mov	r3, fp
 801e486:	4622      	mov	r2, r4
 801e488:	4629      	mov	r1, r5
 801e48a:	4630      	mov	r0, r6
 801e48c:	f7ff ffa1 	bl	801e3d2 <__sfputs_r>
 801e490:	3001      	adds	r0, #1
 801e492:	f000 80a9 	beq.w	801e5e8 <_vfiprintf_r+0x1f0>
 801e496:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e498:	445a      	add	r2, fp
 801e49a:	9209      	str	r2, [sp, #36]	; 0x24
 801e49c:	f89a 3000 	ldrb.w	r3, [sl]
 801e4a0:	2b00      	cmp	r3, #0
 801e4a2:	f000 80a1 	beq.w	801e5e8 <_vfiprintf_r+0x1f0>
 801e4a6:	2300      	movs	r3, #0
 801e4a8:	f04f 32ff 	mov.w	r2, #4294967295
 801e4ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e4b0:	f10a 0a01 	add.w	sl, sl, #1
 801e4b4:	9304      	str	r3, [sp, #16]
 801e4b6:	9307      	str	r3, [sp, #28]
 801e4b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e4bc:	931a      	str	r3, [sp, #104]	; 0x68
 801e4be:	4654      	mov	r4, sl
 801e4c0:	2205      	movs	r2, #5
 801e4c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e4c6:	4854      	ldr	r0, [pc, #336]	; (801e618 <_vfiprintf_r+0x220>)
 801e4c8:	f7ea f892 	bl	80085f0 <memchr>
 801e4cc:	9a04      	ldr	r2, [sp, #16]
 801e4ce:	b9d8      	cbnz	r0, 801e508 <_vfiprintf_r+0x110>
 801e4d0:	06d1      	lsls	r1, r2, #27
 801e4d2:	bf44      	itt	mi
 801e4d4:	2320      	movmi	r3, #32
 801e4d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e4da:	0713      	lsls	r3, r2, #28
 801e4dc:	bf44      	itt	mi
 801e4de:	232b      	movmi	r3, #43	; 0x2b
 801e4e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e4e4:	f89a 3000 	ldrb.w	r3, [sl]
 801e4e8:	2b2a      	cmp	r3, #42	; 0x2a
 801e4ea:	d015      	beq.n	801e518 <_vfiprintf_r+0x120>
 801e4ec:	9a07      	ldr	r2, [sp, #28]
 801e4ee:	4654      	mov	r4, sl
 801e4f0:	2000      	movs	r0, #0
 801e4f2:	f04f 0c0a 	mov.w	ip, #10
 801e4f6:	4621      	mov	r1, r4
 801e4f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e4fc:	3b30      	subs	r3, #48	; 0x30
 801e4fe:	2b09      	cmp	r3, #9
 801e500:	d94d      	bls.n	801e59e <_vfiprintf_r+0x1a6>
 801e502:	b1b0      	cbz	r0, 801e532 <_vfiprintf_r+0x13a>
 801e504:	9207      	str	r2, [sp, #28]
 801e506:	e014      	b.n	801e532 <_vfiprintf_r+0x13a>
 801e508:	eba0 0308 	sub.w	r3, r0, r8
 801e50c:	fa09 f303 	lsl.w	r3, r9, r3
 801e510:	4313      	orrs	r3, r2
 801e512:	9304      	str	r3, [sp, #16]
 801e514:	46a2      	mov	sl, r4
 801e516:	e7d2      	b.n	801e4be <_vfiprintf_r+0xc6>
 801e518:	9b03      	ldr	r3, [sp, #12]
 801e51a:	1d19      	adds	r1, r3, #4
 801e51c:	681b      	ldr	r3, [r3, #0]
 801e51e:	9103      	str	r1, [sp, #12]
 801e520:	2b00      	cmp	r3, #0
 801e522:	bfbb      	ittet	lt
 801e524:	425b      	neglt	r3, r3
 801e526:	f042 0202 	orrlt.w	r2, r2, #2
 801e52a:	9307      	strge	r3, [sp, #28]
 801e52c:	9307      	strlt	r3, [sp, #28]
 801e52e:	bfb8      	it	lt
 801e530:	9204      	strlt	r2, [sp, #16]
 801e532:	7823      	ldrb	r3, [r4, #0]
 801e534:	2b2e      	cmp	r3, #46	; 0x2e
 801e536:	d10c      	bne.n	801e552 <_vfiprintf_r+0x15a>
 801e538:	7863      	ldrb	r3, [r4, #1]
 801e53a:	2b2a      	cmp	r3, #42	; 0x2a
 801e53c:	d134      	bne.n	801e5a8 <_vfiprintf_r+0x1b0>
 801e53e:	9b03      	ldr	r3, [sp, #12]
 801e540:	1d1a      	adds	r2, r3, #4
 801e542:	681b      	ldr	r3, [r3, #0]
 801e544:	9203      	str	r2, [sp, #12]
 801e546:	2b00      	cmp	r3, #0
 801e548:	bfb8      	it	lt
 801e54a:	f04f 33ff 	movlt.w	r3, #4294967295
 801e54e:	3402      	adds	r4, #2
 801e550:	9305      	str	r3, [sp, #20]
 801e552:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801e628 <_vfiprintf_r+0x230>
 801e556:	7821      	ldrb	r1, [r4, #0]
 801e558:	2203      	movs	r2, #3
 801e55a:	4650      	mov	r0, sl
 801e55c:	f7ea f848 	bl	80085f0 <memchr>
 801e560:	b138      	cbz	r0, 801e572 <_vfiprintf_r+0x17a>
 801e562:	9b04      	ldr	r3, [sp, #16]
 801e564:	eba0 000a 	sub.w	r0, r0, sl
 801e568:	2240      	movs	r2, #64	; 0x40
 801e56a:	4082      	lsls	r2, r0
 801e56c:	4313      	orrs	r3, r2
 801e56e:	3401      	adds	r4, #1
 801e570:	9304      	str	r3, [sp, #16]
 801e572:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e576:	4829      	ldr	r0, [pc, #164]	; (801e61c <_vfiprintf_r+0x224>)
 801e578:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e57c:	2206      	movs	r2, #6
 801e57e:	f7ea f837 	bl	80085f0 <memchr>
 801e582:	2800      	cmp	r0, #0
 801e584:	d03f      	beq.n	801e606 <_vfiprintf_r+0x20e>
 801e586:	4b26      	ldr	r3, [pc, #152]	; (801e620 <_vfiprintf_r+0x228>)
 801e588:	bb1b      	cbnz	r3, 801e5d2 <_vfiprintf_r+0x1da>
 801e58a:	9b03      	ldr	r3, [sp, #12]
 801e58c:	3307      	adds	r3, #7
 801e58e:	f023 0307 	bic.w	r3, r3, #7
 801e592:	3308      	adds	r3, #8
 801e594:	9303      	str	r3, [sp, #12]
 801e596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e598:	443b      	add	r3, r7
 801e59a:	9309      	str	r3, [sp, #36]	; 0x24
 801e59c:	e768      	b.n	801e470 <_vfiprintf_r+0x78>
 801e59e:	fb0c 3202 	mla	r2, ip, r2, r3
 801e5a2:	460c      	mov	r4, r1
 801e5a4:	2001      	movs	r0, #1
 801e5a6:	e7a6      	b.n	801e4f6 <_vfiprintf_r+0xfe>
 801e5a8:	2300      	movs	r3, #0
 801e5aa:	3401      	adds	r4, #1
 801e5ac:	9305      	str	r3, [sp, #20]
 801e5ae:	4619      	mov	r1, r3
 801e5b0:	f04f 0c0a 	mov.w	ip, #10
 801e5b4:	4620      	mov	r0, r4
 801e5b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e5ba:	3a30      	subs	r2, #48	; 0x30
 801e5bc:	2a09      	cmp	r2, #9
 801e5be:	d903      	bls.n	801e5c8 <_vfiprintf_r+0x1d0>
 801e5c0:	2b00      	cmp	r3, #0
 801e5c2:	d0c6      	beq.n	801e552 <_vfiprintf_r+0x15a>
 801e5c4:	9105      	str	r1, [sp, #20]
 801e5c6:	e7c4      	b.n	801e552 <_vfiprintf_r+0x15a>
 801e5c8:	fb0c 2101 	mla	r1, ip, r1, r2
 801e5cc:	4604      	mov	r4, r0
 801e5ce:	2301      	movs	r3, #1
 801e5d0:	e7f0      	b.n	801e5b4 <_vfiprintf_r+0x1bc>
 801e5d2:	ab03      	add	r3, sp, #12
 801e5d4:	9300      	str	r3, [sp, #0]
 801e5d6:	462a      	mov	r2, r5
 801e5d8:	4b12      	ldr	r3, [pc, #72]	; (801e624 <_vfiprintf_r+0x22c>)
 801e5da:	a904      	add	r1, sp, #16
 801e5dc:	4630      	mov	r0, r6
 801e5de:	f7fc f9fb 	bl	801a9d8 <_printf_float>
 801e5e2:	4607      	mov	r7, r0
 801e5e4:	1c78      	adds	r0, r7, #1
 801e5e6:	d1d6      	bne.n	801e596 <_vfiprintf_r+0x19e>
 801e5e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e5ea:	07d9      	lsls	r1, r3, #31
 801e5ec:	d405      	bmi.n	801e5fa <_vfiprintf_r+0x202>
 801e5ee:	89ab      	ldrh	r3, [r5, #12]
 801e5f0:	059a      	lsls	r2, r3, #22
 801e5f2:	d402      	bmi.n	801e5fa <_vfiprintf_r+0x202>
 801e5f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e5f6:	f7fd faa7 	bl	801bb48 <__retarget_lock_release_recursive>
 801e5fa:	89ab      	ldrh	r3, [r5, #12]
 801e5fc:	065b      	lsls	r3, r3, #25
 801e5fe:	f53f af1d 	bmi.w	801e43c <_vfiprintf_r+0x44>
 801e602:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e604:	e71c      	b.n	801e440 <_vfiprintf_r+0x48>
 801e606:	ab03      	add	r3, sp, #12
 801e608:	9300      	str	r3, [sp, #0]
 801e60a:	462a      	mov	r2, r5
 801e60c:	4b05      	ldr	r3, [pc, #20]	; (801e624 <_vfiprintf_r+0x22c>)
 801e60e:	a904      	add	r1, sp, #16
 801e610:	4630      	mov	r0, r6
 801e612:	f7fc fc85 	bl	801af20 <_printf_i>
 801e616:	e7e4      	b.n	801e5e2 <_vfiprintf_r+0x1ea>
 801e618:	08021889 	.word	0x08021889
 801e61c:	08021893 	.word	0x08021893
 801e620:	0801a9d9 	.word	0x0801a9d9
 801e624:	0801e3d3 	.word	0x0801e3d3
 801e628:	0802188f 	.word	0x0802188f

0801e62c <__sflush_r>:
 801e62c:	898a      	ldrh	r2, [r1, #12]
 801e62e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e632:	4605      	mov	r5, r0
 801e634:	0710      	lsls	r0, r2, #28
 801e636:	460c      	mov	r4, r1
 801e638:	d458      	bmi.n	801e6ec <__sflush_r+0xc0>
 801e63a:	684b      	ldr	r3, [r1, #4]
 801e63c:	2b00      	cmp	r3, #0
 801e63e:	dc05      	bgt.n	801e64c <__sflush_r+0x20>
 801e640:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e642:	2b00      	cmp	r3, #0
 801e644:	dc02      	bgt.n	801e64c <__sflush_r+0x20>
 801e646:	2000      	movs	r0, #0
 801e648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e64c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e64e:	2e00      	cmp	r6, #0
 801e650:	d0f9      	beq.n	801e646 <__sflush_r+0x1a>
 801e652:	2300      	movs	r3, #0
 801e654:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e658:	682f      	ldr	r7, [r5, #0]
 801e65a:	6a21      	ldr	r1, [r4, #32]
 801e65c:	602b      	str	r3, [r5, #0]
 801e65e:	d032      	beq.n	801e6c6 <__sflush_r+0x9a>
 801e660:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e662:	89a3      	ldrh	r3, [r4, #12]
 801e664:	075a      	lsls	r2, r3, #29
 801e666:	d505      	bpl.n	801e674 <__sflush_r+0x48>
 801e668:	6863      	ldr	r3, [r4, #4]
 801e66a:	1ac0      	subs	r0, r0, r3
 801e66c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e66e:	b10b      	cbz	r3, 801e674 <__sflush_r+0x48>
 801e670:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e672:	1ac0      	subs	r0, r0, r3
 801e674:	2300      	movs	r3, #0
 801e676:	4602      	mov	r2, r0
 801e678:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e67a:	6a21      	ldr	r1, [r4, #32]
 801e67c:	4628      	mov	r0, r5
 801e67e:	47b0      	blx	r6
 801e680:	1c43      	adds	r3, r0, #1
 801e682:	89a3      	ldrh	r3, [r4, #12]
 801e684:	d106      	bne.n	801e694 <__sflush_r+0x68>
 801e686:	6829      	ldr	r1, [r5, #0]
 801e688:	291d      	cmp	r1, #29
 801e68a:	d82b      	bhi.n	801e6e4 <__sflush_r+0xb8>
 801e68c:	4a29      	ldr	r2, [pc, #164]	; (801e734 <__sflush_r+0x108>)
 801e68e:	410a      	asrs	r2, r1
 801e690:	07d6      	lsls	r6, r2, #31
 801e692:	d427      	bmi.n	801e6e4 <__sflush_r+0xb8>
 801e694:	2200      	movs	r2, #0
 801e696:	6062      	str	r2, [r4, #4]
 801e698:	04d9      	lsls	r1, r3, #19
 801e69a:	6922      	ldr	r2, [r4, #16]
 801e69c:	6022      	str	r2, [r4, #0]
 801e69e:	d504      	bpl.n	801e6aa <__sflush_r+0x7e>
 801e6a0:	1c42      	adds	r2, r0, #1
 801e6a2:	d101      	bne.n	801e6a8 <__sflush_r+0x7c>
 801e6a4:	682b      	ldr	r3, [r5, #0]
 801e6a6:	b903      	cbnz	r3, 801e6aa <__sflush_r+0x7e>
 801e6a8:	6560      	str	r0, [r4, #84]	; 0x54
 801e6aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e6ac:	602f      	str	r7, [r5, #0]
 801e6ae:	2900      	cmp	r1, #0
 801e6b0:	d0c9      	beq.n	801e646 <__sflush_r+0x1a>
 801e6b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e6b6:	4299      	cmp	r1, r3
 801e6b8:	d002      	beq.n	801e6c0 <__sflush_r+0x94>
 801e6ba:	4628      	mov	r0, r5
 801e6bc:	f7fe f8d6 	bl	801c86c <_free_r>
 801e6c0:	2000      	movs	r0, #0
 801e6c2:	6360      	str	r0, [r4, #52]	; 0x34
 801e6c4:	e7c0      	b.n	801e648 <__sflush_r+0x1c>
 801e6c6:	2301      	movs	r3, #1
 801e6c8:	4628      	mov	r0, r5
 801e6ca:	47b0      	blx	r6
 801e6cc:	1c41      	adds	r1, r0, #1
 801e6ce:	d1c8      	bne.n	801e662 <__sflush_r+0x36>
 801e6d0:	682b      	ldr	r3, [r5, #0]
 801e6d2:	2b00      	cmp	r3, #0
 801e6d4:	d0c5      	beq.n	801e662 <__sflush_r+0x36>
 801e6d6:	2b1d      	cmp	r3, #29
 801e6d8:	d001      	beq.n	801e6de <__sflush_r+0xb2>
 801e6da:	2b16      	cmp	r3, #22
 801e6dc:	d101      	bne.n	801e6e2 <__sflush_r+0xb6>
 801e6de:	602f      	str	r7, [r5, #0]
 801e6e0:	e7b1      	b.n	801e646 <__sflush_r+0x1a>
 801e6e2:	89a3      	ldrh	r3, [r4, #12]
 801e6e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e6e8:	81a3      	strh	r3, [r4, #12]
 801e6ea:	e7ad      	b.n	801e648 <__sflush_r+0x1c>
 801e6ec:	690f      	ldr	r7, [r1, #16]
 801e6ee:	2f00      	cmp	r7, #0
 801e6f0:	d0a9      	beq.n	801e646 <__sflush_r+0x1a>
 801e6f2:	0793      	lsls	r3, r2, #30
 801e6f4:	680e      	ldr	r6, [r1, #0]
 801e6f6:	bf08      	it	eq
 801e6f8:	694b      	ldreq	r3, [r1, #20]
 801e6fa:	600f      	str	r7, [r1, #0]
 801e6fc:	bf18      	it	ne
 801e6fe:	2300      	movne	r3, #0
 801e700:	eba6 0807 	sub.w	r8, r6, r7
 801e704:	608b      	str	r3, [r1, #8]
 801e706:	f1b8 0f00 	cmp.w	r8, #0
 801e70a:	dd9c      	ble.n	801e646 <__sflush_r+0x1a>
 801e70c:	6a21      	ldr	r1, [r4, #32]
 801e70e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e710:	4643      	mov	r3, r8
 801e712:	463a      	mov	r2, r7
 801e714:	4628      	mov	r0, r5
 801e716:	47b0      	blx	r6
 801e718:	2800      	cmp	r0, #0
 801e71a:	dc06      	bgt.n	801e72a <__sflush_r+0xfe>
 801e71c:	89a3      	ldrh	r3, [r4, #12]
 801e71e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e722:	81a3      	strh	r3, [r4, #12]
 801e724:	f04f 30ff 	mov.w	r0, #4294967295
 801e728:	e78e      	b.n	801e648 <__sflush_r+0x1c>
 801e72a:	4407      	add	r7, r0
 801e72c:	eba8 0800 	sub.w	r8, r8, r0
 801e730:	e7e9      	b.n	801e706 <__sflush_r+0xda>
 801e732:	bf00      	nop
 801e734:	dfbffffe 	.word	0xdfbffffe

0801e738 <_fflush_r>:
 801e738:	b538      	push	{r3, r4, r5, lr}
 801e73a:	690b      	ldr	r3, [r1, #16]
 801e73c:	4605      	mov	r5, r0
 801e73e:	460c      	mov	r4, r1
 801e740:	b913      	cbnz	r3, 801e748 <_fflush_r+0x10>
 801e742:	2500      	movs	r5, #0
 801e744:	4628      	mov	r0, r5
 801e746:	bd38      	pop	{r3, r4, r5, pc}
 801e748:	b118      	cbz	r0, 801e752 <_fflush_r+0x1a>
 801e74a:	6a03      	ldr	r3, [r0, #32]
 801e74c:	b90b      	cbnz	r3, 801e752 <_fflush_r+0x1a>
 801e74e:	f7fc ffa5 	bl	801b69c <__sinit>
 801e752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e756:	2b00      	cmp	r3, #0
 801e758:	d0f3      	beq.n	801e742 <_fflush_r+0xa>
 801e75a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e75c:	07d0      	lsls	r0, r2, #31
 801e75e:	d404      	bmi.n	801e76a <_fflush_r+0x32>
 801e760:	0599      	lsls	r1, r3, #22
 801e762:	d402      	bmi.n	801e76a <_fflush_r+0x32>
 801e764:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e766:	f7fd f9ee 	bl	801bb46 <__retarget_lock_acquire_recursive>
 801e76a:	4628      	mov	r0, r5
 801e76c:	4621      	mov	r1, r4
 801e76e:	f7ff ff5d 	bl	801e62c <__sflush_r>
 801e772:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e774:	07da      	lsls	r2, r3, #31
 801e776:	4605      	mov	r5, r0
 801e778:	d4e4      	bmi.n	801e744 <_fflush_r+0xc>
 801e77a:	89a3      	ldrh	r3, [r4, #12]
 801e77c:	059b      	lsls	r3, r3, #22
 801e77e:	d4e1      	bmi.n	801e744 <_fflush_r+0xc>
 801e780:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e782:	f7fd f9e1 	bl	801bb48 <__retarget_lock_release_recursive>
 801e786:	e7dd      	b.n	801e744 <_fflush_r+0xc>

0801e788 <__swhatbuf_r>:
 801e788:	b570      	push	{r4, r5, r6, lr}
 801e78a:	460c      	mov	r4, r1
 801e78c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e790:	2900      	cmp	r1, #0
 801e792:	b096      	sub	sp, #88	; 0x58
 801e794:	4615      	mov	r5, r2
 801e796:	461e      	mov	r6, r3
 801e798:	da0d      	bge.n	801e7b6 <__swhatbuf_r+0x2e>
 801e79a:	89a3      	ldrh	r3, [r4, #12]
 801e79c:	f013 0f80 	tst.w	r3, #128	; 0x80
 801e7a0:	f04f 0100 	mov.w	r1, #0
 801e7a4:	bf0c      	ite	eq
 801e7a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801e7aa:	2340      	movne	r3, #64	; 0x40
 801e7ac:	2000      	movs	r0, #0
 801e7ae:	6031      	str	r1, [r6, #0]
 801e7b0:	602b      	str	r3, [r5, #0]
 801e7b2:	b016      	add	sp, #88	; 0x58
 801e7b4:	bd70      	pop	{r4, r5, r6, pc}
 801e7b6:	466a      	mov	r2, sp
 801e7b8:	f000 f8a8 	bl	801e90c <_fstat_r>
 801e7bc:	2800      	cmp	r0, #0
 801e7be:	dbec      	blt.n	801e79a <__swhatbuf_r+0x12>
 801e7c0:	9901      	ldr	r1, [sp, #4]
 801e7c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801e7c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801e7ca:	4259      	negs	r1, r3
 801e7cc:	4159      	adcs	r1, r3
 801e7ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e7d2:	e7eb      	b.n	801e7ac <__swhatbuf_r+0x24>

0801e7d4 <__smakebuf_r>:
 801e7d4:	898b      	ldrh	r3, [r1, #12]
 801e7d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e7d8:	079d      	lsls	r5, r3, #30
 801e7da:	4606      	mov	r6, r0
 801e7dc:	460c      	mov	r4, r1
 801e7de:	d507      	bpl.n	801e7f0 <__smakebuf_r+0x1c>
 801e7e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e7e4:	6023      	str	r3, [r4, #0]
 801e7e6:	6123      	str	r3, [r4, #16]
 801e7e8:	2301      	movs	r3, #1
 801e7ea:	6163      	str	r3, [r4, #20]
 801e7ec:	b002      	add	sp, #8
 801e7ee:	bd70      	pop	{r4, r5, r6, pc}
 801e7f0:	ab01      	add	r3, sp, #4
 801e7f2:	466a      	mov	r2, sp
 801e7f4:	f7ff ffc8 	bl	801e788 <__swhatbuf_r>
 801e7f8:	9900      	ldr	r1, [sp, #0]
 801e7fa:	4605      	mov	r5, r0
 801e7fc:	4630      	mov	r0, r6
 801e7fe:	f7fe f8a9 	bl	801c954 <_malloc_r>
 801e802:	b948      	cbnz	r0, 801e818 <__smakebuf_r+0x44>
 801e804:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e808:	059a      	lsls	r2, r3, #22
 801e80a:	d4ef      	bmi.n	801e7ec <__smakebuf_r+0x18>
 801e80c:	f023 0303 	bic.w	r3, r3, #3
 801e810:	f043 0302 	orr.w	r3, r3, #2
 801e814:	81a3      	strh	r3, [r4, #12]
 801e816:	e7e3      	b.n	801e7e0 <__smakebuf_r+0xc>
 801e818:	89a3      	ldrh	r3, [r4, #12]
 801e81a:	6020      	str	r0, [r4, #0]
 801e81c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e820:	81a3      	strh	r3, [r4, #12]
 801e822:	9b00      	ldr	r3, [sp, #0]
 801e824:	6163      	str	r3, [r4, #20]
 801e826:	9b01      	ldr	r3, [sp, #4]
 801e828:	6120      	str	r0, [r4, #16]
 801e82a:	b15b      	cbz	r3, 801e844 <__smakebuf_r+0x70>
 801e82c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e830:	4630      	mov	r0, r6
 801e832:	f000 f87d 	bl	801e930 <_isatty_r>
 801e836:	b128      	cbz	r0, 801e844 <__smakebuf_r+0x70>
 801e838:	89a3      	ldrh	r3, [r4, #12]
 801e83a:	f023 0303 	bic.w	r3, r3, #3
 801e83e:	f043 0301 	orr.w	r3, r3, #1
 801e842:	81a3      	strh	r3, [r4, #12]
 801e844:	89a3      	ldrh	r3, [r4, #12]
 801e846:	431d      	orrs	r5, r3
 801e848:	81a5      	strh	r5, [r4, #12]
 801e84a:	e7cf      	b.n	801e7ec <__smakebuf_r+0x18>

0801e84c <_putc_r>:
 801e84c:	b570      	push	{r4, r5, r6, lr}
 801e84e:	460d      	mov	r5, r1
 801e850:	4614      	mov	r4, r2
 801e852:	4606      	mov	r6, r0
 801e854:	b118      	cbz	r0, 801e85e <_putc_r+0x12>
 801e856:	6a03      	ldr	r3, [r0, #32]
 801e858:	b90b      	cbnz	r3, 801e85e <_putc_r+0x12>
 801e85a:	f7fc ff1f 	bl	801b69c <__sinit>
 801e85e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e860:	07d8      	lsls	r0, r3, #31
 801e862:	d405      	bmi.n	801e870 <_putc_r+0x24>
 801e864:	89a3      	ldrh	r3, [r4, #12]
 801e866:	0599      	lsls	r1, r3, #22
 801e868:	d402      	bmi.n	801e870 <_putc_r+0x24>
 801e86a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e86c:	f7fd f96b 	bl	801bb46 <__retarget_lock_acquire_recursive>
 801e870:	68a3      	ldr	r3, [r4, #8]
 801e872:	3b01      	subs	r3, #1
 801e874:	2b00      	cmp	r3, #0
 801e876:	60a3      	str	r3, [r4, #8]
 801e878:	da05      	bge.n	801e886 <_putc_r+0x3a>
 801e87a:	69a2      	ldr	r2, [r4, #24]
 801e87c:	4293      	cmp	r3, r2
 801e87e:	db12      	blt.n	801e8a6 <_putc_r+0x5a>
 801e880:	b2eb      	uxtb	r3, r5
 801e882:	2b0a      	cmp	r3, #10
 801e884:	d00f      	beq.n	801e8a6 <_putc_r+0x5a>
 801e886:	6823      	ldr	r3, [r4, #0]
 801e888:	1c5a      	adds	r2, r3, #1
 801e88a:	6022      	str	r2, [r4, #0]
 801e88c:	701d      	strb	r5, [r3, #0]
 801e88e:	b2ed      	uxtb	r5, r5
 801e890:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e892:	07da      	lsls	r2, r3, #31
 801e894:	d405      	bmi.n	801e8a2 <_putc_r+0x56>
 801e896:	89a3      	ldrh	r3, [r4, #12]
 801e898:	059b      	lsls	r3, r3, #22
 801e89a:	d402      	bmi.n	801e8a2 <_putc_r+0x56>
 801e89c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e89e:	f7fd f953 	bl	801bb48 <__retarget_lock_release_recursive>
 801e8a2:	4628      	mov	r0, r5
 801e8a4:	bd70      	pop	{r4, r5, r6, pc}
 801e8a6:	4629      	mov	r1, r5
 801e8a8:	4622      	mov	r2, r4
 801e8aa:	4630      	mov	r0, r6
 801e8ac:	f7fd f839 	bl	801b922 <__swbuf_r>
 801e8b0:	4605      	mov	r5, r0
 801e8b2:	e7ed      	b.n	801e890 <_putc_r+0x44>

0801e8b4 <memmove>:
 801e8b4:	4288      	cmp	r0, r1
 801e8b6:	b510      	push	{r4, lr}
 801e8b8:	eb01 0402 	add.w	r4, r1, r2
 801e8bc:	d902      	bls.n	801e8c4 <memmove+0x10>
 801e8be:	4284      	cmp	r4, r0
 801e8c0:	4623      	mov	r3, r4
 801e8c2:	d807      	bhi.n	801e8d4 <memmove+0x20>
 801e8c4:	1e43      	subs	r3, r0, #1
 801e8c6:	42a1      	cmp	r1, r4
 801e8c8:	d008      	beq.n	801e8dc <memmove+0x28>
 801e8ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e8ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e8d2:	e7f8      	b.n	801e8c6 <memmove+0x12>
 801e8d4:	4402      	add	r2, r0
 801e8d6:	4601      	mov	r1, r0
 801e8d8:	428a      	cmp	r2, r1
 801e8da:	d100      	bne.n	801e8de <memmove+0x2a>
 801e8dc:	bd10      	pop	{r4, pc}
 801e8de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e8e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e8e6:	e7f7      	b.n	801e8d8 <memmove+0x24>

0801e8e8 <strncmp>:
 801e8e8:	b510      	push	{r4, lr}
 801e8ea:	b16a      	cbz	r2, 801e908 <strncmp+0x20>
 801e8ec:	3901      	subs	r1, #1
 801e8ee:	1884      	adds	r4, r0, r2
 801e8f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e8f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801e8f8:	429a      	cmp	r2, r3
 801e8fa:	d103      	bne.n	801e904 <strncmp+0x1c>
 801e8fc:	42a0      	cmp	r0, r4
 801e8fe:	d001      	beq.n	801e904 <strncmp+0x1c>
 801e900:	2a00      	cmp	r2, #0
 801e902:	d1f5      	bne.n	801e8f0 <strncmp+0x8>
 801e904:	1ad0      	subs	r0, r2, r3
 801e906:	bd10      	pop	{r4, pc}
 801e908:	4610      	mov	r0, r2
 801e90a:	e7fc      	b.n	801e906 <strncmp+0x1e>

0801e90c <_fstat_r>:
 801e90c:	b538      	push	{r3, r4, r5, lr}
 801e90e:	4d07      	ldr	r5, [pc, #28]	; (801e92c <_fstat_r+0x20>)
 801e910:	2300      	movs	r3, #0
 801e912:	4604      	mov	r4, r0
 801e914:	4608      	mov	r0, r1
 801e916:	4611      	mov	r1, r2
 801e918:	602b      	str	r3, [r5, #0]
 801e91a:	f7ee fa14 	bl	800cd46 <_fstat>
 801e91e:	1c43      	adds	r3, r0, #1
 801e920:	d102      	bne.n	801e928 <_fstat_r+0x1c>
 801e922:	682b      	ldr	r3, [r5, #0]
 801e924:	b103      	cbz	r3, 801e928 <_fstat_r+0x1c>
 801e926:	6023      	str	r3, [r4, #0]
 801e928:	bd38      	pop	{r3, r4, r5, pc}
 801e92a:	bf00      	nop
 801e92c:	20000d30 	.word	0x20000d30

0801e930 <_isatty_r>:
 801e930:	b538      	push	{r3, r4, r5, lr}
 801e932:	4d06      	ldr	r5, [pc, #24]	; (801e94c <_isatty_r+0x1c>)
 801e934:	2300      	movs	r3, #0
 801e936:	4604      	mov	r4, r0
 801e938:	4608      	mov	r0, r1
 801e93a:	602b      	str	r3, [r5, #0]
 801e93c:	f7ee fa13 	bl	800cd66 <_isatty>
 801e940:	1c43      	adds	r3, r0, #1
 801e942:	d102      	bne.n	801e94a <_isatty_r+0x1a>
 801e944:	682b      	ldr	r3, [r5, #0]
 801e946:	b103      	cbz	r3, 801e94a <_isatty_r+0x1a>
 801e948:	6023      	str	r3, [r4, #0]
 801e94a:	bd38      	pop	{r3, r4, r5, pc}
 801e94c:	20000d30 	.word	0x20000d30

0801e950 <_sbrk_r>:
 801e950:	b538      	push	{r3, r4, r5, lr}
 801e952:	4d06      	ldr	r5, [pc, #24]	; (801e96c <_sbrk_r+0x1c>)
 801e954:	2300      	movs	r3, #0
 801e956:	4604      	mov	r4, r0
 801e958:	4608      	mov	r0, r1
 801e95a:	602b      	str	r3, [r5, #0]
 801e95c:	f7ee fa1c 	bl	800cd98 <_sbrk>
 801e960:	1c43      	adds	r3, r0, #1
 801e962:	d102      	bne.n	801e96a <_sbrk_r+0x1a>
 801e964:	682b      	ldr	r3, [r5, #0]
 801e966:	b103      	cbz	r3, 801e96a <_sbrk_r+0x1a>
 801e968:	6023      	str	r3, [r4, #0]
 801e96a:	bd38      	pop	{r3, r4, r5, pc}
 801e96c:	20000d30 	.word	0x20000d30

0801e970 <nan>:
 801e970:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801e978 <nan+0x8>
 801e974:	4770      	bx	lr
 801e976:	bf00      	nop
 801e978:	00000000 	.word	0x00000000
 801e97c:	7ff80000 	.word	0x7ff80000

0801e980 <__assert_func>:
 801e980:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e982:	4614      	mov	r4, r2
 801e984:	461a      	mov	r2, r3
 801e986:	4b09      	ldr	r3, [pc, #36]	; (801e9ac <__assert_func+0x2c>)
 801e988:	681b      	ldr	r3, [r3, #0]
 801e98a:	4605      	mov	r5, r0
 801e98c:	68d8      	ldr	r0, [r3, #12]
 801e98e:	b14c      	cbz	r4, 801e9a4 <__assert_func+0x24>
 801e990:	4b07      	ldr	r3, [pc, #28]	; (801e9b0 <__assert_func+0x30>)
 801e992:	9100      	str	r1, [sp, #0]
 801e994:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e998:	4906      	ldr	r1, [pc, #24]	; (801e9b4 <__assert_func+0x34>)
 801e99a:	462b      	mov	r3, r5
 801e99c:	f000 fbca 	bl	801f134 <fiprintf>
 801e9a0:	f000 fbda 	bl	801f158 <abort>
 801e9a4:	4b04      	ldr	r3, [pc, #16]	; (801e9b8 <__assert_func+0x38>)
 801e9a6:	461c      	mov	r4, r3
 801e9a8:	e7f3      	b.n	801e992 <__assert_func+0x12>
 801e9aa:	bf00      	nop
 801e9ac:	2000014c 	.word	0x2000014c
 801e9b0:	080218a2 	.word	0x080218a2
 801e9b4:	080218af 	.word	0x080218af
 801e9b8:	080218dd 	.word	0x080218dd

0801e9bc <_calloc_r>:
 801e9bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e9be:	fba1 2402 	umull	r2, r4, r1, r2
 801e9c2:	b94c      	cbnz	r4, 801e9d8 <_calloc_r+0x1c>
 801e9c4:	4611      	mov	r1, r2
 801e9c6:	9201      	str	r2, [sp, #4]
 801e9c8:	f7fd ffc4 	bl	801c954 <_malloc_r>
 801e9cc:	9a01      	ldr	r2, [sp, #4]
 801e9ce:	4605      	mov	r5, r0
 801e9d0:	b930      	cbnz	r0, 801e9e0 <_calloc_r+0x24>
 801e9d2:	4628      	mov	r0, r5
 801e9d4:	b003      	add	sp, #12
 801e9d6:	bd30      	pop	{r4, r5, pc}
 801e9d8:	220c      	movs	r2, #12
 801e9da:	6002      	str	r2, [r0, #0]
 801e9dc:	2500      	movs	r5, #0
 801e9de:	e7f8      	b.n	801e9d2 <_calloc_r+0x16>
 801e9e0:	4621      	mov	r1, r4
 801e9e2:	f7fd f833 	bl	801ba4c <memset>
 801e9e6:	e7f4      	b.n	801e9d2 <_calloc_r+0x16>

0801e9e8 <rshift>:
 801e9e8:	6903      	ldr	r3, [r0, #16]
 801e9ea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801e9ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e9f2:	ea4f 1261 	mov.w	r2, r1, asr #5
 801e9f6:	f100 0414 	add.w	r4, r0, #20
 801e9fa:	dd45      	ble.n	801ea88 <rshift+0xa0>
 801e9fc:	f011 011f 	ands.w	r1, r1, #31
 801ea00:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801ea04:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801ea08:	d10c      	bne.n	801ea24 <rshift+0x3c>
 801ea0a:	f100 0710 	add.w	r7, r0, #16
 801ea0e:	4629      	mov	r1, r5
 801ea10:	42b1      	cmp	r1, r6
 801ea12:	d334      	bcc.n	801ea7e <rshift+0x96>
 801ea14:	1a9b      	subs	r3, r3, r2
 801ea16:	009b      	lsls	r3, r3, #2
 801ea18:	1eea      	subs	r2, r5, #3
 801ea1a:	4296      	cmp	r6, r2
 801ea1c:	bf38      	it	cc
 801ea1e:	2300      	movcc	r3, #0
 801ea20:	4423      	add	r3, r4
 801ea22:	e015      	b.n	801ea50 <rshift+0x68>
 801ea24:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801ea28:	f1c1 0820 	rsb	r8, r1, #32
 801ea2c:	40cf      	lsrs	r7, r1
 801ea2e:	f105 0e04 	add.w	lr, r5, #4
 801ea32:	46a1      	mov	r9, r4
 801ea34:	4576      	cmp	r6, lr
 801ea36:	46f4      	mov	ip, lr
 801ea38:	d815      	bhi.n	801ea66 <rshift+0x7e>
 801ea3a:	1a9a      	subs	r2, r3, r2
 801ea3c:	0092      	lsls	r2, r2, #2
 801ea3e:	3a04      	subs	r2, #4
 801ea40:	3501      	adds	r5, #1
 801ea42:	42ae      	cmp	r6, r5
 801ea44:	bf38      	it	cc
 801ea46:	2200      	movcc	r2, #0
 801ea48:	18a3      	adds	r3, r4, r2
 801ea4a:	50a7      	str	r7, [r4, r2]
 801ea4c:	b107      	cbz	r7, 801ea50 <rshift+0x68>
 801ea4e:	3304      	adds	r3, #4
 801ea50:	1b1a      	subs	r2, r3, r4
 801ea52:	42a3      	cmp	r3, r4
 801ea54:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801ea58:	bf08      	it	eq
 801ea5a:	2300      	moveq	r3, #0
 801ea5c:	6102      	str	r2, [r0, #16]
 801ea5e:	bf08      	it	eq
 801ea60:	6143      	streq	r3, [r0, #20]
 801ea62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ea66:	f8dc c000 	ldr.w	ip, [ip]
 801ea6a:	fa0c fc08 	lsl.w	ip, ip, r8
 801ea6e:	ea4c 0707 	orr.w	r7, ip, r7
 801ea72:	f849 7b04 	str.w	r7, [r9], #4
 801ea76:	f85e 7b04 	ldr.w	r7, [lr], #4
 801ea7a:	40cf      	lsrs	r7, r1
 801ea7c:	e7da      	b.n	801ea34 <rshift+0x4c>
 801ea7e:	f851 cb04 	ldr.w	ip, [r1], #4
 801ea82:	f847 cf04 	str.w	ip, [r7, #4]!
 801ea86:	e7c3      	b.n	801ea10 <rshift+0x28>
 801ea88:	4623      	mov	r3, r4
 801ea8a:	e7e1      	b.n	801ea50 <rshift+0x68>

0801ea8c <__hexdig_fun>:
 801ea8c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801ea90:	2b09      	cmp	r3, #9
 801ea92:	d802      	bhi.n	801ea9a <__hexdig_fun+0xe>
 801ea94:	3820      	subs	r0, #32
 801ea96:	b2c0      	uxtb	r0, r0
 801ea98:	4770      	bx	lr
 801ea9a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801ea9e:	2b05      	cmp	r3, #5
 801eaa0:	d801      	bhi.n	801eaa6 <__hexdig_fun+0x1a>
 801eaa2:	3847      	subs	r0, #71	; 0x47
 801eaa4:	e7f7      	b.n	801ea96 <__hexdig_fun+0xa>
 801eaa6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801eaaa:	2b05      	cmp	r3, #5
 801eaac:	d801      	bhi.n	801eab2 <__hexdig_fun+0x26>
 801eaae:	3827      	subs	r0, #39	; 0x27
 801eab0:	e7f1      	b.n	801ea96 <__hexdig_fun+0xa>
 801eab2:	2000      	movs	r0, #0
 801eab4:	4770      	bx	lr
	...

0801eab8 <__gethex>:
 801eab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eabc:	4617      	mov	r7, r2
 801eabe:	680a      	ldr	r2, [r1, #0]
 801eac0:	b085      	sub	sp, #20
 801eac2:	f102 0b02 	add.w	fp, r2, #2
 801eac6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801eaca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801eace:	4681      	mov	r9, r0
 801ead0:	468a      	mov	sl, r1
 801ead2:	9302      	str	r3, [sp, #8]
 801ead4:	32fe      	adds	r2, #254	; 0xfe
 801ead6:	eb02 030b 	add.w	r3, r2, fp
 801eada:	46d8      	mov	r8, fp
 801eadc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801eae0:	9301      	str	r3, [sp, #4]
 801eae2:	2830      	cmp	r0, #48	; 0x30
 801eae4:	d0f7      	beq.n	801ead6 <__gethex+0x1e>
 801eae6:	f7ff ffd1 	bl	801ea8c <__hexdig_fun>
 801eaea:	4604      	mov	r4, r0
 801eaec:	2800      	cmp	r0, #0
 801eaee:	d138      	bne.n	801eb62 <__gethex+0xaa>
 801eaf0:	49a7      	ldr	r1, [pc, #668]	; (801ed90 <__gethex+0x2d8>)
 801eaf2:	2201      	movs	r2, #1
 801eaf4:	4640      	mov	r0, r8
 801eaf6:	f7ff fef7 	bl	801e8e8 <strncmp>
 801eafa:	4606      	mov	r6, r0
 801eafc:	2800      	cmp	r0, #0
 801eafe:	d169      	bne.n	801ebd4 <__gethex+0x11c>
 801eb00:	f898 0001 	ldrb.w	r0, [r8, #1]
 801eb04:	465d      	mov	r5, fp
 801eb06:	f7ff ffc1 	bl	801ea8c <__hexdig_fun>
 801eb0a:	2800      	cmp	r0, #0
 801eb0c:	d064      	beq.n	801ebd8 <__gethex+0x120>
 801eb0e:	465a      	mov	r2, fp
 801eb10:	7810      	ldrb	r0, [r2, #0]
 801eb12:	2830      	cmp	r0, #48	; 0x30
 801eb14:	4690      	mov	r8, r2
 801eb16:	f102 0201 	add.w	r2, r2, #1
 801eb1a:	d0f9      	beq.n	801eb10 <__gethex+0x58>
 801eb1c:	f7ff ffb6 	bl	801ea8c <__hexdig_fun>
 801eb20:	2301      	movs	r3, #1
 801eb22:	fab0 f480 	clz	r4, r0
 801eb26:	0964      	lsrs	r4, r4, #5
 801eb28:	465e      	mov	r6, fp
 801eb2a:	9301      	str	r3, [sp, #4]
 801eb2c:	4642      	mov	r2, r8
 801eb2e:	4615      	mov	r5, r2
 801eb30:	3201      	adds	r2, #1
 801eb32:	7828      	ldrb	r0, [r5, #0]
 801eb34:	f7ff ffaa 	bl	801ea8c <__hexdig_fun>
 801eb38:	2800      	cmp	r0, #0
 801eb3a:	d1f8      	bne.n	801eb2e <__gethex+0x76>
 801eb3c:	4994      	ldr	r1, [pc, #592]	; (801ed90 <__gethex+0x2d8>)
 801eb3e:	2201      	movs	r2, #1
 801eb40:	4628      	mov	r0, r5
 801eb42:	f7ff fed1 	bl	801e8e8 <strncmp>
 801eb46:	b978      	cbnz	r0, 801eb68 <__gethex+0xb0>
 801eb48:	b946      	cbnz	r6, 801eb5c <__gethex+0xa4>
 801eb4a:	1c6e      	adds	r6, r5, #1
 801eb4c:	4632      	mov	r2, r6
 801eb4e:	4615      	mov	r5, r2
 801eb50:	3201      	adds	r2, #1
 801eb52:	7828      	ldrb	r0, [r5, #0]
 801eb54:	f7ff ff9a 	bl	801ea8c <__hexdig_fun>
 801eb58:	2800      	cmp	r0, #0
 801eb5a:	d1f8      	bne.n	801eb4e <__gethex+0x96>
 801eb5c:	1b73      	subs	r3, r6, r5
 801eb5e:	009e      	lsls	r6, r3, #2
 801eb60:	e004      	b.n	801eb6c <__gethex+0xb4>
 801eb62:	2400      	movs	r4, #0
 801eb64:	4626      	mov	r6, r4
 801eb66:	e7e1      	b.n	801eb2c <__gethex+0x74>
 801eb68:	2e00      	cmp	r6, #0
 801eb6a:	d1f7      	bne.n	801eb5c <__gethex+0xa4>
 801eb6c:	782b      	ldrb	r3, [r5, #0]
 801eb6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801eb72:	2b50      	cmp	r3, #80	; 0x50
 801eb74:	d13d      	bne.n	801ebf2 <__gethex+0x13a>
 801eb76:	786b      	ldrb	r3, [r5, #1]
 801eb78:	2b2b      	cmp	r3, #43	; 0x2b
 801eb7a:	d02f      	beq.n	801ebdc <__gethex+0x124>
 801eb7c:	2b2d      	cmp	r3, #45	; 0x2d
 801eb7e:	d031      	beq.n	801ebe4 <__gethex+0x12c>
 801eb80:	1c69      	adds	r1, r5, #1
 801eb82:	f04f 0b00 	mov.w	fp, #0
 801eb86:	7808      	ldrb	r0, [r1, #0]
 801eb88:	f7ff ff80 	bl	801ea8c <__hexdig_fun>
 801eb8c:	1e42      	subs	r2, r0, #1
 801eb8e:	b2d2      	uxtb	r2, r2
 801eb90:	2a18      	cmp	r2, #24
 801eb92:	d82e      	bhi.n	801ebf2 <__gethex+0x13a>
 801eb94:	f1a0 0210 	sub.w	r2, r0, #16
 801eb98:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801eb9c:	f7ff ff76 	bl	801ea8c <__hexdig_fun>
 801eba0:	f100 3cff 	add.w	ip, r0, #4294967295
 801eba4:	fa5f fc8c 	uxtb.w	ip, ip
 801eba8:	f1bc 0f18 	cmp.w	ip, #24
 801ebac:	d91d      	bls.n	801ebea <__gethex+0x132>
 801ebae:	f1bb 0f00 	cmp.w	fp, #0
 801ebb2:	d000      	beq.n	801ebb6 <__gethex+0xfe>
 801ebb4:	4252      	negs	r2, r2
 801ebb6:	4416      	add	r6, r2
 801ebb8:	f8ca 1000 	str.w	r1, [sl]
 801ebbc:	b1dc      	cbz	r4, 801ebf6 <__gethex+0x13e>
 801ebbe:	9b01      	ldr	r3, [sp, #4]
 801ebc0:	2b00      	cmp	r3, #0
 801ebc2:	bf14      	ite	ne
 801ebc4:	f04f 0800 	movne.w	r8, #0
 801ebc8:	f04f 0806 	moveq.w	r8, #6
 801ebcc:	4640      	mov	r0, r8
 801ebce:	b005      	add	sp, #20
 801ebd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ebd4:	4645      	mov	r5, r8
 801ebd6:	4626      	mov	r6, r4
 801ebd8:	2401      	movs	r4, #1
 801ebda:	e7c7      	b.n	801eb6c <__gethex+0xb4>
 801ebdc:	f04f 0b00 	mov.w	fp, #0
 801ebe0:	1ca9      	adds	r1, r5, #2
 801ebe2:	e7d0      	b.n	801eb86 <__gethex+0xce>
 801ebe4:	f04f 0b01 	mov.w	fp, #1
 801ebe8:	e7fa      	b.n	801ebe0 <__gethex+0x128>
 801ebea:	230a      	movs	r3, #10
 801ebec:	fb03 0002 	mla	r0, r3, r2, r0
 801ebf0:	e7d0      	b.n	801eb94 <__gethex+0xdc>
 801ebf2:	4629      	mov	r1, r5
 801ebf4:	e7e0      	b.n	801ebb8 <__gethex+0x100>
 801ebf6:	eba5 0308 	sub.w	r3, r5, r8
 801ebfa:	3b01      	subs	r3, #1
 801ebfc:	4621      	mov	r1, r4
 801ebfe:	2b07      	cmp	r3, #7
 801ec00:	dc0a      	bgt.n	801ec18 <__gethex+0x160>
 801ec02:	4648      	mov	r0, r9
 801ec04:	f7fd ff32 	bl	801ca6c <_Balloc>
 801ec08:	4604      	mov	r4, r0
 801ec0a:	b940      	cbnz	r0, 801ec1e <__gethex+0x166>
 801ec0c:	4b61      	ldr	r3, [pc, #388]	; (801ed94 <__gethex+0x2dc>)
 801ec0e:	4602      	mov	r2, r0
 801ec10:	21e4      	movs	r1, #228	; 0xe4
 801ec12:	4861      	ldr	r0, [pc, #388]	; (801ed98 <__gethex+0x2e0>)
 801ec14:	f7ff feb4 	bl	801e980 <__assert_func>
 801ec18:	3101      	adds	r1, #1
 801ec1a:	105b      	asrs	r3, r3, #1
 801ec1c:	e7ef      	b.n	801ebfe <__gethex+0x146>
 801ec1e:	f100 0a14 	add.w	sl, r0, #20
 801ec22:	2300      	movs	r3, #0
 801ec24:	495a      	ldr	r1, [pc, #360]	; (801ed90 <__gethex+0x2d8>)
 801ec26:	f8cd a004 	str.w	sl, [sp, #4]
 801ec2a:	469b      	mov	fp, r3
 801ec2c:	45a8      	cmp	r8, r5
 801ec2e:	d342      	bcc.n	801ecb6 <__gethex+0x1fe>
 801ec30:	9801      	ldr	r0, [sp, #4]
 801ec32:	f840 bb04 	str.w	fp, [r0], #4
 801ec36:	eba0 000a 	sub.w	r0, r0, sl
 801ec3a:	1080      	asrs	r0, r0, #2
 801ec3c:	6120      	str	r0, [r4, #16]
 801ec3e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801ec42:	4658      	mov	r0, fp
 801ec44:	f7fe f804 	bl	801cc50 <__hi0bits>
 801ec48:	683d      	ldr	r5, [r7, #0]
 801ec4a:	eba8 0000 	sub.w	r0, r8, r0
 801ec4e:	42a8      	cmp	r0, r5
 801ec50:	dd59      	ble.n	801ed06 <__gethex+0x24e>
 801ec52:	eba0 0805 	sub.w	r8, r0, r5
 801ec56:	4641      	mov	r1, r8
 801ec58:	4620      	mov	r0, r4
 801ec5a:	f7fe fb93 	bl	801d384 <__any_on>
 801ec5e:	4683      	mov	fp, r0
 801ec60:	b1b8      	cbz	r0, 801ec92 <__gethex+0x1da>
 801ec62:	f108 33ff 	add.w	r3, r8, #4294967295
 801ec66:	1159      	asrs	r1, r3, #5
 801ec68:	f003 021f 	and.w	r2, r3, #31
 801ec6c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801ec70:	f04f 0b01 	mov.w	fp, #1
 801ec74:	fa0b f202 	lsl.w	r2, fp, r2
 801ec78:	420a      	tst	r2, r1
 801ec7a:	d00a      	beq.n	801ec92 <__gethex+0x1da>
 801ec7c:	455b      	cmp	r3, fp
 801ec7e:	dd06      	ble.n	801ec8e <__gethex+0x1d6>
 801ec80:	f1a8 0102 	sub.w	r1, r8, #2
 801ec84:	4620      	mov	r0, r4
 801ec86:	f7fe fb7d 	bl	801d384 <__any_on>
 801ec8a:	2800      	cmp	r0, #0
 801ec8c:	d138      	bne.n	801ed00 <__gethex+0x248>
 801ec8e:	f04f 0b02 	mov.w	fp, #2
 801ec92:	4641      	mov	r1, r8
 801ec94:	4620      	mov	r0, r4
 801ec96:	f7ff fea7 	bl	801e9e8 <rshift>
 801ec9a:	4446      	add	r6, r8
 801ec9c:	68bb      	ldr	r3, [r7, #8]
 801ec9e:	42b3      	cmp	r3, r6
 801eca0:	da41      	bge.n	801ed26 <__gethex+0x26e>
 801eca2:	4621      	mov	r1, r4
 801eca4:	4648      	mov	r0, r9
 801eca6:	f7fd ff21 	bl	801caec <_Bfree>
 801ecaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ecac:	2300      	movs	r3, #0
 801ecae:	6013      	str	r3, [r2, #0]
 801ecb0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801ecb4:	e78a      	b.n	801ebcc <__gethex+0x114>
 801ecb6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801ecba:	2a2e      	cmp	r2, #46	; 0x2e
 801ecbc:	d014      	beq.n	801ece8 <__gethex+0x230>
 801ecbe:	2b20      	cmp	r3, #32
 801ecc0:	d106      	bne.n	801ecd0 <__gethex+0x218>
 801ecc2:	9b01      	ldr	r3, [sp, #4]
 801ecc4:	f843 bb04 	str.w	fp, [r3], #4
 801ecc8:	f04f 0b00 	mov.w	fp, #0
 801eccc:	9301      	str	r3, [sp, #4]
 801ecce:	465b      	mov	r3, fp
 801ecd0:	7828      	ldrb	r0, [r5, #0]
 801ecd2:	9303      	str	r3, [sp, #12]
 801ecd4:	f7ff feda 	bl	801ea8c <__hexdig_fun>
 801ecd8:	9b03      	ldr	r3, [sp, #12]
 801ecda:	f000 000f 	and.w	r0, r0, #15
 801ecde:	4098      	lsls	r0, r3
 801ece0:	ea4b 0b00 	orr.w	fp, fp, r0
 801ece4:	3304      	adds	r3, #4
 801ece6:	e7a1      	b.n	801ec2c <__gethex+0x174>
 801ece8:	45a8      	cmp	r8, r5
 801ecea:	d8e8      	bhi.n	801ecbe <__gethex+0x206>
 801ecec:	2201      	movs	r2, #1
 801ecee:	4628      	mov	r0, r5
 801ecf0:	9303      	str	r3, [sp, #12]
 801ecf2:	f7ff fdf9 	bl	801e8e8 <strncmp>
 801ecf6:	4926      	ldr	r1, [pc, #152]	; (801ed90 <__gethex+0x2d8>)
 801ecf8:	9b03      	ldr	r3, [sp, #12]
 801ecfa:	2800      	cmp	r0, #0
 801ecfc:	d1df      	bne.n	801ecbe <__gethex+0x206>
 801ecfe:	e795      	b.n	801ec2c <__gethex+0x174>
 801ed00:	f04f 0b03 	mov.w	fp, #3
 801ed04:	e7c5      	b.n	801ec92 <__gethex+0x1da>
 801ed06:	da0b      	bge.n	801ed20 <__gethex+0x268>
 801ed08:	eba5 0800 	sub.w	r8, r5, r0
 801ed0c:	4621      	mov	r1, r4
 801ed0e:	4642      	mov	r2, r8
 801ed10:	4648      	mov	r0, r9
 801ed12:	f7fe f905 	bl	801cf20 <__lshift>
 801ed16:	eba6 0608 	sub.w	r6, r6, r8
 801ed1a:	4604      	mov	r4, r0
 801ed1c:	f100 0a14 	add.w	sl, r0, #20
 801ed20:	f04f 0b00 	mov.w	fp, #0
 801ed24:	e7ba      	b.n	801ec9c <__gethex+0x1e4>
 801ed26:	687b      	ldr	r3, [r7, #4]
 801ed28:	42b3      	cmp	r3, r6
 801ed2a:	dd73      	ble.n	801ee14 <__gethex+0x35c>
 801ed2c:	1b9e      	subs	r6, r3, r6
 801ed2e:	42b5      	cmp	r5, r6
 801ed30:	dc34      	bgt.n	801ed9c <__gethex+0x2e4>
 801ed32:	68fb      	ldr	r3, [r7, #12]
 801ed34:	2b02      	cmp	r3, #2
 801ed36:	d023      	beq.n	801ed80 <__gethex+0x2c8>
 801ed38:	2b03      	cmp	r3, #3
 801ed3a:	d025      	beq.n	801ed88 <__gethex+0x2d0>
 801ed3c:	2b01      	cmp	r3, #1
 801ed3e:	d115      	bne.n	801ed6c <__gethex+0x2b4>
 801ed40:	42b5      	cmp	r5, r6
 801ed42:	d113      	bne.n	801ed6c <__gethex+0x2b4>
 801ed44:	2d01      	cmp	r5, #1
 801ed46:	d10b      	bne.n	801ed60 <__gethex+0x2a8>
 801ed48:	9a02      	ldr	r2, [sp, #8]
 801ed4a:	687b      	ldr	r3, [r7, #4]
 801ed4c:	6013      	str	r3, [r2, #0]
 801ed4e:	2301      	movs	r3, #1
 801ed50:	6123      	str	r3, [r4, #16]
 801ed52:	f8ca 3000 	str.w	r3, [sl]
 801ed56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ed58:	f04f 0862 	mov.w	r8, #98	; 0x62
 801ed5c:	601c      	str	r4, [r3, #0]
 801ed5e:	e735      	b.n	801ebcc <__gethex+0x114>
 801ed60:	1e69      	subs	r1, r5, #1
 801ed62:	4620      	mov	r0, r4
 801ed64:	f7fe fb0e 	bl	801d384 <__any_on>
 801ed68:	2800      	cmp	r0, #0
 801ed6a:	d1ed      	bne.n	801ed48 <__gethex+0x290>
 801ed6c:	4621      	mov	r1, r4
 801ed6e:	4648      	mov	r0, r9
 801ed70:	f7fd febc 	bl	801caec <_Bfree>
 801ed74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ed76:	2300      	movs	r3, #0
 801ed78:	6013      	str	r3, [r2, #0]
 801ed7a:	f04f 0850 	mov.w	r8, #80	; 0x50
 801ed7e:	e725      	b.n	801ebcc <__gethex+0x114>
 801ed80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ed82:	2b00      	cmp	r3, #0
 801ed84:	d1f2      	bne.n	801ed6c <__gethex+0x2b4>
 801ed86:	e7df      	b.n	801ed48 <__gethex+0x290>
 801ed88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ed8a:	2b00      	cmp	r3, #0
 801ed8c:	d1dc      	bne.n	801ed48 <__gethex+0x290>
 801ed8e:	e7ed      	b.n	801ed6c <__gethex+0x2b4>
 801ed90:	08021734 	.word	0x08021734
 801ed94:	080215cd 	.word	0x080215cd
 801ed98:	080218de 	.word	0x080218de
 801ed9c:	f106 38ff 	add.w	r8, r6, #4294967295
 801eda0:	f1bb 0f00 	cmp.w	fp, #0
 801eda4:	d133      	bne.n	801ee0e <__gethex+0x356>
 801eda6:	f1b8 0f00 	cmp.w	r8, #0
 801edaa:	d004      	beq.n	801edb6 <__gethex+0x2fe>
 801edac:	4641      	mov	r1, r8
 801edae:	4620      	mov	r0, r4
 801edb0:	f7fe fae8 	bl	801d384 <__any_on>
 801edb4:	4683      	mov	fp, r0
 801edb6:	ea4f 1268 	mov.w	r2, r8, asr #5
 801edba:	2301      	movs	r3, #1
 801edbc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801edc0:	f008 081f 	and.w	r8, r8, #31
 801edc4:	fa03 f308 	lsl.w	r3, r3, r8
 801edc8:	4213      	tst	r3, r2
 801edca:	4631      	mov	r1, r6
 801edcc:	4620      	mov	r0, r4
 801edce:	bf18      	it	ne
 801edd0:	f04b 0b02 	orrne.w	fp, fp, #2
 801edd4:	1bad      	subs	r5, r5, r6
 801edd6:	f7ff fe07 	bl	801e9e8 <rshift>
 801edda:	687e      	ldr	r6, [r7, #4]
 801eddc:	f04f 0802 	mov.w	r8, #2
 801ede0:	f1bb 0f00 	cmp.w	fp, #0
 801ede4:	d04a      	beq.n	801ee7c <__gethex+0x3c4>
 801ede6:	68fb      	ldr	r3, [r7, #12]
 801ede8:	2b02      	cmp	r3, #2
 801edea:	d016      	beq.n	801ee1a <__gethex+0x362>
 801edec:	2b03      	cmp	r3, #3
 801edee:	d018      	beq.n	801ee22 <__gethex+0x36a>
 801edf0:	2b01      	cmp	r3, #1
 801edf2:	d109      	bne.n	801ee08 <__gethex+0x350>
 801edf4:	f01b 0f02 	tst.w	fp, #2
 801edf8:	d006      	beq.n	801ee08 <__gethex+0x350>
 801edfa:	f8da 3000 	ldr.w	r3, [sl]
 801edfe:	ea4b 0b03 	orr.w	fp, fp, r3
 801ee02:	f01b 0f01 	tst.w	fp, #1
 801ee06:	d10f      	bne.n	801ee28 <__gethex+0x370>
 801ee08:	f048 0810 	orr.w	r8, r8, #16
 801ee0c:	e036      	b.n	801ee7c <__gethex+0x3c4>
 801ee0e:	f04f 0b01 	mov.w	fp, #1
 801ee12:	e7d0      	b.n	801edb6 <__gethex+0x2fe>
 801ee14:	f04f 0801 	mov.w	r8, #1
 801ee18:	e7e2      	b.n	801ede0 <__gethex+0x328>
 801ee1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ee1c:	f1c3 0301 	rsb	r3, r3, #1
 801ee20:	930f      	str	r3, [sp, #60]	; 0x3c
 801ee22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ee24:	2b00      	cmp	r3, #0
 801ee26:	d0ef      	beq.n	801ee08 <__gethex+0x350>
 801ee28:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801ee2c:	f104 0214 	add.w	r2, r4, #20
 801ee30:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801ee34:	9301      	str	r3, [sp, #4]
 801ee36:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801ee3a:	2300      	movs	r3, #0
 801ee3c:	4694      	mov	ip, r2
 801ee3e:	f852 1b04 	ldr.w	r1, [r2], #4
 801ee42:	f1b1 3fff 	cmp.w	r1, #4294967295
 801ee46:	d01e      	beq.n	801ee86 <__gethex+0x3ce>
 801ee48:	3101      	adds	r1, #1
 801ee4a:	f8cc 1000 	str.w	r1, [ip]
 801ee4e:	f1b8 0f02 	cmp.w	r8, #2
 801ee52:	f104 0214 	add.w	r2, r4, #20
 801ee56:	d13d      	bne.n	801eed4 <__gethex+0x41c>
 801ee58:	683b      	ldr	r3, [r7, #0]
 801ee5a:	3b01      	subs	r3, #1
 801ee5c:	42ab      	cmp	r3, r5
 801ee5e:	d10b      	bne.n	801ee78 <__gethex+0x3c0>
 801ee60:	1169      	asrs	r1, r5, #5
 801ee62:	2301      	movs	r3, #1
 801ee64:	f005 051f 	and.w	r5, r5, #31
 801ee68:	fa03 f505 	lsl.w	r5, r3, r5
 801ee6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ee70:	421d      	tst	r5, r3
 801ee72:	bf18      	it	ne
 801ee74:	f04f 0801 	movne.w	r8, #1
 801ee78:	f048 0820 	orr.w	r8, r8, #32
 801ee7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ee7e:	601c      	str	r4, [r3, #0]
 801ee80:	9b02      	ldr	r3, [sp, #8]
 801ee82:	601e      	str	r6, [r3, #0]
 801ee84:	e6a2      	b.n	801ebcc <__gethex+0x114>
 801ee86:	4290      	cmp	r0, r2
 801ee88:	f842 3c04 	str.w	r3, [r2, #-4]
 801ee8c:	d8d6      	bhi.n	801ee3c <__gethex+0x384>
 801ee8e:	68a2      	ldr	r2, [r4, #8]
 801ee90:	4593      	cmp	fp, r2
 801ee92:	db17      	blt.n	801eec4 <__gethex+0x40c>
 801ee94:	6861      	ldr	r1, [r4, #4]
 801ee96:	4648      	mov	r0, r9
 801ee98:	3101      	adds	r1, #1
 801ee9a:	f7fd fde7 	bl	801ca6c <_Balloc>
 801ee9e:	4682      	mov	sl, r0
 801eea0:	b918      	cbnz	r0, 801eeaa <__gethex+0x3f2>
 801eea2:	4b1b      	ldr	r3, [pc, #108]	; (801ef10 <__gethex+0x458>)
 801eea4:	4602      	mov	r2, r0
 801eea6:	2184      	movs	r1, #132	; 0x84
 801eea8:	e6b3      	b.n	801ec12 <__gethex+0x15a>
 801eeaa:	6922      	ldr	r2, [r4, #16]
 801eeac:	3202      	adds	r2, #2
 801eeae:	f104 010c 	add.w	r1, r4, #12
 801eeb2:	0092      	lsls	r2, r2, #2
 801eeb4:	300c      	adds	r0, #12
 801eeb6:	f7fc fe48 	bl	801bb4a <memcpy>
 801eeba:	4621      	mov	r1, r4
 801eebc:	4648      	mov	r0, r9
 801eebe:	f7fd fe15 	bl	801caec <_Bfree>
 801eec2:	4654      	mov	r4, sl
 801eec4:	6922      	ldr	r2, [r4, #16]
 801eec6:	1c51      	adds	r1, r2, #1
 801eec8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801eecc:	6121      	str	r1, [r4, #16]
 801eece:	2101      	movs	r1, #1
 801eed0:	6151      	str	r1, [r2, #20]
 801eed2:	e7bc      	b.n	801ee4e <__gethex+0x396>
 801eed4:	6921      	ldr	r1, [r4, #16]
 801eed6:	4559      	cmp	r1, fp
 801eed8:	dd0b      	ble.n	801eef2 <__gethex+0x43a>
 801eeda:	2101      	movs	r1, #1
 801eedc:	4620      	mov	r0, r4
 801eede:	f7ff fd83 	bl	801e9e8 <rshift>
 801eee2:	68bb      	ldr	r3, [r7, #8]
 801eee4:	3601      	adds	r6, #1
 801eee6:	42b3      	cmp	r3, r6
 801eee8:	f6ff aedb 	blt.w	801eca2 <__gethex+0x1ea>
 801eeec:	f04f 0801 	mov.w	r8, #1
 801eef0:	e7c2      	b.n	801ee78 <__gethex+0x3c0>
 801eef2:	f015 051f 	ands.w	r5, r5, #31
 801eef6:	d0f9      	beq.n	801eeec <__gethex+0x434>
 801eef8:	9b01      	ldr	r3, [sp, #4]
 801eefa:	441a      	add	r2, r3
 801eefc:	f1c5 0520 	rsb	r5, r5, #32
 801ef00:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801ef04:	f7fd fea4 	bl	801cc50 <__hi0bits>
 801ef08:	42a8      	cmp	r0, r5
 801ef0a:	dbe6      	blt.n	801eeda <__gethex+0x422>
 801ef0c:	e7ee      	b.n	801eeec <__gethex+0x434>
 801ef0e:	bf00      	nop
 801ef10:	080215cd 	.word	0x080215cd

0801ef14 <L_shift>:
 801ef14:	f1c2 0208 	rsb	r2, r2, #8
 801ef18:	0092      	lsls	r2, r2, #2
 801ef1a:	b570      	push	{r4, r5, r6, lr}
 801ef1c:	f1c2 0620 	rsb	r6, r2, #32
 801ef20:	6843      	ldr	r3, [r0, #4]
 801ef22:	6804      	ldr	r4, [r0, #0]
 801ef24:	fa03 f506 	lsl.w	r5, r3, r6
 801ef28:	432c      	orrs	r4, r5
 801ef2a:	40d3      	lsrs	r3, r2
 801ef2c:	6004      	str	r4, [r0, #0]
 801ef2e:	f840 3f04 	str.w	r3, [r0, #4]!
 801ef32:	4288      	cmp	r0, r1
 801ef34:	d3f4      	bcc.n	801ef20 <L_shift+0xc>
 801ef36:	bd70      	pop	{r4, r5, r6, pc}

0801ef38 <__match>:
 801ef38:	b530      	push	{r4, r5, lr}
 801ef3a:	6803      	ldr	r3, [r0, #0]
 801ef3c:	3301      	adds	r3, #1
 801ef3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ef42:	b914      	cbnz	r4, 801ef4a <__match+0x12>
 801ef44:	6003      	str	r3, [r0, #0]
 801ef46:	2001      	movs	r0, #1
 801ef48:	bd30      	pop	{r4, r5, pc}
 801ef4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ef4e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801ef52:	2d19      	cmp	r5, #25
 801ef54:	bf98      	it	ls
 801ef56:	3220      	addls	r2, #32
 801ef58:	42a2      	cmp	r2, r4
 801ef5a:	d0f0      	beq.n	801ef3e <__match+0x6>
 801ef5c:	2000      	movs	r0, #0
 801ef5e:	e7f3      	b.n	801ef48 <__match+0x10>

0801ef60 <__hexnan>:
 801ef60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef64:	680b      	ldr	r3, [r1, #0]
 801ef66:	6801      	ldr	r1, [r0, #0]
 801ef68:	115e      	asrs	r6, r3, #5
 801ef6a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801ef6e:	f013 031f 	ands.w	r3, r3, #31
 801ef72:	b087      	sub	sp, #28
 801ef74:	bf18      	it	ne
 801ef76:	3604      	addne	r6, #4
 801ef78:	2500      	movs	r5, #0
 801ef7a:	1f37      	subs	r7, r6, #4
 801ef7c:	4682      	mov	sl, r0
 801ef7e:	4690      	mov	r8, r2
 801ef80:	9301      	str	r3, [sp, #4]
 801ef82:	f846 5c04 	str.w	r5, [r6, #-4]
 801ef86:	46b9      	mov	r9, r7
 801ef88:	463c      	mov	r4, r7
 801ef8a:	9502      	str	r5, [sp, #8]
 801ef8c:	46ab      	mov	fp, r5
 801ef8e:	784a      	ldrb	r2, [r1, #1]
 801ef90:	1c4b      	adds	r3, r1, #1
 801ef92:	9303      	str	r3, [sp, #12]
 801ef94:	b342      	cbz	r2, 801efe8 <__hexnan+0x88>
 801ef96:	4610      	mov	r0, r2
 801ef98:	9105      	str	r1, [sp, #20]
 801ef9a:	9204      	str	r2, [sp, #16]
 801ef9c:	f7ff fd76 	bl	801ea8c <__hexdig_fun>
 801efa0:	2800      	cmp	r0, #0
 801efa2:	d14f      	bne.n	801f044 <__hexnan+0xe4>
 801efa4:	9a04      	ldr	r2, [sp, #16]
 801efa6:	9905      	ldr	r1, [sp, #20]
 801efa8:	2a20      	cmp	r2, #32
 801efaa:	d818      	bhi.n	801efde <__hexnan+0x7e>
 801efac:	9b02      	ldr	r3, [sp, #8]
 801efae:	459b      	cmp	fp, r3
 801efb0:	dd13      	ble.n	801efda <__hexnan+0x7a>
 801efb2:	454c      	cmp	r4, r9
 801efb4:	d206      	bcs.n	801efc4 <__hexnan+0x64>
 801efb6:	2d07      	cmp	r5, #7
 801efb8:	dc04      	bgt.n	801efc4 <__hexnan+0x64>
 801efba:	462a      	mov	r2, r5
 801efbc:	4649      	mov	r1, r9
 801efbe:	4620      	mov	r0, r4
 801efc0:	f7ff ffa8 	bl	801ef14 <L_shift>
 801efc4:	4544      	cmp	r4, r8
 801efc6:	d950      	bls.n	801f06a <__hexnan+0x10a>
 801efc8:	2300      	movs	r3, #0
 801efca:	f1a4 0904 	sub.w	r9, r4, #4
 801efce:	f844 3c04 	str.w	r3, [r4, #-4]
 801efd2:	f8cd b008 	str.w	fp, [sp, #8]
 801efd6:	464c      	mov	r4, r9
 801efd8:	461d      	mov	r5, r3
 801efda:	9903      	ldr	r1, [sp, #12]
 801efdc:	e7d7      	b.n	801ef8e <__hexnan+0x2e>
 801efde:	2a29      	cmp	r2, #41	; 0x29
 801efe0:	d155      	bne.n	801f08e <__hexnan+0x12e>
 801efe2:	3102      	adds	r1, #2
 801efe4:	f8ca 1000 	str.w	r1, [sl]
 801efe8:	f1bb 0f00 	cmp.w	fp, #0
 801efec:	d04f      	beq.n	801f08e <__hexnan+0x12e>
 801efee:	454c      	cmp	r4, r9
 801eff0:	d206      	bcs.n	801f000 <__hexnan+0xa0>
 801eff2:	2d07      	cmp	r5, #7
 801eff4:	dc04      	bgt.n	801f000 <__hexnan+0xa0>
 801eff6:	462a      	mov	r2, r5
 801eff8:	4649      	mov	r1, r9
 801effa:	4620      	mov	r0, r4
 801effc:	f7ff ff8a 	bl	801ef14 <L_shift>
 801f000:	4544      	cmp	r4, r8
 801f002:	d934      	bls.n	801f06e <__hexnan+0x10e>
 801f004:	f1a8 0204 	sub.w	r2, r8, #4
 801f008:	4623      	mov	r3, r4
 801f00a:	f853 1b04 	ldr.w	r1, [r3], #4
 801f00e:	f842 1f04 	str.w	r1, [r2, #4]!
 801f012:	429f      	cmp	r7, r3
 801f014:	d2f9      	bcs.n	801f00a <__hexnan+0xaa>
 801f016:	1b3b      	subs	r3, r7, r4
 801f018:	f023 0303 	bic.w	r3, r3, #3
 801f01c:	3304      	adds	r3, #4
 801f01e:	3e03      	subs	r6, #3
 801f020:	3401      	adds	r4, #1
 801f022:	42a6      	cmp	r6, r4
 801f024:	bf38      	it	cc
 801f026:	2304      	movcc	r3, #4
 801f028:	4443      	add	r3, r8
 801f02a:	2200      	movs	r2, #0
 801f02c:	f843 2b04 	str.w	r2, [r3], #4
 801f030:	429f      	cmp	r7, r3
 801f032:	d2fb      	bcs.n	801f02c <__hexnan+0xcc>
 801f034:	683b      	ldr	r3, [r7, #0]
 801f036:	b91b      	cbnz	r3, 801f040 <__hexnan+0xe0>
 801f038:	4547      	cmp	r7, r8
 801f03a:	d126      	bne.n	801f08a <__hexnan+0x12a>
 801f03c:	2301      	movs	r3, #1
 801f03e:	603b      	str	r3, [r7, #0]
 801f040:	2005      	movs	r0, #5
 801f042:	e025      	b.n	801f090 <__hexnan+0x130>
 801f044:	3501      	adds	r5, #1
 801f046:	2d08      	cmp	r5, #8
 801f048:	f10b 0b01 	add.w	fp, fp, #1
 801f04c:	dd06      	ble.n	801f05c <__hexnan+0xfc>
 801f04e:	4544      	cmp	r4, r8
 801f050:	d9c3      	bls.n	801efda <__hexnan+0x7a>
 801f052:	2300      	movs	r3, #0
 801f054:	f844 3c04 	str.w	r3, [r4, #-4]
 801f058:	2501      	movs	r5, #1
 801f05a:	3c04      	subs	r4, #4
 801f05c:	6822      	ldr	r2, [r4, #0]
 801f05e:	f000 000f 	and.w	r0, r0, #15
 801f062:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801f066:	6020      	str	r0, [r4, #0]
 801f068:	e7b7      	b.n	801efda <__hexnan+0x7a>
 801f06a:	2508      	movs	r5, #8
 801f06c:	e7b5      	b.n	801efda <__hexnan+0x7a>
 801f06e:	9b01      	ldr	r3, [sp, #4]
 801f070:	2b00      	cmp	r3, #0
 801f072:	d0df      	beq.n	801f034 <__hexnan+0xd4>
 801f074:	f1c3 0320 	rsb	r3, r3, #32
 801f078:	f04f 32ff 	mov.w	r2, #4294967295
 801f07c:	40da      	lsrs	r2, r3
 801f07e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801f082:	4013      	ands	r3, r2
 801f084:	f846 3c04 	str.w	r3, [r6, #-4]
 801f088:	e7d4      	b.n	801f034 <__hexnan+0xd4>
 801f08a:	3f04      	subs	r7, #4
 801f08c:	e7d2      	b.n	801f034 <__hexnan+0xd4>
 801f08e:	2004      	movs	r0, #4
 801f090:	b007      	add	sp, #28
 801f092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f096 <__ascii_mbtowc>:
 801f096:	b082      	sub	sp, #8
 801f098:	b901      	cbnz	r1, 801f09c <__ascii_mbtowc+0x6>
 801f09a:	a901      	add	r1, sp, #4
 801f09c:	b142      	cbz	r2, 801f0b0 <__ascii_mbtowc+0x1a>
 801f09e:	b14b      	cbz	r3, 801f0b4 <__ascii_mbtowc+0x1e>
 801f0a0:	7813      	ldrb	r3, [r2, #0]
 801f0a2:	600b      	str	r3, [r1, #0]
 801f0a4:	7812      	ldrb	r2, [r2, #0]
 801f0a6:	1e10      	subs	r0, r2, #0
 801f0a8:	bf18      	it	ne
 801f0aa:	2001      	movne	r0, #1
 801f0ac:	b002      	add	sp, #8
 801f0ae:	4770      	bx	lr
 801f0b0:	4610      	mov	r0, r2
 801f0b2:	e7fb      	b.n	801f0ac <__ascii_mbtowc+0x16>
 801f0b4:	f06f 0001 	mvn.w	r0, #1
 801f0b8:	e7f8      	b.n	801f0ac <__ascii_mbtowc+0x16>

0801f0ba <_realloc_r>:
 801f0ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f0be:	4680      	mov	r8, r0
 801f0c0:	4614      	mov	r4, r2
 801f0c2:	460e      	mov	r6, r1
 801f0c4:	b921      	cbnz	r1, 801f0d0 <_realloc_r+0x16>
 801f0c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f0ca:	4611      	mov	r1, r2
 801f0cc:	f7fd bc42 	b.w	801c954 <_malloc_r>
 801f0d0:	b92a      	cbnz	r2, 801f0de <_realloc_r+0x24>
 801f0d2:	f7fd fbcb 	bl	801c86c <_free_r>
 801f0d6:	4625      	mov	r5, r4
 801f0d8:	4628      	mov	r0, r5
 801f0da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f0de:	f000 f842 	bl	801f166 <_malloc_usable_size_r>
 801f0e2:	4284      	cmp	r4, r0
 801f0e4:	4607      	mov	r7, r0
 801f0e6:	d802      	bhi.n	801f0ee <_realloc_r+0x34>
 801f0e8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801f0ec:	d812      	bhi.n	801f114 <_realloc_r+0x5a>
 801f0ee:	4621      	mov	r1, r4
 801f0f0:	4640      	mov	r0, r8
 801f0f2:	f7fd fc2f 	bl	801c954 <_malloc_r>
 801f0f6:	4605      	mov	r5, r0
 801f0f8:	2800      	cmp	r0, #0
 801f0fa:	d0ed      	beq.n	801f0d8 <_realloc_r+0x1e>
 801f0fc:	42bc      	cmp	r4, r7
 801f0fe:	4622      	mov	r2, r4
 801f100:	4631      	mov	r1, r6
 801f102:	bf28      	it	cs
 801f104:	463a      	movcs	r2, r7
 801f106:	f7fc fd20 	bl	801bb4a <memcpy>
 801f10a:	4631      	mov	r1, r6
 801f10c:	4640      	mov	r0, r8
 801f10e:	f7fd fbad 	bl	801c86c <_free_r>
 801f112:	e7e1      	b.n	801f0d8 <_realloc_r+0x1e>
 801f114:	4635      	mov	r5, r6
 801f116:	e7df      	b.n	801f0d8 <_realloc_r+0x1e>

0801f118 <__ascii_wctomb>:
 801f118:	b149      	cbz	r1, 801f12e <__ascii_wctomb+0x16>
 801f11a:	2aff      	cmp	r2, #255	; 0xff
 801f11c:	bf85      	ittet	hi
 801f11e:	238a      	movhi	r3, #138	; 0x8a
 801f120:	6003      	strhi	r3, [r0, #0]
 801f122:	700a      	strbls	r2, [r1, #0]
 801f124:	f04f 30ff 	movhi.w	r0, #4294967295
 801f128:	bf98      	it	ls
 801f12a:	2001      	movls	r0, #1
 801f12c:	4770      	bx	lr
 801f12e:	4608      	mov	r0, r1
 801f130:	4770      	bx	lr
	...

0801f134 <fiprintf>:
 801f134:	b40e      	push	{r1, r2, r3}
 801f136:	b503      	push	{r0, r1, lr}
 801f138:	4601      	mov	r1, r0
 801f13a:	ab03      	add	r3, sp, #12
 801f13c:	4805      	ldr	r0, [pc, #20]	; (801f154 <fiprintf+0x20>)
 801f13e:	f853 2b04 	ldr.w	r2, [r3], #4
 801f142:	6800      	ldr	r0, [r0, #0]
 801f144:	9301      	str	r3, [sp, #4]
 801f146:	f7ff f957 	bl	801e3f8 <_vfiprintf_r>
 801f14a:	b002      	add	sp, #8
 801f14c:	f85d eb04 	ldr.w	lr, [sp], #4
 801f150:	b003      	add	sp, #12
 801f152:	4770      	bx	lr
 801f154:	2000014c 	.word	0x2000014c

0801f158 <abort>:
 801f158:	b508      	push	{r3, lr}
 801f15a:	2006      	movs	r0, #6
 801f15c:	f000 f834 	bl	801f1c8 <raise>
 801f160:	2001      	movs	r0, #1
 801f162:	f7ed fda1 	bl	800cca8 <_exit>

0801f166 <_malloc_usable_size_r>:
 801f166:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f16a:	1f18      	subs	r0, r3, #4
 801f16c:	2b00      	cmp	r3, #0
 801f16e:	bfbc      	itt	lt
 801f170:	580b      	ldrlt	r3, [r1, r0]
 801f172:	18c0      	addlt	r0, r0, r3
 801f174:	4770      	bx	lr

0801f176 <_raise_r>:
 801f176:	291f      	cmp	r1, #31
 801f178:	b538      	push	{r3, r4, r5, lr}
 801f17a:	4604      	mov	r4, r0
 801f17c:	460d      	mov	r5, r1
 801f17e:	d904      	bls.n	801f18a <_raise_r+0x14>
 801f180:	2316      	movs	r3, #22
 801f182:	6003      	str	r3, [r0, #0]
 801f184:	f04f 30ff 	mov.w	r0, #4294967295
 801f188:	bd38      	pop	{r3, r4, r5, pc}
 801f18a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801f18c:	b112      	cbz	r2, 801f194 <_raise_r+0x1e>
 801f18e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f192:	b94b      	cbnz	r3, 801f1a8 <_raise_r+0x32>
 801f194:	4620      	mov	r0, r4
 801f196:	f000 f831 	bl	801f1fc <_getpid_r>
 801f19a:	462a      	mov	r2, r5
 801f19c:	4601      	mov	r1, r0
 801f19e:	4620      	mov	r0, r4
 801f1a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f1a4:	f000 b818 	b.w	801f1d8 <_kill_r>
 801f1a8:	2b01      	cmp	r3, #1
 801f1aa:	d00a      	beq.n	801f1c2 <_raise_r+0x4c>
 801f1ac:	1c59      	adds	r1, r3, #1
 801f1ae:	d103      	bne.n	801f1b8 <_raise_r+0x42>
 801f1b0:	2316      	movs	r3, #22
 801f1b2:	6003      	str	r3, [r0, #0]
 801f1b4:	2001      	movs	r0, #1
 801f1b6:	e7e7      	b.n	801f188 <_raise_r+0x12>
 801f1b8:	2400      	movs	r4, #0
 801f1ba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801f1be:	4628      	mov	r0, r5
 801f1c0:	4798      	blx	r3
 801f1c2:	2000      	movs	r0, #0
 801f1c4:	e7e0      	b.n	801f188 <_raise_r+0x12>
	...

0801f1c8 <raise>:
 801f1c8:	4b02      	ldr	r3, [pc, #8]	; (801f1d4 <raise+0xc>)
 801f1ca:	4601      	mov	r1, r0
 801f1cc:	6818      	ldr	r0, [r3, #0]
 801f1ce:	f7ff bfd2 	b.w	801f176 <_raise_r>
 801f1d2:	bf00      	nop
 801f1d4:	2000014c 	.word	0x2000014c

0801f1d8 <_kill_r>:
 801f1d8:	b538      	push	{r3, r4, r5, lr}
 801f1da:	4d07      	ldr	r5, [pc, #28]	; (801f1f8 <_kill_r+0x20>)
 801f1dc:	2300      	movs	r3, #0
 801f1de:	4604      	mov	r4, r0
 801f1e0:	4608      	mov	r0, r1
 801f1e2:	4611      	mov	r1, r2
 801f1e4:	602b      	str	r3, [r5, #0]
 801f1e6:	f7ed fd4f 	bl	800cc88 <_kill>
 801f1ea:	1c43      	adds	r3, r0, #1
 801f1ec:	d102      	bne.n	801f1f4 <_kill_r+0x1c>
 801f1ee:	682b      	ldr	r3, [r5, #0]
 801f1f0:	b103      	cbz	r3, 801f1f4 <_kill_r+0x1c>
 801f1f2:	6023      	str	r3, [r4, #0]
 801f1f4:	bd38      	pop	{r3, r4, r5, pc}
 801f1f6:	bf00      	nop
 801f1f8:	20000d30 	.word	0x20000d30

0801f1fc <_getpid_r>:
 801f1fc:	f7ed bd3c 	b.w	800cc78 <_getpid>

0801f200 <exp>:
 801f200:	b538      	push	{r3, r4, r5, lr}
 801f202:	ed2d 8b02 	vpush	{d8}
 801f206:	ec55 4b10 	vmov	r4, r5, d0
 801f20a:	f000 fa01 	bl	801f610 <__ieee754_exp>
 801f20e:	eeb0 8a40 	vmov.f32	s16, s0
 801f212:	eef0 8a60 	vmov.f32	s17, s1
 801f216:	ec45 4b10 	vmov	d0, r4, r5
 801f21a:	f000 f913 	bl	801f444 <finite>
 801f21e:	b168      	cbz	r0, 801f23c <exp+0x3c>
 801f220:	a317      	add	r3, pc, #92	; (adr r3, 801f280 <exp+0x80>)
 801f222:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f226:	4620      	mov	r0, r4
 801f228:	4629      	mov	r1, r5
 801f22a:	f7e9 fe85 	bl	8008f38 <__aeabi_dcmpgt>
 801f22e:	b160      	cbz	r0, 801f24a <exp+0x4a>
 801f230:	f7fc fc5e 	bl	801baf0 <__errno>
 801f234:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 801f270 <exp+0x70>
 801f238:	2322      	movs	r3, #34	; 0x22
 801f23a:	6003      	str	r3, [r0, #0]
 801f23c:	eeb0 0a48 	vmov.f32	s0, s16
 801f240:	eef0 0a68 	vmov.f32	s1, s17
 801f244:	ecbd 8b02 	vpop	{d8}
 801f248:	bd38      	pop	{r3, r4, r5, pc}
 801f24a:	a30f      	add	r3, pc, #60	; (adr r3, 801f288 <exp+0x88>)
 801f24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f250:	4620      	mov	r0, r4
 801f252:	4629      	mov	r1, r5
 801f254:	f7e9 fe52 	bl	8008efc <__aeabi_dcmplt>
 801f258:	2800      	cmp	r0, #0
 801f25a:	d0ef      	beq.n	801f23c <exp+0x3c>
 801f25c:	f7fc fc48 	bl	801baf0 <__errno>
 801f260:	2322      	movs	r3, #34	; 0x22
 801f262:	ed9f 8b05 	vldr	d8, [pc, #20]	; 801f278 <exp+0x78>
 801f266:	6003      	str	r3, [r0, #0]
 801f268:	e7e8      	b.n	801f23c <exp+0x3c>
 801f26a:	bf00      	nop
 801f26c:	f3af 8000 	nop.w
 801f270:	00000000 	.word	0x00000000
 801f274:	7ff00000 	.word	0x7ff00000
	...
 801f280:	fefa39ef 	.word	0xfefa39ef
 801f284:	40862e42 	.word	0x40862e42
 801f288:	d52d3051 	.word	0xd52d3051
 801f28c:	c0874910 	.word	0xc0874910

0801f290 <log10>:
 801f290:	b538      	push	{r3, r4, r5, lr}
 801f292:	ed2d 8b02 	vpush	{d8}
 801f296:	ec55 4b10 	vmov	r4, r5, d0
 801f29a:	f000 fb3d 	bl	801f918 <__ieee754_log10>
 801f29e:	4622      	mov	r2, r4
 801f2a0:	462b      	mov	r3, r5
 801f2a2:	4620      	mov	r0, r4
 801f2a4:	4629      	mov	r1, r5
 801f2a6:	eeb0 8a40 	vmov.f32	s16, s0
 801f2aa:	eef0 8a60 	vmov.f32	s17, s1
 801f2ae:	f7e9 fe4d 	bl	8008f4c <__aeabi_dcmpun>
 801f2b2:	b998      	cbnz	r0, 801f2dc <log10+0x4c>
 801f2b4:	2200      	movs	r2, #0
 801f2b6:	2300      	movs	r3, #0
 801f2b8:	4620      	mov	r0, r4
 801f2ba:	4629      	mov	r1, r5
 801f2bc:	f7e9 fe28 	bl	8008f10 <__aeabi_dcmple>
 801f2c0:	b160      	cbz	r0, 801f2dc <log10+0x4c>
 801f2c2:	2200      	movs	r2, #0
 801f2c4:	2300      	movs	r3, #0
 801f2c6:	4620      	mov	r0, r4
 801f2c8:	4629      	mov	r1, r5
 801f2ca:	f7e9 fe0d 	bl	8008ee8 <__aeabi_dcmpeq>
 801f2ce:	b160      	cbz	r0, 801f2ea <log10+0x5a>
 801f2d0:	f7fc fc0e 	bl	801baf0 <__errno>
 801f2d4:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 801f300 <log10+0x70>
 801f2d8:	2322      	movs	r3, #34	; 0x22
 801f2da:	6003      	str	r3, [r0, #0]
 801f2dc:	eeb0 0a48 	vmov.f32	s0, s16
 801f2e0:	eef0 0a68 	vmov.f32	s1, s17
 801f2e4:	ecbd 8b02 	vpop	{d8}
 801f2e8:	bd38      	pop	{r3, r4, r5, pc}
 801f2ea:	f7fc fc01 	bl	801baf0 <__errno>
 801f2ee:	ecbd 8b02 	vpop	{d8}
 801f2f2:	2321      	movs	r3, #33	; 0x21
 801f2f4:	6003      	str	r3, [r0, #0]
 801f2f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f2fa:	4803      	ldr	r0, [pc, #12]	; (801f308 <log10+0x78>)
 801f2fc:	f7ff bb38 	b.w	801e970 <nan>
 801f300:	00000000 	.word	0x00000000
 801f304:	fff00000 	.word	0xfff00000
 801f308:	080218dd 	.word	0x080218dd

0801f30c <pow>:
 801f30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f30e:	ed2d 8b02 	vpush	{d8}
 801f312:	eeb0 8a40 	vmov.f32	s16, s0
 801f316:	eef0 8a60 	vmov.f32	s17, s1
 801f31a:	ec55 4b11 	vmov	r4, r5, d1
 801f31e:	f000 fb87 	bl	801fa30 <__ieee754_pow>
 801f322:	4622      	mov	r2, r4
 801f324:	462b      	mov	r3, r5
 801f326:	4620      	mov	r0, r4
 801f328:	4629      	mov	r1, r5
 801f32a:	ec57 6b10 	vmov	r6, r7, d0
 801f32e:	f7e9 fe0d 	bl	8008f4c <__aeabi_dcmpun>
 801f332:	2800      	cmp	r0, #0
 801f334:	d13b      	bne.n	801f3ae <pow+0xa2>
 801f336:	ec51 0b18 	vmov	r0, r1, d8
 801f33a:	2200      	movs	r2, #0
 801f33c:	2300      	movs	r3, #0
 801f33e:	f7e9 fdd3 	bl	8008ee8 <__aeabi_dcmpeq>
 801f342:	b1b8      	cbz	r0, 801f374 <pow+0x68>
 801f344:	2200      	movs	r2, #0
 801f346:	2300      	movs	r3, #0
 801f348:	4620      	mov	r0, r4
 801f34a:	4629      	mov	r1, r5
 801f34c:	f7e9 fdcc 	bl	8008ee8 <__aeabi_dcmpeq>
 801f350:	2800      	cmp	r0, #0
 801f352:	d146      	bne.n	801f3e2 <pow+0xd6>
 801f354:	ec45 4b10 	vmov	d0, r4, r5
 801f358:	f000 f874 	bl	801f444 <finite>
 801f35c:	b338      	cbz	r0, 801f3ae <pow+0xa2>
 801f35e:	2200      	movs	r2, #0
 801f360:	2300      	movs	r3, #0
 801f362:	4620      	mov	r0, r4
 801f364:	4629      	mov	r1, r5
 801f366:	f7e9 fdc9 	bl	8008efc <__aeabi_dcmplt>
 801f36a:	b300      	cbz	r0, 801f3ae <pow+0xa2>
 801f36c:	f7fc fbc0 	bl	801baf0 <__errno>
 801f370:	2322      	movs	r3, #34	; 0x22
 801f372:	e01b      	b.n	801f3ac <pow+0xa0>
 801f374:	ec47 6b10 	vmov	d0, r6, r7
 801f378:	f000 f864 	bl	801f444 <finite>
 801f37c:	b9e0      	cbnz	r0, 801f3b8 <pow+0xac>
 801f37e:	eeb0 0a48 	vmov.f32	s0, s16
 801f382:	eef0 0a68 	vmov.f32	s1, s17
 801f386:	f000 f85d 	bl	801f444 <finite>
 801f38a:	b1a8      	cbz	r0, 801f3b8 <pow+0xac>
 801f38c:	ec45 4b10 	vmov	d0, r4, r5
 801f390:	f000 f858 	bl	801f444 <finite>
 801f394:	b180      	cbz	r0, 801f3b8 <pow+0xac>
 801f396:	4632      	mov	r2, r6
 801f398:	463b      	mov	r3, r7
 801f39a:	4630      	mov	r0, r6
 801f39c:	4639      	mov	r1, r7
 801f39e:	f7e9 fdd5 	bl	8008f4c <__aeabi_dcmpun>
 801f3a2:	2800      	cmp	r0, #0
 801f3a4:	d0e2      	beq.n	801f36c <pow+0x60>
 801f3a6:	f7fc fba3 	bl	801baf0 <__errno>
 801f3aa:	2321      	movs	r3, #33	; 0x21
 801f3ac:	6003      	str	r3, [r0, #0]
 801f3ae:	ecbd 8b02 	vpop	{d8}
 801f3b2:	ec47 6b10 	vmov	d0, r6, r7
 801f3b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f3b8:	2200      	movs	r2, #0
 801f3ba:	2300      	movs	r3, #0
 801f3bc:	4630      	mov	r0, r6
 801f3be:	4639      	mov	r1, r7
 801f3c0:	f7e9 fd92 	bl	8008ee8 <__aeabi_dcmpeq>
 801f3c4:	2800      	cmp	r0, #0
 801f3c6:	d0f2      	beq.n	801f3ae <pow+0xa2>
 801f3c8:	eeb0 0a48 	vmov.f32	s0, s16
 801f3cc:	eef0 0a68 	vmov.f32	s1, s17
 801f3d0:	f000 f838 	bl	801f444 <finite>
 801f3d4:	2800      	cmp	r0, #0
 801f3d6:	d0ea      	beq.n	801f3ae <pow+0xa2>
 801f3d8:	ec45 4b10 	vmov	d0, r4, r5
 801f3dc:	f000 f832 	bl	801f444 <finite>
 801f3e0:	e7c3      	b.n	801f36a <pow+0x5e>
 801f3e2:	4f01      	ldr	r7, [pc, #4]	; (801f3e8 <pow+0xdc>)
 801f3e4:	2600      	movs	r6, #0
 801f3e6:	e7e2      	b.n	801f3ae <pow+0xa2>
 801f3e8:	3ff00000 	.word	0x3ff00000

0801f3ec <sqrt>:
 801f3ec:	b538      	push	{r3, r4, r5, lr}
 801f3ee:	ed2d 8b02 	vpush	{d8}
 801f3f2:	ec55 4b10 	vmov	r4, r5, d0
 801f3f6:	f000 f831 	bl	801f45c <__ieee754_sqrt>
 801f3fa:	4622      	mov	r2, r4
 801f3fc:	462b      	mov	r3, r5
 801f3fe:	4620      	mov	r0, r4
 801f400:	4629      	mov	r1, r5
 801f402:	eeb0 8a40 	vmov.f32	s16, s0
 801f406:	eef0 8a60 	vmov.f32	s17, s1
 801f40a:	f7e9 fd9f 	bl	8008f4c <__aeabi_dcmpun>
 801f40e:	b990      	cbnz	r0, 801f436 <sqrt+0x4a>
 801f410:	2200      	movs	r2, #0
 801f412:	2300      	movs	r3, #0
 801f414:	4620      	mov	r0, r4
 801f416:	4629      	mov	r1, r5
 801f418:	f7e9 fd70 	bl	8008efc <__aeabi_dcmplt>
 801f41c:	b158      	cbz	r0, 801f436 <sqrt+0x4a>
 801f41e:	f7fc fb67 	bl	801baf0 <__errno>
 801f422:	2321      	movs	r3, #33	; 0x21
 801f424:	6003      	str	r3, [r0, #0]
 801f426:	2200      	movs	r2, #0
 801f428:	2300      	movs	r3, #0
 801f42a:	4610      	mov	r0, r2
 801f42c:	4619      	mov	r1, r3
 801f42e:	f7e9 fc1d 	bl	8008c6c <__aeabi_ddiv>
 801f432:	ec41 0b18 	vmov	d8, r0, r1
 801f436:	eeb0 0a48 	vmov.f32	s0, s16
 801f43a:	eef0 0a68 	vmov.f32	s1, s17
 801f43e:	ecbd 8b02 	vpop	{d8}
 801f442:	bd38      	pop	{r3, r4, r5, pc}

0801f444 <finite>:
 801f444:	b082      	sub	sp, #8
 801f446:	ed8d 0b00 	vstr	d0, [sp]
 801f44a:	9801      	ldr	r0, [sp, #4]
 801f44c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801f450:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801f454:	0fc0      	lsrs	r0, r0, #31
 801f456:	b002      	add	sp, #8
 801f458:	4770      	bx	lr
	...

0801f45c <__ieee754_sqrt>:
 801f45c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f460:	ec55 4b10 	vmov	r4, r5, d0
 801f464:	4e67      	ldr	r6, [pc, #412]	; (801f604 <__ieee754_sqrt+0x1a8>)
 801f466:	43ae      	bics	r6, r5
 801f468:	ee10 0a10 	vmov	r0, s0
 801f46c:	ee10 2a10 	vmov	r2, s0
 801f470:	4629      	mov	r1, r5
 801f472:	462b      	mov	r3, r5
 801f474:	d10d      	bne.n	801f492 <__ieee754_sqrt+0x36>
 801f476:	f7e9 facf 	bl	8008a18 <__aeabi_dmul>
 801f47a:	4602      	mov	r2, r0
 801f47c:	460b      	mov	r3, r1
 801f47e:	4620      	mov	r0, r4
 801f480:	4629      	mov	r1, r5
 801f482:	f7e9 f913 	bl	80086ac <__adddf3>
 801f486:	4604      	mov	r4, r0
 801f488:	460d      	mov	r5, r1
 801f48a:	ec45 4b10 	vmov	d0, r4, r5
 801f48e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f492:	2d00      	cmp	r5, #0
 801f494:	dc0b      	bgt.n	801f4ae <__ieee754_sqrt+0x52>
 801f496:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801f49a:	4326      	orrs	r6, r4
 801f49c:	d0f5      	beq.n	801f48a <__ieee754_sqrt+0x2e>
 801f49e:	b135      	cbz	r5, 801f4ae <__ieee754_sqrt+0x52>
 801f4a0:	f7e9 f902 	bl	80086a8 <__aeabi_dsub>
 801f4a4:	4602      	mov	r2, r0
 801f4a6:	460b      	mov	r3, r1
 801f4a8:	f7e9 fbe0 	bl	8008c6c <__aeabi_ddiv>
 801f4ac:	e7eb      	b.n	801f486 <__ieee754_sqrt+0x2a>
 801f4ae:	1509      	asrs	r1, r1, #20
 801f4b0:	f000 808d 	beq.w	801f5ce <__ieee754_sqrt+0x172>
 801f4b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f4b8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801f4bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801f4c0:	07c9      	lsls	r1, r1, #31
 801f4c2:	bf5c      	itt	pl
 801f4c4:	005b      	lslpl	r3, r3, #1
 801f4c6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801f4ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801f4ce:	bf58      	it	pl
 801f4d0:	0052      	lslpl	r2, r2, #1
 801f4d2:	2500      	movs	r5, #0
 801f4d4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801f4d8:	1076      	asrs	r6, r6, #1
 801f4da:	0052      	lsls	r2, r2, #1
 801f4dc:	f04f 0e16 	mov.w	lr, #22
 801f4e0:	46ac      	mov	ip, r5
 801f4e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801f4e6:	eb0c 0001 	add.w	r0, ip, r1
 801f4ea:	4298      	cmp	r0, r3
 801f4ec:	bfde      	ittt	le
 801f4ee:	1a1b      	suble	r3, r3, r0
 801f4f0:	eb00 0c01 	addle.w	ip, r0, r1
 801f4f4:	186d      	addle	r5, r5, r1
 801f4f6:	005b      	lsls	r3, r3, #1
 801f4f8:	f1be 0e01 	subs.w	lr, lr, #1
 801f4fc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801f500:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801f504:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801f508:	d1ed      	bne.n	801f4e6 <__ieee754_sqrt+0x8a>
 801f50a:	4674      	mov	r4, lr
 801f50c:	2720      	movs	r7, #32
 801f50e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801f512:	4563      	cmp	r3, ip
 801f514:	eb01 000e 	add.w	r0, r1, lr
 801f518:	dc02      	bgt.n	801f520 <__ieee754_sqrt+0xc4>
 801f51a:	d113      	bne.n	801f544 <__ieee754_sqrt+0xe8>
 801f51c:	4290      	cmp	r0, r2
 801f51e:	d811      	bhi.n	801f544 <__ieee754_sqrt+0xe8>
 801f520:	2800      	cmp	r0, #0
 801f522:	eb00 0e01 	add.w	lr, r0, r1
 801f526:	da57      	bge.n	801f5d8 <__ieee754_sqrt+0x17c>
 801f528:	f1be 0f00 	cmp.w	lr, #0
 801f52c:	db54      	blt.n	801f5d8 <__ieee754_sqrt+0x17c>
 801f52e:	f10c 0801 	add.w	r8, ip, #1
 801f532:	eba3 030c 	sub.w	r3, r3, ip
 801f536:	4290      	cmp	r0, r2
 801f538:	bf88      	it	hi
 801f53a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801f53e:	1a12      	subs	r2, r2, r0
 801f540:	440c      	add	r4, r1
 801f542:	46c4      	mov	ip, r8
 801f544:	005b      	lsls	r3, r3, #1
 801f546:	3f01      	subs	r7, #1
 801f548:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801f54c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801f550:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801f554:	d1dd      	bne.n	801f512 <__ieee754_sqrt+0xb6>
 801f556:	4313      	orrs	r3, r2
 801f558:	d01b      	beq.n	801f592 <__ieee754_sqrt+0x136>
 801f55a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 801f608 <__ieee754_sqrt+0x1ac>
 801f55e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801f60c <__ieee754_sqrt+0x1b0>
 801f562:	e9da 0100 	ldrd	r0, r1, [sl]
 801f566:	e9db 2300 	ldrd	r2, r3, [fp]
 801f56a:	f7e9 f89d 	bl	80086a8 <__aeabi_dsub>
 801f56e:	e9da 8900 	ldrd	r8, r9, [sl]
 801f572:	4602      	mov	r2, r0
 801f574:	460b      	mov	r3, r1
 801f576:	4640      	mov	r0, r8
 801f578:	4649      	mov	r1, r9
 801f57a:	f7e9 fcc9 	bl	8008f10 <__aeabi_dcmple>
 801f57e:	b140      	cbz	r0, 801f592 <__ieee754_sqrt+0x136>
 801f580:	f1b4 3fff 	cmp.w	r4, #4294967295
 801f584:	e9da 0100 	ldrd	r0, r1, [sl]
 801f588:	e9db 2300 	ldrd	r2, r3, [fp]
 801f58c:	d126      	bne.n	801f5dc <__ieee754_sqrt+0x180>
 801f58e:	3501      	adds	r5, #1
 801f590:	463c      	mov	r4, r7
 801f592:	106a      	asrs	r2, r5, #1
 801f594:	0863      	lsrs	r3, r4, #1
 801f596:	07e9      	lsls	r1, r5, #31
 801f598:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801f59c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801f5a0:	bf48      	it	mi
 801f5a2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801f5a6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801f5aa:	461c      	mov	r4, r3
 801f5ac:	e76d      	b.n	801f48a <__ieee754_sqrt+0x2e>
 801f5ae:	0ad3      	lsrs	r3, r2, #11
 801f5b0:	3815      	subs	r0, #21
 801f5b2:	0552      	lsls	r2, r2, #21
 801f5b4:	2b00      	cmp	r3, #0
 801f5b6:	d0fa      	beq.n	801f5ae <__ieee754_sqrt+0x152>
 801f5b8:	02dc      	lsls	r4, r3, #11
 801f5ba:	d50a      	bpl.n	801f5d2 <__ieee754_sqrt+0x176>
 801f5bc:	f1c1 0420 	rsb	r4, r1, #32
 801f5c0:	fa22 f404 	lsr.w	r4, r2, r4
 801f5c4:	1e4d      	subs	r5, r1, #1
 801f5c6:	408a      	lsls	r2, r1
 801f5c8:	4323      	orrs	r3, r4
 801f5ca:	1b41      	subs	r1, r0, r5
 801f5cc:	e772      	b.n	801f4b4 <__ieee754_sqrt+0x58>
 801f5ce:	4608      	mov	r0, r1
 801f5d0:	e7f0      	b.n	801f5b4 <__ieee754_sqrt+0x158>
 801f5d2:	005b      	lsls	r3, r3, #1
 801f5d4:	3101      	adds	r1, #1
 801f5d6:	e7ef      	b.n	801f5b8 <__ieee754_sqrt+0x15c>
 801f5d8:	46e0      	mov	r8, ip
 801f5da:	e7aa      	b.n	801f532 <__ieee754_sqrt+0xd6>
 801f5dc:	f7e9 f866 	bl	80086ac <__adddf3>
 801f5e0:	e9da 8900 	ldrd	r8, r9, [sl]
 801f5e4:	4602      	mov	r2, r0
 801f5e6:	460b      	mov	r3, r1
 801f5e8:	4640      	mov	r0, r8
 801f5ea:	4649      	mov	r1, r9
 801f5ec:	f7e9 fc86 	bl	8008efc <__aeabi_dcmplt>
 801f5f0:	b120      	cbz	r0, 801f5fc <__ieee754_sqrt+0x1a0>
 801f5f2:	1ca0      	adds	r0, r4, #2
 801f5f4:	bf08      	it	eq
 801f5f6:	3501      	addeq	r5, #1
 801f5f8:	3402      	adds	r4, #2
 801f5fa:	e7ca      	b.n	801f592 <__ieee754_sqrt+0x136>
 801f5fc:	3401      	adds	r4, #1
 801f5fe:	f024 0401 	bic.w	r4, r4, #1
 801f602:	e7c6      	b.n	801f592 <__ieee754_sqrt+0x136>
 801f604:	7ff00000 	.word	0x7ff00000
 801f608:	200002c0 	.word	0x200002c0
 801f60c:	200002c8 	.word	0x200002c8

0801f610 <__ieee754_exp>:
 801f610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f614:	ec55 4b10 	vmov	r4, r5, d0
 801f618:	49b5      	ldr	r1, [pc, #724]	; (801f8f0 <__ieee754_exp+0x2e0>)
 801f61a:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 801f61e:	428a      	cmp	r2, r1
 801f620:	ed2d 8b04 	vpush	{d8-d9}
 801f624:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 801f628:	d93b      	bls.n	801f6a2 <__ieee754_exp+0x92>
 801f62a:	49b2      	ldr	r1, [pc, #712]	; (801f8f4 <__ieee754_exp+0x2e4>)
 801f62c:	428a      	cmp	r2, r1
 801f62e:	d916      	bls.n	801f65e <__ieee754_exp+0x4e>
 801f630:	f3c5 0313 	ubfx	r3, r5, #0, #20
 801f634:	4323      	orrs	r3, r4
 801f636:	ee10 2a10 	vmov	r2, s0
 801f63a:	d007      	beq.n	801f64c <__ieee754_exp+0x3c>
 801f63c:	462b      	mov	r3, r5
 801f63e:	4620      	mov	r0, r4
 801f640:	4629      	mov	r1, r5
 801f642:	f7e9 f833 	bl	80086ac <__adddf3>
 801f646:	4604      	mov	r4, r0
 801f648:	460d      	mov	r5, r1
 801f64a:	e002      	b.n	801f652 <__ieee754_exp+0x42>
 801f64c:	b10e      	cbz	r6, 801f652 <__ieee754_exp+0x42>
 801f64e:	2400      	movs	r4, #0
 801f650:	2500      	movs	r5, #0
 801f652:	ecbd 8b04 	vpop	{d8-d9}
 801f656:	ec45 4b10 	vmov	d0, r4, r5
 801f65a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f65e:	a38e      	add	r3, pc, #568	; (adr r3, 801f898 <__ieee754_exp+0x288>)
 801f660:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f664:	ee10 0a10 	vmov	r0, s0
 801f668:	4629      	mov	r1, r5
 801f66a:	f7e9 fc65 	bl	8008f38 <__aeabi_dcmpgt>
 801f66e:	4607      	mov	r7, r0
 801f670:	b130      	cbz	r0, 801f680 <__ieee754_exp+0x70>
 801f672:	ecbd 8b04 	vpop	{d8-d9}
 801f676:	2000      	movs	r0, #0
 801f678:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f67c:	f000 bfb1 	b.w	80205e2 <__math_oflow>
 801f680:	a387      	add	r3, pc, #540	; (adr r3, 801f8a0 <__ieee754_exp+0x290>)
 801f682:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f686:	4620      	mov	r0, r4
 801f688:	4629      	mov	r1, r5
 801f68a:	f7e9 fc37 	bl	8008efc <__aeabi_dcmplt>
 801f68e:	2800      	cmp	r0, #0
 801f690:	f000 808b 	beq.w	801f7aa <__ieee754_exp+0x19a>
 801f694:	ecbd 8b04 	vpop	{d8-d9}
 801f698:	4638      	mov	r0, r7
 801f69a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f69e:	f000 bf97 	b.w	80205d0 <__math_uflow>
 801f6a2:	4b95      	ldr	r3, [pc, #596]	; (801f8f8 <__ieee754_exp+0x2e8>)
 801f6a4:	429a      	cmp	r2, r3
 801f6a6:	f240 80ac 	bls.w	801f802 <__ieee754_exp+0x1f2>
 801f6aa:	4b94      	ldr	r3, [pc, #592]	; (801f8fc <__ieee754_exp+0x2ec>)
 801f6ac:	429a      	cmp	r2, r3
 801f6ae:	d87c      	bhi.n	801f7aa <__ieee754_exp+0x19a>
 801f6b0:	4b93      	ldr	r3, [pc, #588]	; (801f900 <__ieee754_exp+0x2f0>)
 801f6b2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801f6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f6ba:	ee10 0a10 	vmov	r0, s0
 801f6be:	4629      	mov	r1, r5
 801f6c0:	f7e8 fff2 	bl	80086a8 <__aeabi_dsub>
 801f6c4:	4b8f      	ldr	r3, [pc, #572]	; (801f904 <__ieee754_exp+0x2f4>)
 801f6c6:	00f7      	lsls	r7, r6, #3
 801f6c8:	443b      	add	r3, r7
 801f6ca:	ed93 7b00 	vldr	d7, [r3]
 801f6ce:	f1c6 0a01 	rsb	sl, r6, #1
 801f6d2:	4680      	mov	r8, r0
 801f6d4:	4689      	mov	r9, r1
 801f6d6:	ebaa 0a06 	sub.w	sl, sl, r6
 801f6da:	eeb0 8a47 	vmov.f32	s16, s14
 801f6de:	eef0 8a67 	vmov.f32	s17, s15
 801f6e2:	ec53 2b18 	vmov	r2, r3, d8
 801f6e6:	4640      	mov	r0, r8
 801f6e8:	4649      	mov	r1, r9
 801f6ea:	f7e8 ffdd 	bl	80086a8 <__aeabi_dsub>
 801f6ee:	4604      	mov	r4, r0
 801f6f0:	460d      	mov	r5, r1
 801f6f2:	4622      	mov	r2, r4
 801f6f4:	462b      	mov	r3, r5
 801f6f6:	4620      	mov	r0, r4
 801f6f8:	4629      	mov	r1, r5
 801f6fa:	f7e9 f98d 	bl	8008a18 <__aeabi_dmul>
 801f6fe:	a36a      	add	r3, pc, #424	; (adr r3, 801f8a8 <__ieee754_exp+0x298>)
 801f700:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f704:	4606      	mov	r6, r0
 801f706:	460f      	mov	r7, r1
 801f708:	f7e9 f986 	bl	8008a18 <__aeabi_dmul>
 801f70c:	a368      	add	r3, pc, #416	; (adr r3, 801f8b0 <__ieee754_exp+0x2a0>)
 801f70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f712:	f7e8 ffc9 	bl	80086a8 <__aeabi_dsub>
 801f716:	4632      	mov	r2, r6
 801f718:	463b      	mov	r3, r7
 801f71a:	f7e9 f97d 	bl	8008a18 <__aeabi_dmul>
 801f71e:	a366      	add	r3, pc, #408	; (adr r3, 801f8b8 <__ieee754_exp+0x2a8>)
 801f720:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f724:	f7e8 ffc2 	bl	80086ac <__adddf3>
 801f728:	4632      	mov	r2, r6
 801f72a:	463b      	mov	r3, r7
 801f72c:	f7e9 f974 	bl	8008a18 <__aeabi_dmul>
 801f730:	a363      	add	r3, pc, #396	; (adr r3, 801f8c0 <__ieee754_exp+0x2b0>)
 801f732:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f736:	f7e8 ffb7 	bl	80086a8 <__aeabi_dsub>
 801f73a:	4632      	mov	r2, r6
 801f73c:	463b      	mov	r3, r7
 801f73e:	f7e9 f96b 	bl	8008a18 <__aeabi_dmul>
 801f742:	a361      	add	r3, pc, #388	; (adr r3, 801f8c8 <__ieee754_exp+0x2b8>)
 801f744:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f748:	f7e8 ffb0 	bl	80086ac <__adddf3>
 801f74c:	4632      	mov	r2, r6
 801f74e:	463b      	mov	r3, r7
 801f750:	f7e9 f962 	bl	8008a18 <__aeabi_dmul>
 801f754:	4602      	mov	r2, r0
 801f756:	460b      	mov	r3, r1
 801f758:	4620      	mov	r0, r4
 801f75a:	4629      	mov	r1, r5
 801f75c:	f7e8 ffa4 	bl	80086a8 <__aeabi_dsub>
 801f760:	4602      	mov	r2, r0
 801f762:	460b      	mov	r3, r1
 801f764:	4606      	mov	r6, r0
 801f766:	460f      	mov	r7, r1
 801f768:	4620      	mov	r0, r4
 801f76a:	4629      	mov	r1, r5
 801f76c:	f7e9 f954 	bl	8008a18 <__aeabi_dmul>
 801f770:	ec41 0b19 	vmov	d9, r0, r1
 801f774:	f1ba 0f00 	cmp.w	sl, #0
 801f778:	d15d      	bne.n	801f836 <__ieee754_exp+0x226>
 801f77a:	2200      	movs	r2, #0
 801f77c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f780:	4630      	mov	r0, r6
 801f782:	4639      	mov	r1, r7
 801f784:	f7e8 ff90 	bl	80086a8 <__aeabi_dsub>
 801f788:	4602      	mov	r2, r0
 801f78a:	460b      	mov	r3, r1
 801f78c:	ec51 0b19 	vmov	r0, r1, d9
 801f790:	f7e9 fa6c 	bl	8008c6c <__aeabi_ddiv>
 801f794:	4622      	mov	r2, r4
 801f796:	462b      	mov	r3, r5
 801f798:	f7e8 ff86 	bl	80086a8 <__aeabi_dsub>
 801f79c:	4602      	mov	r2, r0
 801f79e:	460b      	mov	r3, r1
 801f7a0:	2000      	movs	r0, #0
 801f7a2:	4959      	ldr	r1, [pc, #356]	; (801f908 <__ieee754_exp+0x2f8>)
 801f7a4:	f7e8 ff80 	bl	80086a8 <__aeabi_dsub>
 801f7a8:	e74d      	b.n	801f646 <__ieee754_exp+0x36>
 801f7aa:	4b58      	ldr	r3, [pc, #352]	; (801f90c <__ieee754_exp+0x2fc>)
 801f7ac:	4620      	mov	r0, r4
 801f7ae:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801f7b2:	4629      	mov	r1, r5
 801f7b4:	a346      	add	r3, pc, #280	; (adr r3, 801f8d0 <__ieee754_exp+0x2c0>)
 801f7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f7ba:	f7e9 f92d 	bl	8008a18 <__aeabi_dmul>
 801f7be:	e9d6 2300 	ldrd	r2, r3, [r6]
 801f7c2:	f7e8 ff73 	bl	80086ac <__adddf3>
 801f7c6:	f7e9 fbd7 	bl	8008f78 <__aeabi_d2iz>
 801f7ca:	4682      	mov	sl, r0
 801f7cc:	f7e9 f8ba 	bl	8008944 <__aeabi_i2d>
 801f7d0:	a341      	add	r3, pc, #260	; (adr r3, 801f8d8 <__ieee754_exp+0x2c8>)
 801f7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f7d6:	4606      	mov	r6, r0
 801f7d8:	460f      	mov	r7, r1
 801f7da:	f7e9 f91d 	bl	8008a18 <__aeabi_dmul>
 801f7de:	4602      	mov	r2, r0
 801f7e0:	460b      	mov	r3, r1
 801f7e2:	4620      	mov	r0, r4
 801f7e4:	4629      	mov	r1, r5
 801f7e6:	f7e8 ff5f 	bl	80086a8 <__aeabi_dsub>
 801f7ea:	a33d      	add	r3, pc, #244	; (adr r3, 801f8e0 <__ieee754_exp+0x2d0>)
 801f7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f7f0:	4680      	mov	r8, r0
 801f7f2:	4689      	mov	r9, r1
 801f7f4:	4630      	mov	r0, r6
 801f7f6:	4639      	mov	r1, r7
 801f7f8:	f7e9 f90e 	bl	8008a18 <__aeabi_dmul>
 801f7fc:	ec41 0b18 	vmov	d8, r0, r1
 801f800:	e76f      	b.n	801f6e2 <__ieee754_exp+0xd2>
 801f802:	4b43      	ldr	r3, [pc, #268]	; (801f910 <__ieee754_exp+0x300>)
 801f804:	429a      	cmp	r2, r3
 801f806:	d811      	bhi.n	801f82c <__ieee754_exp+0x21c>
 801f808:	a337      	add	r3, pc, #220	; (adr r3, 801f8e8 <__ieee754_exp+0x2d8>)
 801f80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f80e:	ee10 0a10 	vmov	r0, s0
 801f812:	4629      	mov	r1, r5
 801f814:	f7e8 ff4a 	bl	80086ac <__adddf3>
 801f818:	4b3b      	ldr	r3, [pc, #236]	; (801f908 <__ieee754_exp+0x2f8>)
 801f81a:	2200      	movs	r2, #0
 801f81c:	f7e9 fb8c 	bl	8008f38 <__aeabi_dcmpgt>
 801f820:	b138      	cbz	r0, 801f832 <__ieee754_exp+0x222>
 801f822:	4b39      	ldr	r3, [pc, #228]	; (801f908 <__ieee754_exp+0x2f8>)
 801f824:	2200      	movs	r2, #0
 801f826:	4620      	mov	r0, r4
 801f828:	4629      	mov	r1, r5
 801f82a:	e70a      	b.n	801f642 <__ieee754_exp+0x32>
 801f82c:	f04f 0a00 	mov.w	sl, #0
 801f830:	e75f      	b.n	801f6f2 <__ieee754_exp+0xe2>
 801f832:	4682      	mov	sl, r0
 801f834:	e75d      	b.n	801f6f2 <__ieee754_exp+0xe2>
 801f836:	4632      	mov	r2, r6
 801f838:	463b      	mov	r3, r7
 801f83a:	2000      	movs	r0, #0
 801f83c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 801f840:	f7e8 ff32 	bl	80086a8 <__aeabi_dsub>
 801f844:	4602      	mov	r2, r0
 801f846:	460b      	mov	r3, r1
 801f848:	ec51 0b19 	vmov	r0, r1, d9
 801f84c:	f7e9 fa0e 	bl	8008c6c <__aeabi_ddiv>
 801f850:	4602      	mov	r2, r0
 801f852:	460b      	mov	r3, r1
 801f854:	ec51 0b18 	vmov	r0, r1, d8
 801f858:	f7e8 ff26 	bl	80086a8 <__aeabi_dsub>
 801f85c:	4642      	mov	r2, r8
 801f85e:	464b      	mov	r3, r9
 801f860:	f7e8 ff22 	bl	80086a8 <__aeabi_dsub>
 801f864:	4602      	mov	r2, r0
 801f866:	460b      	mov	r3, r1
 801f868:	2000      	movs	r0, #0
 801f86a:	4927      	ldr	r1, [pc, #156]	; (801f908 <__ieee754_exp+0x2f8>)
 801f86c:	f7e8 ff1c 	bl	80086a8 <__aeabi_dsub>
 801f870:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 801f874:	4592      	cmp	sl, r2
 801f876:	db02      	blt.n	801f87e <__ieee754_exp+0x26e>
 801f878:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801f87c:	e6e3      	b.n	801f646 <__ieee754_exp+0x36>
 801f87e:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 801f882:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801f886:	2200      	movs	r2, #0
 801f888:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 801f88c:	f7e9 f8c4 	bl	8008a18 <__aeabi_dmul>
 801f890:	e6d9      	b.n	801f646 <__ieee754_exp+0x36>
 801f892:	bf00      	nop
 801f894:	f3af 8000 	nop.w
 801f898:	fefa39ef 	.word	0xfefa39ef
 801f89c:	40862e42 	.word	0x40862e42
 801f8a0:	d52d3051 	.word	0xd52d3051
 801f8a4:	c0874910 	.word	0xc0874910
 801f8a8:	72bea4d0 	.word	0x72bea4d0
 801f8ac:	3e663769 	.word	0x3e663769
 801f8b0:	c5d26bf1 	.word	0xc5d26bf1
 801f8b4:	3ebbbd41 	.word	0x3ebbbd41
 801f8b8:	af25de2c 	.word	0xaf25de2c
 801f8bc:	3f11566a 	.word	0x3f11566a
 801f8c0:	16bebd93 	.word	0x16bebd93
 801f8c4:	3f66c16c 	.word	0x3f66c16c
 801f8c8:	5555553e 	.word	0x5555553e
 801f8cc:	3fc55555 	.word	0x3fc55555
 801f8d0:	652b82fe 	.word	0x652b82fe
 801f8d4:	3ff71547 	.word	0x3ff71547
 801f8d8:	fee00000 	.word	0xfee00000
 801f8dc:	3fe62e42 	.word	0x3fe62e42
 801f8e0:	35793c76 	.word	0x35793c76
 801f8e4:	3dea39ef 	.word	0x3dea39ef
 801f8e8:	8800759c 	.word	0x8800759c
 801f8ec:	7e37e43c 	.word	0x7e37e43c
 801f8f0:	40862e41 	.word	0x40862e41
 801f8f4:	7fefffff 	.word	0x7fefffff
 801f8f8:	3fd62e42 	.word	0x3fd62e42
 801f8fc:	3ff0a2b1 	.word	0x3ff0a2b1
 801f900:	08021950 	.word	0x08021950
 801f904:	08021960 	.word	0x08021960
 801f908:	3ff00000 	.word	0x3ff00000
 801f90c:	08021940 	.word	0x08021940
 801f910:	3defffff 	.word	0x3defffff
 801f914:	00000000 	.word	0x00000000

0801f918 <__ieee754_log10>:
 801f918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f91c:	ec55 4b10 	vmov	r4, r5, d0
 801f920:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 801f924:	462b      	mov	r3, r5
 801f926:	da2f      	bge.n	801f988 <__ieee754_log10+0x70>
 801f928:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 801f92c:	4322      	orrs	r2, r4
 801f92e:	d109      	bne.n	801f944 <__ieee754_log10+0x2c>
 801f930:	493b      	ldr	r1, [pc, #236]	; (801fa20 <__ieee754_log10+0x108>)
 801f932:	2200      	movs	r2, #0
 801f934:	2300      	movs	r3, #0
 801f936:	2000      	movs	r0, #0
 801f938:	f7e9 f998 	bl	8008c6c <__aeabi_ddiv>
 801f93c:	ec41 0b10 	vmov	d0, r0, r1
 801f940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f944:	2d00      	cmp	r5, #0
 801f946:	da09      	bge.n	801f95c <__ieee754_log10+0x44>
 801f948:	ee10 2a10 	vmov	r2, s0
 801f94c:	ee10 0a10 	vmov	r0, s0
 801f950:	4629      	mov	r1, r5
 801f952:	f7e8 fea9 	bl	80086a8 <__aeabi_dsub>
 801f956:	2200      	movs	r2, #0
 801f958:	2300      	movs	r3, #0
 801f95a:	e7ed      	b.n	801f938 <__ieee754_log10+0x20>
 801f95c:	4b31      	ldr	r3, [pc, #196]	; (801fa24 <__ieee754_log10+0x10c>)
 801f95e:	2200      	movs	r2, #0
 801f960:	4629      	mov	r1, r5
 801f962:	ee10 0a10 	vmov	r0, s0
 801f966:	f7e9 f857 	bl	8008a18 <__aeabi_dmul>
 801f96a:	f06f 0235 	mvn.w	r2, #53	; 0x35
 801f96e:	4604      	mov	r4, r0
 801f970:	460d      	mov	r5, r1
 801f972:	460b      	mov	r3, r1
 801f974:	492c      	ldr	r1, [pc, #176]	; (801fa28 <__ieee754_log10+0x110>)
 801f976:	428b      	cmp	r3, r1
 801f978:	dd08      	ble.n	801f98c <__ieee754_log10+0x74>
 801f97a:	4622      	mov	r2, r4
 801f97c:	462b      	mov	r3, r5
 801f97e:	4620      	mov	r0, r4
 801f980:	4629      	mov	r1, r5
 801f982:	f7e8 fe93 	bl	80086ac <__adddf3>
 801f986:	e7d9      	b.n	801f93c <__ieee754_log10+0x24>
 801f988:	2200      	movs	r2, #0
 801f98a:	e7f3      	b.n	801f974 <__ieee754_log10+0x5c>
 801f98c:	1518      	asrs	r0, r3, #20
 801f98e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 801f992:	4410      	add	r0, r2
 801f994:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 801f998:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801f99c:	f3c3 0813 	ubfx	r8, r3, #0, #20
 801f9a0:	f7e8 ffd0 	bl	8008944 <__aeabi_i2d>
 801f9a4:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 801f9a8:	3303      	adds	r3, #3
 801f9aa:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 801f9ae:	ec45 4b10 	vmov	d0, r4, r5
 801f9b2:	4606      	mov	r6, r0
 801f9b4:	460f      	mov	r7, r1
 801f9b6:	f000 fe1f 	bl	80205f8 <__ieee754_log>
 801f9ba:	a313      	add	r3, pc, #76	; (adr r3, 801fa08 <__ieee754_log10+0xf0>)
 801f9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f9c0:	4630      	mov	r0, r6
 801f9c2:	4639      	mov	r1, r7
 801f9c4:	ec59 8b10 	vmov	r8, r9, d0
 801f9c8:	f7e9 f826 	bl	8008a18 <__aeabi_dmul>
 801f9cc:	a310      	add	r3, pc, #64	; (adr r3, 801fa10 <__ieee754_log10+0xf8>)
 801f9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f9d2:	4604      	mov	r4, r0
 801f9d4:	460d      	mov	r5, r1
 801f9d6:	4640      	mov	r0, r8
 801f9d8:	4649      	mov	r1, r9
 801f9da:	f7e9 f81d 	bl	8008a18 <__aeabi_dmul>
 801f9de:	4602      	mov	r2, r0
 801f9e0:	460b      	mov	r3, r1
 801f9e2:	4620      	mov	r0, r4
 801f9e4:	4629      	mov	r1, r5
 801f9e6:	f7e8 fe61 	bl	80086ac <__adddf3>
 801f9ea:	a30b      	add	r3, pc, #44	; (adr r3, 801fa18 <__ieee754_log10+0x100>)
 801f9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f9f0:	4604      	mov	r4, r0
 801f9f2:	460d      	mov	r5, r1
 801f9f4:	4630      	mov	r0, r6
 801f9f6:	4639      	mov	r1, r7
 801f9f8:	f7e9 f80e 	bl	8008a18 <__aeabi_dmul>
 801f9fc:	4602      	mov	r2, r0
 801f9fe:	460b      	mov	r3, r1
 801fa00:	4620      	mov	r0, r4
 801fa02:	4629      	mov	r1, r5
 801fa04:	e7bd      	b.n	801f982 <__ieee754_log10+0x6a>
 801fa06:	bf00      	nop
 801fa08:	11f12b36 	.word	0x11f12b36
 801fa0c:	3d59fef3 	.word	0x3d59fef3
 801fa10:	1526e50e 	.word	0x1526e50e
 801fa14:	3fdbcb7b 	.word	0x3fdbcb7b
 801fa18:	509f6000 	.word	0x509f6000
 801fa1c:	3fd34413 	.word	0x3fd34413
 801fa20:	c3500000 	.word	0xc3500000
 801fa24:	43500000 	.word	0x43500000
 801fa28:	7fefffff 	.word	0x7fefffff
 801fa2c:	00000000 	.word	0x00000000

0801fa30 <__ieee754_pow>:
 801fa30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa34:	ed2d 8b06 	vpush	{d8-d10}
 801fa38:	b089      	sub	sp, #36	; 0x24
 801fa3a:	ed8d 1b00 	vstr	d1, [sp]
 801fa3e:	e9dd 2900 	ldrd	r2, r9, [sp]
 801fa42:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801fa46:	ea58 0102 	orrs.w	r1, r8, r2
 801fa4a:	ec57 6b10 	vmov	r6, r7, d0
 801fa4e:	d115      	bne.n	801fa7c <__ieee754_pow+0x4c>
 801fa50:	19b3      	adds	r3, r6, r6
 801fa52:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801fa56:	4152      	adcs	r2, r2
 801fa58:	4299      	cmp	r1, r3
 801fa5a:	4b89      	ldr	r3, [pc, #548]	; (801fc80 <__ieee754_pow+0x250>)
 801fa5c:	4193      	sbcs	r3, r2
 801fa5e:	f080 84d1 	bcs.w	8020404 <__ieee754_pow+0x9d4>
 801fa62:	e9dd 2300 	ldrd	r2, r3, [sp]
 801fa66:	4630      	mov	r0, r6
 801fa68:	4639      	mov	r1, r7
 801fa6a:	f7e8 fe1f 	bl	80086ac <__adddf3>
 801fa6e:	ec41 0b10 	vmov	d0, r0, r1
 801fa72:	b009      	add	sp, #36	; 0x24
 801fa74:	ecbd 8b06 	vpop	{d8-d10}
 801fa78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa7c:	4b81      	ldr	r3, [pc, #516]	; (801fc84 <__ieee754_pow+0x254>)
 801fa7e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801fa82:	429c      	cmp	r4, r3
 801fa84:	ee10 aa10 	vmov	sl, s0
 801fa88:	463d      	mov	r5, r7
 801fa8a:	dc06      	bgt.n	801fa9a <__ieee754_pow+0x6a>
 801fa8c:	d101      	bne.n	801fa92 <__ieee754_pow+0x62>
 801fa8e:	2e00      	cmp	r6, #0
 801fa90:	d1e7      	bne.n	801fa62 <__ieee754_pow+0x32>
 801fa92:	4598      	cmp	r8, r3
 801fa94:	dc01      	bgt.n	801fa9a <__ieee754_pow+0x6a>
 801fa96:	d10f      	bne.n	801fab8 <__ieee754_pow+0x88>
 801fa98:	b172      	cbz	r2, 801fab8 <__ieee754_pow+0x88>
 801fa9a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801fa9e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801faa2:	ea55 050a 	orrs.w	r5, r5, sl
 801faa6:	d1dc      	bne.n	801fa62 <__ieee754_pow+0x32>
 801faa8:	e9dd 3200 	ldrd	r3, r2, [sp]
 801faac:	18db      	adds	r3, r3, r3
 801faae:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801fab2:	4152      	adcs	r2, r2
 801fab4:	429d      	cmp	r5, r3
 801fab6:	e7d0      	b.n	801fa5a <__ieee754_pow+0x2a>
 801fab8:	2d00      	cmp	r5, #0
 801faba:	da3b      	bge.n	801fb34 <__ieee754_pow+0x104>
 801fabc:	4b72      	ldr	r3, [pc, #456]	; (801fc88 <__ieee754_pow+0x258>)
 801fabe:	4598      	cmp	r8, r3
 801fac0:	dc51      	bgt.n	801fb66 <__ieee754_pow+0x136>
 801fac2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801fac6:	4598      	cmp	r8, r3
 801fac8:	f340 84ab 	ble.w	8020422 <__ieee754_pow+0x9f2>
 801facc:	ea4f 5328 	mov.w	r3, r8, asr #20
 801fad0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801fad4:	2b14      	cmp	r3, #20
 801fad6:	dd0f      	ble.n	801faf8 <__ieee754_pow+0xc8>
 801fad8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801fadc:	fa22 f103 	lsr.w	r1, r2, r3
 801fae0:	fa01 f303 	lsl.w	r3, r1, r3
 801fae4:	4293      	cmp	r3, r2
 801fae6:	f040 849c 	bne.w	8020422 <__ieee754_pow+0x9f2>
 801faea:	f001 0101 	and.w	r1, r1, #1
 801faee:	f1c1 0302 	rsb	r3, r1, #2
 801faf2:	9304      	str	r3, [sp, #16]
 801faf4:	b182      	cbz	r2, 801fb18 <__ieee754_pow+0xe8>
 801faf6:	e05f      	b.n	801fbb8 <__ieee754_pow+0x188>
 801faf8:	2a00      	cmp	r2, #0
 801fafa:	d15b      	bne.n	801fbb4 <__ieee754_pow+0x184>
 801fafc:	f1c3 0314 	rsb	r3, r3, #20
 801fb00:	fa48 f103 	asr.w	r1, r8, r3
 801fb04:	fa01 f303 	lsl.w	r3, r1, r3
 801fb08:	4543      	cmp	r3, r8
 801fb0a:	f040 8487 	bne.w	802041c <__ieee754_pow+0x9ec>
 801fb0e:	f001 0101 	and.w	r1, r1, #1
 801fb12:	f1c1 0302 	rsb	r3, r1, #2
 801fb16:	9304      	str	r3, [sp, #16]
 801fb18:	4b5c      	ldr	r3, [pc, #368]	; (801fc8c <__ieee754_pow+0x25c>)
 801fb1a:	4598      	cmp	r8, r3
 801fb1c:	d132      	bne.n	801fb84 <__ieee754_pow+0x154>
 801fb1e:	f1b9 0f00 	cmp.w	r9, #0
 801fb22:	f280 8477 	bge.w	8020414 <__ieee754_pow+0x9e4>
 801fb26:	4959      	ldr	r1, [pc, #356]	; (801fc8c <__ieee754_pow+0x25c>)
 801fb28:	4632      	mov	r2, r6
 801fb2a:	463b      	mov	r3, r7
 801fb2c:	2000      	movs	r0, #0
 801fb2e:	f7e9 f89d 	bl	8008c6c <__aeabi_ddiv>
 801fb32:	e79c      	b.n	801fa6e <__ieee754_pow+0x3e>
 801fb34:	2300      	movs	r3, #0
 801fb36:	9304      	str	r3, [sp, #16]
 801fb38:	2a00      	cmp	r2, #0
 801fb3a:	d13d      	bne.n	801fbb8 <__ieee754_pow+0x188>
 801fb3c:	4b51      	ldr	r3, [pc, #324]	; (801fc84 <__ieee754_pow+0x254>)
 801fb3e:	4598      	cmp	r8, r3
 801fb40:	d1ea      	bne.n	801fb18 <__ieee754_pow+0xe8>
 801fb42:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801fb46:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801fb4a:	ea53 030a 	orrs.w	r3, r3, sl
 801fb4e:	f000 8459 	beq.w	8020404 <__ieee754_pow+0x9d4>
 801fb52:	4b4f      	ldr	r3, [pc, #316]	; (801fc90 <__ieee754_pow+0x260>)
 801fb54:	429c      	cmp	r4, r3
 801fb56:	dd08      	ble.n	801fb6a <__ieee754_pow+0x13a>
 801fb58:	f1b9 0f00 	cmp.w	r9, #0
 801fb5c:	f2c0 8456 	blt.w	802040c <__ieee754_pow+0x9dc>
 801fb60:	e9dd 0100 	ldrd	r0, r1, [sp]
 801fb64:	e783      	b.n	801fa6e <__ieee754_pow+0x3e>
 801fb66:	2302      	movs	r3, #2
 801fb68:	e7e5      	b.n	801fb36 <__ieee754_pow+0x106>
 801fb6a:	f1b9 0f00 	cmp.w	r9, #0
 801fb6e:	f04f 0000 	mov.w	r0, #0
 801fb72:	f04f 0100 	mov.w	r1, #0
 801fb76:	f6bf af7a 	bge.w	801fa6e <__ieee754_pow+0x3e>
 801fb7a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801fb7e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801fb82:	e774      	b.n	801fa6e <__ieee754_pow+0x3e>
 801fb84:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801fb88:	d106      	bne.n	801fb98 <__ieee754_pow+0x168>
 801fb8a:	4632      	mov	r2, r6
 801fb8c:	463b      	mov	r3, r7
 801fb8e:	4630      	mov	r0, r6
 801fb90:	4639      	mov	r1, r7
 801fb92:	f7e8 ff41 	bl	8008a18 <__aeabi_dmul>
 801fb96:	e76a      	b.n	801fa6e <__ieee754_pow+0x3e>
 801fb98:	4b3e      	ldr	r3, [pc, #248]	; (801fc94 <__ieee754_pow+0x264>)
 801fb9a:	4599      	cmp	r9, r3
 801fb9c:	d10c      	bne.n	801fbb8 <__ieee754_pow+0x188>
 801fb9e:	2d00      	cmp	r5, #0
 801fba0:	db0a      	blt.n	801fbb8 <__ieee754_pow+0x188>
 801fba2:	ec47 6b10 	vmov	d0, r6, r7
 801fba6:	b009      	add	sp, #36	; 0x24
 801fba8:	ecbd 8b06 	vpop	{d8-d10}
 801fbac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fbb0:	f7ff bc54 	b.w	801f45c <__ieee754_sqrt>
 801fbb4:	2300      	movs	r3, #0
 801fbb6:	9304      	str	r3, [sp, #16]
 801fbb8:	ec47 6b10 	vmov	d0, r6, r7
 801fbbc:	f000 fc62 	bl	8020484 <fabs>
 801fbc0:	ec51 0b10 	vmov	r0, r1, d0
 801fbc4:	f1ba 0f00 	cmp.w	sl, #0
 801fbc8:	d129      	bne.n	801fc1e <__ieee754_pow+0x1ee>
 801fbca:	b124      	cbz	r4, 801fbd6 <__ieee754_pow+0x1a6>
 801fbcc:	4b2f      	ldr	r3, [pc, #188]	; (801fc8c <__ieee754_pow+0x25c>)
 801fbce:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801fbd2:	429a      	cmp	r2, r3
 801fbd4:	d123      	bne.n	801fc1e <__ieee754_pow+0x1ee>
 801fbd6:	f1b9 0f00 	cmp.w	r9, #0
 801fbda:	da05      	bge.n	801fbe8 <__ieee754_pow+0x1b8>
 801fbdc:	4602      	mov	r2, r0
 801fbde:	460b      	mov	r3, r1
 801fbe0:	2000      	movs	r0, #0
 801fbe2:	492a      	ldr	r1, [pc, #168]	; (801fc8c <__ieee754_pow+0x25c>)
 801fbe4:	f7e9 f842 	bl	8008c6c <__aeabi_ddiv>
 801fbe8:	2d00      	cmp	r5, #0
 801fbea:	f6bf af40 	bge.w	801fa6e <__ieee754_pow+0x3e>
 801fbee:	9b04      	ldr	r3, [sp, #16]
 801fbf0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801fbf4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801fbf8:	431c      	orrs	r4, r3
 801fbfa:	d108      	bne.n	801fc0e <__ieee754_pow+0x1de>
 801fbfc:	4602      	mov	r2, r0
 801fbfe:	460b      	mov	r3, r1
 801fc00:	4610      	mov	r0, r2
 801fc02:	4619      	mov	r1, r3
 801fc04:	f7e8 fd50 	bl	80086a8 <__aeabi_dsub>
 801fc08:	4602      	mov	r2, r0
 801fc0a:	460b      	mov	r3, r1
 801fc0c:	e78f      	b.n	801fb2e <__ieee754_pow+0xfe>
 801fc0e:	9b04      	ldr	r3, [sp, #16]
 801fc10:	2b01      	cmp	r3, #1
 801fc12:	f47f af2c 	bne.w	801fa6e <__ieee754_pow+0x3e>
 801fc16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801fc1a:	4619      	mov	r1, r3
 801fc1c:	e727      	b.n	801fa6e <__ieee754_pow+0x3e>
 801fc1e:	0feb      	lsrs	r3, r5, #31
 801fc20:	3b01      	subs	r3, #1
 801fc22:	9306      	str	r3, [sp, #24]
 801fc24:	9a06      	ldr	r2, [sp, #24]
 801fc26:	9b04      	ldr	r3, [sp, #16]
 801fc28:	4313      	orrs	r3, r2
 801fc2a:	d102      	bne.n	801fc32 <__ieee754_pow+0x202>
 801fc2c:	4632      	mov	r2, r6
 801fc2e:	463b      	mov	r3, r7
 801fc30:	e7e6      	b.n	801fc00 <__ieee754_pow+0x1d0>
 801fc32:	4b19      	ldr	r3, [pc, #100]	; (801fc98 <__ieee754_pow+0x268>)
 801fc34:	4598      	cmp	r8, r3
 801fc36:	f340 80fb 	ble.w	801fe30 <__ieee754_pow+0x400>
 801fc3a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801fc3e:	4598      	cmp	r8, r3
 801fc40:	4b13      	ldr	r3, [pc, #76]	; (801fc90 <__ieee754_pow+0x260>)
 801fc42:	dd0c      	ble.n	801fc5e <__ieee754_pow+0x22e>
 801fc44:	429c      	cmp	r4, r3
 801fc46:	dc0f      	bgt.n	801fc68 <__ieee754_pow+0x238>
 801fc48:	f1b9 0f00 	cmp.w	r9, #0
 801fc4c:	da0f      	bge.n	801fc6e <__ieee754_pow+0x23e>
 801fc4e:	2000      	movs	r0, #0
 801fc50:	b009      	add	sp, #36	; 0x24
 801fc52:	ecbd 8b06 	vpop	{d8-d10}
 801fc56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc5a:	f000 bcc2 	b.w	80205e2 <__math_oflow>
 801fc5e:	429c      	cmp	r4, r3
 801fc60:	dbf2      	blt.n	801fc48 <__ieee754_pow+0x218>
 801fc62:	4b0a      	ldr	r3, [pc, #40]	; (801fc8c <__ieee754_pow+0x25c>)
 801fc64:	429c      	cmp	r4, r3
 801fc66:	dd19      	ble.n	801fc9c <__ieee754_pow+0x26c>
 801fc68:	f1b9 0f00 	cmp.w	r9, #0
 801fc6c:	dcef      	bgt.n	801fc4e <__ieee754_pow+0x21e>
 801fc6e:	2000      	movs	r0, #0
 801fc70:	b009      	add	sp, #36	; 0x24
 801fc72:	ecbd 8b06 	vpop	{d8-d10}
 801fc76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc7a:	f000 bca9 	b.w	80205d0 <__math_uflow>
 801fc7e:	bf00      	nop
 801fc80:	fff00000 	.word	0xfff00000
 801fc84:	7ff00000 	.word	0x7ff00000
 801fc88:	433fffff 	.word	0x433fffff
 801fc8c:	3ff00000 	.word	0x3ff00000
 801fc90:	3fefffff 	.word	0x3fefffff
 801fc94:	3fe00000 	.word	0x3fe00000
 801fc98:	41e00000 	.word	0x41e00000
 801fc9c:	4b60      	ldr	r3, [pc, #384]	; (801fe20 <__ieee754_pow+0x3f0>)
 801fc9e:	2200      	movs	r2, #0
 801fca0:	f7e8 fd02 	bl	80086a8 <__aeabi_dsub>
 801fca4:	a354      	add	r3, pc, #336	; (adr r3, 801fdf8 <__ieee754_pow+0x3c8>)
 801fca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fcaa:	4604      	mov	r4, r0
 801fcac:	460d      	mov	r5, r1
 801fcae:	f7e8 feb3 	bl	8008a18 <__aeabi_dmul>
 801fcb2:	a353      	add	r3, pc, #332	; (adr r3, 801fe00 <__ieee754_pow+0x3d0>)
 801fcb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fcb8:	4606      	mov	r6, r0
 801fcba:	460f      	mov	r7, r1
 801fcbc:	4620      	mov	r0, r4
 801fcbe:	4629      	mov	r1, r5
 801fcc0:	f7e8 feaa 	bl	8008a18 <__aeabi_dmul>
 801fcc4:	4b57      	ldr	r3, [pc, #348]	; (801fe24 <__ieee754_pow+0x3f4>)
 801fcc6:	4682      	mov	sl, r0
 801fcc8:	468b      	mov	fp, r1
 801fcca:	2200      	movs	r2, #0
 801fccc:	4620      	mov	r0, r4
 801fcce:	4629      	mov	r1, r5
 801fcd0:	f7e8 fea2 	bl	8008a18 <__aeabi_dmul>
 801fcd4:	4602      	mov	r2, r0
 801fcd6:	460b      	mov	r3, r1
 801fcd8:	a14b      	add	r1, pc, #300	; (adr r1, 801fe08 <__ieee754_pow+0x3d8>)
 801fcda:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fcde:	f7e8 fce3 	bl	80086a8 <__aeabi_dsub>
 801fce2:	4622      	mov	r2, r4
 801fce4:	462b      	mov	r3, r5
 801fce6:	f7e8 fe97 	bl	8008a18 <__aeabi_dmul>
 801fcea:	4602      	mov	r2, r0
 801fcec:	460b      	mov	r3, r1
 801fcee:	2000      	movs	r0, #0
 801fcf0:	494d      	ldr	r1, [pc, #308]	; (801fe28 <__ieee754_pow+0x3f8>)
 801fcf2:	f7e8 fcd9 	bl	80086a8 <__aeabi_dsub>
 801fcf6:	4622      	mov	r2, r4
 801fcf8:	4680      	mov	r8, r0
 801fcfa:	4689      	mov	r9, r1
 801fcfc:	462b      	mov	r3, r5
 801fcfe:	4620      	mov	r0, r4
 801fd00:	4629      	mov	r1, r5
 801fd02:	f7e8 fe89 	bl	8008a18 <__aeabi_dmul>
 801fd06:	4602      	mov	r2, r0
 801fd08:	460b      	mov	r3, r1
 801fd0a:	4640      	mov	r0, r8
 801fd0c:	4649      	mov	r1, r9
 801fd0e:	f7e8 fe83 	bl	8008a18 <__aeabi_dmul>
 801fd12:	a33f      	add	r3, pc, #252	; (adr r3, 801fe10 <__ieee754_pow+0x3e0>)
 801fd14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd18:	f7e8 fe7e 	bl	8008a18 <__aeabi_dmul>
 801fd1c:	4602      	mov	r2, r0
 801fd1e:	460b      	mov	r3, r1
 801fd20:	4650      	mov	r0, sl
 801fd22:	4659      	mov	r1, fp
 801fd24:	f7e8 fcc0 	bl	80086a8 <__aeabi_dsub>
 801fd28:	4602      	mov	r2, r0
 801fd2a:	460b      	mov	r3, r1
 801fd2c:	4680      	mov	r8, r0
 801fd2e:	4689      	mov	r9, r1
 801fd30:	4630      	mov	r0, r6
 801fd32:	4639      	mov	r1, r7
 801fd34:	f7e8 fcba 	bl	80086ac <__adddf3>
 801fd38:	2000      	movs	r0, #0
 801fd3a:	4632      	mov	r2, r6
 801fd3c:	463b      	mov	r3, r7
 801fd3e:	4604      	mov	r4, r0
 801fd40:	460d      	mov	r5, r1
 801fd42:	f7e8 fcb1 	bl	80086a8 <__aeabi_dsub>
 801fd46:	4602      	mov	r2, r0
 801fd48:	460b      	mov	r3, r1
 801fd4a:	4640      	mov	r0, r8
 801fd4c:	4649      	mov	r1, r9
 801fd4e:	f7e8 fcab 	bl	80086a8 <__aeabi_dsub>
 801fd52:	9b04      	ldr	r3, [sp, #16]
 801fd54:	9a06      	ldr	r2, [sp, #24]
 801fd56:	3b01      	subs	r3, #1
 801fd58:	4313      	orrs	r3, r2
 801fd5a:	4682      	mov	sl, r0
 801fd5c:	468b      	mov	fp, r1
 801fd5e:	f040 81e7 	bne.w	8020130 <__ieee754_pow+0x700>
 801fd62:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801fe18 <__ieee754_pow+0x3e8>
 801fd66:	eeb0 8a47 	vmov.f32	s16, s14
 801fd6a:	eef0 8a67 	vmov.f32	s17, s15
 801fd6e:	e9dd 6700 	ldrd	r6, r7, [sp]
 801fd72:	2600      	movs	r6, #0
 801fd74:	4632      	mov	r2, r6
 801fd76:	463b      	mov	r3, r7
 801fd78:	e9dd 0100 	ldrd	r0, r1, [sp]
 801fd7c:	f7e8 fc94 	bl	80086a8 <__aeabi_dsub>
 801fd80:	4622      	mov	r2, r4
 801fd82:	462b      	mov	r3, r5
 801fd84:	f7e8 fe48 	bl	8008a18 <__aeabi_dmul>
 801fd88:	e9dd 2300 	ldrd	r2, r3, [sp]
 801fd8c:	4680      	mov	r8, r0
 801fd8e:	4689      	mov	r9, r1
 801fd90:	4650      	mov	r0, sl
 801fd92:	4659      	mov	r1, fp
 801fd94:	f7e8 fe40 	bl	8008a18 <__aeabi_dmul>
 801fd98:	4602      	mov	r2, r0
 801fd9a:	460b      	mov	r3, r1
 801fd9c:	4640      	mov	r0, r8
 801fd9e:	4649      	mov	r1, r9
 801fda0:	f7e8 fc84 	bl	80086ac <__adddf3>
 801fda4:	4632      	mov	r2, r6
 801fda6:	463b      	mov	r3, r7
 801fda8:	4680      	mov	r8, r0
 801fdaa:	4689      	mov	r9, r1
 801fdac:	4620      	mov	r0, r4
 801fdae:	4629      	mov	r1, r5
 801fdb0:	f7e8 fe32 	bl	8008a18 <__aeabi_dmul>
 801fdb4:	460b      	mov	r3, r1
 801fdb6:	4604      	mov	r4, r0
 801fdb8:	460d      	mov	r5, r1
 801fdba:	4602      	mov	r2, r0
 801fdbc:	4649      	mov	r1, r9
 801fdbe:	4640      	mov	r0, r8
 801fdc0:	f7e8 fc74 	bl	80086ac <__adddf3>
 801fdc4:	4b19      	ldr	r3, [pc, #100]	; (801fe2c <__ieee754_pow+0x3fc>)
 801fdc6:	4299      	cmp	r1, r3
 801fdc8:	ec45 4b19 	vmov	d9, r4, r5
 801fdcc:	4606      	mov	r6, r0
 801fdce:	460f      	mov	r7, r1
 801fdd0:	468b      	mov	fp, r1
 801fdd2:	f340 82f0 	ble.w	80203b6 <__ieee754_pow+0x986>
 801fdd6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801fdda:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801fdde:	4303      	orrs	r3, r0
 801fde0:	f000 81e4 	beq.w	80201ac <__ieee754_pow+0x77c>
 801fde4:	ec51 0b18 	vmov	r0, r1, d8
 801fde8:	2200      	movs	r2, #0
 801fdea:	2300      	movs	r3, #0
 801fdec:	f7e9 f886 	bl	8008efc <__aeabi_dcmplt>
 801fdf0:	3800      	subs	r0, #0
 801fdf2:	bf18      	it	ne
 801fdf4:	2001      	movne	r0, #1
 801fdf6:	e72b      	b.n	801fc50 <__ieee754_pow+0x220>
 801fdf8:	60000000 	.word	0x60000000
 801fdfc:	3ff71547 	.word	0x3ff71547
 801fe00:	f85ddf44 	.word	0xf85ddf44
 801fe04:	3e54ae0b 	.word	0x3e54ae0b
 801fe08:	55555555 	.word	0x55555555
 801fe0c:	3fd55555 	.word	0x3fd55555
 801fe10:	652b82fe 	.word	0x652b82fe
 801fe14:	3ff71547 	.word	0x3ff71547
 801fe18:	00000000 	.word	0x00000000
 801fe1c:	bff00000 	.word	0xbff00000
 801fe20:	3ff00000 	.word	0x3ff00000
 801fe24:	3fd00000 	.word	0x3fd00000
 801fe28:	3fe00000 	.word	0x3fe00000
 801fe2c:	408fffff 	.word	0x408fffff
 801fe30:	4bd5      	ldr	r3, [pc, #852]	; (8020188 <__ieee754_pow+0x758>)
 801fe32:	402b      	ands	r3, r5
 801fe34:	2200      	movs	r2, #0
 801fe36:	b92b      	cbnz	r3, 801fe44 <__ieee754_pow+0x414>
 801fe38:	4bd4      	ldr	r3, [pc, #848]	; (802018c <__ieee754_pow+0x75c>)
 801fe3a:	f7e8 fded 	bl	8008a18 <__aeabi_dmul>
 801fe3e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801fe42:	460c      	mov	r4, r1
 801fe44:	1523      	asrs	r3, r4, #20
 801fe46:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801fe4a:	4413      	add	r3, r2
 801fe4c:	9305      	str	r3, [sp, #20]
 801fe4e:	4bd0      	ldr	r3, [pc, #832]	; (8020190 <__ieee754_pow+0x760>)
 801fe50:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801fe54:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801fe58:	429c      	cmp	r4, r3
 801fe5a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801fe5e:	dd08      	ble.n	801fe72 <__ieee754_pow+0x442>
 801fe60:	4bcc      	ldr	r3, [pc, #816]	; (8020194 <__ieee754_pow+0x764>)
 801fe62:	429c      	cmp	r4, r3
 801fe64:	f340 8162 	ble.w	802012c <__ieee754_pow+0x6fc>
 801fe68:	9b05      	ldr	r3, [sp, #20]
 801fe6a:	3301      	adds	r3, #1
 801fe6c:	9305      	str	r3, [sp, #20]
 801fe6e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801fe72:	2400      	movs	r4, #0
 801fe74:	00e3      	lsls	r3, r4, #3
 801fe76:	9307      	str	r3, [sp, #28]
 801fe78:	4bc7      	ldr	r3, [pc, #796]	; (8020198 <__ieee754_pow+0x768>)
 801fe7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801fe7e:	ed93 7b00 	vldr	d7, [r3]
 801fe82:	4629      	mov	r1, r5
 801fe84:	ec53 2b17 	vmov	r2, r3, d7
 801fe88:	eeb0 9a47 	vmov.f32	s18, s14
 801fe8c:	eef0 9a67 	vmov.f32	s19, s15
 801fe90:	4682      	mov	sl, r0
 801fe92:	f7e8 fc09 	bl	80086a8 <__aeabi_dsub>
 801fe96:	4652      	mov	r2, sl
 801fe98:	4606      	mov	r6, r0
 801fe9a:	460f      	mov	r7, r1
 801fe9c:	462b      	mov	r3, r5
 801fe9e:	ec51 0b19 	vmov	r0, r1, d9
 801fea2:	f7e8 fc03 	bl	80086ac <__adddf3>
 801fea6:	4602      	mov	r2, r0
 801fea8:	460b      	mov	r3, r1
 801feaa:	2000      	movs	r0, #0
 801feac:	49bb      	ldr	r1, [pc, #748]	; (802019c <__ieee754_pow+0x76c>)
 801feae:	f7e8 fedd 	bl	8008c6c <__aeabi_ddiv>
 801feb2:	ec41 0b1a 	vmov	d10, r0, r1
 801feb6:	4602      	mov	r2, r0
 801feb8:	460b      	mov	r3, r1
 801feba:	4630      	mov	r0, r6
 801febc:	4639      	mov	r1, r7
 801febe:	f7e8 fdab 	bl	8008a18 <__aeabi_dmul>
 801fec2:	2300      	movs	r3, #0
 801fec4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801fec8:	9302      	str	r3, [sp, #8]
 801feca:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801fece:	46ab      	mov	fp, r5
 801fed0:	106d      	asrs	r5, r5, #1
 801fed2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801fed6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801feda:	ec41 0b18 	vmov	d8, r0, r1
 801fede:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801fee2:	2200      	movs	r2, #0
 801fee4:	4640      	mov	r0, r8
 801fee6:	4649      	mov	r1, r9
 801fee8:	4614      	mov	r4, r2
 801feea:	461d      	mov	r5, r3
 801feec:	f7e8 fd94 	bl	8008a18 <__aeabi_dmul>
 801fef0:	4602      	mov	r2, r0
 801fef2:	460b      	mov	r3, r1
 801fef4:	4630      	mov	r0, r6
 801fef6:	4639      	mov	r1, r7
 801fef8:	f7e8 fbd6 	bl	80086a8 <__aeabi_dsub>
 801fefc:	ec53 2b19 	vmov	r2, r3, d9
 801ff00:	4606      	mov	r6, r0
 801ff02:	460f      	mov	r7, r1
 801ff04:	4620      	mov	r0, r4
 801ff06:	4629      	mov	r1, r5
 801ff08:	f7e8 fbce 	bl	80086a8 <__aeabi_dsub>
 801ff0c:	4602      	mov	r2, r0
 801ff0e:	460b      	mov	r3, r1
 801ff10:	4650      	mov	r0, sl
 801ff12:	4659      	mov	r1, fp
 801ff14:	f7e8 fbc8 	bl	80086a8 <__aeabi_dsub>
 801ff18:	4642      	mov	r2, r8
 801ff1a:	464b      	mov	r3, r9
 801ff1c:	f7e8 fd7c 	bl	8008a18 <__aeabi_dmul>
 801ff20:	4602      	mov	r2, r0
 801ff22:	460b      	mov	r3, r1
 801ff24:	4630      	mov	r0, r6
 801ff26:	4639      	mov	r1, r7
 801ff28:	f7e8 fbbe 	bl	80086a8 <__aeabi_dsub>
 801ff2c:	ec53 2b1a 	vmov	r2, r3, d10
 801ff30:	f7e8 fd72 	bl	8008a18 <__aeabi_dmul>
 801ff34:	ec53 2b18 	vmov	r2, r3, d8
 801ff38:	ec41 0b19 	vmov	d9, r0, r1
 801ff3c:	ec51 0b18 	vmov	r0, r1, d8
 801ff40:	f7e8 fd6a 	bl	8008a18 <__aeabi_dmul>
 801ff44:	a37c      	add	r3, pc, #496	; (adr r3, 8020138 <__ieee754_pow+0x708>)
 801ff46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff4a:	4604      	mov	r4, r0
 801ff4c:	460d      	mov	r5, r1
 801ff4e:	f7e8 fd63 	bl	8008a18 <__aeabi_dmul>
 801ff52:	a37b      	add	r3, pc, #492	; (adr r3, 8020140 <__ieee754_pow+0x710>)
 801ff54:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff58:	f7e8 fba8 	bl	80086ac <__adddf3>
 801ff5c:	4622      	mov	r2, r4
 801ff5e:	462b      	mov	r3, r5
 801ff60:	f7e8 fd5a 	bl	8008a18 <__aeabi_dmul>
 801ff64:	a378      	add	r3, pc, #480	; (adr r3, 8020148 <__ieee754_pow+0x718>)
 801ff66:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff6a:	f7e8 fb9f 	bl	80086ac <__adddf3>
 801ff6e:	4622      	mov	r2, r4
 801ff70:	462b      	mov	r3, r5
 801ff72:	f7e8 fd51 	bl	8008a18 <__aeabi_dmul>
 801ff76:	a376      	add	r3, pc, #472	; (adr r3, 8020150 <__ieee754_pow+0x720>)
 801ff78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff7c:	f7e8 fb96 	bl	80086ac <__adddf3>
 801ff80:	4622      	mov	r2, r4
 801ff82:	462b      	mov	r3, r5
 801ff84:	f7e8 fd48 	bl	8008a18 <__aeabi_dmul>
 801ff88:	a373      	add	r3, pc, #460	; (adr r3, 8020158 <__ieee754_pow+0x728>)
 801ff8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff8e:	f7e8 fb8d 	bl	80086ac <__adddf3>
 801ff92:	4622      	mov	r2, r4
 801ff94:	462b      	mov	r3, r5
 801ff96:	f7e8 fd3f 	bl	8008a18 <__aeabi_dmul>
 801ff9a:	a371      	add	r3, pc, #452	; (adr r3, 8020160 <__ieee754_pow+0x730>)
 801ff9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ffa0:	f7e8 fb84 	bl	80086ac <__adddf3>
 801ffa4:	4622      	mov	r2, r4
 801ffa6:	4606      	mov	r6, r0
 801ffa8:	460f      	mov	r7, r1
 801ffaa:	462b      	mov	r3, r5
 801ffac:	4620      	mov	r0, r4
 801ffae:	4629      	mov	r1, r5
 801ffb0:	f7e8 fd32 	bl	8008a18 <__aeabi_dmul>
 801ffb4:	4602      	mov	r2, r0
 801ffb6:	460b      	mov	r3, r1
 801ffb8:	4630      	mov	r0, r6
 801ffba:	4639      	mov	r1, r7
 801ffbc:	f7e8 fd2c 	bl	8008a18 <__aeabi_dmul>
 801ffc0:	4642      	mov	r2, r8
 801ffc2:	4604      	mov	r4, r0
 801ffc4:	460d      	mov	r5, r1
 801ffc6:	464b      	mov	r3, r9
 801ffc8:	ec51 0b18 	vmov	r0, r1, d8
 801ffcc:	f7e8 fb6e 	bl	80086ac <__adddf3>
 801ffd0:	ec53 2b19 	vmov	r2, r3, d9
 801ffd4:	f7e8 fd20 	bl	8008a18 <__aeabi_dmul>
 801ffd8:	4622      	mov	r2, r4
 801ffda:	462b      	mov	r3, r5
 801ffdc:	f7e8 fb66 	bl	80086ac <__adddf3>
 801ffe0:	4642      	mov	r2, r8
 801ffe2:	4682      	mov	sl, r0
 801ffe4:	468b      	mov	fp, r1
 801ffe6:	464b      	mov	r3, r9
 801ffe8:	4640      	mov	r0, r8
 801ffea:	4649      	mov	r1, r9
 801ffec:	f7e8 fd14 	bl	8008a18 <__aeabi_dmul>
 801fff0:	4b6b      	ldr	r3, [pc, #428]	; (80201a0 <__ieee754_pow+0x770>)
 801fff2:	2200      	movs	r2, #0
 801fff4:	4606      	mov	r6, r0
 801fff6:	460f      	mov	r7, r1
 801fff8:	f7e8 fb58 	bl	80086ac <__adddf3>
 801fffc:	4652      	mov	r2, sl
 801fffe:	465b      	mov	r3, fp
 8020000:	f7e8 fb54 	bl	80086ac <__adddf3>
 8020004:	2000      	movs	r0, #0
 8020006:	4604      	mov	r4, r0
 8020008:	460d      	mov	r5, r1
 802000a:	4602      	mov	r2, r0
 802000c:	460b      	mov	r3, r1
 802000e:	4640      	mov	r0, r8
 8020010:	4649      	mov	r1, r9
 8020012:	f7e8 fd01 	bl	8008a18 <__aeabi_dmul>
 8020016:	4b62      	ldr	r3, [pc, #392]	; (80201a0 <__ieee754_pow+0x770>)
 8020018:	4680      	mov	r8, r0
 802001a:	4689      	mov	r9, r1
 802001c:	2200      	movs	r2, #0
 802001e:	4620      	mov	r0, r4
 8020020:	4629      	mov	r1, r5
 8020022:	f7e8 fb41 	bl	80086a8 <__aeabi_dsub>
 8020026:	4632      	mov	r2, r6
 8020028:	463b      	mov	r3, r7
 802002a:	f7e8 fb3d 	bl	80086a8 <__aeabi_dsub>
 802002e:	4602      	mov	r2, r0
 8020030:	460b      	mov	r3, r1
 8020032:	4650      	mov	r0, sl
 8020034:	4659      	mov	r1, fp
 8020036:	f7e8 fb37 	bl	80086a8 <__aeabi_dsub>
 802003a:	ec53 2b18 	vmov	r2, r3, d8
 802003e:	f7e8 fceb 	bl	8008a18 <__aeabi_dmul>
 8020042:	4622      	mov	r2, r4
 8020044:	4606      	mov	r6, r0
 8020046:	460f      	mov	r7, r1
 8020048:	462b      	mov	r3, r5
 802004a:	ec51 0b19 	vmov	r0, r1, d9
 802004e:	f7e8 fce3 	bl	8008a18 <__aeabi_dmul>
 8020052:	4602      	mov	r2, r0
 8020054:	460b      	mov	r3, r1
 8020056:	4630      	mov	r0, r6
 8020058:	4639      	mov	r1, r7
 802005a:	f7e8 fb27 	bl	80086ac <__adddf3>
 802005e:	4606      	mov	r6, r0
 8020060:	460f      	mov	r7, r1
 8020062:	4602      	mov	r2, r0
 8020064:	460b      	mov	r3, r1
 8020066:	4640      	mov	r0, r8
 8020068:	4649      	mov	r1, r9
 802006a:	f7e8 fb1f 	bl	80086ac <__adddf3>
 802006e:	a33e      	add	r3, pc, #248	; (adr r3, 8020168 <__ieee754_pow+0x738>)
 8020070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020074:	2000      	movs	r0, #0
 8020076:	4604      	mov	r4, r0
 8020078:	460d      	mov	r5, r1
 802007a:	f7e8 fccd 	bl	8008a18 <__aeabi_dmul>
 802007e:	4642      	mov	r2, r8
 8020080:	ec41 0b18 	vmov	d8, r0, r1
 8020084:	464b      	mov	r3, r9
 8020086:	4620      	mov	r0, r4
 8020088:	4629      	mov	r1, r5
 802008a:	f7e8 fb0d 	bl	80086a8 <__aeabi_dsub>
 802008e:	4602      	mov	r2, r0
 8020090:	460b      	mov	r3, r1
 8020092:	4630      	mov	r0, r6
 8020094:	4639      	mov	r1, r7
 8020096:	f7e8 fb07 	bl	80086a8 <__aeabi_dsub>
 802009a:	a335      	add	r3, pc, #212	; (adr r3, 8020170 <__ieee754_pow+0x740>)
 802009c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80200a0:	f7e8 fcba 	bl	8008a18 <__aeabi_dmul>
 80200a4:	a334      	add	r3, pc, #208	; (adr r3, 8020178 <__ieee754_pow+0x748>)
 80200a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80200aa:	4606      	mov	r6, r0
 80200ac:	460f      	mov	r7, r1
 80200ae:	4620      	mov	r0, r4
 80200b0:	4629      	mov	r1, r5
 80200b2:	f7e8 fcb1 	bl	8008a18 <__aeabi_dmul>
 80200b6:	4602      	mov	r2, r0
 80200b8:	460b      	mov	r3, r1
 80200ba:	4630      	mov	r0, r6
 80200bc:	4639      	mov	r1, r7
 80200be:	f7e8 faf5 	bl	80086ac <__adddf3>
 80200c2:	9a07      	ldr	r2, [sp, #28]
 80200c4:	4b37      	ldr	r3, [pc, #220]	; (80201a4 <__ieee754_pow+0x774>)
 80200c6:	4413      	add	r3, r2
 80200c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80200cc:	f7e8 faee 	bl	80086ac <__adddf3>
 80200d0:	4682      	mov	sl, r0
 80200d2:	9805      	ldr	r0, [sp, #20]
 80200d4:	468b      	mov	fp, r1
 80200d6:	f7e8 fc35 	bl	8008944 <__aeabi_i2d>
 80200da:	9a07      	ldr	r2, [sp, #28]
 80200dc:	4b32      	ldr	r3, [pc, #200]	; (80201a8 <__ieee754_pow+0x778>)
 80200de:	4413      	add	r3, r2
 80200e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80200e4:	4606      	mov	r6, r0
 80200e6:	460f      	mov	r7, r1
 80200e8:	4652      	mov	r2, sl
 80200ea:	465b      	mov	r3, fp
 80200ec:	ec51 0b18 	vmov	r0, r1, d8
 80200f0:	f7e8 fadc 	bl	80086ac <__adddf3>
 80200f4:	4642      	mov	r2, r8
 80200f6:	464b      	mov	r3, r9
 80200f8:	f7e8 fad8 	bl	80086ac <__adddf3>
 80200fc:	4632      	mov	r2, r6
 80200fe:	463b      	mov	r3, r7
 8020100:	f7e8 fad4 	bl	80086ac <__adddf3>
 8020104:	2000      	movs	r0, #0
 8020106:	4632      	mov	r2, r6
 8020108:	463b      	mov	r3, r7
 802010a:	4604      	mov	r4, r0
 802010c:	460d      	mov	r5, r1
 802010e:	f7e8 facb 	bl	80086a8 <__aeabi_dsub>
 8020112:	4642      	mov	r2, r8
 8020114:	464b      	mov	r3, r9
 8020116:	f7e8 fac7 	bl	80086a8 <__aeabi_dsub>
 802011a:	ec53 2b18 	vmov	r2, r3, d8
 802011e:	f7e8 fac3 	bl	80086a8 <__aeabi_dsub>
 8020122:	4602      	mov	r2, r0
 8020124:	460b      	mov	r3, r1
 8020126:	4650      	mov	r0, sl
 8020128:	4659      	mov	r1, fp
 802012a:	e610      	b.n	801fd4e <__ieee754_pow+0x31e>
 802012c:	2401      	movs	r4, #1
 802012e:	e6a1      	b.n	801fe74 <__ieee754_pow+0x444>
 8020130:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8020180 <__ieee754_pow+0x750>
 8020134:	e617      	b.n	801fd66 <__ieee754_pow+0x336>
 8020136:	bf00      	nop
 8020138:	4a454eef 	.word	0x4a454eef
 802013c:	3fca7e28 	.word	0x3fca7e28
 8020140:	93c9db65 	.word	0x93c9db65
 8020144:	3fcd864a 	.word	0x3fcd864a
 8020148:	a91d4101 	.word	0xa91d4101
 802014c:	3fd17460 	.word	0x3fd17460
 8020150:	518f264d 	.word	0x518f264d
 8020154:	3fd55555 	.word	0x3fd55555
 8020158:	db6fabff 	.word	0xdb6fabff
 802015c:	3fdb6db6 	.word	0x3fdb6db6
 8020160:	33333303 	.word	0x33333303
 8020164:	3fe33333 	.word	0x3fe33333
 8020168:	e0000000 	.word	0xe0000000
 802016c:	3feec709 	.word	0x3feec709
 8020170:	dc3a03fd 	.word	0xdc3a03fd
 8020174:	3feec709 	.word	0x3feec709
 8020178:	145b01f5 	.word	0x145b01f5
 802017c:	be3e2fe0 	.word	0xbe3e2fe0
 8020180:	00000000 	.word	0x00000000
 8020184:	3ff00000 	.word	0x3ff00000
 8020188:	7ff00000 	.word	0x7ff00000
 802018c:	43400000 	.word	0x43400000
 8020190:	0003988e 	.word	0x0003988e
 8020194:	000bb679 	.word	0x000bb679
 8020198:	08021970 	.word	0x08021970
 802019c:	3ff00000 	.word	0x3ff00000
 80201a0:	40080000 	.word	0x40080000
 80201a4:	08021990 	.word	0x08021990
 80201a8:	08021980 	.word	0x08021980
 80201ac:	a3b3      	add	r3, pc, #716	; (adr r3, 802047c <__ieee754_pow+0xa4c>)
 80201ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80201b2:	4640      	mov	r0, r8
 80201b4:	4649      	mov	r1, r9
 80201b6:	f7e8 fa79 	bl	80086ac <__adddf3>
 80201ba:	4622      	mov	r2, r4
 80201bc:	ec41 0b1a 	vmov	d10, r0, r1
 80201c0:	462b      	mov	r3, r5
 80201c2:	4630      	mov	r0, r6
 80201c4:	4639      	mov	r1, r7
 80201c6:	f7e8 fa6f 	bl	80086a8 <__aeabi_dsub>
 80201ca:	4602      	mov	r2, r0
 80201cc:	460b      	mov	r3, r1
 80201ce:	ec51 0b1a 	vmov	r0, r1, d10
 80201d2:	f7e8 feb1 	bl	8008f38 <__aeabi_dcmpgt>
 80201d6:	2800      	cmp	r0, #0
 80201d8:	f47f ae04 	bne.w	801fde4 <__ieee754_pow+0x3b4>
 80201dc:	4aa2      	ldr	r2, [pc, #648]	; (8020468 <__ieee754_pow+0xa38>)
 80201de:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80201e2:	4293      	cmp	r3, r2
 80201e4:	f340 8107 	ble.w	80203f6 <__ieee754_pow+0x9c6>
 80201e8:	151b      	asrs	r3, r3, #20
 80201ea:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80201ee:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80201f2:	fa4a fa03 	asr.w	sl, sl, r3
 80201f6:	44da      	add	sl, fp
 80201f8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80201fc:	489b      	ldr	r0, [pc, #620]	; (802046c <__ieee754_pow+0xa3c>)
 80201fe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8020202:	4108      	asrs	r0, r1
 8020204:	ea00 030a 	and.w	r3, r0, sl
 8020208:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 802020c:	f1c1 0114 	rsb	r1, r1, #20
 8020210:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8020214:	fa4a fa01 	asr.w	sl, sl, r1
 8020218:	f1bb 0f00 	cmp.w	fp, #0
 802021c:	f04f 0200 	mov.w	r2, #0
 8020220:	4620      	mov	r0, r4
 8020222:	4629      	mov	r1, r5
 8020224:	bfb8      	it	lt
 8020226:	f1ca 0a00 	rsblt	sl, sl, #0
 802022a:	f7e8 fa3d 	bl	80086a8 <__aeabi_dsub>
 802022e:	ec41 0b19 	vmov	d9, r0, r1
 8020232:	4642      	mov	r2, r8
 8020234:	464b      	mov	r3, r9
 8020236:	ec51 0b19 	vmov	r0, r1, d9
 802023a:	f7e8 fa37 	bl	80086ac <__adddf3>
 802023e:	a37a      	add	r3, pc, #488	; (adr r3, 8020428 <__ieee754_pow+0x9f8>)
 8020240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020244:	2000      	movs	r0, #0
 8020246:	4604      	mov	r4, r0
 8020248:	460d      	mov	r5, r1
 802024a:	f7e8 fbe5 	bl	8008a18 <__aeabi_dmul>
 802024e:	ec53 2b19 	vmov	r2, r3, d9
 8020252:	4606      	mov	r6, r0
 8020254:	460f      	mov	r7, r1
 8020256:	4620      	mov	r0, r4
 8020258:	4629      	mov	r1, r5
 802025a:	f7e8 fa25 	bl	80086a8 <__aeabi_dsub>
 802025e:	4602      	mov	r2, r0
 8020260:	460b      	mov	r3, r1
 8020262:	4640      	mov	r0, r8
 8020264:	4649      	mov	r1, r9
 8020266:	f7e8 fa1f 	bl	80086a8 <__aeabi_dsub>
 802026a:	a371      	add	r3, pc, #452	; (adr r3, 8020430 <__ieee754_pow+0xa00>)
 802026c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020270:	f7e8 fbd2 	bl	8008a18 <__aeabi_dmul>
 8020274:	a370      	add	r3, pc, #448	; (adr r3, 8020438 <__ieee754_pow+0xa08>)
 8020276:	e9d3 2300 	ldrd	r2, r3, [r3]
 802027a:	4680      	mov	r8, r0
 802027c:	4689      	mov	r9, r1
 802027e:	4620      	mov	r0, r4
 8020280:	4629      	mov	r1, r5
 8020282:	f7e8 fbc9 	bl	8008a18 <__aeabi_dmul>
 8020286:	4602      	mov	r2, r0
 8020288:	460b      	mov	r3, r1
 802028a:	4640      	mov	r0, r8
 802028c:	4649      	mov	r1, r9
 802028e:	f7e8 fa0d 	bl	80086ac <__adddf3>
 8020292:	4604      	mov	r4, r0
 8020294:	460d      	mov	r5, r1
 8020296:	4602      	mov	r2, r0
 8020298:	460b      	mov	r3, r1
 802029a:	4630      	mov	r0, r6
 802029c:	4639      	mov	r1, r7
 802029e:	f7e8 fa05 	bl	80086ac <__adddf3>
 80202a2:	4632      	mov	r2, r6
 80202a4:	463b      	mov	r3, r7
 80202a6:	4680      	mov	r8, r0
 80202a8:	4689      	mov	r9, r1
 80202aa:	f7e8 f9fd 	bl	80086a8 <__aeabi_dsub>
 80202ae:	4602      	mov	r2, r0
 80202b0:	460b      	mov	r3, r1
 80202b2:	4620      	mov	r0, r4
 80202b4:	4629      	mov	r1, r5
 80202b6:	f7e8 f9f7 	bl	80086a8 <__aeabi_dsub>
 80202ba:	4642      	mov	r2, r8
 80202bc:	4606      	mov	r6, r0
 80202be:	460f      	mov	r7, r1
 80202c0:	464b      	mov	r3, r9
 80202c2:	4640      	mov	r0, r8
 80202c4:	4649      	mov	r1, r9
 80202c6:	f7e8 fba7 	bl	8008a18 <__aeabi_dmul>
 80202ca:	a35d      	add	r3, pc, #372	; (adr r3, 8020440 <__ieee754_pow+0xa10>)
 80202cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80202d0:	4604      	mov	r4, r0
 80202d2:	460d      	mov	r5, r1
 80202d4:	f7e8 fba0 	bl	8008a18 <__aeabi_dmul>
 80202d8:	a35b      	add	r3, pc, #364	; (adr r3, 8020448 <__ieee754_pow+0xa18>)
 80202da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80202de:	f7e8 f9e3 	bl	80086a8 <__aeabi_dsub>
 80202e2:	4622      	mov	r2, r4
 80202e4:	462b      	mov	r3, r5
 80202e6:	f7e8 fb97 	bl	8008a18 <__aeabi_dmul>
 80202ea:	a359      	add	r3, pc, #356	; (adr r3, 8020450 <__ieee754_pow+0xa20>)
 80202ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80202f0:	f7e8 f9dc 	bl	80086ac <__adddf3>
 80202f4:	4622      	mov	r2, r4
 80202f6:	462b      	mov	r3, r5
 80202f8:	f7e8 fb8e 	bl	8008a18 <__aeabi_dmul>
 80202fc:	a356      	add	r3, pc, #344	; (adr r3, 8020458 <__ieee754_pow+0xa28>)
 80202fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020302:	f7e8 f9d1 	bl	80086a8 <__aeabi_dsub>
 8020306:	4622      	mov	r2, r4
 8020308:	462b      	mov	r3, r5
 802030a:	f7e8 fb85 	bl	8008a18 <__aeabi_dmul>
 802030e:	a354      	add	r3, pc, #336	; (adr r3, 8020460 <__ieee754_pow+0xa30>)
 8020310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020314:	f7e8 f9ca 	bl	80086ac <__adddf3>
 8020318:	4622      	mov	r2, r4
 802031a:	462b      	mov	r3, r5
 802031c:	f7e8 fb7c 	bl	8008a18 <__aeabi_dmul>
 8020320:	4602      	mov	r2, r0
 8020322:	460b      	mov	r3, r1
 8020324:	4640      	mov	r0, r8
 8020326:	4649      	mov	r1, r9
 8020328:	f7e8 f9be 	bl	80086a8 <__aeabi_dsub>
 802032c:	4604      	mov	r4, r0
 802032e:	460d      	mov	r5, r1
 8020330:	4602      	mov	r2, r0
 8020332:	460b      	mov	r3, r1
 8020334:	4640      	mov	r0, r8
 8020336:	4649      	mov	r1, r9
 8020338:	f7e8 fb6e 	bl	8008a18 <__aeabi_dmul>
 802033c:	2200      	movs	r2, #0
 802033e:	ec41 0b19 	vmov	d9, r0, r1
 8020342:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8020346:	4620      	mov	r0, r4
 8020348:	4629      	mov	r1, r5
 802034a:	f7e8 f9ad 	bl	80086a8 <__aeabi_dsub>
 802034e:	4602      	mov	r2, r0
 8020350:	460b      	mov	r3, r1
 8020352:	ec51 0b19 	vmov	r0, r1, d9
 8020356:	f7e8 fc89 	bl	8008c6c <__aeabi_ddiv>
 802035a:	4632      	mov	r2, r6
 802035c:	4604      	mov	r4, r0
 802035e:	460d      	mov	r5, r1
 8020360:	463b      	mov	r3, r7
 8020362:	4640      	mov	r0, r8
 8020364:	4649      	mov	r1, r9
 8020366:	f7e8 fb57 	bl	8008a18 <__aeabi_dmul>
 802036a:	4632      	mov	r2, r6
 802036c:	463b      	mov	r3, r7
 802036e:	f7e8 f99d 	bl	80086ac <__adddf3>
 8020372:	4602      	mov	r2, r0
 8020374:	460b      	mov	r3, r1
 8020376:	4620      	mov	r0, r4
 8020378:	4629      	mov	r1, r5
 802037a:	f7e8 f995 	bl	80086a8 <__aeabi_dsub>
 802037e:	4642      	mov	r2, r8
 8020380:	464b      	mov	r3, r9
 8020382:	f7e8 f991 	bl	80086a8 <__aeabi_dsub>
 8020386:	460b      	mov	r3, r1
 8020388:	4602      	mov	r2, r0
 802038a:	4939      	ldr	r1, [pc, #228]	; (8020470 <__ieee754_pow+0xa40>)
 802038c:	2000      	movs	r0, #0
 802038e:	f7e8 f98b 	bl	80086a8 <__aeabi_dsub>
 8020392:	ec41 0b10 	vmov	d0, r0, r1
 8020396:	ee10 3a90 	vmov	r3, s1
 802039a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 802039e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80203a2:	da2b      	bge.n	80203fc <__ieee754_pow+0x9cc>
 80203a4:	4650      	mov	r0, sl
 80203a6:	f000 f877 	bl	8020498 <scalbn>
 80203aa:	ec51 0b10 	vmov	r0, r1, d0
 80203ae:	ec53 2b18 	vmov	r2, r3, d8
 80203b2:	f7ff bbee 	b.w	801fb92 <__ieee754_pow+0x162>
 80203b6:	4b2f      	ldr	r3, [pc, #188]	; (8020474 <__ieee754_pow+0xa44>)
 80203b8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80203bc:	429e      	cmp	r6, r3
 80203be:	f77f af0d 	ble.w	80201dc <__ieee754_pow+0x7ac>
 80203c2:	4b2d      	ldr	r3, [pc, #180]	; (8020478 <__ieee754_pow+0xa48>)
 80203c4:	440b      	add	r3, r1
 80203c6:	4303      	orrs	r3, r0
 80203c8:	d009      	beq.n	80203de <__ieee754_pow+0x9ae>
 80203ca:	ec51 0b18 	vmov	r0, r1, d8
 80203ce:	2200      	movs	r2, #0
 80203d0:	2300      	movs	r3, #0
 80203d2:	f7e8 fd93 	bl	8008efc <__aeabi_dcmplt>
 80203d6:	3800      	subs	r0, #0
 80203d8:	bf18      	it	ne
 80203da:	2001      	movne	r0, #1
 80203dc:	e448      	b.n	801fc70 <__ieee754_pow+0x240>
 80203de:	4622      	mov	r2, r4
 80203e0:	462b      	mov	r3, r5
 80203e2:	f7e8 f961 	bl	80086a8 <__aeabi_dsub>
 80203e6:	4642      	mov	r2, r8
 80203e8:	464b      	mov	r3, r9
 80203ea:	f7e8 fd9b 	bl	8008f24 <__aeabi_dcmpge>
 80203ee:	2800      	cmp	r0, #0
 80203f0:	f43f aef4 	beq.w	80201dc <__ieee754_pow+0x7ac>
 80203f4:	e7e9      	b.n	80203ca <__ieee754_pow+0x99a>
 80203f6:	f04f 0a00 	mov.w	sl, #0
 80203fa:	e71a      	b.n	8020232 <__ieee754_pow+0x802>
 80203fc:	ec51 0b10 	vmov	r0, r1, d0
 8020400:	4619      	mov	r1, r3
 8020402:	e7d4      	b.n	80203ae <__ieee754_pow+0x97e>
 8020404:	491a      	ldr	r1, [pc, #104]	; (8020470 <__ieee754_pow+0xa40>)
 8020406:	2000      	movs	r0, #0
 8020408:	f7ff bb31 	b.w	801fa6e <__ieee754_pow+0x3e>
 802040c:	2000      	movs	r0, #0
 802040e:	2100      	movs	r1, #0
 8020410:	f7ff bb2d 	b.w	801fa6e <__ieee754_pow+0x3e>
 8020414:	4630      	mov	r0, r6
 8020416:	4639      	mov	r1, r7
 8020418:	f7ff bb29 	b.w	801fa6e <__ieee754_pow+0x3e>
 802041c:	9204      	str	r2, [sp, #16]
 802041e:	f7ff bb7b 	b.w	801fb18 <__ieee754_pow+0xe8>
 8020422:	2300      	movs	r3, #0
 8020424:	f7ff bb65 	b.w	801faf2 <__ieee754_pow+0xc2>
 8020428:	00000000 	.word	0x00000000
 802042c:	3fe62e43 	.word	0x3fe62e43
 8020430:	fefa39ef 	.word	0xfefa39ef
 8020434:	3fe62e42 	.word	0x3fe62e42
 8020438:	0ca86c39 	.word	0x0ca86c39
 802043c:	be205c61 	.word	0xbe205c61
 8020440:	72bea4d0 	.word	0x72bea4d0
 8020444:	3e663769 	.word	0x3e663769
 8020448:	c5d26bf1 	.word	0xc5d26bf1
 802044c:	3ebbbd41 	.word	0x3ebbbd41
 8020450:	af25de2c 	.word	0xaf25de2c
 8020454:	3f11566a 	.word	0x3f11566a
 8020458:	16bebd93 	.word	0x16bebd93
 802045c:	3f66c16c 	.word	0x3f66c16c
 8020460:	5555553e 	.word	0x5555553e
 8020464:	3fc55555 	.word	0x3fc55555
 8020468:	3fe00000 	.word	0x3fe00000
 802046c:	fff00000 	.word	0xfff00000
 8020470:	3ff00000 	.word	0x3ff00000
 8020474:	4090cbff 	.word	0x4090cbff
 8020478:	3f6f3400 	.word	0x3f6f3400
 802047c:	652b82fe 	.word	0x652b82fe
 8020480:	3c971547 	.word	0x3c971547

08020484 <fabs>:
 8020484:	ec51 0b10 	vmov	r0, r1, d0
 8020488:	ee10 2a10 	vmov	r2, s0
 802048c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8020490:	ec43 2b10 	vmov	d0, r2, r3
 8020494:	4770      	bx	lr
	...

08020498 <scalbn>:
 8020498:	b570      	push	{r4, r5, r6, lr}
 802049a:	ec55 4b10 	vmov	r4, r5, d0
 802049e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80204a2:	4606      	mov	r6, r0
 80204a4:	462b      	mov	r3, r5
 80204a6:	b999      	cbnz	r1, 80204d0 <scalbn+0x38>
 80204a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80204ac:	4323      	orrs	r3, r4
 80204ae:	d03f      	beq.n	8020530 <scalbn+0x98>
 80204b0:	4b35      	ldr	r3, [pc, #212]	; (8020588 <scalbn+0xf0>)
 80204b2:	4629      	mov	r1, r5
 80204b4:	ee10 0a10 	vmov	r0, s0
 80204b8:	2200      	movs	r2, #0
 80204ba:	f7e8 faad 	bl	8008a18 <__aeabi_dmul>
 80204be:	4b33      	ldr	r3, [pc, #204]	; (802058c <scalbn+0xf4>)
 80204c0:	429e      	cmp	r6, r3
 80204c2:	4604      	mov	r4, r0
 80204c4:	460d      	mov	r5, r1
 80204c6:	da10      	bge.n	80204ea <scalbn+0x52>
 80204c8:	a327      	add	r3, pc, #156	; (adr r3, 8020568 <scalbn+0xd0>)
 80204ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80204ce:	e01f      	b.n	8020510 <scalbn+0x78>
 80204d0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80204d4:	4291      	cmp	r1, r2
 80204d6:	d10c      	bne.n	80204f2 <scalbn+0x5a>
 80204d8:	ee10 2a10 	vmov	r2, s0
 80204dc:	4620      	mov	r0, r4
 80204de:	4629      	mov	r1, r5
 80204e0:	f7e8 f8e4 	bl	80086ac <__adddf3>
 80204e4:	4604      	mov	r4, r0
 80204e6:	460d      	mov	r5, r1
 80204e8:	e022      	b.n	8020530 <scalbn+0x98>
 80204ea:	460b      	mov	r3, r1
 80204ec:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80204f0:	3936      	subs	r1, #54	; 0x36
 80204f2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80204f6:	4296      	cmp	r6, r2
 80204f8:	dd0d      	ble.n	8020516 <scalbn+0x7e>
 80204fa:	2d00      	cmp	r5, #0
 80204fc:	a11c      	add	r1, pc, #112	; (adr r1, 8020570 <scalbn+0xd8>)
 80204fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020502:	da02      	bge.n	802050a <scalbn+0x72>
 8020504:	a11c      	add	r1, pc, #112	; (adr r1, 8020578 <scalbn+0xe0>)
 8020506:	e9d1 0100 	ldrd	r0, r1, [r1]
 802050a:	a319      	add	r3, pc, #100	; (adr r3, 8020570 <scalbn+0xd8>)
 802050c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020510:	f7e8 fa82 	bl	8008a18 <__aeabi_dmul>
 8020514:	e7e6      	b.n	80204e4 <scalbn+0x4c>
 8020516:	1872      	adds	r2, r6, r1
 8020518:	f240 71fe 	movw	r1, #2046	; 0x7fe
 802051c:	428a      	cmp	r2, r1
 802051e:	dcec      	bgt.n	80204fa <scalbn+0x62>
 8020520:	2a00      	cmp	r2, #0
 8020522:	dd08      	ble.n	8020536 <scalbn+0x9e>
 8020524:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8020528:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802052c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8020530:	ec45 4b10 	vmov	d0, r4, r5
 8020534:	bd70      	pop	{r4, r5, r6, pc}
 8020536:	f112 0f35 	cmn.w	r2, #53	; 0x35
 802053a:	da08      	bge.n	802054e <scalbn+0xb6>
 802053c:	2d00      	cmp	r5, #0
 802053e:	a10a      	add	r1, pc, #40	; (adr r1, 8020568 <scalbn+0xd0>)
 8020540:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020544:	dac0      	bge.n	80204c8 <scalbn+0x30>
 8020546:	a10e      	add	r1, pc, #56	; (adr r1, 8020580 <scalbn+0xe8>)
 8020548:	e9d1 0100 	ldrd	r0, r1, [r1]
 802054c:	e7bc      	b.n	80204c8 <scalbn+0x30>
 802054e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8020552:	3236      	adds	r2, #54	; 0x36
 8020554:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8020558:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 802055c:	4620      	mov	r0, r4
 802055e:	4b0c      	ldr	r3, [pc, #48]	; (8020590 <scalbn+0xf8>)
 8020560:	2200      	movs	r2, #0
 8020562:	e7d5      	b.n	8020510 <scalbn+0x78>
 8020564:	f3af 8000 	nop.w
 8020568:	c2f8f359 	.word	0xc2f8f359
 802056c:	01a56e1f 	.word	0x01a56e1f
 8020570:	8800759c 	.word	0x8800759c
 8020574:	7e37e43c 	.word	0x7e37e43c
 8020578:	8800759c 	.word	0x8800759c
 802057c:	fe37e43c 	.word	0xfe37e43c
 8020580:	c2f8f359 	.word	0xc2f8f359
 8020584:	81a56e1f 	.word	0x81a56e1f
 8020588:	43500000 	.word	0x43500000
 802058c:	ffff3cb0 	.word	0xffff3cb0
 8020590:	3c900000 	.word	0x3c900000

08020594 <with_errno>:
 8020594:	b570      	push	{r4, r5, r6, lr}
 8020596:	4604      	mov	r4, r0
 8020598:	460d      	mov	r5, r1
 802059a:	4616      	mov	r6, r2
 802059c:	f7fb faa8 	bl	801baf0 <__errno>
 80205a0:	4629      	mov	r1, r5
 80205a2:	6006      	str	r6, [r0, #0]
 80205a4:	4620      	mov	r0, r4
 80205a6:	bd70      	pop	{r4, r5, r6, pc}

080205a8 <xflow>:
 80205a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80205aa:	4614      	mov	r4, r2
 80205ac:	461d      	mov	r5, r3
 80205ae:	b108      	cbz	r0, 80205b4 <xflow+0xc>
 80205b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80205b4:	e9cd 2300 	strd	r2, r3, [sp]
 80205b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80205bc:	4620      	mov	r0, r4
 80205be:	4629      	mov	r1, r5
 80205c0:	f7e8 fa2a 	bl	8008a18 <__aeabi_dmul>
 80205c4:	2222      	movs	r2, #34	; 0x22
 80205c6:	b003      	add	sp, #12
 80205c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80205cc:	f7ff bfe2 	b.w	8020594 <with_errno>

080205d0 <__math_uflow>:
 80205d0:	b508      	push	{r3, lr}
 80205d2:	2200      	movs	r2, #0
 80205d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80205d8:	f7ff ffe6 	bl	80205a8 <xflow>
 80205dc:	ec41 0b10 	vmov	d0, r0, r1
 80205e0:	bd08      	pop	{r3, pc}

080205e2 <__math_oflow>:
 80205e2:	b508      	push	{r3, lr}
 80205e4:	2200      	movs	r2, #0
 80205e6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80205ea:	f7ff ffdd 	bl	80205a8 <xflow>
 80205ee:	ec41 0b10 	vmov	d0, r0, r1
 80205f2:	bd08      	pop	{r3, pc}
 80205f4:	0000      	movs	r0, r0
	...

080205f8 <__ieee754_log>:
 80205f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205fc:	ec51 0b10 	vmov	r0, r1, d0
 8020600:	ed2d 8b04 	vpush	{d8-d9}
 8020604:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8020608:	b083      	sub	sp, #12
 802060a:	460d      	mov	r5, r1
 802060c:	da29      	bge.n	8020662 <__ieee754_log+0x6a>
 802060e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8020612:	4303      	orrs	r3, r0
 8020614:	ee10 2a10 	vmov	r2, s0
 8020618:	d10c      	bne.n	8020634 <__ieee754_log+0x3c>
 802061a:	49cf      	ldr	r1, [pc, #828]	; (8020958 <__ieee754_log+0x360>)
 802061c:	2200      	movs	r2, #0
 802061e:	2300      	movs	r3, #0
 8020620:	2000      	movs	r0, #0
 8020622:	f7e8 fb23 	bl	8008c6c <__aeabi_ddiv>
 8020626:	ec41 0b10 	vmov	d0, r0, r1
 802062a:	b003      	add	sp, #12
 802062c:	ecbd 8b04 	vpop	{d8-d9}
 8020630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020634:	2900      	cmp	r1, #0
 8020636:	da05      	bge.n	8020644 <__ieee754_log+0x4c>
 8020638:	460b      	mov	r3, r1
 802063a:	f7e8 f835 	bl	80086a8 <__aeabi_dsub>
 802063e:	2200      	movs	r2, #0
 8020640:	2300      	movs	r3, #0
 8020642:	e7ee      	b.n	8020622 <__ieee754_log+0x2a>
 8020644:	4bc5      	ldr	r3, [pc, #788]	; (802095c <__ieee754_log+0x364>)
 8020646:	2200      	movs	r2, #0
 8020648:	f7e8 f9e6 	bl	8008a18 <__aeabi_dmul>
 802064c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8020650:	460d      	mov	r5, r1
 8020652:	4ac3      	ldr	r2, [pc, #780]	; (8020960 <__ieee754_log+0x368>)
 8020654:	4295      	cmp	r5, r2
 8020656:	dd06      	ble.n	8020666 <__ieee754_log+0x6e>
 8020658:	4602      	mov	r2, r0
 802065a:	460b      	mov	r3, r1
 802065c:	f7e8 f826 	bl	80086ac <__adddf3>
 8020660:	e7e1      	b.n	8020626 <__ieee754_log+0x2e>
 8020662:	2300      	movs	r3, #0
 8020664:	e7f5      	b.n	8020652 <__ieee754_log+0x5a>
 8020666:	152c      	asrs	r4, r5, #20
 8020668:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 802066c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8020670:	441c      	add	r4, r3
 8020672:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8020676:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 802067a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802067e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8020682:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8020686:	ea42 0105 	orr.w	r1, r2, r5
 802068a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 802068e:	2200      	movs	r2, #0
 8020690:	4bb4      	ldr	r3, [pc, #720]	; (8020964 <__ieee754_log+0x36c>)
 8020692:	f7e8 f809 	bl	80086a8 <__aeabi_dsub>
 8020696:	1cab      	adds	r3, r5, #2
 8020698:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802069c:	2b02      	cmp	r3, #2
 802069e:	4682      	mov	sl, r0
 80206a0:	468b      	mov	fp, r1
 80206a2:	f04f 0200 	mov.w	r2, #0
 80206a6:	dc53      	bgt.n	8020750 <__ieee754_log+0x158>
 80206a8:	2300      	movs	r3, #0
 80206aa:	f7e8 fc1d 	bl	8008ee8 <__aeabi_dcmpeq>
 80206ae:	b1d0      	cbz	r0, 80206e6 <__ieee754_log+0xee>
 80206b0:	2c00      	cmp	r4, #0
 80206b2:	f000 8122 	beq.w	80208fa <__ieee754_log+0x302>
 80206b6:	4620      	mov	r0, r4
 80206b8:	f7e8 f944 	bl	8008944 <__aeabi_i2d>
 80206bc:	a390      	add	r3, pc, #576	; (adr r3, 8020900 <__ieee754_log+0x308>)
 80206be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80206c2:	4606      	mov	r6, r0
 80206c4:	460f      	mov	r7, r1
 80206c6:	f7e8 f9a7 	bl	8008a18 <__aeabi_dmul>
 80206ca:	a38f      	add	r3, pc, #572	; (adr r3, 8020908 <__ieee754_log+0x310>)
 80206cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80206d0:	4604      	mov	r4, r0
 80206d2:	460d      	mov	r5, r1
 80206d4:	4630      	mov	r0, r6
 80206d6:	4639      	mov	r1, r7
 80206d8:	f7e8 f99e 	bl	8008a18 <__aeabi_dmul>
 80206dc:	4602      	mov	r2, r0
 80206de:	460b      	mov	r3, r1
 80206e0:	4620      	mov	r0, r4
 80206e2:	4629      	mov	r1, r5
 80206e4:	e7ba      	b.n	802065c <__ieee754_log+0x64>
 80206e6:	a38a      	add	r3, pc, #552	; (adr r3, 8020910 <__ieee754_log+0x318>)
 80206e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80206ec:	4650      	mov	r0, sl
 80206ee:	4659      	mov	r1, fp
 80206f0:	f7e8 f992 	bl	8008a18 <__aeabi_dmul>
 80206f4:	4602      	mov	r2, r0
 80206f6:	460b      	mov	r3, r1
 80206f8:	2000      	movs	r0, #0
 80206fa:	499b      	ldr	r1, [pc, #620]	; (8020968 <__ieee754_log+0x370>)
 80206fc:	f7e7 ffd4 	bl	80086a8 <__aeabi_dsub>
 8020700:	4652      	mov	r2, sl
 8020702:	4606      	mov	r6, r0
 8020704:	460f      	mov	r7, r1
 8020706:	465b      	mov	r3, fp
 8020708:	4650      	mov	r0, sl
 802070a:	4659      	mov	r1, fp
 802070c:	f7e8 f984 	bl	8008a18 <__aeabi_dmul>
 8020710:	4602      	mov	r2, r0
 8020712:	460b      	mov	r3, r1
 8020714:	4630      	mov	r0, r6
 8020716:	4639      	mov	r1, r7
 8020718:	f7e8 f97e 	bl	8008a18 <__aeabi_dmul>
 802071c:	4606      	mov	r6, r0
 802071e:	460f      	mov	r7, r1
 8020720:	b914      	cbnz	r4, 8020728 <__ieee754_log+0x130>
 8020722:	4632      	mov	r2, r6
 8020724:	463b      	mov	r3, r7
 8020726:	e0a2      	b.n	802086e <__ieee754_log+0x276>
 8020728:	4620      	mov	r0, r4
 802072a:	f7e8 f90b 	bl	8008944 <__aeabi_i2d>
 802072e:	a374      	add	r3, pc, #464	; (adr r3, 8020900 <__ieee754_log+0x308>)
 8020730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020734:	4680      	mov	r8, r0
 8020736:	4689      	mov	r9, r1
 8020738:	f7e8 f96e 	bl	8008a18 <__aeabi_dmul>
 802073c:	a372      	add	r3, pc, #456	; (adr r3, 8020908 <__ieee754_log+0x310>)
 802073e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020742:	4604      	mov	r4, r0
 8020744:	460d      	mov	r5, r1
 8020746:	4640      	mov	r0, r8
 8020748:	4649      	mov	r1, r9
 802074a:	f7e8 f965 	bl	8008a18 <__aeabi_dmul>
 802074e:	e0a7      	b.n	80208a0 <__ieee754_log+0x2a8>
 8020750:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8020754:	f7e7 ffaa 	bl	80086ac <__adddf3>
 8020758:	4602      	mov	r2, r0
 802075a:	460b      	mov	r3, r1
 802075c:	4650      	mov	r0, sl
 802075e:	4659      	mov	r1, fp
 8020760:	f7e8 fa84 	bl	8008c6c <__aeabi_ddiv>
 8020764:	ec41 0b18 	vmov	d8, r0, r1
 8020768:	4620      	mov	r0, r4
 802076a:	f7e8 f8eb 	bl	8008944 <__aeabi_i2d>
 802076e:	ec53 2b18 	vmov	r2, r3, d8
 8020772:	ec41 0b19 	vmov	d9, r0, r1
 8020776:	ec51 0b18 	vmov	r0, r1, d8
 802077a:	f7e8 f94d 	bl	8008a18 <__aeabi_dmul>
 802077e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8020782:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8020786:	9301      	str	r3, [sp, #4]
 8020788:	4602      	mov	r2, r0
 802078a:	460b      	mov	r3, r1
 802078c:	4680      	mov	r8, r0
 802078e:	4689      	mov	r9, r1
 8020790:	f7e8 f942 	bl	8008a18 <__aeabi_dmul>
 8020794:	a360      	add	r3, pc, #384	; (adr r3, 8020918 <__ieee754_log+0x320>)
 8020796:	e9d3 2300 	ldrd	r2, r3, [r3]
 802079a:	4606      	mov	r6, r0
 802079c:	460f      	mov	r7, r1
 802079e:	f7e8 f93b 	bl	8008a18 <__aeabi_dmul>
 80207a2:	a35f      	add	r3, pc, #380	; (adr r3, 8020920 <__ieee754_log+0x328>)
 80207a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80207a8:	f7e7 ff80 	bl	80086ac <__adddf3>
 80207ac:	4632      	mov	r2, r6
 80207ae:	463b      	mov	r3, r7
 80207b0:	f7e8 f932 	bl	8008a18 <__aeabi_dmul>
 80207b4:	a35c      	add	r3, pc, #368	; (adr r3, 8020928 <__ieee754_log+0x330>)
 80207b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80207ba:	f7e7 ff77 	bl	80086ac <__adddf3>
 80207be:	4632      	mov	r2, r6
 80207c0:	463b      	mov	r3, r7
 80207c2:	f7e8 f929 	bl	8008a18 <__aeabi_dmul>
 80207c6:	a35a      	add	r3, pc, #360	; (adr r3, 8020930 <__ieee754_log+0x338>)
 80207c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80207cc:	f7e7 ff6e 	bl	80086ac <__adddf3>
 80207d0:	4642      	mov	r2, r8
 80207d2:	464b      	mov	r3, r9
 80207d4:	f7e8 f920 	bl	8008a18 <__aeabi_dmul>
 80207d8:	a357      	add	r3, pc, #348	; (adr r3, 8020938 <__ieee754_log+0x340>)
 80207da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80207de:	4680      	mov	r8, r0
 80207e0:	4689      	mov	r9, r1
 80207e2:	4630      	mov	r0, r6
 80207e4:	4639      	mov	r1, r7
 80207e6:	f7e8 f917 	bl	8008a18 <__aeabi_dmul>
 80207ea:	a355      	add	r3, pc, #340	; (adr r3, 8020940 <__ieee754_log+0x348>)
 80207ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80207f0:	f7e7 ff5c 	bl	80086ac <__adddf3>
 80207f4:	4632      	mov	r2, r6
 80207f6:	463b      	mov	r3, r7
 80207f8:	f7e8 f90e 	bl	8008a18 <__aeabi_dmul>
 80207fc:	a352      	add	r3, pc, #328	; (adr r3, 8020948 <__ieee754_log+0x350>)
 80207fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020802:	f7e7 ff53 	bl	80086ac <__adddf3>
 8020806:	4632      	mov	r2, r6
 8020808:	463b      	mov	r3, r7
 802080a:	f7e8 f905 	bl	8008a18 <__aeabi_dmul>
 802080e:	460b      	mov	r3, r1
 8020810:	4602      	mov	r2, r0
 8020812:	4649      	mov	r1, r9
 8020814:	4640      	mov	r0, r8
 8020816:	f7e7 ff49 	bl	80086ac <__adddf3>
 802081a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 802081e:	9b01      	ldr	r3, [sp, #4]
 8020820:	3551      	adds	r5, #81	; 0x51
 8020822:	431d      	orrs	r5, r3
 8020824:	2d00      	cmp	r5, #0
 8020826:	4680      	mov	r8, r0
 8020828:	4689      	mov	r9, r1
 802082a:	dd48      	ble.n	80208be <__ieee754_log+0x2c6>
 802082c:	4b4e      	ldr	r3, [pc, #312]	; (8020968 <__ieee754_log+0x370>)
 802082e:	2200      	movs	r2, #0
 8020830:	4650      	mov	r0, sl
 8020832:	4659      	mov	r1, fp
 8020834:	f7e8 f8f0 	bl	8008a18 <__aeabi_dmul>
 8020838:	4652      	mov	r2, sl
 802083a:	465b      	mov	r3, fp
 802083c:	f7e8 f8ec 	bl	8008a18 <__aeabi_dmul>
 8020840:	4602      	mov	r2, r0
 8020842:	460b      	mov	r3, r1
 8020844:	4606      	mov	r6, r0
 8020846:	460f      	mov	r7, r1
 8020848:	4640      	mov	r0, r8
 802084a:	4649      	mov	r1, r9
 802084c:	f7e7 ff2e 	bl	80086ac <__adddf3>
 8020850:	ec53 2b18 	vmov	r2, r3, d8
 8020854:	f7e8 f8e0 	bl	8008a18 <__aeabi_dmul>
 8020858:	4680      	mov	r8, r0
 802085a:	4689      	mov	r9, r1
 802085c:	b964      	cbnz	r4, 8020878 <__ieee754_log+0x280>
 802085e:	4602      	mov	r2, r0
 8020860:	460b      	mov	r3, r1
 8020862:	4630      	mov	r0, r6
 8020864:	4639      	mov	r1, r7
 8020866:	f7e7 ff1f 	bl	80086a8 <__aeabi_dsub>
 802086a:	4602      	mov	r2, r0
 802086c:	460b      	mov	r3, r1
 802086e:	4650      	mov	r0, sl
 8020870:	4659      	mov	r1, fp
 8020872:	f7e7 ff19 	bl	80086a8 <__aeabi_dsub>
 8020876:	e6d6      	b.n	8020626 <__ieee754_log+0x2e>
 8020878:	a321      	add	r3, pc, #132	; (adr r3, 8020900 <__ieee754_log+0x308>)
 802087a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802087e:	ec51 0b19 	vmov	r0, r1, d9
 8020882:	f7e8 f8c9 	bl	8008a18 <__aeabi_dmul>
 8020886:	a320      	add	r3, pc, #128	; (adr r3, 8020908 <__ieee754_log+0x310>)
 8020888:	e9d3 2300 	ldrd	r2, r3, [r3]
 802088c:	4604      	mov	r4, r0
 802088e:	460d      	mov	r5, r1
 8020890:	ec51 0b19 	vmov	r0, r1, d9
 8020894:	f7e8 f8c0 	bl	8008a18 <__aeabi_dmul>
 8020898:	4642      	mov	r2, r8
 802089a:	464b      	mov	r3, r9
 802089c:	f7e7 ff06 	bl	80086ac <__adddf3>
 80208a0:	4602      	mov	r2, r0
 80208a2:	460b      	mov	r3, r1
 80208a4:	4630      	mov	r0, r6
 80208a6:	4639      	mov	r1, r7
 80208a8:	f7e7 fefe 	bl	80086a8 <__aeabi_dsub>
 80208ac:	4652      	mov	r2, sl
 80208ae:	465b      	mov	r3, fp
 80208b0:	f7e7 fefa 	bl	80086a8 <__aeabi_dsub>
 80208b4:	4602      	mov	r2, r0
 80208b6:	460b      	mov	r3, r1
 80208b8:	4620      	mov	r0, r4
 80208ba:	4629      	mov	r1, r5
 80208bc:	e7d9      	b.n	8020872 <__ieee754_log+0x27a>
 80208be:	4602      	mov	r2, r0
 80208c0:	460b      	mov	r3, r1
 80208c2:	4650      	mov	r0, sl
 80208c4:	4659      	mov	r1, fp
 80208c6:	f7e7 feef 	bl	80086a8 <__aeabi_dsub>
 80208ca:	ec53 2b18 	vmov	r2, r3, d8
 80208ce:	f7e8 f8a3 	bl	8008a18 <__aeabi_dmul>
 80208d2:	4606      	mov	r6, r0
 80208d4:	460f      	mov	r7, r1
 80208d6:	2c00      	cmp	r4, #0
 80208d8:	f43f af23 	beq.w	8020722 <__ieee754_log+0x12a>
 80208dc:	a308      	add	r3, pc, #32	; (adr r3, 8020900 <__ieee754_log+0x308>)
 80208de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80208e2:	ec51 0b19 	vmov	r0, r1, d9
 80208e6:	f7e8 f897 	bl	8008a18 <__aeabi_dmul>
 80208ea:	a307      	add	r3, pc, #28	; (adr r3, 8020908 <__ieee754_log+0x310>)
 80208ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80208f0:	4604      	mov	r4, r0
 80208f2:	460d      	mov	r5, r1
 80208f4:	ec51 0b19 	vmov	r0, r1, d9
 80208f8:	e727      	b.n	802074a <__ieee754_log+0x152>
 80208fa:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8020950 <__ieee754_log+0x358>
 80208fe:	e694      	b.n	802062a <__ieee754_log+0x32>
 8020900:	fee00000 	.word	0xfee00000
 8020904:	3fe62e42 	.word	0x3fe62e42
 8020908:	35793c76 	.word	0x35793c76
 802090c:	3dea39ef 	.word	0x3dea39ef
 8020910:	55555555 	.word	0x55555555
 8020914:	3fd55555 	.word	0x3fd55555
 8020918:	df3e5244 	.word	0xdf3e5244
 802091c:	3fc2f112 	.word	0x3fc2f112
 8020920:	96cb03de 	.word	0x96cb03de
 8020924:	3fc74664 	.word	0x3fc74664
 8020928:	94229359 	.word	0x94229359
 802092c:	3fd24924 	.word	0x3fd24924
 8020930:	55555593 	.word	0x55555593
 8020934:	3fe55555 	.word	0x3fe55555
 8020938:	d078c69f 	.word	0xd078c69f
 802093c:	3fc39a09 	.word	0x3fc39a09
 8020940:	1d8e78af 	.word	0x1d8e78af
 8020944:	3fcc71c5 	.word	0x3fcc71c5
 8020948:	9997fa04 	.word	0x9997fa04
 802094c:	3fd99999 	.word	0x3fd99999
	...
 8020958:	c3500000 	.word	0xc3500000
 802095c:	43500000 	.word	0x43500000
 8020960:	7fefffff 	.word	0x7fefffff
 8020964:	3ff00000 	.word	0x3ff00000
 8020968:	3fe00000 	.word	0x3fe00000

0802096c <_init>:
 802096c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802096e:	bf00      	nop
 8020970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020972:	bc08      	pop	{r3}
 8020974:	469e      	mov	lr, r3
 8020976:	4770      	bx	lr

08020978 <_fini>:
 8020978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802097a:	bf00      	nop
 802097c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802097e:	bc08      	pop	{r3}
 8020980:	469e      	mov	lr, r3
 8020982:	4770      	bx	lr
